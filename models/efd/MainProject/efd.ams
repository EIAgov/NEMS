## ams_version=1.0

Model Main_efd {
	Procedure WriteDebugfile {
		Body: {
			 put efdaim_debugfile;
			
			 !display {rELNOX0le(INOXP | ord(INOXP) <= NOX_GRP('1')).ShadowPrice   } where decimals:=5;
			 display {rELNOX0le(INOXP | ord(INOXP) <= NOX_GRP('1')).ShadowPrice decimals:=5  }  ;
			
			 ! write(UF_DBG,1026) CURIYR,CURITR,ROW_NOX,INOX,SOLVAL(1),SOLVAL(2),SOLVAL(4),prc
			
			! display {prc(cyr)| } where decimals = 5;
			
			 !display {prc(cyr) } where decimals = 5;
			
			 putclose efdaim_debugfile;
			
			
			
			
			 !for INOXP | (ord(INOXP) <= NOX_GRP('1')) do
			                	!IF (EMRFNA(NoxRegion_Element(INOXP),cyr) > 0) THEN
			                		!prc(cyr) := rELNOX0le(INOXP).ShadowPrice * 1000;
			                	!endif;
			                !endfor;
			
			                !for SO2Region Do
			                      !IF (EMRFSA(cyr,SO2Region) > 0) THEN
			                		!prc(cyr) := rSULFURle(SO2Region).ShadowPrice * 1000;
			                      !endif;
			                !endfor;
			
			                !for nHGCODE Do
			                	!if (EMEL_QHG(nHGCODE,cyr) < 100) and (rMERCURYle(nHGCODE).ShadowPrice > 0) then
			                		!prc(cyr) := rMERCURYle(nHGCODE).ShadowPrice * 1000;
			                	!endif;
			                !endfor;
		}
		File efdaim_debugfile {
			Name: "..\\efdaim_debug.txt";
			Device: Disk;
			Mode: replace;
		}
	}
	DeclarationSection Model_Declaration {
		Set SafetyVariables_ {
			SubsetOf: AllVariables;
			Definition: LP_safety_valve_variables * AllVariables;
		}
		Set NonSafetyVariables_ {
			SubsetOf: AllVariables;
			Definition: AllVariables - SafetyVariables_;
		}
		Set BenchmarkingConstraintList {
			SubsetOf: AllConstraints;
			Definition: data { rCONCLeq, rCONNGeq, rGENCLeq, rGENNGeq };
		}
		Set CPPConstraintList {
			SubsetOf: AllConstraints;
			Definition: data { rCO2QNRle };
		}
		Set TranRule2ConstraintList {
			SubsetOf: AllConstraints;
			Definition: data { rMVSO2le, rSULFURCRle };
		}
		Set ActiveConstraints {
			SubsetOf: AllConstraints;
			Definition: {
				!if ( Curcalyr(1) < 2014 ) then
				!  allConstraints-BenchmarkingConstraintList-TranRule2ConstraintList-CPPConstraintList
				!Elseif (curcalyr(1) < 2015) then
				!  allConstraints-TranRule2ConstraintList-CPPConstraintList
				!Elseif (curcalyr(1) >= 2015 AND curcalyr(1) <= 2017) then
				!  allConstraints-CPPConstraintList
				!elseif (curcalyr(1) > 2017 AND curcalyr(1) < 2022) then
				!  allConstraints-BenchmarkingConstraintList-CPPConstraintList
				!else
				   allConstraints;
				!endif;
			}
		}
		Set DisabledConstraints {
			SubsetOf: AllConstraints;
			Definition: {
				allConstraints-activeConstraints;
			}
		}
		MathematicalProgram EFD_WithoutSafety {
			Objective: EFDCOSTS;
			Direction: minimize;
			Constraints: ActiveConstraints;
			Variables: NonSafetyVariables_;
			Type: LP;
		}
		MathematicalProgram EFD_WithSafety {
			Objective: EFDCOSTS;
			Direction: minimize;
			Constraints: ActiveConstraints;
			Variables: AllVariables;
			Type: LP;
		}
		Set Run_time_option_identifiers {
			SubsetOf: AllIdentifiers;
			Definition: run_time_options*allIdentifiers;
		}
		Set Coeff_Read_Parameters {
			SubsetOf: AllIdentifiers;
			Definition: cpass_parameter_declare*allIdentifiers;
		}
	}
	DeclarationSection Run_time_options {
		StringParameter sDataYearFile;
		Set M1_ {
			SubsetOf: Integers;
			Index: M1;
			Definition: {
				{1}
			}
		}
		Parameter CURCALYR {
			IndexDomain: M1;
			InitialData: 2018;
		}
		Parameter CURITR {
			IndexDomain: M1;
			InitialData: 2;
		}
		Parameter AIMEFDBG {
			Text: "Aimms Debug indicator. if =1, then write cplex mps files and all solution output";
			Range: integer;
		}
		Parameter EMMBENCH {
			Text: {
				"Runtime option for benchmarking constraints. 1 regular, 2: loosen a little in years 2 and 3; 3 loosen alot"
			}
			Range: integer;
		}
		Parameter EMMBMSW {
			Text: {
				"Runtime option for benchmarking constraints. 1 regular, 2: loosen a little in years 2 and 3; 3 loosen alot"
			}
			Range: integer;
			Definition: EMMBENCH;
		}
		Parameter AB32SW {
			Text: "Runtime option to include (1) or exclude (0) California AB32 or SB32 cap on co2 emissions";
			Range: integer;
		}
		Parameter RUN45Q {
			Text: "Runtime option";
			Range: integer;
		}
		File OutToNEMS {
			Name: OutToNEMS_FileName;
			Device: Disk;
			Mode: replace;
		}
		StringParameter OutToNEMS_FileName {
			Text: "Name of output file to write results back to NEMS.  includes year and iteration in name.";
			InitialData: "OutToNEMS_yyyy_ii.txt";
		}
		File NEMSMessageInFile {
			Name: sMessageInFile;
			Device: Disk;
			Mode: replace;
		}
		File NEMSMessageOutFile {
			Name: sMessageOutFile;
			Device: Disk;
			Mode: replace;
		}
		StringParameter sMessageInFile {
			Definition: "monitor.in.txt";
		}
		StringParameter sMessageOutFile {
			Definition: "monitor.out.txt";
		}
	}
	Procedure ReadCompositeData {
		Body: {
			! reads composite_YYYY_II.txt were yyyy is curcalyr and II is NEMS iteration
			put formatstring("running efd for year %i, iteration %i\n",curcalyr(1),curitr(1));
			! read sparse array data from NEMS via composite tables
			sDataYearFile:="composite_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt";
			put formatstring("the composite data file is %s\n", sDataYearFile);
			if fileexists(sDataYearFile) then
			       read from file sDataYearFile in merge mode;
			else
			       put "composite data file not found \n ";
			endif;
			display cyr;
			display mnumyr(cyr);
		}
	}
	Procedure MainExecution {
		Body: {
			  ReadSetData;
			  ! Read coefficient data formatted in composite tables from NEMS (files: composite_yyyy_ii.txt)
			  ReadCompositeData();
			  if(aimefdbg=1) then ! for validation/debugging, options vary
			    option display_infeasibility_analysis:=1,
			    linear_presolve:="off",
			    eliminate_nonvar_columns:="off",
			    infeasibility_finder:="on",
			    postsolve_continuous_variables:="no rounding",
			    Store_complete_solver_solution:="yes",
			    solver_column_row_mapping:="at_every_solve",
			    "CPLEX_12_10".MPS := "at every solve";
			  else ! use speed-up options: most important is presolve on
			    option display_infeasibility_analysis:="off",
			    !linear_presolve:="on", ! for now off; later on - turning off keeps solution consistent, need to check run time impacts
				linear_presolve:="off", ! for now off; later on
			    eliminate_nonvar_columns:="off",  ! for now off, later "automatic",
			    infeasibility_finder:="off",
			    postsolve_continuous_variables:="no rounding",
			    Store_complete_solver_solution:="no",
			    solver_column_row_mapping:="never",
			    "CPLEX_12_10".MPS := "never";
			  endif;
			
			  PlantGroup2PlantGroupOrd_Mapping;
			  EDBTU;
			  EDCOL;
			  EDBIO;
			  OPBSLD_sub;
			  OPRNBS_sub;
			  OPHYD_sub;
			  OPINT_sub;
			  OPDG_sub;
			
			  ! solveProblem tries to solve without safeties first.  if not optimal, tries
			  ! to solve with safeties.
			
			  solveProblem();
			
			  calc_prc();
			  RTRNBS_sub();
			  output_gen_variables_sub();
			  output_consump_sub();
			  WriteDebugfile();
			
			  ! Save values of run time options in the startup data file, efd.data, to be loaded next open. Other data
			  ! comes from "composite_yyyy_ii.txt" so don't save that.
			  ! Also save the data into a year-iteration-specific data file for debugging. For debugging a given problem
			  ! year, select from menu "Data..Load Case...As Active.." and select one of the "efddbg_year_it.data" files.
			
			  ! always save most recent data to efd.data that is read in automatically when project is opened.
			  casefilesave("data\\efd.data",Run_time_option_identifiers);
			
			  ! Store the solution for each year/nems-iteration for post-run analysis
			  sDataYearFile:="data\\\\efddbg"+formatstring("%i",curcalyr(1))+"_"+formatstring("%i",curitr(1))+".data";
			  casefilesave(sDataYearFile,Run_time_option_identifiers);
			
			  ! Write solution values needed for EMM OML calls to wfscol and wfsrow so as to substiture AIMMS LP solution for nems LP solution
			 !WriteToNEMS();      ! write solution values for rows and columns
			  PassBacktoNEMS();  ! write variables derived from solution that are declared in Section TransferVariable_Output
		}
	}
	Procedure SolveProblem {
		Body: {
			                    empty AllVariables;
			                    empty allConstraints;
			                    EFD_WithSafety.ProgramStatus := ' ';
			                    solve EFD_WithoutSafety where
			                                   LP_method := "Barrier";
			                    if (EFD_WithoutSafety.ProgramStatus <> 'Optimal') then
			                       put "EFD_WithoutSafety.ProgramStatus is ", EFD_WithoutSafety.ProgramStatus ;
			                    else
			                       put "Optimal solution WITHOUT Safety variables found for" ,curcalyr(1), " iteration", curitr(1) ;
			                    endif;
			
			                    if(EFD_WithoutSafety.ProgramStatus <> 'Optimal') then
			                       solveWithSafety() ;
			                    endif;
		}
	}
	Procedure SolveWithSafety {
		Body: {
			empty AllVariables;
			empty disabledConstraints;
			solve EFD_WithSafety where
			               LP_method := "Barrier";
			if (EFD_WithSafety.ProgramStatus <> 'Optimal') then
			   put "EFD_WithSafety.ProgramStatus is ", EFD_WithSafety.ProgramStatus ;
			else
			   put "Optimal solution WITH Safety variables found for" ,curcalyr(1), " iteration", curitr(1) ;
			endif;
		}
	}
	Procedure FillSolutionVars {
		Body: {
			! Read data formatted in composite tables from NEMS (files: composite_yyyy_ii.txt)
			ReadCompositeData();
			PassBacktoNEMS();  ! write variables derived from solution that are declared in Section TransferVariable_Output
		}
	}
	Procedure ReadSetData {
		Body: {
			! the following command is invoked in MainInitialization, so this procedure would need to be invoked only if a
			! change is made to efdsetdata.dat and you want to re-read (outside of an NEMS invocation).
			   emptyAllSets();
			   read from file "efdsetdata.dat" ;
		}
	}
	DeclarationSection NEMS_Monitor_Identifiers {
		Parameter CountSleep;
		StringParameter sAction {
			Text: "Read from monitor.in.txt and indicates what action to take at direction of NEMS";
		}
		StringParameter sStatusMessage;
	}
	Procedure NEMS_Monitor {
		Body: {
			                    ! the initial CaseFileLoad is required because this procedure is invoked from the command line.
			                    ! Aimms doesn't load case files automatically, as specified in the project settings, when a procedure is invoked from
			                    ! the command line.
			                    CaseFileLoad(url: "data\\efd.data",0);	!Load case file "CaseName" and 0 means destroy previous runtime libraries (?)
			                    ReadSetData;
			                    ! the following allows the aimms project to be kept open (when keepopen=1) and to later Quit at direction of NEMS,
			                    ! or to run and exit immediately. There is sometimes a delay with the Quit option due to error trapping, so NEMS is set up to wait for
			                    ! an action message of "Exited" written by the MainTermination procedure right before aimms exits.
			                    CountSleep := 0;
			                    ! count sleep/wake cycles while waiting for direction from nems via sAction in the message file, monitor.in.txt
			                    while ( CountSleep <= 2000 ) do
			                      if fileexists(sMessageInFile) then
			                      ! read sAction, current model year, and current iteration from sMessageInFile
			                        sAction:=" ";
			                        read from file sMessageInFile in merge mode;
			                      else
			                        put "the NEMS message file not found, CountSleep=",CountSleep," \n ";
			                      endif;
			                      if sAction = "MainExecution" then
			                        sAction:="executing";    ! Action message to tell NEMS I'm executing
			                        write sAction to file NEMSMessageOutFile in replace mode;
			
			                        dialogProgress(""); ! remove progress dialog
			                        sStatusMessage := formatstring("Invoking MainExecution for %s",curcalyr('1')) +
			                                          formatstring(", iteration %s",curitr('1'));
			
			                        put sStatusMessage;
			
			                        MainExecution;
			                        sAction:=formatstring("Completed %s,",curcalyr('1')) +
			                                 formatstring("iteration %s ",curitr('1')) ;    ! Action message to tell NEMS I'v completed this year, iteration
			                        write sAction to file NEMSMessageOutFile in replace mode;
			                        CountSleep:=0;
			                        sStatusMessage := "Monitoring NEMS message file("+sMessageInFile+") for "+formatstring("%s",CountSleep/2)+" seconds. Hit Ctrl+Shift+S to Stop this monitoring\n";
			                        put sStatusMessage;
			                        Delay(1);    ! give nems a chance to pick up status and create new monitor.in.txt file
			                      elseif sAction = "FillSolutionVars" then
			                        sAction:="executing";    ! Action message to tell NEMS I'm executing
			                        write sAction to file NEMSMessageOutFile in replace mode;
			
			                        dialogProgress(""); ! remove progress dialog
			                        sStatusMessage := formatstring("Invoking FillSolutionVars for %s",curcalyr('1')) +
			                                          formatstring(", iteration %s",curitr('1'));
			
			                        put sStatusMessage;
			
			                        FillSolutionVars;
			                        sAction:=formatstring("Completed %s,",curcalyr('1')) +
			                                 formatstring("iteration %s ",curitr('1')) ;    ! Action message to tell NEMS I'v completed this year, iteration
			                        write sAction to file NEMSMessageOutFile in replace mode;
			                        CountSleep:=0;
			                        sStatusMessage := "Monitoring NEMS message file("+sMessageInFile+") for "+formatstring("%s",CountSleep/2)+" seconds. Hit Ctrl+Shift+S to Stop this monitoring\n";
			                        put sStatusMessage;
			                        Delay(1);    ! give nems a chance to pick up status and create new monitor.in.txt file
			
			                      elseif sAction = "Quit" then ! NEMS says to exit aimms
			                        CountSleep:=2000;
			                      else
			                        sStatusMessage := "Monitoring NEMS message file("+sMessageInFile+") for "+formatstring("%s",CountSleep/2)+" seconds. Hit Ctrl+Shift+S to Stop this monitoring\n";
			                        Delay(.5);
			                      endif;
			                      dialogProgress(sStatusMessage,round(100*CountSleep/2000));
			                      CountSleep += 1;
			
			                    endwhile;
			                    if CountSleep>=2001 then
			                     put "Quit directive found in monitor.in.txt. Exiting AIMMS";
			                    else
			                     put "Wait time exceeded. Exiting Aimms";
			                    endif;
			                    exitAimms; ! causes MainTermination to run and for aimms to exit. MainTermination sends message "Exited" back to nems.
		}
		Comment: {
			"For KEEPOPEN=1 option, This routines cause AIMMS to sleep and periodically wake to check a message input file from NEMS. If the file
			is found, AIMMS reads it and re-invokes mainexecution if indicated, or closes the project.
			After invoking mainExecution, it writes an output message file indicating completion.
			This routine then continues the sleep-wait cycle."
		}
	}
	Procedure MainInitialization;
	Procedure MainTermination {
		Body: {
			sAction:="Exited";    ! Action message for NEMS
			write sAction to file NEMSMessageOutFile in replace mode;
			return 1;
		}
	}
	Procedure WriteParameters {
		Body: {
			display AllParameters ;
			display SafetyVariables_ ;
			display K ;
		}
	}
	Procedure EmptyAllSets {
		Body: {
			empty AllSets ;
		}
	}
	DeclarationSection TranslationSetRelated {
		ElementParameter OilRegion_to_Census {
			IndexDomain: OilRegion;
			Range: CensusRegion_;
			Definition: element(CensusRegion_,ORD(OilRegion));
		}
		ElementParameter int_fuel_region_element_oil {
			IndexDomain: (OilRegion);
			Range: int_fuel_region_;
			Definition: element(int_fuel_region_,ord(OilRegion));
		}
		ElementParameter int_fuel_region_element {
			IndexDomain: FuelRegion;
			Range: int_fuel_region_;
			Definition: element(int_fuel_region_,ord(FuelRegion));
		}
		ElementParameter FuelType_UIRL_element {
			Range: FuelType_;
			Definition: element(FuelType_,UIRL('1'));
		}
		ElementParameter FuelType_UIGF_element {
			Range: FuelType_;
			Definition: element(FuelType_,UIGF('1'));
		}
		ElementParameter FuelType_UIGC_element {
			Range: FuelType_;
			Definition: element(FuelType_,UIGC('1'));
		}
		ElementParameter FuelType_UIDS_element {
			Range: FuelType_;
			Definition: element(FuelType_,UIDS('1'));
		}
		ElementParameter FuelType_UIRH_element {
			Range: FuelType_;
			Definition: element(FuelType_,UIRH('1'));
		}
		ElementParameter FuelType_UIWD_element {
			Range: FuelType_;
			Definition: element(FuelType_,UIWD('1'));
		}
		ElementParameter Three_element {
			IndexDomain: GasSeason;
			Range: Three_;
			Definition: element(Three_, ord(GasSeason));
		}
		ElementParameter OGSMRegion_element {
			IndexDomain: OGSMRegion;
			Range: OGSMRegion_;
			Definition: element(OGSMRegion_, ord(OGSMRegion));
		}
		ElementParameter OGSMReg_LastElement {
			Range: OGSMReg_;
			Definition: last(OGSMReg_);
		}
		ElementParameter Thirteen_element {
			IndexDomain: OGSMSector;
			Range: Thirteen_;
			Definition: element(Thirteen_, ord(OGSMSector));
		}
		ElementParameter EPCLMP_to_CoalDemandRegion {
			IndexDomain: FuelRegion;
			Range: CoalDemandRegion_;
			Definition: element(CoalDemandRegion_, EPCLMP(FuelRegion));
		}
		ElementParameter CDR_to_int_fuel_region {
			IndexDomain: CoalDemandRegion;
			Range: int_fuel_region_;
			Definition: element(int_fuel_region_, ord(CoalDemandRegion));
		}
		ElementParameter Coal_PlantType_to_FuelType {
			IndexDomain: PlantType | PlantType >= 'B1X' and PlantType <= 'ISX';
			Range: FuelType_;
			Definition: element(FuelType_,ord(StringToelement(PlantType_ECP_, Substring(PlantType,1,2))));
		}
		ElementParameter WFLTP_to_FuelType {
			IndexDomain: (PlantType, FuelsPerPlant);
			Range: FuelType_;
			Definition: element(FuelType_,WFLTP(PlantType,FuelsPerPlant));
		}
		ElementParameter Coal_PlantType_ECP {
			IndexDomain: PlantType | PlantType >= 'B1X' and PlantType <= 'ISX';
			Range: PlantType_ECP_;
			Definition: StringToelement(PlantType_ECP_, Substring(PlantType,1,2));
		}
		ElementParameter Coal_PlantType {
			IndexDomain: PlantType_ECP | PlantType_ECP >= 'B1' and PlantType_ECP <= 'IS';
			Range: PlantType_;
			Definition: StringToelement(PlantType_, Formatstring("%eX",PlantType_ECP));
		}
		ElementParameter PlantType_ECP_to_PlantType {
			IndexDomain: PlantType_ECP;
			Range: PlantType_;
			Definition: element(PlantType_,UPEFDT(PlantType_ECP));
		}
		Parameter Mapping_CoalPlantType {
			IndexDomain: (PlantType,PlantType_ECP);
			Definition: {
				if PlantType >= 'B1X' and PlantType <= 'ISX' and Substring(PlantType,1,2)=Substring(PlantType_ECP,1,2) then
				1
				endif
			}
		}
		ElementParameter EPGSMP_to_int_fuel_region {
			IndexDomain: FuelRegion;
			Range: int_fuel_region_;
			Definition: element(int_fuel_region_, EPGSMP(FuelRegion));
		}
		ElementParameter EPCSMP_to_int_fuel_region {
			IndexDomain: FuelRegion;
			Range: int_fuel_region_;
			Definition: element(int_fuel_region_, EPCSMP(FuelRegion));
		}
		ElementParameter EPCLMP_to_int_fuel_region {
			IndexDomain: FuelRegion;
			Range: int_fuel_region_;
			Definition: element(int_fuel_region_, EPCLMP(FuelRegion));
		}
		ElementParameter EPCLMP_2_int_fuel_region {
			IndexDomain: PlantGroup;
			Range: int_fuel_region_;
			Definition: element(int_fuel_region_, EPCLMP(UG_FL_RG_to_PlantGroup(PlantGroup)));
		}
		ElementParameter EPCAMP_CarbonRegion {
			IndexDomain: FuelRegion;
			Range: CarbonRegion_;
			Definition: Element(CarbonRegion_, EPCAMP(FuelRegion));
		}
		ElementParameter CanadianExportRegion_element {
			IndexDomain: (CanadianSupplyRegion,SupplyRegion);
			Range: SupplyRegionAll_;
			Definition: element(SupplyRegionAll_,  (ord(Last(SupplyRegion_)) + ord(CanadianSupplyRegion)));
		}
		ElementParameter EPCSMP_to_CensusRegion {
			IndexDomain: FuelRegion;
			Range: CensusRegion_;
			Definition: element(CensusRegion_, EPCSMP(FuelRegion));
		}
		ElementParameter Max_Slice_element {
			Range: Slice_;
			Definition: element(slice_,Max((Season,SupplyRegion),ELNVCT(Season,SupplyRegion)));
		}
		ElementParameter Max_Group_element {
			Range: Group_;
			Definition: element(Group_,Max((SliceSorted,Season,SupplyRegion),ELGRP(SliceSorted,Season,SupplyRegion)));
		}
		ElementParameter Max_Segment_element {
			Range: Segment_;
			Definition: element(Segment_,Max((SliceSorted,Season,SupplyRegion),ELSEG(SliceSorted,Season,SupplyRegion)));
		}
		ElementParameter Max_OpMode_element {
			Range: OperatingMode_;
			Definition: element(OperatingMode_,Max((Season,SupplyRegion),ELNVCT(Season,SupplyRegion)));
		}
		ElementParameter MX_NCOALS_Element {
			Range: CoalSupplyCurve_;
			Definition: Element(CoalSupplyCurve_,MX_NCOALS('1'));
		}
		ElementParameter ImportStep_element {
			IndexDomain: CanadianSupplyStep;
			Range: ImportStep_;
			Definition: element(ImportStep_,ord(CanadianSupplyStep));
		}
		ElementParameter CO2CapGroup_element {
			IndexDomain: CarbonRegion;
			Range: CO2CapGroup_;
			Definition: element(CO2CapGroup_,ord(CarbonRegion));
		}
		ElementParameter SupplyRegion_ALL_element {
			IndexDomain: SupplyRegion;
			Range: SupplyRegionAll_;
			Definition: element(SupplyRegionAll_,ord(SupplyRegion));
		}
		ElementParameter SupplyRegion_element {
			IndexDomain: SupplyRegionAll;
			Range: SupplyRegion_;
			Definition: element(SupplyRegion_,ord(SupplyRegionAll));
		}
		ElementParameter CanadianSupplyRegion_element {
			IndexDomain: SupplyRegionAll | ord(SupplyRegionAll)>card(SupplyRegion_);
			Range: CanadianSupplyRegion_;
			Definition: element(CanadianSupplyRegion_,ord(SupplyRegionAll)-card(SupplyRegion_));
		}
		ElementParameter Segment_element {
			IndexDomain: (SliceSorted,Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
			Range: Segment_;
			Definition: element(Segment_,ELSEG(SliceSorted,Season,SupplyRegion));
		}
		ElementParameter Segment2_element {
			IndexDomain: (Slice,Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
			Range: Segment_;
			Definition: Segment_element(Slice2SliceSorted_element(Slice, Season, SupplyRegion), Season, SupplyRegion);
		}
		ElementParameter Group_element {
			IndexDomain: (SliceSorted,Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
			Range: Group_;
			Definition: element(Group_,ELGRP(SliceSorted,Season,SupplyRegion));
		}
		ElementParameter Group2_element {
			IndexDomain: (Slice,Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
			Range: Group_;
			Definition: Group_element(Slice2SliceSorted_element(Slice, Season, SupplyRegion), Season, SupplyRegion);
		}
		ElementParameter cyr {
			Range: MNUMYR_;
			Definition: element(MNUMYR_,CURIYR('1'));
		}
		ElementParameter Slice_element {
			IndexDomain: (Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
			Range: Slice_;
			Definition: element(slice_,ELNVCT(Season,SupplyRegion));
		}
		ElementParameter PlantGroupOrd2PlantGroup {
			IndexDomain: PlantGroup;
			Range: PlantGroupOrd_;
			Comment: {
				"PlantGroupOrd is Super Group; needs to be renamed later"
			}
		}
		Parameter PlantGroup2PlantGroupOrd_Map {
			IndexDomain: (PlantGroup,PlantGroupOrd);
		}
		ElementParameter EFD_GRPS_F_Element {
			IndexDomain: PlantGroupOrd;
			Range: PlantGroup_;
			Definition: element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd));
		}
		Parameter EFD_GRPS_F_Mapping {
			IndexDomain: (PlantGroup,PlantGroupOrd);
			Definition: 1 $ (PlantGroup=EFD_GRPS_F_Element(PlantGroupOrd));
		}
		ElementParameter NM_BM_SUP_STP_Element {
			Range: BiomassProductionStep_;
			Definition: Element(BiomassProductionStep_,NM_BM_SUP_STP('1'));
		}
		ElementParameter UG_EFDt_to_PlantType {
			IndexDomain: PlantGroup;
			Range: PlantType_;
			Definition: Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)));
		}
		ElementParameter UG_EFDt_to_PlantGroupOrd {
			IndexDomain: PlantGroupOrd;
			Range: PlantType_;
			Definition: Element(PlantType_,UG_EFDt(PlantGroupOrd));
		}
		Parameter UG_EFDt_Mapping {
			IndexDomain: (PlantType,PlantGroup);
			Definition: 1 $ (PlantType=UG_EFDt_to_PlantType(PlantGroup));
		}
		ElementParameter UG_ECPt_to_PlantGroup {
			IndexDomain: PlantGroup;
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup)));
		}
		Parameter UG_ECPt_Mapping {
			IndexDomain: (PlantType_ECP,PlantGroup);
			Definition: 1 $ (PlantType_ECP = UG_ECPt_to_PlantGroup(PlantGroup));
		}
		ElementParameter UG_ECPt_to_PlantGroupOrd {
			IndexDomain: PlantGroupOrd;
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,UG_ECPt(PlantGroupOrd));
		}
		ElementParameter UG_EMM_RG_to_SupplyRegion {
			IndexDomain: PlantGroup;
			Range: SupplyRegion_;
			Definition: Element(SupplyRegion_,UG_EMM_RG(PlantGroupOrd2PlantGroup(PlantGroup)));
		}
		Parameter UG_EMM_RG_Mapping {
			IndexDomain: (SupplyRegion,PlantGroup);
			Definition: 1 $ (SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup));
		}
		Parameter SupplyRegion_2PlantType_ECP_Mapping {
			IndexDomain: (SupplyRegion,PlantType_ECP);
			Definition: exists(PlantGroupOrd|(ord(SupplyRegion)=UG_EMM_RG(PlantGroupOrd) and ord(PlantType_ECP)=UG_ECPt(PlantGroupOrd)));
		}
		ElementParameter UG_EMM_RG_to_PlantGroupOrd {
			IndexDomain: PlantGroupOrd;
			Range: SupplyRegion_;
			Definition: Element(SupplyRegion_,UG_EMM_RG(PlantGroupOrd));
		}
		ElementParameter UG_FL_RG_to_PlantGroup {
			IndexDomain: PlantGroup;
			Range: FuelRegion_;
			Definition: Element(FuelRegion_,UG_FL_RG(PlantGroupOrd2PlantGroup(PlantGroup)));
		}
		ElementParameter UG_FL_RG_to_PlantGroupOrd {
			IndexDomain: PlantGroupOrd;
			Range: FuelRegion_;
			Definition: Element(FuelRegion_,UG_FL_RG(PlantGroupOrd));
		}
		ElementParameter UG_FL_RG_to_int_f_reg {
			IndexDomain: PlantGroup;
			Range: int_fuel_region_;
			Definition: Element(int_fuel_region_,UG_FL_RG(PlantGroupOrd2PlantGroup(PlantGroup)));
		}
		Parameter SliceSliceSortedMapping {
			IndexDomain: (SliceSorted,Slice,Season,SupplyRegion);
			Definition: {
				IF (Efd_Slice_ID(Element(Group_,ELGRP(SliceSorted,Season,SupplyRegion)),Element(Segment_,ELSEG(SliceSorted,Season,SupplyRegion))) = ORD(Slice)) THEN
					1.0
				ELSE
					0.0
				ENDIF
			}
		}
		Parameter GroupSliceSortedMapping {
			IndexDomain: (Group,SliceSorted,Season,SupplyRegion);
			Definition: {
				IF (ELGRP(SliceSorted,Season,SupplyRegion) = ORD(Group)) THEN
					1.0
				ELSE
					0.0
				ENDIF
			}
		}
		ElementParameter Slice2SliceSorted_element {
			IndexDomain: (Slice,Season,SupplyRegion);
			Range: SliceSorted_;
			Definition: first(SliceSorted|SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion)=1);
		}
		Set FirstPlantGroup_ {
			SubsetOf: PlantGroup_;
			Index: FirstPlantGroup;
			Definition: union(PlantGroupOrd,EFD_GRPS_F_Element(PlantGroupOrd));
		}
		Set DispatchableEFDGroup_ {
			SubsetOf: FirstPlantGroup_;
			Index: DispatchableEFDGroup;
			Definition: {
				{FirstPlantGroup | UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))<=EFD_DSP('1')}
			}
		}
		Set ActiveSuperPlantGroup_ {
			SubsetOf: PlantGroupOrd_;
			Index: ActiveSuperPlantGroup;
			Definition: {
				{PlantGroupOrd |EFD_GRPS_F(PlantGroupOrd)}
			}
		}
		Set Slice_Active_ {
			SubsetOf: Slice_;
			Index: slice_active;
			Definition: {
				{first(slice)..Max_Slice_element}
			}
		}
		Set OperatingMode_Active_ {
			SubsetOf: OperatingMode_;
			Index: mode_active;
			Definition: {
				{first(OperatingMode)..Max_OpMode_element}
			}
		}
		Set CoalPlant_ECP_ {
			SubsetOf: PlantType_ECP_;
			Index: CoalPlant_ECP;
			OrderBy: PlantType_ECP;
			Definition: {
				{PlantType_ECP| PlantType_ECP<=WIIS_Element}
			}
		}
		Set UptoCNPlant_ECP_ {
			SubsetOf: PlantType_ECP_;
			Definition: {
				{PlantType_ECP| PlantType_ECP<WICN_Element and PlantType_ECP>WIIS_Element}
			}
		}
		Set CoalPlantGroup_ {
			SubsetOf: FirstPlantGroup_;
			Index: CoalPlantGroup;
			Definition: {
				{FirstPlantGroup| UG_ECPt_to_PlantGroup(FirstPlantGroup) in CoalPlant_ECP_}
			}
		}
		Set NoCoalPlantGroup_ {
			SubsetOf: FirstPlantGroup_;
			Index: NoCoalPlantGroup;
			Definition: FirstPlantGroup_- CoalPlantGroup_;
		}
		Set Copy_CoalPlantGroup_ {
			SubsetOf: FirstPlantGroup_;
			Definition: {
				{FirstPlantGroup| UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1')}
			}
		}
		Set UptoCNPlantGroup_ {
			SubsetOf: FirstPlantGroup_;
			Index: UptoCNPlantGroup;
			Definition: {
				{FirstPlantGroup| UG_ECPt_to_PlantGroup(FirstPlantGroup) in UptoCNPlant_ECP_}
			}
		}
		Set DGPlantGroup_ {
			SubsetOf: FirstPlantGroup_;
			Index: DGPlantGroup;
			Definition: {
				{FirstPlantGroup| UG_ECPt_to_PlantGroup(FirstPlantGroup)=WIDB_Element or UG_ECPt_to_PlantGroup(FirstPlantGroup)=WIDP_Element}
			}
		}
		ElementParameter CoalPlantGroup_FuelType {
			IndexDomain: PlantGroup;
			Range: FuelType_;
			Definition: Element(FuelType_,UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup)));
		}
		ElementParameter WIPV_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIPV('1'));
		}
		ElementParameter WIWD_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIWD('1'));
		}
		ElementParameter WICS_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WICS('1'));
		}
		ElementParameter WIPQ_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIPQ('1'));
		}
		ElementParameter WIA2_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIA2('1'));
		}
		ElementParameter WIIG_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIIG('1'));
		}
		ElementParameter WIIS_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIIS('1'));
		}
		ElementParameter WICN_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WICN('1'));
		}
		ElementParameter WIAN_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIAN('1'));
		}
		ElementParameter WISM_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WISM('1'));
		}
		ElementParameter WIST_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIST('1'));
		}
		ElementParameter WIDB_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIDB('1'));
		}
		ElementParameter WIDP_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIDP('1'));
		}
		ElementParameter WIET_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIET('1'));
		}
		ElementParameter WIAT_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WIAT('1'));
		}
		ElementParameter WICT_Element {
			Range: PlantType_ECP_;
			Definition: Element(PlantType_ECP_,WICT('1'));
		}
		ElementParameter PlantType_ECPp2_Element {
			IndexDomain: PlantType_ECP;
			Range: PlantType_ECPp2_;
			Definition: Element(PlantType_ECPp2_,ord(PlantType_ECP));
		}
		ElementParameter ECPCAPplus1_Element {
			Range: PlantType_ECPp2_;
			Definition: Element(PlantType_ECPp2_,card(PlantType_ECP)+1);
		}
		ElementParameter UtilitySector_Element {
			IndexDomain: PlantType_ECP;
			Range: UtilitySector_Actual_;
			Definition: Element(UtilitySector_Actual_,ord(PlantType_ECP));
		}
		Set UtilitySector_Actual_ {
			SubsetOf: UtilitySector_;
			Index: nutsec_index;
			Definition: {
				{first(UtilitySector)..NUTSEC_Element}
			}
		}
		ElementParameter NUTSEC_Element {
			Range: UtilitySector_;
			Definition: Element(UtilitySector_,NUTSEC('1'));
		}
		ElementParameter UtilitySectorPlus1 {
			Range: UtilitySector_;
			Definition: Element(UtilitySector_,NUTSEC('1')+1);
		}
		ElementParameter UtilitySectorPlus2 {
			Range: UtilitySector_;
			Definition: Element(UtilitySector_,NUTSEC('1')+2);
		}
		ElementParameter GRD_CASN_Element {
			Range: GridResilienceSource_;
			Definition: Element(GridResilienceSource_,GRD_CASN('1'));
		}
		Set GRD_CASN_Set_ {
			SubsetOf: GridResilienceSource_;
			Index: grd_casn_ind;
			Definition: {
				{first(GridResilienceSource)..GRD_CASN_Element}
			}
		}
		ElementParameter NUM_SO2_GRP_Element {
			Range: SO2Region_;
			Definition: Element(SO2Region_,NUM_SO2_GRP('1'));
		}
		Set NUM_SO2_GRP_Set_ {
			SubsetOf: SO2Region_;
			Definition: {
				{first(SO2Region)..NUM_SO2_GRP_Element}
			}
		}
		ElementParameter NUM_HG_GRP_Element {
			Range: nHGCODE_;
			Definition: Element(nHGCODE_,NUM_HG_GRP('1'));
		}
		Set NUM_HG_GRP_Set_ {
			SubsetOf: nHGCODE_;
			Definition: {
				{first(nHGCODE)..NUM_HG_GRP_Element}
			}
		}
		Parameter Slice_OpMode_Mapping {
			IndexDomain: (Slice,OperatingMode) | ord(Slice)<=ord(OperatingMode) and Slice in Slice_Active_ and OperatingMode in OperatingMode_Active_;
			Definition: 1;
		}
		Parameter SliceSorted_OpMode_Mapping {
			IndexDomain: (SliceSorted,OperatingMode) | ord(SliceSorted)=ord(OperatingMode);
			Definition: 1;
		}
		Parameter Season_SeasonCCS_Mapping {
			IndexDomain: (Season,SeasonCCS) | ord(Season)=ord(SeasonCCS);
			Definition: 1;
		}
		ElementParameter Season_Element {
			IndexDomain: SeasonCCS;
			Range: Season_;
			Definition: Element(Season_,ord(SeasonCCS));
		}
		ElementParameter I_NOCCS {
			IndexDomain: PlantType_ECP;
			Range: PlantType_ECP_;
			Definition: element(PlantType_ECP_,NO_CCS_PLNT_NDX(PlantType_ECP));
		}
		ElementParameter I_NOCCS_EFD {
			IndexDomain: PlantType_ECP;
			Range: PlantType_;
			Definition: element(PlantType_,UPEFDT(I_NOCCS(PlantType_ECP)));
		}
		ElementParameter EmissionRank_Element {
			IndexDomain: CoalSupplyCurve;
			Range: EmissionRank_;
			Definition: Element(EmissionRank_, EFD_RANK(CoalSupplyCurve));
		}
		Parameter California_RG {
			IndexDomain: PlantGroup | PlantGroup in FirstPlantGroup_;
			Definition: {
				if UG_FL_RG_to_PlantGroup(PlantGroup)<>'CA' and substring(formatstring("%e",UG_EMM_RG_to_SupplyRegion(PlantGroup)),1,2)='ca' then
				 1
				endif
			}
		}
		StringParameter CA2letter {
			IndexDomain: PlantGroup | PlantGroup in FirstPlantGroup_;
			Definition: substring(formatstring("%e",UG_EMM_RG_to_SupplyRegion(PlantGroup)),1,2);
		}
		ElementParameter nIFGD_Element {
			IndexDomain: nIFGD;
			Range: Two_;
			Definition: Element(Two_,ord(nIFGD));
		}
		ElementParameter CoalType_SupplyCurve {
			IndexDomain: (CoalSupplyCurve);
			Range: CoalType_;
			Definition: Element(CoalType_,XCL_TYPE(CoalSupplyCurve));
		}
		ElementParameter MX_ISCV_Element {
			IndexDomain: CoalSupplyCurve| ord(CoalSupplyCurve)>MX_NCOALS('1');
			Range: CoalSupplyCurve_Int_;
			Definition: Element(CoalSupplyCurve_Int_, ord(CoalSupplyCurve)-MX_NCOALS('1'));
		}
		ElementParameter ACIOption_Mapping {
			IndexDomain: ACIOption;
			Range: numACI_;
			Definition: Element(numACI_,ord(ACIOption));
		}
		ElementParameter ACICODE_Mapping {
			IndexDomain: ACIOption;
			Range: numACI_;
			Definition: Element(numACI_,ord(ACIOption)-1);
		}
		ElementParameter MercuryClass_ECP {
			IndexDomain: PlantType_ECP;
			Range: MercuryClass_;
			Definition: Element(MercuryClass_,HG_CLASS(PlantType_ECP));
		}
		ElementParameter ECP_SCRUB_Element {
			IndexDomain: PlantType_ECP;
			Range: Two_;
			Definition: Element(Two_,ECP_SCRUB(UtilitySector_Element(PlantType_ECP), cyr));
		}
		ElementParameter nHGCODE_to_CoalDemandRegion {
			IndexDomain: CoalDemandRegion;
			Range: nHGCODE_;
			Definition: Element(nHGCODE_, ord(CoalDemandRegion));
		}
		ElementParameter SO2_Transport_Element {
			IndexDomain: SO2Region;
			Range: SO2_Transport_;
			Definition: Element(SO2_Transport_, ord(SO2Region));
		}
		ElementParameter HG_GRP_Element {
			IndexDomain: CoalDemandRegion;
			Range: nHGCODE_;
			Definition: Element(nHGCODE_, HG_GRP(CoalDemandRegion));
		}
		ElementParameter CarbonRegion_Mapping {
			IndexDomain: CarbonRegion;
			Range: CO2CapGroup_;
			Definition: Element(CO2CapGroup_, ord(CarbonRegion));
		}
		ElementParameter CO2CapGroup_Mapping {
			IndexDomain: CO2CapGroup;
			Range: CarbonRegion_;
			Definition: Element(CarbonRegion_, ord(CO2CapGroup));
		}
		ElementParameter BCTL_SupplyRegion {
			Range: SupplyRegion_;
			Definition: first(SupplyRegion| sum(PlantGroup| UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIIG('1') and UG_EMM_RG_Mapping(SupplyRegion, PlantGroup), 1));
		}
		ElementParameter GenerationSeason_Element {
			IndexDomain: GenerationSeason;
			Range: Season_;
			Definition: Element(Season_,ord(GenerationSeason));
		}
		ElementParameter ECNTP_Element {
			IndexDomain: (DispPlantGroup, SupplyRegion);
			Range: PlantGroupOrd_;
			Definition: Element(PlantGroupOrd_, MAP_ECNTP_EFD_GRPS(DispPlantGroup, SupplyRegion));
		}
		ElementParameter CACO2Region {
			Range: CarbonRegion_;
			Definition: Element(CarbonRegion_,CARGRP_CA('1'));
		}
		ElementParameter RGCO2Region {
			Range: CarbonRegion_;
			Definition: Element(CarbonRegion_,CARGRP_RG('1'));
		}
		ElementParameter MinusOneOGSMRegion_SUP {
			Range: OGSMRegion_SUP_;
			Definition: first(OGSMRegion_SUP_);
		}
		ElementParameter ZeroOGSMRegion_SUP {
			Range: OGSMRegion_SUP_;
			Definition: nth(OGSMRegion_SUP,2);
		}
		ElementParameter ZeroFuelRegion_SUP {
			Range: FuelRegion_SUP_;
			Definition: first(FuelRegion_SUP_);
		}
		ElementParameter Season0 {
			Range: Season_SUP_;
			Definition: {
				first(Season_SUP_)
				!'0'
			}
		}
	}
	DeclarationSection DebugRelated {
		Parameter Match_cRHS_rZOGSMeq {
			IndexDomain: (OGSMRegion);
			Definition: {
				(ccalc_cRHS_rZOGSMeq(OGSMRegion) - cpass_cRHS_rZOGSMeq(OGSMRegion))
				/$ ccalc_cRHS_rZOGSMeq(OGSMRegion)  *100
			}
		}
		Parameter Match_cNTR_EFDCOSTS {
			IndexDomain: (FuelRegion,OGSMRegion);
			Definition: {
				(ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) - cpass_cNTR_EFDCOSTS(FuelRegion,OGSMRegion))
				/$ ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) *100
			}
		}
		Parameter Match_cNTO_EFDCOSTS {
			IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
			Definition: {
				(ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) - cpass_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo))
				/$ ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
			}
		}
		Parameter Match_cNTO_rZOTHRge {
			IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
			Definition: {
				(ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) - cpass_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo))
				!/$ ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
			}
		}
		Parameter Match_cNOT_rZOTHRge {
			IndexDomain: (OGSMRegion,OGSMSector);
			Definition: {
				(ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) - cpass_cNOT_rZOTHRge(OGSMRegion,OGSMSector))
				!/$ ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) *100
			}
		}
		Parameter Match_cNOT_EFDCOSTS {
			IndexDomain: (OGSMSector,OGSMRegion);
			Definition: {
				(ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) - cpass_cNOT_EFDCOSTS(OGSMSector,OGSMRegion))
				!/$ ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) *100
			}
		}
		Parameter Match_cNOT_UBOUND {
			IndexDomain: (OGSMSector,OGSMRegion);
			Definition: {
				(ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) - cpass_cNOT_UBOUND(OGSMSector,OGSMRegion))
				/$ ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) *100
			}
		}
		Parameter Match_cB_rS_WD_allle {
			IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				!/$ ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_rNGle {
			IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				/$ ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_rRSle {
			IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				!/$ ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_rDSle {
			IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				!/ ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_rCFGn {
			IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				!/$ ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_EFDCOSTS {
			IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				!/$ ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_rBTUXXle {
			IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				!/$ ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_rBTUle {
			IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				!/$ ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_rCARBONle {
			IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				/$ ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_rCLle {
			IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				!/$ ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cB_rCARBONn {
			IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
			Definition: {
				(ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
				/$ ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
			}
		}
		Parameter Match_cRHS_rIMle {
			IndexDomain: (SupplyRegion,Season,Slice);
			Definition: (ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) - cpass_cRHS_rIMle(SupplyRegion,Season,Slice))/$ ccalc_cRHS_rIMle(SupplyRegion,Season,Slice);
		}
		Parameter Match_cTR_UBOUND {
			IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
			Definition: (ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) - cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))/$ ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
		}
		Parameter Match_cTR_EFDCOSTS {
			IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
			Definition: (ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) - cpass_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))/$ ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
		}
		Parameter Match_cTR_rLDge {
			IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
			Definition: (ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) - cpass_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto))/$ ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
		}
		Parameter Match_cTR_rEXle {
			IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
			Definition: (ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) - cpass_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto))/$ ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
		}
		Parameter Match_cTC_EFDCOSTS {
			IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
			Definition: (ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) - cpass_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))/$ ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
		}
		Parameter Match_cTC_rLDge {
			IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
			Definition: (ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) - cpass_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2))/$ ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
		}
		Parameter Match_cTC_rCNCPle {
			IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
			Definition: (ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) - cpass_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2))/$ ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
		}
		Parameter Match_cTR_rIMle {
			IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
			Definition: (ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) - cpass_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto))/$ ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
		}
		Parameter Match_cRHS_rCNCPle {
			IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice);
			Definition: (ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) - cpass_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice))/$ ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice);
		}
		Parameter Match_cTC_rTCNle {
			IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
			Definition: (ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) - cpass_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep))/$ ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
		}
		Parameter Match_cRHS_rTCNle {
			IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice);
			Definition: (ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) - cpass_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice))/$ ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice);
		}
		Parameter Match_cTR_rCARBONle {
			IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
			Definition: (ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) - cpass_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))/$ ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
		}
		Parameter Match_cES_EFDCOSTS {
			IndexDomain: (SupplyRegion,Season,Slice);
			Definition: ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) - cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice);
			Comment: {
				"
				if abs(ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) - cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice)) > 0.01 then
				    \"Yes\"
				else
				    \" \"
				endif"
			}
		}
		StringParameter Match_cSPx_UBOUND {
			IndexDomain: (SupplyRegion,Season,Slice);
			Definition: {
				if abs(ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) - cpass_cSPx_UBOUND(SupplyRegion,Season,Slice)) /$ ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) < 0.0001 then
				    "Yes"
				else
				    " "
				endif
			}
		}
		StringParameter Match_cSPx_LBOUND {
			IndexDomain: (SupplyRegion,Season,Slice);
			Definition: {
				if abs(ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) - cpass_cSPx_LBOUND(SupplyRegion,Season,Slice)) /$ ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) < 0.0001 then
				    "Yes"
				else
				    " "
				endif
			}
		}
	}
	DeclarationSection IntermediateParameterDeclare {
		Parameter CARRG_VAL {
			IndexDomain: CarbonRegion;
			Definition: {
				IF (ORD(CarbonRegion) = CARGRP_CA('1')) THEN
					AB_CAP_TOT(cyr) * (1.0 - AB_CSTCONT_FRAC(cyr))
				ELSEIF (ORD(CarbonRegion) = CARGRP_RG('1')) THEN
					CO2BYGRP(CO2CapGroup_element(CarbonRegion),cyr) - CO2EQGRP(CO2CapGroup_element(CarbonRegion),cyr)
				ELSE
					CO2BYGRP(CO2CapGroup_element(CarbonRegion),cyr)
				ENDIF
			}
		}
		Parameter CarbonCap_National {
			Definition: {
				IF ((USW_CAR('1') = 2 OR USW_CAR('1') = 3) AND (ORD(cyr) + UHBSYR('1')) >= UYR_CAR('1')) THEN
					1
				ELSE
					0
				ENDIF
			}
		}
		Parameter CarbonCap_Regional {
			IndexDomain: CarbonRegion;
			Definition: {
				IF (CARRG_VAL(CarbonRegion) > 0.0 AND CARRG_VAL(CarbonRegion) < 9000.0) THEN
					1
				ELSE
					0
				ENDIF
			}
		}
		Parameter ECP_RCF {
			InitialData: 5;
			Comment: "MAXIMUM NUMBER OF ECP BIOMASS COFIRING RETROFIT CATEGORIES";
		}
		Parameter CTLSUM {
			IndexDomain: CoalDemandRegion;
			Definition: Sum(CoalSupplyCurve,CTLBTU(CoalSupplyCurve,CoalDemandRegion,cyr));
		}
		Parameter EFD_CAP {
			Range: integer;
			Definition: EFD_DSP('1') + EFD_RNW('1') + EFD_DGN('1');
		}
		Parameter Max_Load {
			IndexDomain: (Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
			Definition: Max((Slice) | Slice <= Slice_element(Season,SupplyRegion),UTHGHT(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion),SupplyRegion));
		}
		Parameter NumSeasons {
			Definition: MAX(SupplyRegion,EENSP('1',SupplyRegion));
		}
	}
	Section Reports {
		DeclarationSection Reports_Declaration {
			Set cDiff_Identifiers_ {
				SubsetOf: AllIdentifiers;
				Index: cdiff_all;
				Definition: {
					check_parameter_declare;
				}
			}
			Set cdiff_DisplaySet_ {
				SubsetOf: cDiff_Identifiers_;
				Index: index_cdiff;
			}
			Set AllCompare_Identifiers_ {
				SubsetOf: AllIdentifiers;
				Definition: {
					ccalcFolder_Identifiers_ + cpass_Identifiers_ + cDiff_Identifiers_;
				}
			}
			Set AllCompare_DisplaySet_ {
				SubsetOf: AllCompare_Identifiers_;
				Index: index_allcompare;
			}
			Set ccalc_Identifiers_ {
				SubsetOf: AllCompare_Identifiers_;
				Definition: {
					{ccalc_all|ccalcNames(ccalc_all)}
				}
			}
			Set ccalcFolder_Identifiers_ {
				SubsetOf: AllIdentifiers;
				Index: ccalc_all;
				Definition: {
					Move_completed_ccalc_parameters_here;
				}
			}
			Set ccalcOnly_Identifiers_ {
				SubsetOf: AllCompare_Identifiers_;
				Index: ccalc_only;
				Definition: {
					{ccalc_all|ccalcOnlyNames(ccalc_all)}
				}
			}
			ElementParameter ccalcAll_Element {
				IndexDomain: ccalc_all;
				Range: ccalcFolder_Identifiers_;
				Definition: ccalc_all;
			}
			StringParameter ccalcAll_names {
				IndexDomain: ccalc_all;
				Definition: FormatString("%e",ccalcAll_Element(ccalc_all));
			}
			StringParameter ccalcNames {
				IndexDomain: ccalc_all;
				Definition: {
					if substring(ccalcAll_names(ccalc_all),1,5)="ccalc" or substring(ccalcAll_names(ccalc_all),-9,-1)="Completed" then
					ccalcAll_names(ccalc_all)
					endif
				}
			}
			StringParameter ccalcOnlyNames {
				IndexDomain: ccalc_all;
				Definition: {
					if substring(ccalcAll_names(ccalc_all),1,5)="ccalc" then
					ccalcAll_names(ccalc_all)
					endif
				}
			}
			StringParameter ccalcOnlyNames_crop {
				IndexDomain: ccalc_only;
				Definition: substring(ccalcOnlynames(ccalc_only),7,StringLength(ccalcOnlynames(ccalc_only)));
			}
			StringParameter CompareNames_crop {
				IndexDomain: comp_all;
				Definition: substring(CompareNames(comp_all),9,StringLength(CompareNames(comp_all)));
			}
			ElementParameter ccalc_DisplayElement {
				Range: ccalc_Identifiers_;
			}
			Set Compare_Identifiers_ {
				SubsetOf: AllIdentifiers;
				Index: comp_all;
				Definition: Comparison_Identifiers_ + Percent_Identifiers_;
			}
			Set Comparison_Identifiers_ {
				SubsetOf: Compare_Identifiers_;
				Definition: Comparison_Parameter_Declaration;
			}
			Set Percent_Identifiers_ {
				SubsetOf: Compare_Identifiers_;
				Definition: Percent_Comparison_Declaration;
			}
			Set Compare_ccalc_Identifiers_ {
				SubsetOf: Compare_Identifiers_;
				Definition: {
					{comp_all | tempcomp(comp_all)}
				}
			}
			Parameter Compare_ccalc_mapping {
				IndexDomain: (ccalc_only,comp_all);
				Definition: {
					if substring(ccalcOnlynames(ccalc_only),7,StringLength(ccalcOnlynames(ccalc_only)))=
					substring(CompareNames(comp_all),9,StringLength(CompareNames(comp_all))) then
					1
					endif
				}
			}
			Parameter tempcomp {
				IndexDomain: comp_all;
				Definition: sum(ccalc_only,Compare_ccalc_mapping(ccalc_only, comp_all));
			}
			Parameter Cdiff_ccalc_mapping {
				IndexDomain: (ccalc_only,cdiff_all);
				Definition: {
					if substring(ccalcOnlynames(ccalc_only),7,StringLength(ccalcOnlynames(ccalc_only)))=
					substring(CdiffNames(cdiff_all),7,StringLength(CdiffNames(cdiff_all))) then
					1
					endif
				}
			}
			ElementParameter Compare_Element {
				IndexDomain: comp_all;
				Range: Compare_Identifiers_;
				Definition: comp_all;
			}
			StringParameter CompareNames {
				IndexDomain: comp_all;
				Definition: FormatString("%e",compare_Element(comp_all));
			}
			ElementParameter Cdiff_Element {
				IndexDomain: cdiff_all;
				Range: cDiff_Identifiers_;
				Definition: cdiff_all;
			}
			StringParameter CdiffNames {
				IndexDomain: cdiff_all;
				Definition: FormatString("%e",Cdiff_Element(cdiff_all));
			}
			Set Compare_DisplaySet_ {
				SubsetOf: Compare_Identifiers_;
				Index: index_compare;
			}
			ElementParameter compare_DisplayElement {
				Range: Compare_Identifiers_;
			}
			Set cpass_Identifiers_ {
				SubsetOf: AllCompare_Identifiers_;
				Index: allcpass;
				Definition: {
					cpass_parameter_declare;
				}
			}
			Set cpass_DisplaySet_ {
				SubsetOf: cpass_Identifiers_;
				Index: index_cpass;
				Definition: {
					!{cpass_DisplayElement}
				}
			}
			ElementParameter cpass_DisplayElement {
				Range: cpass_Identifiers_;
			}
			Parameter DiffPctSwitch;
			File TempFile {
				Name: tempfilename;
				Device: Disk;
				Mode: replace;
			}
			StringParameter tempfilename;
			Set tempset {
				SubsetOf: AllAttributeNames;
			}
			Parameter CountActiveCPassParameters {
				Definition: {
					!card(TheCardinalities)
				}
			}
			Parameter CountCpassParameters {
				Definition: card(cpass_Identifiers_);
			}
			Parameter TheCardinalities {
				IndexDomain: allcpass;
				Definition: {
					!Card(cpass_Identifiers__i)
				}
			}
			Parameter CountActiveCCalcParameters;
			Parameter CountCcalcParameters {
				Definition: card(ccalcOnly_Identifiers_);
			}
			Parameter TheCardinalities_ccalc {
				IndexDomain: ccalc_only;
				Definition: {
					!Card(ccalc_only)
				}
			}
			Parameter CountActiveCdiffParameters;
			Parameter CountActiveCompareParameters;
			Parameter CountCdiffParameters {
				Definition: card(cdiff_Identifiers_);
			}
			Parameter Cards_cdiff {
				IndexDomain: ccalc_only;
			}
			Parameter Cards_comp {
				IndexDomain: comp_all;
			}
			Parameter Cardinalities_cdiff {
				IndexDomain: cdiff_all;
			}
			ElementParameter cPassColor {
				Range: AllColors;
				Definition: {
					if TheCardinalities(cpass_DisplayElement)=0 then
					'red'
					else
					'black'
					endif
				}
			}
			ElementParameter cPassColor2 {
				IndexDomain: allcpass;
				Range: AllColors;
				Definition: {
					if TheCardinalities(allcpass)=0 then
					'red'
					else
					'black'
					endif
				}
			}
			ElementParameter cPassColor3 {
				IndexDomain: allcpass;
				Range: AllColors;
				Definition: {
					                    if TheCardinalities(allcpass)=0 then
					                     'red'
					
					                    endif
				}
			}
			ElementParameter cCalcColor2 {
				IndexDomain: ccalc_only;
				Range: AllColors;
				Definition: {
					if TheCardinalities_ccalc(ccalc_only)=0 then
					'red'
					else
					'black'
					endif
				}
			}
			ElementParameter cCalcColor3 {
				IndexDomain: ccalc_only;
				Range: AllColors;
				Definition: {
					if (TheCardinalities_ccalc(ccalc_only)=0 and Cards_cdiff(ccalc_only)) then
						'red'
					else
						'default background'
					endif
				}
			}
			ElementParameter cCompColor2 {
				IndexDomain: ccalc_only;
				Range: AllColors;
				Definition: {
					if Cards_cdiff(ccalc_only)=0 then
					'red'
					else
					'black'
					endif
				}
			}
			ElementParameter cCompColor3 {
				IndexDomain: ccalc_only;
				Range: AllColors;
				Definition: {
					!if Cards_cdiff(ccalc_only) then
					! 'red'
					!else
					! 'default background'
					!endif
				}
			}
			ElementParameter cDiffColor3 {
				IndexDomain: cdiff_all;
				Range: AllColors;
			}
			Set TransferVariableParms_ {
				SubsetOf: AllIdentifiers;
				Index: tv_all;
				Definition: {
					Output_calc_parameters + TransferVariable_Output + TransferVariable_Input;
				}
			}
			Set TransferVariableOutputParms_ {
				SubsetOf: TransferVariableParms_;
				Index: tvo_all;
				Definition: {
					TransferVariable_Output;
				}
			}
			Set TV_Parms_ {
				SubsetOf: TransferVariableParms_;
				Index: tv_index;
				Definition: {
					TVI_Parms_+TVO_Parms_;
				}
			}
			Set TVI_Parms_ {
				SubsetOf: TransferVariableParms_;
				Definition: {
					TransferVariable_Input;
				}
			}
			Set TVO_Parms_ {
				SubsetOf: TransferVariableOutputParms_;
				Index: tvo;
				Definition: {
					{tvo_all|TVO_Names_Cropped(tvo_all)}
				}
			}
			ElementParameter TVO_Element {
				IndexDomain: tvo_all;
				Range: TransferVariableOutputParms_;
				Definition: tvo_all;
			}
			ElementParameter TVO_DisplayElement {
				Range: TV_Parms_;
			}
			Set TVO_DisplaySet_ {
				SubsetOf: TransferVariableParms_;
				Index: index_tvo;
				OrderBy: user;
			}
			StringParameter TVO_Names {
				IndexDomain: tvo_all;
				Definition: FormatString("%e",TVO_Element(tvo_all));
			}
			StringParameter TVO_Names_Cropped {
				IndexDomain: tvo_all;
				Definition: {
					if substring(TVO_Names(tvo_all),-5,-1)<>"_pass" and substring(TVO_Names(tvo_all),-5,-1)<>"_calc" then
					TVO_Names(tvo_all)
					endif
				}
			}
			ElementParameter TVColor2 {
				IndexDomain: tv_index;
				Range: AllColors;
				Definition: {
					if tv_index in TVI_Parms_ then
					'black'
					elseif tv_index in TVO_Parms_ then
					'blue'
					endif
				}
			}
			ElementParameter TVColor3 {
				IndexDomain: tv_index;
				Range: AllColors;
				Definition: {
					if TVCards(tv_index)=0 then
					'yellow'
					endif
				}
			}
			Parameter CountActiveTVParameters;
			Parameter CountTVParameters {
				Definition: card(TV_Parms_);
			}
			Parameter TVCards {
				IndexDomain: tv_index;
				Definition: {
					!Card(tv_index)
				}
			}
			Parameter tst {
				IndexDomain: tvdiff;
				Definition: StringLength(substring(diffNames(tvdiff),-StringLength(diffNames(tvdiff)),-6));
			}
			Parameter tst2 {
				IndexDomain: tv_index;
				Definition: StringLength(TV_Names(tv_index));
			}
			ElementParameter TVO_pass {
				IndexDomain: tvo;
				Range: TransferVariableParms_;
				Definition: StringtoElement(TransferVariableParms_,FormatString("%e%s",tvo,"_pass"));
			}
			ElementParameter TVO_calc {
				IndexDomain: tvo;
				Range: TransferVariableParms_;
				Definition: StringtoElement(TransferVariableParms_,FormatString("%e%s",tvo,"_calc"));
			}
			Parameter TVO_diff {
				IndexDomain: tvo;
			}
			Set TVO_Pass_ {
				SubsetOf: TransferVariableParms_;
			}
			Set TVOdiff_Identifiers_ {
				SubsetOf: AllIdentifiers;
				Index: tvdiff;
				Definition: TransferVariable_Output_Check;
			}
			Parameter TVOcard {
				IndexDomain: tvdiff;
			}
			StringParameter TV_Names {
				IndexDomain: tv_index;
				Definition: FormatString("%e",tv_index);
			}
			StringParameter diffNames {
				IndexDomain: tvdiff;
				Definition: FormatString("%e",tvdiff);
			}
			Parameter TVO_diff_calc_mapping {
				IndexDomain: (tv_index,tvdiff);
				Definition: {
					if FormatString("%e",tv_index)=substring(diffNames(tvdiff),-StringLength(diffNames(tvdiff)),-6) then
					1
					endif
				}
			}
			Parameter TVOcardinality {
				IndexDomain: tv_index;
			}
			ElementParameter TVOdiffColor {
				IndexDomain: tv_index;
				Range: AllColors;
			}
		}
		Procedure FindCompareParameters {
			Body: {
				ccalcCoefName:=FormatString("%e",ccalc_DisplayElement); !convert ccalc parameter name to the string
				ccalcNameLength:=StringLength(ccalcCoefName);           ! find the length of the string
				ccalcCoefName:=SubString(ccalcCoefName,7,ccalcNameLength);  !remove the 'ccalc_' part from the string
				cpassCoefName:=FormatString("cpass_%s",ccalcCoefName);      !create corresponding 'cpass_' string
				cdiffCoefName:=FormatString("cdiff_%s",ccalcCoefName);      !create corresponding 'cdiff_' string
				compareCoefName:=FormatString("compare_%s",ccalcCoefName);  !create corresponding 'compare_' string
				percentCoefName:=FormatString("percent_%s",ccalcCoefName);  !create corresponding 'percent_' string
				cpass_DisplayElement:=StringtoElement(AllCompare_Identifiers_,cpassCoefName);  !convert the cpass string to set element
				cdiff_DisplayElement:=StringtoElement(AllCompare_Identifiers_,cdiffCoefName);  !convert the cdiff string to set element
				compare_DisplayElement:=StringtoElement(Compare_Identifiers_,compareCoefName); !convert the compare string to set element
				percent_DisplayElement:=StringtoElement(Compare_Identifiers_,percentCoefName); !convert the percent string to set element
				
				AllCompare_DisplaySet_:={ccalc_DisplayElement,cpass_DisplayElement,cdiff_DisplayElement};      !add  elements to the display set
				
				cdiff_DisplaySet_:={cdiff_DisplayElement};              !add the element to the display set
				
				Compare_DisplaySet_:={compare_DisplayElement,percent_DisplayElement};          !add  elements to the display set
			}
			DeclarationSection Local_Declaration {
				StringParameter ccalcCoefName;
				StringParameter cpassCoefName;
				StringParameter cdiffCoefName;
				StringParameter compareCoefName;
				StringParameter percentCoefName;
				Parameter ccalcNameLength;
				ElementParameter cpass_DisplayElement {
					Range: AllCompare_Identifiers_;
				}
				ElementParameter cdiff_DisplayElement {
					Range: AllCompare_Identifiers_;
				}
				ElementParameter compare_DisplayElement {
					Range: Compare_Identifiers_;
				}
				ElementParameter Percent_DisplayElement {
					Range: Compare_Identifiers_;
				}
			}
		}
		Procedure FindNumberOfActiveCPass {
			Body: {
				TheCardinalities(cpass_Identifiers__i):=Card(cpass_Identifiers__i);
				CountActiveCPassParameters:=card(TheCardinalities);
			}
		}
		Procedure CountNumberOfNonEmptyCdiff {
			Body: {
				Update Compare_Identifiers_;
				Cards_comp(comp_all):=card(comp_all );
				!Cardinalities_cdiff(cdiff_all):=card(cdiff_all);
				Cards_cdiff(ccalc_only):=sum(comp_all| Compare_ccalc_mapping(ccalc_only, comp_all), Cards_comp(comp_all ));
				CountActiveCdiffParameters:=card(Cards_cdiff);
				cCompColor3(ccalc_only):= if Cards_cdiff(ccalc_only) then
				 'red'
				else
				 'default background'
				endif;
			}
		}
		Procedure CountNumberOfNonEmptyCcalc {
			Body: {
				TheCardinalities_ccalc(ccalc_only):=card(ccalc_only );
				CountActiveCCalcParameters:=card(TheCardinalities_ccalc);
			}
		}
		Procedure CountActiveTransferVariables {
			Body: {
				TVCards(tv_index):=Card(tv_index);
				CountActiveTVParameters:=card(TVCards);
				Update TVOdiff_Identifiers_;
				TVOcard(tvdiff):=card(tvdiff );
				TVOcardinality(tv_index):=sum(tvdiff| TVO_diff_calc_mapping(tv_index, tvdiff), TVOcard(tvdiff));
				TVOdiffColor(tv_index):= if TVOcardinality(tv_index)>0 then
				 'red'
				else
				 'default background'
				endif;
			}
		}
		Procedure SelectDisplaycpass {
			Arguments: (DisplaycPass);
			Body: {
				cpass_DisplaySet_:={DisplaycPass};
			}
			ElementParameter DisplaycPass {
				Range: cpass_Identifiers_;
				Property: Input;
			}
		}
		Procedure SelectDisplayCcalc {
			Arguments: (DispalycCalc);
			Body: {
				ccalcCoefName:=FormatString("%e",DispalycCalc); !convert ccalc parameter name to the string
				ccalcNameLength:=StringLength(ccalcCoefName);           ! find the length of the string
				ccalcCoefName:=SubString(ccalcCoefName,7,ccalcNameLength);  !remove the 'ccalc_' part from the string
				cpassCoefName:=FormatString("cpass_%s",ccalcCoefName);      !create corresponding 'cpass_' string
				cdiffCoefName:=FormatString("cdiff_%s",ccalcCoefName);      !create corresponding 'cdiff_' string
				compareCoefName:=FormatString("compare_%s",ccalcCoefName);  !create corresponding 'compare_' string
				percentCoefName:=FormatString("percent_%s",ccalcCoefName);  !create corresponding 'percent_' string
				cpass_DisplayElement:=StringtoElement(AllCompare_Identifiers_, cpassCoefName);  !convert the cpass string to set element
				cdiff_DisplayElement:=StringtoElement(AllCompare_Identifiers_, cdiffCoefName);  !convert the cdiff string to set element
				compare_DisplayElement:=StringtoElement(Compare_Identifiers_, compareCoefName); !convert the compare string to set element
				percent_DisplayElement:=StringtoElement(Compare_Identifiers_,percentCoefName); !convert the percent string to set element
				
				AllCompare_DisplaySet_:={DispalycCalc,cpass_DisplayElement,cdiff_DisplayElement};      !add elements to the display set
				
				cdiff_DisplaySet_:={cdiff_DisplayElement};              !add an element to the display set
				
				Compare_DisplaySet_:={compare_DisplayElement,percent_DisplayElement};          !add  elements to the display set
				
				ccalc_DisplayElement:=DispalycCalc;
			}
			ElementParameter DispalycCalc {
				Range: ccalcOnly_Identifiers_;
				Property: Input;
			}
			StringParameter ccalcCoefName;
			StringParameter cpassCoefName;
			StringParameter cdiffCoefName;
			StringParameter compareCoefName;
			StringParameter percentCoefName;
			Parameter ccalcNameLength;
			ElementParameter cpass_DisplayElement {
				Range: AllCompare_Identifiers_;
			}
			ElementParameter cdiff_DisplayElement {
				Range: AllCompare_Identifiers_;
			}
			ElementParameter compare_DisplayElement {
				Range: Compare_Identifiers_;
			}
			ElementParameter Percent_DisplayElement {
				Range: Compare_Identifiers_;
			}
		}
		Procedure SelectCpassDisplayElement {
			Body: {
				cpass_DisplaySet_:={cpass_DisplayElement};
			}
		}
		Procedure BuildTVOParms_DisplaySet {
			Arguments: (DisplayTranVar);
			Body: {
				  if DisplayTranVar in TVO_Parms_ then
				  	CoefName:=FormatString("%e",DisplayTranVar); !convert parameter name to the string
				
				  	passCoefName:=FormatString("%s%s",CoefName,"_pass");      !create corresponding '_pass' string
				  	calcCoefName:=FormatString("%s%s",CoefName,"_calc");      !create corresponding '_calc' string
				  	pass_DisplayElement:=StringtoElement(TransferVariableParms_,passCoefName);  !convert the _pass string to set element
				  	calc_DisplayElement:=StringtoElement(TransferVariableParms_,calcCoefName);  !convert the _calc string to set element
				
				  	TVO_DisplaySet_:={DisplayTranVar,pass_DisplayElement,calc_DisplayElement};      !add the elements to the display set
				
				  elseif DisplayTranVar in TVI_Parms_ then
				  	TVO_DisplaySet_:={DisplayTranVar};      !add the elements to the display set
				  endif;
			}
			DeclarationSection Local_Declaration {
				StringParameter CoefName;
				StringParameter passCoefName;
				StringParameter calcCoefName;
				ElementParameter pass_DisplayElement {
					Range: TransferVariableOutputParms_;
				}
				ElementParameter calc_DisplayElement {
					Range: TransferVariableParms_;
				}
				ElementParameter DisplayTranVar {
					Range: TransferVariableParms_;
					Property: Input;
				}
			}
		}
		Procedure UncompressInputFiles {
			Body: {
				!Check is composite_yyyy_ii.txt file exists and if not unzip it
				CompositeFileName:= "composite_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt";
				if not fileexists(CompositeFileName) then
				CompositeFileName:= "composite_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt.gz";
				Execute("\"C:/Program Files/WinZip/winzip64.exe\"", CompositeFileName);
				endif;
				!Check is OutToNEMS_yyyy_ii.txt file exists and if not unzip it
				CompositeFileName:= "OutToNEMS_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt";
				if not fileexists(CompositeFileName) then
				CompositeFileName:= "OutToNEMS_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt.gz";
				Execute("\"C:/Program Files/WinZip/winzip64.exe\"", CompositeFileName);
				endif;
				!Check is PassBack_yyyy_ii.txt file exists and if not unzip it
				CompositeFileName:= "PassBack_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt";
				if not fileexists(CompositeFileName) then
				CompositeFileName:= "PassBack_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt.gz";
				Execute("\"C:/Program Files/WinZip/winzip64.exe\"", CompositeFileName);
				endif;
			}
			DeclarationSection FileName_Declaration {
				StringParameter PassbackFileName;
				StringParameter CompositeFileName;
			}
		}
		Procedure EmptyAllParametersForNewRun {
			Body: {
				!Empty AllParameters;
				Empty AllIdentifiers;
				ReadSetData;
				casefileload("data\\efd.data");
			}
			StringParameter casefilename;
		}
		Procedure Procedure_1 {
			Body: {
				
				!TVO_diff(tvo):=TVO_pass(tvo) - TVO_calc(tvo);
			}
		}
	}
	Section Subroutines {
		DeclarationSection OPBSLD_Declaration {
			Parameter BSLD_HRFAC {
				IndexDomain: (SliceSorted,Season,SupplyRegion);
				Definition: ELWDTH(SliceSorted, Season, SupplyRegion)/$ EETIME(Season, SupplyRegion);
			}
			Parameter BSLD_CF_UP {
				IndexDomain: (OperatingMode,Season,SupplyRegion);
				Definition: sum(SliceSorted_ALT1| ord(SliceSorted_ALT1)<=ord(OperatingMode), BSLD_HRFAC(SliceSorted_ALT1, Season, SupplyRegion));
			}
			Parameter BSLD_CF_LO {
				IndexDomain: (OperatingMode,Season,SupplyRegion);
				Definition: sum(SliceSorted_ALT1| ord(SliceSorted_ALT1)<=ord(OperatingMode), BSLD_HRFAC(SliceSorted_ALT1-1, Season, SupplyRegion));
			}
			Parameter BSLD_Gen {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter BSLD_GenMin {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter BSLD_GenMax {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter BSLD_CLSH {
				IndexDomain: (PlantGroup,FuelRegion_ALT1)| PlantGroup in CoalPlantGroup_ and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: 1-(BSLD_OLSH(PlantGroup, FuelRegion_ALT1)+BSLD_GASSH(PlantGroup, FuelRegion_ALT1)+BSLD_CFSH(PlantGroup, FuelRegion_ALT1));
			}
			Parameter BSLD_GASSH {
				IndexDomain: (PlantGroup,FuelRegion_ALT1) | FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
			}
			Parameter BSLD_OLSH {
				IndexDomain: (PlantGroup,FuelRegion_ALT1) | FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
			}
			Parameter BSLD_CFSH {
				IndexDomain: (PlantGroup,FuelRegion_ALT1)| PlantGroup in CoalPlantGroup_ and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: {
					if ((EDMXGS_ECP(UG_ECPt_to_PlantGroup(PlantGroup),FuelRegion_ALT1) + EDMXDS_ECP(UG_ECPt_to_PlantGroup(PlantGroup),FuelRegion_ALT1) +
					   UPWDCFR(UG_ECPt_to_PlantGroup(PlantGroup),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1)  then
						UPWDCFR(UG_ECPt_to_PlantGroup(PlantGroup),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))/(EDMXGS_ECP(UG_ECPt_to_PlantGroup(PlantGroup),FuelRegion_ALT1) +
						EDMXDS_ECP(UG_ECPt_to_PlantGroup(PlantGroup),FuelRegion_ALT1) + UPWDCFR(UG_ECPt_to_PlantGroup(PlantGroup),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
					   else
						UPWDCFR(UG_ECPt_to_PlantGroup(PlantGroup),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))
					   endif
				}
			}
			Parameter GSPR {
				IndexDomain: (PlantGroup,FuelRegion_ALT1)| PlantGroup in UptoCNPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(PlantGroup);
				Definition: min(UPFUEL(FuelType_UIGF_element, EPGSMP_to_int_fuel_region(FuelRegion_ALT1)),UPFUEL(FuelType_UIGC_element, EPGSMP_to_int_fuel_region(FuelRegion_ALT1)));
			}
			Parameter OLPR {
				IndexDomain: (PlantGroup,FuelRegion_ALT1)| PlantGroup in UptoCNPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(PlantGroup);
				Definition: {
					if UG_ECPt_to_PlantGroup(PlantGroup)=WIST_Element then
					UPFUEL(FuelType_UIRH_element, EPCSMP_to_int_fuel_region(FuelRegion_ALT1))
					else
					UPFUEL(FuelType_UIDS_element, EPCSMP_to_int_fuel_region(FuelRegion_ALT1))
					endif
				}
			}
			Parameter CLCAR {
				IndexDomain: (PlantGroup,FuelRegion_ALT1);
			}
			Parameter OGCAR {
				IndexDomain: (PlantGroup,FuelRegion_ALT1);
			}
			Parameter WDCAR {
				IndexDomain: (PlantGroup,FuelRegion_ALT1);
			}
			Parameter ALT_CLCAR {
				IndexDomain: (PlantGroup,FuelRegion_ALT1);
			}
			Parameter ALT_OGCAR {
				IndexDomain: (PlantGroup,FuelRegion_ALT1);
			}
			Parameter ALT_WDCAR {
				IndexDomain: (PlantGroup,FuelRegion_ALT1);
			}
			Parameter CO2LB {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter CO2LB_MAX {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter CO2LB_MIN {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter ALT_CO2LB {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter ALT_CO2LB_MAX {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter ALT_CO2LB_MIN {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter HTRT_ADJ {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter HTRT_ADJ_MIN {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter HTRT_ADJ_MAX {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter MAX_EFF {
				IndexDomain: (int_fuel_region_ALT1, PlantType_ECP);
				Definition: {
					if FLRG_HR_KNOTS(int_fuel_region_ALT1, PlantType_ECP)=0 then
					1
					else
					FLRG_HR_EFF(int_fuel_region_ALT1, PlantType_ECP, N_KNOT(int_fuel_region_ALT1, PlantType_ECP))
					endif
				}
			}
			Parameter Target_EFF {
				IndexDomain: (SupplyRegion, Season, PlantGroup, OperatingMode);
			}
			Parameter BTUREQ {
				IndexDomain: (PlantGroup,Season,OperatingMode);
			}
			Parameter BTUREQ_Min {
				IndexDomain: (PlantGroup,Season,OperatingMode);
			}
			Parameter BTUREQ_Max {
				IndexDomain: (PlantGroup,Season,OperatingMode);
			}
			Parameter OPBSLD_Condition {
				IndexDomain: {
					(SupplyRegion,Season,PlantGroup,OperatingMode) |PlantGroup in FirstPlantGroup_ and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup) and OperatingMode in OperatingMode_Active_ and
					EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1
				}
				Definition: {
					IF (WUPPER(UG_EFDt_to_PlantType(PlantGroup))>= BSLD_CF_LO(OperatingMode, Season, SupplyRegion) and
					WLOWER(UG_EFDt_to_PlantType(PlantGroup))<= BSLD_CF_UP(OperatingMode, Season, SupplyRegion)) THEN
					1
					endif
				}
			}
			Parameter OPBSLD_ADJ_FAC {
				IndexDomain: PlantGroupOrd | EPPOPR(UG_EFDt_to_PlantGroupOrd(PlantGroupOrd))=1;
				Definition: {
					if (UPPCEF(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd)) > UPPCEF_MIN(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd)) and RUN45Q and UGNOCCS(PlantGroupOrd)<> 1) then
					  ALT_UECP_CPEN_ADJ(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd)) / (1.0 - UGNOCCS(PlantGroupOrd))
					else
					  1
					endif
				}
			}
			ElementParameter Min_Knot {
				IndexDomain: (SupplyRegion, Season, PlantGroup, OperatingMode);
				Range: Eleven_;
			}
			ElementParameter N_KNOT {
				IndexDomain: (int_fuel_region_ALT1, PlantType_ECP);
				Range: Eleven_;
				Definition: element(Eleven_, FLRG_HR_KNOTS(int_fuel_region_ALT1, PlantType_ECP));
			}
			ElementParameter F_KNOT {
				Range: Eleven_;
				Definition: first(Eleven_);
			}
			Parameter Load_leveltemp {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode,Eleven);
			}
			Parameter INUC {
				IndexDomain: PlantType_ECP;
				Definition: {
					! if ECP/RESTORE has run, set flags to use RESTORE CF
					!Condition AIMMS_GRP(PlantType_ECP)=AINU is used here instead of StorageCodes(UCPVSTOR(IECP)) .EQ. 'NC' since arraycode tool is
					!not designed to handle character array variables
					if ((ord(cyr) + UHBSYR('1'))>= UPSTYR('1') and AIMMS_GRP(PlantType_ECP)=AINU('1')) then
					 1
					endif
				}
			}
			Parameter IFOSBS {
				IndexDomain: PlantType_ECP | PlantType_ECP in DispatchableECP_;
				Definition: {
					! if ECP/RESTORE has run, set flags to use RESTORE CF
					if ((ord(cyr) + UHBSYR('1'))>= UPSTYR('1') and UPPCFB(PlantType_ECP, '1')> 0.001 and UPAVLYR(PlantType_ECP) < 9000) then
					 1
					endif
				}
			}
			Parameter FuelEL {
				IndexDomain: UptoCNPlantGroup;
				Definition: {
					if UG_ECPt_to_PlantGroup(UptoCNPlantGroup)=WIST_Element then
					     ERSEL(cyr)
					else
					     EDSEL(cyr)
					endif
				}
			}
			Parameter CO2_PLTET {
				IndexDomain: (PlantType_ECP, SupplyRegion) | (PlantType_ECP=WIET_Element or PlantType_ECP=WICT_Element or PlantType_ECP=WIAT_Element) and EPPOPR(PlantType_ECP_to_PlantType(PlantType_ECP))=1;
				Definition: CO2_PLTRG(PlantType_ECP, SupplyRegion);
			}
			Parameter CO2_PLTSW_alt {
				IndexDomain: {
					(SupplyRegion, Season, PlantGroup, OperatingMode) | PlantGroup in FirstPlantGroup_ and
					UG_EMM_RG_Mapping(SupplyRegion, PlantGroup)
				}
				Definition: {
					if (UG_ECPt_to_PlantGroup(PlantGroup)=WIET_Element or UG_ECPt_to_PlantGroup(PlantGroup)=WICT_Element or UG_ECPt_to_PlantGroup(PlantGroup)=WIAT_Element)
					and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 then
					 IF (CO2_STDTN(SupplyRegion)=2 AND (BSLD_Gen(SupplyRegion, Season, PlantGroup, OperatingMode) / EETIME(Season, SupplyRegion)) > CO2_THRET('1')) THEN
					        1.0
					 ELSE
					        CO2_PLTET(UG_ECPt_to_PlantGroup(PlantGroup),SupplyRegion)
					 ENDIF
					else
					 CO2_PLTRG(UG_ECPt_to_PlantGroup(PlantGroup),SupplyRegion)
					endif
				}
			}
			Parameter FossilNucBMGroup {
				IndexDomain: {
					PlantGroup | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)) <= UISMR('1') or
					UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))  = UIBMS('1') or UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)) = UIDGB('1') or
					UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)) = UIDGP('1'))
				}
				Definition: 1;
			}
		}
		DeclarationSection ED_RNW_Declaration {
			Parameter RNW_CAP {
				IndexDomain: (Season,PlantGroupOrd)| UG_EFDt(PlantGroupOrd)=UIHYR('1') or (UG_EFDt(PlantGroupOrd)=UIHYC('1') and Val(cyr)+UHBSYR('1')<UPSTYR('1'));
				Definition: UG_CAP(Season, PlantGroupOrd) *0.001;
			}
			Parameter RNW_MAXXCF {
				IndexDomain: (Season,PlantGroupOrd)| UG_EFDt(PlantGroupOrd)=UIHYR('1') or (UG_EFDt(PlantGroupOrd)=UIHYC('1') and Val(cyr)+UHBSYR('1')<UPSTYR('1'));
				Definition: {
					UG_SCF(Season, PlantGroupOrd) *
					if UG_ECPt(PlantGroupOrd)=WIHY('1') then URHYCFA(cyr)
					else 1
					endif
				}
			}
			Parameter RNW_MAXNRG {
				IndexDomain: (Season,PlantGroupOrd)| UG_EFDt(PlantGroupOrd)=UIHYR('1') or (UG_EFDt(PlantGroupOrd)=UIHYC('1') and Val(cyr)+UHBSYR('1')<UPSTYR('1'));
				Definition: RNW_CAP(Season, PlantGroupOrd) * RNW_MAXXCF(Season, PlantGroupOrd) * EETIME(Season, UG_EMM_RG_to_PlantGroupOrd(PlantGroupOrd));
			}
		}
		DeclarationSection ED_COL_Declaration {
			Parameter StepSize {
				IndexDomain: CoalProductionStep;
				Definition: {
					if CoalProductionStep>'01' then
					sum(eleven|ord(eleven)=ord(CoalProductionStep), XCL_STEPS(Eleven)-XCL_STEPS(Eleven-1))
					else
					sum(eleven|ord(eleven)=ord(CoalProductionStep), 1+ XCL_STEPS(Eleven))
					endif
				}
			}
			Parameter CoalSupplyCurveQ {
				IndexDomain: (CoalSupplyCurve,CoalProductionStep);
			}
			Parameter PRDLIM {
				IndexDomain: (CoalSupplyCurve);
			}
			Parameter Allowed {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion,PlantType_ECP,numACI);
			}
			Parameter MACT_EMF {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion,PlantType_ECP);
			}
			Parameter MACT_SW {
				IndexDomain: (EmissionRank,PlantType_ECP);
			}
			Parameter EMF_T {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion,PlantType_ECP,numACI);
			}
			Parameter RACI {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion,PlantType_ECP,numACI);
			}
			Parameter EMF_PRCNT {
				IndexDomain: (EmissionRank,PlantType_ECP);
			}
			Parameter EMF_IN {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion,PlantType_ECP);
			}
			Parameter EMF_OUT {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion,PlantType_ECP);
			}
			Parameter SO2SHR {
				IndexDomain: (SO2Region,CoalDemandRegion_ALT1);
				Definition: {
					!(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)| PlantType_ECP in CoalPlant_ECP_
					!IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and CoalSupplyCurve <= MX_NCOALS_Element and
					!XCL_TRNINDX(UtilitySector_Element(PlantType_ECP), CoalSupplyCurve, CoalDemandRegion_ALT1)> 0 and
					!ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and ACIOption>'0') then
					!
					!IF ((ord(cyr) + UHBSYR('1')) < TRANRULE1('1'))THEN
					!SO2_SHR_BY_CLRG(nHGCODE_to_CoalDemandRegion(CoalDemandRegion_ALT1), SO2Region)
					!ELSE
					!TSO2_SHR_BY_CLRG(CoalDemandRegion_ALT1, SO2_Transport_Element(SO2Region))
					!ENDIF
					!endif
					
					IF ((ord(cyr) + UHBSYR('1')) < TRANRULE1('1'))THEN
					SO2_SHR_BY_CLRG(nHGCODE_to_CoalDemandRegion(CoalDemandRegion_ALT1), SO2Region)
					ELSE
					TSO2_SHR_BY_CLRG(CoalDemandRegion_ALT1, SO2_Transport_Element(SO2Region))
					ENDIF
				}
			}
			Parameter rT_Flag {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
				Definition: {
					sum(PlantType_ECP| (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and CoalSupplyCurve <= MX_NCOALS_Element and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					XCL_TR_T2(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr)> XCL_TR_T1(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr) and
					EFD_TIER1_LIM(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD_Element(nIFGD), cyr)>0 AND ord(PlantType_ECP)<WIPC('1')) and
					ord(nIFGD)=ECP_SCRUB(UtilitySector_Element(PlantType_ECP), cyr), 1)
					
					!
				}
			}
			Parameter CTLS_COEFF {
				IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1);
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CoalSupplyCurve <= MX_NCOALS_Element and CTLBTU(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr)>0 and
					 SO2SHR(SO2Region, CoalDemandRegion_ALT1) > 0.0001)THEN
					   CTLBTU(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr) * XCL_SO2_YR(CoalSupplyCurve, cyr) * (1 - RCLCLNR(CoalDemandRegion_ALT1, cyr, WIIG_Element)) *
					     SO2SHR(SO2Region, CoalDemandRegion_ALT1) * 0.5
					endif
				}
			}
			Parameter CTLSO2_COEFF {
				IndexDomain: (CoalDemandRegion_ALT1);
				Definition: {
					IF TSO2_YR_BY_CLRG('1') < 9999 THEN
					   sum(CoalSupplyCurve|CoalSupplyCurve <= MX_NCOALS_Element and TOT_TYPE(CoalSupplyCurve) > 0 and CTLBTU(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr)>0,
					   CTLBTU(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr) * XCL_SO2_YR(CoalSupplyCurve, cyr) * (1 - RCLCLNR(CoalDemandRegion_ALT1, cyr, WIIG_Element))*0.5)
					endif
				}
			}
			Parameter CTLHG_COEFF {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1);
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CoalSupplyCurve <= MX_NCOALS_Element and CTLBTU(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr)>0) then
					   CTLBTU(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr) * XCL_HG_YR(CoalSupplyCurve, cyr) * PLNT_EMF(WIIG_Element, EmissionRank_Element(CoalSupplyCurve)) * 0.5
					endif
				}
			}
			Parameter CTLCO_COEFF {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1);
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CoalSupplyCurve <= MX_NCOALS_Element and CTLBTU(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr)>0) then
					   CTLBTU(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr) * (1.0 / 2204.0) * XCL_CAR_YR(CoalSupplyCurve, cyr) * (12.0/44.0) * (1.0 - UPPCEF(WIIG_Element))
					endif
				}
			}
			Parameter rSULFUR_Flag {
				IndexDomain: (SO2Region);
				Definition: {
					if (UYR_NOCAIR('1')<= 0 or (ord(cyr) + UHBSYR('1')) < UYR_NOCAIR('1')) and
					             ((ord(cyr) + UHBSYR('1')) < TRANRULE1('1') or SO2Region = element(SO2Region_,NUM_SO2_GRP('1'))) then
					        1
					else
					        0
					endif
				}
			}
			Parameter EFD_SC_DR_PT {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion,PlantType_ECP)| PlantType_ECP in CoalPlant_ECP_;
				Definition: {
					IF (TOT_RATE1(CoalSupplyCurve, CoalDemandRegion) < 800 and TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion) > 0.0) then
					1
					endif
				}
			}
		}
		DeclarationSection OPHYD_Declaration {
			Parameter HYD_CF {
				IndexDomain: {
					(SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice in Slice_Active_ and
					PlantGroup in FirstPlantGroup_
					and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Definition: {
					if ( UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIHY('1') and Val(cyr)+UHBSYR('1')>=UPSTYR('1')) then
					   (1.0 - WFOR(UG_EFDt_to_PlantType(PlantGroup))) * HY_CF_EFD(Segment2_element(Slice, Season, SupplyRegion), Group2_element(Slice, Season, SupplyRegion), SupplyRegion)
					else
					  (1.0 - WFOR(UG_EFDt_to_PlantType(PlantGroup)))
					endif
				}
			}
			Parameter HYD_Gen {
				IndexDomain: {
					(SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice in Slice_Active_ and
					PlantGroup in FirstPlantGroup_ and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Definition: HYD_CF(SupplyRegion, Season, Slice, PlantGroup) * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion);
			}
			Parameter HYD_GenMin {
				IndexDomain: {
					(SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
					                           PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
					                           and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Definition: {
					!if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					!   SR_MIN_CF(UG_ECPt_to_PlantGroup(PlantGroup)) * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion)
					!endif
					
					SR_MIN_CF(UG_ECPt_to_PlantGroup(PlantGroup)) * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion) $
					  (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1'))
				}
			}
		}
		DeclarationSection OPRNBS_Declaration {
			Parameter RNBS_Gen {
				IndexDomain: (SupplyRegion,Season,PlantGroup);
			}
			Parameter RNBS_GenMin {
				IndexDomain: (SupplyRegion,Season,PlantGroup);
			}
			Parameter RNBS_GenMax {
				IndexDomain: (SupplyRegion,Season,PlantGroup);
			}
			Parameter RNBS_NOXEM {
				IndexDomain: (INOXP,Season,PlantGroup);
			}
			Parameter RNBS_NOXEMMin {
				IndexDomain: (INOXP,Season,PlantGroup);
			}
			Parameter RNBS_NOXEMMax {
				IndexDomain: (INOXP,Season,PlantGroup);
			}
			Parameter FossilNucBMGroup_RNBS {
				IndexDomain: {
					PlantGroup | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)) <= UIFCG('1') or
					UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))  = UIBMS('1') or UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)) = UIDGB('1') or
					UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)) = UIDGP('1'))
				}
				Definition: 1;
			}
		}
		DeclarationSection RTRNBS_Declaration {
			Parameter SRGEN_RNBS {
				IndexDomain: (Season,Slice,PlantGroup);
			}
			Parameter RNBS_Genslc {
				IndexDomain: (Season,Slice,PlantGroup);
			}
			Parameter RNBS_GenMinslc {
				IndexDomain: (Season,Slice,PlantGroup);
			}
			Parameter RNBS_GenMaxslc {
				IndexDomain: (Season,Slice,PlantGroup);
			}
		}
		DeclarationSection OPINT_Declaration {
			Parameter INT_CF {
				IndexDomain: {
					(Slice, Season, SupplyRegion,PlantGroup)| EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5 and PlantGroup in FirstPlantGroup_ and UG_EMM_RG_Mapping(SupplyRegion, PlantGroup)
					and Slice in Slice_Active_
				}
				Definition: {
					UG_GCF(Segment2_element(Slice, Season, SupplyRegion), Group2_element(Slice, Season, SupplyRegion), PlantGroupOrd2PlantGroup(PlantGroup)) *
					if UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WISO('1') then  URSOCFA(cyr)
					elseif  (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIPV('1') or UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIPT('1'))then URSOCFA(cyr)
					elseif  (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIWN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIWL('1'))then URWNCFA(cyr)
					else 1
					endif
					
					
					
					          !CF = UG_GCF(SEG,GRP,N)
					          !!STEOBM  apply CF adjustment for benchmarking (will be 1.0 if no benchmarking)
					          !          IF (IECP .EQ. WISO) CF = CF * URSOCFA(CURIYR)
					          !          IF (IECP .EQ. WIPV .OR. IECP .EQ. WIPT) CF = CF * URSOCFA(CURIYR)          !use same solar overall factor for PV
					          !          IF (IECP .EQ. WIWN .OR. IECP .EQ. WIWL) CF = CF * URWNCFA(CURIYR)
					          !!END STEOBM
				}
			}
			ElementParameter INT_CF_Color {
				IndexDomain: {
					(Slice, Season, SupplyRegion,PlantGroup)| EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5 and PlantGroup in FirstPlantGroup_ and UG_EMM_RG_Mapping(SupplyRegion, PlantGroup)
					and Slice in Slice_Active_
				}
				Range: AllColors;
				Definition: {
					if INT_CF(Slice, Season, SupplyRegion, PlantGroup)=1 then
					'red'
					!else
					!'black'
					endif
				}
			}
			Parameter INT_Gen {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup)| EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5 and PlantGroup in FirstPlantGroup_ and UG_EMM_RG_Mapping(SupplyRegion, PlantGroup);
				Definition: INT_CF(Slice, Season, SupplyRegion, PlantGroup) * ELWDTH(Slice2SliceSorted_element(Slice, Season, SupplyRegion), Season, SupplyRegion) $ (0<INT_CF(Slice, Season, SupplyRegion, PlantGroup)<=1.0);
			}
		}
		DeclarationSection OPDG_Declaration {
			Parameter OPDG_Condition {
				IndexDomain: {
					(SupplyRegion,Season,PlantGroup,OperatingMode) |PlantGroup in FirstPlantGroup_ and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup) and OperatingMode in OperatingMode_Active_ and
					EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6
				}
				Definition: {
					IF (WUPPER(UG_EFDt_to_PlantType(PlantGroup))>= BSLD_CF_LO(OperatingMode, Season, SupplyRegion) and
					WLOWER(UG_EFDt_to_PlantType(PlantGroup))<= BSLD_CF_UP(OperatingMode, Season, SupplyRegion)) THEN
					1
					endif
				}
			}
			Parameter OPDG_Slice_Mapping {
				IndexDomain: (Season,Slice,PlantGroup);
				Definition: 1 $ sum(OperatingMode| ord(Slice)=ord(OperatingMode), OPDG_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode));
			}
			Parameter OPDG_Slice_Mapping1 {
				IndexDomain: (Season,Slice,PlantGroup);
				Definition: 1  $ (slice= OPDG_Slice(Season, PlantGroup));
			}
			ElementParameter OPDG_OperatingMode {
				IndexDomain: (Season,PlantGroup) |PlantGroup in FirstPlantGroup_;
				Range: OperatingMode_Active_;
				Definition: max(OperatingMode|OPDG_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode),OperatingMode);
			}
			ElementParameter OPDG_Slice {
				IndexDomain: (Season,PlantGroup) | PlantGroup in FirstPlantGroup_;
				Range: Slice_;
				Definition: max(slice| OPDG_Slice_Mapping(Season, Slice, PlantGroup),slice);
			}
			Parameter OPDG_ADJ {
				IndexDomain: {
					(SupplyRegion,Season,Slice,PlantGroup) | PlantGroup in FirstPlantGroup_ and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OPDG_Slice_Mapping(Season, Slice, PlantGroup)
				}
				Definition: {
					if OPDG_Slice_Mapping1(Season, slice, PlantGroup) then
					  (WUPPER(UG_EFDt_to_PlantType(PlantGroup)) - sum(OperatingMode|ord(Slice)=ord(OperatingMode), BSLD_CF_LO(OperatingMode, Season, SupplyRegion))) / $
					  (sum(OperatingMode|ord(Slice)=ord(OperatingMode),BSLD_CF_UP(OperatingMode, Season, SupplyRegion)) -
					  sum(OperatingMode|ord(Slice)=ord(OperatingMode),BSLD_CF_LO(OperatingMode, Season, SupplyRegion)))
					else
					  1
					endif
				}
			}
			Parameter OPDG_Gen {
				IndexDomain: (SupplyRegion,Season,PlantGroup)| SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup) and PlantGroup in FirstPlantGroup_;
				Definition: {
					sum(Slice|OPDG_Slice_Mapping(Season, Slice, PlantGroup), OPDG_ADJ(SupplyRegion, Season, Slice, PlantGroup) * 1 *
					ELWDTH(Slice2SliceSorted_element(slice, Season, SupplyRegion), Season, SupplyRegion))
				}
			}
			Parameter OPDG_NOXEM {
				IndexDomain: (INOXP,Season,PlantGroup)|PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6;
				Definition: {
					OPDG_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(PlantGroup)) *
					UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.0005 * 0.001
				}
			}
		}
		DeclarationSection ED_CAR_Declaration {
			Parameter EDCAR_VALLM {
				IndexDomain: CO2CapGroup;
				Definition: {
					IF (ord(CO2CapGroup) = CARGRP_CA('1'))THEN
					    AB_CAP_TOT(cyr) * (1.0 - AB_CSTCONT_FRAC(cyr))
					else
					    CO2BYGRP(CO2CapGroup, cyr)-
					    if ord(CO2CapGroup) = CARGRP_RG('1') then CO2EQGRP(CO2CapGroup, cyr) endif
					endif
				}
			}
			Parameter Carbon_VALLM_Flag {
				IndexDomain: CO2CapGroup;
				Definition: {
					if 0<EDCAR_VALLM(CO2CapGroup)<9000 then
					  1
					endif
				}
			}
		}
		DeclarationSection Common_Declarations {
			Parameter DRAT {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
			}
			Parameter DRAT_MIN {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
			}
			Parameter DRAT_MAX {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
			}
			Parameter DRAT_ORG {
				IndexDomain: (Season,Slice,PlantGroup);
			}
			Parameter MAXCF {
				IndexDomain: (Season,PlantGroup);
			}
			Parameter SP_HOURS {
				IndexDomain: (Season,SupplyRegion);
				Definition: sum(SliceSorted| ord(SliceSorted)<=ELNVCT(Season,SupplyRegion), ELWDTH(SliceSorted, Season, SupplyRegion));
			}
			Parameter RPSCST {
				IndexDomain: PlantGroupOrd;
			}
			Parameter Factor {
				IndexDomain: (SupplyRegion,Season,PlantGroup);
			}
			Parameter Factor_MIN {
				IndexDomain: (SupplyRegion,Season,PlantGroup);
			}
			Parameter Factor_MAX {
				IndexDomain: (SupplyRegion,Season,PlantGroup);
			}
			Parameter MAX_SP_LOAD {
				IndexDomain: (SupplyRegion,Season,PlantGroup);
			}
			Parameter MIN_SP_LOAD {
				IndexDomain: (SupplyRegion,Season,PlantGroup);
			}
			Parameter CO2ADJ {
				IndexDomain: PlantGroupOrd;
				Definition: {
					!ACCOUNT FOR CHP ADJUSTMENT FOR NT COGEN
					if (UG_MRUN(PlantGroupOrd)>9000) then
					  CO2_ADJNT('1')
					else
					  1
					endif
				}
			}
			Parameter IGS1 {
				IndexDomain: PlantGroup | PlantGroup in FirstPlantGroup_;
				Definition: {
					1 $ (sum(FuelsPerPlant,UIGAS(WFLTP_to_FuelType(UG_EFDt_to_PlantType(PlantGroup), FuelsPerPlant)))>=1);
				}
			}
			Parameter IGS2 {
				IndexDomain: PlantType;
				Definition: {
					1 $ (sum(FuelsPerPlant,UIGAS(WFLTP_to_FuelType(PlantType, FuelsPerPlant)))>=1);
				}
			}
			Parameter ED_CL_IMPORTS_Sign {
				Definition: {
					if XCL_STOCK(cyr)>=0 then
					  1
					else
					  -1
					endif
				}
			}
			Parameter ED_COL_SULFUR_Switch {
				IndexDomain: SO2Region;
				Definition: {
					IF ((UYR_NOCAIR('1') <= 0 OR (ord(cyr) + UHBSYR('1')) < UYR_NOCAIR('1')) AND
					((ord(cyr) + UHBSYR('1')) < TRANRULE1('1') or SO2Region=NUM_SO2_GRP_Element))THEN
					 1
					else
					 0
					endif
				}
			}
			Parameter SHR_NOCCS {
				IndexDomain: PlantType_ECP | EPPOPR(PlantType_ECP_to_PlantType(PlantType_ECP))=1;
				Definition: {
					if (UPPCEF(PlantType_ECP) > UPPCEF_MIN(PlantType_ECP) and RUN45Q) then
					  ((1.0 - UPPCEF_MIN(PlantType_ECP))-(1.0 - UPPCEF(PlantType_ECP)))/ $
					  ((1.0 - UPPCEF(I_NOCCS(PlantType_ECP)))-(1.0 - UPPCEF(PlantType_ECP)))
					endif
				}
			}
			Parameter SHR_CCS {
				IndexDomain: PlantType_ECP | EPPOPR(PlantType_ECP_to_PlantType(PlantType_ECP))=1;
				Definition: {
					if (UPPCEF(PlantType_ECP) > UPPCEF_MIN(PlantType_ECP) and RUN45Q) then
					   1-SHR_NOCCS(PlantType_ECP)
					else
					   1
					endif
				}
			}
			Parameter CP_CRG {
				IndexDomain: (PlantType_ECP,CoalDemandRegion);
				Definition: {
					sum(FuelRegion | CoalDemandRegion=EPCLMP_to_CoalDemandRegion(FuelRegion) and
					CPFLECP(PlantType_ECP, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion), EPGSMP_to_int_fuel_region(FuelRegion))>0,
					CPFLECP(PlantType_ECP, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion), EPGSMP_to_int_fuel_region(FuelRegion)))
				}
			}
			Parameter GPSCST {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter ALT_GPSCST {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter GPSCST_MIN {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter ALT_GPSCST_MIN {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter GPSCST_MAX {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter ALT_GPSCST_MAX {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
			}
			Parameter TOT_TYPE {
				IndexDomain: CoalSupplyCurve;
				Definition: {
					if CoalSupplyCurve <= MX_NCOALS_Element then
					 XCL_TYPE(CoalSupplyCurve)
					else
					 1
					endif
				}
			}
			Parameter TOT_RATE1 {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion);
				Definition: {
					if CoalSupplyCurve <= MX_NCOALS_Element then
					 XCL_TR_T1(CoalSupplyCurve, CoalDemandRegion, cyr) * XCL_1TESC0(CoalSupplyCurve, cyr, CoalDemandRegion)
					else
					 if TPORT_Element(MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion) then
					   XCL_TR_IN(TPORT_Element(MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion), MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion, cyr) *
					   XCL_TESCI(TPORT_Element(MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion), cyr, CoalDemandRegion) +
					    TMP_XCL_TRATI2(MX_ISCV_Element(CoalSupplyCurve), TPORT_Element(MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion))
					 else
					   999.9
					 endif
					endif
				}
			}
			Parameter TOT_RATE2 {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion);
				Definition: {
					if CoalSupplyCurve <= MX_NCOALS_Element then
					 XCL_TR_T2(CoalSupplyCurve, CoalDemandRegion, cyr) * XCL_2TESC0(CoalSupplyCurve, cyr, CoalDemandRegion)
					else
					 if TPORT_Element(MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion) then
					   XCL_TR_IN(TPORT_Element(MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion), MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion, cyr) *
					   XCL_TESCI(TPORT_Element(MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion), cyr, CoalDemandRegion) +
					   TMP_XCL_TRATI2(MX_ISCV_Element(CoalSupplyCurve), TPORT_Element(MX_ISCV_Element(CoalSupplyCurve), CoalDemandRegion))
					 else
					   999.9
					 endif
					endif
				}
			}
			Parameter TMP_RATE {
				IndexDomain: (Four,CoalSupplyCurve_Int,CoalDemandRegion);
			}
			Parameter TMP_XCL_TRATI2 {
				IndexDomain: (CoalSupplyCurve_Int,Four);
				Definition: sum(CoalDemandRegion| ord(CoalDemandRegion)=ord(Four), XCL_TRATI2(CoalSupplyCurve_Int, CoalDemandRegion));
			}
			ElementParameter TPORT_Element {
				IndexDomain: (CoalSupplyCurve_Int, CoalDemandRegion);
				Range: Four_;
				Definition: {
					max(Four | TMP_XCL_TRATI2(CoalSupplyCurve_Int, Four) > 0.0 AND XCL_TR_IN(Four, CoalSupplyCurve_Int, CoalDemandRegion, cyr) < 900.0 AND XCL_TR_IN(Four, CoalSupplyCurve_Int, CoalDemandRegion, cyr) > 0.0 and
					 (XCL_TR_IN(Four, CoalSupplyCurve_Int, CoalDemandRegion, cyr) * XCL_TESCI(Four, cyr, CoalDemandRegion) + TMP_XCL_TRATI2(CoalSupplyCurve_Int, Four))<=
					 TMP_RATE(Four, CoalSupplyCurve_Int, CoalDemandRegion), Four)
				}
			}
			Parameter _45Q_Flag {
				IndexDomain: PlantGroup;
				Definition: {
					IF (UG_45Q(PlantGroupOrd2PlantGroup(PlantGroup)) = 0 OR RUN45Q = 0) THEN
					 0
					else
					 1
					endif
				}
			}
			Parameter rCO2QNR_Flag {
				IndexDomain: SupplyRegion | SupplyRegion in SupplyRegion_SUB_;
				Definition: {
					IF (CO2_STDSW('1') > 0 AND CO2_STDQN(SupplyRegion,cyr) > 0.0 AND CO2_STDTN(SupplyRegion) = 2)THEN
					  1
					endif
				}
			}
			Parameter rCO2RNR_Flag {
				IndexDomain: SupplyRegion | SupplyRegion in SupplyRegion_SUB_;
				Definition: {
					IF (CO2_STDSW('1') > 0 AND CO2_STDRN(SupplyRegion,cyr) > 0.0)THEN
					  1
					endif
				}
			}
			Parameter Nuclear_Flag {
				IndexDomain: {
					PlantGroup | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WICN('1') or
					 UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIAN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WISM('1') )
				}
				Definition: 1;
			}
			Parameter CARBONXX_Flag {
				Definition: {
					IF ((USW_CAR('1') = 2 OR USW_CAR('1') = 3) AND (ord(cyr)+UHBSYR('1')) >= UYR_CAR('1')) THEN
					1
					endif
				}
			}
			Parameter RPSR {
				IndexDomain: PlantGroupOrd;
			}
			Parameter TST_HG {
				IndexDomain: (UtilitySector,nHGCODE);
				Definition: {
					if UtilitySector in UtilitySector_Actual_ then
					if exists((PlantType_ECP, CoalSupplyCurve, CoalDemandRegion_ALT1, ACIOption)| UtilitySector=UtilitySector_Element(PlantType_ECP)and
					 ccalc_cCT_rMERC_le(PlantType_ECP, nHGCODE, CoalSupplyCurve, CoalDemandRegion_ALT1, ACIOption)) then
					1
					endif
					elseif UtilitySector=UtilitySectorPlus1 then
					if  exists(OilRegion| ccalc_cRTUS_rMERC_RSle(nHGCODE, OilRegion)) then
					1
					endif
					elseif UtilitySector=UtilitySectorPlus2 then
					if  exists(OilRegion| ccalc_cDTUS_rMERC_DSle(nHGCODE, OilRegion)) then
					1
					endif
					endif
				}
				Comment: "TST_HG(NUTSEC+3,1) = 1 is not coded since ED$CL_IMPORTS,3 is not set up in AIMMS";
			}
			Parameter TST_NOX {
				IndexDomain: (PlantType_ECPp2,INOXP);
			}
			Parameter TST_SO2 {
				IndexDomain: (PlantType_ECPp2,SO2Region);
				Definition: {
					if ord(PlantType_ECPp2) <= NUTSEC('1') then
					if exists((PlantType_ECP, CoalSupplyCurve, CoalDemandRegion_ALT1, ACIOption)| PlantType_ECPp2=PlantType_ECPp2_Element(PlantType_ECP)and
					 ccalc_cCT_rSULFle(PlantType_ECP, SO2Region, CoalSupplyCurve, CoalDemandRegion_ALT1, ACIOption)) then
					1
					endif
					elseif ord(PlantType_ECPp2)=WIST('1') then
					if  exists((PlantType_ECP,OilRegion)| PlantType_ECP=WIST_Element and ccalc_cRTUS_rSULFle(PlantType_ECP, SO2Region, OilRegion)) then
					1
					endif
					endif
				}
				Comment: "TST_SO2(ECP_D_CAP+1,ISO2) = 1 is not coded since ED$CL_IMPORTS,5 is not set up in AIMMS";
			}
		}
		Procedure Slice2SliceSorted_Mapping {
			Body: {
				!for (SliceSorted) do
				!  Slice2SliceSorted_element((Slice, Season, SupplyRegion)|SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion)=1):= SliceSorted;
				!endfor;
			}
		}
		Procedure PlantGroup2PlantGroupOrd_Mapping {
			Body: {
				!if PlantGroup=element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd)) then
				for (PlantGroupOrd) do!
				  PlantGroupElement:=element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd));
				  while (PlantGroupElement) do
				     PlantGroup2PlantGroupOrd_Map(PlantGroupElement, PlantGroupOrd):=1;
				     PlantGroupOrd2PlantGroup(PlantGroupElement):=PlantGroupOrd;
				     PlantGroupElement:=element(PlantGroup_,EFD_GRPS_N(PlantGroupElement));
				  endwhile;
				endfor;
			}
			ElementParameter PlantGroupElement {
				Range: PlantGroup_;
			}
		}
		Procedure RPSCST_Calculation {
			Body: {
				CFSH(DispatchableECP,FuelRegion):= UPWDCFR(DispatchableECP,EPCLMP_to_CoalDemandRegion(FuelRegion));
				!national RPS only
				IF (UPRNWREG('1') = 1) THEN
				  RPSCST(ActiveSuperPlantGroup) := EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				  !adjust RPS for cofiring
				  RPSCST((ActiveSuperPlantGroup) | EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=1 and UPTTYP(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))<=NW_COAL('1') and
				    USW_ECPCF('1')=1) -= EPRPSPR(cyr) * CFSH(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup), UG_FL_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) * UPRNWSHR(WIWD_Element);
				  !FOR HYDRO CREDIT PRICE ADJUSTMENT DEPENDS ON WHETHER EXISTING GEN IS GIVEN CREDIT
				  RPSCST((ActiveSuperPlantGroup)| EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=4 and UPRNWEXG(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))>0 and
				    ULVINT(EFD_GRPS_F_Element(ActiveSuperPlantGroup))=1):=
				    EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup)) * (1.0 - UPRNWEXG(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))));
				
				 RPSCST((ActiveSuperPlantGroup)| UPRNWBAS(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))>0) := 0;
				!regional RPS only
				ELSEIF (UPRNWREG('1') = 2) THEN
				  RPSCST(ActiveSuperPlantGroup) := EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				   UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				  !adjust RPS for cofiring
				  RPSCST((ActiveSuperPlantGroup) | EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=1 and UPTTYP(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))<=NW_COAL('1') and USW_ECPCF('1')=1) -=
				    EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * CFSH(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup), UG_FL_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) *
				    UPRNWSHRR(WIWD_Element,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup));
				  !FOR HYDRO CREDIT PRICE ADJUSTMENT DEPENDS ON WHETHER EXISTING GEN IS GIVEN CREDIT
				  RPSCST((ActiveSuperPlantGroup)| EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=4 and UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) >0 AND
				        ULVINT(EFD_GRPS_F_Element(ActiveSuperPlantGroup))= 1):= EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				        UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) *
				        (1.0 - UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup))));
				!national and regional RPS
				ELSEIF (UPRNWREG('1') = 3) THEN
				  RPSU(ActiveSuperPlantGroup) := EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))) ;
				  RPSR(ActiveSuperPlantGroup) := EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				   UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				  !adjust RPS for cofiring
				  RPSU((ActiveSuperPlantGroup) | EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=1 and RPSU(ActiveSuperPlantGroup) and
				    UPTTYP(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))<=NW_COAL('1') and USW_ECPCF('1')=1) -=
				    EPRPSPR(cyr) * CFSH(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup), UG_FL_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) *
				    UPRNWSHR(WIWD_Element);
				  RPSR((ActiveSuperPlantGroup) | EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=1 and UPTTYP(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))<=NW_COAL('1') and USW_ECPCF('1')=1) -=
				    EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * CFSH(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup), UG_FL_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) *
				    UPRNWSHRR(WIWD_Element,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup));
				  !FOR HYDRO CREDIT PRICE ADJUSTMENT DEPENDS ON WHETHER EXISTING GEN IS GIVEN CREDIT
				  RPSU((ActiveSuperPlantGroup)| EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=4 and
				        UPRNWEXG(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))>0 and ULVINT(EFD_GRPS_F_Element(ActiveSuperPlantGroup)) = 1) :=
				        EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup)) * (1 - UPRNWEXG(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))));
				  RPSR((ActiveSuperPlantGroup)| EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=4 and UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) >0 AND
				       ULVINT(EFD_GRPS_F_Element(ActiveSuperPlantGroup))= 1):=  EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) *
				       (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) - UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) *
				       (1 - UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup))));
				  RPSU((ActiveSuperPlantGroup)| UPRNWBAS(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))>0) := 0;
				
				  RPSCST(ActiveSuperPlantGroup):=
				  if EPRPSPR(cyr) >= EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) then RPSU(ActiveSuperPlantGroup)
				  else  RPSR(ActiveSuperPlantGroup)  endif;
				
				ENDIF;
				RPSR(ActiveSuperPlantGroup) :=0;
				IF (ST_RPS_SW('1') > 0) THEN
				  RPSR(ActiveSuperPlantGroup) := ST_RPS_EMM_P(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (ST_RNW_BND(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				   ST_RNW_SHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr));
				  RPSCST(ActiveSuperPlantGroup):=
				  ! if both are negative use the greatest benefit
				!  if (RPSCST(ActiveSuperPlantGroup)<0 and RPSR(ActiveSuperPlantGroup)<=0) then
				!    if abs(RPSCST(ActiveSuperPlantGroup))< abs(RPSR(ActiveSuperPlantGroup)) then RPSR(ActiveSuperPlantGroup)
				!    else RPSCST(ActiveSuperPlantGroup) endif
				!   ! if both are positive, use the highest positive cost
				!  elseif (RPSCST(ActiveSuperPlantGroup)>0 and RPSR(ActiveSuperPlantGroup)>0) then
				!     if RPSCST(ActiveSuperPlantGroup)< RPSR(ActiveSuperPlantGroup) then RPSR(ActiveSuperPlantGroup)
				!     else RPSCST(ActiveSuperPlantGroup) endif
				  if (sign(RPSCST(ActiveSuperPlantGroup))=sign(RPSR(ActiveSuperPlantGroup))) then
				    max(abs(RPSCST(ActiveSuperPlantGroup)), abs(RPSR(ActiveSuperPlantGroup)))*sign(RPSCST(ActiveSuperPlantGroup))
				  else  ! use net value
				  RPSCST(ActiveSuperPlantGroup)+ RPSR(ActiveSuperPlantGroup)
				  endif;
				
				ENDIF;
			}
			Comment: {
				"RPS calculations for all plant groups moved here;"
			}
			DeclarationSection Local_Declaration {
				Parameter RPSU {
					IndexDomain: PlantGroupOrd;
				}
				Parameter CFSH {
					IndexDomain: (PlantType_ECP,FuelRegion);
				}
			}
		}
		Procedure GPSCST_Calculation {
			Body: {
				!DETERMINE GPS ADDER, IF ANY
				GPSCST((SupplyRegion,Season,DGPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, DGPlantGroup) and
				  EPPOPR(UG_EFDt_to_PlantType(DGPlantGroup))=6 and mode_active=OPDG_OperatingMode(Season, DGPlantGroup)):=
				IF (CO2_PRCSW('1') =10 AND CO2LB(SupplyRegion, Season, DGPlantGroup, mode_active) >0.001 AND CO2_PLTSW_alt(SupplyRegion, Season, DGPlantGroup, mode_active)>0.0) and
				   (CO2_STDSW('1') > 0 AND CO2_STDRN(SupplyRegion, cyr)> 0.001) THEN
				   ((CO2LB(SupplyRegion, Season, DGPlantGroup, mode_active) - CO2_STDRN(SupplyRegion, cyr)) * MAX(0.0,(ECPPRCNL(SupplyRegion, cyr) - EFDPRCNL(SupplyRegion, cyr))))*
				   CO2_PLTSW_alt(SupplyRegion, Season, DGPlantGroup, mode_active)
				endif;
				
				GPSCST((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and
				 (CO2_PRCSW('1') =10 AND CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) >0.001 AND CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)>0.0)):=
				 CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)*
				 if (CO2_STDSW('1') > 0 AND CO2_STDRN(SupplyRegion, cyr) > 0.001)THEN
				   (CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRN(SupplyRegion, cyr)) * MAX(0.0,(ECPPRCNL(SupplyRegion, cyr) - EFDPRCNL(SupplyRegion, cyr)))
				 elseif (CO2_STDSW('1') = 2 AND CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr) > 0.001)THEN
				   (CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr)) *
				   MAX(0.0,(ECPPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr) - EFDPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr)))
				 endif;
				
				ALT_GPSCST((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and
				 (CO2_PRCSW('1') =10 AND CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) >0.001 AND CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)>0.0)):=
				 CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)*
				 if (CO2_STDSW('1') > 0 AND CO2_STDRN(SupplyRegion, cyr) > 0.001)THEN
				   (ALT_CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRN(SupplyRegion, cyr)) * MAX(0.0,(ECPPRCNL(SupplyRegion, cyr) - EFDPRCNL(SupplyRegion, cyr)))
				 elseif (CO2_STDSW('1') = 2 AND CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr) > 0.001)THEN
				   (ALT_CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr)) *
				   MAX(0.0,(ECPPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr) - EFDPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr)))
				 endif;
				
				GPSCST_MIN((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				 (CO2_PRCSW('1') =10 AND CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) >0.001 AND CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)>0.0)):=
				 CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)*
				 if (CO2_STDSW('1') > 0 AND CO2_STDRN(SupplyRegion, cyr) > 0.001)THEN
				   (CO2LB_MIN(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRN(SupplyRegion, cyr)) * MAX(0.0,(ECPPRCNL(SupplyRegion, cyr) - EFDPRCNL(SupplyRegion, cyr)))
				 elseif (CO2_STDSW('1') = 2 AND CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr) > 0.001)THEN
				   (CO2LB_MIN(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr)) *
				   MAX(0.0,(ECPPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr) - EFDPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr)))
				 endif;
				
				 ALT_GPSCST_MIN((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				 (CO2_PRCSW('1') =10 AND CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) >0.001 AND CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)>0.0)):=
				 CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)*
				 if (CO2_STDSW('1') > 0 AND CO2_STDRN(SupplyRegion, cyr) > 0.001)THEN
				   (ALT_CO2LB_MIN(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRN(SupplyRegion, cyr)) * MAX(0.0,(ECPPRCNL(SupplyRegion, cyr) - EFDPRCNL(SupplyRegion, cyr)))
				 elseif (CO2_STDSW('1') = 2 AND CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr) > 0.001)THEN
				   (ALT_CO2LB_MIN(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr)) *
				   MAX(0.0,(ECPPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr) - EFDPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr)))
				 endif;
				
				GPSCST_MAX((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				 (CO2_PRCSW('1') =10 AND CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) >0.001 AND CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)>0.0)):=
				 CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)*
				 if (CO2_STDSW('1') > 0 AND CO2_STDRN(SupplyRegion, cyr) > 0.001)THEN
				   (CO2LB_MAX(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRN(SupplyRegion, cyr)) * MAX(0.0,(ECPPRCNL(SupplyRegion, cyr) - EFDPRCNL(SupplyRegion, cyr)))
				 elseif (CO2_STDSW('1') = 2 AND CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr) > 0.001)THEN
				   (CO2LB_MAX(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr)) *
				   MAX(0.0,(ECPPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr) - EFDPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr)))
				 endif;
				
				 ALT_GPSCST_MAX((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				 (CO2_PRCSW('1') =10 AND CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) >0.001 AND CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)>0.0)):=
				 CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active)*
				 if (CO2_STDSW('1') > 0 AND CO2_STDRN(SupplyRegion, cyr) > 0.001)THEN
				   (ALT_CO2LB_MAX(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRN(SupplyRegion, cyr)) * MAX(0.0,(ECPPRCNL(SupplyRegion, cyr) - EFDPRCNL(SupplyRegion, cyr)))
				 elseif (CO2_STDSW('1') = 2 AND CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr) > 0.001)THEN
				   (ALT_CO2LB_MAX(SupplyRegion, Season, FirstPlantGroup, mode_active) - CO2_STDRF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), cyr)) *
				   MAX(0.0,(ECPPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr) - EFDPRCFL(UG_FL_RG_to_PlantGroup(FirstPlantGroup),cyr)))
				 endif;
			}
		}
		Procedure Carbon_Intensity_Rate {
			Body: {
				!DETERMINE CARBON INTENSITY RATE AND GPS ADDER, IF ANY
				Load_level(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active):=
				  BSLD_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)/SP_HOURS(Season, UG_EMM_RG_to_SupplyRegion(FirstPlantGroup));
				Load_leveltemp(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active, Eleven):=
				Load_level(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) ;
				HTRT_Adjustment(
					Load_level : Load_level(SupplyRegion, Season, PlantGroup, OperatingMode) ,
					HTRTADJ    : HTRT_ADJ(SupplyRegion, Season, PlantGroup, OperatingMode) );
				
				Load_level(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active):=
				  BSLD_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)/SP_HOURS(Season, UG_EMM_RG_to_SupplyRegion(FirstPlantGroup));
				HTRT_Adjustment(
					Load_level : Load_level(SupplyRegion, Season, PlantGroup, OperatingMode) ,
					HTRTADJ    : HTRT_ADJ_MIN(SupplyRegion, Season, PlantGroup, OperatingMode) );
				
				Load_level(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active):=
				  BSLD_GenMax(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)/SP_HOURS(Season, UG_EMM_RG_to_SupplyRegion(FirstPlantGroup));
				HTRT_Adjustment(
					Load_level : Load_level(SupplyRegion, Season, PlantGroup, OperatingMode) ,
					HTRTADJ    : HTRT_ADJ_MAX(SupplyRegion, Season, PlantGroup, OperatingMode) );
				HTRT_ADJ_MIN((UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)| SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))=0 ):=0;
				HTRT_ADJ_MAX((UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)| SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))=0 ):=0;
				
				BSLD_GASSH((CoalPlantGroup, FuelRegion_ALT1)| EPPOPR(UG_EFDt_to_PlantType(CoalPlantGroup))=1 and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(CoalPlantGroup)):=
				if ((EDMXGS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1) + EDMXDS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1) +
				   UPWDCFR(UG_ECPt_to_PlantGroup(CoalPlantGroup),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1)  then
					EDMXGS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1)/(EDMXGS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1) +
					EDMXDS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1) + UPWDCFR(UG_ECPt_to_PlantGroup(CoalPlantGroup),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
				   else
					EDMXGS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1)
				   endif;
				BSLD_OLSH((CoalPlantGroup, FuelRegion_ALT1)| EPPOPR(UG_EFDt_to_PlantType(CoalPlantGroup))=1 and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(CoalPlantGroup)):=
				   if ((EDMXGS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1) + EDMXDS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1) +
				   UPWDCFR(UG_ECPt_to_PlantGroup(CoalPlantGroup),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1)  then
					EDMXDS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1)/(EDMXGS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1) +
					EDMXDS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1) + UPWDCFR(UG_ECPt_to_PlantGroup(CoalPlantGroup),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
				   else
					EDMXDS_ECP(UG_ECPt_to_PlantGroup(CoalPlantGroup),FuelRegion_ALT1)
				   endif;
				BSLD_GASSH((UptoCNPlantGroup, FuelRegion_ALT1)| EPPOPR(UG_EFDt_to_PlantType(UptoCNPlantGroup))=1 and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(UptoCNPlantGroup) and
				  GSPR(UptoCNPlantGroup, FuelRegion_ALT1) <= OLPR(UptoCNPlantGroup, FuelRegion_ALT1)):=
				  EDMXGS_EFD(UG_EFDt_to_PlantType(UptoCNPlantGroup), FuelRegion_ALT1);
				BSLD_OLSH((UptoCNPlantGroup, FuelRegion_ALT1)| EPPOPR(UG_EFDt_to_PlantType(UptoCNPlantGroup))=1 and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(UptoCNPlantGroup) and
				  GSPR(UptoCNPlantGroup, FuelRegion_ALT1) <= OLPR(UptoCNPlantGroup, FuelRegion_ALT1)):=
				  1 - BSLD_GASSH(UptoCNPlantGroup, UG_FL_RG_to_PlantGroup(UptoCNPlantGroup));
				BSLD_OLSH((UptoCNPlantGroup, FuelRegion_ALT1)| EPPOPR(UG_EFDt_to_PlantType(UptoCNPlantGroup))=1 and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(UptoCNPlantGroup) and
				  GSPR(UptoCNPlantGroup, FuelRegion_ALT1) > OLPR(UptoCNPlantGroup, FuelRegion_ALT1)):=
				  if UG_ECPt_to_PlantGroup(UptoCNPlantGroup)=WIST_Element then
				        EDMXRS_EFD(UG_EFDt_to_PlantType(UptoCNPlantGroup), FuelRegion_ALT1)
				  else
				        EDMXDS_EFD(UG_EFDt_to_PlantType(UptoCNPlantGroup), FuelRegion_ALT1)
				  endif;
				BSLD_GASSH((UptoCNPlantGroup, FuelRegion_ALT1)| EPPOPR(UG_EFDt_to_PlantType(UptoCNPlantGroup))=1 and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(UptoCNPlantGroup) and
				  GSPR(UptoCNPlantGroup, FuelRegion_ALT1) > OLPR(UptoCNPlantGroup, FuelRegion_ALT1)):=
				  1 - BSLD_OLSH(UptoCNPlantGroup, UG_FL_RG_to_PlantGroup(UptoCNPlantGroup));
				
				CLCAR((CoalPlantGroup, FuelRegion_ALT1)| FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(CoalPlantGroup)):=
				  BSLD_CLSH(CoalPlantGroup, FuelRegion_ALT1) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) *
				  (1.0 / 2204.0) * (1.0 - UPPCEF(UG_ECPt_to_PlantGroup(CoalPlantGroup)));
				
				OGCAR((CoalPlantGroup, FuelRegion_ALT1)| FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(CoalPlantGroup)):=
				  (BSLD_GASSH(CoalPlantGroup, FuelRegion_ALT1) * ENGEL(cyr) +
				  BSLD_OLSH(CoalPlantGroup, FuelRegion_ALT1) * EDSEL(cyr)) * 0.001 * (1.0 - UPPCEF(UG_ECPt_to_PlantGroup(CoalPlantGroup)));
				
				WDCAR((CoalPlantGroup, FuelRegion_ALT1)| FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(CoalPlantGroup)):=
				  BSLD_CFSH(CoalPlantGroup, FuelRegion_ALT1) * CO2_EMSWD('1') * (12.0 / 44.0) * (1.0 / 2204.0) * (1.0 - UPPCEF(UG_ECPt_to_PlantGroup(CoalPlantGroup)));
				
				ALT_CLCAR((CoalPlantGroup, FuelRegion_ALT1)| FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(CoalPlantGroup)):=
				  BSLD_CLSH(CoalPlantGroup, FuelRegion_ALT1) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) *
				  (1.0 / 2204.0) * (1.0 - UPPCEF_MIN(UG_ECPt_to_PlantGroup(CoalPlantGroup)));
				
				ALT_OGCAR((CoalPlantGroup, FuelRegion_ALT1)| FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(CoalPlantGroup)):=
				  (BSLD_GASSH(CoalPlantGroup, FuelRegion_ALT1) * ENGEL(cyr) +
				  BSLD_OLSH(CoalPlantGroup, FuelRegion_ALT1) * EDSEL(cyr)) * 0.001 * (1.0 - UPPCEF_MIN(UG_ECPt_to_PlantGroup(CoalPlantGroup)));
				
				ALT_WDCAR((CoalPlantGroup, FuelRegion_ALT1)| FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(CoalPlantGroup)):=
				  BSLD_CFSH(CoalPlantGroup, FuelRegion_ALT1) * CO2_EMSWD('1') * (12.0 / 44.0) * (1.0 / 2204.0) * (1.0 - UPPCEF_MIN(UG_ECPt_to_PlantGroup(CoalPlantGroup)));
				
				OGCAR((UptoCNPlantGroup, FuelRegion_ALT1)| FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(UptoCNPlantGroup)):=
				  (BSLD_GASSH(UptoCNPlantGroup, FuelRegion_ALT1) * ENGEL(cyr) +
				  BSLD_OLSH(UptoCNPlantGroup, FuelRegion_ALT1) * FuelEL(UptoCNPlantGroup) ) * 0.001 * (1.0 - UPPCEF(UG_ECPt_to_PlantGroup(UptoCNPlantGroup)));
				ALT_OGCAR((UptoCNPlantGroup, FuelRegion_ALT1)| FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(UptoCNPlantGroup)):=
				  (BSLD_GASSH(UptoCNPlantGroup, FuelRegion_ALT1) * ENGEL(cyr) +
				  BSLD_OLSH(UptoCNPlantGroup, FuelRegion_ALT1) * FuelEL(UptoCNPlantGroup) ) * 0.001 * (1.0 - UPPCEF_MIN(UG_ECPt_to_PlantGroup(UptoCNPlantGroup)));
				
				CO2LB((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active)):=
				  (UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) * HTRT_ADJ(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001) *
				  (CLCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) + OGCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) +
				  WDCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup))) * (44.0 / 12.0) * 2204.0 /CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup));
				
				ALT_CO2LB((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active)):=
				  (UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) * HTRT_ADJ(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001) *
				  (ALT_CLCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) + ALT_OGCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) +
				  ALT_WDCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup))) * (44.0 / 12.0) * 2204.0 /CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup));
				
				CO2LB_MIN((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				  (UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) * HTRT_ADJ_MIN(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001) *
				  (CLCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) + OGCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) +
				  WDCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup))) * (44.0 / 12.0) * 2204.0 /CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup));
				
				ALT_CO2LB_MIN((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				  (UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) * HTRT_ADJ_MIN(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001) *
				  (ALT_CLCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) + ALT_OGCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) +
				  ALT_WDCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup))) * (44.0 / 12.0) * 2204.0 /CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup));
				
				CO2LB_MAX((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				  (UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) * HTRT_ADJ_MAX(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001) *
				  (CLCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) + OGCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) +
				  WDCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup))) * (44.0 / 12.0) * 2204.0 /CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup));
				
				ALT_CO2LB_MAX((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				  OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				  (UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) * HTRT_ADJ_MAX(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001) *
				  (ALT_CLCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) + ALT_OGCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) +
				  ALT_WDCAR(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup))) * (44.0 / 12.0) * 2204.0 /CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup));
				
				OGCAR((DGPlantGroup, FuelRegion_ALT1)| FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(DGPlantGroup)):=ENGEL(cyr) * 0.001;
				CO2LB((SupplyRegion,Season,DGPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, DGPlantGroup) and
				  OPDG_Condition(SupplyRegion, Season, DGPlantGroup, mode_active) and mode_active=OPDG_OperatingMode(Season, DGPlantGroup)):=
				  (UG_HTRT(Season, PlantGroupOrd2PlantGroup(DGPlantGroup)) * 0.001) * OGCAR(DGPlantGroup, UG_FL_RG_to_PlantGroup(DGPlantGroup)) * (44.0 / 12.0) * 2204.0;
			}
			DeclarationSection Local_Declaration {
				Parameter Load_level {
					IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
				}
			}
		}
		Procedure COMBINE_COAL_RATES {
			Body: {
				TMP_RATE(Four, CoalSupplyCurve_Int, CoalDemandRegion):=
				if Four='1' then
				  999.999
				else
				 if (TMP_XCL_TRATI2(CoalSupplyCurve_Int, Four-1) > 0.0 AND XCL_TR_IN(Four-1, CoalSupplyCurve_Int, CoalDemandRegion, cyr) < 900.0 AND XCL_TR_IN(Four-1, CoalSupplyCurve_Int, CoalDemandRegion, cyr) > 0.0 and
				 (XCL_TR_IN(Four-1, CoalSupplyCurve_Int, CoalDemandRegion, cyr) * XCL_TESCI(Four-1, cyr, CoalDemandRegion) + TMP_XCL_TRATI2(CoalSupplyCurve_Int, Four-1))<=
				 TMP_RATE(Four-1, CoalSupplyCurve_Int, CoalDemandRegion)) then
				  XCL_TR_IN(Four-1, CoalSupplyCurve_Int, CoalDemandRegion, cyr) * XCL_TESCI(Four-1, cyr, CoalDemandRegion) + TMP_XCL_TRATI2(CoalSupplyCurve_Int, Four-1)
				 else
				  TMP_RATE(Four-1, CoalSupplyCurve_Int, CoalDemandRegion)
				 endif
				endif;
			}
		}
		Procedure CoalSupplyCurve_Qty {
			Body: {
				Step:=first(CoalProductionStep_);
				PRDLIM(CoalSupplyCurve_Dom):=XCL_PCAP(CoalSupplyCurve_Dom, cyr);
				for (CoalProductionStep | CoalProductionStep<='11') do
				 CoalSupplyCurveQ(CoalSupplyCurve_Dom, CoalProductionStep):=XCL_QECP0(CoalSupplyCurve_Dom, cyr) * StepSize(CoalProductionStep);
				 CoalSupplyCurveQ(CoalSupplyCurve_Dom, CoalProductionStep):=min(CoalSupplyCurveQ(CoalSupplyCurve_Dom, CoalProductionStep),PRDLIM(CoalSupplyCurve_Dom));
				 CoalSupplyCurveQ(CoalSupplyCurve_Dom, CoalProductionStep):=max(CoalSupplyCurveQ(CoalSupplyCurve_Dom, CoalProductionStep),0);
				 PRDLIM(CoalSupplyCurve_Dom)-=CoalSupplyCurveQ(CoalSupplyCurve_Dom, CoalProductionStep);
				 endfor;
			}
			ElementParameter Step {
				Range: CoalProductionStep_;
			}
		}
		Procedure HTRT_Adjustment {
			Arguments: (Load_level,HTRTADJ);
			Body: {
				Load_level((UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)|
				Load_level(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)>=1):=1;
				Min_Knot((UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and
				    OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)):=
				    min(Eleven| Load_level(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)<=
				    FLRG_HR_LL(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup),Eleven), Eleven);
				
				Target_EFF((UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and
				    OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)):=
				if FLRG_HR_KNOTS(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup))=0 then
				  1
				elseif Min_Knot(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)=F_KNOT then
				  FLRG_HR_EFF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup), F_KNOT)
				elseif Min_Knot(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)>F_KNOT then
				!                  LL = FLRG_HR_LL(FUEL_RGN,ECPt,KNOT-1)
				!                  EL = FLRG_HR_EFF(FUEL_RGN,ECPt,KNOT-1)
				!                  LH = FLRG_HR_LL(FUEL_RGN,ECPt,KNOT)
				!                  EH = FLRG_HR_EFF(FUEL_RGN,ECPt,KNOT)
				  !Target_EFF = EL + ((EH - EL) / (LH - LL)) * (Load_Level - LL)
				  FLRG_HR_EFF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup), Min_Knot(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)-1)+
				  (FLRG_HR_EFF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup), Min_Knot(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active))-
				  FLRG_HR_EFF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup), Min_Knot(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)-1))*
				  (Load_level(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)-
				  FLRG_HR_LL(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup), Min_Knot(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)-1))/$
				  (FLRG_HR_LL(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup), Min_Knot(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active))-
				  FLRG_HR_LL(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup), Min_Knot(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)-1))
				endif;
				HTRTADJ((UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and
				    OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)):=
				    MAX_EFF(UG_FL_RG_to_int_f_reg(FirstPlantGroup), UG_ECPt_to_PlantGroup(FirstPlantGroup))/$ Target_EFF(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active);
			}
			Parameter Load_level {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
				Property: Input;
			}
			Parameter HTRTADJ {
				IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
				Property: Output;
			}
		}
		Procedure GET_EMF_AND_ACI {
			Body: {
				Allowed(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, '1') := 1 $ (ACI_CST('1',  EmissionRank_Element(CoalSupplyCurve), CoalPlant_ECP)=0);
				MACT_EMF(CoalSupplyCurve,CoalDemandRegion,CoalPlant_ECP) := MIN(HG_MEFNC(CoalDemandRegion, cyr),PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))) $ (USW_CAMR('1')>0);
				EMF_T(CoalSupplyCurve, CoalDemandRegion_ALT1, CoalPlant_ECP, numACI) := PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve));
				RACI(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, numACI):= 0.0;
				
				MACT_SW(EmissionRank, CoalPlant_ECP) := 1 $
				(HG_OUTPUT(MercuryClass_ECP(CoalPlant_ECP), EmissionRank, cyr)>0 OR HG_INPUT(MercuryClass_ECP(CoalPlant_ECP), EmissionRank, cyr)>0 OR
				HG_MEF(MercuryClass_ECP(CoalPlant_ECP), EmissionRank, cyr)>0);
				
				EMF_PRCNT(EmissionRank, CoalPlant_ECP) :=
				if HG_MEF(MercuryClass_ECP(CoalPlant_ECP), EmissionRank, cyr)>0 then HG_MEF(MercuryClass_ECP(CoalPlant_ECP), EmissionRank, cyr)
				else 1
				endif;
				
				EMF_IN(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP) :=
				if HG_INPUT(MercuryClass_ECP(CoalPlant_ECP), EmissionRank_Element(CoalSupplyCurve), cyr)>0 then
				MIN(1.0, HG_INPUT(MercuryClass_ECP(CoalPlant_ECP), EmissionRank_Element(CoalSupplyCurve), cyr)) /$ (XCL_HG_YR(CoalSupplyCurve, cyr)) !yda: if coef doesn't match, check if XCL_HG_YR is transfered correctly
				else 1
				endif;
				
				EMF_OUT(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP) :=
				if HG_OUTPUT(MercuryClass_ECP(CoalPlant_ECP), EmissionRank_Element(CoalSupplyCurve), cyr)>0 then
				 MIN(1.0, 1000.0 * HG_OUTPUT(MercuryClass_ECP(CoalPlant_ECP), EmissionRank_Element(CoalSupplyCurve), cyr)) /$ HRTCLNR(CoalDemandRegion,cyr,CoalPlant_ECP) /$ XCL_HG_YR(CoalSupplyCurve, cyr)
				else 1
				endif;
				!  Skip Steps If No CAMR and Just Specified Required EMF, If Achievable
				IF (USW_CAMR('1')<=0) THEN
				        MACT_EMF(CoalSupplyCurve,CoalDemandRegion,CoalPlant_ECP) :=
				        MIN(PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) , EMF_PRCNT(EmissionRank_Element(CoalSupplyCurve), CoalPlant_ECP));
				        MACT_EMF(CoalSupplyCurve,CoalDemandRegion, CoalPlant_ECP):=
				        IF (HG_CHOICE(CoalPlant_ECP)= 1) THEN
				            MIN(MACT_EMF(CoalSupplyCurve,CoalDemandRegion,CoalPlant_ECP), EMF_IN(CoalSupplyCurve,CoalDemandRegion, CoalPlant_ECP))
				        ELSEIF (HG_CHOICE(CoalPlant_ECP)= 2) THEN
				            MIN(MACT_EMF(CoalSupplyCurve,CoalDemandRegion, CoalPlant_ECP), EMF_OUT(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP))
				        ELSEIF (HG_CHOICE(CoalPlant_ECP)= 3) THEN
				            MAX(MIN(MACT_EMF(CoalSupplyCurve,CoalDemandRegion,CoalPlant_ECP), EMF_IN(CoalSupplyCurve,CoalDemandRegion, CoalPlant_ECP)),
				             MIN(MACT_EMF(CoalSupplyCurve,CoalDemandRegion,CoalPlant_ECP), EMF_OUT(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP)))
				        ENDIF;
				
				        EMF_T(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, numACI):=
				        IF (MACT_SW(EmissionRank_Element(CoalSupplyCurve), CoalPlant_ECP)= 1 AND
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP) > MIN_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) AND
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP) < PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) and
				        ord(numACI)=ACI_STEPS(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))+1) then
				            MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP)
				        ELSEIF (MACT_SW(EmissionRank_Element(CoalSupplyCurve), CoalPlant_ECP)= 1 AND
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP) > MIN_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) AND
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP) < PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) and
				        ord(numACI)>=2 and ord(numACI)<=ACI_STEPS(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))) then
				            PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) - (ord(numACI) - 1) *
				            ((PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) - MIN_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))) /
				            (ACI_STEPS(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))-1))
				        ELSEIF (MACT_SW(EmissionRank_Element(CoalSupplyCurve), CoalPlant_ECP)= 1 OR EMLIM('4',cyr) <100.0 OR HG_GRAMS_MWH(MercuryClass_ECP(CoalPlant_ECP), cyr) > 0.0) AND
				        ord(numACI)>=2 and ord(numACI)<=ACI_STEPS(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))+1 THEN
				             PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) - (ord(numACI) - 1) *
				            ((PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) - MIN_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))) /
				            (ACI_STEPS(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))))
				        ENDIF;
				
				
				        Allowed((CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, numACI)| (MACT_SW(EmissionRank_Element(CoalSupplyCurve), CoalPlant_ECP)= 1 OR EMLIM('4',cyr) <100.0 OR
				        HG_GRAMS_MWH(MercuryClass_ECP(CoalPlant_ECP), cyr) > 0.0) AND
				        ord(numACI)>=2 and ord(numACI)<=ACI_STEPS(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))+1):= 1;
				
				        RACI((CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, numACI)| (MACT_SW(EmissionRank_Element(CoalSupplyCurve), CoalPlant_ECP)= 1 OR EMLIM('4',cyr) <100.0 OR
				        HG_GRAMS_MWH(MercuryClass_ECP(CoalPlant_ECP), cyr) > 0.0) AND
				        ord(numACI)>=2 and ord(numACI)<=ACI_STEPS(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))+1):=
				                1000.0 * 1000.0 * 1000.0 * 0.000454 * PARM_C(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) * 2.2 / 12000.0 *
				        MAX(0.0 , (PARM_A(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) /
				        (PARM_D(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) - 100.0 + 100.0 * EMF_T(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, numACI) /
				        (FGD_FCTR(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) * SCR_FCTR(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)))) -
				         PARM_B(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))));
				ELSE
				        Allowed((CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, '1')|
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP)<PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) AND
				         Allowed(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, '1')>0):= 2;
				
				        Allowed((CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, '2')|
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP)<PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) AND
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP) >= MIN_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))):= 1;
				
				        EMF_T((CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, '2')|
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP)<PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) AND
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP) >= MIN_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))):=
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP);
				
				        RACI((CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, '2')|
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP)<PLNT_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) AND
				        MACT_EMF(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP) >= MIN_EMF(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))):=
				        1000.0 * 1000.0 * 1000.0 * 0.000454 * PARM_C(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) * 2.2 / 12000.0 *
				        MAX(0.0 , (PARM_A(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) /
				        (PARM_D(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) - 100.0 + 100.0 * EMF_T(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, '2') /
				        (FGD_FCTR(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)) * SCR_FCTR(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve)))) -
				         PARM_B(CoalPlant_ECP, EmissionRank_Element(CoalSupplyCurve))));
				
				ENDIF;
			}
			DeclarationSection Local_Declaration;
		}
		Procedure EDCOL {
			Body: {
				COMBINE_COAL_RATES;
				XCL_TYPE((CoalSupplyCurve)|ord(CoalSupplyCurve) > card(CoalSupplyCurve_Dom_)):=1;
				EFD_RANK((CoalSupplyCurve)|TOT_TYPE(CoalSupplyCurve) and EFD_RANK(CoalSupplyCurve)=0):=
				if CoalSupplyCurve in CoalSupplyCurve_Dom_ then
				if Substring(Formatstring("%e",CoalType_SupplyCurve(CoalSupplyCurve)),1,1)='B' then 1
				elseif Substring(Formatstring("%e",CoalType_SupplyCurve(CoalSupplyCurve)),1,1)='S' then 2
				else 3
				endif
				else
				1
				endif;
				CoalSupplyCurve_Qty;
				GET_EMF_AND_ACI;
			}
		}
		Procedure EDBIO {
			Body: {
				!Account for Other Uses of Biomass
				for (BiomassSector) do
				    if BiomassSector='RS' then
				    		BMSector:=BiomassSector;
				    		MP_BM(BMSector, BiomassType):=MP_BM_RS(BiomassType); !Residential
				    		QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMRSCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Residential
				    endif;
				    if BiomassSector='CM' then
				    		BMSector:=BiomassSector;
				    		MP_BM(BMSector, BiomassType):=MP_BM_CM(BiomassType); !Commercial
				    		QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMCMCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Commercial
				    endif;
				    if BiomassSector='IN' then
				    		BMSector:=BiomassSector;
				    		MP_BM(BMSector, BiomassType):=MP_BM_IN(BiomassType); !Industrial
				    		QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMINCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Industrial
				    endif;
				    if BiomassSector='H2' then
				    		BMSector:=BiomassSector;
				    		MP_BM(BMSector, BiomassType):=MP_BM_H2(BiomassType); !Hydrogen Production
				    		QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMH2CL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Hydrogen Production
				    endif;
				    if BiomassSector='ET' then
				    		BMSector:=BiomassSector;
				    		MP_BM(BMSector, BiomassType):=MP_BM_ET(BiomassType); !Cellulosic Ethanol Production
				    		QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMETCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Cellulosic Ethanol Production
				    endif;
				    if BiomassSector='BT' then
				    		BMSector:=BiomassSector;
				    		MP_BM(BMSector, BiomassType):=MP_BM_BT(BiomassType); !Biomass to Liquids
				    		QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMBTCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Biomass to Liquids
				    endif;
				endfor;
				
				ccalc_cBiomassOtherUsage_LBOUND((CoalDemandRegion_ALT2, BiomassSector, BiomassType) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0
				    and MP_BM(BiomassSector, BiomassType)>0) := QBMCL(BiomassSector, BiomassType, CoalDemandRegion_ALT2);  !ED$BIO,9 ED$BIO,11 ED$BIO,13 ED$BIO,15 ED$BIO,17 ED$BIO,19
				ccalc_cBiomassOtherUsage_UBOUND((CoalDemandRegion_ALT2, BiomassSector, BiomassType) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0
				    and MP_BM(BiomassSector, BiomassType)>0) := QBMCL(BiomassSector, BiomassType, CoalDemandRegion_ALT2);  !ED$BIO,9 ED$BIO,11 ED$BIO,13 ED$BIO,15 ED$BIO,17 ED$BIO,19
				ccalc_cBiomassOtherUsage_rS_WD_typele((BiomassType, CoalDemandRegion_ALT2, BiomassSector) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0
				    and MP_BM(BiomassSector, BiomassType)>0 and EFDMAT('1')=0) := 1;     !ED$BIO,8 ED$BIO,10 ED$BIO,12 ED$BIO,14 ED$BIO,16 ED$BIO,18
				
				    !Production Vectors (Supply Steps)
				BP_Step1:=first(BiomassProductionStep);
				BP_StepXX:=last(BiomassProductionStep);
				coeff_UBOUND((CoalDemandRegion_ALT2, BiomassType, BP_Step1) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0):=   !first step
				    	WDSUP_Q(BP_Step1, CoalDemandRegion_ALT2, cyr, BiomassType);
				coeff_UBOUND((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep) | BiomassProductionStep>BP_Step1 and BiomassProductionStep<= NM_BM_SUP_STP_Element
				    	and WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0):=   !other steps
				    	WDSUP_Q(BiomassProductionStep, CoalDemandRegion_ALT2, cyr, BiomassType)-WDSUP_Q(BiomassProductionStep-1, CoalDemandRegion_ALT2, cyr, BiomassType);
				coeff_UBOUND((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep) | BiomassProductionStep= NM_BM_SUP_STP_Element+1
				    	and WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0):=  99999.9; ! steps > max step
				
				 ccalc_cBP_type_UBOUND((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)| WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and
				    coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)>0):= coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep);   !ED$BIO,5
				
				    ! Objective Function
				ccalc_cBP_type_EFDCOSTS((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)| WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and
				    	BiomassProductionStep<= NM_BM_SUP_STP_Element and coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)>0):=
				    	WDSUP_P(BiomassProductionStep, CoalDemandRegion_ALT2, cyr, BiomassType);										!ED$BIO,6
				ccalc_cBP_type_EFDCOSTS((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)| WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and
				    	BiomassProductionStep= NM_BM_SUP_STP_Element+1 and coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)>=0):= 9999.9;
				
				    ! Put in Production Row
				ccalc_cBP_type_rS_WD_typele((BiomassType, CoalDemandRegion_ALT2, BiomassProductionStep) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and     !ED$BIO,7
				    	BiomassProductionStep<= NM_BM_SUP_STP_Element+1 and coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)>0 and
				    	EFDMAT('1')=0):= -1;
				ccalc_cBP_type_rS_WD_typele((BiomassType, CoalDemandRegion_ALT2, BP_StepXX) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and     !ED$BIO,4
				    	EFDMAT('1')=0):= 1;
				
				ccalc_cBP_type_rS_WD_allle((CoalDemandRegion_ALT2, BiomassType, BP_StepXX)| WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and     !ED$BIO,3
				    	EFDMAT('1')=0):= -1;
			}
			Comment: "not active in AEO2021 ref case: ED$BIO,1 and ED$BIO,2";
			Parameter MP_BM {
				IndexDomain: (BiomassSector,BiomassType);
			}
			Parameter QBMCL {
				IndexDomain: (BiomassSector,BiomassType,CoalDemandRegion);
			}
			ElementParameter BP_Step1 {
				Range: BiomassProductionStep_;
			}
			ElementParameter BP_StepXX {
				Range: BiomassProductionStep_;
			}
			ElementParameter BMSector {
				Range: BiomassSector_;
			}
			Parameter coeff_UBOUND {
				IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
			}
		}
		Procedure EDBTU {
			Body: {
				TST_NOX((Element(PlantType_ECPp2_,ord(PlantType_ECP)+1), INOXP) |EMRFNA(INOXP, cyr)>0 and
				exists((CoalDemandRegion, Season)|BCTLN_COEFF(INOXP, CoalDemandRegion, Season)>0)):=1;
			}
		}
		Procedure EDPM {
			Comment: "not active in AEO2021 ref case: ED$PM,7 ED$PM,8 ED$PM,9 ED$PM,10 ED$PM,11 ED$PM,12 and corresponding cpass/ccalc parameters do not exist";
		}
		Procedure OPHYD_sub {
			Body: {
				!yda: RPS calculations are done now in RPS_Calculation procedure; after testing remove commented out code from here
				!    !Do OBJ coefficient here
				!    !CREDIT PRICE ADJUSTMENT DEPENDS ON WHETHER EXISTING GEN IS GIVEN CREDIT
				!if UPRNWREG('1') = 1 then
				!     RPSCST(ActiveSuperPlantGroup):= EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				!     RPSCST((ActiveSuperPlantGroup)|UPRNWEXG(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))>0 and ULVINT(EFD_GRPS_F_Element(ActiveSuperPlantGroup))=1):=
				!     EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup)) * (1.0 - UPRNWEXG(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))));
				!     RPSCST((ActiveSuperPlantGroup)|UPRNWBAS(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))>0):=0;
				!elseif UPRNWREG('1') = 2 then
				!     RPSCST(ActiveSuperPlantGroup):=EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!         UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				!     RPSCST((ActiveSuperPlantGroup)|UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) >0 AND
				!        ULVINT(EFD_GRPS_F_Element(ActiveSuperPlantGroup))= 1):= EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!        UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) *
				!        (1.0 - UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup))));
				!elseif UPRNWREG('1') = 3 then
				!     RPSU(ActiveSuperPlantGroup) := EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				!     RPSU((ActiveSuperPlantGroup) |UPRNWEXG(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))>0 and ULVINT(EFD_GRPS_F_Element(ActiveSuperPlantGroup)) = 1) :=
				!        EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup)) * (1 - UPRNWEXG(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))));
				!     RPSU((ActiveSuperPlantGroup) | UPRNWBAS(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))>0):=0;
				!
				!     RPSR(ActiveSuperPlantGroup) := EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!        UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				!     RPSR((ActiveSuperPlantGroup)|UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) >0 AND
				!       ULVINT(EFD_GRPS_F_Element(ActiveSuperPlantGroup))= 1):=  EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) *
				!       (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) - UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) *
				!       (1 - UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup))));
				!
				!     RPSCST((ActiveSuperPlantGroup)|EPRPSPR(cyr) >= EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr)):=RPSU(ActiveSuperPlantGroup);
				!     RPSCST((ActiveSuperPlantGroup)|EPRPSPR(cyr) < EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr)):=RPSR(ActiveSuperPlantGroup);
				!endif;
				!
				!IF (ST_RPS_SW('1') > 0) THEN
				!     RPSR((ActiveSuperPlantGroup)|EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=4) := ST_RPS_EMM_P(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (ST_RNW_BND(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!         ST_RNW_SHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr));
				!     RPSCST((ActiveSuperPlantGroup) | EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=4 and abs(RPSCST(ActiveSuperPlantGroup))<abs(RPSR(ActiveSuperPlantGroup)) and
				!         (RPSCST(ActiveSuperPlantGroup)<0 and RPSR(ActiveSuperPlantGroup)<=0) ):= RPSR(ActiveSuperPlantGroup); ! if both are negative use the greatest benefit
				!     RPSCST((ActiveSuperPlantGroup) | EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=4 and RPSCST(ActiveSuperPlantGroup)<RPSR(ActiveSuperPlantGroup) and
				!         (RPSCST(ActiveSuperPlantGroup)>=0 or RPSR(ActiveSuperPlantGroup)>0) ):= RPSR(ActiveSuperPlantGroup); ! if any are positive, use the highest positive cost
				!ENDIF;
				
				ccalc_cH_EFDCOSTS((FirstPlantGroup, Season, slice_active) | EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=4 ):= (UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) +
				         RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				         HYD_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, slice_active, FirstPlantGroup) * 0.001;   !OPHYD,14
				
				ccalc_cF_EFDCOSTS((FirstPlantGroup, Season, slice_active) | EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=4
				         and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):= (UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) +
				         RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				         HYD_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, slice_active, FirstPlantGroup) * 0.001;   !OPHYD,16
				
				      !GRID RESILIENCE ROWS
				Gen_Grid((SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active)|
				         GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)>0 ):=
				         HYD_Gen(SupplyRegion_ALT2, Season, slice_active, FirstPlantGroup) * 0.001 * GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind) $
				           (USW_GRD('1') <> Val(grd_casn_ind) or GRD_TGTS(cyr, SupplyRegion_ALT2) <= 0.0);
				Gen_Grid((SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active)|
				         GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)>0
				         and USW_GRD('1') = Val(grd_casn_ind) AND GRD_TGTS(cyr, SupplyRegion_ALT2) > 0.0 ):=
				         HYD_Gen(SupplyRegion_ALT2, Season, slice_active, FirstPlantGroup) * 0.001 * (GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)-
				         GRD_TGTS(cyr, SupplyRegion_ALT2));
				ccalc_cH_rGRDRTge(SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active) :=$
				         Gen_Grid(SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active);  !OPHYD,30
				
				GenMin_Grid((SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active)|
				        GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)>0 ):=
				         HYD_GenMin(SupplyRegion_ALT2, Season, slice_active, FirstPlantGroup) * 0.001 * GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind) $
				           (USW_GRD('1') <> Val(grd_casn_ind) or GRD_TGTS(cyr, SupplyRegion_ALT2) <= 0.0);
				GenMin_Grid((SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active)|
				        GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)>0 and
				        (USW_GRD('1') = Val(grd_casn_ind) and GRD_TGTS(cyr, SupplyRegion_ALT2) > 0.0)):=
				         HYD_GenMin(SupplyRegion_ALT2, Season, slice_active, FirstPlantGroup) * 0.001 * (GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)-
				         GRD_TGTS(cyr, SupplyRegion_ALT2));
				
				ccalc_cF_rGRDRTge(SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active):=   ! only if GenMin_Grid <> 0 ($)
				         $GenMin_Grid(SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active);  !OPHYD,32
			}
			Comment: "not active in AEO2021 ref case: OPHYD,22 through OPHYD,29 do not have corresponding cpass parameter";
			DeclarationSection Local_Declaration {
				Parameter RPSU {
					IndexDomain: PlantGroupOrd;
				}
				Parameter RPSR {
					IndexDomain: PlantGroupOrd;
				}
				Parameter Gen_Grid {
					IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
				}
				Parameter GenMin_Grid {
					IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
				}
			}
		}
		Procedure OPRNBS_sub {
			Body: {
				MAXCF((Season, FirstPlantGroup) | EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 ):=
				  sum(ActiveSuperPlantGroup|PlantGroup2PlantGroupOrd_Map(FirstPlantGroup, ActiveSuperPlantGroup), UG_SCF(Season, ActiveSuperPlantGroup));
				!adjust CF for STEO benchmarking (factor will be 1.0 if no benchmarking)
				MAXCF((Season, FirstPlantGroup) | UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WIGT('1')) *= URGTCFA(cyr);
				DRAT_ORG(Season, slice_active, FirstPlantGroup):= MAXCF(Season, FirstPlantGroup);
				
				MAX_SP_LOAD(SupplyRegion, Season, FirstPlantGroup):= Max(slice_active,
				  UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion)) $
				  (UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3);
				MIN_SP_LOAD(SupplyRegion, Season, FirstPlantGroup):= Min(slice_active,
				  UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion)) $
				  (UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3);
				
				
				!Combined Capacity factor for ECP types with SR_CREDIT can not exceed UG_SCF
				!For ECP Types which have Spinning Reserve Credit Create Min, Max and Load Following Modes for each of the original modes
				!Load Following Mode Follows Load Height drat = (1 - for) * (ld / max_ld)
				DRAT((SupplyRegion, Season, slice_active, FirstPlantGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and
				  UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup)) :=
				  (1.0 - UG_FOR(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				  (UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				  MAX_SP_LOAD(SupplyRegion, Season, FirstPlantGroup));
				
				Factor((SupplyRegion, Season, FirstPlantGroup)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup)):= MAXCF(Season, FirstPlantGroup)* EETIME(Season, SupplyRegion)/ $
				  sum(slice_active, DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup) * ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				Factor((SupplyRegion, Season, FirstPlantGroup)| Factor(SupplyRegion, Season, FirstPlantGroup)>1):=1;
				
				!Min Electricity - Max Spinning Reserve Credit drat_min = (1 - sr_min_lf) * sr_min_cf * (ld / min_ld) + sr_min_lf * sr_min_cf
				DRAT_MIN((SupplyRegion, Season, slice_active, FirstPlantGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0) :=
				  (1.0 - SR_MIN_LF(UG_ECPt_to_PlantGroup(FirstPlantGroup))) * SR_MIN_CF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) *
				  (UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				  MIN_SP_LOAD(SupplyRegion, Season, FirstPlantGroup)) + SR_MIN_LF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * SR_MIN_CF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) $
				  (UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3);
				
				Factor_MIN(SupplyRegion, Season, FirstPlantGroup):= MAXCF(Season, FirstPlantGroup)* EETIME(Season, SupplyRegion)/$
				  sum(slice_active, DRAT_MIN(SupplyRegion, Season, slice_active, FirstPlantGroup) * ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				Factor_MIN((SupplyRegion, Season, FirstPlantGroup)| Factor_MIN(SupplyRegion, Season, FirstPlantGroup)>1):=1;
				
				!Max Electricity - Min Spinning Reserve Credit drat_max = (1 - sr_max_lf) * (1 - for) * (ld / max_ld) + sr_max_lf * (1 - for)
				DRAT_MAX((SupplyRegion, Season, slice_active, FirstPlantGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				 UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3) :=
				 (1.0 - SR_MAX_LF(UG_ECPt_to_PlantGroup(FirstPlantGroup))) * (1.0 - UG_FOR(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				 (UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				 MAX_SP_LOAD(SupplyRegion, Season, FirstPlantGroup)) + SR_MAX_LF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * (1.0 - UG_FOR(PlantGroupOrd2PlantGroup(FirstPlantGroup))) ;
				 DRAT_MAX((SupplyRegion, Season, slice_active, FirstPlantGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup)) AND
				 DRAT_MAX(SupplyRegion, Season, slice_active, FirstPlantGroup) < DRAT_ORG(Season, slice_active, FirstPlantGroup) and
				 UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3) := DRAT_ORG(Season, slice_active, FirstPlantGroup);
				
				Factor_MAX(SupplyRegion, Season, FirstPlantGroup):= MAXCF(Season, FirstPlantGroup)* EETIME(Season, SupplyRegion)/$
				sum(slice_active, DRAT_MAX(SupplyRegion, Season, slice_active, FirstPlantGroup) * ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				Factor_MAX((SupplyRegion, Season, FirstPlantGroup)| Factor_MAX(SupplyRegion, Season, FirstPlantGroup)>1):=1;
				
				DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup)*=Factor(SupplyRegion, Season, FirstPlantGroup);
				DRAT_MIN(SupplyRegion, Season, slice_active, FirstPlantGroup)*=Factor_MIN(SupplyRegion, Season, FirstPlantGroup);
				DRAT_MAX(SupplyRegion, Season, slice_active, FirstPlantGroup)*=Factor_MAX(SupplyRegion, Season, FirstPlantGroup);
				DRAT_MAX((UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, slice_active, FirstPlantGroup)| UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WIMS('1') and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0  and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3):=
				DRAT_ORG(Season, slice_active, FirstPlantGroup);
				DRAT((SupplyRegion, Season, slice_active, FirstPlantGroup) | SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))=0 and UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3):= max(0.1, DRAT_ORG(Season, slice_active, FirstPlantGroup));
				
				RNBS_Gen(SupplyRegion, Season, FirstPlantGroup):=sum(slice_active | UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3, DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				RNBS_GenMin(SupplyRegion, Season, FirstPlantGroup):=sum(slice_active | UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0, DRAT_MIN(SupplyRegion, Season, slice_active, FirstPlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				RNBS_GenMax(SupplyRegion, Season, FirstPlantGroup):=sum(slice_active | UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0, DRAT_MAX(SupplyRegion, Season, slice_active, FirstPlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				
				ccalc_cOX_rLDge((SupplyRegion, Season, slice_active, FirstPlantGroup)|UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3):= 0.1 * DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion) ;    !OPRNBS,1; OPRNBS,13
				ccalc_cOX_rSRge((SupplyRegion, Season, slice_active, FirstPlantGroup) | UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 ):=
				1.0- DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup) ;    !OPRNBS,4
				ccalc_cJX_rLDge(SupplyRegion, Season, slice_active, FirstPlantGroup):= 0.1 * DRAT_MIN(SupplyRegion, Season, slice_active, FirstPlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion) $ (UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3);    !OPRNBS,5
				ccalc_cJX_rSRge((SupplyRegion, Season, slice_active, FirstPlantGroup)|UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 ):=
				1- DRAT_MIN(SupplyRegion, Season, slice_active, FirstPlantGroup)  ;    !OPRNBS,6
				ccalc_cUX_rLDge(SupplyRegion, Season, slice_active, FirstPlantGroup):= 0.1 * DRAT_MAX(SupplyRegion, Season, slice_active, FirstPlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion) $ (UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3);    !OPRNBS,9
				ccalc_cUX_rSRge((SupplyRegion, Season, slice_active, FirstPlantGroup)|UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 ):=
				1- DRAT_MAX(SupplyRegion, Season, slice_active, FirstPlantGroup) ;    !OPRNBS,10
				
				!intersection with OBJ
				
				!yda: RPS calculations are done now in RPS_Calculation procedure; after testing remove commented out code from here
				!IF (UPRNWREG('1') = 1) THEN
				!  RPSCST(ActiveSuperPlantGroup) := EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))) $ (UPRNWBAS(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))<=0);
				!ELSEIF (UPRNWREG('1') = 2) THEN
				!  RPSCST(ActiveSuperPlantGroup) := EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!   UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				!ELSEIF (UPRNWREG('1') = 3) THEN
				!  RPSU(ActiveSuperPlantGroup) := EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))) $ (UPRNWBAS(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))<=0);
				!  RPSR(ActiveSuperPlantGroup) := EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!   UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				!  RPSCST((ActiveSuperPlantGroup)|EPRPSPR(cyr) >= EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr)):=RPSU(ActiveSuperPlantGroup);
				!  RPSCST((ActiveSuperPlantGroup)|EPRPSPR(cyr) < EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr)):=RPSR(ActiveSuperPlantGroup);
				!ENDIF;
				!IF (ST_RPS_SW('1') > 0) THEN
				!  RPSR((ActiveSuperPlantGroup)|EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=3) := ST_RPS_EMM_P(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) *
				!   (ST_RNW_BND(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!   ST_RNW_SHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr));
				!  RPSCST((ActiveSuperPlantGroup) | EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=3 and (abs(RPSCST(ActiveSuperPlantGroup))<abs(RPSR(ActiveSuperPlantGroup)) and
				!   RPSCST(ActiveSuperPlantGroup)<0 and RPSR(ActiveSuperPlantGroup)<=0) or (RPSCST(ActiveSuperPlantGroup)<RPSR(ActiveSuperPlantGroup) and ! if both are negative use the greatest benefit
				!   (RPSCST(ActiveSuperPlantGroup)>=0 or RPSR(ActiveSuperPlantGroup)>0) ) ):= RPSR(ActiveSuperPlantGroup); ! if any are positive, use the highest positive cost
				!
				!ENDIF;
				
				ccalc_cOX_EFDCOSTS((FirstPlantGroup, Season)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 ):= (UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) +
				RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				RNBS_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup) * 0.001;   !OPRNBS,26 and OPRNBS,29
				ccalc_cJX_EFDCOSTS((FirstPlantGroup, Season)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				(UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				RNBS_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup) * 0.001;   !OPRNBS,27
				ccalc_cUX_EFDCOSTS((FirstPlantGroup, Season)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				(UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				RNBS_GenMax(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup) * 0.001;   !OPRNBS,27
				
				!IGS1(FirstPlantGroup) := 1 $ (sum(FuelsPerPlant,UIGAS(WFLTP_to_FuelType(UG_EFDt_to_PlantType(FirstPlantGroup), FuelsPerPlant)))>=1);
				!ccalc_cOX_rBTUle((UG_FL_RG_to_PlantGroup(FirstPlantGroup), UG_EFDt_to_PlantType(FirstPlantGroup), 'X', FirstPlantGroup, Season)|
				!EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3) :=     !OPRNBS,36
				!RNBS_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) * 0.000001 $
				!((UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))<= UIFCG('1') or UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIBMS('1') or
				!UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIDGB('1') or UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIDGP('1')) and
				!UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup))>NW_COAL('1') and IGS1(FirstPlantGroup)<1);  ! trill btu per GW
				
				ccalc_cOX_rBTUle((UG_FL_RG_to_PlantGroup(NoCoalPlantGroup), UG_EFDt_to_PlantType(NoCoalPlantGroup), GenerationSeason, NoCoalPlantGroup, Season)|
				EPPOPR(UG_EFDt_to_PlantType(NoCoalPlantGroup))=3 and FossilNucBMGroup_RNBS(NoCoalPlantGroup) and ((IGS1(NoCoalPlantGroup)=1 and ord(GenerationSeason)=ord(Season) ) or
				(IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X'))) :=     !OPRNBS,33 ; OPRNBS,36 and OPRNBS,41
				RNBS_Gen(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season, NoCoalPlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(NoCoalPlantGroup)) * 0.000001;  ! trill btu per GW
				
				!ccalc_cJX_rBTUle((UG_FL_RG_to_PlantGroup(FirstPlantGroup), UG_EFDt_to_PlantType(FirstPlantGroup), 'X', FirstPlantGroup, Season)|
				!EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0) :=     !OPRNBS,37
				!RNBS_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) * 0.000001 $
				!((UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))<= UIFCG('1') or UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIBMS('1') or
				!UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIDGB('1') or UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIDGP('1')) and
				!UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup))>NW_COAL('1') and IGS1(FirstPlantGroup)<1);  ! trill btu per GW
				
				ccalc_cJX_rBTUle((UG_FL_RG_to_PlantGroup(NoCoalPlantGroup), UG_EFDt_to_PlantType(NoCoalPlantGroup), GenerationSeason, NoCoalPlantGroup, Season)|
				EPPOPR(UG_EFDt_to_PlantType(NoCoalPlantGroup))=3 and FossilNucBMGroup_RNBS(NoCoalPlantGroup) and  SR_CREDIT(UG_ECPt_to_PlantGroup(NoCoalPlantGroup))>0 and
				((IGS1(NoCoalPlantGroup)=1 and ord(GenerationSeason)=ord(Season) ) or
				(IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X'))) :=     !OPRNBS,34 ; OPRNBS,37
				RNBS_GenMin(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season, NoCoalPlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(NoCoalPlantGroup)) * 0.000001;  ! trill btu per GW
				
				!ccalc_cUX_rBTUle((UG_FL_RG_to_PlantGroup(FirstPlantGroup), UG_EFDt_to_PlantType(FirstPlantGroup), 'X', FirstPlantGroup, Season)|
				!EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0) :=     !OPRNBS,37
				!RNBS_GenMax(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) * 0.000001 $
				!((UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))<= UIFCG('1') or UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIBMS('1') or
				!UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIDGB('1') or UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIDGP('1')) and
				!UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup))>NW_COAL('1') and IGS1(FirstPlantGroup)<1);  ! trill btu per GW
				
				ccalc_cUX_rBTUle((UG_FL_RG_to_PlantGroup(NoCoalPlantGroup), UG_EFDt_to_PlantType(NoCoalPlantGroup), GenerationSeason, NoCoalPlantGroup, Season)|
				EPPOPR(UG_EFDt_to_PlantType(NoCoalPlantGroup))=3 and FossilNucBMGroup_RNBS(NoCoalPlantGroup) and  SR_CREDIT(UG_ECPt_to_PlantGroup(NoCoalPlantGroup))>0 and
				((IGS1(NoCoalPlantGroup)=1 and ord(GenerationSeason)=ord(Season) ) or
				(IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X'))) :=     !OPRNBS,35 ; OPRNBS,38
				RNBS_GenMax(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season, NoCoalPlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(NoCoalPlantGroup)) * 0.000001;  ! trill btu per GW
				
				!NOX constraint for dispatchables
				RNBS_NOXEM((INOXP,  Season, DispatchableEFDGroup)|EPPOPR(UG_EFDt_to_PlantType(DispatchableEFDGroup))=3 ):=
				RNBS_Gen(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) *
				UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) * 0.0005 * 0.001;
				RNBS_NOXEMMin((INOXP,  Season, DispatchableEFDGroup)|EPPOPR(UG_EFDt_to_PlantType(DispatchableEFDGroup))=3  and
				SR_CREDIT(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))>0):=
				RNBS_GenMin(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) *
				UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) * 0.0005 * 0.001;
				RNBS_NOXEMMax((INOXP,  Season, DispatchableEFDGroup)|EPPOPR(UG_EFDt_to_PlantType(DispatchableEFDGroup))=3  and
				SR_CREDIT(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))>0):=
				RNBS_GenMax(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) *
				UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) * 0.0005 * 0.001;
				
				TST_NOX((PlantType_ECPp2_Element(UG_ECPt_to_PlantGroup(DispatchableEFDGroup)), INOXP) |EMRFNA(INOXP, cyr)>0 and
				exists(Season|RNBS_NOXEM(INOXP,  Season, DispatchableEFDGroup)>0.001)):=1;
				
				ccalc_cOX_rELNOX0n((INOXP, FirstPlantGroup, Season)| EMRFNA(INOXP, cyr)<=0 ):= RNBS_NOXEM(INOXP,  Season, FirstPlantGroup) $ (RNBS_NOXEM(INOXP,  Season, FirstPlantGroup)>0.001);   !OPRNBS,78
				ccalc_cOX_rELNOXle((INOXP, UG_ECPt_to_PlantGroup(FirstPlantGroup), FirstPlantGroup, Season)| EMRFNA(INOXP, cyr)>0 ):=
				RNBS_NOXEM(INOXP,  Season, FirstPlantGroup) $ (RNBS_NOXEM(INOXP,  Season, FirstPlantGroup)>0.001);          !OPRNBS,78
				ccalc_cJX_rELNOX0n((INOXP, FirstPlantGroup, Season)| EMRFNA(INOXP, cyr)<=0 ):= RNBS_NOXEMMin(INOXP,  Season, FirstPlantGroup) $ (RNBS_NOXEMMin(INOXP,  Season, FirstPlantGroup)>0.001); !OPRNBS,79
				ccalc_cJX_rELNOXle((INOXP, UG_ECPt_to_PlantGroup(FirstPlantGroup), FirstPlantGroup, Season)| EMRFNA(INOXP, cyr)>0 ):=
				RNBS_NOXEMMin(INOXP,  Season, FirstPlantGroup) $ (RNBS_NOXEMMin(INOXP,  Season, FirstPlantGroup)>0.001);    !OPRNBS,79
				ccalc_cUX_rELNOX0n((INOXP, FirstPlantGroup, Season)| EMRFNA(INOXP, cyr)<=0 ):= RNBS_NOXEMMax(INOXP,  Season, FirstPlantGroup) $ (RNBS_NOXEMMax(INOXP,  Season, FirstPlantGroup)>0.001); !OPRNBS,80
				ccalc_cUX_rELNOXle((INOXP, UG_ECPt_to_PlantGroup(FirstPlantGroup), FirstPlantGroup, Season)| EMRFNA(INOXP, cyr)>0 ):=
				RNBS_NOXEMMax(INOXP,  Season, FirstPlantGroup) $ (RNBS_NOXEMMax(INOXP,  Season, FirstPlantGroup)>0.001);      !OPRNBS,80
				
				!MUSTRUN CONSTRAINT
				ccalc_cOX_rMRXge((FirstPlantGroup, Season)|EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup))> 0):=
				0.1*RNBS_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup);                              !OPRNBS,81
				ccalc_cJX_rMRXge((FirstPlantGroup, Season)|EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup))> 0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0) := 0.1*RNBS_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup);          !OPRNBS,82
				ccalc_cUX_rMRXge((FirstPlantGroup, Season)|EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup))> 0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0) := 0.1*RNBS_GenMax(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup);          !OPRNBS,83
				
				!Biomass generation row for RPS
				ccalc_cOX_rGn((SupplyRegion, PlantType, FirstPlantGroup, Season) | EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and UG_EFDt_Mapping(PlantType, FirstPlantGroup) and
				UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIBMS('1')):=
				RNBS_Gen(SupplyRegion, Season, FirstPlantGroup) * 0.001;    !OPRNBS,87
				ccalc_cJX_rGn((SupplyRegion, PlantType, FirstPlantGroup, Season) | EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and UG_EFDt_Mapping(PlantType, FirstPlantGroup) and
				UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIBMS('1') and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				RNBS_GenMin(SupplyRegion, Season, FirstPlantGroup) * 0.001;    !OPRNBS,88
				ccalc_cUX_rGn((SupplyRegion, PlantType, FirstPlantGroup, Season) | EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=3 and UG_EFDt_Mapping(PlantType, FirstPlantGroup) and
				UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))=UIBMS('1') and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				RNBS_GenMax(SupplyRegion, Season, FirstPlantGroup) * 0.001;    !OPRNBS,89
			}
			Comment: {
				"not active in AEO2021 ref case: OPRNBS,23-25; OPRNBS,30-35;  OPRNBS,39-40;"
			}
			DeclarationSection Local_Declaration {
				Parameter RPSU {
					IndexDomain: PlantGroupOrd;
				}
				Parameter RPSR {
					IndexDomain: PlantGroupOrd;
				}
				Parameter Gen_Grid {
					IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
				}
				Parameter GenMin_Grid {
					IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
				}
			}
		}
		Procedure OPINT_sub {
			Body: {
				!intersection with OBJ
				
				!yda: RPS calculations are done now in RPS_Calculation procedure; after testing remove commented out code from here
				!IF (UPRNWREG('1') = 1) THEN
				!        RPSCST((ActiveSuperPlantGroup)|EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=5) := EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))) $ (UPRNWBAS(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))<=0);
				!ELSEIF (UPRNWREG('1') = 2) THEN
				!        RPSCST(ActiveSuperPlantGroup) := EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!            UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				!ELSEIF (UPRNWREG('1') = 3) THEN
				!        RPSU(ActiveSuperPlantGroup) := EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))) $ (UPRNWBAS(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup))<=0);
				!        RPSR(ActiveSuperPlantGroup) := EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!            UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)));
				!        RPSCST((ActiveSuperPlantGroup)|EPRPSPR(cyr) >= EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr)):=RPSU(ActiveSuperPlantGroup);
				!        RPSCST((ActiveSuperPlantGroup)|EPRPSPR(cyr) < EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr)):=RPSR(ActiveSuperPlantGroup);
				!ENDIF;
				!IF (ST_RPS_SW('1') > 0) THEN
				!       RPSR((ActiveSuperPlantGroup)|EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=5) := ST_RPS_EMM_P(UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr) * (ST_RNW_BND(cyr,UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup)) -
				!           ST_RNW_SHR(UG_ECPt_to_PlantGroupOrd(ActiveSuperPlantGroup),UG_EMM_RG_to_PlantGroupOrd(ActiveSuperPlantGroup),cyr));
				!       RPSCST((ActiveSuperPlantGroup) | EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=5 and abs(RPSCST(ActiveSuperPlantGroup))<abs(RPSR(ActiveSuperPlantGroup)) and
				!          (RPSCST(ActiveSuperPlantGroup)<0 and RPSR(ActiveSuperPlantGroup)<=0) ):= RPSR(ActiveSuperPlantGroup); ! if both are negative use the greatest benefit
				!       RPSCST((ActiveSuperPlantGroup) | EPPOPR(UG_EFDt_to_PlantGroupOrd(ActiveSuperPlantGroup))=5 and RPSCST(ActiveSuperPlantGroup)<RPSR(ActiveSuperPlantGroup) and
				!          (RPSCST(ActiveSuperPlantGroup)>=0 or RPSR(ActiveSuperPlantGroup)>0) ):= RPSR(ActiveSuperPlantGroup); ! if any are positive, use the highest positive cost
				!ENDIF;
				
				ccalc_cI_EFDCOSTS(FirstPlantGroup, Season, slice_active) :=
				      (UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				      INT_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, slice_active, FirstPlantGroup) * 0.001;   !OPINT,7
				
				!GRID RESILIENCE ROWS
				Gen_Grid((SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active)|
				        GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)>0 ):=
				        if (USW_GRD('1') = Val(grd_casn_ind) AND GRD_TGTS(cyr, SupplyRegion_ALT2) > 0.0) then
				           INT_Gen(SupplyRegion_ALT2, Season, slice_active, FirstPlantGroup) * 0.001 * (GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)-
				           GRD_TGTS(cyr, SupplyRegion_ALT2))
				        else
				           INT_Gen(SupplyRegion_ALT2, Season, slice_active, FirstPlantGroup) * 0.001 * GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)
				        endif;
				
				ccalc_cI_rGRDRTge(SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active) :=
				           Gen_Grid(SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active) ;  !OPINT,14
				ccalc_cI_rGRDGNge((SupplyRegion_ALT2, grd_casn_ind, FirstPlantGroup, Season, slice_active)|
				           GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion_ALT2, grd_casn_ind)>0 ) :=
				           INT_Gen(SupplyRegion_ALT2, Season, slice_active, FirstPlantGroup) * 0.001;                 !OPINT,15
			}
			Comment: "not active in AEO2021 ref case: OPINT,10 -13";
			DeclarationSection Local_Declaration {
				Parameter RPSU {
					IndexDomain: PlantGroupOrd;
				}
				Parameter RPSR {
					IndexDomain: PlantGroupOrd;
				}
				Parameter Gen_Grid {
					IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
				}
				Parameter GenMin_Grid {
					IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
				}
			}
		}
		Procedure OPBSLD_sub {
			Body: {
				MAX_SP_LOAD((SupplyRegion, Season, FirstPlantGroup) | UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1):= Max(slice_active,
				UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion));! $
				!(UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1);
				MIN_SP_LOAD(SupplyRegion, Season, FirstPlantGroup):= Min(slice_active,
				UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion)) $
				(UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1);
				
				DRAT_ORG((Season, slice_active, DispatchableEFDGroup)| EPPOPR(UG_EFDt_to_PlantType(DispatchableEFDGroup))=1 ) :=
				(1.0 - UG_FOR(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))) * (ETWDTH(Slice2SliceSorted_element(slice_active, Season, UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup)), Season, UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup)) -
				(UG_LFR(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))  * EETIME(Season, UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup)) *
				FAC(Slice2SliceSorted_element(slice_active, Season, UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup)), Season, UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup))) ) /
				ETWDTH(Slice2SliceSorted_element(slice_active, Season, UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup)), Season, UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup));
				
				
				
				! For ECP Types which have Spinning Reserve Credit Create Min, Max and Load Following Modes for each of the original modes
				!Load Following Mode Follows Load Height drat = (1 - for) * (ld / max_ld)
				!DRAT((SupplyRegion, Season, slice_active, FirstPlantGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and
				!UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))<=EFD_DSP('1') and UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup)) :=
				!(1.0 - UG_FOR(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				!(UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				!MAX_SP_LOAD(SupplyRegion, Season, FirstPlantGroup));
				
				!Use average ReSTORE CF for nuclear and baseload fossil for load following mode to allow for following net load
				DRAT((SupplyRegion, Season, slice_active, DispatchableEFDGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))>0 and EPPOPR(UG_EFDt_to_PlantType(DispatchableEFDGroup))=1 and
				UG_EMM_RG_Mapping(SupplyRegion, DispatchableEFDGroup)) :=
				if INUC(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))=1 then
				  max(((1.0 - UG_FOR(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))) *(1.0 - UG_LFR(PlantGroupOrd2PlantGroup(DispatchableEFDGroup)))*
				  NUC_CF_EFD(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion)), SR_MIN_CF(UG_ECPt_to_PlantGroup(DispatchableEFDGroup)))
				elseif IFOSBS(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))=1 then
				  max(((1.0 - UG_FOR(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))) *
				  FOS_CF_EFD(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion)), SR_MIN_CF(UG_ECPt_to_PlantGroup(DispatchableEFDGroup)))
				else
				  (1.0 - UG_FOR(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))) *
				  (UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				  MAX_SP_LOAD(SupplyRegion, Season, DispatchableEFDGroup))
				endif;
				
				!Minimum Electricity - Maximum Spinning Reserve Credit drat_min = (1 - sr_min_lf) * sr_min_cf * (ld / min_ld) + sr_min_lf * sr_min_cf
				DRAT_MIN((SupplyRegion, Season, slice_active, DispatchableEFDGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))>0) :=
				(1.0 - SR_MIN_LF(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))) * SR_MIN_CF(UG_ECPt_to_PlantGroup(DispatchableEFDGroup)) *
				(UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				MIN_SP_LOAD(SupplyRegion, Season, DispatchableEFDGroup)) + SR_MIN_LF(UG_ECPt_to_PlantGroup(DispatchableEFDGroup)) * SR_MIN_CF(UG_ECPt_to_PlantGroup(DispatchableEFDGroup)) $
				(UG_EMM_RG_Mapping(SupplyRegion, DispatchableEFDGroup) and EPPOPR(UG_EFDt_to_PlantType(DispatchableEFDGroup))=1 );
				
				!Maximum Electricity - Minimum Spinning Reserve Credit drat_max = (1 - sr_max_lf) * (1 - for) * (ld / max_ld) + sr_max_lf * (1 - for)
				DRAT_MAX((SupplyRegion, Season, slice_active, DispatchableEFDGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))>0 and
				UG_EMM_RG_Mapping(SupplyRegion, DispatchableEFDGroup) and EPPOPR(UG_EFDt_to_PlantType(DispatchableEFDGroup))=1 ) :=
				(1.0 - SR_MAX_LF(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))) * (1.0 - UG_FOR(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))) *
				(UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				MAX_SP_LOAD(SupplyRegion, Season, DispatchableEFDGroup)) + SR_MAX_LF(UG_ECPt_to_PlantGroup(DispatchableEFDGroup)) * (1.0 - UG_FOR(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))) ;
				
				DRAT_MAX((SupplyRegion, Season, slice_active, DispatchableEFDGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))>0 and UG_EMM_RG_Mapping(SupplyRegion, DispatchableEFDGroup) and
				 EPPOPR(UG_EFDt_to_PlantType(DispatchableEFDGroup))=1  and
				 (UG_MRUN(PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) AND DRAT_MAX(SupplyRegion, Season, slice_active, DispatchableEFDGroup) < DRAT_ORG(Season, slice_active, DispatchableEFDGroup)) or   !line10886
				 (UG_ECPt(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))= WIAN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))= WICN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))= WISM('1')) !line 10898
				 or (UG_ECPt(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))<= WIIS('1') and (ord(cyr) + UHBSYR('1')) <= (UYR_STEO('1') + 1)))  :=                                    !line 10902
				DRAT_ORG(Season, slice_active, DispatchableEFDGroup);
				
				DRAT((SupplyRegion, Season, slice_active, DispatchableEFDGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))<=0 and EPPOPR(UG_EFDt_to_PlantType(DispatchableEFDGroup))=1 and
				UG_EMM_RG_Mapping(SupplyRegion, DispatchableEFDGroup)) :=DRAT_ORG(Season, slice_active, DispatchableEFDGroup);
				
				DRAT((SupplyRegion, Season, slice_active, FirstPlantGroup)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and
				UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))>EFD_DSP('1') and UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup)) :=UG_SCF(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup));
				
				! check for NaNQ
				DRAT((SupplyRegion, Season, slice_active, FirstPlantGroup)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and
				UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and MapVal(DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup))<>0) :=UG_SCF(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup));
				
				!STEOBM           adjust drat (capacity factor) for STEO benchmarking nuclear (factor will be 1.0 if not benchmarking)
				DRAT((SupplyRegion, Season, slice_active, FirstPlantGroup)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				(UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WIAN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WICN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WISM('1'))) *=
				URNCCFA(cyr);
				DRAT_MAX((SupplyRegion, Season, slice_active, FirstPlantGroup)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				(UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WIAN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WICN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WISM('1'))) *=
				URNCCFA(cyr);
				DRAT_MIN((SupplyRegion, Season, slice_active, FirstPlantGroup)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				(UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WIAN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WICN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))= WISM('1'))) *=
				URNCCFA(cyr);
				
				DRAT((SupplyRegion, Season, slice_active, FirstPlantGroup)| EPPOPR(UG_EFDt_to_PlantType(FirstPlantGroup))=1 and UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup)):=
				max(0.01, DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup));
				
				BSLD_Gen((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active)):=
				sum(slice_active | Slice_OpMode_Mapping(slice_active, mode_active), DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup)*
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				
				BSLD_GenMin((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active)):=
				sum(slice_active | Slice_OpMode_Mapping(slice_active, mode_active), DRAT_MIN(SupplyRegion, Season, slice_active, FirstPlantGroup)*
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				
				BSLD_GenMax((SupplyRegion,Season,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active)):=
				sum(slice_active | Slice_OpMode_Mapping(slice_active, mode_active), DRAT_MAX(SupplyRegion, Season, slice_active, FirstPlantGroup)*
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				
				ccalc_cO_rLDge((SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				Slice_OpMode_Mapping(slice_active, mode_active) and OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active)):=
				0.1* DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup)* ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion); !'OPBSLD,1
				
				ccalc_cO_ALT_rLDge((SupplyRegion,Season,slice_active,FirstPlantGroup,SeasonCCS, mode_active)| Season_SeasonCCS_Mapping(Season, SeasonCCS)):=
				ccalc_cO_rLDge(SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active) * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) $
				(OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1); !'OPBSLD,2
				
				ccalc_cO_rSRge((SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				Slice_OpMode_Mapping(slice_active, mode_active) and OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 ):=
				(1 - DRAT(SupplyRegion, Season, slice_active, FirstPlantGroup))* SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup)); !OPBSLD,3
				
				ccalc_cO_ALT_rSRge((SupplyRegion,Season,slice_active,FirstPlantGroup,SeasonCCS, mode_active)| Season_SeasonCCS_Mapping(Season, SeasonCCS)):=
				ccalc_cO_rSRge(SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active) * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) $
				(OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1); !OPBSLD,4
				
				ccalc_cJ_rLDge((SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				Slice_OpMode_Mapping(slice_active, mode_active) and OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 ):=
				0.1* DRAT_MIN(SupplyRegion, Season, slice_active, FirstPlantGroup)* ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion); !'OPBSLD,5
				
				ccalc_cJ_ALT_rLDge((SupplyRegion,Season,slice_active,FirstPlantGroup,SeasonCCS, mode_active)| Season_SeasonCCS_Mapping(Season, SeasonCCS)):=
				ccalc_cJ_rLDge(SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active) * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) $
				(OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1); !'OPBSLD,6
				
				ccalc_cJ_rSRge((SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				Slice_OpMode_Mapping(slice_active, mode_active) and OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 ):=
				(1 - DRAT_MIN(SupplyRegion, Season, slice_active, FirstPlantGroup))* SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup)); !OPBSLD,7
				
				ccalc_cJ_ALT_rSRge((SupplyRegion,Season,slice_active,FirstPlantGroup,SeasonCCS, mode_active)| Season_SeasonCCS_Mapping(Season, SeasonCCS)):=
				ccalc_cJ_rSRge(SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active) * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) $
				(OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1); !OPBSLD,7_1
				
				ccalc_cU_rLDge((SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				Slice_OpMode_Mapping(slice_active, mode_active) and OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 ):=
				0.1* DRAT_MAX(SupplyRegion, Season, slice_active, FirstPlantGroup)* ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion); !'OPBSLD,8
				
				ccalc_cU_ALT_rLDge((SupplyRegion,Season,slice_active,FirstPlantGroup,SeasonCCS, mode_active)| Season_SeasonCCS_Mapping(Season, SeasonCCS)):=
				ccalc_cU_rLDge(SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active) * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) $
				(OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1); !'OPBSLD,9
				
				ccalc_cU_rSRge((SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				Slice_OpMode_Mapping(slice_active, mode_active) and OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 ):=
				(1 - DRAT_MAX(SupplyRegion, Season, slice_active, FirstPlantGroup))* SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup)); !OPBSLD,10
				
				ccalc_cU_ALT_rSRge((SupplyRegion,Season,slice_active,FirstPlantGroup,SeasonCCS, mode_active)| Season_SeasonCCS_Mapping(Season, SeasonCCS)):=
				ccalc_cU_rSRge(SupplyRegion,Season,slice_active,FirstPlantGroup, mode_active) * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) $
				(OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1); !OPBSLD,10_1
				
				!intersection with OBJ
				RPSCST_Calculation;
				!DETERMINE CARBON INTENSITY RATE AND GPS ADDER, IF ANY
				Carbon_Intensity_Rate;
				GPSCST_Calculation;
				
				ccalc_cO_EFDCOSTS((FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active)):= !OPBSLD,23
				(UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) +
				GPSCST(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season,FirstPlantGroup,mode_active) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				BSLD_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) * 0.001; ! units million $ / GW
				
				ccalc_cO_ALT_EFDCOSTS((FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=   !OPBSLD,24
				(UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) +
				ALT_GPSCST(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season_Element(SeasonCCS),FirstPlantGroup,mode_active) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				BSLD_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001; ! units million $ / GW
				
				ccalc_cJ_EFDCOSTS((FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and  !OPBSLD,25
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 ):=
				(UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) +
				GPSCST_MIN(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season,FirstPlantGroup,mode_active) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				BSLD_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) * 0.001; ! units million $ / GW
				
				ccalc_cJ_ALT_EFDCOSTS((FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=   !OPBSLD,26
				(UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) +
				ALT_GPSCST_MIN(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season_Element(SeasonCCS),FirstPlantGroup,mode_active) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				BSLD_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001; ! units million $ / GW
				
				ccalc_cU_EFDCOSTS((FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and  !OPBSLD,27
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 ):=
				(UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) +
				GPSCST_MAX(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season,FirstPlantGroup,mode_active) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				BSLD_GenMax(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) * 0.001; ! units million $ / GW
				
				ccalc_cU_ALT_EFDCOSTS((FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=   !OPBSLD,28
				(UG_OMR(PlantGroupOrd2PlantGroup(FirstPlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(FirstPlantGroup)) +
				ALT_GPSCST_MAX(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season_Element(SeasonCCS),FirstPlantGroup,mode_active) - UG_GSUB(PlantGroupOrd2PlantGroup(FirstPlantGroup))) *
				BSLD_GenMax(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001; ! units million $ / GW
				
				! BTU requirement for fossil or biomass or nuclear
				BTUREQ((FirstPlantGroup, Season, mode_active)| OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup)):= BSLD_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) *
				UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) *
				HTRT_ADJ(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) * 0.000001;  !  trill BTU per GW
				
				BTUREQ_Min((FirstPlantGroup, Season, mode_active)| OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) *
				UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) *
				HTRT_ADJ_MIN(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) * 0.000001;  !  trill BTU per GW
				
				BTUREQ_Max((FirstPlantGroup, Season, mode_active)| OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMax(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) *
				UG_HTRT(Season, PlantGroupOrd2PlantGroup(FirstPlantGroup)) *
				HTRT_ADJ_MAX(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) * 0.000001;  !  trill BTU per GW
				
				!   Benchmarking for fossil generation and consumption, if enforced
				
				!   Coal
				ccalc_cO_rGENCLeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLGEN(cyr)):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001; !OPBSLD,35
				
				ccalc_cO_ALT_rGENCLeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLGEN(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_Gen(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup));  !OPBSLD,36
				
				ccalc_cJ_rGENCLeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLGEN(cyr)):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001; !OPBSLD,37
				
				ccalc_cJ_ALT_rGENCLeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and  SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLGEN(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_GenMin(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup));  !OPBSLD,38
				
				ccalc_cU_rGENCLeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				!(UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup)) <= UISMR('1') or UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup))  = UIBMS('1') or
				!UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup)) = UIDGB('1') or UG_EFDt(PlantGroupOrd2PlantGroup(FirstPlantGroup)) = UIDGP('1')) and
				FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLGEN(cyr)):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001; !OPBSLD,39
				
				ccalc_cU_ALT_rGENCLeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and  SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLGEN(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_GenMax(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup));  !OPBSLD,40
				
				ccalc_cO_rCONCLeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLCON(cyr)):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season, mode_active);      !OPBSLD,41
				
				ccalc_cO_ALT_rCONCLeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLCON(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season_Element(SeasonCCS), mode_active); !OPBSLD,42
				
				ccalc_cJ_rCONCLeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLCON(cyr)):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season, mode_active);    !OPBSLD,43
				
				ccalc_cJ_ALT_rCONCLeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and  SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLCON(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season_Element(SeasonCCS), mode_active);    !OPBSLD,44
				
				ccalc_cU_rCONCLeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLCON(cyr)):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season, mode_active);        !OPBSLD,45
				
				ccalc_cU_ALT_rCONCLeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and  SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMCLTOL('1') and BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMCLCON(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_CLSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season_Element(SeasonCCS), mode_active);  !OPBSLD,46
				
				!  Gas
				ccalc_cO_rGENNGeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr)):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001; !OPBSLD,47
				
				ccalc_cO_ALT_rGENNGeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_Gen(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup));  !OPBSLD,48
				
				ccalc_cJ_rGENNGeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr)):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001; !OPBSLD,49
				
				ccalc_cJ_ALT_rGENNGeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and  SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_GenMin(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup));  !OPBSLD,50
				
				ccalc_cU_rGENNGeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr)):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001; !OPBSLD,51
				
				ccalc_cU_ALT_rGENNGeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and  SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BSLD_GenMax(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup));  !OPBSLD,52
				
				ccalc_cO_rCONNGeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr)):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season, mode_active);       !OPBSLD,53
				
				ccalc_cO_ALT_rCONNGeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season_Element(SeasonCCS), mode_active);  !OPBSLD,54
				
				ccalc_cJ_rCONNGeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr)):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season, mode_active);         !OPBSLD,55
				
				ccalc_cJ_ALT_rCONNGeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and  SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season_Element(SeasonCCS), mode_active);    !OPBSLD,56
				
				ccalc_cU_rCONNGeq((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr)):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season, mode_active);       !OPBSLD,57
				
				ccalc_cU_ALT_rCONNGeq((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and  SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FossilNucBMGroup(FirstPlantGroup) and
				BMNGTOL('1') and BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) and BMNGGEN(cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_GASSH(FirstPlantGroup, UG_FL_RG_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season_Element(SeasonCCS), mode_active);  !OPBSLD,58
				
				! oil coefficients are not passed OPBSLD,59 - OPBSLD,70
				
				!ACCOUNT FOR OUT-OF-STATE CARBON EMISSIONS IN CA
				
				ccalc_cO_rCARBONle((CarbonRegion, CoalPlantGroup, Season, mode_active) | CarbonCap_Regional(CarbonRegion) and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season, CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion))):=
				BTUREQ(CoalPlantGroup, Season, mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0);   !OPBSLD,71
				
				ccalc_cO_rCARBONn((CarbonRegion, CoalPlantGroup, Season, mode_active) | CarbonCap_Regional(CarbonRegion)=0 and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season, CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion))):=
				BTUREQ(CoalPlantGroup, Season, mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0);   !OPBSLD,71
				
				ccalc_cO_ALT_rCARBONle((CarbonRegion, CoalPlantGroup, SeasonCCs, mode_active) | CarbonCap_Regional(CarbonRegion) and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1):=
				BTUREQ(CoalPlantGroup, Season_Element(SeasonCCS), mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0);   !OPBSLD,72
				
				ccalc_cO_ALT_rCARBONn((CarbonRegion, CoalPlantGroup, SeasonCCS, mode_active) | CarbonCap_Regional(CarbonRegion)=0 and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1):=
				BTUREQ(CoalPlantGroup, Season_Element(SeasonCCS), mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0);   !OPBSLD,72
				
				ccalc_cJ_rCARBONle((CarbonRegion, CoalPlantGroup, Season, mode_active) | CarbonCap_Regional(CarbonRegion) and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season, CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Min(CoalPlantGroup, Season, mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0);   !OPBSLD,73
				
				ccalc_cJ_rCARBONn((CarbonRegion, CoalPlantGroup, Season, mode_active) | CarbonCap_Regional(CarbonRegion)=0 and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season, CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Min(CoalPlantGroup, Season, mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0);   !OPBSLD,73
				
				ccalc_cJ_ALT_rCARBONle((CarbonRegion, CoalPlantGroup, SeasonCCs, mode_active) | CarbonCap_Regional(CarbonRegion) and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Min(CoalPlantGroup, Season_Element(SeasonCCS), mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0); !OPBSLD,74
				
				ccalc_cJ_ALT_rCARBONn((CarbonRegion, CoalPlantGroup, SeasonCCs, mode_active) | CarbonCap_Regional(CarbonRegion)=0 and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Min(CoalPlantGroup, Season_Element(SeasonCCS), mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0); !OPBSLD,74
				
				ccalc_cU_rCARBONle((CarbonRegion, CoalPlantGroup, Season, mode_active) | CarbonCap_Regional(CarbonRegion) and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season, CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Max(CoalPlantGroup, Season, mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0);   !OPBSLD,75
				
				ccalc_cU_rCARBONn((CarbonRegion, CoalPlantGroup, Season, mode_active) | CarbonCap_Regional(CarbonRegion)=0 and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season, CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Max(CoalPlantGroup, Season, mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0);   !OPBSLD,75
				
				ccalc_cU_ALT_rCARBONle((CarbonRegion, CoalPlantGroup, SeasonCCs, mode_active) | CarbonCap_Regional(CarbonRegion) and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Max(CoalPlantGroup, Season_Element(SeasonCCS), mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0); !OPBSLD,76
				
				ccalc_cU_ALT_rCARBONn((CarbonRegion, CoalPlantGroup, SeasonCCs, mode_active) | CarbonCap_Regional(CarbonRegion)=0 and
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and California_RG(CoalPlantGroup) and CO2_OS_BY_RG(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), CO2CapGroup_element(CarbonRegion)) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Max(CoalPlantGroup, Season_Element(SeasonCCS), mode_active) * UFRCAR(CoalPlantGroup_FuelType(CoalPlantGroup), EPCLMP_2_int_fuel_region(CoalPlantGroup)) * (1.0 / 2204.0);  !OPBSLD,76
				
				! MAKE CAPTURED CO2 FROM COAL and NATURAL GAS UNITS AVAILABLE TO EOR PROJECTS
				ccalc_cO_rZFLRGeq((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr) and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,77
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,83
				endif;
				
				ccalc_cO_rZFLRGge((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr)=0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,77
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,83
				endif;
				
				ccalc_cO_rZFLRSeq((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr) and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,77
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,83
				endif;
				
				ccalc_cO_rZFLRSge((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr)=0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,77
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,83
				endif;
				
				!ALT
				ccalc_cO_ALT_rZFLRGeq((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,78
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,84
				endif;
				
				ccalc_cO_ALT_rZFLRGge((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr)=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,78
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,84
				endif;
				
				ccalc_cO_ALT_rZFLRSeq((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,78
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,84
				endif;
				
				ccalc_cO_ALT_rZFLRSge((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr)=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,78
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,84
				endif;
				
				!J
				ccalc_cJ_rZFLRGeq((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,79
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,85
				endif;
				
				ccalc_cJ_rZFLRGge((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr)=0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,79
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,85
				endif;
				
				ccalc_cJ_rZFLRSeq((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,79
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,85
				endif;
				
				ccalc_cJ_rZFLRSge((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr)=0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,79
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,85
				endif;
				
				!J_ALT
				ccalc_cJ_ALT_rZFLRGeq((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,80
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,86
				endif;
				
				ccalc_cJ_ALT_rZFLRGge((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr)=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,80
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,86
				endif;
				
				ccalc_cJ_ALT_rZFLRSeq((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,80
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,86
				endif;
				
				ccalc_cJ_ALT_rZFLRSge((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr)=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Min(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,80
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,86
				endif;
				
				!U
				ccalc_cU_rZFLRGeq((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,81
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,87
				endif;
				
				ccalc_cU_rZFLRGge((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr)=0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,81
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,87
				endif;
				
				ccalc_cU_rZFLRSeq((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,81
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,87
				endif;
				
				ccalc_cU_rZFLRSge((FuelRegion, FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr)=0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season, mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,81
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,87
				endif;
				
				!U_ALT
				ccalc_cU_ALT_rZFLRGeq((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,82
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,88
				endif;
				
				ccalc_cU_ALT_rZFLRGge((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup)=0 and MUST_STORE(FuelRegion, cyr)=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,82
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,88
				endif;
				
				ccalc_cU_ALT_rZFLRSeq((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,82
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,88
				endif;
				
				ccalc_cU_ALT_rZFLRSge((FuelRegion, FirstPlantGroup, SeasonCCS, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				FossilNucBMGroup(FirstPlantGroup) and UPPCEF(UG_ECPt_to_PlantGroup(FirstPlantGroup)) and _45Q_Flag(FirstPlantGroup) and MUST_STORE(FuelRegion, cyr)=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				FuelRegion=UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				UPPCEF_MIN(UG_ECPt_to_PlantGroup(FirstPlantGroup)) * BTUREQ_Max(FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * 0.001 * (44.0 / 12.0)*
				if UPTTYP(UG_ECPt_to_PlantGroup(FirstPlantGroup)) <= NW_COAL('1') then
				   ECLEL(cyr)                !coal       OPBSLD,82
				elseif IGS1(FirstPlantGroup) then
				   ENGEL(cyr)                !gas        OPBSLD,88
				endif;
				
				! BTU row for fossil or biomass or nuclear
				!coal
				!O
				ccalc_cO_rBTUXXle((UG_FL_RG_to_PlantGroup(CoalPlantGroup), PlantType, CoalPlantGroup, Season, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season, CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and Coal_PlantType_ECP(PlantType)=UG_ECPt_to_PlantGroup(CoalPlantGroup)):= BTUREQ(CoalPlantGroup, Season, mode_active); !OPBSLD,89
				
				ccalc_cO_ALT_rBTUXXle((UG_FL_RG_to_PlantGroup(CoalPlantGroup), PlantType, CoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and Coal_PlantType_ECP(PlantType)=UG_ECPt_to_PlantGroup(CoalPlantGroup) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1):=
				BTUREQ(CoalPlantGroup, Season_Element(SeasonCCS), mode_active)*SHR_CCS(UG_ECPt_to_PlantGroup(CoalPlantGroup)) ;   !OPBSLD,90_1
				!NO CCS
				ccalc_cO_ALT_rBTUXXle((UG_FL_RG_to_PlantGroup(CoalPlantGroup), PlantType, CoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and Coal_PlantType_ECP(PlantType)=I_NOCCS(UG_ECPt_to_PlantGroup(CoalPlantGroup)) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1  AND SHR_NOCCS(UG_ECPt_to_PlantGroup(CoalPlantGroup)) > 0.001):=
				BTUREQ(CoalPlantGroup, Season_Element(SeasonCCS), mode_active)*SHR_NOCCS(UG_ECPt_to_PlantGroup(CoalPlantGroup));    !OPBSLD,90_2
				!J
				ccalc_cJ_rBTUXXle((UG_FL_RG_to_PlantGroup(CoalPlantGroup), PlantType, CoalPlantGroup, Season, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season, CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and Coal_PlantType_ECP(PlantType)=UG_ECPt_to_PlantGroup(CoalPlantGroup) and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Min(CoalPlantGroup, Season, mode_active); !OPBSLD,91
				
				ccalc_cJ_ALT_rBTUXXle((UG_FL_RG_to_PlantGroup(CoalPlantGroup), PlantType, CoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and Coal_PlantType_ECP(PlantType)=UG_ECPt_to_PlantGroup(CoalPlantGroup) and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1):=
				BTUREQ_Min(CoalPlantGroup, Season_Element(SeasonCCS), mode_active)*SHR_CCS(UG_ECPt_to_PlantGroup(CoalPlantGroup)) ;   !OPBSLD,92_1
				!NO CCS
				ccalc_cJ_ALT_rBTUXXle((UG_FL_RG_to_PlantGroup(CoalPlantGroup), PlantType, CoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and Coal_PlantType_ECP(PlantType)=I_NOCCS(UG_ECPt_to_PlantGroup(CoalPlantGroup)) and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1  AND SHR_NOCCS(UG_ECPt_to_PlantGroup(CoalPlantGroup)) > 0.001):=
				BTUREQ_Min(CoalPlantGroup, Season_Element(SeasonCCS), mode_active)*SHR_NOCCS(UG_ECPt_to_PlantGroup(CoalPlantGroup));    !OPBSLD,92_2
				!U
				ccalc_cU_rBTUXXle((UG_FL_RG_to_PlantGroup(CoalPlantGroup), PlantType, CoalPlantGroup, Season, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season, CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and Coal_PlantType_ECP(PlantType)=UG_ECPt_to_PlantGroup(CoalPlantGroup) and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0):=
				BTUREQ_Max(CoalPlantGroup, Season, mode_active); !OPBSLD,93
				
				ccalc_cU_ALT_rBTUXXle((UG_FL_RG_to_PlantGroup(CoalPlantGroup), PlantType, CoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and Coal_PlantType_ECP(PlantType)=UG_ECPt_to_PlantGroup(CoalPlantGroup) and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1):=
				BTUREQ_Max(CoalPlantGroup, Season_Element(SeasonCCS), mode_active)*SHR_CCS(UG_ECPt_to_PlantGroup(CoalPlantGroup)) ;   !OPBSLD,94_1
				!NO CCS
				ccalc_cU_ALT_rBTUXXle((UG_FL_RG_to_PlantGroup(CoalPlantGroup), PlantType, CoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(CoalPlantGroup), Season_Element(SeasonCCS), CoalPlantGroup, mode_active) and
				FossilNucBMGroup(CoalPlantGroup) and Coal_PlantType_ECP(PlantType)=I_NOCCS(UG_ECPt_to_PlantGroup(CoalPlantGroup)) and SR_CREDIT(UG_ECPt_to_PlantGroup(CoalPlantGroup))>0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(CoalPlantGroup))<>1  AND SHR_NOCCS(UG_ECPt_to_PlantGroup(CoalPlantGroup)) > 0.001):=
				BTUREQ_Max(CoalPlantGroup, Season_Element(SeasonCCS), mode_active)*SHR_NOCCS(UG_ECPt_to_PlantGroup(CoalPlantGroup));    !OPBSLD,94_2
				
				
				!no coal
				!O
				ccalc_cO_rBTUle((FuelRegion, UG_EFDt_to_PlantType(NoCoalPlantGroup), GenerationSeason, NoCoalPlantGroup, Season, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season, NoCoalPlantGroup, mode_active) and FossilNucBMGroup(NoCoalPlantGroup) and
				((IGS1(NoCoalPlantGroup) and ord(GenerationSeason)=ord(Season) and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or    !gas
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UICNU('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UIANC('1') AND   !oil or biomass
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UISMR('1')) and IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X' and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UICNU('1') or UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UIANC('1') or    !nuclear
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UISMR('1')) and GenerationSeason='X' and FuelRegion='US'))
				 ):= BTUREQ(NoCoalPlantGroup, Season, mode_active); !OPBSLD,89
				!
				ccalc_cO_ALT_rBTUle((FuelRegion, UG_EFDt_to_PlantType(NoCoalPlantGroup), GenerationSeason, NoCoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season_Element(SeasonCCS), NoCoalPlantGroup, mode_active) and FossilNucBMGroup(NoCoalPlantGroup) and
				((IGS1(NoCoalPlantGroup) and ord(GenerationSeason)=ord(SeasonCCS) and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or    !gas
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UICNU('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UIANC('1') AND   !oil or biomass
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UISMR('1')) and IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X' and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UICNU('1') or UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UIANC('1') or    !nuclear
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UISMR('1')) and GenerationSeason='X' and FuelRegion='US')) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>1):=
				BTUREQ(NoCoalPlantGroup, Season_Element(SeasonCCS), mode_active) * SHR_CCS(UG_ECPt_to_PlantGroup(NoCoalPlantGroup));    !OPBSLD,90_1
				!NO CCS
				ccalc_cO_ALT_rBTUle((FuelRegion, I_NOCCS_EFD(UG_ECPt_to_PlantGroup(NoCoalPlantGroup)), GenerationSeason, NoCoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season_Element(SeasonCCS), NoCoalPlantGroup, mode_active) and FossilNucBMGroup(NoCoalPlantGroup) and
				((IGS1(NoCoalPlantGroup) and ord(GenerationSeason)=ord(SeasonCCS) and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or    !gas
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UICNU('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UIANC('1') AND   !oil or biomass
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UISMR('1')) and IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X' and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UICNU('1') or UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UIANC('1') or    !nuclear
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UISMR('1')) and GenerationSeason='X' and FuelRegion='US')) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>1  AND SHR_NOCCS(UG_ECPt_to_PlantGroup(NoCoalPlantGroup)) > 0.001):=
				BTUREQ(NoCoalPlantGroup, Season_Element(SeasonCCS), mode_active) * SHR_NOCCS(UG_ECPt_to_PlantGroup(NoCoalPlantGroup));    !OPBSLD,90_2
				!J
				ccalc_cJ_rBTUle((FuelRegion, UG_EFDt_to_PlantType(NoCoalPlantGroup), GenerationSeason, NoCoalPlantGroup, Season, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season, NoCoalPlantGroup, mode_active) and FossilNucBMGroup(NoCoalPlantGroup) and
				((IGS1(NoCoalPlantGroup) and ord(GenerationSeason)=ord(Season) and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or    !gas
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UICNU('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UIANC('1') AND   !oil or biomass
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UISMR('1')) and IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X' and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UICNU('1') or UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UIANC('1') or    !nuclear
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UISMR('1')) and GenerationSeason='X' and FuelRegion='US')) and SR_CREDIT(UG_ECPt_to_PlantGroup(NoCoalPlantGroup))>0
				 ):= BTUREQ_Min(NoCoalPlantGroup, Season, mode_active); !OPBSLD,91
				!
				ccalc_cJ_ALT_rBTUle((FuelRegion, UG_EFDt_to_PlantType(NoCoalPlantGroup), GenerationSeason, NoCoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season_Element(SeasonCCS), NoCoalPlantGroup, mode_active) and FossilNucBMGroup(NoCoalPlantGroup) and
				((IGS1(NoCoalPlantGroup) and ord(GenerationSeason)=ord(SeasonCCS) and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or    !gas
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UICNU('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UIANC('1') AND   !oil or biomass
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UISMR('1')) and IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X' and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UICNU('1') or UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UIANC('1') or    !nuclear
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UISMR('1')) and GenerationSeason='X' and FuelRegion='US')) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>1
				and SR_CREDIT(UG_ECPt_to_PlantGroup(NoCoalPlantGroup))>0):=
				BTUREQ_Min(NoCoalPlantGroup, Season_Element(SeasonCCS), mode_active) * SHR_CCS(UG_ECPt_to_PlantGroup(NoCoalPlantGroup));    !OPBSLD,92_1
				!NO CCS
				ccalc_cJ_ALT_rBTUle((FuelRegion, I_NOCCS_EFD(UG_ECPt_to_PlantGroup(NoCoalPlantGroup)), GenerationSeason, NoCoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season_Element(SeasonCCS), NoCoalPlantGroup, mode_active) and FossilNucBMGroup(NoCoalPlantGroup) and
				((IGS1(NoCoalPlantGroup) and ord(GenerationSeason)=ord(SeasonCCS) and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or    !gas
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UICNU('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UIANC('1') AND   !oil or biomass
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UISMR('1')) and IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X' and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UICNU('1') or UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UIANC('1') or    !nuclear
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UISMR('1')) and GenerationSeason='X' and FuelRegion='US')) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>1  AND SHR_NOCCS(UG_ECPt_to_PlantGroup(NoCoalPlantGroup)) > 0.001
				and SR_CREDIT(UG_ECPt_to_PlantGroup(NoCoalPlantGroup))>0):=
				BTUREQ_Min(NoCoalPlantGroup, Season_Element(SeasonCCS), mode_active) * SHR_NOCCS(UG_ECPt_to_PlantGroup(NoCoalPlantGroup));    !OPBSLD,92_2
				!U
				ccalc_cU_rBTUle((FuelRegion, UG_EFDt_to_PlantType(NoCoalPlantGroup), GenerationSeason, NoCoalPlantGroup, Season, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season, NoCoalPlantGroup, mode_active) and FossilNucBMGroup(NoCoalPlantGroup) and
				((IGS1(NoCoalPlantGroup) and ord(GenerationSeason)=ord(Season) and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or    !gas
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UICNU('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UIANC('1') AND   !oil or biomass
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UISMR('1')) and IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X' and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UICNU('1') or UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UIANC('1') or    !nuclear
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UISMR('1')) and GenerationSeason='X' and FuelRegion='US')) and SR_CREDIT(UG_ECPt_to_PlantGroup(NoCoalPlantGroup))>0
				 ):= BTUREQ_Max(NoCoalPlantGroup, Season, mode_active); !OPBSLD,93
				!
				ccalc_cU_ALT_rBTUle((FuelRegion, UG_EFDt_to_PlantType(NoCoalPlantGroup), GenerationSeason, NoCoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season_Element(SeasonCCS), NoCoalPlantGroup, mode_active) and FossilNucBMGroup(NoCoalPlantGroup) and
				((IGS1(NoCoalPlantGroup) and ord(GenerationSeason)=ord(SeasonCCS) and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or    !gas
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UICNU('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UIANC('1') AND   !oil or biomass
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UISMR('1')) and IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X' and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UICNU('1') or UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UIANC('1') or    !nuclear
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UISMR('1')) and GenerationSeason='X' and FuelRegion='US')) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>1
				and SR_CREDIT(UG_ECPt_to_PlantGroup(NoCoalPlantGroup))>0):=
				BTUREQ_Min(NoCoalPlantGroup, Season_Element(SeasonCCS), mode_active) * SHR_CCS(UG_ECPt_to_PlantGroup(NoCoalPlantGroup));    !OPBSLD,94_1
				!NO CCS
				ccalc_cU_ALT_rBTUle((FuelRegion, I_NOCCS_EFD(UG_ECPt_to_PlantGroup(NoCoalPlantGroup)), GenerationSeason, NoCoalPlantGroup, SeasonCCS, mode_active) |
				OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(NoCoalPlantGroup), Season_Element(SeasonCCS), NoCoalPlantGroup, mode_active) and FossilNucBMGroup(NoCoalPlantGroup) and
				((IGS1(NoCoalPlantGroup) and ord(GenerationSeason)=ord(SeasonCCS) and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or    !gas
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UICNU('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UIANC('1') AND   !oil or biomass
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>UISMR('1')) and IGS1(NoCoalPlantGroup)=0 and GenerationSeason='X' and FuelRegion=UG_FL_RG_to_PlantGroup(NoCoalPlantGroup)) or
				((UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UICNU('1') or UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UIANC('1') or    !nuclear
				UG_EFDt(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))=UISMR('1')) and GenerationSeason='X' and FuelRegion='US')) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(NoCoalPlantGroup))<>1  AND SHR_NOCCS(UG_ECPt_to_PlantGroup(NoCoalPlantGroup)) > 0.001
				and SR_CREDIT(UG_ECPt_to_PlantGroup(NoCoalPlantGroup))>0):=
				BTUREQ_Max(NoCoalPlantGroup, Season_Element(SeasonCCS), mode_active) * SHR_NOCCS(UG_ECPt_to_PlantGroup(NoCoalPlantGroup));    !OPBSLD,94_2
				
				!              FUEL REGION INTENSITY STANDARD
				!
				!              ACCUMULATE TOTAL CO2 EMISSIONS
				ccalc_cO_rCO2TNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup)):=
				BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) *
				CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup)) * 0.001;    !OPBSLD,95
				
				ccalc_cO_ALT_rCO2TNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				BSLD_Gen(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) *
				CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup)) * 0.001;    !OPBSLD,96
				!J
				ccalc_cJ_rCO2TNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) *
				CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup)) * 0.001;    !OPBSLD,97
				
				ccalc_cJ_ALT_rCO2TNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMin(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) *
				CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup)) * 0.001;    !OPBSLD,98
				!U
				ccalc_cU_rCO2TNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active)>0 and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) *
				CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup)) * 0.001;    !OPBSLD,99
				
				ccalc_cU_ALT_rCO2TNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active)>0 and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMax(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) *
				CO2ADJ(PlantGroupOrd2PlantGroup(FirstPlantGroup)) * 0.001;    !OPBSLD,100
				!O
				ccalc_cO_rCO2QNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and rCO2QNR_Flag(SupplyRegion)=0):=
				BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,101
				
				ccalc_cO_ALT_rCO2QNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and rCO2QNR_Flag(SupplyRegion)=0):=
				BSLD_Gen(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,102
				!J
				ccalc_cJ_rCO2QNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup)and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and rCO2QNR_Flag(SupplyRegion)=0):=
				BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,103
				
				ccalc_cJ_ALT_rCO2QNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0
				and rCO2QNR_Flag(SupplyRegion)=0):=
				BSLD_GenMin(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,104
				!U
				ccalc_cU_rCO2QNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup)and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and rCO2QNR_Flag(SupplyRegion)=0):=
				BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,105
				
				ccalc_cU_ALT_rCO2QNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0
				and rCO2QNR_Flag(SupplyRegion)=0):=
				BSLD_GenMax(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,106
				! <= rows
				ccalc_cO_rCO2QNRle((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and rCO2QNR_Flag(SupplyRegion)):=
				BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,101
				
				ccalc_cO_ALT_rCO2QNRle((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and rCO2QNR_Flag(SupplyRegion)):=
				BSLD_Gen(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,102
				!J
				ccalc_cJ_rCO2QNRle((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup)and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and rCO2QNR_Flag(SupplyRegion)):=
				BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,103
				
				ccalc_cJ_ALT_rCO2QNRle((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0
				and rCO2QNR_Flag(SupplyRegion)):=
				BSLD_GenMin(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,104
				!U
				ccalc_cU_rCO2QNRle((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup)and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and rCO2QNR_Flag(SupplyRegion)):=
				BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,105
				
				ccalc_cU_ALT_rCO2QNRle((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				UG_FL_RG_to_PlantGroup(FirstPlantGroup) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0
				and rCO2QNR_Flag(SupplyRegion)):=
				BSLD_GenMax(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) *
				0.001 * CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,106
				!O
				ccalc_cO_rCO2RNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				rCO2RNR_Flag(SupplyRegion)):=
				BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * (CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active)-CO2_STDRN(SupplyRegion, cyr)) *
				CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,107; OPBSLD,119
				
				ccalc_cO_ALT_rCO2RNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and rCO2RNR_Flag(SupplyRegion) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and Nuclear_Flag(FirstPlantGroup)=0):=
				BSLD_Gen(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				(ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active)-CO2_STDRN(SupplyRegion, cyr)) *
				CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,108
				!J
				ccalc_cJ_rCO2RNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				rCO2RNR_Flag(SupplyRegion) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * (CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active)-CO2_STDRN(SupplyRegion, cyr)) *
				CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,111; OPBSLD,121
				
				ccalc_cJ_ALT_rCO2RNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and rCO2RNR_Flag(SupplyRegion) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and Nuclear_Flag(FirstPlantGroup)=0 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMin(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				(ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active)-CO2_STDRN(SupplyRegion, cyr)) *
				CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,112
				!U
				ccalc_cU_rCO2RNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and
				rCO2RNR_Flag(SupplyRegion) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * (CO2LB(SupplyRegion, Season, FirstPlantGroup, mode_active)-CO2_STDRN(SupplyRegion, cyr)) *
				CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,113; OPBSLD,122
				
				ccalc_cU_ALT_rCO2RNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and rCO2RNR_Flag(SupplyRegion) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and Nuclear_Flag(FirstPlantGroup)=0 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMax(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				(ALT_CO2LB(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active)-CO2_STDRN(SupplyRegion, cyr)) *
				CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,114
				!O
				ccalc_cO_rGENQNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active)):=
				BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,109; OPBSLD,120
				
				ccalc_cO_ALT_rGENQNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and Nuclear_Flag(FirstPlantGroup)=0):=
				BSLD_Gen(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) * CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,110
				!J
				ccalc_cJ_rGENQNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,115; OPBSLD,123
				
				ccalc_cJ_ALT_rGENQNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and Nuclear_Flag(FirstPlantGroup)=0):=
				BSLD_GenMin(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) * CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,116
				!U
				ccalc_cU_rGENQNRn((SupplyRegion,FirstPlantGroup,Season,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * CO2_PLTSW_alt(SupplyRegion,Season,FirstPlantGroup, mode_active);    !OPBSLD,117; OPBSLD,124
				
				ccalc_cU_ALT_rGENQNRn((SupplyRegion,FirstPlantGroup,SeasonCCS,mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and Nuclear_Flag(FirstPlantGroup)=0):=
				BSLD_GenMax(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) * CO2_PLTSW_alt(SupplyRegion,Season_Element(SeasonCCS),FirstPlantGroup, mode_active);    !OPBSLD,118
				
				!    NOX constraint for dispatchables
				BSLD_NOXEM((INOXP, DispatchableEFDGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup, mode_active)):=
				BSLD_Gen(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup, mode_active) *
				UG_HTRT(Season, PlantGroupOrd2PlantGroup(DispatchableEFDGroup))*HTRT_ADJ(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup, mode_active) *
				UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) * 0.0005 * 0.001;
				
				BSLD_NOXEM_Min((INOXP, DispatchableEFDGroup, Season, mode_active)|OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup, mode_active) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))>0):= BSLD_GenMin(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup, mode_active) *
				UG_HTRT(Season, PlantGroupOrd2PlantGroup(DispatchableEFDGroup))*HTRT_ADJ_MIN(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup, mode_active) *
				UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) * 0.0005 * 0.001;
				
				BSLD_NOXEM_Max((INOXP, DispatchableEFDGroup, Season, mode_active)|OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup, mode_active) and
				SR_CREDIT(UG_ECPt_to_PlantGroup(DispatchableEFDGroup))>0):= BSLD_GenMax(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup, mode_active) *
				UG_HTRT(Season, PlantGroupOrd2PlantGroup(DispatchableEFDGroup))*HTRT_ADJ_MAX(UG_EMM_RG_to_SupplyRegion(DispatchableEFDGroup), Season, DispatchableEFDGroup, mode_active) *
				UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(DispatchableEFDGroup)) * 0.0005 * 0.001;
				
				TST_NOX((PlantType_ECPp2_Element(UG_ECPt_to_PlantGroup(DispatchableEFDGroup)), INOXP) |EMRFNA(INOXP, cyr)>0 and
				exists((Season, mode_active)|BSLD_NOXEM(INOXP, DispatchableEFDGroup, Season, mode_active)>0.001)):=1;
				
				!O
				ccalc_cO_rELNOXle((INOXP, UG_ECPt_to_PlantGroup(DispatchableEFDGroup), DispatchableEFDGroup, Season, mode_active) |EMRFNA(INOXP, cyr)>0):=
				BSLD_NOXEM(INOXP, DispatchableEFDGroup, Season, mode_active) $ (BSLD_NOXEM(INOXP, DispatchableEFDGroup, Season, mode_active)>0.001);   !OPBSLD,125
				
				ccalc_cO_rELNOX0n((INOXP, DispatchableEFDGroup, Season, mode_active) |EMRFNA(INOXP, cyr)=0):=
				BSLD_NOXEM(INOXP, DispatchableEFDGroup, Season, mode_active) $ (BSLD_NOXEM(INOXP, DispatchableEFDGroup, Season, mode_active)>0.001);   !OPBSLD,125
				
				ccalc_cO_ALT_rELNOXle((INOXP, UG_ECPt_to_PlantGroup(DispatchableEFDGroup), DispatchableEFDGroup, SeasonCCS, mode_active) |EMRFNA(INOXP, cyr)>0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))<>1):=
				BSLD_NOXEM(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active) $ (BSLD_NOXEM(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active)>0.001);  !OPBSLD,126
				
				ccalc_cO_ALT_rELNOX0n((INOXP, DispatchableEFDGroup, SeasonCCS, mode_active) |EMRFNA(INOXP, cyr)=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))<>1):=
				BSLD_NOXEM(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active) $ (BSLD_NOXEM(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active)>0.001);  !OPBSLD,126
				!J
				ccalc_cJ_rELNOXle((INOXP, UG_ECPt_to_PlantGroup(DispatchableEFDGroup), DispatchableEFDGroup, Season, mode_active) |EMRFNA(INOXP, cyr)>0):=
				BSLD_NOXEM_Min(INOXP, DispatchableEFDGroup, Season, mode_active) $ (BSLD_NOXEM_Min(INOXP, DispatchableEFDGroup, Season, mode_active)>0.001);   !OPBSLD,127
				
				ccalc_cJ_rELNOX0n((INOXP, DispatchableEFDGroup, Season, mode_active) |EMRFNA(INOXP, cyr)=0):=
				BSLD_NOXEM_Min(INOXP, DispatchableEFDGroup, Season, mode_active) $ (BSLD_NOXEM_Min(INOXP, DispatchableEFDGroup, Season, mode_active)>0.001);   !OPBSLD,127
				
				ccalc_cJ_ALT_rELNOXle((INOXP, UG_ECPt_to_PlantGroup(DispatchableEFDGroup), DispatchableEFDGroup, SeasonCCS, mode_active) |EMRFNA(INOXP, cyr)>0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))<>1):=
				BSLD_NOXEM_Min(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active) $
				(BSLD_NOXEM_Min(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active)>0.001);  !OPBSLD,128
				
				ccalc_cJ_ALT_rELNOX0n((INOXP,  DispatchableEFDGroup, SeasonCCS, mode_active) |EMRFNA(INOXP, cyr)=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))<>1):=
				BSLD_NOXEM_Min(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active) $
				(BSLD_NOXEM_Min(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active)>0.001);  !OPBSLD,128
				!U
				ccalc_cU_rELNOXle((INOXP, UG_ECPt_to_PlantGroup(DispatchableEFDGroup), DispatchableEFDGroup, Season, mode_active) |EMRFNA(INOXP, cyr)>0):=
				BSLD_NOXEM_Max(INOXP, DispatchableEFDGroup, Season, mode_active) $ (BSLD_NOXEM_Max(INOXP, DispatchableEFDGroup, Season, mode_active)>0.001);   !OPBSLD,129
				
				ccalc_cU_rELNOX0n((INOXP, DispatchableEFDGroup, Season, mode_active) |EMRFNA(INOXP, cyr)=0):=
				BSLD_NOXEM_Max(INOXP, DispatchableEFDGroup, Season, mode_active) $ (BSLD_NOXEM_Max(INOXP, DispatchableEFDGroup, Season, mode_active)>0.001);   !OPBSLD,129
				
				ccalc_cU_ALT_rELNOXle((INOXP, UG_ECPt_to_PlantGroup(DispatchableEFDGroup), DispatchableEFDGroup, SeasonCCS, mode_active) |EMRFNA(INOXP, cyr)>0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))<>1):=
				BSLD_NOXEM_Max(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active) $
				(BSLD_NOXEM_Max(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active)>0.001);  !OPBSLD,130
				
				ccalc_cU_ALT_rELNOX0n((INOXP, DispatchableEFDGroup, SeasonCCS, mode_active) |EMRFNA(INOXP, cyr)=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(DispatchableEFDGroup))<>1):=
				BSLD_NOXEM_Max(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active) $
				(BSLD_NOXEM_Max(INOXP, DispatchableEFDGroup, Season_Element(SeasonCCS), mode_active)>0.001);  !OPBSLD,130
				
				!  MUSTRUN CONSTRAINT
				ccalc_cO_rMRXge((FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup))):= 0.1 * BSLD_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active);   !OPBSLD,131
				
				ccalc_cO_ALT_rMRXge((FirstPlantGroup,SeasonCCS,mode_active)| OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season_Element(SeasonCCS),FirstPlantGroup,mode_active) and
				UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup)) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1):=
				0.1 * BSLD_Gen(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season_Element(SeasonCCS),FirstPlantGroup, mode_active) *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) ;   !OPBSLD,132
				!J
				ccalc_cJ_rMRXge((FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup))  and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				0.1 * BSLD_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active);   !OPBSLD,133
				
				ccalc_cJ_ALT_rMRXge((FirstPlantGroup,SeasonCCS,mode_active)| OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season_Element(SeasonCCS),FirstPlantGroup,mode_active) and
				UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup)) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				0.1 * BSLD_GenMin(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season_Element(SeasonCCS),FirstPlantGroup, mode_active) *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) ;   !OPBSLD,134
				!U
				ccalc_cU_rMRXge((FirstPlantGroup, Season, mode_active) | OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active) and
				UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup))  and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				0.1 * BSLD_GenMax(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup), Season, FirstPlantGroup, mode_active);   !OPBSLD,135
				
				ccalc_cU_ALT_rMRXge((FirstPlantGroup,SeasonCCS,mode_active)| OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season_Element(SeasonCCS),FirstPlantGroup,mode_active) and
				UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup)) and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				0.1 * BSLD_GenMax(UG_EMM_RG_to_SupplyRegion(FirstPlantGroup),Season_Element(SeasonCCS),FirstPlantGroup, mode_active) *
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)) ;   !OPBSLD,136
				
				! GRID RESILIENCE ROWS
				Gen_Grid((SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)>=0):=
				if USW_GRD('1')=ord(grd_casn_ind) AND GRD_TGTS(cyr, SupplyRegion)>0.0 THEN
				  BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 *
				  (GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind) - GRD_TGTS(cyr, SupplyRegion))
				else
				  BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)
				endif;
				GenMin_Grid((SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)>=0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				if USW_GRD('1')=ord(grd_casn_ind) AND GRD_TGTS(cyr, SupplyRegion)>0.0 THEN
				  BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 *
				  (GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind) - GRD_TGTS(cyr, SupplyRegion))
				else
				  BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)
				endif;
				GenMax_Grid((SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)>=0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):=
				if USW_GRD('1')=ord(grd_casn_ind) AND GRD_TGTS(cyr, SupplyRegion)>0.0 THEN
				  BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 *
				  (GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind) - GRD_TGTS(cyr, SupplyRegion))
				else
				  BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001 * GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)
				endif;
				ccalc_cO_rGRDRTge(SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active):= Gen_Grid(SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active); !OPBSLD,146
				
				ccalc_cO_ALT_rGRDRTge((SupplyRegion, grd_casn_ind, FirstPlantGroup, SeasonCCS, mode_active)| OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1) :=
				Gen_Grid(SupplyRegion, grd_casn_ind, FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)); !OPBSLD,146_1
				
				ccalc_cO_rGRDGNge((SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)>=0):=
				BSLD_Gen(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001;    !OPBSLD,147
				
				ccalc_cO_ALT_rGRDGNge((SupplyRegion, grd_casn_ind, FirstPlantGroup, SeasonCCS, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)>=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1) :=
				BSLD_Gen(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)); !OPBSLD,147_1
				!J
				ccalc_cJ_rGRDRTge(SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active):= GenMin_Grid(SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active); !OPBSLD,148
				
				ccalc_cJ_ALT_rGRDRTge((SupplyRegion, grd_casn_ind, FirstPlantGroup, SeasonCCS, mode_active)| OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1) :=
				GenMin_Grid(SupplyRegion, grd_casn_ind, FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)); !OPBSLD,148_1
				
				ccalc_cJ_rGRDGNge((SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)>=0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):= BSLD_GenMin(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001;    !OPBSLD,150
				
				ccalc_cJ_ALT_rGRDGNge((SupplyRegion, grd_casn_ind, FirstPlantGroup, SeasonCCS, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)>=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0) :=
				BSLD_GenMin(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)); !OPBSLD,150_1
				!U
				ccalc_cU_rGRDRTge(SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active):= GenMax_Grid(SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active); !OPBSLD,149
				
				ccalc_cU_ALT_rGRDRTge((SupplyRegion, grd_casn_ind, FirstPlantGroup, SeasonCCS, mode_active)| OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1) :=
				GenMax_Grid(SupplyRegion, grd_casn_ind, FirstPlantGroup, Season_Element(SeasonCCS), mode_active) * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)); !OPBSLD,149_1
				
				ccalc_cU_rGRDGNge((SupplyRegion, grd_casn_ind, FirstPlantGroup, Season, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season, FirstPlantGroup, mode_active) and GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)>=0 and
				SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0):= BSLD_GenMax(SupplyRegion, Season, FirstPlantGroup, mode_active) * 0.001;    !OPBSLD,151
				
				ccalc_cU_ALT_rGRDGNge((SupplyRegion, grd_casn_ind, FirstPlantGroup, SeasonCCS, mode_active)| UG_EMM_RG_Mapping(SupplyRegion, FirstPlantGroup) and
				OPBSLD_Condition(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) and GRD_RATSA(UG_ECPt_to_PlantGroup(FirstPlantGroup), SupplyRegion, grd_casn_ind)>=0 and
				OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup))<>1 and SR_CREDIT(UG_ECPt_to_PlantGroup(FirstPlantGroup))>0) :=
				BSLD_GenMax(SupplyRegion, Season_Element(SeasonCCS), FirstPlantGroup, mode_active) * 0.001 * OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(FirstPlantGroup)); !OPBSLD,151_1
			}
			Comment: {
				"not passed in AEO2021 ref case: OPBSLD,11-16; 59-70; 137-145"
			}
			DeclarationSection Local_Declaration {
				Parameter Gen_Grid {
					IndexDomain: (SupplyRegion,GridResilienceSource,PlantGroup,Season,OperatingMode);
				}
				Parameter GenMin_Grid {
					IndexDomain: (SupplyRegion,GridResilienceSource,PlantGroup,Season,OperatingMode);
				}
				Parameter GenMax_Grid {
					IndexDomain: (SupplyRegion,GridResilienceSource,PlantGroup,Season,OperatingMode);
				}
				Parameter Load_level {
					IndexDomain: (SupplyRegion,Season,PlantGroup,OperatingMode);
				}
				Parameter BSLD_NOXEM {
					IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
				}
				Parameter BSLD_NOXEM_Min {
					IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
				}
				Parameter BSLD_NOXEM_Max {
					IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
				}
			}
		}
		Procedure OPDG_sub {
			Body: {
				TST_NOX((PlantType_ECPp2_Element(UG_ECPt_to_PlantGroup(DGPlantGroup)), INOXP) |EMRFNA(INOXP, cyr)>0 and
				exists(Season|OPDG_NOXEM(INOXP,  Season, DGPlantGroup)>0.001)):=1;
			}
		}
		Procedure RTRNBS_sub {
			Body: {
				MAXCF((Season, PlantGroup) | EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 ):=  UP_SCF(Season, PlantGroup);
				!adjust CF for STEO benchmarking (factor will be 1.0 if no benchmarking)
				MAXCF((Season, PlantGroup) | UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIGT('1')) *= URGTCFA(cyr);
				DRAT_ORG(Season, slice_active, PlantGroup):= MAXCF(Season, PlantGroup);
				
				MAX_SP_LOAD(SupplyRegion, Season, PlantGroup):= Max(slice_active,
				  UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion)) $
				  (UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3);
				MIN_SP_LOAD(SupplyRegion, Season, PlantGroup):= Min(slice_active,
				  UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion)) $
				  (UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3);
				
				
				!Combined Capacity factor for ECP types with SR_CREDIT can not exceed UG_SCF
				!For ECP Types which have Spinning Reserve Credit Create Min, Max and Load Following Modes for each of the original modes
				!Load Following Mode Follows Load Height drat = (1 - for) * (ld / max_ld)
				DRAT((SupplyRegion, Season, slice_active, PlantGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and
				  UG_EMM_RG_Mapping(SupplyRegion, PlantGroup)) :=
				  (1.0 - UG_FOR(PlantGroupOrd2PlantGroup(PlantGroup))) *
				  (UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				  MAX_SP_LOAD(SupplyRegion, Season, PlantGroup));
				
				Factor((SupplyRegion, Season, PlantGroup)| UG_EMM_RG_Mapping(SupplyRegion, PlantGroup)):= MAXCF(Season, PlantGroup)* EETIME(Season, SupplyRegion)/ $
				  sum(slice_active, DRAT(SupplyRegion, Season, slice_active, PlantGroup) * ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				Factor((SupplyRegion, Season, PlantGroup)| Factor(SupplyRegion, Season, PlantGroup)>1):=1;
				
				!Min Electricity - Max Spinning Reserve Credit drat_min = (1 - sr_min_lf) * sr_min_cf * (ld / min_ld) + sr_min_lf * sr_min_cf
				DRAT_MIN((SupplyRegion, Season, slice_active, PlantGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0) :=
				  (1.0 - SR_MIN_LF(UG_ECPt_to_PlantGroup(PlantGroup))) * SR_MIN_CF(UG_ECPt_to_PlantGroup(PlantGroup)) *
				  (UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				  MIN_SP_LOAD(SupplyRegion, Season, PlantGroup)) + SR_MIN_LF(UG_ECPt_to_PlantGroup(PlantGroup)) * SR_MIN_CF(UG_ECPt_to_PlantGroup(PlantGroup)) $
				  (UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3);
				
				Factor_MIN(SupplyRegion, Season, PlantGroup):= MAXCF(Season, PlantGroup)* EETIME(Season, SupplyRegion)/$
				  sum(slice_active, DRAT_MIN(SupplyRegion, Season, slice_active, PlantGroup) * ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				Factor_MIN((SupplyRegion, Season, PlantGroup)| Factor_MIN(SupplyRegion, Season, PlantGroup)>1):=1;
				
				!Max Electricity - Min Spinning Reserve Credit drat_max = (1 - sr_max_lf) * (1 - for) * (ld / max_ld) + sr_max_lf * (1 - for)
				DRAT_MAX((SupplyRegion, Season, slice_active, PlantGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
				 UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3) :=
				 (1.0 - SR_MAX_LF(UG_ECPt_to_PlantGroup(PlantGroup))) * (1.0 - UG_FOR(PlantGroupOrd2PlantGroup(PlantGroup))) *
				 (UTHGHT(Segment2_element(slice_active, Season, SupplyRegion), Group2_element(slice_active, Season, SupplyRegion), SupplyRegion) / $
				 MAX_SP_LOAD(SupplyRegion, Season, PlantGroup)) + SR_MAX_LF(UG_ECPt_to_PlantGroup(PlantGroup)) * (1.0 - UG_FOR(PlantGroupOrd2PlantGroup(PlantGroup))) ;
				 DRAT_MAX((SupplyRegion, Season, slice_active, PlantGroup)| SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and UG_MRUN(PlantGroupOrd2PlantGroup(PlantGroup)) AND
				 DRAT_MAX(SupplyRegion, Season, slice_active, PlantGroup) < DRAT_ORG(Season, slice_active, PlantGroup) and
				 UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3) := DRAT_ORG(Season, slice_active, PlantGroup);
				
				Factor_MAX(SupplyRegion, Season, PlantGroup):= MAXCF(Season, PlantGroup)* EETIME(Season, SupplyRegion)/$
				sum(slice_active, DRAT_MAX(SupplyRegion, Season, slice_active, PlantGroup) * ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				Factor_MAX((SupplyRegion, Season, PlantGroup)| Factor_MAX(SupplyRegion, Season, PlantGroup)>1):=1;
				
				DRAT(SupplyRegion, Season, slice_active, PlantGroup)*=Factor(SupplyRegion, Season, PlantGroup);
				DRAT_MIN(SupplyRegion, Season, slice_active, PlantGroup)*=Factor_MIN(SupplyRegion, Season, PlantGroup);
				DRAT_MAX(SupplyRegion, Season, slice_active, PlantGroup)*=Factor_MAX(SupplyRegion, Season, PlantGroup);
				DRAT_MAX((UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, slice_active, PlantGroup)| UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIMS('1') and
				SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0  and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3):=
				DRAT_ORG(Season, slice_active, PlantGroup);
				!DRAT((SupplyRegion, Season, slice_active, PlantGroup) | SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))=0 and UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and
				!EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3):= max(0.1, DRAT_ORG(Season, slice_active, PlantGroup));
				DRAT(SupplyRegion, Season, slice_active, PlantGroup)| UG_EMM_RG_Mapping(SupplyRegion, PlantGroup):=MAX(0.01,DRAT(SupplyRegion, Season, slice_active, PlantGroup));
				DRAT_MIN(SupplyRegion, Season, slice_active, PlantGroup)| UG_EMM_RG_Mapping(SupplyRegion, PlantGroup):=MAX(0.01,DRAT_MIN(SupplyRegion, Season, slice_active, PlantGroup));
				DRAT_MAX(SupplyRegion, Season, slice_active, PlantGroup)| UG_EMM_RG_Mapping(SupplyRegion, PlantGroup):=MAX(0.01,DRAT_MAX(SupplyRegion, Season, slice_active, PlantGroup));
				
				
				RNBS_Gen(SupplyRegion, Season, PlantGroup):=sum(slice_active | UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3, DRAT(SupplyRegion, Season, slice_active, PlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				RNBS_GenMin(SupplyRegion, Season, PlantGroup):=sum(slice_active | UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0, DRAT_MIN(SupplyRegion, Season, slice_active, PlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				RNBS_GenMax(SupplyRegion, Season, PlantGroup):=sum(slice_active | UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and
				EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0, DRAT_MAX(SupplyRegion, Season, slice_active, PlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion));
				
				RNBS_Genslc((Season, slice_active, PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3):= sum(SupplyRegion|UG_EMM_RG_Mapping(SupplyRegion, PlantGroup),
				DRAT(SupplyRegion, Season, slice_active, PlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion) * cOX.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season) * SHR_C(Season,PlantGroup));
				RNBS_GenMinslc((Season, slice_active, PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3):= sum(SupplyRegion|UG_EMM_RG_Mapping(SupplyRegion, PlantGroup),
				DRAT_MIN(SupplyRegion, Season, slice_active, PlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion) * cJX.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season) * SHR_C(Season,PlantGroup));
				RNBS_GenMaxslc((Season, slice_active, PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3):= sum(SupplyRegion|UG_EMM_RG_Mapping(SupplyRegion, PlantGroup),
				DRAT_MAX(SupplyRegion, Season, slice_active, PlantGroup) *
				ELWDTH(Slice2SliceSorted_element(slice_active, Season, SupplyRegion), Season, SupplyRegion) * cUX.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season) * SHR_C(Season,PlantGroup));
				
				SRGEN_RNBS((Season,slice_active,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 AND SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0):=
				(1-sum(SupplyRegion,DRAT(SupplyRegion, Season, slice_active, PlantGroup)))* cOX.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season) * SHR_C(Season,PlantGroup)*SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))
				+ (1-sum(SupplyRegion,DRAT_MIN(SupplyRegion, Season, slice_active, PlantGroup)))* cJX.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season) * SHR_C(Season,PlantGroup)*SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))
				+ (1-sum(SupplyRegion,DRAT_MAX(SupplyRegion, Season, slice_active, PlantGroup)))* cUX.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season) * SHR_C(Season,PlantGroup)*SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup));
			}
		}
		Procedure output_gen_variables_sub {
			Body: {
				ELGENE_calc((SliceSorted,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1) :=
				    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_BS(Season,Slice,PlantGroup));
				ELGENE_calc((SliceSorted,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))= 3) :=
					Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,RNBS_Genslc(Season,Slice,PlantGroup)) +
					Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,RNBS_GenMinslc(Season,Slice,PlantGroup)) +
					Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,RNBS_GenMaxslc(Season,Slice,PlantGroup));
				ELGENE_calc((SliceSorted,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))= 4 AND UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIP2('1') ) :=
						Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup)) -
						UFACP2('1') * Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup));
				ELGENE_calc((SliceSorted,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))= 4 AND UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') ) :=
						Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup)) -
						UFACPS('1') * Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup));
				ELGENE_calc((SliceSorted,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))= 4 AND UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<> WIP2('1') AND UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<>UIHYR('1') ) :=
					    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup));
				ELGENE_calc((SliceSorted,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))= 5) :=
				    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_INT(Season,Slice,PlantGroup));
				ELGENE_calc((SliceSorted,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))= 6) :=
				    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_DG(Season,Slice,PlantGroup));
				ELGENE_calc((SliceSorted,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))= 7) :=
				    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_STO(Season,Slice,PlantGroup));
				
				ECDSPE_calc(PlantGroup,Season):=Sum(SliceSorted,ELGENE_calc(SliceSorted,Season,PlantGroup));
				ULTGEN_calc(PlantGroup):=Sum((SliceSorted,Season),ELGENE_calc(SliceSorted,Season,PlantGroup));
				ECDSPE_ALT_calc(PlantGroup,Season):=Sum(SliceSorted,Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENALT_BS(Season,Slice,PlantGroup)));
			}
		}
		Procedure output_consump_sub {
			Body: {
				ECDSPF_calc((PlantGroup,Season)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1) :=
				        sum(OperatingMode,(SGEN_BS(Season,Plantgroup,OperatingMode) + SGEN_ALT_BS(Season,PlantGroup,OperatingMode)) * ULHTRT_EFD(PlantGroup,Season) * 0.001 * sum(SupplyRegion|UG_EMM_RG_Mapping(SupplyRegion,PlantGroup),HTRT_ADJ(SupplyRegion,Season,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)))
				      + sum(OperatingMode,(SGENMIN_BS(Season,Plantgroup,OperatingMode) + SGENMIN_ALT_BS(Season,PlantGroup,OperatingMode)) * ULHTRT_EFD(PlantGroup,Season) * 0.001 * sum(SupplyRegion|UG_EMM_RG_Mapping(SupplyRegion,PlantGroup),HTRT_ADJ_MIN(SupplyRegion,Season,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)))
				      + sum(OperatingMode,(SGENMAX_BS(Season,Plantgroup,OperatingMode) + SGENMAX_ALT_BS(Season,PlantGroup,OperatingMode)) * ULHTRT_EFD(PlantGroup,Season) * 0.001 * sum(SupplyRegion|UG_EMM_RG_Mapping(SupplyRegion,PlantGroup),HTRT_ADJ_MAX(SupplyRegion,Season,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)))
				;
				ECDSPF_ALT_calc((PlantGroup,Season)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1) :=
				        sum(OperatingMode,SGEN_ALT_BS(Season,PlantGroup,OperatingMode) * ULHTRT_EFD(PlantGroup,Season) * 0.001 * sum(SupplyRegion|UG_EMM_RG_Mapping(SupplyRegion,PlantGroup),HTRT_ADJ(SupplyRegion,Season,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)))
				      + sum(OperatingMode,SGENMIN_ALT_BS(Season,PlantGroup,OperatingMode) * ULHTRT_EFD(PlantGroup,Season) * 0.001 * sum(SupplyRegion|UG_EMM_RG_Mapping(SupplyRegion,PlantGroup),HTRT_ADJ_MIN(SupplyRegion,Season,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)))
				      + sum(OperatingMode,SGENMAX_ALT_BS(Season,PlantGroup,OperatingMode) * ULHTRT_EFD(PlantGroup,Season) * 0.001 * sum(SupplyRegion|UG_EMM_RG_Mapping(SupplyRegion,PlantGroup),HTRT_ADJ_MAX(SupplyRegion,Season,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)))
				;
				ECDSPF_calc((PlantGroup,Season)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))<>1) :=
					ECDSPE_calc(PlantGroup,Season) * ULHTRT_EFD(PlantGroup,Season) * 0.001;
			}
		}
		Procedure temp {
			Body: {
				!PBMPWCL_calc(BiomassType, CoalDemandRegion, cyr):=
				!  IF (WDSUP_AVL(BiomassType)=1 AND MP_BM_PW(BiomassType)> 0) THEN
				!    abs(rS_WD_typele.ShadowPrice(BiomassType, CoalDemandRegion))
				!  endif;
				!PBMPWCL_calc('00', CoalDemandRegion, cyr):=  abs(rS_WD_allle.ShadowPrice(CoalDemandRegion));
				!PBMPWCL_calc(BiomassType, '00', cyr):=
				!  IF (WDSUP_AVL(BiomassType)=1 AND MP_BM_PW(BiomassType)> 0) THEN
				!    sum(CoalDemandRegion, abs(rS_WD_typele.ShadowPrice(BiomassType, CoalDemandRegion))* cBP_type.Level(CoalDemandRegion, BiomassType, 'XX'))/$
				!    sum(CoalDemandRegion, cBP_type.Level(CoalDemandRegion, BiomassType, 'XX'))
				!  endif;
				!PBMPWCL_calc('00', '00', cyr):=
				!  sum((CoalDemandRegion,BiomassType) | WDSUP_AVL(BiomassType)=1 AND MP_BM_PW(BiomassType)> 0,
				!  abs(rS_WD_allle.ShadowPrice(CoalDemandRegion))*cBP_type.Level(CoalDemandRegion, BiomassType, 'XX'))/$
				!  sum((CoalDemandRegion,BiomassType) | WDSUP_AVL(BiomassType)=1 AND MP_BM_PW(BiomassType)> 0, cBP_type.Level(CoalDemandRegion, BiomassType, 'XX'));
				!
			}
		}
		Function ELNGSCRV_Function {
			Arguments: (Value);
			IndexDomain: ::GasProductionStep;
			Body: {
				!  SET VARIABLES WHICH DON'T CHANGE BASED ON VALUE COMING IN
				
				          XQBASE := NGSCRV_Q0(cyr);
				          XPBASE := NGSCRV_P0(cyr);
				
				          AQBASE := XQBASE * (1. - NGSCRV_PER('1'));
				          BQBASE := XQBASE * (1. + NGSCRV_PER('1'));
				          APBASE := XPBASE * (1.- (NGSCRV_PER('1') /NGSCRV_ELAS('3')));
				          BPBASE := XPBASE * (1.+ (NGSCRV_PER('1') /NGSCRV_ELAS('3')));
				
				          CQBASE := AQBASE * (1. - NGSCRV_PER('2'));
				          DQBASE := BQBASE * (1. + NGSCRV_PER('2'));
				          CPBASE := APBASE * (1.- (NGSCRV_PER('2') /NGSCRV_ELAS('2')));
				          DPBASE := BPBASE * (1.+ (NGSCRV_PER('2') /NGSCRV_ELAS('4')));
				
				          !  TRANSLATE CHANGE IN CONSUMPTION TO PLACE ON SUPPLY CURVE
				
				          For (GasProductionStep) do
				          QVAR := NGSCRV_Q(cyr) + (Value(GasProductionStep) /CFNGU(cyr));
				          IF (QVAR <= CQBASE) THEN
				            QBASE := CQBASE;
				            PBASE := CPBASE;
				            ELAS := NGSCRV_ELAS('1');
				          ELSEIF (QVAR <= AQBASE) THEN
				            QBASE := AQBASE;
				            PBASE := APBASE;
				            ELAS := NGSCRV_ELAS('2');
				          ELSEIF (QVAR >= DQBASE) THEN
				            QBASE := DQBASE;
				            PBASE := DPBASE;
				            ELAS := NGSCRV_ELAS('5');
				          ELSEIF (QVAR >= BQBASE) THEN
				            QBASE := BQBASE;
				            PBASE := BPBASE;
				            ELAS := NGSCRV_ELAS('4');
				          ELSE
				            QBASE := XQBASE;
				            PBASE := XPBASE;
				            ELAS  := NGSCRV_ELAS('3');
				          ENDIF;
				          ELNGSCRV_Function(GasProductionStep) := PBASE * (((1/ELAS)*(QVAR-QBASE)/QBASE) + 1);
				          ELNGSCRV_Function((GasProductionStep)|ELNGSCRV_Function(GasProductionStep) <= 0.0) := XPBASE;
				
				          endfor;
			}
			Comment: "FUNCTION TO DETERMINE WELLHEAD PRICE ASSOCIATED WITH SPECIFIED CHANGE IN UTILITY GAS USE TO CONSTRUCT SUPPLY CURVE";
			Parameter QBASE;
			Parameter XQBASE;
			Parameter AQBASE;
			Parameter BQBASE;
			Parameter CQBASE;
			Parameter DQBASE;
			Parameter PBASE;
			Parameter XPBASE;
			Parameter APBASE;
			Parameter BPBASE;
			Parameter CPBASE;
			Parameter DPBASE;
			Parameter QVAR;
			Parameter ELAS;
			Parameter Value {
				IndexDomain: ::GasProductionStep;
				Property: Input;
			}
		}
	}
	Section Output_calc_parameters {
		DeclarationSection Intermediate_variables {
			Parameter SHR_C {
				IndexDomain: (Season,PlantGroup);
				Definition: {
					IF (UG_CAP(Season,PlantGroupOrd2PlantGroup(PlantGroup)) > 0.0) THEN
					       UP_CAP(Season,PlantGroup) / UG_CAP(Season,PlantGroupOrd2PlantGroup(PlantGroup))
					ELSE
					        UP_CAP(Season0,PlantGroup) / $UG_CAP(Season0,PlantGroupOrd2PlantGroup(PlantGroup))
					ENDIF
				}
			}
		}
		DeclarationSection RTBSLD_Completed {
			Parameter SRGEN_BS {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: {
					sum((SupplyRegion,OperatingMode),(ccalc_cO_rSRge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode))*cO.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup)
					+
					sum((SupplyRegion,OperatingMode),(ccalc_cJ_rSRge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode))*cJ.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup)
					+
					sum((SupplyRegion,OperatingMode),(ccalc_cU_rSRge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode))*cU.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup)
					+
					sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,OperatingMode),(ccalc_cO_ALT_rSRge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode))*cO_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)
					+
					sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,OperatingMode),(ccalc_cJ_ALT_rSRge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode))*cJ_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)
					+
					sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,OperatingMode),(ccalc_cU_ALT_rSRge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode))*cU_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)
				}
			}
			Parameter SGEN_BS {
				IndexDomain: (Season,PlantGroup,OperatingMode)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: sum((SupplyRegion,Slice),(ccalc_cO_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)/0.1)*cO.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup);
			}
			Parameter SGEN_ALT_BS {
				IndexDomain: (Season,PlantGroup,OperatingMode)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,Slice), ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)/0.1*cO_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)/$OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(PlantGroup));
			}
			Parameter SGENMIN_BS {
				IndexDomain: (Season,PlantGroup,OperatingMode)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: sum((SupplyRegion,Slice),(ccalc_cJ_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)/0.1)*cJ.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup);
			}
			Parameter SGENMIN_ALT_BS {
				IndexDomain: (Season,PlantGroup,OperatingMode)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,Slice), ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)/0.1*cJ_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)/$OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(PlantGroup));
			}
			Parameter SGENMAX_BS {
				IndexDomain: (Season,PlantGroup,OperatingMode)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: sum((SupplyRegion,Slice),(ccalc_cU_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)/0.1)*cU.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup);
			}
			Parameter SGENMAX_ALT_BS {
				IndexDomain: (Season,PlantGroup,OperatingMode)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,Slice), ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)/0.1*cU_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)/$OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(PlantGroup));
			}
			Parameter GENOUT_BS {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: {
					sum((SupplyRegion,OperatingMode),(ccalc_cJ_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)/0.1)*cJ.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup)
					+
					sum((SupplyRegion,OperatingMode),(ccalc_cU_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)/0.1)*cU.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup)
					+
					sum((SupplyRegion,OperatingMode),(ccalc_cO_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)/0.1)*cO.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup)
					+
					sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,OperatingMode), ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)/0.1*cJ_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)
					+
					sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,OperatingMode), ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)/0.1*cU_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)
					+
					sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,OperatingMode), ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)/0.1*cO_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)
				}
			}
			Parameter GENALT_BS {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1;
				Definition: {
					sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,OperatingMode), ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)/0.1*cJ_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)
					+
					sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,OperatingMode), ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)/0.1*cU_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)
					+
					sum(SeasonCCS|Season_SeasonCCS_Mapping(Season,SeasonCCS),sum((SupplyRegion,OperatingMode), ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)/0.1*cO_ALT.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),SeasonCCS,OperatingMode)))*SHR_C(Season,PlantGroup)
				}
			}
		}
		DeclarationSection RTINT_Completed {
			Parameter SR_INT_REQ_calc {
				IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1);
				Text: "Intermittent requirement for spinning reserves from soluntion";
				Definition: {
					SUM(PlantGroup|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5 AND UG_EMM_RG_to_SupplyRegion(PlantGroup)=SupplyRegion_ALT1,
					  Sum((Slice,Season)|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1
					  AND GroupSliceSortedMapping(Group,SliceSorted,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,SROUT_INT(Season,Slice,PlantGroup)))
				}
			}
			Parameter GENOUT_INT {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5;
				Definition: {
					(UP_GCF(Segment2_element(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup)), Group2_element(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup)),PlantGroup))*cI.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice)
					*ELWDTH(Slice2SLiceSorted_element(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup)),Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))*SHR_C(Season,PlantGroup) *
					
					
					if UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WISO('1') then  URSOCFA(cyr)
					elseif  (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIPV('1') or UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIPT('1'))then URSOCFA(cyr)
					elseif  (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIWN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIWL('1'))then URWNCFA(cyr)
					else 1
					endif
				}
			}
			Parameter SROUT_INT {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5;
				Definition: {
					(UP_GCF(Segment2_element(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup)), Group2_element(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup)),PlantGroup))*cI.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice)
					* sum((PlantType_ECP,SupplyRegion)|UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= ORD(PlantType_ECP) AND UG_EMM_RG_to_SupplyRegion(PlantGroup) = SupplyRegion, SR_INT(PlantType_ECP,SupplyRegion))
					*SHR_C(Season,PlantGroup) *
					
					
					if UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WISO('1') then  URSOCFA(cyr)
					elseif  (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIPV('1') or UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIPT('1'))then URSOCFA(cyr)
					elseif  (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIWN('1') or UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIWL('1'))then URWNCFA(cyr)
					else 1
					endif
				}
			}
			Parameter SRGEN_INT {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5;
				Definition: {
					if (UG_ECPt(PlantGroupOrd2PlantGroup(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup))))=WIPT('1') and SR_CREDIT(UG_ECPt_to_PlantGroup(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)))) > 0.0) then
					  sum(SupplyRegion | UG_EMM_RG_to_SupplyRegion(PlantGroup)=SupplyRegion,(NET_PT_STORAGE_SR_EFD(Segment2_element(Slice, Season, SupplyRegion), Group2_element(Slice, Season, SupplyRegion), SupplyRegion, cyr)*
					  cI.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice)))*SHR_C(Season,PlantGroup)
					endif
				}
			}
		}
		DeclarationSection RTRNBS_Completed;
		DeclarationSection RTHYD_Completed {
			Parameter UTHTP2_calc {
				IndexDomain: (Segment,Group,SupplyRegion_ALT1);
				Definition: {
					SUM(PlantGroup,
					  Sum((Slice,Season)|Segment2_element(Slice,Season,SupplyRegion_ALT1)=Segment
					  AND Group2_element(Slice,Season,SupplyRegion_ALT1)=Group ,P2_HGT_HY(Season,Slice,PlantGroup)))
				}
			}
			Parameter GENOUT_HY {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4;
				Definition: {
					sum(SupplyRegion,(ccalc_cH_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)))/0.1)*cH.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice))*SHR_C(Season,PlantGroup)
					+
					sum(SupplyRegion,(ccalc_cF_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)))/0.1)*cF.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice))*SHR_C(Season,PlantGroup)
				}
			}
			Parameter P2_HGT_HY {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 AND UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIP2('1');
				Definition: {
					sum(SupplyRegion,(ccalc_cH_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)))/0.1)*cH.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice)/$ELWDTH(Slice2SliceSorted_element(Slice,Season,SupplyRegion),Season,SupplyRegion))
					*SHR_C(Season,PlantGroup)
					+
					sum(SupplyRegion,(ccalc_cF_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)))/0.1)*cF.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice)/$ELWDTH(Slice2SliceSorted_element(Slice,Season,SupplyRegion),Season,SupplyRegion))
					*SHR_C(Season,PlantGroup)
				}
			}
			Parameter SRGEN_HY {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4;
				Definition: {
					sum(SupplyRegion,(ccalc_cH_rSRge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup))))*cH.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice))*SHR_C(Season,PlantGroup)
					+
					sum(SupplyRegion,(ccalc_cF_rSRge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup))))*cF.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice))*SHR_C(Season,PlantGroup)
				}
			}
		}
		DeclarationSection RTSTR_Completed {
			Parameter GENOUT_STO {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=7;
				Definition: sum(SupplyRegion,(ccalc_cI_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)))/0.1)*cI.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice))*SHR_C(Season,PlantGroup);
			}
			Parameter SRGEN_STO {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=7;
				Definition: sum(SupplyRegion,(ccalc_cI_rSRge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup))))*cI.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,Slice))*SHR_C(Season,PlantGroup);
			}
		}
		DeclarationSection RTDG_Completed {
			Parameter GENOUT_DG {
				IndexDomain: (Season,Slice,PlantGroup)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6;
				Definition: sum((SupplyRegion,OperatingMode),(ccalc_cD_rLDge(SupplyRegion,Season,Slice,EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),OperatingMode)/0.1)*cD.Level(EFD_GRPS_F_Element(PlantGroupOrd2PlantGroup(PlantGroup)),Season,OperatingMode))*SHR_C(Season,PlantGroup);
			}
		}
		DeclarationSection LHS_Coded {
			Parameter SP_ACHBYECP_calc {
				IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1,PlantType_ECP);
				Text: "Summary spinning reserves achieved from solution by plant type";
				Definition: {
					SUM(PlantGroup|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 AND UG_ECPt_Mapping(PlantType_ECP,PlantGroup)=1 AND UG_EMM_RG_to_SupplyRegion(PlantGroup)=SupplyRegion_ALT1,
					  Sum((Slice,Season)|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1
					  AND GroupSliceSortedMapping(Group,SliceSorted,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,SRGEN_BS(Season,Slice,PlantGroup)))
					+
					SUM(PlantGroup|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 AND UG_ECPt_Mapping(PlantType_ECP,PlantGroup)=1 AND UG_EMM_RG_to_SupplyRegion(PlantGroup)=SupplyRegion_ALT1,
					  Sum((Slice,Season)|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1
					  AND GroupSliceSortedMapping(Group,SliceSorted,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,SRGEN_RNBS(Season,Slice,PlantGroup)))
					  +
					SUM(PlantGroup|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 AND UG_ECPt_Mapping(PlantType_ECP,PlantGroup)=1 AND UG_EMM_RG_to_SupplyRegion(PlantGroup)=SupplyRegion_ALT1,
					  Sum((Slice,Season)|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1
					  AND GroupSliceSortedMapping(Group,SliceSorted,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,SRGEN_HY(Season,Slice,PlantGroup)))
					   +
					SUM(PlantGroup|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=7 AND UG_ECPt_Mapping(PlantType_ECP,PlantGroup)=1 AND UG_EMM_RG_to_SupplyRegion(PlantGroup)=SupplyRegion_ALT1,
					  Sum((Slice,Season)|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1
					  AND GroupSliceSortedMapping(Group,SliceSorted,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,SRGEN_STO(Season,Slice,PlantGroup)))
					   +
					SUM(PlantGroup|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5 AND UG_ECPt_Mapping(PlantType_ECP,PlantGroup)=1 AND UG_EMM_RG_to_SupplyRegion(PlantGroup)=SupplyRegion_ALT1,
					  Sum((Slice,Season)|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1
					  AND GroupSliceSortedMapping(Group,SliceSorted,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,SRGEN_INT(Season,Slice,PlantGroup)))
				}
			}
			Parameter ECDSPE_ALT_calc {
				IndexDomain: (PlantGroup,Season);
				Text: "ENERGY IN EACH SEASON w/o capture";
				Comment: "calculated in output_gen_variables_sub";
			}
			Parameter ULTGEN_calc {
				IndexDomain: (PlantGroup);
				Text: "Generation by Plant Group";
				Comment: "calculated in output_gen_variables_sub";
			}
			Parameter ECDSPE_calc {
				IndexDomain: (PlantGroup,Season);
				Text: "ENERGY IN EACH SEASON";
				Comment: "calculated in output_gen_variables_sub";
			}
			Parameter ELGENE_calc {
				IndexDomain: (SliceSorted,Season,PlantGroup);
				Text: "Generation by Plant Group and Time Slice";
				Definition: {
					!IF (EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1) THEN
					!    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_BS(Season,Slice,PlantGroup))
					!ELSEIF (EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3) THEN
					!	Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,RNBS_Genslc(Season,Slice,PlantGroup)) +
					!	Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,RNBS_GenMinslc(Season,Slice,PlantGroup)) +
					!	Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,RNBS_GenMaxslc(Season,Slice,PlantGroup))
					!ELSEIF (EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4) THEN
					!	IF UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))= WIP2('1') THEN
					!		Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup)) -
					!		UFACP2('1') * Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup))
					!	ELSEIF UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') THEN
					!		Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup)) -
					!		UFACPS('1') * Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup))
					!	ELSE
					!	    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_HY(Season,Slice,PlantGroup))
					!	ENDIF
					!ELSEIF (EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5) THEN
					!    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_INT(Season,Slice,PlantGroup))
					!ELSEIF (EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6) THEN
					!    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_DG(Season,Slice,PlantGroup))
					!ELSEIF (EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=7) THEN
					!    Sum(Slice|SliceSliceSortedMapping(SliceSorted,Slice,Season,UG_EMM_RG_to_SupplyRegion(PlantGroup))=1,GENOUT_STO(Season,Slice,PlantGroup))
					!ENDIF
				}
				Comment: "moved to output_gen_variables_sub";
			}
			Parameter CO2_PLTSW_calc {
				IndexDomain: (PlantType_ECP);
				Text: "Fraction of plant generation that is covered by Standards";
			}
			Parameter ECDSPF_calc {
				IndexDomain: (PlantGroup,Season);
				Text: "FUEL CONSUMPTION IN EACH SEASON";
				Comment: "calculated in output_consump_sub";
			}
			Parameter ECDSPF_ALT_calc {
				IndexDomain: (PlantGroup,Season);
				Text: "FUEL CONSUMPTION IN EACH SEASON w/o capture";
				Comment: "calculated in output_consump_sub";
			}
		}
		DeclarationSection EDO_ACI_Completed {
			Parameter ACICST_calc {
				IndexDomain: (MNUMYR)| MNUMYR=cyr;
				Definition: sum(numACI | ord(numACI)=NUM_ACSS('1'), cACISPLY.Level(numACI) * cACISPLY.NominalCoefficient(numACI));
			}
			Parameter ACIOAM_calc {
				IndexDomain: (MNUMYR) |MNUMYR=cyr;
				Definition: rACIOMCSTn;
			}
		}
		DeclarationSection EDO_BENCH_Completed {
			Parameter ULBMCST_calc {
				IndexDomain: (SCALARSet);
				Text: "cost associated with STEO benchmarking constraints for marginal price adder";
				Definition: {
					!     GENERATION ROWS
					if BMCLGEN(cyr) then !     COAL
					  rGENCLeq.ShadowPrice(last(SupplyRegion))*cGENCLB.Level(last(SupplyRegion))
					endif
					+
					if BMNGGEN(cyr) then !     GAS
					  rGENNGeq.ShadowPrice(last(SupplyRegion))*cGENNGB.Level(last(SupplyRegion))
					endif
					+
					!     CONSUMPTION ROWS
					if BMCLCON(cyr) then !     COAL
					  rCONCLeq.ShadowPrice(last(SupplyRegion))*cCONCLB.Level(last(SupplyRegion))
					endif
					+
					if BMNGCON(cyr) then !     GAS
					  rCONNGeq.ShadowPrice(last(SupplyRegion))*cCONNGB.Level(last(SupplyRegion))
					endif
					+
					!     NET IMPORTS
					if BMNETIMP(cyr) then
					  rCANIMPUSeq.ShadowPrice*cCNIMPBUS.Level
					endif
				}
			}
		}
		DeclarationSection EDO_BIO_Completed {
			Parameter EMMBMDUAL_calc {
				IndexDomain: (CoalDemandRegion,MNUMYR)| MNUMYR=cyr;
				Text: "Dual on BIOMASS row in EMM (Max willingness to pay)";
				Definition: abs(rS_WD_allle.ShadowPrice(CoalDemandRegion));
			}
			Parameter QBMPWCL_calc {
				IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR)|MNUMYR=cyr;
				Text: "Biomass Demand in Electric Power Sector";
				Definition: {
					if BiomassType_SUP in BiomassType_ and CoalDemandRegion_SUP in CoalDemandRegion_ then
					  IF (WDSUP_AVL(BiomassType_SUP)=1 AND MP_BM_PW(BiomassType_SUP)> 0) THEN
					    cBP_type.Level(CoalDemandRegion_SUP, BiomassType_SUP,'XX')
					  endif
					elseif BiomassType_SUP='00' and CoalDemandRegion_SUP in CoalDemandRegion_ then
					  sum(BiomassType| WDSUP_AVL(BiomassType)=1 AND MP_BM_PW(BiomassType)> 0, cBP_type.Level(CoalDemandRegion_SUP, BiomassType,'XX'))
					elseif BiomassType_SUP in BiomassType_ and CoalDemandRegion_SUP='00' then
					  IF (WDSUP_AVL(BiomassType_SUP)=1 AND MP_BM_PW(BiomassType_SUP)> 0) THEN
					    sum(CoalDemandRegion, cBP_type.Level(CoalDemandRegion, BiomassType_SUP, 'XX'))
					  endif
					elseif BiomassType_SUP='00' and CoalDemandRegion_SUP='00' then
					  sum((CoalDemandRegion,BiomassType) | WDSUP_AVL(BiomassType)=1 AND MP_BM_PW(BiomassType)> 0, cBP_type.Level(CoalDemandRegion, BiomassType, 'XX'))
					endif
				}
			}
			Parameter PBMPWCL_calc {
				IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR)| MNUMYR=cyr;
				Text: "Biomass Price to Electric Power Sector";
				Definition: {
					if BiomassType_SUP > '00' and CoalDemandRegion_SUP >'00' then
					  IF (WDSUP_AVL(BiomassType_SUP)=1 AND MP_BM_PW(BiomassType_SUP)> 0) THEN
					    abs(rS_WD_typele.ShadowPrice(BiomassType_SUP, CoalDemandRegion_SUP))
					  endif
					elseif BiomassType_SUP='00' and CoalDemandRegion_SUP >'00' then
					  abs(rS_WD_allle.ShadowPrice(CoalDemandRegion_SUP))
					elseif CoalDemandRegion_SUP='00' and BiomassType_SUP >'00'   then
					  IF (WDSUP_AVL(BiomassType_SUP)=1 AND MP_BM_PW(BiomassType_SUP)> 0) THEN
					    sum(CoalDemandRegion, abs(rS_WD_typele.ShadowPrice(BiomassType_SUP, CoalDemandRegion))* cBP_type.Level(CoalDemandRegion, BiomassType_SUP, 'XX'))/$
					    sum(CoalDemandRegion, cBP_type.Level(CoalDemandRegion, BiomassType_SUP, 'XX'))
					  endif
					elseif BiomassType_SUP='00' and CoalDemandRegion_SUP='00' then
					!  sum((CoalDemandRegion,BiomassType) | WDSUP_AVL(BiomassType)=1 AND MP_BM_PW(BiomassType)> 0,
					!  abs(rS_WD_allle.ShadowPrice(CoalDemandRegion))*cBP_type.Level(CoalDemandRegion, BiomassType, 'XX'))/$
					!  sum((CoalDemandRegion,BiomassType) | WDSUP_AVL(BiomassType)=1 AND MP_BM_PW(BiomassType)> 0, cBP_type.Level(CoalDemandRegion, BiomassType, 'XX'))
					  sum(CoalDemandRegion, abs(rS_WD_allle.ShadowPrice(CoalDemandRegion))*QBMPWCL_calc(BiomassType_SUP, CoalDemandRegion, MNUMYR)) /$
					  QBMPWCL_calc(BiomassType_SUP, CoalDemandRegion_SUP, MNUMYR)
					endif
				}
			}
			Parameter UPFUEL_calc {
				IndexDomain: (FuelType,int_fuel_region);
				Text: "DELIVERED FUEL PRICES";
				Definition: {
					if FuelType=FuelType_UIWD_element then
					  abs(rS_WD_allle.ShadowPrice(element(CoalDemandRegion_, ord(int_fuel_region))))
					else
					  UPFUEL(FuelType, int_fuel_region)
					endif
				}
			}
		}
		DeclarationSection EDO_BTU_Completed {
			Parameter EFD_PCAR_calc {
				IndexDomain: (MNUMYR)| MNUMYR=cyr;
				Text: "86 ECP Carbon emission allowance price";
				Definition: {
					IF CarbonCap_National then
					       rCARBONXXle.ShadowPrice
					endif;
				}
				Comment: "EDO$BTU";
			}
			Parameter prc {
				IndexDomain: MNUMYR;
			}
			Parameter EFD_QCAR_calc {
				IndexDomain: (MNUMYR)| MNUMYR=cyr;
				Text: "85 ECP Carbon emissions for electricity";
				Definition: {
					IF CarbonCap_National then
					       rCARBONXXle.Level
					endif;
				}
				Comment: "EDO$BTU";
			}
			Parameter EFD_LCAR_calc {
				IndexDomain: (MNUMYR)| MNUMYR=cyr;
				Text: "84 ECP Carbon emissions limit for electricity";
				Definition: {
					if CarbonCap_National then
					     rCARBONXXle.Upper
					endif
				}
				Comment: "EFD Location:  EDO$BTU";
			}
			Parameter CAREFD_calc {
				IndexDomain: (CO2CapGroup,MNUMYR) |MNUMYR=cyr and ord(CO2CapGroup)<=CO2_GRP('1');
				Text: "Carbon Emissions by Grp -- EFD";
				Definition: {
					if ord(CO2CapGroup)=CARGRP_CA('1') then
					 if (0<AB_CAP_TOT(cyr)<9000) then
					  cCARLIM.Level(CO2CapGroup_Mapping(CO2CapGroup))
					 endif
					else
					 if rCARBONle.Upper(CO2CapGroup_Mapping(CO2CapGroup))>0 then
					  rCARBONle.Level(CO2CapGroup_Mapping(CO2CapGroup))
					 elseif rCARBONn(CO2CapGroup_Mapping(CO2CapGroup)) then
					  rCARBONn(CO2CapGroup_Mapping(CO2CapGroup))
					 else
					  cCARLIM.Level(CO2CapGroup_Mapping(CO2CapGroup))+
					  if ord(CO2CapGroup)=CARGRP_RG('1') then
					   cCAROFF.Level(CO2CapGroup_Mapping(CO2CapGroup)) + cCARRSV.Level(CO2CapGroup_Mapping(CO2CapGroup))
					  endif
					 endif
					endif
				}
			}
			Parameter CARTGT_calc {
				IndexDomain: (CO2CapGroup,MNUMYR) |MNUMYR=cyr and ord(CO2CapGroup)<=CO2_GRP('1');
				Text: "Carbon Emissions Limits by Grp";
				Definition: {
					if ord(CO2CapGroup)=CARGRP_CA('1') then
					 if (0<AB_CAP_TOT(cyr)<9000) then
					  AB_CAP_TOT(cyr)
					 else
					  9999.9 * 12.0 / 44.0
					 endif
					else
					 if rCARBONle.Upper(CO2CapGroup_Mapping(CO2CapGroup))>0 then
					  rCARBONle.Upper(CO2CapGroup_Mapping(CO2CapGroup))
					 else
					  coeff_cCARLIM_UBOUND(CO2CapGroup_Mapping(CO2CapGroup))
					 endif
					endif
				}
			}
			Parameter UCARPRC_calc {
				IndexDomain: (CO2CapGroup,MNUMYR) |MNUMYR=cyr and ord(CO2CapGroup)<=CO2_GRP('1');
				Text: "11 Car Allowance Price -- Regional";
				Definition: {
					if ord(CO2CapGroup)=CARGRP_CA('1') then
					 if (0<AB_CAP_TOT(cyr)<9000) then
					  abs(rCARBONABeq.ShadowPrice)
					 endif
					else
					 abs(rCARBONle.ShadowPrice(CO2CapGroup_Mapping(CO2CapGroup)))
					endif
				}
			}
			Parameter CTLHGEM_calc {
				IndexDomain: (CoalDemandRegion,MNUMYR) |MNUMYR=cyr;
				Text: "ttonsMercury emissions from CTL";
				Definition: {
					sum((CoalSupplyCurve,SO2Region) |ord(CoalSupplyCurve)<=MX_NCOALS('1') and XCL_TYPE(CoalSupplyCurve)>0 and TOT_RATE1(CoalSupplyCurve, CoalDemandRegion)<800,
					cCTLHG.Level(CoalSupplyCurve, CoalDemandRegion)*0.001)
				}
			}
			Parameter CTLNOXEM_calc {
				IndexDomain: (CoalDemandRegion,MNUMYR) |MNUMYR=cyr;
				Text: "tthousand tonsions from CTL";
				Definition: sum((GenerationSeason, INOXP)|ord(INOXP) <= NOX_GRP('1') and ord(GenerationSeason)<=EENSP('1', BCTL_SupplyRegion), cBCTLN(CoalDemandRegion, GenerationSeason, INOXP)*1000);
			}
			Parameter CTLSO2EM_calc {
				IndexDomain: (CoalDemandRegion,MNUMYR) |MNUMYR=cyr;
				Text: "tthousand tonsions from CTL";
				Definition: {
					sum((CoalSupplyCurve,SO2Region) |ord(CoalSupplyCurve)<=MX_NCOALS('1') and XCL_TYPE(CoalSupplyCurve)>0 and TOT_RATE1(CoalSupplyCurve, CoalDemandRegion)<800 and
					SO2_SHR_BY_CLRG(nHGCODE_to_CoalDemandRegion(CoalDemandRegion), SO2Region)>0, cCTLS.Level(CoalSupplyCurve, CoalDemandRegion, SO2Region)*1000)
				}
			}
			Parameter FCLSH_ams_calc {
				IndexDomain: (PlantType,FuelRegion);
				Text: "final coal share by plt type and fuel region";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX' ) and
					(CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0) then
					  if Tot_out(PlantType, FuelRegion)>0 then
					    AVGCL(PlantType, FuelRegion) / Tot_out(PlantType, FuelRegion)
					  else
					    1
					  endif
					!elseif ord(PlantType)>UICAS('1') and ord(PlantType)<=EFD_CAP and CPFLEFD(PlantType, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0 then
					! IF (IGS(PlantType)=1 AND (IRS(PlantType)= 0 AND IDS(PlantType)= 0)) THEN   ! gas only
					!   0
					! elseif
					endif
				}
			}
			Parameter FGSSH_ams_calc {
				IndexDomain: (PlantType,FuelRegion);
				Text: "final gas  share by plt type and fuel region";
				Definition: {
					if ord(PlantType)>UICAS('1') and ord(PlantType)<=EFD_CAP and CPFLEFD(PlantType, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0 then
					 IF (IGS(PlantType)=1 AND (IRS(PlantType)= 0 AND IDS(PlantType)= 0)) THEN   ! gas only
					   1
					 ELSEIF (IGS(PlantType)=0 AND (IRS(PlantType)= 1 OR IDS(PlantType)= 1)) THEN ! oil only
					   0
					 ELSEIF (IGS(PlantType)= 1 AND (IRS(PlantType)= 1 OR IDS(PlantType)= 1)) THEN  !dual fired
					   if Tot_out(PlantType, FuelRegion)>0 then
					    AVGGAS(PlantType, FuelRegion) / Tot_out(PlantType, FuelRegion)
					  else
					    1
					  endif
					 endif
					
					endif
				}
			}
			Parameter FOLSH_ams_calc {
				IndexDomain: (PlantType,FuelRegion);
				Text: "final oil  share by plt type and fuel region";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX' ) and
					(CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0) then
					  if Tot_out(PlantType, FuelRegion)>0 then
					    AVGOIL(PlantType, FuelRegion) / Tot_out(PlantType, FuelRegion)
					  else
					    0
					  endif
					elseif ord(PlantType)>UICAS('1') and ord(PlantType)<=EFD_CAP and
					CPFLEFD(PlantType, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0 then
					 IF (IGS(PlantType)=1 AND (IRS(PlantType)= 0 AND IDS(PlantType)= 0)) THEN   ! gas only
					   0
					 ELSEIF (IGS(PlantType)=0 AND (IRS(PlantType)= 1 OR IDS(PlantType)= 1)) THEN ! oil only
					   1
					 ELSEIF (IGS(PlantType)= 1 AND (IRS(PlantType)= 1 OR IDS(PlantType)= 1)) THEN  !dual fired
					   if Tot_out(PlantType, FuelRegion)>0 then
					    AVGOIL(PlantType, FuelRegion) / Tot_out(PlantType, FuelRegion)
					  else
					    0
					  endif
					 endif
					endif
				}
			}
			Parameter FWDSH_ams_calc {
				IndexDomain: (PlantType,FuelRegion);
				Text: "final biomass share by plt type and fuel region";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX' ) and
					(CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0) then
					  if Tot_out(PlantType, FuelRegion)>0 then
					    AVGWD(PlantType, FuelRegion) / Tot_out(PlantType, FuelRegion)
					  else
					    0
					  endif
					elseif ord(PlantType)>UICAS('1') and ord(PlantType)<=EFD_CAP and CPFLEFD(PlantType, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0 then
					 IF IWD(PlantType)=1 then! biomass
					   1
					 ELSE
					   0
					 endif
					endif
				}
			}
			Parameter AB32BBNK_calc {
				IndexDomain: (SCALARSet);
				Text: "Banked Allowances Added";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					coeff_cCARLIM_UBOUND(CACO2Region)-cCARLIM.Level(CACO2Region)
					endif
				}
				Comment: "Covered Emissions Cap and Unused (Banked) Allowances";
			}
			Parameter AB32UTIL_calc {
				IndexDomain: (SCALARSet);
				Text: "Utility Covered Emissions";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					cCARUTL.Level(CACO2Region)
					endif
				}
				Comment: "Covered Utility Emissions and Banks Used";
			}
			Parameter AB32BAVL_calc {
				IndexDomain: (SCALARSet);
				Text: "Banked Allowances Available";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					coeff_cCARBNK_UBOUND(CACO2Region)
					endif
				}
				Comment: "Offsets";
			}
			Parameter AB32BUSE_calc {
				IndexDomain: (SCALARSet);
				Text: "Banked Allowances Used";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					cCARBNK.Level(CACO2Region)
					endif
				}
				Comment: "Offsets";
			}
			Parameter AB32OAVL_calc {
				IndexDomain: (SCALARSet);
				Text: "Offsets Available";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					coeff_cCAROFF_UBOUND(CACO2Region)
					endif
				}
			}
			Parameter AB32OUSE_calc {
				IndexDomain: (SCALARSet);
				Text: "Offsets Used";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					cCAROFF.Level(CACO2Region)
					endif
				}
			}
			Parameter AB32RAVL_calc {
				IndexDomain: (SCALARSet);
				Text: "Reserves Available";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					coeff_cCARRSV_UBOUND(CACO2Region)
					endif
				}
			}
			Parameter AB32RUSE_calc {
				IndexDomain: (SCALARSet);
				Text: "Reserves Used";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					cCARRSV.Level(CACO2Region)
					endif
				}
			}
			Parameter AB32RBNK_calc {
				IndexDomain: (SCALARSet);
				Text: "Reserves Banked";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					coeff_cCARRSV_UBOUND(CACO2Region)-cCARRSV.Level(CACO2Region)
					endif
				}
			}
			Parameter AB32ESCP_calc {
				IndexDomain: (SCALARSet);
				Text: "Escape Vector Value (Shortage)";
				Definition: {
					if (0<AB_CAP_TOT(cyr)<9000) then
					cCARESC.Level(CACO2Region)
					endif
				}
			}
			Parameter RGGIOAVL_calc {
				IndexDomain: (SCALARSet);
				Text: "Offsets Available";
				Definition: coeff_cCAROFF_UBOUND(RGCO2Region);
			}
			Parameter RGGIOUSE_calc {
				IndexDomain: (SCALARSet);
				Text: "Offsets Used";
				Definition: cCAROFF.Level(RGCO2Region);
			}
			Parameter RGGIRAVL_calc {
				IndexDomain: (SCALARSet);
				Text: "Cost Containment Reserves Available";
				Definition: coeff_cCARRSV_UBOUND(RGCO2Region);
			}
			Parameter RGGIRUSE_calc {
				IndexDomain: (SCALARSet);
				Text: "Cost Containment Used";
				Definition: cCARRSV.Level(RGCO2Region);
			}
			Parameter RGGIEAVL_calc {
				IndexDomain: (SCALARSet);
				Text: "Emissions Containment Reserves Available";
				Definition: coeff_cCARECR_UBOUND(RGCO2Region);
			}
			Parameter RGGIEUSE_calc {
				IndexDomain: (SCALARSet);
				Text: "Emissions Containment Reserves Used";
				Definition: cCARECR.Level(RGCO2Region);
			}
			Parameter RGGIUTIL_calc {
				IndexDomain: (SCALARSet);
				Text: "Utility Covered Emissions";
				Definition: cCARLIM.Level(RGCO2Region) + cCAROFF.Level(RGCO2Region) + cCARRSV.Level(RGCO2Region);
			}
			Parameter OLSH_out {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
						if (USW_ECPCF('1') = 0) then   !no cofiring option
							EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
						else
							if ((EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1) then
								EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)/(EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
							else
								EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
							endif
						endif
					
					endif
				}
			}
			Parameter GASSH_out {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
						EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
					endif
				}
			}
			Parameter CLSH_out {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
					 if (USW_ECPCF('1') = 0) then   !no cofiring option
						1-(GASSH_out(PlantType,FuelRegion_ALT1)+OLSH_out(PlantType,FuelRegion_ALT1))
					 else
						1-(OLSH_out(PlantType,FuelRegion_ALT1)+CFSH_out(PlantType,FuelRegion_ALT1))
					 endif
					endif
				}
			}
			Parameter CFSH_out {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
					  if ((EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1) then
					 	UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))/(EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
					else
					 	UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))
					endif
					endif
				}
			}
			Parameter GASSH_MaxGasMinOil {
				IndexDomain: (PlantType,FuelRegion);
				Definition: {
					if ord(PlantType)>UICAS('1') and ord(PlantType)<=EFD_CAP and
					CPFLEFD(PlantType, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0 then
					 IF (IGS(PlantType)= 1 AND (IRS(PlantType)= 1 OR IDS(PlantType)= 1)) THEN  !dual fired
					   MIN(1.0,EDMXGS_EFD(PlantType, FuelRegion))
					  endif
					 endif
				}
			}
			Parameter OILSH {
				IndexDomain: (PlantType,FuelRegion);
				Definition: {
					if ord(PlantType)>UICAS('1') and ord(PlantType)<=EFD_CAP and
					CPFLEFD(PlantType, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0 then
					 IF (IGS(PlantType)= 1 AND (IRS(PlantType)= 1 OR IDS(PlantType)= 1)) THEN  !dual fired
					   if IRS(PlantType) and EDMXRS_EFD(PlantType, FuelRegion)<=1 then
					     EDMXRS_EFD(PlantType, FuelRegion)
					   elseif IDS(PlantType) and EDMXDS_EFD(PlantType, FuelRegion)<=1 then
					     EDMXDS_EFD(PlantType, FuelRegion)
					   else
					     1
					   endif
					 endif
					endif
				}
			}
			Parameter AVGCL {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX' ) then
					if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					  sum((GenerationSeason, FuelShareOption)|GenerationSeason='X' and FuelShareOption='11',  CLSH_out(PlantType, FuelRegion_ALT1)*cB.Level(FuelRegion_ALT1, PlantType, GenerationSeason, FuelShareOption))
					endif
					endif
				}
			}
			Parameter AVGOIL {
				IndexDomain: (PlantType,FuelRegion);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX' ) then
					if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0) then
					  sum((GenerationSeason, FuelShareOption)|GenerationSeason='X' and FuelShareOption='11',  OLSH_out(PlantType, FuelRegion)*cB.Level(FuelRegion, PlantType, GenerationSeason, FuelShareOption))
					endif
					elseif ord(PlantType)>UICAS('1') and ord(PlantType)<=EFD_CAP and
					CPFLEFD(PlantType, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0 then
					 IF (IGS(PlantType)= 1 AND (IRS(PlantType)= 1 OR IDS(PlantType)= 1)) THEN  !dual fired
					   sum(GenerationSeason|GenerationSeason<>last(GenerationSeason_), (1-GASSH_MaxGasMinOil(PlantType, FuelRegion))* cB.Level(FuelRegion, PlantType, GenerationSeason, '1X')) +
					   sum(GenerationSeason|GenerationSeason<>last(GenerationSeason_), OILSH(PlantType, FuelRegion)* cB.Level(FuelRegion, PlantType, GenerationSeason, '2X'))
					 endif
					endif
				}
			}
			Parameter AVGWD {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX' ) then
					if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					  sum((GenerationSeason, FuelShareOption)|GenerationSeason='X' and FuelShareOption='11',  CFSH_out(PlantType, FuelRegion_ALT1)*cB.Level(FuelRegion_ALT1, PlantType, GenerationSeason, FuelShareOption))
					endif
					endif
				}
			}
			Parameter AVGGAS {
				IndexDomain: (PlantType,FuelRegion);
				Definition: {
					if ord(PlantType)>UICAS('1') and ord(PlantType)<=EFD_CAP and
					CPFLEFD(PlantType, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0 then
					 IF (IGS(PlantType)= 1 AND (IRS(PlantType)= 1 OR IDS(PlantType)= 1)) THEN  !dual fired
					   sum(GenerationSeason|GenerationSeason<>last(GenerationSeason_), GASSH_MaxGasMinOil(PlantType, FuelRegion)* cB.Level(FuelRegion, PlantType, GenerationSeason, '1X')) +
					   sum(GenerationSeason|GenerationSeason<>last(GenerationSeason_), (1-OILSH(PlantType, FuelRegion))* cB.Level(FuelRegion, PlantType, GenerationSeason, '2X'))
					 endif
					endif
				}
			}
			Parameter Tot_out {
				IndexDomain: (PlantType,FuelRegion);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX' ) and
					(CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0) then
					  sum((GenerationSeason, FuelShareOption)|GenerationSeason='X' and FuelShareOption='11',  cB.Level(FuelRegion, PlantType, GenerationSeason, FuelShareOption))
					elseif ord(PlantType)>UICAS('1') and ord(PlantType)<=EFD_CAP and
					CPFLEFD(PlantType, EPCSMP_to_CensusRegion(FuelRegion), EPCLMP_to_int_fuel_region(FuelRegion),EPGSMP_to_int_fuel_region(FuelRegion)) > 0 then
					 IF (IGS(PlantType)= 1 AND (IRS(PlantType)= 1 OR IDS(PlantType)= 1)) THEN  !dual fired
					   sum(GenerationSeason|GenerationSeason<>last(GenerationSeason_), cB.Level(FuelRegion, PlantType, GenerationSeason, '1X')) +
					   sum(GenerationSeason|GenerationSeason<>last(GenerationSeason_), cB.Level(FuelRegion, PlantType, GenerationSeason, '2X'))
					 endif
					endif
				}
			}
		}
		DeclarationSection EDO_CCAP_Completed {
			Parameter OGCO2QEM_calc {
				IndexDomain: (OGSMRegionEX_ALTTo,MNUMYR)|MNUMYR=cyr;
				Text: "CO2 quantity from EMM(mmcf)";
				Definition: {
					if OGSMRegionEX_ALTTo<> last(OGSMRegionEX_) then
					  sum(FuelRegion, cNTR.Level(FuelRegion, OGSMRegionEX_ALTTo)*18000)+
					  if RUN45Q then
					    sum(FuelRegion, cNSR.Level(FuelRegion, OGSMRegionEX_ALTTo)*18000)
					  endif
					else
					  if CO2_EORSW('1')=1 then
					    0
					  else
					    sum(FuelRegion, cNTX.Level(FuelRegion)*18000)+
					    if RUN45Q then
					      sum(FuelRegion, cNSX.Level(FuelRegion)*18000)
					    endif
					  endif
					endif
				}
			}
			Parameter UTCO2QEM_calc {
				IndexDomain: (OGSMRegionEX_ALTTo,MNUMYR)|MNUMYR=cyr and OGSMRegionEX_ALTTo in OGSMRegion_;
				Text: "CO2 quantity from EMM(mmcf)";
				Definition: {
					sum(FuelRegion, cNTR.Level(FuelRegion, OGSMRegionEX_ALTTo)*18000)+
					  if RUN45Q then
					    sum(FuelRegion, cNSR.Level(FuelRegion, OGSMRegionEX_ALTTo)*18000)
					endif
				}
			}
			Parameter CO2_CCS_calc {
				IndexDomain: (FuelRegion_SUP,OGSMRegion_SUP,Two0,MNUMYR)|MNUMYR=cyr;
				Definition: {
					if Two0<>'2' then
					  if FuelRegion_SUP in FuelRegion_ and OGSMRegion_SUP in OGSMRegion_ then
					    cNTR.Level(FuelRegion_SUP, OGSMRegion_SUP)*18000
					  elseif FuelRegion_SUP =ZeroFuelRegion_SUP and OGSMRegion_SUP in OGSMRegion_ then
					    sum(FuelRegion, cNTR.Level(FuelRegion, OGSMRegion_SUP)*18000)
					  elseif FuelRegion_SUP in FuelRegion_ and OGSMRegion_SUP =ZeroOGSMRegion_SUP then
					    sum(OGSMRegion, cNTR.Level(FuelRegion_SUP, OGSMRegion)*18000)
					  elseif FuelRegion_SUP =ZeroFuelRegion_SUP and OGSMRegion_SUP =ZeroOGSMRegion_SUP then
					    sum((FuelRegion,OGSMRegion), cNTR.Level(FuelRegion, OGSMRegion)*18000)
					  endif
					endif
					+
					if Two0<>'1' and RUN45Q then
					if FuelRegion_SUP in FuelRegion_ and OGSMRegion_SUP in OGSMRegion_ then
					    cNSR.Level(FuelRegion_SUP, OGSMRegion_SUP)*18000
					  elseif FuelRegion_SUP =ZeroFuelRegion_SUP and OGSMRegion_SUP in OGSMRegion_ then
					    sum(FuelRegion, cNSR.Level(FuelRegion, OGSMRegion_SUP)*18000)
					  elseif FuelRegion_SUP in FuelRegion_ and OGSMRegion_SUP =ZeroOGSMRegion_SUP then
					    sum(OGSMRegion, cNSR.Level(FuelRegion_SUP, OGSMRegion)*18000)
					  elseif FuelRegion_SUP =ZeroFuelRegion_SUP and OGSMRegion_SUP =ZeroOGSMRegion_SUP then
					    sum((FuelRegion,OGSMRegion), cNSR.Level(FuelRegion, OGSMRegion)*18000)
					  endif
					endif
					+
					if Two0<>'2' then
					  if FuelRegion_SUP in FuelRegion_ and OGSMRegion_SUP=MinusOneOGSMRegion_SUP then
					    cNTX.Level(FuelRegion_SUP)*18000
					  elseif FuelRegion_SUP =ZeroFuelRegion_SUP and OGSMRegion_SUP=MinusOneOGSMRegion_SUP then
					    sum(FuelRegion, cNTX.Level(FuelRegion)*18000)
					  elseif FuelRegion_SUP in FuelRegion_ and OGSMRegion_SUP =ZeroOGSMRegion_SUP then
					    cNTX.Level(FuelRegion_SUP)*18000
					  elseif FuelRegion_SUP =ZeroFuelRegion_SUP and OGSMRegion_SUP =ZeroOGSMRegion_SUP then
					    sum(FuelRegion, cNTX.Level(FuelRegion)*18000)
					  endif
					endif
					+
					if Two0<>'1' and RUN45Q then
					  if FuelRegion_SUP in FuelRegion_ and OGSMRegion_SUP=MinusOneOGSMRegion_SUP then
					    cNSX.Level(FuelRegion_SUP)*18000
					  elseif FuelRegion_SUP =ZeroFuelRegion_SUP and OGSMRegion_SUP=MinusOneOGSMRegion_SUP then
					    sum(FuelRegion, cNSX.Level(FuelRegion)*18000)
					  elseif FuelRegion_SUP in FuelRegion_ and OGSMRegion_SUP =ZeroOGSMRegion_SUP then
					    cNSX.Level(FuelRegion_SUP)*18000
					  elseif FuelRegion_SUP =ZeroFuelRegion_SUP and OGSMRegion_SUP =ZeroOGSMRegion_SUP then
					    sum(FuelRegion, cNSX.Level(FuelRegion)*18000)
					  endif
					endif
				}
			}
			Parameter FLRG_VAL_45Q_calc {
				IndexDomain: (FuelRegion,MNUMYR)| MNUMYR=cyr;
				Definition: {
					if MUST_STORE(FuelRegion, MNUMYR)=0 then
					rZFLRSge.ShadowPrice(FuelRegion)
					else
					rZFLRSeq.ShadowPrice(FuelRegion)
					endif
				}
			}
			Parameter FLRG_VALUE_calc {
				IndexDomain: (FuelRegion,MNUMYR)| MNUMYR=cyr;
				Definition: {
					if MUST_STORE(FuelRegion, MNUMYR)=0 then
					rZFLRGge.ShadowPrice(FuelRegion)
					else
					rZFLRGeq.ShadowPrice(FuelRegion)
					endif
				}
			}
		}
		DeclarationSection EDO_COL_Completed {
			Parameter UFRSO2Q_calc {
				IndexDomain: (FuelType,int_fuel_region);
				Text: "SO2 EMISSIONS Quantity";
				Definition: {
					
					sum((CoalSupplyCurve,CoalDemandRegion,CoalPlant_ECP,ACIOption)| FuelType=ElementCast(FuelType_,CoalPlant_ECP) and !CLSCPLDR(CoalSupplyCurve, UtilitySector_Element(CoalPlant_ECP), CoalDemandRegion) and
					ord(ACIOption)<=2 and int_fuel_region=CDR_to_int_fuel_region(CoalDemandRegion), cCT.Level(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, ACIOption))
				}
			}
			Parameter UFRSO2R_calc {
				IndexDomain: (FuelType,int_fuel_region);
				Text: "SO2 EMISSION RATE Revised";
				Definition: {
					if UFRSO2Q_calc(FuelType, int_fuel_region)>0 then
					  sum((CoalSupplyCurve,CoalDemandRegion,CoalPlant_ECP,ACIOption)| FuelType=ElementCast(FuelType_,CoalPlant_ECP) and !CLSCPLDR(CoalSupplyCurve, UtilitySector_Element(CoalPlant_ECP), CoalDemandRegion) and
					  ord(ACIOption)<=2 and int_fuel_region=CDR_to_int_fuel_region(CoalDemandRegion), cCT.Level(CoalSupplyCurve, CoalDemandRegion, CoalPlant_ECP, ACIOption)*XCL_SO2_YR(CoalSupplyCurve, cyr))/
					  UFRSO2Q_calc(FuelType, int_fuel_region)
					else
					  UFRSO2(FuelType, int_fuel_region)
					endif
				}
			}
		}
		DeclarationSection EDO_LOAD_Completed {
			Parameter NMARCST_calc {
				IndexDomain: (SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR);
				Text: "after trade marginal cost";
				Definition: {
					if MNUMYR=cyr then
					  sum(Slice | SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_element(SupplyRegionAll_ALT1)),
					  rLDge.ShadowPrice(SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)*100)
					endif
				}
			}
			Parameter ETDMDERG_calc {
				IndexDomain: (SupplyRegion_ALT1);
				Text: "REGIONAL DOMESTIC ECONOMY SALES (MM$)";
				Definition: {
					sum((SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) | SupplyRegion_ALT1=SupplyRegion_ALTfrom and SupplyRegion_ALT1 in SupplyRegion_SUB_ and
					CNSTRNTS_EFD(Season, cyr, SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001 and
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) > 0.001,
					-cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto))*
					rLDge.ShadowPrice(SupplyRegion_ALTto, Season, Slice)*0.1) +
					sum((SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) | SupplyRegion_ALT1=SupplyRegion_ALTto and SupplyRegion_ALT1 in SupplyRegion_SUB_ and
					CNSTRNTS_EFD(Season, cyr, SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001 and
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) > 0.001,
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto))*
					rLDge.ShadowPrice(SupplyRegion_ALTto, Season, Slice)*0.1)
				}
			}
			Parameter ETDMMERG_calc {
				IndexDomain: (SupplyRegion_ALT1);
				Text: "REGIONAL DOMESTIC ECONOMY SALES (MWH)";
				Definition: {
					sum((SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) | SupplyRegion_ALT1=SupplyRegion_ALTfrom and SupplyRegion_ALT1 in SupplyRegion_SUB_ and
					CNSTRNTS_EFD(Season, cyr, SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001 and
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) > 0.001,
					-cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto))) +
					sum((SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) | SupplyRegion_ALT1=SupplyRegion_ALTto and SupplyRegion_ALT1 in SupplyRegion_SUB_ and
					CNSTRNTS_EFD(Season, cyr, SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001 and
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) > 0.001,
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto))*
					(1-LINELOSS('1')))
				}
			}
			Parameter ETDIMERG_calc {
				IndexDomain: (SupplyRegion_ALT1);
				Text: "REGIONAL INTERNATIONAL ECONOMY SALES (MWH)";
				Definition: {
					sum((CanadianSupplyRegion, CanadianSupplyStep, Season, Slice)|cTC.Level(CanadianSupplyRegion, CanadianSupplyStep, SupplyRegion_ALT1, Season, Slice)>0.001,
					cTC.Level(CanadianSupplyRegion, CanadianSupplyStep, SupplyRegion_ALT1, Season, Slice)*UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT1),Group2_element(Slice,Season,SupplyRegion_ALT1))*(1-LINELOSS('1')))
				}
			}
			Parameter CHKGEN_calc {
				IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
				Definition: {
					sum((Slice,Season) | CNSTRNTS_EFD(Season, cyr, SupplyRegionAll_ALT1,SupplyRegionAll) > 0.001 and
					cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice) > 0.001,
					cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice) *
					UTWDTH(Segment2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)),Group2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)))*
					(1-LINELOSS('1'))) +
					sum((CanadianSupplyStep, Season, Slice)|cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)>0.001,
					cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)*
					UTWDTH(Segment2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)),Group2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)))*(1-LINELOSS('1')))
				}
			}
			Parameter UTECON_calc {
				IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
				Text: "detailed economy trade";
				Definition: {
					sum((Slice,Season) | CNSTRNTS_EFD(Season, cyr, SupplyRegionAll_ALT1,SupplyRegionAll) > 0.001 and
					cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice) > 0.001,
					cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice) *
					UTWDTH(Segment2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)),Group2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)))*
					(1-LINELOSS('1')))+
					sum((CanadianSupplyStep, Season, Slice)|cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)>0.001,
					cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)*
					UTWDTH(Segment2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)),Group2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)))*(1-LINELOSS('1')))
				}
			}
			Parameter UTECONSL_calc {
				IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll);
				Text: "detailed economy trade by season & slice";
				Definition: {
					sum(Slice | SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_element(SupplyRegionAll_ALT1)) and
					CNSTRNTS_EFD(Season, cyr, SupplyRegionAll_ALT1,SupplyRegionAll) > 0.001 and cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice) > 0.001,
					cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)) +
					sum((CanadianSupplyStep, Slice)|SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_element(SupplyRegionAll_ALT1)) and
					cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)>0.001,
					cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice))
				}
			}
			Parameter UTSALES_calc {
				IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
				Text: "detailed trade sales $";
				Definition: {
					sum((Slice,Season) | CNSTRNTS_EFD(Season, cyr, SupplyRegionAll_ALT1,SupplyRegionAll) > 0.001 and
					cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice) > 0.001,
					-cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice) *
					UTWDTH(Segment2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)),Group2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)))*
					rLDge.ShadowPrice(SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)*0.1) +
					sum((CanadianSupplyStep, Season, Slice)|cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)>0.001,
					cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)*
					UTWDTH(Segment2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)),Group2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)))*
					(CAN_CST(ImportStep_element(CanadianSupplyStep), CanadianSupplyRegion_element(SupplyRegionAll), cyr) * CAN_CST_SCMULT(cyr) +
					PTHRESH1(cyr, SupplyRegionAll, SupplyRegionAll_ALT1) + PTHRESH2(cyr, SupplyRegionAll, SupplyRegionAll_ALT1)+ BARRIER(cyr))*0.001)
				}
			}
			Parameter UTEXDE_calc {
				IndexDomain: (SupplyRegion_ALT1,MNUMYR);
				Text: "112 Gross Dom. Economy Sales--Nerc (MM$)";
				Definition: {
					if MNUMYR=cyr then
					  sum((SupplyRegion_ALTto, Season, Slice) |
					  CNSTRNTS_EFD(Season, cyr, SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALT1)) > 0.001 and
					  cTR.Level(SupplyRegion_ALT1, SupplyRegion_ALTto, Season, Slice) > 0.001,
					  cTR.Level(SupplyRegion_ALT1, SupplyRegion_ALTto, Season, Slice) * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto))*
					  rLDge.ShadowPrice(SupplyRegion_ALTto, Season, Slice)*0.1)
					endif
				}
			}
			Parameter UTEXME_calc {
				IndexDomain: (SupplyRegion_ALT1,MNUMYR);
				Text: "110 Gross Dom. Economy Sales-Nerc (Mkwh)";
				Definition: {
					if MNUMYR=cyr then
					  sum((SupplyRegion_ALTto, Season, Slice) |
					  CNSTRNTS_EFD(Season, cyr, SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALT1)) > 0.001 and
					  cTR.Level(SupplyRegion_ALT1, SupplyRegion_ALTto, Season, Slice) > 0.001,
					  cTR.Level(SupplyRegion_ALT1, SupplyRegion_ALTto, Season, Slice) * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto)))
					endif
				}
			}
			Parameter UTCNSTSL_calc {
				IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll);
				Text: "transmission constraint by season & slice";
				Definition: {
					if ord(SupplyRegionAll)<=card(SupplyRegion_) then
					if CNSTRNTS_EFD(Season, cyr, SupplyRegionAll_ALT1,SupplyRegionAll) > 0.001 and
					sum(Slice | SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_element(SupplyRegionAll_ALT1)),
					cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)) > 0.001 then
					  sum(Slice | SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_element(SupplyRegionAll_ALT1)),
					  coeff_cTR_UBOUND(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice))
					endif
					else
					 if sum((Slice,CanadianSupplyStep) | SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_element(SupplyRegionAll_ALT1)),
					 cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice))>0.001 then
					 sum(Slice | SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_element(SupplyRegionAll_ALT1)),
					 rTCNle.Upper(CanadianSupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice))
					 endif
					endif
				}
			}
			Parameter CHK_D_calc {
				IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
				Definition: {
					sum((Slice,Season) | CNSTRNTS_EFD(Season, cyr, SupplyRegionAll_ALT1,SupplyRegionAll) > 0.001 and
					cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice) > 0.001,
					-cTR.Level(SupplyRegion_element(SupplyRegionAll), SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice) *
					UTWDTH(Segment2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)),Group2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)))*
					rLDge.ShadowPrice(SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)*0.1) +
					sum((CanadianSupplyStep, Season, Slice)|cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)>0.001,
					cTC.Level(CanadianSupplyRegion_element(SupplyRegionAll), CanadianSupplyStep, SupplyRegion_element(SupplyRegionAll_ALT1), Season, Slice)*
					UTWDTH(Segment2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)),Group2_element(Slice,Season,SupplyRegion_element(SupplyRegionAll_ALT1)))*
					(CAN_CST(ImportStep_element(CanadianSupplyStep), CanadianSupplyRegion_element(SupplyRegionAll), cyr) * CAN_CST_SCMULT(cyr) +
					PTHRESH1(cyr, SupplyRegionAll, SupplyRegionAll_ALT1) + PTHRESH2(cyr, SupplyRegionAll, SupplyRegionAll_ALT1)+ BARRIER(cyr))*0.001)
				}
			}
			Parameter NET_XPORT_EFD_calc {
				IndexDomain: (Segment,Group,SupplyRegion_ALT1);
				Definition: {
					sum((SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) | SupplyRegion_ALT1=SupplyRegion_ALTfrom and SupplyRegion_ALT1 in SupplyRegion_SUB_ and
					CNSTRNTS_EFD(Season, cyr, SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001 and
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) > 0.001 and Segment=Segment2_element(Slice,Season,SupplyRegion_ALTto) and
					Group=Group2_element(Slice,Season,SupplyRegion_ALTto),
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) ) -
					sum((SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) | SupplyRegion_ALT1=SupplyRegion_ALTto and SupplyRegion_ALT1 in SupplyRegion_SUB_ and
					CNSTRNTS_EFD(Season, cyr, SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001 and
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice) > 0.001 and Segment=Segment2_element(Slice,Season,SupplyRegion_ALTto) and
					Group=Group2_element(Slice,Season,SupplyRegion_ALTto),
					cTR.Level(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice)*(1-LINELOSS('1')) ) -
					sum((CanadianSupplyRegion, CanadianSupplyStep, Season, Slice)|cTC.Level(CanadianSupplyRegion, CanadianSupplyStep, SupplyRegion_ALT1, Season, Slice)>0.001 and
					Segment=Segment2_element(Slice,Season,SupplyRegion_ALT1) and Group=Group2_element(Slice,Season,SupplyRegion_ALT1),
					 cTC.Level(CanadianSupplyRegion, CanadianSupplyStep, SupplyRegion_ALT1, Season, Slice)*(1-LINELOSS('1')))
				}
			}
			Parameter SP_RES_ACH_calc {
				IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1);
				Text: "Spinning reserves achieved from solution by slice";
				Definition: {
					sum((Slice,Season)| Group= Group_element(SliceSorted, Season, SupplyRegion_ALT1) and SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_ALT1),
					cSPx.Level(SupplyRegion_ALT1, Season, Slice))
				}
			}
			Parameter SP_RES_DUAL_calc {
				IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1);
				Text: "Price on spinning reserves constraint";
				Definition: {
					sum((Slice,Season)| Group= Group_element(SliceSorted, Season, SupplyRegion_ALT1) and SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_ALT1) and
					rSRge.ShadowPrice(SupplyRegion_ALT1, Season, Slice)>0.001, rSRge.ShadowPrice(SupplyRegion_ALT1, Season, Slice))
				}
			}
			Parameter SP_RES_REQ_calc {
				IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1);
				Text: "Base requirement for spinning reserves from soluntion";
				Definition: {
					sum(Season| Group= Group_element(SliceSorted, Season, SupplyRegion_ALT1),
					SR_RQMT_HGHT(SupplyRegion_ALT1) * UTHGHT(Segment_element(SliceSorted, Season, SupplyRegion_ALT1), Group, SupplyRegion_ALT1) + SR_RQMT_DIFF(SupplyRegion_ALT1) *
					(MAX_HGHT(Season, SupplyRegion_ALT1) - UTHGHT(Segment_element(SliceSorted, Season, SupplyRegion_ALT1), Group, SupplyRegion_ALT1)))
				}
			}
			Parameter MAX_HGHT {
				IndexDomain: (Season,SupplyRegion);
				Definition: max(SliceSorted, UTHGHT(Segment_element(SliceSorted, Season, SupplyRegion), Group_element(SliceSorted, Season, SupplyRegion), SupplyRegion));
			}
			Parameter SRPOOL_calc {
				IndexDomain: (MNUMYR,SupplyRegion);
				Text: "Total dollars to recover in pricing for meeting spinning reserve constraint";
				Definition: {
					if MNUMYR=cyr then
					sum((Group, SliceSorted), SP_RES_DUAL_calc(Group, SliceSorted, SupplyRegion)*SP_RES_REQ_calc(Group, SliceSorted, SupplyRegion) +
					SP_RES_DUAL_calc(Group, SliceSorted, SupplyRegion)*SR_INT_REQ_calc(Group, SliceSorted, SupplyRegion))
					endif
				}
			}
		}
		DeclarationSection EDO_MRUN_Completed {
			Parameter ULMRCST_calc {
				IndexDomain: (SupplyRegion_ALT1);
				Definition: {
					sum(FirstPlantGroup| UG_EMM_RG_Mapping(SupplyRegion_ALT1, FirstPlantGroup) and UG_MRUN(PlantGroupOrd2PlantGroup(FirstPlantGroup)) and
					UG_ECPt(PlantGroupOrd2PlantGroup(FirstPlantGroup))<=card(DispatchableECP_), rMRXge.ShadowPrice(FirstPlantGroup) * rMRXge.Level(FirstPlantGroup))
				}
			}
		}
		DeclarationSection EDO_OP_Completed {
			Parameter UTHTS2_calc {
				IndexDomain: (Segment,Group,SupplyRegion_ALT1);
				Definition: {
					if P2_TEST_out(SupplyRegion_ALT1) then
					sum((Slice,SliceSorted,Season)| Segment=Segment_element(SliceSorted, Season, SupplyRegion_ALT1) and Group= Group_element(SliceSorted, Season, SupplyRegion_ALT1) and
					SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion_ALT1),
					cS2.Level(SupplyRegion_ALT1, Season, Slice)/(ELWDTH(SliceSorted, Season, SupplyRegion_ALT1) * 0.1))
					endif
				}
			}
			Parameter P2_TEST_out {
				IndexDomain: (SupplyRegion);
				Definition: sum((RenewPlantGroup, Season)| EHTECP(RenewPlantGroup, SupplyRegion)=WIP2('1'), EHCAP(RenewPlantGroup, Season, SupplyRegion));
			}
		}
		DeclarationSection EDO_PM_Completed {
			Parameter ECCOPM_calc {
				IndexDomain: {
					(DispPlantGroup,Season,SupplyRegion) !| ord(DispPlantGroup)<=ECNTP('1', SupplyRegion)
				}
				Text: "DSP CAP NET OF PLANNED MNT.";
				Definition: {
					if EPPOPM( Element(PlantType_,ECASTS(DispPlantGroup, SupplyRegion)))=1 and SupplyRegion in SupplyRegion_SUB_ then
					SHR_C(Season, Element(PlantGroup_,ECDBID(DispPlantGroup, SupplyRegion))) * cMB.Level(EFD_GRPS_F_Element(ECNTP_Element(DispPlantGroup, SupplyRegion)), Season) *1000
					endif
				}
			}
			Parameter ECDSPC_calc {
				IndexDomain: (PlantGroup,Season) | EPPOPM(UG_EFDt_to_PlantType(PlantGroup))=1;
				Text: "CAP IN EACH SEASON";
				Definition: {
					sum((DispPlantGroup,SupplyRegion_SUB)| ECDBID(DispPlantGroup,SupplyRegion_SUB)=ord(PlantGroup) and SupplyRegion_SUB=UG_EMM_RG_to_SupplyRegion(PlantGroup) and
					ord(DispPlantGroup)<=ECNTP('1', SupplyRegion_SUB),
					ECCAP(DispPlantGroup, Season, SupplyRegion_SUB)-ECCOPM_calc(DispPlantGroup, Season, SupplyRegion_SUB))
					!) - SHR_C(Season, PlantGroup)*cMB.Level(PlantGroup, Season)*1000
				}
				Comment: "add SUPPLYRegion dimension?";
			}
			ElementParameter ECDBID_Element {
				IndexDomain: (DispPlantGroup, SupplyRegion);
				Range: PlantGroup_;
				Definition: Element(PlantGroup_,ECDBID(DispPlantGroup, SupplyRegion));
			}
		}
	}
	Section Move_completed_ccalc_parameters_here {
		Comment: {
			"After successfully coding a ccalc_ parameter, move it up to this section.  Then edit efdArrays_all.txt,
			find the corresponding \"cpass_\" parameter, and change the pass indicator to \"0\".  The next time arraycode.exe is run,
			if will omit the declaration of the ccalc_ parameter in the auto-generated section below this section."
		}
		DeclarationSection ED_CPP_Completed {
			Parameter ccalc_cRHS_rCO2QNRle {
				IndexDomain: (SupplyRegion_ALT2);
				Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
				Definition: {
					!IF ((Val(cyr) + UHBSYR('1'))=(CO2_STDBY('1') + 1) and CO2_STDSW('1')>0 and CO2_STDTN(SupplyRegion_ALT2)=2 and CURITR('1')=1)THEN
					!!     AGGREGATE STATE STANDARDS TO FUEL REGION LEVEL, IF USING THAT AGGREGATION
					!IF (CO2_STDQS('01',cyr) > 0.0) THEN
					!!                 FOR EACH EMM REGION, SHARE OUT CO2 QTY USING PCT OF AFFECTED GEN
					! SUM(EMMStates,CO2_STDQS(EMMStates,cyr) * EGEN_NRST(last(PlantType_ECPp2),SupplyRegion_ALT2,EMMStates) /$ EGEN_NRST(last(PlantType_ECPp2),last(SupplyRegion),EMMStates))*2.204
					!ENDIF
					!endif
					
					!         IF ((CURIYR + UHBSYR) .EQ. (CO2_STDBY + 1) .AND. CURITR .EQ. 1)THEN
					!         IF (CO2_STDSW .GT. 0)THEN
					!         IF (CO2_STDSW .GT. 0 .AND. CO2_STDQN(IRG,CURIYR) .GT. 0.0 .AND. CO2_STDTN (IRG) .EQ. 2)THEN
				}
				Comment: {
					"ED$CPP,2
					obsolete - needs to be removed from efdarrays_all"
				}
			}
		}
		DeclarationSection ED_BENCH_Completed {
			Parameter TOLADJ {
				Definition: {
					!1.0
					IF (EMMBMSW = 0) THEN   !turn off benchmarking by increasing tolerance a lot
					  10.0
					ELSEIF (EMMBMSW = 2) THEN  ! loosen benchmarking a little in years 2 and 3
					IF ((CURIYR('1') + UHBSYR('1')) = UPSTYR('1') + 1) THEN
					   1.5
					ELSEIF ((CURIYR('1') + UHBSYR('1')) = UPSTYR('1')+2) THEN
					   3.0
					ELSEIF ((CURIYR('1') + UHBSYR('1')) > UPSTYR('1')+2) THEN
					   5.0
					ENDIF
					ELSEIF (EMMBMSW = 3) THEN  ! loosen benchmarking more significantly in years 2 and 3
					IF ((CURIYR('1') + UHBSYR('1')) = UPSTYR('1') + 1) THEN
					   3.0
					ELSEIF ((CURIYR('1') + UHBSYR('1')) = UPSTYR('1')+2) THEN
					   5.0
					ELSEIF ((CURIYR('1') + UHBSYR('1')) > UPSTYR('1')+2) THEN
					   10.0
					ENDIF
					ELSEIF (EMMBMSW = 1) THEN
					 1.0
					ENDIF
				}
			}
			Parameter ccalc_cCONCLB_LBOUND {
				IndexDomain: (SupplyRegion_ALT2);
				Text: "OML Columns: CONCLB(**) and OML Rows: LBOUND";
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMCLCON(cyr) > 0) THEN
					IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
					    UFLCLNR('1',SupplyRegion_ALT2,cyr) + UFLCLNR('2',SupplyRegion_ALT2,cyr)
					  ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
					     (BMCLCON(cyr) * (1.0 - BMCLTOL('1')*TOLADJ))
					 ENDIF
					ENDIF
					endif
				}
			}
			Parameter ccalc_cCONCLB_UBOUND {
				IndexDomain: (SupplyRegion_ALT2);
				Text: "OML Columns: CONCLB(**) and OML Rows: UBOUND";
				Default: inf;
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMCLCON(cyr) > 0) THEN
					IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
					    UFLCLNR('1',SupplyRegion_ALT2,cyr) + UFLCLNR('2',SupplyRegion_ALT2,cyr)
					  ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
					     (BMCLCON(cyr) * (1.0 + BMCLTOL('1')*TOLADJ))
					  ELSE
					  	inf
					 ENDIF
					else
					 inf !default inf does not work,so add here
					ENDIF
					endif
				}
			}
			Parameter ccalc_cCONNGB_LBOUND {
				IndexDomain: (SupplyRegion_ALT2);
				Text: "OML Columns: CONNGB(**) and OML Rows: LBOUND";
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMNGCON(cyr) > 0) THEN
					  IF (SupplyRegion_ALT2 = 'us00') THEN
					     (BMNGCON(cyr) * (1.0 - BMNGTOL('1')*TOLADJ))
					  ELSEIF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
					    UFLGFNR('1',SupplyRegion_ALT2,cyr) + UFLGFNR('2',SupplyRegion_ALT2,cyr) +
					    UFLGINR('1',SupplyRegion_ALT2,cyr) + UFLGINR('2',SupplyRegion_ALT2,cyr) +
					    UFLGCNR('1',SupplyRegion_ALT2,cyr) + UFLGCNR('2',SupplyRegion_ALT2,cyr)
					  ENDIF
					ENDIF
					endif
				}
			}
			Parameter ccalc_cCONNGB_UBOUND {
				IndexDomain: (SupplyRegion_ALT2);
				Text: "OML Columns: CONNGB(**) and OML Rows: UBOUND";
				Default: inf;
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMNGCON(cyr) > 0) THEN
					IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
					    UFLGFNR('1',SupplyRegion_ALT2,cyr) + UFLGFNR('2',SupplyRegion_ALT2,cyr) +
					    UFLGINR('1',SupplyRegion_ALT2,cyr) + UFLGINR('2',SupplyRegion_ALT2,cyr) +
					    UFLGCNR('1',SupplyRegion_ALT2,cyr) + UFLGCNR('2',SupplyRegion_ALT2,cyr)
					  ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
					     (BMNGCON(cyr) * (1.0 + BMNGTOL('1')*TOLADJ))
					  ELSE
					  	inf
					 ENDIF
					else
					 inf !default inf does not work,so add here
					ENDIF
					endif
				}
			}
			Parameter ccalc_cGENCLB_LBOUND {
				IndexDomain: (SupplyRegion_ALT2);
				Text: "OML Columns: GENCLB(**) and OML Rows: LBOUND";
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMCLGEN(cyr) > 0) THEN
					IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
					     UGNCLNR('1',SupplyRegion_ALT2,cyr) + UGNCLNR('2',SupplyRegion_ALT2,cyr) +
					     (CGNTGEN(SupplyRegion_ALT2,cyr, '01','1') + CGNTGEN(SupplyRegion_ALT2,cyr, '01','2')) * 0.001
					  ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
					     (BMCLGEN(cyr) * (1.0 - BMCLTOL('1')*TOLADJ))
					 ENDIF
					ENDIF
					endif
				}
			}
			Parameter ccalc_cGENCLB_UBOUND {
				IndexDomain: (SupplyRegion_ALT2);
				Text: "OML Columns: GENCLB(**) and OML Rows: UBOUND";
				Default: inf;
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMCLGEN(cyr) > 0) THEN
					IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
					     UGNCLNR('1',SupplyRegion_ALT2,cyr) + UGNCLNR('2',SupplyRegion_ALT2,cyr) +
					     (CGNTGEN(SupplyRegion_ALT2,cyr, '01','1') + CGNTGEN(SupplyRegion_ALT2,cyr, '01','2')) * 0.001
					  ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
					     (BMCLGEN(cyr) * (1.0 + BMCLTOL('1')*TOLADJ))
					  ELSE
					  	inf
					 ENDIF
					else
					 inf !default inf does not work,so add here
					ENDIF
					endif
				}
			}
			Parameter ccalc_cGENNGB_LBOUND {
				IndexDomain: (SupplyRegion_ALT2);
				Text: "OML Columns: GENNGB(**) and OML Rows: LBOUND";
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMNGGEN(cyr) > 0) THEN
					IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
					    UGNGFNR('1',SupplyRegion_ALT2,cyr) + UGNGFNR('2',SupplyRegion_ALT2,cyr) +
					    UGNGINR('1',SupplyRegion_ALT2,cyr) + UGNGINR('2',SupplyRegion_ALT2,cyr) +
					    UGNGCNR('1',SupplyRegion_ALT2,cyr) + UGNGCNR('2',SupplyRegion_ALT2,cyr) +
					    (CGNTGEN(SupplyRegion_ALT2,cyr,'03','1') + CGNTGEN(SupplyRegion_ALT2,cyr,'03','2')) * 0.001
					  ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
					     (BMNGGEN(cyr) * (1.0 - BMNGTOL('1')*TOLADJ))
					 ENDIF
					ENDIF
					endif
				}
			}
			Parameter ccalc_cGENNGB_UBOUND {
				IndexDomain: (SupplyRegion_ALT2);
				Text: "OML Columns: GENNGB(**) and OML Rows: UBOUND";
				Default: inf;
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMNGGEN(cyr) > 0) THEN
					IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
					    UGNGFNR('1',SupplyRegion_ALT2,cyr) + UGNGFNR('2',SupplyRegion_ALT2,cyr) +
					    UGNGINR('1',SupplyRegion_ALT2,cyr) + UGNGINR('2',SupplyRegion_ALT2,cyr) +
					    UGNGCNR('1',SupplyRegion_ALT2,cyr) + UGNGCNR('2',SupplyRegion_ALT2,cyr) +
					    (CGNTGEN(SupplyRegion_ALT2,cyr,'03','1') + CGNTGEN(SupplyRegion_ALT2,cyr,'03','2')) * 0.001
					  ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
					     (BMNGGEN(cyr) * (1.0 + BMNGTOL('1')*TOLADJ))
					  ELSE
					  	inf
					 ENDIF
					else
					 inf  !default inf does not work, so add here
					ENDIF
					endif
				}
			}
			Parameter ccalc_cCONCLB_rCONCLeq {
				IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
				Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMCLCON(cyr) > 0.0) THEN
					  IF (SupplyRegion_ALTto = SupplyRegion_ALT2 and (SupplyRegion_ALTTo <> 'ascc' and SupplyRegion_ALTTo <> 'heco')) THEN
					   -1.0
					  ELSEIF (SupplyRegion_ALT2 <> 'us00' and SupplyRegion_ALTTo = 'us00') THEN
					    1.0
					  ELSE
					   0.0
					 ENDIF
					ENDIF
					endif
				}
			}
			Parameter ccalc_cCONNGB_rCONNGeq {
				IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
				Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMNGCON(cyr) > 0.0) THEN
					  IF (SupplyRegion_ALTto = SupplyRegion_ALT2 and (SupplyRegion_ALTTo <> 'ascc' and SupplyRegion_ALTTo <> 'heco')) THEN
					   -1.0
					  ELSEIF (SupplyRegion_ALT2 <> 'us00' and SupplyRegion_ALTTo = 'us00') THEN
					    1.0
					  ELSE
					   0.0
					 ENDIF
					ENDIF
					endif
				}
			}
			Parameter ccalc_cGENNGB_rGENNGeq {
				IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
				Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMNGGEN(cyr) > 0.0) THEN
					  IF (SupplyRegion_ALTto = SupplyRegion_ALT2 and (SupplyRegion_ALTTo <> 'ascc' and SupplyRegion_ALTTo <> 'heco')) THEN
					   -1.0
					  ELSEIF (SupplyRegion_ALT2 <> 'us00' and SupplyRegion_ALTTo = 'us00') THEN
					    1.0
					  ELSE
					   0.0
					 ENDIF
					ENDIF
					endif
				}
			}
			Parameter ccalc_cGENCLB_rGENCLeq {
				IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
				Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
				Definition: {
					if (BMCLTOL('1') > 0.0 or BMNGTOL('1') > 0.0 or BMOLTOL('1') > 0.0) then
					IF (BMCLGEN(cyr) > 0.0) THEN
					  IF (SupplyRegion_ALTto = SupplyRegion_ALT2 and (SupplyRegion_ALTTo <> 'ascc' and SupplyRegion_ALTTo <> 'heco')) THEN
					   -1.0
					  ELSEIF (SupplyRegion_ALT2 <> 'us00' and SupplyRegion_ALTTo = 'us00') THEN
					    1.0
					  ELSE
					   0.0
					 ENDIF
					ENDIF
					endif
				}
			}
			Parameter ccalc_cCNIMPBUS_LBOUND {
				Text: "OML Columns: CNIMPBUS and OML Rows: LBOUND";
				Definition: {
					if BMNETIMP(cyr)>0 then
					  (BMNETIMP(cyr) - sum(SupplyRegion_SUB,ZTIMPF(SupplyRegion_SUB))/1000000.0 + sum(SupplyRegion_SUB,(ZTEXPF(SupplyRegion_SUB) + EXPCI(cyr, SupplyRegion_SUB)))/1000000.0)*
					  (1.0-BMIMPTOL('1')*TOLADJ)
					endif
				}
				Comment: "ED$BENCH,33";
			}
			Parameter ccalc_cCNIMPBUS_rCANIMPUSeq {
				Text: "OML Columns: CNIMPBUS and OML Rows: CANIMPUS";
				Definition: {
					if BMNETIMP(cyr)>0 then
					  -1
					endif
				}
				Comment: "ED$BENCH,32";
			}
			Parameter ccalc_cCNIMPBUS_UBOUND {
				Text: "OML Columns: CNIMPBUS and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if BMNETIMP(cyr)>0 then
					  (BMNETIMP(cyr) - sum(SupplyRegion_SUB,ZTIMPF(SupplyRegion_SUB))/1000000.0 + sum(SupplyRegion_SUB,(ZTEXPF(SupplyRegion_SUB) + EXPCI(cyr, SupplyRegion_SUB)))/1000000.0)*
					  (1.0+BMIMPTOL('1')*TOLADJ)
					endif
				}
				Comment: "ED$BENCH,33";
			}
		}
		DeclarationSection ED_BIO_Completed {
			Parameter ccalc_cBiomassOtherUsage_LBOUND {
				IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0;
				Text: "OML Columns: B(**)(**)(**)X and OML Rows: LBOUND";
				Definition: {
					!Done in EDBIO procedure
				}
				Comment: {
					"Done in EDBIO procedure
					ED$BIO,9 ED$BIO,11 ED$BIO,13 ED$BIO,15 ED$BIO,17 ED$BIO,19"
				}
			}
			Parameter ccalc_cBiomassOtherUsage_UBOUND {
				IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType);
				Text: "OML Columns: B(**)(**)(**)X and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					!Done in EDBIO procedure
				}
				Comment: {
					"Done in EDBIO procedure
					ED$BIO,9 ED$BIO,11 ED$BIO,13 ED$BIO,15 ED$BIO,17 ED$BIO,19"
				}
			}
			Parameter ccalc_cBiomassOtherUsage_rS_WD_typele {
				IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector);
				Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
				Definition: {
					!Done in the procedure EDBIO
					!!              Account for Other Uses of Biomass
					!
					!!              Residential
					!
					!               IF (MP_BM_RS(I_SUPt) .GT. 0.0) THEN
					!
					!                  COLUMN = 'B' // BR // 'RS' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
					!
					!                  IF (EFDMAT .EQ. 0) THEN
					!          COEFF = DBLE(1.0)
					!          CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,8')
					!        END IF
					!
					!               IF (MP_BM_CM(I_SUPt) .GT. 0.0) THEN
					!
					!                  COLUMN = 'B' // BR // 'CM' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
					!
					!                  IF (EFDMAT .EQ. 0) THEN
					!          COEFF = DBLE(1.0)
					!          CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,10')
					!           END IF
					!!              Industrial
					!
					!               IF (MP_BM_IN(I_SUPt) .GT. 0.0) THEN
					!
					!                  COLUMN = 'B' // BR // 'IN' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
					!
					!                  IF (EFDMAT .EQ. 0) THEN
					!          COEFF = DBLE(1.0)
					!          CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,12')
					!        END IF
					!!!              Hydrogen Production
					!
					!               IF (MP_BM_H2(I_SUPt) .GT. 0.0) THEN
					!
					!                  COLUMN = 'B' // BR // 'H2' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
					!
					!                  IF (EFDMAT .EQ. 0) THEN
					!                     COEFF = DBLE(1.0)
					!                     CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,14')
					!                  END IF
					!!              Cellulosic Ethanol Production
					!
					!               IF (MP_BM_ET(I_SUPt) .GT. 0.0) THEN
					!
					!                  COLUMN = 'B' // BR // 'ET' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
					!
					!                  IF (EFDMAT .EQ. 0) THEN
					!                     COEFF = DBLE(1.0)
					!                     CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,16')
					!                  END IF
					!!              Biomass to Liquids
					!
					!               IF (MP_BM_BT(I_SUPt) .GT. 0.0) THEN
					!
					!                  COLUMN = 'B' // BR // 'BT' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
					!
					!                  IF (EFDMAT .EQ. 0) THEN
					!                     COEFF = DBLE(1.0)
					!                     CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,18')
					!                  END IF
					!         END DO      !CRG
					!         END IF         !Biomass Supply Type is Available and Can be Used for Power Production
					!      END DO            !I_SUPt
				}
				Comment: {
					"Done in the procedure EDBIO
					ED$BIO,8 ED$BIO,10 ED$BIO,12 ED$BIO,14 ED$BIO,16 ED$BIO,18"
				}
			}
			Parameter ccalc_cBP_type_EFDCOSTS {
				IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0;
				Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in the procedure EDBIO
					!
				}
				Comment: {
					"Done in the procedure EDBIO
					ED$BIO,6"
				}
			}
			Parameter ccalc_cBP_type_UBOUND {
				IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
				Text: "OML Columns: BP(**)(**)(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					!Done in the procedure EDBIO
				}
				Comment: {
					"!Done in the procedure EDBIO
					ED$BIO,5"
				}
			}
			Parameter ccalc_cBP_type_rS_WD_typele {
				IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep);
				Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
				Definition: {
					!Done in the procedure EDBIO
				}
				Comment: {
					"Done in the procedure EDBIO
					ED$BIO,7  ED$BIO,4"
				}
			}
			Parameter ccalc_cBP_type_rS_WD_allle {
				IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
				Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
				Definition: {
					!!Done in the procedure EDBIO
				}
				Comment: {
					"Done in the procedure EDBIO
					ED$BIO,3"
				}
			}
		}
		DeclarationSection ED_BTU_Completed {
			Parameter CARRG_ADJ {
				IndexDomain: (CarbonRegion,FuelRegion_ALT1);
				Definition: {
					IF (FuelRegion_ALT1 = 'YJ') THEN
						1.0 - CO2NJEXC(CO2CapGroup_element(CarbonRegion),cyr)
					ELSEIF (FuelRegion_ALT1 = 'VA') THEN
						1.0 - CO2VAEXC(CO2CapGroup_element(CarbonRegion),cyr)
					ELSE
						1.0
					ENDIF
				}
			}
			Parameter DSADJ {
				IndexDomain: PlantType;
				Definition: {
					If (PlantType = 'CTX') or (PlantType = 'ACT') or (PlantType = 'CCX') or (PlantType = 'ACC') or (PlantType = 'ACS') or (PlantType = 'AC2') then
						1.10
					else
						1.0
					endif
				}
			}
			Parameter GASSH_MaxOilMinGas {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (PlantType >= 'CTN') and (PlantType <= 'DGP') then
						if  (IRS(PlantType) = 1) then
					              if (EDMXRS_EFD(PlantType,FuelRegion_ALT1) > 1.0) then
					                   0
					              else
					                   1-EDMXRS_EFD(PlantType,FuelRegion_ALT1)
					              endif
					        else
					              if (EDMXDS_EFD(PlantType,FuelRegion_ALT1) > 1.0) then
					                   0
					              else
					                   1-EDMXDS_EFD(PlantType,FuelRegion_ALT1)
					              endif
					        endif
					endif
				}
			}
			Parameter OLSH_MaxOilMinGas {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					
					if (PlantType >= 'CTN') and (PlantType <= 'DGP') then
					  if  (IRS(PlantType) = 1) then
					    if (EDMXRS_EFD(PlantType,FuelRegion_ALT1) > 1.0) then
					         1
					    else
					         EDMXRS_EFD(PlantType,FuelRegion_ALT1)
					    endif
					  else
					    if (EDMXDS_EFD(PlantType,FuelRegion_ALT1) > 1.0) then
					         1*DSADJ(PlantType)
					    else
					         EDMXDS_EFD(PlantType,FuelRegion_ALT1)*DSADJ(PlantType)
					    endif
					  endif
					endif
				}
			}
			Parameter IWD {
				IndexDomain: PlantType;
				Definition: {
					if (WFLTP_to_FuelType(PlantType,'1') = 'WD') or
					     (WFLTP_to_FuelType(PlantType,'2') = 'WD')  or
					     (WFLTP_to_FuelType(PlantType,'3') = 'WD') then
					        1
					else
					        0
					endif
				}
			}
			Parameter IDS {
				IndexDomain: PlantType;
				Definition: {
					if ((UIDIS(WFLTP_to_FuelType(PlantType,'1')) = 1 or
					     UIDIS(WFLTP_to_FuelType(PlantType,'2')) = 1 or
					     UIDIS(WFLTP_to_FuelType(PlantType,'3')) = 1)) then
					        1
					else
					        0
					endif
				}
			}
			Parameter IRS {
				IndexDomain: PlantType;
				Definition: {
					if ((UIRES(WFLTP_to_FuelType(PlantType,'1')) = 1 or
					     UIRES(WFLTP_to_FuelType(PlantType,'2')) = 1 or
					     UIRES(WFLTP_to_FuelType(PlantType,'3')) = 1)) then
					        1
					else
					        0
					endif
				}
			}
			Parameter IGS {
				IndexDomain: PlantType;
				Definition: {
					if ((UIGAS(WFLTP_to_FuelType(PlantType,'1')) = 1 or
					     UIGAS(WFLTP_to_FuelType(PlantType,'2')) = 1 or
					     UIGAS(WFLTP_to_FuelType(PlantType,'3')) = 1)) then
					        1
					else
					        0
					endif
				}
			}
			Parameter CFSH {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1) then
					 	UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
					else
					 	UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))
					endif
				}
			}
			Parameter OLSH {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
						if (USW_ECPCF('1') = 0) then   !no cofiring option
							if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)) > 1) then
								EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1))
							else
								EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
							endif
						else
							if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1) then
								EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
							else
								EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
							endif
						endif
					elseif (PlantType >= 'CTN') and (PlantType <= 'DGP') then
						if (IGS(PlantType) = 0 and (IRS(PlantType) = 1 or IDS(PlantType) = 1)) then
					              1.0
					        elseif (IGS(PlantType) = 1 and (IRS(PlantType) = 1 or IDS(PlantType) = 1)) then
					              (1.0 - GASSH(PlantType,FuelRegion_ALT1)) *DSADJ(PlantType)
					        endif
					endif
				}
			}
			Parameter GASSH {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
						if (USW_ECPCF('1') = 0) then   !no cofiring option
							if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)) > 1) then
								EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1))
							else
								EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
							endif
						else
							if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1)  then
								EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(Coal_PlantType_ECP(PlantType),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
							else
								EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
							endif
						endif
					elseif (PlantType >= 'CTN') and (PlantType <= 'DGP') then
					        if (IGS(PlantType) = 1 and (IRS(PlantType) = 0 and IDS(PlantType) = 0)) then
					              1.0
					        elseif (IGS(PlantType) = 1 and (IRS(PlantType) = 1 or IDS(PlantType) = 1)) then
					            if 1.0 <= EDMXGS_EFD(PlantType,FuelRegion_ALT1) then
					                 1.0
					            else
					                 EDMXGS_EFD(PlantType,FuelRegion_ALT1)
					            endif
					        endif
					endif
				}
			}
			Parameter CLSH {
				IndexDomain: (PlantType,FuelRegion_ALT1);
				Definition: {
					if (USW_ECPCF('1') = 0) then   !no cofiring option
						1-(GASSH(PlantType,FuelRegion_ALT1)+OLSH(PlantType,FuelRegion_ALT1))
					else
						1-(GASSH(PlantType,FuelRegion_ALT1)+OLSH(PlantType,FuelRegion_ALT1)+CFSH(PlantType,FuelRegion_ALT1))
					endif
				}
			}
			Parameter SEQRT {
				IndexDomain: PlantType;
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
						UPPCEF(Coal_PlantType_ECP(PlantType))
					elseif (PlantType = 'ACS') then
					    UPPCEF(WICS_Element)
					elseif (PlantType = 'AC2') then
					    UPPCEF(WIA2_Element)
					elseif (PlantType < 'CTN') or ((PlantType > 'ACS') and (PlantType < 'B1X')) then
					    0
					endif
				}
				Comment: "get sequestration efficiency keyed by ECP plant types based on EFD plant types";
			}
			Parameter BCTLN_COEFF {
				IndexDomain: (INOXP,CoalDemandRegion,Season) | ord(INOXP) <= NOX_GRP('1');
				Definition: {
					(CTLSUM(CoalDemandRegion) * EETIME(Season, BCTL_SupplyRegion) / 8760.0)*
					(NOX_NEW('01',WIIG_Element) * (NOX_EFD(Season, INOXP) / EETIME(Season, BCTL_SupplyRegion)) * NOX_SHR_BY_CLRG(nHGCODE_to_CoalDemandRegion(CoalDemandRegion), INOXP)* 0.0005 * 1000.0)
				}
			}
			Parameter ccalc_cB_rS_WD_allle {
				IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | ord(CoalDemandRegion_ALT2) = ord(EPCLMP_to_int_fuel_region(FuelRegion_ALT1));
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
						if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
							if (GenerationSeason = 'X') then
								if (FuelShareOption = '11') then
									if (USW_ECPCF('1') = 1) then   ! cofiring option
										CFSH(PlantType,FuelRegion_ALT1)
									endif
								endif
							endif
						endif
					elseif ( (PlantType >= 'CTN') and (PlantType <= 'DGP') ) then
						if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
						        !if (FuelShareOption = '1X')  then
								if (IWD(PlantType) = 1) then  !Biomass
									if (FuelShareOption = '1X')  then
										if (GenerationSeason = 'X') then
											1
										endif
									endif
								endif
							!endif
					        endif
					endif
				}
			}
			Parameter ccalc_cB_rNGle {
				IndexDomain: {
					(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | ord(GasRegion) = ord(EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) and
					ord(GasSeason) = ord(GenerationSeason)
				}
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
					   if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
						if (GenerationSeason = 'X') then
							if (FuelShareOption = '11') then
								IF (GASSH(PlantType,FuelRegion_ALT1) > 0.0) THEN
									GASSH(PlantType,FuelRegion_ALT1) * 0.5
								endif			
							endif
						endif
					   endif
					elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
					   if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					        !if (FuelShareOption = '1X')  then
						if   ( (IGS(PlantType) = 1)   and     !gas only
							(IRS(PlantType) = 0)  and
							(IDS(PlantType) = 0) )  then
							        if (FuelShareOption = '1X')  then
									if (GenerationSeason >= '1' and GenerationSeason <= '3') then
										GASSH(PlantType,FuelRegion_ALT1)
									endif
								endif
						elseif ( (IGS(PlantType) = 1)   and  !dual fired
								((IRS(PlantType) = 1) or
								(IDS(PlantType) = 1)) )   then
								if (FuelShareOption = '1X')  then
									if (GenerationSeason >= '1' and GenerationSeason <= '3') then
										GASSH(PlantType,FuelRegion_ALT1)
									endif
								elseif (FuelShareOption = '2X') then
									if (GenerationSeason >= '1' and GenerationSeason <= '3') then
										IF (GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) > 0.0) THEN
											GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1)
										endif
									endif
					
								endif		
						endif
							!elseif  ( (IWD(PlantType) = 1) then  !Biomass
							!endif
						!endif
					   endif
					endif
				}
			}
			Parameter ccalc_cB_rRSle {
				IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | CensusRegion = EPCSMP_to_CensusRegion(FuelRegion_ALT1);
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
				Definition: {
					if  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
						if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
						        !if (FuelShareOption = '1X')  then
								if ( (IGS(PlantType) = 0)   and  !oil only
									((IRS(PlantType) = 1) or
									(IDS(PlantType) = 1)) )   then
									if (FuelShareOption = '1X')  then
										if (GenerationSeason = 'X') then
											if (IRS(PlantType) = 1) then
												OLSH(PlantType,FuelRegion_ALT1)
										        endif	
										endif
									endif
								elseif ( (IGS(PlantType) = 1)   and  !dual fired
									((IRS(PlantType) = 1) or
									(IDS(PlantType) = 1)) )   then
									if (FuelShareOption = '1X')  then
										if (GenerationSeason >= '1' and GenerationSeason <= '3') then
											if (IRS(PlantType) = 1) then
												OLSH(PlantType,FuelRegion_ALT1)
										        endif	
										endif
									elseif (FuelShareOption = '2X') then
										if (GenerationSeason >= '1' and GenerationSeason <= '3') then
											if (IRS(PlantType) = 1) then
												OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1)
										        endif	
										endif
									endif		
								endif
								!elseif  ( (IWD(PlantType) = 1) then  !Biomass
								!endif
							!endif
					        endif
					endif
				}
			}
			Parameter ccalc_cB_rDSle {
				IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | CensusRegion = EPCSMP_to_CensusRegion(FuelRegion_ALT1);
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
						if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
							if (GenerationSeason = 'X') then
								if (FuelShareOption = '11') then
									if (OLSH(PlantType,FuelRegion_ALT1) > 0.0) then
										OLSH(PlantType,FuelRegion_ALT1)
									endif	
								endif
							endif
						endif
					elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
						if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
						        !if (FuelShareOption = '1X')  then
								if ( (IGS(PlantType) = 0)   and  !oil only
									((IRS(PlantType) = 1) or
									(IDS(PlantType) = 1)) )   then
									if (FuelShareOption = '1X')  then
										if (GenerationSeason = 'X') then
											if (IRS(PlantType) <> 1) then
												OLSH(PlantType,FuelRegion_ALT1)
										        endif	
										endif
									endif
								elseif ( (IGS(PlantType) = 1)   and  !dual fired
									((IRS(PlantType) = 1) or
									(IDS(PlantType) = 1)) )   then
									if (FuelShareOption = '1X')  then
										if (GenerationSeason >= '1' and GenerationSeason <= '3') then
											if (IRS(PlantType) <> 1) then
												OLSH(PlantType,FuelRegion_ALT1)
										        endif	
										endif
									elseif (FuelShareOption = '2X') then
										if (GenerationSeason >= '1' and GenerationSeason <= '3') then
											if (IRS(PlantType) <> 1) then
												OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1)
										        endif	
										endif
									endif		
								endif
								!elseif  ( (IWD(PlantType) = 1) then  !Biomass
								!endif
							!endif
					        endif
					endif
				}
			}
			Parameter ccalc_cB_rCFGn {
				IndexDomain: {
					(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)  | ord(CoalDemandRegion_ALT1) = ord(EPCLMP_to_int_fuel_region(FuelRegion_ALT1))
					and PlantType_ECP = Coal_PlantType_ECP(PlantType)
				}
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
						if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
							if (GenerationSeason = 'X') then
								if (FuelShareOption = '11') then
									if (USW_ECPCF('1') = 1) then   ! cofiring option
										CFSH(PlantType,FuelRegion_ALT1) /$ HRTCLNR(CoalDemandRegion_ALT1,cyr,PlantType_ECP) * 1000000.0
									endif
								endif
							endif
						endif
					endif
				}
			}
			Parameter ccalc_cB_rCARBONle {
				IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | CarbonCap_Regional(CarbonRegion) = 1;
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
					if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
						if (GenerationSeason = 'X') then
							if (FuelShareOption = '11') then
								if ( (1.0 - SEQRT(PlantType)) * (UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) * CO2_CL_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) +
											(EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) +
											EDSEL(cyr) * 0.001 * OLSH(PlantType, FuelRegion_ALT1)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))) > EFD_MIN('1')) then
									CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * (UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) * CO2_CL_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) +
											(EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) +
											EDSEL(cyr) * 0.001 * OLSH(PlantType, FuelRegion_ALT1)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)))
								endif			
							endif
						endif
					endif
					elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
					if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					    	if  ( (IGS(PlantType) = 1) and (IRS(PlantType) = 0)  and  (IDS(PlantType) = 0) )  then  !gas only
						        if (FuelShareOption = '1X')  then
								if (ORD(GenerationSeason) <= NumSeasons ) then
									CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *(1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))		
								endif
							endif
						elseif ( (IGS(PlantType) = 0)   and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1)) )   then !oil only
							if (FuelShareOption = '1X')  then
								if (GenerationSeason = 'X') then
									if (IRS(PlantType) = 1) then
										CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
									else
										CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
									endif
								endif
							endif
						elseif ( (IGS(PlantType) = 1) and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1)) ) then  !dual fired
							if (FuelShareOption = '1X')  then
								if (ORD(GenerationSeason) <= NumSeasons) then
									if (IRS(PlantType) = 1) then
										if ( ( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
										CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
										endif
									else
										if  ( ( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
										CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
										endif
									endif
								endif
							elseif (FuelShareOption = '2X') then
								if (ORD(GenerationSeason) <= NumSeasons) then
									if (IRS(PlantType) = 1) then
										if ( ( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
											CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
										endif
									else
										if  ( ( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
											CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
										endif
									endif
								endif
					
							endif		
						endif
						!elseif  ( (IWD(PlantType) = 1) then  !Biomass
						!endif
					!endif
					    endif
					endif
				}
			}
			Parameter ccalc_cB_rCARBONn {
				IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)| CarbonCap_Regional(CarbonRegion) = 0;
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
					if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
						if (GenerationSeason = 'X') then
							if (FuelShareOption = '11') then
								if ( (1.0 - SEQRT(PlantType)) * (UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) * CO2_CL_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) +
											(EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) +
											EDSEL(cyr) * 0.001 * OLSH(PlantType, FuelRegion_ALT1)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))) > EFD_MIN('1')) then
									CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * (UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) * CO2_CL_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) +
											(EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) +
											EDSEL(cyr) * 0.001 * OLSH(PlantType, FuelRegion_ALT1)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)))
								endif			
							endif
						endif
					endif
					elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
					if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					    	if  ( (IGS(PlantType) = 1) and (IRS(PlantType) = 0)  and  (IDS(PlantType) = 0) )  then  !gas only
						        if (FuelShareOption = '1X')  then
								if (ORD(GenerationSeason) <= NumSeasons ) then
									CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *(1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))		
								endif
							endif
						elseif ( (IGS(PlantType) = 0)   and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1)) )   then !oil only
							if (FuelShareOption = '1X')  then
								if (GenerationSeason = 'X') then
									if (IRS(PlantType) = 1) then
										CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
									else
										CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
									endif
								endif
							endif
						elseif ( (IGS(PlantType) = 1) and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1)) ) then  !dual fired
							if (FuelShareOption = '1X')  then
								if (ORD(GenerationSeason) <= NumSeasons) then
									if (IRS(PlantType) = 1) then
										if ( ( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
										CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
										endif
									else
										if  ( ( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
										CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
										endif
									endif
								endif
							elseif (FuelShareOption = '2X') then
								if (ORD(GenerationSeason) <= NumSeasons) then
									if (IRS(PlantType) = 1) then
										if ( ( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
											CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
										endif
									else
										if  ( ( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
											CARRG_ADJ(CarbonRegion,FuelRegion_ALT1) *( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
										endif
									endif
								endif
					
							endif		
						endif
						!elseif  ( (IWD(PlantType) = 1) then  !Biomass
						!endif
					!endif
					    endif
					endif
				}
				Comment: {
					"rCARBONn = Regional Carbon free row
					cB = BTU vector"
				}
			}
			Parameter ccalc_cB_rCARBONXXle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)| CarbonCap_National = 1;
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
					    if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
						if (GenerationSeason = 'X') then
							if (FuelShareOption = '11') then
					              		if (GASSH(PlantType,FuelRegion_ALT1) > 0.0) then
					              			if (SEQRT(PlantType) > 0) then
					              				if ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')then
					              					-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					              				endif
					              			endif
					              		elseif (OLSH(PlantType,FuelRegion_ALT1) > 0.0) then
					              			if (SEQRT(PlantType) > 0) then
					              				if ( EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1') then
					              					-1.0 * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					              				endif
					              			endif
					              		else
					              			if (SEQRT(PlantType) > 0) then
					              				if ( SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) ) > EFD_MIN('1') then
					              						-1.0 * SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1)
					              				endif
					              			endif
					              		endif
							endif
						endif
					    endif
					elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
					    if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
						if  ( (IGS(PlantType) = 1) and (IRS(PlantType) = 0)  and  (IDS(PlantType) = 0) )  then  !gas only
					    		if (FuelShareOption = '1X')  then
								if (ORD(GenerationSeason) <= NumSeasons) then
					      				if (SEQRT(PlantType) > 0) then
					      					-1 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					      				endif
								endif
					  		endif
						elseif ( (IGS(PlantType) = 0)   and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1))) then  !oil only
					  		if (FuelShareOption = '1X')  then
								if (GenerationSeason = 'X') then
					      				if (SEQRT(PlantType) > 0) then
					      					if (IRS(PlantType) = 1) then
					      						 ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					      					ELSE
					      						 EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					      					endif
					      				endif
								endif
					  		endif
						elseif ( (IGS(PlantType) = 1) and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1)) ) then  !dual fired
					  		if (FuelShareOption = '1X')  then
								if (ORD(GenerationSeason) <= NumSeasons) then
					      				if (SEQRT(PlantType) > 0) then
					      					if (OLSH(PlantType,FuelRegion_ALT1) > 0) then
					      						if (IRS(PlantType) = 1) then
					      							if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					      								-1 * ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					      							endif
					      						else
					      							if ( (EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType))  > EFD_MIN('1')) then
					      								-1 * ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					      							endif
					      						endif
					      					else
					      						if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					      							-1 * ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					      						endif
					      					endif
									endif
								endif
					  		elseif (FuelShareOption = '2X') then
								if (ORD(GenerationSeason) <= NumSeasons) then
					      				if (SEQRT(PlantType) > 0) then
					      					if (OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) > 0) then
					      						if (IRS(PlantType) = 1) then
					      							if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					      								-1 * ( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					      							endif
					      						else
					      							if ( (EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					      								-1 * ( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					      							endif
					      						endif
					      					else
					      						if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')) then
					      								-1 * ( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					      						endif
					      					endif
					      				endif
								endif
					
							  endif		
						endif
					!elseif  ( (IWD(PlantType) = 1) then  !Biomass
					!endif
					!endif
					endif
					endif
				}
			}
			Parameter ccalc_cB_rCARBONXXn {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | CarbonCap_National = 0;
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
				Definition: {
					                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
					                            if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					                    		if (GenerationSeason = 'X') then
					                      			if (FuelShareOption = '11') then
					                                      		if (GASSH(PlantType,FuelRegion_ALT1) > 0.0) then
					                                      			if (SEQRT(PlantType) > 0) then
					                                      				if ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')then
					                                      					-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                                      				endif
					                                      			endif
					                                      		elseif (OLSH(PlantType,FuelRegion_ALT1) > 0.0) then
					                                      			if (SEQRT(PlantType) > 0) then
					                                      				if ( EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1') then
					                                      					-1.0 * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                                      				endif
					                                      			endif
					                                      		else
					                                      			if (SEQRT(PlantType) > 0) then
					                                      				if ( SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) ) > EFD_MIN('1') then
					                                      						-1.0 * SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1)
					                                      				endif
					                                      			endif
					                                      		endif
					                      			endif
					                    		endif
					                            endif
					                    elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
					                            if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					                    		if  ( (IGS(PlantType) = 1) and (IRS(PlantType) = 0)  and  (IDS(PlantType) = 0) )  then  !gas only
					                            		if (FuelShareOption = '1X')  then
					                    				if (ORD(GenerationSeason) <= NumSeasons) then
					                              				if (SEQRT(PlantType) > 0) then
					                              					-1 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                              				endif
					                    				endif
					                    	  		endif
					                    		elseif ( (IGS(PlantType) = 0)   and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1))) then  !oil only
					                    	  		if (FuelShareOption = '1X')  then
					                    				if (GenerationSeason = 'X') then
					                              				if (SEQRT(PlantType) > 0) then
					                              					if (IRS(PlantType) = 1) then
					                              						 ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                              					ELSE
					                              						 EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                              					endif
					                              				endif
					                    				endif
					                    	  		endif
					                    		elseif ( (IGS(PlantType) = 1) and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1)) ) then  !dual fired
					                    	  		if (FuelShareOption = '1X')  then
					                    				if (ORD(GenerationSeason) <= NumSeasons) then
					                              				if (SEQRT(PlantType) > 0) then
					                              					if (OLSH(PlantType,FuelRegion_ALT1) > 0) then
					                              						if (IRS(PlantType) = 1) then
					                              							if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					                              								-1 * ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                              							endif
					                              						else
					                              							if ( (EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType))  > EFD_MIN('1')) then
					                              								-1 * ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                              							endif
					                              						endif
					                              					else
					                              						if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					                              							-1 * ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                              						endif
					                              					endif
					                    					endif
					                    				endif
					                    	  		elseif (FuelShareOption = '2X') then
					                    				if (ORD(GenerationSeason) <= NumSeasons) then
					                              				if (SEQRT(PlantType) > 0) then
					                              					if (OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) > 0) then
					                              						if (IRS(PlantType) = 1) then
					                              							if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					                              								-1 * ( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                              							endif
					                              						else
					                              							if ( (EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					                              								-1 * ( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                              							endif
					                              						endif
					                              					else
					                              						if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')) then
					                              								-1 * ( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                              						endif
					                              					endif
					                              				endif
					                    				endif
					
					                    			  endif		
					                    		endif
					                    !elseif  ( (IWD(PlantType) = 1) then  !Biomass
					                    !endif
					                    !endif
					                    	endif
					                    endif
				}
			}
			Parameter ccalc_cB_rCARSEQXXn {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQXX";
				Definition: {
					                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
					                    	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					                    		if (GenerationSeason = 'X') then
					                    			if (FuelShareOption = '11') then
					                    				if (GASSH(PlantType,FuelRegion_ALT1) > 0.0) then
					                    					if (SEQRT(PlantType) > 0) then
					                    						if ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')then
					                    							 EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                    						endif
					                    					endif
					                    				elseif (OLSH(PlantType,FuelRegion_ALT1) > 0.0) then
					                    					if (SEQRT(PlantType) > 0) then
					                    						if ( EDSEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1') then
					                    							EDSEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                    						endif
					                    					endif
					                    				else
					                    					if (SEQRT(PlantType) > 0) then
					                    						if ( SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) ) > EFD_MIN('1') then
					                    							 SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1)
					                    						endif
					                    					endif
					                    				endif
					                    			endif
					                    		endif
					                    	endif
					                    elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
					                    	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					                    		if   ( (IGS(PlantType) = 1) and (IRS(PlantType) = 0)  and  (IDS(PlantType) = 0) )  then  !gas only
					                    		        if (FuelShareOption = '1X')  then
					                    				if (GenerationSeason >= '1' and GenerationSeason <= '3') then
					                    					if (SEQRT(PlantType) > 0) then
					                    						EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                    					endif
					                    				endif
					                    			endif
					                    		elseif ( (IGS(PlantType) = 0)   and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1))) then  !oil only
					                    			if (FuelShareOption = '1X')  then
					                    				if (GenerationSeason = 'X') then
					                    					if (SEQRT(PlantType) > 0) then
					                    						if (IRS(PlantType) = 1) then
					                    							ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                    						ELSE
					                    							EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
					                    						endif
					                    					endif
					                    				endif
					                    			endif
					                    		elseif ( (IGS(PlantType) = 1) and ((IRS(PlantType) = 1) or (IDS(PlantType) = 1)) ) then  !dual fired
					                    			if (FuelShareOption = '1X')  then
					                    				if (GenerationSeason >= '1' and GenerationSeason <= '3') then
					                    					if (SEQRT(PlantType) > 0) then
					                    						if (OLSH(PlantType,FuelRegion_ALT1) > 0) then
					                    							if (IRS(PlantType) = 1) then
					                    								if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					                    									( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                    								endif
					                    							else
					                    								if ( (EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType))  > EFD_MIN('1')) then
					                    									( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                    								endif
					                    							endif
					                    						else
					                    							if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					                    								( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                    							endif
					                    						endif
					                    					endif
					                    				endif
					                    			elseif (FuelShareOption = '2X') then
					                    				if (ORD(GenerationSeason) <= NumSeasons) then
					                    					if (SEQRT(PlantType) > 0) then
					                    						if (OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) > 0) then
					                    							if (IRS(PlantType) = 1) then
					                    								if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					                    									( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                    								endif
					                    							else
					                    								if ( (EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
					                    									( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                    								endif
					                    							endif
					                    						else
					                    							if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')) then
					                    									( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
					                    							endif
					                    						endif
					                    					endif
					                    				endif
					
					                    			endif		
					                    		endif
					                    		!elseif  ( (IWD(PlantType) = 1) then  !Biomass
					                    		!endif
					                    	!endif
					                        endif
					                    endif
				}
			}
			Parameter ccalc_cB_rCLle {
				IndexDomain: {
					(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | ord(CoalDemandRegion_ALT2) = ord(EPCLMP_to_int_fuel_region(FuelRegion_ALT1))
					and PlantType_ECP = Coal_PlantType_ECP(PlantType)
				}
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
						if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
							if (GenerationSeason = 'X') then
								if (FuelShareOption = '11') then
									if (USW_ECPCF('1') = 0) then   !no cofiring option
										1-(OLSH(PlantType,FuelRegion_ALT1)+GASSH(PlantType,FuelRegion_ALT1))
									else
										1-(OLSH(PlantType,FuelRegion_ALT1)+GASSH(PlantType,FuelRegion_ALT1)+CFSH(PlantType,FuelRegion_ALT1))
									endif
								endif
							endif
						endif
					endif
				}
				Comment: "rCLle = Coal Supply Balance Row  (Row type = L)";
			}
			Parameter ccalc_cB_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
				Definition: {
					                                        if ( (PlantType >= 'CTN') and (PlantType < 'CNU') ) or ( (PlantType > 'SMR') and (PlantType <= 'DGP') ) then
					                                        	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					                                        	        !if (FuelShareOption = '1X')  then
					                                        			if   ( (IGS(PlantType) = 1)   and     !gas only
					                                        			(IRS(PlantType) = 0)  and
					                                        			(IDS(PlantType) = 0) )  then
					                                        			        if (FuelShareOption = '1X')  then
					                                        					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
					                                        						-1
					                                        					endif
					                                        				endif
					                                        			elseif ( (IGS(PlantType) = 0)   and  !oil only
					                                        				((IRS(PlantType) = 1) or
					                                        				(IDS(PlantType) = 1)) )   then
					                                        				if (FuelShareOption = '1X')  then
					                                        					if (GenerationSeason = 'X') then
					                                        						-1
					                                        					endif
					                                        				endif
					                                        			elseif ( (IGS(PlantType) = 1)   and  !dual fired
					                                        				((IRS(PlantType) = 1) or
					                                        				(IDS(PlantType) = 1)) )   then
					                                        				if (FuelShareOption = '1X')  then
					                                        					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
					                                        						-1
					                                        					endif
					                                        				elseif (FuelShareOption = '2X') then
					                                        					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
					                                        						-1
					                                        					endif
					
					                                        				endif		
					                                        			elseif (IWD(PlantType) = 1) then  !Biomass
					                                        				if (FuelShareOption = '1X')  then
					                                        					if (GenerationSeason = 'X') then
					                                        						-1
					                                        					endif
					                                        				endif
					                                        			endif
					                                        		!endif
					                                                endif
					                                        elseif (PlantType >= 'CNU')  AND (PlantType <= 'SMR') then
					                                        	if (FuelShareOption = '1X')  then
					                                        		if (GenerationSeason = 'X') then
					                                        			if (FuelRegion_ALT1 = 'US') then
					                                        				-1
					                                        			endif
					                                        		endif
					                                                endif
					                                        endif
				}
			}
			Parameter ccalc_cB_rBTUXXle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
						if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
							if (GenerationSeason = 'X') then
								if (FuelShareOption = '11') then
									-1	
								endif
							endif
						endif
					endif
				}
			}
			Parameter ccalc_cB_EFDCOSTS {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
				Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
				Definition: {
					if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
					if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
						if (GenerationSeason = 'X') then
							if (FuelShareOption = '11') then
								0.001			
							endif
						endif
					endif
					elseif ( (PlantType >= 'CTN') and (PlantType < 'CNU') ) or ( (PlantType > 'SMR') and (PlantType <= 'DGP') ) then   !oil and gas
					if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
					        !if (FuelShareOption = '1X')  then
							if   ( (IGS(PlantType) = 1)   and     !gas only
							(IRS(PlantType) = 0)  and
							(IDS(PlantType) = 0) )  then
							        if (FuelShareOption = '1X')  then
									if (GenerationSeason >= '1' and GenerationSeason <= '3') then				
										if (SEQRT(PlantType) > 0) then
											-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
										else
											0.001
										endif
									endif
								endif
							elseif ( (IGS(PlantType) = 0)   and  !oil only
								((IRS(PlantType) = 1) or
								(IDS(PlantType) = 1)) )   then
								if (FuelShareOption = '1X')  then
									if (GenerationSeason = 'X') then
										if (SEQRT(PlantType) > 0) then
											if (IRS(PlantType) = 1) then
												-1.0 * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
											ELSE
												-1.0 * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
											endif
										else
											0.001
										endif
									endif
								endif
							elseif ( (IGS(PlantType) = 1)   and  !dual fired
								((IRS(PlantType) = 1) or
								(IDS(PlantType) = 1)) )   then
								if (FuelShareOption = '1X')  then
									if (GenerationSeason >= '1' and GenerationSeason <= '3') then
					
											if (SEQRT(PlantType) > 0) then
												if (OLSH(PlantType,FuelRegion_ALT1) > 0) then
													if (IRS(PlantType) = 1) then
					
															-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0) - ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
					
													else
					
															-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0) - EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
					
													endif
												else
														-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
					
												endif
											else
												0.001
											endif
									endif
								elseif (FuelShareOption = '2X') then
									if (GenerationSeason >= '1' and GenerationSeason <= '3') then 				
										if (SEQRT(PlantType) > 0) AND (EMETAX('01',cyr) > 0) then
											if (OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) > 0) then
												if (IRS(PlantType) = 1) then
													-1.0 * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0) - ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
												else
													-1.0 * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0) - EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)	
												endif
											else
												-1.0 * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
											endif
										else
											0.001
										endif
									endif
					
								endif		
							elseif (IWD(PlantType) = 1) then  !Biomass
								if (FuelShareOption = '1X')  then
									if (GenerationSeason = 'X') then
										0.001
									endif
								endif
							endif
						!endif
					        endif
					elseif (PlantType >= 'CNU')  AND (PlantType <= 'SMR') then
					if (FuelShareOption = '1X')  then
						if (GenerationSeason = 'X') then
							if (FuelRegion_ALT1 = 'US') then
								UPFUEL('UF',int_fuel_region_element(FuelRegion_ALT1))
							endif
						endif
					        endif
					endif
				}
			}
			Parameter ccalc_cESCNOX_EFDCOSTS {
				IndexDomain: (INOXP) | ord(INOXP) <= NOX_GRP('1');
				Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
				Definition: {
					IF (EMRFNA(INOXP,cyr) > 0) THEN
						EPNOXPR(INOXP,cyr)/1000.0
					endif
				}
			}
			Parameter ccalc_cESCNOX_rELNOX0le {
				IndexDomain: (INOXP) | ord(INOXP) <= NOX_GRP('1');
				Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
				Definition: {
					 IF (EMRFNA(INOXP,cyr) > 0) THEN
						-1.0
					endif
				}
			}
			Parameter ccalc_cBCTLN_rELNOX0n {
				IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) | ord(INOXP) <= NOX_GRP('1');
				Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
				Definition: {
					IF (EMRFNA(INOXP, cyr) <= 0.0 and BCTLN_COEFF(INOXP, CoalDemandRegion_ALT1, GenerationSeason_Element(GenerationSeason))) THEN
					1
					endif
				}
				Comment: "ED$BTU,3";
			}
			Parameter ccalc_cBCTLN_rELNOXOTle {
				IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) | ord(INOXP) <= NOX_GRP('1');
				Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)OT";
				Definition: {
					IF (EMRFNA(INOXP, cyr) > 0.0 and BCTLN_COEFF(INOXP, CoalDemandRegion_ALT1, GenerationSeason_Element(GenerationSeason))) THEN
					1
					endif
				}
				Comment: "ED$BTU,3";
			}
			Parameter ccalc_cBCTLN_LBOUND {
				IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) | ord(INOXP) <= NOX_GRP('1');
				Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: LBOUND";
				Definition: {
					IF (BCTLN_COEFF(INOXP, CoalDemandRegion_ALT1, GenerationSeason_Element(GenerationSeason))) THEN
					BCTLN_COEFF(INOXP, CoalDemandRegion_ALT1, GenerationSeason_Element(GenerationSeason))
					endif
				}
				Comment: "ED$BTU,4";
			}
			Parameter ccalc_cBCTLN_UBOUND {
				IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) | ord(INOXP) <= NOX_GRP('1');
				Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					IF (BCTLN_COEFF(INOXP, CoalDemandRegion_ALT1, GenerationSeason_Element(GenerationSeason))) THEN
					BCTLN_COEFF(INOXP, CoalDemandRegion_ALT1, GenerationSeason_Element(GenerationSeason))
					else
					inf
					endif
				}
				Comment: "ED$BTU,4";
			}
		}
		Procedure calc_prc {
			Body: {
				                !for (NOXRegion in {26..28}) do
				                for INOXP | (ord(INOXP) <= NOX_GRP('1')) do
				                	IF (EMRFNA(INOXP,cyr) > 0) THEN
				                		prc(cyr) := rELNOX0le(INOXP).ShadowPrice * 1000;
				                	endif;
				                endfor;
				
				                for SO2Region Do
				                      IF (EMRFSA(cyr,SO2Region) > 0) THEN
				                		prc(cyr) := rSULFURle(SO2Region).ShadowPrice * 1000;
				                      endif;
				                endfor;
				
				                for nHGCODE Do
				                	if (EMEL_QHG(nHGCODE,cyr) < 100) and (rMERCURYle(nHGCODE).ShadowPrice > 0) then
				                		prc(cyr) := rMERCURYle(nHGCODE).ShadowPrice * 1000;
				                	endif;
				                endfor;
				                 !IF ( (USW_CAR('1') = 2 or  USW_CAR('1') = 3) and ((ord(cyr)+UHBSYR('1')) >  UYR_CAR('1'))) then
				                       !EFD_LCAR_calc(cyr) := rCARBONle('XX').Upper;
				                       !EFD_QCAR_calc(cyr) :=  rCARBONle('XX').Level;
				                       !prc(cyr) := rCARBONle('XX').ShadowPrice;
				                       !EFD_PCAR_calc(cyr):= prc(cyr);
				                 !endif;
			}
		}
		DeclarationSection ED_CAR_Completed {
			Parameter ccalc_cCARESCXX_rCARBONXXle {
				Text: "OML Columns: CARESCXX and OML Rows: CARBONXX";
				Definition: {
					IF CarbonCap_National = 1 THEN
					-1
					endif
				}
				Comment: "ED$CAR,1";
			}
			Parameter ccalc_cRHS_rCARBONXXle {
				Text: "OML Columns: RHSEFD and OML Rows: CARBONXX";
				Definition: {
					IF CarbonCap_National = 1 THEN
					  IF (ELEC_FLAG('1')) THEN
					        EMISSIONS_GOAL(cyr)
					  ELSEIF (PERMIT_FLAG('1') or MARKET_FLAG('1')) THEN
					        EMISSIONS_GOAL(cyr) - EMRSC('11','01',cyr) - EMCMC('11','01',cyr) -
					            EMINCC('11','01',cyr) - EMTRC('11','01',cyr) - EMNT('11','01',cyr) * 0.001
					  ELSE
					        EFD_MIN('1')
					  endif
					endif
				}
				Comment: "ED$CAR,2";
			}
			Parameter ccalc_cCARESCXX_EFDCOSTS {
				Text: "OML Columns: CARESCXX and OML Rows: EFDCOSTS";
				Definition: {
					IF CarbonCap_National = 1 THEN
					  IF (ELEC_FLAG('1')) THEN
					        1000
					  ELSEIF (PERMIT_FLAG('1') or MARKET_FLAG('1')) THEN
					        1000
					  ELSEIF (ETAX_FLAG('1')) THEN
					        EMETAX('01',cyr) * 1000.0
					   ELSE
					        0.0001
					   ENDIF
					endif
				}
				Comment: "ED$CAR,3";
			}
			Parameter ccalc_cCARESCXX_UBOUND {
				Text: "OML Columns: CARESCXX and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					IF CarbonCap_National = 1 THEN
					  IF (ELEC_FLAG('1')) THEN
					        0.0001
					  ELSEIF (PERMIT_FLAG('1') or MARKET_FLAG('1')) THEN
					        0.0001
					  ELSEIF (ETAX_FLAG('1')) THEN
					        1000
					   ELSE
					        1000
					   ENDIF
					endif
				}
				Comment: "ED$CAR,4";
			}
			Parameter ccalc_cCARBONOT_rCARBONXXle {
				Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
				Definition: {
					IF CarbonCap_National = 1 THEN
					1
					endif
				}
				Comment: "ED$CAR,5";
			}
			Parameter ccalc_cCARBONOT_rCARBONXXn {
				Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
				Definition: {
					IF CarbonCap_National = 0 THEN
					1
					endif
				}
				Comment: "ED$CAR,5";
			}
			Parameter ccalc_cCARBONOT_LBOUND {
				Text: "OML Columns: CARBONOT and OML Rows: LBOUND";
				Definition: EMEL('4','01',cyr);
				Comment: "ED$CAR,6";
			}
			Parameter ccalc_cCARBONOT_UBOUND {
				Text: "OML Columns: CARBONOT and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: EMEL('4','01',cyr);
				Comment: "ED$CAR,6";
			}
			Parameter ccalc_cCARLIM_EFDCOSTS {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
				Definition: {
					if 0<EDCAR_VALLM(CarbonRegion_Mapping(CarbonRegion))<=9000 then
					  if ord(CarbonRegion)=CARGRP_CA('1') then
					    max(EFD_MIN('1'), AB_AUCTION_P(cyr) * 1000.0)
					  else
					    max(ECP_MIN('1'), CO2FLGRP(CarbonRegion_Mapping(CarbonRegion), cyr))
					  endif
					endif
				}
				Comment: "ED$CAR,8";
			}
			Parameter ccalc_cCARLIM_UBOUND {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CARLIM(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if 0<EDCAR_VALLM(CarbonRegion_Mapping(CarbonRegion))<=9000 then
					  EDCAR_VALLM(CarbonRegion_Mapping(CarbonRegion))
					else
					  inf
					endif
				}
				Comment: "\'ED$CAR,9";
			}
			Parameter ccalc_cCARLIM_rCARBONle {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
				Definition: {
					if 0<EDCAR_VALLM(CarbonRegion_Mapping(CarbonRegion))<9000 and ord(CarbonRegion)<>CARGRP_CA('1') then
					  -1
					endif
				}
				Comment: "ED$CAR,10";
			}
			Parameter ccalc_cCARLIM_rCARBONABeq {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
				Definition: {
					if 0<EDCAR_VALLM(CarbonRegion_Mapping(CarbonRegion))<9000 and ord(CarbonRegion)=CARGRP_CA('1') then
					  -1
					endif
				}
				Comment: "ED$CAR,11";
			}
			Parameter ccalc_cCARESC_rCARBONle {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
				Definition: {
					if 0<EDCAR_VALLM(CarbonRegion_Mapping(CarbonRegion))<=9000 and  ord(CarbonRegion)<>CARGRP_CA('1') and CO2ESGRP(CarbonRegion_Mapping(CarbonRegion), cyr) * SCALPR('1') < 9000.0 then
					-1
					endif
				}
				Comment: "ED$CAR,13";
			}
			Parameter ccalc_cCARESC_EFDCOSTS {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
				Definition: {
					if 0<EDCAR_VALLM(CarbonRegion_Mapping(CarbonRegion))<=9000 and  ord(CarbonRegion)<>CARGRP_CA('1') and CO2ESGRP(CarbonRegion_Mapping(CarbonRegion), cyr) * SCALPR('1') < 9000.0 then
					  CO2ESGRP(CarbonRegion_Mapping(CarbonRegion), cyr) * (44.0 / 12.0)
					elseif ord(CarbonRegion)=CARGRP_CA('1') then
					  ab_reserve_p('3', cyr) * 1000 + EFD_MIN('1')
					endif
				}
				Comment: "ED$CAR,14";
			}
			Parameter ccalc_cCARIM_LBOUND {
				IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
				Text: "OML Columns: CARIM(*)(**) and OML Rows: LBOUND";
				Definition: {
					IF (CO2_IM_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))> 0.0)THEN
					  KWH_IM_BY_RG(SupplyRegion_ALT1, cyr)
					endif
				}
				Comment: "ED$CAR,15";
			}
			Parameter ccalc_cCARIM_UBOUND {
				IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
				Text: "OML Columns: CARIM(*)(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					IF (CO2_IM_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))> 0.0)THEN
					  KWH_IM_BY_RG(SupplyRegion_ALT1, cyr)
					else
					  inf
					endif
				}
				Comment: "ED$CAR,15";
			}
			Parameter ccalc_cCARIM_rCARBONle {
				IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
				Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) and CO2_IM_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))> 0.0 then
					  if ord(CarbonRegion)=CARGRP_CA('1') then
					    CO2_IM_BY_CA(cyr)
					  else
					    CO2_IM_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))
					  endif
					endif
				}
				Comment: "ED$CAR,16";
			}
			Parameter ccalc_cCARIM_rCARBONn {
				IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
				Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 and CO2_IM_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))> 0.0 then
					  if ord(CarbonRegion)=CARGRP_CA('1') then
					    CO2_IM_BY_CA(cyr)
					  else
					    CO2_IM_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))
					  endif
					endif
				}
				Comment: "ED$CAR,16";
			}
			Parameter ccalc_cCARDM_LBOUND {
				IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
				Text: "OML Columns: CARDM(*)(**) and OML Rows: LBOUND";
				Definition: {
					IF (CO2_DF_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))> 0.0)THEN
					  KWH_DM_BY_RG(SupplyRegion_ALT1, cyr)
					endif
				}
				Comment: "ED$CAR,17";
			}
			Parameter ccalc_cCARDM_UBOUND {
				IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
				Text: "OML Columns: CARDM(*)(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					IF (CO2_DF_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))> 0.0)THEN
					  KWH_DM_BY_RG(SupplyRegion_ALT1, cyr)
					else
					  inf
					endif
				}
				Comment: "ED$CAR,17";
			}
			Parameter ccalc_cCARDM_rCARBONle {
				IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
				Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) and CO2_DF_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))> 0.0 then
					  if ord(CarbonRegion)=CARGRP_CA('1') then
					    max(CO2_DF_BY_CA(cyr), EFD_MIN('1'))
					  else
					    max(CO2_DF_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion)), EFD_MIN('1'))
					  endif
					endif
				}
				Comment: "ED$CAR,17.1";
			}
			Parameter ccalc_cCARDM_rCARBONn {
				IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
				Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 and CO2_DF_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion))> 0.0 then
					  if ord(CarbonRegion)=CARGRP_CA('1') then
					    max(CO2_DF_BY_CA(cyr), EFD_MIN('1'))
					  else
					    max(CO2_DF_BY_RG(SupplyRegion_ALT1, CarbonRegion_Mapping(CarbonRegion)), EFD_MIN('1'))
					  endif
					endif
				}
				Comment: "ED$CAR,17.1";
			}
			Parameter ccalc_cCAROFF_UBOUND {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CAROFF(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if ord(CarbonRegion)=CARGRP_RG('1') then
					  CO2OQGRP(CarbonRegion_Mapping(CarbonRegion), cyr)
					elseif ord(CarbonRegion)=CARGRP_CA('1') then
					  ab_cap_tot(cyr) * ab_offset_frac(cyr)
					else
					  inf
					endif
				}
				Comment: {
					"ED$CAR,18; ED$CAR,34"
				}
			}
			Parameter ccalc_cCAROFF_rCARBONle {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_RG('1');
				Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					-1
					endif
				}
				Comment: "ED$CAR,19";
			}
			Parameter ccalc_cCAROFF_EFDCOSTS {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
				Definition: {
					if ord(CarbonRegion)=CARGRP_RG('1') then
					  MAX(EFD_MIN('1'),(CO2OPGRP(CarbonRegion_Mapping(CarbonRegion), cyr) + EFD_MIN('1')))
					elseif ord(CarbonRegion)=CARGRP_CA('1') then
					  ab_auction_p(cyr) * 1000.0 + EFD_MIN('1')
					endif
				}
				Comment: {
					"ED$CAR,20; ED$CAR,36"
				}
			}
			Parameter ccalc_cCARRSV_UBOUND {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CARRSV(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					
					if ord(CarbonRegion)=CARGRP_RG('1') then
					  CO2RQGRP(CarbonRegion_Mapping(CarbonRegion), cyr)
					elseif ord(CarbonRegion)=CARGRP_CA('1') then
					  ab_cstcont_avl(cyr)
					else
					  inf
					endif
				}
				Comment: {
					"ED$CAR,21; ED$CAR,37"
				}
			}
			Parameter ccalc_cCARRSV_rCARBONle {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_RG('1');
				Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					-1
					endif
				}
				Comment: "ED$CAR,22";
			}
			Parameter ccalc_cCARRSV_EFDCOSTS {
				IndexDomain: (CarbonRegion);
				Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
				Definition: {
					if ord(CarbonRegion)=CARGRP_RG('1') then
					  MAX(EFD_MIN('1'),CO2RPGRP(CarbonRegion_Mapping(CarbonRegion), cyr) )
					elseif ord(CarbonRegion)=CARGRP_CA('1') then
					  MAX(EFD_MIN('1'),ab_reserve_p('2', cyr) * 1000.0)
					endif
				}
				Comment: {
					"ED$CAR,23; ED$CAR,39"
				}
			}
			Parameter ccalc_cCARECR_UBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_RG('1');
				Text: "OML Columns: CARECR(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: CO2EQGRP(CarbonRegion_Mapping(CarbonRegion), cyr);
				Comment: "ED$CAR,23.1";
			}
			Parameter ccalc_cCARECR_rCARBONle {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_RG('1');
				Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					-1
					endif
				}
				Comment: "ED$CAR,23.2";
			}
			Parameter ccalc_cCARECR_EFDCOSTS {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_RG('1');
				Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
				Definition: MAX(EFD_MIN('1'),CO2EPGRP(CarbonRegion_Mapping(CarbonRegion), cyr) );
				Comment: "ED$CAR,23.3";
			}
			Parameter ccalc_cCARUTL_rCARBONle {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  -1
					endif
				}
				Comment: "ED$CAR,24";
			}
			Parameter ccalc_cCARUTL_rCARBONn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  -1
					endif
				}
				Comment: "ED$CAR,24";
			}
			Parameter ccalc_cCARUTL_rCARBONABeq {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  1
					endif
				}
				Comment: "ED$CAR,25";
			}
			Parameter ccalc_cCARUTL_rCARBONABn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  1
					endif
				}
				Comment: "ED$CAR,25";
			}
			Parameter ccalc_cCARIND_UBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARIND(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: ab_covd_em_ind(cyr);
				Comment: "ED$CAR,26";
			}
			Parameter ccalc_cCARIND_LBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARIND(**) and OML Rows: LBOUND";
				Definition: ab_covd_em_ind(cyr);
				Comment: "ED$CAR,26";
			}
			Parameter ccalc_cCARIND_rCARBONABeq {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  1
					endif
				}
				Comment: "ED$CAR,27";
			}
			Parameter ccalc_cCARIND_rCARBONABn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  1
					endif
				}
				Comment: "ED$CAR,27";
			}
			Parameter ccalc_cCARREF_UBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARREF(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: ab_covd_em_ref(cyr);
				Comment: "ED$CAR,28";
			}
			Parameter ccalc_cCARREF_LBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARREF(**) and OML Rows: LBOUND";
				Definition: ab_covd_em_ref(cyr);
				Comment: "ED$CAR,28";
			}
			Parameter ccalc_cCARREF_rCARBONABeq {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  1
					endif
				}
				Comment: "ED$CAR,29";
			}
			Parameter ccalc_cCARREF_rCARBONABn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  1
					endif
				}
				Comment: "ED$CAR,29";
			}
			Parameter ccalc_cCARFUE_UBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARFUE(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: Max(ab_covd_em_fue(cyr), 0);
				Comment: "ED$CAR,30";
			}
			Parameter ccalc_cCARFUE_LBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARFUE(**) and OML Rows: LBOUND";
				Definition: Max(ab_covd_em_fue(cyr), 0);
				Comment: "ED$CAR,30";
			}
			Parameter ccalc_cCARFUE_rCARBONABeq {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  1
					endif
				}
				Comment: "ED$CAR,31";
			}
			Parameter ccalc_cCARFUE_rCARBONABn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  1
					endif
				}
				Comment: "ED$CAR,31";
			}
			Parameter ccalc_cCAROTH_UBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CAROTH(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: ab_covd_em_oth(cyr);
				Comment: "ED$CAR,32";
			}
			Parameter ccalc_cCAROTH_LBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CAROTH(**) and OML Rows: LBOUND";
				Definition: ab_covd_em_oth(cyr);
				Comment: "ED$CAR,32";
			}
			Parameter ccalc_cCAROTH_rCARBONABeq {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  1
					endif
				}
				Comment: "ED$CAR,33";
			}
			Parameter ccalc_cCAROTH_rCARBONABn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  1
					endif
				}
				Comment: "ED$CAR,33";
			}
			Parameter ccalc_cCAROFF_rCARBONABeq {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  -1
					endif
				}
				Comment: "ED$CAR,35";
			}
			Parameter ccalc_cCAROFF_rCARBONABn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  -1
					endif
				}
				Comment: "ED$CAR,35";
			}
			Parameter ccalc_cCARRSV_rCARBONABeq {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  -1
					endif
				}
				Comment: "ED$CAR,38";
			}
			Parameter ccalc_cCARRSV_rCARBONABn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  -1
					endif
				}
				Comment: "ED$CAR,38";
			}
			Parameter ccalc_cCARBNK_UBOUND {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARBNK(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: ab_allbank_avl(cyr - 1);
				Comment: "ED$CAR,40";
			}
			Parameter ccalc_cCARBNK_rCARBONABeq {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  -1
					endif
				}
				Comment: "ED$CAR,41";
			}
			Parameter ccalc_cCARBNK_rCARBONABn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  -1
					endif
				}
				Comment: "ED$CAR,41";
			}
			Parameter ccalc_cCARBNK_EFDCOSTS {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
				Definition: ab_auction_p(cyr) * 1000.0 + 2 * EFD_MIN('1');
				Comment: "ED$CAR,42";
			}
			Parameter ccalc_cCARESC_rCARBONABeq {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion)) then
					  -1
					endif
				}
				Comment: "ED$CAR,43";
			}
			Parameter ccalc_cCARESC_rCARBONABn {
				IndexDomain: (CarbonRegion) | ord(CarbonRegion)=CARGRP_CA('1');
				Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
				Definition: {
					if Carbon_VALLM_Flag(CarbonRegion_Mapping(CarbonRegion))=0 then
					  -1
					endif
				}
				Comment: "ED$CAR,43";
			}
		}
		DeclarationSection ED_CCAP_Completed {
			Parameter ccalc_cRHS_rZOGSMeq {
				IndexDomain: (OGSMRegion);
				Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
				Definition: sum(OGSMSector, OGCO2PUR2(OGSMRegion_element(OGSMRegion),Thirteen_element(OGSMSector),cyr) / 18000.0);
			}
			Parameter ccalc_cNTX_rZFLRGge {
				IndexDomain: (FuelRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
				Definition: {
					IF (MUST_STORE(FuelRegion,cyr) = 0) THEN
					-1.0
					endif
				}
			}
			Parameter ccalc_cNTX_rZFLRGeq {
				IndexDomain: (FuelRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
				Definition: {
					IF (MUST_STORE(FuelRegion,cyr) <> 0) THEN
					-1.0
					endif
				}
			}
			Parameter ccalc_cNTX_EFDCOSTS {
				IndexDomain: (FuelRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
				Definition: {
					IF (MUST_STORE(FuelRegion,cyr) = 1) THEN
					            TnS_Costs(FuelRegion,cyr)
					ELSE
					            -0.001
					ENDIF
				}
			}
			Parameter ccalc_cNOTSF_rZOGSMeq {
				IndexDomain: (OGSMRegion);
				Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
				Definition: 1.0;
			}
			Parameter ccalc_cNOTSF_EFDCOSTS {
				IndexDomain: (OGSMRegion);
				Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
				Definition: 99.9;
			}
			Parameter ccalc_cNTR_EFDCOSTS {
				IndexDomain: (FuelRegion,OGSMRegion);
				Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
				Definition: FR_OR_TRANCOST(FuelRegion,OGSMRegion,cyr);
			}
			Parameter ccalc_cNTR_rZOGSMeq {
				IndexDomain: (OGSMRegion,FuelRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
				Definition: 1.0;
			}
			Parameter ccalc_cNTR_rZFLRGeq {
				IndexDomain: (FuelRegion,OGSMRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
				Definition: {
					IF (MUST_STORE(FuelRegion,cyr) <> 0) THEN
					-1.0
					endif
				}
			}
			Parameter ccalc_cNTR_rZFLRGge {
				IndexDomain: (FuelRegion,OGSMRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
				Definition: {
					IF (MUST_STORE(FuelRegion,cyr) = 0) THEN
					-1.0
					endif
				}
			}
			Parameter ccalc_cNTO_rZOGSMeq {
				IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) | OGSMRegion = OGSMRegion_ALTTo;
				Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
				Definition: 1.0;
			}
			Parameter ccalc_cNTO_EFDCOSTS {
				IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
				Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
				Definition: OGCO2TAR(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) / UPGNPD('1') * 18.000;
			}
			Parameter ccalc_cNTO_rZOTHRge {
				IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) | OGSMRegion = OGSMRegion_ALTFrom;
				Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
				Definition: -1.0;
			}
			Parameter ccalc_cNOT_rZOTHRge {
				IndexDomain: (OGSMRegion,OGSMSector) |  OGSMSector <> 'P1' and OGSMSector <> 'P2' and OGSMSector <> 'C1';
				Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
				Definition: 1.0;
			}
			Parameter ccalc_cNOT_rZOGSMeq {
				IndexDomain: (OGSMRegion,OGSMSector) |  OGSMSector <> 'P1' and OGSMSector <> 'P2' and OGSMSector = 'C1';
				Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
				Definition: 1.0;
			}
			Parameter ccalc_cNOT_EFDCOSTS {
				IndexDomain: (OGSMSector,OGSMRegion) |  OGSMSector <> 'P1' and OGSMSector <> 'P2';
				Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
				Definition: {
					IF (OGCO2PRC(OGSMRegion,Thirteen_element(OGSMSector), cyr) > 0.0) THEN        ! OGCO2PRC  : CO2 price $/mmcf
					   If (OGSMSector = 'C1') then
					        0.5* OGCO2PRC(OGSMRegion,Thirteen_element(OGSMSector), cyr) / UPGNPD('1') * 18.000
					   else
					   	OGCO2PRC(OGSMRegion,Thirteen_element(OGSMSector), cyr) / UPGNPD('1') * 18.000
					   endif
					else
					  99.9 - (ord(OGSMSector) * 0.1)
					 endif
				}
			}
			Parameter ccalc_cNOT_UBOUND {
				IndexDomain: (OGSMSector,OGSMRegion) |  OGSMSector <> 'P1' and OGSMSector <> 'P2';
				Text: "OML Columns: NOT(**)(**)_ and OML Rows: UBOUND";
				Default: inf;
				Definition: (1.0 * OGCO2AVL(OGSMRegion,Thirteen_element(OGSMSector), cyr) / 18000.0) / 1.0 + 0.001;
			}
			Parameter ccalc_cNSR_EFDCOSTS {
				IndexDomain: (FuelRegion,OGSMRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
				Definition: {
					IF RUN45Q THEN
					FR_OR_TRANCOST(FuelRegion, OGSMRegion, cyr) - CCS_EOR_45Q(cyr) / (1.0 - UPTXRT('1'))
					endif
				}
				Comment: "ED$CCAP,17";
			}
			Parameter ccalc_cNSR_rZFLRSeq {
				IndexDomain: (FuelRegion,OGSMRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
				Definition: {
					IF (MUST_STORE(FuelRegion,cyr) and RUN45Q) THEN
					-1.0
					endif
				}
				Comment: "ED$CCAP,15";
			}
			Parameter ccalc_cNSR_rZFLRSge {
				IndexDomain: (FuelRegion,OGSMRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
				Definition: {
					IF (MUST_STORE(FuelRegion,cyr) = 0 and RUN45Q) THEN
					-1.0
					endif
				}
				Comment: "ED$CCAP,15";
			}
			Parameter ccalc_cNSR_rZOGSMeq {
				IndexDomain: (OGSMRegion,FuelRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
				Definition: {
					IF RUN45Q THEN
					1.0
					endif
				}
				Comment: "ED$CCAP,16";
			}
			Parameter ccalc_cNSX_EFDCOSTS {
				IndexDomain: (FuelRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
				Definition: {
					IF RUN45Q THEN
					IF MUST_STORE(FuelRegion,cyr)=1  THEN
					TnS_Costs(FuelRegion, cyr) - CCS_SALINE_45Q(cyr) / (1.0 - UPTXRT('1'))
					else
					-0.001
					endif
					endif
				}
				Comment: "ED$CCAP,20";
			}
			Parameter ccalc_cNSX_rZFLRSeq {
				IndexDomain: (FuelRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
				Definition: {
					IF (MUST_STORE(FuelRegion,cyr) and RUN45Q) THEN
					-1.0
					endif
				}
				Comment: "ED$CCAP,19";
			}
			Parameter ccalc_cNSX_rZFLRSge {
				IndexDomain: (FuelRegion) | FuelRegion <> 'US';
				Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
				Definition: {
					IF (MUST_STORE(FuelRegion,cyr) = 0 and RUN45Q) THEN
					-1.0
					endif
				}
				Comment: "ED$CCAP,19";
			}
		}
		DeclarationSection ED_CL_IMPORTS_Completed {
			Parameter ccalc_cT_STOCK__rMERCURYn {
				IndexDomain: (nHGCODE) | EMEL_QHG(nHGCODE, cyr)>=100 and nHGCODE=first(nHGCODE_);
				Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
				Definition: -1.0 * ED_CL_IMPORTS_Sign * TMPMBTU(cyr) * 0.000001 * 1000.0 $ ((-1.0 * ED_CL_IMPORTS_Sign * TMPMBTU(cyr) * 0.000001 * 1000.0)<(-EFD_MIN('1')));
				Comment: "ED$CL_IMPORTS,4";
			}
			Parameter ccalc_cT_STOCK__rSULFURn {
				IndexDomain: (SO2Region) | SO2Region=first(SO2Region_);
				Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
				Definition: -1.0 * ED_CL_IMPORTS_Sign * TSPMBTU(cyr) * 1000.0 $ ((-1.0 * ED_CL_IMPORTS_Sign * TSPMBTU(cyr) * 1000.0)<(-EFD_MIN('1')) );
			}
			Parameter ccalc_cT_STOCK__LBOUND {
				Text: "OML Columns: T_STOCK_ and OML Rows: LBOUND";
				Definition: abs(XCL_STOCK(cyr));
				Comment: "ED$CL_IMPORTS,1 and ED$CL_IMPORTS,2";
			}
			Parameter ccalc_cT_STOCK__UBOUND {
				Text: "OML Columns: T_STOCK_ and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: abs(XCL_STOCK(cyr));
				Comment: "ED$CL_IMPORTS,1 and ED$CL_IMPORTS,2";
			}
			Parameter ccalc_cT_STOCK__rMERCURYle {
				IndexDomain: (nHGCODE) | EMEL_QHG(nHGCODE, cyr)<100 and nHGCODE=first(nHGCODE_);
				Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
				Definition: -1.0 * ED_CL_IMPORTS_Sign * TMPMBTU(cyr) * 0.000001 * 1000.0 $ ((-1.0 * ED_CL_IMPORTS_Sign * TMPMBTU(cyr) * 0.000001 * 1000.0)<(-EFD_MIN('1')));
				Comment: "ED$CL_IMPORTS,4";
			}
		}
		DeclarationSection ED_COL_Completed {
			Parameter ccalc_cRHS_rSULFURle {
				IndexDomain: (SO2Region);
				Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
				Definition: {
					IF (EFDMAT('1') = 0) and rSULFUR_Flag(SO2Region) THEN
					    (EMRFSA(cyr,SO2Region) + EMELBNK(cyr - 1,SO2Region) - EMELBNK(cyr,SO2Region)) / 1000.0
					endif
				}
				Comment: "ED$COL,1";
			}
			Parameter ccalc_cMVSO2_EFDCOSTS {
				IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) | SO2Region_ALTFrom<>SO2Region_ALTTo;
				Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					if EFDMAT('1')=0 and (ord(cyr) + UHBSYR('1'))< TRANRULE1('1') then
					  0.0001
					endif
				}
				Comment: {
					"ED$COL,2; ED$COL,4"
				}
			}
			Parameter ccalc_cMVSO2_rSULFURle {
				IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) | SO2Region_ALTFrom<>SO2Region_ALTTo;
				Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
				Definition: {
					if EFDMAT('1')=0 and (ord(cyr) + UHBSYR('1'))< TRANRULE1('1') then
					  if SO2Region=SO2Region_ALTFrom then
					    1
					  elseif SO2Region=SO2Region_ALTTo then
					    if SO2_SHR_ALW_GRP(cyr, SO2Region_ALTFrom)>0 then
					      -SO2_SHR_ALW_GRP(cyr, SO2Region_ALTTo)/SO2_SHR_ALW_GRP(cyr, SO2Region_ALTFrom)
					    else
					      -1
					    endif
					  endif
					endif
				}
				Comment: {
					"ED$COL,3; ED$COL,5; ED$COL,6"
				}
			}
			Parameter ccalc_cMVSO2_UBOUND {
				IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) | SO2Region_ALTFrom<>SO2Region_ALTTo;
				Text: "OML Columns: MVSO2(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if EFDMAT('1')=0 and (ord(cyr) + UHBSYR('1'))< TRANRULE1('1') and SO2_SHR_ALW_GRP(cyr, SO2Region_ALTTo)<=0 then
					        0
					else
					        inf
					endif
				}
				Comment: "ED$COL,7";
			}
			Parameter ccalc_cRHS_rMVSO2le {
				IndexDomain: (CoalDemandRegion);
				Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
				Definition: {
					if EFDMAT('1')=0 and (ord(cyr) + UHBSYR('1'))>= TRANRULE1('1')  and (ord(cyr) + UHBSYR('1'))>= TSO2_VR_BY_CLRG('1') and
					TSO2_SHR_BY_CLRG(CoalDemandRegion, '1') then
					  TSO2_VR1_BY_CLRG(CoalDemandRegion)
					endif
				}
				Comment: "ED$COL,8";
			}
			Parameter ccalc_cMVS_EFDCOSTS {
				IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)| CoalDemandRegion_ALTfrom<>CoalDemandRegion_ALTto;
				Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
				Definition: {
					if EFDMAT('1')=0 and (ord(cyr) + UHBSYR('1'))>= TRANRULE1('1')  and TSO2_SHR_BY_CLRG(CoalDemandRegion_ALTfrom, '1') and
					TSO2_SHR_BY_CLRG(CoalDemandRegion_ALTto, '1') then
					  0.0001
					endif
				}
				Comment: "ED$COL,9";
			}
			Parameter ccalc_cMVS_rMVSO2le {
				IndexDomain: {
					(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)| CoalDemandRegion_ALTfrom<>CoalDemandRegion_ALTto and
					CoalDemandRegion=CoalDemandRegion_ALTto
				}
				Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
				Definition: {
					if EFDMAT('1')=0 and (ord(cyr) + UHBSYR('1'))>= TRANRULE1('1')  and TSO2_SHR_BY_CLRG(CoalDemandRegion_ALTfrom, '1') and
					TSO2_SHR_BY_CLRG(CoalDemandRegion_ALTto, '1') and (ord(cyr) + UHBSYR('1'))>= TSO2_VR_BY_CLRG('1') then
					  1
					endif
				}
				Comment: "ED$COL,10";
			}
			Parameter ccalc_cMVS_rSULFURCRle {
				IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)| CoalDemandRegion_ALTfrom<>CoalDemandRegion_ALTto;
				Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
				Definition: {
					if EFDMAT('1')=0 and (ord(cyr) + UHBSYR('1'))>= TRANRULE1('1')  and TSO2_SHR_BY_CLRG(CoalDemandRegion_ALTfrom, '1') and
					TSO2_SHR_BY_CLRG(CoalDemandRegion_ALTto, '1') then
					  if CoalDemandRegion=CoalDemandRegion_ALTfrom then
					    1
					  elseif CoalDemandRegion=CoalDemandRegion_ALTto then
					    -1
					  endif
					endif
				}
				Comment: {
					"ED$COL,11; ED$COL,12"
				}
			}
			Parameter ccalc_cRHS_rMERCURYle {
				IndexDomain: (nHGCODE);
				Text: "OML Columns: RHSEFD and OML Rows: MERCURY(*)";
				Definition: {
					if EFDMAT('1')=0 and EMEL_QHG(nHGCODE, cyr)<100 then
					  (EMEL_QHG(nHGCODE, cyr) + BNK_TO_CMM_HG(cyr)) * 1000.0
					endif
				}
				Comment: "ED$COL,13";
			}
			Parameter ccalc_cACISPLY_UBOUND {
				IndexDomain: (numACI) | ord(numACI)<NUM_ACSS('1');
				Text: "OML Columns: ACISPLY(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if EFDMAT('1')=0 and USW_HG('1') > 0 then
					  UCL_QAC(numACI)
					else
					  inf
					endif
				}
				Comment: "ED$COL,17";
			}
			Parameter ccalc_cACISPLY_EFDCOSTS {
				IndexDomain: (numACI);
				Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
				Definition: {
					if EFDMAT('1')=0 and USW_HG('1') > 0 then
					  UCL_PAC(numACI)
					endif
				}
				Comment: "ED$COL,18";
			}
			Parameter ccalc_cACISPLY_rACICSTle {
				IndexDomain: (numACI) | ord(numACI)<=NUM_ACSS('1');
				Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
				Definition: {
					if EFDMAT('1')=0 and USW_HG('1') > 0 then
					  -1
					endif
				}
				Comment: "ED$COL,19";
			}
			Parameter ccalc_cKX_EFDCOSTS {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
				Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
				Definition: {
					IF (XCL_TYPE(CoalSupplyCurve)>0 and EFD_CONT(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD_Element(nIFGD), cyr)>=0) THEN
					15
					endif
				}
				Comment: "ED$COL,20";
			}
			Parameter ccalc_cKX_rK_ge {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
				Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
				Definition: {
					IF (XCL_TYPE(CoalSupplyCurve)>0 and EFD_CONT(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD_Element(nIFGD), cyr)>=0) THEN
					1
					endif
				}
				Comment: "ED$COL,21";
			}
			Parameter ccalc_cRHS_rK_ge {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
				Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
				Definition: {
					IF (XCL_TYPE(CoalSupplyCurve)>0 and EFD_CONT(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD_Element(nIFGD), cyr)>=0) THEN
					EFD_CONT(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD_Element(nIFGD), cyr)/
					 IF ((ord(cyr) + UHBSYR('1'))=UESTYR('1') and CURITR('1') = 1) then 4
					 else 1
					 endif
					endif
				}
				Comment: "ED$COL,22";
			}
			Parameter ccalc_cRHS_rDVle {
				IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
				Definition: {
					If CoalDiversityType='S' and EFD_SB_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)>=0.0 then   !!  Subbituminous
					  IF (CURCALYR('1') <= UYR_HIST('1')) then
					     9999
					  else
					      EFD_SB_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)
					  endif
					elseif CoalDiversityType='L' and EFD_LG_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)>=0.0 then      !!  Lignite
					  IF (CURCALYR('1') <= UYR_HIST('1')) then
					     9999
					  else
					     EFD_LG_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)
					  endif
					endif
				}
				Comment: {
					"ED$COL,23; ED$COL,26"
				}
			}
			Parameter ccalc_cDX_EFDCOSTS {
				IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) | PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
				Definition: {
					If (CoalDiversityType='S' and EFD_SB_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)>=0.0) or    !!  Subbituminous
					(CoalDiversityType='L' and EFD_LG_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)>=0.0) then     !!  Lignite
					9.9
					endif
				}
				Comment: {
					"ED$COL,24; ED$COL,27"
				}
			}
			Parameter ccalc_cDX_rDVle {
				IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
				Definition: {
					If (CoalDiversityType='S' and EFD_SB_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)>=0.0) or    !!  Subbituminous
					(CoalDiversityType='L' and EFD_LG_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)>=0.0) then     !!  Lignite
					-1
					endif
				}
				Comment: {
					"ED$COL,25; ED$COL,28"
				}
			}
			Parameter ccalc_cCP_UBOUND {
				IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep)| CoalType=CoalType_SupplyCurve(CoalSupplyCurve);
				Text: "OML Columns: CP(**)(**)(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					IF XCL_TYPE(CoalSupplyCurve) > 0  then
					  if ord(CoalSupplyCurve)<=MX_NCOALS('1')THEN
					    if CoalProductionStep<='11' then
					        CoalSupplyCurveQ(CoalSupplyCurve, CoalProductionStep)
					    else
					        inf
					    endif
					  else
					    if CoalProductionStep<='10' then
					      if XCL_QIMP(MX_ISCV_Element(CoalSupplyCurve), Elementcast(Ten_,CoalProductionStep), cyr)>0 then
					        XCL_QIMP(MX_ISCV_Element(CoalSupplyCurve), Elementcast(Ten_,CoalProductionStep), cyr)
					      else
					        inf
					      endif
					    else
					      inf
					    endif
					  endif
					endif
				}
				Comment: {
					"ED$COL,30; ED$COL,38"
				}
			}
			Parameter ccalc_cCP_EFDCOSTS {
				IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep)| CoalType=CoalType_SupplyCurve(CoalSupplyCurve);
				Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
				Definition: {
					IF XCL_TYPE(CoalSupplyCurve) > 0  then
					  if ord(CoalSupplyCurve)<=MX_NCOALS('1')THEN
					    if CoalProductionStep<'12' then
					        !min(9.999, sum(eleven|ord(eleven)=ord(CoalProductionStep), XCL_PECP(CoalSupplyCurve, Elementcast(eleven_,CoalProductionStep), '00', cyr)))
					        XCL_PECP0(CoalSupplyCurve, Elementcast(eleven_,CoalProductionStep), cyr)
					    else
					        max(9.999, 3*XCL_PECP0(CoalSupplyCurve, last(Eleven_), cyr))
					    endif
					  else
					    if CoalProductionStep<='10' then
					        XCL_PIMP(MX_ISCV_Element(CoalSupplyCurve), Elementcast(Ten_,CoalProductionStep), cyr) $ XCL_QIMP(MX_ISCV_Element(CoalSupplyCurve), Elementcast(Ten_,CoalProductionStep), cyr)
					    endif
					  endif
					endif
				}
				Comment: {
					"ED$COL,31; ED$COL,33; ED$COL,39"
				}
			}
			Parameter ccalc_cCP_rS_CLle {
				IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep)| CoalType=CoalType_SupplyCurve(CoalSupplyCurve);
				Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
				Definition: {
					IF XCL_TYPE(CoalSupplyCurve) > 0  then
					  if ord(CoalSupplyCurve)<=MX_NCOALS('1')THEN
					    -1
					  else
					    -1 $ XCL_QIMP(MX_ISCV_Element(CoalSupplyCurve), Elementcast(Ten_,CoalProductionStep), cyr)
					
					  endif
					endif
				}
				Comment: {
					"ED$COL,32; ED$COL,34; ED$COL,40"
				}
			}
			Parameter ccalc_cCoalOtherUsage_LBOUND {
				IndexDomain: (CoalSupplyCurve) | XCL_TYPE(CoalSupplyCurve) > 0;
				Text: "OML Columns: CP(**)OTXX and OML Rows: LBOUND";
				Definition: XCL_OTHER(CoalSupplyCurve,cyr);
				Comment: {
					"ED$COL,35; ED$COL,41"
				}
			}
			Parameter ccalc_cCoalOtherUsage_rS_CLle {
				IndexDomain: (CoalSupplyCurve,CoalType)| CoalType=CoalType_SupplyCurve(CoalSupplyCurve);
				Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
				Definition: {
					IF (XCL_TYPE(CoalSupplyCurve) > 0 )THEN
					 1
					endif
				}
				Comment: {
					"ED$COL,36; ED$COL,42"
				}
			}
			Parameter ccalc_cCoalOtherUsage_UBOUND {
				IndexDomain: (CoalSupplyCurve) |  XCL_TYPE(CoalSupplyCurve) > 0;
				Text: "OML Columns: CP(**)OTXX and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: XCL_OTHER(CoalSupplyCurve,cyr);
				Comment: {
					"ED$COL,35; ED$COL,41"
				}
			}
			Parameter ccalc_cCT_UBOUND {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP) and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and
					Allowed(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP, ACIOption_Mapping(ACIOption))=2) then
					
					  0
					elseif (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and CoalSupplyCurve <= MX_NCOALS_Element and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP) and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and
					XCL_TRNINDX(UtilitySector_Element(PlantType_ECP), CoalSupplyCurve, CoalDemandRegion_ALT1)= 0) then
					  0
					else
					  inf
					endif
				}
				Comment: "ED$COL,45";
			}
			Parameter ccalc_cCT_rACIOMCSTn {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and ACIOption>'0') then
					
					  ACI_CST(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP) /$ (HRTCLNR(CoalDemandRegion_ALT1, cyr, PlantType_ECP)/ 1000.0)
					endif
				}
				Comment: "ED$COL,46";
			}
			Parameter ccalc_cCT_rS_CLle {
				IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_ and CoalType=CoalType_SupplyCurve(CoalSupplyCurve);
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and EFDMAT('1')=0) then
					
					  1
					endif
				}
				Comment: "ED$COL,48";
			}
			Parameter ccalc_cCT_rCLle {
				IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)| PlantType_ECP in CoalPlant_ECP_ and CoalDemandRegion_ALT2=CoalDemandRegion_ALT1;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and EFDMAT('1')=0) then
					  -1
					endif
				}
				Comment: "ED$COL,49";
			}
			Parameter ccalc_cCT_EFDCOSTS {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0) then
					
					  IF (EFD_TIER1_LIM(CoalSupplyCurve, CoalDemandRegion_ALT1, ECP_SCRUB_Element(PlantType_ECP), cyr)>0 AND ord(PlantType_ECP)<WIPC('1')) THEN
					    TOT_RATE1(CoalSupplyCurve, CoalDemandRegion_ALT1)
					  else
					    TOT_RATE2(CoalSupplyCurve, CoalDemandRegion_ALT1)
					  endif
					  +
					  if ord(ACIOption)>1 then
					    ACI_CST(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP) /$ (HRTCLNR(CoalDemandRegion_ALT1, cyr, PlantType_ECP)/ 1000.0)
					  endif
					  +
					  IF (USW_CAR('1')<>2 AND USW_CAR('1')<> 3 AND EMETAX('01', cyr)>0 and (TAX_FLAG('1') or PERMIT_FLAG('1'))) THEN
					    UPNCAR(Elementcast(FuelType_,PlantType_ECP), CDR_to_int_fuel_region(CoalDemandRegion_ALT1)) * (1.0 - UPPCEF(PlantType_ECP))
					  ENDIF
					
					ENDIF
				}
				Comment: "ED$COL,47";
			}
			Parameter ccalc_cCT_rT_le {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_ and ord(nIFGD)=ECP_SCRUB(UtilitySector_Element(PlantType_ECP), cyr);
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and CoalSupplyCurve <= MX_NCOALS_Element and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and
					TOT_RATE2(CoalSupplyCurve, CoalDemandRegion_ALT1)> TOT_RATE1(CoalSupplyCurve, CoalDemandRegion_ALT1) and
					EFD_TIER1_LIM(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD_Element(nIFGD), cyr)>0 AND ord(PlantType_ECP)<WIPC('1')) then
					1
					endif
				}
				Comment: "ED$COL,50";
			}
			Parameter ccalc_cCT_rK_ge {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_ and ord(nIFGD)=ECP_SCRUB(UtilitySector_Element(PlantType_ECP), cyr);
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and
					EFD_CONT(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD_Element(nIFGD), cyr)>=0) then
					1
					endif
				}
				Comment: "ED$COL,51";
			}
			Parameter ccalc_cCT_rDVle {
				IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption);
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and
					EFDMAT('1')=0) then
					if (CoalDiversityType='S' and EFD_SB_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)>=0.0 and EFD_RANK(CoalSupplyCurve)=2) or    !!  Subbituminous
					(CoalDiversityType='L' and EFD_LG_DVLIM(CoalDemandRegion_ALT1, UtilitySector_Element(PlantType_ECP), cyr)>=0.0 and EFD_RANK(CoalSupplyCurve)=3) then
					1
					endif
					endif
				}
				Comment: {
					"ED$COL,52; ED$COL,53"
				}
			}
			Parameter ccalc_cCT_rSULFle {
				IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and
					SO2SHR(SO2Region, CoalDemandRegion_ALT1) >0.0001) then
					XCL_SO2_YR(CoalSupplyCurve, cyr) * (1.0 - RCLCLNR(CoalDemandRegion_ALT1, cyr, PlantType_ECP)) * SO2SHR(SO2Region, CoalDemandRegion_ALT1) * 0.5 $
					(XCL_SO2_YR(CoalSupplyCurve, cyr) * (1.0 - RCLCLNR(CoalDemandRegion_ALT1, cyr, PlantType_ECP)) * SO2SHR(SO2Region, CoalDemandRegion_ALT1) * 0.5 > EFD_MIN('1'))
					
					endif
				}
				Comment: "ED$COL,54";
			}
			Parameter ccalc_cCT_rMERC_le {
				IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)| PlantType_ECP in CoalPlant_ECP_  and nHGCODE=HG_GRP_Element(CoalDemandRegion_ALT1);
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 ) then
					
					XCL_HG_YR(CoalSupplyCurve, cyr) * EMF_T(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP, ACIOption_Mapping(ACIOption)) * 0.5 $
					(XCL_HG_YR(CoalSupplyCurve, cyr) * EMF_T(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP, ACIOption_Mapping(ACIOption)) * 0.5 > EFD_MIN('1'))
					endif
				}
				Comment: "ED$COL,55";
			}
			Parameter ccalc_cCT_rCARBONXXle {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and CarbonCap_National) then
					
					(1.0 / 2204.0) * XCL_CAR_YR(CoalSupplyCurve, cyr) * (12.0/44.0) $
					((1.0 / 2204.0) * XCL_CAR_YR(CoalSupplyCurve, cyr) * (12.0/44.0) > EFD_MIN('1'))
					endif
				}
				Comment: "ED$COL,56";
			}
			Parameter ccalc_cCT_rCARBONXXn {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP) and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and CarbonCap_National=0) then
					
					(1.0 / 2204.0) * XCL_CAR_YR(CoalSupplyCurve, cyr) * (12.0/44.0) $
					((1.0 / 2204.0) * XCL_CAR_YR(CoalSupplyCurve, cyr) * (12.0/44.0) > EFD_MIN('1'))
					endif
				}
				Comment: "ED$COL,56";
			}
			Parameter ccalc_cCT_rACICSTle {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and ACIOption>'0') then
					
					!max(ACI_QAC(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP)*0.000001, 0.0001)
					max(RACI(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP, ACIOption_Mapping(ACIOption))*0.000001, 0.0001)
					endif
				}
				Comment: "ED$COL,57";
			}
			Parameter ccalc_cCT_rACIRMVXXn {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)| PlantType_ECP in CoalPlant_ECP_;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and
					EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 and
					ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr)>0 and ACIOption>'0') then
					
					XCL_HG_YR(CoalSupplyCurve, cyr) * (EMF_T(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP, '1') -
					EMF_T(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP, ACIOption_Mapping(ACIOption))) * 0.5
					endif
				}
				Comment: "ED$COL,58";
			}
			Parameter ccalc_cRHS_rT_le {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
				Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
				Definition: {
					!IF (TOT_TYPE(CoalSupplyCurve) > 0 and CP_CRG(PlantType_ECP, CoalDemandRegion_ALT1) > 0.0 and CoalSupplyCurve <= MX_NCOALS_Element and
					!XCL_TRNINDX(UtilitySector_Element(PlantType_ECP), CoalSupplyCurve, CoalDemandRegion_ALT1)> 0 and
					!XCL_TR_T2(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr)> XCL_TR_T1(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr) and
					!EFD_TIER1_LIM(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD_to_ScrubCode(nIFGD), cyr)>0 AND ord(PlantType_ECP)<WIPC('1')) then
					!
					!endif
					EFD_TIER1_LIM(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD_Element(nIFGD), cyr) $ rT_Flag(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD)
				}
				Comment: "ED$COL,60";
			}
			Parameter ccalc_cC_Z_EFDCOSTS {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
				Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
				Definition: {
					max(0.0001, XCL_TR_T2(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr)*XCL_2TESC0(CoalSupplyCurve, cyr, CoalDemandRegion_ALT1) -
					XCL_TR_T1(CoalSupplyCurve, CoalDemandRegion_ALT1, cyr)*XCL_1TESC0(CoalSupplyCurve, cyr, CoalDemandRegion_ALT1)) $
					rT_Flag(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD)
				}
				Comment: "ED$COL,61";
			}
			Parameter ccalc_cC_Z_rT_le {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
				Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
				Definition: -1 $ (rT_Flag(CoalSupplyCurve, CoalDemandRegion_ALT1, nIFGD) and EFDMAT('1')=0);
				Comment: "ED$COL,62";
			}
			Parameter ccalc_cCTLS_rSULFURle {
				IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
				Definition: {
					if CTLS_COEFF(SO2Region, CoalSupplyCurve, CoalDemandRegion_ALT1)>0 and rSULFUR_Flag(SO2Region) then
					     1
					endif
				}
				Comment: "ED$COL,63";
			}
			Parameter ccalc_cCTLS_rSULFURn {
				IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
				Definition: {
					if CTLS_COEFF(SO2Region, CoalSupplyCurve, CoalDemandRegion_ALT1)>0 and rSULFUR_Flag(SO2Region)=0 then
					     1
					endif
				}
				Comment: "ED$COL,63";
			}
			Parameter ccalc_cCTLS_LBOUND {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region);
				Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: LBOUND";
				Definition: {
					if CTLS_COEFF(SO2Region, CoalSupplyCurve, CoalDemandRegion_ALT1)>0 then
					     CTLS_COEFF(SO2Region, CoalSupplyCurve, CoalDemandRegion_ALT1)
					endif
				}
				Comment: "ED$COL,64";
			}
			Parameter ccalc_cCTLS_UBOUND {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region);
				Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if CTLS_COEFF(SO2Region, CoalSupplyCurve, CoalDemandRegion_ALT1)>0 then
					     CTLS_COEFF(SO2Region, CoalSupplyCurve, CoalDemandRegion_ALT1)
					else
					     inf
					endif
				}
				Comment: "ED$COL,64";
			}
			Parameter ccalc_cCTLHG_rMERCURYle {
				IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
				Definition: {
					if EMEL_QHG(nHGCODE, cyr)< 100 and CTLHG_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1') then
					  1
					endif
				}
				Comment: "ED$COL,65";
			}
			Parameter ccalc_cCTLHG_rMERCURYn {
				IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
				Definition: {
					if EMEL_QHG(nHGCODE, cyr)>= 100 and CTLHG_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1') then
					  1
					endif
				}
				Comment: "ED$COL,65";
			}
			Parameter ccalc_cCTLHG_LBOUND {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)HG and OML Rows: LBOUND";
				Definition: {
					if CTLHG_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1') then
					  CTLHG_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)
					endif
				}
				Comment: "ED$COL,66";
			}
			Parameter ccalc_cCTLHG_UBOUND {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)HG and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if CTLHG_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1') then
					  CTLHG_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)
					else
					  inf
					endif
				}
				Comment: "ED$COL,66";
			}
			Parameter ccalc_cCTLCO_rCARBONXXle {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
				Definition: {
					if CarbonCap_National and CTLCO_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1') then
					  1
					endif
				}
				Comment: "ED$COL,67";
			}
			Parameter ccalc_cCTLCO_rCARBONXXn {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
				Definition: {
					if CarbonCap_National=0 and CTLCO_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1') then
					  1
					endif
				}
				Comment: "ED$COL,67";
			}
			Parameter ccalc_cCTLCO_LBOUND {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)CO and OML Rows: LBOUND";
				Definition: {
					if CTLCO_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1') then
					  CTLCO_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)
					endif
				}
				Comment: "ED$COL,68";
			}
			Parameter ccalc_cCTLCO_UBOUND {
				IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)CO and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if CTLCO_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1') then
					  CTLCO_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)
					else
					  inf
					endif
				}
				Comment: "ED$COL,68";
			}
			Parameter ccalc_cCTLCO_rCARBONle {
				IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
				Definition: {
					if CarbonCap_Regional(CarbonRegion) and CTLCO_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1')>0 and
					sum(FuelRegion|CarbonRegion=EPCAMP_CarbonRegion(FuelRegion), CLCONFC(CoalDemandRegion_ALT1, FuelRegion))>0 then
					  sum(FuelRegion|CarbonRegion=EPCAMP_CarbonRegion(FuelRegion), CLCONFC(CoalDemandRegion_ALT1, FuelRegion))
					endif
				}
				Comment: "ED$COL,69";
			}
			Parameter ccalc_cCTLCO_rCARBONn {
				IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1);
				Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
				Definition: {
					if CarbonCap_Regional(CarbonRegion)=0 and CTLCO_COEFF(CoalSupplyCurve, CoalDemandRegion_ALT1)>EFD_MIN('1')>0 and
					sum(FuelRegion|CarbonRegion=EPCAMP_CarbonRegion(FuelRegion), CLCONFC(CoalDemandRegion_ALT1, FuelRegion))>0 then
					  sum(FuelRegion|CarbonRegion=EPCAMP_CarbonRegion(FuelRegion), CLCONFC(CoalDemandRegion_ALT1, FuelRegion))
					endif
				}
				Comment: "ED$COL,69";
			}
			Parameter ccalc_cCTLSO2_LBOUND {
				IndexDomain: (CoalDemandRegion_ALT1);
				Text: "OML Columns: CTLSO2(*) and OML Rows: LBOUND";
				Definition: {
					if CTLSO2_COEFF(CoalDemandRegion_ALT1)>ECP_MIN('1') then
					1
					endif
				}
				Comment: "ED$COL,64.1";
			}
			Parameter ccalc_cCTLSO2_UBOUND {
				IndexDomain: (CoalDemandRegion_ALT1);
				Text: "OML Columns: CTLSO2(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if CTLSO2_COEFF(CoalDemandRegion_ALT1)>ECP_MIN('1') then
					1
					else
					inf
					endif
				}
				Comment: "ED$COL,64.1";
			}
		}
		DeclarationSection ED_GAS_Completed {
			Parameter GASQTY {
				Text: "trillion BTU";
				Definition: {
					sum(SupplyRegion_Sub,
					    (UFLGFNR('1',SupplyRegion_Sub,cyr)+(UFLGFNR('2',SupplyRegion_Sub,cyr))) +
					    (UFLGINR('1',SupplyRegion_Sub,cyr)+(UFLGINR('2',SupplyRegion_Sub,cyr))) +
					     (UFLGCNR('1',SupplyRegion_Sub,cyr)+(UFLGCNR('2',SupplyRegion_Sub,cyr))) +
					     (UFLDGNR('1',SupplyRegion_Sub,cyr)+(UFLDGNR('2',SupplyRegion_Sub,cyr))) )
				}
			}
			Parameter VALUENG {
				IndexDomain: GasProductionStep;
				Range: free;
				Definition: ((Val(GasProductionStep) - 1) - UPCRVSTP('1')) * UPCRVSIZ('1')*GASQTY;
				Comment: "Input to ELNGSCRV_Function";
			}
			Parameter ccalc_cGTUS_rS_NGUSle {
				IndexDomain: (GasRegion,GasSeason);
				Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
				Definition: {
					if (EFDMAT('1') = 0.0) then
					   1.0
					endif
				}
			}
			Parameter ccalc_cGTUS_rNGle {
				IndexDomain: (GasRegion,GasSeason);
				Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
				Definition: {
					if (EFDMAT('1') = 0.0) then
					-1.0
					endif
				}
			}
			Parameter ccalc_cGPUS_UBOUND {
				IndexDomain: (GasProductionStep);
				Text: "OML Columns: GPUS(**) and OML Rows: UBOUND";
				Definition: {
					IF (GasProductionStep = '01') THEN
					  GASQTY - UPCRVSTP('1') * (UPCRVSIZ('1')*GASQTY)
					ELSE
					  UPCRVSIZ('1') * GASQTY
					ENDIF
				}
			}
			Parameter ccalc_cGPUS_rS_NGUSle {
				IndexDomain: (GasProductionStep);
				Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
				Definition: {
					if (EFDMAT('1') = 0.0) then
					   -1.0
					endif
				}
			}
			Parameter ccalc_cGTUS_EFDCOSTS {
				IndexDomain: (GasRegion,GasSeason);
				Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
				Definition: {
					!  Remove carbon cost, if EFD constraint included
					SPNGELGR(GasRegion,cyr,Three_element(GasSeason)) - (OGWPRNG(OGSMReg_LastElement,cyr) / CFNGC(cyr)) -
					IF ((USW_CAR('1') = 2 OR USW_CAR('1') = 3) AND (CURIYR('1') + UHBSYR('1')) >= UYR_CAR('1') and (TAX_FLAG('1')=1 OR PERMIT_FLAG('1')=1) ) THEN
						JGFELGR(cyr)
					endif
					!IF ((USW_CAR('1') = 2 OR USW_CAR('1') = 3) AND (CURIYR('1') + UHBSYR('1')) >= UYR_CAR('1') and (TAX_FLAG('1')=1 OR PERMIT_FLAG('1')=1) ) THEN
					!!               COEFF = COEFF - DBLE(JGFELGR(CURIYR))
					!  SPNGELGR(GasRegion,cyr,Three_element(GasSeason)) - (OGWPRNG(OGSMReg_LastElement,cyr) / CFNGC(cyr))- JGFELGR(cyr)
					!ELSE
					!  SPNGELGR(GasRegion,cyr,Three_element(GasSeason)) - (OGWPRNG(OGSMReg_LastElement,cyr) / CFNGC(cyr))
					!ENDIF
					
					
					
					
					!                    ! 13 = max number of OGSM regions, replace with some identifier not hardwired
					!                    COEFF = DBLE(SPNGELGR(GRG,CURIYR,SSN) - (OGWPRNG(MNUMOR,CURIYR) / CFNGC(CURIYR)))
					!!  Remove carbon cost, if EFD constraint included
					!           IF ((USW_CAR .EQ. 2 .OR. USW_CAR .EQ. 3) .AND. (CURIYR + UHBSYR) .GE. UYR_CAR)THEN
					!              IF (TAX_FLAG .OR. PERMIT_FLAG)THEN
					!                 COEFF = COEFF - DBLE(JGFELGR(CURIYR))
					!              END IF
					!           END IF
				}
				Comment: "ED$GAS,8";
			}
			Parameter ccalc_cGTUS_rCARBONXXle {
				IndexDomain: (GasRegion,GasSeason);
				Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
				Definition: {
					IF (CarbonCap_National = 1) THEN
						EGFEL(cyr) * 0.001 $ (EGFEL(cyr) * 0.001 > EFD_MIN('1'))
					ENDIF
				}
			}
			Parameter ccalc_cGTUS_rCARBONXXn {
				IndexDomain: (GasRegion,GasSeason);
				Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
				Definition: {
					IF (CarbonCap_National = 0) THEN
						EGFEL(cyr) * 0.001 $ (EGFEL(cyr) * 0.001 > EFD_MIN('1'))
					ENDIF
				}
			}
			Parameter ccalc_cGPUS_EFDCOSTS {
				IndexDomain: (GasProductionStep);
				Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
				Definition: {
					if ELNGSCRV_Function( VALUENG)(GasProductionStep)>0.001 then
					 ELNGSCRV_Function( VALUENG)(GasProductionStep)
					else
					  Val(GasProductionStep)*ELNGSCRV_Function( VALUENG)(GasProductionStep)
					endif
				}
				Comment: "ED$GAS,3";
			}
		}
		DeclarationSection ED_GRD_Completed {
			Parameter ccalc_cDPVCP_LBOUND {
				IndexDomain: (SupplyRegion_ALT2) | DPVDISPATCH('1') and SupplyRegion_ALT2 in SupplyRegion_SUB_;
				Text: "OML Columns: DPVCP(**) and OML Rows: LBOUND";
				Definition: {
					!GRD_RATSA(Element(PlantType_ECP_,WIPV('1')), SupplyRegion, GridResilienceSource)
					DPVTOTCAPNR(SupplyRegion_ALT2, cyr) * 0.001
				}
				Comment: "ED$GRD,3";
			}
			Parameter ccalc_cDPVCP_UBOUND {
				IndexDomain: (SupplyRegion_ALT2) | DPVDISPATCH('1') and SupplyRegion_ALT2 in SupplyRegion_SUB_;
				Text: "OML Columns: DPVCP(**) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: DPVTOTCAPNR(SupplyRegion_ALT2, cyr) * 0.001;
				Comment: "ED$GRD,3";
			}
			Parameter ccalc_cDPVCP_rGRDRTge {
				IndexDomain: {
					(SupplyRegion_ALT2,GridResilienceSource) | DPVDISPATCH('1') and SupplyRegion_ALT2 in SupplyRegion_SUB_ and GRD_RATSA(WIPV_Element, SupplyRegion_ALT2, GridResilienceSource)>=0 and
					GridResilienceSource in GRD_CASN_Set_
				}
				Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
				Definition: {
					if DPVTOTCAPNR(SupplyRegion_ALT2, cyr)>0 then
					  if (USW_GRD('1') = Val(GridResilienceSource) AND GRD_TGTS(cyr, SupplyRegion_ALT2) > 0.0) then
					    -1.0 * (DPVTOTGENNR(SupplyRegion_ALT2, cyr) / DPVTOTCAPNR(SupplyRegion_ALT2, cyr)) * (GRD_RATSA(WIPV_Element, SupplyRegion_ALT2, GridResilienceSource) - GRD_TGTS(cyr, SupplyRegion_ALT2))
					  else
					    -1.0 * (DPVTOTGENNR(SupplyRegion_ALT2, cyr) / DPVTOTCAPNR(SupplyRegion_ALT2, cyr)) * GRD_RATSA(WIPV_Element, SupplyRegion_ALT2, GridResilienceSource)
					  endif
					else
					  -1
					endif
				}
				Comment: "ED$GRD,4";
			}
			Parameter ccalc_cDPVCP_rGRDGNge {
				IndexDomain: {
					(SupplyRegion_ALT2,GridResilienceSource) | DPVDISPATCH('1') and SupplyRegion_ALT2 in SupplyRegion_SUB_ and GRD_RATSA(WIPV_Element, SupplyRegion_ALT2, GridResilienceSource)>=0 and
					GridResilienceSource in GRD_CASN_Set_
				}
				Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
				Definition: {
					if DPVTOTCAPNR(SupplyRegion_ALT2, cyr)>0 then
					  -1.0 * (DPVTOTGENNR(SupplyRegion_ALT2, cyr) / DPVTOTCAPNR(SupplyRegion_ALT2, cyr))
					else
					  -1.0
					endif
				}
				Comment: "ED$GRD,5";
			}
		}
		DeclarationSection ED_LOAD_Completed {
			Parameter ccalc_cG_rLDge {
				IndexDomain: {
					   (SupplyRegion,Season,Slice,SupplyRegion_ALT1) | SupplyRegion in SupplyRegion_SUB_ and SupplyRegion_ALT1 in SupplyRegion_SUB_ and SupplyRegion = SupplyRegion_ALT1 and
					Slice in Slice_Active_
				}
				Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
				Definition: UTWDTH(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion_ALT1)) * 0.1;
			}
			Parameter ccalc_cSPx_EFDCOSTS {
				IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and Slice in Slice_Active_;
				Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
				Definition: -0.001;
			}
			Parameter ccalc_cSPx_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice)| SupplyRegion in SupplyRegion_SUB_ and Slice in Slice_Active_;
				Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
				Definition: -1.0;
				Comment: "ED$LOAD,9";
			}
			Parameter ccalc_cSPx_LBOUND {
				IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and  Slice in Slice_Active_;
				Text: "OML Columns: SP(****)(*)(*) and OML Rows: LBOUND";
				Definition: {
					SR_RQMT_HGHT(SupplyRegion) * UTHGHT(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion),SupplyRegion)
					+ SR_RQMT_DIFF(SupplyRegion) * (MAX_Load(Season,SupplyRegion) - UTHGHT(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion),SupplyRegion) )
				}
			}
			Parameter ccalc_cSPx_UBOUND {
				IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and  Slice in Slice_Active_;
				Text: "OML Columns: SP(****)(*)(*) and OML Rows: UBOUND";
				Default: inf;
				Definition: 30000.0;
			}
			Parameter ccalc_cG_LBOUND {
				IndexDomain: (SupplyRegion_ALT1) | SupplyRegion_ALT1 in SupplyRegion_SUB_;
				Text: "OML Columns: G(*)CGTRAD and OML Rows: LBOUND";
				Definition: BTCOGEN(SupplyRegion_ALT1) / 8.76;
			}
			Parameter ccalc_cG_UBOUND {
				IndexDomain: (SupplyRegion_ALT1) | SupplyRegion_ALT1 in SupplyRegion_SUB_;
				Text: "OML Columns: G(*)CGTRAD and OML Rows: UBOUND";
				Default: inf;
				Definition: BTCOGEN(SupplyRegion_ALT1) / 8.76;
				Comment: "ED$LOAD,5";
			}
			Parameter ccalc_cES_EFDCOSTS {
				IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and Slice in Slice_Active_;
				Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					999.99 * UTWDTH(Segment2_element(Slice,Season,SupplyRegion),
					                   Group2_element(Slice,Season,SupplyRegion)) * 0.001
				}
			}
			Parameter ccalc_cES_UBOUND {
				IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and Slice in Slice_Active_;
				Text: "OML Columns: ES(****)(*)(*) and OML Rows: UBOUND";
				Default: inf;
				Definition: 99.9;
			}
			Parameter ccalc_cES_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and Slice in Slice_Active_;
				Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: 0.1 * UTWDTH(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion));
			}
			Parameter ccalc_cRHS_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and Slice in Slice_Active_;
				Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
				Definition: {
					0.1 * UTHGHT(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion),SupplyRegion)
					* UTWDTH(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion))
				}
			}
		}
		DeclarationSection ED_OIL_Completed {
			Parameter ccalc_cRTUS_rCARBONXXle {
				IndexDomain: (OilRegion);
				Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
				Definition: {
					IF (CarbonCap_National = 1) THEN
						max(ERLEL(cyr) * 0.001, EFD_MIN('1'))
					ENDIF
				}
				Comment: "ED$OIL,7.1";
			}
			Parameter ccalc_cRTUS_rCARBONXXn {
				IndexDomain: (OilRegion);
				Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
				Definition: {
					IF (CarbonCap_National = 0) THEN
						max(ERLEL(cyr) * 0.001, EFD_MIN('1'))
					ENDIF
				}
				Comment: "ED$OIL,7.1";
			}
			Parameter ccalc_cRPUS_rS_RSUSle {
				IndexDomain: (ResidProductionStep);
				Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
				Definition: -1.0 $ (EFDMAT('1')=0);
				Comment: "ED$OIL,3";
			}
			Parameter ccalc_cRTUS_EFDCOSTS {
				IndexDomain: (OilRegion);
				Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
				Definition: {
					!  Remove carbon cost, if EFD Constraint
					 IF (CarbonCap_National = 1 AND (TAX_FLAG('1') OR PERMIT_FLAG('1'))) THEN
					     UPFUEL(FuelType_UIRL_element,int_fuel_region_element_oil(OilRegion)) - IT_WOP(cyr,'1')/CFCRDIMP(cyr) - JRSEL(cyr)
					  ELSE
					     UPFUEL(FuelType_UIRL_element,int_fuel_region_element_oil(OilRegion)) - IT_WOP(cyr,'1')/CFCRDIMP(cyr)
					  ENDIF
				}
				Comment: "ED$OIL,7";
			}
			Parameter ccalc_cRPUS_EFDCOSTS {
				IndexDomain: (ResidProductionStep);
				Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
				Definition: IT_WOP(cyr,'1')/CFCRDIMP(cyr);
				Comment: "ED$OIL,2";
			}
			Parameter ccalc_cRTUS_rS_RSUSle {
				IndexDomain: (OilRegion);
				Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
				Definition: 1.0  $ (EFDMAT('1')=0);
				Comment: "ED$OIL,5";
			}
			Parameter ccalc_cRTUS_rRSle {
				IndexDomain: (CensusRegion,OilRegion) | CensusRegion <> '10' and CensusRegion <> '11';
				Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
				Definition: {
					IF (ord(OilRegion) = ord(CensusRegion) and  EFDMAT('1')=0) THEN
					-1.0
					ENDIF
				}
				Comment: "ED$OIL,6";
			}
			Parameter ccalc_cRTUS_rSULFle {
				IndexDomain: (PlantType_ECP,SO2Region,OilRegion)| PlantType_ECP=WIST_Element;
				Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
				Definition: {
					UFRSO2(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * SO2_SHR_BY_OLRG(OilRegion_to_Census(OilRegion), SO2Region) * 0.5 $
					(SO2_SHR_BY_OLRG(OilRegion_to_Census(OilRegion), SO2Region)>0 and
					UFRSO2(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * SO2_SHR_BY_OLRG(OilRegion_to_Census(OilRegion), SO2Region) * 0.5 > EFD_MIN('1'))
				}
				Comment: "ED$OIL,8";
			}
			Parameter ccalc_cRTUS_rMERC_RSle {
				IndexDomain: (nHGCODE,OilRegion) | nHGCODE in NUM_HG_GRP_Set_;
				Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
				Definition: {
					UFRHG(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * 0.5 $
					(UFRHG(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * 0.5 > EFD_MIN('1'))
				}
				Comment: "ED$OIL,9";
			}
			Parameter ccalc_cDPUS_EFDCOSTS {
				IndexDomain: (DistillateProductionStep);
				Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
				Definition: IT_WOP(cyr,'1')/CFCRDIMP(cyr);
				Comment: "ED$OIL,11";
			}
			Parameter ccalc_cDPUS_rS_DSUSle {
				IndexDomain: (DistillateProductionStep);
				Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
				Definition: -1.0 $ (EFDMAT('1')=0);
				Comment: "ED$OIL,12";
			}
			Parameter ccalc_cDTUS_rS_DSUSle {
				IndexDomain: (OilRegion);
				Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
				Definition: 1.0  $ (EFDMAT('1')=0);
				Comment: "ED$OIL,14";
			}
			Parameter ccalc_cDTUS_rDSle {
				IndexDomain: (CensusRegion,OilRegion);
				Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
				Definition: {
					IF (ord(OilRegion) = ord(CensusRegion) and  EFDMAT('1')=0) THEN
					-1.0
					ENDIF
				}
				Comment: "ED$OIL,15";
			}
			Parameter ccalc_cDTUS_EFDCOSTS {
				IndexDomain: (OilRegion);
				Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
				Definition: {
					UPFUEL(FuelType_UIDS_element,int_fuel_region_element_oil(OilRegion)) - IT_WOP(cyr,'1')/CFCRDIMP(cyr) -
					IF (CarbonCap_National = 1 AND (TAX_FLAG('1') OR PERMIT_FLAG('1'))) THEN JDSEL(cyr)
					ENDIF
				}
				Comment: "ED$OIL,16";
			}
			Parameter ccalc_cDTUS_rCARBONXXle {
				IndexDomain: (OilRegion);
				Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
				Definition: {
					IF (CarbonCap_National = 1) THEN
						max(EDSEL(cyr) * 0.001, EFD_MIN('1'))
					ENDIF
				}
				Comment: "ED$OIL,16.1";
			}
			Parameter ccalc_cDTUS_rCARBONXXn {
				IndexDomain: (OilRegion);
				Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
				Definition: {
					IF (CarbonCap_National = 0) THEN
						max(EDSEL(cyr) * 0.001, EFD_MIN('1'))
					ENDIF
				}
				Comment: "ED$OIL,16.1";
			}
			Parameter ccalc_cDTUS_rMERC_DSle {
				IndexDomain: (nHGCODE,OilRegion) | nHGCODE in NUM_HG_GRP_Set_;
				Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
				Definition: {
					UFRHG(FuelType_UIDS_element, int_fuel_region_element_oil(OilRegion)) * 0.5 $
					(UFRHG(FuelType_UIDS_element, int_fuel_region_element_oil(OilRegion)) * 0.5 > EFD_MIN('1'))
				}
				Comment: "ED$OIL,17";
			}
		}
		DeclarationSection ED_OP_Completed {
			Parameter ccalc_cRHS_rMRXge {
				IndexDomain: (PlantGroup);
				Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
				Definition: {
					if PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))  then
					Intermediate_ccalc_cRHS_rMRXge(PlantGroupOrd2PlantGroup(PlantGroup))
					endif
					
					/*
					
					DO N = 1, N_EFD_GRPS
					 IECP = UG_ECPt(N)
					   IF (UG_MRUN(N) .GT. 0 .AND. IECP .LE. (ECP$DSP + ECP$RNW)) THEN
					      IPGRP = EFD_GRPS_F(N)
					      WRITE(NUM,'(I5.5)') IPGRP
					      ROW = 'MR'//NUM//'X'; call makmsk(ROW_mask,':MR:',NUM,':X:')
					      IF (EFDMAT .EQ. 0) CALL DROWTYPE(ROW,'G       ',ROW_mask)
					      VALUE = 0.0
					      DO WHILE (IPGRP .GT. 0)
					         DO IS = 1, EENSP
					           VALUE = VALUE + ECMRUNCF(IPGRP) * EFACTR * UP_CAP(IS,IPGRP) * EETIME(IS) * 0.001
					         ENDDO
					         IPGRP = EFD_GRPS_N(IPGRP)
					      END DO
					      VALUE = 0.99 * VALUE
					      CALL DRHS(EFDRHS,ROW,VALUE*0.1,ROW_mask,'ED$OP,1')
					   ENDIF
					END DO
					!*/
				}
				Comment: "ED$OP,1";
			}
			Parameter Intermediate_ccalc_cRHS_rMRXge {
				IndexDomain: (PlantGroupOrd);
				Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
				Definition: {
					
					SUM((PlantGroup,Season)|UG_MRUN(PlantGroupOrd) > 0 AND UG_ECPt(PlantGroupOrd) <= (card(DispatchableECP_) +ECP_RNW('1'))  !+ card(OtherRenewable_))
					and PlantGroup2PlantGroupOrd_Map(PlantGroup, PlantGroupOrd), ECMRUNCF(PlantGroup)*EFACTR('1', first(SupplyRegion))*UP_CAP(Season, PlantGroup)*EETIME(Season, first(SupplyRegion))*0.001)*0.1*0.99
					
					                                         /*
					
					                                             DO N = 1, N_EFD_GRPS
					                                               IECP = UG_ECPt(N)
					                                                 IF (UG_MRUN(N) .GT. 0 .AND. IECP .LE. (ECP$DSP + ECP$RNW)) THEN
					  IPGRP = EFD_GRPS_F(N)
					  WRITE(NUM,'(I5.5)') IPGRP
					  ROW = 'MR'//NUM//'X'; call makmsk(ROW_mask,':MR:',NUM,':X:')
					  IF (EFDMAT .EQ. 0) CALL DROWTYPE(ROW,'G       ',ROW_mask)
					  VALUE = 0.0
					  DO WHILE (IPGRP .GT. 0)
					     DO IS = 1, EENSP
					       VALUE = VALUE + ECMRUNCF(IPGRP) * EFACTR * UP_CAP(IS,IPGRP) * EETIME(IS) * 0.001
					     ENDDO
					     IPGRP = EFD_GRPS_N(IPGRP)
					  END DO
					  VALUE = 0.99 * VALUE
					  CALL DRHS(EFDRHS,ROW,VALUE*0.1,ROW_mask,'ED$OP,1')
					                                                 ENDIF
					                                              END DO
					                                        !*/
				}
			}
			Parameter ccalc_cRHS_rP2le {
				IndexDomain: (Slice,SupplyRegion,Season) |P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
				Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
				Definition: {
					P2_TEST(SupplyRegion) * 0.001 * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion) * 0.1
					
					
					
					!IF (P2_TEST(IRG) .GT. 0.0) THEN
					!          DO IS = 1, EENSP
					!             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
					!             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
					!               DO IVSL = 1 , ELNVCT(IS)
					!                  GRP = ELGRP(IVSL,IS)
					!                  SEG = ELSEG(IVSL,IS)
					!                  FSL = EFD_Slice_ID(GRP,SEG)
					!                  FSLCD = CHAR(64+FSL)
					!                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
					!                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
					!                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
					!                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
					!                  CALL DVAL(COL,LOAD,DBLE(-1.0),COL_mask,LOAD_mask,'ED$OP,9')
					!
					!                  P2ROW = 'P2' // FSLCD // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(P2ROW_mask,':P2:' , FSLCD , URGNME(IRG)(1:4) , CHCOD(IS))
					!                  CALL DROWTYPE(P2ROW,'L       ',P2ROW_mask)
					!                  CALL DVAL(COL,P2ROW,DBLE(1.0),COL_mask,P2ROW_mask,'ED$OP,10')
					!                  CALL DRHS(EFDRHS,P2ROW,DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),P2ROW_mask,'ED$OP,11')
				}
				Comment: "ED$OP,11";
			}
			Parameter P2_TEST {
				IndexDomain: SupplyRegion;
				Definition: {
					sum(PlantGroupOrd | UG_EFDt(PlantGroupOrd)=UIHYR('1') and UG_ECPt(PlantGroupOrd)= WIP2('1') and Ord(SupplyRegion)=UG_EMM_RG(PlantGroupOrd), UG_CAP(Season0,PlantGroupOrd))
					
					
					
					!!   loop over all EFD Groups
					!
					!      DO N = 1, N_EFD_GRPS
					!       IRG = UG_EMM_RG(N)
					!       IP = UG_EFDt(N)
					!!
					!!      ACCUMULATE TOTAL GENERATION BY ECP TYPE FOR MUST RUN CONSTRAINT SAFETY CALCULATION
					!!
					!       IECP = UG_ECPt(N)
					!       IF (UG_MRUN(N) .GT. 0) THEN
					!          TGEN(IECP,IRG) = TGEN(IECP,IRG) + UG_GEN(0,N)
					!       END IF
					!       IF (IP .EQ. UIHYR) PS_TEST(IRG) = PS_TEST(IRG) + UG_CAP(0,N)
					!       IF (IP .EQ. UIHYR) THEN
					!           IF (IECP .EQ. WIP2) THEN
					!               P2_TEST(IRG) = P2_TEST(IRG) + UG_CAP(0,N)
					!           ELSE
					!               PS_TEST(IRG) = PS_TEST(IRG) + UG_CAP(0,N)
					!           END IF
					!       ENDIF
					!      END DO
				}
			}
			Parameter PS_TEST {
				IndexDomain: SupplyRegion;
				Definition: {
					sum(PlantGroupOrd | UG_EFDt(PlantGroupOrd)=UIHYR('1') and UG_ECPt(PlantGroupOrd)<> WIP2('1') and Ord(SupplyRegion)=UG_EMM_RG(PlantGroupOrd), UG_CAP(Season0,PlantGroupOrd))
					
					
					
					!!   loop over all EFD Groups
					!
					!      DO N = 1, N_EFD_GRPS
					!       IRG = UG_EMM_RG(N)
					!       IP = UG_EFDt(N)
					!!
					!!      ACCUMULATE TOTAL GENERATION BY ECP TYPE FOR MUST RUN CONSTRAINT SAFETY CALCULATION
					!!
					!       IECP = UG_ECPt(N)
					!       IF (UG_MRUN(N) .GT. 0) THEN
					!          TGEN(IECP,IRG) = TGEN(IECP,IRG) + UG_GEN(0,N)
					!       END IF
					!       IF (IP .EQ. UIHYR) PS_TEST(IRG) = PS_TEST(IRG) + UG_CAP(0,N)
					!       IF (IP .EQ. UIHYR) THEN
					!           IF (IECP .EQ. WIP2) THEN
					!               P2_TEST(IRG) = P2_TEST(IRG) + UG_CAP(0,N)
					!           ELSE
					!               PS_TEST(IRG) = PS_TEST(IRG) + UG_CAP(0,N)
					!           END IF
					!       ENDIF
					!      END DO
				}
			}
			Parameter ccalc_cS2_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice)|P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
				Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					-1
					
					!IF (P2_TEST(IRG) .GT. 0.0) THEN
					!          DO IS = 1, EENSP
					!             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
					!             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
					!               DO IVSL = 1 , ELNVCT(IS)
					!                  GRP = ELGRP(IVSL,IS)
					!                  SEG = ELSEG(IVSL,IS)
					!                  FSL = EFD_Slice_ID(GRP,SEG)
					!                  FSLCD = CHAR(64+FSL)
					!                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
					!                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
					!                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
					!                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
					!                  CALL DVAL(COL,LOAD,DBLE(-1.0),COL_mask,LOAD_mask,'ED$OP,9')
				}
				Comment: "ED$OP,9";
			}
			Parameter ccalc_cS2_rP2_le {
				IndexDomain: (SupplyRegion,Season,Slice)|P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
				Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
				Definition: {
					-1
					
					
					!IF (P2_TEST(IRG) .GT. 0.0) THEN
					!          DO IS = 1, EENSP
					!             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
					!             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
					!               DO IVSL = 1 , ELNVCT(IS)
					!                  GRP = ELGRP(IVSL,IS)
					!                  SEG = ELSEG(IVSL,IS)
					!                  FSL = EFD_Slice_ID(GRP,SEG)
					!                  FSLCD = CHAR(64+FSL)
					!                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
					!                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
					!                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
				}
				Comment: "ED$OP,8";
			}
			Parameter ccalc_cS2_rP2le {
				IndexDomain: (Slice,SupplyRegion,Season)|P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
				Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
				Definition: {
					                                        1
					
					
					
					
					                                        !IF (P2_TEST(IRG) .GT. 0.0) THEN
					                                        !          DO IS = 1, EENSP
					                                        !             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
					                                        !             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
					                                        !               DO IVSL = 1 , ELNVCT(IS)
					                                        !                  GRP = ELGRP(IVSL,IS)
					                                        !                  SEG = ELSEG(IVSL,IS)
					                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
					                                        !                  FSLCD = CHAR(64+FSL)
					                                        !                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
					                                        !                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
					                                        !                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
					                                        !                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
					                                        !                  CALL DVAL(COL,LOAD,DBLE(-1.0),COL_mask,LOAD_mask,'ED$OP,9')
					                                        !
					                                        !                  P2ROW = 'P2' // FSLCD // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(P2ROW_mask,':P2:' , FSLCD , URGNME(IRG)(1:4) , CHCOD(IS))
					                                        !                  CALL DROWTYPE(P2ROW,'L       ',P2ROW_mask)
					                                        !                  CALL DVAL(COL,P2ROW,DBLE(1.0),COL_mask,P2ROW_mask,'ED$OP,10')
				}
				Comment: "ED$OP,10";
			}
			Parameter ccalc_cS2_UBOUND {
				IndexDomain: (SupplyRegion,Season,Slice) |P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
				Text: "OML Columns: S2(****)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					                    P2_TEST(SupplyRegion) * 0.001 * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion) * 0.1
					
					
					                                        !IF (P2_TEST(IRG) .GT. 0.0) THEN
					                                        !          DO IS = 1, EENSP
					                                        !             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
					                                        !             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
					                                        !               DO IVSL = 1 , ELNVCT(IS)
					                                        !                  GRP = ELGRP(IVSL,IS)
					                                        !                  SEG = ELSEG(IVSL,IS)
					                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
					                                        !                  FSLCD = CHAR(64+FSL)
					                                        !                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
					                                        !                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
					                                        !                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
					                                        !                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
					                                        !                  CALL DVAL(COL,LOAD,DBLE(-1.0),COL_mask,LOAD_mask,'ED$OP,9')
					                                        !
					                                        !                  P2ROW = 'P2' // FSLCD // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(P2ROW_mask,':P2:' , FSLCD , URGNME(IRG)(1:4) , CHCOD(IS))
					                                        !                  CALL DROWTYPE(P2ROW,'L       ',P2ROW_mask)
					                                        !                  CALL DVAL(COL,P2ROW,DBLE(1.0),COL_mask,P2ROW_mask,'ED$OP,10')
					                                        !                  CALL DRHS(EFDRHS,P2ROW,DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),P2ROW_mask,'ED$OP,11')
				}
				Comment: "ED$OP,7";
			}
			Parameter ccalc_cST_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice)|PS_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
				Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					-1
					
					
					!DO IRG = 1 , UNRGNS
					!         IF (PS_TEST(IRG) .GT. 0.0) THEN
					!            DO IS = 1, EENSP
					!               ROWSTOR = 'PS_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':PS_:' , URGNME(IRG)(1:4) , CHCOD(IS))
					!               CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
					!               DO IVSL = 1 , ELNVCT(IS)
					!                  GRP = ELGRP(IVSL,IS)
					!                  SEG = ELSEG(IVSL,IS)
					!                  FSL = EFD_Slice_ID(GRP,SEG)
					!                  FSLCD = CHAR(64+FSL)
					!                  COL = 'ST'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':ST:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
					!                  CALL DBND(EFDBND,COL,0.0D0,DBLE(PS_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,2')
					!                  CALL DVAL(COL,ROWSTOR,NEG1,COL_mask,ROWSTOR_mask,'ED$OP,3')
					!                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
					!                  CALL DVAL(COL,LOAD,NEG1,COL_mask,LOAD_mask,'ED$OP,4')
				}
				Comment: "ED$OP,4";
			}
			Parameter ccalc_cST_rPS_le {
				IndexDomain: (SupplyRegion,Season,Slice) |PS_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
				Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
				Definition: {
					-1
					
					
					!DO IRG = 1 , UNRGNS
					!         IF (PS_TEST(IRG) .GT. 0.0) THEN
					!            DO IS = 1, EENSP
					!               ROWSTOR = 'PS_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':PS_:' , URGNME(IRG)(1:4) , CHCOD(IS))
					!               CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
					!               DO IVSL = 1 , ELNVCT(IS)
					!                  GRP = ELGRP(IVSL,IS)
					!                  SEG = ELSEG(IVSL,IS)
					!                  FSL = EFD_Slice_ID(GRP,SEG)
					!                  FSLCD = CHAR(64+FSL)
					!                  COL = 'ST'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':ST:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
					!                  CALL DBND(EFDBND,COL,0.0D0,DBLE(PS_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,2')
					!                  CALL DVAL(COL,ROWSTOR,NEG1,COL_mask,ROWSTOR_mask,'ED$OP,3')
				}
				Comment: "ED$OP,3";
			}
			Parameter ccalc_cST_UBOUND {
				IndexDomain: (SupplyRegion,Season,Slice) |PS_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
				Text: "OML Columns: ST(****)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					PS_TEST(SupplyRegion) * 0.001 * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion) * 0.1
					
					                !DO IRG = 1 , UNRGNS
					                !         IF (PS_TEST(IRG) .GT. 0.0) THEN
					                !            DO IS = 1, EENSP
					                !               ROWSTOR = 'PS_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':PS_:' , URGNME(IRG)(1:4) , CHCOD(IS))
					                !               CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
					                !               DO IVSL = 1 , ELNVCT(IS)
					                !                  GRP = ELGRP(IVSL,IS)
					                !                  SEG = ELSEG(IVSL,IS)
					                !                  FSL = EFD_Slice_ID(GRP,SEG)
					                !                  FSLCD = CHAR(64+FSL)
					                !                  COL = 'ST'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':ST:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
					                !                  CALL DBND(EFDBND,COL,0.0D0,DBLE(PS_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,2')
				}
				Comment: "ED$OP,2";
			}
		}
		DeclarationSection ED_PM_Completed {
			Parameter ccalc_cMB_EFDCOSTS {
				IndexDomain: {
					(PlantGroup,Season) | PlantGroup in DispatchableEFDGroup_ and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1
					                       and EFDMAT('1')=0 !and UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<=EFD_DSP('1')
				}
				Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
				Definition: {
					0.001
					!if PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))  then
					!0.001
					!endif
					
					!DO I_EFD_GRP = 1 , N_EFD_GRPS
					!         IRG = UG_EMM_RG(I_EFD_GRP)
					!         IP = UG_EFDt(I_EFD_GRP)
					!         IGRP = EFD_GRPS_F(I_EFD_GRP)
					!         IF (IP .LE. EFD$DSP) THEN
					!            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
					!               totpm = 0.0
					!               WRITE(NUM,'(I5.5)') IGRP
					!               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
					!               CALL DROWTYPE(ROW,'G       ',ROW_mask)
					!               DO IS = 1, EENSP
					!                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
					!                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
					!
					!
					!!                 put nominal cost in OBJ to prevent overscheduling
					!
					!                  CALL DVAL(COL,EFDOBJ,0.001D0,COL_mask,EFDOBJ,'ED$PM,5')
					!               ENDDO
				}
				Comment: "ED$PM,5";
			}
			Parameter ccalc_cMB_rCBle {
				IndexDomain: (PlantGroup,Season) | PlantGroup in DispatchableEFDGroup_ and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1 and EFDMAT('1')=0;
				Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
				Definition: {
					1
					
					!     DO I_EFD_GRP = 1 , N_EFD_GRPS
					!         IRG = UG_EMM_RG(I_EFD_GRP)
					!         IP = UG_EFDt(I_EFD_GRP)
					!         IGRP = EFD_GRPS_F(I_EFD_GRP)
					!
					!         IF (IP .LE. EFD$DSP) THEN
					!            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
					!               totpm = 0.0
					!               WRITE(NUM,'(I5.5)') IGRP
					!               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
					!               CALL DROWTYPE(ROW,'G       ',ROW_mask)
					!               DO IS = 1, EENSP
					!                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
					!                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
					!
					
					!
					!!                 intersect with capacity balance row
					!
					!                  CALL DVAL(COL,CBROW,1.0D0,COL_mask,CBROW_mask,'ED$PM,3')
				}
				Comment: "ED$PM,3";
			}
			Parameter ccalc_cMB_rMBge {
				IndexDomain: {
					(SupplyRegion_ALT1,PlantGroup,Season) | PlantGroup in DispatchableEFDGroup_ and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1 and
					UG_EMM_RG_Mapping(SupplyRegion_ALT1, PlantGroup) and EFDMAT('1')=0 !and UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<=EFD_DSP('1')
				}
				Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
				Definition: {
					EETIME(Season, SupplyRegion_ALT1)/1000.0
					!if PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))  then
					!   EETIME(Season, SupplyRegion_ALT1)/1000.0
					!endif
					
					!      DO I_EFD_GRP = 1 , N_EFD_GRPS
					!         IRG = UG_EMM_RG(I_EFD_GRP)
					!         IP = UG_EFDt(I_EFD_GRP)
					!         IGRP = EFD_GRPS_F(I_EFD_GRP)
					!         IF (IP .LE. EFD$DSP) THEN
					!            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
					!               totpm = 0.0
					!               WRITE(NUM,'(I5.5)') IGRP
					!               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
					!               CALL DROWTYPE(ROW,'G       ',ROW_mask)
					!               DO IS = 1, EENSP
					!                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
					!                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
					!
					!
					!!                 intersect with planned maintenance row
					!
					!                  HRVAL = DBLE(EETIME(IS)/1000.0)
					!                  CALL DVAL(COL,ROW,HRVAL,COL_mask,ROW_mask,'ED$PM,4')
				}
				Comment: "ED$PM,4";
			}
			Parameter ccalc_cMB_UBOUND {
				IndexDomain: {
					(PlantGroup,Season) | PlantGroup in DispatchableEFDGroup_ and
					                      EPPOPM(UG_EFDt_to_PlantType(PlantGroup))=1 and EFDMAT('1')=0
				}
				Text: "OML Columns: MB(*****)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.001;
				Comment: "ED$PM,2";
			}
			Parameter ccalc_cRHS_rCBle {
				IndexDomain: (PlantGroup,Season) | PlantGroup in FirstPlantGroup_;
				Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
				Definition: {
					if (EFDMAT('1')=0 and UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<=EFD_DSP('1') and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1 ) or
					(EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))) then
					  UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.001
					
					endif
					
					!DO I_EFD_GRP = 1 , N_EFD_GRPS
					!         IRG = UG_EMM_RG(I_EFD_GRP)
					!         IP = UG_EFDt(I_EFD_GRP)
					!         IGRP = EFD_GRPS_F(I_EFD_GRP)
					!         IF (IP .LE. EFD$DSP) THEN
					!            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
					!               totpm = 0.0
					!               WRITE(NUM,'(I5.5)') IGRP
					!               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
					!               CALL DROWTYPE(ROW,'G       ',ROW_mask)
					!               DO IS = 1, EENSP
					!                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
					!                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
					!
					!!                 capacity balance row
					!
					!                  CBROW = 'CB'//NUM//CHCODX(IS); call makmsk(CBROW_mask,':CB:',NUM,CHCODX(IS))
					!                  CALL DROWTYPE(CBROW,'L       ',CBROW_mask)
					!                  val = DBLE(UG_CAP(IS,I_EFD_GRP) * 0.001)
					!                  CALL DRHS(EFDRHS,CBROW,VAL,CBROW_mask,'ED$PM,1')
					
					!From OPRNBS:
					!ELSEIF (EPPOPR(IP) .EQ. 3) THEN
					!         CALL OPRNBS(N)
					!
					!IF (SR_CREDIT(IECP) .GT. 0.0) THEN
					!            ROW = 'CB'//NUM//CHCOD(IS); call makmsk(ROW_mask,':CB:',NUM,CHCOD(IS))
					!            CALL DROWTYPE(ROW,'L       ',ROW_mask)
					!            CALL DRHS(EFDRHS,ROW,DBLE(CAP(IS)*0.001),ROW_mask,'OPRNBS,16')
				}
				Comment: {
					"ED$PM,1
					OPRNBS,16"
				}
			}
			Parameter ccalc_cRHS_rMBge {
				IndexDomain: {
					(SupplyRegion_ALT1,PlantGroup) | PlantGroup in DispatchableEFDGroup_ and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1 and
					UG_EMM_RG_Mapping(SupplyRegion_ALT1, PlantGroup) and EFDMAT('1')=0
				}
				Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
				Definition: {
					max(0,sum(Season, UG_PMR(PlantGroupOrd2PlantGroup(PlantGroup))*UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))
					* 0.001* EETIME(Season, SupplyRegion_ALT1) * 0.001)-0.0005)
					
					
					!      DO I_EFD_GRP = 1 , N_EFD_GRPS
					!         IRG = UG_EMM_RG(I_EFD_GRP)
					!         IP = UG_EFDt(I_EFD_GRP)
					!         IGRP = EFD_GRPS_F(I_EFD_GRP)
					!         if (mnumyr.eq.36) then
					!           write (6,*) I_EFD_GRP,UG_EFDt(I_EFD_GRP),EFD_GRPS_F(I_EFD_GRP),EPPOPM(IP)
					!         endif
					!         IF (IP .LE. EFD$DSP) THEN
					!            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
					!               totpm = 0.0
					!               WRITE(NUM,'(I5.5)') IGRP
					!               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
					!               CALL DROWTYPE(ROW,'G       ',ROW_mask)
					!               DO IS = 1, EENSP
					!                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
					!                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
					!
					
					!               ENDDO
					!               val = MAX(0.0,DBLE(totpm)-0.0005)
					!               CALL DRHS(EFDRHS,ROW,VAL,ROW_mask,'ED$PM,6')
				}
				Comment: "ED$PM,6";
			}
		}
		DeclarationSection ED_RNW_Completed {
			Parameter ccalc_cRHS_rENeq {
				IndexDomain: {
					(PlantGroup,Season) | PlantGroup in FirstPlantGroup_ and
					(UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') or (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYC('1') and Val(cyr)+UHBSYR('1')<UPSTYR('1')))
				}
				Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
				Definition: {
					if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and RNW_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0 and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIP2('1')) then
					  RNW_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup)) * RNW_MAXXCF(Season, PlantGroupOrd2PlantGroup(PlantGroup)) * EETIME(Season, UG_EMM_RG_to_SupplyRegion(PlantGroup))*0.1
					endif
				}
				Comment: "ED$RNW,1";
			}
			Parameter ccalc_cRHS_rENle {
				IndexDomain: {
					(PlantGroup,Season) | PlantGroup in FirstPlantGroup_ and
					(UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') or (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYC('1') and Val(cyr)+UHBSYR('1')<UPSTYR('1')))
				}
				Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
				Definition: {
					if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<>UIHYR('1') or RNW_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))=0 or UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIP2('1')) then
					  RNW_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup)) * RNW_MAXXCF(Season, PlantGroupOrd2PlantGroup(PlantGroup)) * EETIME(Season, UG_EMM_RG_to_SupplyRegion(PlantGroup))*0.1
					endif
				}
			}
		}
		DeclarationSection ED_TRADE_Completed {
			Parameter ccalc_cTR_rIMle {
				IndexDomain: {
					(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					 (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					        1.0      !Import
					endif
					endif
				}
			}
			Parameter ccalc_cSR_rIMle {
				IndexDomain: {
					(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					        1.0   !import
					endif
					endif
				}
			}
			Parameter ccalc_cSC_rCNCPle {
				IndexDomain: {
					(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
					   and (SR_TRAN_CREDIT('1') > 0.0) then
					     1.0
					endif
					endif
				}
				Comment: "ED$TRADE,43";
			}
			Parameter ccalc_cTC_rCNCPle {
				IndexDomain: {
					(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001) then
					     1.0
					endif
					endif
				}
			}
			Parameter ccalc_cRHS_rCNCPle {
				IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) | Slice <= Max_Slice_element;
				Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (EFD_GW(Segment2_element(Slice,Season,LAST(SupplyRegion_Sub)),Group2_element(Slice,Season,LAST(SupplyRegion_Sub)),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001) then
					      EFD_GW(Segment2_element(Slice,Season,LAST(SupplyRegion_Sub)),Group2_element(Slice,Season,LAST(SupplyRegion_Sub)),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr)
					      * ECANSQZ(CanadianSupplyRegion,cyr)
					      * CAN_QTY_SCMULT(cyr)
					endif
					endif
				}
				Comment: "DBLE(EFD_GW(ISEG,GRP,CSTP,CRG,CURIYR) * ECANSQZ(CRG,CURIYR) * CAN_QTY_SCMULT(CURIYR))";
			}
			Parameter ccalc_cSC_rSRge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					               and SupplyRegion in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
					   and  (SR_TRAN_CREDIT('1') > 0.0)
					   and  (SupplyRegion = SupplyRegion_ALT2) then
					        SR_TRAN_CREDIT('1')
					      * (1  - LINELOSS('1'))
					endif
					endif
				}
				Comment: {
					"BLE(SR_TRAN_CREDIT*(1.0-LINELOSS))
					ED$TRADE,40"
				}
			}
			Parameter ccalc_cSC_rLDge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					               and SupplyRegion in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
					   and  (SR_TRAN_CREDIT('1') > 0.0)
					   and  (SupplyRegion = SupplyRegion_ALT2) then
					        (1 - SR_TRAN_CREDIT('1'))
					      * (1  - LINELOSS('1'))
					      * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2)) * 0.1
					endif
					endif
				}
				Comment: {
					"DBLE((1.0-SR_TRAN_CREDIT)*(1.0-LINELOSS)*HRS*0.1)
					ED$TRADE,39"
				}
			}
			Parameter ccalc_cTC_rLDge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					               and SupplyRegion in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
					   and  (SupplyRegion = SupplyRegion_ALT2) then
					        (1  - LINELOSS('1'))
					      * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2)) * 0.1
					endif
					endif
				}
				Comment: "DBLE((1.0-LINELOSS)*HRS*0.1)";
			}
			Parameter ccalc_cSC_EFDCOSTS {
				IndexDomain: {
					(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
					   and  (SR_TRAN_CREDIT('1') > 0) then
					      (1  - SR_TRAN_CREDIT('1'))
					    * ( (CAN_CST(ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) * CAN_CST_SCMULT(cyr))
					    + (PTHRESH1(cyr,CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2),SupplyRegion_All_element(SupplyRegion_ALT2)) + PTHRESH2(cyr,CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2),SupplyRegion_All_element(SupplyRegion_ALT2)) + BARRIER(cyr)) )
					    *  UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2)) * 0.001
					endif
					endif
				}
				Comment: "ED$TRADE,35";
			}
			Parameter ccalc_cTC_EFDCOSTS {
				IndexDomain: {
					(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001) then
					     (  (CAN_CST(ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) * CAN_CST_SCMULT(cyr))
					       + (PTHRESH1(cyr,CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2),SupplyRegion_All_element(SupplyRegion_ALT2)) + PTHRESH2(cyr,CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2),SupplyRegion_All_element(SupplyRegion_ALT2)) + BARRIER(cyr)) )
					     *  UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2)) * 0.001
					endif
					endif
				}
				Comment: "DBLE(((CAN_CST(CSTP,CRG,CURIYR)*CAN_CST_SCMULT(CURIYR))+TRANCST)*HRS*0.001)";
			}
			Parameter ccalc_cSC_rTCNle {
				IndexDomain: {
					(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
					   and (SR_TRAN_CREDIT('1') > 0) then
					     1.0
					endif
					endif
				}
				Comment: "ED$TRADE,33";
			}
			Parameter ccalc_cTC_rTCNle {
				IndexDomain: {
					(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
					                        !and  ord(CanadianSupplyStep) <= EFD_Slice_ID(Group_element(Slice,Season,SupplyRegion_ALT2),Segment_element(Slice,Season,SupplyRegion_ALT2))
				}
				Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001) then
					     1.0
					endif
					endif
				}
			}
			Parameter ccalc_cRHS_rTCNle {
				IndexDomain: {
					(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) | SupplyRegion_ALT2 in SupplyRegion_SUB_ and ORD(CanadianSupplyRegion) < card(CanadianSupplyRegion)
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001) then
					      CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2))
					endif
					endif
				}
			}
			Parameter ccalc_cSR_rCARBONle {
				IndexDomain: {
					(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | CarbonCap_Regional(CarbonRegion) = 1
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
					   and (ord(CarbonRegion) = CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) and  (SR_TRAN_CREDIT('1') > 0) then
					      	 (1-SR_TRAN_CREDIT('1')) * 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTfrom),Group2_element(slice,Season,SupplyRegion_ALTfrom)) * CO2_DE_BY_CA(cyr)
					elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
					   and (ord(CarbonRegion) <> CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) and  (SR_TRAN_CREDIT('1') > 0)  then
					      	 (1-SR_TRAN_CREDIT('1')) * 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTto),Group2_element(slice,Season,SupplyRegion_ALTto)) * CO2_DE_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion))
					endif
					endif
				}
				Comment: "ED$TRADE,24";
			}
			Parameter ccalc_cTR_rCARBONle {
				IndexDomain: {
					(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | CarbonCap_Regional(CarbonRegion) = 1
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
					   and (ord(CarbonRegion) = CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) then
					      	 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTfrom),Group2_element(slice,Season,SupplyRegion_ALTfrom)) * CO2_DE_BY_CA(cyr)
					elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
					   and (ord(CarbonRegion) <> CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) then
					      	 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTto),Group2_element(slice,Season,SupplyRegion_ALTto)) * CO2_DE_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion))
					endif
					endif
				}
				Comment: "ED$TRADE,23";
			}
			Parameter ccalc_cSR_rCARBONn {
				IndexDomain: {
					(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | CarbonCap_Regional(CarbonRegion) = 0
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
					   and (ord(CarbonRegion) = CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) and  (SR_TRAN_CREDIT('1') > 0) then
					      	 (1-SR_TRAN_CREDIT('1')) * 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTfrom),Group2_element(slice,Season,SupplyRegion_ALTfrom)) * CO2_DE_BY_CA(cyr)
					elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
					   and (ord(CarbonRegion) <> CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) and  (SR_TRAN_CREDIT('1') > 0)  then
					      	 (1-SR_TRAN_CREDIT('1')) * 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTto),Group2_element(slice,Season,SupplyRegion_ALTto)) * CO2_DE_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion))
					endif
					endif
				}
				Comment: "ED$TRADE,24";
			}
			Parameter ccalc_cTR_rCARBONn {
				IndexDomain: {
					(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | CarbonCap_Regional(CarbonRegion) = 0
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
					   and (ord(CarbonRegion) = CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) then
					      	 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTfrom),Group2_element(slice,Season,SupplyRegion_ALTfrom)) * CO2_DE_BY_CA(cyr)
					elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
					   and (ord(CarbonRegion) <> CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) then
					      	 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTto),Group2_element(slice,Season,SupplyRegion_ALTto)) * CO2_DE_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion))
					endif
					endif
				}
				Comment: "ED$TRADE,23";
			}
			Parameter ccalc_cSR_rEXle {
				IndexDomain: {
					(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					   (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					        1.0  !export
					endif
					endif
				}
			}
			Parameter ccalc_cTR_rEXle {
				IndexDomain: {
					(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					 (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					        1.0      !Export
					endif
					endif
				}
			}
			Parameter ccalc_cSR_rSRge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					         SR_TRAN_CREDIT('1')*(1.0-LINELOSS('1'))   !import
					elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					   (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					         SR_TRAN_CREDIT('1') * (-1.0)    !export
					endif
					endif
				}
				Comment: {
					"ED$TRADE,17; ED$TRADE,18"
				}
			}
			Parameter ccalc_cSR_rLDge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					  (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					          (1.0-SR_TRAN_CREDIT('1'))*(1.0-LINELOSS('1'))*UTWDTH(Segment2_element(slice,Season,SupplyRegion),Group2_element(slice,Season,SupplyRegion_ALTto))*0.1  !import
					elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
					   (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					          (1.0-SR_TRAN_CREDIT('1')) * (-1.0)* UTWDTH(Segment2_element(slice,Season,SupplyRegion),Group2_element(slice,Season,SupplyRegion_ALTto))*0.1    !export
					endif
					endif
				}
				Comment: {
					"ED$TRADE,15; ED$TRADE,16"
				}
			}
			Parameter ccalc_cTR_rLDge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)  | SupplyRegion in SupplyRegion_SUB_
					        and SupplyRegion_ALTfrom in SupplyRegion_SUB_
					             and SupplyRegion_ALTto in SupplyRegion_SUB_
					                 and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
					                     and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					(1.0-LINELOSS('1'))*UTWDTH(Segment2_element(slice,Season,SupplyRegion),Group2_element(slice,Season,SupplyRegion_ALTto)) * 0.1   !Import
					elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
					-1.0*UTWDTH(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion_ALTfrom)) * 0.1   !Export
					endif
					endif
				}
			}
			Parameter ccalc_cSR_EFDCOSTS {
				IndexDomain: {
					(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)  | SupplyRegion_ALTfrom in SupplyRegion_SUB_
					        and SupplyRegion_ALTto in SupplyRegion_SUB_
					           and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
					                and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SR_TRAN_CREDIT('1') > 0) then
					   (1-SR_TRAN_CREDIT('1')) *
					   (PTHRESH1(cyr,SupplyRegion_ALL_element(SupplyRegion_ALTto),SupplyRegion_ALL_element(SupplyRegion_ALTfrom)) + PTHRESH2(cyr,SupplyRegion_ALL_element(SupplyRegion_ALTto),SupplyRegion_ALL_element(SupplyRegion_ALTfrom)) + BARRIER(cyr)) *  UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto)) * 0.001
					else
					      0
					endif
					endif
				}
				Comment: "ED$TRADE,8";
			}
			Parameter ccalc_cTR_EFDCOSTS {
				IndexDomain: {
					(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)  |  SupplyRegion_ALTfrom in SupplyRegion_SUB_
					        and SupplyRegion_ALTto in SupplyRegion_SUB_
					            and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
					                and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) then
					  (PTHRESH1(cyr,SupplyRegion_ALL_element(SupplyRegion_ALTto),SupplyRegion_ALL_element(SupplyRegion_ALTfrom)) + PTHRESH2(cyr,SupplyRegion_ALL_element(SupplyRegion_ALTto),SupplyRegion_ALL_element(SupplyRegion_ALTfrom)) + BARRIER(cyr)) *  UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto)) * 0.001
					endif
					endif
				}
			}
			Parameter ccalc_cSR_UBOUND {
				IndexDomain: {
					(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)  |  SupplyRegion_ALTfrom in SupplyRegion_SUB_
					        and SupplyRegion_ALTto in SupplyRegion_SUB_
					            and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
					                and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SR_TRAN_CREDIT('1') > 0) then
					     CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom))
					else
					inf
					endif
					endif
				}
			}
			Parameter ccalc_cTR_rTLle {
				IndexDomain: {
					(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)  |  SupplyRegion_ALTfrom in SupplyRegion_SUB_
					        and SupplyRegion_ALTto in SupplyRegion_SUB_
					            and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
					                and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SR_TRAN_CREDIT('1') > 0) then
					      1.0
					else
					      0
					endif
					endif
				}
				Comment: "ED$TRADE,5";
			}
			Parameter ccalc_cRHS_rTLle {
				IndexDomain: {
					(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | SupplyRegion_ALTfrom in SupplyRegion_SUB_
					        and SupplyRegion_ALTto in SupplyRegion_SUB_
					            and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
					                and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SR_TRAN_CREDIT('1') > 0) then
					      CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom))
					else
					      0
					endif
					endif
				}
				Comment: "ED$TRADE,4";
			}
			Parameter ccalc_cTR_UBOUND {
				IndexDomain: {
					(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | SupplyRegion_ALTfrom in SupplyRegion_SUB_
					        and SupplyRegion_ALTto in SupplyRegion_SUB_
					            and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
					                and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
				}
				Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: UBOUND";
				Default: inf;
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) then
					      CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom))
					else
					      inf
					endif
					endif
				}
			}
			Parameter ccalc_cRHS_rIMle {
				IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and ord(Season) <= EENSP('1',SupplyRegion) and Slice <= Slice_element(Season,SupplyRegion);
				Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (URNCSTIM_EFD(Season,SupplyRegion) > 0) then
					    URNCSTIM_EFD(Season,SupplyRegion)
					else
					    0
					endif
					endif
				}
			}
			Parameter ccalc_cRHS_rEXle {
				IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and ord(Season) <= EENSP('1',SupplyRegion) and Slice <= Slice_element(Season,SupplyRegion);
				Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
				Definition: {
					if EFDMAT('1')= 0 then
					if (URNCSTEX_EFD(Season,SupplyRegion) > 0) then
					    URNCSTEX_EFD(Season,SupplyRegion)
					else
					    0
					endif
					endif
				}
			}
			Parameter ccalc_cTC_rCANIMPUSeq {
				IndexDomain: {
					(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) | SupplyRegion_ALT2 in SupplyRegion_SUB_
					                 and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
					                     and Slice <= Slice_element(Season,SupplyRegion_ALT2)
				}
				Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CANIMPUS";
				Definition: {
					if EFDMAT('1')= 0 then
					if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
					   and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
					   and BMNETIMP(cyr)>0 then
					     (1.0-LINELOSS('1'))*UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2))*0.001
					endif
					endif
				}
				Comment: "ED$TRADE,44";
			}
		}
		DeclarationSection EPA_TRANRG_EFD_Completed {
			Parameter ccalc_cRHS_rSULFURCRle {
				IndexDomain: (CoalDemandRegion) | TSO2_LIM_BY_CLRG(CoalDemandRegion);
				Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
				Definition: {
					 IF (EFDMAT('1')=0 and TSO2_YR_BY_CLRG('1')<9999 and  (ord(cyr) + UHBSYR('1'))>= TSO2_YR_BY_CLRG('1'))THEN
					   if ((ord(cyr) + UHBSYR('1')) >= TRANRULE2('1')) then
					     TSO2_LIM_BY_CLRG(CoalDemandRegion)
					   elseif ((ord(cyr) + UHBSYR('1')) >= TRANRULE1('1')) then
					     TSO2_LM1_BY_CLRG(CoalDemandRegion)
					   endif
					endif
				}
				Comment: "EPA$TRANRG_EFD,1";
			}
			Parameter ccalc_cCT_rSULFURCRle {
				IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) |TSO2_LIM_BY_CLRG(CoalDemandRegion) and CoalDemandRegion=CoalDemandRegion_ALT1;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0) THEN
					if (ord(cyr) + UHBSYR('1'))>= TSO2_YR_BY_CLRG('1') THEN
					if CP_CRG(PlantType_ECP, CoalDemandRegion) > 0.0 and ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr) and
					TSO2_YR_BY_CLRG('1')<9999 and EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 then
					
					  (XCL_SO2_YR(CoalSupplyCurve, cyr) * (1.0 - RCLCLNR(CoalDemandRegion, cyr, PlantType_ECP)) * 0.5) * TSO2_SHR_BY_CLRG(CoalDemandRegion, '1') $
					  ((XCL_SO2_YR(CoalSupplyCurve, cyr) * (1.0 - RCLCLNR(CoalDemandRegion, cyr, PlantType_ECP)) * 0.5) * TSO2_SHR_BY_CLRG(CoalDemandRegion, '1')>EFD_MIN('1') and
					  (XCL_SO2_YR(CoalSupplyCurve, cyr) * (1.0 - RCLCLNR(CoalDemandRegion, cyr, PlantType_ECP)) * 0.5)>ECP_MIN('1'))
					endif
					endif
					endif
				}
				Comment: "EPA$TRANRG_EFD,2";
			}
			Parameter ccalc_cRTUS_rSULFURCRle {
				IndexDomain: (CoalDemandRegion,OilRegion) | TSO2_LIM_BY_CLRG(CoalDemandRegion);
				Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
				Definition: {
					if (ord(cyr) + UHBSYR('1'))>= TSO2_YR_BY_CLRG('1') and TSO2_YR_BY_CLRG('1')<9999 then
					  UFRSO2(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * 0.5 * TSO2_OSH_BY_OLCL(OilRegion_to_Census(OilRegion), CoalDemandRegion, '1') $
					  (UFRSO2(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * 0.5 > ECP_MIN('1') and
					  UFRSO2(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * 0.5 * TSO2_OSH_BY_OLCL(OilRegion_to_Census(OilRegion), CoalDemandRegion, '1')> EFD_MIN('1'))
					endif
				}
				Comment: "EPA$TRANRG_EFD,3";
			}
			Parameter ccalc_cCT_rSULFURCRn {
				IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) |TSO2_LIM_BY_CLRG(CoalDemandRegion) and CoalDemandRegion=CoalDemandRegion_ALT1;
				Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
				Definition: {
					IF (TOT_TYPE(CoalSupplyCurve) > 0) THEN
					if (ord(cyr) + UHBSYR('1'))< TSO2_YR_BY_CLRG('1')then
					if CP_CRG(PlantType_ECP, CoalDemandRegion) > 0.0 and ACI_OPT(ACIOption_Mapping(ACIOption), EmissionRank_Element(CoalSupplyCurve), PlantType_ECP, cyr) and
					TSO2_YR_BY_CLRG('1')<9999 and EFD_SC_DR_PT(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP)> 0 then
					
					  (XCL_SO2_YR(CoalSupplyCurve, cyr) * (1.0 - RCLCLNR(CoalDemandRegion, cyr, PlantType_ECP)) * 0.5) * TSO2_SHR_BY_CLRG(CoalDemandRegion, '1') $
					  ((XCL_SO2_YR(CoalSupplyCurve, cyr) * (1.0 - RCLCLNR(CoalDemandRegion, cyr, PlantType_ECP)) * 0.5) * TSO2_SHR_BY_CLRG(CoalDemandRegion, '1')>EFD_MIN('1') and
					  (XCL_SO2_YR(CoalSupplyCurve, cyr) * (1.0 - RCLCLNR(CoalDemandRegion, cyr, PlantType_ECP)) * 0.5)>ECP_MIN('1'))
					endif
					endif
					endif
				}
				Comment: "EPA$TRANRG_EFD,2";
			}
			Parameter ccalc_cRTUS_rSULFURCRn {
				IndexDomain: (CoalDemandRegion,OilRegion) | TSO2_LIM_BY_CLRG(CoalDemandRegion);
				Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
				Definition: {
					if (ord(cyr) + UHBSYR('1'))< TSO2_YR_BY_CLRG('1') and TSO2_YR_BY_CLRG('1')<9999 then
					  UFRSO2(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * 0.5 * TSO2_OSH_BY_OLCL(OilRegion_to_Census(OilRegion), CoalDemandRegion, '1') $
					  (UFRSO2(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * 0.5 > ECP_MIN('1') and
					  UFRSO2(FuelType_UIRL_element, int_fuel_region_element_oil(OilRegion)) * 0.5 * TSO2_OSH_BY_OLCL(OilRegion_to_Census(OilRegion), CoalDemandRegion, '1')>EFD_MIN('1'))
					endif
				}
				Comment: "EPA$TRANRG_EFD,3";
			}
			Parameter ccalc_cCTLSO2_rSULFURCRle {
				IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) |TSO2_LIM_BY_CLRG(CoalDemandRegion) and CoalDemandRegion=CoalDemandRegion_ALT1;
				Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
				Definition: {
					if (ord(cyr) + UHBSYR('1'))>= TSO2_YR_BY_CLRG('1') and CTLSO2_COEFF(CoalDemandRegion_ALT1)>ECP_MIN('1') THEN
					  CTLSO2_COEFF(CoalDemandRegion_ALT1)* TSO2_SHR_BY_CLRG(CoalDemandRegion, '1') $
					  (CTLSO2_COEFF(CoalDemandRegion_ALT1)* TSO2_SHR_BY_CLRG(CoalDemandRegion, '1')>EFD_MIN('1'))
					
					endif
				}
				Comment: "EPA$TRANRG_EFD,2";
			}
			Parameter ccalc_cCTLSO2_rSULFURCRn {
				IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) |TSO2_LIM_BY_CLRG(CoalDemandRegion) and CoalDemandRegion=CoalDemandRegion_ALT1;
				Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
				Definition: {
					if (ord(cyr) + UHBSYR('1'))< TSO2_YR_BY_CLRG('1') and CTLSO2_COEFF(CoalDemandRegion_ALT1)>ECP_MIN('1') THEN
					  CTLSO2_COEFF(CoalDemandRegion_ALT1)* TSO2_SHR_BY_CLRG(CoalDemandRegion, '1') $
					  (CTLSO2_COEFF(CoalDemandRegion_ALT1)* TSO2_SHR_BY_CLRG(CoalDemandRegion, '1')>EFD_MIN('1'))
					
					endif
				}
				Comment: "EPA$TRANRG_EFD,2";
			}
		}
		DeclarationSection OPBSLD_Completed {
			Parameter ccalc_cO_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,1";
			}
			Parameter ccalc_cO_ALT_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,2";
			}
			Parameter ccalc_cO_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,3";
			}
			Parameter ccalc_cO_ALT_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,4";
			}
			Parameter ccalc_cJ_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,5";
			}
			Parameter ccalc_cJ_ALT_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,6";
			}
			Parameter ccalc_cJ_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,7";
			}
			Parameter ccalc_cJ_ALT_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,7_1";
			}
			Parameter ccalc_cU_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,8";
			}
			Parameter ccalc_cU_ALT_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,9";
			}
			Parameter ccalc_cU_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,10";
			}
			Parameter ccalc_cU_ALT_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,10_1";
			}
			Parameter ccalc_cO_UBOUND {
				IndexDomain: {
					(PlantGroup,Season,OperatingMode) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode) and
					OperatingMode in OperatingMode_Active_
				}
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001;
				Comment: "OPBSLD,17";
			}
			Parameter ccalc_cO_ALT_UBOUND {
				IndexDomain: {
					(PlantGroup,SeasonCCS,OperatingMode) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and
					OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season_Element(SeasonCCS), PlantGroup, OperatingMode) and
					OperatingMode in OperatingMode_Active_
				}
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: UBOUND"
				}
				Range: nonnegative;
				Default: inf;
				Definition: {
					if OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(PlantGroup))<>1 then
					sum(Season| Season_SeasonCCS_Mapping(Season, SeasonCCS), UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001)
					else
					inf
					endif
				}
				Comment: "OPBSLD,18";
			}
			Parameter ccalc_cJ_UBOUND {
				IndexDomain: {
					(PlantGroup,Season,OperatingMode) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode) and
					OperatingMode in OperatingMode_Active_ and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001;
				Comment: "OPBSLD,19";
			}
			Parameter ccalc_cU_UBOUND {
				IndexDomain: {
					(PlantGroup,Season,OperatingMode) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode) and
					OperatingMode in OperatingMode_Active_ and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001;
				Comment: "OPBSLD,21";
			}
			Parameter ccalc_cJ_ALT_UBOUND {
				IndexDomain: {
					(PlantGroup,SeasonCCS,OperatingMode) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and
					OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season_Element(SeasonCCS), PlantGroup, OperatingMode) and
					OperatingMode in OperatingMode_Active_ and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: UBOUND"
				}
				Range: nonnegative;
				Default: inf;
				Definition: {
					if OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(PlantGroup))<>1 then
					sum(Season| Season_SeasonCCS_Mapping(Season, SeasonCCS), UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001)
					else
					inf
					endif
				}
				Comment: "OPBSLD,20";
			}
			Parameter ccalc_cU_ALT_UBOUND {
				IndexDomain: {
					(PlantGroup,SeasonCCS,OperatingMode) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=1 and
					OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season_Element(SeasonCCS), PlantGroup, OperatingMode) and
					OperatingMode in OperatingMode_Active_ and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: UBOUND"
				}
				Range: nonnegative;
				Default: inf;
				Definition: {
					if OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(PlantGroup))<>1 then
					sum(Season| Season_SeasonCCS_Mapping(Season, SeasonCCS), UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001)
					else
					inf
					endif
				}
				Comment: "OPBSLD,22";
			}
			Parameter ccalc_cJ_EFDCOSTS {
				IndexDomain: (PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,25";
			}
			Parameter ccalc_cO_EFDCOSTS {
				IndexDomain: (PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,23";
			}
			Parameter ccalc_cU_EFDCOSTS {
				IndexDomain: (PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,27";
			}
			Parameter ccalc_cJ_ALT_EFDCOSTS {
				IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,26";
			}
			Parameter ccalc_cO_ALT_EFDCOSTS {
				IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,24";
			}
			Parameter ccalc_cU_ALT_EFDCOSTS {
				IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,28";
			}
			Parameter ccalc_cJ_rCBle {
				IndexDomain: {
					(PlantGroup,Season,OperatingMode) | PlantGroup in FirstPlantGroup_ and OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode) and
					OperatingMode in OperatingMode_Active_ and EPPOPM(UG_EFDt_to_PlantType(PlantGroup))=1 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
				Definition: {
					1 !              capacity balance
				}
				Comment: "OPBSLD,31";
			}
			Parameter ccalc_cO_rCBle {
				IndexDomain: {
					(PlantGroup,Season,OperatingMode) | PlantGroup in FirstPlantGroup_ and OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode) and
					OperatingMode in OperatingMode_Active_ and EPPOPM(UG_EFDt_to_PlantType(PlantGroup))=1
				}
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
				Definition: {
					1  !              capacity balance
				}
				Comment: "OPBSLD,29";
			}
			Parameter ccalc_cU_rCBle {
				IndexDomain: {
					(PlantGroup,Season,OperatingMode) | PlantGroup in FirstPlantGroup_ and OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode) and
					OperatingMode in OperatingMode_Active_ and EPPOPM(UG_EFDt_to_PlantType(PlantGroup))=1 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
				Definition: {
					1  !              capacity balance
				}
				Comment: "OPBSLD,33";
			}
			Parameter ccalc_cJ_ALT_rCBle {
				IndexDomain: {
					(PlantGroup,Season,SeasonCCS,OperatingMode) | PlantGroup in FirstPlantGroup_ and OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode) and
					Season_SeasonCCS_Mapping(Season, SeasonCCS) and OperatingMode in OperatingMode_Active_ and EPPOPM(UG_EFDt_to_PlantType(PlantGroup))=1 and
					SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(PlantGroup))<>1
				}
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
				}
				Definition: {
					1  !              capacity balance
				}
				Comment: "OPBSLD,32";
			}
			Parameter ccalc_cO_ALT_rCBle {
				IndexDomain: {
					(PlantGroup,Season,SeasonCCS,OperatingMode)| PlantGroup in FirstPlantGroup_ and OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season_Element(SeasonCCS), PlantGroup, OperatingMode) and
					Season_SeasonCCS_Mapping(Season, SeasonCCS) and OperatingMode in OperatingMode_Active_ and EPPOPM(UG_EFDt_to_PlantType(PlantGroup))=1 and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(PlantGroup))<>1
				}
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
				}
				Definition: {
					1  !              capacity balance
				}
				Comment: "OPBSLD,30";
			}
			Parameter ccalc_cU_ALT_rCBle {
				IndexDomain: {
					(PlantGroup,Season,SeasonCCS,OperatingMode) | PlantGroup in FirstPlantGroup_ and OPBSLD_Condition(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season_Element(SeasonCCS), PlantGroup, OperatingMode) and
					Season_SeasonCCS_Mapping(Season, SeasonCCS) and OperatingMode in OperatingMode_Active_ and EPPOPM(UG_EFDt_to_PlantType(PlantGroup))=1 and
					SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and OPBSLD_ADJ_FAC(PlantGroupOrd2PlantGroup(PlantGroup))<>1
				}
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
				}
				Definition: {
					1  !              capacity balance
				}
				Comment: "OPBSLD,34";
			}
			Parameter ccalc_cJ_rGENCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,37";
			}
			Parameter ccalc_cO_rGENCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,35";
			}
			Parameter ccalc_cU_rGENCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,39";
			}
			Parameter ccalc_cJ_ALT_rGENCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,38";
			}
			Parameter ccalc_cO_ALT_rGENCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,36";
			}
			Parameter ccalc_cU_ALT_rGENCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,40";
			}
			Parameter ccalc_cJ_rCONCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,43";
			}
			Parameter ccalc_cO_rCONCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,41";
			}
			Parameter ccalc_cU_rCONCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,45";
			}
			Parameter ccalc_cJ_ALT_rCONCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,44";
			}
			Parameter ccalc_cO_ALT_rCONCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,42";
			}
			Parameter ccalc_cU_ALT_rCONCLeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,46";
			}
			Parameter ccalc_cJ_rCONNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,55";
			}
			Parameter ccalc_cJ_rGENNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,49";
			}
			Parameter ccalc_cO_rCONNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,53";
			}
			Parameter ccalc_cO_rGENNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,47";
			}
			Parameter ccalc_cU_rCONNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,57";
			}
			Parameter ccalc_cU_rGENNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,51";
			}
			Parameter ccalc_cJ_ALT_rCONNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,56";
			}
			Parameter ccalc_cJ_ALT_rGENNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,50";
			}
			Parameter ccalc_cO_ALT_rCONNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,54";
			}
			Parameter ccalc_cO_ALT_rGENNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,48";
			}
			Parameter ccalc_cU_ALT_rCONNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,58";
			}
			Parameter ccalc_cU_ALT_rGENNGeq {
				IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,52";
			}
			Parameter ccalc_cO_rCARBONle {
				IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) | CarbonCap_Regional(CarbonRegion) = 1;
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,71";
			}
			Parameter ccalc_cO_rCARBONn {
				IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,71";
			}
			Parameter ccalc_cO_ALT_rCARBONle {
				IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,72";
			}
			Parameter ccalc_cO_ALT_rCARBONn {
				IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,72";
			}
			Parameter ccalc_cJ_rCARBONle {
				IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,73";
			}
			Parameter ccalc_cJ_rCARBONn {
				IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,73";
			}
			Parameter ccalc_cJ_ALT_rCARBONle {
				IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,74";
			}
			Parameter ccalc_cJ_ALT_rCARBONn {
				IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,74";
			}
			Parameter ccalc_cU_rCARBONle {
				IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,75";
			}
			Parameter ccalc_cU_rCARBONn {
				IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,75";
			}
			Parameter ccalc_cU_ALT_rCARBONle {
				IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,76";
			}
			Parameter ccalc_cU_ALT_rCARBONn {
				IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,76";
			}
			Parameter ccalc_cJ_rZFLRGeq {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,79; OPBSLD,85"
				}
			}
			Parameter ccalc_cJ_rZFLRGge {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,79; OPBSLD,85"
				}
			}
			Parameter ccalc_cJ_rZFLRSeq {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,79; OPBSLD,85"
				}
			}
			Parameter ccalc_cJ_rZFLRSge {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,79; OPBSLD,85"
				}
			}
			Parameter ccalc_cJ_ALT_rZFLRGeq {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,80; OPBSLD,86"
				}
			}
			Parameter ccalc_cJ_ALT_rZFLRGge {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,80; OPBSLD,86"
				}
			}
			Parameter ccalc_cJ_ALT_rZFLRSeq {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,80; OPBSLD,86"
				}
			}
			Parameter ccalc_cJ_ALT_rZFLRSge {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,80; OPBSLD,86"
				}
			}
			Parameter ccalc_cO_rZFLRGeq {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,77; OPBSLD,83"
				}
			}
			Parameter ccalc_cO_rZFLRGge {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,77; OPBSLD,83"
				}
			}
			Parameter ccalc_cO_rZFLRSeq {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,77; OPBSLD,83"
				}
			}
			Parameter ccalc_cO_rZFLRSge {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,77; OPBSLD,83"
				}
			}
			Parameter ccalc_cO_ALT_rZFLRGeq {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,78; OPBSLD,84"
				}
			}
			Parameter ccalc_cO_ALT_rZFLRGge {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,78; OPBSLD,84"
				}
			}
			Parameter ccalc_cO_ALT_rZFLRSeq {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,78; OPBSLD,84"
				}
			}
			Parameter ccalc_cO_ALT_rZFLRSge {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,78; OPBSLD,84"
				}
			}
			Parameter ccalc_cU_rZFLRGeq {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,81; OPBSLD,87"
				}
			}
			Parameter ccalc_cU_rZFLRGge {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,81; OPBSLD,87"
				}
			}
			Parameter ccalc_cU_rZFLRSeq {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,81; OPBSLD,87"
				}
			}
			Parameter ccalc_cU_rZFLRSge {
				IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,81; OPBSLD,87"
				}
			}
			Parameter ccalc_cU_ALT_rZFLRGeq {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,82; OPBSLD,88"
				}
			}
			Parameter ccalc_cU_ALT_rZFLRGge {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,82; OPBSLD,88"
				}
			}
			Parameter ccalc_cU_ALT_rZFLRSeq {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,82; OPBSLD,88"
				}
			}
			Parameter ccalc_cU_ALT_rZFLRSge {
				IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,82; OPBSLD,88"
				}
			}
			Parameter ccalc_cJ_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,91";
			}
			Parameter ccalc_cJ_rBTUXXle {
				IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,91";
			}
			Parameter ccalc_cO_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,89";
			}
			Parameter ccalc_cO_rBTUXXle {
				IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,89";
			}
			Parameter ccalc_cU_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,93";
			}
			Parameter ccalc_cU_rBTUXXle {
				IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,93";
			}
			Parameter ccalc_cJ_ALT_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,92_1; OPBSLD,92_2"
				}
			}
			Parameter ccalc_cJ_ALT_rBTUXXle {
				IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,92_1; OPBSLD,92_2"
				}
			}
			Parameter ccalc_cO_ALT_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,90_1; OPBSLD,90_2"
				}
			}
			Parameter ccalc_cO_ALT_rBTUXXle {
				IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,90_1; OPBSLD,90_2"
				}
			}
			Parameter ccalc_cU_ALT_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,94_1; OPBSLD,94_2"
				}
			}
			Parameter ccalc_cU_ALT_rBTUXXle {
				IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,94_1; OPBSLD,94_2"
				}
			}
			Parameter ccalc_cJ_rCO2TNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,97";
			}
			Parameter ccalc_cO_rCO2TNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,95";
			}
			Parameter ccalc_cU_rCO2TNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,99";
			}
			Parameter ccalc_cJ_ALT_rCO2TNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,98";
			}
			Parameter ccalc_cO_ALT_rCO2TNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,96";
			}
			Parameter ccalc_cU_ALT_rCO2TNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,100";
			}
			Parameter ccalc_cJ_rCO2QNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,103";
			}
			Parameter ccalc_cO_rCO2QNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,101";
			}
			Parameter ccalc_cU_rCO2QNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,105";
			}
			Parameter ccalc_cJ_ALT_rCO2QNRle {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,104";
			}
			Parameter ccalc_cJ_ALT_rCO2QNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,104";
			}
			Parameter ccalc_cJ_rCO2QNRle {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,103";
			}
			Parameter ccalc_cO_ALT_rCO2QNRle {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,102";
			}
			Parameter ccalc_cO_ALT_rCO2QNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,102";
			}
			Parameter ccalc_cO_rCO2QNRle {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,101";
			}
			Parameter ccalc_cU_ALT_rCO2QNRle {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,106";
			}
			Parameter ccalc_cU_ALT_rCO2QNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,106";
			}
			Parameter ccalc_cU_rCO2QNRle {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,105";
			}
			Parameter ccalc_cJ_ALT_rCO2RNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,112";
			}
			Parameter ccalc_cJ_rCO2RNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,111; OPBSLD,121"
				}
			}
			Parameter ccalc_cO_ALT_rCO2RNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,108";
			}
			Parameter ccalc_cO_rCO2RNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,107; OPBSLD,119"
				}
			}
			Parameter ccalc_cU_ALT_rCO2RNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,114";
			}
			Parameter ccalc_cU_rCO2RNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,113; OPBSLD,122"
				}
			}
			Parameter ccalc_cJ_rGENQNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,115; OPBSLD,123"
				}
			}
			Parameter ccalc_cO_rGENQNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,109; OPBSLD,120"
				}
			}
			Parameter ccalc_cU_rGENQNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,117; OPBSLD,124"
				}
			}
			Parameter ccalc_cJ_ALT_rGENQNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,116";
			}
			Parameter ccalc_cO_ALT_rGENQNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,110";
			}
			Parameter ccalc_cU_ALT_rGENQNRn {
				IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: {
					"OPBSLD,118;"
				}
			}
			Parameter ccalc_cJ_rELNOX0n {
				IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,127";
			}
			Parameter ccalc_cJ_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,127";
			}
			Parameter ccalc_cO_rELNOX0n {
				IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,125";
			}
			Parameter ccalc_cO_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,125";
			}
			Parameter ccalc_cU_rELNOX0n {
				IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,129";
			}
			Parameter ccalc_cU_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,129";
			}
			Parameter ccalc_cJ_ALT_rELNOX0n {
				IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,128";
			}
			Parameter ccalc_cJ_ALT_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,128";
			}
			Parameter ccalc_cO_ALT_rELNOX0n {
				IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,126";
			}
			Parameter ccalc_cO_ALT_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,126";
			}
			Parameter ccalc_cU_ALT_rELNOX0n {
				IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,130";
			}
			Parameter ccalc_cU_ALT_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,130";
			}
			Parameter ccalc_cJ_rMRXge {
				IndexDomain: (PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,133";
			}
			Parameter ccalc_cO_rMRXge {
				IndexDomain: (PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,131";
			}
			Parameter ccalc_cU_rMRXge {
				IndexDomain: (PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,135";
			}
			Parameter ccalc_cJ_ALT_rMRXge {
				IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,134";
			}
			Parameter ccalc_cO_ALT_rMRXge {
				IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,132";
			}
			Parameter ccalc_cU_ALT_rMRXge {
				IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,136";
			}
			Parameter ccalc_cJ_rGRDGNge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,149";
			}
			Parameter ccalc_cJ_rGRDRTge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,148";
			}
			Parameter ccalc_cO_rGRDGNge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,147";
			}
			Parameter ccalc_cO_rGRDRTge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,146";
			}
			Parameter ccalc_cU_rGRDGNge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,151";
			}
			Parameter ccalc_cU_rGRDRTge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
				Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,150";
			}
			Parameter ccalc_cJ_ALT_rGRDGNge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,149_1";
			}
			Parameter ccalc_cJ_ALT_rGRDRTge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,148_1";
			}
			Parameter ccalc_cO_ALT_rGRDGNge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,147_1";
			}
			Parameter ccalc_cO_ALT_rGRDRTge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,146_1";
			}
			Parameter ccalc_cU_ALT_rGRDGNge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,151_1";
			}
			Parameter ccalc_cU_ALT_rGRDRTge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
				Text: {
					"OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
				}
				Definition: {
					!Done in OPBSLD_sub
				}
				Comment: "OPBSLD,150_1";
			}
		}
		DeclarationSection OPHYD_Completed {
			Parameter ccalc_cH_rLDge {
				IndexDomain: {
					          (SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
					PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
					and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: 0.1* HYD_Gen(SupplyRegion, Season, Slice, PlantGroup);
				Comment: " OPHYD,1";
			}
			Parameter ccalc_cH_rSRge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
					                           PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
					                           and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					   SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup)) * (1.0 - HYD_CF(SupplyRegion, Season, Slice, PlantGroup))
					endif
					!might need to add region mapping as well
				}
				Comment: "OPHYD,4";
			}
			Parameter ccalc_cH_rFle {
				IndexDomain: {
					(PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
					                           PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
				Definition: {
					if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					   1
					endif
				}
				Comment: "OPHYD,3";
			}
			Parameter ccalc_cH_UBOUND {
				IndexDomain: {
					(PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice in Slice_Active_
					                           and PlantGroup in FirstPlantGroup_
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001;
				Comment: "OPHYD,9";
			}
			Parameter ccalc_cH_rP2_le {
				IndexDomain: {
					          (SupplyRegion,Season,PlantGroup,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
					PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
					and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
				Definition: {
					if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIP2('1') and
					    UG_SCF(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0) then
					   0.1*HYD_Gen(SupplyRegion, Season, Slice, PlantGroup) * UFACP2('1')
					endif
				}
				Comment: "OPHYD,10";
			}
			Parameter ccalc_cH_rP2le {
				IndexDomain: {
					          (Slice,SupplyRegion,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
					PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
					and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
				Definition: {
					if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIP2('1') and
					    UG_SCF(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0) then
					   0.1*HYD_Gen(SupplyRegion, Season, Slice, PlantGroup)
					endif
				}
				Comment: "OPHYD,11";
			}
			Parameter ccalc_cH_rPS_le {
				IndexDomain: {
					          (SupplyRegion,Season,PlantGroup,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
					PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
					and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
				Definition: {
					if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIP2('1') and
					    UG_SCF(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0) then
					   0.1*HYD_Gen(SupplyRegion, Season, Slice, PlantGroup) * UFACPS('1')
					endif
				}
				Comment: "OPHYD,12";
			}
			Parameter ccalc_cH_EFDCOSTS {
				IndexDomain: (PlantGroup,Season,Slice);
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in OPHYD_sub procedure
				}
				Comment: "OPHYD,14";
			}
			Parameter ccalc_cH_rENeq {
				IndexDomain: {
					                    (PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice in Slice_Active_ and
					PlantGroup in FirstPlantGroup_
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
				Definition: {
					                              if ( UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					                                 0.1*HYD_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, Slice, PlantGroup) $ (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and
					                                    UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIP2('1') and UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001)
					                              endif
					
					
					                              !need additional conditions for equality and le constraints from ED$RNW
					                              !CAP = UG_CAP(IS,I_EFD_GRP)
					                              !            DIGITS_PARM = 6
					                              !            IF (USW_DIGIT .GT. 0)THEN
					                              !            TST = DIGITS2(DBLE(CAP * 0.001),DIGITS_PARM)
					                              !            ELSE
					                              !               TST = DBLE(CAP * 0.001)
					                              !            END IF
					                              !IF (IP .EQ. UIHYR .AND. TST .GT. 0.0 .AND. IECP .NE. WIP2) THEN    ! UIHYR is reversible hydro/pumped storage. wip2 is other storage
					                              !              ROWNRG = 'EN'//NUM//CHCOD(IS); call makmsk(ROWNRG_mask,':EN:',NUM,CHCOD(IS))
					                              !              CALL DROWTYPE(ROWNRG,'E       ',ROWNRG_mask)
					                              !            ELSE
					                              !              ROWNRG = 'EN'//NUM//CHCOD(IS); call makmsk(ROWNRG_mask,':EN:',NUM,CHCOD(IS))
					                              !              CALL DROWTYPE(ROWNRG,'L       ',ROWNRG_mask)
					                              !            ENDIF
				}
				Comment: "OPHYD,15";
			}
			Parameter ccalc_cRHS_rFle {
				IndexDomain: {
					(PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
					                           PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
				}
				Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
				Definition: {
					                              if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					                                 UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001
					                              endif
					
					
					
					                              !IF (SR_CREDIT(IECP) .GT. 0.0 .AND. (IECP .NE. WIHY .OR. CURIYR + UHBSYR .LT. UPSTYR)) THEN
					                              !             ROW_H =  'F'//NUM//CHCOD(IS)//FSLCD; call makmsk(ROW_H_mask,':F:',NUM,CHCOD(IS),FSLCD)
					                              !             CALL DROWTYPE(ROW_H,'L       ',ROW_H_mask)
					                              !             CALL DRHS(EFDRHS,ROW_H,DBLE(CAP(IS)*0.001),ROW_H_mask,'OPHYD,2')
				}
				Comment: "OPHYD,2";
			}
			Parameter ccalc_cF_rFle {
				IndexDomain: {
					(PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
					                           PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
				}
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
				Definition: {
					if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					   1
					endif
				}
				Comment: "OPHYD,5";
			}
			Parameter ccalc_cF_rSRge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
					                           PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
					                           and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					   SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup)) * (1.0 - SR_MIN_CF(UG_ECPt_to_PlantGroup(PlantGroup)))
					endif
				}
				Comment: "OPHYD,6";
			}
			Parameter ccalc_cF_rLDge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
					                           PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
					                           and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					   0.1 * SR_MIN_CF(UG_ECPt_to_PlantGroup(PlantGroup)) * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion)
					endif
				}
				Comment: "OPHYD,7";
			}
			Parameter ccalc_cF_UBOUND {
				IndexDomain: {
					(PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
					                           PlantGroup in FirstPlantGroup_ and Slice <=Max_Slice_element
				}
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					  UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001
					else
					inf
					endif
				}
				Comment: "OPHYD,8";
			}
			Parameter ccalc_cF_rPS_le {
				IndexDomain: {
					          (SupplyRegion,Season,PlantGroup,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
					PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
					and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup) and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
				Definition: {
					if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIP2('1') and
					    UG_SCF(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0) then
					   0.1*HYD_GenMin(SupplyRegion, Season, Slice, PlantGroup) *UFACPS('1')
					endif
				}
				Comment: "OPHYD,13";
			}
			Parameter ccalc_cF_EFDCOSTS {
				IndexDomain: (PlantGroup,Season,Slice);
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in OPHYD_sub procedure
				}
				Comment: "OPHYD,16";
			}
			Parameter ccalc_cF_rENeq {
				IndexDomain: {
					(PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
					PlantGroup in FirstPlantGroup_ and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
				Definition: {
					if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and RNW_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0 and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIP2('1')) then
					  if ( UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					     0.1*HYD_GenMin(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, Slice, PlantGroup)
					  endif
					endif
				}
				Comment: "OPHYD,17";
			}
			Parameter ccalc_cF_rENle {
				IndexDomain: {
					(PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
					PlantGroup in FirstPlantGroup_ and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
				Definition: {
					if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') or (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYC('1') and Val(cyr)+UHBSYR('1')<UPSTYR('1'))) then
					  if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<>UIHYR('1') or RNW_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))=0 or UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIP2('1')) then
					    if ( UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					       0.1*HYD_GenMin(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, Slice, PlantGroup)
					    endif
					  endif
					endif
				}
				Comment: "OPHYD,17";
			}
			Parameter ccalc_cH_rGRDRTge {
				IndexDomain: {
					          (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
					PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
					and SupplyRegion_ALT2=UG_EMM_RG_to_SupplyRegion(PlantGroup)
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
				Definition: {
					!Done in OPHYD_sub
				}
				Comment: "OPHYD,30";
			}
			Parameter ccalc_cH_rGRDGNge {
				IndexDomain: {
					(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element
					   and PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and
					   GRD_RATSA(UG_ECPt_to_PlantGroup(PlantGroup), SupplyRegion_ALT2, GridResilienceSource)>0
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
				Definition: HYD_Gen(SupplyRegion_ALT2, Season, Slice, PlantGroup)*0.001;
				Comment: "OPHYD,31";
			}
			Parameter ccalc_cF_rGRDGNge {
				IndexDomain: {
					(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)|EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element
					   and PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and
					   GRD_RATSA(UG_ECPt_to_PlantGroup(PlantGroup), SupplyRegion_ALT2, GridResilienceSource)>0 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0
				}
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
				Definition: {
					!if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					!   HYD_GenMin(SupplyRegion_ALT2, Season, Slice, PlantGroup)*0.001
					!endif
					
					HYD_GenMin(SupplyRegion_ALT2, Season, Slice, PlantGroup)*0.001 $ (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1'))
					! $ means define ONLY IF the condition (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) is true
				}
				Comment: "OPHYD,33";
			}
			Parameter ccalc_cF_rGRDRTge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
				Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
				Definition: {
					!Done in OPHYD_sub
				}
				Comment: "OPHYD,32";
			}
			Parameter ccalc_cH_rENle {
				IndexDomain: {
					(PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice in Slice_Active_ and
					PlantGroup in FirstPlantGroup_
				}
				Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
				Definition: {
					                              if ( UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
					                                 0.1*HYD_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, Slice, PlantGroup) $ (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<>UIHYR('1') or
					                                    UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIP2('1') or UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001=0)
					                              endif
					
					
					                              !need additional conditions for equality and le constraints from ED$RNW
					                              !CAP = UG_CAP(IS,I_EFD_GRP)
					                              !            DIGITS_PARM = 6
					                              !            IF (USW_DIGIT .GT. 0)THEN
					                              !            TST = DIGITS2(DBLE(CAP * 0.001),DIGITS_PARM)
					                              !            ELSE
					                              !               TST = DBLE(CAP * 0.001)
					                              !            END IF
					                              !IF (IP .EQ. UIHYR .AND. TST .GT. 0.0 .AND. IECP .NE. WIP2) THEN    ! UIHYR is reversible hydro/pumped storage. wip2 is other storage
					                              !              ROWNRG = 'EN'//NUM//CHCOD(IS); call makmsk(ROWNRG_mask,':EN:',NUM,CHCOD(IS))
					                              !              CALL DROWTYPE(ROWNRG,'E       ',ROWNRG_mask)
					                              !            ELSE
					                              !              ROWNRG = 'EN'//NUM//CHCOD(IS); call makmsk(ROWNRG_mask,':EN:',NUM,CHCOD(IS))
					                              !              CALL DROWTYPE(ROWNRG,'L       ',ROWNRG_mask)
					                              !            ENDIF
				}
				Comment: "OPHYD,15";
			}
		}
		DeclarationSection OPINT_Completed {
			Parameter ccalc_cI_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup)| PlantGroup in FirstPlantGroup_ and UG_EMM_RG_Mapping(SupplyRegion, PlantGroup) and Slice in Slice_Active_;
				Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					if EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5  then
					   0.1*INT_Gen(SupplyRegion, Season, Slice, PlantGroup)
					elseif EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=7  then
					  0.1* ELWDTH(Slice2SliceSorted_element(Slice, Season, SupplyRegion), Season, SupplyRegion) *
					     NET_STORAGE_LOAD_EFD(Segment2_element(Slice, Season, SupplyRegion), Group2_element(Slice, Season, SupplyRegion), SupplyRegion, cyr) $
					     (NET_STORAGE_LOAD_EFD(Segment2_element(Slice, Season, SupplyRegion), Group2_element(Slice, Season, SupplyRegion), SupplyRegion, cyr))
					endif
				}
				Comment: {
					"OPINT,1
					OPSTR,1"
				}
			}
			Parameter ccalc_cI_rSRge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,PlantGroup)| PlantGroup in FirstPlantGroup_ and UG_EMM_RG_Mapping(SupplyRegion, PlantGroup)
					and Slice in Slice_Active_
				}
				Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					if EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5 then
					  if (SR_INT(UG_ECPt_to_PlantGroup(PlantGroup), SupplyRegion)>0 and (0<INT_CF(Slice, Season, SupplyRegion, PlantGroup)<=1)) then
					    - 1.0 * INT_CF(Slice, Season, SupplyRegion, PlantGroup) * SR_INT(UG_ECPt_to_PlantGroup(PlantGroup), SupplyRegion) +
					    if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIPT('1') and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup)) > 0.0) then
					      NET_PT_STORAGE_SR_EFD(Segment2_element(Slice, Season, SupplyRegion), Group2_element(Slice, Season, SupplyRegion), SupplyRegion, cyr)
					    endif
					  endif
					elseif EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=7  then
					  if (NET_STORAGE_LOAD_EFD(Segment2_element(Slice, Season, SupplyRegion), Group2_element(Slice, Season, SupplyRegion), SupplyRegion, cyr) <> 0.0 AND SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup)) > 0.0) then
					     NET_STORAGE_SR_EFD(Segment2_element(Slice, Season, SupplyRegion), Group2_element(Slice, Season, SupplyRegion), SupplyRegion, cyr)
					   endif
					endif
				}
				Comment: {
					"OPINT,2
					OPSTR,2"
				}
			}
			Parameter ccalc_cI_UBOUND {
				IndexDomain: (PlantGroup,Season,Slice);
				Text: "OML Columns: I(*****)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if (PlantGroup in FirstPlantGroup_ and Slice in Slice_Active_) and
					   ((EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5 and 0<INT_CF(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup), PlantGroup)<=1) or
					(EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=7 and    NET_STORAGE_LOAD_EFD(Segment2_element(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup)),
					Group2_element(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup)), UG_EMM_RG_to_SupplyRegion(PlantGroup), cyr))) then
					   UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001
					else
					 inf   ! inf in default does not work properly for some reason, so assign here
					endif
				}
				Comment: {
					"OPINT,4; OPINT,5; OPINT,6
					OPSTR,4"
				}
			}
			Parameter ccalc_cI_LBOUND {
				IndexDomain: (PlantGroup,Season,Slice)| PlantGroup in FirstPlantGroup_ and Slice in Slice_Active_;
				Text: "OML Columns: I(*****)(*)(*) and OML Rows: LBOUND";
				Definition: {
					if (EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=5 and 0<INT_CF(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup), PlantGroup)<=1 and
					   (UG_MRUN(PlantGroupOrd2PlantGroup(PlantGroup))>0 or INT_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, Slice, PlantGroup) * 0.1 <= EFD_MIN('1'))) or
					   (EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=7 and NET_STORAGE_LOAD_EFD(Segment2_element(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup)),
					   Group2_element(Slice, Season, UG_EMM_RG_to_SupplyRegion(PlantGroup)), UG_EMM_RG_to_SupplyRegion(PlantGroup), cyr)) then
					       UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001
					endif
				}
				Comment: {
					"OPINT,4; OPINT,5; OPINT,6
					OPSTR,4"
				}
			}
			Parameter ccalc_cI_EFDCOSTS {
				IndexDomain: (PlantGroup,Season,Slice);
				Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in OPINT_sub
				}
				Comment: "OPINT,7";
			}
			Parameter ccalc_cI_rGRDRTge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
				Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
				Definition: {
					!Done in OPINT_sub
				}
				Comment: " OPINT,14";
			}
			Parameter ccalc_cI_rGRDGNge {
				IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
				Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
				Definition: {
					!Done in OPINT_sub
				}
				Comment: " OPINT,15";
			}
		}
		DeclarationSection OPRNBS_Completed {
			Parameter ccalc_cOX_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
				Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: {
					"OPRNBS,1; OPRNBS,13"
				}
			}
			Parameter ccalc_cOX_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
				Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,4";
			}
			Parameter ccalc_cJX_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
				Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,5";
			}
			Parameter ccalc_cJX_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
				Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,6";
			}
			Parameter ccalc_cUX_rLDge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
				Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,9";
			}
			Parameter ccalc_cUX_rSRge {
				IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
				Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,10";
			}
			Parameter ccalc_cOX_rCBle {
				IndexDomain: (PlantGroup,Season) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3;
				Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
				Definition: {
					if (SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 or (SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))<=0 and EPPOPM(UG_EFDt_to_PlantType(PlantGroup))= 1)) then
					1
					endif
				}
				Comment: {
					"OPRNBS,17; OPRNBS,23"
				}
			}
			Parameter ccalc_cJX_rCBle {
				IndexDomain: (PlantGroup,Season) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0;
				Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
				Definition: 1;
				Comment: "OPRNBS,18";
			}
			Parameter ccalc_cUX_rCBle {
				IndexDomain: (PlantGroup,Season) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0;
				Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
				Definition: 1;
				Comment: "OPRNBS,19";
			}
			Parameter ccalc_cOX_UBOUND {
				IndexDomain: (PlantGroup,Season) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3;
				Text: "OML Columns: O(*****)X(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: {
					if (SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 or (SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))<=0 and EPPOPM(UG_EFDt_to_PlantType(PlantGroup))= 1)) then
					UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001
					endif
				}
				Comment: {
					"OPRNBS,20; OPRNBS,25"
				}
			}
			Parameter ccalc_cJX_UBOUND {
				IndexDomain: (PlantGroup,Season) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0;
				Text: "OML Columns: J(*****)X(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001;
				Comment: "OPRNBS,21";
			}
			Parameter ccalc_cUX_UBOUND {
				IndexDomain: (PlantGroup,Season) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0;
				Text: "OML Columns: U(*****)X(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001;
				Comment: "OPRNBS,22";
			}
			Parameter ccalc_cOX_EFDCOSTS {
				IndexDomain: (PlantGroup,Season);
				Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: {
					"OPRNBS,26; OPRNBS,29"
				}
			}
			Parameter ccalc_cJX_EFDCOSTS {
				IndexDomain: (PlantGroup,Season);
				Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,27";
			}
			Parameter ccalc_cUX_EFDCOSTS {
				IndexDomain: (PlantGroup,Season);
				Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,28";
			}
			Parameter ccalc_cOX_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
				Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: {
					"OPRNBS,33 ; OPRNBS,36 and OPRNBS,41"
				}
			}
			Parameter ccalc_cJX_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
				Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: {
					"OPRNBS,34 ; OPRNBS,37"
				}
			}
			Parameter ccalc_cUX_rBTUle {
				IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
				Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,38";
			}
			Parameter ccalc_cOX_rELNOX0n {
				IndexDomain: (INOXP,PlantGroup,Season);
				Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,78";
			}
			Parameter ccalc_cOX_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season);
				Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,78";
			}
			Parameter ccalc_cJX_rELNOX0n {
				IndexDomain: (INOXP,PlantGroup,Season);
				Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX0(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,79";
			}
			Parameter ccalc_cJX_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season);
				Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX(*)(**)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,79";
			}
			Parameter ccalc_cUX_rELNOX0n {
				IndexDomain: (INOXP,PlantGroup,Season);
				Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX0(*)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,80";
			}
			Parameter ccalc_cUX_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season);
				Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX(*)(**)";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,80";
			}
			Parameter ccalc_cOX_rMRXge {
				IndexDomain: (PlantGroup,Season);
				Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,81";
			}
			Parameter ccalc_cJX_rMRXge {
				IndexDomain: (PlantGroup,Season);
				Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,82";
			}
			Parameter ccalc_cUX_rMRXge {
				IndexDomain: (PlantGroup,Season);
				Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
				Definition: {
					!Done in OPRNBS_sub
				}
				Comment: "OPRNBS,83";
			}
			Parameter ccalc_cOX_rGn {
				IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
				Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
				Definition: {
					!Done in OPRNBS_sub
				}
			}
			Parameter ccalc_cJX_rGn {
				IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
				Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
				Definition: {
					!Done in OPRNBS_sub
				}
			}
			Parameter ccalc_cUX_rGn {
				IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
				Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
				Definition: {
					!Done in OPRNBS_sub
				}
			}
		}
		DeclarationSection OPDG_Completed {
			Parameter ccalc_cD_rLDge {
				IndexDomain: {
					(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)| OPDG_Slice_Mapping(Season, Slice, PlantGroup) and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup) and
					PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup)
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
				Definition: 0.1*1*OPDG_ADJ(SupplyRegion, Season, Slice, PlantGroup)*ELWDTH(Slice2SliceSorted_element(slice, Season, SupplyRegion), Season, SupplyRegion);
				Comment: "OPDG,1";
			}
			Parameter ccalc_cD_EFDCOSTS {
				IndexDomain: {
					(PlantGroup,Season,OperatingMode)| PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup)
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
				Definition: {
					(UG_OMR(PlantGroupOrd2PlantGroup(PlantGroup)) + RPSCST(PlantGroupOrd2PlantGroup(PlantGroup)) + GPSCST(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup, OperatingMode) -
					 UG_GSUB(PlantGroupOrd2PlantGroup(PlantGroup))) * OPDG_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup) * 0.001 ! units million $ / GW
				}
				Comment: "OPDG,4";
			}
			Parameter ccalc_cD_LBOUND {
				IndexDomain: {
					(PlantGroup,Season,OperatingMode)|PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup)
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: LBOUND";
				Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001;
				Comment: "OPDG,3";
			}
			Parameter ccalc_cD_rBTUle {
				IndexDomain: {
					(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)|PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup) and FuelRegion_ALT1=UG_FL_RG_to_PlantGroup(PlantGroup) and PlantType=UG_EFDt_to_PlantType(PlantGroup) and
					ord(GenerationSeason)=ord(Season)
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
				Definition: {
					IF (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)) <= UIFCG('1') OR UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))  = UIBMS('1') OR
					UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)) = UIDGB('1') OR UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)) = UIDGP('1')) THEN
					OPDG_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.000001  !  trill BTU per GW
					endif
				}
				Comment: "OPDG,8";
			}
			Parameter ccalc_cD_rCO2TNRn {
				IndexDomain: {
					(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)| PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup) and UG_EMM_RG_Mapping(SupplyRegion_ALT2, PlantGroup)
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
				Definition: {
					IF ((ord(cyr) + UHBSYR('1')) > UESTYR('1') )THEN
					OPDG_Gen(SupplyRegion_ALT2, Season, PlantGroup) * 0.001 * CO2LB(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode) * 0.001
					endif
				}
				Comment: "OPDG,17";
			}
			Parameter ccalc_cD_UBOUND {
				IndexDomain: {
					(PlantGroup,Season,OperatingMode)|PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup)
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: UBOUND";
				Range: nonnegative;
				Default: inf;
				Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001;
				Comment: "OPDG,3";
			}
			Parameter ccalc_cD_rCO2RNRn {
				IndexDomain: {
					(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)| PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup) and UG_EMM_RG_Mapping(SupplyRegion_ALT2, PlantGroup) and CO2_PLTSW_alt(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode)>0
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
				Definition: {
					IF ((ord(cyr) + UHBSYR('1')) > UESTYR('1') )THEN
					OPDG_Gen(SupplyRegion_ALT2, Season, PlantGroup) * 0.001 *
					(CO2LB(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode) - CO2_STDRN(SupplyRegion_ALT2, cyr)) * CO2_PLTSW_alt(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode) $
					(CO2_STDSW('1') > 0 AND CO2_STDRN(SupplyRegion_ALT2, cyr) > 0.0)
					endif
				}
				Comment: "OPDG,14";
			}
			Parameter ccalc_cD_rGENQNRn {
				IndexDomain: {
					(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)| PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup) and UG_EMM_RG_Mapping(SupplyRegion_ALT2, PlantGroup) and CO2_PLTSW_alt(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode)>0
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
				Definition: {
					IF ((ord(cyr) + UHBSYR('1')) > UESTYR('1') )THEN
					OPDG_Gen(SupplyRegion_ALT2, Season, PlantGroup) * 0.001 * CO2_PLTSW_alt(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode)
					endif
				}
				Comment: "OPDG,15";
			}
			Parameter ccalc_cD_rCO2QNRle {
				IndexDomain: {
					(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)| PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup) and UG_EMM_RG_Mapping(SupplyRegion_ALT2, PlantGroup) and CO2_PLTSW_alt(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode)>0
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
				Definition: {
					IF (CO2_STDSW('1') >0 AND CO2_STDQN(SupplyRegion_ALT2, cyr)>0.0 AND CO2_STDTN(SupplyRegion_ALT2)=2)THEN !use LE row
					IF ((ord(cyr) + UHBSYR('1')) > UESTYR('1') )THEN
					OPDG_Gen(SupplyRegion_ALT2, Season, PlantGroup) * 0.001 * CO2LB(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode) * 0.001 * CO2_PLTSW_alt(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode)
					endif
					endif
				}
				Comment: "OPDG,16";
			}
			Parameter ccalc_cD_rCO2QNRn {
				IndexDomain: {
					(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)| PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup) and UG_EMM_RG_Mapping(SupplyRegion_ALT2, PlantGroup) and CO2_PLTSW_alt(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode)>0
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
				Definition: {
					IF (CO2_STDSW('1') <=0 or CO2_STDQN(SupplyRegion_ALT2, cyr)<=0.0 or CO2_STDTN(SupplyRegion_ALT2)<2)THEN !use N row
					IF ((ord(cyr) + UHBSYR('1')) > UESTYR('1') )THEN
					OPDG_Gen(SupplyRegion_ALT2, Season, PlantGroup) * 0.001 * CO2LB(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode) * 0.001 * CO2_PLTSW_alt(SupplyRegion_ALT2, Season, PlantGroup, OperatingMode)
					endif
					endif
				}
				Comment: "OPDG,16";
			}
			Parameter ccalc_cD_rELNOXle {
				IndexDomain: {
					(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) |PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup) and ord(PlantType_ECP)=UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
				Definition: {
					if EMRFNA(INOXP, cyr)>0 then
					 OPDG_NOXEM(INOXP, Season, PlantGroup) $ (OPDG_NOXEM(INOXP, Season, PlantGroup) > 0.001)
					! OPDG_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(PlantGroup)) *
					!UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.0005 * 0.001 $
					!(OPDG_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(PlantGroup)) *
					!UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.0005 * 0.001 > 0.001)
					endif
				}
				Comment: "OPDG,18";
			}
			Parameter ccalc_cD_rELNOX0n {
				IndexDomain: {
					(INOXP,PlantGroup,Season,OperatingMode) | PlantGroup in FirstPlantGroup_ and EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=6 and
					OperatingMode=OPDG_OperatingMode(Season, PlantGroup)
				}
				Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX0(*)";
				Definition: {
					if EMRFNA(INOXP, cyr)=0 then
					 OPDG_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(PlantGroup)) *
					UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.0005 * 0.001 $
					(OPDG_Gen(UG_EMM_RG_to_SupplyRegion(PlantGroup), Season, PlantGroup) * UG_HTRT(Season, PlantGroupOrd2PlantGroup(PlantGroup)) *
					UG_NOXC(Season, INOXP, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.0005 * 0.001 > 0.001)
					endif
				}
				Comment: "OPDG,18";
			}
		}
		DeclarationSection REVEFD_Completed {
			Parameter ccalc_cELNOX_rELNOX0le {
				IndexDomain: (INOXP,PlantType_ECP) | TST_NOX(PlantType_ECPp2_Element(PlantType_ECP), INOXP)>0 and EMRFNA(INOXP, cyr)>0;
				Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
				Definition: 1;
				Comment: "REVEFD,2";
			}
			Parameter ccalc_cELNOX_rELNOXle {
				IndexDomain: (INOXP,PlantType_ECP) | TST_NOX(PlantType_ECPp2_Element(PlantType_ECP), INOXP)>0 and EMRFNA(INOXP, cyr)>0;
				Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
				Definition: -1;
				Comment: "REVEFD,1";
			}
			Parameter ccalc_cELNOXOT_rELNOXOTle {
				IndexDomain: (INOXP) | TST_NOX(ECPCAPplus1_Element, INOXP)>0 and EMRFNA(INOXP, cyr)>0;
				Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX(*)OT";
				Definition: -1;
				Comment: "REVEFD,3";
			}
			Parameter ccalc_cELNOXOT_rELNOX0le {
				IndexDomain: (INOXP) | TST_NOX(ECPCAPplus1_Element, INOXP)>0 and EMRFNA(INOXP, cyr)>0;
				Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX0(*)";
				Definition: 1;
				Comment: "REVEFD,4";
			}
			Parameter ccalc_cSULF_EFDCOSTS {
				IndexDomain: (PlantType_ECP,SO2Region) |TST_SO2(PlantType_ECPp2_Element(PlantType_ECP), SO2Region)>0;
				Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
				Definition: EFD_MIN('1');
				Comment: "REVEFD,5";
			}
			Parameter ccalc_cSULF_rSULFle {
				IndexDomain: (PlantType_ECP,SO2Region) |TST_SO2(PlantType_ECPp2_Element(PlantType_ECP), SO2Region)>0;
				Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
				Definition: -1;
				Comment: "REVEFD,6";
			}
			Parameter ccalc_cSULF_rSULFURn {
				IndexDomain: (SO2Region,PlantType_ECP) |TST_SO2(PlantType_ECPp2_Element(PlantType_ECP), SO2Region)>0 and SO2Region in NUM_SO2_GRP_Set_;
				Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
				Definition: {
					IF ED_COL_SULFUR_Switch(SO2Region)=0 THEN
					 1
					endif
				}
				Comment: {
					"REVEFD,7
					row type defined in uefd.f line 18302"
				}
			}
			Parameter ccalc_cMERC__rMERC_le {
				IndexDomain: (PlantType_ECP,nHGCODE) | TST_HG(UtilitySector_Element(PlantType_ECP), nHGCODE);
				Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
				Definition: -1;
				Comment: "REVEFD,10";
			}
			Parameter ccalc_cMERC__rMERCURYn {
				IndexDomain: (nHGCODE,PlantType_ECP) | TST_HG(UtilitySector_Element(PlantType_ECP), nHGCODE) and EMEL_QHG(nHGCODE, cyr)>=100;
				Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
				Definition: 1;
				Comment: {
					"REVEFD,11
					row type defined in uefd.f line 18385"
				}
			}
			Parameter ccalc_cMERC_DS_rMERC_DSle {
				IndexDomain: (nHGCODE) | TST_HG(UtilitySectorPlus2, nHGCODE);
				Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
				Definition: -1;
				Comment: "REVEFD,12";
			}
			Parameter ccalc_cMERC_DS_rMERCURYn {
				IndexDomain: (nHGCODE) | TST_HG(UtilitySectorPlus2, nHGCODE) and EMEL_QHG(nHGCODE, cyr)>=100;
				Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
				Definition: 1;
				Comment: {
					"REVEFD,13
					row type defined in uefd.f line 18385"
				}
			}
			Parameter ccalc_cMERC_RS_rMERC_RSle {
				IndexDomain: (nHGCODE) | TST_HG(UtilitySectorPlus1, nHGCODE);
				Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
				Definition: -1;
				Comment: "REVEFD,12";
			}
			Parameter ccalc_cMERC_RS_rMERCURYn {
				IndexDomain: (nHGCODE) | TST_HG(UtilitySectorPlus1, nHGCODE) and EMEL_QHG(nHGCODE, cyr)>=100;
				Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
				Definition: 1;
				Comment: "REVEFD,13";
			}
			Parameter ccalc_cMERC__rMERCURYle {
				IndexDomain: (nHGCODE,PlantType_ECP) | TST_HG(UtilitySector_Element(PlantType_ECP), nHGCODE) and EMEL_QHG(nHGCODE, cyr)<100;
				Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
				Definition: 1;
				Comment: {
					"REVEFD,11
					row type defined in uefd.f line 18385"
				}
			}
			Parameter ccalc_cMERC_DS_rMERCURYle {
				IndexDomain: (nHGCODE) | TST_HG(UtilitySectorPlus2, nHGCODE) and EMEL_QHG(nHGCODE, cyr)<100;
				Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
				Definition: 1;
				Comment: {
					"REVEFD,13
					row type defined in uefd.f line 18385"
				}
			}
			Parameter ccalc_cMERC_RS_rMERCURYle {
				IndexDomain: (nHGCODE) | TST_HG(UtilitySectorPlus1, nHGCODE) and EMEL_QHG(nHGCODE, cyr)<100;
				Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
				Definition: 1;
				Comment: {
					"REVEFD,13
					row type defined in uefd.f line 18385"
				}
			}
			Parameter ccalc_cSULF_rSULFURle {
				IndexDomain: (SO2Region,PlantType_ECP) |TST_SO2(PlantType_ECPp2_Element(PlantType_ECP), SO2Region)>0 and SO2Region in NUM_SO2_GRP_Set_;
				Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
				Definition: {
					IF ((UYR_NOCAIR('1') <= 0 OR (ord(cyr) + UHBSYR('1')) < UYR_NOCAIR('1')) AND
					((ord(cyr) + UHBSYR('1')) < TRANRULE1('1') or SO2Region=NUM_SO2_GRP_Element))THEN
					 1
					endif
				}
				Comment: {
					"REVEFD,7
					row type defined in uefd.f line 18302 ED$COL subroutine"
				}
			}
		}
		DeclarationSection OtherParams_Completed;
	}
	DeclarationSection OddBalls {
		Parameter EDMXDS_ECP {
			IndexDomain: (PlantType_ECP,FuelRegion);
			Text: "avg max dist share by ECP plt type and fuel region";
		}
		Parameter EDMXGS_ECP {
			IndexDomain: (PlantType_ECP,FuelRegion);
			Text: "avg max gas share by ECP plt type and fuel region";
		}
		Parameter EDMXRS_ECP {
			IndexDomain: (PlantType_ECP,FuelRegion);
			Text: "avg max resid share by ECP plt type and fuel region";
		}
		Parameter EDMXDS_EFD {
			IndexDomain: (PlantType,FuelRegion);
			Text: "avg max dist share by EFD plt type and fuel region";
		}
		Parameter EDMXGS_EFD {
			IndexDomain: (PlantType,FuelRegion);
			Text: "avg max gas share by EFD plt type and fuel region";
		}
		Parameter EDMXRS_EFD {
			IndexDomain: (PlantType,FuelRegion);
			Text: "avg max resid share by EFD plt type and fuel region";
		}
	}
	Section Sections_below_this_are_from_arraycode_efd_program_so_do_not_change;
    DeclarationSection SetDeclare {
     Set numACI_ {
         Index: numACI;
         OrderBy: user;
     }
     Set BiomassSector_ {
         Index: BiomassSector;
         OrderBy: user;
     }
     Set BiomassType_ {
       SubsetOf: BiomassType_SUP_;
         Index: BiomassType;
         OrderBy: user;
     }
     Set BiomassProductionStep_ {
         Index: BiomassProductionStep;
         OrderBy: user;
     }
     Set PlantType_ {
         Index: PlantType;
         OrderBy: user;
     }
     Set GenerationSeason_ {
         Index: GenerationSeason;
         OrderBy: user;
     }
     Set FuelShareOption_ {
         Index: FuelShareOption;
         OrderBy: user;
     }
     Set INOXP_ {
         Index: INOXP;
         OrderBy: user;
     }
     Set CoalSupplyCurve_ {
         Index: CoalSupplyCurve;
         OrderBy: user;
     }
     Set nIFGD_ {
         Index: nIFGD;
         OrderBy: user;
     }
     Set CarbonEmissionType_ {
         Index: CarbonEmissionType;
         OrderBy: user;
     }
     Set CarbonRegion_ {
         Index: CarbonRegion;
         OrderBy: user;
     }
     Set CoalType_ {
         Index: CoalType;
         OrderBy: user;
     }
     Set CoalProductionStep_ {
         Index: CoalProductionStep;
         OrderBy: user;
     }
     Set PlantType_ECP_ {
         Index: PlantType_ECP;
         OrderBy: user;
     }
     Set ACIOption_ {
         Index: ACIOption;
         OrderBy: user;
     }
     Set SO2Region_ {
         Index: SO2Region, SO2Region_ALTFrom, SO2Region_ALTTo;
         OrderBy: user;
     }
     Set PlantGroup_ {
         Index: PlantGroup;
         OrderBy: user;
     }
     Set Season_ {
       SubsetOf: Season_SUP_;
         Index: Season;
         OrderBy: user;
     }
     Set OperatingMode_ {
         Index: OperatingMode;
         OrderBy: user;
     }
     Set DistillateProductionStep_ {
         Index: DistillateProductionStep;
         OrderBy: user;
     }
     Set OilRegion_ {
         Index: OilRegion;
         OrderBy: user;
     }
     Set CoalDiversityType_ {
         Index: CoalDiversityType;
         OrderBy: user;
     }
     Set SupplyRegion_ {
         Index: SupplyRegion, SupplyRegion_ALT1, SupplyRegion_ALTfrom, SupplyRegion_ALTto, SupplyRegion_ALT2;
         OrderBy: user;
     }
     Set Slice_ {
         Index: Slice;
         OrderBy: user;
     }
     Set FuelRegion_ {
       SubsetOf: FuelRegion_SUP_;
         Index: FuelRegion, FuelRegion_ALT1;
         OrderBy: user;
     }
     Set GasProductionStep_ {
         Index: GasProductionStep;
         OrderBy: user;
     }
     Set GasRegion_ {
         Index: GasRegion;
         OrderBy: user;
     }
     Set GasSeason_ {
         Index: GasSeason;
         OrderBy: user;
     }
     Set SeasonCCS_ {
         Index: SeasonCCS;
         OrderBy: user;
     }
     Set nHGCODE_ {
         Index: nHGCODE;
         OrderBy: user;
     }
     Set OGSMSector_ {
         Index: OGSMSector;
         OrderBy: user;
     }
     Set OGSMRegion_ {
       SubsetOf: OGSMRegion_SUP_;
         Index: OGSMRegion, OGSMRegion_ALTFrom, OGSMRegion_ALTTo;
         OrderBy: user;
     }
     Set ResidProductionStep_ {
         Index: ResidProductionStep;
         OrderBy: user;
     }
     Set CanadianSupplyRegion_ {
         Index: CanadianSupplyRegion;
         OrderBy: user;
     }
     Set CanadianSupplyStep_ {
         Index: CanadianSupplyStep;
         OrderBy: user;
     }
     Set SupplyStates_ {
         Index: SupplyStates;
         OrderBy: user;
     }
     Set nRCF_ {
         Index: nRCF;
         OrderBy: user;
     }
     Set CensusRegion_ {
         Index: CensusRegion;
         OrderBy: user;
     }
     Set GridResilienceSource_ {
         Index: GridResilienceSource;
         OrderBy: user;
     }
     Set CoalDemandRegion_ {
       SubsetOf: CoalDemandRegion_SUP_;
         Index: CoalDemandRegion, CoalDemandRegion_ALT2, CoalDemandRegion_ALT1, CoalDemandRegion_ALTfrom, CoalDemandRegion_ALTto;
         OrderBy: user;
     }
     Set Two_ {
         Index: Two;
         OrderBy: user;
     }
     Set Three_ {
         Index: Three;
         OrderBy: user;
     }
     Set Four_ {
         Index: Four;
         OrderBy: user;
     }
     Set Five_ {
         Index: Five;
         OrderBy: user;
     }
     Set OGSMRegionEX_ {
       SubsetOf: OGSMRegion_SUP_;
         Index: OGSMRegionEX, OGSMRegionEX_ALTTo;
         OrderBy: user;
     }
     Set Ten_ {
         Index: Ten;
         OrderBy: user;
     }
     Set Eleven_ {
         Index: Eleven;
         OrderBy: user;
     }
     Set Months_ {
         Index: Months;
         OrderBy: user;
     }
     Set Thirteen_ {
         Index: Thirteen;
         OrderBy: user;
     }
     Set Fifteen_ {
         Index: Fifteen;
         OrderBy: user;
     }
     Set HoursADay_ {
         Index: HoursADay;
         OrderBy: user;
     }
     Set PlanningHorizon_ {
         Index: PlanningHorizon;
         OrderBy: user;
     }
     Set Season_SUP_ {
         Index: Season_SUP;
         OrderBy: user;
     }
     Set Two0_ {
         Index: Two0;
         OrderBy: user;
     }
     Set FuelRegion_SUP_ {
         Index: FuelRegion_SUP;
         OrderBy: user;
     }
     Set BiomassType_SUP_ {
         Index: BiomassType_SUP;
         OrderBy: user;
     }
     Set CoalDemandRegion_SUP_ {
         Index: CoalDemandRegion_SUP;
         OrderBy: user;
     }
     Set CO2CapGroup_ {
         Index: CO2CapGroup;
         OrderBy: user;
     }
     Set BoilerType_ {
         Index: BoilerType;
         OrderBy: user;
     }
     Set PlantType_ECPp2_ {
         Index: PlantType_ECPp2;
         OrderBy: user;
     }
     Set BiomassOption_ {
         Index: BiomassOption;
         OrderBy: user;
     }
     Set DispatchableECP_ {
       SubsetOf: PlantType_ECP_;
         Index: DispatchableECP;
         OrderBy: user;
     }
     Set ImportStep_ {
         Index: ImportStep;
         OrderBy: user;
     }
     Set FuelsPerPlant_ {
         Index: FuelsPerPlant;
         OrderBy: user;
     }
     Set BiomassRetrofit_ {
         Index: BiomassRetrofit;
         OrderBy: user;
     }
     Set DistGenPlantGroup_ {
         Index: DistGenPlantGroup;
         OrderBy: user;
     }
     Set int_fuel_region_ {
         Index: int_fuel_region, int_fuel_region_ALT1;
         OrderBy: user;
     }
     Set int_fuel_region1_ {
         Index: int_fuel_region1, int_fuel_region1_ALT1;
         OrderBy: user;
     }
     Set RenewPlantGroup_ {
         Index: RenewPlantGroup;
         OrderBy: user;
     }
     Set DispPlantGroup_ {
         Index: DispPlantGroup;
         OrderBy: user;
     }
     Set SliceSorted_ {
         Index: SliceSorted, SliceSorted_ALT1;
         OrderBy: user;
     }
     Set FuelType_ {
         Index: FuelType;
         OrderBy: user;
     }
     Set OwnerShipType_ {
         Index: OwnerShipType;
         OrderBy: user;
     }
     Set SupplyRegionAll_ {
         Index: SupplyRegionAll, SupplyRegionAll_ALT1;
         OrderBy: user;
     }
     Set Segment_ {
         Index: Segment;
         OrderBy: user;
     }
     Set Group_ {
         Index: Group;
         OrderBy: user;
     }
     Set EMMStates_ {
         Index: EMMStates;
         OrderBy: user;
     }
     Set CPPRegion_ {
         Index: CPPRegion;
         OrderBy: user;
     }
     Set MercuryClass_ {
         Index: MercuryClass;
         OrderBy: user;
     }
     Set EmissionRank_ {
         Index: EmissionRank;
         OrderBy: user;
     }
     Set PlantGroupOrd_ {
         Index: PlantGroupOrd;
         OrderBy: user;
     }
     Set SupplyRegion_SUB_ {
       SubsetOf: SupplyRegion_;
         Index: SupplyRegion_SUB;
         OrderBy: user;
     }
     Set DemandSectors_ {
         Index: DemandSectors;
         OrderBy: user;
     }
     Set EmissionType_ {
         Index: EmissionType;
         OrderBy: user;
     }
     Set CHPFuel_ {
         Index: CHPFuel;
         OrderBy: user;
     }
     Set OGSMReg_ {
         Index: OGSMReg;
         OrderBy: user;
     }
     Set MNUMYR_ {
         Index: MNUMYR;
         OrderBy: user;
     }
     Set CoalSupplyCurve_Int_ {
         Index: CoalSupplyCurve_Int;
         OrderBy: user;
     }
     Set CoalSupplyCurve_Dom_ {
       SubsetOf: CoalSupplyCurve_;
         Index: CoalSupplyCurve_Dom;
         OrderBy: user;
     }
     Set SO2_Transport_ {
         Index: SO2_Transport;
         OrderBy: user;
     }
     Set NOXStates_ {
         Index: NOXStates;
         OrderBy: user;
     }
     Set UtilitySector_ {
         Index: UtilitySector;
         OrderBy: user;
     }
     Set OGSMRegion_SUP_ {
         Index: OGSMRegion_SUP;
         OrderBy: user;
     }
     Set SCALARSet_ {
         Index: SCALARSet;
         OrderBy: user;
     }
   }
   DeclarationSection TransferVariable_Input {
     Parameter ab_allbank_avl {
         IndexDomain: (MNUMYR) ;
         Text: "Banked allowances available (cumulative)" ;
     }
     Parameter ab_auction_p {
         IndexDomain: (MNUMYR) ;
         Text: "ccost of auction reserve allowances" ;
     }
     Parameter ab_cap_tot {
         IndexDomain: (MNUMYR) ;
         Text: "Combined cap or allowances issued" ;
     }
     Parameter ab_covd_em_fue {
         IndexDomain: (MNUMYR) ;
         Text: "ffuel providers               (tonnes Ceq)" ;
     }
     Parameter ab_covd_em_ind {
         IndexDomain: (MNUMYR) ;
         Text: "eexcl refining    (tonnes Ceq)" ;
     }
     Parameter ab_covd_em_oth {
         IndexDomain: (MNUMYR) ;
         Text: "mmostly non-co2             (tonnes Ceq)" ;
     }
     Parameter ab_covd_em_ref {
         IndexDomain: (MNUMYR) ;
         Text: "rrefining from p1             (tonnes Ceq)" ;
     }
     Parameter ab_cstcont_avl {
         IndexDomain: (MNUMYR) ;
         Text: "cost containment reserve allowances available (cumulative)" ;
     }
     Parameter ab_cstcont_frac {
         IndexDomain: (MNUMYR) ;
         Text: "ffrom 0 to 1) held in reserve for cost containment" ;
     }
     Parameter ab_offset_frac {
         IndexDomain: (MNUMYR) ;
         Text: "ffrom 0 to 1)ffset assumption (fract of ab_cap_tot" ;
     }
     Parameter ab_reserve_p {
         IndexDomain: (Three,MNUMYR) ;
         Text: "ttriggering release of cost containment reserve allowances" ;
     }
     Parameter ACI_CST {
         IndexDomain: (numACI,EmissionRank,PlantType_ECP) ;
         Text: "Equipment Cost per Trillion Btu of Coal for Activated Carbon Injection" ;
     }
     Parameter ACI_OPT {
         IndexDomain: (numACI,EmissionRank,PlantType_ECP,MNUMYR) ;
         Text: "11 => Yes)ACI Options (0 => No" ;
     }
     Parameter ACI_STEPS {
         IndexDomain: (PlantType_ECP,EmissionRank) ;
         Text: "Number of ACI Steps to Create" ;
     }
     Parameter ALT_UECP_CPEN_ADJ {
         IndexDomain: (PlantType_ECP) ;
         Text: "Minimum Capacity Derate Adjustment Factor" ;
     }
     Parameter AIMMS_GRP {
         IndexDomain: (PlantType_ECP) ;
         Text: "similarly grouped ECP plant types" ;
     }
     Parameter AINU {
         IndexDomain: (SCALARSet) ;
         Text: "NUCLEAR" ;
     }
     Parameter BARRIER {
         IndexDomain: (MNUMYR) ;
         Text: "ALLOW TRADE" ;
     }
     Parameter BMCLCON {
         IndexDomain: (MNUMYR) ;
         Text: "STEO BENCHMARKING SWITCH CL CON" ;
     }
     Parameter BMCLGEN {
         IndexDomain: (MNUMYR) ;
         Text: "STEO BENCHMARKING SWITCH CL GEN" ;
     }
     Parameter BMCLTOL {
         IndexDomain: (SCALARSet) ;
         Text: "STEO BENCHMARKING TOLERANCE -- CL" ;
     }
     Parameter BMNETIMP {
         IndexDomain: (MNUMYR) ;
         Text: "STEO BENCHMARKING SWITCH NET IMPORTS" ;
     }
     Parameter BMNGCON {
         IndexDomain: (MNUMYR) ;
         Text: "STEO BENCHMARKING SWITCH NG CON" ;
     }
     Parameter BMNGGEN {
         IndexDomain: (MNUMYR) ;
         Text: "STEO BENCHMARKING SWITCH NG GEN" ;
     }
     Parameter BMNGTOL {
         IndexDomain: (SCALARSet) ;
         Text: "STEO BENCHMARKING TOLERANCE -- NG" ;
     }
     Parameter BMOLTOL {
         IndexDomain: (SCALARSet) ;
         Text: "STEO BENCHMARKING TOLERANCE -- OL" ;
     }
     Parameter BNK_TO_CMM_HG {
         IndexDomain: (MNUMYR) ;
         Text: "Use BanksAdjustments Determined in ECP sent to CMM to Create Banks" ;
     }
     Parameter BTCOGEN {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "TRADITIONAL COGEN TO GRID" ;
     }
     Parameter CAN_CST_SCMULT {
         IndexDomain: (MNUMYR) ;
         Text: "scenario multiplier for canada supply curve costs" ;
     }
     Parameter CAN_QTY_SCMULT {
         IndexDomain: (MNUMYR) ;
         Text: "scenario multiplier for canada supply curve quantities" ;
     }
     Parameter CARGRP_CA {
         IndexDomain: (SCALARSet) ;
         Text: "Carbon Group Index For California" ;
     }
     Parameter CARGRP_RG {
         IndexDomain: (SCALARSet) ;
         Text: "Carbon Group Index For RGGI" ;
     }
     Parameter CCS_EOR_45Q {
         IndexDomain: (MNUMYR) ;
         Text: "Tax credits for enhanced oil recovery in dollars per metric ton co2" ;
     }
     Parameter CCS_SALINE_45Q {
         IndexDomain: (MNUMYR) ;
         Text: "Tax credits for saline injection in dollars per metric ton co2" ;
     }
     Parameter CFCRDIMP {
         IndexDomain: (MNUMYR) ;
         Text: "31 Crude oil imports" ;
     }
     Parameter CFNGC {
         IndexDomain: (MNUMYR) ;
         Text: "22 Natural Gas - Consumption" ;
     }
     Parameter CFNGU {
         IndexDomain: (MNUMYR) ;
         Text: "20 Natural Gas - Utility consumption" ;
     }
     Parameter CGNTGEN {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR,CHPFuel,Two) ;
         Text: "NON-TRAD EXIST&PLANNED COGEN GENERATION" ;
     }
     Parameter CNSTRNTS_EFD {
         IndexDomain: (Season,MNUMYR,SupplyRegionAll_ALT1,SupplyRegionAll) ;
     }
     Parameter CLCONFC {
         IndexDomain: (CoalDemandRegion,FuelRegion) ;
     }
     Parameter CO2BYGRP {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Caps by CO2 Control Groups" ;
     }
     Parameter CO2EPGRP {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Emission Containment Reserve Prc  (If Any) by CO2 Control Groups" ;
     }
     Parameter CO2EQGRP {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Emission Containment Reserve Qty  (If Any) by CO2 Control Groups" ;
     }
     Parameter CO2ESGRP {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Escape Vector or Max Prc  (If Any) by CO2 Control Groups" ;
     }
     Parameter CO2FLGRP {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Price Floors (If Any) by CO2 Control Groups" ;
     }
     Parameter CO2OPGRP {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Offset  Prc  (If Any) by CO2 Control Groups" ;
     }
     Parameter CO2OQGRP {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Offset  Qty  (If Any) by CO2 Control Groups" ;
     }
     Parameter CO2RPGRP {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Reserve Prc  (If Any) by CO2 Control Groups" ;
     }
     Parameter CO2RQGRP {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Reserve Qty  (If Any) by CO2 Control Groups" ;
     }
     Parameter CO2NJEXC {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Emissions to Exclude when NJ had left (If Any) by CO2 Control Groups (RGGI Only-Frac of NY/NJ)" ;
     }
     Parameter CO2VAEXC {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "CO2 Emissions to Exclude when VA was not part of RGGI CO2 Control Groups (VA frac of fuel region (1.0))" ;
     }
     Parameter CO2_ADJNT {
         IndexDomain: (SCALARSet) ;
         Text: "EPA Emission Adjustment for NT Cogen" ;
     }
     Parameter CO2_CL_BY_FL {
         IndexDomain: (FuelRegion,CO2CapGroup) ;
         Text: "FRAC OF COAL CO2 EMISSIONS BY FUEL/CO2 REGION" ;
     }
     Parameter CO2_DE_BY_CA {
         IndexDomain: (MNUMYR) ;
         Text: "CO2 EMISSION RATE FOR DOMESTIC ECONOMY IMPORTS TO CALIFORNIA BY YEAR" ;
     }
     Parameter CO2_DE_BY_RG {
         IndexDomain: (SupplyRegion_ALT1,CO2CapGroup) ;
         Text: "CO2 EMISSION RATE FOR DOMESTIC ECONOMY IMPORTS BY EXPORT EMM/CO2 REGION" ;
     }
     Parameter CO2_DF_BY_CA {
         IndexDomain: (MNUMYR) ;
         Text: "CO2 EMISSION RATE FOR DOMESTIC FIRM IMPORTS TO CALIFORNIA BY YEAR" ;
     }
     Parameter CO2_DF_BY_RG {
         IndexDomain: (SupplyRegion_ALT1,CO2CapGroup) ;
         Text: "CO2 EMISSION RATE FOR DOMESTIC FIRM IMPORTS BY IMPORT EMM/CO2 REGION" ;
     }
     Parameter CO2_EMSWD {
         IndexDomain: (SCALARSet) ;
         Text: "EPA Emission Rate for Biomass Cofiring" ;
     }
     Parameter CO2_EORSW {
         IndexDomain: (SCALARSet) ;
         Text: "11 = yes)to turn off CO2 for EOR (0 = no" ;
     }
     Parameter CO2_GRP {
         IndexDomain: (SCALARSet) ;
         Text: "Number of CO2 Cap Groups" ;
     }
     Parameter CO2_IM_BY_CA {
         IndexDomain: (MNUMYR) ;
         Text: "CO2 EMISSION RATE FOR INTERNATIONAL IMPORTS TO CALIFORNIA BY YEAR" ;
     }
     Parameter CO2_IM_BY_RG {
         IndexDomain: (SupplyRegion_ALT1,CO2CapGroup) ;
         Text: "CO2 EMISSION RATE FOR INTERNATIONAL IMPORTS BY EMM/CO2 REGION" ;
     }
     Parameter CO2_OG_BY_FL {
         IndexDomain: (FuelRegion,CO2CapGroup) ;
         Text: "FRAC OF O/G CO2 EMISSIONS BY FUEL/CO2 REGION" ;
     }
     Parameter CO2_OS_BY_RG {
         IndexDomain: (SupplyRegion_ALT1,CO2CapGroup) ;
         Text: "CO2 EMISSION RATE FOR OUT/ST GEN BY EMM/CO2 REGION" ;
     }
     Parameter CO2_PLTRG {
         IndexDomain: (PlantType_ECP,SupplyRegion) ;
         Text: "mmass or rate) that is covered by Standards.e." ;
     }
     Parameter CO2_PRCSW {
         IndexDomain: (SCALARSet) ;
         Text: "33=use difference (ECP-EFD)g methodology (0=no marg prc adj" ;
     }
     Parameter CO2_STDQN {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "CO2 Generation Mass-Based Standard by EMM  Region and Year" ;
     }
     Parameter CO2_STDRF {
         IndexDomain: (int_fuel_region_ALT1,MNUMYR) ;
         Text: "CO2 Generation Intensity Rate Standard by Fuel Region and Year" ;
     }
     Parameter CO2_STDRN {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "CO2 Generation Intensity Rate Standard by EMM  Region and Year" ;
     }
     Parameter CO2_STDSW {
         IndexDomain: (SCALARSet) ;
         Text: "iif anyh to indicate aggregation of State Standards" ;
     }
     Parameter CO2_STDTN {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "2=mass) -- EMM  Region11d standard type (1=rate" ;
     }
     Parameter CO2_THRET {
         IndexDomain: (SCALARSet) ;
         Text: "CF Threshold for Existing CT" ;
     }
     Parameter CPFLECP {
         IndexDomain: (PlantType_ECP,CensusRegion,int_fuel_region_ALT1,int_fuel_region) ;
         Text: "capacity in combined fuel region by ECP type" ;
     }
     Parameter CPFLEFD {
         IndexDomain: (PlantType,CensusRegion,int_fuel_region_ALT1,int_fuel_region) ;
         Text: "capacity in combined fuel region by EFD type" ;
     }
     Parameter CTLBTU {
         IndexDomain: (CoalSupplyCurve_Dom,CoalDemandRegion,MNUMYR) ;
         Text: "Coal-to-liquid (CTL) trillion Btus" ;
     }
     Parameter CURIYR {
         IndexDomain: (SCALARSet) ;
         Text: "CURRENT IYEAR INDEX" ;
     }
     Parameter DPVDISPATCH {
         IndexDomain: (SCALARSet) ;
         Text: "FLAG for Distributed Solar PV Adjustment" ;
     }
     Parameter DPVTOTCAPNR {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
     }
     Parameter DPVTOTGENNR {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
     }
     Parameter ECP_SCRUB {
         IndexDomain: (UtilitySector,MNUMYR) ;
         Text: "Scrubber Code by Coal Sector / ECP Type (2 -> Unscrubbed ; 1 -> Scrubbed)" ;
     }
     Parameter ECANSQZ {
         IndexDomain: (CanadianSupplyRegion,MNUMYR) ;
     }
     Parameter ECASTS {
         IndexDomain: (DispPlantGroup,SupplyRegion) ;
         Text: "DSP PLT GRP EFD CAPACITY TYPE" ;
     }
     Parameter ECCAP {
         IndexDomain: (DispPlantGroup,Season,SupplyRegion) ;
         Text: "DISPATCHABLE (DSP) CAPACITY" ;
     }
     Parameter ECDBID {
         IndexDomain: (DispPlantGroup,SupplyRegion) ;
         Text: "DSP PLT GRP DB ID" ;
     }
     Parameter ECLEL {
         IndexDomain: (MNUMYR) ;
         Text: "25 Coal - Electric Power" ;
     }
     Parameter ECMRUNCF {
         IndexDomain: (PlantGroup) ;
     }
     Parameter ECNTP {
         IndexDomain: (SCALARSet,SupplyRegion) ;
         Text: "NUMBER OF CAPACITY GROUPS" ;
     }
     Parameter ECP_MIN {
         IndexDomain: (SCALARSet) ;
         Text: "MINIMUM VALUE FOR ECP COEFFICIENTS" ;
     }
     Parameter ECPPRCFL {
         IndexDomain: (FuelRegion,MNUMYR) ;
     }
     Parameter ECPPRCNL {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
     }
     Parameter EDSEL {
         IndexDomain: (MNUMYR) ;
         Text: "36 Distillate - Electricity (+petroleum coke)" ;
     }
     Parameter EENSP {
         IndexDomain: (SCALARSet,SupplyRegion) ;
         Text: "NUMBER OF SEASONAL PERIODS" ;
     }
     Parameter EETIME {
         IndexDomain: (Season,SupplyRegion) ;
         Text: "NUMBER OF HOURS PER SEASON" ;
     }
     Parameter EFACTR {
         IndexDomain: (SCALARSet,SupplyRegion) ;
         Text: "CONVERTS I2 TO R4(IE. * .001>" ;
     }
     Parameter EFDMAT {
         IndexDomain: (SCALARSet) ;
         Text: "RREVISE = 1 - CREATE = 0" ;
     }
     Parameter EFDPRCFL {
         IndexDomain: (FuelRegion,MNUMYR) ;
     }
     Parameter EFDPRCNL {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
     }
     Parameter EFD_CONT {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion,Two,MNUMYR) ;
         Text: "22 = unscr); expand to include international" ;
     }
     Parameter EFD_LG_DVLIM {
         IndexDomain: (CoalDemandRegion,UtilitySector,MNUMYR) ;
         Text: "EFD Diversity Limits for Lignite" ;
     }
     Parameter EFD_SB_DVLIM {
         IndexDomain: (CoalDemandRegion,UtilitySector,MNUMYR) ;
         Text: "EFD Diversity Limits for Subbituminous" ;
     }
     Parameter EFD_GRPS_F {
         IndexDomain: (PlantGroupOrd) ;
         Text: "First EMM Group in EFD Super Group" ;
     }
     Parameter EFD_GRPS_N {
         IndexDomain: (PlantGroup) ;
         Text: "Next EMM Group in EFD Super Group" ;
     }
     Parameter EFD_GW {
         IndexDomain: (Segment,Group,ImportStep,CanadianSupplyRegion,MNUMYR) ;
     }
     Parameter EFD_MIN {
         IndexDomain: (SCALARSet) ;
     }
     Parameter EFD_DSP {
         IndexDomain: (SCALARSet) ;
         Text: "DISPATCHABLE CAPACITY TYPES" ;
     }
     Parameter EFD_RNW {
         IndexDomain: (SCALARSet) ;
         Text: "RENEWABLE TYPES" ;
     }
     Parameter EFD_DGN {
         IndexDomain: (SCALARSet) ;
         Text: "DISTRIBUTED GENERATION CAPACITY TYPES" ;
     }
     Parameter ECP_RNW {
         IndexDomain: (SCALARSet) ;
         Text: "ECP NUMBER OF OTHER RENEWABLE CAPACITY TYPES" ;
     }
     Parameter EFD_RANK {
         IndexDomain: (CoalSupplyCurve) ;
         Text: "EFD Coal Rank Indicator" ;
     }
     Parameter EFD_Slice_ID {
         IndexDomain: (Group,Segment) ;
     }
     Parameter EFD_TIER1_LIM {
         IndexDomain: (CoalSupplyCurve_Dom,CoalDemandRegion,Two,MNUMYR) ;
         Text: "EFD Coal Tier 1 Transportation Limits" ;
     }
     Parameter EGFEL {
         IndexDomain: (MNUMYR) ;
         Text: "CCore - Electric Power" ;
     }
     Parameter EHCAP {
         IndexDomain: (RenewPlantGroup,Season,SupplyRegion) ;
         Text: "NON-DSP PLANT GROUP CAPACITY" ;
     }
     Parameter EHTECP {
         IndexDomain: (RenewPlantGroup,SupplyRegion) ;
         Text: "NON-DSP PLT GRP ECP CAP TYPE" ;
     }
     Parameter ELEC_FLAG {
         IndexDomain: (SCALARSet) ;
         Text: "Cap Applies to Elec Only" ;
     }
     Parameter ELGRP {
         IndexDomain: (SliceSorted,Season,SupplyRegion) ;
         Text: "TIME OF DAY/SEASON GROUP INDEX" ;
     }
     Parameter ELNVCT {
         IndexDomain: (Season,SupplyRegion) ;
         Text: "NUMBER OF POINTS IN LOAD CRV" ;
     }
     Parameter ELSEG {
         IndexDomain: (SliceSorted,Season,SupplyRegion) ;
         Text: "TIME OF DAY/SEASON SEG. INDEX" ;
     }
     Parameter ELWDTH {
         IndexDomain: (SliceSorted,Season,SupplyRegion) ;
         Text: "WIDTH OF VERTICAL LOAD SEG" ;
     }
     Parameter EMCMC {
         IndexDomain: (CensusRegion,EmissionType,MNUMYR) ;
         Text: "12 Comm Emissions by Region" ;
     }
     Parameter EMEL {
         IndexDomain: (Four,EmissionType,MNUMYR) ;
         Text: "23 EMM Emissions by Fuel Type" ;
     }
     Parameter EMELBNK {
         IndexDomain: (MNUMYR,SO2Region) ;
         Text: "43 Banked sulfur dioxide allowances" ;
     }
     Parameter EMEL_QHG {
         IndexDomain: (nHGCODE,MNUMYR) ;
         Text: "66 Mercury Caps by Group and Year" ;
     }
     Parameter EMETAX {
         IndexDomain: (Fifteen,MNUMYR) ;
         Text: "37 Excise (Consumption) Tax by Fuel" ;
     }
     Parameter EMINCC {
         IndexDomain: (CensusRegion,EmissionType,MNUMYR) ;
         Text: "14 Ind Emis by Region-Comb" ;
     }
     Parameter EMISSIONS_GOAL {
         IndexDomain: (MNUMYR) ;
         Text: "GOAL BY YEAR" ;
     }
     Parameter EMLIM {
         IndexDomain: (Four,MNUMYR) ;
         Text: "Hg)9 Emission Constraints by (CO2" ;
     }
     Parameter EMNT {
         IndexDomain: (CensusRegion,EmissionType,MNUMYR) ;
         Text: "19 NGTDM Emissions by Region" ;
     }
     Parameter EMRFNA {
         IndexDomain: (INOXP,MNUMYR) ;
         Text: "64 NOX Allowances by Group and Year" ;
     }
     Parameter EMRFSA {
         IndexDomain: (MNUMYR,SO2Region) ;
         Text: "11 Sulfur allowances" ;
     }
     Parameter EMRSC {
         IndexDomain: (CensusRegion,EmissionType,MNUMYR) ;
         Text: "10 Resd Emissions by Region" ;
     }
     Parameter EMTRC {
         IndexDomain: (CensusRegion,EmissionType,MNUMYR) ;
         Text: "17 Trans Emissions by Region" ;
     }
     Parameter ENGEL {
         IndexDomain: (MNUMYR) ;
         Text: "17 Natural Gas - Electric Power" ;
     }
     Parameter EPCAMP {
         IndexDomain: (FuelRegion) ;
         Text: "carbon region associated with a given combined region" ;
     }
     Parameter EPCLMP {
         IndexDomain: (FuelRegion) ;
         Text: "coal region associated with a given combined region" ;
     }
     Parameter EPCSMP {
         IndexDomain: (FuelRegion) ;
         Text: "census region associated with a given combined region" ;
     }
     Parameter EPGSMP {
         IndexDomain: (FuelRegion) ;
         Text: "gas region associated with a given combined region" ;
     }
     Parameter EPNOXPR {
         IndexDomain: (INOXP,MNUMYR) ;
         Text: "ECP NOX Allowance Price" ;
     }
     Parameter EPPOPM {
         IndexDomain: (PlantType) ;
         Text: "planned main switch by EFD plant type" ;
     }
     Parameter EPPOPR {
         IndexDomain: (PlantType) ;
         Text: "operate switch by EFD plant type" ;
     }
     Parameter EPRPSPR {
         IndexDomain: (MNUMYR) ;
         Text: "ECP RPS Credit Price" ;
     }
     Parameter EPRPSPRR {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "ECP RPS Credit Price" ;
     }
     Parameter ERLEL {
         IndexDomain: (MNUMYR) ;
         Text: "LLow Sulfur - Electricity" ;
     }
     Parameter ERSEL {
         IndexDomain: (MNUMYR) ;
         Text: "53 Residual Fuel - Electricity" ;
     }
     Parameter ETAX_FLAG {
         IndexDomain: (SCALARSet) ;
         Text: "ENERGY TAX ONLY" ;
     }
     Parameter ETWDTH {
         IndexDomain: (SliceSorted,Season,SupplyRegion_ALT1) ;
         Text: "WIDTH OF SEASONAL LOAD CURVE" ;
     }
     Parameter EXPCI {
         IndexDomain: (MNUMYR,SupplyRegion) ;
     }
     Parameter FAC {
         IndexDomain: (SliceSorted,Season,SupplyRegion_ALT1) ;
     }
     Parameter FGD_FCTR {
         IndexDomain: (PlantType_ECP,EmissionRank) ;
         Text: "FGD Emission Factor" ;
     }
     Parameter FLRG_HR_EFF {
         IndexDomain: (int_fuel_region_ALT1,PlantType_ECP,Eleven) ;
     }
     Parameter FLRG_HR_KNOTS {
         IndexDomain: (int_fuel_region_ALT1,PlantType_ECP) ;
     }
     Parameter FLRG_HR_LL {
         IndexDomain: (int_fuel_region_ALT1,PlantType_ECP,Eleven) ;
     }
     Parameter FOS_CF_EFD {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
     }
     Parameter FR_OR_TRANCOST {
         IndexDomain: (FuelRegion,OGSMRegionEX,MNUMYR) ;
         Text: "Unit Co2 trsnport costs from each fuel region to each OGSM region" ;
     }
     Parameter HG_CHOICE {
         IndexDomain: (PlantType_ECP) ;
         Text: "33=>Input or Outputr Output Mercury Standard: 0=>None" ;
     }
     Parameter HG_CLASS {
         IndexDomain: (PlantType_ECP) ;
         Text: "33=>New IGCC and Other Coal 0=>NA" ;
     }
     Parameter HG_GRAMS_MWH {
         IndexDomain: (MercuryClass,MNUMYR) ;
         Text: "0 => Not Applicable limits in grams per megawatthour" ;
     }
     Parameter HG_GRP {
         IndexDomain: (CoalDemandRegion) ;
         Text: "44 Identify Mercury Cap and Trade Group by Region" ;
     }
     Parameter HG_INPUT {
         IndexDomain: (MercuryClass,EmissionRank,MNUMYR) ;
         Text: "0 => Not Applicable limits in grams per million btu by coal rank" ;
     }
     Parameter HG_MEF {
         IndexDomain: (MercuryClass,EmissionRank,MNUMYR) ;
         Text: "0 => Not Applicable limits as percent of input mercury (i.e. Maximum MEF)" ;
     }
     Parameter HG_MEFNC {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "89 Required Hg MEF if No CAMR" ;
     }
     Parameter HG_OUTPUT {
         IndexDomain: (MercuryClass,EmissionRank,MNUMYR) ;
         Text: "0 => Not Applicable limits in grams per megawatthour by coal rank" ;
     }
     Parameter HRTCLNR {
         IndexDomain: (CoalDemandRegion,MNUMYR,PlantType_ECP) ;
         Text: "Average Heatrate" ;
     }
     Parameter HY_CF_EFD {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
         Text: "results from 864 Model to set Pondage Hydro Generation" ;
     }
     Parameter IT_WOP {
         IndexDomain: (MNUMYR,Two) ;
         Text: "WORLD OIL PRICE (2--UNITS)" ;
     }
     Parameter JDSEL {
         IndexDomain: (MNUMYR) ;
         Text: "52 Distillate - Electricity (+petroleum coke)" ;
     }
     Parameter JGFELGR {
         IndexDomain: (MNUMYR) ;
         Text: "E UTIL FIRM NG EMISSIONS (87$/MMBTU)" ;
     }
     Parameter JRSEL {
         IndexDomain: (MNUMYR) ;
         Text: "74 Residual Fuel - Electricity" ;
     }
     Parameter KWH_DM_BY_RG {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "KWH DOMESTIC FIRM IMPORTS BY REGION AND YEAR" ;
     }
     Parameter KWH_IM_BY_RG {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "KWH INTERNATIONAL FIRM/ECON IMPORTS BY REGION AND YEAR" ;
     }
     Parameter LINELOSS {
         IndexDomain: (SCALARSet) ;
     }
     Parameter MAP_ECNTP_EFD_GRPS {
         IndexDomain: (DispPlantGroup,SupplyRegion) ;
         Text: "Map ECNTP to EFD Super Group Number" ;
     }
     Parameter MARKET_FLAG {
         IndexDomain: (SCALARSet) ;
         Text: " FULL MARKET FOR PERMITS" ;
     }
     Parameter MIN_EMF {
         IndexDomain: (PlantType_ECP,EmissionRank) ;
         Text: "Minimum Achievable Emission Modification Factor using ACI" ;
     }
     Parameter MP_BM_BT {
         IndexDomain: (BiomassType) ;
         Text: "Map Applicable Supply Types for Biomass to Liquids Sector" ;
     }
     Parameter MP_BM_CM {
         IndexDomain: (BiomassType) ;
         Text: "Map Applicable Supply Types for Commercial Sector" ;
     }
     Parameter MP_BM_ET {
         IndexDomain: (BiomassType) ;
         Text: "Map Applicable Supply Types for Cellulosic Ethanol Sector" ;
     }
     Parameter MP_BM_H2 {
         IndexDomain: (BiomassType) ;
         Text: "Map Applicable Supply Types for Hydrogen Production Sector" ;
     }
     Parameter MP_BM_IN {
         IndexDomain: (BiomassType) ;
         Text: "Map Applicable Supply Types for Non-Refinery Industrial Sector" ;
     }
     Parameter MP_BM_PW {
         IndexDomain: (BiomassType) ;
         Text: "Map Applicable Supply Types for Electric Power Sector" ;
     }
     Parameter MP_BM_RS {
         IndexDomain: (BiomassType) ;
         Text: "Map Applicable Supply Types for Residential Sector" ;
     }
     Parameter MUST_STORE {
         IndexDomain: (FuelRegion,MNUMYR) ;
         Text: "Indicates that captured CO2 must be stored in saline or EOR sites" ;
     }
     Parameter MX_NCOALS {
         IndexDomain: (SCALARSet) ;
     }
     Parameter NET_PT_STORAGE_SR_EFD {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1,MNUMYR) ;
     }
     Parameter NET_STORAGE_LOAD_EFD {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1,MNUMYR) ;
         Text: "storage contribution to load" ;
     }
     Parameter NET_STORAGE_SR_EFD {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1,MNUMYR) ;
         Text: "storage contribution to spinning reserve" ;
     }
     Parameter NM_BM_SUP_STP {
         IndexDomain: (SCALARSet) ;
         Text: "Number of Biomass Supply Steps" ;
     }
     Parameter NO_CCS_PLNT_NDX {
         IndexDomain: (PlantType_ECP) ;
         Text: "For units with carbon capture identify plant index for associated plants without capture" ;
     }
     Parameter NOX_EFD {
         IndexDomain: (Season,INOXP) ;
         Text: "Number Hours per EFD Season in each NOX Control" ;
     }
     Parameter NOX_GRP {
         IndexDomain: (SCALARSet) ;
         Text: "Number of NOX Cap Groups" ;
     }
     Parameter NOX_NEW {
         IndexDomain: (BoilerType,PlantType_ECP) ;
         Text: "NOX Emission Rate" ;
     }
     Parameter NOX_SHR_BY_CLRG {
         IndexDomain: (nHGCODE,INOXP) ;
         Text: "77 Share of NOX Emission in NOX Group by Coal region" ;
     }
     Parameter NUC_CF_EFD {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
     }
     Parameter NUM_ACSS {
         IndexDomain: (SCALARSet) ;
         Text: "Number of Activated Carbon Supply Steps" ;
     }
     Parameter NUM_HG_GRP {
         IndexDomain: (SCALARSet) ;
         Text: "33 Number of Mercury Cap and Trade Groups" ;
     }
     Parameter NUM_SO2_GRP {
         IndexDomain: (SCALARSet) ;
         Text: "102 Number of SO2 Compliance Groups" ;
     }
     Parameter NUTSEC {
         IndexDomain: (SCALARSet) ;
     }
     Parameter NW_COAL {
         IndexDomain: (SCALARSet) ;
         Text: "Last New  Coal Plant Type Index" ;
     }
     Parameter OGCO2AVL {
         IndexDomain: (OGSMRegionEX_ALTTo,Thirteen,MNUMYR) ;
         Text: "CO2 available (mmcf) by bin" ;
     }
     Parameter OGCO2PRC {
         IndexDomain: (OGSMRegionEX_ALTTo,Thirteen,MNUMYR) ;
         Text: "CO2 price ($/mmcf)" ;
     }
     Parameter OGCO2PUR2 {
         IndexDomain: (OGSMRegionEX_ALTTo,Thirteen,MNUMYR) ;
         Text: "CO2 purchased (mmcf) CO2 Purchased at the EOR sites" ;
     }
     Parameter OGCO2TAR {
         IndexDomain: (OGSMRegionEX_ALTTo,OGSMRegionEX) ;
         Text: "Transport price from OGSM ($/mmcf)" ;
     }
     Parameter OGWPRNG {
         IndexDomain: (OGSMReg,MNUMYR) ;
         Text: "NG WELLHEAD PRICE ($87/MCF)" ;
     }
     Parameter PARM_A {
         IndexDomain: (PlantType_ECP,EmissionRank) ;
         Text: "PARAMETER A in ACI Calculation" ;
     }
     Parameter PARM_B {
         IndexDomain: (PlantType_ECP,EmissionRank) ;
         Text: "PARAMETER B in ACI Calculation" ;
     }
     Parameter PARM_C {
         IndexDomain: (PlantType_ECP,EmissionRank) ;
         Text: "PARAMETER C in ACI Calculation" ;
     }
     Parameter PARM_D {
         IndexDomain: (PlantType_ECP,EmissionRank) ;
         Text: "PARAMETER D in ACI Calculation" ;
     }
     Parameter PERMIT_FLAG {
         IndexDomain: (SCALARSet) ;
         Text: "AUCTION FOR PERMITS" ;
     }
     Parameter PLNT_EMF {
         IndexDomain: (PlantType_ECP,EmissionRank) ;
         Text: "Emission Modification Factor by Plant Type and Coal Rank" ;
     }
     Parameter PTHRESH1 {
         IndexDomain: (MNUMYR,SupplyRegionAll,SupplyRegionAll_ALT1) ;
     }
     Parameter PTHRESH2 {
         IndexDomain: (MNUMYR,SupplyRegionAll,SupplyRegionAll_ALT1) ;
     }
     Parameter QBMBTCL {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Demand in Biomass to Liquids Demand" ;
     }
     Parameter QBMCMCL {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Demand in Commercial Sector" ;
     }
     Parameter QBMETCL {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Demand in Cellulosic Ethanol Demand" ;
     }
     Parameter QBMH2CL {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Demand in Hydrogen Production Sector" ;
     }
     Parameter QBMINCL {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Demand in Non-Refinery Industrial Sector" ;
     }
     Parameter QBMRSCL {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Demand in Residential Sector" ;
     }
     Parameter RCLCLNR {
         IndexDomain: (CoalDemandRegion,MNUMYR,PlantType_ECP) ;
         Text: "Combined Percent Removal by ECP Plant Type" ;
     }
     Parameter SCALPR {
         IndexDomain: (SCALARSet) ;
         Text: "YYEARPR $ (EG 1.315)" ;
     }
     Parameter SCR_FCTR {
         IndexDomain: (PlantType_ECP,EmissionRank) ;
         Text: "SCR Emission Factor" ;
     }
     Parameter SO2_SHR_ALW_GRP {
         IndexDomain: (MNUMYR,SO2Region) ;
         Text: "76 Value of Allowances Shared Across SO2 Groups (0 = no sharing)" ;
     }
     Parameter SO2_SHR_BY_CLRG {
         IndexDomain: (nHGCODE,SO2Region) ;
         Text: "74 Share of SO2 Emissions in SO2 Group by Coal Region 1 => East  2 => West" ;
     }
     Parameter SO2_SHR_BY_OLRG {
         IndexDomain: (CensusRegion,SO2Region) ;
         Text: "75 Share of SO2 Emissions in SO2 Group by Coal Region 1 => East  2 => West" ;
     }
     Parameter SPNGELGR {
         IndexDomain: (GasRegion,MNUMYR,Three) ;
     }
     Parameter SR_CREDIT {
         IndexDomain: (PlantType_ECP) ;
         Text: "Percent of excess capacity commited to load that is credited against spinning reserve requirement" ;
     }
     Parameter SR_INT {
         IndexDomain: (PlantType_ECP,SupplyRegion) ;
         Text: "Percent of derated intermitten capacity that must be matched with spinning reserves" ;
     }
     Parameter SR_MAX_LF {
         IndexDomain: (PlantType_ECP) ;
     }
     Parameter SR_MIN_CF {
         IndexDomain: (PlantType_ECP) ;
         Text: "Minimum Capacity Factor Allowed for Determining Split between Generation and Spinning Reserve" ;
     }
     Parameter SR_MIN_LF {
         IndexDomain: (PlantType_ECP) ;
     }
     Parameter SR_RQMT_DIFF {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "Percent of Difference between Seasonal Peak and Load Height Required for Spinning Reserve" ;
     }
     Parameter SR_RQMT_HGHT {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "Percent of Load Height Required for Spinning Reserve" ;
     }
     Parameter SR_TRAN_CREDIT {
         IndexDomain: (SCALARSet) ;
         Text: "Percent of excess transmission capacity that is credited against spinning reserve requirement" ;
     }
     Parameter ST_RNW_BND {
         IndexDomain: (MNUMYR,SupplyRegion) ;
         Text: "RESULTING REGIONAL RPS DEMAND SHARES FROM STATE RPS CONSTRAINTS" ;
     }
     Parameter ST_RNW_SHR {
         IndexDomain: (PlantType_ECP,SupplyRegion,MNUMYR) ;
         Text: "RESULTING REGIONAL RPS CAPACITY SHARES BY ECP TYPE FROM STATE RPS CONSTRAINTS" ;
     }
     Parameter ST_RPS_EMM_P {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "Average marginal value of generation used to satisfy state RPS requirments" ;
     }
     Parameter ST_RPS_SW {
         IndexDomain: (SCALARSet) ;
         Text: "State RPS switch 0=>Off 1=>On" ;
     }
     Parameter TAX_FLAG {
         IndexDomain: (SCALARSet) ;
         Text: "TTAX ONLY" ;
     }
     Parameter TMPMBTU {
         IndexDomain: (MNUMYR) ;
         Text: "Average mercury emissions in tons of hg per million Btu (for stock adjustment)" ;
     }
     Parameter TnS_Costs {
         IndexDomain: (FuelRegion_SUP,MNUMYR) ;
         Text: "Unit Co2 trsnport and storage costs in each fuel region for non-EOR CO2" ;
     }
     Parameter TRANRULE1 {
         IndexDomain: (SCALARSet) ;
         Text: "Year for Phase 1 of EPA Transport Rule" ;
     }
     Parameter TRANRULE2 {
         IndexDomain: (SCALARSet) ;
         Text: "Year for Phase 2 of EPA Transport Rule" ;
     }
     Parameter TSO2_LIM_BY_CLRG {
         IndexDomain: (CoalDemandRegion) ;
         Text: "CSAPR Phase 2 SO2 Limit by Coal Region" ;
     }
     Parameter TSO2_LM1_BY_CLRG {
         IndexDomain: (CoalDemandRegion) ;
         Text: "CSAPR Phase 1 SO2 Limit by Coal Region" ;
     }
     Parameter TSO2_OSH_BY_OLCL {
         IndexDomain: (CensusRegion,CoalDemandRegion,SO2_Transport) ;
         Text: "Oil SO2 shares by Oil/Coal Region" ;
     }
     Parameter TSO2_SHR_BY_CLRG {
         IndexDomain: (CoalDemandRegion,SO2_Transport) ;
         Text: "Coal SO2 Emission Share by Coal and CSAPR Region" ;
     }
     Parameter TSO2_VR1_BY_CLRG {
         IndexDomain: (CoalDemandRegion) ;
         Text: "CSAPR 1 Year Variability Limit by Coal Region" ;
     }
     Parameter TSO2_VR_BY_CLRG {
         IndexDomain: (SCALARSet) ;
         Text: "Type of Variability from Cap" ;
     }
     Parameter TSO2_YR_BY_CLRG {
         IndexDomain: (SCALARSet) ;
         Text: "Initial Year to Impose Coal Region Caps" ;
     }
     Parameter TSPMBTU {
         IndexDomain: (MNUMYR) ;
         Text: "Average SO2 Emissions in tons of SO2 per million Btu" ;
     }
     Parameter UCL_PAC {
         IndexDomain: (numACI) ;
         Text: "Activated Carbon Supply Price" ;
     }
     Parameter UCL_QAC {
         IndexDomain: (numACI) ;
         Text: "Activated Carbon Supply Quantity" ;
     }
     Parameter UESTYR {
         IndexDomain: (SCALARSet) ;
         Text: "INITIAL EXECUTION YEAR FOR EMM (DATA)" ;
     }
     Parameter UFACP2 {
         IndexDomain: (SCALARSet) ;
     }
     Parameter UFACPS {
         IndexDomain: (SCALARSet) ;
     }
     Parameter UFLCLNR {
         IndexDomain: (Two,SupplyRegion,MNUMYR) ;
         Text: "25 COAL CONS BY OWNERSHIP TYPE/NERC" ;
     }
     Parameter UFLDGNR {
         IndexDomain: (Two,SupplyRegion,MNUMYR) ;
         Text: "36 DGen CONS Gas by Ownership Type/NERC" ;
     }
     Parameter UFLGCNR {
         IndexDomain: (Two,SupplyRegion,MNUMYR) ;
         Text: "28 GAS (COMP.) CONS BY OWNERSHIp Type/NERC" ;
     }
     Parameter UFLGFNR {
         IndexDomain: (Two,SupplyRegion,MNUMYR) ;
         Text: "26 GAS (FIRM) CONS BY OWNERSHIP Type/NERC" ;
     }
     Parameter UFLGINR {
         IndexDomain: (Two,SupplyRegion,MNUMYR) ;
         Text: "27 GAS (INT.) CONS BY OWNERSHIP Type/NERC" ;
     }
     Parameter UFRCAR {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "CARBON EMISSION RATE" ;
     }
     Parameter UFRHG {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "Mercury Content by EFD Fuel Type" ;
     }
     Parameter UFRSO2 {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "SO2 EMISSION RATE" ;
     }
     Parameter UGNCLNR {
         IndexDomain: (Two,SupplyRegion,MNUMYR) ;
         Text: "11 Coal Gen by Ownership Type/NERC" ;
     }
     Parameter UGNGCNR {
         IndexDomain: (Two,SupplyRegion,MNUMYR) ;
         Text: "44 Gas (Comp.) Gen by Ownership Type/NERC" ;
     }
     Parameter UGNGFNR {
         IndexDomain: (Two,SupplyRegion,MNUMYR) ;
         Text: "22 Gas (Firm) Gen by Ownership Type/NERC" ;
     }
     Parameter UGNGINR {
         IndexDomain: (Two,SupplyRegion,MNUMYR) ;
         Text: "33 Gas (Int.) Gen by Ownership Type/NERC" ;
     }
     Parameter UG_45Q {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group 45Q Status (0=>No_Tax_Credit 1=>Yes_Tax_Credit" ;
     }
     Parameter UG_ECPt {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group ECP Type" ;
     }
     Parameter UG_EFDt {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group EFD Type" ;
     }
     Parameter UG_EMM_RG {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group EMM Region" ;
     }
     Parameter UG_FL_RG {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group Fuel Region" ;
     }
     Parameter UG_FOR {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group Forced Outage Rate" ;
     }
     Parameter UG_GCF {
         IndexDomain: (Segment,Group,PlantGroupOrd) ;
         Text: "EFD Super Group Time Slice Capacity Factor" ;
     }
     Parameter UG_GSUB {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group Generation Subsisy" ;
     }
     Parameter UG_HTRT {
         IndexDomain: (Season,PlantGroupOrd) ;
         Text: "EFD Super Group Average Heatrate" ;
     }
     Parameter UG_LFR {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group Load Following Rate" ;
     }
     Parameter UGNOCCS {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group Adjustment factor to remove CCS penalty" ;
     }
     Parameter UG_MRUN {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group Must Run Status (0=>No 1=>Yes)" ;
     }
     Parameter UG_NOXC {
         IndexDomain: (Season,INOXP,PlantGroupOrd) ;
         Text: "EFD Super Group NOX Emission Rate" ;
     }
     Parameter UG_OMR {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group Variable O&M Cost" ;
     }
     Parameter UG_PMR {
         IndexDomain: (PlantGroupOrd) ;
         Text: "EFD Super Group Planned Maintenance Rate" ;
     }
     Parameter UG_SCF {
         IndexDomain: (Season,PlantGroupOrd) ;
         Text: "EFD Super Group Seasonal Capacity Factor" ;
     }
     Parameter UHBSYR {
         IndexDomain: (SCALARSet) ;
         Text: "HISTORICAL BASE YEAR FOR EMM" ;
     }
     Parameter UIANC {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: Advanced Nuclear" ;
     }
     Parameter UIBMS {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: Wood/Biomass" ;
     }
     Parameter UICAS {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: New Advanced Coal W/SEQ." ;
     }
     Parameter UICNU {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: Conventional Nuclear" ;
     }
     Parameter UIDGB {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: Distributed Generation-Base" ;
     }
     Parameter UIDGP {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: Distributed Generation-Peak" ;
     }
     Parameter UIDIS {
         IndexDomain: (FuelType) ;
         Text: "index to indicate if fuel type is distillate" ;
     }
     Parameter UIDS {
         IndexDomain: (SCALARSet) ;
         Text: "Index: Distillate Fuel Oil" ;
     }
     Parameter UIFCG {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: Fuel Cell" ;
     }
     Parameter UIGAS {
         IndexDomain: (FuelType) ;
         Text: "index to indicate if fuel type is gas" ;
     }
     Parameter UIGC {
         IndexDomain: (SCALARSet) ;
         Text: "Index: Natural Gas Competitive" ;
     }
     Parameter UIGF {
         IndexDomain: (SCALARSet) ;
         Text: "Index: Natural Gas Firm" ;
     }
     Parameter UIHYC {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: Conventional Hydroelectric" ;
     }
     Parameter UIHYR {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: Reversible Hydroelectric" ;
     }
     Parameter UIRES {
         IndexDomain: (FuelType) ;
         Text: "index to indicate if fuel type is resid" ;
     }
     Parameter UIRH {
         IndexDomain: (SCALARSet) ;
         Text: "Index: Residual Fuel Oil High Sulfur" ;
     }
     Parameter UIRL {
         IndexDomain: (SCALARSet) ;
         Text: "Index: Residual Fuel Oil Low Sulfur" ;
     }
     Parameter UISMR {
         IndexDomain: (SCALARSet) ;
         Text: "EFD Type Index: SMR Advanced Nuclear" ;
     }
     Parameter UIWD {
         IndexDomain: (SCALARSet) ;
         Text: "Index: Biomass (Wood) Energy" ;
     }
     Parameter USW_GRD {
         IndexDomain: (SCALARSet) ;
         Text: "SWITCH TO TURN ON GRID RESILIENCY TARGETS" ;
     }
     Parameter UPRNWBAS {
         IndexDomain: (PlantType_ECP) ;
         Text: "FRACTION OF EXISTING GENERATION EXCLUDED FROM BASELINE GEN, IF ANY" ;
     }
     Parameter ULHTRT_EFD {
         IndexDomain: (PlantGroup,Season) ;
         Text: "Average EFD Seasonal Heatrate (Normalized) by Plant Group" ;
     }
     Parameter ULVINT {
         IndexDomain: (PlantGroup) ;
         Text: "33 = New)ned = Existing" ;
     }
     Parameter UPAVLYR {
         IndexDomain: (PlantType_ECP) ;
         Text: "Calendar Yr Of 1st Comm Operation" ;
     }
     Parameter UPCRVSIZ {
         IndexDomain: (SCALARSet) ;
         Text: "SIZE (FRAC) OF NG SUP CRV STEPS" ;
     }
     Parameter UPCRVSTP {
         IndexDomain: (SCALARSet) ;
         Text: "NUMBER OF SUP STEPS ABV/BLW MIDPOINT" ;
     }
     Parameter UPEFDT {
         IndexDomain: (PlantType_ECP) ;
         Text: "EFD PLANT TYPE" ;
     }
     Parameter UPNCAR {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "CARBON PENALTY COST - DISPATCHING" ;
     }
     Parameter UPPCEF {
         IndexDomain: (PlantType_ECP) ;
         Text: "Carbon Sequestration Efficiency" ;
     }
     Parameter UPPCEF_MIN {
         IndexDomain: (PlantType_ECP) ;
         Text: "Minimum Carbon Sequestration Efficiency" ;
     }
     Parameter UPPCFB {
         IndexDomain: (DispatchableECP,Two) ;
         Text: "Minimum/Maximum Capacity Factor" ;
     }
     Parameter UPRNWBND {
         IndexDomain: (MNUMYR) ;
         Text: "LOWER BOUND OF GEN BY RNW PLTS" ;
     }
     Parameter UPRNWBNDR {
         IndexDomain: (MNUMYR,SupplyRegion) ;
         Text: "REGIONAL LOWER BOUND OF GEN BY RNW PLTS" ;
     }
     Parameter UPRNWEXG {
         IndexDomain: (PlantType_ECP) ;
         Text: "IIF ANYION OF EXISTING GENERATION EXCLUDED FROM RPS" ;
     }
     Parameter UPRNWEXGR {
         IndexDomain: (PlantType_ECP,SupplyRegion) ;
         Text: "IIF ANYION OF EXISTING GENERATION EXCLUDED FROM RPS" ;
     }
     Parameter UPRNWREG {
         IndexDomain: (SCALARSet) ;
         Text: "RPS CASE - IDENTIFIES NATIONAL/REGIONAL/BOTH" ;
     }
     Parameter UPRNWSHR {
         IndexDomain: (PlantType_ECP) ;
         Text: "SHR OF GEN INCL. IN RNW BND ROW" ;
     }
     Parameter UPRNWSHRR {
         IndexDomain: (PlantType_ECP,SupplyRegion) ;
         Text: "REGIONAL SHR OF GEN INCL. IN RNW BND ROW" ;
     }
     Parameter UPSTYR {
         IndexDomain: (SCALARSet) ;
         Text: "INITIAL EXECUTION YEAR FOR ECP" ;
     }
     Parameter UPTTYP {
         IndexDomain: (PlantType_ECP) ;
         Text: "PLANT TYPE" ;
     }
     Parameter UPTXRT {
         IndexDomain: (SCALARSet) ;
         Text: "NET TAX RATE" ;
     }
     Parameter UPWDCFR {
         IndexDomain: (DispatchableECP,CoalDemandRegion) ;
         Text: "ECP Determined Cofire Share by Coal Demand Region" ;
     }
     Parameter UP_GCF {
         IndexDomain: (Segment,Group,PlantGroup) ;
         Text: "Plant Group Time Slice Capacity Factor" ;
     }
     Parameter UP_SCF {
         IndexDomain: (Season,PlantGroup) ;
         Text: "Plant Group Seasonal Capacity Factor" ;
     }
     Parameter URGTCFA {
         IndexDomain: (MNUMYR) ;
         Text: "ADJUSTMENT FACTOR FOR GEOTH CAPACITY FACTORS - STEO" ;
     }
     Parameter URHYCFA {
         IndexDomain: (MNUMYR) ;
         Text: "ADJUSTMENT FACTOR FOR HYDRO CAPACITY FACTORS - STEO" ;
     }
     Parameter URNCCFA {
         IndexDomain: (MNUMYR) ;
         Text: "ADJUSTMENT FACTOR FOR NUCLEAR CAPACITY FACTORS - STEO" ;
     }
     Parameter URSOCFA {
         IndexDomain: (MNUMYR) ;
         Text: "ADJUSTMENT FACTOR FOR SOLAR TH CAPACITY FACTORS - STEO" ;
     }
     Parameter URWNCFA {
         IndexDomain: (MNUMYR) ;
         Text: "ADJUSTMENT FACTOR FOR WIND CAPACITY FACTORS - STEO" ;
     }
     Parameter URNCSTEX_EFD {
         IndexDomain: (Season,SupplyRegion) ;
         Text: "EXPORT CAPABILITY" ;
     }
     Parameter URNCSTIM_EFD {
         IndexDomain: (Season,SupplyRegion) ;
         Text: "IMPORT CAPABILITY" ;
     }
     Parameter USW_CAMR {
         IndexDomain: (SCALARSet) ;
         Text: "11 = No CAMR)o turn off CAMR (0 = CAMR" ;
     }
     Parameter USW_CAR {
         IndexDomain: (SCALARSet) ;
         Text: "3=ECP/EFD)TCH TO IMPOSE EMM CARBON CONSTRAINT(0=No" ;
     }
     Parameter USW_ECPCF {
         IndexDomain: (SCALARSet) ;
         Text: "1=Yes) SWITCH TO USE ECP COFIRING SHARES (0=No" ;
     }
     Parameter USW_HG {
         IndexDomain: (SCALARSet) ;
         Text: "Mercury Switch 0=> No Limit ; 1=> Mercury Emission Limit" ;
     }
     Parameter UTHGHT {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
     }
     Parameter UTWDTH {
         IndexDomain: (Segment,Group) ;
     }
     Parameter UYR_CAR {
         IndexDomain: (SCALARSet) ;
         Text: "YEAR TO IMPOSE EMM CARBON CONSTRAINT(0=None)" ;
     }
     Parameter UYR_HIST {
         IndexDomain: (SCALARSet) ;
     }
     Parameter UYR_NOCAIR {
         IndexDomain: (SCALARSet) ;
         Text: "Year to turn off CAIR (0 = None, or CAIR left in)" ;
     }
     Parameter UYR_STEO {
         IndexDomain: (SCALARSet) ;
     }
     Parameter WDSUP_AVL {
         IndexDomain: (BiomassType) ;
     }
     Parameter WDSUP_P {
         IndexDomain: (BiomassProductionStep,CoalDemandRegion,MNUMYR,BiomassType) ;
         Text: "Biomass Supply Prices - All Sources" ;
     }
     Parameter WDSUP_Q {
         IndexDomain: (BiomassProductionStep,CoalDemandRegion,MNUMYR,BiomassType) ;
         Text: "Biomass Supply Quantities - All Sources" ;
     }
     Parameter WFLTP {
         IndexDomain: (PlantType,FuelsPerPlant) ;
         Text: "EFD Fuel Types for new unplanned capacity" ;
     }
     Parameter WFOR {
         IndexDomain: (PlantType) ;
         Text: "FORCED OUTAGE RATE" ;
     }
     Parameter WIA2 {
         IndexDomain: (SCALARSet) ;
         Text: "Index for New Advanced Comb Cycle" ;
     }
     Parameter WIAN {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Advanced Nuclear" ;
     }
     Parameter WIAT {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Advanced Turbine" ;
     }
     Parameter WICN {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Conventional Nuclear" ;
     }
     Parameter WICS {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Advanced Combined cycle W/Seq." ;
     }
     Parameter WICT {
         IndexDomain: (SCALARSet) ;
         Text: "Index for New Conventional Turbine" ;
     }
     Parameter WIDB {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Distributed Generation-Base" ;
     }
     Parameter WIDP {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Distributed Generation-Peak" ;
     }
     Parameter WIET {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Existing Conventional Turbine" ;
     }
     Parameter WIGT {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Geothermal" ;
     }
     Parameter WIHY {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Conventional Hydroelectric" ;
     }
     Parameter WIIG {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Integrated Gas Combined Cycle" ;
     }
     Parameter WIIS {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Integrated Gas Combined Cycle W/Seq." ;
     }
     Parameter WIMS {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Municipal Solid Waste" ;
     }
     Parameter WIP2 {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Other Storage" ;
     }
     Parameter WIPC {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Pulverised Coal" ;
     }
     Parameter WIPQ {
         IndexDomain: (SCALARSet) ;
         Text: "Index for IGCC w/Partial Sequestration" ;
     }
     Parameter WIPV {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Solar Photovoltaic" ;
     }
     Parameter WISM {
         IndexDomain: (SCALARSet) ;
         Text: "Index for SMR Nuclear" ;
     }
     Parameter WIST {
         IndexDomain: (SCALARSet) ;
         Text: "Index for oil and gas STeam" ;
     }
     Parameter WIWD {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Biomass (Wood)" ;
     }
     Parameter WISO {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Solar Thermal" ;
     }
     Parameter WIPT {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Photovoltaic w/axis tracking" ;
     }
     Parameter WIWN {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Wind" ;
     }
     Parameter WIWL {
         IndexDomain: (SCALARSet) ;
         Text: "Index for Wind Low Speed" ;
     }
     Parameter WLOWER {
         IndexDomain: (PlantType) ;
         Text: "CAPACITY FAC LOWER BOUND" ;
     }
     Parameter WUPPER {
         IndexDomain: (PlantType) ;
         Text: "CAPACITY FAC UPPER BOUND" ;
     }
     Parameter XCL_CAR_YR {
         IndexDomain: (CoalSupplyCurve,MNUMYR) ;
         Text: "Carbon Content by Supply Curve" ;
     }
     Parameter XCL_HG_YR {
         IndexDomain: (CoalSupplyCurve,MNUMYR) ;
         Text: "Mercury Content by Supply Curve" ;
     }
     Parameter XCL_OTHER {
         IndexDomain: (CoalSupplyCurve,MNUMYR) ;
         Text: "Expected Coal Supply Demand for Non-Utility Coal" ;
     }
     Parameter XCL_PCAP {
         IndexDomain: (CoalSupplyCurve_Dom,MNUMYR) ;
         Text: "Current Year Coal Supply Production Capacity" ;
     }
     Parameter XCL_PIMP {
         IndexDomain: (CoalSupplyCurve_Int,Ten,MNUMYR) ;
         Text: "Coal import prices for supply curve step combos (thermal only)" ;
     }
     Parameter XCL_QIMP {
         IndexDomain: (CoalSupplyCurve_Int,Ten,MNUMYR) ;
         Text: "Coal import quantities for supply curve and step combos (thermal only)" ;
     }
     Parameter XCL_SO2_YR {
         IndexDomain: (CoalSupplyCurve,MNUMYR) ;
         Text: "SO2 Content by Supply Curve" ;
     }
     Parameter XCL_STEPS {
         IndexDomain: (Eleven) ;
         Text: "Expected Coal Supply Step Def. - Lower to Upper Must Have 0 Step (ie ... -.01  0 .01 ...)" ;
     }
     Parameter XCL_STOCK {
         IndexDomain: (MNUMYR) ;
         Text: "Expected Coal Stock Changes" ;
     }
     Parameter XCL_TESCI {
         IndexDomain: (Four,MNUMYR,CoalDemandRegion) ;
         Text: " Coal Transportation Escalation Factors for Inland Imports" ;
     }
     Parameter XCL_TR_IN {
         IndexDomain: (Four,CoalSupplyCurve_Int,CoalDemandRegion,MNUMYR) ;
         Text: " Coal imports inland transportation rate" ;
     }
     Parameter XCL_TRATI2 {
         IndexDomain: (CoalSupplyCurve_Int,CoalDemandRegion) ;
         Text: "Coal Imports Freight Rate" ;
     }
     Parameter XCL_TR_T1 {
         IndexDomain: (CoalSupplyCurve_Dom,CoalDemandRegion,MNUMYR) ;
         Text: "Expected Coal First Tier Base Transportation Rates" ;
     }
     Parameter XCL_TR_T2 {
         IndexDomain: (CoalSupplyCurve_Dom,CoalDemandRegion,MNUMYR) ;
         Text: "Expected Coal Second Tier Base Transportation Rates" ;
     }
     Parameter XCL_TRNINDX {
         IndexDomain: (UtilitySector,CoalSupplyCurve_Dom,CoalDemandRegion) ;
         Text: "Index identifying whether the coal transp rate is feasible" ;
     }
     Parameter XCL_TYPE {
         IndexDomain: (CoalSupplyCurve) ;
         Text: "ECP Coal Type by Coal Supply Curve" ;
     }
     Parameter ZTEXPF {
         IndexDomain: (SupplyRegion_ALT1) ;
     }
     Parameter ZTIMPF {
         IndexDomain: (SupplyRegion_ALT1) ;
     }
     Parameter GRD_TGTS {
         IndexDomain: (MNUMYR,SupplyRegion) ;
         Text: "Grid resilience target" ;
     }
     Parameter GRD_RATSA {
         IndexDomain: (PlantType_ECP,SupplyRegion,GridResilienceSource) ;
         Text: "Grid resilience ratings for all sources" ;
     }
     Parameter GRD_CASN {
         IndexDomain: (SCALARSet) ;
         Text: "Number of grid resilience sources" ;
     }
     Parameter BMIMPTOL {
         IndexDomain: (SCALARSet) ;
         Text: "STEO BENCHMARKING TOLERANCE -- OL" ;
     }
     Parameter NGSCRV_ELAS {
         IndexDomain: (Five) ;
         Text: "NG supply curve slope (q change / p change)" ;
     }
     Parameter NGSCRV_P0 {
         IndexDomain: (MNUMYR) ;
         Text: "NG supply curve base price" ;
     }
     Parameter NGSCRV_PER {
         IndexDomain: (Two) ;
         Text: "NG supply curve segment percent deviation" ;
     }
     Parameter NGSCRV_Q {
         IndexDomain: (MNUMYR) ;
         Text: "NG supply curve solution quantity" ;
     }
     Parameter NGSCRV_Q0 {
         IndexDomain: (MNUMYR) ;
         Text: "NG supply curve base quantity" ;
     }
     Parameter XCL_1TESC0 {
         IndexDomain: (CoalSupplyCurve_Dom,MNUMYR,CoalDemandRegion) ;
         Text: "Expected Coal Transportation Escalation Factors, 0 Planning Horizon" ;
     }
     Parameter XCL_2TESC0 {
         IndexDomain: (CoalSupplyCurve_Dom,MNUMYR,CoalDemandRegion) ;
         Text: "Expected Coal Transportation Escalation Factors, 0 Planning Horizon" ;
     }
     Parameter XCL_PECP0 {
         IndexDomain: (CoalSupplyCurve_Dom,Eleven,MNUMYR) ;
         Text: "Expected Coal Supply Prices by Supply Step - Lower to Upper, 0 Planning Horizon" ;
     }
     Parameter XCL_QECP0 {
         IndexDomain: (CoalSupplyCurve_Dom,MNUMYR) ;
         Text: "Expected Coal Supply Quantities, 0 Planning Horizon" ;
     }
     Parameter CAN_CST {
         IndexDomain: (ImportStep,CanadianSupplyRegion,MNUMYR) ;
     }
     Parameter UG_CAP {
         IndexDomain: (Season_SUP,PlantGroupOrd) ;
         Text: "EFD Super Group Capacity (from UG_CAP(0,:)" ;
     }
     Parameter UP_CAP {
         IndexDomain: (Season_SUP,PlantGroup) ;
         Text: "Plant Group Capacity from (UP_CAP(0,:)" ;
     }
     Parameter UPGNPD {
         IndexDomain: (SCALARSet) ;
         Text: "GNP DEFLATOR" ;
     }
   }
   DeclarationSection TransferVariable_Output {
     Parameter AB32UTIL {
         IndexDomain: (SCALARSet) ;
         Text: "Utility Covered Emissions" ;
     }
     Parameter AB32UTIL_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Utility Covered Emissions" ;
     }
     Parameter AB32BAVL {
         IndexDomain: (SCALARSet) ;
         Text: "Banked Allowances Available" ;
     }
     Parameter AB32BAVL_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Banked Allowances Available" ;
     }
     Parameter AB32BUSE {
         IndexDomain: (SCALARSet) ;
         Text: "Banked Allowances Used" ;
     }
     Parameter AB32BUSE_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Banked Allowances Used" ;
     }
     Parameter AB32BBNK {
         IndexDomain: (SCALARSet) ;
         Text: "Banked Allowances Added" ;
     }
     Parameter AB32BBNK_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Banked Allowances Added" ;
     }
     Parameter AB32OAVL {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Available" ;
     }
     Parameter AB32OAVL_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Available" ;
     }
     Parameter AB32OUSE {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Used" ;
     }
     Parameter AB32OUSE_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Used" ;
     }
     Parameter AB32RAVL {
         IndexDomain: (SCALARSet) ;
         Text: "Reserves Available" ;
     }
     Parameter AB32RAVL_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Reserves Available" ;
     }
     Parameter AB32RUSE {
         IndexDomain: (SCALARSet) ;
         Text: "Reserves Used" ;
     }
     Parameter AB32RUSE_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Reserves Used" ;
     }
     Parameter AB32RBNK {
         IndexDomain: (SCALARSet) ;
         Text: "Reserves Banked" ;
     }
     Parameter AB32RBNK_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Reserves Banked" ;
     }
     Parameter AB32ESCP {
         IndexDomain: (SCALARSet) ;
         Text: "Escape Vector Value (Shortage)" ;
     }
     Parameter AB32ESCP_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Escape Vector Value (Shortage)" ;
     }
     Parameter ACICST {
         IndexDomain: (MNUMYR) ;
     }
     Parameter ACICST_pass {
         IndexDomain: (MNUMYR) ;
     }
     Parameter ACIOAM {
         IndexDomain: (MNUMYR) ;
     }
     Parameter ACIOAM_pass {
         IndexDomain: (MNUMYR) ;
     }
     Parameter CAREFD {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "Carbon Emissions by Grp -- EFD" ;
     }
     Parameter CAREFD_pass {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "Carbon Emissions by Grp -- EFD" ;
     }
     Parameter CARTGT {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "Carbon Emissions Limits by Grp" ;
     }
     Parameter CARTGT_pass {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "Carbon Emissions Limits by Grp" ;
     }
     Parameter CHKGEN {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
     }
     Parameter CHKGEN_pass {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
     }
     Parameter CHK_D {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
     }
     Parameter CHK_D_pass {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
     }
     Parameter CTLHGEM {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "ttonsMercury emissions from CTL" ;
     }
     Parameter CTLHGEM_pass {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "ttonsMercury emissions from CTL" ;
     }
     Parameter CTLNOXEM {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "tthousand tonsions from CTL" ;
     }
     Parameter CTLNOXEM_pass {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "tthousand tonsions from CTL" ;
     }
     Parameter CTLSO2EM {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "tthousand tonsions from CTL" ;
     }
     Parameter CTLSO2EM_pass {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "tthousand tonsions from CTL" ;
     }
     Parameter ECCOPM {
         IndexDomain: (DispPlantGroup,Season,SupplyRegion) ;
         Text: "DSP CAP NET OF PLANNED MNT." ;
     }
     Parameter ECCOPM_pass {
         IndexDomain: (DispPlantGroup,Season,SupplyRegion) ;
         Text: "DSP CAP NET OF PLANNED MNT." ;
     }
     Parameter ECDSPC {
         IndexDomain: (PlantGroup,Season) ;
         Text: "CAP IN EACH SEASON" ;
     }
     Parameter ECDSPC_pass {
         IndexDomain: (PlantGroup,Season) ;
         Text: "CAP IN EACH SEASON" ;
     }
     Parameter ECDSPE {
         IndexDomain: (PlantGroup,Season) ;
         Text: "ENERGY IN EACH SEASON" ;
     }
     Parameter ECDSPE_pass {
         IndexDomain: (PlantGroup,Season) ;
         Text: "ENERGY IN EACH SEASON" ;
     }
     Parameter ECDSPE_ALT {
         IndexDomain: (PlantGroup,Season) ;
         Text: "ENERGY IN EACH SEASON w/o capture" ;
     }
     Parameter ECDSPE_ALT_pass {
         IndexDomain: (PlantGroup,Season) ;
         Text: "ENERGY IN EACH SEASON w/o capture" ;
     }
     Parameter ECDSPF {
         IndexDomain: (PlantGroup,Season) ;
         Text: "FUEL CONSUMPTION IN EACH SEASON" ;
     }
     Parameter ECDSPF_pass {
         IndexDomain: (PlantGroup,Season) ;
         Text: "FUEL CONSUMPTION IN EACH SEASON" ;
     }
     Parameter ECDSPF_ALT {
         IndexDomain: (PlantGroup,Season) ;
         Text: "FUEL CONSUMPTION IN EACH SEASON w/o capture" ;
     }
     Parameter ECDSPF_ALT_pass {
         IndexDomain: (PlantGroup,Season) ;
         Text: "FUEL CONSUMPTION IN EACH SEASON w/o capture" ;
     }
     Parameter EFD_LCAR {
         IndexDomain: (MNUMYR) ;
         Text: "84 ECP Carbon emissions limit for electricity" ;
     }
     Parameter EFD_LCAR_pass {
         IndexDomain: (MNUMYR) ;
         Text: "84 ECP Carbon emissions limit for electricity" ;
     }
     Parameter EFD_PCAR {
         IndexDomain: (MNUMYR) ;
         Text: "86 ECP Carbon emission allowance price" ;
     }
     Parameter EFD_PCAR_pass {
         IndexDomain: (MNUMYR) ;
         Text: "86 ECP Carbon emission allowance price" ;
     }
     Parameter EFD_QCAR {
         IndexDomain: (MNUMYR) ;
         Text: "85 ECP Carbon emissions for electricity" ;
     }
     Parameter EFD_QCAR_pass {
         IndexDomain: (MNUMYR) ;
         Text: "85 ECP Carbon emissions for electricity" ;
     }
     Parameter ELGENE {
         IndexDomain: (SliceSorted,Season,PlantGroup) ;
         Text: "Generation by Plant Group and Time Slice" ;
     }
     Parameter ELGENE_pass {
         IndexDomain: (SliceSorted,Season,PlantGroup) ;
         Text: "Generation by Plant Group and Time Slice" ;
     }
     Parameter EMMBMDUAL {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "Dual on BIOMASS row in EMM (Max willingness to pay)" ;
     }
     Parameter EMMBMDUAL_pass {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "Dual on BIOMASS row in EMM (Max willingness to pay)" ;
     }
     Parameter ETDIMERG {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "REGIONAL INTERNATIONAL ECONOMY SALES (MWH)" ;
     }
     Parameter ETDIMERG_pass {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "REGIONAL INTERNATIONAL ECONOMY SALES (MWH)" ;
     }
     Parameter ETDMDERG {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "REGIONAL DOMESTIC ECONOMY SALES (MM$)" ;
     }
     Parameter ETDMDERG_pass {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "REGIONAL DOMESTIC ECONOMY SALES (MM$)" ;
     }
     Parameter ETDMMERG {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "REGIONAL DOMESTIC ECONOMY SALES (MWH)" ;
     }
     Parameter ETDMMERG_pass {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "REGIONAL DOMESTIC ECONOMY SALES (MWH)" ;
     }
     Parameter FLRG_VAL_45Q {
         IndexDomain: (FuelRegion,MNUMYR) ;
     }
     Parameter FLRG_VAL_45Q_pass {
         IndexDomain: (FuelRegion,MNUMYR) ;
     }
     Parameter FLRG_VALUE {
         IndexDomain: (FuelRegion,MNUMYR) ;
     }
     Parameter FLRG_VALUE_pass {
         IndexDomain: (FuelRegion,MNUMYR) ;
     }
     Parameter NET_XPORT_EFD {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
     }
     Parameter NET_XPORT_EFD_pass {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
     }
     Parameter NMARCST {
         IndexDomain: (SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR) ;
         Text: "after trade marginal cost" ;
     }
     Parameter NMARCST_pass {
         IndexDomain: (SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR) ;
         Text: "after trade marginal cost" ;
     }
     Parameter OGCO2QEM {
         IndexDomain: (OGSMRegionEX_ALTTo,MNUMYR) ;
         Text: "CO2 quantity from EMM(mmcf)" ;
     }
     Parameter OGCO2QEM_pass {
         IndexDomain: (OGSMRegionEX_ALTTo,MNUMYR) ;
         Text: "CO2 quantity from EMM(mmcf)" ;
     }
     Parameter PBMPWCL {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Price to Electric Power Sector" ;
     }
     Parameter PBMPWCL_pass {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Price to Electric Power Sector" ;
     }
     Parameter QBMPWCL {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Demand in Electric Power Sector" ;
     }
     Parameter QBMPWCL_pass {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Demand in Electric Power Sector" ;
     }
     Parameter RGGIUTIL {
         IndexDomain: (SCALARSet) ;
         Text: "Utility Covered Emissions" ;
     }
     Parameter RGGIUTIL_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Utility Covered Emissions" ;
     }
     Parameter RGGIOAVL {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Available" ;
     }
     Parameter RGGIOAVL_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Available" ;
     }
     Parameter RGGIOUSE {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Used" ;
     }
     Parameter RGGIOUSE_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Used" ;
     }
     Parameter RGGIRAVL {
         IndexDomain: (SCALARSet) ;
         Text: "Cost Containment Reserves Available" ;
     }
     Parameter RGGIRAVL_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Cost Containment Reserves Available" ;
     }
     Parameter RGGIRUSE {
         IndexDomain: (SCALARSet) ;
         Text: "Cost Containment Used" ;
     }
     Parameter RGGIRUSE_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Cost Containment Used" ;
     }
     Parameter RGGIEAVL {
         IndexDomain: (SCALARSet) ;
         Text: "Emissions Containment Reserves Available" ;
     }
     Parameter RGGIEAVL_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Emissions Containment Reserves Available" ;
     }
     Parameter RGGIEUSE {
         IndexDomain: (SCALARSet) ;
         Text: "Emissions Containment Reserves Used" ;
     }
     Parameter RGGIEUSE_pass {
         IndexDomain: (SCALARSet) ;
         Text: "Emissions Containment Reserves Used" ;
     }
     Parameter SP_ACHBYECP {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1,PlantType_ECP) ;
         Text: "Summary spinning reserves achieved from solution by plant type" ;
     }
     Parameter SP_ACHBYECP_pass {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1,PlantType_ECP) ;
         Text: "Summary spinning reserves achieved from solution by plant type" ;
     }
     Parameter SP_RES_ACH {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Spinning reserves achieved from solution by slice" ;
     }
     Parameter SP_RES_ACH_pass {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Spinning reserves achieved from solution by slice" ;
     }
     Parameter SP_RES_DUAL {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Price on spinning reserves constraint" ;
     }
     Parameter SP_RES_DUAL_pass {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Price on spinning reserves constraint" ;
     }
     Parameter SP_RES_REQ {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Base requirement for spinning reserves from soluntion" ;
     }
     Parameter SP_RES_REQ_pass {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Base requirement for spinning reserves from soluntion" ;
     }
     Parameter SRPOOL {
         IndexDomain: (MNUMYR,SupplyRegion) ;
         Text: "Total dollars to recover in pricing for meeting spinning reserve constraint" ;
     }
     Parameter SRPOOL_pass {
         IndexDomain: (MNUMYR,SupplyRegion) ;
         Text: "Total dollars to recover in pricing for meeting spinning reserve constraint" ;
     }
     Parameter SR_INT_REQ {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Intermittent requirement for spinning reserves from soluntion" ;
     }
     Parameter SR_INT_REQ_pass {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Intermittent requirement for spinning reserves from soluntion" ;
     }
     Parameter UCARPRC {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "11 Car Allowance Price -- Regional" ;
     }
     Parameter UCARPRC_pass {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "11 Car Allowance Price -- Regional" ;
     }
     Parameter ULBMCST {
         IndexDomain: (SCALARSet) ;
         Text: "cost associated with STEO benchmarking constraints for marginal price adder" ;
     }
     Parameter ULBMCST_pass {
         IndexDomain: (SCALARSet) ;
         Text: "cost associated with STEO benchmarking constraints for marginal price adder" ;
     }
     Parameter ULMRCST {
         IndexDomain: (SupplyRegion_ALT1) ;
     }
     Parameter ULMRCST_pass {
         IndexDomain: (SupplyRegion_ALT1) ;
     }
     Parameter ULTGEN {
         IndexDomain: (PlantGroup) ;
         Text: "Generation by Plant Group" ;
     }
     Parameter ULTGEN_pass {
         IndexDomain: (PlantGroup) ;
         Text: "Generation by Plant Group" ;
     }
     Parameter UPFUEL {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "DELIVERED FUEL PRICES" ;
     }
     Parameter UPFUEL_pass {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "DELIVERED FUEL PRICES" ;
     }
     Parameter UTCNSTSL {
         IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "transmission constraint by season & slice" ;
     }
     Parameter UTCNSTSL_pass {
         IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "transmission constraint by season & slice" ;
     }
     Parameter UTCO2QEM {
         IndexDomain: (OGSMRegionEX_ALTTo,MNUMYR) ;
         Text: "CO2 quantity from EMM(mmcf)" ;
     }
     Parameter UTCO2QEM_pass {
         IndexDomain: (OGSMRegionEX_ALTTo,MNUMYR) ;
         Text: "CO2 quantity from EMM(mmcf)" ;
     }
     Parameter UTECON {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "detailed economy trade" ;
     }
     Parameter UTECON_pass {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "detailed economy trade" ;
     }
     Parameter UTECONSL {
         IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "detailed economy trade by season & slice" ;
     }
     Parameter UTECONSL_pass {
         IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "detailed economy trade by season & slice" ;
     }
     Parameter UTEXDE {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "112 Gross Dom. Economy Sales--Nerc (MM$)" ;
     }
     Parameter UTEXDE_pass {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "112 Gross Dom. Economy Sales--Nerc (MM$)" ;
     }
     Parameter UTEXME {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "110 Gross Dom. Economy Sales-Nerc (Mkwh)" ;
     }
     Parameter UTEXME_pass {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "110 Gross Dom. Economy Sales-Nerc (Mkwh)" ;
     }
     Parameter UTHTP2 {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
     }
     Parameter UTHTP2_pass {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
     }
     Parameter UTHTS2 {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
     }
     Parameter UTHTS2_pass {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
     }
     Parameter UTSALES {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "detailed trade sales $" ;
     }
     Parameter UTSALES_pass {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "detailed trade sales $" ;
     }
     Parameter UFRSO2Q {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "SO2 EMISSIONS Quantity" ;
     }
     Parameter UFRSO2Q_pass {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "SO2 EMISSIONS Quantity" ;
     }
     Parameter UFRSO2R {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "SO2 EMISSION RATE Revised" ;
     }
     Parameter UFRSO2R_pass {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "SO2 EMISSION RATE Revised" ;
     }
     Parameter FGSSH_ams {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final gas  share by plt type and fuel region" ;
     }
     Parameter FGSSH_ams_pass {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final gas  share by plt type and fuel region" ;
     }
     Parameter FCLSH_ams {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final coal share by plt type and fuel region" ;
     }
     Parameter FCLSH_ams_pass {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final coal share by plt type and fuel region" ;
     }
     Parameter FOLSH_ams {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final oil  share by plt type and fuel region" ;
     }
     Parameter FOLSH_ams_pass {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final oil  share by plt type and fuel region" ;
     }
     Parameter FWDSH_ams {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final biomass share by plt type and fuel region" ;
     }
     Parameter FWDSH_ams_pass {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final biomass share by plt type and fuel region" ;
     }
     Parameter CO2_CCS {
         IndexDomain: (FuelRegion_SUP,OGSMRegion_SUP,Two0,MNUMYR) ;
     }
     Parameter CO2_CCS_pass {
         IndexDomain: (FuelRegion_SUP,OGSMRegion_SUP,Two0,MNUMYR) ;
     }
   }
   DeclarationSection TransferVariable_Output_Check {
     Parameter Delta_diff;
     Parameter AB32UTIL_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Utility Covered Emissions" ;
         Definition: { 
         if AB32UTIL_calc(SCALARSet) <> inf
            and AB32UTIL_pass(SCALARSet) <> inf then
           abs(AB32UTIL_calc(SCALARSet) - AB32UTIL_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter AB32BAVL_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Banked Allowances Available" ;
         Definition: { 
         if AB32BAVL_calc(SCALARSet) <> inf
            and AB32BAVL_pass(SCALARSet) <> inf then
           abs(AB32BAVL_calc(SCALARSet) - AB32BAVL_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter AB32BUSE_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Banked Allowances Used" ;
         Definition: { 
         if AB32BUSE_calc(SCALARSet) <> inf
            and AB32BUSE_pass(SCALARSet) <> inf then
           abs(AB32BUSE_calc(SCALARSet) - AB32BUSE_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter AB32BBNK_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Banked Allowances Added" ;
         Definition: { 
         if AB32BBNK_calc(SCALARSet) <> inf
            and AB32BBNK_pass(SCALARSet) <> inf then
           abs(AB32BBNK_calc(SCALARSet) - AB32BBNK_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter AB32OAVL_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Available" ;
         Definition: { 
         if AB32OAVL_calc(SCALARSet) <> inf
            and AB32OAVL_pass(SCALARSet) <> inf then
           abs(AB32OAVL_calc(SCALARSet) - AB32OAVL_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter AB32OUSE_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Used" ;
         Definition: { 
         if AB32OUSE_calc(SCALARSet) <> inf
            and AB32OUSE_pass(SCALARSet) <> inf then
           abs(AB32OUSE_calc(SCALARSet) - AB32OUSE_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter AB32RAVL_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Reserves Available" ;
         Definition: { 
         if AB32RAVL_calc(SCALARSet) <> inf
            and AB32RAVL_pass(SCALARSet) <> inf then
           abs(AB32RAVL_calc(SCALARSet) - AB32RAVL_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter AB32RUSE_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Reserves Used" ;
         Definition: { 
         if AB32RUSE_calc(SCALARSet) <> inf
            and AB32RUSE_pass(SCALARSet) <> inf then
           abs(AB32RUSE_calc(SCALARSet) - AB32RUSE_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter AB32RBNK_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Reserves Banked" ;
         Definition: { 
         if AB32RBNK_calc(SCALARSet) <> inf
            and AB32RBNK_pass(SCALARSet) <> inf then
           abs(AB32RBNK_calc(SCALARSet) - AB32RBNK_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter AB32ESCP_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Escape Vector Value (Shortage)" ;
         Definition: { 
         if AB32ESCP_calc(SCALARSet) <> inf
            and AB32ESCP_pass(SCALARSet) <> inf then
           abs(AB32ESCP_calc(SCALARSet) - AB32ESCP_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ACICST_diff {
         IndexDomain: (MNUMYR) ;
         Definition: { 
         if ACICST_calc(MNUMYR) <> inf
            and ACICST_pass(MNUMYR) <> inf then
           abs(ACICST_calc(MNUMYR) - ACICST_pass(MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ACIOAM_diff {
         IndexDomain: (MNUMYR) ;
         Definition: { 
         if ACIOAM_calc(MNUMYR) <> inf
            and ACIOAM_pass(MNUMYR) <> inf then
           abs(ACIOAM_calc(MNUMYR) - ACIOAM_pass(MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter CAREFD_diff {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "Carbon Emissions by Grp -- EFD" ;
         Definition: { 
         if CAREFD_calc(CO2CapGroup,MNUMYR) <> inf
            and CAREFD_pass(CO2CapGroup,MNUMYR) <> inf then
           abs(CAREFD_calc(CO2CapGroup,MNUMYR) - CAREFD_pass(CO2CapGroup,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter CARTGT_diff {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "Carbon Emissions Limits by Grp" ;
         Definition: { 
         if CARTGT_calc(CO2CapGroup,MNUMYR) <> inf
            and CARTGT_pass(CO2CapGroup,MNUMYR) <> inf then
           abs(CARTGT_calc(CO2CapGroup,MNUMYR) - CARTGT_pass(CO2CapGroup,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter CHKGEN_diff {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Definition: { 
         if CHKGEN_calc(SupplyRegionAll_ALT1,SupplyRegionAll) <> inf
            and CHKGEN_pass(SupplyRegionAll_ALT1,SupplyRegionAll) <> inf then
           abs(CHKGEN_calc(SupplyRegionAll_ALT1,SupplyRegionAll) - CHKGEN_pass(SupplyRegionAll_ALT1,SupplyRegionAll)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter CHK_D_diff {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Definition: { 
         if CHK_D_calc(SupplyRegionAll_ALT1,SupplyRegionAll) <> inf
            and CHK_D_pass(SupplyRegionAll_ALT1,SupplyRegionAll) <> inf then
           abs(CHK_D_calc(SupplyRegionAll_ALT1,SupplyRegionAll) - CHK_D_pass(SupplyRegionAll_ALT1,SupplyRegionAll)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter CTLHGEM_diff {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "ttonsMercury emissions from CTL" ;
         Definition: { 
         if CTLHGEM_calc(CoalDemandRegion,MNUMYR) <> inf
            and CTLHGEM_pass(CoalDemandRegion,MNUMYR) <> inf then
           abs(CTLHGEM_calc(CoalDemandRegion,MNUMYR) - CTLHGEM_pass(CoalDemandRegion,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter CTLNOXEM_diff {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "tthousand tonsions from CTL" ;
         Definition: { 
         if CTLNOXEM_calc(CoalDemandRegion,MNUMYR) <> inf
            and CTLNOXEM_pass(CoalDemandRegion,MNUMYR) <> inf then
           abs(CTLNOXEM_calc(CoalDemandRegion,MNUMYR) - CTLNOXEM_pass(CoalDemandRegion,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter CTLSO2EM_diff {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "tthousand tonsions from CTL" ;
         Definition: { 
         if CTLSO2EM_calc(CoalDemandRegion,MNUMYR) <> inf
            and CTLSO2EM_pass(CoalDemandRegion,MNUMYR) <> inf then
           abs(CTLSO2EM_calc(CoalDemandRegion,MNUMYR) - CTLSO2EM_pass(CoalDemandRegion,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ECCOPM_diff {
         IndexDomain: (DispPlantGroup,Season,SupplyRegion) ;
         Text: "DSP CAP NET OF PLANNED MNT." ;
         Definition: { 
         if ECCOPM_calc(DispPlantGroup,Season,SupplyRegion) <> inf
            and ECCOPM_pass(DispPlantGroup,Season,SupplyRegion) <> inf then
           abs(ECCOPM_calc(DispPlantGroup,Season,SupplyRegion) - ECCOPM_pass(DispPlantGroup,Season,SupplyRegion)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ECDSPC_diff {
         IndexDomain: (PlantGroup,Season) ;
         Text: "CAP IN EACH SEASON" ;
         Definition: { 
         if ECDSPC_calc(PlantGroup,Season) <> inf
            and ECDSPC_pass(PlantGroup,Season) <> inf then
           abs(ECDSPC_calc(PlantGroup,Season) - ECDSPC_pass(PlantGroup,Season)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ECDSPE_diff {
         IndexDomain: (PlantGroup,Season) ;
         Text: "ENERGY IN EACH SEASON" ;
         Definition: { 
         if ECDSPE_calc(PlantGroup,Season) <> inf
            and ECDSPE_pass(PlantGroup,Season) <> inf then
           abs(ECDSPE_calc(PlantGroup,Season) - ECDSPE_pass(PlantGroup,Season)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ECDSPE_ALT_diff {
         IndexDomain: (PlantGroup,Season) ;
         Text: "ENERGY IN EACH SEASON w/o capture" ;
         Definition: { 
         if ECDSPE_ALT_calc(PlantGroup,Season) <> inf
            and ECDSPE_ALT_pass(PlantGroup,Season) <> inf then
           abs(ECDSPE_ALT_calc(PlantGroup,Season) - ECDSPE_ALT_pass(PlantGroup,Season)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ECDSPF_diff {
         IndexDomain: (PlantGroup,Season) ;
         Text: "FUEL CONSUMPTION IN EACH SEASON" ;
         Definition: { 
         if ECDSPF_calc(PlantGroup,Season) <> inf
            and ECDSPF_pass(PlantGroup,Season) <> inf then
           abs(ECDSPF_calc(PlantGroup,Season) - ECDSPF_pass(PlantGroup,Season)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ECDSPF_ALT_diff {
         IndexDomain: (PlantGroup,Season) ;
         Text: "FUEL CONSUMPTION IN EACH SEASON w/o capture" ;
         Definition: { 
         if ECDSPF_ALT_calc(PlantGroup,Season) <> inf
            and ECDSPF_ALT_pass(PlantGroup,Season) <> inf then
           abs(ECDSPF_ALT_calc(PlantGroup,Season) - ECDSPF_ALT_pass(PlantGroup,Season)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter EFD_LCAR_diff {
         IndexDomain: (MNUMYR) ;
         Text: "84 ECP Carbon emissions limit for electricity" ;
         Definition: { 
         if EFD_LCAR_calc(MNUMYR) <> inf
            and EFD_LCAR_pass(MNUMYR) <> inf then
           abs(EFD_LCAR_calc(MNUMYR) - EFD_LCAR_pass(MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter EFD_PCAR_diff {
         IndexDomain: (MNUMYR) ;
         Text: "86 ECP Carbon emission allowance price" ;
         Definition: { 
         if EFD_PCAR_calc(MNUMYR) <> inf
            and EFD_PCAR_pass(MNUMYR) <> inf then
           abs(EFD_PCAR_calc(MNUMYR) - EFD_PCAR_pass(MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter EFD_QCAR_diff {
         IndexDomain: (MNUMYR) ;
         Text: "85 ECP Carbon emissions for electricity" ;
         Definition: { 
         if EFD_QCAR_calc(MNUMYR) <> inf
            and EFD_QCAR_pass(MNUMYR) <> inf then
           abs(EFD_QCAR_calc(MNUMYR) - EFD_QCAR_pass(MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ELGENE_diff {
         IndexDomain: (SliceSorted,Season,PlantGroup) ;
         Text: "Generation by Plant Group and Time Slice" ;
         Definition: { 
         if ELGENE_calc(SliceSorted,Season,PlantGroup) <> inf
            and ELGENE_pass(SliceSorted,Season,PlantGroup) <> inf then
           abs(ELGENE_calc(SliceSorted,Season,PlantGroup) - ELGENE_pass(SliceSorted,Season,PlantGroup)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter EMMBMDUAL_diff {
         IndexDomain: (CoalDemandRegion,MNUMYR) ;
         Text: "Dual on BIOMASS row in EMM (Max willingness to pay)" ;
         Definition: { 
         if EMMBMDUAL_calc(CoalDemandRegion,MNUMYR) <> inf
            and EMMBMDUAL_pass(CoalDemandRegion,MNUMYR) <> inf then
           abs(EMMBMDUAL_calc(CoalDemandRegion,MNUMYR) - EMMBMDUAL_pass(CoalDemandRegion,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ETDIMERG_diff {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "REGIONAL INTERNATIONAL ECONOMY SALES (MWH)" ;
         Definition: { 
         if ETDIMERG_calc(SupplyRegion_ALT1) <> inf
            and ETDIMERG_pass(SupplyRegion_ALT1) <> inf then
           abs(ETDIMERG_calc(SupplyRegion_ALT1) - ETDIMERG_pass(SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ETDMDERG_diff {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "REGIONAL DOMESTIC ECONOMY SALES (MM$)" ;
         Definition: { 
         if ETDMDERG_calc(SupplyRegion_ALT1) <> inf
            and ETDMDERG_pass(SupplyRegion_ALT1) <> inf then
           abs(ETDMDERG_calc(SupplyRegion_ALT1) - ETDMDERG_pass(SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ETDMMERG_diff {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "REGIONAL DOMESTIC ECONOMY SALES (MWH)" ;
         Definition: { 
         if ETDMMERG_calc(SupplyRegion_ALT1) <> inf
            and ETDMMERG_pass(SupplyRegion_ALT1) <> inf then
           abs(ETDMMERG_calc(SupplyRegion_ALT1) - ETDMMERG_pass(SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter FLRG_VAL_45Q_diff {
         IndexDomain: (FuelRegion,MNUMYR) ;
         Definition: { 
         if FLRG_VAL_45Q_calc(FuelRegion,MNUMYR) <> inf
            and FLRG_VAL_45Q_pass(FuelRegion,MNUMYR) <> inf then
           abs(FLRG_VAL_45Q_calc(FuelRegion,MNUMYR) - FLRG_VAL_45Q_pass(FuelRegion,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter FLRG_VALUE_diff {
         IndexDomain: (FuelRegion,MNUMYR) ;
         Definition: { 
         if FLRG_VALUE_calc(FuelRegion,MNUMYR) <> inf
            and FLRG_VALUE_pass(FuelRegion,MNUMYR) <> inf then
           abs(FLRG_VALUE_calc(FuelRegion,MNUMYR) - FLRG_VALUE_pass(FuelRegion,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter NET_XPORT_EFD_diff {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
         Definition: { 
         if NET_XPORT_EFD_calc(Segment,Group,SupplyRegion_ALT1) <> inf
            and NET_XPORT_EFD_pass(Segment,Group,SupplyRegion_ALT1) <> inf then
           abs(NET_XPORT_EFD_calc(Segment,Group,SupplyRegion_ALT1) - NET_XPORT_EFD_pass(Segment,Group,SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter NMARCST_diff {
         IndexDomain: (SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR) ;
         Text: "after trade marginal cost" ;
         Definition: { 
         if NMARCST_calc(SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR) <> inf
            and NMARCST_pass(SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR) <> inf then
           abs(NMARCST_calc(SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR) - NMARCST_pass(SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter OGCO2QEM_diff {
         IndexDomain: (OGSMRegionEX_ALTTo,MNUMYR) ;
         Text: "CO2 quantity from EMM(mmcf)" ;
         Definition: { 
         if OGCO2QEM_calc(OGSMRegionEX_ALTTo,MNUMYR) <> inf
            and OGCO2QEM_pass(OGSMRegionEX_ALTTo,MNUMYR) <> inf then
           abs(OGCO2QEM_calc(OGSMRegionEX_ALTTo,MNUMYR) - OGCO2QEM_pass(OGSMRegionEX_ALTTo,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter PBMPWCL_diff {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Price to Electric Power Sector" ;
         Definition: { 
         if PBMPWCL_calc(BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) <> inf
            and PBMPWCL_pass(BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) <> inf then
           abs(PBMPWCL_calc(BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) - PBMPWCL_pass(BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter QBMPWCL_diff {
         IndexDomain: (BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) ;
         Text: "Biomass Demand in Electric Power Sector" ;
         Definition: { 
         if QBMPWCL_calc(BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) <> inf
            and QBMPWCL_pass(BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) <> inf then
           abs(QBMPWCL_calc(BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR) - QBMPWCL_pass(BiomassType_SUP,CoalDemandRegion_SUP,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter RGGIUTIL_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Utility Covered Emissions" ;
         Definition: { 
         if RGGIUTIL_calc(SCALARSet) <> inf
            and RGGIUTIL_pass(SCALARSet) <> inf then
           abs(RGGIUTIL_calc(SCALARSet) - RGGIUTIL_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter RGGIOAVL_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Available" ;
         Definition: { 
         if RGGIOAVL_calc(SCALARSet) <> inf
            and RGGIOAVL_pass(SCALARSet) <> inf then
           abs(RGGIOAVL_calc(SCALARSet) - RGGIOAVL_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter RGGIOUSE_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Offsets Used" ;
         Definition: { 
         if RGGIOUSE_calc(SCALARSet) <> inf
            and RGGIOUSE_pass(SCALARSet) <> inf then
           abs(RGGIOUSE_calc(SCALARSet) - RGGIOUSE_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter RGGIRAVL_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Cost Containment Reserves Available" ;
         Definition: { 
         if RGGIRAVL_calc(SCALARSet) <> inf
            and RGGIRAVL_pass(SCALARSet) <> inf then
           abs(RGGIRAVL_calc(SCALARSet) - RGGIRAVL_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter RGGIRUSE_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Cost Containment Used" ;
         Definition: { 
         if RGGIRUSE_calc(SCALARSet) <> inf
            and RGGIRUSE_pass(SCALARSet) <> inf then
           abs(RGGIRUSE_calc(SCALARSet) - RGGIRUSE_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter RGGIEAVL_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Emissions Containment Reserves Available" ;
         Definition: { 
         if RGGIEAVL_calc(SCALARSet) <> inf
            and RGGIEAVL_pass(SCALARSet) <> inf then
           abs(RGGIEAVL_calc(SCALARSet) - RGGIEAVL_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter RGGIEUSE_diff {
         IndexDomain: (SCALARSet) ;
         Text: "Emissions Containment Reserves Used" ;
         Definition: { 
         if RGGIEUSE_calc(SCALARSet) <> inf
            and RGGIEUSE_pass(SCALARSet) <> inf then
           abs(RGGIEUSE_calc(SCALARSet) - RGGIEUSE_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter SP_ACHBYECP_diff {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1,PlantType_ECP) ;
         Text: "Summary spinning reserves achieved from solution by plant type" ;
         Definition: { 
         if SP_ACHBYECP_calc(Group,SliceSorted,SupplyRegion_ALT1,PlantType_ECP) <> inf
            and SP_ACHBYECP_pass(Group,SliceSorted,SupplyRegion_ALT1,PlantType_ECP) <> inf then
           abs(SP_ACHBYECP_calc(Group,SliceSorted,SupplyRegion_ALT1,PlantType_ECP) - SP_ACHBYECP_pass(Group,SliceSorted,SupplyRegion_ALT1,PlantType_ECP)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter SP_RES_ACH_diff {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Spinning reserves achieved from solution by slice" ;
         Definition: { 
         if SP_RES_ACH_calc(Group,SliceSorted,SupplyRegion_ALT1) <> inf
            and SP_RES_ACH_pass(Group,SliceSorted,SupplyRegion_ALT1) <> inf then
           abs(SP_RES_ACH_calc(Group,SliceSorted,SupplyRegion_ALT1) - SP_RES_ACH_pass(Group,SliceSorted,SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter SP_RES_DUAL_diff {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Price on spinning reserves constraint" ;
         Definition: { 
         if SP_RES_DUAL_calc(Group,SliceSorted,SupplyRegion_ALT1) <> inf
            and SP_RES_DUAL_pass(Group,SliceSorted,SupplyRegion_ALT1) <> inf then
           abs(SP_RES_DUAL_calc(Group,SliceSorted,SupplyRegion_ALT1) - SP_RES_DUAL_pass(Group,SliceSorted,SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter SP_RES_REQ_diff {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Base requirement for spinning reserves from soluntion" ;
         Definition: { 
         if SP_RES_REQ_calc(Group,SliceSorted,SupplyRegion_ALT1) <> inf
            and SP_RES_REQ_pass(Group,SliceSorted,SupplyRegion_ALT1) <> inf then
           abs(SP_RES_REQ_calc(Group,SliceSorted,SupplyRegion_ALT1) - SP_RES_REQ_pass(Group,SliceSorted,SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter SRPOOL_diff {
         IndexDomain: (MNUMYR,SupplyRegion) ;
         Text: "Total dollars to recover in pricing for meeting spinning reserve constraint" ;
         Definition: { 
         if SRPOOL_calc(MNUMYR,SupplyRegion) <> inf
            and SRPOOL_pass(MNUMYR,SupplyRegion) <> inf then
           abs(SRPOOL_calc(MNUMYR,SupplyRegion) - SRPOOL_pass(MNUMYR,SupplyRegion)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter SR_INT_REQ_diff {
         IndexDomain: (Group,SliceSorted,SupplyRegion_ALT1) ;
         Text: "Intermittent requirement for spinning reserves from soluntion" ;
         Definition: { 
         if SR_INT_REQ_calc(Group,SliceSorted,SupplyRegion_ALT1) <> inf
            and SR_INT_REQ_pass(Group,SliceSorted,SupplyRegion_ALT1) <> inf then
           abs(SR_INT_REQ_calc(Group,SliceSorted,SupplyRegion_ALT1) - SR_INT_REQ_pass(Group,SliceSorted,SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UCARPRC_diff {
         IndexDomain: (CO2CapGroup,MNUMYR) ;
         Text: "11 Car Allowance Price -- Regional" ;
         Definition: { 
         if UCARPRC_calc(CO2CapGroup,MNUMYR) <> inf
            and UCARPRC_pass(CO2CapGroup,MNUMYR) <> inf then
           abs(UCARPRC_calc(CO2CapGroup,MNUMYR) - UCARPRC_pass(CO2CapGroup,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ULBMCST_diff {
         IndexDomain: (SCALARSet) ;
         Text: "cost associated with STEO benchmarking constraints for marginal price adder" ;
         Definition: { 
         if ULBMCST_calc(SCALARSet) <> inf
            and ULBMCST_pass(SCALARSet) <> inf then
           abs(ULBMCST_calc(SCALARSet) - ULBMCST_pass(SCALARSet)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ULMRCST_diff {
         IndexDomain: (SupplyRegion_ALT1) ;
         Definition: { 
         if ULMRCST_calc(SupplyRegion_ALT1) <> inf
            and ULMRCST_pass(SupplyRegion_ALT1) <> inf then
           abs(ULMRCST_calc(SupplyRegion_ALT1) - ULMRCST_pass(SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter ULTGEN_diff {
         IndexDomain: (PlantGroup) ;
         Text: "Generation by Plant Group" ;
         Definition: { 
         if ULTGEN_calc(PlantGroup) <> inf
            and ULTGEN_pass(PlantGroup) <> inf then
           abs(ULTGEN_calc(PlantGroup) - ULTGEN_pass(PlantGroup)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UPFUEL_diff {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "DELIVERED FUEL PRICES" ;
         Definition: { 
         if UPFUEL_calc(FuelType,int_fuel_region) <> inf
            and UPFUEL_pass(FuelType,int_fuel_region) <> inf then
           abs(UPFUEL_calc(FuelType,int_fuel_region) - UPFUEL_pass(FuelType,int_fuel_region)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UTCNSTSL_diff {
         IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "transmission constraint by season & slice" ;
         Definition: { 
         if UTCNSTSL_calc(Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) <> inf
            and UTCNSTSL_pass(Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) <> inf then
           abs(UTCNSTSL_calc(Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) - UTCNSTSL_pass(Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UTCO2QEM_diff {
         IndexDomain: (OGSMRegionEX_ALTTo,MNUMYR) ;
         Text: "CO2 quantity from EMM(mmcf)" ;
         Definition: { 
         if UTCO2QEM_calc(OGSMRegionEX_ALTTo,MNUMYR) <> inf
            and UTCO2QEM_pass(OGSMRegionEX_ALTTo,MNUMYR) <> inf then
           abs(UTCO2QEM_calc(OGSMRegionEX_ALTTo,MNUMYR) - UTCO2QEM_pass(OGSMRegionEX_ALTTo,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UTECON_diff {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "detailed economy trade" ;
         Definition: { 
         if UTECON_calc(SupplyRegionAll_ALT1,SupplyRegionAll) <> inf
            and UTECON_pass(SupplyRegionAll_ALT1,SupplyRegionAll) <> inf then
           abs(UTECON_calc(SupplyRegionAll_ALT1,SupplyRegionAll) - UTECON_pass(SupplyRegionAll_ALT1,SupplyRegionAll)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UTECONSL_diff {
         IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "detailed economy trade by season & slice" ;
         Definition: { 
         if UTECONSL_calc(Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) <> inf
            and UTECONSL_pass(Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) <> inf then
           abs(UTECONSL_calc(Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll) - UTECONSL_pass(Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UTEXDE_diff {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "112 Gross Dom. Economy Sales--Nerc (MM$)" ;
         Definition: { 
         if UTEXDE_calc(SupplyRegion_ALT1,MNUMYR) <> inf
            and UTEXDE_pass(SupplyRegion_ALT1,MNUMYR) <> inf then
           abs(UTEXDE_calc(SupplyRegion_ALT1,MNUMYR) - UTEXDE_pass(SupplyRegion_ALT1,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UTEXME_diff {
         IndexDomain: (SupplyRegion_ALT1,MNUMYR) ;
         Text: "110 Gross Dom. Economy Sales-Nerc (Mkwh)" ;
         Definition: { 
         if UTEXME_calc(SupplyRegion_ALT1,MNUMYR) <> inf
            and UTEXME_pass(SupplyRegion_ALT1,MNUMYR) <> inf then
           abs(UTEXME_calc(SupplyRegion_ALT1,MNUMYR) - UTEXME_pass(SupplyRegion_ALT1,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UTHTP2_diff {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
         Definition: { 
         if UTHTP2_calc(Segment,Group,SupplyRegion_ALT1) <> inf
            and UTHTP2_pass(Segment,Group,SupplyRegion_ALT1) <> inf then
           abs(UTHTP2_calc(Segment,Group,SupplyRegion_ALT1) - UTHTP2_pass(Segment,Group,SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UTHTS2_diff {
         IndexDomain: (Segment,Group,SupplyRegion_ALT1) ;
         Definition: { 
         if UTHTS2_calc(Segment,Group,SupplyRegion_ALT1) <> inf
            and UTHTS2_pass(Segment,Group,SupplyRegion_ALT1) <> inf then
           abs(UTHTS2_calc(Segment,Group,SupplyRegion_ALT1) - UTHTS2_pass(Segment,Group,SupplyRegion_ALT1)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UTSALES_diff {
         IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll) ;
         Text: "detailed trade sales $" ;
         Definition: { 
         if UTSALES_calc(SupplyRegionAll_ALT1,SupplyRegionAll) <> inf
            and UTSALES_pass(SupplyRegionAll_ALT1,SupplyRegionAll) <> inf then
           abs(UTSALES_calc(SupplyRegionAll_ALT1,SupplyRegionAll) - UTSALES_pass(SupplyRegionAll_ALT1,SupplyRegionAll)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UFRSO2Q_diff {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "SO2 EMISSIONS Quantity" ;
         Definition: { 
         if UFRSO2Q_calc(FuelType,int_fuel_region) <> inf
            and UFRSO2Q_pass(FuelType,int_fuel_region) <> inf then
           abs(UFRSO2Q_calc(FuelType,int_fuel_region) - UFRSO2Q_pass(FuelType,int_fuel_region)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter UFRSO2R_diff {
         IndexDomain: (FuelType,int_fuel_region) ;
         Text: "SO2 EMISSION RATE Revised" ;
         Definition: { 
         if UFRSO2R_calc(FuelType,int_fuel_region) <> inf
            and UFRSO2R_pass(FuelType,int_fuel_region) <> inf then
           abs(UFRSO2R_calc(FuelType,int_fuel_region) - UFRSO2R_pass(FuelType,int_fuel_region)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter FGSSH_ams_diff {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final gas  share by plt type and fuel region" ;
         Definition: { 
         if FGSSH_ams_calc(PlantType,FuelRegion) <> inf
            and FGSSH_ams_pass(PlantType,FuelRegion) <> inf then
           abs(FGSSH_ams_calc(PlantType,FuelRegion) - FGSSH_ams_pass(PlantType,FuelRegion)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter FCLSH_ams_diff {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final coal share by plt type and fuel region" ;
         Definition: { 
         if FCLSH_ams_calc(PlantType,FuelRegion) <> inf
            and FCLSH_ams_pass(PlantType,FuelRegion) <> inf then
           abs(FCLSH_ams_calc(PlantType,FuelRegion) - FCLSH_ams_pass(PlantType,FuelRegion)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter FOLSH_ams_diff {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final oil  share by plt type and fuel region" ;
         Definition: { 
         if FOLSH_ams_calc(PlantType,FuelRegion) <> inf
            and FOLSH_ams_pass(PlantType,FuelRegion) <> inf then
           abs(FOLSH_ams_calc(PlantType,FuelRegion) - FOLSH_ams_pass(PlantType,FuelRegion)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter FWDSH_ams_diff {
         IndexDomain: (PlantType,FuelRegion) ;
         Text: "final biomass share by plt type and fuel region" ;
         Definition: { 
         if FWDSH_ams_calc(PlantType,FuelRegion) <> inf
            and FWDSH_ams_pass(PlantType,FuelRegion) <> inf then
           abs(FWDSH_ams_calc(PlantType,FuelRegion) - FWDSH_ams_pass(PlantType,FuelRegion)) > Delta_diff
         else
             0
         endif
                     }
      }
     Parameter CO2_CCS_diff {
         IndexDomain: (FuelRegion_SUP,OGSMRegion_SUP,Two0,MNUMYR) ;
         Definition: { 
         if CO2_CCS_calc(FuelRegion_SUP,OGSMRegion_SUP,Two0,MNUMYR) <> inf
            and CO2_CCS_pass(FuelRegion_SUP,OGSMRegion_SUP,Two0,MNUMYR) <> inf then
           abs(CO2_CCS_calc(FuelRegion_SUP,OGSMRegion_SUP,Two0,MNUMYR) - CO2_CCS_pass(FuelRegion_SUP,OGSMRegion_SUP,Two0,MNUMYR)) > Delta_diff
         else
             0
         endif
                     }
      }
   }
   Section ccalc_parameter_declare {
     DeclarationSection ED_BENCH {
     }
     DeclarationSection ED_BIO {
     }
     DeclarationSection ED_BTU {
     }
     DeclarationSection ED_CAR {
     }
     DeclarationSection ED_CCAP {
     }
     DeclarationSection ED_CL_IMPORTS {
     }
     DeclarationSection ED_COL {
     }
     DeclarationSection ED_GAS {
     }
     DeclarationSection ED_GRD {
     }
     DeclarationSection ED_LOAD {
     }
     DeclarationSection ED_OIL {
     }
     DeclarationSection ED_OP {
     }
     DeclarationSection ED_PM {
     }
     DeclarationSection ED_RNW {
     }
     DeclarationSection ED_TRADE {
     }
     DeclarationSection EPA_TRANRG_EFD {
     }
     DeclarationSection OPBSLD {
     }
     DeclarationSection OPDG {
     }
     DeclarationSection OPHYD {
     }
     DeclarationSection OPRNBS {
     }
     DeclarationSection OPINT {
     }
     DeclarationSection OPSTR {
     }
     DeclarationSection REVEFD {
     }
     DeclarationSection OtherParams {
     }
   }
   DeclarationSection cpass_parameter_declare {
       Parameter cpass_cACISPLY_EFDCOSTS {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cACISPLY_rACICSTle {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
       }
       Parameter cpass_cACISPLY_UBOUND {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cB_EFDCOSTS {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cB_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cB_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
       }
       Parameter cpass_cB_rCARBONle {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cB_rCARBONn {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cB_rCARBONXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
       }
       Parameter cpass_cB_rCARBONXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
       }
       Parameter cpass_cB_rCARSEQXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQXX";
       }
       Parameter cpass_cB_rCFGn {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
       }
       Parameter cpass_cB_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
       }
       Parameter cpass_cB_rDSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
       }
       Parameter cpass_cB_rNGle {
           IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
       }
       Parameter cpass_cB_rRSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
       }
       Parameter cpass_cB_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
       }
       Parameter cpass_cBCTLN_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: LBOUND";
       }
       Parameter cpass_cBCTLN_rELNOX0n {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cBCTLN_rELNOXOTle {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)OT";
       }
       Parameter cpass_cBCTLN_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cBiomassOtherUsage_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: LBOUND";
       }
       Parameter cpass_cBiomassOtherUsage_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
       }
       Parameter cpass_cBiomassOtherUsage_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cBP_type_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cBP_type_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
       }
       Parameter cpass_cBP_type_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
       }
       Parameter cpass_cBP_type_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cC_Z_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cC_Z_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
       }
       Parameter cpass_cCARBNK_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cCARBNK_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARBNK_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARBNK_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARBONOT_LBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: LBOUND";
       }
       Parameter cpass_cCARBONOT_rCARBONXXle {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
       }
       Parameter cpass_cCARBONOT_rCARBONXXn {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
       }
       Parameter cpass_cCARBONOT_UBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARDM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cCARDM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCARDM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCARDM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARECR_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cCARECR_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCARECR_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARESC_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cCARESC_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARESC_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARESC_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCARESCXX_EFDCOSTS {
           Text: "OML Columns: CARESCXX and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cCARESCXX_rCARBONXXle {
           Text: "OML Columns: CARESCXX and OML Rows: CARBONXX";
       }
       Parameter cpass_cCARESCXX_UBOUND {
           Text: "OML Columns: CARESCXX and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARFUE_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cCARFUE_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARFUE_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARFUE_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARIM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cCARIM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCARIM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCARIM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARIND_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cCARIND_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARIND_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARIND_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARLIM_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cCARLIM_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARLIM_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCARLIM_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCAROFF_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cCAROFF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCAROFF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCAROFF_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCAROFF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCAROTH_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cCAROTH_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCAROTH_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCAROTH_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARREF_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cCARREF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARREF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARREF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARRSV_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cCARRSV_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARRSV_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARRSV_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCARRSV_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCARUTL_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARUTL_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
       }
       Parameter cpass_cCARUTL_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCARUTL_rCARBONn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCNIMPBUS_LBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: LBOUND";
       }
       Parameter cpass_cCNIMPBUS_rCANIMPUSeq {
           Text: "OML Columns: CNIMPBUS and OML Rows: CANIMPUS";
       }
       Parameter cpass_cCNIMPBUS_UBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCoalOtherUsage_LBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: LBOUND";
       }
       Parameter cpass_cCoalOtherUsage_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
       }
       Parameter cpass_cCoalOtherUsage_UBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCONCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cCONCLB_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
       }
       Parameter cpass_cCONCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCONNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cCONNGB_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
       }
       Parameter cpass_cCONNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCP_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cCP_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
       }
       Parameter cpass_cCP_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCT_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cCT_rACICSTle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
       }
       Parameter cpass_cCT_rACIOMCSTn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
       }
       Parameter cpass_cCT_rACIRMVXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
       }
       Parameter cpass_cCT_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
       }
       Parameter cpass_cCT_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
       }
       Parameter cpass_cCT_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
       }
       Parameter cpass_cCT_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
       }
       Parameter cpass_cCT_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
       }
       Parameter cpass_cCT_rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
       }
       Parameter cpass_cCT_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
       }
       Parameter cpass_cCT_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
       }
       Parameter cpass_cCT_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
       }
       Parameter cpass_cCT_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
       }
       Parameter cpass_cCT_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
       }
       Parameter cpass_cCT_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCTLCO_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: LBOUND";
       }
       Parameter cpass_cCTLCO_rCARBONle {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCTLCO_rCARBONn {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
       }
       Parameter cpass_cCTLCO_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
       }
       Parameter cpass_cCTLCO_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
       }
       Parameter cpass_cCTLCO_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCTLHG_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: LBOUND";
       }
       Parameter cpass_cCTLHG_rMERCURYle {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cCTLHG_rMERCURYn {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cCTLHG_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCTLS_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: LBOUND";
       }
       Parameter cpass_cCTLS_rSULFURle {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
       }
       Parameter cpass_cCTLS_rSULFURn {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
       }
       Parameter cpass_cCTLS_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cCTLSO2_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: LBOUND";
       }
       Parameter cpass_cCTLSO2_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
       }
       Parameter cpass_cCTLSO2_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
       }
       Parameter cpass_cCTLSO2_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cD_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cD_LBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LBOUND";
       }
       Parameter cpass_cD_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cD_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cD_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cD_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
       }
       Parameter cpass_cD_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
       }
       Parameter cpass_cD_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cD_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cD_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
       }
       Parameter cpass_cD_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cD_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cDPUS_EFDCOSTS {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cDPUS_rS_DSUSle {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
       }
       Parameter cpass_cDPVCP_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cDPVCP_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cDPVCP_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cDPVCP_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cDTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cDTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
       }
       Parameter cpass_cDTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
       }
       Parameter cpass_cDTUS_rDSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
       }
       Parameter cpass_cDTUS_rMERC_DSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
       }
       Parameter cpass_cDTUS_rS_DSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
       }
       Parameter cpass_cDX_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cDX_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
       }
       Parameter cpass_cELNOX_rELNOX0le {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cELNOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cELNOXOT_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cELNOXOT_rELNOXOTle {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX(*)OT";
       }
       Parameter cpass_cES_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cES_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cES_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cESCNOX_EFDCOSTS {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cESCNOX_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cF_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cF_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
       }
       Parameter cpass_cF_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
       }
       Parameter cpass_cF_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
       }
       Parameter cpass_cF_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cF_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cF_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cF_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
       }
       Parameter cpass_cF_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cF_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cG_LBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LBOUND";
       }
       Parameter cpass_cG_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cG_UBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cGENCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cGENCLB_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
       }
       Parameter cpass_cGENCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cGENNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: LBOUND";
       }
       Parameter cpass_cGENNGB_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
       }
       Parameter cpass_cGENNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cGPUS_EFDCOSTS {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cGPUS_rS_NGUSle {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
       }
       Parameter cpass_cGPUS_UBOUND {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cGTUS_EFDCOSTS {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cGTUS_rCARBONXXle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
       }
       Parameter cpass_cGTUS_rCARBONXXn {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
       }
       Parameter cpass_cGTUS_rNGle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
       }
       Parameter cpass_cGTUS_rS_NGUSle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
       }
       Parameter cpass_cH_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cH_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
       }
       Parameter cpass_cH_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
       }
       Parameter cpass_cH_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
       }
       Parameter cpass_cH_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cH_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cH_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cH_rP2_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
       }
       Parameter cpass_cH_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
       }
       Parameter cpass_cH_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
       }
       Parameter cpass_cH_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cH_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cI_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cI_LBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LBOUND";
       }
       Parameter cpass_cI_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cI_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cI_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cI_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cI_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cJ_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cJ_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cJ_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
       }
       Parameter cpass_cJ_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
       }
       Parameter cpass_cJ_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
       }
       Parameter cpass_cJ_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cJ_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cJ_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cJ_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
       }
       Parameter cpass_cJ_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
       }
       Parameter cpass_cJ_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
       }
       Parameter cpass_cJ_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
       }
       Parameter cpass_cJ_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cJ_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cJ_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
       }
       Parameter cpass_cJ_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
       }
       Parameter cpass_cJ_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
       }
       Parameter cpass_cJ_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cJ_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cJ_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cJ_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
       }
       Parameter cpass_cJ_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cJ_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cJ_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cJ_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cJ_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cJ_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cJ_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cJ_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cJ_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
       }
       Parameter cpass_cJ_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cJ_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cJ_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cJ_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cJ_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cJ_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
       }
       Parameter cpass_cJ_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
       }
       Parameter cpass_cJ_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
       }
       Parameter cpass_cJ_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
       }
       Parameter cpass_cJ_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cJ_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cJ_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
       }
       Parameter cpass_cJ_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
       }
       Parameter cpass_cJ_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
       }
       Parameter cpass_cJ_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cJ_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cJ_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cJ_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
       }
       Parameter cpass_cJ_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cJ_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cJ_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cJ_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cJ_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cJ_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cJX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cJX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cJX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cJX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
       }
       Parameter cpass_cJX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cJX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
       }
       Parameter cpass_cJX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cJX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cJX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cJX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cKX_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cKX_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
       }
       Parameter cpass_cMB_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cMB_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cMB_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
       }
       Parameter cpass_cMB_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cMERC__rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
       }
       Parameter cpass_cMERC__rMERCURYle {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cMERC__rMERCURYn {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cMERC_DS_rMERC_DSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
       }
       Parameter cpass_cMERC_DS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cMERC_DS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cMERC_RS_rMERC_RSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
       }
       Parameter cpass_cMERC_RS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cMERC_RS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cMVS_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cMVS_rMVSO2le {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
       }
       Parameter cpass_cMVS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
       }
       Parameter cpass_cMVSO2_EFDCOSTS {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cMVSO2_rSULFURle {
           IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
       }
       Parameter cpass_cMVSO2_UBOUND {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cNOT_EFDCOSTS {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cNOT_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
       }
       Parameter cpass_cNOT_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
       }
       Parameter cpass_cNOT_UBOUND {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cNOTSF_EFDCOSTS {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cNOTSF_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
       }
       Parameter cpass_cNSR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cNSR_rZFLRSeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cNSR_rZFLRSge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cNSR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
       }
       Parameter cpass_cNSX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cNSX_rZFLRSeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cNSX_rZFLRSge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cNTO_EFDCOSTS {
           IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cNTO_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
       }
       Parameter cpass_cNTO_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
       }
       Parameter cpass_cNTR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cNTR_rZFLRGeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cNTR_rZFLRGge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cNTR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
       }
       Parameter cpass_cNTX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cNTX_rZFLRGeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cNTX_rZFLRGge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cO_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cO_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cO_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
       }
       Parameter cpass_cO_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
       }
       Parameter cpass_cO_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
       }
       Parameter cpass_cO_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cO_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cO_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cO_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
       }
       Parameter cpass_cO_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
       }
       Parameter cpass_cO_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
       }
       Parameter cpass_cO_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
       }
       Parameter cpass_cO_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cO_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cO_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
       }
       Parameter cpass_cO_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
       }
       Parameter cpass_cO_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
       }
       Parameter cpass_cO_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cO_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cO_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cO_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
       }
       Parameter cpass_cO_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cO_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cO_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cO_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cO_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cO_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cO_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cO_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cO_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
       }
       Parameter cpass_cO_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cO_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cO_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cO_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cO_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cO_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
       }
       Parameter cpass_cO_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
       }
       Parameter cpass_cO_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
       }
       Parameter cpass_cO_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
       }
       Parameter cpass_cO_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cO_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cO_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
       }
       Parameter cpass_cO_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
       }
       Parameter cpass_cO_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
       }
       Parameter cpass_cO_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cO_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cO_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cO_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
       }
       Parameter cpass_cO_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cO_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cO_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cO_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cO_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cO_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cOX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cOX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cOX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cOX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cOX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
       }
       Parameter cpass_cOX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cOX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
       }
       Parameter cpass_cOX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cOX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cRHS_rCARBONXXle {
           Text: "OML Columns: RHSEFD and OML Rows: CARBONXX";
       }
       Parameter cpass_cRHS_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cRHS_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
       }
       Parameter cpass_cRHS_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cRHS_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
       }
       Parameter cpass_cRHS_rENeq {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
       }
       Parameter cpass_cRHS_rENle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
       }
       Parameter cpass_cRHS_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
       }
       Parameter cpass_cRHS_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
       }
       Parameter cpass_cRHS_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
       }
       Parameter cpass_cRHS_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
       }
       Parameter cpass_cRHS_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cRHS_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
       }
       Parameter cpass_cRHS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: RHSEFD and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cRHS_rMRXge {
           IndexDomain: (PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
       }
       Parameter cpass_cRHS_rMVSO2le {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
       }
       Parameter cpass_cRHS_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
       }
       Parameter cpass_cRHS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
       }
       Parameter cpass_cRHS_rSULFURle {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
       }
       Parameter cpass_cRHS_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
       }
       Parameter cpass_cRHS_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
       }
       Parameter cpass_cRHS_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
       }
       Parameter cpass_cRHS_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
       }
       Parameter cpass_cRPUS_EFDCOSTS {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cRPUS_rS_RSUSle {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
       }
       Parameter cpass_cRTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cRTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
       }
       Parameter cpass_cRTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
       }
       Parameter cpass_cRTUS_rMERC_RSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
       }
       Parameter cpass_cRTUS_rRSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
       }
       Parameter cpass_cRTUS_rS_RSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
       }
       Parameter cpass_cRTUS_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
       }
       Parameter cpass_cRTUS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
       }
       Parameter cpass_cRTUS_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
       }
       Parameter cpass_cS2_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cS2_rP2_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
       }
       Parameter cpass_cS2_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
       }
       Parameter cpass_cS2_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cSC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cSC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
       }
       Parameter cpass_cSC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cSC_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cSC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
       }
       Parameter cpass_cSPx_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cSPx_LBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: LBOUND";
       }
       Parameter cpass_cSPx_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cSPx_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cSR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cSR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cSR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cSR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
       }
       Parameter cpass_cSR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
       }
       Parameter cpass_cSR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cSR_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cSR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cST_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cST_rPS_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
       }
       Parameter cpass_cST_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cSULF_EFDCOSTS {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cSULF_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
       }
       Parameter cpass_cSULF_rSULFURle {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
       }
       Parameter cpass_cSULF_rSULFURn {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
       }
       Parameter cpass_cT_STOCK__LBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: LBOUND";
       }
       Parameter cpass_cT_STOCK__rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cT_STOCK__rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
       }
       Parameter cpass_cT_STOCK__rSULFURn {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
       }
       Parameter cpass_cT_STOCK__UBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cTC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cTC_rCANIMPUSeq {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CANIMPUS";
       }
       Parameter cpass_cTC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
       }
       Parameter cpass_cTC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cTC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
       }
       Parameter cpass_cTR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cTR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cTR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cTR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
       }
       Parameter cpass_cTR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
       }
       Parameter cpass_cTR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cTR_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
       }
       Parameter cpass_cTR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cU_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cU_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cU_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
       }
       Parameter cpass_cU_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
       }
       Parameter cpass_cU_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
       }
       Parameter cpass_cU_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cU_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cU_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cU_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
       }
       Parameter cpass_cU_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
       }
       Parameter cpass_cU_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
       }
       Parameter cpass_cU_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
       }
       Parameter cpass_cU_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cU_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cU_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
       }
       Parameter cpass_cU_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
       }
       Parameter cpass_cU_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
       }
       Parameter cpass_cU_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cU_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cU_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cU_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
       }
       Parameter cpass_cU_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cU_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cU_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cU_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cU_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cU_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cU_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cU_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cU_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
       }
       Parameter cpass_cU_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cU_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
       }
       Parameter cpass_cU_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cU_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cU_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
       }
       Parameter cpass_cU_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
       }
       Parameter cpass_cU_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
       }
       Parameter cpass_cU_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
       }
       Parameter cpass_cU_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
       }
       Parameter cpass_cU_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cU_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
       }
       Parameter cpass_cU_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
       }
       Parameter cpass_cU_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
       }
       Parameter cpass_cU_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
       }
       Parameter cpass_cU_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
       }
       Parameter cpass_cU_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
       }
       Parameter cpass_cU_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cU_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
       }
       Parameter cpass_cU_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cU_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cU_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
       }
       Parameter cpass_cU_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cU_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
       }
       Parameter cpass_cU_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cUX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
       }
       Parameter cpass_cUX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
       }
       Parameter cpass_cUX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
       }
       Parameter cpass_cUX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
       }
       Parameter cpass_cUX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
       }
       Parameter cpass_cUX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
       }
       Parameter cpass_cUX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
       }
       Parameter cpass_cUX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: UBOUND";
         Range: nonnegative;
         Default: inf;
       }
       Parameter cpass_cUX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX0(*)";
       }
       Parameter cpass_cUX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX(*)(**)";
       }
     }
   DeclarationSection check_parameter_declare {
       Parameter cdiff_cACISPLY_EFDCOSTS {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cACISPLY_EFDCOSTS(numACI) -
              cpass_cACISPLY_EFDCOSTS(numACI) )
         ! /$ ccalc_cACISPLY_EFDCOSTS(numACI) *100
           }
       }
       Parameter cdiff_cACISPLY_rACICSTle {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
           Definition: { 
            ( ccalc_cACISPLY_rACICSTle(numACI) -
              cpass_cACISPLY_rACICSTle(numACI) )
         ! /$ ccalc_cACISPLY_rACICSTle(numACI) *100
           }
       }
       Parameter cdiff_cACISPLY_UBOUND {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cACISPLY_UBOUND(numACI) <> inf
           and cpass_cACISPLY_UBOUND(numACI) <> inf ) then
            ( ccalc_cACISPLY_UBOUND(numACI) -
              cpass_cACISPLY_UBOUND(numACI) )
         ! /$ ccalc_cACISPLY_UBOUND(numACI) *100
         elseif ( ccalc_cACISPLY_UBOUND(numACI) = inf
           and cpass_cACISPLY_UBOUND(numACI) = inf ) then
                 0
         elseif ( ccalc_cACISPLY_UBOUND(numACI) = inf ) then
                 inf
         elseif ( cpass_cACISPLY_UBOUND(numACI) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cB_EFDCOSTS {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
           Definition: { 
            ( ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rCARBONle {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rCARBONn {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rCARBONXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rCARBONXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rCARSEQXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQXX";
           Definition: { 
            ( ccalc_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rCFGn {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
           Definition: { 
            ( ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
           Definition: { 
            ( ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rDSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
           Definition: { 
            ( ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rNGle {
           IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
           Definition: { 
            ( ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rRSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
           Definition: { 
            ( ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cB_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
           Definition: { 
            ( ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
              cpass_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
         ! /$ ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
           }
       }
       Parameter cdiff_cBCTLN_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) -
              cpass_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) )
         ! /$ ccalc_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) *100
           }
       }
       Parameter cdiff_cBCTLN_rELNOX0n {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) -
              cpass_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) )
         ! /$ ccalc_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *100
           }
       }
       Parameter cdiff_cBCTLN_rELNOXOTle {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)OT";
           Definition: { 
            ( ccalc_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) -
              cpass_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) )
         ! /$ ccalc_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *100
           }
       }
       Parameter cdiff_cBCTLN_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> inf
           and cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> inf ) then
            ( ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) -
              cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) )
         ! /$ ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) *100
         elseif ( ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) = inf
           and cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) = inf ) then
                 0
         elseif ( ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) = inf ) then
                 inf
         elseif ( cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cBiomassOtherUsage_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) -
              cpass_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) )
         ! /$ ccalc_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) *100
           }
       }
       Parameter cdiff_cBiomassOtherUsage_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
           Definition: { 
            ( ccalc_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) -
              cpass_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) )
         ! /$ ccalc_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) *100
           }
       }
       Parameter cdiff_cBiomassOtherUsage_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> inf
           and cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> inf ) then
            ( ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) -
              cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) )
         ! /$ ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) *100
         elseif ( ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) = inf
           and cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) = inf ) then
                 0
         elseif ( ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) = inf ) then
                 inf
         elseif ( cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cBP_type_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) -
              cpass_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) )
         ! /$ ccalc_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
           }
       }
       Parameter cdiff_cBP_type_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
           Definition: { 
            ( ccalc_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) -
              cpass_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) )
         ! /$ ccalc_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
           }
       }
       Parameter cdiff_cBP_type_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
           Definition: { 
            ( ccalc_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) -
              cpass_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) )
         ! /$ ccalc_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) *100
           }
       }
       Parameter cdiff_cBP_type_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf
           and cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf ) then
            ( ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) -
              cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) )
         ! /$ ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
         elseif ( ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) = inf
           and cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) = inf ) then
                 0
         elseif ( ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) = inf ) then
                 inf
         elseif ( cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cC_Z_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
              cpass_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
         ! /$ ccalc_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
           }
       }
       Parameter cdiff_cC_Z_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            ( ccalc_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
              cpass_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
         ! /$ ccalc_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
           }
       }
       Parameter cdiff_cCARBNK_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cCARBNK_EFDCOSTS(CarbonRegion) -
              cpass_cCARBNK_EFDCOSTS(CarbonRegion) )
         ! /$ ccalc_cCARBNK_EFDCOSTS(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARBNK_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARBNK_rCARBONABeq(CarbonRegion) -
              cpass_cCARBNK_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCARBNK_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARBNK_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARBNK_rCARBONABn(CarbonRegion) -
              cpass_cCARBNK_rCARBONABn(CarbonRegion) )
         ! /$ ccalc_cCARBNK_rCARBONABn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARBNK_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARBNK_UBOUND(CarbonRegion) <> inf
           and cpass_cCARBNK_UBOUND(CarbonRegion) <> inf ) then
            ( ccalc_cCARBNK_UBOUND(CarbonRegion) -
              cpass_cCARBNK_UBOUND(CarbonRegion) )
         ! /$ ccalc_cCARBNK_UBOUND(CarbonRegion) *100
         elseif ( ccalc_cCARBNK_UBOUND(CarbonRegion) = inf
           and cpass_cCARBNK_UBOUND(CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCARBNK_UBOUND(CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCARBNK_UBOUND(CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARBONOT_LBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCARBONOT_LBOUND -
              cpass_cCARBONOT_LBOUND )
         ! /$ ccalc_cCARBONOT_LBOUND *100
           }
       }
       Parameter cdiff_cCARBONOT_rCARBONXXle {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cCARBONOT_rCARBONXXle -
              cpass_cCARBONOT_rCARBONXXle )
         ! /$ ccalc_cCARBONOT_rCARBONXXle *100
           }
       }
       Parameter cdiff_cCARBONOT_rCARBONXXn {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cCARBONOT_rCARBONXXn -
              cpass_cCARBONOT_rCARBONXXn )
         ! /$ ccalc_cCARBONOT_rCARBONXXn *100
           }
       }
       Parameter cdiff_cCARBONOT_UBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARBONOT_UBOUND <> inf
           and cpass_cCARBONOT_UBOUND <> inf ) then
            ( ccalc_cCARBONOT_UBOUND -
              cpass_cCARBONOT_UBOUND )
         ! /$ ccalc_cCARBONOT_UBOUND *100
         elseif ( ccalc_cCARBONOT_UBOUND = inf
           and cpass_cCARBONOT_UBOUND = inf ) then
                 0
         elseif ( ccalc_cCARBONOT_UBOUND = inf ) then
                 inf
         elseif ( cpass_cCARBONOT_UBOUND = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARDM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) -
              cpass_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) )
         ! /$ ccalc_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARDM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) -
              cpass_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) )
         ! /$ ccalc_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCARDM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) -
              cpass_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) )
         ! /$ ccalc_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCARDM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf
           and cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf ) then
            ( ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) -
              cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) )
         ! /$ ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) *100
         elseif ( ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf
           and cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARECR_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cCARECR_EFDCOSTS(CarbonRegion) -
              cpass_cCARECR_EFDCOSTS(CarbonRegion) )
         ! /$ ccalc_cCARECR_EFDCOSTS(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARECR_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARECR_rCARBONle(CarbonRegion) -
              cpass_cCARECR_rCARBONle(CarbonRegion) )
         ! /$ ccalc_cCARECR_rCARBONle(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARECR_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARECR_UBOUND(CarbonRegion) <> inf
           and cpass_cCARECR_UBOUND(CarbonRegion) <> inf ) then
            ( ccalc_cCARECR_UBOUND(CarbonRegion) -
              cpass_cCARECR_UBOUND(CarbonRegion) )
         ! /$ ccalc_cCARECR_UBOUND(CarbonRegion) *100
         elseif ( ccalc_cCARECR_UBOUND(CarbonRegion) = inf
           and cpass_cCARECR_UBOUND(CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCARECR_UBOUND(CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCARECR_UBOUND(CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARESC_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cCARESC_EFDCOSTS(CarbonRegion) -
              cpass_cCARESC_EFDCOSTS(CarbonRegion) )
         ! /$ ccalc_cCARESC_EFDCOSTS(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARESC_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARESC_rCARBONABeq(CarbonRegion) -
              cpass_cCARESC_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCARESC_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARESC_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARESC_rCARBONABn(CarbonRegion) -
              cpass_cCARESC_rCARBONABn(CarbonRegion) )
         ! /$ ccalc_cCARESC_rCARBONABn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARESC_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARESC_rCARBONle(CarbonRegion) -
              cpass_cCARESC_rCARBONle(CarbonRegion) )
         ! /$ ccalc_cCARESC_rCARBONle(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARESCXX_EFDCOSTS {
           Text: "OML Columns: CARESCXX and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cCARESCXX_EFDCOSTS -
              cpass_cCARESCXX_EFDCOSTS )
         ! /$ ccalc_cCARESCXX_EFDCOSTS *100
           }
       }
       Parameter cdiff_cCARESCXX_rCARBONXXle {
           Text: "OML Columns: CARESCXX and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cCARESCXX_rCARBONXXle -
              cpass_cCARESCXX_rCARBONXXle )
         ! /$ ccalc_cCARESCXX_rCARBONXXle *100
           }
       }
       Parameter cdiff_cCARESCXX_UBOUND {
           Text: "OML Columns: CARESCXX and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARESCXX_UBOUND <> inf
           and cpass_cCARESCXX_UBOUND <> inf ) then
            ( ccalc_cCARESCXX_UBOUND -
              cpass_cCARESCXX_UBOUND )
         ! /$ ccalc_cCARESCXX_UBOUND *100
         elseif ( ccalc_cCARESCXX_UBOUND = inf
           and cpass_cCARESCXX_UBOUND = inf ) then
                 0
         elseif ( ccalc_cCARESCXX_UBOUND = inf ) then
                 inf
         elseif ( cpass_cCARESCXX_UBOUND = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARFUE_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCARFUE_LBOUND(CarbonRegion) -
              cpass_cCARFUE_LBOUND(CarbonRegion) )
         ! /$ ccalc_cCARFUE_LBOUND(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARFUE_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARFUE_rCARBONABeq(CarbonRegion) -
              cpass_cCARFUE_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCARFUE_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARFUE_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARFUE_rCARBONABn(CarbonRegion) -
              cpass_cCARFUE_rCARBONABn(CarbonRegion) )
         ! /$ ccalc_cCARFUE_rCARBONABn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARFUE_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARFUE_UBOUND(CarbonRegion) <> inf
           and cpass_cCARFUE_UBOUND(CarbonRegion) <> inf ) then
            ( ccalc_cCARFUE_UBOUND(CarbonRegion) -
              cpass_cCARFUE_UBOUND(CarbonRegion) )
         ! /$ ccalc_cCARFUE_UBOUND(CarbonRegion) *100
         elseif ( ccalc_cCARFUE_UBOUND(CarbonRegion) = inf
           and cpass_cCARFUE_UBOUND(CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCARFUE_UBOUND(CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCARFUE_UBOUND(CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARIM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) -
              cpass_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) )
         ! /$ ccalc_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARIM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) -
              cpass_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) )
         ! /$ ccalc_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCARIM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) -
              cpass_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) )
         ! /$ ccalc_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCARIM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf
           and cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf ) then
            ( ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) -
              cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) )
         ! /$ ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) *100
         elseif ( ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf
           and cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARIND_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCARIND_LBOUND(CarbonRegion) -
              cpass_cCARIND_LBOUND(CarbonRegion) )
         ! /$ ccalc_cCARIND_LBOUND(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARIND_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARIND_rCARBONABeq(CarbonRegion) -
              cpass_cCARIND_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCARIND_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARIND_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARIND_rCARBONABn(CarbonRegion) -
              cpass_cCARIND_rCARBONABn(CarbonRegion) )
         ! /$ ccalc_cCARIND_rCARBONABn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARIND_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARIND_UBOUND(CarbonRegion) <> inf
           and cpass_cCARIND_UBOUND(CarbonRegion) <> inf ) then
            ( ccalc_cCARIND_UBOUND(CarbonRegion) -
              cpass_cCARIND_UBOUND(CarbonRegion) )
         ! /$ ccalc_cCARIND_UBOUND(CarbonRegion) *100
         elseif ( ccalc_cCARIND_UBOUND(CarbonRegion) = inf
           and cpass_cCARIND_UBOUND(CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCARIND_UBOUND(CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCARIND_UBOUND(CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARLIM_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cCARLIM_EFDCOSTS(CarbonRegion) -
              cpass_cCARLIM_EFDCOSTS(CarbonRegion) )
         ! /$ ccalc_cCARLIM_EFDCOSTS(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARLIM_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARLIM_rCARBONABeq(CarbonRegion) -
              cpass_cCARLIM_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCARLIM_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARLIM_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARLIM_rCARBONle(CarbonRegion) -
              cpass_cCARLIM_rCARBONle(CarbonRegion) )
         ! /$ ccalc_cCARLIM_rCARBONle(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARLIM_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARLIM_UBOUND(CarbonRegion) <> inf
           and cpass_cCARLIM_UBOUND(CarbonRegion) <> inf ) then
            ( ccalc_cCARLIM_UBOUND(CarbonRegion) -
              cpass_cCARLIM_UBOUND(CarbonRegion) )
         ! /$ ccalc_cCARLIM_UBOUND(CarbonRegion) *100
         elseif ( ccalc_cCARLIM_UBOUND(CarbonRegion) = inf
           and cpass_cCARLIM_UBOUND(CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCARLIM_UBOUND(CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCARLIM_UBOUND(CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCAROFF_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cCAROFF_EFDCOSTS(CarbonRegion) -
              cpass_cCAROFF_EFDCOSTS(CarbonRegion) )
         ! /$ ccalc_cCAROFF_EFDCOSTS(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCAROFF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCAROFF_rCARBONABeq(CarbonRegion) -
              cpass_cCAROFF_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCAROFF_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCAROFF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCAROFF_rCARBONABn(CarbonRegion) -
              cpass_cCAROFF_rCARBONABn(CarbonRegion) )
         ! /$ ccalc_cCAROFF_rCARBONABn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCAROFF_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCAROFF_rCARBONle(CarbonRegion) -
              cpass_cCAROFF_rCARBONle(CarbonRegion) )
         ! /$ ccalc_cCAROFF_rCARBONle(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCAROFF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCAROFF_UBOUND(CarbonRegion) <> inf
           and cpass_cCAROFF_UBOUND(CarbonRegion) <> inf ) then
            ( ccalc_cCAROFF_UBOUND(CarbonRegion) -
              cpass_cCAROFF_UBOUND(CarbonRegion) )
         ! /$ ccalc_cCAROFF_UBOUND(CarbonRegion) *100
         elseif ( ccalc_cCAROFF_UBOUND(CarbonRegion) = inf
           and cpass_cCAROFF_UBOUND(CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCAROFF_UBOUND(CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCAROFF_UBOUND(CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCAROTH_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCAROTH_LBOUND(CarbonRegion) -
              cpass_cCAROTH_LBOUND(CarbonRegion) )
         ! /$ ccalc_cCAROTH_LBOUND(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCAROTH_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCAROTH_rCARBONABeq(CarbonRegion) -
              cpass_cCAROTH_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCAROTH_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCAROTH_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCAROTH_rCARBONABn(CarbonRegion) -
              cpass_cCAROTH_rCARBONABn(CarbonRegion) )
         ! /$ ccalc_cCAROTH_rCARBONABn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCAROTH_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCAROTH_UBOUND(CarbonRegion) <> inf
           and cpass_cCAROTH_UBOUND(CarbonRegion) <> inf ) then
            ( ccalc_cCAROTH_UBOUND(CarbonRegion) -
              cpass_cCAROTH_UBOUND(CarbonRegion) )
         ! /$ ccalc_cCAROTH_UBOUND(CarbonRegion) *100
         elseif ( ccalc_cCAROTH_UBOUND(CarbonRegion) = inf
           and cpass_cCAROTH_UBOUND(CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCAROTH_UBOUND(CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCAROTH_UBOUND(CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARREF_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCARREF_LBOUND(CarbonRegion) -
              cpass_cCARREF_LBOUND(CarbonRegion) )
         ! /$ ccalc_cCARREF_LBOUND(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARREF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARREF_rCARBONABeq(CarbonRegion) -
              cpass_cCARREF_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCARREF_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARREF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARREF_rCARBONABn(CarbonRegion) -
              cpass_cCARREF_rCARBONABn(CarbonRegion) )
         ! /$ ccalc_cCARREF_rCARBONABn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARREF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARREF_UBOUND(CarbonRegion) <> inf
           and cpass_cCARREF_UBOUND(CarbonRegion) <> inf ) then
            ( ccalc_cCARREF_UBOUND(CarbonRegion) -
              cpass_cCARREF_UBOUND(CarbonRegion) )
         ! /$ ccalc_cCARREF_UBOUND(CarbonRegion) *100
         elseif ( ccalc_cCARREF_UBOUND(CarbonRegion) = inf
           and cpass_cCARREF_UBOUND(CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCARREF_UBOUND(CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCARREF_UBOUND(CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARRSV_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cCARRSV_EFDCOSTS(CarbonRegion) -
              cpass_cCARRSV_EFDCOSTS(CarbonRegion) )
         ! /$ ccalc_cCARRSV_EFDCOSTS(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARRSV_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARRSV_rCARBONABeq(CarbonRegion) -
              cpass_cCARRSV_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCARRSV_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARRSV_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARRSV_rCARBONABn(CarbonRegion) -
              cpass_cCARRSV_rCARBONABn(CarbonRegion) )
         ! /$ ccalc_cCARRSV_rCARBONABn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARRSV_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARRSV_rCARBONle(CarbonRegion) -
              cpass_cCARRSV_rCARBONle(CarbonRegion) )
         ! /$ ccalc_cCARRSV_rCARBONle(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARRSV_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCARRSV_UBOUND(CarbonRegion) <> inf
           and cpass_cCARRSV_UBOUND(CarbonRegion) <> inf ) then
            ( ccalc_cCARRSV_UBOUND(CarbonRegion) -
              cpass_cCARRSV_UBOUND(CarbonRegion) )
         ! /$ ccalc_cCARRSV_UBOUND(CarbonRegion) *100
         elseif ( ccalc_cCARRSV_UBOUND(CarbonRegion) = inf
           and cpass_cCARRSV_UBOUND(CarbonRegion) = inf ) then
                 0
         elseif ( ccalc_cCARRSV_UBOUND(CarbonRegion) = inf ) then
                 inf
         elseif ( cpass_cCARRSV_UBOUND(CarbonRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCARUTL_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARUTL_rCARBONABeq(CarbonRegion) -
              cpass_cCARUTL_rCARBONABeq(CarbonRegion) )
         ! /$ ccalc_cCARUTL_rCARBONABeq(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARUTL_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: { 
            ( ccalc_cCARUTL_rCARBONABn(CarbonRegion) -
              cpass_cCARUTL_rCARBONABn(CarbonRegion) )
         ! /$ ccalc_cCARUTL_rCARBONABn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARUTL_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARUTL_rCARBONle(CarbonRegion) -
              cpass_cCARUTL_rCARBONle(CarbonRegion) )
         ! /$ ccalc_cCARUTL_rCARBONle(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCARUTL_rCARBONn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCARUTL_rCARBONn(CarbonRegion) -
              cpass_cCARUTL_rCARBONn(CarbonRegion) )
         ! /$ ccalc_cCARUTL_rCARBONn(CarbonRegion) *100
           }
       }
       Parameter cdiff_cCNIMPBUS_LBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCNIMPBUS_LBOUND -
              cpass_cCNIMPBUS_LBOUND )
         ! /$ ccalc_cCNIMPBUS_LBOUND *100
           }
       }
       Parameter cdiff_cCNIMPBUS_rCANIMPUSeq {
           Text: "OML Columns: CNIMPBUS and OML Rows: CANIMPUS";
           Definition: { 
            ( ccalc_cCNIMPBUS_rCANIMPUSeq -
              cpass_cCNIMPBUS_rCANIMPUSeq )
         ! /$ ccalc_cCNIMPBUS_rCANIMPUSeq *100
           }
       }
       Parameter cdiff_cCNIMPBUS_UBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCNIMPBUS_UBOUND <> inf
           and cpass_cCNIMPBUS_UBOUND <> inf ) then
            ( ccalc_cCNIMPBUS_UBOUND -
              cpass_cCNIMPBUS_UBOUND )
         ! /$ ccalc_cCNIMPBUS_UBOUND *100
         elseif ( ccalc_cCNIMPBUS_UBOUND = inf
           and cpass_cCNIMPBUS_UBOUND = inf ) then
                 0
         elseif ( ccalc_cCNIMPBUS_UBOUND = inf ) then
                 inf
         elseif ( cpass_cCNIMPBUS_UBOUND = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCoalOtherUsage_LBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCoalOtherUsage_LBOUND(CoalSupplyCurve) -
              cpass_cCoalOtherUsage_LBOUND(CoalSupplyCurve) )
         ! /$ ccalc_cCoalOtherUsage_LBOUND(CoalSupplyCurve) *100
           }
       }
       Parameter cdiff_cCoalOtherUsage_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
           Definition: { 
            ( ccalc_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) -
              cpass_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) )
         ! /$ ccalc_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) *100
           }
       }
       Parameter cdiff_cCoalOtherUsage_UBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) <> inf
           and cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) <> inf ) then
            ( ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) -
              cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) )
         ! /$ ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) *100
         elseif ( ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) = inf
           and cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) = inf ) then
                 0
         elseif ( ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) = inf ) then
                 inf
         elseif ( cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCONCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCONCLB_LBOUND(SupplyRegion_ALT2) -
              cpass_cCONCLB_LBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cCONCLB_LBOUND(SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cCONCLB_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
           Definition: { 
            ( ccalc_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) -
              cpass_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) )
         ! /$ ccalc_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cCONCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) <> inf
           and cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) <> inf ) then
            ( ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) -
              cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) *100
         elseif ( ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) = inf
           and cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 0
         elseif ( ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 inf
         elseif ( cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCONNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCONNGB_LBOUND(SupplyRegion_ALT2) -
              cpass_cCONNGB_LBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cCONNGB_LBOUND(SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cCONNGB_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
           Definition: { 
            ( ccalc_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) -
              cpass_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) )
         ! /$ ccalc_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cCONNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) <> inf
           and cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) <> inf ) then
            ( ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) -
              cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) *100
         elseif ( ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) = inf
           and cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 0
         elseif ( ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 inf
         elseif ( cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCP_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) -
              cpass_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) )
         ! /$ ccalc_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) *100
           }
       }
       Parameter cdiff_cCP_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
           Definition: { 
            ( ccalc_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) -
              cpass_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) )
         ! /$ ccalc_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) *100
           }
       }
       Parameter cdiff_cCP_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf
           and cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf ) then
            ( ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) -
              cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) )
         ! /$ ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) *100
         elseif ( ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) = inf
           and cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) = inf ) then
                 0
         elseif ( ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) = inf ) then
                 inf
         elseif ( cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCT_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rACICSTle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
           Definition: { 
            ( ccalc_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rACIOMCSTn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
           Definition: { 
            ( ccalc_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rACIRMVXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
           Definition: { 
            ( ccalc_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
           Definition: { 
            ( ccalc_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) -
              cpass_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) )
         ! /$ ccalc_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            ( ccalc_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) -
              cpass_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) )
         ! /$ ccalc_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            ( ccalc_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) -
              cpass_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: { 
            ( ccalc_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) -
              cpass_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) )
         ! /$ ccalc_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
           Definition: { 
            ( ccalc_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
           Definition: { 
            ( ccalc_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) -
              cpass_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) )
         ! /$ ccalc_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: { 
            ( ccalc_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: { 
            ( ccalc_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            ( ccalc_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) -
              cpass_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) *100
           }
       }
       Parameter cdiff_cCT_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
           and cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
            ( ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) -
              cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) )
         ! /$ ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
         elseif ( ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) = inf
           and cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) = inf ) then
                 0
         elseif ( ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) = inf ) then
                 inf
         elseif ( cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCTLCO_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLCO_rCARBONle {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLCO_rCARBONn {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLCO_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLCO_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLCO_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
           and cpass_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
            ( ccalc_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
         elseif ( ccalc_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) = inf
           and cpass_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) = inf ) then
                 0
         elseif ( ccalc_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) = inf ) then
                 inf
         elseif ( cpass_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCTLHG_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLHG_rMERCURYle {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLHG_rMERCURYn {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLHG_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
           and cpass_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
            ( ccalc_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
         elseif ( ccalc_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) = inf
           and cpass_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) = inf ) then
                 0
         elseif ( ccalc_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) = inf ) then
                 inf
         elseif ( cpass_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCTLS_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) -
              cpass_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) )
         ! /$ ccalc_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) *100
           }
       }
       Parameter cdiff_cCTLS_rSULFURle {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: { 
            ( ccalc_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLS_rSULFURn {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: { 
            ( ccalc_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) -
              cpass_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLS_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> inf
           and cpass_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> inf ) then
            ( ccalc_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) -
              cpass_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) )
         ! /$ ccalc_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) *100
         elseif ( ccalc_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) = inf
           and cpass_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) = inf ) then
                 0
         elseif ( ccalc_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) = inf ) then
                 inf
         elseif ( cpass_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cCTLSO2_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) -
              cpass_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLSO2_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: { 
            ( ccalc_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) -
              cpass_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLSO2_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: { 
            ( ccalc_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) -
              cpass_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) *100
           }
       }
       Parameter cdiff_cCTLSO2_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) <> inf
           and cpass_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) <> inf ) then
            ( ccalc_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) -
              cpass_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) )
         ! /$ ccalc_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) *100
         elseif ( ccalc_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) = inf
           and cpass_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) = inf ) then
                 0
         elseif ( ccalc_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) = inf ) then
                 inf
         elseif ( cpass_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cD_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) -
              cpass_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_LBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cD_LBOUND(PlantGroup,Season,OperatingMode) -
              cpass_cD_LBOUND(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_LBOUND(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) -
              cpass_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            ( ccalc_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            ( ccalc_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) -
              cpass_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) -
              cpass_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            ( ccalc_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
              cpass_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
         ! /$ ccalc_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
           }
       }
       Parameter cdiff_cD_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) <> inf
           and cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
            ( ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) -
              cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) *100
         elseif ( ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) = inf
           and cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 0
         elseif ( ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 inf
         elseif ( cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cDPUS_EFDCOSTS {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cDPUS_EFDCOSTS(DistillateProductionStep) -
              cpass_cDPUS_EFDCOSTS(DistillateProductionStep) )
         ! /$ ccalc_cDPUS_EFDCOSTS(DistillateProductionStep) *100
           }
       }
       Parameter cdiff_cDPUS_rS_DSUSle {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
           Definition: { 
            ( ccalc_cDPUS_rS_DSUSle(DistillateProductionStep) -
              cpass_cDPUS_rS_DSUSle(DistillateProductionStep) )
         ! /$ ccalc_cDPUS_rS_DSUSle(DistillateProductionStep) *100
           }
       }
       Parameter cdiff_cDPVCP_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cDPVCP_LBOUND(SupplyRegion_ALT2) -
              cpass_cDPVCP_LBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cDPVCP_LBOUND(SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cDPVCP_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) -
              cpass_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) )
         ! /$ ccalc_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) *100
           }
       }
       Parameter cdiff_cDPVCP_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) -
              cpass_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) )
         ! /$ ccalc_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) *100
           }
       }
       Parameter cdiff_cDPVCP_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) <> inf
           and cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) <> inf ) then
            ( ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) -
              cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) *100
         elseif ( ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) = inf
           and cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) = inf ) then
                 0
         elseif ( ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) = inf ) then
                 inf
         elseif ( cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cDTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cDTUS_EFDCOSTS(OilRegion) -
              cpass_cDTUS_EFDCOSTS(OilRegion) )
         ! /$ ccalc_cDTUS_EFDCOSTS(OilRegion) *100
           }
       }
       Parameter cdiff_cDTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cDTUS_rCARBONXXle(OilRegion) -
              cpass_cDTUS_rCARBONXXle(OilRegion) )
         ! /$ ccalc_cDTUS_rCARBONXXle(OilRegion) *100
           }
       }
       Parameter cdiff_cDTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cDTUS_rCARBONXXn(OilRegion) -
              cpass_cDTUS_rCARBONXXn(OilRegion) )
         ! /$ ccalc_cDTUS_rCARBONXXn(OilRegion) *100
           }
       }
       Parameter cdiff_cDTUS_rDSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
           Definition: { 
            ( ccalc_cDTUS_rDSle(CensusRegion,OilRegion) -
              cpass_cDTUS_rDSle(CensusRegion,OilRegion) )
         ! /$ ccalc_cDTUS_rDSle(CensusRegion,OilRegion) *100
           }
       }
       Parameter cdiff_cDTUS_rMERC_DSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
           Definition: { 
            ( ccalc_cDTUS_rMERC_DSle(nHGCODE,OilRegion) -
              cpass_cDTUS_rMERC_DSle(nHGCODE,OilRegion) )
         ! /$ ccalc_cDTUS_rMERC_DSle(nHGCODE,OilRegion) *100
           }
       }
       Parameter cdiff_cDTUS_rS_DSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
           Definition: { 
            ( ccalc_cDTUS_rS_DSUSle(OilRegion) -
              cpass_cDTUS_rS_DSUSle(OilRegion) )
         ! /$ ccalc_cDTUS_rS_DSUSle(OilRegion) *100
           }
       }
       Parameter cdiff_cDX_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) -
              cpass_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) )
         ! /$ ccalc_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
           }
       }
       Parameter cdiff_cDX_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            ( ccalc_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) -
              cpass_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) )
         ! /$ ccalc_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
           }
       }
       Parameter cdiff_cELNOX_rELNOX0le {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cELNOX_rELNOX0le(INOXP,PlantType_ECP) -
              cpass_cELNOX_rELNOX0le(INOXP,PlantType_ECP) )
         ! /$ ccalc_cELNOX_rELNOX0le(INOXP,PlantType_ECP) *100
           }
       }
       Parameter cdiff_cELNOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cELNOX_rELNOXle(INOXP,PlantType_ECP) -
              cpass_cELNOX_rELNOXle(INOXP,PlantType_ECP) )
         ! /$ ccalc_cELNOX_rELNOXle(INOXP,PlantType_ECP) *100
           }
       }
       Parameter cdiff_cELNOXOT_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cELNOXOT_rELNOX0le(INOXP) -
              cpass_cELNOXOT_rELNOX0le(INOXP) )
         ! /$ ccalc_cELNOXOT_rELNOX0le(INOXP) *100
           }
       }
       Parameter cdiff_cELNOXOT_rELNOXOTle {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX(*)OT";
           Definition: { 
            ( ccalc_cELNOXOT_rELNOXOTle(INOXP) -
              cpass_cELNOXOT_rELNOXOTle(INOXP) )
         ! /$ ccalc_cELNOXOT_rELNOXOTle(INOXP) *100
           }
       }
       Parameter cdiff_cES_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) -
              cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cES_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cES_rLDge(SupplyRegion,Season,Slice) -
              cpass_cES_rLDge(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cES_rLDge(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cES_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cES_UBOUND(SupplyRegion,Season,Slice) <> inf
           and cpass_cES_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
            ( ccalc_cES_UBOUND(SupplyRegion,Season,Slice) -
              cpass_cES_UBOUND(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cES_UBOUND(SupplyRegion,Season,Slice) *100
         elseif ( ccalc_cES_UBOUND(SupplyRegion,Season,Slice) = inf
           and cpass_cES_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 0
         elseif ( ccalc_cES_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 inf
         elseif ( cpass_cES_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cESCNOX_EFDCOSTS {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cESCNOX_EFDCOSTS(INOXP) -
              cpass_cESCNOX_EFDCOSTS(INOXP) )
         ! /$ ccalc_cESCNOX_EFDCOSTS(INOXP) *100
           }
       }
       Parameter cdiff_cESCNOX_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cESCNOX_rELNOX0le(INOXP) -
              cpass_cESCNOX_rELNOX0le(INOXP) )
         ! /$ ccalc_cESCNOX_rELNOX0le(INOXP) *100
           }
       }
       Parameter cdiff_cF_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cF_EFDCOSTS(PlantGroup,Season,Slice) -
              cpass_cF_EFDCOSTS(PlantGroup,Season,Slice) )
         ! /$ ccalc_cF_EFDCOSTS(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cF_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            ( ccalc_cF_rENeq(PlantGroup,Season,Slice) -
              cpass_cF_rENeq(PlantGroup,Season,Slice) )
         ! /$ ccalc_cF_rENeq(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cF_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            ( ccalc_cF_rENle(PlantGroup,Season,Slice) -
              cpass_cF_rENle(PlantGroup,Season,Slice) )
         ! /$ ccalc_cF_rENle(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cF_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: { 
            ( ccalc_cF_rFle(PlantGroup,Season,Slice) -
              cpass_cF_rFle(PlantGroup,Season,Slice) )
         ! /$ ccalc_cF_rFle(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cF_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
              cpass_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
         ! /$ ccalc_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cF_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
              cpass_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
         ! /$ ccalc_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cF_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cF_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            ( ccalc_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) -
              cpass_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) )
         ! /$ ccalc_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *100
           }
       }
       Parameter cdiff_cF_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cF_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cF_UBOUND(PlantGroup,Season,Slice) <> inf
           and cpass_cF_UBOUND(PlantGroup,Season,Slice) <> inf ) then
            ( ccalc_cF_UBOUND(PlantGroup,Season,Slice) -
              cpass_cF_UBOUND(PlantGroup,Season,Slice) )
         ! /$ ccalc_cF_UBOUND(PlantGroup,Season,Slice) *100
         elseif ( ccalc_cF_UBOUND(PlantGroup,Season,Slice) = inf
           and cpass_cF_UBOUND(PlantGroup,Season,Slice) = inf ) then
                 0
         elseif ( ccalc_cF_UBOUND(PlantGroup,Season,Slice) = inf ) then
                 inf
         elseif ( cpass_cF_UBOUND(PlantGroup,Season,Slice) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cG_LBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cG_LBOUND(SupplyRegion_ALT1) -
              cpass_cG_LBOUND(SupplyRegion_ALT1) )
         ! /$ ccalc_cG_LBOUND(SupplyRegion_ALT1) *100
           }
       }
       Parameter cdiff_cG_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) -
              cpass_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) )
         ! /$ ccalc_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) *100
           }
       }
       Parameter cdiff_cG_UBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cG_UBOUND(SupplyRegion_ALT1) <> inf
           and cpass_cG_UBOUND(SupplyRegion_ALT1) <> inf ) then
            ( ccalc_cG_UBOUND(SupplyRegion_ALT1) -
              cpass_cG_UBOUND(SupplyRegion_ALT1) )
         ! /$ ccalc_cG_UBOUND(SupplyRegion_ALT1) *100
         elseif ( ccalc_cG_UBOUND(SupplyRegion_ALT1) = inf
           and cpass_cG_UBOUND(SupplyRegion_ALT1) = inf ) then
                 0
         elseif ( ccalc_cG_UBOUND(SupplyRegion_ALT1) = inf ) then
                 inf
         elseif ( cpass_cG_UBOUND(SupplyRegion_ALT1) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cGENCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cGENCLB_LBOUND(SupplyRegion_ALT2) -
              cpass_cGENCLB_LBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cGENCLB_LBOUND(SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cGENCLB_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
           Definition: { 
            ( ccalc_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) -
              cpass_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) )
         ! /$ ccalc_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cGENCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) <> inf
           and cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) <> inf ) then
            ( ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) -
              cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) *100
         elseif ( ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) = inf
           and cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 0
         elseif ( ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 inf
         elseif ( cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cGENNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cGENNGB_LBOUND(SupplyRegion_ALT2) -
              cpass_cGENNGB_LBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cGENNGB_LBOUND(SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cGENNGB_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
           Definition: { 
            ( ccalc_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) -
              cpass_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) )
         ! /$ ccalc_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cGENNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) <> inf
           and cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) <> inf ) then
            ( ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) -
              cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) )
         ! /$ ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) *100
         elseif ( ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) = inf
           and cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 0
         elseif ( ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 inf
         elseif ( cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cGPUS_EFDCOSTS {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cGPUS_EFDCOSTS(GasProductionStep) -
              cpass_cGPUS_EFDCOSTS(GasProductionStep) )
         ! /$ ccalc_cGPUS_EFDCOSTS(GasProductionStep) *100
           }
       }
       Parameter cdiff_cGPUS_rS_NGUSle {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
           Definition: { 
            ( ccalc_cGPUS_rS_NGUSle(GasProductionStep) -
              cpass_cGPUS_rS_NGUSle(GasProductionStep) )
         ! /$ ccalc_cGPUS_rS_NGUSle(GasProductionStep) *100
           }
       }
       Parameter cdiff_cGPUS_UBOUND {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cGPUS_UBOUND(GasProductionStep) <> inf
           and cpass_cGPUS_UBOUND(GasProductionStep) <> inf ) then
            ( ccalc_cGPUS_UBOUND(GasProductionStep) -
              cpass_cGPUS_UBOUND(GasProductionStep) )
         ! /$ ccalc_cGPUS_UBOUND(GasProductionStep) *100
         elseif ( ccalc_cGPUS_UBOUND(GasProductionStep) = inf
           and cpass_cGPUS_UBOUND(GasProductionStep) = inf ) then
                 0
         elseif ( ccalc_cGPUS_UBOUND(GasProductionStep) = inf ) then
                 inf
         elseif ( cpass_cGPUS_UBOUND(GasProductionStep) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cGTUS_EFDCOSTS {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cGTUS_EFDCOSTS(GasRegion,GasSeason) -
              cpass_cGTUS_EFDCOSTS(GasRegion,GasSeason) )
         ! /$ ccalc_cGTUS_EFDCOSTS(GasRegion,GasSeason) *100
           }
       }
       Parameter cdiff_cGTUS_rCARBONXXle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cGTUS_rCARBONXXle(GasRegion,GasSeason) -
              cpass_cGTUS_rCARBONXXle(GasRegion,GasSeason) )
         ! /$ ccalc_cGTUS_rCARBONXXle(GasRegion,GasSeason) *100
           }
       }
       Parameter cdiff_cGTUS_rCARBONXXn {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cGTUS_rCARBONXXn(GasRegion,GasSeason) -
              cpass_cGTUS_rCARBONXXn(GasRegion,GasSeason) )
         ! /$ ccalc_cGTUS_rCARBONXXn(GasRegion,GasSeason) *100
           }
       }
       Parameter cdiff_cGTUS_rNGle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
           Definition: { 
            ( ccalc_cGTUS_rNGle(GasRegion,GasSeason) -
              cpass_cGTUS_rNGle(GasRegion,GasSeason) )
         ! /$ ccalc_cGTUS_rNGle(GasRegion,GasSeason) *100
           }
       }
       Parameter cdiff_cGTUS_rS_NGUSle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
           Definition: { 
            ( ccalc_cGTUS_rS_NGUSle(GasRegion,GasSeason) -
              cpass_cGTUS_rS_NGUSle(GasRegion,GasSeason) )
         ! /$ ccalc_cGTUS_rS_NGUSle(GasRegion,GasSeason) *100
           }
       }
       Parameter cdiff_cH_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cH_EFDCOSTS(PlantGroup,Season,Slice) -
              cpass_cH_EFDCOSTS(PlantGroup,Season,Slice) )
         ! /$ ccalc_cH_EFDCOSTS(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cH_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            ( ccalc_cH_rENeq(PlantGroup,Season,Slice) -
              cpass_cH_rENeq(PlantGroup,Season,Slice) )
         ! /$ ccalc_cH_rENeq(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cH_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            ( ccalc_cH_rENle(PlantGroup,Season,Slice) -
              cpass_cH_rENle(PlantGroup,Season,Slice) )
         ! /$ ccalc_cH_rENle(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cH_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: { 
            ( ccalc_cH_rFle(PlantGroup,Season,Slice) -
              cpass_cH_rFle(PlantGroup,Season,Slice) )
         ! /$ ccalc_cH_rFle(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cH_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
              cpass_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
         ! /$ ccalc_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cH_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
              cpass_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
         ! /$ ccalc_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cH_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cH_rP2_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: { 
            ( ccalc_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) -
              cpass_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) )
         ! /$ ccalc_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) *100
           }
       }
       Parameter cdiff_cH_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: { 
            ( ccalc_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) -
              cpass_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) )
         ! /$ ccalc_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) *100
           }
       }
       Parameter cdiff_cH_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            ( ccalc_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) -
              cpass_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) )
         ! /$ ccalc_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *100
           }
       }
       Parameter cdiff_cH_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cH_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cH_UBOUND(PlantGroup,Season,Slice) <> inf
           and cpass_cH_UBOUND(PlantGroup,Season,Slice) <> inf ) then
            ( ccalc_cH_UBOUND(PlantGroup,Season,Slice) -
              cpass_cH_UBOUND(PlantGroup,Season,Slice) )
         ! /$ ccalc_cH_UBOUND(PlantGroup,Season,Slice) *100
         elseif ( ccalc_cH_UBOUND(PlantGroup,Season,Slice) = inf
           and cpass_cH_UBOUND(PlantGroup,Season,Slice) = inf ) then
                 0
         elseif ( ccalc_cH_UBOUND(PlantGroup,Season,Slice) = inf ) then
                 inf
         elseif ( cpass_cH_UBOUND(PlantGroup,Season,Slice) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cI_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cI_EFDCOSTS(PlantGroup,Season,Slice) -
              cpass_cI_EFDCOSTS(PlantGroup,Season,Slice) )
         ! /$ ccalc_cI_EFDCOSTS(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cI_LBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cI_LBOUND(PlantGroup,Season,Slice) -
              cpass_cI_LBOUND(PlantGroup,Season,Slice) )
         ! /$ ccalc_cI_LBOUND(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cI_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
              cpass_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
         ! /$ ccalc_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cI_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
              cpass_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
         ! /$ ccalc_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cI_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cI_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cI_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cI_UBOUND(PlantGroup,Season,Slice) <> inf
           and cpass_cI_UBOUND(PlantGroup,Season,Slice) <> inf ) then
            ( ccalc_cI_UBOUND(PlantGroup,Season,Slice) -
              cpass_cI_UBOUND(PlantGroup,Season,Slice) )
         ! /$ ccalc_cI_UBOUND(PlantGroup,Season,Slice) *100
         elseif ( ccalc_cI_UBOUND(PlantGroup,Season,Slice) = inf
           and cpass_cI_UBOUND(PlantGroup,Season,Slice) = inf ) then
                 0
         elseif ( ccalc_cI_UBOUND(PlantGroup,Season,Slice) = inf ) then
                 inf
         elseif ( cpass_cI_UBOUND(PlantGroup,Season,Slice) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cJ_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            ( ccalc_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            ( ccalc_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf
           and cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
            ( ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
         elseif ( ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf
           and cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                 0
         elseif ( ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                 inf
         elseif ( cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cJ_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) -
              cpass_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            ( ccalc_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cJ_rCBle(PlantGroup,Season,OperatingMode) -
              cpass_cJ_rCBle(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rCBle(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            ( ccalc_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            ( ccalc_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            ( ccalc_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            ( ccalc_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            ( ccalc_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            ( ccalc_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            ( ccalc_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
              cpass_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
         ! /$ ccalc_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cJ_rMRXge(PlantGroup,Season,OperatingMode) -
              cpass_cJ_rMRXge(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rMRXge(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
              cpass_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
         ! /$ ccalc_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cJ_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) <> inf
           and cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
            ( ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) -
              cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) *100
         elseif ( ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) = inf
           and cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 0
         elseif ( ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 inf
         elseif ( cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cJX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cJX_EFDCOSTS(PlantGroup,Season) -
              cpass_cJX_EFDCOSTS(PlantGroup,Season) )
         ! /$ ccalc_cJX_EFDCOSTS(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cJX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) -
              cpass_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) )
         ! /$ ccalc_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cJX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cJX_rCBle(PlantGroup,Season) -
              cpass_cJX_rCBle(PlantGroup,Season) )
         ! /$ ccalc_cJX_rCBle(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cJX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            ( ccalc_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) -
              cpass_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) )
         ! /$ ccalc_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cJX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cJX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cJX_rMRXge(PlantGroup,Season) -
              cpass_cJX_rMRXge(PlantGroup,Season) )
         ! /$ ccalc_cJX_rMRXge(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cJX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cJX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cJX_UBOUND(PlantGroup,Season) <> inf
           and cpass_cJX_UBOUND(PlantGroup,Season) <> inf ) then
            ( ccalc_cJX_UBOUND(PlantGroup,Season) -
              cpass_cJX_UBOUND(PlantGroup,Season) )
         ! /$ ccalc_cJX_UBOUND(PlantGroup,Season) *100
         elseif ( ccalc_cJX_UBOUND(PlantGroup,Season) = inf
           and cpass_cJX_UBOUND(PlantGroup,Season) = inf ) then
                 0
         elseif ( ccalc_cJX_UBOUND(PlantGroup,Season) = inf ) then
                 inf
         elseif ( cpass_cJX_UBOUND(PlantGroup,Season) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cJX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cJX_rELNOX0n(INOXP,PlantGroup,Season) -
              cpass_cJX_rELNOX0n(INOXP,PlantGroup,Season) )
         ! /$ ccalc_cJX_rELNOX0n(INOXP,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cJX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) -
              cpass_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) )
         ! /$ ccalc_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cKX_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
              cpass_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
         ! /$ ccalc_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
           }
       }
       Parameter cdiff_cKX_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            ( ccalc_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
              cpass_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
         ! /$ ccalc_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
           }
       }
       Parameter cdiff_cMB_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cMB_EFDCOSTS(PlantGroup,Season) -
              cpass_cMB_EFDCOSTS(PlantGroup,Season) )
         ! /$ ccalc_cMB_EFDCOSTS(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cMB_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cMB_rCBle(PlantGroup,Season) -
              cpass_cMB_rCBle(PlantGroup,Season) )
         ! /$ ccalc_cMB_rCBle(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cMB_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
           Definition: { 
            ( ccalc_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) -
              cpass_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) )
         ! /$ ccalc_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cMB_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cMB_UBOUND(PlantGroup,Season) <> inf
           and cpass_cMB_UBOUND(PlantGroup,Season) <> inf ) then
            ( ccalc_cMB_UBOUND(PlantGroup,Season) -
              cpass_cMB_UBOUND(PlantGroup,Season) )
         ! /$ ccalc_cMB_UBOUND(PlantGroup,Season) *100
         elseif ( ccalc_cMB_UBOUND(PlantGroup,Season) = inf
           and cpass_cMB_UBOUND(PlantGroup,Season) = inf ) then
                 0
         elseif ( ccalc_cMB_UBOUND(PlantGroup,Season) = inf ) then
                 inf
         elseif ( cpass_cMB_UBOUND(PlantGroup,Season) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cMERC__rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: { 
            ( ccalc_cMERC__rMERC_le(PlantType_ECP,nHGCODE) -
              cpass_cMERC__rMERC_le(PlantType_ECP,nHGCODE) )
         ! /$ ccalc_cMERC__rMERC_le(PlantType_ECP,nHGCODE) *100
           }
       }
       Parameter cdiff_cMERC__rMERCURYle {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) -
              cpass_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) )
         ! /$ ccalc_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) *100
           }
       }
       Parameter cdiff_cMERC__rMERCURYn {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) -
              cpass_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) )
         ! /$ ccalc_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) *100
           }
       }
       Parameter cdiff_cMERC_DS_rMERC_DSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
           Definition: { 
            ( ccalc_cMERC_DS_rMERC_DSle(nHGCODE) -
              cpass_cMERC_DS_rMERC_DSle(nHGCODE) )
         ! /$ ccalc_cMERC_DS_rMERC_DSle(nHGCODE) *100
           }
       }
       Parameter cdiff_cMERC_DS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cMERC_DS_rMERCURYle(nHGCODE) -
              cpass_cMERC_DS_rMERCURYle(nHGCODE) )
         ! /$ ccalc_cMERC_DS_rMERCURYle(nHGCODE) *100
           }
       }
       Parameter cdiff_cMERC_DS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cMERC_DS_rMERCURYn(nHGCODE) -
              cpass_cMERC_DS_rMERCURYn(nHGCODE) )
         ! /$ ccalc_cMERC_DS_rMERCURYn(nHGCODE) *100
           }
       }
       Parameter cdiff_cMERC_RS_rMERC_RSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
           Definition: { 
            ( ccalc_cMERC_RS_rMERC_RSle(nHGCODE) -
              cpass_cMERC_RS_rMERC_RSle(nHGCODE) )
         ! /$ ccalc_cMERC_RS_rMERC_RSle(nHGCODE) *100
           }
       }
       Parameter cdiff_cMERC_RS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cMERC_RS_rMERCURYle(nHGCODE) -
              cpass_cMERC_RS_rMERCURYle(nHGCODE) )
         ! /$ ccalc_cMERC_RS_rMERCURYle(nHGCODE) *100
           }
       }
       Parameter cdiff_cMERC_RS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cMERC_RS_rMERCURYn(nHGCODE) -
              cpass_cMERC_RS_rMERCURYn(nHGCODE) )
         ! /$ ccalc_cMERC_RS_rMERCURYn(nHGCODE) *100
           }
       }
       Parameter cdiff_cMVS_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) -
              cpass_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) )
         ! /$ ccalc_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
           }
       }
       Parameter cdiff_cMVS_rMVSO2le {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
           Definition: { 
            ( ccalc_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) -
              cpass_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) )
         ! /$ ccalc_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
           }
       }
       Parameter cdiff_cMVS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
           Definition: { 
            ( ccalc_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) -
              cpass_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) )
         ! /$ ccalc_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
           }
       }
       Parameter cdiff_cMVSO2_EFDCOSTS {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) -
              cpass_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) )
         ! /$ ccalc_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) *100
           }
       }
       Parameter cdiff_cMVSO2_rSULFURle {
           IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            ( ccalc_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) -
              cpass_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) )
         ! /$ ccalc_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) *100
           }
       }
       Parameter cdiff_cMVSO2_UBOUND {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) <> inf
           and cpass_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) <> inf ) then
            ( ccalc_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) -
              cpass_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) )
         ! /$ ccalc_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) *100
         elseif ( ccalc_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) = inf
           and cpass_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) = inf ) then
                 0
         elseif ( ccalc_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) = inf ) then
                 inf
         elseif ( cpass_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cNOT_EFDCOSTS {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) -
              cpass_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) )
         ! /$ ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) *100
           }
       }
       Parameter cdiff_cNOT_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            ( ccalc_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) -
              cpass_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) )
         ! /$ ccalc_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) *100
           }
       }
       Parameter cdiff_cNOT_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: { 
            ( ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) -
              cpass_cNOT_rZOTHRge(OGSMRegion,OGSMSector) )
         ! /$ ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) *100
           }
       }
       Parameter cdiff_cNOT_UBOUND {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) <> inf
           and cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) <> inf ) then
            ( ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) -
              cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) )
         ! /$ ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) *100
         elseif ( ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) = inf
           and cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) = inf ) then
                 0
         elseif ( ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) = inf ) then
                 inf
         elseif ( cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cNOTSF_EFDCOSTS {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cNOTSF_EFDCOSTS(OGSMRegion) -
              cpass_cNOTSF_EFDCOSTS(OGSMRegion) )
         ! /$ ccalc_cNOTSF_EFDCOSTS(OGSMRegion) *100
           }
       }
       Parameter cdiff_cNOTSF_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            ( ccalc_cNOTSF_rZOGSMeq(OGSMRegion) -
              cpass_cNOTSF_rZOGSMeq(OGSMRegion) )
         ! /$ ccalc_cNOTSF_rZOGSMeq(OGSMRegion) *100
           }
       }
       Parameter cdiff_cNSR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) -
              cpass_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) )
         ! /$ ccalc_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) *100
           }
       }
       Parameter cdiff_cNSR_rZFLRSeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) -
              cpass_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) )
         ! /$ ccalc_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) *100
           }
       }
       Parameter cdiff_cNSR_rZFLRSge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cNSR_rZFLRSge(FuelRegion,OGSMRegion) -
              cpass_cNSR_rZFLRSge(FuelRegion,OGSMRegion) )
         ! /$ ccalc_cNSR_rZFLRSge(FuelRegion,OGSMRegion) *100
           }
       }
       Parameter cdiff_cNSR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            ( ccalc_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) -
              cpass_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) )
         ! /$ ccalc_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) *100
           }
       }
       Parameter cdiff_cNSX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cNSX_EFDCOSTS(FuelRegion) -
              cpass_cNSX_EFDCOSTS(FuelRegion) )
         ! /$ ccalc_cNSX_EFDCOSTS(FuelRegion) *100
           }
       }
       Parameter cdiff_cNSX_rZFLRSeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cNSX_rZFLRSeq(FuelRegion) -
              cpass_cNSX_rZFLRSeq(FuelRegion) )
         ! /$ ccalc_cNSX_rZFLRSeq(FuelRegion) *100
           }
       }
       Parameter cdiff_cNSX_rZFLRSge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cNSX_rZFLRSge(FuelRegion) -
              cpass_cNSX_rZFLRSge(FuelRegion) )
         ! /$ ccalc_cNSX_rZFLRSge(FuelRegion) *100
           }
       }
       Parameter cdiff_cNTO_EFDCOSTS {
           IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) -
              cpass_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) )
         ! /$ ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
           }
       }
       Parameter cdiff_cNTO_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            ( ccalc_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) -
              cpass_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) )
         ! /$ ccalc_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
           }
       }
       Parameter cdiff_cNTO_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: { 
            ( ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) -
              cpass_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) )
         ! /$ ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
           }
       }
       Parameter cdiff_cNTR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) -
              cpass_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) )
         ! /$ ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) *100
           }
       }
       Parameter cdiff_cNTR_rZFLRGeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) -
              cpass_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) )
         ! /$ ccalc_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) *100
           }
       }
       Parameter cdiff_cNTR_rZFLRGge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cNTR_rZFLRGge(FuelRegion,OGSMRegion) -
              cpass_cNTR_rZFLRGge(FuelRegion,OGSMRegion) )
         ! /$ ccalc_cNTR_rZFLRGge(FuelRegion,OGSMRegion) *100
           }
       }
       Parameter cdiff_cNTR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            ( ccalc_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) -
              cpass_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) )
         ! /$ ccalc_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) *100
           }
       }
       Parameter cdiff_cNTX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cNTX_EFDCOSTS(FuelRegion) -
              cpass_cNTX_EFDCOSTS(FuelRegion) )
         ! /$ ccalc_cNTX_EFDCOSTS(FuelRegion) *100
           }
       }
       Parameter cdiff_cNTX_rZFLRGeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cNTX_rZFLRGeq(FuelRegion) -
              cpass_cNTX_rZFLRGeq(FuelRegion) )
         ! /$ ccalc_cNTX_rZFLRGeq(FuelRegion) *100
           }
       }
       Parameter cdiff_cNTX_rZFLRGge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cNTX_rZFLRGge(FuelRegion) -
              cpass_cNTX_rZFLRGge(FuelRegion) )
         ! /$ ccalc_cNTX_rZFLRGge(FuelRegion) *100
           }
       }
       Parameter cdiff_cO_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            ( ccalc_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            ( ccalc_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            ( ccalc_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            ( ccalc_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            ( ccalc_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            ( ccalc_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            ( ccalc_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            ( ccalc_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf
           and cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
            ( ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
         elseif ( ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf
           and cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                 0
         elseif ( ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                 inf
         elseif ( cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cO_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) -
              cpass_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) -
              cpass_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            ( ccalc_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) -
              cpass_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) -
              cpass_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) -
              cpass_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cO_rCBle(PlantGroup,Season,OperatingMode) -
              cpass_cO_rCBle(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rCBle(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            ( ccalc_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            ( ccalc_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            ( ccalc_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            ( ccalc_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) -
              cpass_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) -
              cpass_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            ( ccalc_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            ( ccalc_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            ( ccalc_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
              cpass_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
              cpass_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
              cpass_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
         ! /$ ccalc_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cO_rMRXge(PlantGroup,Season,OperatingMode) -
              cpass_cO_rMRXge(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rMRXge(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
              cpass_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
         ! /$ ccalc_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cO_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) <> inf
           and cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
            ( ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) -
              cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) *100
         elseif ( ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) = inf
           and cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 0
         elseif ( ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 inf
         elseif ( cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cOX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cOX_EFDCOSTS(PlantGroup,Season) -
              cpass_cOX_EFDCOSTS(PlantGroup,Season) )
         ! /$ ccalc_cOX_EFDCOSTS(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cOX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) -
              cpass_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) )
         ! /$ ccalc_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cOX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cOX_rCBle(PlantGroup,Season) -
              cpass_cOX_rCBle(PlantGroup,Season) )
         ! /$ ccalc_cOX_rCBle(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cOX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cOX_rELNOX0n(INOXP,PlantGroup,Season) -
              cpass_cOX_rELNOX0n(INOXP,PlantGroup,Season) )
         ! /$ ccalc_cOX_rELNOX0n(INOXP,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) -
              cpass_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) )
         ! /$ ccalc_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cOX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            ( ccalc_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) -
              cpass_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) )
         ! /$ ccalc_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cOX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cOX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cOX_rMRXge(PlantGroup,Season) -
              cpass_cOX_rMRXge(PlantGroup,Season) )
         ! /$ ccalc_cOX_rMRXge(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cOX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cOX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cOX_UBOUND(PlantGroup,Season) <> inf
           and cpass_cOX_UBOUND(PlantGroup,Season) <> inf ) then
            ( ccalc_cOX_UBOUND(PlantGroup,Season) -
              cpass_cOX_UBOUND(PlantGroup,Season) )
         ! /$ ccalc_cOX_UBOUND(PlantGroup,Season) *100
         elseif ( ccalc_cOX_UBOUND(PlantGroup,Season) = inf
           and cpass_cOX_UBOUND(PlantGroup,Season) = inf ) then
                 0
         elseif ( ccalc_cOX_UBOUND(PlantGroup,Season) = inf ) then
                 inf
         elseif ( cpass_cOX_UBOUND(PlantGroup,Season) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cRHS_rCARBONXXle {
           Text: "OML Columns: RHSEFD and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cRHS_rCARBONXXle -
              cpass_cRHS_rCARBONXXle )
         ! /$ ccalc_cRHS_rCARBONXXle *100
           }
       }
       Parameter cdiff_cRHS_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cRHS_rCBle(PlantGroup,Season) -
              cpass_cRHS_rCBle(PlantGroup,Season) )
         ! /$ ccalc_cRHS_rCBle(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cRHS_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            ( ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) -
              cpass_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) )
         ! /$ ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) *100
           }
       }
       Parameter cdiff_cRHS_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cRHS_rCO2QNRle(SupplyRegion_ALT2) -
              cpass_cRHS_rCO2QNRle(SupplyRegion_ALT2) )
         ! /$ ccalc_cRHS_rCO2QNRle(SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cRHS_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            ( ccalc_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) -
              cpass_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) )
         ! /$ ccalc_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
           }
       }
       Parameter cdiff_cRHS_rENeq {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: { 
            ( ccalc_cRHS_rENeq(PlantGroup,Season) -
              cpass_cRHS_rENeq(PlantGroup,Season) )
         ! /$ ccalc_cRHS_rENeq(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cRHS_rENle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: { 
            ( ccalc_cRHS_rENle(PlantGroup,Season) -
              cpass_cRHS_rENle(PlantGroup,Season) )
         ! /$ ccalc_cRHS_rENle(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cRHS_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
           Definition: { 
            ( ccalc_cRHS_rEXle(SupplyRegion,Season,Slice) -
              cpass_cRHS_rEXle(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cRHS_rEXle(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cRHS_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
           Definition: { 
            ( ccalc_cRHS_rFle(PlantGroup,Season,Slice) -
              cpass_cRHS_rFle(PlantGroup,Season,Slice) )
         ! /$ ccalc_cRHS_rFle(PlantGroup,Season,Slice) *100
           }
       }
       Parameter cdiff_cRHS_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
           Definition: { 
            ( ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) -
              cpass_cRHS_rIMle(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cRHS_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            ( ccalc_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
              cpass_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
         ! /$ ccalc_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
           }
       }
       Parameter cdiff_cRHS_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cRHS_rLDge(SupplyRegion,Season,Slice) -
              cpass_cRHS_rLDge(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cRHS_rLDge(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cRHS_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
           Definition: { 
            ( ccalc_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) -
              cpass_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) )
         ! /$ ccalc_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) *100
           }
       }
       Parameter cdiff_cRHS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: RHSEFD and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cRHS_rMERCURYle(nHGCODE) -
              cpass_cRHS_rMERCURYle(nHGCODE) )
         ! /$ ccalc_cRHS_rMERCURYle(nHGCODE) *100
           }
       }
       Parameter cdiff_cRHS_rMRXge {
           IndexDomain: (PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cRHS_rMRXge(PlantGroup) -
              cpass_cRHS_rMRXge(PlantGroup) )
         ! /$ ccalc_cRHS_rMRXge(PlantGroup) *100
           }
       }
       Parameter cdiff_cRHS_rMVSO2le {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
           Definition: { 
            ( ccalc_cRHS_rMVSO2le(CoalDemandRegion) -
              cpass_cRHS_rMVSO2le(CoalDemandRegion) )
         ! /$ ccalc_cRHS_rMVSO2le(CoalDemandRegion) *100
           }
       }
       Parameter cdiff_cRHS_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
           Definition: { 
            ( ccalc_cRHS_rP2le(Slice,SupplyRegion,Season) -
              cpass_cRHS_rP2le(Slice,SupplyRegion,Season) )
         ! /$ ccalc_cRHS_rP2le(Slice,SupplyRegion,Season) *100
           }
       }
       Parameter cdiff_cRHS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
           Definition: { 
            ( ccalc_cRHS_rSULFURCRle(CoalDemandRegion) -
              cpass_cRHS_rSULFURCRle(CoalDemandRegion) )
         ! /$ ccalc_cRHS_rSULFURCRle(CoalDemandRegion) *100
           }
       }
       Parameter cdiff_cRHS_rSULFURle {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
           Definition: { 
            ( ccalc_cRHS_rSULFURle(SO2Region) -
              cpass_cRHS_rSULFURle(SO2Region) )
         ! /$ ccalc_cRHS_rSULFURle(SO2Region) *100
           }
       }
       Parameter cdiff_cRHS_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            ( ccalc_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
              cpass_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
         ! /$ ccalc_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
           }
       }
       Parameter cdiff_cRHS_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            ( ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) -
              cpass_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) )
         ! /$ ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) *100
           }
       }
       Parameter cdiff_cRHS_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
           Definition: { 
            ( ccalc_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
           }
       }
       Parameter cdiff_cRHS_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
           Definition: { 
            ( ccalc_cRHS_rZOGSMeq(OGSMRegion) -
              cpass_cRHS_rZOGSMeq(OGSMRegion) )
         ! /$ ccalc_cRHS_rZOGSMeq(OGSMRegion) *100
           }
       }
       Parameter cdiff_cRPUS_EFDCOSTS {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cRPUS_EFDCOSTS(ResidProductionStep) -
              cpass_cRPUS_EFDCOSTS(ResidProductionStep) )
         ! /$ ccalc_cRPUS_EFDCOSTS(ResidProductionStep) *100
           }
       }
       Parameter cdiff_cRPUS_rS_RSUSle {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
           Definition: { 
            ( ccalc_cRPUS_rS_RSUSle(ResidProductionStep) -
              cpass_cRPUS_rS_RSUSle(ResidProductionStep) )
         ! /$ ccalc_cRPUS_rS_RSUSle(ResidProductionStep) *100
           }
       }
       Parameter cdiff_cRTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cRTUS_EFDCOSTS(OilRegion) -
              cpass_cRTUS_EFDCOSTS(OilRegion) )
         ! /$ ccalc_cRTUS_EFDCOSTS(OilRegion) *100
           }
       }
       Parameter cdiff_cRTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cRTUS_rCARBONXXle(OilRegion) -
              cpass_cRTUS_rCARBONXXle(OilRegion) )
         ! /$ ccalc_cRTUS_rCARBONXXle(OilRegion) *100
           }
       }
       Parameter cdiff_cRTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            ( ccalc_cRTUS_rCARBONXXn(OilRegion) -
              cpass_cRTUS_rCARBONXXn(OilRegion) )
         ! /$ ccalc_cRTUS_rCARBONXXn(OilRegion) *100
           }
       }
       Parameter cdiff_cRTUS_rMERC_RSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
           Definition: { 
            ( ccalc_cRTUS_rMERC_RSle(nHGCODE,OilRegion) -
              cpass_cRTUS_rMERC_RSle(nHGCODE,OilRegion) )
         ! /$ ccalc_cRTUS_rMERC_RSle(nHGCODE,OilRegion) *100
           }
       }
       Parameter cdiff_cRTUS_rRSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
           Definition: { 
            ( ccalc_cRTUS_rRSle(CensusRegion,OilRegion) -
              cpass_cRTUS_rRSle(CensusRegion,OilRegion) )
         ! /$ ccalc_cRTUS_rRSle(CensusRegion,OilRegion) *100
           }
       }
       Parameter cdiff_cRTUS_rS_RSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
           Definition: { 
            ( ccalc_cRTUS_rS_RSUSle(OilRegion) -
              cpass_cRTUS_rS_RSUSle(OilRegion) )
         ! /$ ccalc_cRTUS_rS_RSUSle(OilRegion) *100
           }
       }
       Parameter cdiff_cRTUS_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
           Definition: { 
            ( ccalc_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) -
              cpass_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) )
         ! /$ ccalc_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) *100
           }
       }
       Parameter cdiff_cRTUS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: { 
            ( ccalc_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) -
              cpass_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) )
         ! /$ ccalc_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) *100
           }
       }
       Parameter cdiff_cRTUS_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: { 
            ( ccalc_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) -
              cpass_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) )
         ! /$ ccalc_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) *100
           }
       }
       Parameter cdiff_cS2_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cS2_rLDge(SupplyRegion,Season,Slice) -
              cpass_cS2_rLDge(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cS2_rLDge(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cS2_rP2_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: { 
            ( ccalc_cS2_rP2_le(SupplyRegion,Season,Slice) -
              cpass_cS2_rP2_le(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cS2_rP2_le(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cS2_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: { 
            ( ccalc_cS2_rP2le(Slice,SupplyRegion,Season) -
              cpass_cS2_rP2le(Slice,SupplyRegion,Season) )
         ! /$ ccalc_cS2_rP2le(Slice,SupplyRegion,Season) *100
           }
       }
       Parameter cdiff_cS2_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) <> inf
           and cpass_cS2_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
            ( ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) -
              cpass_cS2_UBOUND(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) *100
         elseif ( ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) = inf
           and cpass_cS2_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 0
         elseif ( ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 inf
         elseif ( cpass_cS2_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cSC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) -
              cpass_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) )
         ! /$ ccalc_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
           }
       }
       Parameter cdiff_cSC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            ( ccalc_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) -
              cpass_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) )
         ! /$ ccalc_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cSC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) -
              cpass_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) )
         ! /$ ccalc_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cSC_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) -
              cpass_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) )
         ! /$ ccalc_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cSC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            ( ccalc_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) -
              cpass_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) )
         ! /$ ccalc_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *100
           }
       }
       Parameter cdiff_cSPx_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) -
              cpass_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cSPx_LBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) -
              cpass_cSPx_LBOUND(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cSPx_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cSPx_rSRge(SupplyRegion,Season,Slice) -
              cpass_cSPx_rSRge(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cSPx_rSRge(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cSPx_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) <> inf
           and cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
            ( ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) -
              cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) *100
         elseif ( ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) = inf
           and cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 0
         elseif ( ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 inf
         elseif ( cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cSR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
           }
       }
       Parameter cdiff_cSR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
           }
       }
       Parameter cdiff_cSR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
           }
       }
       Parameter cdiff_cSR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: { 
            ( ccalc_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
              cpass_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
         ! /$ ccalc_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
           }
       }
       Parameter cdiff_cSR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: { 
            ( ccalc_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
              cpass_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
         ! /$ ccalc_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
           }
       }
       Parameter cdiff_cSR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
              cpass_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
         ! /$ ccalc_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
           }
       }
       Parameter cdiff_cSR_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
              cpass_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
         ! /$ ccalc_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
           }
       }
       Parameter cdiff_cSR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
           and cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
            ( ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
         elseif ( ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf
           and cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                 0
         elseif ( ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                 inf
         elseif ( cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cST_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cST_rLDge(SupplyRegion,Season,Slice) -
              cpass_cST_rLDge(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cST_rLDge(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cST_rPS_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            ( ccalc_cST_rPS_le(SupplyRegion,Season,Slice) -
              cpass_cST_rPS_le(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cST_rPS_le(SupplyRegion,Season,Slice) *100
           }
       }
       Parameter cdiff_cST_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cST_UBOUND(SupplyRegion,Season,Slice) <> inf
           and cpass_cST_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
            ( ccalc_cST_UBOUND(SupplyRegion,Season,Slice) -
              cpass_cST_UBOUND(SupplyRegion,Season,Slice) )
         ! /$ ccalc_cST_UBOUND(SupplyRegion,Season,Slice) *100
         elseif ( ccalc_cST_UBOUND(SupplyRegion,Season,Slice) = inf
           and cpass_cST_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 0
         elseif ( ccalc_cST_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 inf
         elseif ( cpass_cST_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cSULF_EFDCOSTS {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) -
              cpass_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) )
         ! /$ ccalc_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) *100
           }
       }
       Parameter cdiff_cSULF_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
           Definition: { 
            ( ccalc_cSULF_rSULFle(PlantType_ECP,SO2Region) -
              cpass_cSULF_rSULFle(PlantType_ECP,SO2Region) )
         ! /$ ccalc_cSULF_rSULFle(PlantType_ECP,SO2Region) *100
           }
       }
       Parameter cdiff_cSULF_rSULFURle {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            ( ccalc_cSULF_rSULFURle(SO2Region,PlantType_ECP) -
              cpass_cSULF_rSULFURle(SO2Region,PlantType_ECP) )
         ! /$ ccalc_cSULF_rSULFURle(SO2Region,PlantType_ECP) *100
           }
       }
       Parameter cdiff_cSULF_rSULFURn {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            ( ccalc_cSULF_rSULFURn(SO2Region,PlantType_ECP) -
              cpass_cSULF_rSULFURn(SO2Region,PlantType_ECP) )
         ! /$ ccalc_cSULF_rSULFURn(SO2Region,PlantType_ECP) *100
           }
       }
       Parameter cdiff_cT_STOCK__LBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: LBOUND";
           Definition: { 
            ( ccalc_cT_STOCK__LBOUND -
              cpass_cT_STOCK__LBOUND )
         ! /$ ccalc_cT_STOCK__LBOUND *100
           }
       }
       Parameter cdiff_cT_STOCK__rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cT_STOCK__rMERCURYle(nHGCODE) -
              cpass_cT_STOCK__rMERCURYle(nHGCODE) )
         ! /$ ccalc_cT_STOCK__rMERCURYle(nHGCODE) *100
           }
       }
       Parameter cdiff_cT_STOCK__rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: { 
            ( ccalc_cT_STOCK__rMERCURYn(nHGCODE) -
              cpass_cT_STOCK__rMERCURYn(nHGCODE) )
         ! /$ ccalc_cT_STOCK__rMERCURYn(nHGCODE) *100
           }
       }
       Parameter cdiff_cT_STOCK__rSULFURn {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
           Definition: { 
            ( ccalc_cT_STOCK__rSULFURn(SO2Region) -
              cpass_cT_STOCK__rSULFURn(SO2Region) )
         ! /$ ccalc_cT_STOCK__rSULFURn(SO2Region) *100
           }
       }
       Parameter cdiff_cT_STOCK__UBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cT_STOCK__UBOUND <> inf
           and cpass_cT_STOCK__UBOUND <> inf ) then
            ( ccalc_cT_STOCK__UBOUND -
              cpass_cT_STOCK__UBOUND )
         ! /$ ccalc_cT_STOCK__UBOUND *100
         elseif ( ccalc_cT_STOCK__UBOUND = inf
           and cpass_cT_STOCK__UBOUND = inf ) then
                 0
         elseif ( ccalc_cT_STOCK__UBOUND = inf ) then
                 inf
         elseif ( cpass_cT_STOCK__UBOUND = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cTC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) -
              cpass_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) )
         ! /$ ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
           }
       }
       Parameter cdiff_cTC_rCANIMPUSeq {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CANIMPUS";
           Definition: { 
            ( ccalc_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) -
              cpass_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) )
         ! /$ ccalc_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
           }
       }
       Parameter cdiff_cTC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            ( ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) -
              cpass_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) )
         ! /$ ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cTC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) -
              cpass_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) )
         ! /$ ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
           }
       }
       Parameter cdiff_cTC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            ( ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) -
              cpass_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) )
         ! /$ ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *100
           }
       }
       Parameter cdiff_cTR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
           }
       }
       Parameter cdiff_cTR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
           }
       }
       Parameter cdiff_cTR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
           }
       }
       Parameter cdiff_cTR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: { 
            ( ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
              cpass_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
         ! /$ ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
           }
       }
       Parameter cdiff_cTR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: { 
            ( ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
              cpass_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
         ! /$ ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
           }
       }
       Parameter cdiff_cTR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
              cpass_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
         ! /$ ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
           }
       }
       Parameter cdiff_cTR_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
           Definition: { 
            ( ccalc_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
           }
       }
       Parameter cdiff_cTR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
           and cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
            ( ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
              cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
         ! /$ ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
         elseif ( ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf
           and cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                 0
         elseif ( ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                 inf
         elseif ( cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cU_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            ( ccalc_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            ( ccalc_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            ( ccalc_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            ( ccalc_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            ( ccalc_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            ( ccalc_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            ( ccalc_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            ( ccalc_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf
           and cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
            ( ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) -
              cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) )
         ! /$ ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
         elseif ( ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf
           and cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                 0
         elseif ( ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                 inf
         elseif ( cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cU_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) -
              cpass_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) -
              cpass_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            ( ccalc_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) -
              cpass_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) -
              cpass_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            ( ccalc_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) -
              cpass_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cU_rCBle(PlantGroup,Season,OperatingMode) -
              cpass_cU_rCBle(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rCBle(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            ( ccalc_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            ( ccalc_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            ( ccalc_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            ( ccalc_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            ( ccalc_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) -
              cpass_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) -
              cpass_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            ( ccalc_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            ( ccalc_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
              cpass_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            ( ccalc_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
              cpass_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            ( ccalc_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
              cpass_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            ( ccalc_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
              cpass_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
              cpass_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
         ! /$ ccalc_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cU_rMRXge(PlantGroup,Season,OperatingMode) -
              cpass_cU_rMRXge(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rMRXge(PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
              cpass_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
         ! /$ ccalc_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            ( ccalc_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            ( ccalc_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) -
              cpass_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *100
           }
       }
       Parameter cdiff_cU_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) <> inf
           and cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
            ( ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) -
              cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) )
         ! /$ ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) *100
         elseif ( ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) = inf
           and cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 0
         elseif ( ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 inf
         elseif ( cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cUX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            ( ccalc_cUX_EFDCOSTS(PlantGroup,Season) -
              cpass_cUX_EFDCOSTS(PlantGroup,Season) )
         ! /$ ccalc_cUX_EFDCOSTS(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cUX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            ( ccalc_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) -
              cpass_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) )
         ! /$ ccalc_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cUX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            ( ccalc_cUX_rCBle(PlantGroup,Season) -
              cpass_cUX_rCBle(PlantGroup,Season) )
         ! /$ ccalc_cUX_rCBle(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cUX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            ( ccalc_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) -
              cpass_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) )
         ! /$ ccalc_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cUX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            ( ccalc_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cUX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            ( ccalc_cUX_rMRXge(PlantGroup,Season) -
              cpass_cUX_rMRXge(PlantGroup,Season) )
         ! /$ ccalc_cUX_rMRXge(PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cUX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            ( ccalc_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
              cpass_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
         ! /$ ccalc_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
           }
       }
       Parameter cdiff_cUX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
         if ( ccalc_cUX_UBOUND(PlantGroup,Season) <> inf
           and cpass_cUX_UBOUND(PlantGroup,Season) <> inf ) then
            ( ccalc_cUX_UBOUND(PlantGroup,Season) -
              cpass_cUX_UBOUND(PlantGroup,Season) )
         ! /$ ccalc_cUX_UBOUND(PlantGroup,Season) *100
         elseif ( ccalc_cUX_UBOUND(PlantGroup,Season) = inf
           and cpass_cUX_UBOUND(PlantGroup,Season) = inf ) then
                 0
         elseif ( ccalc_cUX_UBOUND(PlantGroup,Season) = inf ) then
                 inf
         elseif ( cpass_cUX_UBOUND(PlantGroup,Season) = inf ) then
                 -inf
         endif
           }
       }
       Parameter cdiff_cUX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            ( ccalc_cUX_rELNOX0n(INOXP,PlantGroup,Season) -
              cpass_cUX_rELNOX0n(INOXP,PlantGroup,Season) )
         ! /$ ccalc_cUX_rELNOX0n(INOXP,PlantGroup,Season) *100
           }
       }
       Parameter cdiff_cUX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            ( ccalc_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) -
              cpass_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) )
         ! /$ ccalc_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
           }
       }
     }
   DeclarationSection Comparison_Parameter_Declaration {
       Parameter cdiff_Delta;
       Parameter cdiffPct_Delta;
       Parameter compare_cACISPLY_EFDCOSTS {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cACISPLY_EFDCOSTS(numACI) $
              (Abs(cdiffPct_cACISPLY_EFDCOSTS(numACI)) > cdiffPct_Delta
               and Abs(cdiff_cACISPLY_EFDCOSTS(numACI)) > cdiff_Delta)
           }
       }
       Parameter compare_cACISPLY_rACICSTle {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
           Definition: { 
            cdiff_cACISPLY_rACICSTle(numACI) $
              (Abs(cdiffPct_cACISPLY_rACICSTle(numACI)) > cdiffPct_Delta
               and Abs(cdiff_cACISPLY_rACICSTle(numACI)) > cdiff_Delta)
           }
       }
       Parameter compare_cACISPLY_UBOUND {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cACISPLY_UBOUND(numACI) $
              (Abs(cdiffPct_cACISPLY_UBOUND(numACI)) > cdiffPct_Delta
               and Abs(cdiff_cACISPLY_UBOUND(numACI)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_EFDCOSTS {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiff_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rCARBONle {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rCARBONn {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rCARBONXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rCARBONXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rCARSEQXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQXX";
           Definition: { 
            cdiff_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rCFGn {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
           Definition: { 
            cdiff_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
           Definition: { 
            cdiff_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rDSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
           Definition: { 
            cdiff_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rNGle {
           IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
           Definition: { 
            cdiff_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rRSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
           Definition: { 
            cdiff_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cB_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
           Definition: { 
            cdiff_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
               and Abs(cdiff_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cBCTLN_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) $
              (Abs(cdiffPct_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)) > cdiffPct_Delta
               and Abs(cdiff_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)) > cdiff_Delta)
           }
       }
       Parameter compare_cBCTLN_rELNOX0n {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) $
              (Abs(cdiffPct_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason)) > cdiffPct_Delta
               and Abs(cdiff_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason)) > cdiff_Delta)
           }
       }
       Parameter compare_cBCTLN_rELNOXOTle {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)OT";
           Definition: { 
            cdiff_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) $
              (Abs(cdiffPct_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason)) > cdiffPct_Delta
               and Abs(cdiff_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason)) > cdiff_Delta)
           }
       }
       Parameter compare_cBCTLN_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) $
              (Abs(cdiffPct_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)) > cdiffPct_Delta
               and Abs(cdiff_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)) > cdiff_Delta)
           }
       }
       Parameter compare_cBiomassOtherUsage_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: LBOUND";
           Definition: { 
            cdiff_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) $
              (Abs(cdiffPct_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)) > cdiffPct_Delta
               and Abs(cdiff_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)) > cdiff_Delta)
           }
       }
       Parameter compare_cBiomassOtherUsage_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
           Definition: { 
            cdiff_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) $
              (Abs(cdiffPct_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector)) > cdiffPct_Delta
               and Abs(cdiff_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector)) > cdiff_Delta)
           }
       }
       Parameter compare_cBiomassOtherUsage_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: UBOUND";
           Definition: { 
            cdiff_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) $
              (Abs(cdiffPct_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)) > cdiffPct_Delta
               and Abs(cdiff_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)) > cdiff_Delta)
           }
       }
       Parameter compare_cBP_type_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) $
              (Abs(cdiffPct_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cBP_type_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
           Definition: { 
            cdiff_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) $
              (Abs(cdiffPct_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cBP_type_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
           Definition: { 
            cdiff_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) $
              (Abs(cdiffPct_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cBP_type_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) $
              (Abs(cdiffPct_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cC_Z_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
               and Abs(cdiff_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter compare_cC_Z_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            cdiff_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
               and Abs(cdiff_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARBNK_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cCARBNK_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARBNK_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARBNK_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARBNK_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARBNK_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARBNK_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARBNK_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARBNK_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARBNK_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARBNK_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARBNK_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARBNK_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARBNK_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARBNK_UBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARBNK_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARBONOT_LBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCARBONOT_LBOUND $
              (Abs(cdiffPct_cCARBONOT_LBOUND) > cdiffPct_Delta
               and Abs(cdiff_cCARBONOT_LBOUND) > cdiff_Delta)
           }
       }
       Parameter compare_cCARBONOT_rCARBONXXle {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cCARBONOT_rCARBONXXle $
              (Abs(cdiffPct_cCARBONOT_rCARBONXXle) > cdiffPct_Delta
               and Abs(cdiff_cCARBONOT_rCARBONXXle) > cdiff_Delta)
           }
       }
       Parameter compare_cCARBONOT_rCARBONXXn {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cCARBONOT_rCARBONXXn $
              (Abs(cdiffPct_cCARBONOT_rCARBONXXn) > cdiffPct_Delta
               and Abs(cdiff_cCARBONOT_rCARBONXXn) > cdiff_Delta)
           }
       }
       Parameter compare_cCARBONOT_UBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARBONOT_UBOUND $
              (Abs(cdiffPct_cCARBONOT_UBOUND) > cdiffPct_Delta
               and Abs(cdiff_cCARBONOT_UBOUND) > cdiff_Delta)
           }
       }
       Parameter compare_cCARDM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) $
              (Abs(cdiffPct_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARDM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARDM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARDM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) $
              (Abs(cdiffPct_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARECR_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cCARECR_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARECR_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARECR_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARECR_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARECR_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARECR_rCARBONle(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARECR_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARECR_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARECR_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARECR_UBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARECR_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARESC_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cCARESC_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARESC_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARESC_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARESC_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARESC_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARESC_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARESC_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARESC_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARESC_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARESC_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARESC_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARESC_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARESC_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARESC_rCARBONle(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARESC_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARESCXX_EFDCOSTS {
           Text: "OML Columns: CARESCXX and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cCARESCXX_EFDCOSTS $
              (Abs(cdiffPct_cCARESCXX_EFDCOSTS) > cdiffPct_Delta
               and Abs(cdiff_cCARESCXX_EFDCOSTS) > cdiff_Delta)
           }
       }
       Parameter compare_cCARESCXX_rCARBONXXle {
           Text: "OML Columns: CARESCXX and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cCARESCXX_rCARBONXXle $
              (Abs(cdiffPct_cCARESCXX_rCARBONXXle) > cdiffPct_Delta
               and Abs(cdiff_cCARESCXX_rCARBONXXle) > cdiff_Delta)
           }
       }
       Parameter compare_cCARESCXX_UBOUND {
           Text: "OML Columns: CARESCXX and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARESCXX_UBOUND $
              (Abs(cdiffPct_cCARESCXX_UBOUND) > cdiffPct_Delta
               and Abs(cdiff_cCARESCXX_UBOUND) > cdiff_Delta)
           }
       }
       Parameter compare_cCARFUE_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCARFUE_LBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARFUE_LBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARFUE_LBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARFUE_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARFUE_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARFUE_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARFUE_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARFUE_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARFUE_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARFUE_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARFUE_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARFUE_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARFUE_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARFUE_UBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARFUE_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARIM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) $
              (Abs(cdiffPct_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARIM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARIM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARIM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) $
              (Abs(cdiffPct_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARIND_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCARIND_LBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARIND_LBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARIND_LBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARIND_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARIND_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARIND_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARIND_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARIND_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARIND_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARIND_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARIND_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARIND_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARIND_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARIND_UBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARIND_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARLIM_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cCARLIM_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARLIM_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARLIM_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARLIM_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARLIM_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARLIM_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARLIM_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARLIM_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARLIM_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARLIM_rCARBONle(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARLIM_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARLIM_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARLIM_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARLIM_UBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARLIM_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCAROFF_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cCAROFF_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCAROFF_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCAROFF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCAROFF_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCAROFF_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCAROFF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCAROFF_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCAROFF_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCAROFF_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCAROFF_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_rCARBONle(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCAROFF_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCAROFF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCAROFF_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_UBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCAROFF_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCAROTH_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCAROTH_LBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCAROTH_LBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCAROTH_LBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCAROTH_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCAROTH_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCAROTH_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCAROTH_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCAROTH_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCAROTH_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCAROTH_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCAROTH_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCAROTH_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCAROTH_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCAROTH_UBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCAROTH_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARREF_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCARREF_LBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARREF_LBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARREF_LBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARREF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARREF_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARREF_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARREF_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARREF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARREF_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARREF_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARREF_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARREF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARREF_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARREF_UBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARREF_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARRSV_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cCARRSV_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARRSV_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARRSV_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARRSV_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARRSV_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARRSV_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARRSV_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARRSV_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARRSV_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARRSV_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_rCARBONle(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARRSV_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARRSV_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCARRSV_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_UBOUND(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARRSV_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARUTL_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARUTL_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARUTL_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARUTL_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARUTL_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiff_cCARUTL_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARUTL_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARUTL_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARUTL_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARUTL_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARUTL_rCARBONle(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARUTL_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCARUTL_rCARBONn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCARUTL_rCARBONn(CarbonRegion) $
              (Abs(cdiffPct_cCARUTL_rCARBONn(CarbonRegion)) > cdiffPct_Delta
               and Abs(cdiff_cCARUTL_rCARBONn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cCNIMPBUS_LBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCNIMPBUS_LBOUND $
              (Abs(cdiffPct_cCNIMPBUS_LBOUND) > cdiffPct_Delta
               and Abs(cdiff_cCNIMPBUS_LBOUND) > cdiff_Delta)
           }
       }
       Parameter compare_cCNIMPBUS_rCANIMPUSeq {
           Text: "OML Columns: CNIMPBUS and OML Rows: CANIMPUS";
           Definition: { 
            cdiff_cCNIMPBUS_rCANIMPUSeq $
              (Abs(cdiffPct_cCNIMPBUS_rCANIMPUSeq) > cdiffPct_Delta
               and Abs(cdiff_cCNIMPBUS_rCANIMPUSeq) > cdiff_Delta)
           }
       }
       Parameter compare_cCNIMPBUS_UBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCNIMPBUS_UBOUND $
              (Abs(cdiffPct_cCNIMPBUS_UBOUND) > cdiffPct_Delta
               and Abs(cdiff_cCNIMPBUS_UBOUND) > cdiff_Delta)
           }
       }
       Parameter compare_cCoalOtherUsage_LBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCoalOtherUsage_LBOUND(CoalSupplyCurve) $
              (Abs(cdiffPct_cCoalOtherUsage_LBOUND(CoalSupplyCurve)) > cdiffPct_Delta
               and Abs(cdiff_cCoalOtherUsage_LBOUND(CoalSupplyCurve)) > cdiff_Delta)
           }
       }
       Parameter compare_cCoalOtherUsage_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
           Definition: { 
            cdiff_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) $
              (Abs(cdiffPct_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType)) > cdiffPct_Delta
               and Abs(cdiff_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType)) > cdiff_Delta)
           }
       }
       Parameter compare_cCoalOtherUsage_UBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCoalOtherUsage_UBOUND(CoalSupplyCurve) $
              (Abs(cdiffPct_cCoalOtherUsage_UBOUND(CoalSupplyCurve)) > cdiffPct_Delta
               and Abs(cdiff_cCoalOtherUsage_UBOUND(CoalSupplyCurve)) > cdiff_Delta)
           }
       }
       Parameter compare_cCONCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCONCLB_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONCLB_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cCONCLB_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cCONCLB_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
           Definition: { 
            cdiff_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cCONCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCONCLB_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONCLB_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cCONCLB_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cCONNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCONNGB_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONNGB_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cCONNGB_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cCONNGB_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
           Definition: { 
            cdiff_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cCONNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCONNGB_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONNGB_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cCONNGB_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cCP_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) $
              (Abs(cdiffPct_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cCP_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
           Definition: { 
            cdiff_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) $
              (Abs(cdiffPct_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cCP_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) $
              (Abs(cdiffPct_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rACICSTle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
           Definition: { 
            cdiff_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rACIOMCSTn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
           Definition: { 
            cdiff_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rACIRMVXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
           Definition: { 
            cdiff_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
           Definition: { 
            cdiff_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) $
              (Abs(cdiffPct_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            cdiff_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) $
              (Abs(cdiffPct_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            cdiff_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: { 
            cdiff_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) $
              (Abs(cdiffPct_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
           Definition: { 
            cdiff_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
           Definition: { 
            cdiff_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) $
              (Abs(cdiffPct_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiff_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiff_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            cdiff_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCT_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
               and Abs(cdiff_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLCO_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLCO_rCARBONle {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLCO_rCARBONn {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLCO_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLCO_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLCO_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLHG_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLHG_rMERCURYle {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLHG_rMERCURYn {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLHG_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLS_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) $
              (Abs(cdiffPct_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)) > cdiffPct_Delta
               and Abs(cdiff_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLS_rSULFURle {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiff_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLS_rSULFURn {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiff_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLS_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) $
              (Abs(cdiffPct_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)) > cdiffPct_Delta
               and Abs(cdiff_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLSO2_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLSO2_LBOUND(CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLSO2_LBOUND(CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLSO2_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiff_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLSO2_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiff_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cCTLSO2_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLSO2_UBOUND(CoalDemandRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cCTLSO2_UBOUND(CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_LBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cD_LBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_LBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_LBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiff_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiff_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            cdiff_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cD_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cD_UBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_UBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cD_UBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cDPUS_EFDCOSTS {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cDPUS_EFDCOSTS(DistillateProductionStep) $
              (Abs(cdiffPct_cDPUS_EFDCOSTS(DistillateProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cDPUS_EFDCOSTS(DistillateProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cDPUS_rS_DSUSle {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
           Definition: { 
            cdiff_cDPUS_rS_DSUSle(DistillateProductionStep) $
              (Abs(cdiffPct_cDPUS_rS_DSUSle(DistillateProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cDPUS_rS_DSUSle(DistillateProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cDPVCP_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cDPVCP_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cDPVCP_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cDPVCP_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cDPVCP_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) $
              (Abs(cdiffPct_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource)) > cdiffPct_Delta
               and Abs(cdiff_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource)) > cdiff_Delta)
           }
       }
       Parameter compare_cDPVCP_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) $
              (Abs(cdiffPct_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource)) > cdiffPct_Delta
               and Abs(cdiff_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource)) > cdiff_Delta)
           }
       }
       Parameter compare_cDPVCP_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cDPVCP_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cDPVCP_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cDPVCP_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cDTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cDTUS_EFDCOSTS(OilRegion) $
              (Abs(cdiffPct_cDTUS_EFDCOSTS(OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cDTUS_EFDCOSTS(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cDTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cDTUS_rCARBONXXle(OilRegion) $
              (Abs(cdiffPct_cDTUS_rCARBONXXle(OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cDTUS_rCARBONXXle(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cDTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cDTUS_rCARBONXXn(OilRegion) $
              (Abs(cdiffPct_cDTUS_rCARBONXXn(OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cDTUS_rCARBONXXn(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cDTUS_rDSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
           Definition: { 
            cdiff_cDTUS_rDSle(CensusRegion,OilRegion) $
              (Abs(cdiffPct_cDTUS_rDSle(CensusRegion,OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cDTUS_rDSle(CensusRegion,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cDTUS_rMERC_DSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
           Definition: { 
            cdiff_cDTUS_rMERC_DSle(nHGCODE,OilRegion) $
              (Abs(cdiffPct_cDTUS_rMERC_DSle(nHGCODE,OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cDTUS_rMERC_DSle(nHGCODE,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cDTUS_rS_DSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
           Definition: { 
            cdiff_cDTUS_rS_DSUSle(OilRegion) $
              (Abs(cdiffPct_cDTUS_rS_DSUSle(OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cDTUS_rS_DSUSle(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cDX_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) $
              (Abs(cdiffPct_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiffPct_Delta
               and Abs(cdiff_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiff_Delta)
           }
       }
       Parameter compare_cDX_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            cdiff_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) $
              (Abs(cdiffPct_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiffPct_Delta
               and Abs(cdiff_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiff_Delta)
           }
       }
       Parameter compare_cELNOX_rELNOX0le {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cELNOX_rELNOX0le(INOXP,PlantType_ECP) $
              (Abs(cdiffPct_cELNOX_rELNOX0le(INOXP,PlantType_ECP)) > cdiffPct_Delta
               and Abs(cdiff_cELNOX_rELNOX0le(INOXP,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter compare_cELNOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cELNOX_rELNOXle(INOXP,PlantType_ECP) $
              (Abs(cdiffPct_cELNOX_rELNOXle(INOXP,PlantType_ECP)) > cdiffPct_Delta
               and Abs(cdiff_cELNOX_rELNOXle(INOXP,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter compare_cELNOXOT_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cELNOXOT_rELNOX0le(INOXP) $
              (Abs(cdiffPct_cELNOXOT_rELNOX0le(INOXP)) > cdiffPct_Delta
               and Abs(cdiff_cELNOXOT_rELNOX0le(INOXP)) > cdiff_Delta)
           }
       }
       Parameter compare_cELNOXOT_rELNOXOTle {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX(*)OT";
           Definition: { 
            cdiff_cELNOXOT_rELNOXOTle(INOXP) $
              (Abs(cdiffPct_cELNOXOT_rELNOXOTle(INOXP)) > cdiffPct_Delta
               and Abs(cdiff_cELNOXOT_rELNOXOTle(INOXP)) > cdiff_Delta)
           }
       }
       Parameter compare_cES_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cES_EFDCOSTS(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cES_EFDCOSTS(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cES_EFDCOSTS(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cES_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cES_rLDge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cES_rLDge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cES_rLDge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cES_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cES_UBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cES_UBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cES_UBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cESCNOX_EFDCOSTS {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cESCNOX_EFDCOSTS(INOXP) $
              (Abs(cdiffPct_cESCNOX_EFDCOSTS(INOXP)) > cdiffPct_Delta
               and Abs(cdiff_cESCNOX_EFDCOSTS(INOXP)) > cdiff_Delta)
           }
       }
       Parameter compare_cESCNOX_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cESCNOX_rELNOX0le(INOXP) $
              (Abs(cdiffPct_cESCNOX_rELNOX0le(INOXP)) > cdiffPct_Delta
               and Abs(cdiff_cESCNOX_rELNOX0le(INOXP)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cF_EFDCOSTS(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_EFDCOSTS(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cF_EFDCOSTS(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiff_cF_rENeq(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rENeq(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cF_rENeq(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiff_cF_rENle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rENle(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cF_rENle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: { 
            cdiff_cF_rFle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rFle(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cF_rFle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            cdiff_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) $
              (Abs(cdiffPct_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cF_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cF_UBOUND(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_UBOUND(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cF_UBOUND(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cG_LBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LBOUND";
           Definition: { 
            cdiff_cG_LBOUND(SupplyRegion_ALT1) $
              (Abs(cdiffPct_cG_LBOUND(SupplyRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cG_LBOUND(SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cG_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cG_UBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: UBOUND";
           Definition: { 
            cdiff_cG_UBOUND(SupplyRegion_ALT1) $
              (Abs(cdiffPct_cG_UBOUND(SupplyRegion_ALT1)) > cdiffPct_Delta
               and Abs(cdiff_cG_UBOUND(SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter compare_cGENCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cGENCLB_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENCLB_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cGENCLB_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cGENCLB_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
           Definition: { 
            cdiff_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cGENCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cGENCLB_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENCLB_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cGENCLB_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cGENNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cGENNGB_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENNGB_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cGENNGB_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cGENNGB_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
           Definition: { 
            cdiff_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cGENNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cGENNGB_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENNGB_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cGENNGB_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cGPUS_EFDCOSTS {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cGPUS_EFDCOSTS(GasProductionStep) $
              (Abs(cdiffPct_cGPUS_EFDCOSTS(GasProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cGPUS_EFDCOSTS(GasProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cGPUS_rS_NGUSle {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
           Definition: { 
            cdiff_cGPUS_rS_NGUSle(GasProductionStep) $
              (Abs(cdiffPct_cGPUS_rS_NGUSle(GasProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cGPUS_rS_NGUSle(GasProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cGPUS_UBOUND {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cGPUS_UBOUND(GasProductionStep) $
              (Abs(cdiffPct_cGPUS_UBOUND(GasProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cGPUS_UBOUND(GasProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cGTUS_EFDCOSTS {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cGTUS_EFDCOSTS(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_EFDCOSTS(GasRegion,GasSeason)) > cdiffPct_Delta
               and Abs(cdiff_cGTUS_EFDCOSTS(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter compare_cGTUS_rCARBONXXle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cGTUS_rCARBONXXle(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_rCARBONXXle(GasRegion,GasSeason)) > cdiffPct_Delta
               and Abs(cdiff_cGTUS_rCARBONXXle(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter compare_cGTUS_rCARBONXXn {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cGTUS_rCARBONXXn(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_rCARBONXXn(GasRegion,GasSeason)) > cdiffPct_Delta
               and Abs(cdiff_cGTUS_rCARBONXXn(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter compare_cGTUS_rNGle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
           Definition: { 
            cdiff_cGTUS_rNGle(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_rNGle(GasRegion,GasSeason)) > cdiffPct_Delta
               and Abs(cdiff_cGTUS_rNGle(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter compare_cGTUS_rS_NGUSle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
           Definition: { 
            cdiff_cGTUS_rS_NGUSle(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_rS_NGUSle(GasRegion,GasSeason)) > cdiffPct_Delta
               and Abs(cdiff_cGTUS_rS_NGUSle(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cH_EFDCOSTS(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_EFDCOSTS(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cH_EFDCOSTS(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiff_cH_rENeq(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rENeq(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cH_rENeq(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiff_cH_rENle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rENle(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cH_rENle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: { 
            cdiff_cH_rFle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rFle(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cH_rFle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rP2_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: { 
            cdiff_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) $
              (Abs(cdiffPct_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: { 
            cdiff_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) $
              (Abs(cdiffPct_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            cdiff_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) $
              (Abs(cdiffPct_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cH_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cH_UBOUND(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_UBOUND(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cH_UBOUND(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cI_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cI_EFDCOSTS(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_EFDCOSTS(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cI_EFDCOSTS(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cI_LBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cI_LBOUND(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_LBOUND(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cI_LBOUND(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cI_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cI_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cI_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cI_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cI_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cI_UBOUND(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_UBOUND(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cI_UBOUND(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiff_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiff_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiff_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            cdiff_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            cdiff_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            cdiff_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            cdiff_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            cdiff_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
            cdiff_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiff_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cJ_rCBle(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCBle(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rCBle(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiff_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiff_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            cdiff_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            cdiff_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            cdiff_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            cdiff_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            cdiff_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cJ_rMRXge(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rMRXge(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rMRXge(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJ_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cJ_UBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_UBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cJ_UBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cJX_EFDCOSTS(PlantGroup,Season) $
              (Abs(cdiffPct_cJX_EFDCOSTS(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cJX_EFDCOSTS(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cJX_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rCBle(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cJX_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            cdiff_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cJX_rMRXge(PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rMRXge(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cJX_rMRXge(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cJX_UBOUND(PlantGroup,Season) $
              (Abs(cdiffPct_cJX_UBOUND(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cJX_UBOUND(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cJX_rELNOX0n(INOXP,PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cJX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cJX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cKX_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
               and Abs(cdiff_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter compare_cKX_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            cdiff_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
               and Abs(cdiff_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter compare_cMB_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cMB_EFDCOSTS(PlantGroup,Season) $
              (Abs(cdiffPct_cMB_EFDCOSTS(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cMB_EFDCOSTS(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cMB_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cMB_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cMB_rCBle(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cMB_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cMB_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
           Definition: { 
            cdiff_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) $
              (Abs(cdiffPct_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cMB_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cMB_UBOUND(PlantGroup,Season) $
              (Abs(cdiffPct_cMB_UBOUND(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cMB_UBOUND(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cMERC__rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: { 
            cdiff_cMERC__rMERC_le(PlantType_ECP,nHGCODE) $
              (Abs(cdiffPct_cMERC__rMERC_le(PlantType_ECP,nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cMERC__rMERC_le(PlantType_ECP,nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cMERC__rMERCURYle {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) $
              (Abs(cdiffPct_cMERC__rMERCURYle(nHGCODE,PlantType_ECP)) > cdiffPct_Delta
               and Abs(cdiff_cMERC__rMERCURYle(nHGCODE,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter compare_cMERC__rMERCURYn {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) $
              (Abs(cdiffPct_cMERC__rMERCURYn(nHGCODE,PlantType_ECP)) > cdiffPct_Delta
               and Abs(cdiff_cMERC__rMERCURYn(nHGCODE,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter compare_cMERC_DS_rMERC_DSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
           Definition: { 
            cdiff_cMERC_DS_rMERC_DSle(nHGCODE) $
              (Abs(cdiffPct_cMERC_DS_rMERC_DSle(nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cMERC_DS_rMERC_DSle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cMERC_DS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cMERC_DS_rMERCURYle(nHGCODE) $
              (Abs(cdiffPct_cMERC_DS_rMERCURYle(nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cMERC_DS_rMERCURYle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cMERC_DS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cMERC_DS_rMERCURYn(nHGCODE) $
              (Abs(cdiffPct_cMERC_DS_rMERCURYn(nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cMERC_DS_rMERCURYn(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cMERC_RS_rMERC_RSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
           Definition: { 
            cdiff_cMERC_RS_rMERC_RSle(nHGCODE) $
              (Abs(cdiffPct_cMERC_RS_rMERC_RSle(nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cMERC_RS_rMERC_RSle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cMERC_RS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cMERC_RS_rMERCURYle(nHGCODE) $
              (Abs(cdiffPct_cMERC_RS_rMERCURYle(nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cMERC_RS_rMERCURYle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cMERC_RS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cMERC_RS_rMERCURYn(nHGCODE) $
              (Abs(cdiffPct_cMERC_RS_rMERCURYn(nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cMERC_RS_rMERCURYn(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cMVS_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) $
              (Abs(cdiffPct_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cMVS_rMVSO2le {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
           Definition: { 
            cdiff_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) $
              (Abs(cdiffPct_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cMVS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiff_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) $
              (Abs(cdiffPct_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cMVSO2_EFDCOSTS {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) $
              (Abs(cdiffPct_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiffPct_Delta
               and Abs(cdiff_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter compare_cMVSO2_rSULFURle {
           IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiff_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) $
              (Abs(cdiffPct_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiffPct_Delta
               and Abs(cdiff_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter compare_cMVSO2_UBOUND {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) $
              (Abs(cdiffPct_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiffPct_Delta
               and Abs(cdiff_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter compare_cNOT_EFDCOSTS {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) $
              (Abs(cdiffPct_cNOT_EFDCOSTS(OGSMSector,OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNOT_EFDCOSTS(OGSMSector,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNOT_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiff_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) $
              (Abs(cdiffPct_cNOT_rZOGSMeq(OGSMRegion,OGSMSector)) > cdiffPct_Delta
               and Abs(cdiff_cNOT_rZOGSMeq(OGSMRegion,OGSMSector)) > cdiff_Delta)
           }
       }
       Parameter compare_cNOT_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: { 
            cdiff_cNOT_rZOTHRge(OGSMRegion,OGSMSector) $
              (Abs(cdiffPct_cNOT_rZOTHRge(OGSMRegion,OGSMSector)) > cdiffPct_Delta
               and Abs(cdiff_cNOT_rZOTHRge(OGSMRegion,OGSMSector)) > cdiff_Delta)
           }
       }
       Parameter compare_cNOT_UBOUND {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: UBOUND";
           Definition: { 
            cdiff_cNOT_UBOUND(OGSMSector,OGSMRegion) $
              (Abs(cdiffPct_cNOT_UBOUND(OGSMSector,OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNOT_UBOUND(OGSMSector,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNOTSF_EFDCOSTS {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cNOTSF_EFDCOSTS(OGSMRegion) $
              (Abs(cdiffPct_cNOTSF_EFDCOSTS(OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNOTSF_EFDCOSTS(OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNOTSF_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiff_cNOTSF_rZOGSMeq(OGSMRegion) $
              (Abs(cdiffPct_cNOTSF_rZOGSMeq(OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNOTSF_rZOGSMeq(OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNSR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNSR_EFDCOSTS(FuelRegion,OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNSR_EFDCOSTS(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNSR_rZFLRSeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNSR_rZFLRSeq(FuelRegion,OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNSR_rZFLRSeq(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNSR_rZFLRSge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cNSR_rZFLRSge(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNSR_rZFLRSge(FuelRegion,OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNSR_rZFLRSge(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNSR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiff_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) $
              (Abs(cdiffPct_cNSR_rZOGSMeq(OGSMRegion,FuelRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNSR_rZOGSMeq(OGSMRegion,FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNSX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cNSX_EFDCOSTS(FuelRegion) $
              (Abs(cdiffPct_cNSX_EFDCOSTS(FuelRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNSX_EFDCOSTS(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNSX_rZFLRSeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cNSX_rZFLRSeq(FuelRegion) $
              (Abs(cdiffPct_cNSX_rZFLRSeq(FuelRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNSX_rZFLRSeq(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNSX_rZFLRSge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cNSX_rZFLRSge(FuelRegion) $
              (Abs(cdiffPct_cNSX_rZFLRSge(FuelRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNSX_rZFLRSge(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTO_EFDCOSTS {
           IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) $
              (Abs(cdiffPct_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiffPct_Delta
               and Abs(cdiff_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTO_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiff_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) $
              (Abs(cdiffPct_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiffPct_Delta
               and Abs(cdiff_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTO_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: { 
            cdiff_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) $
              (Abs(cdiffPct_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiffPct_Delta
               and Abs(cdiff_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNTR_EFDCOSTS(FuelRegion,OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNTR_EFDCOSTS(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTR_rZFLRGeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNTR_rZFLRGeq(FuelRegion,OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNTR_rZFLRGeq(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTR_rZFLRGge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cNTR_rZFLRGge(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNTR_rZFLRGge(FuelRegion,OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNTR_rZFLRGge(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiff_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) $
              (Abs(cdiffPct_cNTR_rZOGSMeq(OGSMRegion,FuelRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNTR_rZOGSMeq(OGSMRegion,FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cNTX_EFDCOSTS(FuelRegion) $
              (Abs(cdiffPct_cNTX_EFDCOSTS(FuelRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNTX_EFDCOSTS(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTX_rZFLRGeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cNTX_rZFLRGeq(FuelRegion) $
              (Abs(cdiffPct_cNTX_rZFLRGeq(FuelRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNTX_rZFLRGeq(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cNTX_rZFLRGge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cNTX_rZFLRGge(FuelRegion) $
              (Abs(cdiffPct_cNTX_rZFLRGge(FuelRegion)) > cdiffPct_Delta
               and Abs(cdiff_cNTX_rZFLRGge(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiff_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiff_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiff_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            cdiff_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            cdiff_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            cdiff_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            cdiff_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            cdiff_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
            cdiff_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiff_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cO_rCBle(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCBle(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rCBle(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiff_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiff_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            cdiff_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            cdiff_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            cdiff_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            cdiff_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            cdiff_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cO_rMRXge(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rMRXge(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rMRXge(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cO_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cO_UBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_UBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cO_UBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cOX_EFDCOSTS(PlantGroup,Season) $
              (Abs(cdiffPct_cOX_EFDCOSTS(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cOX_EFDCOSTS(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cOX_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rCBle(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cOX_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cOX_rELNOX0n(INOXP,PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cOX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            cdiff_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cOX_rMRXge(PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rMRXge(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cOX_rMRXge(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cOX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cOX_UBOUND(PlantGroup,Season) $
              (Abs(cdiffPct_cOX_UBOUND(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cOX_UBOUND(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rCARBONXXle {
           Text: "OML Columns: RHSEFD and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cRHS_rCARBONXXle $
              (Abs(cdiffPct_cRHS_rCARBONXXle) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rCARBONXXle) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cRHS_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cRHS_rCBle(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            cdiff_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) $
              (Abs(cdiffPct_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cRHS_rCO2QNRle(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cRHS_rCO2QNRle(SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rCO2QNRle(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            cdiff_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) $
              (Abs(cdiffPct_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rENeq {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiff_cRHS_rENeq(PlantGroup,Season) $
              (Abs(cdiffPct_cRHS_rENeq(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rENeq(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rENle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiff_cRHS_rENle(PlantGroup,Season) $
              (Abs(cdiffPct_cRHS_rENle(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rENle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
           Definition: { 
            cdiff_cRHS_rEXle(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cRHS_rEXle(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rEXle(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
           Definition: { 
            cdiff_cRHS_rFle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cRHS_rFle(PlantGroup,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rFle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
           Definition: { 
            cdiff_cRHS_rIMle(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cRHS_rIMle(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rIMle(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            cdiff_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cRHS_rLDge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cRHS_rLDge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rLDge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
           Definition: { 
            cdiff_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) $
              (Abs(cdiffPct_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: RHSEFD and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cRHS_rMERCURYle(nHGCODE) $
              (Abs(cdiffPct_cRHS_rMERCURYle(nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rMERCURYle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rMRXge {
           IndexDomain: (PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cRHS_rMRXge(PlantGroup) $
              (Abs(cdiffPct_cRHS_rMRXge(PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rMRXge(PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rMVSO2le {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
           Definition: { 
            cdiff_cRHS_rMVSO2le(CoalDemandRegion) $
              (Abs(cdiffPct_cRHS_rMVSO2le(CoalDemandRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rMVSO2le(CoalDemandRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
           Definition: { 
            cdiff_cRHS_rP2le(Slice,SupplyRegion,Season) $
              (Abs(cdiffPct_cRHS_rP2le(Slice,SupplyRegion,Season)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rP2le(Slice,SupplyRegion,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
           Definition: { 
            cdiff_cRHS_rSULFURCRle(CoalDemandRegion) $
              (Abs(cdiffPct_cRHS_rSULFURCRle(CoalDemandRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rSULFURCRle(CoalDemandRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rSULFURle {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
           Definition: { 
            cdiff_cRHS_rSULFURle(SO2Region) $
              (Abs(cdiffPct_cRHS_rSULFURle(SO2Region)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rSULFURle(SO2Region)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            cdiff_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            cdiff_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) $
              (Abs(cdiffPct_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
           Definition: { 
            cdiff_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cRHS_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiff_cRHS_rZOGSMeq(OGSMRegion) $
              (Abs(cdiffPct_cRHS_rZOGSMeq(OGSMRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRHS_rZOGSMeq(OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRPUS_EFDCOSTS {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cRPUS_EFDCOSTS(ResidProductionStep) $
              (Abs(cdiffPct_cRPUS_EFDCOSTS(ResidProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cRPUS_EFDCOSTS(ResidProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cRPUS_rS_RSUSle {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
           Definition: { 
            cdiff_cRPUS_rS_RSUSle(ResidProductionStep) $
              (Abs(cdiffPct_cRPUS_rS_RSUSle(ResidProductionStep)) > cdiffPct_Delta
               and Abs(cdiff_cRPUS_rS_RSUSle(ResidProductionStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cRTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cRTUS_EFDCOSTS(OilRegion) $
              (Abs(cdiffPct_cRTUS_EFDCOSTS(OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRTUS_EFDCOSTS(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cRTUS_rCARBONXXle(OilRegion) $
              (Abs(cdiffPct_cRTUS_rCARBONXXle(OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRTUS_rCARBONXXle(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiff_cRTUS_rCARBONXXn(OilRegion) $
              (Abs(cdiffPct_cRTUS_rCARBONXXn(OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRTUS_rCARBONXXn(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRTUS_rMERC_RSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
           Definition: { 
            cdiff_cRTUS_rMERC_RSle(nHGCODE,OilRegion) $
              (Abs(cdiffPct_cRTUS_rMERC_RSle(nHGCODE,OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRTUS_rMERC_RSle(nHGCODE,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRTUS_rRSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
           Definition: { 
            cdiff_cRTUS_rRSle(CensusRegion,OilRegion) $
              (Abs(cdiffPct_cRTUS_rRSle(CensusRegion,OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRTUS_rRSle(CensusRegion,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRTUS_rS_RSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
           Definition: { 
            cdiff_cRTUS_rS_RSUSle(OilRegion) $
              (Abs(cdiffPct_cRTUS_rS_RSUSle(OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRTUS_rS_RSUSle(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRTUS_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
           Definition: { 
            cdiff_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) $
              (Abs(cdiffPct_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRTUS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiff_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) $
              (Abs(cdiffPct_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cRTUS_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiff_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) $
              (Abs(cdiffPct_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion)) > cdiffPct_Delta
               and Abs(cdiff_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter compare_cS2_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cS2_rLDge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cS2_rLDge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cS2_rLDge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cS2_rP2_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: { 
            cdiff_cS2_rP2_le(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cS2_rP2_le(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cS2_rP2_le(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cS2_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: { 
            cdiff_cS2_rP2le(Slice,SupplyRegion,Season) $
              (Abs(cdiffPct_cS2_rP2le(Slice,SupplyRegion,Season)) > cdiffPct_Delta
               and Abs(cdiff_cS2_rP2le(Slice,SupplyRegion,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cS2_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cS2_UBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cS2_UBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cS2_UBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) $
              (Abs(cdiffPct_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            cdiff_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cSC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cSC_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cSC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            cdiff_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) $
              (Abs(cdiffPct_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)) > cdiffPct_Delta
               and Abs(cdiff_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cSPx_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cSPx_EFDCOSTS(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cSPx_EFDCOSTS(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSPx_LBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            cdiff_cSPx_LBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cSPx_LBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cSPx_LBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSPx_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cSPx_rSRge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cSPx_rSRge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cSPx_rSRge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSPx_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cSPx_UBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cSPx_UBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cSPx_UBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: { 
            cdiff_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cSR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: { 
            cdiff_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cSR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cSR_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cSR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cST_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cST_rLDge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cST_rLDge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cST_rLDge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cST_rPS_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            cdiff_cST_rPS_le(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cST_rPS_le(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cST_rPS_le(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cST_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cST_UBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cST_UBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cST_UBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cSULF_EFDCOSTS {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) $
              (Abs(cdiffPct_cSULF_EFDCOSTS(PlantType_ECP,SO2Region)) > cdiffPct_Delta
               and Abs(cdiff_cSULF_EFDCOSTS(PlantType_ECP,SO2Region)) > cdiff_Delta)
           }
       }
       Parameter compare_cSULF_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
           Definition: { 
            cdiff_cSULF_rSULFle(PlantType_ECP,SO2Region) $
              (Abs(cdiffPct_cSULF_rSULFle(PlantType_ECP,SO2Region)) > cdiffPct_Delta
               and Abs(cdiff_cSULF_rSULFle(PlantType_ECP,SO2Region)) > cdiff_Delta)
           }
       }
       Parameter compare_cSULF_rSULFURle {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiff_cSULF_rSULFURle(SO2Region,PlantType_ECP) $
              (Abs(cdiffPct_cSULF_rSULFURle(SO2Region,PlantType_ECP)) > cdiffPct_Delta
               and Abs(cdiff_cSULF_rSULFURle(SO2Region,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter compare_cSULF_rSULFURn {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiff_cSULF_rSULFURn(SO2Region,PlantType_ECP) $
              (Abs(cdiffPct_cSULF_rSULFURn(SO2Region,PlantType_ECP)) > cdiffPct_Delta
               and Abs(cdiff_cSULF_rSULFURn(SO2Region,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter compare_cT_STOCK__LBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: LBOUND";
           Definition: { 
            cdiff_cT_STOCK__LBOUND $
              (Abs(cdiffPct_cT_STOCK__LBOUND) > cdiffPct_Delta
               and Abs(cdiff_cT_STOCK__LBOUND) > cdiff_Delta)
           }
       }
       Parameter compare_cT_STOCK__rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cT_STOCK__rMERCURYle(nHGCODE) $
              (Abs(cdiffPct_cT_STOCK__rMERCURYle(nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cT_STOCK__rMERCURYle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cT_STOCK__rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: { 
            cdiff_cT_STOCK__rMERCURYn(nHGCODE) $
              (Abs(cdiffPct_cT_STOCK__rMERCURYn(nHGCODE)) > cdiffPct_Delta
               and Abs(cdiff_cT_STOCK__rMERCURYn(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter compare_cT_STOCK__rSULFURn {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
           Definition: { 
            cdiff_cT_STOCK__rSULFURn(SO2Region) $
              (Abs(cdiffPct_cT_STOCK__rSULFURn(SO2Region)) > cdiffPct_Delta
               and Abs(cdiff_cT_STOCK__rSULFURn(SO2Region)) > cdiff_Delta)
           }
       }
       Parameter compare_cT_STOCK__UBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: UBOUND";
           Definition: { 
            cdiff_cT_STOCK__UBOUND $
              (Abs(cdiffPct_cT_STOCK__UBOUND) > cdiffPct_Delta
               and Abs(cdiff_cT_STOCK__UBOUND) > cdiff_Delta)
           }
       }
       Parameter compare_cTC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) $
              (Abs(cdiffPct_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cTC_rCANIMPUSeq {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CANIMPUS";
           Definition: { 
            cdiff_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) $
              (Abs(cdiffPct_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cTC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            cdiff_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cTC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiffPct_Delta
               and Abs(cdiff_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter compare_cTC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            cdiff_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) $
              (Abs(cdiffPct_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)) > cdiffPct_Delta
               and Abs(cdiff_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)) > cdiff_Delta)
           }
       }
       Parameter compare_cTR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cTR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cTR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cTR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: { 
            cdiff_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cTR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: { 
            cdiff_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cTR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
               and Abs(cdiff_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter compare_cTR_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
           Definition: { 
            cdiff_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cTR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
               and Abs(cdiff_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiff_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiff_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiff_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            cdiff_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            cdiff_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            cdiff_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            cdiff_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            cdiff_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
            cdiff_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiff_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiff_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cU_rCBle(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCBle(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rCBle(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiff_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiff_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiff_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            cdiff_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            cdiff_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            cdiff_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            cdiff_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            cdiff_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiff_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiff_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cU_rMRXge(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rMRXge(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rMRXge(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiff_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiff_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cU_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cU_UBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_UBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
               and Abs(cdiff_cU_UBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiff_cUX_EFDCOSTS(PlantGroup,Season) $
              (Abs(cdiffPct_cUX_EFDCOSTS(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cUX_EFDCOSTS(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiff_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiff_cUX_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rCBle(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cUX_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            cdiff_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiff_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiff_cUX_rMRXge(PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rMRXge(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cUX_rMRXge(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiff_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
               and Abs(cdiff_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
            cdiff_cUX_UBOUND(PlantGroup,Season) $
              (Abs(cdiffPct_cUX_UBOUND(PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cUX_UBOUND(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiff_cUX_rELNOX0n(INOXP,PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cUX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter compare_cUX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiff_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiffPct_Delta
               and Abs(cdiff_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
     }
   DeclarationSection Percent_Comparison_Declaration {
       Parameter Percent_cACISPLY_EFDCOSTS {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cACISPLY_EFDCOSTS(numACI) $
              (Abs(cdiffPct_cACISPLY_EFDCOSTS(numACI)) > cdiffPct_Delta
              and Abs(cdiff_cACISPLY_EFDCOSTS(numACI)) > cdiff_Delta)
           }
       }
       Parameter Percent_cACISPLY_rACICSTle {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
           Definition: { 
            cdiffPct_cACISPLY_rACICSTle(numACI) $
              (Abs(cdiffPct_cACISPLY_rACICSTle(numACI)) > cdiffPct_Delta
              and Abs(cdiff_cACISPLY_rACICSTle(numACI)) > cdiff_Delta)
           }
       }
       Parameter Percent_cACISPLY_UBOUND {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cACISPLY_UBOUND(numACI) $
              (Abs(cdiffPct_cACISPLY_UBOUND(numACI)) > cdiffPct_Delta
              and Abs(cdiff_cACISPLY_UBOUND(numACI)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_EFDCOSTS {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiffPct_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rCARBONle {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rCARBONn {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rCARBONXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rCARBONXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rCARSEQXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQXX";
           Definition: { 
            cdiffPct_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rCFGn {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
           Definition: { 
            cdiffPct_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
           Definition: { 
            cdiffPct_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rDSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
           Definition: { 
            cdiffPct_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rNGle {
           IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
           Definition: { 
            cdiffPct_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rRSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
           Definition: { 
            cdiffPct_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cB_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
           Definition: { 
            cdiffPct_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) $
              (Abs(cdiffPct_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiffPct_Delta
              and Abs(cdiff_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBCTLN_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) $
              (Abs(cdiffPct_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)) > cdiffPct_Delta
              and Abs(cdiff_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBCTLN_rELNOX0n {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) $
              (Abs(cdiffPct_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason)) > cdiffPct_Delta
              and Abs(cdiff_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBCTLN_rELNOXOTle {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)OT";
           Definition: { 
            cdiffPct_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) $
              (Abs(cdiffPct_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason)) > cdiffPct_Delta
              and Abs(cdiff_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBCTLN_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) $
              (Abs(cdiffPct_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)) > cdiffPct_Delta
              and Abs(cdiff_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBiomassOtherUsage_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) $
              (Abs(cdiffPct_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)) > cdiffPct_Delta
              and Abs(cdiff_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBiomassOtherUsage_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
           Definition: { 
            cdiffPct_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) $
              (Abs(cdiffPct_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector)) > cdiffPct_Delta
              and Abs(cdiff_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBiomassOtherUsage_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) $
              (Abs(cdiffPct_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)) > cdiffPct_Delta
              and Abs(cdiff_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBP_type_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) $
              (Abs(cdiffPct_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBP_type_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
           Definition: { 
            cdiffPct_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) $
              (Abs(cdiffPct_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBP_type_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
           Definition: { 
            cdiffPct_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) $
              (Abs(cdiffPct_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cBP_type_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) $
              (Abs(cdiffPct_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cC_Z_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
              and Abs(cdiff_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter Percent_cC_Z_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            cdiffPct_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
              and Abs(cdiff_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARBNK_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cCARBNK_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARBNK_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARBNK_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARBNK_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARBNK_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARBNK_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARBNK_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARBNK_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARBNK_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARBNK_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARBNK_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARBNK_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARBNK_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARBNK_UBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARBNK_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARBONOT_LBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCARBONOT_LBOUND $
              (Abs(cdiffPct_cCARBONOT_LBOUND) > cdiffPct_Delta
              and Abs(cdiff_cCARBONOT_LBOUND) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARBONOT_rCARBONXXle {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cCARBONOT_rCARBONXXle $
              (Abs(cdiffPct_cCARBONOT_rCARBONXXle) > cdiffPct_Delta
              and Abs(cdiff_cCARBONOT_rCARBONXXle) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARBONOT_rCARBONXXn {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cCARBONOT_rCARBONXXn $
              (Abs(cdiffPct_cCARBONOT_rCARBONXXn) > cdiffPct_Delta
              and Abs(cdiff_cCARBONOT_rCARBONXXn) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARBONOT_UBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARBONOT_UBOUND $
              (Abs(cdiffPct_cCARBONOT_UBOUND) > cdiffPct_Delta
              and Abs(cdiff_cCARBONOT_UBOUND) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARDM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) $
              (Abs(cdiffPct_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARDM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARDM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARDM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) $
              (Abs(cdiffPct_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARECR_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cCARECR_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARECR_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARECR_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARECR_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARECR_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARECR_rCARBONle(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARECR_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARECR_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARECR_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARECR_UBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARECR_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARESC_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cCARESC_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARESC_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARESC_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARESC_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARESC_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARESC_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARESC_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARESC_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARESC_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARESC_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARESC_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARESC_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARESC_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARESC_rCARBONle(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARESC_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARESCXX_EFDCOSTS {
           Text: "OML Columns: CARESCXX and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cCARESCXX_EFDCOSTS $
              (Abs(cdiffPct_cCARESCXX_EFDCOSTS) > cdiffPct_Delta
              and Abs(cdiff_cCARESCXX_EFDCOSTS) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARESCXX_rCARBONXXle {
           Text: "OML Columns: CARESCXX and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cCARESCXX_rCARBONXXle $
              (Abs(cdiffPct_cCARESCXX_rCARBONXXle) > cdiffPct_Delta
              and Abs(cdiff_cCARESCXX_rCARBONXXle) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARESCXX_UBOUND {
           Text: "OML Columns: CARESCXX and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARESCXX_UBOUND $
              (Abs(cdiffPct_cCARESCXX_UBOUND) > cdiffPct_Delta
              and Abs(cdiff_cCARESCXX_UBOUND) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARFUE_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCARFUE_LBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARFUE_LBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARFUE_LBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARFUE_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARFUE_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARFUE_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARFUE_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARFUE_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARFUE_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARFUE_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARFUE_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARFUE_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARFUE_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARFUE_UBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARFUE_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARIM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) $
              (Abs(cdiffPct_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARIM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARIM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARIM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) $
              (Abs(cdiffPct_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARIND_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCARIND_LBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARIND_LBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARIND_LBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARIND_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARIND_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARIND_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARIND_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARIND_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARIND_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARIND_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARIND_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARIND_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARIND_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARIND_UBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARIND_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARLIM_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cCARLIM_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARLIM_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARLIM_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARLIM_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARLIM_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARLIM_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARLIM_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARLIM_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARLIM_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARLIM_rCARBONle(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARLIM_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARLIM_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARLIM_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARLIM_UBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARLIM_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCAROFF_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cCAROFF_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCAROFF_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCAROFF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCAROFF_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCAROFF_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCAROFF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCAROFF_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCAROFF_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCAROFF_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCAROFF_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_rCARBONle(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCAROFF_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCAROFF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCAROFF_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCAROFF_UBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCAROFF_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCAROTH_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCAROTH_LBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCAROTH_LBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCAROTH_LBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCAROTH_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCAROTH_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCAROTH_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCAROTH_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCAROTH_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCAROTH_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCAROTH_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCAROTH_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCAROTH_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCAROTH_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCAROTH_UBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCAROTH_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARREF_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCARREF_LBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARREF_LBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARREF_LBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARREF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARREF_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARREF_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARREF_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARREF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARREF_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARREF_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARREF_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARREF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARREF_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARREF_UBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARREF_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARRSV_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cCARRSV_EFDCOSTS(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_EFDCOSTS(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARRSV_EFDCOSTS(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARRSV_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARRSV_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARRSV_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARRSV_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARRSV_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARRSV_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARRSV_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARRSV_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_rCARBONle(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARRSV_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARRSV_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCARRSV_UBOUND(CarbonRegion) $
              (Abs(cdiffPct_cCARRSV_UBOUND(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARRSV_UBOUND(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARUTL_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARUTL_rCARBONABeq(CarbonRegion) $
              (Abs(cdiffPct_cCARUTL_rCARBONABeq(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARUTL_rCARBONABeq(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARUTL_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: { 
            cdiffPct_cCARUTL_rCARBONABn(CarbonRegion) $
              (Abs(cdiffPct_cCARUTL_rCARBONABn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARUTL_rCARBONABn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARUTL_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARUTL_rCARBONle(CarbonRegion) $
              (Abs(cdiffPct_cCARUTL_rCARBONle(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARUTL_rCARBONle(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCARUTL_rCARBONn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCARUTL_rCARBONn(CarbonRegion) $
              (Abs(cdiffPct_cCARUTL_rCARBONn(CarbonRegion)) > cdiffPct_Delta
              and Abs(cdiff_cCARUTL_rCARBONn(CarbonRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCNIMPBUS_LBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCNIMPBUS_LBOUND $
              (Abs(cdiffPct_cCNIMPBUS_LBOUND) > cdiffPct_Delta
              and Abs(cdiff_cCNIMPBUS_LBOUND) > cdiff_Delta)
           }
       }
       Parameter Percent_cCNIMPBUS_rCANIMPUSeq {
           Text: "OML Columns: CNIMPBUS and OML Rows: CANIMPUS";
           Definition: { 
            cdiffPct_cCNIMPBUS_rCANIMPUSeq $
              (Abs(cdiffPct_cCNIMPBUS_rCANIMPUSeq) > cdiffPct_Delta
              and Abs(cdiff_cCNIMPBUS_rCANIMPUSeq) > cdiff_Delta)
           }
       }
       Parameter Percent_cCNIMPBUS_UBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCNIMPBUS_UBOUND $
              (Abs(cdiffPct_cCNIMPBUS_UBOUND) > cdiffPct_Delta
              and Abs(cdiff_cCNIMPBUS_UBOUND) > cdiff_Delta)
           }
       }
       Parameter Percent_cCoalOtherUsage_LBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCoalOtherUsage_LBOUND(CoalSupplyCurve) $
              (Abs(cdiffPct_cCoalOtherUsage_LBOUND(CoalSupplyCurve)) > cdiffPct_Delta
              and Abs(cdiff_cCoalOtherUsage_LBOUND(CoalSupplyCurve)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCoalOtherUsage_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
           Definition: { 
            cdiffPct_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) $
              (Abs(cdiffPct_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType)) > cdiffPct_Delta
              and Abs(cdiff_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCoalOtherUsage_UBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCoalOtherUsage_UBOUND(CoalSupplyCurve) $
              (Abs(cdiffPct_cCoalOtherUsage_UBOUND(CoalSupplyCurve)) > cdiffPct_Delta
              and Abs(cdiff_cCoalOtherUsage_UBOUND(CoalSupplyCurve)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCONCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCONCLB_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONCLB_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cCONCLB_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCONCLB_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
           Definition: { 
            cdiffPct_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCONCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCONCLB_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONCLB_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cCONCLB_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCONNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCONNGB_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONNGB_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cCONNGB_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCONNGB_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
           Definition: { 
            cdiffPct_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCONNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCONNGB_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cCONNGB_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cCONNGB_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCP_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) $
              (Abs(cdiffPct_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCP_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
           Definition: { 
            cdiffPct_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) $
              (Abs(cdiffPct_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCP_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) $
              (Abs(cdiffPct_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rACICSTle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
           Definition: { 
            cdiffPct_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rACIOMCSTn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
           Definition: { 
            cdiffPct_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rACIRMVXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
           Definition: { 
            cdiffPct_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
           Definition: { 
            cdiffPct_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) $
              (Abs(cdiffPct_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            cdiffPct_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) $
              (Abs(cdiffPct_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            cdiffPct_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: { 
            cdiffPct_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) $
              (Abs(cdiffPct_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
           Definition: { 
            cdiffPct_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
           Definition: { 
            cdiffPct_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) $
              (Abs(cdiffPct_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiffPct_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiffPct_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            cdiffPct_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCT_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) $
              (Abs(cdiffPct_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiffPct_Delta
              and Abs(cdiff_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLCO_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLCO_rCARBONle {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLCO_rCARBONn {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLCO_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLCO_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLCO_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLHG_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLHG_rMERCURYle {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLHG_rMERCURYn {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLHG_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLS_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) $
              (Abs(cdiffPct_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)) > cdiffPct_Delta
              and Abs(cdiff_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLS_rSULFURle {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiffPct_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLS_rSULFURn {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiffPct_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLS_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) $
              (Abs(cdiffPct_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)) > cdiffPct_Delta
              and Abs(cdiff_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLSO2_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLSO2_LBOUND(CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLSO2_LBOUND(CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLSO2_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiffPct_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLSO2_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiffPct_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cCTLSO2_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) $
              (Abs(cdiffPct_cCTLSO2_UBOUND(CoalDemandRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cCTLSO2_UBOUND(CoalDemandRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_LBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cD_LBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_LBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_LBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiffPct_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiffPct_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            cdiffPct_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cD_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cD_UBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cD_UBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cD_UBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDPUS_EFDCOSTS {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cDPUS_EFDCOSTS(DistillateProductionStep) $
              (Abs(cdiffPct_cDPUS_EFDCOSTS(DistillateProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cDPUS_EFDCOSTS(DistillateProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDPUS_rS_DSUSle {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
           Definition: { 
            cdiffPct_cDPUS_rS_DSUSle(DistillateProductionStep) $
              (Abs(cdiffPct_cDPUS_rS_DSUSle(DistillateProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cDPUS_rS_DSUSle(DistillateProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDPVCP_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cDPVCP_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cDPVCP_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cDPVCP_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDPVCP_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) $
              (Abs(cdiffPct_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource)) > cdiffPct_Delta
              and Abs(cdiff_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDPVCP_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) $
              (Abs(cdiffPct_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource)) > cdiffPct_Delta
              and Abs(cdiff_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDPVCP_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cDPVCP_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cDPVCP_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cDPVCP_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cDTUS_EFDCOSTS(OilRegion) $
              (Abs(cdiffPct_cDTUS_EFDCOSTS(OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cDTUS_EFDCOSTS(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cDTUS_rCARBONXXle(OilRegion) $
              (Abs(cdiffPct_cDTUS_rCARBONXXle(OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cDTUS_rCARBONXXle(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cDTUS_rCARBONXXn(OilRegion) $
              (Abs(cdiffPct_cDTUS_rCARBONXXn(OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cDTUS_rCARBONXXn(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDTUS_rDSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
           Definition: { 
            cdiffPct_cDTUS_rDSle(CensusRegion,OilRegion) $
              (Abs(cdiffPct_cDTUS_rDSle(CensusRegion,OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cDTUS_rDSle(CensusRegion,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDTUS_rMERC_DSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
           Definition: { 
            cdiffPct_cDTUS_rMERC_DSle(nHGCODE,OilRegion) $
              (Abs(cdiffPct_cDTUS_rMERC_DSle(nHGCODE,OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cDTUS_rMERC_DSle(nHGCODE,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDTUS_rS_DSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
           Definition: { 
            cdiffPct_cDTUS_rS_DSUSle(OilRegion) $
              (Abs(cdiffPct_cDTUS_rS_DSUSle(OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cDTUS_rS_DSUSle(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDX_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) $
              (Abs(cdiffPct_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiffPct_Delta
              and Abs(cdiff_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiff_Delta)
           }
       }
       Parameter Percent_cDX_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            cdiffPct_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) $
              (Abs(cdiffPct_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiffPct_Delta
              and Abs(cdiff_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiff_Delta)
           }
       }
       Parameter Percent_cELNOX_rELNOX0le {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cELNOX_rELNOX0le(INOXP,PlantType_ECP) $
              (Abs(cdiffPct_cELNOX_rELNOX0le(INOXP,PlantType_ECP)) > cdiffPct_Delta
              and Abs(cdiff_cELNOX_rELNOX0le(INOXP,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cELNOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cELNOX_rELNOXle(INOXP,PlantType_ECP) $
              (Abs(cdiffPct_cELNOX_rELNOXle(INOXP,PlantType_ECP)) > cdiffPct_Delta
              and Abs(cdiff_cELNOX_rELNOXle(INOXP,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cELNOXOT_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cELNOXOT_rELNOX0le(INOXP) $
              (Abs(cdiffPct_cELNOXOT_rELNOX0le(INOXP)) > cdiffPct_Delta
              and Abs(cdiff_cELNOXOT_rELNOX0le(INOXP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cELNOXOT_rELNOXOTle {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX(*)OT";
           Definition: { 
            cdiffPct_cELNOXOT_rELNOXOTle(INOXP) $
              (Abs(cdiffPct_cELNOXOT_rELNOXOTle(INOXP)) > cdiffPct_Delta
              and Abs(cdiff_cELNOXOT_rELNOXOTle(INOXP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cES_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cES_EFDCOSTS(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cES_EFDCOSTS(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cES_EFDCOSTS(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cES_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cES_rLDge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cES_rLDge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cES_rLDge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cES_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cES_UBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cES_UBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cES_UBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cESCNOX_EFDCOSTS {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cESCNOX_EFDCOSTS(INOXP) $
              (Abs(cdiffPct_cESCNOX_EFDCOSTS(INOXP)) > cdiffPct_Delta
              and Abs(cdiff_cESCNOX_EFDCOSTS(INOXP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cESCNOX_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cESCNOX_rELNOX0le(INOXP) $
              (Abs(cdiffPct_cESCNOX_rELNOX0le(INOXP)) > cdiffPct_Delta
              and Abs(cdiff_cESCNOX_rELNOX0le(INOXP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cF_EFDCOSTS(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_EFDCOSTS(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cF_EFDCOSTS(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiffPct_cF_rENeq(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rENeq(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cF_rENeq(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiffPct_cF_rENle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rENle(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cF_rENle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: { 
            cdiffPct_cF_rFle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rFle(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cF_rFle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            cdiffPct_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) $
              (Abs(cdiffPct_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cF_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cF_UBOUND(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cF_UBOUND(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cF_UBOUND(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cG_LBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cG_LBOUND(SupplyRegion_ALT1) $
              (Abs(cdiffPct_cG_LBOUND(SupplyRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cG_LBOUND(SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cG_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) $
              (Abs(cdiffPct_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cG_UBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cG_UBOUND(SupplyRegion_ALT1) $
              (Abs(cdiffPct_cG_UBOUND(SupplyRegion_ALT1)) > cdiffPct_Delta
              and Abs(cdiff_cG_UBOUND(SupplyRegion_ALT1)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGENCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cGENCLB_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENCLB_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cGENCLB_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGENCLB_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
           Definition: { 
            cdiffPct_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGENCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cGENCLB_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENCLB_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cGENCLB_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGENNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cGENNGB_LBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENNGB_LBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cGENNGB_LBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGENNGB_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
           Definition: { 
            cdiffPct_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGENNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cGENNGB_UBOUND(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cGENNGB_UBOUND(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cGENNGB_UBOUND(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGPUS_EFDCOSTS {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cGPUS_EFDCOSTS(GasProductionStep) $
              (Abs(cdiffPct_cGPUS_EFDCOSTS(GasProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cGPUS_EFDCOSTS(GasProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGPUS_rS_NGUSle {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
           Definition: { 
            cdiffPct_cGPUS_rS_NGUSle(GasProductionStep) $
              (Abs(cdiffPct_cGPUS_rS_NGUSle(GasProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cGPUS_rS_NGUSle(GasProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGPUS_UBOUND {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cGPUS_UBOUND(GasProductionStep) $
              (Abs(cdiffPct_cGPUS_UBOUND(GasProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cGPUS_UBOUND(GasProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGTUS_EFDCOSTS {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cGTUS_EFDCOSTS(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_EFDCOSTS(GasRegion,GasSeason)) > cdiffPct_Delta
              and Abs(cdiff_cGTUS_EFDCOSTS(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGTUS_rCARBONXXle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cGTUS_rCARBONXXle(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_rCARBONXXle(GasRegion,GasSeason)) > cdiffPct_Delta
              and Abs(cdiff_cGTUS_rCARBONXXle(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGTUS_rCARBONXXn {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cGTUS_rCARBONXXn(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_rCARBONXXn(GasRegion,GasSeason)) > cdiffPct_Delta
              and Abs(cdiff_cGTUS_rCARBONXXn(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGTUS_rNGle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
           Definition: { 
            cdiffPct_cGTUS_rNGle(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_rNGle(GasRegion,GasSeason)) > cdiffPct_Delta
              and Abs(cdiff_cGTUS_rNGle(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter Percent_cGTUS_rS_NGUSle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
           Definition: { 
            cdiffPct_cGTUS_rS_NGUSle(GasRegion,GasSeason) $
              (Abs(cdiffPct_cGTUS_rS_NGUSle(GasRegion,GasSeason)) > cdiffPct_Delta
              and Abs(cdiff_cGTUS_rS_NGUSle(GasRegion,GasSeason)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cH_EFDCOSTS(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_EFDCOSTS(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cH_EFDCOSTS(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiffPct_cH_rENeq(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rENeq(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cH_rENeq(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiffPct_cH_rENle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rENle(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cH_rENle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: { 
            cdiffPct_cH_rFle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rFle(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cH_rFle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rP2_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: { 
            cdiffPct_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) $
              (Abs(cdiffPct_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: { 
            cdiffPct_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) $
              (Abs(cdiffPct_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            cdiffPct_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) $
              (Abs(cdiffPct_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cH_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cH_UBOUND(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cH_UBOUND(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cH_UBOUND(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cI_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cI_EFDCOSTS(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_EFDCOSTS(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cI_EFDCOSTS(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cI_LBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cI_LBOUND(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_LBOUND(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cI_LBOUND(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cI_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cI_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cI_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cI_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cI_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cI_UBOUND(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cI_UBOUND(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cI_UBOUND(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiffPct_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            cdiffPct_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiffPct_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cJ_rCBle(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCBle(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rCBle(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiffPct_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiffPct_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            cdiffPct_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            cdiffPct_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            cdiffPct_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            cdiffPct_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            cdiffPct_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cJ_rMRXge(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rMRXge(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rMRXge(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJ_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cJ_UBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cJ_UBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cJ_UBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cJX_EFDCOSTS(PlantGroup,Season) $
              (Abs(cdiffPct_cJX_EFDCOSTS(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cJX_EFDCOSTS(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cJX_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rCBle(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cJX_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            cdiffPct_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cJX_rMRXge(PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rMRXge(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cJX_rMRXge(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cJX_UBOUND(PlantGroup,Season) $
              (Abs(cdiffPct_cJX_UBOUND(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cJX_UBOUND(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cJX_rELNOX0n(INOXP,PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cJX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cJX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) $
              (Abs(cdiffPct_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cKX_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
              and Abs(cdiff_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter Percent_cKX_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            cdiffPct_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
              and Abs(cdiff_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMB_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cMB_EFDCOSTS(PlantGroup,Season) $
              (Abs(cdiffPct_cMB_EFDCOSTS(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cMB_EFDCOSTS(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMB_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cMB_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cMB_rCBle(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cMB_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMB_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
           Definition: { 
            cdiffPct_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) $
              (Abs(cdiffPct_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMB_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cMB_UBOUND(PlantGroup,Season) $
              (Abs(cdiffPct_cMB_UBOUND(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cMB_UBOUND(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMERC__rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: { 
            cdiffPct_cMERC__rMERC_le(PlantType_ECP,nHGCODE) $
              (Abs(cdiffPct_cMERC__rMERC_le(PlantType_ECP,nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cMERC__rMERC_le(PlantType_ECP,nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMERC__rMERCURYle {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) $
              (Abs(cdiffPct_cMERC__rMERCURYle(nHGCODE,PlantType_ECP)) > cdiffPct_Delta
              and Abs(cdiff_cMERC__rMERCURYle(nHGCODE,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMERC__rMERCURYn {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) $
              (Abs(cdiffPct_cMERC__rMERCURYn(nHGCODE,PlantType_ECP)) > cdiffPct_Delta
              and Abs(cdiff_cMERC__rMERCURYn(nHGCODE,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMERC_DS_rMERC_DSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
           Definition: { 
            cdiffPct_cMERC_DS_rMERC_DSle(nHGCODE) $
              (Abs(cdiffPct_cMERC_DS_rMERC_DSle(nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cMERC_DS_rMERC_DSle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMERC_DS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cMERC_DS_rMERCURYle(nHGCODE) $
              (Abs(cdiffPct_cMERC_DS_rMERCURYle(nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cMERC_DS_rMERCURYle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMERC_DS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cMERC_DS_rMERCURYn(nHGCODE) $
              (Abs(cdiffPct_cMERC_DS_rMERCURYn(nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cMERC_DS_rMERCURYn(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMERC_RS_rMERC_RSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
           Definition: { 
            cdiffPct_cMERC_RS_rMERC_RSle(nHGCODE) $
              (Abs(cdiffPct_cMERC_RS_rMERC_RSle(nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cMERC_RS_rMERC_RSle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMERC_RS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cMERC_RS_rMERCURYle(nHGCODE) $
              (Abs(cdiffPct_cMERC_RS_rMERCURYle(nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cMERC_RS_rMERCURYle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMERC_RS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cMERC_RS_rMERCURYn(nHGCODE) $
              (Abs(cdiffPct_cMERC_RS_rMERCURYn(nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cMERC_RS_rMERCURYn(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMVS_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) $
              (Abs(cdiffPct_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMVS_rMVSO2le {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
           Definition: { 
            cdiffPct_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) $
              (Abs(cdiffPct_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMVS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiffPct_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) $
              (Abs(cdiffPct_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMVSO2_EFDCOSTS {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) $
              (Abs(cdiffPct_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiffPct_Delta
              and Abs(cdiff_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMVSO2_rSULFURle {
           IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiffPct_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) $
              (Abs(cdiffPct_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiffPct_Delta
              and Abs(cdiff_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter Percent_cMVSO2_UBOUND {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) $
              (Abs(cdiffPct_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiffPct_Delta
              and Abs(cdiff_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNOT_EFDCOSTS {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) $
              (Abs(cdiffPct_cNOT_EFDCOSTS(OGSMSector,OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNOT_EFDCOSTS(OGSMSector,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNOT_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiffPct_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) $
              (Abs(cdiffPct_cNOT_rZOGSMeq(OGSMRegion,OGSMSector)) > cdiffPct_Delta
              and Abs(cdiff_cNOT_rZOGSMeq(OGSMRegion,OGSMSector)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNOT_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: { 
            cdiffPct_cNOT_rZOTHRge(OGSMRegion,OGSMSector) $
              (Abs(cdiffPct_cNOT_rZOTHRge(OGSMRegion,OGSMSector)) > cdiffPct_Delta
              and Abs(cdiff_cNOT_rZOTHRge(OGSMRegion,OGSMSector)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNOT_UBOUND {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cNOT_UBOUND(OGSMSector,OGSMRegion) $
              (Abs(cdiffPct_cNOT_UBOUND(OGSMSector,OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNOT_UBOUND(OGSMSector,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNOTSF_EFDCOSTS {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cNOTSF_EFDCOSTS(OGSMRegion) $
              (Abs(cdiffPct_cNOTSF_EFDCOSTS(OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNOTSF_EFDCOSTS(OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNOTSF_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiffPct_cNOTSF_rZOGSMeq(OGSMRegion) $
              (Abs(cdiffPct_cNOTSF_rZOGSMeq(OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNOTSF_rZOGSMeq(OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNSR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNSR_EFDCOSTS(FuelRegion,OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNSR_EFDCOSTS(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNSR_rZFLRSeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNSR_rZFLRSeq(FuelRegion,OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNSR_rZFLRSeq(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNSR_rZFLRSge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cNSR_rZFLRSge(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNSR_rZFLRSge(FuelRegion,OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNSR_rZFLRSge(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNSR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiffPct_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) $
              (Abs(cdiffPct_cNSR_rZOGSMeq(OGSMRegion,FuelRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNSR_rZOGSMeq(OGSMRegion,FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNSX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cNSX_EFDCOSTS(FuelRegion) $
              (Abs(cdiffPct_cNSX_EFDCOSTS(FuelRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNSX_EFDCOSTS(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNSX_rZFLRSeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cNSX_rZFLRSeq(FuelRegion) $
              (Abs(cdiffPct_cNSX_rZFLRSeq(FuelRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNSX_rZFLRSeq(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNSX_rZFLRSge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cNSX_rZFLRSge(FuelRegion) $
              (Abs(cdiffPct_cNSX_rZFLRSge(FuelRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNSX_rZFLRSge(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTO_EFDCOSTS {
           IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) $
              (Abs(cdiffPct_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiffPct_Delta
              and Abs(cdiff_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTO_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiffPct_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) $
              (Abs(cdiffPct_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiffPct_Delta
              and Abs(cdiff_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTO_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: { 
            cdiffPct_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) $
              (Abs(cdiffPct_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiffPct_Delta
              and Abs(cdiff_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNTR_EFDCOSTS(FuelRegion,OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNTR_EFDCOSTS(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTR_rZFLRGeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNTR_rZFLRGeq(FuelRegion,OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNTR_rZFLRGeq(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTR_rZFLRGge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cNTR_rZFLRGge(FuelRegion,OGSMRegion) $
              (Abs(cdiffPct_cNTR_rZFLRGge(FuelRegion,OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNTR_rZFLRGge(FuelRegion,OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiffPct_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) $
              (Abs(cdiffPct_cNTR_rZOGSMeq(OGSMRegion,FuelRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNTR_rZOGSMeq(OGSMRegion,FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cNTX_EFDCOSTS(FuelRegion) $
              (Abs(cdiffPct_cNTX_EFDCOSTS(FuelRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNTX_EFDCOSTS(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTX_rZFLRGeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cNTX_rZFLRGeq(FuelRegion) $
              (Abs(cdiffPct_cNTX_rZFLRGeq(FuelRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNTX_rZFLRGeq(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cNTX_rZFLRGge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cNTX_rZFLRGge(FuelRegion) $
              (Abs(cdiffPct_cNTX_rZFLRGge(FuelRegion)) > cdiffPct_Delta
              and Abs(cdiff_cNTX_rZFLRGge(FuelRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiffPct_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiffPct_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiffPct_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            cdiffPct_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            cdiffPct_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            cdiffPct_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            cdiffPct_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            cdiffPct_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiffPct_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cO_rCBle(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCBle(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rCBle(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiffPct_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiffPct_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            cdiffPct_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            cdiffPct_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            cdiffPct_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            cdiffPct_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            cdiffPct_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cO_rMRXge(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rMRXge(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rMRXge(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cO_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cO_UBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cO_UBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cO_UBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cOX_EFDCOSTS(PlantGroup,Season) $
              (Abs(cdiffPct_cOX_EFDCOSTS(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cOX_EFDCOSTS(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cOX_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rCBle(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cOX_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cOX_rELNOX0n(INOXP,PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cOX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            cdiffPct_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cOX_rMRXge(PlantGroup,Season) $
              (Abs(cdiffPct_cOX_rMRXge(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cOX_rMRXge(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cOX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cOX_UBOUND(PlantGroup,Season) $
              (Abs(cdiffPct_cOX_UBOUND(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cOX_UBOUND(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rCARBONXXle {
           Text: "OML Columns: RHSEFD and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cRHS_rCARBONXXle $
              (Abs(cdiffPct_cRHS_rCARBONXXle) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rCARBONXXle) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cRHS_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cRHS_rCBle(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            cdiffPct_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) $
              (Abs(cdiffPct_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cRHS_rCO2QNRle(SupplyRegion_ALT2) $
              (Abs(cdiffPct_cRHS_rCO2QNRle(SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rCO2QNRle(SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            cdiffPct_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) $
              (Abs(cdiffPct_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rENeq {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiffPct_cRHS_rENeq(PlantGroup,Season) $
              (Abs(cdiffPct_cRHS_rENeq(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rENeq(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rENle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: { 
            cdiffPct_cRHS_rENle(PlantGroup,Season) $
              (Abs(cdiffPct_cRHS_rENle(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rENle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
           Definition: { 
            cdiffPct_cRHS_rEXle(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cRHS_rEXle(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rEXle(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
           Definition: { 
            cdiffPct_cRHS_rFle(PlantGroup,Season,Slice) $
              (Abs(cdiffPct_cRHS_rFle(PlantGroup,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rFle(PlantGroup,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
           Definition: { 
            cdiffPct_cRHS_rIMle(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cRHS_rIMle(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rIMle(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            cdiffPct_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cRHS_rLDge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cRHS_rLDge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rLDge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
           Definition: { 
            cdiffPct_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) $
              (Abs(cdiffPct_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: RHSEFD and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cRHS_rMERCURYle(nHGCODE) $
              (Abs(cdiffPct_cRHS_rMERCURYle(nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rMERCURYle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rMRXge {
           IndexDomain: (PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cRHS_rMRXge(PlantGroup) $
              (Abs(cdiffPct_cRHS_rMRXge(PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rMRXge(PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rMVSO2le {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
           Definition: { 
            cdiffPct_cRHS_rMVSO2le(CoalDemandRegion) $
              (Abs(cdiffPct_cRHS_rMVSO2le(CoalDemandRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rMVSO2le(CoalDemandRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
           Definition: { 
            cdiffPct_cRHS_rP2le(Slice,SupplyRegion,Season) $
              (Abs(cdiffPct_cRHS_rP2le(Slice,SupplyRegion,Season)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rP2le(Slice,SupplyRegion,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
           Definition: { 
            cdiffPct_cRHS_rSULFURCRle(CoalDemandRegion) $
              (Abs(cdiffPct_cRHS_rSULFURCRle(CoalDemandRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rSULFURCRle(CoalDemandRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rSULFURle {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
           Definition: { 
            cdiffPct_cRHS_rSULFURle(SO2Region) $
              (Abs(cdiffPct_cRHS_rSULFURle(SO2Region)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rSULFURle(SO2Region)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            cdiffPct_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) $
              (Abs(cdiffPct_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            cdiffPct_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) $
              (Abs(cdiffPct_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
           Definition: { 
            cdiffPct_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRHS_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
           Definition: { 
            cdiffPct_cRHS_rZOGSMeq(OGSMRegion) $
              (Abs(cdiffPct_cRHS_rZOGSMeq(OGSMRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRHS_rZOGSMeq(OGSMRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRPUS_EFDCOSTS {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cRPUS_EFDCOSTS(ResidProductionStep) $
              (Abs(cdiffPct_cRPUS_EFDCOSTS(ResidProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cRPUS_EFDCOSTS(ResidProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRPUS_rS_RSUSle {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
           Definition: { 
            cdiffPct_cRPUS_rS_RSUSle(ResidProductionStep) $
              (Abs(cdiffPct_cRPUS_rS_RSUSle(ResidProductionStep)) > cdiffPct_Delta
              and Abs(cdiff_cRPUS_rS_RSUSle(ResidProductionStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cRTUS_EFDCOSTS(OilRegion) $
              (Abs(cdiffPct_cRTUS_EFDCOSTS(OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRTUS_EFDCOSTS(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cRTUS_rCARBONXXle(OilRegion) $
              (Abs(cdiffPct_cRTUS_rCARBONXXle(OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRTUS_rCARBONXXle(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            cdiffPct_cRTUS_rCARBONXXn(OilRegion) $
              (Abs(cdiffPct_cRTUS_rCARBONXXn(OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRTUS_rCARBONXXn(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRTUS_rMERC_RSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
           Definition: { 
            cdiffPct_cRTUS_rMERC_RSle(nHGCODE,OilRegion) $
              (Abs(cdiffPct_cRTUS_rMERC_RSle(nHGCODE,OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRTUS_rMERC_RSle(nHGCODE,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRTUS_rRSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
           Definition: { 
            cdiffPct_cRTUS_rRSle(CensusRegion,OilRegion) $
              (Abs(cdiffPct_cRTUS_rRSle(CensusRegion,OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRTUS_rRSle(CensusRegion,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRTUS_rS_RSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
           Definition: { 
            cdiffPct_cRTUS_rS_RSUSle(OilRegion) $
              (Abs(cdiffPct_cRTUS_rS_RSUSle(OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRTUS_rS_RSUSle(OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRTUS_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
           Definition: { 
            cdiffPct_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) $
              (Abs(cdiffPct_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRTUS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiffPct_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) $
              (Abs(cdiffPct_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cRTUS_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: { 
            cdiffPct_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) $
              (Abs(cdiffPct_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion)) > cdiffPct_Delta
              and Abs(cdiff_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion)) > cdiff_Delta)
           }
       }
       Parameter Percent_cS2_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cS2_rLDge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cS2_rLDge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cS2_rLDge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cS2_rP2_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: { 
            cdiffPct_cS2_rP2_le(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cS2_rP2_le(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cS2_rP2_le(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cS2_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: { 
            cdiffPct_cS2_rP2le(Slice,SupplyRegion,Season) $
              (Abs(cdiffPct_cS2_rP2le(Slice,SupplyRegion,Season)) > cdiffPct_Delta
              and Abs(cdiff_cS2_rP2le(Slice,SupplyRegion,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cS2_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cS2_UBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cS2_UBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cS2_UBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) $
              (Abs(cdiffPct_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            cdiffPct_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSC_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            cdiffPct_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) $
              (Abs(cdiffPct_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)) > cdiffPct_Delta
              and Abs(cdiff_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSPx_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cSPx_EFDCOSTS(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cSPx_EFDCOSTS(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSPx_LBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cSPx_LBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cSPx_LBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cSPx_LBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSPx_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cSPx_rSRge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cSPx_rSRge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cSPx_rSRge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSPx_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cSPx_UBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cSPx_UBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cSPx_UBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: { 
            cdiffPct_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: { 
            cdiffPct_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSR_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cST_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cST_rLDge(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cST_rLDge(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cST_rLDge(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cST_rPS_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            cdiffPct_cST_rPS_le(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cST_rPS_le(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cST_rPS_le(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cST_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cST_UBOUND(SupplyRegion,Season,Slice) $
              (Abs(cdiffPct_cST_UBOUND(SupplyRegion,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cST_UBOUND(SupplyRegion,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSULF_EFDCOSTS {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) $
              (Abs(cdiffPct_cSULF_EFDCOSTS(PlantType_ECP,SO2Region)) > cdiffPct_Delta
              and Abs(cdiff_cSULF_EFDCOSTS(PlantType_ECP,SO2Region)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSULF_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
           Definition: { 
            cdiffPct_cSULF_rSULFle(PlantType_ECP,SO2Region) $
              (Abs(cdiffPct_cSULF_rSULFle(PlantType_ECP,SO2Region)) > cdiffPct_Delta
              and Abs(cdiff_cSULF_rSULFle(PlantType_ECP,SO2Region)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSULF_rSULFURle {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiffPct_cSULF_rSULFURle(SO2Region,PlantType_ECP) $
              (Abs(cdiffPct_cSULF_rSULFURle(SO2Region,PlantType_ECP)) > cdiffPct_Delta
              and Abs(cdiff_cSULF_rSULFURle(SO2Region,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cSULF_rSULFURn {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            cdiffPct_cSULF_rSULFURn(SO2Region,PlantType_ECP) $
              (Abs(cdiffPct_cSULF_rSULFURn(SO2Region,PlantType_ECP)) > cdiffPct_Delta
              and Abs(cdiff_cSULF_rSULFURn(SO2Region,PlantType_ECP)) > cdiff_Delta)
           }
       }
       Parameter Percent_cT_STOCK__LBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: LBOUND";
           Definition: { 
            cdiffPct_cT_STOCK__LBOUND $
              (Abs(cdiffPct_cT_STOCK__LBOUND) > cdiffPct_Delta
              and Abs(cdiff_cT_STOCK__LBOUND) > cdiff_Delta)
           }
       }
       Parameter Percent_cT_STOCK__rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cT_STOCK__rMERCURYle(nHGCODE) $
              (Abs(cdiffPct_cT_STOCK__rMERCURYle(nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cT_STOCK__rMERCURYle(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cT_STOCK__rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: { 
            cdiffPct_cT_STOCK__rMERCURYn(nHGCODE) $
              (Abs(cdiffPct_cT_STOCK__rMERCURYn(nHGCODE)) > cdiffPct_Delta
              and Abs(cdiff_cT_STOCK__rMERCURYn(nHGCODE)) > cdiff_Delta)
           }
       }
       Parameter Percent_cT_STOCK__rSULFURn {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
           Definition: { 
            cdiffPct_cT_STOCK__rSULFURn(SO2Region) $
              (Abs(cdiffPct_cT_STOCK__rSULFURn(SO2Region)) > cdiffPct_Delta
              and Abs(cdiff_cT_STOCK__rSULFURn(SO2Region)) > cdiff_Delta)
           }
       }
       Parameter Percent_cT_STOCK__UBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cT_STOCK__UBOUND $
              (Abs(cdiffPct_cT_STOCK__UBOUND) > cdiffPct_Delta
              and Abs(cdiff_cT_STOCK__UBOUND) > cdiff_Delta)
           }
       }
       Parameter Percent_cTC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) $
              (Abs(cdiffPct_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTC_rCANIMPUSeq {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CANIMPUS";
           Definition: { 
            cdiffPct_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) $
              (Abs(cdiffPct_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            cdiffPct_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) $
              (Abs(cdiffPct_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiffPct_Delta
              and Abs(cdiff_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            cdiffPct_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) $
              (Abs(cdiffPct_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)) > cdiffPct_Delta
              and Abs(cdiff_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: { 
            cdiffPct_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: { 
            cdiffPct_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) $
              (Abs(cdiffPct_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiffPct_Delta
              and Abs(cdiff_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTR_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
           Definition: { 
            cdiffPct_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cTR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) $
              (Abs(cdiffPct_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiffPct_Delta
              and Abs(cdiff_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiffPct_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiffPct_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiffPct_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            cdiffPct_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            cdiffPct_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            cdiffPct_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            cdiffPct_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            cdiffPct_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) $
              (Abs(cdiffPct_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_EFDCOSTS(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            cdiffPct_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            cdiffPct_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cU_rCBle(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCBle(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rCBle(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            cdiffPct_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            cdiffPct_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            cdiffPct_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            cdiffPct_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            cdiffPct_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            cdiffPct_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            cdiffPct_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            cdiffPct_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            cdiffPct_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            cdiffPct_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cU_rMRXge(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rMRXge(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rMRXge(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) $
              (Abs(cdiffPct_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            cdiffPct_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            cdiffPct_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cU_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cU_UBOUND(PlantGroup,Season,OperatingMode) $
              (Abs(cdiffPct_cU_UBOUND(PlantGroup,Season,OperatingMode)) > cdiffPct_Delta
              and Abs(cdiff_cU_UBOUND(PlantGroup,Season,OperatingMode)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            cdiffPct_cUX_EFDCOSTS(PlantGroup,Season) $
              (Abs(cdiffPct_cUX_EFDCOSTS(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cUX_EFDCOSTS(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            cdiffPct_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            cdiffPct_cUX_rCBle(PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rCBle(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cUX_rCBle(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            cdiffPct_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            cdiffPct_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            cdiffPct_cUX_rMRXge(PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rMRXge(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cUX_rMRXge(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            cdiffPct_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) $
              (Abs(cdiffPct_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiffPct_Delta
              and Abs(cdiff_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
            cdiffPct_cUX_UBOUND(PlantGroup,Season) $
              (Abs(cdiffPct_cUX_UBOUND(PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cUX_UBOUND(PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            cdiffPct_cUX_rELNOX0n(INOXP,PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cUX_rELNOX0n(INOXP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
       Parameter Percent_cUX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            cdiffPct_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) $
              (Abs(cdiffPct_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiffPct_Delta
              and Abs(cdiff_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)) > cdiff_Delta)
           }
       }
     }
   DeclarationSection cdiffPct_parameter_declare {
       Parameter cdiffPct_cACISPLY_EFDCOSTS {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cACISPLY_EFDCOSTS(numACI) <> inf
             and cpass_cACISPLY_EFDCOSTS(numACI) <> inf ) then
               if (ccalc_cACISPLY_EFDCOSTS(numACI) <> 0 ) then
                 cdiff_cACISPLY_EFDCOSTS(numACI) /$
                  ccalc_cACISPLY_EFDCOSTS(numACI) *100
               elseif (cpass_cACISPLY_EFDCOSTS(numACI) <> 0 ) then
                 cdiff_cACISPLY_EFDCOSTS(numACI) /$
                  cpass_cACISPLY_EFDCOSTS(numACI) *100
               endif
            else
               cdiff_cACISPLY_EFDCOSTS(numACI)
            endif
           }
       }
       Parameter cdiffPct_cACISPLY_rACICSTle {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
           Definition: { 
            if (ccalc_cACISPLY_rACICSTle(numACI) <> inf
             and cpass_cACISPLY_rACICSTle(numACI) <> inf ) then
               if (ccalc_cACISPLY_rACICSTle(numACI) <> 0 ) then
                 cdiff_cACISPLY_rACICSTle(numACI) /$
                  ccalc_cACISPLY_rACICSTle(numACI) *100
               elseif (cpass_cACISPLY_rACICSTle(numACI) <> 0 ) then
                 cdiff_cACISPLY_rACICSTle(numACI) /$
                  cpass_cACISPLY_rACICSTle(numACI) *100
               endif
            else
               cdiff_cACISPLY_rACICSTle(numACI)
            endif
           }
       }
       Parameter cdiffPct_cACISPLY_UBOUND {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cACISPLY_UBOUND(numACI) <> inf
             and cpass_cACISPLY_UBOUND(numACI) <> inf ) then
               if (ccalc_cACISPLY_UBOUND(numACI) <> 0 ) then
                 cdiff_cACISPLY_UBOUND(numACI) /$
                  ccalc_cACISPLY_UBOUND(numACI) *100
               elseif (cpass_cACISPLY_UBOUND(numACI) <> 0 ) then
                 cdiff_cACISPLY_UBOUND(numACI) /$
                  cpass_cACISPLY_UBOUND(numACI) *100
               endif
            else
               cdiff_cACISPLY_UBOUND(numACI)
            endif
           }
       }
       Parameter cdiffPct_cB_EFDCOSTS {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
           Definition: { 
            if (ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rCARBONle {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rCARBONn {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rCARBONXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rCARBONXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rCARSEQXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQXX";
           Definition: { 
            if (ccalc_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rCFGn {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
           Definition: { 
            if (ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
           Definition: { 
            if (ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rDSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
           Definition: { 
            if (ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rNGle {
           IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
           Definition: { 
            if (ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rRSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
           Definition: { 
            if (ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cB_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
           Definition: { 
            if (ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf
             and cpass_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> inf ) then
               if (ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               elseif (cpass_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) <> 0 ) then
                 cdiff_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) /$
                  cpass_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
               endif
            else
               cdiff_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            endif
           }
       }
       Parameter cdiffPct_cBCTLN_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> inf
             and cpass_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> inf ) then
               if (ccalc_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> 0 ) then
                 cdiff_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) /$
                  ccalc_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) *100
               elseif (cpass_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> 0 ) then
                 cdiff_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) /$
                  cpass_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) *100
               endif
            else
               cdiff_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)
            endif
           }
       }
       Parameter cdiffPct_cBCTLN_rELNOX0n {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) <> inf
             and cpass_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) <> inf ) then
               if (ccalc_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) <> 0 ) then
                 cdiff_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) /$
                  ccalc_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *100
               elseif (cpass_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) <> 0 ) then
                 cdiff_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) /$
                  cpass_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *100
               endif
            else
               cdiff_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason)
            endif
           }
       }
       Parameter cdiffPct_cBCTLN_rELNOXOTle {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)OT";
           Definition: { 
            if (ccalc_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) <> inf
             and cpass_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) <> inf ) then
               if (ccalc_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) <> 0 ) then
                 cdiff_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) /$
                  ccalc_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *100
               elseif (cpass_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) <> 0 ) then
                 cdiff_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) /$
                  cpass_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *100
               endif
            else
               cdiff_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason)
            endif
           }
       }
       Parameter cdiffPct_cBCTLN_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> inf
             and cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> inf ) then
               if (ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> 0 ) then
                 cdiff_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) /$
                  ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) *100
               elseif (cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> 0 ) then
                 cdiff_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) /$
                  cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) *100
               endif
            else
               cdiff_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)
            endif
           }
       }
       Parameter cdiffPct_cBiomassOtherUsage_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> inf
             and cpass_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> inf ) then
               if (ccalc_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> 0 ) then
                 cdiff_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) /$
                  ccalc_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) *100
               elseif (cpass_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> 0 ) then
                 cdiff_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) /$
                  cpass_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) *100
               endif
            else
               cdiff_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)
            endif
           }
       }
       Parameter cdiffPct_cBiomassOtherUsage_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
           Definition: { 
            if (ccalc_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) <> inf
             and cpass_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) <> inf ) then
               if (ccalc_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) <> 0 ) then
                 cdiff_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) /$
                  ccalc_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) *100
               elseif (cpass_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) <> 0 ) then
                 cdiff_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) /$
                  cpass_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) *100
               endif
            else
               cdiff_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector)
            endif
           }
       }
       Parameter cdiffPct_cBiomassOtherUsage_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> inf
             and cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> inf ) then
               if (ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> 0 ) then
                 cdiff_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) /$
                  ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) *100
               elseif (cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> 0 ) then
                 cdiff_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) /$
                  cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) *100
               endif
            else
               cdiff_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)
            endif
           }
       }
       Parameter cdiffPct_cBP_type_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf
             and cpass_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf ) then
               if (ccalc_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> 0 ) then
                 cdiff_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) /$
                  ccalc_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
               elseif (cpass_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> 0 ) then
                 cdiff_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) /$
                  cpass_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
               endif
            else
               cdiff_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cBP_type_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
           Definition: { 
            if (ccalc_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf
             and cpass_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf ) then
               if (ccalc_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> 0 ) then
                 cdiff_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) /$
                  ccalc_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
               elseif (cpass_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> 0 ) then
                 cdiff_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) /$
                  cpass_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
               endif
            else
               cdiff_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cBP_type_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
           Definition: { 
            if (ccalc_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) <> inf
             and cpass_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) <> inf ) then
               if (ccalc_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) <> 0 ) then
                 cdiff_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) /$
                  ccalc_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) *100
               elseif (cpass_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) <> 0 ) then
                 cdiff_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) /$
                  cpass_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) *100
               endif
            else
               cdiff_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cBP_type_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf
             and cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf ) then
               if (ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> 0 ) then
                 cdiff_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) /$
                  ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
               elseif (cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> 0 ) then
                 cdiff_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) /$
                  cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
               endif
            else
               cdiff_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cC_Z_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf
             and cpass_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf ) then
               if (ccalc_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  ccalc_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               elseif (cpass_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  cpass_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               endif
            else
               cdiff_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
            endif
           }
       }
       Parameter cdiffPct_cC_Z_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            if (ccalc_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf
             and cpass_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf ) then
               if (ccalc_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  ccalc_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               elseif (cpass_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  cpass_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               endif
            else
               cdiff_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
            endif
           }
       }
       Parameter cdiffPct_cCARBNK_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cCARBNK_EFDCOSTS(CarbonRegion) <> inf
             and cpass_cCARBNK_EFDCOSTS(CarbonRegion) <> inf ) then
               if (ccalc_cCARBNK_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARBNK_EFDCOSTS(CarbonRegion) /$
                  ccalc_cCARBNK_EFDCOSTS(CarbonRegion) *100
               elseif (cpass_cCARBNK_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARBNK_EFDCOSTS(CarbonRegion) /$
                  cpass_cCARBNK_EFDCOSTS(CarbonRegion) *100
               endif
            else
               cdiff_cCARBNK_EFDCOSTS(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARBNK_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARBNK_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCARBNK_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCARBNK_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARBNK_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCARBNK_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCARBNK_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARBNK_rCARBONABeq(CarbonRegion) /$
                  cpass_cCARBNK_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCARBNK_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARBNK_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARBNK_rCARBONABn(CarbonRegion) <> inf
             and cpass_cCARBNK_rCARBONABn(CarbonRegion) <> inf ) then
               if (ccalc_cCARBNK_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARBNK_rCARBONABn(CarbonRegion) /$
                  ccalc_cCARBNK_rCARBONABn(CarbonRegion) *100
               elseif (cpass_cCARBNK_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARBNK_rCARBONABn(CarbonRegion) /$
                  cpass_cCARBNK_rCARBONABn(CarbonRegion) *100
               endif
            else
               cdiff_cCARBNK_rCARBONABn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARBNK_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARBNK_UBOUND(CarbonRegion) <> inf
             and cpass_cCARBNK_UBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARBNK_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARBNK_UBOUND(CarbonRegion) /$
                  ccalc_cCARBNK_UBOUND(CarbonRegion) *100
               elseif (cpass_cCARBNK_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARBNK_UBOUND(CarbonRegion) /$
                  cpass_cCARBNK_UBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARBNK_UBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARBONOT_LBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCARBONOT_LBOUND <> inf
             and cpass_cCARBONOT_LBOUND <> inf ) then
               if (ccalc_cCARBONOT_LBOUND <> 0 ) then
                 cdiff_cCARBONOT_LBOUND /$
                  ccalc_cCARBONOT_LBOUND *100
               elseif (cpass_cCARBONOT_LBOUND <> 0 ) then
                 cdiff_cCARBONOT_LBOUND /$
                  cpass_cCARBONOT_LBOUND *100
               endif
            else
               cdiff_cCARBONOT_LBOUND
            endif
           }
       }
       Parameter cdiffPct_cCARBONOT_rCARBONXXle {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cCARBONOT_rCARBONXXle <> inf
             and cpass_cCARBONOT_rCARBONXXle <> inf ) then
               if (ccalc_cCARBONOT_rCARBONXXle <> 0 ) then
                 cdiff_cCARBONOT_rCARBONXXle /$
                  ccalc_cCARBONOT_rCARBONXXle *100
               elseif (cpass_cCARBONOT_rCARBONXXle <> 0 ) then
                 cdiff_cCARBONOT_rCARBONXXle /$
                  cpass_cCARBONOT_rCARBONXXle *100
               endif
            else
               cdiff_cCARBONOT_rCARBONXXle
            endif
           }
       }
       Parameter cdiffPct_cCARBONOT_rCARBONXXn {
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cCARBONOT_rCARBONXXn <> inf
             and cpass_cCARBONOT_rCARBONXXn <> inf ) then
               if (ccalc_cCARBONOT_rCARBONXXn <> 0 ) then
                 cdiff_cCARBONOT_rCARBONXXn /$
                  ccalc_cCARBONOT_rCARBONXXn *100
               elseif (cpass_cCARBONOT_rCARBONXXn <> 0 ) then
                 cdiff_cCARBONOT_rCARBONXXn /$
                  cpass_cCARBONOT_rCARBONXXn *100
               endif
            else
               cdiff_cCARBONOT_rCARBONXXn
            endif
           }
       }
       Parameter cdiffPct_cCARBONOT_UBOUND {
           Text: "OML Columns: CARBONOT and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARBONOT_UBOUND <> inf
             and cpass_cCARBONOT_UBOUND <> inf ) then
               if (ccalc_cCARBONOT_UBOUND <> 0 ) then
                 cdiff_cCARBONOT_UBOUND /$
                  ccalc_cCARBONOT_UBOUND *100
               elseif (cpass_cCARBONOT_UBOUND <> 0 ) then
                 cdiff_cCARBONOT_UBOUND /$
                  cpass_cCARBONOT_UBOUND *100
               endif
            else
               cdiff_cCARBONOT_UBOUND
            endif
           }
       }
       Parameter cdiffPct_cCARDM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf
             and cpass_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf ) then
               if (ccalc_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) <> 0 ) then
                 cdiff_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) /$
                  ccalc_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) *100
               elseif (cpass_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) <> 0 ) then
                 cdiff_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) /$
                  cpass_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) *100
               endif
            else
               cdiff_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARDM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) <> inf
             and cpass_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) <> inf ) then
               if (ccalc_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) /$
                  ccalc_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *100
               elseif (cpass_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) /$
                  cpass_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *100
               endif
            else
               cdiff_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCARDM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) <> inf
             and cpass_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) <> inf ) then
               if (ccalc_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) /$
                  ccalc_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *100
               elseif (cpass_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) /$
                  cpass_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *100
               endif
            else
               cdiff_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCARDM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf
             and cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf ) then
               if (ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> 0 ) then
                 cdiff_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) /$
                  ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) *100
               elseif (cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> 0 ) then
                 cdiff_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) /$
                  cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) *100
               endif
            else
               cdiff_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARECR_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cCARECR_EFDCOSTS(CarbonRegion) <> inf
             and cpass_cCARECR_EFDCOSTS(CarbonRegion) <> inf ) then
               if (ccalc_cCARECR_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARECR_EFDCOSTS(CarbonRegion) /$
                  ccalc_cCARECR_EFDCOSTS(CarbonRegion) *100
               elseif (cpass_cCARECR_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARECR_EFDCOSTS(CarbonRegion) /$
                  cpass_cCARECR_EFDCOSTS(CarbonRegion) *100
               endif
            else
               cdiff_cCARECR_EFDCOSTS(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARECR_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARECR_rCARBONle(CarbonRegion) <> inf
             and cpass_cCARECR_rCARBONle(CarbonRegion) <> inf ) then
               if (ccalc_cCARECR_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARECR_rCARBONle(CarbonRegion) /$
                  ccalc_cCARECR_rCARBONle(CarbonRegion) *100
               elseif (cpass_cCARECR_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARECR_rCARBONle(CarbonRegion) /$
                  cpass_cCARECR_rCARBONle(CarbonRegion) *100
               endif
            else
               cdiff_cCARECR_rCARBONle(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARECR_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARECR_UBOUND(CarbonRegion) <> inf
             and cpass_cCARECR_UBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARECR_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARECR_UBOUND(CarbonRegion) /$
                  ccalc_cCARECR_UBOUND(CarbonRegion) *100
               elseif (cpass_cCARECR_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARECR_UBOUND(CarbonRegion) /$
                  cpass_cCARECR_UBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARECR_UBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARESC_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cCARESC_EFDCOSTS(CarbonRegion) <> inf
             and cpass_cCARESC_EFDCOSTS(CarbonRegion) <> inf ) then
               if (ccalc_cCARESC_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARESC_EFDCOSTS(CarbonRegion) /$
                  ccalc_cCARESC_EFDCOSTS(CarbonRegion) *100
               elseif (cpass_cCARESC_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARESC_EFDCOSTS(CarbonRegion) /$
                  cpass_cCARESC_EFDCOSTS(CarbonRegion) *100
               endif
            else
               cdiff_cCARESC_EFDCOSTS(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARESC_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARESC_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCARESC_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCARESC_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARESC_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCARESC_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCARESC_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARESC_rCARBONABeq(CarbonRegion) /$
                  cpass_cCARESC_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCARESC_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARESC_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARESC_rCARBONABn(CarbonRegion) <> inf
             and cpass_cCARESC_rCARBONABn(CarbonRegion) <> inf ) then
               if (ccalc_cCARESC_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARESC_rCARBONABn(CarbonRegion) /$
                  ccalc_cCARESC_rCARBONABn(CarbonRegion) *100
               elseif (cpass_cCARESC_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARESC_rCARBONABn(CarbonRegion) /$
                  cpass_cCARESC_rCARBONABn(CarbonRegion) *100
               endif
            else
               cdiff_cCARESC_rCARBONABn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARESC_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARESC_rCARBONle(CarbonRegion) <> inf
             and cpass_cCARESC_rCARBONle(CarbonRegion) <> inf ) then
               if (ccalc_cCARESC_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARESC_rCARBONle(CarbonRegion) /$
                  ccalc_cCARESC_rCARBONle(CarbonRegion) *100
               elseif (cpass_cCARESC_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARESC_rCARBONle(CarbonRegion) /$
                  cpass_cCARESC_rCARBONle(CarbonRegion) *100
               endif
            else
               cdiff_cCARESC_rCARBONle(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARESCXX_EFDCOSTS {
           Text: "OML Columns: CARESCXX and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cCARESCXX_EFDCOSTS <> inf
             and cpass_cCARESCXX_EFDCOSTS <> inf ) then
               if (ccalc_cCARESCXX_EFDCOSTS <> 0 ) then
                 cdiff_cCARESCXX_EFDCOSTS /$
                  ccalc_cCARESCXX_EFDCOSTS *100
               elseif (cpass_cCARESCXX_EFDCOSTS <> 0 ) then
                 cdiff_cCARESCXX_EFDCOSTS /$
                  cpass_cCARESCXX_EFDCOSTS *100
               endif
            else
               cdiff_cCARESCXX_EFDCOSTS
            endif
           }
       }
       Parameter cdiffPct_cCARESCXX_rCARBONXXle {
           Text: "OML Columns: CARESCXX and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cCARESCXX_rCARBONXXle <> inf
             and cpass_cCARESCXX_rCARBONXXle <> inf ) then
               if (ccalc_cCARESCXX_rCARBONXXle <> 0 ) then
                 cdiff_cCARESCXX_rCARBONXXle /$
                  ccalc_cCARESCXX_rCARBONXXle *100
               elseif (cpass_cCARESCXX_rCARBONXXle <> 0 ) then
                 cdiff_cCARESCXX_rCARBONXXle /$
                  cpass_cCARESCXX_rCARBONXXle *100
               endif
            else
               cdiff_cCARESCXX_rCARBONXXle
            endif
           }
       }
       Parameter cdiffPct_cCARESCXX_UBOUND {
           Text: "OML Columns: CARESCXX and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARESCXX_UBOUND <> inf
             and cpass_cCARESCXX_UBOUND <> inf ) then
               if (ccalc_cCARESCXX_UBOUND <> 0 ) then
                 cdiff_cCARESCXX_UBOUND /$
                  ccalc_cCARESCXX_UBOUND *100
               elseif (cpass_cCARESCXX_UBOUND <> 0 ) then
                 cdiff_cCARESCXX_UBOUND /$
                  cpass_cCARESCXX_UBOUND *100
               endif
            else
               cdiff_cCARESCXX_UBOUND
            endif
           }
       }
       Parameter cdiffPct_cCARFUE_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCARFUE_LBOUND(CarbonRegion) <> inf
             and cpass_cCARFUE_LBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARFUE_LBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARFUE_LBOUND(CarbonRegion) /$
                  ccalc_cCARFUE_LBOUND(CarbonRegion) *100
               elseif (cpass_cCARFUE_LBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARFUE_LBOUND(CarbonRegion) /$
                  cpass_cCARFUE_LBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARFUE_LBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARFUE_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARFUE_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCARFUE_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCARFUE_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARFUE_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCARFUE_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCARFUE_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARFUE_rCARBONABeq(CarbonRegion) /$
                  cpass_cCARFUE_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCARFUE_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARFUE_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARFUE_rCARBONABn(CarbonRegion) <> inf
             and cpass_cCARFUE_rCARBONABn(CarbonRegion) <> inf ) then
               if (ccalc_cCARFUE_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARFUE_rCARBONABn(CarbonRegion) /$
                  ccalc_cCARFUE_rCARBONABn(CarbonRegion) *100
               elseif (cpass_cCARFUE_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARFUE_rCARBONABn(CarbonRegion) /$
                  cpass_cCARFUE_rCARBONABn(CarbonRegion) *100
               endif
            else
               cdiff_cCARFUE_rCARBONABn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARFUE_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARFUE_UBOUND(CarbonRegion) <> inf
             and cpass_cCARFUE_UBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARFUE_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARFUE_UBOUND(CarbonRegion) /$
                  ccalc_cCARFUE_UBOUND(CarbonRegion) *100
               elseif (cpass_cCARFUE_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARFUE_UBOUND(CarbonRegion) /$
                  cpass_cCARFUE_UBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARFUE_UBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARIM_LBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf
             and cpass_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf ) then
               if (ccalc_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) <> 0 ) then
                 cdiff_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) /$
                  ccalc_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) *100
               elseif (cpass_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) <> 0 ) then
                 cdiff_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) /$
                  cpass_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) *100
               endif
            else
               cdiff_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARIM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) <> inf
             and cpass_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) <> inf ) then
               if (ccalc_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) /$
                  ccalc_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *100
               elseif (cpass_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) /$
                  cpass_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *100
               endif
            else
               cdiff_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCARIM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) <> inf
             and cpass_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) <> inf ) then
               if (ccalc_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) /$
                  ccalc_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *100
               elseif (cpass_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) /$
                  cpass_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *100
               endif
            else
               cdiff_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCARIM_UBOUND {
           IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf
             and cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf ) then
               if (ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> 0 ) then
                 cdiff_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) /$
                  ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) *100
               elseif (cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> 0 ) then
                 cdiff_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) /$
                  cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) *100
               endif
            else
               cdiff_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARIND_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCARIND_LBOUND(CarbonRegion) <> inf
             and cpass_cCARIND_LBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARIND_LBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARIND_LBOUND(CarbonRegion) /$
                  ccalc_cCARIND_LBOUND(CarbonRegion) *100
               elseif (cpass_cCARIND_LBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARIND_LBOUND(CarbonRegion) /$
                  cpass_cCARIND_LBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARIND_LBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARIND_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARIND_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCARIND_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCARIND_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARIND_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCARIND_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCARIND_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARIND_rCARBONABeq(CarbonRegion) /$
                  cpass_cCARIND_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCARIND_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARIND_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARIND_rCARBONABn(CarbonRegion) <> inf
             and cpass_cCARIND_rCARBONABn(CarbonRegion) <> inf ) then
               if (ccalc_cCARIND_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARIND_rCARBONABn(CarbonRegion) /$
                  ccalc_cCARIND_rCARBONABn(CarbonRegion) *100
               elseif (cpass_cCARIND_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARIND_rCARBONABn(CarbonRegion) /$
                  cpass_cCARIND_rCARBONABn(CarbonRegion) *100
               endif
            else
               cdiff_cCARIND_rCARBONABn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARIND_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARIND_UBOUND(CarbonRegion) <> inf
             and cpass_cCARIND_UBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARIND_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARIND_UBOUND(CarbonRegion) /$
                  ccalc_cCARIND_UBOUND(CarbonRegion) *100
               elseif (cpass_cCARIND_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARIND_UBOUND(CarbonRegion) /$
                  cpass_cCARIND_UBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARIND_UBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARLIM_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cCARLIM_EFDCOSTS(CarbonRegion) <> inf
             and cpass_cCARLIM_EFDCOSTS(CarbonRegion) <> inf ) then
               if (ccalc_cCARLIM_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARLIM_EFDCOSTS(CarbonRegion) /$
                  ccalc_cCARLIM_EFDCOSTS(CarbonRegion) *100
               elseif (cpass_cCARLIM_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARLIM_EFDCOSTS(CarbonRegion) /$
                  cpass_cCARLIM_EFDCOSTS(CarbonRegion) *100
               endif
            else
               cdiff_cCARLIM_EFDCOSTS(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARLIM_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARLIM_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCARLIM_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCARLIM_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARLIM_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCARLIM_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCARLIM_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARLIM_rCARBONABeq(CarbonRegion) /$
                  cpass_cCARLIM_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCARLIM_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARLIM_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARLIM_rCARBONle(CarbonRegion) <> inf
             and cpass_cCARLIM_rCARBONle(CarbonRegion) <> inf ) then
               if (ccalc_cCARLIM_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARLIM_rCARBONle(CarbonRegion) /$
                  ccalc_cCARLIM_rCARBONle(CarbonRegion) *100
               elseif (cpass_cCARLIM_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARLIM_rCARBONle(CarbonRegion) /$
                  cpass_cCARLIM_rCARBONle(CarbonRegion) *100
               endif
            else
               cdiff_cCARLIM_rCARBONle(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARLIM_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARLIM_UBOUND(CarbonRegion) <> inf
             and cpass_cCARLIM_UBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARLIM_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARLIM_UBOUND(CarbonRegion) /$
                  ccalc_cCARLIM_UBOUND(CarbonRegion) *100
               elseif (cpass_cCARLIM_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARLIM_UBOUND(CarbonRegion) /$
                  cpass_cCARLIM_UBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARLIM_UBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCAROFF_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cCAROFF_EFDCOSTS(CarbonRegion) <> inf
             and cpass_cCAROFF_EFDCOSTS(CarbonRegion) <> inf ) then
               if (ccalc_cCAROFF_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_EFDCOSTS(CarbonRegion) /$
                  ccalc_cCAROFF_EFDCOSTS(CarbonRegion) *100
               elseif (cpass_cCAROFF_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_EFDCOSTS(CarbonRegion) /$
                  cpass_cCAROFF_EFDCOSTS(CarbonRegion) *100
               endif
            else
               cdiff_cCAROFF_EFDCOSTS(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCAROFF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCAROFF_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCAROFF_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCAROFF_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCAROFF_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCAROFF_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_rCARBONABeq(CarbonRegion) /$
                  cpass_cCAROFF_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCAROFF_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCAROFF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCAROFF_rCARBONABn(CarbonRegion) <> inf
             and cpass_cCAROFF_rCARBONABn(CarbonRegion) <> inf ) then
               if (ccalc_cCAROFF_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_rCARBONABn(CarbonRegion) /$
                  ccalc_cCAROFF_rCARBONABn(CarbonRegion) *100
               elseif (cpass_cCAROFF_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_rCARBONABn(CarbonRegion) /$
                  cpass_cCAROFF_rCARBONABn(CarbonRegion) *100
               endif
            else
               cdiff_cCAROFF_rCARBONABn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCAROFF_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCAROFF_rCARBONle(CarbonRegion) <> inf
             and cpass_cCAROFF_rCARBONle(CarbonRegion) <> inf ) then
               if (ccalc_cCAROFF_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_rCARBONle(CarbonRegion) /$
                  ccalc_cCAROFF_rCARBONle(CarbonRegion) *100
               elseif (cpass_cCAROFF_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_rCARBONle(CarbonRegion) /$
                  cpass_cCAROFF_rCARBONle(CarbonRegion) *100
               endif
            else
               cdiff_cCAROFF_rCARBONle(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCAROFF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCAROFF_UBOUND(CarbonRegion) <> inf
             and cpass_cCAROFF_UBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCAROFF_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_UBOUND(CarbonRegion) /$
                  ccalc_cCAROFF_UBOUND(CarbonRegion) *100
               elseif (cpass_cCAROFF_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCAROFF_UBOUND(CarbonRegion) /$
                  cpass_cCAROFF_UBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCAROFF_UBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCAROTH_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCAROTH_LBOUND(CarbonRegion) <> inf
             and cpass_cCAROTH_LBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCAROTH_LBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCAROTH_LBOUND(CarbonRegion) /$
                  ccalc_cCAROTH_LBOUND(CarbonRegion) *100
               elseif (cpass_cCAROTH_LBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCAROTH_LBOUND(CarbonRegion) /$
                  cpass_cCAROTH_LBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCAROTH_LBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCAROTH_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCAROTH_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCAROTH_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCAROTH_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCAROTH_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCAROTH_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCAROTH_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCAROTH_rCARBONABeq(CarbonRegion) /$
                  cpass_cCAROTH_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCAROTH_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCAROTH_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCAROTH_rCARBONABn(CarbonRegion) <> inf
             and cpass_cCAROTH_rCARBONABn(CarbonRegion) <> inf ) then
               if (ccalc_cCAROTH_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCAROTH_rCARBONABn(CarbonRegion) /$
                  ccalc_cCAROTH_rCARBONABn(CarbonRegion) *100
               elseif (cpass_cCAROTH_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCAROTH_rCARBONABn(CarbonRegion) /$
                  cpass_cCAROTH_rCARBONABn(CarbonRegion) *100
               endif
            else
               cdiff_cCAROTH_rCARBONABn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCAROTH_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCAROTH_UBOUND(CarbonRegion) <> inf
             and cpass_cCAROTH_UBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCAROTH_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCAROTH_UBOUND(CarbonRegion) /$
                  ccalc_cCAROTH_UBOUND(CarbonRegion) *100
               elseif (cpass_cCAROTH_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCAROTH_UBOUND(CarbonRegion) /$
                  cpass_cCAROTH_UBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCAROTH_UBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARREF_LBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCARREF_LBOUND(CarbonRegion) <> inf
             and cpass_cCARREF_LBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARREF_LBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARREF_LBOUND(CarbonRegion) /$
                  ccalc_cCARREF_LBOUND(CarbonRegion) *100
               elseif (cpass_cCARREF_LBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARREF_LBOUND(CarbonRegion) /$
                  cpass_cCARREF_LBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARREF_LBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARREF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARREF_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCARREF_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCARREF_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARREF_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCARREF_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCARREF_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARREF_rCARBONABeq(CarbonRegion) /$
                  cpass_cCARREF_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCARREF_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARREF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARREF_rCARBONABn(CarbonRegion) <> inf
             and cpass_cCARREF_rCARBONABn(CarbonRegion) <> inf ) then
               if (ccalc_cCARREF_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARREF_rCARBONABn(CarbonRegion) /$
                  ccalc_cCARREF_rCARBONABn(CarbonRegion) *100
               elseif (cpass_cCARREF_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARREF_rCARBONABn(CarbonRegion) /$
                  cpass_cCARREF_rCARBONABn(CarbonRegion) *100
               endif
            else
               cdiff_cCARREF_rCARBONABn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARREF_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARREF_UBOUND(CarbonRegion) <> inf
             and cpass_cCARREF_UBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARREF_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARREF_UBOUND(CarbonRegion) /$
                  ccalc_cCARREF_UBOUND(CarbonRegion) *100
               elseif (cpass_cCARREF_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARREF_UBOUND(CarbonRegion) /$
                  cpass_cCARREF_UBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARREF_UBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARRSV_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cCARRSV_EFDCOSTS(CarbonRegion) <> inf
             and cpass_cCARRSV_EFDCOSTS(CarbonRegion) <> inf ) then
               if (ccalc_cCARRSV_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_EFDCOSTS(CarbonRegion) /$
                  ccalc_cCARRSV_EFDCOSTS(CarbonRegion) *100
               elseif (cpass_cCARRSV_EFDCOSTS(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_EFDCOSTS(CarbonRegion) /$
                  cpass_cCARRSV_EFDCOSTS(CarbonRegion) *100
               endif
            else
               cdiff_cCARRSV_EFDCOSTS(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARRSV_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARRSV_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCARRSV_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCARRSV_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCARRSV_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCARRSV_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_rCARBONABeq(CarbonRegion) /$
                  cpass_cCARRSV_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCARRSV_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARRSV_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARRSV_rCARBONABn(CarbonRegion) <> inf
             and cpass_cCARRSV_rCARBONABn(CarbonRegion) <> inf ) then
               if (ccalc_cCARRSV_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_rCARBONABn(CarbonRegion) /$
                  ccalc_cCARRSV_rCARBONABn(CarbonRegion) *100
               elseif (cpass_cCARRSV_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_rCARBONABn(CarbonRegion) /$
                  cpass_cCARRSV_rCARBONABn(CarbonRegion) *100
               endif
            else
               cdiff_cCARRSV_rCARBONABn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARRSV_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARRSV_rCARBONle(CarbonRegion) <> inf
             and cpass_cCARRSV_rCARBONle(CarbonRegion) <> inf ) then
               if (ccalc_cCARRSV_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_rCARBONle(CarbonRegion) /$
                  ccalc_cCARRSV_rCARBONle(CarbonRegion) *100
               elseif (cpass_cCARRSV_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_rCARBONle(CarbonRegion) /$
                  cpass_cCARRSV_rCARBONle(CarbonRegion) *100
               endif
            else
               cdiff_cCARRSV_rCARBONle(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARRSV_UBOUND {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCARRSV_UBOUND(CarbonRegion) <> inf
             and cpass_cCARRSV_UBOUND(CarbonRegion) <> inf ) then
               if (ccalc_cCARRSV_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_UBOUND(CarbonRegion) /$
                  ccalc_cCARRSV_UBOUND(CarbonRegion) *100
               elseif (cpass_cCARRSV_UBOUND(CarbonRegion) <> 0 ) then
                 cdiff_cCARRSV_UBOUND(CarbonRegion) /$
                  cpass_cCARRSV_UBOUND(CarbonRegion) *100
               endif
            else
               cdiff_cCARRSV_UBOUND(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARUTL_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARUTL_rCARBONABeq(CarbonRegion) <> inf
             and cpass_cCARUTL_rCARBONABeq(CarbonRegion) <> inf ) then
               if (ccalc_cCARUTL_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARUTL_rCARBONABeq(CarbonRegion) /$
                  ccalc_cCARUTL_rCARBONABeq(CarbonRegion) *100
               elseif (cpass_cCARUTL_rCARBONABeq(CarbonRegion) <> 0 ) then
                 cdiff_cCARUTL_rCARBONABeq(CarbonRegion) /$
                  cpass_cCARUTL_rCARBONABeq(CarbonRegion) *100
               endif
            else
               cdiff_cCARUTL_rCARBONABeq(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARUTL_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: { 
            if (ccalc_cCARUTL_rCARBONABn(CarbonRegion) <> inf
             and cpass_cCARUTL_rCARBONABn(CarbonRegion) <> inf ) then
               if (ccalc_cCARUTL_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARUTL_rCARBONABn(CarbonRegion) /$
                  ccalc_cCARUTL_rCARBONABn(CarbonRegion) *100
               elseif (cpass_cCARUTL_rCARBONABn(CarbonRegion) <> 0 ) then
                 cdiff_cCARUTL_rCARBONABn(CarbonRegion) /$
                  cpass_cCARUTL_rCARBONABn(CarbonRegion) *100
               endif
            else
               cdiff_cCARUTL_rCARBONABn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARUTL_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARUTL_rCARBONle(CarbonRegion) <> inf
             and cpass_cCARUTL_rCARBONle(CarbonRegion) <> inf ) then
               if (ccalc_cCARUTL_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARUTL_rCARBONle(CarbonRegion) /$
                  ccalc_cCARUTL_rCARBONle(CarbonRegion) *100
               elseif (cpass_cCARUTL_rCARBONle(CarbonRegion) <> 0 ) then
                 cdiff_cCARUTL_rCARBONle(CarbonRegion) /$
                  cpass_cCARUTL_rCARBONle(CarbonRegion) *100
               endif
            else
               cdiff_cCARUTL_rCARBONle(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCARUTL_rCARBONn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCARUTL_rCARBONn(CarbonRegion) <> inf
             and cpass_cCARUTL_rCARBONn(CarbonRegion) <> inf ) then
               if (ccalc_cCARUTL_rCARBONn(CarbonRegion) <> 0 ) then
                 cdiff_cCARUTL_rCARBONn(CarbonRegion) /$
                  ccalc_cCARUTL_rCARBONn(CarbonRegion) *100
               elseif (cpass_cCARUTL_rCARBONn(CarbonRegion) <> 0 ) then
                 cdiff_cCARUTL_rCARBONn(CarbonRegion) /$
                  cpass_cCARUTL_rCARBONn(CarbonRegion) *100
               endif
            else
               cdiff_cCARUTL_rCARBONn(CarbonRegion)
            endif
           }
       }
       Parameter cdiffPct_cCNIMPBUS_LBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCNIMPBUS_LBOUND <> inf
             and cpass_cCNIMPBUS_LBOUND <> inf ) then
               if (ccalc_cCNIMPBUS_LBOUND <> 0 ) then
                 cdiff_cCNIMPBUS_LBOUND /$
                  ccalc_cCNIMPBUS_LBOUND *100
               elseif (cpass_cCNIMPBUS_LBOUND <> 0 ) then
                 cdiff_cCNIMPBUS_LBOUND /$
                  cpass_cCNIMPBUS_LBOUND *100
               endif
            else
               cdiff_cCNIMPBUS_LBOUND
            endif
           }
       }
       Parameter cdiffPct_cCNIMPBUS_rCANIMPUSeq {
           Text: "OML Columns: CNIMPBUS and OML Rows: CANIMPUS";
           Definition: { 
            if (ccalc_cCNIMPBUS_rCANIMPUSeq <> inf
             and cpass_cCNIMPBUS_rCANIMPUSeq <> inf ) then
               if (ccalc_cCNIMPBUS_rCANIMPUSeq <> 0 ) then
                 cdiff_cCNIMPBUS_rCANIMPUSeq /$
                  ccalc_cCNIMPBUS_rCANIMPUSeq *100
               elseif (cpass_cCNIMPBUS_rCANIMPUSeq <> 0 ) then
                 cdiff_cCNIMPBUS_rCANIMPUSeq /$
                  cpass_cCNIMPBUS_rCANIMPUSeq *100
               endif
            else
               cdiff_cCNIMPBUS_rCANIMPUSeq
            endif
           }
       }
       Parameter cdiffPct_cCNIMPBUS_UBOUND {
           Text: "OML Columns: CNIMPBUS and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCNIMPBUS_UBOUND <> inf
             and cpass_cCNIMPBUS_UBOUND <> inf ) then
               if (ccalc_cCNIMPBUS_UBOUND <> 0 ) then
                 cdiff_cCNIMPBUS_UBOUND /$
                  ccalc_cCNIMPBUS_UBOUND *100
               elseif (cpass_cCNIMPBUS_UBOUND <> 0 ) then
                 cdiff_cCNIMPBUS_UBOUND /$
                  cpass_cCNIMPBUS_UBOUND *100
               endif
            else
               cdiff_cCNIMPBUS_UBOUND
            endif
           }
       }
       Parameter cdiffPct_cCoalOtherUsage_LBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCoalOtherUsage_LBOUND(CoalSupplyCurve) <> inf
             and cpass_cCoalOtherUsage_LBOUND(CoalSupplyCurve) <> inf ) then
               if (ccalc_cCoalOtherUsage_LBOUND(CoalSupplyCurve) <> 0 ) then
                 cdiff_cCoalOtherUsage_LBOUND(CoalSupplyCurve) /$
                  ccalc_cCoalOtherUsage_LBOUND(CoalSupplyCurve) *100
               elseif (cpass_cCoalOtherUsage_LBOUND(CoalSupplyCurve) <> 0 ) then
                 cdiff_cCoalOtherUsage_LBOUND(CoalSupplyCurve) /$
                  cpass_cCoalOtherUsage_LBOUND(CoalSupplyCurve) *100
               endif
            else
               cdiff_cCoalOtherUsage_LBOUND(CoalSupplyCurve)
            endif
           }
       }
       Parameter cdiffPct_cCoalOtherUsage_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
           Definition: { 
            if (ccalc_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) <> inf
             and cpass_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) <> inf ) then
               if (ccalc_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) <> 0 ) then
                 cdiff_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) /$
                  ccalc_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) *100
               elseif (cpass_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) <> 0 ) then
                 cdiff_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) /$
                  cpass_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) *100
               endif
            else
               cdiff_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType)
            endif
           }
       }
       Parameter cdiffPct_cCoalOtherUsage_UBOUND {
           IndexDomain: (CoalSupplyCurve) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) <> inf
             and cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) <> inf ) then
               if (ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) <> 0 ) then
                 cdiff_cCoalOtherUsage_UBOUND(CoalSupplyCurve) /$
                  ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) *100
               elseif (cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) <> 0 ) then
                 cdiff_cCoalOtherUsage_UBOUND(CoalSupplyCurve) /$
                  cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) *100
               endif
            else
               cdiff_cCoalOtherUsage_UBOUND(CoalSupplyCurve)
            endif
           }
       }
       Parameter cdiffPct_cCONCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCONCLB_LBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cCONCLB_LBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cCONCLB_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONCLB_LBOUND(SupplyRegion_ALT2) /$
                  ccalc_cCONCLB_LBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cCONCLB_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONCLB_LBOUND(SupplyRegion_ALT2) /$
                  cpass_cCONCLB_LBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cCONCLB_LBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cCONCLB_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
           Definition: { 
            if (ccalc_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> inf
             and cpass_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) /$
                  ccalc_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
               elseif (cpass_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) /$
                  cpass_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cCONCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONCLB_UBOUND(SupplyRegion_ALT2) /$
                  ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONCLB_UBOUND(SupplyRegion_ALT2) /$
                  cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cCONCLB_UBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cCONNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCONNGB_LBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cCONNGB_LBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cCONNGB_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONNGB_LBOUND(SupplyRegion_ALT2) /$
                  ccalc_cCONNGB_LBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cCONNGB_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONNGB_LBOUND(SupplyRegion_ALT2) /$
                  cpass_cCONNGB_LBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cCONNGB_LBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cCONNGB_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
           Definition: { 
            if (ccalc_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> inf
             and cpass_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) /$
                  ccalc_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
               elseif (cpass_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) /$
                  cpass_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cCONNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONNGB_UBOUND(SupplyRegion_ALT2) /$
                  ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cCONNGB_UBOUND(SupplyRegion_ALT2) /$
                  cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cCONNGB_UBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cCP_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf
             and cpass_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf ) then
               if (ccalc_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) <> 0 ) then
                 cdiff_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) /$
                  ccalc_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) *100
               elseif (cpass_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) <> 0 ) then
                 cdiff_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) /$
                  cpass_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) *100
               endif
            else
               cdiff_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cCP_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
           Definition: { 
            if (ccalc_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf
             and cpass_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf ) then
               if (ccalc_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) <> 0 ) then
                 cdiff_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) /$
                  ccalc_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) *100
               elseif (cpass_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) <> 0 ) then
                 cdiff_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) /$
                  cpass_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) *100
               endif
            else
               cdiff_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cCP_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf
             and cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf ) then
               if (ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) <> 0 ) then
                 cdiff_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) /$
                  ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) *100
               elseif (cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) <> 0 ) then
                 cdiff_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) /$
                  cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) *100
               endif
            else
               cdiff_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cCT_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rACICSTle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
           Definition: { 
            if (ccalc_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rACIOMCSTn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
           Definition: { 
            if (ccalc_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rACIRMVXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
           Definition: { 
            if (ccalc_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
           Definition: { 
            if (ccalc_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> inf
             and cpass_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> inf ) then
               if (ccalc_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> 0 ) then
                 cdiff_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) /$
                  ccalc_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *100
               elseif (cpass_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> 0 ) then
                 cdiff_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) /$
                  cpass_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *100
               endif
            else
               cdiff_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            if (ccalc_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) <> inf
             and cpass_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) <> inf ) then
               if (ccalc_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) <> 0 ) then
                 cdiff_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) /$
                  ccalc_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) *100
               elseif (cpass_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) <> 0 ) then
                 cdiff_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) /$
                  cpass_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) *100
               endif
            else
               cdiff_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            if (ccalc_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: { 
            if (ccalc_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> inf
             and cpass_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> inf ) then
               if (ccalc_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> 0 ) then
                 cdiff_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) /$
                  ccalc_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *100
               elseif (cpass_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> 0 ) then
                 cdiff_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) /$
                  cpass_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *100
               endif
            else
               cdiff_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
           Definition: { 
            if (ccalc_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
           Definition: { 
            if (ccalc_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> inf
             and cpass_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> inf ) then
               if (ccalc_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> 0 ) then
                 cdiff_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) /$
                  ccalc_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *100
               elseif (cpass_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) <> 0 ) then
                 cdiff_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) /$
                  cpass_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *100
               endif
            else
               cdiff_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: { 
            if (ccalc_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: { 
            if (ccalc_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            if (ccalc_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) /$
                  cpass_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCT_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf
             and cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> inf ) then
               if (ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               elseif (cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) <> 0 ) then
                 cdiff_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) /$
                  cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *100
               endif
            else
               cdiff_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
            endif
           }
       }
       Parameter cdiffPct_cCTLCO_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLCO_rCARBONle {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLCO_rCARBONn {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLCO_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLCO_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLCO_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLHG_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLHG_rMERCURYle {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLHG_rMERCURYn {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLHG_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLS_LBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> inf
             and cpass_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> inf ) then
               if (ccalc_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> 0 ) then
                 cdiff_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) /$
                  ccalc_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) *100
               elseif (cpass_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> 0 ) then
                 cdiff_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) /$
                  cpass_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) *100
               endif
            else
               cdiff_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)
            endif
           }
       }
       Parameter cdiffPct_cCTLS_rSULFURle {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: { 
            if (ccalc_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLS_rSULFURn {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: { 
            if (ccalc_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) /$
                  cpass_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLS_UBOUND {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> inf
             and cpass_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> inf ) then
               if (ccalc_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> 0 ) then
                 cdiff_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) /$
                  ccalc_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) *100
               elseif (cpass_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) <> 0 ) then
                 cdiff_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) /$
                  cpass_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) *100
               endif
            else
               cdiff_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)
            endif
           }
       }
       Parameter cdiffPct_cCTLSO2_LBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) /$
                  ccalc_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) /$
                  cpass_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLSO2_LBOUND(CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLSO2_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: { 
            if (ccalc_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) /$
                  cpass_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLSO2_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: { 
            if (ccalc_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) /$
                  ccalc_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) /$
                  cpass_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cCTLSO2_UBOUND {
           IndexDomain: (CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) <> inf
             and cpass_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) <> inf ) then
               if (ccalc_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) /$
                  ccalc_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) *100
               elseif (cpass_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) <> 0 ) then
                 cdiff_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) /$
                  cpass_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) *100
               endif
            else
               cdiff_cCTLSO2_UBOUND(CoalDemandRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cD_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) /$
                  cpass_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_EFDCOSTS(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_LBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cD_LBOUND(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_LBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_LBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_LBOUND(PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_LBOUND(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_LBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_LBOUND(PlantGroup,Season,OperatingMode) /$
                  cpass_cD_LBOUND(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_LBOUND(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) /$
                  cpass_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            if (ccalc_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            if (ccalc_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) /$
                  cpass_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) /$
                  cpass_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            if (ccalc_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf
             and cpass_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf ) then
               if (ccalc_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  ccalc_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               elseif (cpass_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  cpass_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               endif
            else
               cdiff_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cD_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_UBOUND(PlantGroup,Season,OperatingMode) /$
                  ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cD_UBOUND(PlantGroup,Season,OperatingMode) /$
                  cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cD_UBOUND(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cDPUS_EFDCOSTS {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cDPUS_EFDCOSTS(DistillateProductionStep) <> inf
             and cpass_cDPUS_EFDCOSTS(DistillateProductionStep) <> inf ) then
               if (ccalc_cDPUS_EFDCOSTS(DistillateProductionStep) <> 0 ) then
                 cdiff_cDPUS_EFDCOSTS(DistillateProductionStep) /$
                  ccalc_cDPUS_EFDCOSTS(DistillateProductionStep) *100
               elseif (cpass_cDPUS_EFDCOSTS(DistillateProductionStep) <> 0 ) then
                 cdiff_cDPUS_EFDCOSTS(DistillateProductionStep) /$
                  cpass_cDPUS_EFDCOSTS(DistillateProductionStep) *100
               endif
            else
               cdiff_cDPUS_EFDCOSTS(DistillateProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cDPUS_rS_DSUSle {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
           Definition: { 
            if (ccalc_cDPUS_rS_DSUSle(DistillateProductionStep) <> inf
             and cpass_cDPUS_rS_DSUSle(DistillateProductionStep) <> inf ) then
               if (ccalc_cDPUS_rS_DSUSle(DistillateProductionStep) <> 0 ) then
                 cdiff_cDPUS_rS_DSUSle(DistillateProductionStep) /$
                  ccalc_cDPUS_rS_DSUSle(DistillateProductionStep) *100
               elseif (cpass_cDPUS_rS_DSUSle(DistillateProductionStep) <> 0 ) then
                 cdiff_cDPUS_rS_DSUSle(DistillateProductionStep) /$
                  cpass_cDPUS_rS_DSUSle(DistillateProductionStep) *100
               endif
            else
               cdiff_cDPUS_rS_DSUSle(DistillateProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cDPVCP_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cDPVCP_LBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cDPVCP_LBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cDPVCP_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cDPVCP_LBOUND(SupplyRegion_ALT2) /$
                  ccalc_cDPVCP_LBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cDPVCP_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cDPVCP_LBOUND(SupplyRegion_ALT2) /$
                  cpass_cDPVCP_LBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cDPVCP_LBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cDPVCP_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) <> inf
             and cpass_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) <> inf ) then
               if (ccalc_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) <> 0 ) then
                 cdiff_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) /$
                  ccalc_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) *100
               elseif (cpass_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) <> 0 ) then
                 cdiff_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) /$
                  cpass_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) *100
               endif
            else
               cdiff_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource)
            endif
           }
       }
       Parameter cdiffPct_cDPVCP_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) <> inf
             and cpass_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) <> inf ) then
               if (ccalc_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) <> 0 ) then
                 cdiff_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) /$
                  ccalc_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) *100
               elseif (cpass_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) <> 0 ) then
                 cdiff_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) /$
                  cpass_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) *100
               endif
            else
               cdiff_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource)
            endif
           }
       }
       Parameter cdiffPct_cDPVCP_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cDPVCP_UBOUND(SupplyRegion_ALT2) /$
                  ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cDPVCP_UBOUND(SupplyRegion_ALT2) /$
                  cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cDPVCP_UBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cDTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cDTUS_EFDCOSTS(OilRegion) <> inf
             and cpass_cDTUS_EFDCOSTS(OilRegion) <> inf ) then
               if (ccalc_cDTUS_EFDCOSTS(OilRegion) <> 0 ) then
                 cdiff_cDTUS_EFDCOSTS(OilRegion) /$
                  ccalc_cDTUS_EFDCOSTS(OilRegion) *100
               elseif (cpass_cDTUS_EFDCOSTS(OilRegion) <> 0 ) then
                 cdiff_cDTUS_EFDCOSTS(OilRegion) /$
                  cpass_cDTUS_EFDCOSTS(OilRegion) *100
               endif
            else
               cdiff_cDTUS_EFDCOSTS(OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cDTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cDTUS_rCARBONXXle(OilRegion) <> inf
             and cpass_cDTUS_rCARBONXXle(OilRegion) <> inf ) then
               if (ccalc_cDTUS_rCARBONXXle(OilRegion) <> 0 ) then
                 cdiff_cDTUS_rCARBONXXle(OilRegion) /$
                  ccalc_cDTUS_rCARBONXXle(OilRegion) *100
               elseif (cpass_cDTUS_rCARBONXXle(OilRegion) <> 0 ) then
                 cdiff_cDTUS_rCARBONXXle(OilRegion) /$
                  cpass_cDTUS_rCARBONXXle(OilRegion) *100
               endif
            else
               cdiff_cDTUS_rCARBONXXle(OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cDTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cDTUS_rCARBONXXn(OilRegion) <> inf
             and cpass_cDTUS_rCARBONXXn(OilRegion) <> inf ) then
               if (ccalc_cDTUS_rCARBONXXn(OilRegion) <> 0 ) then
                 cdiff_cDTUS_rCARBONXXn(OilRegion) /$
                  ccalc_cDTUS_rCARBONXXn(OilRegion) *100
               elseif (cpass_cDTUS_rCARBONXXn(OilRegion) <> 0 ) then
                 cdiff_cDTUS_rCARBONXXn(OilRegion) /$
                  cpass_cDTUS_rCARBONXXn(OilRegion) *100
               endif
            else
               cdiff_cDTUS_rCARBONXXn(OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cDTUS_rDSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
           Definition: { 
            if (ccalc_cDTUS_rDSle(CensusRegion,OilRegion) <> inf
             and cpass_cDTUS_rDSle(CensusRegion,OilRegion) <> inf ) then
               if (ccalc_cDTUS_rDSle(CensusRegion,OilRegion) <> 0 ) then
                 cdiff_cDTUS_rDSle(CensusRegion,OilRegion) /$
                  ccalc_cDTUS_rDSle(CensusRegion,OilRegion) *100
               elseif (cpass_cDTUS_rDSle(CensusRegion,OilRegion) <> 0 ) then
                 cdiff_cDTUS_rDSle(CensusRegion,OilRegion) /$
                  cpass_cDTUS_rDSle(CensusRegion,OilRegion) *100
               endif
            else
               cdiff_cDTUS_rDSle(CensusRegion,OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cDTUS_rMERC_DSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
           Definition: { 
            if (ccalc_cDTUS_rMERC_DSle(nHGCODE,OilRegion) <> inf
             and cpass_cDTUS_rMERC_DSle(nHGCODE,OilRegion) <> inf ) then
               if (ccalc_cDTUS_rMERC_DSle(nHGCODE,OilRegion) <> 0 ) then
                 cdiff_cDTUS_rMERC_DSle(nHGCODE,OilRegion) /$
                  ccalc_cDTUS_rMERC_DSle(nHGCODE,OilRegion) *100
               elseif (cpass_cDTUS_rMERC_DSle(nHGCODE,OilRegion) <> 0 ) then
                 cdiff_cDTUS_rMERC_DSle(nHGCODE,OilRegion) /$
                  cpass_cDTUS_rMERC_DSle(nHGCODE,OilRegion) *100
               endif
            else
               cdiff_cDTUS_rMERC_DSle(nHGCODE,OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cDTUS_rS_DSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
           Definition: { 
            if (ccalc_cDTUS_rS_DSUSle(OilRegion) <> inf
             and cpass_cDTUS_rS_DSUSle(OilRegion) <> inf ) then
               if (ccalc_cDTUS_rS_DSUSle(OilRegion) <> 0 ) then
                 cdiff_cDTUS_rS_DSUSle(OilRegion) /$
                  ccalc_cDTUS_rS_DSUSle(OilRegion) *100
               elseif (cpass_cDTUS_rS_DSUSle(OilRegion) <> 0 ) then
                 cdiff_cDTUS_rS_DSUSle(OilRegion) /$
                  cpass_cDTUS_rS_DSUSle(OilRegion) *100
               endif
            else
               cdiff_cDTUS_rS_DSUSle(OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cDX_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> inf
             and cpass_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> inf ) then
               if (ccalc_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> 0 ) then
                 cdiff_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) /$
                  ccalc_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
               elseif (cpass_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> 0 ) then
                 cdiff_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) /$
                  cpass_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
               endif
            else
               cdiff_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)
            endif
           }
       }
       Parameter cdiffPct_cDX_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            if (ccalc_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> inf
             and cpass_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> inf ) then
               if (ccalc_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> 0 ) then
                 cdiff_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) /$
                  ccalc_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
               elseif (cpass_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> 0 ) then
                 cdiff_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) /$
                  cpass_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
               endif
            else
               cdiff_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)
            endif
           }
       }
       Parameter cdiffPct_cELNOX_rELNOX0le {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cELNOX_rELNOX0le(INOXP,PlantType_ECP) <> inf
             and cpass_cELNOX_rELNOX0le(INOXP,PlantType_ECP) <> inf ) then
               if (ccalc_cELNOX_rELNOX0le(INOXP,PlantType_ECP) <> 0 ) then
                 cdiff_cELNOX_rELNOX0le(INOXP,PlantType_ECP) /$
                  ccalc_cELNOX_rELNOX0le(INOXP,PlantType_ECP) *100
               elseif (cpass_cELNOX_rELNOX0le(INOXP,PlantType_ECP) <> 0 ) then
                 cdiff_cELNOX_rELNOX0le(INOXP,PlantType_ECP) /$
                  cpass_cELNOX_rELNOX0le(INOXP,PlantType_ECP) *100
               endif
            else
               cdiff_cELNOX_rELNOX0le(INOXP,PlantType_ECP)
            endif
           }
       }
       Parameter cdiffPct_cELNOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cELNOX_rELNOXle(INOXP,PlantType_ECP) <> inf
             and cpass_cELNOX_rELNOXle(INOXP,PlantType_ECP) <> inf ) then
               if (ccalc_cELNOX_rELNOXle(INOXP,PlantType_ECP) <> 0 ) then
                 cdiff_cELNOX_rELNOXle(INOXP,PlantType_ECP) /$
                  ccalc_cELNOX_rELNOXle(INOXP,PlantType_ECP) *100
               elseif (cpass_cELNOX_rELNOXle(INOXP,PlantType_ECP) <> 0 ) then
                 cdiff_cELNOX_rELNOXle(INOXP,PlantType_ECP) /$
                  cpass_cELNOX_rELNOXle(INOXP,PlantType_ECP) *100
               endif
            else
               cdiff_cELNOX_rELNOXle(INOXP,PlantType_ECP)
            endif
           }
       }
       Parameter cdiffPct_cELNOXOT_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cELNOXOT_rELNOX0le(INOXP) <> inf
             and cpass_cELNOXOT_rELNOX0le(INOXP) <> inf ) then
               if (ccalc_cELNOXOT_rELNOX0le(INOXP) <> 0 ) then
                 cdiff_cELNOXOT_rELNOX0le(INOXP) /$
                  ccalc_cELNOXOT_rELNOX0le(INOXP) *100
               elseif (cpass_cELNOXOT_rELNOX0le(INOXP) <> 0 ) then
                 cdiff_cELNOXOT_rELNOX0le(INOXP) /$
                  cpass_cELNOXOT_rELNOX0le(INOXP) *100
               endif
            else
               cdiff_cELNOXOT_rELNOX0le(INOXP)
            endif
           }
       }
       Parameter cdiffPct_cELNOXOT_rELNOXOTle {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX(*)OT";
           Definition: { 
            if (ccalc_cELNOXOT_rELNOXOTle(INOXP) <> inf
             and cpass_cELNOXOT_rELNOXOTle(INOXP) <> inf ) then
               if (ccalc_cELNOXOT_rELNOXOTle(INOXP) <> 0 ) then
                 cdiff_cELNOXOT_rELNOXOTle(INOXP) /$
                  ccalc_cELNOXOT_rELNOXOTle(INOXP) *100
               elseif (cpass_cELNOXOT_rELNOXOTle(INOXP) <> 0 ) then
                 cdiff_cELNOXOT_rELNOXOTle(INOXP) /$
                  cpass_cELNOXOT_rELNOXOTle(INOXP) *100
               endif
            else
               cdiff_cELNOXOT_rELNOXOTle(INOXP)
            endif
           }
       }
       Parameter cdiffPct_cES_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) <> inf
             and cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cES_EFDCOSTS(SupplyRegion,Season,Slice) /$
                  ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) *100
               elseif (cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cES_EFDCOSTS(SupplyRegion,Season,Slice) /$
                  cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cES_EFDCOSTS(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cES_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cES_rLDge(SupplyRegion,Season,Slice) <> inf
             and cpass_cES_rLDge(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cES_rLDge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cES_rLDge(SupplyRegion,Season,Slice) /$
                  ccalc_cES_rLDge(SupplyRegion,Season,Slice) *100
               elseif (cpass_cES_rLDge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cES_rLDge(SupplyRegion,Season,Slice) /$
                  cpass_cES_rLDge(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cES_rLDge(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cES_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cES_UBOUND(SupplyRegion,Season,Slice) <> inf
             and cpass_cES_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cES_UBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cES_UBOUND(SupplyRegion,Season,Slice) /$
                  ccalc_cES_UBOUND(SupplyRegion,Season,Slice) *100
               elseif (cpass_cES_UBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cES_UBOUND(SupplyRegion,Season,Slice) /$
                  cpass_cES_UBOUND(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cES_UBOUND(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cESCNOX_EFDCOSTS {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cESCNOX_EFDCOSTS(INOXP) <> inf
             and cpass_cESCNOX_EFDCOSTS(INOXP) <> inf ) then
               if (ccalc_cESCNOX_EFDCOSTS(INOXP) <> 0 ) then
                 cdiff_cESCNOX_EFDCOSTS(INOXP) /$
                  ccalc_cESCNOX_EFDCOSTS(INOXP) *100
               elseif (cpass_cESCNOX_EFDCOSTS(INOXP) <> 0 ) then
                 cdiff_cESCNOX_EFDCOSTS(INOXP) /$
                  cpass_cESCNOX_EFDCOSTS(INOXP) *100
               endif
            else
               cdiff_cESCNOX_EFDCOSTS(INOXP)
            endif
           }
       }
       Parameter cdiffPct_cESCNOX_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cESCNOX_rELNOX0le(INOXP) <> inf
             and cpass_cESCNOX_rELNOX0le(INOXP) <> inf ) then
               if (ccalc_cESCNOX_rELNOX0le(INOXP) <> 0 ) then
                 cdiff_cESCNOX_rELNOX0le(INOXP) /$
                  ccalc_cESCNOX_rELNOX0le(INOXP) *100
               elseif (cpass_cESCNOX_rELNOX0le(INOXP) <> 0 ) then
                 cdiff_cESCNOX_rELNOX0le(INOXP) /$
                  cpass_cESCNOX_rELNOX0le(INOXP) *100
               endif
            else
               cdiff_cESCNOX_rELNOX0le(INOXP)
            endif
           }
       }
       Parameter cdiffPct_cF_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cF_EFDCOSTS(PlantGroup,Season,Slice) <> inf
             and cpass_cF_EFDCOSTS(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cF_EFDCOSTS(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_EFDCOSTS(PlantGroup,Season,Slice) /$
                  ccalc_cF_EFDCOSTS(PlantGroup,Season,Slice) *100
               elseif (cpass_cF_EFDCOSTS(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_EFDCOSTS(PlantGroup,Season,Slice) /$
                  cpass_cF_EFDCOSTS(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cF_EFDCOSTS(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cF_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            if (ccalc_cF_rENeq(PlantGroup,Season,Slice) <> inf
             and cpass_cF_rENeq(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cF_rENeq(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rENeq(PlantGroup,Season,Slice) /$
                  ccalc_cF_rENeq(PlantGroup,Season,Slice) *100
               elseif (cpass_cF_rENeq(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rENeq(PlantGroup,Season,Slice) /$
                  cpass_cF_rENeq(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cF_rENeq(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cF_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            if (ccalc_cF_rENle(PlantGroup,Season,Slice) <> inf
             and cpass_cF_rENle(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cF_rENle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rENle(PlantGroup,Season,Slice) /$
                  ccalc_cF_rENle(PlantGroup,Season,Slice) *100
               elseif (cpass_cF_rENle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rENle(PlantGroup,Season,Slice) /$
                  cpass_cF_rENle(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cF_rENle(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cF_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: { 
            if (ccalc_cF_rFle(PlantGroup,Season,Slice) <> inf
             and cpass_cF_rFle(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cF_rFle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rFle(PlantGroup,Season,Slice) /$
                  ccalc_cF_rFle(PlantGroup,Season,Slice) *100
               elseif (cpass_cF_rFle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rFle(PlantGroup,Season,Slice) /$
                  cpass_cF_rFle(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cF_rFle(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cF_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf
             and cpass_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  ccalc_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               elseif (cpass_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  cpass_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cF_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf
             and cpass_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  ccalc_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               elseif (cpass_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  cpass_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cF_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cF_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            if (ccalc_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) <> inf
             and cpass_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) <> inf ) then
               if (ccalc_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) <> 0 ) then
                 cdiff_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) /$
                  ccalc_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *100
               elseif (cpass_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) <> 0 ) then
                 cdiff_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) /$
                  cpass_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *100
               endif
            else
               cdiff_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice)
            endif
           }
       }
       Parameter cdiffPct_cF_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cF_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cF_UBOUND(PlantGroup,Season,Slice) <> inf
             and cpass_cF_UBOUND(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cF_UBOUND(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_UBOUND(PlantGroup,Season,Slice) /$
                  ccalc_cF_UBOUND(PlantGroup,Season,Slice) *100
               elseif (cpass_cF_UBOUND(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cF_UBOUND(PlantGroup,Season,Slice) /$
                  cpass_cF_UBOUND(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cF_UBOUND(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cG_LBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cG_LBOUND(SupplyRegion_ALT1) <> inf
             and cpass_cG_LBOUND(SupplyRegion_ALT1) <> inf ) then
               if (ccalc_cG_LBOUND(SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cG_LBOUND(SupplyRegion_ALT1) /$
                  ccalc_cG_LBOUND(SupplyRegion_ALT1) *100
               elseif (cpass_cG_LBOUND(SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cG_LBOUND(SupplyRegion_ALT1) /$
                  cpass_cG_LBOUND(SupplyRegion_ALT1) *100
               endif
            else
               cdiff_cG_LBOUND(SupplyRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cG_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) <> inf
             and cpass_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) <> inf ) then
               if (ccalc_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) /$
                  ccalc_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) *100
               elseif (cpass_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) /$
                  cpass_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) *100
               endif
            else
               cdiff_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cG_UBOUND {
           IndexDomain: (SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cG_UBOUND(SupplyRegion_ALT1) <> inf
             and cpass_cG_UBOUND(SupplyRegion_ALT1) <> inf ) then
               if (ccalc_cG_UBOUND(SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cG_UBOUND(SupplyRegion_ALT1) /$
                  ccalc_cG_UBOUND(SupplyRegion_ALT1) *100
               elseif (cpass_cG_UBOUND(SupplyRegion_ALT1) <> 0 ) then
                 cdiff_cG_UBOUND(SupplyRegion_ALT1) /$
                  cpass_cG_UBOUND(SupplyRegion_ALT1) *100
               endif
            else
               cdiff_cG_UBOUND(SupplyRegion_ALT1)
            endif
           }
       }
       Parameter cdiffPct_cGENCLB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cGENCLB_LBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cGENCLB_LBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cGENCLB_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENCLB_LBOUND(SupplyRegion_ALT2) /$
                  ccalc_cGENCLB_LBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cGENCLB_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENCLB_LBOUND(SupplyRegion_ALT2) /$
                  cpass_cGENCLB_LBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cGENCLB_LBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cGENCLB_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
           Definition: { 
            if (ccalc_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> inf
             and cpass_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) /$
                  ccalc_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
               elseif (cpass_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) /$
                  cpass_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cGENCLB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENCLB_UBOUND(SupplyRegion_ALT2) /$
                  ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENCLB_UBOUND(SupplyRegion_ALT2) /$
                  cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cGENCLB_UBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cGENNGB_LBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cGENNGB_LBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cGENNGB_LBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cGENNGB_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENNGB_LBOUND(SupplyRegion_ALT2) /$
                  ccalc_cGENNGB_LBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cGENNGB_LBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENNGB_LBOUND(SupplyRegion_ALT2) /$
                  cpass_cGENNGB_LBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cGENNGB_LBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cGENNGB_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
           Definition: { 
            if (ccalc_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> inf
             and cpass_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) /$
                  ccalc_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
               elseif (cpass_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) /$
                  cpass_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cGENNGB_UBOUND {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) <> inf
             and cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENNGB_UBOUND(SupplyRegion_ALT2) /$
                  ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) *100
               elseif (cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cGENNGB_UBOUND(SupplyRegion_ALT2) /$
                  cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cGENNGB_UBOUND(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cGPUS_EFDCOSTS {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cGPUS_EFDCOSTS(GasProductionStep) <> inf
             and cpass_cGPUS_EFDCOSTS(GasProductionStep) <> inf ) then
               if (ccalc_cGPUS_EFDCOSTS(GasProductionStep) <> 0 ) then
                 cdiff_cGPUS_EFDCOSTS(GasProductionStep) /$
                  ccalc_cGPUS_EFDCOSTS(GasProductionStep) *100
               elseif (cpass_cGPUS_EFDCOSTS(GasProductionStep) <> 0 ) then
                 cdiff_cGPUS_EFDCOSTS(GasProductionStep) /$
                  cpass_cGPUS_EFDCOSTS(GasProductionStep) *100
               endif
            else
               cdiff_cGPUS_EFDCOSTS(GasProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cGPUS_rS_NGUSle {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
           Definition: { 
            if (ccalc_cGPUS_rS_NGUSle(GasProductionStep) <> inf
             and cpass_cGPUS_rS_NGUSle(GasProductionStep) <> inf ) then
               if (ccalc_cGPUS_rS_NGUSle(GasProductionStep) <> 0 ) then
                 cdiff_cGPUS_rS_NGUSle(GasProductionStep) /$
                  ccalc_cGPUS_rS_NGUSle(GasProductionStep) *100
               elseif (cpass_cGPUS_rS_NGUSle(GasProductionStep) <> 0 ) then
                 cdiff_cGPUS_rS_NGUSle(GasProductionStep) /$
                  cpass_cGPUS_rS_NGUSle(GasProductionStep) *100
               endif
            else
               cdiff_cGPUS_rS_NGUSle(GasProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cGPUS_UBOUND {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cGPUS_UBOUND(GasProductionStep) <> inf
             and cpass_cGPUS_UBOUND(GasProductionStep) <> inf ) then
               if (ccalc_cGPUS_UBOUND(GasProductionStep) <> 0 ) then
                 cdiff_cGPUS_UBOUND(GasProductionStep) /$
                  ccalc_cGPUS_UBOUND(GasProductionStep) *100
               elseif (cpass_cGPUS_UBOUND(GasProductionStep) <> 0 ) then
                 cdiff_cGPUS_UBOUND(GasProductionStep) /$
                  cpass_cGPUS_UBOUND(GasProductionStep) *100
               endif
            else
               cdiff_cGPUS_UBOUND(GasProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cGTUS_EFDCOSTS {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cGTUS_EFDCOSTS(GasRegion,GasSeason) <> inf
             and cpass_cGTUS_EFDCOSTS(GasRegion,GasSeason) <> inf ) then
               if (ccalc_cGTUS_EFDCOSTS(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_EFDCOSTS(GasRegion,GasSeason) /$
                  ccalc_cGTUS_EFDCOSTS(GasRegion,GasSeason) *100
               elseif (cpass_cGTUS_EFDCOSTS(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_EFDCOSTS(GasRegion,GasSeason) /$
                  cpass_cGTUS_EFDCOSTS(GasRegion,GasSeason) *100
               endif
            else
               cdiff_cGTUS_EFDCOSTS(GasRegion,GasSeason)
            endif
           }
       }
       Parameter cdiffPct_cGTUS_rCARBONXXle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cGTUS_rCARBONXXle(GasRegion,GasSeason) <> inf
             and cpass_cGTUS_rCARBONXXle(GasRegion,GasSeason) <> inf ) then
               if (ccalc_cGTUS_rCARBONXXle(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_rCARBONXXle(GasRegion,GasSeason) /$
                  ccalc_cGTUS_rCARBONXXle(GasRegion,GasSeason) *100
               elseif (cpass_cGTUS_rCARBONXXle(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_rCARBONXXle(GasRegion,GasSeason) /$
                  cpass_cGTUS_rCARBONXXle(GasRegion,GasSeason) *100
               endif
            else
               cdiff_cGTUS_rCARBONXXle(GasRegion,GasSeason)
            endif
           }
       }
       Parameter cdiffPct_cGTUS_rCARBONXXn {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cGTUS_rCARBONXXn(GasRegion,GasSeason) <> inf
             and cpass_cGTUS_rCARBONXXn(GasRegion,GasSeason) <> inf ) then
               if (ccalc_cGTUS_rCARBONXXn(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_rCARBONXXn(GasRegion,GasSeason) /$
                  ccalc_cGTUS_rCARBONXXn(GasRegion,GasSeason) *100
               elseif (cpass_cGTUS_rCARBONXXn(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_rCARBONXXn(GasRegion,GasSeason) /$
                  cpass_cGTUS_rCARBONXXn(GasRegion,GasSeason) *100
               endif
            else
               cdiff_cGTUS_rCARBONXXn(GasRegion,GasSeason)
            endif
           }
       }
       Parameter cdiffPct_cGTUS_rNGle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
           Definition: { 
            if (ccalc_cGTUS_rNGle(GasRegion,GasSeason) <> inf
             and cpass_cGTUS_rNGle(GasRegion,GasSeason) <> inf ) then
               if (ccalc_cGTUS_rNGle(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_rNGle(GasRegion,GasSeason) /$
                  ccalc_cGTUS_rNGle(GasRegion,GasSeason) *100
               elseif (cpass_cGTUS_rNGle(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_rNGle(GasRegion,GasSeason) /$
                  cpass_cGTUS_rNGle(GasRegion,GasSeason) *100
               endif
            else
               cdiff_cGTUS_rNGle(GasRegion,GasSeason)
            endif
           }
       }
       Parameter cdiffPct_cGTUS_rS_NGUSle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
           Definition: { 
            if (ccalc_cGTUS_rS_NGUSle(GasRegion,GasSeason) <> inf
             and cpass_cGTUS_rS_NGUSle(GasRegion,GasSeason) <> inf ) then
               if (ccalc_cGTUS_rS_NGUSle(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_rS_NGUSle(GasRegion,GasSeason) /$
                  ccalc_cGTUS_rS_NGUSle(GasRegion,GasSeason) *100
               elseif (cpass_cGTUS_rS_NGUSle(GasRegion,GasSeason) <> 0 ) then
                 cdiff_cGTUS_rS_NGUSle(GasRegion,GasSeason) /$
                  cpass_cGTUS_rS_NGUSle(GasRegion,GasSeason) *100
               endif
            else
               cdiff_cGTUS_rS_NGUSle(GasRegion,GasSeason)
            endif
           }
       }
       Parameter cdiffPct_cH_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cH_EFDCOSTS(PlantGroup,Season,Slice) <> inf
             and cpass_cH_EFDCOSTS(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cH_EFDCOSTS(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_EFDCOSTS(PlantGroup,Season,Slice) /$
                  ccalc_cH_EFDCOSTS(PlantGroup,Season,Slice) *100
               elseif (cpass_cH_EFDCOSTS(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_EFDCOSTS(PlantGroup,Season,Slice) /$
                  cpass_cH_EFDCOSTS(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cH_EFDCOSTS(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cH_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            if (ccalc_cH_rENeq(PlantGroup,Season,Slice) <> inf
             and cpass_cH_rENeq(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cH_rENeq(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rENeq(PlantGroup,Season,Slice) /$
                  ccalc_cH_rENeq(PlantGroup,Season,Slice) *100
               elseif (cpass_cH_rENeq(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rENeq(PlantGroup,Season,Slice) /$
                  cpass_cH_rENeq(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cH_rENeq(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cH_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: { 
            if (ccalc_cH_rENle(PlantGroup,Season,Slice) <> inf
             and cpass_cH_rENle(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cH_rENle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rENle(PlantGroup,Season,Slice) /$
                  ccalc_cH_rENle(PlantGroup,Season,Slice) *100
               elseif (cpass_cH_rENle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rENle(PlantGroup,Season,Slice) /$
                  cpass_cH_rENle(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cH_rENle(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cH_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: { 
            if (ccalc_cH_rFle(PlantGroup,Season,Slice) <> inf
             and cpass_cH_rFle(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cH_rFle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rFle(PlantGroup,Season,Slice) /$
                  ccalc_cH_rFle(PlantGroup,Season,Slice) *100
               elseif (cpass_cH_rFle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rFle(PlantGroup,Season,Slice) /$
                  cpass_cH_rFle(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cH_rFle(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cH_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf
             and cpass_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  ccalc_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               elseif (cpass_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  cpass_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cH_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf
             and cpass_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  ccalc_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               elseif (cpass_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  cpass_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cH_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cH_rP2_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: { 
            if (ccalc_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) <> inf
             and cpass_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) <> inf ) then
               if (ccalc_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) <> 0 ) then
                 cdiff_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) /$
                  ccalc_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) *100
               elseif (cpass_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) <> 0 ) then
                 cdiff_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) /$
                  cpass_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) *100
               endif
            else
               cdiff_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice)
            endif
           }
       }
       Parameter cdiffPct_cH_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: { 
            if (ccalc_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) <> inf
             and cpass_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) <> inf ) then
               if (ccalc_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) <> 0 ) then
                 cdiff_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) /$
                  ccalc_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) *100
               elseif (cpass_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) <> 0 ) then
                 cdiff_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) /$
                  cpass_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) *100
               endif
            else
               cdiff_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cH_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            if (ccalc_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) <> inf
             and cpass_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) <> inf ) then
               if (ccalc_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) <> 0 ) then
                 cdiff_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) /$
                  ccalc_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *100
               elseif (cpass_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) <> 0 ) then
                 cdiff_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) /$
                  cpass_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *100
               endif
            else
               cdiff_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice)
            endif
           }
       }
       Parameter cdiffPct_cH_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cH_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cH_UBOUND(PlantGroup,Season,Slice) <> inf
             and cpass_cH_UBOUND(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cH_UBOUND(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_UBOUND(PlantGroup,Season,Slice) /$
                  ccalc_cH_UBOUND(PlantGroup,Season,Slice) *100
               elseif (cpass_cH_UBOUND(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cH_UBOUND(PlantGroup,Season,Slice) /$
                  cpass_cH_UBOUND(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cH_UBOUND(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cI_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cI_EFDCOSTS(PlantGroup,Season,Slice) <> inf
             and cpass_cI_EFDCOSTS(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cI_EFDCOSTS(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_EFDCOSTS(PlantGroup,Season,Slice) /$
                  ccalc_cI_EFDCOSTS(PlantGroup,Season,Slice) *100
               elseif (cpass_cI_EFDCOSTS(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_EFDCOSTS(PlantGroup,Season,Slice) /$
                  cpass_cI_EFDCOSTS(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cI_EFDCOSTS(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cI_LBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cI_LBOUND(PlantGroup,Season,Slice) <> inf
             and cpass_cI_LBOUND(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cI_LBOUND(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_LBOUND(PlantGroup,Season,Slice) /$
                  ccalc_cI_LBOUND(PlantGroup,Season,Slice) *100
               elseif (cpass_cI_LBOUND(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_LBOUND(PlantGroup,Season,Slice) /$
                  cpass_cI_LBOUND(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cI_LBOUND(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cI_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf
             and cpass_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  ccalc_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               elseif (cpass_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  cpass_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cI_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf
             and cpass_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  ccalc_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               elseif (cpass_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) /$
                  cpass_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cI_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cI_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cI_UBOUND {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cI_UBOUND(PlantGroup,Season,Slice) <> inf
             and cpass_cI_UBOUND(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cI_UBOUND(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_UBOUND(PlantGroup,Season,Slice) /$
                  ccalc_cI_UBOUND(PlantGroup,Season,Slice) *100
               elseif (cpass_cI_UBOUND(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cI_UBOUND(PlantGroup,Season,Slice) /$
                  cpass_cI_UBOUND(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cI_UBOUND(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            if (ccalc_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            if (ccalc_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            if (ccalc_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cJ_rCBle(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rCBle(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rCBle(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCBle(PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rCBle(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rCBle(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCBle(PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rCBle(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rCBle(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            if (ccalc_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            if (ccalc_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            if (ccalc_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            if (ccalc_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            if (ccalc_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            if (ccalc_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            if (ccalc_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf
             and cpass_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf ) then
               if (ccalc_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  ccalc_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               elseif (cpass_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  cpass_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               endif
            else
               cdiff_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cJ_rMRXge(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rMRXge(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rMRXge(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rMRXge(PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rMRXge(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rMRXge(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rMRXge(PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rMRXge(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rMRXge(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf
             and cpass_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf ) then
               if (ccalc_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  ccalc_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               elseif (cpass_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  cpass_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               endif
            else
               cdiff_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJ_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_UBOUND(PlantGroup,Season,OperatingMode) /$
                  ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cJ_UBOUND(PlantGroup,Season,OperatingMode) /$
                  cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cJ_UBOUND(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cJX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cJX_EFDCOSTS(PlantGroup,Season) <> inf
             and cpass_cJX_EFDCOSTS(PlantGroup,Season) <> inf ) then
               if (ccalc_cJX_EFDCOSTS(PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_EFDCOSTS(PlantGroup,Season) /$
                  ccalc_cJX_EFDCOSTS(PlantGroup,Season) *100
               elseif (cpass_cJX_EFDCOSTS(PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_EFDCOSTS(PlantGroup,Season) /$
                  cpass_cJX_EFDCOSTS(PlantGroup,Season) *100
               endif
            else
               cdiff_cJX_EFDCOSTS(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cJX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> inf
             and cpass_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> inf ) then
               if (ccalc_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) /$
                  ccalc_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
               elseif (cpass_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) /$
                  cpass_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
               endif
            else
               cdiff_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cJX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cJX_rCBle(PlantGroup,Season) <> inf
             and cpass_cJX_rCBle(PlantGroup,Season) <> inf ) then
               if (ccalc_cJX_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rCBle(PlantGroup,Season) /$
                  ccalc_cJX_rCBle(PlantGroup,Season) *100
               elseif (cpass_cJX_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rCBle(PlantGroup,Season) /$
                  cpass_cJX_rCBle(PlantGroup,Season) *100
               endif
            else
               cdiff_cJX_rCBle(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cJX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            if (ccalc_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> inf
             and cpass_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> inf ) then
               if (ccalc_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) /$
                  ccalc_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
               elseif (cpass_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) /$
                  cpass_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
               endif
            else
               cdiff_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cJX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cJX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cJX_rMRXge(PlantGroup,Season) <> inf
             and cpass_cJX_rMRXge(PlantGroup,Season) <> inf ) then
               if (ccalc_cJX_rMRXge(PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rMRXge(PlantGroup,Season) /$
                  ccalc_cJX_rMRXge(PlantGroup,Season) *100
               elseif (cpass_cJX_rMRXge(PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rMRXge(PlantGroup,Season) /$
                  cpass_cJX_rMRXge(PlantGroup,Season) *100
               endif
            else
               cdiff_cJX_rMRXge(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cJX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cJX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cJX_UBOUND(PlantGroup,Season) <> inf
             and cpass_cJX_UBOUND(PlantGroup,Season) <> inf ) then
               if (ccalc_cJX_UBOUND(PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_UBOUND(PlantGroup,Season) /$
                  ccalc_cJX_UBOUND(PlantGroup,Season) *100
               elseif (cpass_cJX_UBOUND(PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_UBOUND(PlantGroup,Season) /$
                  cpass_cJX_UBOUND(PlantGroup,Season) *100
               endif
            else
               cdiff_cJX_UBOUND(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cJX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cJX_rELNOX0n(INOXP,PlantGroup,Season) <> inf
             and cpass_cJX_rELNOX0n(INOXP,PlantGroup,Season) <> inf ) then
               if (ccalc_cJX_rELNOX0n(INOXP,PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rELNOX0n(INOXP,PlantGroup,Season) /$
                  ccalc_cJX_rELNOX0n(INOXP,PlantGroup,Season) *100
               elseif (cpass_cJX_rELNOX0n(INOXP,PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rELNOX0n(INOXP,PlantGroup,Season) /$
                  cpass_cJX_rELNOX0n(INOXP,PlantGroup,Season) *100
               endif
            else
               cdiff_cJX_rELNOX0n(INOXP,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cJX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> inf
             and cpass_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> inf ) then
               if (ccalc_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) /$
                  ccalc_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
               elseif (cpass_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> 0 ) then
                 cdiff_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) /$
                  cpass_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
               endif
            else
               cdiff_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cKX_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf
             and cpass_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf ) then
               if (ccalc_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  ccalc_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               elseif (cpass_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  cpass_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               endif
            else
               cdiff_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
            endif
           }
       }
       Parameter cdiffPct_cKX_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            if (ccalc_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf
             and cpass_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf ) then
               if (ccalc_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  ccalc_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               elseif (cpass_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  cpass_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               endif
            else
               cdiff_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
            endif
           }
       }
       Parameter cdiffPct_cMB_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cMB_EFDCOSTS(PlantGroup,Season) <> inf
             and cpass_cMB_EFDCOSTS(PlantGroup,Season) <> inf ) then
               if (ccalc_cMB_EFDCOSTS(PlantGroup,Season) <> 0 ) then
                 cdiff_cMB_EFDCOSTS(PlantGroup,Season) /$
                  ccalc_cMB_EFDCOSTS(PlantGroup,Season) *100
               elseif (cpass_cMB_EFDCOSTS(PlantGroup,Season) <> 0 ) then
                 cdiff_cMB_EFDCOSTS(PlantGroup,Season) /$
                  cpass_cMB_EFDCOSTS(PlantGroup,Season) *100
               endif
            else
               cdiff_cMB_EFDCOSTS(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cMB_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cMB_rCBle(PlantGroup,Season) <> inf
             and cpass_cMB_rCBle(PlantGroup,Season) <> inf ) then
               if (ccalc_cMB_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cMB_rCBle(PlantGroup,Season) /$
                  ccalc_cMB_rCBle(PlantGroup,Season) *100
               elseif (cpass_cMB_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cMB_rCBle(PlantGroup,Season) /$
                  cpass_cMB_rCBle(PlantGroup,Season) *100
               endif
            else
               cdiff_cMB_rCBle(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cMB_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
           Definition: { 
            if (ccalc_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) <> inf
             and cpass_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) <> inf ) then
               if (ccalc_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) <> 0 ) then
                 cdiff_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) /$
                  ccalc_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) *100
               elseif (cpass_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) <> 0 ) then
                 cdiff_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) /$
                  cpass_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) *100
               endif
            else
               cdiff_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cMB_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cMB_UBOUND(PlantGroup,Season) <> inf
             and cpass_cMB_UBOUND(PlantGroup,Season) <> inf ) then
               if (ccalc_cMB_UBOUND(PlantGroup,Season) <> 0 ) then
                 cdiff_cMB_UBOUND(PlantGroup,Season) /$
                  ccalc_cMB_UBOUND(PlantGroup,Season) *100
               elseif (cpass_cMB_UBOUND(PlantGroup,Season) <> 0 ) then
                 cdiff_cMB_UBOUND(PlantGroup,Season) /$
                  cpass_cMB_UBOUND(PlantGroup,Season) *100
               endif
            else
               cdiff_cMB_UBOUND(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cMERC__rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: { 
            if (ccalc_cMERC__rMERC_le(PlantType_ECP,nHGCODE) <> inf
             and cpass_cMERC__rMERC_le(PlantType_ECP,nHGCODE) <> inf ) then
               if (ccalc_cMERC__rMERC_le(PlantType_ECP,nHGCODE) <> 0 ) then
                 cdiff_cMERC__rMERC_le(PlantType_ECP,nHGCODE) /$
                  ccalc_cMERC__rMERC_le(PlantType_ECP,nHGCODE) *100
               elseif (cpass_cMERC__rMERC_le(PlantType_ECP,nHGCODE) <> 0 ) then
                 cdiff_cMERC__rMERC_le(PlantType_ECP,nHGCODE) /$
                  cpass_cMERC__rMERC_le(PlantType_ECP,nHGCODE) *100
               endif
            else
               cdiff_cMERC__rMERC_le(PlantType_ECP,nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cMERC__rMERCURYle {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) <> inf
             and cpass_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) <> inf ) then
               if (ccalc_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) <> 0 ) then
                 cdiff_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) /$
                  ccalc_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) *100
               elseif (cpass_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) <> 0 ) then
                 cdiff_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) /$
                  cpass_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) *100
               endif
            else
               cdiff_cMERC__rMERCURYle(nHGCODE,PlantType_ECP)
            endif
           }
       }
       Parameter cdiffPct_cMERC__rMERCURYn {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) <> inf
             and cpass_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) <> inf ) then
               if (ccalc_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) <> 0 ) then
                 cdiff_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) /$
                  ccalc_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) *100
               elseif (cpass_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) <> 0 ) then
                 cdiff_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) /$
                  cpass_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) *100
               endif
            else
               cdiff_cMERC__rMERCURYn(nHGCODE,PlantType_ECP)
            endif
           }
       }
       Parameter cdiffPct_cMERC_DS_rMERC_DSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
           Definition: { 
            if (ccalc_cMERC_DS_rMERC_DSle(nHGCODE) <> inf
             and cpass_cMERC_DS_rMERC_DSle(nHGCODE) <> inf ) then
               if (ccalc_cMERC_DS_rMERC_DSle(nHGCODE) <> 0 ) then
                 cdiff_cMERC_DS_rMERC_DSle(nHGCODE) /$
                  ccalc_cMERC_DS_rMERC_DSle(nHGCODE) *100
               elseif (cpass_cMERC_DS_rMERC_DSle(nHGCODE) <> 0 ) then
                 cdiff_cMERC_DS_rMERC_DSle(nHGCODE) /$
                  cpass_cMERC_DS_rMERC_DSle(nHGCODE) *100
               endif
            else
               cdiff_cMERC_DS_rMERC_DSle(nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cMERC_DS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cMERC_DS_rMERCURYle(nHGCODE) <> inf
             and cpass_cMERC_DS_rMERCURYle(nHGCODE) <> inf ) then
               if (ccalc_cMERC_DS_rMERCURYle(nHGCODE) <> 0 ) then
                 cdiff_cMERC_DS_rMERCURYle(nHGCODE) /$
                  ccalc_cMERC_DS_rMERCURYle(nHGCODE) *100
               elseif (cpass_cMERC_DS_rMERCURYle(nHGCODE) <> 0 ) then
                 cdiff_cMERC_DS_rMERCURYle(nHGCODE) /$
                  cpass_cMERC_DS_rMERCURYle(nHGCODE) *100
               endif
            else
               cdiff_cMERC_DS_rMERCURYle(nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cMERC_DS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cMERC_DS_rMERCURYn(nHGCODE) <> inf
             and cpass_cMERC_DS_rMERCURYn(nHGCODE) <> inf ) then
               if (ccalc_cMERC_DS_rMERCURYn(nHGCODE) <> 0 ) then
                 cdiff_cMERC_DS_rMERCURYn(nHGCODE) /$
                  ccalc_cMERC_DS_rMERCURYn(nHGCODE) *100
               elseif (cpass_cMERC_DS_rMERCURYn(nHGCODE) <> 0 ) then
                 cdiff_cMERC_DS_rMERCURYn(nHGCODE) /$
                  cpass_cMERC_DS_rMERCURYn(nHGCODE) *100
               endif
            else
               cdiff_cMERC_DS_rMERCURYn(nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cMERC_RS_rMERC_RSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
           Definition: { 
            if (ccalc_cMERC_RS_rMERC_RSle(nHGCODE) <> inf
             and cpass_cMERC_RS_rMERC_RSle(nHGCODE) <> inf ) then
               if (ccalc_cMERC_RS_rMERC_RSle(nHGCODE) <> 0 ) then
                 cdiff_cMERC_RS_rMERC_RSle(nHGCODE) /$
                  ccalc_cMERC_RS_rMERC_RSle(nHGCODE) *100
               elseif (cpass_cMERC_RS_rMERC_RSle(nHGCODE) <> 0 ) then
                 cdiff_cMERC_RS_rMERC_RSle(nHGCODE) /$
                  cpass_cMERC_RS_rMERC_RSle(nHGCODE) *100
               endif
            else
               cdiff_cMERC_RS_rMERC_RSle(nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cMERC_RS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cMERC_RS_rMERCURYle(nHGCODE) <> inf
             and cpass_cMERC_RS_rMERCURYle(nHGCODE) <> inf ) then
               if (ccalc_cMERC_RS_rMERCURYle(nHGCODE) <> 0 ) then
                 cdiff_cMERC_RS_rMERCURYle(nHGCODE) /$
                  ccalc_cMERC_RS_rMERCURYle(nHGCODE) *100
               elseif (cpass_cMERC_RS_rMERCURYle(nHGCODE) <> 0 ) then
                 cdiff_cMERC_RS_rMERCURYle(nHGCODE) /$
                  cpass_cMERC_RS_rMERCURYle(nHGCODE) *100
               endif
            else
               cdiff_cMERC_RS_rMERCURYle(nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cMERC_RS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cMERC_RS_rMERCURYn(nHGCODE) <> inf
             and cpass_cMERC_RS_rMERCURYn(nHGCODE) <> inf ) then
               if (ccalc_cMERC_RS_rMERCURYn(nHGCODE) <> 0 ) then
                 cdiff_cMERC_RS_rMERCURYn(nHGCODE) /$
                  ccalc_cMERC_RS_rMERCURYn(nHGCODE) *100
               elseif (cpass_cMERC_RS_rMERCURYn(nHGCODE) <> 0 ) then
                 cdiff_cMERC_RS_rMERCURYn(nHGCODE) /$
                  cpass_cMERC_RS_rMERCURYn(nHGCODE) *100
               endif
            else
               cdiff_cMERC_RS_rMERCURYn(nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cMVS_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> inf
             and cpass_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> inf ) then
               if (ccalc_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> 0 ) then
                 cdiff_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) /$
                  ccalc_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
               elseif (cpass_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> 0 ) then
                 cdiff_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) /$
                  cpass_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
               endif
            else
               cdiff_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cMVS_rMVSO2le {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
           Definition: { 
            if (ccalc_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> inf
             and cpass_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> inf ) then
               if (ccalc_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> 0 ) then
                 cdiff_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) /$
                  ccalc_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
               elseif (cpass_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> 0 ) then
                 cdiff_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) /$
                  cpass_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
               endif
            else
               cdiff_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cMVS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
           Definition: { 
            if (ccalc_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> inf
             and cpass_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> inf ) then
               if (ccalc_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> 0 ) then
                 cdiff_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) /$
                  ccalc_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
               elseif (cpass_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) <> 0 ) then
                 cdiff_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) /$
                  cpass_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
               endif
            else
               cdiff_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cMVSO2_EFDCOSTS {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) <> inf
             and cpass_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) <> inf ) then
               if (ccalc_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) <> 0 ) then
                 cdiff_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) /$
                  ccalc_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) *100
               elseif (cpass_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) <> 0 ) then
                 cdiff_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) /$
                  cpass_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) *100
               endif
            else
               cdiff_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo)
            endif
           }
       }
       Parameter cdiffPct_cMVSO2_rSULFURle {
           IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            if (ccalc_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) <> inf
             and cpass_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) <> inf ) then
               if (ccalc_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) <> 0 ) then
                 cdiff_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) /$
                  ccalc_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) *100
               elseif (cpass_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) <> 0 ) then
                 cdiff_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) /$
                  cpass_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) *100
               endif
            else
               cdiff_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo)
            endif
           }
       }
       Parameter cdiffPct_cMVSO2_UBOUND {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) <> inf
             and cpass_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) <> inf ) then
               if (ccalc_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) <> 0 ) then
                 cdiff_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) /$
                  ccalc_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) *100
               elseif (cpass_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) <> 0 ) then
                 cdiff_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) /$
                  cpass_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) *100
               endif
            else
               cdiff_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo)
            endif
           }
       }
       Parameter cdiffPct_cNOT_EFDCOSTS {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) <> inf
             and cpass_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) <> inf ) then
               if (ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) <> 0 ) then
                 cdiff_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) /$
                  ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) *100
               elseif (cpass_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) <> 0 ) then
                 cdiff_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) /$
                  cpass_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) *100
               endif
            else
               cdiff_cNOT_EFDCOSTS(OGSMSector,OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNOT_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            if (ccalc_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) <> inf
             and cpass_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) <> inf ) then
               if (ccalc_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) <> 0 ) then
                 cdiff_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) /$
                  ccalc_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) *100
               elseif (cpass_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) <> 0 ) then
                 cdiff_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) /$
                  cpass_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) *100
               endif
            else
               cdiff_cNOT_rZOGSMeq(OGSMRegion,OGSMSector)
            endif
           }
       }
       Parameter cdiffPct_cNOT_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: { 
            if (ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) <> inf
             and cpass_cNOT_rZOTHRge(OGSMRegion,OGSMSector) <> inf ) then
               if (ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) <> 0 ) then
                 cdiff_cNOT_rZOTHRge(OGSMRegion,OGSMSector) /$
                  ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) *100
               elseif (cpass_cNOT_rZOTHRge(OGSMRegion,OGSMSector) <> 0 ) then
                 cdiff_cNOT_rZOTHRge(OGSMRegion,OGSMSector) /$
                  cpass_cNOT_rZOTHRge(OGSMRegion,OGSMSector) *100
               endif
            else
               cdiff_cNOT_rZOTHRge(OGSMRegion,OGSMSector)
            endif
           }
       }
       Parameter cdiffPct_cNOT_UBOUND {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) <> inf
             and cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) <> inf ) then
               if (ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) <> 0 ) then
                 cdiff_cNOT_UBOUND(OGSMSector,OGSMRegion) /$
                  ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) *100
               elseif (cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) <> 0 ) then
                 cdiff_cNOT_UBOUND(OGSMSector,OGSMRegion) /$
                  cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) *100
               endif
            else
               cdiff_cNOT_UBOUND(OGSMSector,OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNOTSF_EFDCOSTS {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cNOTSF_EFDCOSTS(OGSMRegion) <> inf
             and cpass_cNOTSF_EFDCOSTS(OGSMRegion) <> inf ) then
               if (ccalc_cNOTSF_EFDCOSTS(OGSMRegion) <> 0 ) then
                 cdiff_cNOTSF_EFDCOSTS(OGSMRegion) /$
                  ccalc_cNOTSF_EFDCOSTS(OGSMRegion) *100
               elseif (cpass_cNOTSF_EFDCOSTS(OGSMRegion) <> 0 ) then
                 cdiff_cNOTSF_EFDCOSTS(OGSMRegion) /$
                  cpass_cNOTSF_EFDCOSTS(OGSMRegion) *100
               endif
            else
               cdiff_cNOTSF_EFDCOSTS(OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNOTSF_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            if (ccalc_cNOTSF_rZOGSMeq(OGSMRegion) <> inf
             and cpass_cNOTSF_rZOGSMeq(OGSMRegion) <> inf ) then
               if (ccalc_cNOTSF_rZOGSMeq(OGSMRegion) <> 0 ) then
                 cdiff_cNOTSF_rZOGSMeq(OGSMRegion) /$
                  ccalc_cNOTSF_rZOGSMeq(OGSMRegion) *100
               elseif (cpass_cNOTSF_rZOGSMeq(OGSMRegion) <> 0 ) then
                 cdiff_cNOTSF_rZOGSMeq(OGSMRegion) /$
                  cpass_cNOTSF_rZOGSMeq(OGSMRegion) *100
               endif
            else
               cdiff_cNOTSF_rZOGSMeq(OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNSR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) <> inf
             and cpass_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) <> inf ) then
               if (ccalc_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) /$
                  ccalc_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) *100
               elseif (cpass_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) /$
                  cpass_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) *100
               endif
            else
               cdiff_cNSR_EFDCOSTS(FuelRegion,OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNSR_rZFLRSeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) <> inf
             and cpass_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) <> inf ) then
               if (ccalc_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) /$
                  ccalc_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) *100
               elseif (cpass_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) /$
                  cpass_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) *100
               endif
            else
               cdiff_cNSR_rZFLRSeq(FuelRegion,OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNSR_rZFLRSge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cNSR_rZFLRSge(FuelRegion,OGSMRegion) <> inf
             and cpass_cNSR_rZFLRSge(FuelRegion,OGSMRegion) <> inf ) then
               if (ccalc_cNSR_rZFLRSge(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNSR_rZFLRSge(FuelRegion,OGSMRegion) /$
                  ccalc_cNSR_rZFLRSge(FuelRegion,OGSMRegion) *100
               elseif (cpass_cNSR_rZFLRSge(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNSR_rZFLRSge(FuelRegion,OGSMRegion) /$
                  cpass_cNSR_rZFLRSge(FuelRegion,OGSMRegion) *100
               endif
            else
               cdiff_cNSR_rZFLRSge(FuelRegion,OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNSR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            if (ccalc_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) <> inf
             and cpass_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) <> inf ) then
               if (ccalc_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) <> 0 ) then
                 cdiff_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) /$
                  ccalc_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) *100
               elseif (cpass_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) <> 0 ) then
                 cdiff_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) /$
                  cpass_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) *100
               endif
            else
               cdiff_cNSR_rZOGSMeq(OGSMRegion,FuelRegion)
            endif
           }
       }
       Parameter cdiffPct_cNSX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cNSX_EFDCOSTS(FuelRegion) <> inf
             and cpass_cNSX_EFDCOSTS(FuelRegion) <> inf ) then
               if (ccalc_cNSX_EFDCOSTS(FuelRegion) <> 0 ) then
                 cdiff_cNSX_EFDCOSTS(FuelRegion) /$
                  ccalc_cNSX_EFDCOSTS(FuelRegion) *100
               elseif (cpass_cNSX_EFDCOSTS(FuelRegion) <> 0 ) then
                 cdiff_cNSX_EFDCOSTS(FuelRegion) /$
                  cpass_cNSX_EFDCOSTS(FuelRegion) *100
               endif
            else
               cdiff_cNSX_EFDCOSTS(FuelRegion)
            endif
           }
       }
       Parameter cdiffPct_cNSX_rZFLRSeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cNSX_rZFLRSeq(FuelRegion) <> inf
             and cpass_cNSX_rZFLRSeq(FuelRegion) <> inf ) then
               if (ccalc_cNSX_rZFLRSeq(FuelRegion) <> 0 ) then
                 cdiff_cNSX_rZFLRSeq(FuelRegion) /$
                  ccalc_cNSX_rZFLRSeq(FuelRegion) *100
               elseif (cpass_cNSX_rZFLRSeq(FuelRegion) <> 0 ) then
                 cdiff_cNSX_rZFLRSeq(FuelRegion) /$
                  cpass_cNSX_rZFLRSeq(FuelRegion) *100
               endif
            else
               cdiff_cNSX_rZFLRSeq(FuelRegion)
            endif
           }
       }
       Parameter cdiffPct_cNSX_rZFLRSge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cNSX_rZFLRSge(FuelRegion) <> inf
             and cpass_cNSX_rZFLRSge(FuelRegion) <> inf ) then
               if (ccalc_cNSX_rZFLRSge(FuelRegion) <> 0 ) then
                 cdiff_cNSX_rZFLRSge(FuelRegion) /$
                  ccalc_cNSX_rZFLRSge(FuelRegion) *100
               elseif (cpass_cNSX_rZFLRSge(FuelRegion) <> 0 ) then
                 cdiff_cNSX_rZFLRSge(FuelRegion) /$
                  cpass_cNSX_rZFLRSge(FuelRegion) *100
               endif
            else
               cdiff_cNSX_rZFLRSge(FuelRegion)
            endif
           }
       }
       Parameter cdiffPct_cNTO_EFDCOSTS {
           IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> inf
             and cpass_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> inf ) then
               if (ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> 0 ) then
                 cdiff_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) /$
                  ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
               elseif (cpass_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> 0 ) then
                 cdiff_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) /$
                  cpass_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
               endif
            else
               cdiff_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo)
            endif
           }
       }
       Parameter cdiffPct_cNTO_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            if (ccalc_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> inf
             and cpass_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> inf ) then
               if (ccalc_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> 0 ) then
                 cdiff_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) /$
                  ccalc_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
               elseif (cpass_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> 0 ) then
                 cdiff_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) /$
                  cpass_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
               endif
            else
               cdiff_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)
            endif
           }
       }
       Parameter cdiffPct_cNTO_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: { 
            if (ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> inf
             and cpass_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> inf ) then
               if (ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> 0 ) then
                 cdiff_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) /$
                  ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
               elseif (cpass_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) <> 0 ) then
                 cdiff_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) /$
                  cpass_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
               endif
            else
               cdiff_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo)
            endif
           }
       }
       Parameter cdiffPct_cNTR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) <> inf
             and cpass_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) <> inf ) then
               if (ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) /$
                  ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) *100
               elseif (cpass_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) /$
                  cpass_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) *100
               endif
            else
               cdiff_cNTR_EFDCOSTS(FuelRegion,OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNTR_rZFLRGeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) <> inf
             and cpass_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) <> inf ) then
               if (ccalc_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) /$
                  ccalc_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) *100
               elseif (cpass_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) /$
                  cpass_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) *100
               endif
            else
               cdiff_cNTR_rZFLRGeq(FuelRegion,OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNTR_rZFLRGge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cNTR_rZFLRGge(FuelRegion,OGSMRegion) <> inf
             and cpass_cNTR_rZFLRGge(FuelRegion,OGSMRegion) <> inf ) then
               if (ccalc_cNTR_rZFLRGge(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNTR_rZFLRGge(FuelRegion,OGSMRegion) /$
                  ccalc_cNTR_rZFLRGge(FuelRegion,OGSMRegion) *100
               elseif (cpass_cNTR_rZFLRGge(FuelRegion,OGSMRegion) <> 0 ) then
                 cdiff_cNTR_rZFLRGge(FuelRegion,OGSMRegion) /$
                  cpass_cNTR_rZFLRGge(FuelRegion,OGSMRegion) *100
               endif
            else
               cdiff_cNTR_rZFLRGge(FuelRegion,OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cNTR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: { 
            if (ccalc_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) <> inf
             and cpass_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) <> inf ) then
               if (ccalc_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) <> 0 ) then
                 cdiff_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) /$
                  ccalc_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) *100
               elseif (cpass_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) <> 0 ) then
                 cdiff_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) /$
                  cpass_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) *100
               endif
            else
               cdiff_cNTR_rZOGSMeq(OGSMRegion,FuelRegion)
            endif
           }
       }
       Parameter cdiffPct_cNTX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cNTX_EFDCOSTS(FuelRegion) <> inf
             and cpass_cNTX_EFDCOSTS(FuelRegion) <> inf ) then
               if (ccalc_cNTX_EFDCOSTS(FuelRegion) <> 0 ) then
                 cdiff_cNTX_EFDCOSTS(FuelRegion) /$
                  ccalc_cNTX_EFDCOSTS(FuelRegion) *100
               elseif (cpass_cNTX_EFDCOSTS(FuelRegion) <> 0 ) then
                 cdiff_cNTX_EFDCOSTS(FuelRegion) /$
                  cpass_cNTX_EFDCOSTS(FuelRegion) *100
               endif
            else
               cdiff_cNTX_EFDCOSTS(FuelRegion)
            endif
           }
       }
       Parameter cdiffPct_cNTX_rZFLRGeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cNTX_rZFLRGeq(FuelRegion) <> inf
             and cpass_cNTX_rZFLRGeq(FuelRegion) <> inf ) then
               if (ccalc_cNTX_rZFLRGeq(FuelRegion) <> 0 ) then
                 cdiff_cNTX_rZFLRGeq(FuelRegion) /$
                  ccalc_cNTX_rZFLRGeq(FuelRegion) *100
               elseif (cpass_cNTX_rZFLRGeq(FuelRegion) <> 0 ) then
                 cdiff_cNTX_rZFLRGeq(FuelRegion) /$
                  cpass_cNTX_rZFLRGeq(FuelRegion) *100
               endif
            else
               cdiff_cNTX_rZFLRGeq(FuelRegion)
            endif
           }
       }
       Parameter cdiffPct_cNTX_rZFLRGge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cNTX_rZFLRGge(FuelRegion) <> inf
             and cpass_cNTX_rZFLRGge(FuelRegion) <> inf ) then
               if (ccalc_cNTX_rZFLRGge(FuelRegion) <> 0 ) then
                 cdiff_cNTX_rZFLRGge(FuelRegion) /$
                  ccalc_cNTX_rZFLRGge(FuelRegion) *100
               elseif (cpass_cNTX_rZFLRGge(FuelRegion) <> 0 ) then
                 cdiff_cNTX_rZFLRGge(FuelRegion) /$
                  cpass_cNTX_rZFLRGge(FuelRegion) *100
               endif
            else
               cdiff_cNTX_rZFLRGge(FuelRegion)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            if (ccalc_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            if (ccalc_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            if (ccalc_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            if (ccalc_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            if (ccalc_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            if (ccalc_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            if (ccalc_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            if (ccalc_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) /$
                  cpass_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_EFDCOSTS(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            if (ccalc_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cO_rCBle(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rCBle(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rCBle(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCBle(PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rCBle(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rCBle(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCBle(PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rCBle(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rCBle(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            if (ccalc_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            if (ccalc_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            if (ccalc_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            if (ccalc_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            if (ccalc_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            if (ccalc_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            if (ccalc_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf
             and cpass_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf ) then
               if (ccalc_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  ccalc_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               elseif (cpass_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  cpass_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               endif
            else
               cdiff_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cO_rMRXge(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rMRXge(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rMRXge(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rMRXge(PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rMRXge(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rMRXge(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rMRXge(PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rMRXge(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rMRXge(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf
             and cpass_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf ) then
               if (ccalc_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  ccalc_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               elseif (cpass_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  cpass_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               endif
            else
               cdiff_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cO_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_UBOUND(PlantGroup,Season,OperatingMode) /$
                  ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cO_UBOUND(PlantGroup,Season,OperatingMode) /$
                  cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cO_UBOUND(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cOX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cOX_EFDCOSTS(PlantGroup,Season) <> inf
             and cpass_cOX_EFDCOSTS(PlantGroup,Season) <> inf ) then
               if (ccalc_cOX_EFDCOSTS(PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_EFDCOSTS(PlantGroup,Season) /$
                  ccalc_cOX_EFDCOSTS(PlantGroup,Season) *100
               elseif (cpass_cOX_EFDCOSTS(PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_EFDCOSTS(PlantGroup,Season) /$
                  cpass_cOX_EFDCOSTS(PlantGroup,Season) *100
               endif
            else
               cdiff_cOX_EFDCOSTS(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cOX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> inf
             and cpass_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> inf ) then
               if (ccalc_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) /$
                  ccalc_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
               elseif (cpass_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) /$
                  cpass_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
               endif
            else
               cdiff_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cOX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cOX_rCBle(PlantGroup,Season) <> inf
             and cpass_cOX_rCBle(PlantGroup,Season) <> inf ) then
               if (ccalc_cOX_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rCBle(PlantGroup,Season) /$
                  ccalc_cOX_rCBle(PlantGroup,Season) *100
               elseif (cpass_cOX_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rCBle(PlantGroup,Season) /$
                  cpass_cOX_rCBle(PlantGroup,Season) *100
               endif
            else
               cdiff_cOX_rCBle(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cOX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cOX_rELNOX0n(INOXP,PlantGroup,Season) <> inf
             and cpass_cOX_rELNOX0n(INOXP,PlantGroup,Season) <> inf ) then
               if (ccalc_cOX_rELNOX0n(INOXP,PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rELNOX0n(INOXP,PlantGroup,Season) /$
                  ccalc_cOX_rELNOX0n(INOXP,PlantGroup,Season) *100
               elseif (cpass_cOX_rELNOX0n(INOXP,PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rELNOX0n(INOXP,PlantGroup,Season) /$
                  cpass_cOX_rELNOX0n(INOXP,PlantGroup,Season) *100
               endif
            else
               cdiff_cOX_rELNOX0n(INOXP,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> inf
             and cpass_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> inf ) then
               if (ccalc_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) /$
                  ccalc_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
               elseif (cpass_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) /$
                  cpass_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
               endif
            else
               cdiff_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cOX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            if (ccalc_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> inf
             and cpass_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> inf ) then
               if (ccalc_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) /$
                  ccalc_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
               elseif (cpass_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) /$
                  cpass_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
               endif
            else
               cdiff_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cOX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cOX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cOX_rMRXge(PlantGroup,Season) <> inf
             and cpass_cOX_rMRXge(PlantGroup,Season) <> inf ) then
               if (ccalc_cOX_rMRXge(PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rMRXge(PlantGroup,Season) /$
                  ccalc_cOX_rMRXge(PlantGroup,Season) *100
               elseif (cpass_cOX_rMRXge(PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_rMRXge(PlantGroup,Season) /$
                  cpass_cOX_rMRXge(PlantGroup,Season) *100
               endif
            else
               cdiff_cOX_rMRXge(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cOX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cOX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cOX_UBOUND(PlantGroup,Season) <> inf
             and cpass_cOX_UBOUND(PlantGroup,Season) <> inf ) then
               if (ccalc_cOX_UBOUND(PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_UBOUND(PlantGroup,Season) /$
                  ccalc_cOX_UBOUND(PlantGroup,Season) *100
               elseif (cpass_cOX_UBOUND(PlantGroup,Season) <> 0 ) then
                 cdiff_cOX_UBOUND(PlantGroup,Season) /$
                  cpass_cOX_UBOUND(PlantGroup,Season) *100
               endif
            else
               cdiff_cOX_UBOUND(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rCARBONXXle {
           Text: "OML Columns: RHSEFD and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cRHS_rCARBONXXle <> inf
             and cpass_cRHS_rCARBONXXle <> inf ) then
               if (ccalc_cRHS_rCARBONXXle <> 0 ) then
                 cdiff_cRHS_rCARBONXXle /$
                  ccalc_cRHS_rCARBONXXle *100
               elseif (cpass_cRHS_rCARBONXXle <> 0 ) then
                 cdiff_cRHS_rCARBONXXle /$
                  cpass_cRHS_rCARBONXXle *100
               endif
            else
               cdiff_cRHS_rCARBONXXle
            endif
           }
       }
       Parameter cdiffPct_cRHS_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cRHS_rCBle(PlantGroup,Season) <> inf
             and cpass_cRHS_rCBle(PlantGroup,Season) <> inf ) then
               if (ccalc_cRHS_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cRHS_rCBle(PlantGroup,Season) /$
                  ccalc_cRHS_rCBle(PlantGroup,Season) *100
               elseif (cpass_cRHS_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cRHS_rCBle(PlantGroup,Season) /$
                  cpass_cRHS_rCBle(PlantGroup,Season) *100
               endif
            else
               cdiff_cRHS_rCBle(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            if (ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) <> inf
             and cpass_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) <> inf ) then
               if (ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) /$
                  ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) *100
               elseif (cpass_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) /$
                  cpass_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) *100
               endif
            else
               cdiff_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cRHS_rCO2QNRle(SupplyRegion_ALT2) <> inf
             and cpass_cRHS_rCO2QNRle(SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cRHS_rCO2QNRle(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cRHS_rCO2QNRle(SupplyRegion_ALT2) /$
                  ccalc_cRHS_rCO2QNRle(SupplyRegion_ALT2) *100
               elseif (cpass_cRHS_rCO2QNRle(SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cRHS_rCO2QNRle(SupplyRegion_ALT2) /$
                  cpass_cRHS_rCO2QNRle(SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cRHS_rCO2QNRle(SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
           Definition: { 
            if (ccalc_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> inf
             and cpass_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> inf ) then
               if (ccalc_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> 0 ) then
                 cdiff_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) /$
                  ccalc_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
               elseif (cpass_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) <> 0 ) then
                 cdiff_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) /$
                  cpass_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
               endif
            else
               cdiff_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rENeq {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: { 
            if (ccalc_cRHS_rENeq(PlantGroup,Season) <> inf
             and cpass_cRHS_rENeq(PlantGroup,Season) <> inf ) then
               if (ccalc_cRHS_rENeq(PlantGroup,Season) <> 0 ) then
                 cdiff_cRHS_rENeq(PlantGroup,Season) /$
                  ccalc_cRHS_rENeq(PlantGroup,Season) *100
               elseif (cpass_cRHS_rENeq(PlantGroup,Season) <> 0 ) then
                 cdiff_cRHS_rENeq(PlantGroup,Season) /$
                  cpass_cRHS_rENeq(PlantGroup,Season) *100
               endif
            else
               cdiff_cRHS_rENeq(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rENle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: { 
            if (ccalc_cRHS_rENle(PlantGroup,Season) <> inf
             and cpass_cRHS_rENle(PlantGroup,Season) <> inf ) then
               if (ccalc_cRHS_rENle(PlantGroup,Season) <> 0 ) then
                 cdiff_cRHS_rENle(PlantGroup,Season) /$
                  ccalc_cRHS_rENle(PlantGroup,Season) *100
               elseif (cpass_cRHS_rENle(PlantGroup,Season) <> 0 ) then
                 cdiff_cRHS_rENle(PlantGroup,Season) /$
                  cpass_cRHS_rENle(PlantGroup,Season) *100
               endif
            else
               cdiff_cRHS_rENle(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
           Definition: { 
            if (ccalc_cRHS_rEXle(SupplyRegion,Season,Slice) <> inf
             and cpass_cRHS_rEXle(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cRHS_rEXle(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rEXle(SupplyRegion,Season,Slice) /$
                  ccalc_cRHS_rEXle(SupplyRegion,Season,Slice) *100
               elseif (cpass_cRHS_rEXle(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rEXle(SupplyRegion,Season,Slice) /$
                  cpass_cRHS_rEXle(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cRHS_rEXle(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
           Definition: { 
            if (ccalc_cRHS_rFle(PlantGroup,Season,Slice) <> inf
             and cpass_cRHS_rFle(PlantGroup,Season,Slice) <> inf ) then
               if (ccalc_cRHS_rFle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rFle(PlantGroup,Season,Slice) /$
                  ccalc_cRHS_rFle(PlantGroup,Season,Slice) *100
               elseif (cpass_cRHS_rFle(PlantGroup,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rFle(PlantGroup,Season,Slice) /$
                  cpass_cRHS_rFle(PlantGroup,Season,Slice) *100
               endif
            else
               cdiff_cRHS_rFle(PlantGroup,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
           Definition: { 
            if (ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) <> inf
             and cpass_cRHS_rIMle(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rIMle(SupplyRegion,Season,Slice) /$
                  ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) *100
               elseif (cpass_cRHS_rIMle(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rIMle(SupplyRegion,Season,Slice) /$
                  cpass_cRHS_rIMle(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cRHS_rIMle(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
           Definition: { 
            if (ccalc_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf
             and cpass_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf ) then
               if (ccalc_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  ccalc_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               elseif (cpass_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  cpass_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               endif
            else
               cdiff_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cRHS_rLDge(SupplyRegion,Season,Slice) <> inf
             and cpass_cRHS_rLDge(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cRHS_rLDge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rLDge(SupplyRegion,Season,Slice) /$
                  ccalc_cRHS_rLDge(SupplyRegion,Season,Slice) *100
               elseif (cpass_cRHS_rLDge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rLDge(SupplyRegion,Season,Slice) /$
                  cpass_cRHS_rLDge(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cRHS_rLDge(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
           Definition: { 
            if (ccalc_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) <> inf
             and cpass_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) <> inf ) then
               if (ccalc_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) <> 0 ) then
                 cdiff_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) /$
                  ccalc_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) *100
               elseif (cpass_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) <> 0 ) then
                 cdiff_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) /$
                  cpass_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) *100
               endif
            else
               cdiff_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: RHSEFD and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cRHS_rMERCURYle(nHGCODE) <> inf
             and cpass_cRHS_rMERCURYle(nHGCODE) <> inf ) then
               if (ccalc_cRHS_rMERCURYle(nHGCODE) <> 0 ) then
                 cdiff_cRHS_rMERCURYle(nHGCODE) /$
                  ccalc_cRHS_rMERCURYle(nHGCODE) *100
               elseif (cpass_cRHS_rMERCURYle(nHGCODE) <> 0 ) then
                 cdiff_cRHS_rMERCURYle(nHGCODE) /$
                  cpass_cRHS_rMERCURYle(nHGCODE) *100
               endif
            else
               cdiff_cRHS_rMERCURYle(nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rMRXge {
           IndexDomain: (PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cRHS_rMRXge(PlantGroup) <> inf
             and cpass_cRHS_rMRXge(PlantGroup) <> inf ) then
               if (ccalc_cRHS_rMRXge(PlantGroup) <> 0 ) then
                 cdiff_cRHS_rMRXge(PlantGroup) /$
                  ccalc_cRHS_rMRXge(PlantGroup) *100
               elseif (cpass_cRHS_rMRXge(PlantGroup) <> 0 ) then
                 cdiff_cRHS_rMRXge(PlantGroup) /$
                  cpass_cRHS_rMRXge(PlantGroup) *100
               endif
            else
               cdiff_cRHS_rMRXge(PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rMVSO2le {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
           Definition: { 
            if (ccalc_cRHS_rMVSO2le(CoalDemandRegion) <> inf
             and cpass_cRHS_rMVSO2le(CoalDemandRegion) <> inf ) then
               if (ccalc_cRHS_rMVSO2le(CoalDemandRegion) <> 0 ) then
                 cdiff_cRHS_rMVSO2le(CoalDemandRegion) /$
                  ccalc_cRHS_rMVSO2le(CoalDemandRegion) *100
               elseif (cpass_cRHS_rMVSO2le(CoalDemandRegion) <> 0 ) then
                 cdiff_cRHS_rMVSO2le(CoalDemandRegion) /$
                  cpass_cRHS_rMVSO2le(CoalDemandRegion) *100
               endif
            else
               cdiff_cRHS_rMVSO2le(CoalDemandRegion)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
           Definition: { 
            if (ccalc_cRHS_rP2le(Slice,SupplyRegion,Season) <> inf
             and cpass_cRHS_rP2le(Slice,SupplyRegion,Season) <> inf ) then
               if (ccalc_cRHS_rP2le(Slice,SupplyRegion,Season) <> 0 ) then
                 cdiff_cRHS_rP2le(Slice,SupplyRegion,Season) /$
                  ccalc_cRHS_rP2le(Slice,SupplyRegion,Season) *100
               elseif (cpass_cRHS_rP2le(Slice,SupplyRegion,Season) <> 0 ) then
                 cdiff_cRHS_rP2le(Slice,SupplyRegion,Season) /$
                  cpass_cRHS_rP2le(Slice,SupplyRegion,Season) *100
               endif
            else
               cdiff_cRHS_rP2le(Slice,SupplyRegion,Season)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
           Definition: { 
            if (ccalc_cRHS_rSULFURCRle(CoalDemandRegion) <> inf
             and cpass_cRHS_rSULFURCRle(CoalDemandRegion) <> inf ) then
               if (ccalc_cRHS_rSULFURCRle(CoalDemandRegion) <> 0 ) then
                 cdiff_cRHS_rSULFURCRle(CoalDemandRegion) /$
                  ccalc_cRHS_rSULFURCRle(CoalDemandRegion) *100
               elseif (cpass_cRHS_rSULFURCRle(CoalDemandRegion) <> 0 ) then
                 cdiff_cRHS_rSULFURCRle(CoalDemandRegion) /$
                  cpass_cRHS_rSULFURCRle(CoalDemandRegion) *100
               endif
            else
               cdiff_cRHS_rSULFURCRle(CoalDemandRegion)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rSULFURle {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
           Definition: { 
            if (ccalc_cRHS_rSULFURle(SO2Region) <> inf
             and cpass_cRHS_rSULFURle(SO2Region) <> inf ) then
               if (ccalc_cRHS_rSULFURle(SO2Region) <> 0 ) then
                 cdiff_cRHS_rSULFURle(SO2Region) /$
                  ccalc_cRHS_rSULFURle(SO2Region) *100
               elseif (cpass_cRHS_rSULFURle(SO2Region) <> 0 ) then
                 cdiff_cRHS_rSULFURle(SO2Region) /$
                  cpass_cRHS_rSULFURle(SO2Region) *100
               endif
            else
               cdiff_cRHS_rSULFURle(SO2Region)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
           Definition: { 
            if (ccalc_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf
             and cpass_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> inf ) then
               if (ccalc_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  ccalc_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               elseif (cpass_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) <> 0 ) then
                 cdiff_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) /$
                  cpass_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
               endif
            else
               cdiff_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            if (ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) <> inf
             and cpass_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) <> inf ) then
               if (ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) /$
                  ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) *100
               elseif (cpass_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) /$
                  cpass_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) *100
               endif
            else
               cdiff_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
           Definition: { 
            if (ccalc_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cRHS_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
           Definition: { 
            if (ccalc_cRHS_rZOGSMeq(OGSMRegion) <> inf
             and cpass_cRHS_rZOGSMeq(OGSMRegion) <> inf ) then
               if (ccalc_cRHS_rZOGSMeq(OGSMRegion) <> 0 ) then
                 cdiff_cRHS_rZOGSMeq(OGSMRegion) /$
                  ccalc_cRHS_rZOGSMeq(OGSMRegion) *100
               elseif (cpass_cRHS_rZOGSMeq(OGSMRegion) <> 0 ) then
                 cdiff_cRHS_rZOGSMeq(OGSMRegion) /$
                  cpass_cRHS_rZOGSMeq(OGSMRegion) *100
               endif
            else
               cdiff_cRHS_rZOGSMeq(OGSMRegion)
            endif
           }
       }
       Parameter cdiffPct_cRPUS_EFDCOSTS {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cRPUS_EFDCOSTS(ResidProductionStep) <> inf
             and cpass_cRPUS_EFDCOSTS(ResidProductionStep) <> inf ) then
               if (ccalc_cRPUS_EFDCOSTS(ResidProductionStep) <> 0 ) then
                 cdiff_cRPUS_EFDCOSTS(ResidProductionStep) /$
                  ccalc_cRPUS_EFDCOSTS(ResidProductionStep) *100
               elseif (cpass_cRPUS_EFDCOSTS(ResidProductionStep) <> 0 ) then
                 cdiff_cRPUS_EFDCOSTS(ResidProductionStep) /$
                  cpass_cRPUS_EFDCOSTS(ResidProductionStep) *100
               endif
            else
               cdiff_cRPUS_EFDCOSTS(ResidProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cRPUS_rS_RSUSle {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
           Definition: { 
            if (ccalc_cRPUS_rS_RSUSle(ResidProductionStep) <> inf
             and cpass_cRPUS_rS_RSUSle(ResidProductionStep) <> inf ) then
               if (ccalc_cRPUS_rS_RSUSle(ResidProductionStep) <> 0 ) then
                 cdiff_cRPUS_rS_RSUSle(ResidProductionStep) /$
                  ccalc_cRPUS_rS_RSUSle(ResidProductionStep) *100
               elseif (cpass_cRPUS_rS_RSUSle(ResidProductionStep) <> 0 ) then
                 cdiff_cRPUS_rS_RSUSle(ResidProductionStep) /$
                  cpass_cRPUS_rS_RSUSle(ResidProductionStep) *100
               endif
            else
               cdiff_cRPUS_rS_RSUSle(ResidProductionStep)
            endif
           }
       }
       Parameter cdiffPct_cRTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cRTUS_EFDCOSTS(OilRegion) <> inf
             and cpass_cRTUS_EFDCOSTS(OilRegion) <> inf ) then
               if (ccalc_cRTUS_EFDCOSTS(OilRegion) <> 0 ) then
                 cdiff_cRTUS_EFDCOSTS(OilRegion) /$
                  ccalc_cRTUS_EFDCOSTS(OilRegion) *100
               elseif (cpass_cRTUS_EFDCOSTS(OilRegion) <> 0 ) then
                 cdiff_cRTUS_EFDCOSTS(OilRegion) /$
                  cpass_cRTUS_EFDCOSTS(OilRegion) *100
               endif
            else
               cdiff_cRTUS_EFDCOSTS(OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cRTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cRTUS_rCARBONXXle(OilRegion) <> inf
             and cpass_cRTUS_rCARBONXXle(OilRegion) <> inf ) then
               if (ccalc_cRTUS_rCARBONXXle(OilRegion) <> 0 ) then
                 cdiff_cRTUS_rCARBONXXle(OilRegion) /$
                  ccalc_cRTUS_rCARBONXXle(OilRegion) *100
               elseif (cpass_cRTUS_rCARBONXXle(OilRegion) <> 0 ) then
                 cdiff_cRTUS_rCARBONXXle(OilRegion) /$
                  cpass_cRTUS_rCARBONXXle(OilRegion) *100
               endif
            else
               cdiff_cRTUS_rCARBONXXle(OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cRTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: { 
            if (ccalc_cRTUS_rCARBONXXn(OilRegion) <> inf
             and cpass_cRTUS_rCARBONXXn(OilRegion) <> inf ) then
               if (ccalc_cRTUS_rCARBONXXn(OilRegion) <> 0 ) then
                 cdiff_cRTUS_rCARBONXXn(OilRegion) /$
                  ccalc_cRTUS_rCARBONXXn(OilRegion) *100
               elseif (cpass_cRTUS_rCARBONXXn(OilRegion) <> 0 ) then
                 cdiff_cRTUS_rCARBONXXn(OilRegion) /$
                  cpass_cRTUS_rCARBONXXn(OilRegion) *100
               endif
            else
               cdiff_cRTUS_rCARBONXXn(OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cRTUS_rMERC_RSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
           Definition: { 
            if (ccalc_cRTUS_rMERC_RSle(nHGCODE,OilRegion) <> inf
             and cpass_cRTUS_rMERC_RSle(nHGCODE,OilRegion) <> inf ) then
               if (ccalc_cRTUS_rMERC_RSle(nHGCODE,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rMERC_RSle(nHGCODE,OilRegion) /$
                  ccalc_cRTUS_rMERC_RSle(nHGCODE,OilRegion) *100
               elseif (cpass_cRTUS_rMERC_RSle(nHGCODE,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rMERC_RSle(nHGCODE,OilRegion) /$
                  cpass_cRTUS_rMERC_RSle(nHGCODE,OilRegion) *100
               endif
            else
               cdiff_cRTUS_rMERC_RSle(nHGCODE,OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cRTUS_rRSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
           Definition: { 
            if (ccalc_cRTUS_rRSle(CensusRegion,OilRegion) <> inf
             and cpass_cRTUS_rRSle(CensusRegion,OilRegion) <> inf ) then
               if (ccalc_cRTUS_rRSle(CensusRegion,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rRSle(CensusRegion,OilRegion) /$
                  ccalc_cRTUS_rRSle(CensusRegion,OilRegion) *100
               elseif (cpass_cRTUS_rRSle(CensusRegion,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rRSle(CensusRegion,OilRegion) /$
                  cpass_cRTUS_rRSle(CensusRegion,OilRegion) *100
               endif
            else
               cdiff_cRTUS_rRSle(CensusRegion,OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cRTUS_rS_RSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
           Definition: { 
            if (ccalc_cRTUS_rS_RSUSle(OilRegion) <> inf
             and cpass_cRTUS_rS_RSUSle(OilRegion) <> inf ) then
               if (ccalc_cRTUS_rS_RSUSle(OilRegion) <> 0 ) then
                 cdiff_cRTUS_rS_RSUSle(OilRegion) /$
                  ccalc_cRTUS_rS_RSUSle(OilRegion) *100
               elseif (cpass_cRTUS_rS_RSUSle(OilRegion) <> 0 ) then
                 cdiff_cRTUS_rS_RSUSle(OilRegion) /$
                  cpass_cRTUS_rS_RSUSle(OilRegion) *100
               endif
            else
               cdiff_cRTUS_rS_RSUSle(OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cRTUS_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
           Definition: { 
            if (ccalc_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) <> inf
             and cpass_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) <> inf ) then
               if (ccalc_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) /$
                  ccalc_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) *100
               elseif (cpass_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) /$
                  cpass_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) *100
               endif
            else
               cdiff_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cRTUS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: { 
            if (ccalc_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) <> inf
             and cpass_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) <> inf ) then
               if (ccalc_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) /$
                  ccalc_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) *100
               elseif (cpass_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) /$
                  cpass_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) *100
               endif
            else
               cdiff_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cRTUS_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: { 
            if (ccalc_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) <> inf
             and cpass_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) <> inf ) then
               if (ccalc_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) /$
                  ccalc_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) *100
               elseif (cpass_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) <> 0 ) then
                 cdiff_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) /$
                  cpass_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) *100
               endif
            else
               cdiff_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion)
            endif
           }
       }
       Parameter cdiffPct_cS2_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cS2_rLDge(SupplyRegion,Season,Slice) <> inf
             and cpass_cS2_rLDge(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cS2_rLDge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cS2_rLDge(SupplyRegion,Season,Slice) /$
                  ccalc_cS2_rLDge(SupplyRegion,Season,Slice) *100
               elseif (cpass_cS2_rLDge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cS2_rLDge(SupplyRegion,Season,Slice) /$
                  cpass_cS2_rLDge(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cS2_rLDge(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cS2_rP2_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: { 
            if (ccalc_cS2_rP2_le(SupplyRegion,Season,Slice) <> inf
             and cpass_cS2_rP2_le(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cS2_rP2_le(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cS2_rP2_le(SupplyRegion,Season,Slice) /$
                  ccalc_cS2_rP2_le(SupplyRegion,Season,Slice) *100
               elseif (cpass_cS2_rP2_le(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cS2_rP2_le(SupplyRegion,Season,Slice) /$
                  cpass_cS2_rP2_le(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cS2_rP2_le(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cS2_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: { 
            if (ccalc_cS2_rP2le(Slice,SupplyRegion,Season) <> inf
             and cpass_cS2_rP2le(Slice,SupplyRegion,Season) <> inf ) then
               if (ccalc_cS2_rP2le(Slice,SupplyRegion,Season) <> 0 ) then
                 cdiff_cS2_rP2le(Slice,SupplyRegion,Season) /$
                  ccalc_cS2_rP2le(Slice,SupplyRegion,Season) *100
               elseif (cpass_cS2_rP2le(Slice,SupplyRegion,Season) <> 0 ) then
                 cdiff_cS2_rP2le(Slice,SupplyRegion,Season) /$
                  cpass_cS2_rP2le(Slice,SupplyRegion,Season) *100
               endif
            else
               cdiff_cS2_rP2le(Slice,SupplyRegion,Season)
            endif
           }
       }
       Parameter cdiffPct_cS2_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) <> inf
             and cpass_cS2_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cS2_UBOUND(SupplyRegion,Season,Slice) /$
                  ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) *100
               elseif (cpass_cS2_UBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cS2_UBOUND(SupplyRegion,Season,Slice) /$
                  cpass_cS2_UBOUND(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cS2_UBOUND(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> inf
             and cpass_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> inf ) then
               if (ccalc_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> 0 ) then
                 cdiff_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) /$
                  ccalc_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
               elseif (cpass_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> 0 ) then
                 cdiff_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) /$
                  cpass_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
               endif
            else
               cdiff_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            if (ccalc_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) <> inf
             and cpass_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) /$
                  ccalc_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *100
               elseif (cpass_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) /$
                  cpass_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cSC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> inf
             and cpass_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) /$
                  ccalc_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
               elseif (cpass_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) /$
                  cpass_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cSC_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> inf
             and cpass_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) /$
                  ccalc_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
               elseif (cpass_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) /$
                  cpass_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cSC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            if (ccalc_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) <> inf
             and cpass_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) <> inf ) then
               if (ccalc_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) <> 0 ) then
                 cdiff_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) /$
                  ccalc_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *100
               elseif (cpass_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) <> 0 ) then
                 cdiff_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) /$
                  cpass_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *100
               endif
            else
               cdiff_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)
            endif
           }
       }
       Parameter cdiffPct_cSPx_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) <> inf
             and cpass_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) /$
                  ccalc_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) *100
               elseif (cpass_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) /$
                  cpass_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cSPx_EFDCOSTS(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSPx_LBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) <> inf
             and cpass_cSPx_LBOUND(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cSPx_LBOUND(SupplyRegion,Season,Slice) /$
                  ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) *100
               elseif (cpass_cSPx_LBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cSPx_LBOUND(SupplyRegion,Season,Slice) /$
                  cpass_cSPx_LBOUND(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cSPx_LBOUND(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSPx_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cSPx_rSRge(SupplyRegion,Season,Slice) <> inf
             and cpass_cSPx_rSRge(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cSPx_rSRge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cSPx_rSRge(SupplyRegion,Season,Slice) /$
                  ccalc_cSPx_rSRge(SupplyRegion,Season,Slice) *100
               elseif (cpass_cSPx_rSRge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cSPx_rSRge(SupplyRegion,Season,Slice) /$
                  cpass_cSPx_rSRge(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cSPx_rSRge(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSPx_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) <> inf
             and cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cSPx_UBOUND(SupplyRegion,Season,Slice) /$
                  ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) *100
               elseif (cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cSPx_UBOUND(SupplyRegion,Season,Slice) /$
                  cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cSPx_UBOUND(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: { 
            if (ccalc_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf
             and cpass_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf ) then
               if (ccalc_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  ccalc_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               elseif (cpass_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  cpass_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               endif
            else
               cdiff_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cSR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: { 
            if (ccalc_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf
             and cpass_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf ) then
               if (ccalc_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  ccalc_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               elseif (cpass_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  cpass_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               endif
            else
               cdiff_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cSR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf
             and cpass_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf ) then
               if (ccalc_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  ccalc_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               elseif (cpass_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  cpass_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               endif
            else
               cdiff_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cSR_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf
             and cpass_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf ) then
               if (ccalc_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  ccalc_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               elseif (cpass_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  cpass_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               endif
            else
               cdiff_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cSR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cST_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cST_rLDge(SupplyRegion,Season,Slice) <> inf
             and cpass_cST_rLDge(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cST_rLDge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cST_rLDge(SupplyRegion,Season,Slice) /$
                  ccalc_cST_rLDge(SupplyRegion,Season,Slice) *100
               elseif (cpass_cST_rLDge(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cST_rLDge(SupplyRegion,Season,Slice) /$
                  cpass_cST_rLDge(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cST_rLDge(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cST_rPS_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: { 
            if (ccalc_cST_rPS_le(SupplyRegion,Season,Slice) <> inf
             and cpass_cST_rPS_le(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cST_rPS_le(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cST_rPS_le(SupplyRegion,Season,Slice) /$
                  ccalc_cST_rPS_le(SupplyRegion,Season,Slice) *100
               elseif (cpass_cST_rPS_le(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cST_rPS_le(SupplyRegion,Season,Slice) /$
                  cpass_cST_rPS_le(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cST_rPS_le(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cST_UBOUND {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cST_UBOUND(SupplyRegion,Season,Slice) <> inf
             and cpass_cST_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
               if (ccalc_cST_UBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cST_UBOUND(SupplyRegion,Season,Slice) /$
                  ccalc_cST_UBOUND(SupplyRegion,Season,Slice) *100
               elseif (cpass_cST_UBOUND(SupplyRegion,Season,Slice) <> 0 ) then
                 cdiff_cST_UBOUND(SupplyRegion,Season,Slice) /$
                  cpass_cST_UBOUND(SupplyRegion,Season,Slice) *100
               endif
            else
               cdiff_cST_UBOUND(SupplyRegion,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cSULF_EFDCOSTS {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) <> inf
             and cpass_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) <> inf ) then
               if (ccalc_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) <> 0 ) then
                 cdiff_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) /$
                  ccalc_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) *100
               elseif (cpass_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) <> 0 ) then
                 cdiff_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) /$
                  cpass_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) *100
               endif
            else
               cdiff_cSULF_EFDCOSTS(PlantType_ECP,SO2Region)
            endif
           }
       }
       Parameter cdiffPct_cSULF_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
           Definition: { 
            if (ccalc_cSULF_rSULFle(PlantType_ECP,SO2Region) <> inf
             and cpass_cSULF_rSULFle(PlantType_ECP,SO2Region) <> inf ) then
               if (ccalc_cSULF_rSULFle(PlantType_ECP,SO2Region) <> 0 ) then
                 cdiff_cSULF_rSULFle(PlantType_ECP,SO2Region) /$
                  ccalc_cSULF_rSULFle(PlantType_ECP,SO2Region) *100
               elseif (cpass_cSULF_rSULFle(PlantType_ECP,SO2Region) <> 0 ) then
                 cdiff_cSULF_rSULFle(PlantType_ECP,SO2Region) /$
                  cpass_cSULF_rSULFle(PlantType_ECP,SO2Region) *100
               endif
            else
               cdiff_cSULF_rSULFle(PlantType_ECP,SO2Region)
            endif
           }
       }
       Parameter cdiffPct_cSULF_rSULFURle {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            if (ccalc_cSULF_rSULFURle(SO2Region,PlantType_ECP) <> inf
             and cpass_cSULF_rSULFURle(SO2Region,PlantType_ECP) <> inf ) then
               if (ccalc_cSULF_rSULFURle(SO2Region,PlantType_ECP) <> 0 ) then
                 cdiff_cSULF_rSULFURle(SO2Region,PlantType_ECP) /$
                  ccalc_cSULF_rSULFURle(SO2Region,PlantType_ECP) *100
               elseif (cpass_cSULF_rSULFURle(SO2Region,PlantType_ECP) <> 0 ) then
                 cdiff_cSULF_rSULFURle(SO2Region,PlantType_ECP) /$
                  cpass_cSULF_rSULFURle(SO2Region,PlantType_ECP) *100
               endif
            else
               cdiff_cSULF_rSULFURle(SO2Region,PlantType_ECP)
            endif
           }
       }
       Parameter cdiffPct_cSULF_rSULFURn {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: { 
            if (ccalc_cSULF_rSULFURn(SO2Region,PlantType_ECP) <> inf
             and cpass_cSULF_rSULFURn(SO2Region,PlantType_ECP) <> inf ) then
               if (ccalc_cSULF_rSULFURn(SO2Region,PlantType_ECP) <> 0 ) then
                 cdiff_cSULF_rSULFURn(SO2Region,PlantType_ECP) /$
                  ccalc_cSULF_rSULFURn(SO2Region,PlantType_ECP) *100
               elseif (cpass_cSULF_rSULFURn(SO2Region,PlantType_ECP) <> 0 ) then
                 cdiff_cSULF_rSULFURn(SO2Region,PlantType_ECP) /$
                  cpass_cSULF_rSULFURn(SO2Region,PlantType_ECP) *100
               endif
            else
               cdiff_cSULF_rSULFURn(SO2Region,PlantType_ECP)
            endif
           }
       }
       Parameter cdiffPct_cT_STOCK__LBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: LBOUND";
           Definition: { 
            if (ccalc_cT_STOCK__LBOUND <> inf
             and cpass_cT_STOCK__LBOUND <> inf ) then
               if (ccalc_cT_STOCK__LBOUND <> 0 ) then
                 cdiff_cT_STOCK__LBOUND /$
                  ccalc_cT_STOCK__LBOUND *100
               elseif (cpass_cT_STOCK__LBOUND <> 0 ) then
                 cdiff_cT_STOCK__LBOUND /$
                  cpass_cT_STOCK__LBOUND *100
               endif
            else
               cdiff_cT_STOCK__LBOUND
            endif
           }
       }
       Parameter cdiffPct_cT_STOCK__rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cT_STOCK__rMERCURYle(nHGCODE) <> inf
             and cpass_cT_STOCK__rMERCURYle(nHGCODE) <> inf ) then
               if (ccalc_cT_STOCK__rMERCURYle(nHGCODE) <> 0 ) then
                 cdiff_cT_STOCK__rMERCURYle(nHGCODE) /$
                  ccalc_cT_STOCK__rMERCURYle(nHGCODE) *100
               elseif (cpass_cT_STOCK__rMERCURYle(nHGCODE) <> 0 ) then
                 cdiff_cT_STOCK__rMERCURYle(nHGCODE) /$
                  cpass_cT_STOCK__rMERCURYle(nHGCODE) *100
               endif
            else
               cdiff_cT_STOCK__rMERCURYle(nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cT_STOCK__rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: { 
            if (ccalc_cT_STOCK__rMERCURYn(nHGCODE) <> inf
             and cpass_cT_STOCK__rMERCURYn(nHGCODE) <> inf ) then
               if (ccalc_cT_STOCK__rMERCURYn(nHGCODE) <> 0 ) then
                 cdiff_cT_STOCK__rMERCURYn(nHGCODE) /$
                  ccalc_cT_STOCK__rMERCURYn(nHGCODE) *100
               elseif (cpass_cT_STOCK__rMERCURYn(nHGCODE) <> 0 ) then
                 cdiff_cT_STOCK__rMERCURYn(nHGCODE) /$
                  cpass_cT_STOCK__rMERCURYn(nHGCODE) *100
               endif
            else
               cdiff_cT_STOCK__rMERCURYn(nHGCODE)
            endif
           }
       }
       Parameter cdiffPct_cT_STOCK__rSULFURn {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
           Definition: { 
            if (ccalc_cT_STOCK__rSULFURn(SO2Region) <> inf
             and cpass_cT_STOCK__rSULFURn(SO2Region) <> inf ) then
               if (ccalc_cT_STOCK__rSULFURn(SO2Region) <> 0 ) then
                 cdiff_cT_STOCK__rSULFURn(SO2Region) /$
                  ccalc_cT_STOCK__rSULFURn(SO2Region) *100
               elseif (cpass_cT_STOCK__rSULFURn(SO2Region) <> 0 ) then
                 cdiff_cT_STOCK__rSULFURn(SO2Region) /$
                  cpass_cT_STOCK__rSULFURn(SO2Region) *100
               endif
            else
               cdiff_cT_STOCK__rSULFURn(SO2Region)
            endif
           }
       }
       Parameter cdiffPct_cT_STOCK__UBOUND {
           Text: "OML Columns: T_STOCK_ and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cT_STOCK__UBOUND <> inf
             and cpass_cT_STOCK__UBOUND <> inf ) then
               if (ccalc_cT_STOCK__UBOUND <> 0 ) then
                 cdiff_cT_STOCK__UBOUND /$
                  ccalc_cT_STOCK__UBOUND *100
               elseif (cpass_cT_STOCK__UBOUND <> 0 ) then
                 cdiff_cT_STOCK__UBOUND /$
                  cpass_cT_STOCK__UBOUND *100
               endif
            else
               cdiff_cT_STOCK__UBOUND
            endif
           }
       }
       Parameter cdiffPct_cTC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> inf
             and cpass_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> inf ) then
               if (ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> 0 ) then
                 cdiff_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) /$
                  ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
               elseif (cpass_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> 0 ) then
                 cdiff_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) /$
                  cpass_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
               endif
            else
               cdiff_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cTC_rCANIMPUSeq {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CANIMPUS";
           Definition: { 
            if (ccalc_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> inf
             and cpass_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> inf ) then
               if (ccalc_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> 0 ) then
                 cdiff_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) /$
                  ccalc_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
               elseif (cpass_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) <> 0 ) then
                 cdiff_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) /$
                  cpass_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
               endif
            else
               cdiff_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cTC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: { 
            if (ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) <> inf
             and cpass_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) /$
                  ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *100
               elseif (cpass_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) /$
                  cpass_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cTC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> inf
             and cpass_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> inf ) then
               if (ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) /$
                  ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
               elseif (cpass_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) <> 0 ) then
                 cdiff_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) /$
                  cpass_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
               endif
            else
               cdiff_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2)
            endif
           }
       }
       Parameter cdiffPct_cTC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: { 
            if (ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) <> inf
             and cpass_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) <> inf ) then
               if (ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) <> 0 ) then
                 cdiff_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) /$
                  ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *100
               elseif (cpass_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) <> 0 ) then
                 cdiff_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) /$
                  cpass_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *100
               endif
            else
               cdiff_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep)
            endif
           }
       }
       Parameter cdiffPct_cTR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cTR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cTR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cTR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: { 
            if (ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf
             and cpass_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf ) then
               if (ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               elseif (cpass_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  cpass_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               endif
            else
               cdiff_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cTR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: { 
            if (ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf
             and cpass_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf ) then
               if (ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               elseif (cpass_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  cpass_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               endif
            else
               cdiff_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cTR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf
             and cpass_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> inf ) then
               if (ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               elseif (cpass_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) <> 0 ) then
                 cdiff_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) /$
                  cpass_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
               endif
            else
               cdiff_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)
            endif
           }
       }
       Parameter cdiffPct_cTR_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
           Definition: { 
            if (ccalc_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cTR_UBOUND {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
             and cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
               if (ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               elseif (cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> 0 ) then
                 cdiff_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) /$
                  cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
               endif
            else
               cdiff_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: { 
            if (ccalc_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: { 
            if (ccalc_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: { 
            if (ccalc_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: { 
            if (ccalc_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: { 
            if (ccalc_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: { 
            if (ccalc_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: { 
            if (ccalc_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: { 
            if (ccalc_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_ALT_UBOUND {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf
             and cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
               if (ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) /$
                  ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
               elseif (cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> 0 ) then
                 cdiff_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) /$
                  cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
               endif
            else
               cdiff_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) /$
                  cpass_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_EFDCOSTS(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: { 
            if (ccalc_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: { 
            if (ccalc_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cU_rCBle(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rCBle(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rCBle(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCBle(PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rCBle(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rCBle(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCBle(PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rCBle(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rCBle(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: { 
            if (ccalc_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: { 
            if (ccalc_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: { 
            if (ccalc_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: { 
            if (ccalc_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: { 
            if (ccalc_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: { 
            if (ccalc_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: { 
            if (ccalc_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: { 
            if (ccalc_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: { 
            if (ccalc_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: { 
            if (ccalc_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf
             and cpass_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf ) then
               if (ccalc_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  ccalc_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               elseif (cpass_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  cpass_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               endif
            else
               cdiff_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cU_rMRXge(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rMRXge(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rMRXge(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rMRXge(PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rMRXge(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rMRXge(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rMRXge(PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rMRXge(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rMRXge(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf
             and cpass_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> inf ) then
               if (ccalc_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  ccalc_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               elseif (cpass_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) <> 0 ) then
                 cdiff_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) /$
                  cpass_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
               endif
            else
               cdiff_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: { 
            if (ccalc_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: { 
            if (ccalc_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) /$
                  cpass_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cU_UBOUND {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) <> inf
             and cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
               if (ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_UBOUND(PlantGroup,Season,OperatingMode) /$
                  ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) *100
               elseif (cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) <> 0 ) then
                 cdiff_cU_UBOUND(PlantGroup,Season,OperatingMode) /$
                  cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) *100
               endif
            else
               cdiff_cU_UBOUND(PlantGroup,Season,OperatingMode)
            endif
           }
       }
       Parameter cdiffPct_cUX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: { 
            if (ccalc_cUX_EFDCOSTS(PlantGroup,Season) <> inf
             and cpass_cUX_EFDCOSTS(PlantGroup,Season) <> inf ) then
               if (ccalc_cUX_EFDCOSTS(PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_EFDCOSTS(PlantGroup,Season) /$
                  ccalc_cUX_EFDCOSTS(PlantGroup,Season) *100
               elseif (cpass_cUX_EFDCOSTS(PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_EFDCOSTS(PlantGroup,Season) /$
                  cpass_cUX_EFDCOSTS(PlantGroup,Season) *100
               endif
            else
               cdiff_cUX_EFDCOSTS(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cUX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: { 
            if (ccalc_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> inf
             and cpass_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> inf ) then
               if (ccalc_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) /$
                  ccalc_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
               elseif (cpass_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) /$
                  cpass_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
               endif
            else
               cdiff_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cUX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: { 
            if (ccalc_cUX_rCBle(PlantGroup,Season) <> inf
             and cpass_cUX_rCBle(PlantGroup,Season) <> inf ) then
               if (ccalc_cUX_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rCBle(PlantGroup,Season) /$
                  ccalc_cUX_rCBle(PlantGroup,Season) *100
               elseif (cpass_cUX_rCBle(PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rCBle(PlantGroup,Season) /$
                  cpass_cUX_rCBle(PlantGroup,Season) *100
               endif
            else
               cdiff_cUX_rCBle(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cUX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
           Definition: { 
            if (ccalc_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> inf
             and cpass_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> inf ) then
               if (ccalc_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) /$
                  ccalc_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
               elseif (cpass_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) /$
                  cpass_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
               endif
            else
               cdiff_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cUX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: { 
            if (ccalc_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cUX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
           Definition: { 
            if (ccalc_cUX_rMRXge(PlantGroup,Season) <> inf
             and cpass_cUX_rMRXge(PlantGroup,Season) <> inf ) then
               if (ccalc_cUX_rMRXge(PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rMRXge(PlantGroup,Season) /$
                  ccalc_cUX_rMRXge(PlantGroup,Season) *100
               elseif (cpass_cUX_rMRXge(PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rMRXge(PlantGroup,Season) /$
                  cpass_cUX_rMRXge(PlantGroup,Season) *100
               endif
            else
               cdiff_cUX_rMRXge(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cUX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: { 
            if (ccalc_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf
             and cpass_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> inf ) then
               if (ccalc_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  ccalc_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               elseif (cpass_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) <> 0 ) then
                 cdiff_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) /$
                  cpass_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
               endif
            else
               cdiff_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup)
            endif
           }
       }
       Parameter cdiffPct_cUX_UBOUND {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: UBOUND";
           Definition: { 
            if (ccalc_cUX_UBOUND(PlantGroup,Season) <> inf
             and cpass_cUX_UBOUND(PlantGroup,Season) <> inf ) then
               if (ccalc_cUX_UBOUND(PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_UBOUND(PlantGroup,Season) /$
                  ccalc_cUX_UBOUND(PlantGroup,Season) *100
               elseif (cpass_cUX_UBOUND(PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_UBOUND(PlantGroup,Season) /$
                  cpass_cUX_UBOUND(PlantGroup,Season) *100
               endif
            else
               cdiff_cUX_UBOUND(PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cUX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: { 
            if (ccalc_cUX_rELNOX0n(INOXP,PlantGroup,Season) <> inf
             and cpass_cUX_rELNOX0n(INOXP,PlantGroup,Season) <> inf ) then
               if (ccalc_cUX_rELNOX0n(INOXP,PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rELNOX0n(INOXP,PlantGroup,Season) /$
                  ccalc_cUX_rELNOX0n(INOXP,PlantGroup,Season) *100
               elseif (cpass_cUX_rELNOX0n(INOXP,PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rELNOX0n(INOXP,PlantGroup,Season) /$
                  cpass_cUX_rELNOX0n(INOXP,PlantGroup,Season) *100
               endif
            else
               cdiff_cUX_rELNOX0n(INOXP,PlantGroup,Season)
            endif
           }
       }
       Parameter cdiffPct_cUX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: { 
            if (ccalc_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> inf
             and cpass_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> inf ) then
               if (ccalc_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) /$
                  ccalc_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
               elseif (cpass_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) <> 0 ) then
                 cdiff_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) /$
                  cpass_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
               endif
            else
               cdiff_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season)
            endif
           }
       }
     }
   DeclarationSection coeff_parameter_declare {
       Parameter coeff_cACISPLY_EFDCOSTS {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cACISPLY_EFDCOSTS(numACI) ;
       }
       Parameter coeff_cACISPLY_rACICSTle {
           IndexDomain: (numACI) ;
           Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
           Definition: ccalc_cACISPLY_rACICSTle(numACI) ;
       }
       Parameter coeff_cB_EFDCOSTS {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
           Definition: ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rCARBONle {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rCARBONn {
           IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rCARBONXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: ccalc_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rCARBONXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBONXX";
           Definition: ccalc_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rCARSEQXXn {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQXX";
           Definition: ccalc_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rCFGn {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
           Definition: ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
           Definition: ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rDSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
           Definition: ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rNGle {
           IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
           Definition: ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rRSle {
           IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
           Definition: ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cB_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
           Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
           Definition: ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
       }
       Parameter coeff_cBCTLN_rELNOX0n {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
       }
       Parameter coeff_cBCTLN_rELNOXOTle {
           IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
           Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)OT";
           Definition: ccalc_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) ;
       }
       Parameter coeff_cBiomassOtherUsage_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector) ;
           Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
           Definition: ccalc_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) ;
       }
       Parameter coeff_cBP_type_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
       }
       Parameter coeff_cBP_type_rS_WD_allle {
           IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
           Definition: ccalc_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
       }
       Parameter coeff_cBP_type_rS_WD_typele {
           IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) ;
           Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
           Definition: ccalc_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) ;
       }
       Parameter coeff_cC_Z_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
           Definition: ccalc_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
       }
       Parameter coeff_cC_Z_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
           Definition: ccalc_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
       }
       Parameter coeff_cCARBNK_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cCARBNK_EFDCOSTS(CarbonRegion) ;
       }
       Parameter coeff_cCARBNK_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARBNK_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCARBNK_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARBNK_rCARBONABn(CarbonRegion) ;
       }
       Parameter coeff_cCARBONOT_rCARBONXXle {
           IndexDomain:  ;
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: ccalc_cCARBONOT_rCARBONXXle ;
       }
       Parameter coeff_cCARBONOT_rCARBONXXn {
           IndexDomain:  ;
           Text: "OML Columns: CARBONOT and OML Rows: CARBONXX";
           Definition: ccalc_cCARBONOT_rCARBONXXn ;
       }
       Parameter coeff_cCARDM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) ;
       }
       Parameter coeff_cCARDM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) ;
       }
       Parameter coeff_cCARECR_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cCARECR_EFDCOSTS(CarbonRegion) ;
       }
       Parameter coeff_cCARECR_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARECR_rCARBONle(CarbonRegion) ;
       }
       Parameter coeff_cCARESC_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cCARESC_EFDCOSTS(CarbonRegion) ;
       }
       Parameter coeff_cCARESC_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARESC_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCARESC_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARESC_rCARBONABn(CarbonRegion) ;
       }
       Parameter coeff_cCARESC_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARESC_rCARBONle(CarbonRegion) ;
       }
       Parameter coeff_cCARESCXX_EFDCOSTS {
           IndexDomain:  ;
           Text: "OML Columns: CARESCXX and OML Rows: EFDCOSTS";
           Definition: ccalc_cCARESCXX_EFDCOSTS ;
       }
       Parameter coeff_cCARESCXX_rCARBONXXle {
           IndexDomain:  ;
           Text: "OML Columns: CARESCXX and OML Rows: CARBONXX";
           Definition: ccalc_cCARESCXX_rCARBONXXle ;
       }
       Parameter coeff_cCARFUE_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARFUE_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCARFUE_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARFUE_rCARBONABn(CarbonRegion) ;
       }
       Parameter coeff_cCARIM_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) ;
       }
       Parameter coeff_cCARIM_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALT1) ;
           Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) ;
       }
       Parameter coeff_cCARIND_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARIND_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCARIND_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARIND_rCARBONABn(CarbonRegion) ;
       }
       Parameter coeff_cCARLIM_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cCARLIM_EFDCOSTS(CarbonRegion) ;
       }
       Parameter coeff_cCARLIM_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARLIM_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCARLIM_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARLIM_rCARBONle(CarbonRegion) ;
       }
       Parameter coeff_cCAROFF_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cCAROFF_EFDCOSTS(CarbonRegion) ;
       }
       Parameter coeff_cCAROFF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCAROFF_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCAROFF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCAROFF_rCARBONABn(CarbonRegion) ;
       }
       Parameter coeff_cCAROFF_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCAROFF_rCARBONle(CarbonRegion) ;
       }
       Parameter coeff_cCAROTH_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCAROTH_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCAROTH_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCAROTH_rCARBONABn(CarbonRegion) ;
       }
       Parameter coeff_cCARREF_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARREF_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCARREF_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARREF_rCARBONABn(CarbonRegion) ;
       }
       Parameter coeff_cCARRSV_EFDCOSTS {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cCARRSV_EFDCOSTS(CarbonRegion) ;
       }
       Parameter coeff_cCARRSV_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARRSV_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCARRSV_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARRSV_rCARBONABn(CarbonRegion) ;
       }
       Parameter coeff_cCARRSV_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARRSV_rCARBONle(CarbonRegion) ;
       }
       Parameter coeff_cCARUTL_rCARBONABeq {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARUTL_rCARBONABeq(CarbonRegion) ;
       }
       Parameter coeff_cCARUTL_rCARBONABn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
           Definition: ccalc_cCARUTL_rCARBONABn(CarbonRegion) ;
       }
       Parameter coeff_cCARUTL_rCARBONle {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARUTL_rCARBONle(CarbonRegion) ;
       }
       Parameter coeff_cCARUTL_rCARBONn {
           IndexDomain: (CarbonRegion) ;
           Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
           Definition: ccalc_cCARUTL_rCARBONn(CarbonRegion) ;
       }
       Parameter coeff_cCNIMPBUS_rCANIMPUSeq {
           IndexDomain:  ;
           Text: "OML Columns: CNIMPBUS and OML Rows: CANIMPUS";
           Definition: ccalc_cCNIMPBUS_rCANIMPUSeq ;
       }
       Parameter coeff_cCoalOtherUsage_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType) ;
           Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
           Definition: ccalc_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) ;
       }
       Parameter coeff_cCONCLB_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
           Definition: ccalc_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) ;
       }
       Parameter coeff_cCONNGB_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
           Definition: ccalc_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) ;
       }
       Parameter coeff_cCP_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) ;
       }
       Parameter coeff_cCP_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
           Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
           Definition: ccalc_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) ;
       }
       Parameter coeff_cCT_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rACICSTle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
           Definition: ccalc_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rACIOMCSTn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
           Definition: ccalc_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rACIRMVXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
           Definition: ccalc_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: ccalc_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBONXX";
           Definition: ccalc_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rCLle {
           IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
           Definition: ccalc_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
       }
       Parameter coeff_cCT_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
           Definition: ccalc_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) ;
       }
       Parameter coeff_cCT_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
           Definition: ccalc_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: ccalc_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
       }
       Parameter coeff_cCT_rS_CLle {
           IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
           Definition: ccalc_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
           Definition: ccalc_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) ;
       }
       Parameter coeff_cCT_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: ccalc_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
           Definition: ccalc_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCT_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
           Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
           Definition: ccalc_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) ;
       }
       Parameter coeff_cCTLCO_rCARBONle {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: ccalc_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cCTLCO_rCARBONn {
           IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBON(**)";
           Definition: ccalc_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cCTLCO_rCARBONXXle {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: ccalc_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cCTLCO_rCARBONXXn {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)CO and OML Rows: CARBONXX";
           Definition: ccalc_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cCTLHG_rMERCURYle {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: ccalc_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cCTLHG_rMERCURYn {
           IndexDomain: (nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)HG and OML Rows: MERCURY(*)";
           Definition: ccalc_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cCTLS_rSULFURle {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: ccalc_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cCTLS_rSULFURn {
           IndexDomain: (SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTL(**)(*)S(*) and OML Rows: SULFUR(*)";
           Definition: ccalc_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cCTLSO2_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: ccalc_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cCTLSO2_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALT1) ;
           Text: "OML Columns: CTLSO2(*) and OML Rows: SULFUR(**)";
           Definition: ccalc_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) ;
       }
       Parameter coeff_cD_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cD_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cD_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: ccalc_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cD_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: ccalc_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cD_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: ccalc_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cD_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: ccalc_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cD_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cD_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cD_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: ccalc_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cD_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
       }
       Parameter coeff_cDPUS_EFDCOSTS {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cDPUS_EFDCOSTS(DistillateProductionStep) ;
       }
       Parameter coeff_cDPUS_rS_DSUSle {
           IndexDomain: (DistillateProductionStep) ;
           Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
           Definition: ccalc_cDPUS_rS_DSUSle(DistillateProductionStep) ;
       }
       Parameter coeff_cDPVCP_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) ;
       }
       Parameter coeff_cDPVCP_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
           Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) ;
       }
       Parameter coeff_cDTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cDTUS_EFDCOSTS(OilRegion) ;
       }
       Parameter coeff_cDTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: ccalc_cDTUS_rCARBONXXle(OilRegion) ;
       }
       Parameter coeff_cDTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: CARBONXX";
           Definition: ccalc_cDTUS_rCARBONXXn(OilRegion) ;
       }
       Parameter coeff_cDTUS_rDSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
           Definition: ccalc_cDTUS_rDSle(CensusRegion,OilRegion) ;
       }
       Parameter coeff_cDTUS_rMERC_DSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
           Definition: ccalc_cDTUS_rMERC_DSle(nHGCODE,OilRegion) ;
       }
       Parameter coeff_cDTUS_rS_DSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
           Definition: ccalc_cDTUS_rS_DSUSle(OilRegion) ;
       }
       Parameter coeff_cDX_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
           Definition: ccalc_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
       }
       Parameter coeff_cDX_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
           Definition: ccalc_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
       }
       Parameter coeff_cELNOX_rELNOX0le {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cELNOX_rELNOX0le(INOXP,PlantType_ECP) ;
       }
       Parameter coeff_cELNOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP) ;
           Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cELNOX_rELNOXle(INOXP,PlantType_ECP) ;
       }
       Parameter coeff_cELNOXOT_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX0(*)";
           Definition: ccalc_cELNOXOT_rELNOX0le(INOXP) ;
       }
       Parameter coeff_cELNOXOT_rELNOXOTle {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ELNOX(*)OT and OML Rows: ELNOX(*)OT";
           Definition: ccalc_cELNOXOT_rELNOXOTle(INOXP) ;
       }
       Parameter coeff_cES_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cES_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cES_rLDge(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cESCNOX_EFDCOSTS {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cESCNOX_EFDCOSTS(INOXP) ;
       }
       Parameter coeff_cESCNOX_rELNOX0le {
           IndexDomain: (INOXP) ;
           Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cESCNOX_rELNOX0le(INOXP) ;
       }
       Parameter coeff_cF_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cF_EFDCOSTS(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cF_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: ccalc_cF_rENeq(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cF_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: ccalc_cF_rENle(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cF_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: ccalc_cF_rFle(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cF_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cF_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cF_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cF_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: ccalc_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) ;
       }
       Parameter coeff_cF_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cG_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1) ;
           Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) ;
       }
       Parameter coeff_cGENCLB_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
           Definition: ccalc_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) ;
       }
       Parameter coeff_cGENNGB_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2) ;
           Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
           Definition: ccalc_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) ;
       }
       Parameter coeff_cGPUS_EFDCOSTS {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cGPUS_EFDCOSTS(GasProductionStep) ;
       }
       Parameter coeff_cGPUS_rS_NGUSle {
           IndexDomain: (GasProductionStep) ;
           Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
           Definition: ccalc_cGPUS_rS_NGUSle(GasProductionStep) ;
       }
       Parameter coeff_cGTUS_EFDCOSTS {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cGTUS_EFDCOSTS(GasRegion,GasSeason) ;
       }
       Parameter coeff_cGTUS_rCARBONXXle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: ccalc_cGTUS_rCARBONXXle(GasRegion,GasSeason) ;
       }
       Parameter coeff_cGTUS_rCARBONXXn {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBONXX";
           Definition: ccalc_cGTUS_rCARBONXXn(GasRegion,GasSeason) ;
       }
       Parameter coeff_cGTUS_rNGle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
           Definition: ccalc_cGTUS_rNGle(GasRegion,GasSeason) ;
       }
       Parameter coeff_cGTUS_rS_NGUSle {
           IndexDomain: (GasRegion,GasSeason) ;
           Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
           Definition: ccalc_cGTUS_rS_NGUSle(GasRegion,GasSeason) ;
       }
       Parameter coeff_cH_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cH_EFDCOSTS(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cH_rENeq {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: ccalc_cH_rENeq(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cH_rENle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
           Definition: ccalc_cH_rENle(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cH_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
           Definition: ccalc_cH_rFle(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cH_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cH_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cH_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cH_rP2_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: ccalc_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) ;
       }
       Parameter coeff_cH_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: ccalc_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) ;
       }
       Parameter coeff_cH_rPS_le {
           IndexDomain: (SupplyRegion,Season,PlantGroup,Slice) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: ccalc_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) ;
       }
       Parameter coeff_cH_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cI_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cI_EFDCOSTS(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cI_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cI_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cI_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cI_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cJ_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: ccalc_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: ccalc_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: ccalc_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: ccalc_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: ccalc_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: ccalc_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: ccalc_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: ccalc_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: ccalc_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: ccalc_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: ccalc_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: ccalc_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: ccalc_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: ccalc_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: ccalc_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: ccalc_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cJ_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: ccalc_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: ccalc_cJ_rCBle(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: ccalc_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: ccalc_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: ccalc_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: ccalc_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: ccalc_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: ccalc_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: ccalc_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: ccalc_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: ccalc_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
       }
       Parameter coeff_cJ_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: ccalc_cJ_rMRXge(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
       }
       Parameter coeff_cJ_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJ_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cJX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cJX_EFDCOSTS(PlantGroup,Season) ;
       }
       Parameter coeff_cJX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
       }
       Parameter coeff_cJX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: ccalc_cJX_rCBle(PlantGroup,Season) ;
       }
       Parameter coeff_cJX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
           Definition: ccalc_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) ;
       }
       Parameter coeff_cJX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cJX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
           Definition: ccalc_cJX_rMRXge(PlantGroup,Season) ;
       }
       Parameter coeff_cJX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cJX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cJX_rELNOX0n(INOXP,PlantGroup,Season) ;
       }
       Parameter coeff_cJX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: J(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) ;
       }
       Parameter coeff_cKX_EFDCOSTS {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
           Definition: ccalc_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
       }
       Parameter coeff_cKX_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
           Definition: ccalc_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
       }
       Parameter coeff_cMB_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cMB_EFDCOSTS(PlantGroup,Season) ;
       }
       Parameter coeff_cMB_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
           Definition: ccalc_cMB_rCBle(PlantGroup,Season) ;
       }
       Parameter coeff_cMB_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup,Season) ;
           Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
           Definition: ccalc_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) ;
       }
       Parameter coeff_cMERC__rMERC_le {
           IndexDomain: (PlantType_ECP,nHGCODE) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
           Definition: ccalc_cMERC__rMERC_le(PlantType_ECP,nHGCODE) ;
       }
       Parameter coeff_cMERC__rMERCURYle {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: ccalc_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) ;
       }
       Parameter coeff_cMERC__rMERCURYn {
           IndexDomain: (nHGCODE,PlantType_ECP) ;
           Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
           Definition: ccalc_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) ;
       }
       Parameter coeff_cMERC_DS_rMERC_DSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
           Definition: ccalc_cMERC_DS_rMERC_DSle(nHGCODE) ;
       }
       Parameter coeff_cMERC_DS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: ccalc_cMERC_DS_rMERCURYle(nHGCODE) ;
       }
       Parameter coeff_cMERC_DS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
           Definition: ccalc_cMERC_DS_rMERCURYn(nHGCODE) ;
       }
       Parameter coeff_cMERC_RS_rMERC_RSle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
           Definition: ccalc_cMERC_RS_rMERC_RSle(nHGCODE) ;
       }
       Parameter coeff_cMERC_RS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: ccalc_cMERC_RS_rMERCURYle(nHGCODE) ;
       }
       Parameter coeff_cMERC_RS_rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
           Definition: ccalc_cMERC_RS_rMERCURYn(nHGCODE) ;
       }
       Parameter coeff_cMVS_EFDCOSTS {
           IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
       }
       Parameter coeff_cMVS_rMVSO2le {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
           Definition: ccalc_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
       }
       Parameter coeff_cMVS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
           Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
           Definition: ccalc_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
       }
       Parameter coeff_cMVSO2_EFDCOSTS {
           IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) ;
       }
       Parameter coeff_cMVSO2_rSULFURle {
           IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) ;
           Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
           Definition: ccalc_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) ;
       }
       Parameter coeff_cNOT_EFDCOSTS {
           IndexDomain: (OGSMSector,OGSMRegion) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) ;
       }
       Parameter coeff_cNOT_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: ccalc_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) ;
       }
       Parameter coeff_cNOT_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMSector) ;
           Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) ;
       }
       Parameter coeff_cNOTSF_EFDCOSTS {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
           Definition: ccalc_cNOTSF_EFDCOSTS(OGSMRegion) ;
       }
       Parameter coeff_cNOTSF_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
           Definition: ccalc_cNOTSF_rZOGSMeq(OGSMRegion) ;
       }
       Parameter coeff_cNSR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: ccalc_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) ;
       }
       Parameter coeff_cNSR_rZFLRSeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) ;
       }
       Parameter coeff_cNSR_rZFLRSge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cNSR_rZFLRSge(FuelRegion,OGSMRegion) ;
       }
       Parameter coeff_cNSR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: ccalc_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) ;
       }
       Parameter coeff_cNSX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
           Definition: ccalc_cNSX_EFDCOSTS(FuelRegion) ;
       }
       Parameter coeff_cNSX_rZFLRSeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cNSX_rZFLRSeq(FuelRegion) ;
       }
       Parameter coeff_cNSX_rZFLRSge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cNSX_rZFLRSge(FuelRegion) ;
       }
       Parameter coeff_cNTO_EFDCOSTS {
           IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
       }
       Parameter coeff_cNTO_rZOGSMeq {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: ccalc_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
       }
       Parameter coeff_cNTO_rZOTHRge {
           IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
           Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
           Definition: ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
       }
       Parameter coeff_cNTR_EFDCOSTS {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
           Definition: ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) ;
       }
       Parameter coeff_cNTR_rZFLRGeq {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) ;
       }
       Parameter coeff_cNTR_rZFLRGge {
           IndexDomain: (FuelRegion,OGSMRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cNTR_rZFLRGge(FuelRegion,OGSMRegion) ;
       }
       Parameter coeff_cNTR_rZOGSMeq {
           IndexDomain: (OGSMRegion,FuelRegion) ;
           Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
           Definition: ccalc_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) ;
       }
       Parameter coeff_cNTX_EFDCOSTS {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
           Definition: ccalc_cNTX_EFDCOSTS(FuelRegion) ;
       }
       Parameter coeff_cNTX_rZFLRGeq {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cNTX_rZFLRGeq(FuelRegion) ;
       }
       Parameter coeff_cNTX_rZFLRGge {
           IndexDomain: (FuelRegion) ;
           Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cNTX_rZFLRGge(FuelRegion) ;
       }
       Parameter coeff_cO_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: ccalc_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: ccalc_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: ccalc_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: ccalc_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: ccalc_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: ccalc_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: ccalc_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: ccalc_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: ccalc_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: ccalc_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: ccalc_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: ccalc_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: ccalc_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: ccalc_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: ccalc_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: ccalc_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cO_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: ccalc_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: ccalc_cO_rCBle(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: ccalc_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: ccalc_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: ccalc_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: ccalc_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: ccalc_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: ccalc_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: ccalc_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: ccalc_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: ccalc_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
       }
       Parameter coeff_cO_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: ccalc_cO_rMRXge(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
       }
       Parameter coeff_cO_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cO_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cOX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cOX_EFDCOSTS(PlantGroup,Season) ;
       }
       Parameter coeff_cOX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
       }
       Parameter coeff_cOX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: ccalc_cOX_rCBle(PlantGroup,Season) ;
       }
       Parameter coeff_cOX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cOX_rELNOX0n(INOXP,PlantGroup,Season) ;
       }
       Parameter coeff_cOX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) ;
       }
       Parameter coeff_cOX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
           Definition: ccalc_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) ;
       }
       Parameter coeff_cOX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cOX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
           Definition: ccalc_cOX_rMRXge(PlantGroup,Season) ;
       }
       Parameter coeff_cOX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cRHS_rCARBONXXle {
           IndexDomain:  ;
           Text: "OML Columns: RHSEFD and OML Rows: CARBONXX";
           Definition: ccalc_cRHS_rCARBONXXle ;
       }
       Parameter coeff_cRHS_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
           Definition: ccalc_cRHS_rCBle(PlantGroup,Season) ;
       }
       Parameter coeff_cRHS_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) ;
       }
       Parameter coeff_cRHS_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2) ;
           Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
           Definition: ccalc_cRHS_rCO2QNRle(SupplyRegion_ALT2) ;
       }
       Parameter coeff_cRHS_rDVle {
           IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
           Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
           Definition: ccalc_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
       }
       Parameter coeff_cRHS_rENeq {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: ccalc_cRHS_rENeq(PlantGroup,Season) ;
       }
       Parameter coeff_cRHS_rENle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
           Definition: ccalc_cRHS_rENle(PlantGroup,Season) ;
       }
       Parameter coeff_cRHS_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
           Definition: ccalc_cRHS_rEXle(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cRHS_rFle {
           IndexDomain: (PlantGroup,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
           Definition: ccalc_cRHS_rFle(PlantGroup,Season,Slice) ;
       }
       Parameter coeff_cRHS_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
           Definition: ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cRHS_rK_ge {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
           Definition: ccalc_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
       }
       Parameter coeff_cRHS_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cRHS_rLDge(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cRHS_rMBge {
           IndexDomain: (SupplyRegion_ALT1,PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
           Definition: ccalc_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) ;
       }
       Parameter coeff_cRHS_rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: RHSEFD and OML Rows: MERCURY(*)";
           Definition: ccalc_cRHS_rMERCURYle(nHGCODE) ;
       }
       Parameter coeff_cRHS_rMRXge {
           IndexDomain: (PlantGroup) ;
           Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
           Definition: ccalc_cRHS_rMRXge(PlantGroup) ;
       }
       Parameter coeff_cRHS_rMVSO2le {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
           Definition: ccalc_cRHS_rMVSO2le(CoalDemandRegion) ;
       }
       Parameter coeff_cRHS_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
           Definition: ccalc_cRHS_rP2le(Slice,SupplyRegion,Season) ;
       }
       Parameter coeff_cRHS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
           Definition: ccalc_cRHS_rSULFURCRle(CoalDemandRegion) ;
       }
       Parameter coeff_cRHS_rSULFURle {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
           Definition: ccalc_cRHS_rSULFURle(SO2Region) ;
       }
       Parameter coeff_cRHS_rT_le {
           IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
           Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
           Definition: ccalc_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
       }
       Parameter coeff_cRHS_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
           Definition: ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) ;
       }
       Parameter coeff_cRHS_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
           Definition: ccalc_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
       }
       Parameter coeff_cRHS_rZOGSMeq {
           IndexDomain: (OGSMRegion) ;
           Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
           Definition: ccalc_cRHS_rZOGSMeq(OGSMRegion) ;
       }
       Parameter coeff_cRPUS_EFDCOSTS {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cRPUS_EFDCOSTS(ResidProductionStep) ;
       }
       Parameter coeff_cRPUS_rS_RSUSle {
           IndexDomain: (ResidProductionStep) ;
           Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
           Definition: ccalc_cRPUS_rS_RSUSle(ResidProductionStep) ;
       }
       Parameter coeff_cRTUS_EFDCOSTS {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
           Definition: ccalc_cRTUS_EFDCOSTS(OilRegion) ;
       }
       Parameter coeff_cRTUS_rCARBONXXle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: ccalc_cRTUS_rCARBONXXle(OilRegion) ;
       }
       Parameter coeff_cRTUS_rCARBONXXn {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: CARBONXX";
           Definition: ccalc_cRTUS_rCARBONXXn(OilRegion) ;
       }
       Parameter coeff_cRTUS_rMERC_RSle {
           IndexDomain: (nHGCODE,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
           Definition: ccalc_cRTUS_rMERC_RSle(nHGCODE,OilRegion) ;
       }
       Parameter coeff_cRTUS_rRSle {
           IndexDomain: (CensusRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
           Definition: ccalc_cRTUS_rRSle(CensusRegion,OilRegion) ;
       }
       Parameter coeff_cRTUS_rS_RSUSle {
           IndexDomain: (OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
           Definition: ccalc_cRTUS_rS_RSUSle(OilRegion) ;
       }
       Parameter coeff_cRTUS_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
           Definition: ccalc_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) ;
       }
       Parameter coeff_cRTUS_rSULFURCRle {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: ccalc_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) ;
       }
       Parameter coeff_cRTUS_rSULFURCRn {
           IndexDomain: (CoalDemandRegion,OilRegion) ;
           Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
           Definition: ccalc_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) ;
       }
       Parameter coeff_cS2_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cS2_rLDge(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cS2_rP2_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
           Definition: ccalc_cS2_rP2_le(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cS2_rP2le {
           IndexDomain: (Slice,SupplyRegion,Season) ;
           Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
           Definition: ccalc_cS2_rP2le(Slice,SupplyRegion,Season) ;
       }
       Parameter coeff_cSC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
       }
       Parameter coeff_cSC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: ccalc_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
       }
       Parameter coeff_cSC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
       }
       Parameter coeff_cSC_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
       }
       Parameter coeff_cSC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: ccalc_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
       }
       Parameter coeff_cSPx_EFDCOSTS {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cSPx_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cSPx_rSRge(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cSR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
       }
       Parameter coeff_cSR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
       }
       Parameter coeff_cSR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
       }
       Parameter coeff_cSR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: ccalc_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
       }
       Parameter coeff_cSR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: ccalc_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
       }
       Parameter coeff_cSR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
       }
       Parameter coeff_cSR_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
       }
       Parameter coeff_cST_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cST_rLDge(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cST_rPS_le {
           IndexDomain: (SupplyRegion,Season,Slice) ;
           Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
           Definition: ccalc_cST_rPS_le(SupplyRegion,Season,Slice) ;
       }
       Parameter coeff_cSULF_EFDCOSTS {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) ;
       }
       Parameter coeff_cSULF_rSULFle {
           IndexDomain: (PlantType_ECP,SO2Region) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
           Definition: ccalc_cSULF_rSULFle(PlantType_ECP,SO2Region) ;
       }
       Parameter coeff_cSULF_rSULFURle {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: ccalc_cSULF_rSULFURle(SO2Region,PlantType_ECP) ;
       }
       Parameter coeff_cSULF_rSULFURn {
           IndexDomain: (SO2Region,PlantType_ECP) ;
           Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
           Definition: ccalc_cSULF_rSULFURn(SO2Region,PlantType_ECP) ;
       }
       Parameter coeff_cT_STOCK__rMERCURYle {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: ccalc_cT_STOCK__rMERCURYle(nHGCODE) ;
       }
       Parameter coeff_cT_STOCK__rMERCURYn {
           IndexDomain: (nHGCODE) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
           Definition: ccalc_cT_STOCK__rMERCURYn(nHGCODE) ;
       }
       Parameter coeff_cT_STOCK__rSULFURn {
           IndexDomain: (SO2Region) ;
           Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
           Definition: ccalc_cT_STOCK__rSULFURn(SO2Region) ;
       }
       Parameter coeff_cTC_EFDCOSTS {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
       }
       Parameter coeff_cTC_rCANIMPUSeq {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CANIMPUS";
           Definition: ccalc_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
       }
       Parameter coeff_cTC_rCNCPle {
           IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
           Definition: ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) ;
       }
       Parameter coeff_cTC_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) ;
       }
       Parameter coeff_cTC_rTCNle {
           IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
           Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
           Definition: ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) ;
       }
       Parameter coeff_cTR_EFDCOSTS {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
       }
       Parameter coeff_cTR_rCARBONle {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
       }
       Parameter coeff_cTR_rCARBONn {
           IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
       }
       Parameter coeff_cTR_rEXle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
           Definition: ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
       }
       Parameter coeff_cTR_rIMle {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
           Definition: ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
       }
       Parameter coeff_cTR_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
       }
       Parameter coeff_cTR_rTLle {
           IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
           Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
           Definition: ccalc_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
       }
       Parameter coeff_cU_ALT_EFDCOSTS {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS";
           Definition: ccalc_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X";
           Definition: ccalc_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: ccalc_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)";
           Definition: ccalc_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rCBle {
           IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)";
           Definition: ccalc_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: ccalc_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)";
           Definition: ccalc_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)";
           Definition: ccalc_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)";
           Definition: ccalc_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)";
           Definition: ccalc_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)";
           Definition: ccalc_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)";
           Definition: ccalc_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)";
           Definition: ccalc_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)";
           Definition: ccalc_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)";
           Definition: ccalc_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rMRXge {
           IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X";
           Definition: ccalc_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_ALT_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) ;
       }
       Parameter coeff_cU_EFDCOSTS {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rBTUXXle {
           IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
           Definition: ccalc_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rCARBONle {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rCARBONn {
           IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
           Definition: ccalc_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rCBle {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
           Definition: ccalc_cU_rCBle(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rCO2QNRle {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: ccalc_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rCO2QNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
           Definition: ccalc_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rCO2RNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
           Definition: ccalc_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rCO2TNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
           Definition: ccalc_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rCONCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
           Definition: ccalc_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rCONNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
           Definition: ccalc_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rGENCLeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
           Definition: ccalc_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rGENNGeq {
           IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
           Definition: ccalc_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rGENQNRn {
           IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
           Definition: ccalc_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rGRDGNge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
           Definition: ccalc_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rGRDRTge {
           IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
           Definition: ccalc_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
       }
       Parameter coeff_cU_rMRXge {
           IndexDomain: (PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
           Definition: ccalc_cU_rMRXge(PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) ;
       }
       Parameter coeff_cU_rZFLRGeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rZFLRGge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
           Definition: ccalc_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rZFLRSeq {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cU_rZFLRSge {
           IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode) ;
           Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
           Definition: ccalc_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) ;
       }
       Parameter coeff_cUX_EFDCOSTS {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
           Definition: ccalc_cUX_EFDCOSTS(PlantGroup,Season) ;
       }
       Parameter coeff_cUX_rBTUle {
           IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
           Definition: ccalc_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) ;
       }
       Parameter coeff_cUX_rCBle {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
           Definition: ccalc_cUX_rCBle(PlantGroup,Season) ;
       }
       Parameter coeff_cUX_rGn {
           IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
           Definition: ccalc_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) ;
       }
       Parameter coeff_cUX_rLDge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
           Definition: ccalc_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cUX_rMRXge {
           IndexDomain: (PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
           Definition: ccalc_cUX_rMRXge(PlantGroup,Season) ;
       }
       Parameter coeff_cUX_rSRge {
           IndexDomain: (SupplyRegion,Season,Slice,PlantGroup) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
           Definition: ccalc_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) ;
       }
       Parameter coeff_cUX_rELNOX0n {
           IndexDomain: (INOXP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX0(*)";
           Definition: ccalc_cUX_rELNOX0n(INOXP,PlantGroup,Season) ;
       }
       Parameter coeff_cUX_rELNOXle {
           IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season) ;
           Text: "OML Columns: U(*****)X(*) and OML Rows: ELNOX(*)(**)";
           Definition: ccalc_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) ;
       }
     }
   DeclarationSection Decision_Variable_Declare {
     Variable cACISPLY {
         IndexDomain: (numACI) ;
         Text: "OML Columns: ACISPLY(*)";
         Range: [coeff_cACISPLY_LBOUND(numACI),coeff_cACISPLY_UBOUND(numACI)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "total amount of activated carbon needed (pounds)";
     }
     Parameter coeff_cACISPLY_LBOUND {
         IndexDomain: (numACI) ;
         Range: nonnegative;
     }
     Parameter coeff_cACISPLY_UBOUND {
         IndexDomain: (numACI) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cACISPLY_UBOUND(numACI) ;
     }
     Variable cBiomassOtherUsage {
         IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
         Text: "OML Columns: B(**)(**)(**)X";
         Range: [coeff_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType),coeff_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "biomass usage from other sectors, by coal region and biomass supply type (trill BTU)";
     }
     Parameter coeff_cBiomassOtherUsage_LBOUND {
         IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
         Range: nonnegative;
           Definition: ccalc_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
     }
     Parameter coeff_cBiomassOtherUsage_UBOUND {
         IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) ;
     }
     Variable cBP {
         IndexDomain: (CoalDemandRegion_ALT2,BiomassType) ;
         Text: "OML Columns: BP(**)(**)XX";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "biomass production from coal region and biomass type (sum over steps) (trill BTU)";
     }
     Variable cBP_all {
         IndexDomain: (CoalDemandRegion_ALT2,BiomassProductionStep) ;
         Text: "OML Columns: BP(**)(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
     }
     Variable cBP_type {
         IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
         Text: "OML Columns: BP(**)(**)(**)";
         Range: [coeff_cBP_type_LBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep),coeff_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "biomass production from coal region, biomass type and supply step (trill BTU)";
     }
     Parameter coeff_cBP_type_LBOUND {
         IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
         Range: nonnegative;
     }
     Parameter coeff_cBP_type_UBOUND {
         IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) ;
     }
     Variable cB {
         IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) ;
         Text: "OML Columns: B(*)(***)(*)(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "fuel consumption by fuel region, plant type, season (gas only) and fuel mix (trill BTU)";
     }
     Variable cBCTLN {
         IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
         Text: "OML Columns: B(*)CTL(*)N(*)";
         Range: [coeff_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP),coeff_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "fuel consumed by CTL plants by coal region, season and nox group (trill BTU)";
     }
     Parameter coeff_cBCTLN_LBOUND {
         IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
         Range: nonnegative;
           Definition: ccalc_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
     }
     Parameter coeff_cBCTLN_UBOUND {
         IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) ;
     }
     Variable cC_Z {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
         Text: "OML Columns: C_(**)(*)_(*)Z";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "coal consumed from supply curve, coal region, scrubber type (at Tier 2 premium price) (trill BTU)";
     }
     Variable cCAR {
         IndexDomain: (CarbonEmissionType,CarbonRegion) ;
         Text: "OML Columns: CAR(***)(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
     }
     Variable cCARBNK {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CARBNK(**)";
         Range: [coeff_cCARBNK_LBOUND(CarbonRegion),coeff_cCARBNK_UBOUND(CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "use/accumulate carbon banks by carbon region (million metric tons carbon)";
     }
     Parameter coeff_cCARBNK_LBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
     }
     Parameter coeff_cCARBNK_UBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARBNK_UBOUND(CarbonRegion) ;
     }
     Variable cCARBONOT {
         Text: "OML Columns: CARBONOT";
         Range: [coeff_cCARBONOT_LBOUND,coeff_cCARBONOT_UBOUND] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon emissions from MSW and geothermal (million metric tons carbon)";
     }
     Parameter coeff_cCARBONOT_LBOUND {
         Range: nonnegative;
           Definition: ccalc_cCARBONOT_LBOUND ;
     }
     Parameter coeff_cCARBONOT_UBOUND {
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARBONOT_UBOUND ;
     }
     Variable cCARDM {
         IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
         Text: "OML Columns: CARDM(*)(**)";
         Range: [coeff_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion),coeff_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon emissions from domestic imports by EMM region and carbon region (CA only) (million metric tons carbon)";
     }
     Parameter coeff_cCARDM_LBOUND {
         IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
         Range: nonnegative;
           Definition: ccalc_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) ;
     }
     Parameter coeff_cCARDM_UBOUND {
         IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) ;
     }
     Variable cCARESC {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CARESC(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "escape vector for carbon constraint by carbon region (million metric tons carbon)";
     }
     Variable cCARESCXX {
         Text: "OML Columns: CARESCXX";
         Range: [coeff_cCARESCXX_LBOUND,coeff_cCARESCXX_UBOUND] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "escape vector for national carbon constraint(million metric tons carbon)";
     }
     Parameter coeff_cCARESCXX_LBOUND {
         Range: nonnegative;
     }
     Parameter coeff_cCARESCXX_UBOUND {
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARESCXX_UBOUND ;
     }
     Variable cCARFUE {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CARFUE(**)";
         Range: [coeff_cCARFUE_LBOUND(CarbonRegion),coeff_cCARFUE_UBOUND(CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon emissions from fuel use sector by carbon region (CA only) (million metric tons carbon)";
     }
     Parameter coeff_cCARFUE_LBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
           Definition: ccalc_cCARFUE_LBOUND(CarbonRegion) ;
     }
     Parameter coeff_cCARFUE_UBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARFUE_UBOUND(CarbonRegion) ;
     }
     Variable cCARIM {
         IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
         Text: "OML Columns: CARIM(*)(**)";
         Range: [coeff_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion),coeff_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon emissions from international imports by EMM region and carbon region (CA only) (million metric tons carbon)";
     }
     Parameter coeff_cCARIM_LBOUND {
         IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
         Range: nonnegative;
           Definition: ccalc_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) ;
     }
     Parameter coeff_cCARIM_UBOUND {
         IndexDomain: (SupplyRegion_ALT1,CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) ;
     }
     Variable cCARIND {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CARIND(**)";
         Range: [coeff_cCARIND_LBOUND(CarbonRegion),coeff_cCARIND_UBOUND(CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon emissions from industrial sector by carbon region (CA only) (million metric tons carbon)";
     }
     Parameter coeff_cCARIND_LBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
           Definition: ccalc_cCARIND_LBOUND(CarbonRegion) ;
     }
     Parameter coeff_cCARIND_UBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARIND_UBOUND(CarbonRegion) ;
     }
     Variable cCARLIM {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CARLIM(**)";
         Range: [coeff_cCARLIM_LBOUND(CarbonRegion),coeff_cCARLIM_UBOUND(CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon limit for carbon region (million metric tons carbon)";
     }
     Parameter coeff_cCARLIM_LBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
     }
     Parameter coeff_cCARLIM_UBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARLIM_UBOUND(CarbonRegion) ;
     }
     Variable cCAROFF {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CAROFF(**)";
         Range: [coeff_cCAROFF_LBOUND(CarbonRegion),coeff_cCAROFF_UBOUND(CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon offsets used by carbon region (million metric tons carbon)";
     }
     Parameter coeff_cCAROFF_LBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
     }
     Parameter coeff_cCAROFF_UBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCAROFF_UBOUND(CarbonRegion) ;
     }
     Variable cCAROTH {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CAROTH(**)";
         Range: [coeff_cCAROTH_LBOUND(CarbonRegion),coeff_cCAROTH_UBOUND(CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon emissions from other sectors by carbon region (CA only) (million metric tons carbon)";
     }
     Parameter coeff_cCAROTH_LBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
           Definition: ccalc_cCAROTH_LBOUND(CarbonRegion) ;
     }
     Parameter coeff_cCAROTH_UBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCAROTH_UBOUND(CarbonRegion) ;
     }
     Variable cCARREF {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CARREF(**)";
         Range: [coeff_cCARREF_LBOUND(CarbonRegion),coeff_cCARREF_UBOUND(CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon emissions from refinery sector by carbon region (CA only) (million metric tons carbon)";
     }
     Parameter coeff_cCARREF_LBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
           Definition: ccalc_cCARREF_LBOUND(CarbonRegion) ;
     }
     Parameter coeff_cCARREF_UBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARREF_UBOUND(CarbonRegion) ;
     }
     Variable cCARRSV {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CARRSV(**)";
         Range: [coeff_cCARRSV_LBOUND(CarbonRegion),coeff_cCARRSV_UBOUND(CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon reserve allowances used by carbon region (million metric tons carbon)";
     }
     Parameter coeff_cCARRSV_LBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
     }
     Parameter coeff_cCARRSV_UBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARRSV_UBOUND(CarbonRegion) ;
     }
     Variable cCARECR {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CARECR(**)";
         Range: [coeff_cCARECR_LBOUND(CarbonRegion),coeff_cCARECR_UBOUND(CarbonRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "carbon emissions containment reserve allowances used (RGGI only) (million metric tons carbon)";
     }
     Parameter coeff_cCARECR_LBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
     }
     Parameter coeff_cCARECR_UBOUND {
         IndexDomain: (CarbonRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCARECR_UBOUND(CarbonRegion) ;
     }
     Variable cCARUTL {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Columns: CARUTL(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "accumulate carbon emissions from the utility sector by carbon region (CA only) (million metric tons carbon)";
     }
     Variable cCMNR {
         IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto) ;
         Text: "OML Columns: CM(**)(**)NR";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "trade carbon emissions between EMM regions - CPP only (billion lbs CO2)";
     }
     Variable cCNIMPBUS {
         Text: "OML Columns: CNIMPBUS";
         Range: [coeff_cCNIMPBUS_LBOUND,coeff_cCNIMPBUS_UBOUND] ;
         Property: ReducedCost, CoefficientRange, Basic;
     }
     Parameter coeff_cCNIMPBUS_LBOUND {
         Range: nonnegative;
           Definition: ccalc_cCNIMPBUS_LBOUND ;
     }
     Parameter coeff_cCNIMPBUS_UBOUND {
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCNIMPBUS_UBOUND ;
     }
     Variable cCoalOtherUsage {
         IndexDomain: (CoalSupplyCurve) ;
         Text: "OML Columns: CP(**)OTXX";
         Range: [coeff_cCoalOtherUsage_LBOUND(CoalSupplyCurve),coeff_cCoalOtherUsage_UBOUND(CoalSupplyCurve)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "coal used by other sectors by supply curve (trill BTU)";
     }
     Parameter coeff_cCoalOtherUsage_LBOUND {
         IndexDomain: (CoalSupplyCurve) ;
         Range: nonnegative;
           Definition: ccalc_cCoalOtherUsage_LBOUND(CoalSupplyCurve) ;
     }
     Parameter coeff_cCoalOtherUsage_UBOUND {
         IndexDomain: (CoalSupplyCurve) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) ;
     }
     Variable cCONCLB {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "OML Columns: CONCLB(**)";
         Range: [coeff_cCONCLB_LBOUND(SupplyRegion_ALT2),coeff_cCONCLB_UBOUND(SupplyRegion_ALT2)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "coal consumption by EMM region for STEO benchmarking (trill BTU)";
     }
     Parameter coeff_cCONCLB_LBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
           Definition: ccalc_cCONCLB_LBOUND(SupplyRegion_ALT2) ;
     }
     Parameter coeff_cCONCLB_UBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) ;
     }
     Variable cCONNGB {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "OML Columns: CONNGB(**)";
         Range: [coeff_cCONNGB_LBOUND(SupplyRegion_ALT2),coeff_cCONNGB_UBOUND(SupplyRegion_ALT2)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "gas consumption by EMM region for STEO benchmarking (trill BTU)";
     }
     Parameter coeff_cCONNGB_LBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
           Definition: ccalc_cCONNGB_LBOUND(SupplyRegion_ALT2) ;
     }
     Parameter coeff_cCONNGB_UBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) ;
     }
     Variable cCP {
         IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
         Text: "OML Columns: CP(**)(**)(**)";
         Range: [coeff_cCP_LBOUND(CoalSupplyCurve,CoalType,CoalProductionStep),coeff_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "coal production by coal supply curve, coal type, and step (trill BTU)";
     }
     Parameter coeff_cCP_LBOUND {
         IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
         Range: nonnegative;
     }
     Parameter coeff_cCP_UBOUND {
         IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) ;
     }
     Variable cCT {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
         Text: "OML Columns: CT(**)(*)(**)(*)";
         Range: [coeff_cCT_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),coeff_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "transport coal from coal supply curve to coal demand region for plant type and ACI option (trill BTU)";
     }
     Parameter coeff_cCT_LBOUND {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
         Range: nonnegative;
     }
     Parameter coeff_cCT_UBOUND {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) ;
     }
     Variable cCTLCO {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
         Text: "OML Columns: CTL(**)(*)CO";
         Range: [coeff_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1),coeff_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)] ;
         Property: ReducedCost, CoefficientRange, Basic;
     }
     Parameter coeff_cCTLCO_LBOUND {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
         Range: nonnegative;
           Definition: ccalc_cCTLCO_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) ;
     }
     Parameter coeff_cCTLCO_UBOUND {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCTLCO_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) ;
     }
     Variable cCTLHG {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
         Text: "OML Columns: CTL(**)(*)HG";
         Range: [coeff_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1),coeff_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "mercury emissions from CTL by coal supply curve and coal demand region (tons * 1000)";
     }
     Parameter coeff_cCTLHG_LBOUND {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
         Range: nonnegative;
           Definition: ccalc_cCTLHG_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) ;
     }
     Parameter coeff_cCTLHG_UBOUND {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCTLHG_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1) ;
     }
     Variable cCTLS {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
         Text: "OML Columns: CTL(**)(*)S(*)";
         Range: [coeff_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region),coeff_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "SO2 emissions from CTL by coal supply curve, coal demand region and SO2 region (thousand tons)";
     }
     Parameter coeff_cCTLS_LBOUND {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
         Range: nonnegative;
           Definition: ccalc_cCTLS_LBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
     }
     Parameter coeff_cCTLS_UBOUND {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCTLS_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region) ;
     }
     Variable cCTLSO2 {
         IndexDomain: (CoalDemandRegion_ALT1) ;
         Text: "OML Columns: CTLSO2(*)";
         Range: [coeff_cCTLSO2_LBOUND(CoalDemandRegion_ALT1),coeff_cCTLSO2_UBOUND(CoalDemandRegion_ALT1)] ;
         Property: ReducedCost, CoefficientRange, Basic;
     }
     Parameter coeff_cCTLSO2_LBOUND {
         IndexDomain: (CoalDemandRegion_ALT1) ;
         Range: nonnegative;
           Definition: ccalc_cCTLSO2_LBOUND(CoalDemandRegion_ALT1) ;
     }
     Parameter coeff_cCTLSO2_UBOUND {
         IndexDomain: (CoalDemandRegion_ALT1) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cCTLSO2_UBOUND(CoalDemandRegion_ALT1) ;
     }
     Variable cD {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Text: "OML Columns: D(*****)(*)(*)";
         Range: [coeff_cD_LBOUND(PlantGroup,Season,OperatingMode),coeff_cD_UBOUND(PlantGroup,Season,OperatingMode)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: " distributed gen operates by plant group, season and operating mode (GW)";
     }
     Parameter coeff_cD_LBOUND {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Range: nonnegative;
           Definition: ccalc_cD_LBOUND(PlantGroup,Season,OperatingMode) ;
     }
     Parameter coeff_cD_UBOUND {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) ;
     }
     Variable cDPUS {
         IndexDomain: (DistillateProductionStep) ;
         Text: "OML Columns: DPUS(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Production of distillate oil for power sector (trillion BTU)";
     }
     Variable cDTUS {
         IndexDomain: (OilRegion) ;
         Text: "OML Columns: DTUS(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Transport distillate oil to oil (census) region (trillion BTU)";
     }
     Variable cDPVCP {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "OML Columns: DPVCP(**)";
         Range: [coeff_cDPVCP_LBOUND(SupplyRegion_ALT2),coeff_cDPVCP_UBOUND(SupplyRegion_ALT2)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Column for Distributed PV Capacity to be Excluded from Grid Resilience Rows to prevent ?double-counting?";
     }
     Parameter coeff_cDPVCP_LBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
           Definition: ccalc_cDPVCP_LBOUND(SupplyRegion_ALT2) ;
     }
     Parameter coeff_cDPVCP_UBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) ;
     }
     Variable cDX {
         IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
         Text: "OML Columns: DX(*)(**)(*)XX";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Escape vector for coal diversity constraint, by coal demand region, coal plant type and coal type (subbit/lig) (trill BTU)";
     }
     Variable cELNOX {
         IndexDomain: (INOXP,PlantType_ECP) ;
         Text: "OML Columns: ELNOX(*)(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "accumulate NOX emissions by Nox region and plant type (thousand tons)";
     }
     Variable cELNOXOT {
         IndexDomain: (INOXP) ;
         Text: "OML Columns: ELNOX(*)OT";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
     }
     Variable cES {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Text: "OML Columns: ES(****)(*)(*)";
         Range: [coeff_cES_LBOUND(SupplyRegion,Season,Slice),coeff_cES_UBOUND(SupplyRegion,Season,Slice)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Escape vector for the load row, by EMM region, season and slice (GW)";
     }
     Parameter coeff_cES_LBOUND {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Range: nonnegative;
     }
     Parameter coeff_cES_UBOUND {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cES_UBOUND(SupplyRegion,Season,Slice) ;
     }
     Variable cESCNOX {
         IndexDomain: (INOXP) ;
         Text: "OML Columns: ESCNOX0(*)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "accumulate NOX emissions by Nox region (thousand tons)";
     }
     Variable cF {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Text: "OML Columns: F(*****)(*)(*)";
         Range: [coeff_cF_LBOUND(PlantGroup,Season,Slice),coeff_cF_UBOUND(PlantGroup,Season,Slice)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate hydro in maximum spinning reserve mode, by plant group, season and slice (GW)";
     }
     Parameter coeff_cF_LBOUND {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Range: nonnegative;
     }
     Parameter coeff_cF_UBOUND {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cF_UBOUND(PlantGroup,Season,Slice) ;
     }
     Variable cG {
         IndexDomain: (SupplyRegion_ALT1) ;
         Text: "OML Columns: G(*)CGTRAD";
         Range: [coeff_cG_LBOUND(SupplyRegion_ALT1),coeff_cG_UBOUND(SupplyRegion_ALT1)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "fixed vector for traditional cogen sales to the grid, by EMM region (GW)";
     }
     Parameter coeff_cG_LBOUND {
         IndexDomain: (SupplyRegion_ALT1) ;
         Range: nonnegative;
           Definition: ccalc_cG_LBOUND(SupplyRegion_ALT1) ;
     }
     Parameter coeff_cG_UBOUND {
         IndexDomain: (SupplyRegion_ALT1) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cG_UBOUND(SupplyRegion_ALT1) ;
     }
     Variable cGEESFR {
         IndexDomain: (FuelRegion) ;
         Text: "OML Columns: G(**)EESFR";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "fixed contribution from demand EE for CPP rate case, by fuel region (bkwh)";
     }
     Variable cGEESNR {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "OML Columns: G(**)EESNR";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "fixed contribution from demand EE for CPP rate case, by EMM region (bkwh)";
     }
     Variable cGENCLB {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "OML Columns: GENCLB(**)";
         Range: [coeff_cGENCLB_LBOUND(SupplyRegion_ALT2),coeff_cGENCLB_UBOUND(SupplyRegion_ALT2)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "coal generation by EMM region for STEO benchmarking (billion kWH)";
     }
     Parameter coeff_cGENCLB_LBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
           Definition: ccalc_cGENCLB_LBOUND(SupplyRegion_ALT2) ;
     }
     Parameter coeff_cGENCLB_UBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) ;
     }
     Variable cGENNGB {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "OML Columns: GENNGB(**)";
         Range: [coeff_cGENNGB_LBOUND(SupplyRegion_ALT2),coeff_cGENNGB_UBOUND(SupplyRegion_ALT2)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "gas generation by EMM region for STEO benchmarking (billion kWH)";
     }
     Parameter coeff_cGENNGB_LBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
           Definition: ccalc_cGENNGB_LBOUND(SupplyRegion_ALT2) ;
     }
     Parameter coeff_cGENNGB_UBOUND {
         IndexDomain: (SupplyRegion_ALT2) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) ;
     }
     Variable cGNUPFR {
         IndexDomain: (FuelRegion) ;
         Text: "OML Columns: G(**)NUPFR";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "contribution from planned nuclear to CPP rate (if appropriate), by fuel region (bkwh)";
     }
     Variable cGNUPNR {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "OML Columns: G(**)NUPNR";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "contribution from planned nuclear to CPP rate (if appropriate), by EMM region (bkwh)";
     }
     Variable cGPUS {
         IndexDomain: (GasProductionStep) ;
         Text: "OML Columns: GPUS(**)";
         Range: [coeff_cGPUS_LBOUND(GasProductionStep),coeff_cGPUS_UBOUND(GasProductionStep)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Production of natural gas by supply step (trill BTU)";
     }
     Parameter coeff_cGPUS_LBOUND {
         IndexDomain: (GasProductionStep) ;
         Range: nonnegative;
     }
     Parameter coeff_cGPUS_UBOUND {
         IndexDomain: (GasProductionStep) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cGPUS_UBOUND(GasProductionStep) ;
     }
     Variable cGTUS {
         IndexDomain: (GasRegion,GasSeason) ;
         Text: "OML Columns: GTUS(**)(*)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Transport natural gas to gas region by gas season (trill BTU)";
     }
     Variable cH {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Text: "OML Columns: H(*****)(*)(*)";
         Range: [coeff_cH_LBOUND(PlantGroup,Season,Slice),coeff_cH_UBOUND(PlantGroup,Season,Slice)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate hydro in maximum generation mode, by plant group, season and slice (GW)";
     }
     Parameter coeff_cH_LBOUND {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Range: nonnegative;
     }
     Parameter coeff_cH_UBOUND {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cH_UBOUND(PlantGroup,Season,Slice) ;
     }
     Variable cI {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Text: "OML Columns: I(*****)(*)(*)";
         Range: [coeff_cI_LBOUND(PlantGroup,Season,Slice),coeff_cI_UBOUND(PlantGroup,Season,Slice)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate intermittent plant by plant group, season and slice (GW)";
     }
     Parameter coeff_cI_LBOUND {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Range: nonnegative;
           Definition: ccalc_cI_LBOUND(PlantGroup,Season,Slice) ;
     }
     Parameter coeff_cI_UBOUND {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cI_UBOUND(PlantGroup,Season,Slice) ;
     }
     Variable cIGEN {
         IndexDomain: (SupplyRegion_ALT1,PlantType_ECP) ;
         Text: "OML Columns: I(*)(**)GEN";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "contribution from incremental renewable generation to CPP rate (if appropriate) by EMM region and plant type (bkwh)";
     }
     Variable cJ_ALT {
         IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
         Text: "OML Columns: J(*****)(*)(*)!ALT";
         Range: [coeff_cJ_ALT_LBOUND(PlantGroup,SeasonCCS,OperatingMode),coeff_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate dispatchable CCS plant without capture equipment in minimum generation /max spinning reserves mode, by plant group, season and operate option";
     }
     Parameter coeff_cJ_ALT_LBOUND {
         IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
         Range: nonnegative;
     }
     Parameter coeff_cJ_ALT_UBOUND {
         IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) ;
     }
     Variable cJ {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Text: "OML Columns: J(*****)(*)(*)";
         Range: [coeff_cJ_LBOUND(PlantGroup,Season,OperatingMode),coeff_cJ_UBOUND(PlantGroup,Season,OperatingMode)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate dispatchable fossil/nuclear plant in minimum generation /max spinning reserves mode, by plant group, season and operate option (GW)";
     }
     Parameter coeff_cJ_LBOUND {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Range: nonnegative;
     }
     Parameter coeff_cJ_UBOUND {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) ;
     }
     Variable cJX {
         IndexDomain: (PlantGroup,Season) ;
         Text: "OML Columns: J(*****)X(*)";
         Range: [coeff_cJX_LBOUND(PlantGroup,Season),coeff_cJX_UBOUND(PlantGroup,Season)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate dispatchable renewable plant in minimum generation /max spinning reserves mode, by plant group and season (GW)";
     }
     Parameter coeff_cJX_LBOUND {
         IndexDomain: (PlantGroup,Season) ;
         Range: nonnegative;
     }
     Parameter coeff_cJX_UBOUND {
         IndexDomain: (PlantGroup,Season) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cJX_UBOUND(PlantGroup,Season) ;
     }
     Variable cKX {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
         Text: "OML Columns: KX(**)(*)(*)XX";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "escape vector for coal contract constraint, by coal supply curve, coal demand region and scrubbed/unscrubbed type (trill BTU)";
     }
     Variable cMB {
         IndexDomain: (PlantGroup,Season) ;
         Text: "OML Columns: MB(*****)(*)";
         Range: [coeff_cMB_LBOUND(PlantGroup,Season),coeff_cMB_UBOUND(PlantGroup,Season)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "planned maintenance level by plant group and season (GW)";
     }
     Parameter coeff_cMB_LBOUND {
         IndexDomain: (PlantGroup,Season) ;
         Range: nonnegative;
     }
     Parameter coeff_cMB_UBOUND {
         IndexDomain: (PlantGroup,Season) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cMB_UBOUND(PlantGroup,Season) ;
     }
     Variable cMERC_ {
         IndexDomain: (PlantType_ECP,nHGCODE) ;
         Text: "OML Columns: MERC_(**)(*)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "mercury emissions by plant type and mercury group (tons * 1000)";
     }
     Variable cMERC_DS {
         IndexDomain: (nHGCODE) ;
         Text: "OML Columns: MERC_DS(*)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "mercury emissions from distillate consumption by mercury group (tons * 1000)";
     }
     Variable cMERC_OT {
         IndexDomain: (nHGCODE) ;
         Text: "OML Columns: MERC_OT(*)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "mercury emissions from other (coal stock changes) by mercury group (tons * 1000)";
     }
     Variable cMERC_RS {
         IndexDomain: (nHGCODE) ;
         Text: "OML Columns: MERC_RS(*)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "mercury emissions from residual fuel by mercury group (tons * 1000)";
     }
     Variable cMVS {
         IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) ;
         Text: "OML Columns: MVS(**)(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "SO2 allowances traded between coal demand regions (CSAPR) (thousand tons)";
     }
     Variable cMVSO2 {
         IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
         Text: "OML Columns: MVSO2(*)(*)";
         Range: [coeff_cMVSO2_LBOUND(SO2Region_ALTFrom,SO2Region_ALTTo),coeff_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "SO2 allowances traded between SO2 regions (CAIR) (thousand tons)";
     }
     Parameter coeff_cMVSO2_LBOUND {
         IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
         Range: nonnegative;
     }
     Parameter coeff_cMVSO2_UBOUND {
         IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cMVSO2_UBOUND(SO2Region_ALTFrom,SO2Region_ALTTo) ;
     }
     Variable cNOT {
         IndexDomain: (OGSMSector,OGSMRegion) ;
         Text: "OML Columns: NOT(**)(**)_";
         Range: [coeff_cNOT_LBOUND(OGSMSector,OGSMRegion),coeff_cNOT_UBOUND(OGSMSector,OGSMRegion)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "non-EMM CO2 used for EOR, by OGSM sector and OGSM region (million metric tons CO2)";
     }
     Parameter coeff_cNOT_LBOUND {
         IndexDomain: (OGSMSector,OGSMRegion) ;
         Range: nonnegative;
     }
     Parameter coeff_cNOT_UBOUND {
         IndexDomain: (OGSMSector,OGSMRegion) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) ;
     }
     Variable cNOTSF {
         IndexDomain: (OGSMRegion) ;
         Text: "OML Columns: NOTSF(**)_";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "escape vector for CO2 for EOR by OGSM region (million metric tons CO2)";
     }
     Variable cNSR {
         IndexDomain: (FuelRegion,OGSMRegion) ;
         Text: "OML Columns: NSR(**)(**)_";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "transport CO2 from EMM fuel regions to OGSM region for EOR with 45Q subsidy (million metric tons CO2)";
     }
     Variable cNSX {
         IndexDomain: (FuelRegion) ;
         Text: "OML Columns: NSX(**)___";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "CO2 captured and stored by EMM fuel region with 45Q subsidy (million metric tons CO2)";
     }
     Variable cNTO {
         IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo) ;
         Text: "OML Columns: NTO(**)(**)_";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "transport CO2 from other sources between OGSM regions for EOR (million metric tons CO2)";
     }
     Variable cNTR {
         IndexDomain: (FuelRegion,OGSMRegion) ;
         Text: "OML Columns: NTR(**)(**)_";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "transport CO2 from EMM fuel regions to OGSM region for EOR (million metric tons CO2)";
     }
     Variable cNTX {
         IndexDomain: (FuelRegion) ;
         Text: "OML Columns: NTX(**)___";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "CO2 captured but not used for EOR by EMM fuel region (million metric tons CO2)";
     }
     Variable cO_ALT {
         IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
         Text: "OML Columns: O(*****)(*)(*)!ALT";
         Range: [coeff_cO_ALT_LBOUND(PlantGroup,SeasonCCS,OperatingMode),coeff_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate dispatchable CCS plant without capture  in load following mode, by plant group, season and operate option (GW)";
     }
     Parameter coeff_cO_ALT_LBOUND {
         IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
         Range: nonnegative;
     }
     Parameter coeff_cO_ALT_UBOUND {
         IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) ;
     }
     Variable cO {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Text: "OML Columns: O(*****)(*)(*)";
         Range: [coeff_cO_LBOUND(PlantGroup,Season,OperatingMode),coeff_cO_UBOUND(PlantGroup,Season,OperatingMode)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate dispatchable fossil/nuclear plant in load following mode, by plant group, season and operate option (GW)";
     }
     Parameter coeff_cO_LBOUND {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Range: nonnegative;
     }
     Parameter coeff_cO_UBOUND {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) ;
     }
     Variable cOX {
         IndexDomain: (PlantGroup,Season) ;
         Text: "OML Columns: O(*****)X(*)";
         Range: [coeff_cOX_LBOUND(PlantGroup,Season),coeff_cOX_UBOUND(PlantGroup,Season)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate dispatchable renewable plant in load following mode, by plant group and season (GW)";
     }
     Parameter coeff_cOX_LBOUND {
         IndexDomain: (PlantGroup,Season) ;
         Range: nonnegative;
     }
     Parameter coeff_cOX_UBOUND {
         IndexDomain: (PlantGroup,Season) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cOX_UBOUND(PlantGroup,Season) ;
     }
     Variable cRPUS {
         IndexDomain: (ResidProductionStep) ;
         Text: "OML Columns: RPUS(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Production of residual fuel for power use (trillion BTU)";
     }
     Variable cRTUS {
         IndexDomain: (OilRegion) ;
         Text: "OML Columns: RTUS(**)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Transport residual fuel to oil (census) region (trillion BTU)";
     }
     Variable cS2 {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Text: "OML Columns: S2(****)(*)(*)";
         Range: [coeff_cS2_LBOUND(SupplyRegion,Season,Slice),coeff_cS2_UBOUND(SupplyRegion,Season,Slice)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "generate to replace demand storage dispatch (P2) by EMM region, season and slice (million kwh/10)";
     }
     Parameter coeff_cS2_LBOUND {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Range: nonnegative;
     }
     Parameter coeff_cS2_UBOUND {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) ;
     }
     Variable cSC {
         IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
         Text: "OML Columns: SC(*)(*)(**)(*)(*)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "apply trade to spinning reserves (if option allowed), by Canadian supply region, supply step, EMM region, season and slice (GW)";
     }
     Variable cSPx {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Text: "OML Columns: SP(****)(*)(*)";
         Range: [coeff_cSPx_LBOUND(SupplyRegion,Season,Slice),coeff_cSPx_UBOUND(SupplyRegion,Season,Slice)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Base spinning reserve requirement by region, season and time slice (GW)";
     }
     Parameter coeff_cSPx_LBOUND {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Range: nonnegative;
           Definition: ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) ;
     }
     Parameter coeff_cSPx_UBOUND {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) ;
     }
     Variable cST {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Text: "OML Columns: ST(****)(*)(*)";
         Range: [coeff_cST_LBOUND(SupplyRegion,Season,Slice),coeff_cST_UBOUND(SupplyRegion,Season,Slice)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "generate to replace pumped storage use by EMM region, season and slice (million kwh/10)";
     }
     Parameter coeff_cST_LBOUND {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Range: nonnegative;
     }
     Parameter coeff_cST_UBOUND {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cST_UBOUND(SupplyRegion,Season,Slice) ;
     }
     Variable cSULF {
         IndexDomain: (PlantType_ECP,SO2Region) ;
         Text: "OML Columns: SULF(**)(*)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "SO2 emissions by plant type and SO2 region (thousand tons)";
     }
     Variable cT_STOCK_ {
         Text: "OML Columns: T_STOCK_";
         Range: [coeff_cT_STOCK__LBOUND,coeff_cT_STOCK__UBOUND] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "coal used from stocks (trill BTU)";
     }
     Parameter coeff_cT_STOCK__LBOUND {
         Range: nonnegative;
           Definition: ccalc_cT_STOCK__LBOUND ;
     }
     Parameter coeff_cT_STOCK__UBOUND {
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cT_STOCK__UBOUND ;
     }
     Variable cTC {
         IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) ;
         Text: "OML Columns: TC(*)(*)(**)(*)(*)";
         Range: nonnegative;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "Canadian imports from Canadian supply region, supply step to EMM region, season and slice (GW)";
     }
     Variable cTR {
         IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
         Text: "OML Columns: TR(**)(**)(*)(*)";
         Range: [coeff_cTR_LBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),coeff_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "domestic imports between EMM regions, by season and slice (GW)";
     }
     Parameter coeff_cTR_LBOUND {
         IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
         Range: nonnegative;
     }
     Parameter coeff_cTR_UBOUND {
         IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
     }
     Variable cSR {
         IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
         Text: "OML Columns: SR(**)(**)(*)(*)";
         Range: [coeff_cSR_LBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),coeff_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "use domestic imports for spinning reserves (if allowed), between EMM regions by season and slice (GW)";
     }
     Parameter coeff_cSR_LBOUND {
         IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
         Range: nonnegative;
     }
     Parameter coeff_cSR_UBOUND {
         IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
     }
     Variable cU_ALT {
         IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
         Text: "OML Columns: U(*****)(*)(*)!ALT";
         Range: [coeff_cU_ALT_LBOUND(PlantGroup,SeasonCCS,OperatingMode),coeff_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate dispatchable CCS plant without capture in maximum generation /min spinning reserves mode, by plant group, season and operate option (GW)";
     }
     Parameter coeff_cU_ALT_LBOUND {
         IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
         Range: nonnegative;
     }
     Parameter coeff_cU_ALT_UBOUND {
         IndexDomain: (PlantGroup,SeasonCCS,OperatingMode) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) ;
     }
     Variable cU {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Text: "OML Columns: U(*****)(*)(*)";
         Range: [coeff_cU_LBOUND(PlantGroup,Season,OperatingMode),coeff_cU_UBOUND(PlantGroup,Season,OperatingMode)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate dispatchable fossil/nuclear plant in maximum generation /min spinning reserves mode, by plant group, season and operate option (GW)";
     }
     Parameter coeff_cU_LBOUND {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Range: nonnegative;
     }
     Parameter coeff_cU_UBOUND {
         IndexDomain: (PlantGroup,Season,OperatingMode) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) ;
     }
     Variable cUX {
         IndexDomain: (PlantGroup,Season) ;
         Text: "OML Columns: U(*****)X(*)";
         Range: [coeff_cUX_LBOUND(PlantGroup,Season),coeff_cUX_UBOUND(PlantGroup,Season)] ;
         Property: ReducedCost, CoefficientRange, Basic;
         Comment: "operate dispatchable renewable plant in maximum generation /min spinning reserves mode, by plant group and season (GW)";
     }
     Parameter coeff_cUX_LBOUND {
         IndexDomain: (PlantGroup,Season) ;
         Range: nonnegative;
     }
     Parameter coeff_cUX_UBOUND {
         IndexDomain: (PlantGroup,Season) ;
         Range: nonnegative;
         Default: inf;
         Definition: ccalc_cUX_UBOUND(PlantGroup,Season) ;
     }
   }
      DeclarationSection LP_safety_valve_variables {
      }
   DeclarationSection Objective_Declaration {                                             
       Parameter K {
       Text: "safety valve OBJ coefficient";
       Range: nonnegative;
       InitialData: 9999;
       }
       Variable EFDCOSTS {                                                                  
           Range: free;                                                                   
           Definition: {                                                                  
                              sum((numACI),
           coeff_cACISPLY_EFDCOSTS(numACI)
           *              cACISPLY(numACI))

           +

                        sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
           coeff_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
           *              cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))

           +

                              sum((CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep),
           coeff_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)
           *              cBP_type(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep))

           +

                          sum((CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD),
           coeff_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
           *              cC_Z(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD))

           +

                             sum((CarbonRegion),
           coeff_cCARBNK_EFDCOSTS(CarbonRegion)
           *              cCARBNK(CarbonRegion))

           +

                             sum((CarbonRegion),
           coeff_cCARECR_EFDCOSTS(CarbonRegion)
           *              cCARECR(CarbonRegion))

           +

                             sum((CarbonRegion),
           coeff_cCARESC_EFDCOSTS(CarbonRegion)
           *              cCARESC(CarbonRegion))

           +

                             sum((CarbonRegion),
           coeff_cCARLIM_EFDCOSTS(CarbonRegion)
           *              cCARLIM(CarbonRegion))

           +

                             sum((CarbonRegion),
           coeff_cCAROFF_EFDCOSTS(CarbonRegion)
           *              cCAROFF(CarbonRegion))

           +

                             sum((CarbonRegion),
           coeff_cCARRSV_EFDCOSTS(CarbonRegion)
           *              cCARRSV(CarbonRegion))

           +

                         sum((CoalSupplyCurve,CoalType,CoalProductionStep),
           coeff_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep)
           *              cCP(CoalSupplyCurve,CoalType,CoalProductionStep))

           +

                         sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),
           coeff_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption)
           *              cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))

           +

                        sum((PlantGroup,Season,OperatingMode),
           coeff_cD_EFDCOSTS(PlantGroup,Season,OperatingMode)
           *              cD(PlantGroup,Season,OperatingMode))

           +

                           sum((DistillateProductionStep),
           coeff_cDPUS_EFDCOSTS(DistillateProductionStep)
           *              cDPUS(DistillateProductionStep))

           +

                           sum((OilRegion),
           coeff_cDTUS_EFDCOSTS(OilRegion)
           *              cDTUS(OilRegion))

           +

                         sum((CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType),
           coeff_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)
           *              cDX(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType))

           +

                         sum((SupplyRegion,Season,Slice),
           coeff_cES_EFDCOSTS(SupplyRegion,Season,Slice)
           *              cES(SupplyRegion,Season,Slice))

           +

                             sum((INOXP),
           coeff_cESCNOX_EFDCOSTS(INOXP)
           *              cESCNOX(INOXP))

           +

                        sum((PlantGroup,Season,Slice),
           coeff_cF_EFDCOSTS(PlantGroup,Season,Slice)
           *              cF(PlantGroup,Season,Slice))

           +

                           sum((GasProductionStep),
           coeff_cGPUS_EFDCOSTS(GasProductionStep)
           *              cGPUS(GasProductionStep))

           +

                           sum((GasRegion,GasSeason),
           coeff_cGTUS_EFDCOSTS(GasRegion,GasSeason)
           *              cGTUS(GasRegion,GasSeason))

           +

                        sum((PlantGroup,Season,Slice),
           coeff_cH_EFDCOSTS(PlantGroup,Season,Slice)
           *              cH(PlantGroup,Season,Slice))

           +

                        sum((PlantGroup,Season,Slice),
           coeff_cI_EFDCOSTS(PlantGroup,Season,Slice)
           *              cI(PlantGroup,Season,Slice))

           +

                            sum((PlantGroup,SeasonCCS,OperatingMode),
           coeff_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)
           *              cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))

           +

                        sum((PlantGroup,Season,OperatingMode),
           coeff_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode)
           *              cJ(PlantGroup,Season,OperatingMode))

           +

                         sum((PlantGroup,Season),
           coeff_cJX_EFDCOSTS(PlantGroup,Season)
           *              cJX(PlantGroup,Season))

           +

                         sum((CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD),
           coeff_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
           *              cKX(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD))

           +

                         sum((PlantGroup,Season),
           coeff_cMB_EFDCOSTS(PlantGroup,Season)
           *              cMB(PlantGroup,Season))

           +

                          sum((CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto),
           coeff_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)
           *              cMVS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto))

           +

                            sum((SO2Region_ALTFrom,SO2Region_ALTTo),
           coeff_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo)
           *              cMVSO2(SO2Region_ALTFrom,SO2Region_ALTTo))

           +

                          sum((OGSMSector,OGSMRegion),
           coeff_cNOT_EFDCOSTS(OGSMSector,OGSMRegion)
           *              cNOT(OGSMSector,OGSMRegion))

           +

                            sum((OGSMRegion),
           coeff_cNOTSF_EFDCOSTS(OGSMRegion)
           *              cNOTSF(OGSMRegion))

           +

                          sum((FuelRegion,OGSMRegion),
           coeff_cNSR_EFDCOSTS(FuelRegion,OGSMRegion)
           *              cNSR(FuelRegion,OGSMRegion))

           +

                          sum((FuelRegion),
           coeff_cNSX_EFDCOSTS(FuelRegion)
           *              cNSX(FuelRegion))

           +

                          sum((OGSMRegion_ALTFrom,OGSMRegion_ALTTo),
           coeff_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo)
           *              cNTO(OGSMRegion_ALTFrom,OGSMRegion_ALTTo))

           +

                          sum((FuelRegion,OGSMRegion),
           coeff_cNTR_EFDCOSTS(FuelRegion,OGSMRegion)
           *              cNTR(FuelRegion,OGSMRegion))

           +

                          sum((FuelRegion),
           coeff_cNTX_EFDCOSTS(FuelRegion)
           *              cNTX(FuelRegion))

           +

                            sum((PlantGroup,SeasonCCS,OperatingMode),
           coeff_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)
           *              cO_ALT(PlantGroup,SeasonCCS,OperatingMode))

           +

                        sum((PlantGroup,Season,OperatingMode),
           coeff_cO_EFDCOSTS(PlantGroup,Season,OperatingMode)
           *              cO(PlantGroup,Season,OperatingMode))

           +

                         sum((PlantGroup,Season),
           coeff_cOX_EFDCOSTS(PlantGroup,Season)
           *              cOX(PlantGroup,Season))

           +

                           sum((ResidProductionStep),
           coeff_cRPUS_EFDCOSTS(ResidProductionStep)
           *              cRPUS(ResidProductionStep))

           +

                           sum((OilRegion),
           coeff_cRTUS_EFDCOSTS(OilRegion)
           *              cRTUS(OilRegion))

           +

                         sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice),
           coeff_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)
           *              cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))

           +

                          sum((SupplyRegion,Season,Slice),
           coeff_cSPx_EFDCOSTS(SupplyRegion,Season,Slice)
           *              cSPx(SupplyRegion,Season,Slice))

           +

                         sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
           coeff_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
           *              cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))

           +

                           sum((PlantType_ECP,SO2Region),
           coeff_cSULF_EFDCOSTS(PlantType_ECP,SO2Region)
           *              cSULF(PlantType_ECP,SO2Region))

           +

                         sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice),
           coeff_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)
           *              cTC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))

           +

                         sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
           coeff_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
           *              cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))

           +

                            sum((PlantGroup,SeasonCCS,OperatingMode),
           coeff_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)
           *              cU_ALT(PlantGroup,SeasonCCS,OperatingMode))

           +

                        sum((PlantGroup,Season,OperatingMode),
           coeff_cU_EFDCOSTS(PlantGroup,Season,OperatingMode)
           *              cU(PlantGroup,Season,OperatingMode))

           +

                         sum((PlantGroup,Season),
           coeff_cUX_EFDCOSTS(PlantGroup,Season)
           *              cUX(PlantGroup,Season))
           }
       }
   }
   DeclarationSection ConstraintDeclare {
       Constraint rACICSTle {
         Text: "OML Rows: ACICSTXX";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((numACI),
              coeff_cACISPLY_rACICSTle(numACI) *
                    cACISPLY(numACI))
              +
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),
              coeff_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
 
              <=
 
              0.
          }
          Comment: "balance row for activated carbon injection (pounds)";
       }
       Constraint rBTUle {
         IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason) ;
         Text: "OML Rows: BTU(*)(***)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((FuelShareOption),
              coeff_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *
                    cD(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,Season),
              coeff_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *
                    cJX(PlantGroup,Season))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,Season),
              coeff_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *
                    cOX(PlantGroup,Season))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,Season),
              coeff_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *
                    cUX(PlantGroup,Season))
 
              <=
 
              0.
          }
          Comment: "BTU balance row by EMM fuel region, plant type (using gas) and gas season (trill BTU)";
       }
       Constraint rBTUXXle {
         IndexDomain: (FuelRegion_ALT1,PlantType) ;
         Text: "OML Rows: BTU(*)(***)X";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((GenerationSeason,FuelShareOption),
              coeff_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              <=
 
              0.
          }
          Comment: "BTU balance row by EMM fuel region, plant type (not using gas) (trill BTU)";
       }
       Constraint rCARBONABeq {
         Text: "OML Rows: CARBONAB";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CarbonRegion),
              coeff_cCARBNK_rCARBONABeq(CarbonRegion) *
                    cCARBNK(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARESC_rCARBONABeq(CarbonRegion) *
                    cCARESC(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARFUE_rCARBONABeq(CarbonRegion) *
                    cCARFUE(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARIND_rCARBONABeq(CarbonRegion) *
                    cCARIND(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARLIM_rCARBONABeq(CarbonRegion) *
                    cCARLIM(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCAROFF_rCARBONABeq(CarbonRegion) *
                    cCAROFF(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCAROTH_rCARBONABeq(CarbonRegion) *
                    cCAROTH(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARREF_rCARBONABeq(CarbonRegion) *
                    cCARREF(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARRSV_rCARBONABeq(CarbonRegion) *
                    cCARRSV(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARUTL_rCARBONABeq(CarbonRegion) *
                    cCARUTL(CarbonRegion))
 
              =
              0.
          }
          Comment: "all sector CO2 constraint for California (AB32/AB398) (million metric tons carbon)";
       }
       Constraint rCARBONle {
         IndexDomain: (CarbonRegion) ;
         Text: "OML Rows: CARBON(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              sum((SupplyRegion_ALT1),
              coeff_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *
                    cCARDM(SupplyRegion_ALT1,CarbonRegion))
              +
              coeff_cCARECR_rCARBONle(CarbonRegion) *
                    cCARECR(CarbonRegion)
              +
              coeff_cCARESC_rCARBONle(CarbonRegion) *
                    cCARESC(CarbonRegion)
              +
              sum((SupplyRegion_ALT1),
              coeff_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *
                    cCARIM(SupplyRegion_ALT1,CarbonRegion))
              +
              coeff_cCARLIM_rCARBONle(CarbonRegion) *
                    cCARLIM(CarbonRegion)
              +
              coeff_cCAROFF_rCARBONle(CarbonRegion) *
                    cCAROFF(CarbonRegion)
              +
              coeff_cCARRSV_rCARBONle(CarbonRegion) *
                    cCARRSV(CarbonRegion)
              +
              coeff_cCARUTL_rCARBONle(CarbonRegion) *
                    cCARUTL(CarbonRegion)
              +
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1),
              coeff_cCTLCO_rCARBONle(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) *
                    cCTLCO(CoalSupplyCurve,CoalDemandRegion_ALT1))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
              coeff_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                    cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
              +
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
              coeff_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                    cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              <=
 
              0.
          }
          Comment: "impose carbon limit by carbon region, if appropriate (million metric tons carbon)";
       }
       Constraint rCARBONXXle {
         Text: "OML Rows: CARBONXX";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rCARBONXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              coeff_cCARBONOT_rCARBONXXle *
                    cCARBONOT
              +
              coeff_cCARESCXX_rCARBONXXle *
                    cCARESCXX
              +
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),
              coeff_cCT_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
              +
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1),
              coeff_cCTLCO_rCARBONXXle(CoalSupplyCurve,CoalDemandRegion_ALT1) *
                    cCTLCO(CoalSupplyCurve,CoalDemandRegion_ALT1))
              +
              sum((OilRegion),
              coeff_cDTUS_rCARBONXXle(OilRegion) *
                    cDTUS(OilRegion))
              +
              sum((GasRegion,GasSeason),
              coeff_cGTUS_rCARBONXXle(GasRegion,GasSeason) *
                    cGTUS(GasRegion,GasSeason))
              +
              sum((OilRegion),
              coeff_cRTUS_rCARBONXXle(OilRegion) *
                    cRTUS(OilRegion))
 
              <=
 
              coeff_cRHS_rCARBONXXle
          }
          Comment: "impose national carbon limit, if appropriate (million metric tons carbon)";
       }
       Constraint rCBle {
         IndexDomain: (PlantGroup,Season) ;
         Text: "OML Rows: CB(*****)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((OperatingMode),
              coeff_cJ_rCBle(PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              coeff_cJX_rCBle(PlantGroup,Season) *
                    cJX(PlantGroup,Season)
              +
              coeff_cMB_rCBle(PlantGroup,Season) *
                    cMB(PlantGroup,Season)
              +
              sum((SeasonCCS,OperatingMode),
              coeff_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((OperatingMode),
              coeff_cO_rCBle(PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              coeff_cOX_rCBle(PlantGroup,Season) *
                    cOX(PlantGroup,Season)
              +
              sum((SeasonCCS,OperatingMode),
              coeff_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((OperatingMode),
              coeff_cU_rCBle(PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
              +
              coeff_cUX_rCBle(PlantGroup,Season) *
                    cUX(PlantGroup,Season)
 
              <=
 
              coeff_cRHS_rCBle(PlantGroup,Season)
          }
          Comment: "capacity balance by plant group and season (GW)";
       }
       Constraint rCLle {
         IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP) ;
         Text: "OML Rows: CL(**)(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption),
              coeff_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
 
              <=
 
              0.
          }
          Comment: "coal consumption balance row by coal demand region and ECP plant type (trill BTU)";
       }
       Constraint rCNCPle {
         IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) ;
         Text: "OML Rows: CNCP(*)(*)(*)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((SupplyRegion_ALT2),
              coeff_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *
                    cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
              +
              sum((SupplyRegion_ALT2),
              coeff_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *
                    cTC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
 
              <=
 
              coeff_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice)
          }
          Comment: "Canadian import balance row by Canadian supply region, step, season and slice (GW)";
       }
       Constraint rCANIMPUSeq {
         Text: "OML Rows: CANIMPUS";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              coeff_cCNIMPBUS_rCANIMPUSeq *
                    cCNIMPBUS
              +
              sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice),
              coeff_cTC_rCANIMPUSeq(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *
                    cTC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
 
              =
              0.
          }
       }
       Constraint rCO2QNRle {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "OML Rows: CO2QNR(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup,Season,OperatingMode),
              coeff_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cD(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              <=
 
              coeff_cRHS_rCO2QNRle(SupplyRegion_ALT2)
          }
          Comment: "CPP EMM region mass based carbon constraint for affected sources (billion lbs CO2)";
       }
       Constraint rCONCLeq {
         IndexDomain: (SupplyRegion_ALTto) ;
         Text: "OML Rows: CONCL(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((SupplyRegion_ALT2),
              coeff_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *
                    cCONCLB(SupplyRegion_ALT2))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              =
              0.
          }
          Comment: "accumulate coal consumption by EMM region for STEO benchmarking (trill BTU)";
       }
       Constraint rCONNGeq {
         IndexDomain: (SupplyRegion_ALTto) ;
         Text: "OML Rows: CONNG(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((SupplyRegion_ALT2),
              coeff_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *
                    cCONNGB(SupplyRegion_ALT2))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              =
              0.
          }
          Comment: "accumulate natural gas consumption by EMM region for STEO benchmarking (trill BTU)";
       }
       Constraint rDSle {
         IndexDomain: (CensusRegion) ;
         Text: "OML Rows: DS(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              sum((OilRegion),
              coeff_cDTUS_rDSle(CensusRegion,OilRegion) *
                    cDTUS(OilRegion))
 
              <=
 
              0.
          }
          Comment: "distillate consumption balance row by oil (census) region (trill BTU)";
       }
       Constraint rDVle {
         IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) ;
         Text: "OML Rows: DV(*)(**)(*)XX";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CoalSupplyCurve,ACIOption),
              coeff_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
              +
              coeff_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *
                    cDX(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)
 
              <=
 
              coeff_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)
          }
          Comment: "impose coal diversity limit by coal demand region, ECP plant type and coal type (subbit/lignite) (trill BTU)";
       }
       Constraint rELNOX0le {
         IndexDomain: (INOXP) ;
         Text: "OML Rows: ELNOX0(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantType_ECP),
              coeff_cELNOX_rELNOX0le(INOXP,PlantType_ECP) *
                    cELNOX(INOXP,PlantType_ECP))
              +
              coeff_cELNOXOT_rELNOX0le(INOXP) *
                    cELNOXOT(INOXP)
              +
              coeff_cESCNOX_rELNOX0le(INOXP) *
                    cESCNOX(INOXP)
 
              <=
 
              0.
          }
          Comment: "enforce NOX emission limit by NOX compliance program (thousand tons)";
       }
       Constraint rELNOXle {
         IndexDomain: (INOXP,PlantType_ECP) ;
         Text: "OML Rows: ELNOX(*)(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup,Season,OperatingMode),
              coeff_cD_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *
                    cD(PlantGroup,Season,OperatingMode))
              +
              coeff_cELNOX_rELNOXle(INOXP,PlantType_ECP) *
                    cELNOX(INOXP,PlantType_ECP)
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,Season),
              coeff_cJX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *
                    cJX(PlantGroup,Season))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,Season),
              coeff_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *
                    cOX(PlantGroup,Season))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,Season),
              coeff_cUX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *
                    cUX(PlantGroup,Season))
 
              <=
 
              0.
          }
          Comment: "balance NOX emissions by NOX compliance group and ECP plant type, if constrained (thousand tons)";
       }
       Constraint rELNOXOTle {
         IndexDomain: (INOXP) ;
         Text: "OML Rows: ELNOX(*)OT";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CoalDemandRegion_ALT1,GenerationSeason),
              coeff_cBCTLN_rELNOXOTle(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *
                    cBCTLN(CoalDemandRegion_ALT1,GenerationSeason,INOXP))
              +
              coeff_cELNOXOT_rELNOXOTle(INOXP) *
                    cELNOXOT(INOXP)
 
              <=
 
              0.
          }
       }
       Constraint rENeq {
         IndexDomain: (PlantGroup,Season) ;
         Text: "OML Rows: EN(*****)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((Slice),
              coeff_cF_rENeq(PlantGroup,Season,Slice) *
                    cF(PlantGroup,Season,Slice))
              +
              sum((Slice),
              coeff_cH_rENeq(PlantGroup,Season,Slice) *
                    cH(PlantGroup,Season,Slice))
 
              =
              coeff_cRHS_rENeq(PlantGroup,Season)
          }
          Comment: "maximum generation from pumped storage units, by plant group and season (bkwh)";
       }
       Constraint rENle {
         IndexDomain: (PlantGroup,Season) ;
         Text: "OML Rows: EN(*****)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((Slice),
              coeff_cF_rENle(PlantGroup,Season,Slice) *
                    cF(PlantGroup,Season,Slice))
              +
              sum((Slice),
              coeff_cH_rENle(PlantGroup,Season,Slice) *
                    cH(PlantGroup,Season,Slice))
 
              <=
 
              coeff_cRHS_rENle(PlantGroup,Season)
          }
          Comment: "maximum generation from conventional hydro units, by plant group and season (bkwh)";
       }
       Constraint rEXle {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Text: "OML Rows: EX(****)(*)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
              coeff_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                    cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
              +
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
              coeff_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                    cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
 
              <=
 
              coeff_cRHS_rEXle(SupplyRegion,Season,Slice)
          }
          Comment: "limit total exports from supply region, by season and slice (GW)";
       }
       Constraint rFle {
         IndexDomain: (PlantGroup,Season,Slice) ;
         Text: "OML Rows: F(*****)(*)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              coeff_cF_rFle(PlantGroup,Season,Slice) *
                    cF(PlantGroup,Season,Slice)
              +
              coeff_cH_rFle(PlantGroup,Season,Slice) *
                    cH(PlantGroup,Season,Slice)
 
              <=
 
              coeff_cRHS_rFle(PlantGroup,Season,Slice)
          }
          Comment: "capacity balance by hydro plant group, season and slice (GW)";
       }
       Constraint rGENCLeq {
         IndexDomain: (SupplyRegion_ALTto) ;
         Text: "OML Rows: GENCL(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((SupplyRegion_ALT2),
              coeff_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *
                    cGENCLB(SupplyRegion_ALT2))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              =
              0.
          }
          Comment: "generation balance for STEO benchmarking - coal generation (bkwh)";
       }
       Constraint rGENNGeq {
         IndexDomain: (SupplyRegion_ALTto) ;
         Text: "OML Rows: GENNG(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((SupplyRegion_ALT2),
              coeff_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *
                    cGENNGB(SupplyRegion_ALT2))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              =
              0.
          }
          Comment: "generation balance for STEO benchmarking - gas generation (bkwh)";
       }
       Constraint rGRDGNge {
         IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
         Text: "OML Rows: GRDGN(**)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              coeff_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) *
                    cDPVCP(SupplyRegion_ALT2)
              +
              sum((PlantGroup,Season,Slice),
              coeff_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                    cF(PlantGroup,Season,Slice))
              +
              sum((PlantGroup,Season,Slice),
              coeff_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                    cH(PlantGroup,Season,Slice))
              +
              sum((PlantGroup,Season,Slice),
              coeff_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                    cI(PlantGroup,Season,Slice))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              >=
 
              0.
          }
          Comment: "accumulate generation contributing to grid resilience calculation, by region (bkwh)";
       }
       Constraint rGRDRTge {
         IndexDomain: (SupplyRegion_ALT2,GridResilienceSource) ;
         Text: "OML Rows: GRDRT(**)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              coeff_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) *
                    cDPVCP(SupplyRegion_ALT2)
              +
              sum((PlantGroup,Season,Slice),
              coeff_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                    cF(PlantGroup,Season,Slice))
              +
              sum((PlantGroup,Season,Slice),
              coeff_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                    cH(PlantGroup,Season,Slice))
              +
              sum((PlantGroup,Season,Slice),
              coeff_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                    cI(PlantGroup,Season,Slice))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              >=
 
              0.
          }
          Comment: "accumulate  grid resilience rating weighted by generation, by region (bkwh)";
       }
       Constraint rIMle {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Text: "OML Rows: IM(****)(*)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
              coeff_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                    cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
              +
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
              coeff_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                    cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
 
              <=
 
              coeff_cRHS_rIMle(SupplyRegion,Season,Slice)
          }
          Comment: "limit total imports from supply region, by season and slice (GW)";
       }
       Constraint rK_ge {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
         Text: "OML Rows: K_(**)(*)(*)XX";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantType_ECP,ACIOption),
              coeff_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
              +
              coeff_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *
                    cKX(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
 
              >=
 
              coeff_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
          }
          Comment: "coal contract row by supply curve, coal demand region and coal type (scrubbed/unscrubbed) (trill BTU)";
       }
       Constraint rLDge {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Text: "OML Rows: LD(****)(*)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup,OperatingMode),
              coeff_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                    cD(PlantGroup,Season,OperatingMode))
              +
              coeff_cES_rLDge(SupplyRegion,Season,Slice) *
                    cES(SupplyRegion,Season,Slice)
              +
              sum((PlantGroup),
              coeff_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                    cF(PlantGroup,Season,Slice))
              +
              sum((SupplyRegion_ALT1),
              coeff_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) *
                    cG(SupplyRegion_ALT1))
              +
              sum((PlantGroup),
              coeff_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                    cH(PlantGroup,Season,Slice))
              +
              sum((PlantGroup),
              coeff_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                    cI(PlantGroup,Season,Slice))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,OperatingMode),
              coeff_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup),
              coeff_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                    cJX(PlantGroup,Season))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,OperatingMode),
              coeff_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup),
              coeff_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                    cOX(PlantGroup,Season))
              +
              coeff_cS2_rLDge(SupplyRegion,Season,Slice) *
                    cS2(SupplyRegion,Season,Slice)
              +
              sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2),
              coeff_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *
                    cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
              +
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
              coeff_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                    cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
              +
              coeff_cST_rLDge(SupplyRegion,Season,Slice) *
                    cST(SupplyRegion,Season,Slice)
              +
              sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2),
              coeff_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *
                    cTC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
              +
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
              coeff_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                    cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,OperatingMode),
              coeff_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup),
              coeff_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                    cUX(PlantGroup,Season))
 
              >=
 
              coeff_cRHS_rLDge(SupplyRegion,Season,Slice)
          }
          Comment: "electricity load requirement by EMM region, season and slice (million kwh /10)";
       }
       Constraint rMBge {
         IndexDomain: (SupplyRegion_ALT1,PlantGroup) ;
         Text: "OML Rows: MB(*)(*****)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((Season),
              coeff_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) *
                    cMB(PlantGroup,Season))
 
              >=
 
              coeff_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup)
          }
          Comment: "planned maintenance requirement by supply region, and plant group (bkwh)";
       }
       Constraint rMERC_DSle {
         IndexDomain: (nHGCODE) ;
         Text: "OML Rows: MERC_DS(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((OilRegion),
              coeff_cDTUS_rMERC_DSle(nHGCODE,OilRegion) *
                    cDTUS(OilRegion))
              +
              coeff_cMERC_DS_rMERC_DSle(nHGCODE) *
                    cMERC_DS(nHGCODE)
 
              <=
 
              0.
          }
          Comment: "balance row for mercury emissions from distillate, by mercury region (tons * 1000)";
       }
       Constraint rMERC_le {
         IndexDomain: (PlantType_ECP,nHGCODE) ;
         Text: "OML Rows: MERC_(**)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption),
              coeff_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
              +
              coeff_cMERC__rMERC_le(PlantType_ECP,nHGCODE) *
                    cMERC_(PlantType_ECP,nHGCODE)
 
              <=
 
              0.
          }
          Comment: "balance row for mercury emissions by ECP coal type and mercury region (tons * 1000)";
       }
       Constraint rMERC_RSle {
         IndexDomain: (nHGCODE) ;
         Text: "OML Rows: MERC_RS(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              coeff_cMERC_RS_rMERC_RSle(nHGCODE) *
                    cMERC_RS(nHGCODE)
              +
              sum((OilRegion),
              coeff_cRTUS_rMERC_RSle(nHGCODE,OilRegion) *
                    cRTUS(OilRegion))
 
              <=
 
              0.
          }
          Comment: "balance row for mercury emissions from residual fuel oil by mercury region (tons * 1000)";
       }
       Constraint rMERCURYle {
         IndexDomain: (nHGCODE) ;
         Text: "OML Rows: MERCURY(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1),
              coeff_cCTLHG_rMERCURYle(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) *
                    cCTLHG(CoalSupplyCurve,CoalDemandRegion_ALT1))
              +
              sum((PlantType_ECP),
              coeff_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) *
                    cMERC_(PlantType_ECP,nHGCODE))
              +
              coeff_cMERC_DS_rMERCURYle(nHGCODE) *
                    cMERC_DS(nHGCODE)
              +
              coeff_cMERC_RS_rMERCURYle(nHGCODE) *
                    cMERC_RS(nHGCODE)
              +
              coeff_cT_STOCK__rMERCURYle(nHGCODE) *
                    cT_STOCK_
 
              <=
 
              coeff_cRHS_rMERCURYle(nHGCODE)
          }
          Comment: "enforce mercury emission limit (if applicable) by mercury region (tons * 1000)";
       }
       Constraint rMRXge {
         IndexDomain: (PlantGroup) ;
         Text: "OML Rows: MR(*****)X";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((Season,OperatingMode),
              coeff_cJ_rMRXge(PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((Season),
              coeff_cJX_rMRXge(PlantGroup,Season) *
                    cJX(PlantGroup,Season))
              +
              sum((SeasonCCS,OperatingMode),
              coeff_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((Season,OperatingMode),
              coeff_cO_rMRXge(PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((Season),
              coeff_cOX_rMRXge(PlantGroup,Season) *
                    cOX(PlantGroup,Season))
              +
              sum((SeasonCCS,OperatingMode),
              coeff_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((Season,OperatingMode),
              coeff_cU_rMRXge(PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
              +
              sum((Season),
              coeff_cUX_rMRXge(PlantGroup,Season) *
                    cUX(PlantGroup,Season))
 
              >=
 
              coeff_cRHS_rMRXge(PlantGroup)
          }
          Comment: "require must-run plants to generate at specified level (or higher) (million kwh/10)";
       }
       Constraint rMVSO2le {
         IndexDomain: (CoalDemandRegion) ;
         Text: "OML Rows: MVSO2(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto),
              coeff_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *
                    cMVS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto))
 
              <=
 
              coeff_cRHS_rMVSO2le(CoalDemandRegion)
          }
          Comment: "limit total SO2 allowance purchases (CSAPR) by coal region (thousand tons)";
       }
       Constraint rNGle {
         IndexDomain: (GasRegion,GasSeason) ;
         Text: "OML Rows: NG(**)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              coeff_cGTUS_rNGle(GasRegion,GasSeason) *
                    cGTUS(GasRegion,GasSeason)
 
              <=
 
              0.
          }
          Comment: "natural gas consumption balance row by gas region and gas season (trill BTU)";
       }
       Constraint rP2_le {
         IndexDomain: (SupplyRegion,Season) ;
         Text: "OML Rows: P2_(****)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup,Slice),
              coeff_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) *
                    cH(PlantGroup,Season,Slice))
              +
              sum((Slice),
              coeff_cS2_rP2_le(SupplyRegion,Season,Slice) *
                    cS2(SupplyRegion,Season,Slice))
 
              <=
 
              0.
          }
          Comment: "enforce storage requirements for demand storage (P2 technology) by EMM region and season (million kwh/10)";
       }
       Constraint rP2le {
         IndexDomain: (Slice,SupplyRegion,Season) ;
         Text: "OML Rows: P2(*)(****)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup),
              coeff_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) *
                    cH(PlantGroup,Season,Slice))
              +
              coeff_cS2_rP2le(Slice,SupplyRegion,Season) *
                    cS2(SupplyRegion,Season,Slice)
 
              <=
 
              coeff_cRHS_rP2le(Slice,SupplyRegion,Season)
          }
          Comment: "demand storage balance row by EMM region, season and slice (million kwh/10)";
       }
       Constraint rPS_le {
         IndexDomain: (SupplyRegion,Season) ;
         Text: "OML Rows: PS_(****)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup,Slice),
              coeff_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *
                    cF(PlantGroup,Season,Slice))
              +
              sum((PlantGroup,Slice),
              coeff_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *
                    cH(PlantGroup,Season,Slice))
              +
              sum((Slice),
              coeff_cST_rPS_le(SupplyRegion,Season,Slice) *
                    cST(SupplyRegion,Season,Slice))
 
              <=
 
              0.
          }
          Comment: "enforce storage requirements for pumped storage, by EMM region and season (million kwh/10)";
       }
       Constraint rRSle {
         IndexDomain: (CensusRegion) ;
         Text: "OML Rows: RS(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              sum((OilRegion),
              coeff_cRTUS_rRSle(CensusRegion,OilRegion) *
                    cRTUS(OilRegion))
 
              <=
 
              0.
          }
          Comment: "residual fuel oil consumption balance row by oil (census) region (trill BTU)";
       }
       Constraint rS_CLle {
         IndexDomain: (CoalSupplyCurve,CoalType) ;
         Text: "OML Rows: S_CL(**)(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              coeff_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) *
                    cCoalOtherUsage(CoalSupplyCurve)
              +
              sum((CoalProductionStep),
              coeff_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) *
                    cCP(CoalSupplyCurve,CoalType,CoalProductionStep))
              +
              sum((CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),
              coeff_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
 
              <=
 
              0.
          }
          Comment: "coal supply balance row, by coal supply curve and coal type (trill BTU)";
       }
       Constraint rS_DSUSle {
         Text: "OML Rows: S_DSUS";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((DistillateProductionStep),
              coeff_cDPUS_rS_DSUSle(DistillateProductionStep) *
                    cDPUS(DistillateProductionStep))
              +
              sum((OilRegion),
              coeff_cDTUS_rS_DSUSle(OilRegion) *
                    cDTUS(OilRegion))
 
              <=
 
              0.
          }
          Comment: "Supply balance for distillate oil (trill BTU)";
       }
       Constraint rS_NGUSle {
         Text: "OML Rows: S_NGUS";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((GasProductionStep),
              coeff_cGPUS_rS_NGUSle(GasProductionStep) *
                    cGPUS(GasProductionStep))
              +
              sum((GasRegion,GasSeason),
              coeff_cGTUS_rS_NGUSle(GasRegion,GasSeason) *
                    cGTUS(GasRegion,GasSeason))
 
              <=
 
              0.
          }
          Comment: "Supply balance for natural gas (trill BTU)";
       }
       Constraint rS_RSUSle {
         Text: "OML Rows: S_RSUS";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((ResidProductionStep),
              coeff_cRPUS_rS_RSUSle(ResidProductionStep) *
                    cRPUS(ResidProductionStep))
              +
              sum((OilRegion),
              coeff_cRTUS_rS_RSUSle(OilRegion) *
                    cRTUS(OilRegion))
 
              <=
 
              0.
          }
          Comment: "Supply balance for residual fuel oil (trill BTU)";
       }
       Constraint rS_WD_allle {
         IndexDomain: (CoalDemandRegion_ALT2) ;
         Text: "OML Rows: S_WD(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              sum((BiomassType,BiomassProductionStep),
              coeff_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *
                    cBP_type(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep))
 
              <=
 
              0.
          }
          Comment: "supply balance for total biomass by coal demand region (trill BTU)";
       }
       Constraint rS_WD_typele {
         IndexDomain: (BiomassType,CoalDemandRegion_ALT2) ;
         Text: "OML Rows: S_WD(**)(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((BiomassSector),
              coeff_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) *
                    cBiomassOtherUsage(CoalDemandRegion_ALT2,BiomassSector,BiomassType))
              +
              sum((BiomassProductionStep),
              coeff_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) *
                    cBP_type(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep))
 
              <=
 
              0.
          }
          Comment: "supply balance for biomass supply type by coal demand region (trill BTU)";
       }
       Constraint rSRge {
         IndexDomain: (SupplyRegion,Season,Slice) ;
         Text: "OML Rows: SR(****)(*)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup),
              coeff_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                    cF(PlantGroup,Season,Slice))
              +
              sum((PlantGroup),
              coeff_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                    cH(PlantGroup,Season,Slice))
              +
              sum((PlantGroup),
              coeff_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                    cI(PlantGroup,Season,Slice))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,OperatingMode),
              coeff_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup),
              coeff_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                    cJX(PlantGroup,Season))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,OperatingMode),
              coeff_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup),
              coeff_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                    cOX(PlantGroup,Season))
              +
              sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2),
              coeff_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *
                    cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
              +
              coeff_cSPx_rSRge(SupplyRegion,Season,Slice) *
                    cSPx(SupplyRegion,Season,Slice)
              +
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
              coeff_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                    cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,OperatingMode),
              coeff_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup),
              coeff_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                    cUX(PlantGroup,Season))
 
              >=
 
              0.
          }
          Comment: "Spinning reserve balance row by region, season and time slice (GW)";
       }
       Constraint rSULFle {
         IndexDomain: (PlantType_ECP,SO2Region) ;
         Text: "OML Rows: SULF(**)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption),
              coeff_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
              +
              sum((OilRegion),
              coeff_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) *
                    cRTUS(OilRegion))
              +
              coeff_cSULF_rSULFle(PlantType_ECP,SO2Region) *
                    cSULF(PlantType_ECP,SO2Region)
 
              <=
 
              0.
          }
          Comment: "accumulate SO2 emissions by ECP plant type and SO2 region (thousand tons)";
       }
       Constraint rSULFURCRle {
         IndexDomain: (CoalDemandRegion) ;
         Text: "OML Rows: SULFUR(**)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),
              coeff_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
              +
              sum((CoalDemandRegion_ALT1),
              coeff_cCTLSO2_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALT1) *
                    cCTLSO2(CoalDemandRegion_ALT1))
              +
              sum((CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto),
              coeff_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *
                    cMVS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto))
              +
              sum((OilRegion),
              coeff_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) *
                    cRTUS(OilRegion))
 
              <=
 
              coeff_cRHS_rSULFURCRle(CoalDemandRegion)
          }
          Comment: "enforce SO2 limit (CSAPR) by coal region (thousand tons)";
       }
       Constraint rSULFURle {
         IndexDomain: (SO2Region) ;
         Text: "OML Rows: SULFUR(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1),
              coeff_cCTLS_rSULFURle(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) *
                    cCTLS(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region))
              +
              sum((SO2Region_ALTFrom,SO2Region_ALTTo),
              coeff_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) *
                    cMVSO2(SO2Region_ALTFrom,SO2Region_ALTTo))
              +
              sum((PlantType_ECP),
              coeff_cSULF_rSULFURle(SO2Region,PlantType_ECP) *
                    cSULF(PlantType_ECP,SO2Region))
 
              <=
 
              coeff_cRHS_rSULFURle(SO2Region)
          }
          Comment: "enforce SO2 limit (CAIR) by SO2 region (thousand tons)";
       }
       Constraint rT_le {
         IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) ;
         Text: "OML Rows: T_(**)(*)_(*)Z";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              coeff_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *
                    cC_Z(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
              +
              sum((PlantType_ECP,ACIOption),
              coeff_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
 
              <=
 
              coeff_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
          }
          Comment: "enforce Tier 2 pricing if consumption is above Tier 1 limit by coal supply curve , coal demand region and scrubbed/unscrubbed type (trill BTU)";
       }
       Constraint rTCNle {
         IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) ;
         Text: "OML Rows: TCN(*)(**)(*)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((CanadianSupplyStep),
              coeff_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *
                    cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
              +
              sum((CanadianSupplyStep),
              coeff_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *
                    cTC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
 
              <=
 
              coeff_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice)
          }
          Comment: "limit imports from Canadian supply region to EMM region by season and slice (GW) - ensures total from supply steps doesn't exceed transmission capacit";
       }
       Constraint rTLle {
         IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) ;
         Text: "OML Rows: TL(**)(**)(*)(*)";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              coeff_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                    cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
 
              <=
 
              coeff_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
          }
          Comment: "enforce transmission constraint between EMM regions if trade can be used for spinning reserves, by season and slice (GW)";
       }
       Constraint rZFLRGeq {
         IndexDomain: (FuelRegion) ;
         Text: "OML Rows: ZFLRG(**)_";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((OGSMRegion),
              coeff_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) *
                    cNTR(FuelRegion,OGSMRegion))
              +
              coeff_cNTX_rZFLRGeq(FuelRegion) *
                    cNTX(FuelRegion)
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              =
              0.
          }
          Comment: "balance row for captured CO2 from power plants and storage/use for EOR, by fuel region (million metric tons CO2)";
       }
       Constraint rZFLRGge {
         IndexDomain: (FuelRegion) ;
         Text: "OML Rows: ZFLRG(**)_";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((OGSMRegion),
              coeff_cNTR_rZFLRGge(FuelRegion,OGSMRegion) *
                    cNTR(FuelRegion,OGSMRegion))
              +
              coeff_cNTX_rZFLRGge(FuelRegion) *
                    cNTX(FuelRegion)
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              >=
 
              0.
          }
       }
       Constraint rZFLRSeq {
         IndexDomain: (FuelRegion) ;
         Text: "OML Rows: ZFLRS(**)_";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((OGSMRegion),
              coeff_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) *
                    cNSR(FuelRegion,OGSMRegion))
              +
              coeff_cNSX_rZFLRSeq(FuelRegion) *
                    cNSX(FuelRegion)
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              =
              0.
          }
          Comment: "balance row for captured CO2 from power plants and storage/use for EOR, by fuel region with 45Q subsidy (million metric tons CO2)";
       }
       Constraint rZFLRSge {
         IndexDomain: (FuelRegion) ;
         Text: "OML Rows: ZFLRS(**)_";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((OGSMRegion),
              coeff_cNSR_rZFLRSge(FuelRegion,OGSMRegion) *
                    cNSR(FuelRegion,OGSMRegion))
              +
              coeff_cNSX_rZFLRSge(FuelRegion) *
                    cNSX(FuelRegion)
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rZFLRSge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rZFLRSge(FuelRegion,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
 
              >=
 
              0.
          }
       }
       Constraint rZOGSMeq {
         IndexDomain: (OGSMRegion) ;
         Text: "OML Rows: ZOGSM(**)_";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((OGSMSector),
              coeff_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) *
                    cNOT(OGSMSector,OGSMRegion))
              +
              coeff_cNOTSF_rZOGSMeq(OGSMRegion) *
                    cNOTSF(OGSMRegion)
              +
              sum((FuelRegion),
              coeff_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) *
                    cNSR(FuelRegion,OGSMRegion))
              +
              sum((OGSMRegion_ALTFrom,OGSMRegion_ALTTo),
              coeff_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *
                    cNTO(OGSMRegion_ALTFrom,OGSMRegion_ALTTo))
              +
              sum((FuelRegion),
              coeff_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) *
                    cNTR(FuelRegion,OGSMRegion))
 
              =
              coeff_cRHS_rZOGSMeq(OGSMRegion)
          }
          Comment: "ensure total CO2 use for EOR matches purchases by OGSM region (million metric tons CO2)";
       }
       Constraint rZOTHRge {
         IndexDomain: (OGSMRegion) ;
         Text: "OML Rows: ZOTHR(**)_";
        Property: Bound, ShadowPrice, Level;
          Definition: {
              sum((OGSMSector),
              coeff_cNOT_rZOTHRge(OGSMRegion,OGSMSector) *
                    cNOT(OGSMSector,OGSMRegion))
              +
              sum((OGSMRegion_ALTFrom,OGSMRegion_ALTTo),
              coeff_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *
                    cNTO(OGSMRegion_ALTFrom,OGSMRegion_ALTTo))
 
              >=
 
              0.
          }
          Comment: "balance row for CO2 use in other sectors by OGSM region (million metric tons CO2)";
       }
     Parameter rACIOMCSTn {
         Text: "Free row in OML, Rows: ACIOMCST";
         Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),
              coeff_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
          }
       }
     Parameter rACIRMVXXn {
         Text: "Free row in OML, Rows: ACIRMVXX";
         Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),
              coeff_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
          }
       }
     Parameter rCARBONABn {
         Text: "Free row in OML, Rows: CARBONAB";
         Definition: {
              sum((CarbonRegion),
              coeff_cCARBNK_rCARBONABn(CarbonRegion) *
                    cCARBNK(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARESC_rCARBONABn(CarbonRegion) *
                    cCARESC(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARFUE_rCARBONABn(CarbonRegion) *
                    cCARFUE(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARIND_rCARBONABn(CarbonRegion) *
                    cCARIND(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCAROFF_rCARBONABn(CarbonRegion) *
                    cCAROFF(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCAROTH_rCARBONABn(CarbonRegion) *
                    cCAROTH(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARREF_rCARBONABn(CarbonRegion) *
                    cCARREF(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARRSV_rCARBONABn(CarbonRegion) *
                    cCARRSV(CarbonRegion))
              +
              sum((CarbonRegion),
              coeff_cCARUTL_rCARBONABn(CarbonRegion) *
                    cCARUTL(CarbonRegion))
          }
       }
     Parameter rCARBONn {
         IndexDomain: (CarbonRegion) ;
         Text: "Free row in OML, Rows: CARBON(**)";
         Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              sum((SupplyRegion_ALT1),
              coeff_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *
                    cCARDM(SupplyRegion_ALT1,CarbonRegion))
              +
              sum((SupplyRegion_ALT1),
              coeff_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *
                    cCARIM(SupplyRegion_ALT1,CarbonRegion))
              +
              coeff_cCARUTL_rCARBONn(CarbonRegion) *
                    cCARUTL(CarbonRegion)
              +
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1),
              coeff_cCTLCO_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1) *
                    cCTLCO(CoalSupplyCurve,CoalDemandRegion_ALT1))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
              coeff_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                    cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
              +
              sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
              coeff_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                    cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
          }
       }
     Parameter rCARBONXXn {
         Text: "Free row in OML, Rows: CARBONXX";
         Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rCARBONXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
              +
              coeff_cCARBONOT_rCARBONXXn *
                    cCARBONOT
              +
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),
              coeff_cCT_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
              +
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1),
              coeff_cCTLCO_rCARBONXXn(CoalSupplyCurve,CoalDemandRegion_ALT1) *
                    cCTLCO(CoalSupplyCurve,CoalDemandRegion_ALT1))
              +
              sum((OilRegion),
              coeff_cDTUS_rCARBONXXn(OilRegion) *
                    cDTUS(OilRegion))
              +
              sum((GasRegion,GasSeason),
              coeff_cGTUS_rCARBONXXn(GasRegion,GasSeason) *
                    cGTUS(GasRegion,GasSeason))
              +
              sum((OilRegion),
              coeff_cRTUS_rCARBONXXn(OilRegion) *
                    cRTUS(OilRegion))
          }
       }
     Parameter rCARCLn {
         IndexDomain: (SupplyStates) ;
         Text: "Free row in OML, Rows: CARCL(**)";
         Definition: {
          }
       }
     Parameter rCAROGn {
         IndexDomain: (SupplyStates) ;
         Text: "Free row in OML, Rows: CAROG(**)";
         Definition: {
          }
       }
     Parameter rCARSEQXXn {
         Text: "Free row in OML, Rows: CARSEQXX";
         Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rCARSEQXXn(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
          }
       }
     Parameter rCFCPn {
         IndexDomain: (CoalDemandRegion_ALT1,nRCF) ;
         Text: "Free row in OML, Rows: CFCP(*)X(*)";
         Definition: {
          }
       }
     Parameter rCFGn {
         IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP) ;
         Text: "Free row in OML, Rows: CFG(*)(**)XX";
         Definition: {
              sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
              coeff_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                    cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
          }
       }
     Parameter rCO2QFRn {
         IndexDomain: (FuelRegion) ;
         Text: "Free row in OML, Rows: CO2QFR(**)";
         Definition: {
          }
       }
     Parameter rCO2QNRn {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "Free row in OML, Rows: CO2QNR(**)";
         Definition: {
              sum((PlantGroup,Season,OperatingMode),
              coeff_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cD(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
          }
       }
     Parameter rCO2RNRn {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "Free row in OML, Rows: CO2RNR(**)";
         Definition: {
              sum((PlantGroup,Season,OperatingMode),
              coeff_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cD(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
          }
       }
     Parameter rCO2TFRn {
         IndexDomain: (FuelRegion) ;
         Text: "Free row in OML, Rows: CO2TFR(**)";
         Definition: {
          }
       }
     Parameter rCO2TNRn {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "Free row in OML, Rows: CO2TNR(**)";
         Definition: {
              sum((PlantGroup,Season,OperatingMode),
              coeff_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cD(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
          }
       }
     Parameter rELNOX0n {
         IndexDomain: (INOXP) ;
         Text: "Free row in OML, Rows: ELNOX0(*)";
         Definition: {
              sum((CoalDemandRegion_ALT1,GenerationSeason),
              coeff_cBCTLN_rELNOX0n(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *
                    cBCTLN(CoalDemandRegion_ALT1,GenerationSeason,INOXP))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cD_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *
                    cD(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,Season),
              coeff_cJX_rELNOX0n(INOXP,PlantGroup,Season) *
                    cJX(PlantGroup,Season))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,Season),
              coeff_cOX_rELNOX0n(INOXP,PlantGroup,Season) *
                    cOX(PlantGroup,Season))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,Season),
              coeff_cUX_rELNOX0n(INOXP,PlantGroup,Season) *
                    cUX(PlantGroup,Season))
          }
       }
     Parameter rGENQFRn {
         IndexDomain: (FuelRegion) ;
         Text: "Free row in OML, Rows: GENQFR(**)";
         Definition: {
          }
       }
     Parameter rGENQNRn {
         IndexDomain: (SupplyRegion_ALT2) ;
         Text: "Free row in OML, Rows: GENQNR(**)";
         Definition: {
              sum((PlantGroup,Season,OperatingMode),
              coeff_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cD(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cJ(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cO(PlantGroup,Season,OperatingMode))
              +
              sum((PlantGroup,SeasonCCS,OperatingMode),
              coeff_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                    cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
              +
              sum((PlantGroup,Season,OperatingMode),
              coeff_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                    cU(PlantGroup,Season,OperatingMode))
          }
       }
     Parameter rGn {
         IndexDomain: (SupplyRegion,PlantType) ;
         Text: "Free row in OML, Rows: G(****)(***)";
         Definition: {
              sum((PlantGroup,Season),
              coeff_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *
                    cJX(PlantGroup,Season))
              +
              sum((PlantGroup,Season),
              coeff_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *
                    cOX(PlantGroup,Season))
              +
              sum((PlantGroup,Season),
              coeff_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *
                    cUX(PlantGroup,Season))
          }
       }
     Parameter rMERCURYn {
         IndexDomain: (nHGCODE) ;
         Text: "Free row in OML, Rows: MERCURY(*)";
         Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1),
              coeff_cCTLHG_rMERCURYn(nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1) *
                    cCTLHG(CoalSupplyCurve,CoalDemandRegion_ALT1))
              +
              sum((PlantType_ECP),
              coeff_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) *
                    cMERC_(PlantType_ECP,nHGCODE))
              +
              coeff_cMERC_DS_rMERCURYn(nHGCODE) *
                    cMERC_DS(nHGCODE)
              +
              coeff_cMERC_RS_rMERCURYn(nHGCODE) *
                    cMERC_RS(nHGCODE)
              +
              coeff_cT_STOCK__rMERCURYn(nHGCODE) *
                    cT_STOCK_
          }
       }
     Parameter rSULFURCRn {
         IndexDomain: (CoalDemandRegion) ;
         Text: "Free row in OML, Rows: SULFUR(**)";
         Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption),
              coeff_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption) *
                    cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,ACIOption))
              +
              sum((CoalDemandRegion_ALT1),
              coeff_cCTLSO2_rSULFURCRn(CoalDemandRegion,CoalDemandRegion_ALT1) *
                    cCTLSO2(CoalDemandRegion_ALT1))
              +
              sum((OilRegion),
              coeff_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) *
                    cRTUS(OilRegion))
          }
       }
     Parameter rSULFURn {
         IndexDomain: (SO2Region) ;
         Text: "Free row in OML, Rows: SULFUR(*)";
         Definition: {
              sum((CoalSupplyCurve,CoalDemandRegion_ALT1),
              coeff_cCTLS_rSULFURn(SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1) *
                    cCTLS(CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region))
              +
              sum((PlantType_ECP),
              coeff_cSULF_rSULFURn(SO2Region,PlantType_ECP) *
                    cSULF(PlantType_ECP,SO2Region))
              +
              coeff_cT_STOCK__rSULFURn(SO2Region) *
                    cT_STOCK_
          }
       }
   }
  Procedure WriteToNEMS {
    Body: {
      OutToNEMS_FileName:="OutToNEMS_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt";
      put OutToNEMS; ! opens the file and sets stage for subsequent display and put statements
      display EFD_WithoutSafety.ProgramStatus ;
      display EFD_WithSafety.ProgramStatus ;
      display {cACISPLY.level, cACISPLY.NominalCoefficient, coeff_cACISPLY_LBOUND, coeff_cACISPLY_UBOUND, cACISPLY.ReducedCost} where decimals := 10 ;
      display {cBP_type.level, cBP_type.NominalCoefficient, coeff_cBP_type_LBOUND, coeff_cBP_type_UBOUND, cBP_type.ReducedCost} where decimals := 10 ;
      display {cB.level, cB.NominalCoefficient, cB.lower, cB.upper, cB.ReducedCost} where decimals := 10 ;
      display {cBCTLN.level, cBCTLN.NominalCoefficient, coeff_cBCTLN_LBOUND, coeff_cBCTLN_UBOUND, cBCTLN.ReducedCost} where decimals := 10 ;
      display {cCARBNK.level, cCARBNK.NominalCoefficient, coeff_cCARBNK_LBOUND, coeff_cCARBNK_UBOUND, cCARBNK.ReducedCost} where decimals := 10 ;
      display {cCARESC.level, cCARESC.NominalCoefficient, cCARESC.lower, cCARESC.upper, cCARESC.ReducedCost} where decimals := 10 ;
      display {cCARESCXX.level, cCARESCXX.NominalCoefficient, coeff_cCARESCXX_LBOUND, coeff_cCARESCXX_UBOUND, cCARESCXX.ReducedCost} where decimals := 10 ;
      display {cCARLIM.level, cCARLIM.NominalCoefficient, coeff_cCARLIM_LBOUND, coeff_cCARLIM_UBOUND, cCARLIM.ReducedCost} where decimals := 10 ;
      display {cCAROFF.level, cCAROFF.NominalCoefficient, coeff_cCAROFF_LBOUND, coeff_cCAROFF_UBOUND, cCAROFF.ReducedCost} where decimals := 10 ;
      display {cCARRSV.level, cCARRSV.NominalCoefficient, coeff_cCARRSV_LBOUND, coeff_cCARRSV_UBOUND, cCARRSV.ReducedCost} where decimals := 10 ;
      display {cCARECR.level, cCARECR.NominalCoefficient, coeff_cCARECR_LBOUND, coeff_cCARECR_UBOUND, cCARECR.ReducedCost} where decimals := 10 ;
      display {cCARUTL.level, cCARUTL.NominalCoefficient, cCARUTL.lower, cCARUTL.upper, cCARUTL.ReducedCost} where decimals := 10 ;
      display {cCMNR.level, cCMNR.NominalCoefficient, cCMNR.lower, cCMNR.upper, cCMNR.ReducedCost} where decimals := 10 ;
      display {cCONCLB.level, cCONCLB.NominalCoefficient, coeff_cCONCLB_LBOUND, coeff_cCONCLB_UBOUND, cCONCLB.ReducedCost} where decimals := 10 ;
      display {cCONNGB.level, cCONNGB.NominalCoefficient, coeff_cCONNGB_LBOUND, coeff_cCONNGB_UBOUND, cCONNGB.ReducedCost} where decimals := 10 ;
      display {cCT.level, cCT.NominalCoefficient, coeff_cCT_LBOUND, coeff_cCT_UBOUND, cCT.ReducedCost} where decimals := 10 ;
      display {cCTLHG.level, cCTLHG.NominalCoefficient, coeff_cCTLHG_LBOUND, coeff_cCTLHG_UBOUND, cCTLHG.ReducedCost} where decimals := 10 ;
      display {cCTLS.level, cCTLS.NominalCoefficient, coeff_cCTLS_LBOUND, coeff_cCTLS_UBOUND, cCTLS.ReducedCost} where decimals := 10 ;
      display {cCTLSO2.level, cCTLSO2.NominalCoefficient, coeff_cCTLSO2_LBOUND, coeff_cCTLSO2_UBOUND, cCTLSO2.ReducedCost} where decimals := 10 ;
      display {cD.level, cD.NominalCoefficient, coeff_cD_LBOUND, coeff_cD_UBOUND, cD.ReducedCost} where decimals := 10 ;
      display {cF.level, cF.NominalCoefficient, coeff_cF_LBOUND, coeff_cF_UBOUND, cF.ReducedCost} where decimals := 10 ;
      display {cGENCLB.level, cGENCLB.NominalCoefficient, coeff_cGENCLB_LBOUND, coeff_cGENCLB_UBOUND, cGENCLB.ReducedCost} where decimals := 10 ;
      display {cGENNGB.level, cGENNGB.NominalCoefficient, coeff_cGENNGB_LBOUND, coeff_cGENNGB_UBOUND, cGENNGB.ReducedCost} where decimals := 10 ;
      display {cH.level, cH.NominalCoefficient, coeff_cH_LBOUND, coeff_cH_UBOUND, cH.ReducedCost} where decimals := 10 ;
      display {cI.level, cI.NominalCoefficient, coeff_cI_LBOUND, coeff_cI_UBOUND, cI.ReducedCost} where decimals := 10 ;
      display {cJ_ALT.level, cJ_ALT.NominalCoefficient, coeff_cJ_ALT_LBOUND, coeff_cJ_ALT_UBOUND, cJ_ALT.ReducedCost} where decimals := 10 ;
      display {cJ.level, cJ.NominalCoefficient, coeff_cJ_LBOUND, coeff_cJ_UBOUND, cJ.ReducedCost} where decimals := 10 ;
      display {cJX.level, cJX.NominalCoefficient, coeff_cJX_LBOUND, coeff_cJX_UBOUND, cJX.ReducedCost} where decimals := 10 ;
      display {cMB.level, cMB.NominalCoefficient, coeff_cMB_LBOUND, coeff_cMB_UBOUND, cMB.ReducedCost} where decimals := 10 ;
      display {cNOT.level, cNOT.NominalCoefficient, coeff_cNOT_LBOUND, coeff_cNOT_UBOUND, cNOT.ReducedCost} where decimals := 10 ;
      display {cNOTSF.level, cNOTSF.NominalCoefficient, cNOTSF.lower, cNOTSF.upper, cNOTSF.ReducedCost} where decimals := 10 ;
      display {cNSR.level, cNSR.NominalCoefficient, cNSR.lower, cNSR.upper, cNSR.ReducedCost} where decimals := 10 ;
      display {cNSX.level, cNSX.NominalCoefficient, cNSX.lower, cNSX.upper, cNSX.ReducedCost} where decimals := 10 ;
      display {cNTO.level, cNTO.NominalCoefficient, cNTO.lower, cNTO.upper, cNTO.ReducedCost} where decimals := 10 ;
      display {cNTR.level, cNTR.NominalCoefficient, cNTR.lower, cNTR.upper, cNTR.ReducedCost} where decimals := 10 ;
      display {cNTX.level, cNTX.NominalCoefficient, cNTX.lower, cNTX.upper, cNTX.ReducedCost} where decimals := 10 ;
      display {cO_ALT.level, cO_ALT.NominalCoefficient, coeff_cO_ALT_LBOUND, coeff_cO_ALT_UBOUND, cO_ALT.ReducedCost} where decimals := 10 ;
      display {cO.level, cO.NominalCoefficient, coeff_cO_LBOUND, coeff_cO_UBOUND, cO.ReducedCost} where decimals := 10 ;
      display {cOX.level, cOX.NominalCoefficient, coeff_cOX_LBOUND, coeff_cOX_UBOUND, cOX.ReducedCost} where decimals := 10 ;
      display {cS2.level, cS2.NominalCoefficient, coeff_cS2_LBOUND, coeff_cS2_UBOUND, cS2.ReducedCost} where decimals := 10 ;
      display {cSC.level, cSC.NominalCoefficient, cSC.lower, cSC.upper, cSC.ReducedCost} where decimals := 10 ;
      display {cSPx.level, cSPx.NominalCoefficient, coeff_cSPx_LBOUND, coeff_cSPx_UBOUND, cSPx.ReducedCost} where decimals := 10 ;
      display {cTC.level, cTC.NominalCoefficient, cTC.lower, cTC.upper, cTC.ReducedCost} where decimals := 10 ;
      display {cTR.level, cTR.NominalCoefficient, coeff_cTR_LBOUND, coeff_cTR_UBOUND, cTR.ReducedCost} where decimals := 10 ;
      display {cSR.level, cSR.NominalCoefficient, coeff_cSR_LBOUND, coeff_cSR_UBOUND, cSR.ReducedCost} where decimals := 10 ;
      display {cU_ALT.level, cU_ALT.NominalCoefficient, coeff_cU_ALT_LBOUND, coeff_cU_ALT_UBOUND, cU_ALT.ReducedCost} where decimals := 10 ;
      display {cU.level, cU.NominalCoefficient, coeff_cU_LBOUND, coeff_cU_UBOUND, cU.ReducedCost} where decimals := 10 ;
      display {cUX.level, cUX.NominalCoefficient, coeff_cUX_LBOUND, coeff_cUX_UBOUND, cUX.ReducedCost} where decimals := 10 ;
      display {EFDCOSTS} where decimals := 10 ;
      display {rACIOMCSTn} where decimals := 10 ;
      display {rBTUXXle.level, rBTUXXle.lower, rBTUXXle.upper, rBTUXXle.ShadowPrice} where decimals := 10  ;
      display {rCARBONABeq.level, rCARBONABeq.lower, rCARBONABeq.upper, rCARBONABeq.ShadowPrice} where decimals := 10  ;
      display {rCARBONle.level, rCARBONle.lower, rCARBONle.upper, rCARBONle.ShadowPrice} where decimals := 10  ;
      display {rCARBONn} where decimals := 10 ;
      display {rCARBONXXle.level, rCARBONXXle.lower, rCARBONXXle.upper, rCARBONXXle.ShadowPrice} where decimals := 10  ;
      display {rCARBONXXn} where decimals := 10 ;
      display {rCARCLn} where decimals := 10 ;
      display {rCAROGn} where decimals := 10 ;
      display {rCO2QFRn} where decimals := 10 ;
      display {rCO2QNRle.level, rCO2QNRle.lower, rCO2QNRle.upper, rCO2QNRle.ShadowPrice} where decimals := 10  ;
      display {rCO2QNRn} where decimals := 10 ;
      display {rCO2TFRn} where decimals := 10 ;
      display {rCO2TNRn} where decimals := 10 ;
      display {rCONCLeq.level, rCONCLeq.lower, rCONCLeq.upper, rCONCLeq.ShadowPrice} where decimals := 10  ;
      display {rCONNGeq.level, rCONNGeq.lower, rCONNGeq.upper, rCONNGeq.ShadowPrice} where decimals := 10  ;
      display {rELNOX0le.level, rELNOX0le.lower, rELNOX0le.upper, rELNOX0le.ShadowPrice} where decimals := 10  ;
      display {rGENCLeq.level, rGENCLeq.lower, rGENCLeq.upper, rGENCLeq.ShadowPrice} where decimals := 10  ;
      display {rGENNGeq.level, rGENNGeq.lower, rGENNGeq.upper, rGENNGeq.ShadowPrice} where decimals := 10  ;
      display {rGENQFRn} where decimals := 10 ;
      display {rGENQNRn} where decimals := 10 ;
      display {rGRDGNge.level, rGRDGNge.lower, rGRDGNge.upper, rGRDGNge.ShadowPrice} where decimals := 10  ;
      display {rGRDRTge.level, rGRDRTge.lower, rGRDRTge.upper, rGRDRTge.ShadowPrice} where decimals := 10  ;
      display {rLDge.level, rLDge.lower, rLDge.upper, rLDge.ShadowPrice} where decimals := 10  ;
      display {rMERC_DSle.level, rMERC_DSle.lower, rMERC_DSle.upper, rMERC_DSle.ShadowPrice} where decimals := 10  ;
      display {rMERC_le.level, rMERC_le.lower, rMERC_le.upper, rMERC_le.ShadowPrice} where decimals := 10  ;
      display {rMERC_RSle.level, rMERC_RSle.lower, rMERC_RSle.upper, rMERC_RSle.ShadowPrice} where decimals := 10  ;
      display {rMERCURYle.level, rMERCURYle.lower, rMERCURYle.upper, rMERCURYle.ShadowPrice} where decimals := 10  ;
      display {rMERCURYn} where decimals := 10 ;
      display {rMRXge.level, rMRXge.lower, rMRXge.upper, rMRXge.ShadowPrice} where decimals := 10  ;
      display {rS_WD_allle.level, rS_WD_allle.lower, rS_WD_allle.upper, rS_WD_allle.ShadowPrice} where decimals := 10  ;
      display {rS_WD_typele.level, rS_WD_typele.lower, rS_WD_typele.upper, rS_WD_typele.ShadowPrice} where decimals := 10  ;
      display {rSRge.level, rSRge.lower, rSRge.upper, rSRge.ShadowPrice} where decimals := 10  ;
      display {rSULFURle.level, rSULFURle.lower, rSULFURle.upper, rSULFURle.ShadowPrice} where decimals := 10  ;
      display {rSULFURn} where decimals := 10 ;
      display {rTCNle.level, rTCNle.lower, rTCNle.upper, rTCNle.ShadowPrice} where decimals := 10  ;
      display {rTLle.level, rTLle.lower, rTLle.upper, rTLle.ShadowPrice} where decimals := 10  ;
      display {rZFLRGeq.level, rZFLRGeq.lower, rZFLRGeq.upper, rZFLRGeq.ShadowPrice} where decimals := 10  ;
      display {rZFLRGge.level, rZFLRGge.lower, rZFLRGge.upper, rZFLRGge.ShadowPrice} where decimals := 10  ;
      display {rZFLRSeq.level, rZFLRSeq.lower, rZFLRSeq.upper, rZFLRSeq.ShadowPrice} where decimals := 10  ;
      display {rZFLRSge.level, rZFLRSge.lower, rZFLRSge.upper, rZFLRSge.ShadowPrice} where decimals := 10  ;
      display {rZOGSMeq.level, rZOGSMeq.lower, rZOGSMeq.upper, rZOGSMeq.ShadowPrice} where decimals := 10  ;
      display {rZOTHRge.level, rZOTHRge.lower, rZOTHRge.upper, rZOTHRge.ShadowPrice} where decimals := 10  ;
  put "! ==========================================================================" / ;
  put "! Remainder of solution used for validation only" / ;
  put "! ==========================================================================" / ;
  put " " ;
  if (AIMEFDBG = 1) then
      display {cBiomassOtherUsage.level, cBiomassOtherUsage.NominalCoefficient, coeff_cBiomassOtherUsage_LBOUND, coeff_cBiomassOtherUsage_UBOUND, cBiomassOtherUsage.ReducedCost} where decimals := 10 ;
      display {cBP.level, cBP.NominalCoefficient, cBP.lower, cBP.upper, cBP.ReducedCost} where decimals := 10 ;
      display {cBP_all.level, cBP_all.NominalCoefficient, cBP_all.lower, cBP_all.upper, cBP_all.ReducedCost} where decimals := 10 ;
      display {cC_Z.level, cC_Z.NominalCoefficient, cC_Z.lower, cC_Z.upper, cC_Z.ReducedCost} where decimals := 10 ;
      display {cCAR.level, cCAR.NominalCoefficient, cCAR.lower, cCAR.upper, cCAR.ReducedCost} where decimals := 10 ;
      display {cCARBONOT.level, cCARBONOT.NominalCoefficient, coeff_cCARBONOT_LBOUND, coeff_cCARBONOT_UBOUND, cCARBONOT.ReducedCost} where decimals := 10 ;
      display {cCARDM.level, cCARDM.NominalCoefficient, coeff_cCARDM_LBOUND, coeff_cCARDM_UBOUND, cCARDM.ReducedCost} where decimals := 10 ;
      display {cCARFUE.level, cCARFUE.NominalCoefficient, coeff_cCARFUE_LBOUND, coeff_cCARFUE_UBOUND, cCARFUE.ReducedCost} where decimals := 10 ;
      display {cCARIM.level, cCARIM.NominalCoefficient, coeff_cCARIM_LBOUND, coeff_cCARIM_UBOUND, cCARIM.ReducedCost} where decimals := 10 ;
      display {cCARIND.level, cCARIND.NominalCoefficient, coeff_cCARIND_LBOUND, coeff_cCARIND_UBOUND, cCARIND.ReducedCost} where decimals := 10 ;
      display {cCAROTH.level, cCAROTH.NominalCoefficient, coeff_cCAROTH_LBOUND, coeff_cCAROTH_UBOUND, cCAROTH.ReducedCost} where decimals := 10 ;
      display {cCARREF.level, cCARREF.NominalCoefficient, coeff_cCARREF_LBOUND, coeff_cCARREF_UBOUND, cCARREF.ReducedCost} where decimals := 10 ;
      display {cCNIMPBUS.level, cCNIMPBUS.NominalCoefficient, coeff_cCNIMPBUS_LBOUND, coeff_cCNIMPBUS_UBOUND, cCNIMPBUS.ReducedCost} where decimals := 10 ;
      display {cCoalOtherUsage.level, cCoalOtherUsage.NominalCoefficient, coeff_cCoalOtherUsage_LBOUND, coeff_cCoalOtherUsage_UBOUND, cCoalOtherUsage.ReducedCost} where decimals := 10 ;
      display {cCP.level, cCP.NominalCoefficient, coeff_cCP_LBOUND, coeff_cCP_UBOUND, cCP.ReducedCost} where decimals := 10 ;
      display {cCTLCO.level, cCTLCO.NominalCoefficient, coeff_cCTLCO_LBOUND, coeff_cCTLCO_UBOUND, cCTLCO.ReducedCost} where decimals := 10 ;
      display {cDPUS.level, cDPUS.NominalCoefficient, cDPUS.lower, cDPUS.upper, cDPUS.ReducedCost} where decimals := 10 ;
      display {cDTUS.level, cDTUS.NominalCoefficient, cDTUS.lower, cDTUS.upper, cDTUS.ReducedCost} where decimals := 10 ;
      display {cDPVCP.level, cDPVCP.NominalCoefficient, coeff_cDPVCP_LBOUND, coeff_cDPVCP_UBOUND, cDPVCP.ReducedCost} where decimals := 10 ;
      display {cDX.level, cDX.NominalCoefficient, cDX.lower, cDX.upper, cDX.ReducedCost} where decimals := 10 ;
      display {cELNOX.level, cELNOX.NominalCoefficient, cELNOX.lower, cELNOX.upper, cELNOX.ReducedCost} where decimals := 10 ;
      display {cELNOXOT.level, cELNOXOT.NominalCoefficient, cELNOXOT.lower, cELNOXOT.upper, cELNOXOT.ReducedCost} where decimals := 10 ;
      display {cES.level, cES.NominalCoefficient, coeff_cES_LBOUND, coeff_cES_UBOUND, cES.ReducedCost} where decimals := 10 ;
      display {cESCNOX.level, cESCNOX.NominalCoefficient, cESCNOX.lower, cESCNOX.upper, cESCNOX.ReducedCost} where decimals := 10 ;
      display {cG.level, cG.NominalCoefficient, coeff_cG_LBOUND, coeff_cG_UBOUND, cG.ReducedCost} where decimals := 10 ;
      display {cGEESFR.level, cGEESFR.NominalCoefficient, cGEESFR.lower, cGEESFR.upper, cGEESFR.ReducedCost} where decimals := 10 ;
      display {cGEESNR.level, cGEESNR.NominalCoefficient, cGEESNR.lower, cGEESNR.upper, cGEESNR.ReducedCost} where decimals := 10 ;
      display {cGNUPFR.level, cGNUPFR.NominalCoefficient, cGNUPFR.lower, cGNUPFR.upper, cGNUPFR.ReducedCost} where decimals := 10 ;
      display {cGNUPNR.level, cGNUPNR.NominalCoefficient, cGNUPNR.lower, cGNUPNR.upper, cGNUPNR.ReducedCost} where decimals := 10 ;
      display {cGPUS.level, cGPUS.NominalCoefficient, coeff_cGPUS_LBOUND, coeff_cGPUS_UBOUND, cGPUS.ReducedCost} where decimals := 10 ;
      display {cGTUS.level, cGTUS.NominalCoefficient, cGTUS.lower, cGTUS.upper, cGTUS.ReducedCost} where decimals := 10 ;
      display {cIGEN.level, cIGEN.NominalCoefficient, cIGEN.lower, cIGEN.upper, cIGEN.ReducedCost} where decimals := 10 ;
      display {cKX.level, cKX.NominalCoefficient, cKX.lower, cKX.upper, cKX.ReducedCost} where decimals := 10 ;
      display {cMERC_.level, cMERC_.NominalCoefficient, cMERC_.lower, cMERC_.upper, cMERC_.ReducedCost} where decimals := 10 ;
      display {cMERC_DS.level, cMERC_DS.NominalCoefficient, cMERC_DS.lower, cMERC_DS.upper, cMERC_DS.ReducedCost} where decimals := 10 ;
      display {cMERC_OT.level, cMERC_OT.NominalCoefficient, cMERC_OT.lower, cMERC_OT.upper, cMERC_OT.ReducedCost} where decimals := 10 ;
      display {cMERC_RS.level, cMERC_RS.NominalCoefficient, cMERC_RS.lower, cMERC_RS.upper, cMERC_RS.ReducedCost} where decimals := 10 ;
      display {cMVS.level, cMVS.NominalCoefficient, cMVS.lower, cMVS.upper, cMVS.ReducedCost} where decimals := 10 ;
      display {cMVSO2.level, cMVSO2.NominalCoefficient, coeff_cMVSO2_LBOUND, coeff_cMVSO2_UBOUND, cMVSO2.ReducedCost} where decimals := 10 ;
      display {cRPUS.level, cRPUS.NominalCoefficient, cRPUS.lower, cRPUS.upper, cRPUS.ReducedCost} where decimals := 10 ;
      display {cRTUS.level, cRTUS.NominalCoefficient, cRTUS.lower, cRTUS.upper, cRTUS.ReducedCost} where decimals := 10 ;
      display {cST.level, cST.NominalCoefficient, coeff_cST_LBOUND, coeff_cST_UBOUND, cST.ReducedCost} where decimals := 10 ;
      display {cSULF.level, cSULF.NominalCoefficient, cSULF.lower, cSULF.upper, cSULF.ReducedCost} where decimals := 10 ;
      display {cT_STOCK_.level, cT_STOCK_.NominalCoefficient, coeff_cT_STOCK__LBOUND, coeff_cT_STOCK__UBOUND, cT_STOCK_.ReducedCost} where decimals := 10 ;
      display {rACICSTle.level, rACICSTle.lower, rACICSTle.upper, rACICSTle.ShadowPrice} where decimals := 10  ;
      display {rACIRMVXXn} where decimals := 10 ;
      display {rBTUle.level, rBTUle.lower, rBTUle.upper, rBTUle.ShadowPrice} where decimals := 10  ;
      display {rCARBONABn} where decimals := 10 ;
      display {rCARSEQXXn} where decimals := 10 ;
      display {rCBle.level, rCBle.lower, rCBle.upper, rCBle.ShadowPrice} where decimals := 10  ;
      display {rCFCPn} where decimals := 10 ;
      display {rCFGn} where decimals := 10 ;
      display {rCLle.level, rCLle.lower, rCLle.upper, rCLle.ShadowPrice} where decimals := 10  ;
      display {rCNCPle.level, rCNCPle.lower, rCNCPle.upper, rCNCPle.ShadowPrice} where decimals := 10  ;
      display {rCANIMPUSeq.level, rCANIMPUSeq.lower, rCANIMPUSeq.upper, rCANIMPUSeq.ShadowPrice} where decimals := 10  ;
      display {rCO2RNRn} where decimals := 10 ;
      display {rDSle.level, rDSle.lower, rDSle.upper, rDSle.ShadowPrice} where decimals := 10  ;
      display {rDVle.level, rDVle.lower, rDVle.upper, rDVle.ShadowPrice} where decimals := 10  ;
      display {rELNOX0n} where decimals := 10 ;
      display {rELNOXle.level, rELNOXle.lower, rELNOXle.upper, rELNOXle.ShadowPrice} where decimals := 10  ;
      display {rELNOXOTle.level, rELNOXOTle.lower, rELNOXOTle.upper, rELNOXOTle.ShadowPrice} where decimals := 10  ;
      display {rENeq.level, rENeq.lower, rENeq.upper, rENeq.ShadowPrice} where decimals := 10  ;
      display {rENle.level, rENle.lower, rENle.upper, rENle.ShadowPrice} where decimals := 10  ;
      display {rEXle.level, rEXle.lower, rEXle.upper, rEXle.ShadowPrice} where decimals := 10  ;
      display {rFle.level, rFle.lower, rFle.upper, rFle.ShadowPrice} where decimals := 10  ;
      display {rGn} where decimals := 10 ;
      display {rIMle.level, rIMle.lower, rIMle.upper, rIMle.ShadowPrice} where decimals := 10  ;
      display {rK_ge.level, rK_ge.lower, rK_ge.upper, rK_ge.ShadowPrice} where decimals := 10  ;
      display {rMBge.level, rMBge.lower, rMBge.upper, rMBge.ShadowPrice} where decimals := 10  ;
      display {rMVSO2le.level, rMVSO2le.lower, rMVSO2le.upper, rMVSO2le.ShadowPrice} where decimals := 10  ;
      display {rNGle.level, rNGle.lower, rNGle.upper, rNGle.ShadowPrice} where decimals := 10  ;
      display {rP2_le.level, rP2_le.lower, rP2_le.upper, rP2_le.ShadowPrice} where decimals := 10  ;
      display {rP2le.level, rP2le.lower, rP2le.upper, rP2le.ShadowPrice} where decimals := 10  ;
      display {rPS_le.level, rPS_le.lower, rPS_le.upper, rPS_le.ShadowPrice} where decimals := 10  ;
      display {rRSle.level, rRSle.lower, rRSle.upper, rRSle.ShadowPrice} where decimals := 10  ;
      display {rS_CLle.level, rS_CLle.lower, rS_CLle.upper, rS_CLle.ShadowPrice} where decimals := 10  ;
      display {rS_DSUSle.level, rS_DSUSle.lower, rS_DSUSle.upper, rS_DSUSle.ShadowPrice} where decimals := 10  ;
      display {rS_NGUSle.level, rS_NGUSle.lower, rS_NGUSle.upper, rS_NGUSle.ShadowPrice} where decimals := 10  ;
      display {rS_RSUSle.level, rS_RSUSle.lower, rS_RSUSle.upper, rS_RSUSle.ShadowPrice} where decimals := 10  ;
      display {rSULFle.level, rSULFle.lower, rSULFle.upper, rSULFle.ShadowPrice} where decimals := 10  ;
      display {rSULFURCRle.level, rSULFURCRle.lower, rSULFURCRle.upper, rSULFURCRle.ShadowPrice} where decimals := 10  ;
      display {rSULFURCRn} where decimals := 10 ;
      display {rT_le.level, rT_le.lower, rT_le.upper, rT_le.ShadowPrice} where decimals := 10  ;
      endif;
      putclose;
    }
  }
DeclarationSection PassBacktoNEMSDeclare {
    ElementParameter NEMSYearIndex {
        Range: MNUMYR_;
    }
    Parameter SupplyRegionNumber {
        Range: integer;
    }
}
  Procedure PassBackToNEMS {
    Body: {
      OutToNEMS_FileName:="PassBack_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt";
      put OutToNEMS; ! opens the file and sets stage for subsequent display and put statements
! output the EMM variables derived from the LP solution values
      display {AB32UTIL_calc} where decimals := 10 ;
      display {AB32BAVL_calc} where decimals := 10 ;
      display {AB32BUSE_calc} where decimals := 10 ;
      display {AB32BBNK_calc} where decimals := 10 ;
      display {AB32OAVL_calc} where decimals := 10 ;
      display {AB32OUSE_calc} where decimals := 10 ;
      display {AB32RAVL_calc} where decimals := 10 ;
      display {AB32RUSE_calc} where decimals := 10 ;
      display {AB32RBNK_calc} where decimals := 10 ;
      display {AB32ESCP_calc} where decimals := 10 ;
      display {ACICST_calc} where decimals := 10 ;
      display {ACIOAM_calc} where decimals := 10 ;
      display {CAREFD_calc} where decimals := 10 ;
      display {CARTGT_calc} where decimals := 10 ;
      display {CHKGEN_calc} where decimals := 10 ;
      display {CHK_D_calc} where decimals := 10 ;
      display {CTLHGEM_calc} where decimals := 10 ;
      display {CTLNOXEM_calc} where decimals := 10 ;
      display {CTLSO2EM_calc} where decimals := 10 ;
      display {ECDSPC_calc} where decimals := 10 ;
      display {ECDSPE_calc} where decimals := 10 ;
      display {ECDSPE_ALT_calc} where decimals := 10 ;
      display {ECDSPF_calc} where decimals := 10 ;
      display {ECDSPF_ALT_calc} where decimals := 10 ;
      display {EFD_LCAR_calc} where decimals := 10 ;
      display {EFD_PCAR_calc} where decimals := 10 ;
      display {EFD_QCAR_calc} where decimals := 10 ;
      display {ELGENE_calc} where decimals := 10 ;
      display {EMMBMDUAL_calc} where decimals := 10 ;
      display {ETDIMERG_calc} where decimals := 10 ;
      display {ETDMDERG_calc} where decimals := 10 ;
      display {ETDMMERG_calc} where decimals := 10 ;
      display {FLRG_VAL_45Q_calc} where decimals := 10 ;
      display {FLRG_VALUE_calc} where decimals := 10 ;
      display {NET_XPORT_EFD_calc} where decimals := 10 ;
      display {NMARCST_calc} where decimals := 10 ;
      display {OGCO2QEM_calc} where decimals := 10 ;
      display {PBMPWCL_calc} where decimals := 10 ;
      display {QBMPWCL_calc} where decimals := 10 ;
      display {RGGIUTIL_calc} where decimals := 10 ;
      display {RGGIOAVL_calc} where decimals := 10 ;
      display {RGGIOUSE_calc} where decimals := 10 ;
      display {RGGIRAVL_calc} where decimals := 10 ;
      display {RGGIRUSE_calc} where decimals := 10 ;
      display {RGGIEAVL_calc} where decimals := 10 ;
      display {RGGIEUSE_calc} where decimals := 10 ;
      display {SP_ACHBYECP_calc} where decimals := 10 ;
      display {SP_RES_ACH_calc} where decimals := 10 ;
      display {SP_RES_DUAL_calc} where decimals := 10 ;
      display {SP_RES_REQ_calc} where decimals := 10 ;
      display {SRPOOL_calc} where decimals := 10 ;
      display {SR_INT_REQ_calc} where decimals := 10 ;
      display {UCARPRC_calc} where decimals := 10 ;
      display {ULBMCST_calc} where decimals := 10 ;
      display {ULMRCST_calc} where decimals := 10 ;
      display {ULTGEN_calc} where decimals := 10 ;
      display {UPFUEL_calc} where decimals := 10 ;
      display {UTCNSTSL_calc} where decimals := 10 ;
      display {UTCO2QEM_calc} where decimals := 10 ;
      display {UTECON_calc} where decimals := 10 ;
      display {UTECONSL_calc} where decimals := 10 ;
      display {UTEXDE_calc} where decimals := 10 ;
      display {UTEXME_calc} where decimals := 10 ;
      display {UTHTP2_calc} where decimals := 10 ;
      display {UTHTS2_calc} where decimals := 10 ;
      display {UTSALES_calc} where decimals := 10 ;
      display {UFRSO2Q_calc} where decimals := 10 ;
      display {UFRSO2R_calc} where decimals := 10 ;
      display {FGSSH_ams_calc} where decimals := 10 ;
      display {FCLSH_ams_calc} where decimals := 10 ;
      display {FOLSH_ams_calc} where decimals := 10 ;
      display {FWDSH_ams_calc} where decimals := 10 ;
      display {CO2_CCS_calc} where decimals := 10 ;
! write variables with implicit year and region indices as implemented via direct access files in nems.
! use NEMSYearIndex to set the Year and SupplyRegionNumber to set the Region   
      NEMSYearIndex:=stringtoelement(mnumyr_,FormatString("%02i", CURCALYR('1')-1989));
      for (SupplyRegion in SupplyRegion_) do
        SupplyRegionNumber:=ord(SupplyRegion);
        display SupplyRegionNumber;
        display {ECCOPM_calc(DispPlantGroup,Season,SupplyRegion)} where decimals := 10 ;
      endfor;
      putclose;
    }
  }
}
