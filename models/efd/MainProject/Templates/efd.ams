## ams_version=1.0

Model Main_efd {
    Procedure WriteDebugfile {
        Body: {
                                                                                                                                     put efdaim_debugfile;
            
                                                                                                                                     display {rELNOX0le(INOXP | ord(INOXP) <= NOX_GRP('1')).ShadowPrice   } where decimals = 5;
            
                                                                                                                                     ! write(UF_DBG,1026) CURIYR,CURITR,ROW_NOX,INOX,SOLVAL(1),SOLVAL(2),SOLVAL(4),prc
            
                                                                                                                                    ! display {prc(cyr)| } where decimals = 5;
            
                                                                                                                                     !display {prc(cyr) } where decimals = 5;
            
                                                                                                                                     putclose efdaim_debugfile;
            
            
            
            
                                                                                                                                     !for INOXP | (ord(INOXP) <= NOX_GRP('1')) do
                                                                                                                                                    	!IF (EMRFNA(NoxRegion_Element(INOXP),cyr) > 0) THEN
                                                                                                                                                    		!prc(cyr) := rELNOX0le(INOXP).ShadowPrice * 1000;
                                                                                                                                                    	!endif;
                                                                                                                                                    !endfor;
            
                                                                                                                                                    !for SO2Region Do
                                                                                                                                                          !IF (EMRFSA(cyr,SO2Region) > 0) THEN
                                                                                                                                                    		!prc(cyr) := rSULFURle(SO2Region).ShadowPrice * 1000;
                                                                                                                                                          !endif;
                                                                                                                                                    !endfor;
            
                                                                                                                                                    !for nHGCODE Do
                                                                                                                                                    	!if (EMEL_QHG(nHGCODE,cyr) < 100) and (rMERCURYle(nHGCODE).ShadowPrice > 0) then
                                                                                                                                                    		!prc(cyr) := rMERCURYle(nHGCODE).ShadowPrice * 1000;
                                                                                                                                                    	!endif;
                                                                                                                                                    !endfor;
        }
        File efdaim_debugfile {
            Name: "..\\efdaim_debug.txt";
            Device: Disk;
            Mode: replace;
        }
    }
    DeclarationSection Model_Declaration {
        Set SafetyVariables_ {
            SubsetOf: AllVariables;
            Definition: LP_safety_valve_variables * AllVariables;
        }
        Set NonSafetyVariables_ {
            SubsetOf: AllVariables;
            Definition: AllVariables - SafetyVariables_;
        }
        Set BenchmarkingConstraintList {
            SubsetOf: AllConstraints;
            Definition: data { rCONCLeq, rCONNGeq, rGENCLeq, rGENNGeq };
        }
        Set CPPConstraintList {
            SubsetOf: AllConstraints;
            Definition: data { rCO2QNRle };
        }
        Set TranRule2ConstraintList {
            SubsetOf: AllConstraints;
            Definition: data { rMVSO2le, rSULFURCRle };
        }
        Set ActiveConstraints {
            SubsetOf: AllConstraints;
            Definition: {
                !if ( Curcalyr(1) < 2014 ) then
                !  allConstraints-BenchmarkingConstraintList-TranRule2ConstraintList-CPPConstraintList
                !Elseif (curcalyr(1) < 2015) then
                !  allConstraints-TranRule2ConstraintList-CPPConstraintList
                !Elseif (curcalyr(1) >= 2015 AND curcalyr(1) <= 2017) then
                !  allConstraints-CPPConstraintList
                !elseif (curcalyr(1) > 2017 AND curcalyr(1) < 2022) then
                !  allConstraints-BenchmarkingConstraintList-CPPConstraintList
                !else
                   allConstraints;
                !endif;
            }
        }
        Set DisabledConstraints {
            SubsetOf: AllConstraints;
            Definition: {
                allConstraints-activeConstraints;
            }
        }
        MathematicalProgram EFD_WithoutSafety {
            Objective: EFDCOSTS;
            Direction: minimize;
            Constraints: ActiveConstraints;
            Variables: NonSafetyVariables_;
            Type: LP;
        }
        MathematicalProgram EFD_WithSafety {
            Objective: EFDCOSTS;
            Direction: minimize;
            Constraints: ActiveConstraints;
            Variables: AllVariables;
            Type: LP;
        }
        Set Run_time_option_identifiers {
            SubsetOf: AllIdentifiers;
            Definition: run_time_options*allIdentifiers;
        }
        Set Coeff_Read_Parameters {
            SubsetOf: AllIdentifiers;
            Definition: cpass_parameter_declare*allIdentifiers;
        }
    }
    DeclarationSection Run_time_options {
        StringParameter sDataYearFile;
        Set M1_ {
            SubsetOf: Integers;
            Index: M1;
            Definition: {
                {1}
            }
        }
        Parameter CURCALYR {
            IndexDomain: M1;
            InitialData: 2018;
        }
        Parameter CURITR {
            IndexDomain: M1;
            InitialData: 2;
        }
        Parameter AIMEFDBG {
            Text: "Aimms Debug indicator. if =1, then write cplex mps files and all solution output";
            Range: integer;
        }
        Parameter EMMBENCH {
            Text: {
                "Runtime option for benchmarking constraints. 1 regular, 2: loosen a little in years 2 and 3; 3 loosen alot"
            }
            Range: integer;
        }
        Parameter EMMBMSW {
            Text: {
                "Runtime option for benchmarking constraints. 1 regular, 2: loosen a little in years 2 and 3; 3 loosen alot"
            }
            Range: integer;
            Definition: EMMBENCH;
        }
        Parameter AB32SW {
            Text: "Runtime option to include (1) or exclude (0) California AB32 or SB32 cap on co2 emissions";
            Range: integer;
        }
        File OutToNEMS {
            Name: OutToNEMS_FileName;
            Device: Disk;
            Mode: replace;
        }
        StringParameter OutToNEMS_FileName {
            Text: "Name of output file to write results back to NEMS.  includes year and iteration in name.";
            InitialData: "OutToNEMS_yyyy_ii.txt";
        }
        File NEMSMessageInFile {
            Name: sMessageInFile;
            Device: Disk;
            Mode: replace;
        }
        File NEMSMessageOutFile {
            Name: sMessageOutFile;
            Device: Disk;
            Mode: replace;
        }
        StringParameter sMessageInFile {
            Definition: "monitor.in.txt";
        }
        StringParameter sMessageOutFile {
            Definition: "monitor.out.txt";
        }
    }
    Procedure ReadCompositeData {
        Body: {
            ! reads composite_YYYY_II.txt were yyyy is curcalyr and II is NEMS iteration
            put formatstring("running efd for year %i, iteration %i\n",curcalyr(1),curitr(1));
            ! read sparse array data from NEMS via composite tables
            sDataYearFile:="composite_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt";
            put formatstring("the composite data file is %s\n", sDataYearFile);
            if fileexists(sDataYearFile) then
                   read from file sDataYearFile in merge mode;
            else
                   put "composite data file not found \n ";
            endif;
            display cyr;
            display mnumyr(cyr);
        }
    }
    Procedure MainExecution {
        Body: {
            ! Read coefficient data formatted in composite tables from NEMS (files: composite_yyyy_ii.txt)
             ReadCompositeData();
             if(aimefdbg=1) then ! for validation/debugging, options vary
               option display_infeasibility_analysis:=1,
                      linear_presolve:="off",
                      eliminate_nonvar_columns:="off",
                      infeasibility_finder:="on",
                      postsolve_continuous_variables:="no rounding",
                      Store_complete_solver_solution:="yes",
                      solver_column_row_mapping:="at_every_solve",
                      "CPLEX_12_6_3".MPS := "at every solve";
             else ! use speed-up options: most important is presolve on
               option display_infeasibility_analysis:="off",
                      linear_presolve:="off", ! for now off; later on
                      eliminate_nonvar_columns:="off",  ! for now off, later "automatic",
                      infeasibility_finder:="off",
                      postsolve_continuous_variables:="no rounding",
                      Store_complete_solver_solution:="yes",
                      solver_column_row_mapping:="never",
                      "CPLEX_12_6_3".MPS := "never";
             endif;
            
            PlantGroup2PlantGroupOrd_Mapping;
            EDBIO;
            
             ! solveProblem tries to solve without safeties first.  if not optimal, tries
             ! to solve with safeties.
            
              solveProblem();
            
                 calc_prc();
                 WriteDebugfile();
            
             ! Save values of run time options in the startup data file, efd.data, to be loaded next open. Other data
             ! comes from "composite_yyyy_ii.txt" so don't save that.
             ! Also save the data into a year-iteration-specific data file for debugging. For debugging a given problem
             ! year, select from menu "Data..Load Case...As Active.." and select one of the "efddbg_year_it.data" files.
            
             ! always save most recent data to efd.data that is read in automatically when project is opened.
             casefilesave("data\\efd.data",Run_time_option_identifiers);
            
             ! Store the solution for each year/nems-iteration for post-run analysis
             sDataYearFile:="data\\\\efddbg"+formatstring("%i",curcalyr(1))+"_"+formatstring("%i",curitr(1))+".data";
             casefilesave(sDataYearFile,Run_time_option_identifiers);
            
             ! Write solution values needed for EMM OML calls to wfscol and wfsrow so as to substiture AIMMS LP solution for nems LP solution
             WriteToNEMS();      ! write solution values for rows and columns
             PassBacktoNEMS();  ! write variables derived from solution that are declared in Section TransferVariable_Output
        }
    }
    Procedure SolveProblem {
        Body: {
                                                                                                                                    empty AllVariables;
                                                                                                                                    empty allConstraints;
                                                                                                                                    EFD_WithSafety.ProgramStatus := ' ';
                                                                                                                                    solve EFD_WithoutSafety where
                                                                                                                                                   LP_method := "Barrier";
                                                                                                                                    if (EFD_WithoutSafety.ProgramStatus <> 'Optimal') then
                                                                                                                                       put "EFD_WithoutSafety.ProgramStatus is ", EFD_WithoutSafety.ProgramStatus ;
                                                                                                                                    else
                                                                                                                                       put "Optimal solution WITHOUT Safety variables found for" ,curcalyr(1), " iteration", curitr(1) ;
                                                                                                                                    endif;
            
            
                                                                                                                                    if(EFD_WithoutSafety.ProgramStatus <> 'Optimal') then
                                                                                                                                       solveWithSafety() ;
                                                                                                                                    endif;
        }
    }
    Procedure SolveWithSafety {
        Body: {
            empty AllVariables;
            empty disabledConstraints;
            solve EFD_WithSafety where
                           LP_method := "Barrier";
            if (EFD_WithSafety.ProgramStatus <> 'Optimal') then
               put "EFD_WithSafety.ProgramStatus is ", EFD_WithSafety.ProgramStatus ;
            else
               put "Optimal solution WITH Safety variables found for" ,curcalyr(1), " iteration", curitr(1) ;
            endif;
        }
    }
    Procedure FillSolutionVars {
        Body: {
            ! Read data formatted in composite tables from NEMS (files: composite_yyyy_ii.txt)
            ReadCompositeData();
            PassBacktoNEMS();  ! write variables derived from solution that are declared in Section TransferVariable_Output
        }
    }
    Procedure ReadSetData {
        Body: {
            ! the following command is invoked in MainInitialization, so this procedure would need to be invoked only if a
            ! change is made to efdsetdata.dat and you want to re-read (outside of an NEMS invocation).
               emptyAllSets();
               read from file "efdsetdata.dat" ;
        }
    }
    DeclarationSection NEMS_Monitor_Identifiers {
        Parameter CountSleep;
        StringParameter sAction {
            Text: "Read from monitor.in.txt and indicates what action to take at direction of NEMS";
        }
        StringParameter sStatusMessage;
    }
    Procedure NEMS_Monitor {
        Body: {
                                                                                                                                       ! the initial CaseFileLoad is required because this procedure is invoked from the command line.
                                                                                                                                       ! Aimms doesn't load case files automatically, as specified in the project settings, when a procedure is invoked from
                                                                                                                                       ! the command line.
                                                                                                                                        CaseFileLoad(url: "data\\efd.data",0);	!Load case file "CaseName" and 0 means destroy previous runtime libraries (?)
                                                                                                                                        ReadSetData;
                                                                                                                                         ! the following allows the aimms project to be kept open (when keepopen=1) and to later Quit at direction of NEMS,
                                                                                                                                         ! or to run and exit immediately. There is sometimes a delay with the Quit option due to error trapping, so NEMS is set up to wait for
                                                                                                                                         ! an action message of "Exited" written by the MainTermination procedure right before aimms exits.
                                                                                                                                         CountSleep := 0;
                                                                                                                                         ! count sleep/wake cycles while waiting for direction from nems via sAction in the message file, monitor.in.txt
                                                                                                                                         while ( CountSleep <= 2000 ) do
                                                                                                                                            if fileexists(sMessageInFile) then
                                                                                                                                            ! read sAction, current model year, and current iteration from sMessageInFile
                                                                                                                                              sAction:=" ";
                                                                                                                                              read from file sMessageInFile in merge mode;
                                                                                                                                            else
                                                                                                                                              put "the NEMS message file not found, CountSleep=",CountSleep," \n ";
                                                                                                                                            endif;
                                                                                                                                            if sAction = "MainExecution" then
                                                                                                                                              sAction:="executing";    ! Action message to tell NEMS I'm executing
                                                                                                                                              write sAction to file NEMSMessageOutFile in replace mode;
            
                                                                                                                                              dialogProgress(""); ! remove progress dialog
                                                                                                                                              sStatusMessage := formatstring("Invoking MainExecution for %s",curcalyr('1')) +
                                                                                                                                                                formatstring(", iteration %s",curitr('1'));
            
                                                                                                                                              put sStatusMessage;
            
                                                                                                                                              MainExecution;
                                                                                                                                              sAction:=formatstring("Completed %s,",curcalyr('1')) +
                                                                                                                                                       formatstring("iteration %s ",curitr('1')) ;    ! Action message to tell NEMS I'v completed this year, iteration
                                                                                                                                              write sAction to file NEMSMessageOutFile in replace mode;
                                                                                                                                              CountSleep:=0;
                                                                                                                                              sStatusMessage := "Monitoring NEMS message file("+sMessageInFile+") for "+formatstring("%s",CountSleep/2)+" seconds. Hit Ctrl+Shift+S to Stop this monitoring\n";
                                                                                                                                              put sStatusMessage;
                                                                                                                                              Delay(1);    ! give nems a chance to pick up status and create new monitor.in.txt file
                                                                                                                                            elseif sAction = "FillSolutionVars" then
                                                                                                                                              sAction:="executing";    ! Action message to tell NEMS I'm executing
                                                                                                                                              write sAction to file NEMSMessageOutFile in replace mode;
            
                                                                                                                                              dialogProgress(""); ! remove progress dialog
                                                                                                                                              sStatusMessage := formatstring("Invoking FillSolutionVars for %s",curcalyr('1')) +
                                                                                                                                                                formatstring(", iteration %s",curitr('1'));
            
                                                                                                                                              put sStatusMessage;
            
                                                                                                                                              FillSolutionVars;
                                                                                                                                              sAction:=formatstring("Completed %s,",curcalyr('1')) +
                                                                                                                                                       formatstring("iteration %s ",curitr('1')) ;    ! Action message to tell NEMS I'v completed this year, iteration
                                                                                                                                              write sAction to file NEMSMessageOutFile in replace mode;
                                                                                                                                              CountSleep:=0;
                                                                                                                                              sStatusMessage := "Monitoring NEMS message file("+sMessageInFile+") for "+formatstring("%s",CountSleep/2)+" seconds. Hit Ctrl+Shift+S to Stop this monitoring\n";
                                                                                                                                              put sStatusMessage;
                                                                                                                                              Delay(1);    ! give nems a chance to pick up status and create new monitor.in.txt file
            
                                                                                                                                            elseif sAction = "Quit" then ! NEMS says to exit aimms
                                                                                                                                              CountSleep:=2000;
                                                                                                                                            else
                                                                                                                                              sStatusMessage := "Monitoring NEMS message file("+sMessageInFile+") for "+formatstring("%s",CountSleep/2)+" seconds. Hit Ctrl+Shift+S to Stop this monitoring\n";
                                                                                                                                              Delay(.5);
                                                                                                                                            endif;
                                                                                                                                            dialogProgress(sStatusMessage,round(100*CountSleep/2000));
                                                                                                                                            CountSleep += 1;
            
                                                                                                                                         endwhile;
                                                                                                                                         if CountSleep>=2001 then
                                                                                                                                           put "Quit directive found in monitor.in.txt. Exiting AIMMS";
                                                                                                                                         else
                                                                                                                                           put "Wait time exceeded. Exiting Aimms";
                                                                                                                                         endif;
                                                                                                                                         exitAimms; ! causes MainTermination to run and for aimms to exit. MainTermination sends message "Exited" back to nems.
        }
        Comment: {
            "For KEEPOPEN=1 option, This routines cause AIMMS to sleep and periodically wake to check a message input file from NEMS. If the file
            is found, AIMMS reads it and re-invokes mainexecution if indicated, or closes the project.
            After invoking mainExecution, it writes an output message file indicating completion.
            This routine then continues the sleep-wait cycle."
        }
    }
    Procedure MainInitialization;
    Procedure MainTermination {
        Body: {
            sAction:="Exited";    ! Action message for NEMS
            write sAction to file NEMSMessageOutFile in replace mode;
            return 1;
        }
    }
    Procedure WriteParameters {
        Body: {
            display AllParameters ;
            display SafetyVariables_ ;
            display K ;
        }
    }
    Procedure EmptyAllSets {
        Body: {
            empty AllSets ;
        }
    }
    DeclarationSection TranslationSetRelated {
        ElementParameter OilRegion_to_Census {
            IndexDomain: OilRegion;
            Range: CensusRegion_;
            Definition: element(CensusRegion_,ORD(OilRegion));
        }
        ElementParameter int_fuel_region_element_oil {
            IndexDomain: (OilRegion);
            Range: int_fuel_region_;
            Definition: element(int_fuel_region_,ord(OilRegion));
        }
        ElementParameter int_fuel_region_element {
            IndexDomain: FuelRegion;
            Range: int_fuel_region_;
            Definition: element(int_fuel_region_,ord(FuelRegion));
        }
        ElementParameter FuelType_UIRL_element {
            Range: FuelType_;
            Definition: element(FuelType_,UIRL('1'));
        }
        ElementParameter Three_element {
            IndexDomain: GasSeason;
            Range: Three_;
            Definition: element(Three_, ord(GasSeason));
        }
        ElementParameter OGSMRegion_element {
            IndexDomain: OGSMRegion;
            Range: OGSMRegion_;
            Definition: element(OGSMRegion_, ord(OGSMRegion));
        }
        ElementParameter OGSMReg_LastElement {
            Range: OGSMReg_;
            Definition: last(OGSMReg_);
        }
        ElementParameter Thirteen_element {
            IndexDomain: OGSMSector;
            Range: Thirteen_;
            Definition: element(Thirteen_, ord(OGSMSector));
        }
        ElementParameter EPCLMP_to_CoalDemandRegion {
            IndexDomain: FuelRegion;
            Range: CoalDemandRegion_;
            Definition: element(CoalDemandRegion_, EPCLMP(FuelRegion));
        }
        ElementParameter Coal_PlantType_to_FuelType {
            IndexDomain: PlantType | PlantType >= 'B1X' and PlantType <= 'ISX';
            Range: FuelType_;
            Definition: element(FuelType_,ord(StringToelement(PlantType_ECP_, Substring(PlantType,1,2))));
        }
        ElementParameter DispatchableECP_WICS {
            IndexDomain: SCALARSet;
            Range: DispatchableECP_;
            Definition: element(DispatchableECP_,WICS('1'));
        }
        ElementParameter DispatchableECP_element {
            IndexDomain: PlantType_ECP | PlantType_ECP >= 'B1' and PlantType_ECP <= 'GN';
            Range: DispatchableECP_;
            Definition: element(DispatchableECP_,ord(PlantType_ECP));
        }
        ElementParameter WFLTP_to_FuelType {
            IndexDomain: (PlantType, FuelsPerPlant);
            Range: FuelType_;
            Definition: element(FuelType_,WFLTP(PlantType,FuelsPerPlant));
        }
        ElementParameter Coal_PlantType_ECP {
            IndexDomain: PlantType | PlantType >= 'B1X' and PlantType <= 'ISX';
            Range: PlantType_ECP_;
            Definition: StringToelement(PlantType_ECP_, Substring(PlantType,1,2));
        }
        ElementParameter PlantType_ECP_to_PlantType {
            IndexDomain: PlantType_ECP;
            Range: PlantType_;
            Definition: element(PlantType_,UPEFDT(PlantType_ECP));
        }
        ElementParameter EPGSMP_to_int_fuel_region {
            IndexDomain: FuelRegion;
            Range: int_fuel_region_;
            Definition: element(int_fuel_region_, EPGSMP(FuelRegion));
        }
        ElementParameter EPCLMP_to_int_fuel_region {
            IndexDomain: FuelRegion;
            Range: int_fuel_region_;
            Definition: element(int_fuel_region_, EPCLMP(FuelRegion));
        }
        ElementParameter CanadianExportRegion_element {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion);
            Range: SupplyRegionAll_;
            Definition: element(SupplyRegionAll_,  (ord(Last(SupplyRegion_,SupplyRegion)) + ord(CanadianSupplyRegion)));
        }
        ElementParameter EPCSMP_to_CensusRegion {
            IndexDomain: FuelRegion;
            Range: CensusRegion_;
            Definition: element(CensusRegion_, EPCSMP(FuelRegion));
        }
        ElementParameter Max_Slice_element {
            Range: Slice_;
            Definition: element(slice_,Max((Season,SupplyRegion),ELNVCT(Season,SupplyRegion)));
        }
        ElementParameter Max_Group_element {
            Range: Group_;
            Definition: element(Group_,Max((SliceSorted,Season,SupplyRegion),ELGRP(SliceSorted,Season,SupplyRegion)));
        }
        ElementParameter Max_Segment_element {
            Range: Segment_;
            Definition: element(Segment_,Max((SliceSorted,Season,SupplyRegion),ELSEG(SliceSorted,Season,SupplyRegion)));
        }
        ElementParameter ImportStep_element {
            IndexDomain: CanadianSupplyStep;
            Range: ImportStep_;
            Definition: element(ImportStep_,ord(CanadianSupplyStep));
        }
        ElementParameter CO2CapGroup_element {
            IndexDomain: CarbonRegion;
            Range: CO2CapGroup_;
            Definition: element(CO2CapGroup_,ord(CarbonRegion));
        }
        ElementParameter SupplyRegion_ALL_element {
            IndexDomain: SupplyRegion;
            Range: SupplyRegionAll_;
            Definition: element(SupplyRegionAll_,ord(SupplyRegion));
        }
        ElementParameter NoxRegion_Element {
            IndexDomain: INOXP;
            Range: NOXRegion_;
            Definition: Element(NOXRegion_,ord(INOXP));
        }
        ElementParameter Segment_element {
            IndexDomain: (SliceSorted,Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
            Range: Segment_;
            Definition: element(Segment_,ELSEG(SliceSorted,Season,SupplyRegion));
        }
        ElementParameter Segment2_element {
            IndexDomain: (Slice,Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
            Range: Segment_;
            Definition: Segment_element(Slice2SliceSorted_element(Slice, Season, SupplyRegion), Season, SupplyRegion);
        }
        ElementParameter Group_element {
            IndexDomain: (SliceSorted,Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
            Range: Group_;
            Definition: element(Group_,ELGRP(SliceSorted,Season,SupplyRegion));
        }
        ElementParameter Group2_element {
            IndexDomain: (Slice,Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
            Range: Group_;
            Definition: Group_element(Slice2SliceSorted_element(Slice, Season, SupplyRegion), Season, SupplyRegion);
        }
        ElementParameter cyr {
            Range: MNUMYR_;
            Definition: element(MNUMYR_,CURIYR('1'));
        }
        ElementParameter Slice_element {
            IndexDomain: (Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
            Range: Slice_;
            Definition: element(slice_,ELNVCT(Season,SupplyRegion));
        }
        ElementParameter PlantGroupOrd2PlantGroup {
            IndexDomain: PlantGroup;
            Range: PlantGroupOrd_;
        }
        Parameter PlantGroup2PlantGroupOrd_Map {
            IndexDomain: (PlantGroup,PlantGroupOrd);
        }
        ElementParameter EFD_GRPS_F_Element {
            IndexDomain: PlantGroupOrd;
            Range: PlantGroup_;
            Definition: element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd));
        }
        ElementParameter NM_BM_SUP_STP_Element {
            Range: BiomassProductionStep_;
            Definition: Element(BiomassProductionStep_,NM_BM_SUP_STP('1'));
        }
        ElementParameter UG_EFDt_to_PlantType {
            IndexDomain: PlantGroup;
            Range: PlantType_;
            Definition: Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup)));
        }
        ElementParameter UG_ECPt_to_PlantGroup {
            IndexDomain: PlantGroup;
            Range: PlantType_ECP_;
            Definition: Element(PlantType_ECP_,UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup)));
        }
        ElementParameter UG_ECPt_to_PlantGroupOrd {
            IndexDomain: PlantGroupOrd;
            Range: PlantType_ECP_;
            Definition: Element(PlantType_ECP_,UG_ECPt(PlantGroupOrd));
        }
        ElementParameter UG_EMM_RG_to_SupplyRegion {
            IndexDomain: PlantGroup;
            Range: SupplyRegion_;
            Definition: Element(SupplyRegion_,UG_EMM_RG(PlantGroupOrd2PlantGroup(PlantGroup)));
        }
        ElementParameter UG_EMM_RG_to_PlantGroupOrd {
            IndexDomain: PlantGroupOrd;
            Range: SupplyRegion_;
            Definition: Element(SupplyRegion_,UG_EMM_RG(PlantGroupOrd));
        }
        Parameter SliceSliceSortedMapping {
            IndexDomain: (SliceSorted,Slice,Season,SupplyRegion);
            Definition: {
                IF (Efd_Slice_ID(Element(Group_,ELGRP(SliceSorted,Season,SupplyRegion)),Element(Segment_,ELSEG(SliceSorted,Season,SupplyRegion))) = ORD(Slice)) THEN
                	1.0
                ELSE
                	0.0
                ENDIF
            }
        }
        ElementParameter Slice2SliceSorted_element {
            IndexDomain: (Slice,Season,SupplyRegion);
            Range: SliceSorted_;
            Definition: first(SliceSorted|SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion)=1);
        }
    }
    DeclarationSection DebugRelated {
        Parameter Match_cRHS_rZOGSMeq {
            IndexDomain: (OGSMRegion);
            Definition: {
                (ccalc_cRHS_rZOGSMeq(OGSMRegion) - cpass_cRHS_rZOGSMeq(OGSMRegion))
                /$ ccalc_cRHS_rZOGSMeq(OGSMRegion)  *100
            }
        }
        Parameter Match_cNTR_EFDCOSTS {
            IndexDomain: (FuelRegion,OGSMRegion);
            Definition: {
                (ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) - cpass_cNTR_EFDCOSTS(FuelRegion,OGSMRegion))
                /$ ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) *100
            }
        }
        Parameter Match_cNTO_EFDCOSTS {
            IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Definition: {
                (ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) - cpass_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo))
                /$ ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
            }
        }
        Parameter Match_cNTO_rZOTHRge {
            IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Definition: {
                (ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) - cpass_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo))
                !/$ ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
            }
        }
        Parameter Match_cNOT_rZOTHRge {
            IndexDomain: (OGSMRegion,OGSMSector);
            Definition: {
                (ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) - cpass_cNOT_rZOTHRge(OGSMRegion,OGSMSector))
                !/$ ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) *100
            }
        }
        Parameter Match_cNOT_EFDCOSTS {
            IndexDomain: (OGSMSector,OGSMRegion);
            Definition: {
                (ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) - cpass_cNOT_EFDCOSTS(OGSMSector,OGSMRegion))
                !/$ ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) *100
            }
        }
        Parameter Match_cNOT_UBOUND {
            IndexDomain: (OGSMSector,OGSMRegion);
            Definition: {
                (ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) - cpass_cNOT_UBOUND(OGSMSector,OGSMRegion))
                /$ ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) *100
            }
        }
        Parameter Match_cB_rS_WD_allle {
            IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                !/$ ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_rNGle {
            IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                /$ ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_rRSle {
            IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                !/$ ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_rDSle {
            IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                !/ ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_rCFGn {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                !/$ ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_EFDCOSTS {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                !/$ ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                !/$ ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                !/$ ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_rCARBONle {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                /$ ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_rCLle {
            IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                !/$ ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cB_rCARBONn {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Definition: {
                (ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) - cpass_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                /$ ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
            }
        }
        Parameter Match_cRHS_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice);
            Definition: (ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) - cpass_cRHS_rIMle(SupplyRegion,Season,Slice))/$ ccalc_cRHS_rIMle(SupplyRegion,Season,Slice);
        }
        Parameter Match_cTR_UBOUND {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Definition: (ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) - cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))/$ ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter Match_cTR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Definition: (ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) - cpass_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))/$ ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter Match_cTR_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Definition: (ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) - cpass_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto))/$ ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter Match_cTR_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Definition: (ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) - cpass_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto))/$ ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter Match_cTC_EFDCOSTS {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
            Definition: (ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) - cpass_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))/$ ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
        }
        Parameter Match_cTC_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Definition: (ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) - cpass_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2))/$ ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
        }
        Parameter Match_cTC_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
            Definition: (ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) - cpass_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2))/$ ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
        }
        Parameter Match_cTR_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Definition: (ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) - cpass_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto))/$ ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter Match_cRHS_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice);
            Definition: (ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) - cpass_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice))/$ ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice);
        }
        Parameter Match_cTC_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
            Definition: (ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) - cpass_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep))/$ ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
        }
        Parameter Match_cRHS_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice);
            Definition: (ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) - cpass_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice))/$ ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice);
        }
        Parameter Match_cTR_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Definition: (ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) - cpass_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))/$ ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter INTRUP {
            IndexDomain: (SupplyRegion)  | SupplyRegion in SupplyRegion_SUB_;
            Definition: (ETEXPE('1',SupplyRegion,cyr) - ETIMPE('1',SupplyRegion,cyr)) /$ Sum(Season,EETIME(Season,SupplyRegion));
        }
        Parameter Match_cES_EFDCOSTS {
            IndexDomain: (SupplyRegion,Season,Slice);
            Definition: ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) - cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice);
            Comment: {
                "
                if abs(ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) - cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice)) > 0.01 then
                    \"Yes\"
                else
                    \" \"
                endif"
            }
        }
        StringParameter Match_cSPx_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Definition: {
                if abs(ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) - cpass_cSPx_UBOUND(SupplyRegion,Season,Slice)) /$ ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) < 0.0001 then
                    "Yes"
                else
                    " "
                endif
            }
        }
        StringParameter Match_cSPx_LBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Definition: {
                if abs(ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) - cpass_cSPx_LBOUND(SupplyRegion,Season,Slice)) /$ ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) < 0.0001 then
                    "Yes"
                else
                    " "
                endif
            }
        }
    }
    DeclarationSection IntermediateParameterDeclare {
        Parameter ECP_RCF {
            InitialData: 5;
            Comment: "MAXIMUM NUMBER OF ECP BIOMASS COFIRING RETROFIT CATEGORIES";
        }
        Parameter CTLSUM {
            IndexDomain: CoalDemandRegion;
            Definition: Sum(CoalSupplyCurve,CTLBTU(CoalSupplyCurve,CoalDemandRegion,cyr));
        }
        Parameter EFD_CAP {
            Range: integer;
            Definition: EFD_DSP('1') + EFD_RNW('1') + EFD_DGN('1');
        }
        Parameter Max_Load {
            IndexDomain: (Season,SupplyRegion) | SupplyRegion in SupplyRegion_SUB_;
            Definition: Max((Slice) | Slice <= Slice_element(Season,SupplyRegion),UTHGHT(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion),SupplyRegion));
        }
    }
    Section Move_completed_ccalc_parameters_here {
        Comment: {
            "After successfully coding a ccalc_ parameter, move it up to this section.  Then edit efdArrays_all.txt,
            find the corresponding \"cpass_\" parameter, and change the pass indicator to \"0\".  The next time arraycode.exe is run,
            if will omit the declaration of the ccalc_ parameter in the auto-generated section below this section."
        }
        Section Subroutines {
            Procedure Slice2SliceSorted_Mapping {
                Body: {
                    !for (SliceSorted) do
                    !  Slice2SliceSorted_element((Slice, Season, SupplyRegion)|SliceSliceSortedMapping(SliceSorted, Slice, Season, SupplyRegion)=1):= SliceSorted;
                    !endfor;
                }
            }
            Procedure PlantGroup2PlantGroupOrd_Mapping {
                Body: {
                    !if PlantGroup=element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd)) then
                    for (PlantGroupOrd) do!
                      PlantGroupElement:=element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd));
                      while (PlantGroupElement) do
                         PlantGroup2PlantGroupOrd_Map(PlantGroupElement, PlantGroupOrd):=1;
                         PlantGroupOrd2PlantGroup(PlantGroupElement):=PlantGroupOrd;
                         PlantGroupElement:=element(PlantGroup_,EFD_GRPS_N(PlantGroupElement));
                      endwhile;
                    endfor;
                }
                ElementParameter PlantGroupElement {
                    Range: PlantGroup_;
                }
            }
            Procedure EDBIO {
                Body: {
                    !Account for Other Uses of Biomass
                    for (BiomassSector) do
                    	if BiomassSector='RS' then 
                    	BMSector:=BiomassSector; 
                    	MP_BM(BMSector, BiomassType):=MP_BM_RS(BiomassType); !Residential
                    	QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMRSCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Residential
                    	endif;
                    	if BiomassSector='CM' then 
                    	BMSector:=BiomassSector; 
                    	MP_BM(BMSector, BiomassType):=MP_BM_CM(BiomassType); !Commercial
                    	QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMCMCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Commercial
                    	endif;
                    	if BiomassSector='IN' then 
                    	BMSector:=BiomassSector; 
                    	MP_BM(BMSector, BiomassType):=MP_BM_IN(BiomassType); !Industrial
                    	QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMINCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Industrial
                    	endif;
                    	if BiomassSector='H2' then 
                    	BMSector:=BiomassSector; 
                    	MP_BM(BMSector, BiomassType):=MP_BM_H2(BiomassType); !Hydrogen Production
                    	QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMH2CL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Hydrogen Production
                    	endif;
                    	if BiomassSector='ET' then 
                    	BMSector:=BiomassSector; 
                    	MP_BM(BMSector, BiomassType):=MP_BM_ET(BiomassType); !Cellulosic Ethanol Production
                    	QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMETCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Cellulosic Ethanol Production
                    	endif;
                    	if BiomassSector='BT' then 
                    	BMSector:=BiomassSector; 
                    	MP_BM(BMSector, BiomassType):=MP_BM_BT(BiomassType); !Biomass to Liquids
                    	QBMCL(BMSector, BiomassType, CoalDemandRegion_ALT2):=max(0, QBMBTCL(BiomassType, CoalDemandRegion_ALT2, cyr)); !Biomass to Liquids
                    	endif;
                    endfor;
                    
                    ccalc_cBiomassOtherUsage_LBOUND((CoalDemandRegion_ALT2, BiomassSector, BiomassType) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0
                    and MP_BM(BiomassSector, BiomassType)>0) := QBMCL(BiomassSector, BiomassType, CoalDemandRegion_ALT2);  !ED$BIO,9 ED$BIO,11 ED$BIO,13 ED$BIO,15 ED$BIO,17 ED$BIO,19
                    ccalc_cBiomassOtherUsage_UBOUND((CoalDemandRegion_ALT2, BiomassSector, BiomassType) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0
                    and MP_BM(BiomassSector, BiomassType)>0) := QBMCL(BiomassSector, BiomassType, CoalDemandRegion_ALT2);  !ED$BIO,9 ED$BIO,11 ED$BIO,13 ED$BIO,15 ED$BIO,17 ED$BIO,19
                    ccalc_cBiomassOtherUsage_rS_WD_typele((BiomassType, CoalDemandRegion_ALT2, BiomassSector) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0
                    and MP_BM(BiomassSector, BiomassType)>0 and EFDMAT('1')=0) := 1;     !ED$BIO,8 ED$BIO,10 ED$BIO,12 ED$BIO,14 ED$BIO,16 ED$BIO,18
                    
                    !Production Vectors (Supply Steps)
                    BP_Step1:=first(BiomassProductionStep);
                    BP_StepXX:=last(BiomassProductionStep);
                    coeff_UBOUND((CoalDemandRegion_ALT2, BiomassType, BP_Step1) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0):=   !first step
                    WDSUP_Q(BP_Step1, CoalDemandRegion_ALT2, cyr, BiomassType);
                    coeff_UBOUND((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep) | BiomassProductionStep>BP_Step1 and BiomassProductionStep<= NM_BM_SUP_STP_Element
                    and WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0):=   !other steps
                    WDSUP_Q(BiomassProductionStep, CoalDemandRegion_ALT2, cyr, BiomassType)-WDSUP_Q(BiomassProductionStep-1, CoalDemandRegion_ALT2, cyr, BiomassType);
                    coeff_UBOUND((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep) | BiomassProductionStep= NM_BM_SUP_STP_Element+1
                    and WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0):=  99999.9; ! steps > max step
                    
                    ccalc_cBP_type_UBOUND((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)| WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and
                      coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)>0):= coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep);   !ED$BIO,5
                    
                    ! Objective Function
                    ccalc_cBP_type_EFDCOSTS((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)| WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and 
                      BiomassProductionStep<= NM_BM_SUP_STP_Element and coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)>0):=
                         WDSUP_P(BiomassProductionStep, CoalDemandRegion_ALT2, cyr, BiomassType);										!ED$BIO,6
                    ccalc_cBP_type_EFDCOSTS((CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)| WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and
                       BiomassProductionStep= NM_BM_SUP_STP_Element+1 and coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)>=0):= 9999.9;
                    
                    ! Put in Production Row   
                    ccalc_cBP_type_rS_WD_typele((BiomassType, CoalDemandRegion_ALT2, BiomassProductionStep) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and     !ED$BIO,7
                       BiomassProductionStep<= NM_BM_SUP_STP_Element+1 and coeff_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)>0 and
                       EFDMAT('1')=0):= -1;
                    ccalc_cBP_type_rS_WD_typele((BiomassType, CoalDemandRegion_ALT2, BP_StepXX) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and     !ED$BIO,4
                       EFDMAT('1')=0):= 1;
                    
                    ccalc_cBP_type_rS_WD_allle((CoalDemandRegion_ALT2, BiomassType, BP_StepXX)| WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0 and     !ED$BIO,3
                       EFDMAT('1')=0):= -1;
                }
                Comment: "Coefficients for ED$BIO,1 and ED$BIO,2 calls are 0, so corresponding cpass and ccalc parameters do not exist";
                Parameter MP_BM {
                    IndexDomain: (BiomassSector,BiomassType);
                }
                Parameter QBMCL {
                    IndexDomain: (BiomassSector,BiomassType,CoalDemandRegion);
                }
                ElementParameter BP_Step1 {
                    Range: BiomassProductionStep_;
                }
                ElementParameter BP_StepXX {
                    Range: BiomassProductionStep_;
                }
                ElementParameter BMSector {
                    Range: BiomassSector_;
                }
                Parameter coeff_UBOUND {
                    IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
                }
            }
            Procedure EDPM {
                Comment: {
                    "!Coefficients for ED$PM,7 ED$PM,8 ED$PM,9 ED$PM,10 ED$PM,11 ED$PM,12 and corresponding cpass/ccalc parameters do not exist"
                }
            }
            Procedure OPHYD_sub {
                Body: {
                    !Do OBJ coefficient here
                    !CREDIT PRICE ADJUSTMENT DEPENDS ON WHETHER EXISTING GEN IS GIVEN CREDIT
                    if UPRNWREG('1') = 1 then
                       RPSCST(PlantGroupOrd):= EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd)));
                       RPSCST((PlantGroupOrd)|UPRNWEXG(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd))>0 and ULVINT(EFD_GRPS_F_Element(PlantGroupOrd))=1):=
                    	  EPRPSPR(cyr) * (UPRNWBND(cyr) - UPRNWSHR(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd)) * (1.0 - UPRNWEXG(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd))));
                    !   RPSCST((PlantGroupOrd)|UPRNWBAS(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd))>0):=0  !UPRNWBAS is missing
                    elseif UPRNWREG('2') = 1 then
                       RPSCST(PlantGroupOrd):=EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(PlantGroupOrd),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(PlantGroupOrd)) -
                           UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd),UG_EMM_RG_to_PlantGroupOrd(PlantGroupOrd)));
                       RPSCST((PlantGroupOrd)|UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd),UG_EMM_RG_to_PlantGroupOrd(PlantGroupOrd)) >0 AND
                          ULVINT(EFD_GRPS_F_Element(PlantGroupOrd))= 1):= EPRPSPRR(UG_EMM_RG_to_PlantGroupOrd(PlantGroupOrd),cyr) * (UPRNWBNDR(cyr,UG_EMM_RG_to_PlantGroupOrd(PlantGroupOrd)) -
                           UPRNWSHRR(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd),UG_EMM_RG_to_PlantGroupOrd(PlantGroupOrd)) * 
                           (1.0 - UPRNWEXGR(UG_ECPt_to_PlantGroupOrd(PlantGroupOrd),UG_EMM_RG_to_PlantGroupOrd(PlantGroupOrd))));
                    endif;
                }
                Parameter RPSCST {
                    IndexDomain: PlantGroupOrd;
                }
            }
            Function ELNGSCRV_Function {
                Arguments: (Value);
                IndexDomain: ::GasProductionStep;
                Body: {
                    !  SET VARIABLES WHICH DON'T CHANGE BASED ON VALUE COMING IN
                    
                    XQBASE := NGSCRV_Q0(cyr);
                    XPBASE := NGSCRV_P0(cyr);
                    
                    AQBASE := XQBASE * (1. - NGSCRV_PER('1'));
                    BQBASE := XQBASE * (1. + NGSCRV_PER('1'));
                    APBASE := XPBASE * (1.- (NGSCRV_PER('1') /NGSCRV_ELAS('3')));
                    BPBASE := XPBASE * (1.+ (NGSCRV_PER('1') /NGSCRV_ELAS('3')));
                    
                    CQBASE := AQBASE * (1. - NGSCRV_PER('2'));
                    DQBASE := BQBASE * (1. + NGSCRV_PER('2'));
                    CPBASE := APBASE * (1.- (NGSCRV_PER('2') /NGSCRV_ELAS('2')));
                    DPBASE := BPBASE * (1.+ (NGSCRV_PER('2') /NGSCRV_ELAS('4')));
                    
                    !  TRANSLATE CHANGE IN CONSUMPTION TO PLACE ON SUPPLY CURVE
                    
                    For (GasProductionStep) do
                    QVAR := NGSCRV_Q(cyr) + (Value(GasProductionStep) /CFNGC(cyr));
                    IF (QVAR <= CQBASE) THEN
                      QBASE := CQBASE;
                      PBASE := CPBASE;
                      ELAS := NGSCRV_ELAS('1');
                    ELSEIF (QVAR <= AQBASE) THEN
                      QBASE := AQBASE;
                      PBASE := APBASE;
                      ELAS := NGSCRV_ELAS('2');
                    ELSEIF (QVAR >= DQBASE) THEN
                      QBASE := DQBASE;
                      PBASE := DPBASE;
                      ELAS := NGSCRV_ELAS('5');
                    ELSEIF (QVAR >= BQBASE) THEN
                      QBASE := BQBASE;
                      PBASE := BPBASE;
                      ELAS := NGSCRV_ELAS('4');
                    ELSE
                      QBASE := XQBASE;
                      PBASE := XPBASE;
                      ELAS  := NGSCRV_ELAS('3');
                    ENDIF;
                    ELNGSCRV_Function(GasProductionStep) := PBASE * (((1/ELAS)*(QVAR-QBASE)/QBASE) + 1);
                    ELNGSCRV_Function((GasProductionStep)|ELNGSCRV_Function(GasProductionStep) <= 0.0) := XPBASE;
                    
                    endfor;
                }
                Comment: "FUNCTION TO DETERMINE WELLHEAD PRICE ASSOCIATED WITH SPECIFIED CHANGE IN UTILITY GAS USE TO CONSTRUCT SUPPLY CURVE";
                Parameter QBASE;
                Parameter XQBASE;
                Parameter AQBASE;
                Parameter BQBASE;
                Parameter CQBASE;
                Parameter DQBASE;
                Parameter PBASE;
                Parameter XPBASE;
                Parameter APBASE;
                Parameter BPBASE;
                Parameter CPBASE;
                Parameter DPBASE;
                Parameter QVAR;
                Parameter ELAS;
                Parameter Value {
                    IndexDomain: ::GasProductionStep;
                    Property: Input;
                }
            }
        }
        DeclarationSection ED_CPP_Completed {
            Parameter ccalc_cRHS_rCO2QNRle {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
                Definition: {
                                 IF (CO2_STDQS('01',cyr) > 0.0) THEN
                    !                 FOR EACH EMM REGION, SHARE OUT CO2 QTY USING PCT OF AFFECTED GEN
                       !                  DO KRG = 1 , EMM_D_ST
                                     SUM(EMMStates,CO2_STDQS(EMMStates,cyr) * EGEN_NRST(last(PlantType_ECPp2),SupplyRegion_ALT2,EMMStates) /$ EGEN_NRST(last(PlantType_ECPp2),last(SupplyRegion),EMMStates))
                        !                 END DO
                                  ENDIF
                }
            }
        }
        DeclarationSection ED_BENCH_Completed {
            Parameter TOLADJ {
                Definition: {
                    !1.0
                          IF (EMMBMSW = 0) THEN   !turn off benchmarking by increasing tolerance a lot
                              10.0
                          ELSEIF (EMMBMSW = 2) THEN  ! loosen benchmarking a little in years 2 and 3
                            IF ((CURIYR('1') + UHBSYR('1')) = UPSTYR('1') + 1) THEN
                               1.5
                            ELSEIF ((CURIYR('1') + UHBSYR('1')) = UPSTYR('1')+2) THEN
                               3.0
                            ELSEIF ((CURIYR('1') + UHBSYR('1')) > UPSTYR('1')+2) THEN
                               5.0
                            ENDIF
                          ELSEIF (EMMBMSW = 3) THEN  ! loosen benchmarking more significantly in years 2 and 3
                            IF ((CURIYR('1') + UHBSYR('1')) = UPSTYR('1') + 1) THEN
                               3.0
                            ELSEIF ((CURIYR('1') + UHBSYR('1')) = UPSTYR('1')+2) THEN
                               5.0
                            ELSEIF ((CURIYR('1') + UHBSYR('1')) > UPSTYR('1')+2) THEN
                               10.0
                            ENDIF
                          ELSEIF (EMMBMSW = 1) THEN
                             1.0
                          ENDIF
                }
            }
            Parameter ccalc_cCONCLB_LBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: CONCLB(**) and OML Rows: LBOUND";
                Definition: {
                    IF (BMCLCON(cyr) > 0) THEN
                    IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
                        UFLCLNR('1',SupplyRegion_ALT2,cyr) + UFLCLNR('2',SupplyRegion_ALT2,cyr)
                      ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
                         (BMCLCON(cyr) * (1.0 - BMCLTOL('1')*TOLADJ))
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cCONCLB_UBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: CONCLB(**) and OML Rows: UBOUND";
                Definition: {
                    IF (BMCLCON(cyr) > 0) THEN
                    IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
                        UFLCLNR('1',SupplyRegion_ALT2,cyr) + UFLCLNR('2',SupplyRegion_ALT2,cyr)
                      ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
                         (BMCLCON(cyr) * (1.0 + BMCLTOL('1')*TOLADJ))
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cCONNGB_LBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: CONNGB(**) and OML Rows: LBOUND";
                Definition: {
                    IF (BMNGCON(cyr) > 0) THEN
                      IF (SupplyRegion_ALT2 = 'us00') THEN
                         (BMNGCON(cyr) * (1.0 - BMNGTOL('1')*TOLADJ))
                      ELSEIF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
                        UFLGFNR('1',SupplyRegion_ALT2,cyr) + UFLGFNR('2',SupplyRegion_ALT2,cyr) +
                        UFLGINR('1',SupplyRegion_ALT2,cyr) + UFLGINR('2',SupplyRegion_ALT2,cyr) +
                        UFLGCNR('1',SupplyRegion_ALT2,cyr) + UFLGCNR('2',SupplyRegion_ALT2,cyr)
                      ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cCONNGB_UBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: CONNGB(**) and OML Rows: UBOUND";
                Definition: {
                    IF (BMNGCON(cyr) > 0) THEN
                    IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
                        UFLGFNR('1',SupplyRegion_ALT2,cyr) + UFLGFNR('2',SupplyRegion_ALT2,cyr) +
                        UFLGINR('1',SupplyRegion_ALT2,cyr) + UFLGINR('2',SupplyRegion_ALT2,cyr) +
                        UFLGCNR('1',SupplyRegion_ALT2,cyr) + UFLGCNR('2',SupplyRegion_ALT2,cyr)
                      ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
                         (BMNGCON(cyr) * (1.0 + BMNGTOL('1')*TOLADJ))
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cGENCLB_LBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: GENCLB(**) and OML Rows: LBOUND";
                Definition: {
                    IF (BMCLGEN(cyr) > 0) THEN
                    IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
                         UGNCLNR('1',SupplyRegion_ALT2,cyr) + UGNCLNR('2',SupplyRegion_ALT2,cyr) +
                         CGNTGEN(SupplyRegion_ALT2,cyr, '1','1') + CGNTGEN(SupplyRegion_ALT2,cyr, '1','2') * 0.001
                      ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
                         (BMCLGEN(cyr) * (1.0 - BMCLTOL('1')*TOLADJ))
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cGENCLB_UBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: GENCLB(**) and OML Rows: UBOUND";
                Definition: {
                    IF (BMCLGEN(cyr) > 0) THEN
                    IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
                         UGNCLNR('1',SupplyRegion_ALT2,cyr) + UGNCLNR('2',SupplyRegion_ALT2,cyr) +
                         CGNTGEN(SupplyRegion_ALT2,cyr, '1','1') + CGNTGEN(SupplyRegion_ALT2,cyr, '1','2') * 0.001
                      ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
                         (BMCLGEN(cyr) * (1.0 + BMCLTOL('1')*TOLADJ))
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cGENNGB_LBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: GENNGB(**) and OML Rows: LBOUND";
                Definition: {
                    IF (BMNGGEN(cyr) > 0) THEN
                    IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
                        UGNGFNR('1',SupplyRegion_ALT2,cyr) + UGNGFNR('2',SupplyRegion_ALT2,cyr) +
                        UGNGINR('1',SupplyRegion_ALT2,cyr) + UGNGINR('2',SupplyRegion_ALT2,cyr) +
                        UGNGCNR('1',SupplyRegion_ALT2,cyr) + UGNGCNR('2',SupplyRegion_ALT2,cyr) +
                        (CGNTGEN(SupplyRegion_ALT2,cyr,'3','1') + CGNTGEN(SupplyRegion_ALT2,cyr,'3','2')) * 0.001
                      ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
                         (BMNGGEN(cyr) * (1.0 - BMNGTOL('1')*TOLADJ))
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cGENNGB_UBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: GENNGB(**) and OML Rows: UBOUND";
                Definition: {
                    IF (BMNGGEN(cyr) > 0) THEN
                    IF (SupplyRegion_ALT2 = 'ascc' or SupplyRegion_ALT2 = 'heco') THEN
                        UGNGFNR('1',SupplyRegion_ALT2,cyr) + UGNGFNR('2',SupplyRegion_ALT2,cyr) +
                        UGNGINR('1',SupplyRegion_ALT2,cyr) + UGNGINR('2',SupplyRegion_ALT2,cyr) +
                        UGNGCNR('1',SupplyRegion_ALT2,cyr) + UGNGCNR('2',SupplyRegion_ALT2,cyr) +
                        (CGNTGEN(SupplyRegion_ALT2,cyr,'3','1') + CGNTGEN(SupplyRegion_ALT2,cyr,'3','2')) * 0.001
                      ELSEIF (SupplyRegion_ALT2 = 'us00') THEN
                         (BMNGGEN(cyr) * (1.0 + BMNGTOL('1')*TOLADJ))
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cCONCLB_rCONCLeq {
                IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
                Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
                Definition: {
                    IF (BMCLCON(cyr) > 0.0) THEN
                      IF (SupplyRegion_ALTto = SupplyRegion_ALT2 and (SupplyRegion_ALTTo <> 'ascc' and SupplyRegion_ALTTo <> 'heco')) THEN
                       -1.0
                      ELSEIF (SupplyRegion_ALT2 <> 'us00' and SupplyRegion_ALTTo = 'us00') THEN
                        1.0
                      ELSE
                       0.0
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cCONNGB_rCONNGeq {
                IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
                Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
                Definition: {
                    IF (BMNGCON(cyr) > 0.0) THEN
                      IF (SupplyRegion_ALTto = SupplyRegion_ALT2 and (SupplyRegion_ALTTo <> 'ascc' and SupplyRegion_ALTTo <> 'heco')) THEN
                       -1.0
                      ELSEIF (SupplyRegion_ALT2 <> 'us00' and SupplyRegion_ALTTo = 'us00') THEN
                        1.0
                      ELSE
                       0.0
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cGENNGB_rGENNGeq {
                IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
                Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
                Definition: {
                    IF (BMNGGEN(cyr) > 0.0) THEN
                      IF (SupplyRegion_ALTto = SupplyRegion_ALT2 and (SupplyRegion_ALTTo <> 'ascc' and SupplyRegion_ALTTo <> 'heco')) THEN
                       -1.0
                      ELSEIF (SupplyRegion_ALT2 <> 'us00' and SupplyRegion_ALTTo = 'us00') THEN
                        1.0
                      ELSE
                       0.0
                     ENDIF
                    ENDIF
                }
            }
            Parameter ccalc_cGENCLB_rGENCLeq {
                IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
                Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
                Definition: {
                    IF (BMCLGEN(cyr) > 0.0) THEN
                      IF (SupplyRegion_ALTto = SupplyRegion_ALT2 and (SupplyRegion_ALTTo <> 'ascc' and SupplyRegion_ALTTo <> 'heco')) THEN
                       -1.0
                      ELSEIF (SupplyRegion_ALT2 <> 'us00' and SupplyRegion_ALTTo = 'us00') THEN
                        1.0
                      ELSE
                       0.0
                     ENDIF
                    ENDIF
                }
            }
        }
        DeclarationSection ED_BIO_Completed {
            Parameter ccalc_cBiomassOtherUsage_LBOUND {
                IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0;
                Text: "OML Columns: B(**)(**)(**)X and OML Rows: LBOUND";
                Definition: {
                                        !Done in EDBIO procedure
                    
                                        !DO I_SUPt = 1 , MNUMFS
                                        ! IF (WDSUP_AVL(I_SUPt) .EQ. 1 .AND. MP_BM_PW(I_SUPt) .GT. 0.0) THEN
                                        !       DO CRG = 1 , NDREG
                                        !!              Account for Other Uses of Biomass
                                        !
                                        !!              Residential
                                        !
                                        !               IF (MP_BM_RS(I_SUPt) .GT. 0.0) THEN
                                        !
                                        !                  COLUMN = 'B' // BR // 'RS' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                        !                  COEFF = QBMRSCL(I_SUPt,CRG,CURIYR)
                                        !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                        !          CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,9')
                                        !             END IF
                                        !
                                        !!              Commercial
                                        !
                                        !               IF (MP_BM_CM(I_SUPt) .GT. 0.0) THEN
                                        !
                                        !                  COLUMN = 'B' // BR // 'CM' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                        !                  COEFF = QBMCMCL(I_SUPt,CRG,CURIYR)
                                        !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                        !
                                        !          CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,11')
                                        !               END IF
                                        !
                                        !!              Industrial
                                        !
                                        !               IF (MP_BM_IN(I_SUPt) .GT. 0.0) THEN
                                        !
                                        !                  COLUMN = 'B' // BR // 'IN' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                        !                  COEFF = QBMINCL(I_SUPt,CRG,CURIYR)
                                        !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                        !
                                        !                  CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,13')
                                        !               END IF
                                        !
                                        !!              Hydrogen Production
                                        !
                                        !               IF (MP_BM_H2(I_SUPt) .GT. 0.0) THEN
                                        !
                                        !                  COLUMN = 'B' // BR // 'H2' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                        !                  COEFF = QBMH2CL(I_SUPt,CRG,CURIYR)
                                        !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                        !
                                        !                  CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,15')
                                        !               END IF
                                        !
                                        !!              Cellulosic Ethanol Production
                                        !
                                        !               IF (MP_BM_ET(I_SUPt) .GT. 0.0) THEN
                                        !
                                        !                  COLUMN = 'B' // BR // 'ET' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                        !                  COEFF = QBMETCL(I_SUPt,CRG,CURIYR)
                                        !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                        !
                                        !                  CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,17')
                                        !               END IF
                                        !
                                        !!              Biomass to Liquids
                                        !
                                        !               IF (MP_BM_BT(I_SUPt) .GT. 0.0) THEN
                                        !
                                        !                  COLUMN = 'B' // BR // 'BT' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                                        !                  COEFF = QBMBTCL(I_SUPt,CRG,CURIYR)
                                        !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                        !
                                        !                  CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,19')
                                        !               END IF
                                        !            END DO      !CRG
                                        !         END IF         !Biomass Supply Type is Available and Can be Used for Power Production
                                        !      END DO            !I_SUPt
                }
                Comment: {
                    "Done in EDBIO procedure
                    ED$BIO,9 ED$BIO,11 ED$BIO,13 ED$BIO,15 ED$BIO,17 ED$BIO,19"
                }
            }
            Parameter ccalc_cBiomassOtherUsage_UBOUND {
                IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType);
                Text: "OML Columns: B(**)(**)(**)X and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
                Definition: {
                                                            !Done in EDBIO procedure
                    
                                                            !DO I_SUPt = 1 , MNUMFS
                                                            ! IF (WDSUP_AVL(I_SUPt) .EQ. 1 .AND. MP_BM_PW(I_SUPt) .GT. 0.0) THEN
                                                            !       DO CRG = 1 , NDREG
                                                            !!              Account for Other Uses of Biomass
                                                            !
                                                            !!              Residential
                                                            !
                                                            !               IF (MP_BM_RS(I_SUPt) .GT. 0.0) THEN
                                                            !
                                                            !                  COLUMN = 'B' // BR // 'RS' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                                            !                  COEFF = QBMRSCL(I_SUPt,CRG,CURIYR)
                                                            !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                                            !          CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,9')
                                                            !             END IF
                                                            !
                                                            !!              Commercial
                                                            !
                                                            !               IF (MP_BM_CM(I_SUPt) .GT. 0.0) THEN
                                                            !
                                                            !                  COLUMN = 'B' // BR // 'CM' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                                            !                  COEFF = QBMCMCL(I_SUPt,CRG,CURIYR)
                                                            !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                                            !
                                                            !          CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,11')
                                                            !               END IF
                                                            !
                                                            !!              Industrial
                                                            !
                                                            !               IF (MP_BM_IN(I_SUPt) .GT. 0.0) THEN
                                                            !
                                                            !                  COLUMN = 'B' // BR // 'IN' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                                            !                  COEFF = QBMINCL(I_SUPt,CRG,CURIYR)
                                                            !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                                            !
                                                            !                  CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,13')
                                                            !               END IF
                                                            !
                                                            !!              Hydrogen Production
                                                            !
                                                            !               IF (MP_BM_H2(I_SUPt) .GT. 0.0) THEN
                                                            !
                                                            !                  COLUMN = 'B' // BR // 'H2' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                                            !                  COEFF = QBMH2CL(I_SUPt,CRG,CURIYR)
                                                            !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                                            !
                                                            !                  CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,15')
                                                            !               END IF
                                                            !
                                                            !!              Cellulosic Ethanol Production
                                                            !
                                                            !               IF (MP_BM_ET(I_SUPt) .GT. 0.0) THEN
                                                            !
                                                            !                  COLUMN = 'B' // BR // 'ET' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    
                                                            !                  COEFF = QBMETCL(I_SUPt,CRG,CURIYR)
                                                            !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                                            !
                                                            !                  CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,17')
                                                            !               END IF
                                                            !
                                                            !!              Biomass to Liquids
                                                            !
                                                            !               IF (MP_BM_BT(I_SUPt) .GT. 0.0) THEN
                                                            !
                                                            !                  COLUMN = 'B' // BR // 'BT' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                                                            !                  COEFF = QBMBTCL(I_SUPt,CRG,CURIYR)
                                                            !                  COEFF = MAX(DBLE(0.0) , COEFF)
                                                            !
                                                            !                  CALL DBND(EFDBND,COLUMN,COEFF,COEFF,COLUMN_mask,'ED$BIO,19')
                                                            !               END IF
                                                            !            END DO      !CRG
                                                            !         END IF         !Biomass Supply Type is Available and Can be Used for Power Production
                                                            !      END DO            !I_SUPt
                }
                Comment: "Done in EDBIO procedure";
            }
            Parameter ccalc_cBiomassOtherUsage_rS_WD_typele {
                IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector);
                Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
                Definition: {
                    !Done in the procedure EDBIO
                    !!              Account for Other Uses of Biomass
                    !
                    !!              Residential
                    !
                    !               IF (MP_BM_RS(I_SUPt) .GT. 0.0) THEN
                    !
                    !                  COLUMN = 'B' // BR // 'RS' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    !
                    !                  IF (EFDMAT .EQ. 0) THEN
                    !          COEFF = DBLE(1.0)
                    !          CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,8')
                    !        END IF
                    !
                    !               IF (MP_BM_CM(I_SUPt) .GT. 0.0) THEN
                    !
                    !                  COLUMN = 'B' // BR // 'CM' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    !
                    !                  IF (EFDMAT .EQ. 0) THEN
                    !          COEFF = DBLE(1.0)
                    !          CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,10')
                    !           END IF
                    !!              Industrial
                    !
                    !               IF (MP_BM_IN(I_SUPt) .GT. 0.0) THEN
                    !
                    !                  COLUMN = 'B' // BR // 'IN' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    !
                    !                  IF (EFDMAT .EQ. 0) THEN
                    !          COEFF = DBLE(1.0)
                    !          CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,12')
                    !        END IF
                    !!!              Hydrogen Production
                    !
                    !               IF (MP_BM_H2(I_SUPt) .GT. 0.0) THEN
                    !
                    !                  COLUMN = 'B' // BR // 'H2' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    !
                    !                  IF (EFDMAT .EQ. 0) THEN
                    !                     COEFF = DBLE(1.0)
                    !                     CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,14')
                    !                  END IF
                    !!              Cellulosic Ethanol Production
                    !
                    !               IF (MP_BM_ET(I_SUPt) .GT. 0.0) THEN
                    !
                    !                  COLUMN = 'B' // BR // 'ET' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    !
                    !                  IF (EFDMAT .EQ. 0) THEN
                    !                     COEFF = DBLE(1.0)
                    !                     CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,16')
                    !                  END IF
                    !!              Biomass to Liquids
                    !
                    !               IF (MP_BM_BT(I_SUPt) .GT. 0.0) THEN
                    !
                    !                  COLUMN = 'B' // BR // 'BT' // BM_TYP_CD(I_SUPt) // 'X'; COLUMN_mask='B(**)(**)(**)X'
                    !
                    !                  IF (EFDMAT .EQ. 0) THEN
                    !                     COEFF = DBLE(1.0)
                    !                     CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,18')
                    !                  END IF
                    !         END DO      !CRG
                    !         END IF         !Biomass Supply Type is Available and Can be Used for Power Production
                    !      END DO            !I_SUPt
                }
                Comment: {
                    "Done in the procedure EDBIO
                    ED$BIO,8 ED$BIO,10 ED$BIO,12 ED$BIO,14 ED$BIO,16 ED$BIO,18"
                }
            }
            Parameter ccalc_cBP_type_EFDCOSTS {
                IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) | WDSUP_AVL(BiomassType)=1 and MP_BM_PW(BiomassType)>0;
                Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
                Definition: {
                    !Done in the procedure EDBIO
                    !
                    !DO I_SUPt = 1 , MNUMFS
                    !         IF (WDSUP_AVL(I_SUPt) .EQ. 1 .AND. MP_BM_PW(I_SUPt) .GT. 0.0) THEN
                    !! Objective Function
                    !
                    !                     IF (STP .LE. NM_BM_SUP_STP)THEN
                    !                        COEFF = DBLE(WDSUP_P(STP,CRG,CURIYR,I_SUPt))
                    !                  ELSE
                    !                     COEFF = DBLE(9999.9)
                    !                  END IF
                    !
                    !                  CALL DVAL(COLUMN,EFDOBJ,COEFF,COLUMN_mask,EFDOBJ,'ED$BIO,6')
                }
                Comment: {
                    "Done in the procedure EDBIO
                    ED$BIO,6"
                }
            }
            Parameter ccalc_cBP_type_UBOUND {
                IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
                Text: "OML Columns: BP(**)(**)(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
                Definition: {
                    !Done in the procedure EDBIO
                    ! DO STP = 1 , NM_BM_SUP_STP + 1
                    !                  WRITE(ST,'(I2.2)') STP
                    !
                    !                  COLUMN = 'BP' // BR // BM_TYP_CD(I_SUPt) // ST; call makmsk(COLUMN_mask,':BP:' , BR , BM_TYP_CD(I_SUPt) , ST)
                    !
                    !!                 Step Size
                    !
                    !                  IF (STP .LE. 1)THEN
                    !                     COEFF = DBLE(WDSUP_Q(STP,CRG,CURIYR,I_SUPt))
                    !                  ELSE IF (STP .LE. NM_BM_SUP_STP) THEN
                    !                     COEFF = DBLE(WDSUP_Q(STP,CRG,CURIYR,I_SUPt) - WDSUP_Q(STP - 1,CRG,CURIYR,I_SUPt))
                    !                  ELSE
                    !                     COEFF = DBLE(99999.9)
                    !                  END IF
                    !                  COEFF = MAX(COEFF,DBLE(0.0))
                    !
                    !                  IF (COEFF .GT. 0.0) THEN
                    !
                    !                     CALL DBND(EFDBND,COLUMN,0.0D0,COEFF,COLUMN_mask,'ED$BIO,5')
                    !
                    !
                    !! Objective Function
                    !
                    !                     IF (STP .LE. NM_BM_SUP_STP)THEN
                    !                        COEFF = DBLE(WDSUP_P(STP,CRG,CURIYR,I_SUPt))
                    !                  ELSE
                    !                     COEFF = DBLE(9999.9)
                    !                  END IF
                    !
                    !                  CALL DVAL(COLUMN,EFDOBJ,COEFF,COLUMN_mask,EFDOBJ,'ED$BIO,6')
                }
                Comment: {
                    "!Done in the procedure EDBIO
                    ED$BIO,5"
                }
            }
            Parameter ccalc_cBP_type_rS_WD_typele {
                IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep);
                Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
                Definition: {
                    !Done in the procedure EDBIO
                    !IF (EFDMAT .EQ. 0) THEN
                    !           CALL DROWTYPE(ROW_S,'L       ',ROW_S_mask)
                    !           COEFF = DBLE(0.0)
                    !           CALL DRHS(EFDRHS,ROW_S,COEFF,ROW_S_mask,'ED$BIO,2')
                    !
                    !                  COLUMN = 'BP' // BR // BM_TYP_CD(I_SUPt) // "XX"; call makmsk(COLUMN_mask,':BP:' , BR , BM_TYP_CD(I_SUPt) , "XX")
                    !
                    !                  COEFF = DBLE(1.0)
                    !                  CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,4')
                    !               END IF
                    !      IF (EFDMAT .EQ. 0) THEN
                    !                    COEFF = DBLE(-1.0)
                    !                    CALL DVAL(COLUMN,ROW_S,COEFF,COLUMN_mask,ROW_S_mask,'ED$BIO,7')
                    !                  END IF
                }
                Comment: {
                    "Done in the procedure EDBIO
                    ED$BIO,7  ED$BIO,4"
                }
            }
            Parameter ccalc_cBP_type_rS_WD_allle {
                IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
                Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
                Definition: {
                    !!Done in the procedure EDBIO
                    !DO I_SUPt = 1 , MNUMFS
                    !         IF (WDSUP_AVL(I_SUPt) .EQ. 1 .AND. MP_BM_PW(I_SUPt) .GT. 0.0) THEN
                    !
                    !! Declare Row Type and Assign RHS
                    !
                    !       DO CRG = 1 , NDREG
                    !           WRITE(BR,'(I2.2)') CRG
                    !
                    !               ROW_S = 'S_WD' // BM_TYP_CD(I_SUPt) // BR; call makmsk(ROW_S_mask,':S_WD:' , BM_TYP_CD(I_SUPt) , BR)
                    !
                    !! Production Row
                    !
                    !               IF (EFDMAT .EQ. 0) THEN
                    !
                    !                  COLUMN = 'BP' // BR // BM_TYP_CD(I_SUPt) // "XX"; call makmsk(COLUMN_mask,':BP:' , BR , BM_TYP_CD(I_SUPt) , "XX")
                    !
                    !                  ROW_S_ALL = 'S_WD' // BR; call makmsk(ROW_S_ALL_mask,':S_WD:' , BR)
                    !                  COEFF = DBLE(-1.0)
                    !                  CALL DVAL(COLUMN,ROW_S_ALL,COEFF,COLUMN_mask,ROW_S_ALL_mask,'ED$BIO,3')
                }
                Comment: {
                    "Done in the procedure EDBIO
                    ED$BIO,3"
                }
            }
        }
        DeclarationSection ED_BTU_Completed {
            Parameter DSADJ {
                IndexDomain: PlantType;
                Definition: {
                    If (PlantType = 'CTX') or (PlantType = 'ACT') or (PlantType = 'CCX') or (PlantType = 'ACC') or (PlantType = 'ACS') or (PlantType = 'AC2') then
                    	1.10
                    else
                    	1.0
                    endif
                }
            }
            Parameter GASSH_MaxOilMinGas {
                IndexDomain: (PlantType,FuelRegion_ALT1);
                Definition: {
                    if (PlantType >= 'CTN') and (PlantType <= 'DGP') then
                    	if  (IRS(PlantType) = 1) then
                                  if (EDMXRS_EFD(PlantType,FuelRegion_ALT1) > 1.0) then
                                       0
                                  else
                                       1-EDMXRS_EFD(PlantType,FuelRegion_ALT1)
                                  endif
                            else
                                  if (EDMXDS_EFD(PlantType,FuelRegion_ALT1) > 1.0) then
                                       0
                                  else
                                       1-EDMXDS_EFD(PlantType,FuelRegion_ALT1)
                                  endif
                            endif
                    endif
                }
            }
            Parameter OLSH_MaxOilMinGas {
                IndexDomain: (PlantType,FuelRegion_ALT1);
                Definition: {
                    
                                                                                                                                                                                                                                                if (PlantType >= 'CTN') and (PlantType <= 'DGP') then
                                                                                                                                                                                                                                                	if  (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                              if (EDMXRS_EFD(PlantType,FuelRegion_ALT1) > 1.0) then
                                                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                   EDMXRS_EFD(PlantType,FuelRegion_ALT1)
                                                                                                                                                                                                                                                              endif
                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                              if (EDMXDS_EFD(PlantType,FuelRegion_ALT1) > 1.0) then
                                                                                                                                                                                                                                                                   1*DSADJ(PlantType)
                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                   EDMXDS_EFD(PlantType,FuelRegion_ALT1)*DSADJ(PlantType)
                                                                                                                                                                                                                                                              endif
                                                                                                                                                                                                                                                        endif
                                                                                                                                                                                                                                                endif
                }
            }
            Parameter IWD {
                IndexDomain: PlantType;
                Definition: {
                    if (WFLTP_to_FuelType(PlantType,'1') = 'WD') or
                         (WFLTP_to_FuelType(PlantType,'2') = 'WD')  or
                         (WFLTP_to_FuelType(PlantType,'3') = 'WD') then
                            1
                    else
                            0
                    endif
                }
            }
            Parameter IDS {
                IndexDomain: PlantType;
                Definition: {
                    if ((UIDIS(WFLTP_to_FuelType(PlantType,'1')) = 1 or
                         UIDIS(WFLTP_to_FuelType(PlantType,'2')) = 1 or
                         UIDIS(WFLTP_to_FuelType(PlantType,'3')) = 1)) then
                            1
                    else
                            0
                    endif
                }
            }
            Parameter IRS {
                IndexDomain: PlantType;
                Definition: {
                    if ((UIRES(WFLTP_to_FuelType(PlantType,'1')) = 1 or
                         UIRES(WFLTP_to_FuelType(PlantType,'2')) = 1 or
                         UIRES(WFLTP_to_FuelType(PlantType,'3')) = 1)) then
                            1
                    else
                            0
                    endif
                }
            }
            Parameter IGS {
                IndexDomain: PlantType;
                Definition: {
                    if ((UIGAS(WFLTP_to_FuelType(PlantType,'1')) = 1 or
                         UIGAS(WFLTP_to_FuelType(PlantType,'2')) = 1 or
                         UIGAS(WFLTP_to_FuelType(PlantType,'3')) = 1)) then
                            1
                    else
                            0
                    endif
                }
            }
            Parameter CFSH {
                IndexDomain: (PlantType,FuelRegion_ALT1);
                Definition: {
                    if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(DispatchableECP_element(Coal_PlantType_ECP(PlantType)),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1) then
                     	UPWDCFR(DispatchableECP_element(Coal_PlantType_ECP(PlantType)),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(DispatchableECP_element(Coal_PlantType_ECP(PlantType)),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
                    else
                     	UPWDCFR(DispatchableECP_element(Coal_PlantType_ECP(PlantType)),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))
                    endif
                }
            }
            Parameter OLSH {
                IndexDomain: (PlantType,FuelRegion_ALT1);
                Definition: {
                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
                    	if (USW_ECPCF('1') = 0) then   !no cofiring option
                    		if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)) > 1) then
                    			EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1))
                    		else
                    			EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
                    		endif
                    	else
                    		if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(DispatchableECP_element(Coal_PlantType_ECP(PlantType)),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1) then
                    			EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(DispatchableECP_element(Coal_PlantType_ECP(PlantType)),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
                    		else
                    			EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
                    		endif
                    	endif
                    elseif (PlantType >= 'CTN') and (PlantType <= 'DGP') then
                    	if (IGS(PlantType) = 0 and (IRS(PlantType) = 1 or IDS(PlantType) = 1)) then
                                  1.0
                            elseif (IGS(PlantType) = 1 and (IRS(PlantType) = 1 or IDS(PlantType) = 1)) then
                                  (1.0 - GASSH(PlantType,FuelRegion_ALT1)) *DSADJ(PlantType)
                            endif
                    endif
                }
            }
            Parameter GASSH {
                IndexDomain: (PlantType,FuelRegion_ALT1);
                Definition: {
                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
                    	if (USW_ECPCF('1') = 0) then   !no cofiring option
                    		if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)) > 1) then
                    			EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1))
                    		else
                    			EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
                    		endif
                    	else
                    		if ((EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(DispatchableECP_element(Coal_PlantType_ECP(PlantType)),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1))) > 1)  then
                    			EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)/(EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + EDMXDS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1) + UPWDCFR(DispatchableECP_element(Coal_PlantType_ECP(PlantType)),EPCLMP_to_CoalDemandRegion(FuelRegion_ALT1)))
                    		else
                    			EDMXGS_ECP(Coal_PlantType_ECP(PlantType),FuelRegion_ALT1)
                    		endif
                    	endif
                    elseif (PlantType >= 'CTN') and (PlantType <= 'DGP') then
                            if (IGS(PlantType) = 1 and (IRS(PlantType) = 0 and IDS(PlantType) = 0)) then
                                  1.0
                            elseif (IGS(PlantType) = 1 and (IRS(PlantType) = 1 or IDS(PlantType) = 1)) then
                                if 1.0 <= EDMXGS_EFD(PlantType,FuelRegion_ALT1) then
                                     1.0
                                else
                                     EDMXGS_EFD(PlantType,FuelRegion_ALT1)
                                endif
                            endif
                    endif
                }
            }
            Parameter CLSH {
                IndexDomain: (PlantType,FuelRegion_ALT1);
                Definition: {
                    if (USW_ECPCF('1') = 0) then   !no cofiring option
                    	1-(GASSH(PlantType,FuelRegion_ALT1)+OLSH(PlantType,FuelRegion_ALT1))
                    else
                    	1-(GASSH(PlantType,FuelRegion_ALT1)+OLSH(PlantType,FuelRegion_ALT1)+CFSH(PlantType,FuelRegion_ALT1))
                    endif
                }
            }
            Parameter SEQRT {
                IndexDomain: PlantType;
                Definition: {
                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then
                    	UPPCEF(DispatchableECP_element(Coal_PlantType_ECP(PlantType)))
                    elseif (PlantType = 'ACS') then
                        UPPCEF(DispatchableECP_element('CS'))
                          !UPPCEF(DispatchableECP_WICS('1'))
                    elseif (PlantType = 'AC2') then
                        UPPCEF(DispatchableECP_element('A2'))
                    elseif (PlantType < 'CTN') or ((PlantType > 'ACS') and (PlantType > 'B1X')) then
                        0
                    endif
                }
                Comment: "get sequestration efficiency keyed by ECP plant types based on EFD plant types";
            }
            Parameter ccalc_cB_rS_WD_allle {
                IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | ord(CoalDemandRegion_ALT2) = ord(EPCLMP_to_int_fuel_region(FuelRegion_ALT1));
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
                Definition: {
                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                    	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                    		if (GenerationSeason = 'X') then
                    			if (FuelShareOption = '11') then
                    				if (USW_ECPCF('1') = 1) then   ! cofiring option
                    					CFSH(PlantType,FuelRegion_ALT1)
                    				endif
                    			endif
                    		endif
                    	endif
                    elseif ( (PlantType >= 'CTN') and (PlantType <= 'DGP') ) then
                    	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                    	        !if (FuelShareOption = '1X')  then
                    			if (IWD(PlantType) = 1) then  !Biomass
                    				if (FuelShareOption = '1X')  then
                    					if (GenerationSeason = 'X') then
                    						1
                    					endif
                    				endif
                    			endif
                    		!endif
                            endif
                    endif
                }
            }
            Parameter ccalc_cB_rNGle {
                IndexDomain: {
                    (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | ord(GasRegion) = ord(EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) and
                    ord(GasSeason) = ord(GenerationSeason)
                }
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
                Definition: {
                                                                                                                                                                                                                                                if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                                                                                                                                                                                                                                                	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                		if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                			if (FuelShareOption = '11') then
                                                                                                                                                                                                                                                				IF (GASSH(PlantType,FuelRegion_ALT1) > 0.0) THEN
                                                                                                                                                                                                                                                					GASSH(PlantType,FuelRegion_ALT1) * 0.5
                                                                                                                                                                                                                                                				endif			
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                		endif
                                                                                                                                                                                                                                                	endif
                                                                                                                                                                                                                                                elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
                                                                                                                                                                                                                                                	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                	        !if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                			if   ( (IGS(PlantType) = 1)   and     !gas only
                                                                                                                                                                                                                                                			(IRS(PlantType) = 0)  and
                                                                                                                                                                                                                                                			(IDS(PlantType) = 0) )  then
                                                                                                                                                                                                                                                			        if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						GASSH(PlantType,FuelRegion_ALT1)
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 1)   and  !dual fired
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						GASSH(PlantType,FuelRegion_ALT1)
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				elseif (FuelShareOption = '2X') then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						IF (GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) > 0.0) THEN
                                                                                                                                                                                                                                                							GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1)
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                    
                                                                                                                                                                                                                                                				endif		
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                			!elseif  ( (IWD(PlantType) = 1) then  !Biomass
                                                                                                                                                                                                                                                			!endif
                                                                                                                                                                                                                                                		!endif
                                                                                                                                                                                                                                                        endif
                                                                                                                                                                                                                                                endif
                }
            }
            Parameter ccalc_cB_rRSle {
                IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | CensusRegion = EPCSMP_to_CensusRegion(FuelRegion_ALT1);
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
                Definition: {
                    if  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
                    	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                    	        !if (FuelShareOption = '1X')  then
                    			if ( (IGS(PlantType) = 0)   and  !oil only
                    				((IRS(PlantType) = 1) or
                    				(IDS(PlantType) = 1)) )   then
                    				if (FuelShareOption = '1X')  then
                    					if (GenerationSeason = 'X') then
                    						if (IRS(PlantType) = 1) then
                    							OLSH(PlantType,FuelRegion_ALT1)
                    					        endif	
                    					endif
                    				endif
                    			elseif ( (IGS(PlantType) = 1)   and  !dual fired
                    				((IRS(PlantType) = 1) or
                    				(IDS(PlantType) = 1)) )   then
                    				if (FuelShareOption = '1X')  then
                    					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                    						if (IRS(PlantType) = 1) then
                    							OLSH(PlantType,FuelRegion_ALT1)
                    					        endif	
                    					endif
                    				elseif (FuelShareOption = '2X') then
                    					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                    						if (IRS(PlantType) = 1) then
                    							OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1)
                    					        endif	
                    					endif
                    				endif		
                    			endif
                    			!elseif  ( (IWD(PlantType) = 1) then  !Biomass
                    			!endif
                    		!endif
                            endif
                    endif
                }
            }
            Parameter ccalc_cB_rDSle {
                IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | CensusRegion = EPCSMP_to_CensusRegion(FuelRegion_ALT1);
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
                Definition: {
                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                    	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                    		if (GenerationSeason = 'X') then
                    			if (FuelShareOption = '11') then
                    				if (OLSH(PlantType,FuelRegion_ALT1) > 0.0) then
                    					OLSH(PlantType,FuelRegion_ALT1)
                    				endif	
                    			endif
                    		endif
                    	endif
                    elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
                    	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                    	        !if (FuelShareOption = '1X')  then
                    			if ( (IGS(PlantType) = 0)   and  !oil only
                    				((IRS(PlantType) = 1) or
                    				(IDS(PlantType) = 1)) )   then
                    				if (FuelShareOption = '1X')  then
                    					if (GenerationSeason = 'X') then
                    						if (IRS(PlantType) <> 1) then
                    							OLSH(PlantType,FuelRegion_ALT1)
                    					        endif	
                    					endif
                    				endif
                    			elseif ( (IGS(PlantType) = 1)   and  !dual fired
                    				((IRS(PlantType) = 1) or
                    				(IDS(PlantType) = 1)) )   then
                    				if (FuelShareOption = '1X')  then
                    					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                    						if (IRS(PlantType) <> 1) then
                    							OLSH(PlantType,FuelRegion_ALT1)
                    					        endif	
                    					endif
                    				elseif (FuelShareOption = '2X') then
                    					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                    						if (IRS(PlantType) <> 1) then
                    							OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1)
                    					        endif	
                    					endif
                    				endif		
                    			endif
                    			!elseif  ( (IWD(PlantType) = 1) then  !Biomass
                    			!endif
                    		!endif
                            endif
                    endif
                }
            }
            Parameter ccalc_cB_rCFGn {
                IndexDomain: {
                    (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)  | ord(CoalDemandRegion_ALT1) = ord(EPCLMP_to_int_fuel_region(FuelRegion_ALT1))
                    and PlantType_ECP = Coal_PlantType_ECP(PlantType)
                }
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
                Definition: {
                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                    	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                    		if (GenerationSeason = 'X') then
                    			if (FuelShareOption = '11') then
                    				if (USW_ECPCF('1') = 1) then   ! cofiring option
                    					CFSH(PlantType,FuelRegion_ALT1) / HRTCLNR(CoalDemandRegion_ALT1,cyr,PlantType_ECP) * 1000000.0
                    				endif
                    			endif
                    		endif
                    	endif
                    endif
                }
            }
            Parameter ccalc_cB_rCARSEQn {
                IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQ(**)";
                Definition: {
                                                                                                                                                                                                                                                if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                                                                                                                                                                                                                                                	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                		if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                			if (FuelShareOption = '11') then
                                                                                                                                                                                                                                                				if  (CarbonRegion = 'XX') then
                                                                                                                                                                                                                                                					if (GASSH(PlantType,FuelRegion_ALT1) > 0.0) then
                                                                                                                                                                                                                                                						if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                							if ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')then
                                                                                                                                                                                                                                                								 EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					elseif (OLSH(PlantType,FuelRegion_ALT1) > 0.0) then
                                                                                                                                                                                                                                                						if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                							if ( EDSEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1') then
                                                                                                                                                                                                                                                								EDSEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					else
                                                                                                                                                                                                                                                						if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                							if ( SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) ) > EFD_MIN('1') then
                                                                                                                                                                                                                                                								 SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif			
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                		endif
                                                                                                                                                                                                                                                	endif
                                                                                                                                                                                                                                                elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
                                                                                                                                                                                                                                                	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                	        !if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                			if   ( (IGS(PlantType) = 1)   and     !gas only
                                                                                                                                                                                                                                                			(IRS(PlantType) = 0)  and
                                                                                                                                                                                                                                                			(IDS(PlantType) = 0) )  then
                                                                                                                                                                                                                                                			        if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						if  (CarbonRegion = 'XX') then
                                                                                                                                                                                                                                                							if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                								EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 0)   and  !oil only
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                						if  (CarbonRegion = 'XX') then
                                                                                                                                                                                                                                                							if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                								if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                									ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                								ELSE
                                                                                                                                                                                                                                                									EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 1)   and  !dual fired
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						if  (CarbonRegion = 'XX') then					
                                                                                                                                                                                                                                                							if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                								if (OLSH(PlantType,FuelRegion_ALT1) > 0) then
                                                                                                                                                                                                                                                									if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                										if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                										endif
                                                                                                                                                                                                                                                									else
                                                                                                                                                                                                                                                										if ( (EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType))  > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                										endif
                                                                                                                                                                                                                                                									endif
                                                                                                                                                                                                                                                								else
                                                                                                                                                                                                                                                									if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                										( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                									endif
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				elseif (FuelShareOption = '2X') then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						if  (CarbonRegion = 'XX') then					
                                                                                                                                                                                                                                                							if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                								if (OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) > 0) then
                                                                                                                                                                                                                                                									if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                										if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                										endif
                                                                                                                                                                                                                                                									else
                                                                                                                                                                                                                                                										if ( (EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                										endif
                                                                                                                                                                                                                                                									endif
                                                                                                                                                                                                                                                								else
                                                                                                                                                                                                                                                									if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                									endif
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                    
                                                                                                                                                                                                                                                				endif		
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                			!elseif  ( (IWD(PlantType) = 1) then  !Biomass
                                                                                                                                                                                                                                                			!endif
                                                                                                                                                                                                                                                		!endif
                                                                                                                                                                                                                                                        endif
                                                                                                                                                                                                                                                endif
                }
            }
            Parameter ccalc_cB_rCARBONle {
                IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
                Definition: {
                                                                                                                                                                                                                                                if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                                                                                                                                                                                                                                                	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                		if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                			if (FuelShareOption = '11') then
                                                                                                                                                                                                                                                				if (CarbonRegion = 'RG' or CarbonRegion = 'CA') then
                                                                                                                                                                                                                                                					if ( (1.0 - SEQRT(PlantType)) * (UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) * CO2_CL_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) +
                                                                                                                                                                                                                                                								(EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) +
                                                                                                                                                                                                                                                								EDSEL(cyr) * 0.001 * OLSH(PlantType, FuelRegion_ALT1)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                						(1.0 - SEQRT(PlantType)) * (UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) * CO2_CL_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) +
                                                                                                                                                                                                                                                								(EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) +
                                                                                                                                                                                                                                                								EDSEL(cyr) * 0.001 * OLSH(PlantType, FuelRegion_ALT1)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)))
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif			
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                		endif
                                                                                                                                                                                                                                                	endif
                                                                                                                                                                                                                                                elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
                                                                                                                                                                                                                                                	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                	        !if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                			if   ( (IGS(PlantType) = 1)   and     !gas only
                                                                                                                                                                                                                                                			(IRS(PlantType) = 0)  and
                                                                                                                                                                                                                                                			(IDS(PlantType) = 0) )  then
                                                                                                                                                                                                                                                			        if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						if (CarbonRegion = 'RG' or CarbonRegion = 'CA') then
                                                                                                                                                                                                                                                								(1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))				
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 0)   and  !oil only
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                						if (CarbonRegion = 'RG' or CarbonRegion = 'CA') then
                                                                                                                                                                                                                                                							if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                								ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                							else
                                                                                                                                                                                                                                                								EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 1)   and  !dual fired
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						if (CarbonRegion = 'RG' or CarbonRegion = 'CA') then
                                                                                                                                                                                                                                                							if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                								if ( ( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                								( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							else
                                                                                                                                                                                                                                                								if  ( ( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                								( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				elseif (FuelShareOption = '2X') then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						if (CarbonRegion = 'RG' or CarbonRegion = 'CA') then
                                                                                                                                                                                                                                                							if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                								if ( ( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                									( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							else
                                                                                                                                                                                                                                                								if  ( ( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                									( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                    
                                                                                                                                                                                                                                                				endif		
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                			!elseif  ( (IWD(PlantType) = 1) then  !Biomass
                                                                                                                                                                                                                                                			!endif
                                                                                                                                                                                                                                                		!endif
                                                                                                                                                                                                                                                        endif
                                                                                                                                                                                                                                                endif
                }
            }
            Parameter ccalc_cB_rCARBONn {
                IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
                Definition: {
                                                                                                                                                                                                                                                if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                                                                                                                                                                                                                                                	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                		if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                			if (FuelShareOption = '11') then
                                                                                                                                                                                                                                                				if (CarbonRegion = 'MW' or CarbonRegion = 'OT') then
                                                                                                                                                                                                                                                					if ( (1.0 - SEQRT(PlantType)) * (UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) * CO2_CL_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) +
                                                                                                                                                                                                                                                								(EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) +
                                                                                                                                                                                                                                                								EDSEL(cyr) * 0.001 * OLSH(PlantType, FuelRegion_ALT1)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                						(1.0 - SEQRT(PlantType)) * (UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) * CO2_CL_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) +
                                                                                                                                                                                                                                                								(EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) +
                                                                                                                                                                                                                                                								EDSEL(cyr) * 0.001 * OLSH(PlantType, FuelRegion_ALT1)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)))
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				elseif  (CarbonRegion = 'XX') then
                                                                                                                                                                                                                                                					if (GASSH(PlantType,FuelRegion_ALT1) > 0.0) then
                                                                                                                                                                                                                                                						if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                							if ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')then
                                                                                                                                                                                                                                                								-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					elseif (OLSH(PlantType,FuelRegion_ALT1) > 0.0) then
                                                                                                                                                                                                                                                						if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                							if ( EDSEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1') then
                                                                                                                                                                                                                                                								-1.0 * EDSEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					else
                                                                                                                                                                                                                                                						if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                							if ( SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1) ) > EFD_MIN('1') then
                                                                                                                                                                                                                                                									-1.0 * SEQRT(PlantType) * UFRCAR(Coal_PlantType_to_FuelType(PlantType),EPCLMP_to_int_fuel_region(FuelRegion_ALT1)) * (1.0 / 2204.0) * CLSH(PlantType,FuelRegion_ALT1)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif			
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                		endif
                                                                                                                                                                                                                                                	endif
                                                                                                                                                                                                                                                elseif  (PlantType >= 'CTN') and (PlantType <= 'DGP') then   !oil and gas
                                                                                                                                                                                                                                                	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                	        !if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                			if   ( (IGS(PlantType) = 1)   and     !gas only
                                                                                                                                                                                                                                                			(IRS(PlantType) = 0)  and
                                                                                                                                                                                                                                                			(IDS(PlantType) = 0) )  then
                                                                                                                                                                                                                                                			        if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						if (CarbonRegion = 'MW' or CarbonRegion = 'OT') then
                                                                                                                                                                                                                                                								(1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))				
                                                                                                                                                                                                                                                						elseif  (CarbonRegion = 'XX') then
                                                                                                                                                                                                                                                							if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                								-1 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 0)   and  !oil only
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                						if (CarbonRegion = 'MW' or CarbonRegion = 'OT') then
                                                                                                                                                                                                                                                							if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                								ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                							else
                                                                                                                                                                                                                                                								EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * (1.0 - SEQRT(PlantType)) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						elseif  (CarbonRegion = 'XX') then
                                                                                                                                                                                                                                                							if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                								if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                									 ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                								ELSE
                                                                                                                                                                                                                                                									 EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 1)   and  !dual fired
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						if (CarbonRegion = 'MW' or CarbonRegion = 'OT') then
                                                                                                                                                                                                                                                							if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                								if ( ( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                								( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							else
                                                                                                                                                                                                                                                								if  ( ( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                								( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						elseif  (CarbonRegion = 'XX') then					
                                                                                                                                                                                                                                                							if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                								if (OLSH(PlantType,FuelRegion_ALT1) > 0) then
                                                                                                                                                                                                                                                									if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                										if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											-1 * ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                										endif
                                                                                                                                                                                                                                                									else
                                                                                                                                                                                                                                                										if ( (EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType))  > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											-1 * ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                										endif
                                                                                                                                                                                                                                                									endif
                                                                                                                                                                                                                                                								else
                                                                                                                                                                                                                                                									if (( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                										-1 * ( EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                									endif
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				elseif (FuelShareOption = '2X') then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						if (CarbonRegion = 'MW' or CarbonRegion = 'OT') then
                                                                                                                                                                                                                                                							if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                								if ( ( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                									( (1.0 - SEQRT(PlantType)) * ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							else
                                                                                                                                                                                                                                                								if  ( ( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                									( (1.0 - SEQRT(PlantType)) * EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) + (1.0 - SEQRT(PlantType)) * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) ) * CO2_OG_BY_FL(FuelRegion_ALT1,CO2CapGroup_element(CarbonRegion))
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						elseif  (CarbonRegion = 'XX') then					
                                                                                                                                                                                                                                                							if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                								if (OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) > 0) then
                                                                                                                                                                                                                                                									if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                										if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											-1 * ( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                										endif
                                                                                                                                                                                                                                                									else
                                                                                                                                                                                                                                                										if ( (EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType)) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											-1 * ( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) + EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                										endif
                                                                                                                                                                                                                                                									endif
                                                                                                                                                                                                                                                								else
                                                                                                                                                                                                                                                									if (( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) ) > EFD_MIN('1')) then
                                                                                                                                                                                                                                                											-1 * ( EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) )
                                                                                                                                                                                                                                                									endif
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                    
                                                                                                                                                                                                                                                				endif		
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                			!elseif  ( (IWD(PlantType) = 1) then  !Biomass
                                                                                                                                                                                                                                                			!endif
                                                                                                                                                                                                                                                		!endif
                                                                                                                                                                                                                                                        endif
                                                                                                                                                                                                                                                endif
                }
                Comment: {
                    "rCARBONn = Regional Carbon free row
                    cB = BTU vector"
                }
            }
            Parameter ccalc_cB_rCLle {
                IndexDomain: {
                    (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) | ord(CoalDemandRegion_ALT2) = ord(EPCLMP_to_int_fuel_region(FuelRegion_ALT1))
                    and PlantType_ECP = Coal_PlantType_ECP(PlantType)
                }
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
                Definition: {
                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                    	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                    		if (GenerationSeason = 'X') then
                    			if (FuelShareOption = '11') then
                    				if (USW_ECPCF('1') = 0) then   !no cofiring option
                    					1-(OLSH(PlantType,FuelRegion_ALT1)+GASSH(PlantType,FuelRegion_ALT1))
                    				else
                    					1-(OLSH(PlantType,FuelRegion_ALT1)+GASSH(PlantType,FuelRegion_ALT1)+CFSH(PlantType,FuelRegion_ALT1))
                    				endif
                    			endif
                    		endif
                    	endif
                    endif
                }
                Comment: "rCLle = Coal Supply Balance Row  (Row type = L)";
            }
            Parameter ccalc_cB_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
                Definition: {
                                                                                                                                                                                                                                                if ( (PlantType >= 'CTN') and (PlantType < 'CNU') ) or ( (PlantType > 'SMR') and (PlantType <= 'DGP') ) then
                                                                                                                                                                                                                                                	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                	        !if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                			if   ( (IGS(PlantType) = 1)   and     !gas only
                                                                                                                                                                                                                                                			(IRS(PlantType) = 0)  and
                                                                                                                                                                                                                                                			(IDS(PlantType) = 0) )  then
                                                                                                                                                                                                                                                			        if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						-1
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 0)   and  !oil only
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                						-1
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 1)   and  !dual fired
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						-1
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				elseif (FuelShareOption = '2X') then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                                                                                                                                                                                                                                                						-1
                                                                                                                                                                                                                                                					endif
                    
                                                                                                                                                                                                                                                				endif		
                                                                                                                                                                                                                                                			elseif (IWD(PlantType) = 1) then  !Biomass
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                						-1
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                		!endif
                                                                                                                                                                                                                                                        endif
                                                                                                                                                                                                                                                elseif (PlantType >= 'CNU')  AND (PlantType <= 'SMR') then
                                                                                                                                                                                                                                                	if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                		if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                			if (FuelRegion_ALT1 = 'US') then
                                                                                                                                                                                                                                                				-1
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                		endif
                                                                                                                                                                                                                                                        endif
                                                                                                                                                                                                                                                endif
                }
            }
            Parameter ccalc_cB_rBTUXXle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
                Definition: {
                    if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                    	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                    		if (GenerationSeason = 'X') then
                    			if (FuelShareOption = '11') then
                    				-1	
                    			endif
                    		endif
                    	endif
                    endif
                }
            }
            Parameter ccalc_cB_EFDCOSTS {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
                Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
                Definition: {
                                                                                                                                                                                                                                                if (PlantType >= 'B1X') and (PlantType <= 'ISX') then  !coals
                                                                                                                                                                                                                                                	if (CPFLECP(Coal_PlantType_ECP(PlantType),EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                		if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                			if (FuelShareOption = '11') then
                                                                                                                                                                                                                                                				0.001			
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                		endif
                                                                                                                                                                                                                                                	endif
                                                                                                                                                                                                                                                elseif ( (PlantType >= 'CTN') and (PlantType < 'CNU') ) or ( (PlantType > 'SMR') and (PlantType <= 'DGP') ) then   !oil and gas
                                                                                                                                                                                                                                                	if (CPFLEFD(PlantType,EPCSMP_to_CensusRegion(FuelRegion_ALT1), EPCLMP_to_int_fuel_region(FuelRegion_ALT1),EPGSMP_to_int_fuel_region(FuelRegion_ALT1)) > 0) then
                                                                                                                                                                                                                                                	        !if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                			if   ( (IGS(PlantType) = 1)   and     !gas only
                                                                                                                                                                                                                                                			(IRS(PlantType) = 0)  and
                                                                                                                                                                                                                                                			(IDS(PlantType) = 0) )  then
                                                                                                                                                                                                                                                			        if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then				
                                                                                                                                                                                                                                                						if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                							-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
                                                                                                                                                                                                                                                						else
                                                                                                                                                                                                                                                							0.001
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 0)   and  !oil only
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                						if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                							if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                								-1.0 * ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
                                                                                                                                                                                                                                                							ELSE
                                                                                                                                                                                                                                                								-1.0 * EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						else
                                                                                                                                                                                                                                                							0.001
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			elseif ( (IGS(PlantType) = 1)   and  !dual fired
                                                                                                                                                                                                                                                				((IRS(PlantType) = 1) or
                                                                                                                                                                                                                                                				(IDS(PlantType) = 1)) )   then
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then
                    
                                                                                                                                                                                                                                                							if (SEQRT(PlantType) > 0) then
                                                                                                                                                                                                                                                								if (OLSH(PlantType,FuelRegion_ALT1) > 0) then
                                                                                                                                                                                                                                                									if (IRS(PlantType) = 1) then
                    
                                                                                                                                                                                                                                                											-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0) - ERSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
                    
                                                                                                                                                                                                                                                									else
                    
                                                                                                                                                                                                                                                											-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0) - EDSEL(cyr) * 0.001 * OLSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
                    
                                                                                                                                                                                                                                                									endif
                                                                                                                                                                                                                                                								else
                                                                                                                                                                                                                                                										-1.0 * EGFEL(cyr) * 0.001 * GASSH(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
                    
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							else
                                                                                                                                                                                                                                                								0.001
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				elseif (FuelShareOption = '2X') then
                                                                                                                                                                                                                                                					if (GenerationSeason >= '1' and GenerationSeason <= '3') then 				
                                                                                                                                                                                                                                                						if (SEQRT(PlantType) > 0) AND (EMETAX('01',cyr) > 0) then
                                                                                                                                                                                                                                                							if (OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) > 0) then
                                                                                                                                                                                                                                                								if (IRS(PlantType) = 1) then
                                                                                                                                                                                                                                                									-1.0 * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0) - ERSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
                                                                                                                                                                                                                                                								else
                                                                                                                                                                                                                                                									-1.0 * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0) - EDSEL(cyr) * 0.001 * OLSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)	
                                                                                                                                                                                                                                                								endif
                                                                                                                                                                                                                                                							else
                                                                                                                                                                                                                                                								-1.0 * EGFEL(cyr) * 0.001 * GASSH_MaxOilMinGas(PlantType,FuelRegion_ALT1) * SEQRT(PlantType) * (EMETAX('01',cyr) * 1000.0)
                                                                                                                                                                                                                                                							endif
                                                                                                                                                                                                                                                						else
                                                                                                                                                                                                                                                							0.001
                                                                                                                                                                                                                                                						endif
                                                                                                                                                                                                                                                					endif
                    
                                                                                                                                                                                                                                                				endif		
                                                                                                                                                                                                                                                			elseif (IWD(PlantType) = 1) then  !Biomass
                                                                                                                                                                                                                                                				if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                					if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                						0.001
                                                                                                                                                                                                                                                					endif
                                                                                                                                                                                                                                                				endif
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                		!endif
                                                                                                                                                                                                                                                        endif
                                                                                                                                                                                                                                                elseif (PlantType >= 'CNU')  AND (PlantType <= 'SMR') then
                                                                                                                                                                                                                                                	if (FuelShareOption = '1X')  then
                                                                                                                                                                                                                                                		if (GenerationSeason = 'X') then
                                                                                                                                                                                                                                                			if (FuelRegion_ALT1 = 'US') then
                                                                                                                                                                                                                                                				UPFUEL('UF',int_fuel_region_element(FuelRegion_ALT1))
                                                                                                                                                                                                                                                			endif
                                                                                                                                                                                                                                                		endif
                                                                                                                                                                                                                                                        endif
                                                                                                                                                                                                                                                endif
                }
            }
            Parameter ccalc_cESCNOX_EFDCOSTS {
                IndexDomain: (INOXP) | ord(INOXP) <= NOX_GRP('1');
                Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
                Definition: {
                    IF (EMRFNA(NoxRegion_Element(INOXP),cyr) > 0) THEN
                    	EPNOXPR(NoxRegion_Element(INOXP),cyr)/1000.0
                    endif
                }
            }
            Parameter ccalc_cESCNOX_rELNOX0le {
                IndexDomain: (INOXP) | ord(INOXP) <= NOX_GRP('1');
                Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
                Definition: {
                     IF (EMRFNA(NoxRegion_Element(INOXP),cyr) > 0) THEN
                    	-1.0
                    endif
                }
            }
        }
        DeclarationSection EDO_BTU_Completed {
            Parameter EFD_PCAR_calc {
                IndexDomain: (MNUMYR);
                Text: "86 ECP Carbon emission allowance price";
                Definition: {
                    IF ( (USW_CAR('1') = 2 or  USW_CAR('1') = 3) and ((ord(cyr)+UHBSYR('1')) >  UYR_CAR('1'))) then
                           rCARBONle('XX').ShadowPrice
                    endif;
                }
            }
            Parameter prc {
                IndexDomain: MNUMYR;
            }
            Parameter EFD_QCAR_calc {
                IndexDomain: (MNUMYR);
                Text: "85 ECP Carbon emissions for electricity";
                Definition: {
                    IF ( (USW_CAR('1') = 2 or  USW_CAR('1') = 3) and ((ord(cyr)+UHBSYR('1')) >  UYR_CAR('1'))) then
                           rCARBONle('XX').Level
                    endif;
                }
            }
            Parameter EFD_LCAR_calc {
                IndexDomain: (MNUMYR);
                Text: "84 ECP Carbon emissions limit for electricity";
                Definition: {
                    IF ( (USW_CAR('1') = 2 or  USW_CAR('1') = 3) and ((ord(cyr)+UHBSYR('1')) >  UYR_CAR('1'))) then
                         rCARBONle('XX').Upper
                    endif
                }
                Comment: "EFD Location:  EDO$BTU";
            }
        }
        Procedure calc_prc {
            Body: {
                                                                                                                                                                                !for (NOXRegion in {26..28}) do
                                                                                                                                                                                for INOXP | (ord(INOXP) <= NOX_GRP('1')) do
                                                                                                                                                                                	IF (EMRFNA(NoxRegion_Element(INOXP),cyr) > 0) THEN
                                                                                                                                                                                		prc(cyr) := rELNOX0le(INOXP).ShadowPrice * 1000;
                                                                                                                                                                                	endif;
                                                                                                                                                                                endfor;
                
                                                                                                                                                                                for SO2Region Do
                                                                                                                                                                                      IF (EMRFSA(cyr,SO2Region) > 0) THEN
                                                                                                                                                                                		prc(cyr) := rSULFURle(SO2Region).ShadowPrice * 1000;
                                                                                                                                                                                      endif;
                                                                                                                                                                                endfor;
                
                                                                                                                                                                                for nHGCODE Do
                                                                                                                                                                                	if (EMEL_QHG(nHGCODE,cyr) < 100) and (rMERCURYle(nHGCODE).ShadowPrice > 0) then
                                                                                                                                                                                		prc(cyr) := rMERCURYle(nHGCODE).ShadowPrice * 1000;
                                                                                                                                                                                	endif;
                                                                                                                                                                                endfor;
                                                                                                                                                                                 !IF ( (USW_CAR('1') = 2 or  USW_CAR('1') = 3) and ((ord(cyr)+UHBSYR('1')) >  UYR_CAR('1'))) then
                                                                                                                                                                                       !EFD_LCAR_calc(cyr) := rCARBONle('XX').Upper;
                                                                                                                                                                                       !EFD_QCAR_calc(cyr) :=  rCARBONle('XX').Level;
                                                                                                                                                                                       !prc(cyr) := rCARBONle('XX').ShadowPrice;
                                                                                                                                                                                       !EFD_PCAR_calc(cyr):= prc(cyr);
                                                                                                                                                                                 !endif;
            }
        }
        DeclarationSection ED_CAR_Completed;
        DeclarationSection ED_CCAP_Completed {
            Parameter ccalc_cRHS_rZOGSMeq {
                IndexDomain: (OGSMRegion);
                Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
                Definition: sum(OGSMSector, OGCO2PUR2(OGSMRegion_element(OGSMRegion),Thirteen_element(OGSMSector),cyr) / 18000.0);
            }
            Parameter ccalc_cNTX_rZFLRGge {
                IndexDomain: (FuelRegion) | FuelRegion <> 'US';
                Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
                Definition: {
                    IF (MUST_STORE(FuelRegion,cyr) = 0) THEN
                    -1.0
                    endif
                }
            }
            Parameter ccalc_cNTX_rZFLRGeq {
                IndexDomain: (FuelRegion) | FuelRegion <> 'US';
                Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
                Definition: {
                    IF (MUST_STORE(FuelRegion,cyr) <> 0) THEN
                    -1.0
                    endif
                }
            }
            Parameter ccalc_cNTX_EFDCOSTS {
                IndexDomain: (FuelRegion) | FuelRegion <> 'US';
                Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
                Definition: {
                    IF (MUST_STORE(FuelRegion,cyr) = 1) THEN
                                TnS_Costs(FuelRegion,cyr)
                    ELSE
                                -0.001
                    ENDIF
                }
            }
            Parameter ccalc_cNOTSF_rZOGSMeq {
                IndexDomain: (OGSMRegion);
                Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
                Definition: 1.0;
            }
            Parameter ccalc_cNOTSF_EFDCOSTS {
                IndexDomain: (OGSMRegion);
                Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
                Definition: 99.9;
            }
            Parameter ccalc_cNTR_EFDCOSTS {
                IndexDomain: (FuelRegion,OGSMRegion);
                Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
                Definition: FR_OR_TRANCOST(FuelRegion,OGSMRegion,cyr);
            }
            Parameter ccalc_cNTR_rZOGSMeq {
                IndexDomain: (OGSMRegion,FuelRegion) | FuelRegion <> 'US';
                Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
                Definition: 1.0;
            }
            Parameter ccalc_cNTR_rZFLRGeq {
                IndexDomain: (FuelRegion,OGSMRegion) | FuelRegion <> 'US';
                Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
                Definition: {
                    IF (MUST_STORE(FuelRegion,cyr) <> 0) THEN
                    -1.0
                    endif
                }
            }
            Parameter ccalc_cNTR_rZFLRGge {
                IndexDomain: (FuelRegion,OGSMRegion) | FuelRegion <> 'US';
                Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
                Definition: {
                    IF (MUST_STORE(FuelRegion,cyr) = 0) THEN
                    -1.0
                    endif
                }
            }
            Parameter ccalc_cNTO_rZOGSMeq {
                IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) | OGSMRegion = OGSMRegion_ALTTo;
                Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
                Definition: 1.0;
            }
            Parameter ccalc_cNTO_EFDCOSTS {
                IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
                Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
                Definition: OGCO2TAR(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) / UPGNPD('1') * 18.000;
            }
            Parameter ccalc_cNTO_rZOTHRge {
                IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) | OGSMRegion = OGSMRegion_ALTFrom;
                Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
                Definition: -1.0;
            }
            Parameter ccalc_cNOT_rZOTHRge {
                IndexDomain: (OGSMRegion,OGSMSector) |  OGSMSector <> 'P1' and OGSMSector <> 'P2' and OGSMSector <> 'C1';
                Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
                Definition: 1.0;
            }
            Parameter ccalc_cNOT_rZOGSMeq {
                IndexDomain: (OGSMRegion,OGSMSector) |  OGSMSector <> 'P1' and OGSMSector <> 'P2' and OGSMSector = 'C1';
                Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
                Definition: 1.0;
            }
            Parameter ccalc_cNOT_EFDCOSTS {
                IndexDomain: (OGSMSector,OGSMRegion) |  OGSMSector <> 'P1' and OGSMSector <> 'P2';
                Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
                Definition: {
                    IF (OGCO2PRC(OGSMRegion,Thirteen_element(OGSMSector), cyr) > 0.0) THEN        ! OGCO2PRC  : CO2 price $/mmcf
                       If (OGSMSector = 'C1') then
                            0.5* OGCO2PRC(OGSMRegion,Thirteen_element(OGSMSector), cyr) / UPGNPD('1') * 18.000
                       else
                       	OGCO2PRC(OGSMRegion,Thirteen_element(OGSMSector), cyr) / UPGNPD('1') * 18.000
                       endif
                    else
                      99.9 - (ord(OGSMSector) * 0.1)
                     endif
                }
            }
            Parameter ccalc_cNOT_UBOUND {
                IndexDomain: (OGSMSector,OGSMRegion) |  OGSMSector <> 'P1' and OGSMSector <> 'P2';
                Text: "OML Columns: NOT(**)(**)_ and OML Rows: UBOUND";
                Definition: (1.0 * OGCO2AVL(OGSMRegion,Thirteen_element(OGSMSector), cyr) / 18000.0) / 1.0 + 0.001;
            }
        }
        DeclarationSection ED_CL_IMPORTS_Completed;
        DeclarationSection ED_GAS_Completed {
            Parameter GASQTY {
                Text: "trillion BTU";
                Property: Double;
                Definition: {
                    sum(SupplyRegion_Sub,
                        (UFLGFNR('1',SupplyRegion_Sub,cyr)+(UFLGFNR('2',SupplyRegion_Sub,cyr))) +
                        (UFLGINR('1',SupplyRegion_Sub,cyr)+(UFLGINR('2',SupplyRegion_Sub,cyr))) +
                         (UFLGCNR('1',SupplyRegion_Sub,cyr)+(UFLGCNR('2',SupplyRegion_Sub,cyr))) +
                         (UFLDGNR('1',SupplyRegion_Sub,cyr)+(UFLDGNR('2',SupplyRegion_Sub,cyr))) )
                }
            }
            Parameter VALUENG {
                IndexDomain: GasProductionStep;
                Range: free;
                Property: Double;
                Definition: ((Val(GasProductionStep) - 1) - UPCRVSTP('1')) * UPCRVSIZ('1')*GASQTY;
                Comment: "Input to ELNGSCRV_Function";
            }
            Parameter ccalc_cGTUS_rS_NGUSle {
                IndexDomain: (GasRegion,GasSeason);
                Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
                Definition: {
                    if (EFDMAT('1') = 0.0) then
                       1.0
                    endif
                }
            }
            Parameter ccalc_cGTUS_rNGle {
                IndexDomain: (GasRegion,GasSeason);
                Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
                Definition: {
                    if (EFDMAT('1') = 0.0) then
                    -1.0
                    endif
                }
            }
            Parameter ccalc_cGPUS_UBOUND {
                IndexDomain: (GasProductionStep);
                Text: "OML Columns: GPUS(**) and OML Rows: UBOUND";
                Definition: {
                    IF (GasProductionStep = '01') THEN
                      GASQTY - UPCRVSTP('1') * (UPCRVSIZ('1')*GASQTY)
                    ELSE
                      UPCRVSIZ('1') * GASQTY
                    ENDIF
                }
            }
            Parameter ccalc_cGPUS_rS_NGUSle {
                IndexDomain: (GasProductionStep);
                Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
                Definition: {
                    if (EFDMAT('1') = 0.0) then
                       -1.0
                    endif
                }
            }
            Parameter ccalc_cGTUS_EFDCOSTS {
                IndexDomain: (GasRegion,GasSeason);
                Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
                Definition: {
                    !  Remove carbon cost, if EFD constraint included
                       IF ((USW_CAR('1') = 2 OR USW_CAR('1') = 3) AND (CURIYR('1') + UHBSYR('1')) >= UYR_CAR('1') and (TAX_FLAG('1')=1 OR PERMIT_FLAG('1')=1) ) THEN
                    !               COEFF = COEFF - DBLE(JGFELGR(CURIYR))
                          SPNGELGR(GasRegion,cyr,Three_element(GasSeason)) - (OGWPRNG(OGSMReg_LastElement,cyr) / CFNGC(cyr))- JGFELGR(cyr)
                       ELSE
                          SPNGELGR(GasRegion,cyr,Three_element(GasSeason)) - (OGWPRNG(OGSMReg_LastElement,cyr) / CFNGC(cyr))
                       ENDIF
                    
                    
                    
                    
                    ! 13 = max number of OGSM regions, replace with some identifier not hardwired
                }
            }
            Parameter ccalc_cGTUS_rCARBONn {
                IndexDomain: (CarbonRegion,GasRegion,GasSeason);
                Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBON(**)";
                Definition: EGFEL(cyr) * 0.001;
            }
            Parameter ccalc_cGPUS_EFDCOSTS {
                IndexDomain: (GasProductionStep);
                Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
                Definition: {
                    if ELNGSCRV_Function( VALUENG)(GasProductionStep)>0.001 then
                      ELNGSCRV_Function( VALUENG)(GasProductionStep)
                    else
                      Val(GasProductionStep)*ELNGSCRV_Function( VALUENG)(GasProductionStep)
                    endif
                }
                Comment: "ED$GAS,3";
            }
        }
        DeclarationSection ED_LOAD_Completed {
            Parameter ccalc_cG_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1) | SupplyRegion in SupplyRegion_SUB_ and SupplyRegion_ALT1 in SupplyRegion_SUB_ and SupplyRegion = SupplyRegion_ALT1;
                Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
                Definition: UTWDTH(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion_ALT1)) * 0.1;
            }
            Parameter ccalc_cSPx_EFDCOSTS {
                IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_;
                Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
                Definition: -0.001;
            }
            Parameter ccalc_cSPx_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice)| SupplyRegion in SupplyRegion_SUB_;
                Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
                Definition: -1.0;
            }
            Parameter ccalc_cSPx_LBOUND {
                IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and  Slice <= Slice_element(Season,SupplyRegion);
                Text: "OML Columns: SP(****)(*)(*) and OML Rows: LBOUND";
                Definition: {
                    SR_RQMT_HGHT(SupplyRegion) * UTHGHT(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion),SupplyRegion)
                    + SR_RQMT_DIFF(SupplyRegion) * (MAX_Load(Season,SupplyRegion) - UTHGHT(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion),SupplyRegion) )
                }
            }
            Parameter ccalc_cSPx_UBOUND {
                IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and  Slice <= Slice_element(Season,SupplyRegion);
                Text: "OML Columns: SP(****)(*)(*) and OML Rows: UBOUND";
                Definition: 30000.0;
            }
            Parameter ccalc_cG_LBOUND {
                IndexDomain: (SupplyRegion_ALT1) | ord(SupplyRegion_ALT1) < 23;
                Text: "OML Columns: G(*)CGTRAD and OML Rows: LBOUND";
                Definition: BTCOGEN(SupplyRegion_ALT1) / 8.76;
            }
            Parameter ccalc_cG_UBOUND {
                IndexDomain: (SupplyRegion_ALT1) | ord(SupplyRegion_ALT1) < 23;
                Text: "OML Columns: G(*)CGTRAD and OML Rows: UBOUND";
                Definition: BTCOGEN(SupplyRegion_ALT1) / 8.76;
            }
            Parameter ccalc_cES_EFDCOSTS {
                IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and  Slice <= Slice_element(Season,SupplyRegion);
                Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
                Definition: {
                     999.99 * UTWDTH(Segment2_element(Slice,Season,SupplyRegion),
                                        Group2_element(Slice,Season,SupplyRegion)) * 0.001
                }
            }
            Parameter ccalc_cES_UBOUND {
                IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and  Slice <= Slice_element(Season,SupplyRegion);
                Text: "OML Columns: ES(****)(*)(*) and OML Rows: UBOUND";
                Definition: 99.9;
            }
            Parameter ccalc_cES_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and  Slice <= Slice_element(Season,SupplyRegion);
                Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
                Definition: 0.1 * UTWDTH(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion));
            }
            Parameter ccalc_cRHS_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and  Slice <= Slice_element(Season,SupplyRegion);
                Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
                Definition: {
                    0.1 * UTHGHT(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion),SupplyRegion)
                    * UTWDTH(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion))
                }
            }
        }
        DeclarationSection ED_OIL_Completed {
            Parameter ccalc_cRTUS_rCARBONn {
                IndexDomain: (CarbonRegion,OilRegion);
                Text: "OML Columns: RTUS(**) and OML Rows: CARBON(**)";
                Definition: {
                    IF (CarbonRegion = 'XX') THEN
                      ERLEL(cyr) * 0.001
                    ENDIF
                }
            }
            Parameter ccalc_cRPUS_rS_RSUSle {
                IndexDomain: (ResidProductionStep);
                Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
                Definition: -1.0;
            }
            Parameter ccalc_cRTUS_EFDCOSTS {
                IndexDomain: (OilRegion);
                Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
                Definition: {
                    !  Remove carbon cost, if EFD Constraint
                             IF ((USW_CAR('1') = 2 OR USW_CAR('1') = 3) AND (CURIYR('1') + UHBSYR('1')) >= UYR_CAR('1') AND TAX_FLAG('1') OR PERMIT_FLAG('1')) THEN
                                 UPFUEL(FuelType_UIRL_element,int_fuel_region_element_oil(OilRegion)) - IT_WOP(cyr,'1')/CFCRDIMP(cyr) - JRSEL(cyr)
                              ELSE
                                 UPFUEL(FuelType_UIRL_element,int_fuel_region_element_oil(OilRegion)) - IT_WOP(cyr,'1')/CFCRDIMP(cyr)
                              ENDIF
                }
            }
            Parameter ccalc_cRPUS_EFDCOSTS {
                IndexDomain: (ResidProductionStep);
                Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
                Definition: IT_WOP(cyr,'1')/CFCRDIMP(cyr);
            }
            Parameter ccalc_cRTUS_rS_RSUSle {
                IndexDomain: (OilRegion);
                Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
                Definition: 1.0;
            }
            Parameter ccalc_cRTUS_rRSle {
                IndexDomain: (CensusRegion,OilRegion) | CensusRegion <> '10' and CensusRegion <> '11';
                Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
                Definition: {
                    IF (ord(OilRegion) = ord(CensusRegion) ) THEN
                    -1.0
                    ENDIF
                }
            }
        }
        DeclarationSection ED_OP_Completed {
            Parameter ccalc_cRHS_rMRXge {
                IndexDomain: (PlantGroup);
                Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
                Definition: {
                    
                                        if PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))  then
                                           Intermediate_ccalc_cRHS_rMRXge(PlantGroupOrd2PlantGroup(PlantGroup))
                                        endif
                    
                                         /*
                    
                                             DO N = 1, N_EFD_GRPS
                                               IECP = UG_ECPt(N)
                                                 IF (UG_MRUN(N) .GT. 0 .AND. IECP .LE. (ECP_D_DSP + ECP_D_RNW)) THEN
                                                    IPGRP = EFD_GRPS_F(N)
                                                    WRITE(NUM,'(I5.5)') IPGRP
                                                    ROW = 'MR'//NUM//'X'; call makmsk(ROW_mask,':MR:',NUM,':X:')
                                                    IF (EFDMAT .EQ. 0) CALL DROWTYPE(ROW,'G       ',ROW_mask)
                                                    VALUE = 0.0
                                                    DO WHILE (IPGRP .GT. 0)
                                                       DO IS = 1, EENSP
                                                         VALUE = VALUE + ECMRUNCF(IPGRP) * EFACTR * UP_CAP(IS,IPGRP) * EETIME(IS) * 0.001
                                                       ENDDO
                                                       IPGRP = EFD_GRPS_N(IPGRP)
                                                    END DO
                                                    VALUE = 0.99 * VALUE
                                                    CALL DRHS(EFDRHS,ROW,VALUE*0.1,ROW_mask,'ED$OP,1')
                                                 ENDIF
                                              END DO
                                        !*/
                }
            }
            Parameter Intermediate_ccalc_cRHS_rMRXge {
                IndexDomain: (PlantGroupOrd);
                Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
                Definition: {
                    
                                        SUM((PlantGroup,Season)|UG_MRUN(PlantGroupOrd) > 0 AND UG_ECPt(PlantGroupOrd) <= (card(DispatchableECP_) +ECP_RNW('1'))  !+ card(OtherRenewable_))
                                            and PlantGroup2PlantGroupOrd_Map(PlantGroup, PlantGroupOrd), ECMRUNCF(PlantGroup)*EFACTR('1', first(SupplyRegion))*UP_CAP(Season, PlantGroup)*EETIME(Season, first(SupplyRegion))*0.001)*0.1*0.99
                    
                                         /*
                    
                                             DO N = 1, N_EFD_GRPS
                                               IECP = UG_ECPt(N)
                                                 IF (UG_MRUN(N) .GT. 0 .AND. IECP .LE. (ECP_D_DSP + ECP_D_RNW)) THEN
                                                    IPGRP = EFD_GRPS_F(N)
                                                    WRITE(NUM,'(I5.5)') IPGRP
                                                    ROW = 'MR'//NUM//'X'; call makmsk(ROW_mask,':MR:',NUM,':X:')
                                                    IF (EFDMAT .EQ. 0) CALL DROWTYPE(ROW,'G       ',ROW_mask)
                                                    VALUE = 0.0
                                                    DO WHILE (IPGRP .GT. 0)
                                                       DO IS = 1, EENSP
                                                         VALUE = VALUE + ECMRUNCF(IPGRP) * EFACTR * UP_CAP(IS,IPGRP) * EETIME(IS) * 0.001
                                                       ENDDO
                                                       IPGRP = EFD_GRPS_N(IPGRP)
                                                    END DO
                                                    VALUE = 0.99 * VALUE
                                                    CALL DRHS(EFDRHS,ROW,VALUE*0.1,ROW_mask,'ED$OP,1')
                                                 ENDIF
                                              END DO
                                        !*/
                }
            }
            Parameter ccalc_cRHS_rP2le {
                IndexDomain: (Slice,SupplyRegion,Season) |P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
                Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
                Definition: {
                    P2_TEST(SupplyRegion) * 0.001 * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion) * 0.1
                    
                    
                    
                                        !IF (P2_TEST(IRG) .GT. 0.0) THEN
                                        !          DO IS = 1, EENSP
                                        !             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
                                        !               DO IVSL = 1 , ELNVCT(IS)
                                        !                  GRP = ELGRP(IVSL,IS)
                                        !                  SEG = ELSEG(IVSL,IS)
                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
                                        !                  FSLCD = CHAR(64+FSL)
                                        !                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
                                        !                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
                                        !                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
                                        !                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
                                        !                  CALL DVAL(COL,LOAD,DBLE(-1.0),COL_mask,LOAD_mask,'ED$OP,9')
                                        !
                                        !                  P2ROW = 'P2' // FSLCD // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(P2ROW_mask,':P2:' , FSLCD , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !                  CALL DROWTYPE(P2ROW,'L       ',P2ROW_mask)
                                        !                  CALL DVAL(COL,P2ROW,DBLE(1.0),COL_mask,P2ROW_mask,'ED$OP,10')
                                        !                  CALL DRHS(EFDRHS,P2ROW,DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),P2ROW_mask,'ED$OP,11')
                                        !
                }
            }
            Parameter P2_TEST {
                IndexDomain: SupplyRegion;
                Definition: {
                                        sum(PlantGroupOrd | UG_EFDt(PlantGroupOrd)=UIHYR('1') and UG_ECPt(PlantGroupOrd)= WIP2('1') and Ord(SupplyRegion)=UG_EMM_RG(PlantGroupOrd), UG_CAP0(PlantGroupOrd))
                    
                    
                    
                                        !!   loop over all EFD Groups
                                        !
                                        !      DO N = 1, N_EFD_GRPS
                                        !       IRG = UG_EMM_RG(N)
                                        !       IP = UG_EFDt(N)
                                        !!
                                        !!      ACCUMULATE TOTAL GENERATION BY ECP TYPE FOR MUST RUN CONSTRAINT SAFETY CALCULATION
                                        !!
                                        !       IECP = UG_ECPt(N)
                                        !       IF (UG_MRUN(N) .GT. 0) THEN
                                        !          TGEN(IECP,IRG) = TGEN(IECP,IRG) + UG_GEN(0,N)
                                        !       END IF
                                        !       IF (IP .EQ. UIHYR) PS_TEST(IRG) = PS_TEST(IRG) + UG_CAP(0,N)
                                        !       IF (IP .EQ. UIHYR) THEN
                                        !           IF (IECP .EQ. WIP2) THEN
                                        !               P2_TEST(IRG) = P2_TEST(IRG) + UG_CAP(0,N)
                                        !           ELSE
                                        !               PS_TEST(IRG) = PS_TEST(IRG) + UG_CAP(0,N)
                                        !           END IF
                                        !       ENDIF
                                        !      END DO
                }
            }
            Parameter PS_TEST {
                IndexDomain: SupplyRegion;
                Definition: {
                                        sum(PlantGroupOrd | UG_EFDt(PlantGroupOrd)=UIHYR('1') and UG_ECPt(PlantGroupOrd)<> WIP2('1') and Ord(SupplyRegion)=UG_EMM_RG(PlantGroupOrd), UG_CAP0(PlantGroupOrd))
                    
                    
                    
                                        !!   loop over all EFD Groups
                                        !
                                        !      DO N = 1, N_EFD_GRPS
                                        !       IRG = UG_EMM_RG(N)
                                        !       IP = UG_EFDt(N)
                                        !!
                                        !!      ACCUMULATE TOTAL GENERATION BY ECP TYPE FOR MUST RUN CONSTRAINT SAFETY CALCULATION
                                        !!
                                        !       IECP = UG_ECPt(N)
                                        !       IF (UG_MRUN(N) .GT. 0) THEN
                                        !          TGEN(IECP,IRG) = TGEN(IECP,IRG) + UG_GEN(0,N)
                                        !       END IF
                                        !       IF (IP .EQ. UIHYR) PS_TEST(IRG) = PS_TEST(IRG) + UG_CAP(0,N)
                                        !       IF (IP .EQ. UIHYR) THEN
                                        !           IF (IECP .EQ. WIP2) THEN
                                        !               P2_TEST(IRG) = P2_TEST(IRG) + UG_CAP(0,N)
                                        !           ELSE
                                        !               PS_TEST(IRG) = PS_TEST(IRG) + UG_CAP(0,N)
                                        !           END IF
                                        !       ENDIF
                                        !      END DO
                }
            }
            Parameter ccalc_cS2_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice)|P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
                Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
                Definition: {
                                        -1
                    
                                        !IF (P2_TEST(IRG) .GT. 0.0) THEN
                                        !          DO IS = 1, EENSP
                                        !             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
                                        !               DO IVSL = 1 , ELNVCT(IS)
                                        !                  GRP = ELGRP(IVSL,IS)
                                        !                  SEG = ELSEG(IVSL,IS)
                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
                                        !                  FSLCD = CHAR(64+FSL)
                                        !                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
                                        !                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
                                        !                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
                                        !                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
                                        !                  CALL DVAL(COL,LOAD,DBLE(-1.0),COL_mask,LOAD_mask,'ED$OP,9')
                                        !
                }
            }
            Parameter ccalc_cS2_rP2_le {
                IndexDomain: (SupplyRegion,Season,Slice)|P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
                Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
                Definition: {
                                        -1
                    
                    
                                        !IF (P2_TEST(IRG) .GT. 0.0) THEN
                                        !          DO IS = 1, EENSP
                                        !             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
                                        !               DO IVSL = 1 , ELNVCT(IS)
                                        !                  GRP = ELGRP(IVSL,IS)
                                        !                  SEG = ELSEG(IVSL,IS)
                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
                                        !                  FSLCD = CHAR(64+FSL)
                                        !                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
                                        !                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
                                        !                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
                }
            }
            Parameter ccalc_cS2_rP2le {
                IndexDomain: (Slice,SupplyRegion,Season)|P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
                Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
                Definition: {
                                        1
                    
                    
                    
                    
                                        !IF (P2_TEST(IRG) .GT. 0.0) THEN
                                        !          DO IS = 1, EENSP
                                        !             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
                                        !               DO IVSL = 1 , ELNVCT(IS)
                                        !                  GRP = ELGRP(IVSL,IS)
                                        !                  SEG = ELSEG(IVSL,IS)
                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
                                        !                  FSLCD = CHAR(64+FSL)
                                        !                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
                                        !                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
                                        !                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
                                        !                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
                                        !                  CALL DVAL(COL,LOAD,DBLE(-1.0),COL_mask,LOAD_mask,'ED$OP,9')
                                        !
                                        !                  P2ROW = 'P2' // FSLCD // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(P2ROW_mask,':P2:' , FSLCD , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !                  CALL DROWTYPE(P2ROW,'L       ',P2ROW_mask)
                                        !                  CALL DVAL(COL,P2ROW,DBLE(1.0),COL_mask,P2ROW_mask,'ED$OP,10')
                }
            }
            Parameter ccalc_cS2_UBOUND {
                IndexDomain: (SupplyRegion,Season,Slice) |P2_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
                Text: "OML Columns: S2(****)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
                Definition: {
                    P2_TEST(SupplyRegion) * 0.001 * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion) * 0.1
                    
                    
                                        !IF (P2_TEST(IRG) .GT. 0.0) THEN
                                        !          DO IS = 1, EENSP
                                        !             ROWSTOR = 'P2_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':P2_:' , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !             CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
                                        !               DO IVSL = 1 , ELNVCT(IS)
                                        !                  GRP = ELGRP(IVSL,IS)
                                        !                  SEG = ELSEG(IVSL,IS)
                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
                                        !                  FSLCD = CHAR(64+FSL)
                                        !                  COL = 'S2'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':S2:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
                                        !                  CALL DBND(EFDBND,COL,DBLE(0.0),DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,7')
                                        !                  CALL DVAL(COL,ROWSTOR,DBLE(-1.0),COL_mask,ROWSTOR_mask,'ED$OP,8')
                                        !                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
                                        !                  CALL DVAL(COL,LOAD,DBLE(-1.0),COL_mask,LOAD_mask,'ED$OP,9')
                                        !
                                        !                  P2ROW = 'P2' // FSLCD // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(P2ROW_mask,':P2:' , FSLCD , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !                  CALL DROWTYPE(P2ROW,'L       ',P2ROW_mask)
                                        !                  CALL DVAL(COL,P2ROW,DBLE(1.0),COL_mask,P2ROW_mask,'ED$OP,10')
                                        !                  CALL DRHS(EFDRHS,P2ROW,DBLE(P2_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),P2ROW_mask,'ED$OP,11')
                }
            }
            Parameter ccalc_cST_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice)|PS_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
                Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
                Definition: {
                                        -1
                    
                    
                                        !DO IRG = 1 , UNRGNS
                                        !         IF (PS_TEST(IRG) .GT. 0.0) THEN
                                        !            DO IS = 1, EENSP
                                        !               ROWSTOR = 'PS_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':PS_:' , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !               CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
                                        !               DO IVSL = 1 , ELNVCT(IS)
                                        !                  GRP = ELGRP(IVSL,IS)
                                        !                  SEG = ELSEG(IVSL,IS)
                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
                                        !                  FSLCD = CHAR(64+FSL)
                                        !                  COL = 'ST'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':ST:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
                                        !                  CALL DBND(EFDBND,COL,0.0D0,DBLE(PS_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,2')
                                        !                  CALL DVAL(COL,ROWSTOR,NEG1,COL_mask,ROWSTOR_mask,'ED$OP,3')
                                        !                  LOAD = 'LD'//URGNME(IRG)(1:4)//CHCOD(IS)//FSLCD; call makmsk(LOAD_mask,':LD:',URGNME(IRG)(1:4),CHCOD(IS),FSLCD)
                                        !                  CALL DVAL(COL,LOAD,NEG1,COL_mask,LOAD_mask,'ED$OP,4')
                }
            }
            Parameter ccalc_cST_rPS_le {
                IndexDomain: (SupplyRegion,Season,Slice) |PS_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
                Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
                Definition: {
                                        -1
                    
                    
                                        !DO IRG = 1 , UNRGNS
                                        !         IF (PS_TEST(IRG) .GT. 0.0) THEN
                                        !            DO IS = 1, EENSP
                                        !               ROWSTOR = 'PS_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':PS_:' , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !               CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
                                        !               DO IVSL = 1 , ELNVCT(IS)
                                        !                  GRP = ELGRP(IVSL,IS)
                                        !                  SEG = ELSEG(IVSL,IS)
                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
                                        !                  FSLCD = CHAR(64+FSL)
                                        !                  COL = 'ST'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':ST:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
                                        !                  CALL DBND(EFDBND,COL,0.0D0,DBLE(PS_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,2')
                                        !                  CALL DVAL(COL,ROWSTOR,NEG1,COL_mask,ROWSTOR_mask,'ED$OP,3')
                                        !
                }
            }
            Parameter ccalc_cST_UBOUND {
                IndexDomain: (SupplyRegion,Season,Slice) |PS_TEST(SupplyRegion)>0 and Slice <= Max_Slice_element;
                Text: "OML Columns: ST(****)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
                Definition: {
                    PS_TEST(SupplyRegion) * 0.001 * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion) * 0.1
                    
                                        !DO IRG = 1 , UNRGNS
                                        !         IF (PS_TEST(IRG) .GT. 0.0) THEN
                                        !            DO IS = 1, EENSP
                                        !               ROWSTOR = 'PS_' // URGNME(IRG)(1:4) // CHCOD(IS); call makmsk(ROWSTOR_mask,':PS_:' , URGNME(IRG)(1:4) , CHCOD(IS))
                                        !               CALL DROWTYPE(ROWSTOR,'L       ',ROWSTOR_mask)
                                        !               DO IVSL = 1 , ELNVCT(IS)
                                        !                  GRP = ELGRP(IVSL,IS)
                                        !                  SEG = ELSEG(IVSL,IS)
                                        !                  FSL = EFD_Slice_ID(GRP,SEG)
                                        !                  FSLCD = CHAR(64+FSL)
                                        !                  COL = 'ST'// URGNME(IRG)(1:4) // CHCOD(IS) // FSLCD; call makmsk(COL_mask,':ST:', URGNME(IRG)(1:4) , CHCOD(IS) , FSLCD)
                                        !                  CALL DBND(EFDBND,COL,0.0D0,DBLE(PS_TEST(IRG) * 0.001 * ELWDTH(IVSL,IS) * 0.1),col_mask,'ED$OP,2')
                    
                                        !
                }
            }
        }
        DeclarationSection ED_PM_Completed {
            Parameter ccalc_cMB_EFDCOSTS {
                IndexDomain: {
                    (PlantGroup,Season) | UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<=EFD_DSP('1') and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1
                                           and EFDMAT('1')=0
                }
                Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
                Definition: {
                    if PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))  then
                    	0.001
                    endif
                    
                    !DO I_EFD_GRP = 1 , N_EFD_GRPS
                    !         IRG = UG_EMM_RG(I_EFD_GRP)
                    !         IP = UG_EFDt(I_EFD_GRP)
                    !         IGRP = EFD_GRPS_F(I_EFD_GRP)
                    !         IF (IP .LE. EFD_D_DSP) THEN
                    !            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
                    !               totpm = 0.0
                    !               WRITE(NUM,'(I5.5)') IGRP
                    !               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
                    !               CALL DROWTYPE(ROW,'G       ',ROW_mask)
                    !               DO IS = 1, EENSP
                    !                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
                    !                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
                    !
                    !
                    !!                 put nominal cost in OBJ to prevent overscheduling
                    !
                    !                  CALL DVAL(COL,EFDOBJ,0.001D0,COL_mask,EFDOBJ,'ED$PM,5')
                    !               ENDDO
                }
                Comment: "ED$PM,5";
            }
            Parameter ccalc_cMB_rCBle {
                IndexDomain: (PlantGroup,Season) | UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<=EFD_DSP('1') and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1 and EFDMAT('1')=0;
                Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
                Definition: {
                                        if PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))  then
                                           1
                                        endif
                    
                                        !     DO I_EFD_GRP = 1 , N_EFD_GRPS
                                        !         IRG = UG_EMM_RG(I_EFD_GRP)
                                        !         IP = UG_EFDt(I_EFD_GRP)
                                        !         IGRP = EFD_GRPS_F(I_EFD_GRP)
                                        !
                                        !         IF (IP .LE. EFD_D_DSP) THEN
                                        !            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
                                        !               totpm = 0.0
                                        !               WRITE(NUM,'(I5.5)') IGRP
                                        !               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
                                        !               CALL DROWTYPE(ROW,'G       ',ROW_mask)
                                        !               DO IS = 1, EENSP
                                        !                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
                                        !                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
                                        !
                    
                                        !
                                        !!                 intersect with capacity balance row
                                        !
                                        !                  CALL DVAL(COL,CBROW,1.0D0,COL_mask,CBROW_mask,'ED$PM,3')
                }
                Comment: "ED$PM,3";
            }
            Parameter ccalc_cMB_rMBge {
                IndexDomain: {
                    (SupplyRegion_ALT1,PlantGroup,Season) | UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<=EFD_DSP('1') and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1 and
                                                            SupplyRegion_ALT1=element(SupplyRegion_, UG_EMM_RG(PlantGroupOrd2PlantGroup(PlantGroup))) and EFDMAT('1')=0
                }
                Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
                Definition: {
                                        if PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))  then
                                           EETIME(Season, SupplyRegion_ALT1)/1000.0
                                        endif
                    
                                        !      DO I_EFD_GRP = 1 , N_EFD_GRPS
                                        !         IRG = UG_EMM_RG(I_EFD_GRP)
                                        !         IP = UG_EFDt(I_EFD_GRP)
                                        !         IGRP = EFD_GRPS_F(I_EFD_GRP)
                                        !         IF (IP .LE. EFD_D_DSP) THEN
                                        !            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
                                        !               totpm = 0.0
                                        !               WRITE(NUM,'(I5.5)') IGRP
                                        !               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
                                        !               CALL DROWTYPE(ROW,'G       ',ROW_mask)
                                        !               DO IS = 1, EENSP
                                        !                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
                                        !                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
                                        !
                                        !
                                        !!                 intersect with planned maintenance row
                                        !
                                        !                  HRVAL = DBLE(EETIME(IS)/1000.0)
                                        !                  CALL DVAL(COL,ROW,HRVAL,COL_mask,ROW_mask,'ED$PM,4')
                }
                Comment: "ED$PM,4";
            }
            Parameter ccalc_cMB_UBOUND {
                IndexDomain: (PlantGroup,Season) | UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<=EFD_DSP('1') and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1 and EFDMAT('1')=0;
                Text: "OML Columns: MB(*****)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
                Definition: {
                    if PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))  then
                    	UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.001
                    else
                    	inf
                    endif
                    
                    
                    
                    
                                                            !DO I_EFD_GRP = 1 , N_EFD_GRPS
                                                            !         IRG = UG_EMM_RG(I_EFD_GRP)
                                                            !         IP = UG_EFDt(I_EFD_GRP)
                                                            !         IGRP = EFD_GRPS_F(I_EFD_GRP)
                                                            !         IF (IP .LE. EFD_D_DSP) THEN
                                                            !            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
                                                            !               totpm = 0.0
                                                            !               WRITE(NUM,'(I5.5)') IGRP
                                                            !               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
                                                            !               CALL DROWTYPE(ROW,'G       ',ROW_mask)
                                                            !               DO IS = 1, EENSP
                                                            !                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
                                                            !                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
                                                            !
                                                            !!                 capacity balance row
                                                            !
                                                            !                  CBROW = 'CB'//NUM//CHCODX(IS); call makmsk(CBROW_mask,':CB:',NUM,CHCODX(IS))
                                                            !                  CALL DROWTYPE(CBROW,'L       ',CBROW_mask)
                                                            !                  val = DBLE(UG_CAP(IS,I_EFD_GRP) * 0.001)
                                                            !                  CALL DRHS(EFDRHS,CBROW,VAL,CBROW_mask,'ED$PM,1')
                                                            !
                                                            !!                 column for planned maint decision
                                                            !
                                                            !                  COL = 'MB'//NUM//CHCODX(IS); call makmsk(COL_mask,':MB:',NUM,CHCODX(IS))
                                                            !                  CALL DBND(EFDBND,COL,0.0D0,VAL,COL_mask,'ED$PM,2')
                }
                Comment: "ED$PM,2";
            }
            Parameter ccalc_cRHS_rCBle {
                IndexDomain: (PlantGroup,Season) | PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)));
                Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
                Definition: {
                    if (EFDMAT('1')=0 and UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<=EFD_DSP('1') and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1 ) or
                       (EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=3 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))) then
                            UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup)) * 0.001
                    
                    endif
                    
                    !DO I_EFD_GRP = 1 , N_EFD_GRPS
                    !         IRG = UG_EMM_RG(I_EFD_GRP)
                    !         IP = UG_EFDt(I_EFD_GRP)
                    !         IGRP = EFD_GRPS_F(I_EFD_GRP)
                    !         IF (IP .LE. EFD_D_DSP) THEN
                    !            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
                    !               totpm = 0.0
                    !               WRITE(NUM,'(I5.5)') IGRP
                    !               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
                    !               CALL DROWTYPE(ROW,'G       ',ROW_mask)
                    !               DO IS = 1, EENSP
                    !                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
                    !                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
                    !
                    !!                 capacity balance row
                    !
                    !                  CBROW = 'CB'//NUM//CHCODX(IS); call makmsk(CBROW_mask,':CB:',NUM,CHCODX(IS))
                    !                  CALL DROWTYPE(CBROW,'L       ',CBROW_mask)
                    !                  val = DBLE(UG_CAP(IS,I_EFD_GRP) * 0.001)
                    !                  CALL DRHS(EFDRHS,CBROW,VAL,CBROW_mask,'ED$PM,1')
                    
                    !From OPRNBS:
                    !ELSEIF (EPPOPR(IP) .EQ. 3) THEN
                    !         CALL OPRNBS(N)
                    !
                    !IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                    !            ROW = 'CB'//NUM//CHCOD(IS); call makmsk(ROW_mask,':CB:',NUM,CHCOD(IS))
                    !            CALL DROWTYPE(ROW,'L       ',ROW_mask)
                    !            CALL DRHS(EFDRHS,ROW,DBLE(CAP(IS)*0.001),ROW_mask,'OPRNBS,16')
                }
                Comment: {
                    "ED$PM,1
                    OPRNBS,16"
                }
            }
            Parameter ccalc_cRHS_rMBge {
                IndexDomain: {
                    (SupplyRegion_ALT1,PlantGroup) | UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))<=EFD_DSP('1') and EPPOPM(Element(PlantType_,UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))))=1 and
                                                     SupplyRegion_ALT1=element(SupplyRegion_, UG_EMM_RG(PlantGroupOrd2PlantGroup(PlantGroup))) and EFDMAT('1')=0
                }
                Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
                Definition: {
                    if PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))  then
                    	max(0,sum(Season, UG_PMR(PlantGroupOrd2PlantGroup(PlantGroup))*UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))
                    	     * 0.001* EETIME(Season, SupplyRegion_ALT1) * 0.001)-0.0005)
                    endif
                    
                    !      DO I_EFD_GRP = 1 , N_EFD_GRPS
                    !         IRG = UG_EMM_RG(I_EFD_GRP)
                    !         IP = UG_EFDt(I_EFD_GRP)
                    !         IGRP = EFD_GRPS_F(I_EFD_GRP)
                    !         if (mnumyr.eq.36) then
                    !           write (6,*) I_EFD_GRP,UG_EFDt(I_EFD_GRP),EFD_GRPS_F(I_EFD_GRP),EPPOPM(IP)
                    !         endif
                    !         IF (IP .LE. EFD_D_DSP) THEN
                    !            IF (EPPOPM(IP) .EQ. 1)  THEN  ! baseload plant type, do maintenance by group
                    !               totpm = 0.0
                    !               WRITE(NUM,'(I5.5)') IGRP
                    !               ROW = 'MB'//REGCD(IRG)//NUM; call makmsk(ROW_mask,':MB:',REGCD(IRG),NUM)
                    !               CALL DROWTYPE(ROW,'G       ',ROW_mask)
                    !               DO IS = 1, EENSP
                    !                  cap = UG_CAP(IS,I_EFD_GRP) * 0.001
                    !                  totpm = totpm + UG_PMR(I_EFD_GRP) * cap * EETIME(IS) * 0.001
                    !
                    
                    !               ENDDO
                    !               val = MAX(0.0,DBLE(totpm)-0.0005)
                    !               CALL DRHS(EFDRHS,ROW,VAL,ROW_mask,'ED$PM,6')
                }
                Comment: "ED$PM,6";
            }
        }
        DeclarationSection ED_RNW_Completed;
        DeclarationSection ED_TRADE_Completed {
            Parameter ccalc_cTR_rIMle {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
                            and SupplyRegion_ALTfrom in SupplyRegion_SUB_
                                 and SupplyRegion_ALTto in SupplyRegion_SUB_
                                     and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
                                         and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                     (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                            1.0      !Import
                    endif
                }
            }
            Parameter ccalc_cSR_rIMle {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
                            and SupplyRegion_ALTfrom in SupplyRegion_SUB_
                                 and SupplyRegion_ALTto in SupplyRegion_SUB_
                                     and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
                                         and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                      (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                            1.0   !import
                    endif
                }
            }
            Parameter ccalc_cSC_rCNCPle {
                IndexDomain: {
                    (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                }
                Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
                       and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
                       and (SR_TRAN_CREDIT('1') > 0.0) then
                         1.0
                    endif
                }
            }
            Parameter ccalc_cTC_rCNCPle {
                IndexDomain: {
                    (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                }
                Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
                       and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001) then
                         1.0
                    endif
                }
            }
            Parameter ccalc_cRHS_rCNCPle {
                IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) | Slice <= Max_Slice_element;
                Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
                Definition: {
                    if (EFD_GW(Segment2_element(Slice,Season,LAST(SupplyRegion_Sub)),Group2_element(Slice,Season,LAST(SupplyRegion_Sub)),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001) then
                          EFD_GW(Segment2_element(Slice,Season,LAST(SupplyRegion_Sub)),Group2_element(Slice,Season,LAST(SupplyRegion_Sub)),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr)
                          * ECANSQZ(CanadianSupplyRegion,cyr)
                          * CAN_QTY_SCMULT(cyr)
                    endif
                }
                Comment: "DBLE(EFD_GW(ISEG,GRP,CSTP,CRG,CURIYR) * ECANSQZ(CRG,CURIYR) * CAN_QTY_SCMULT(CURIYR))";
            }
            Parameter ccalc_cSC_rSRge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
                                   and SupplyRegion in SupplyRegion_SUB_
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                }
                Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
                       and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
                       and  (SR_TRAN_CREDIT('1') > 0.0)
                       and  (SupplyRegion = SupplyRegion_ALT2) then
                            SR_TRAN_CREDIT('1')
                          * (1  - LINELOSS('1'))
                    endif
                }
                Comment: "BLE(SR_TRAN_CREDIT*(1.0-LINELOSS))";
            }
            Parameter ccalc_cSC_rLDge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
                                   and SupplyRegion in SupplyRegion_SUB_
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                }
                Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
                       and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
                       and  (SR_TRAN_CREDIT('1') > 0.0)
                       and  (SupplyRegion = SupplyRegion_ALT2) then
                            (1 - SR_TRAN_CREDIT('1'))
                          * (1  - LINELOSS('1'))
                          * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2)) * 0.1
                    endif
                }
                Comment: "DBLE((1.0-SR_TRAN_CREDIT)*(1.0-LINELOSS)*HRS*0.1)";
            }
            Parameter ccalc_cTC_rLDge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) | SupplyRegion_ALT2 in SupplyRegion_SUB_
                                   and SupplyRegion in SupplyRegion_SUB_
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                }
                Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
                       and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
                       and  (SupplyRegion = SupplyRegion_ALT2) then
                            (1  - LINELOSS('1'))
                          * UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2)) * 0.1
                    endif
                }
                Comment: "DBLE((1.0-LINELOSS)*HRS*0.1)";
            }
            Parameter ccalc_cSC_EFDCOSTS {
                IndexDomain: {
                    (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) | SupplyRegion_ALT2 in SupplyRegion_SUB_
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                }
                Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
                       and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
                       and  (SR_TRAN_CREDIT('1') > 0) then
                          (1  - SR_TRAN_CREDIT('1'))
                        * ( (CAN_CST(ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) * CAN_CST_SCMULT(cyr))
                        + (PTHRESH1(cyr,CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2),SupplyRegion_All_element(SupplyRegion_ALT2)) + PTHRESH2(cyr,CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2),SupplyRegion_All_element(SupplyRegion_ALT2)) + BARRIER(cyr)) )
                        *  UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2)) * 0.001
                    endif
                }
            }
            Parameter ccalc_cTC_EFDCOSTS {
                IndexDomain: {
                    (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) | SupplyRegion_ALT2 in SupplyRegion_SUB_
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                }
                Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
                       and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001) then
                         (  (CAN_CST(ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) * CAN_CST_SCMULT(cyr))
                           + (PTHRESH1(cyr,CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2),SupplyRegion_All_element(SupplyRegion_ALT2)) + PTHRESH2(cyr,CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2),SupplyRegion_All_element(SupplyRegion_ALT2)) + BARRIER(cyr)) )
                         *  UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2)) * 0.001
                    endif
                }
                Comment: "DBLE(((CAN_CST(CSTP,CRG,CURIYR)*CAN_CST_SCMULT(CURIYR))+TRANCST)*HRS*0.001)";
            }
            Parameter ccalc_cSC_rTCNle {
                IndexDomain: {
                    (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) | SupplyRegion_ALT2 in SupplyRegion_SUB_
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                }
                Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
                       and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001)
                       and (SR_TRAN_CREDIT('1') > 0) then
                         1.0
                    endif
                }
            }
            Parameter ccalc_cTC_rTCNle {
                IndexDomain: {
                    (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) | SupplyRegion_ALT2 in SupplyRegion_SUB_
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                                            !and  ord(CanadianSupplyStep) <= EFD_Slice_ID(Group_element(Slice,Season,SupplyRegion_ALT2),Segment_element(Slice,Season,SupplyRegion_ALT2))
                }
                Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001)
                       and (EFD_GW(Segment2_element(Slice,Season,SupplyRegion_ALT2),Group2_element(Slice,Season,SupplyRegion_ALT2),ImportStep_element(CanadianSupplyStep),CanadianSupplyRegion,cyr) > 0.001) then
                         1.0
                    endif
                }
            }
            Parameter ccalc_cRHS_rTCNle {
                IndexDomain: {
                    (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) | SupplyRegion_ALT2 in SupplyRegion_SUB_ and ORD(CanadianSupplyRegion) < card(CanadianSupplyRegion)
                                     and ord(Season) <= EENSP('1',SupplyRegion_ALT2)
                                         and Slice <= Slice_element(Season,SupplyRegion_ALT2)
                }
                Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2)) > 0.001) then
                          CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALT2),CanadianExportRegion_element(CanadianSupplyRegion,SupplyRegion_ALT2))
                    endif
                }
            }
            Parameter ccalc_cSR_rCARBONle {
                IndexDomain: {
                    (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | ord(CarbonRegion) <= CO2_GRP('1')
                            and SupplyRegion_ALTfrom in SupplyRegion_SUB_
                                 and SupplyRegion_ALTto in SupplyRegion_SUB_
                                     and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
                                         and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                      (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
                       and (ord(CarbonRegion) = CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) and  (SR_TRAN_CREDIT('1') > 0) then
                          	 (1-SR_TRAN_CREDIT('1')) * 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTfrom),Group2_element(slice,Season,SupplyRegion_ALTfrom)) * CO2_DE_BY_CA(cyr)
                    elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                      (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
                       and (ord(CarbonRegion) <> CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) and  (SR_TRAN_CREDIT('1') > 0)  then
                          	 (1-SR_TRAN_CREDIT('1')) * 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTto),Group2_element(slice,Season,SupplyRegion_ALTto)) * CO2_DE_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion))
                    endif
                }
            }
            Parameter ccalc_cTR_rCARBONle {
                IndexDomain: {
                    (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | ord(CarbonRegion) <= CO2_GRP('1')
                            and SupplyRegion_ALTfrom in SupplyRegion_SUB_
                                 and SupplyRegion_ALTto in SupplyRegion_SUB_
                                     and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
                                         and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                      (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
                       and (ord(CarbonRegion) = CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) then
                          	 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTfrom),Group2_element(slice,Season,SupplyRegion_ALTfrom)) * CO2_DE_BY_CA(cyr)
                    elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                      (CO2_IM_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion)) > 0.0) and (CO2_DE_BY_RG(SupplyRegion_ALTfrom,CO2CapGroup_element(CarbonRegion)) > 0.0)
                       and (ord(CarbonRegion) <> CARGRP_CA('1')) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto) then
                          	 0.001 * UTWDTH(Segment2_element(slice,Season,SupplyRegion_ALTto),Group2_element(slice,Season,SupplyRegion_ALTto)) * CO2_DE_BY_RG(SupplyRegion_ALTto,CO2CapGroup_element(CarbonRegion))
                    endif
                }
            }
            Parameter ccalc_cSR_rEXle {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
                            and SupplyRegion_ALTfrom in SupplyRegion_SUB_
                                 and SupplyRegion_ALTto in SupplyRegion_SUB_
                                     and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
                                         and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                       (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                            1.0  !export
                    endif
                }
            }
            Parameter ccalc_cTR_rEXle {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
                            and SupplyRegion_ALTfrom in SupplyRegion_SUB_
                                 and SupplyRegion_ALTto in SupplyRegion_SUB_
                                     and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
                                         and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                     (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                            1.0      !Export
                    endif
                }
            }
            Parameter ccalc_cSR_rSRge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
                            and SupplyRegion_ALTfrom in SupplyRegion_SUB_
                                 and SupplyRegion_ALTto in SupplyRegion_SUB_
                                     and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
                                         and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                      (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                             SR_TRAN_CREDIT('1')*(1.0-LINELOSS('1'))   !import
                    elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                       (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                             SR_TRAN_CREDIT('1') * (-1.0)    !export
                    endif
                }
            }
            Parameter ccalc_cSR_rLDge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) | SupplyRegion in SupplyRegion_SUB_
                            and SupplyRegion_ALTfrom in SupplyRegion_SUB_
                                 and SupplyRegion_ALTto in SupplyRegion_SUB_
                                     and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
                                         and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                      (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                              (1.0-SR_TRAN_CREDIT('1'))*(1.0-LINELOSS('1'))*UTWDTH(Segment2_element(slice,Season,SupplyRegion),Group2_element(slice,Season,SupplyRegion_ALTto))*0.1  !import
                    elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and
                       (SR_TRAN_CREDIT('1') > 0) and (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                              (1.0-SR_TRAN_CREDIT('1')) * (-1.0)* UTWDTH(Segment2_element(slice,Season,SupplyRegion),Group2_element(slice,Season,SupplyRegion_ALTto))*0.1    !export
                    endif
                }
            }
            Parameter ccalc_cTR_rLDge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto)  | SupplyRegion in SupplyRegion_SUB_
                            and SupplyRegion_ALTfrom in SupplyRegion_SUB_
                                 and SupplyRegion_ALTto in SupplyRegion_SUB_
                                     and ord(Season) <= Max (EENSP('1',SupplyRegion_ALTfrom), EENSP('1',SupplyRegion_ALTto))
                                         and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SupplyRegion = SupplyRegion_ALTto) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                    (1.0-LINELOSS('1'))*UTWDTH(Segment2_element(slice,Season,SupplyRegion),Group2_element(slice,Season,SupplyRegion_ALTto)) * 0.1   !Import
                    elseif (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SupplyRegion = SupplyRegion_ALTfrom) and (SupplyRegion_ALTfrom <>SupplyRegion_ALTto)  then
                    -1.0*UTWDTH(Segment2_element(Slice,Season,SupplyRegion),Group2_element(Slice,Season,SupplyRegion_ALTfrom)) * 0.1   !Export
                    endif
                }
            }
            Parameter ccalc_cSR_EFDCOSTS {
                IndexDomain: {
                    (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)  | SupplyRegion_ALTfrom in SupplyRegion_SUB_
                            and SupplyRegion_ALTto in SupplyRegion_SUB_
                               and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
                                    and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom), Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SR_TRAN_CREDIT('1') > 0) then
                       (1-SR_TRAN_CREDIT('1')) *
                       (PTHRESH1(cyr,SupplyRegion_ALL_element(SupplyRegion_ALTto),SupplyRegion_ALL_element(SupplyRegion_ALTfrom)) + PTHRESH2(cyr,SupplyRegion_ALL_element(SupplyRegion_ALTto),SupplyRegion_ALL_element(SupplyRegion_ALTfrom)) + BARRIER(cyr)) *  UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto)) * 0.001
                    else
                          0
                    endif
                }
            }
            Parameter ccalc_cTR_EFDCOSTS {
                IndexDomain: {
                    (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)  |  SupplyRegion_ALTfrom in SupplyRegion_SUB_
                            and SupplyRegion_ALTto in SupplyRegion_SUB_
                                and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
                                    and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) then
                      (PTHRESH1(cyr,SupplyRegion_ALL_element(SupplyRegion_ALTto),SupplyRegion_ALL_element(SupplyRegion_ALTfrom)) + PTHRESH2(cyr,SupplyRegion_ALL_element(SupplyRegion_ALTto),SupplyRegion_ALL_element(SupplyRegion_ALTfrom)) + BARRIER(cyr)) *  UTWDTH(Segment2_element(Slice,Season,SupplyRegion_ALTto),Group2_element(Slice,Season,SupplyRegion_ALTto)) * 0.001
                    endif
                }
            }
            Parameter ccalc_cSR_UBOUND {
                IndexDomain: {
                    (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)  |  SupplyRegion_ALTfrom in SupplyRegion_SUB_
                            and SupplyRegion_ALTto in SupplyRegion_SUB_
                                and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
                                    and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SR_TRAN_CREDIT('1') > 0) then
                         CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom))
                    else
                        inf
                    endif
                }
            }
            Parameter ccalc_cTR_rTLle {
                IndexDomain: {
                    (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)  |  SupplyRegion_ALTfrom in SupplyRegion_SUB_
                            and SupplyRegion_ALTto in SupplyRegion_SUB_
                                and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
                                    and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SR_TRAN_CREDIT('1') > 0) then
                          1.0
                    else
                          0
                    endif
                }
            }
            Parameter ccalc_cRHS_rTLle {
                IndexDomain: {
                    (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | SupplyRegion_ALTfrom in SupplyRegion_SUB_
                            and SupplyRegion_ALTto in SupplyRegion_SUB_
                                and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
                                    and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) and (SR_TRAN_CREDIT('1') > 0) then
                          CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom))
                    else
                          0
                    endif
                }
            }
            Parameter ccalc_cTR_UBOUND {
                IndexDomain: {
                    (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) | SupplyRegion_ALTfrom in SupplyRegion_SUB_
                            and SupplyRegion_ALTto in SupplyRegion_SUB_
                                and ord(Season) <= Max(EENSP('1',SupplyRegion_ALTfrom),EENSP('1',SupplyRegion_ALTto))
                                    and Slice <= Max(Slice_element(Season,SupplyRegion_ALTfrom),Slice_element(Season,SupplyRegion_ALTto))
                }
                Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: UBOUND";
                Definition: {
                    if (CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom)) > 0.001) then
                          CNSTRNTS_EFD(Season,cyr,SupplyRegion_All_element(SupplyRegion_ALTto),SupplyRegion_All_element(SupplyRegion_ALTfrom))
                    else
                          0
                    endif
                }
            }
            Parameter ccalc_cRHS_rIMle {
                IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and ord(Season) <= EENSP('1',SupplyRegion) and Slice <= Slice_element(Season,SupplyRegion);
                Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
                Definition: {
                    if (URNCSTIM_EFD(Season,SupplyRegion) > 0) then
                        URNCSTIM_EFD(Season,SupplyRegion)
                    else
                        0
                    endif
                }
            }
            Parameter ccalc_cRHS_rEXle {
                IndexDomain: (SupplyRegion,Season,Slice) | SupplyRegion in SupplyRegion_SUB_ and ord(Season) <= EENSP('1',SupplyRegion) and Slice <= Slice_element(Season,SupplyRegion);
                Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
                Definition: {
                    if (URNCSTEX_EFD(Season,SupplyRegion) > 0) then
                        URNCSTEX_EFD(Season,SupplyRegion)
                    else
                        0
                    endif
                }
            }
        }
        DeclarationSection EPA_TRANRG_EFD_Completed;
        DeclarationSection OPBSLD_Completed;
        DeclarationSection OPHYD_Completed {
            Parameter HYD_CF {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
                                                            PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
                                                            and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Definition: {
                    if ( UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIHY('1') and Val(cyr)+UHBSYR('1')>=UPSTYR('1')) then
                       (1.0 - WFOR(UG_EFDt_to_PlantType(PlantGroup))) !* HY_CF_EFD(SEG,IS,IRG)
                    else
                      (1.0 - WFOR(UG_EFDt_to_PlantType(PlantGroup))) 
                    endif
                    
                    !!!!!NEED TO ADD   HY_CF_EFD(SEG,IS,IRG) TO TRANSFER PARAMETERS!!!!!
                }
            }
            Parameter HYD_Gen {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
                                                            PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
                                                            and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Definition: {
                    HYD_CF(SupplyRegion, Season, Slice, PlantGroup) * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion)
                    
                    !!!!!NEED TO ADD   HY_CF_EFD(SEG,IS,IRG) TO TRANSFER PARAMETERS!!!!!
                }
            }
            Parameter HYD_GenMin {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
                                               PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
                                               and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Definition: {
                    if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
                       SR_MIN_CF(UG_ECPt_to_PlantGroup(PlantGroup)) * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion)
                    endif
                }
            }
            Parameter ccalc_cH_rLDge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
                                                            PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
                                                            and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
                Definition: {
                    0.1* HYD_Gen(SupplyRegion, Season, Slice, PlantGroup) 
                    
                    
                     !!!!!NEED TO ADD   HY_CF_EFD(SEG,IS,IRG) TO TRANSFER PARAMETERS!!!!!
                }
                Comment: "OPHYD,1";
            }
            Parameter ccalc_cH_rSRge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
                                               PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
                                               and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
                Definition: {
                    if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
                       SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup)) * (1.0 - HYD_CF(SupplyRegion, Season, Slice, PlantGroup))
                    endif
                    !might need to add region mapping as well
                }
                Comment: "OPHYD,4";
            }
            Parameter ccalc_cH_rFle {
                IndexDomain: {
                    (PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
                                               PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
                }
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
                Definition: {
                    if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
                       1
                    endif
                }
                Comment: "OPHYD,3";
            }
            Parameter ccalc_cH_UBOUND {
                IndexDomain: {
                    (PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element
                                               and PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
                }
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
                Definition: UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001;
                Comment: "OPHYD,9";
            }
            Parameter ccalc_cH_rP2_le {
                IndexDomain: {
                    (SupplyRegion,Season,PlantGroup,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
                                                            PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
                                                            and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
                Definition: {
                    if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIP2('1') and
                        UG_SCF(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0) then
                       0.1*HYD_Gen(SupplyRegion, Season, Slice, PlantGroup) * UFACP2('1')
                    endif
                }
                Comment: "OPHYD,10";
            }
            Parameter ccalc_cH_rP2le {
                IndexDomain: {
                    (Slice,SupplyRegion,Season,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
                                                            PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
                                                            and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
                Definition: {
                    if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))=WIP2('1') and
                        UG_SCF(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0) then
                       0.1*HYD_Gen(SupplyRegion, Season, Slice, PlantGroup) 
                    endif
                }
                Comment: "OPHYD,11";
            }
            Parameter ccalc_cH_rPS_le {
                IndexDomain: {
                    (SupplyRegion,Season,PlantGroup,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
                                                            PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
                                                            and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
                Definition: {
                    if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIP2('1') and
                        UG_SCF(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0) then
                       0.1*HYD_Gen(SupplyRegion, Season, Slice, PlantGroup) * UFACP2('1')
                    endif
                }
                Comment: "OPHYD,12";
            }
            Parameter ccalc_cRHS_rFle {
                IndexDomain: {
                    (PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
                                               PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
                }
                Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
                Definition: {
                    if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
                       UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001
                    endif
                    
                    
                    
                    !IF (SR_CREDIT(IECP) .GT. 0.0 .AND. (IECP .NE. WIHY .OR. CURIYR + UHBSYR .LT. UPSTYR)) THEN
                    !             ROW_H =  'F'//NUM//CHCOD(IS)//FSLCD; call makmsk(ROW_H_mask,':F:',NUM,CHCOD(IS),FSLCD)
                    !             CALL DROWTYPE(ROW_H,'L       ',ROW_H_mask)
                    !             CALL DRHS(EFDRHS,ROW_H,DBLE(CAP(IS)*0.001),ROW_H_mask,'OPHYD,2')
                }
                Comment: "OPHYD,2";
            }
            Parameter ccalc_cF_rFle {
                IndexDomain: {
                    (PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
                                               PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
                }
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
                Definition: {
                    if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
                       1
                    endif
                }
                Comment: "OPHYD,5";
            }
            Parameter ccalc_cF_rSRge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
                                               PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
                                               and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
                Definition: {
                    if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
                       SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup)) * (1.0 - SR_MIN_CF(UG_ECPt_to_PlantGroup(PlantGroup)))
                    endif
                }
                Comment: "OPHYD,6";
            }
            Parameter ccalc_cF_rLDge {
                IndexDomain: {
                    (SupplyRegion,Season,Slice,PlantGroup) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
                                               PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
                                               and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
                Definition: {
                    if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
                       0.1 * SR_MIN_CF(UG_ECPt_to_PlantGroup(PlantGroup)) * ELWDTH(Slice2SLiceSorted_element(Slice, Season, SupplyRegion),Season,SupplyRegion)
                    endif
                }
                Comment: "OPHYD,7";
            }
            Parameter ccalc_cF_UBOUND {
                IndexDomain: {
                    (PlantGroup,Season,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and SR_CREDIT(UG_ECPt_to_PlantGroup(PlantGroup))>0 and
                                               PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup))) and Slice <= Max_Slice_element
                }
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
                Definition: {
                    if (UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIHY('1') or Val(cyr)+UHBSYR('1')<UPSTYR('1')) then
                      UG_CAP(Season, PlantGroupOrd2PlantGroup(PlantGroup))*0.001
                    endif
                    
                    !need to map with EFD_Slice_ID when DSMBlock and DSMSegment are updated
                }
                Comment: "OPHYD,8";
            }
            Parameter ccalc_cF_rPS_le {
                IndexDomain: {
                    (SupplyRegion,Season,PlantGroup,Slice) |EPPOPR(UG_EFDt_to_PlantType(PlantGroup))=4 and Slice <= Max_Slice_element and
                                                            PlantGroup = element(PlantGroup_,EFD_GRPS_F(PlantGroupOrd2PlantGroup(PlantGroup)))
                                                            and SupplyRegion=UG_EMM_RG_to_SupplyRegion(PlantGroup)
                }
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
                Definition: {
                    if (UG_EFDt(PlantGroupOrd2PlantGroup(PlantGroup))=UIHYR('1') and UG_ECPt(PlantGroupOrd2PlantGroup(PlantGroup))<>WIP2('1') and
                        UG_SCF(Season, PlantGroupOrd2PlantGroup(PlantGroup))>0) then
                       0.1*HYD_GenMin(SupplyRegion, Season, Slice, PlantGroup) *UFACPS('1')
                    endif
                }
                Comment: "OPHYD,13";
            }
        }
        DeclarationSection OPINT_Completed;
        DeclarationSection OPRNBS_Completed;
        DeclarationSection OtherParams_Completed;
    }
    DeclarationSection OddBalls {
        Parameter EDMXDS_ECP {
            IndexDomain: (PlantType_ECP,FuelRegion);
            Text: "avg max dist share by ECP plt type and fuel region";
        }
        Parameter EDMXGS_ECP {
            IndexDomain: (PlantType_ECP,FuelRegion);
            Text: "avg max gas share by ECP plt type and fuel region";
        }
        Parameter EDMXRS_ECP {
            IndexDomain: (PlantType_ECP,FuelRegion);
            Text: "avg max resid share by ECP plt type and fuel region";
        }
        Parameter EDMXDS_EFD {
            IndexDomain: (PlantType,FuelRegion);
            Text: "avg max dist share by EFD plt type and fuel region";
        }
        Parameter EDMXGS_EFD {
            IndexDomain: (PlantType,FuelRegion);
            Text: "avg max gas share by EFD plt type and fuel region";
        }
        Parameter EDMXRS_EFD {
            IndexDomain: (PlantType,FuelRegion);
            Text: "avg max resid share by EFD plt type and fuel region";
        }
    }
    Section Sections_below_this_are_from_arraycode_efd_program_so_do_not_change;
    DeclarationSection SetDeclare {
        Set numACI_ {
            Index: numACI;
            OrderBy: user;
        }
        Set BiomassSector_ {
            Index: BiomassSector;
            OrderBy: user;
        }
        Set BiomassType_ {
            Index: BiomassType;
            OrderBy: user;
        }
        Set BiomassProductionStep_ {
            Index: BiomassProductionStep;
            OrderBy: user;
        }
        Set PlantType_ {
            Index: PlantType;
            OrderBy: user;
        }
        Set GenerationSeason_ {
            Index: GenerationSeason;
            OrderBy: user;
        }
        Set FuelShareOption_ {
            Index: FuelShareOption;
            OrderBy: user;
        }
        Set INOXP_ {
            Index: INOXP;
            OrderBy: user;
        }
        Set CoalSupplyCurve_ {
            Index: CoalSupplyCurve;
            OrderBy: user;
        }
        Set nIFGD_ {
            Index: nIFGD;
            OrderBy: user;
        }
        Set CarbonEmissionType_ {
            Index: CarbonEmissionType;
            OrderBy: user;
        }
        Set CarbonRegion_ {
            Index: CarbonRegion;
            OrderBy: user;
        }
        Set CoalType_ {
            Index: CoalType;
            OrderBy: user;
        }
        Set CoalProductionStep_ {
            Index: CoalProductionStep;
            OrderBy: user;
        }
        Set PlantType_ECP_ {
            Index: PlantType_ECP;
            OrderBy: user;
        }
        Set SO2Region_ {
            Index: SO2Region, SO2Region_ALTFrom, SO2Region_ALTTo;
            OrderBy: user;
        }
        Set PlantGroup_ {
            Index: PlantGroup;
            OrderBy: user;
        }
        Set Season_ {
            Index: Season;
            OrderBy: user;
        }
        Set OperatingMode_ {
            Index: OperatingMode;
            OrderBy: user;
        }
        Set DistillateProductionStep_ {
            Index: DistillateProductionStep;
            OrderBy: user;
        }
        Set OilRegion_ {
            Index: OilRegion;
            OrderBy: user;
        }
        Set CoalDiversityType_ {
            Index: CoalDiversityType;
            OrderBy: user;
        }
        Set SupplyRegion_ {
            Index: SupplyRegion, SupplyRegion_ALT1, SupplyRegion_ALTfrom, SupplyRegion_ALTto, SupplyRegion_ALT2;
            OrderBy: user;
        }
        Set Slice_ {
            Index: Slice;
            OrderBy: user;
        }
        Set FuelRegion_ {
            Index: FuelRegion, FuelRegion_ALT1;
            OrderBy: user;
        }
        Set GasProductionStep_ {
            Index: GasProductionStep;
            OrderBy: user;
        }
        Set GasRegion_ {
            Index: GasRegion;
            OrderBy: user;
        }
        Set GasSeason_ {
            Index: GasSeason;
            OrderBy: user;
        }
        Set SeasonCCS_ {
            Index: SeasonCCS;
            OrderBy: user;
        }
        Set nHGCODE_ {
            Index: nHGCODE;
            OrderBy: user;
        }
        Set OGSMSector_ {
            Index: OGSMSector;
            OrderBy: user;
        }
        Set OGSMRegion_ {
            Index: OGSMRegion, OGSMRegion_ALTFrom, OGSMRegion_ALTTo, OGSMRegion_ALT1;
            OrderBy: user;
        }
        Set ResidProductionStep_ {
            Index: ResidProductionStep;
            OrderBy: user;
        }
        Set CanadianSupplyRegion_ {
            Index: CanadianSupplyRegion;
            OrderBy: user;
        }
        Set CanadianSupplyStep_ {
            Index: CanadianSupplyStep;
            OrderBy: user;
        }
        Set SupplyStates_ {
            Index: SupplyStates;
            OrderBy: user;
        }
        Set nRCF_ {
            Index: nRCF;
            OrderBy: user;
        }
        Set CensusRegion_ {
            Index: CensusRegion;
            OrderBy: user;
        }
        Set GridResilienceSource_ {
            Index: GridResilienceSource;
            OrderBy: user;
        }
        Set CoalDemandRegion_ {
            Index: CoalDemandRegion, CoalDemandRegion_ALT2, CoalDemandRegion_ALT1, CoalDemandRegion_ALTfrom, CoalDemandRegion_ALTto;
            OrderBy: user;
        }
        Set OwnerType_ {
            Index: OwnerType;
            OrderBy: user;
        }
        Set Three_ {
            Index: Three;
            OrderBy: user;
        }
        Set Four_ {
            Index: Four;
            OrderBy: user;
        }
        Set Five_ {
            Index: Five;
            OrderBy: user;
        }
        Set Ten_ {
            Index: Ten;
            OrderBy: user;
        }
        Set Eleven_ {
            Index: Eleven;
            OrderBy: user;
        }
        Set Months_ {
            Index: Months;
            OrderBy: user;
        }
        Set Thirteen_ {
            Index: Thirteen;
            OrderBy: user;
        }
        Set Fifteen_ {
            Index: Fifteen;
            OrderBy: user;
        }
        Set HoursADay_ {
            Index: HoursADay;
            OrderBy: user;
        }
        Set PlanningHorizon_ {
            Index: PlanningHorizon;
            OrderBy: user;
        }
        Set ScrubCode_ {
            Index: ScrubCode;
            OrderBy: user;
        }
        Set CO2CapGroup_ {
            Index: CO2CapGroup;
            OrderBy: user;
        }
        Set BoilerType_ {
            Index: BoilerType;
            OrderBy: user;
        }
        Set PlantType_ECPp2_ {
            Index: PlantType_ECPp2;
            OrderBy: user;
        }
        Set BiomassOption_ {
            Index: BiomassOption;
            OrderBy: user;
        }
        Set DispatchableECP_ {
            Index: DispatchableECP;
            OrderBy: user;
        }
        Set ImportStep_ {
            Index: ImportStep;
            OrderBy: user;
        }
        Set FuelsPerPlant_ {
            Index: FuelsPerPlant;
            OrderBy: user;
        }
        Set BiomassRetrofit_ {
            Index: BiomassRetrofit;
            OrderBy: user;
        }
        Set DistGenPlantGroup_ {
            Index: DistGenPlantGroup;
            OrderBy: user;
        }
        Set int_fuel_region_ {
            Index: int_fuel_region, int_fuel_region_ALT1;
            OrderBy: user;
        }
        Set int_fuel_region1_ {
            Index: int_fuel_region1, int_fuel_region1_ALT1;
            OrderBy: user;
        }
        Set DispPlantGroup_ {
            Index: DispPlantGroup;
            OrderBy: user;
        }
        Set SliceSorted_ {
            Index: SliceSorted;
            OrderBy: user;
        }
        Set FuelType_ {
            Index: FuelType;
            OrderBy: user;
        }
        Set OwnerShipType_ {
            Index: OwnerShipType;
            OrderBy: user;
        }
        Set SupplyRegionAll_ {
            Index: SupplyRegionAll, SupplyRegionAll_ALT1;
            OrderBy: user;
        }
        Set Segment_ {
            Index: Segment;
            OrderBy: user;
        }
        Set Group_ {
            Index: Group;
            OrderBy: user;
        }
        Set EMMStates_ {
            Index: EMMStates;
            OrderBy: user;
        }
        Set CPPRegion_ {
            Index: CPPRegion;
            OrderBy: user;
        }
        Set MercuryClass_ {
            Index: MercuryClass;
            OrderBy: user;
        }
        Set EmissionRank_ {
            Index: EmissionRank;
            OrderBy: user;
        }
        Set PlantGroupOrd_ {
            Index: PlantGroupOrd;
            OrderBy: user;
        }
        Set SupplyRegion_SUB_ {
            SubsetOf: SupplyRegion_;
            Index: SupplyRegion_SUB;
            OrderBy: user;
        }
        Set DemandSectors_ {
            Index: DemandSectors;
            OrderBy: user;
        }
        Set EmissionType_ {
            Index: EmissionType;
            OrderBy: user;
        }
        Set CHPFuel_ {
            Index: CHPFuel;
            OrderBy: user;
        }
        Set OGSMReg_ {
            Index: OGSMReg;
            OrderBy: user;
        }
        Set MNUMYR_ {
            Index: MNUMYR;
            OrderBy: user;
        }
        Set SO2_Transport_ {
            Index: SO2_Transport;
            OrderBy: user;
        }
        Set NOXRegion_ {
            Index: NOXRegion;
            OrderBy: user;
        }
        Set NOXStates_ {
            Index: NOXStates;
            OrderBy: user;
        }
        Set UtilitySector_ {
            Index: UtilitySector;
            OrderBy: user;
        }
        Set SCALARSet_ {
            Index: SCALARSet;
            OrderBy: user;
        }
    }
    DeclarationSection TransferVariable_Input {
        Parameter ab_allbank_avl {
            IndexDomain: (MNUMYR);
            Text: "Banked allowances available (cumulative)";
        }
        Parameter ab_auction_p {
            IndexDomain: (MNUMYR);
            Text: "ccost of auction reserve allowances";
        }
        Parameter ab_cap_tot {
            IndexDomain: (MNUMYR);
            Text: "Combined cap or allowances issued";
        }
        Parameter ab_covd_em_fue {
            IndexDomain: (MNUMYR);
            Text: "ffuel providers               (tonnes Ceq)";
        }
        Parameter ab_covd_em_ind {
            IndexDomain: (MNUMYR);
            Text: "eexcl refining    (tonnes Ceq)";
        }
        Parameter ab_covd_em_oth {
            IndexDomain: (MNUMYR);
            Text: "mmostly non-co2             (tonnes Ceq)";
        }
        Parameter ab_covd_em_ref {
            IndexDomain: (MNUMYR);
            Text: "rrefining from p1             (tonnes Ceq)";
        }
        Parameter ab_cstcont_avl {
            IndexDomain: (MNUMYR);
            Text: "cost containment reserve allowances available (cumulative)";
        }
        Parameter ab_cstcont_frac {
            IndexDomain: (MNUMYR);
            Text: "ffrom 0 to 1) held in reserve for cost containment";
        }
        Parameter ab_offset_frac {
            IndexDomain: (MNUMYR);
            Text: "ffrom 0 to 1)ffset assumption (fract of ab_cap_tot";
        }
        Parameter ab_reserve_p {
            IndexDomain: (Three,MNUMYR);
            Text: "ttriggering release of cost containment reserve allowances";
        }
        Parameter ACI_OPT {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP,MNUMYR);
            Text: "11 => Yes)ACI Options (0 => No";
        }
        Parameter ACI_STEPS {
            IndexDomain: (PlantType_ECP,EmissionRank);
            Text: "Number of ACI Steps to Create";
        }
        Parameter BARRIER {
            IndexDomain: (MNUMYR);
            Text: "ALLOW TRADE";
        }
        Parameter BMCLCON {
            IndexDomain: (MNUMYR);
            Text: "STEO BENCHMARKING SWITCH CL CON";
        }
        Parameter BMCLGEN {
            IndexDomain: (MNUMYR);
            Text: "STEO BENCHMARKING SWITCH CL GEN";
        }
        Parameter BMCLTOL {
            IndexDomain: (SCALARSet);
            Text: "STEO BENCHMARKING TOLERANCE -- CL";
        }
        Parameter BMNETIMP {
            IndexDomain: (MNUMYR);
            Text: "STEO BENCHMARKING SWITCH NET IMPORTS";
        }
        Parameter BMNGCON {
            IndexDomain: (MNUMYR);
            Text: "STEO BENCHMARKING SWITCH NG CON";
        }
        Parameter BMNGGEN {
            IndexDomain: (MNUMYR);
            Text: "STEO BENCHMARKING SWITCH NG GEN";
        }
        Parameter BMNGTOL {
            IndexDomain: (SCALARSet);
            Text: "STEO BENCHMARKING TOLERANCE -- NG";
        }
        Parameter BMOLCON {
            IndexDomain: (MNUMYR);
            Text: "STEO BENCHMARKING SWITCH OL CON";
        }
        Parameter BMOLGEN {
            IndexDomain: (MNUMYR);
            Text: "STEO BENCHMARKING SWITCH OL GEN";
        }
        Parameter BMOLTOL {
            IndexDomain: (SCALARSet);
            Text: "STEO BENCHMARKING TOLERANCE -- OL";
        }
        Parameter BNK_TO_CMM_HG {
            IndexDomain: (MNUMYR);
            Text: "Use BanksAdjustments Determined in ECP sent to CMM to Create Banks";
        }
        Parameter BTCOGEN {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "TRADITIONAL COGEN TO GRID";
        }
        Parameter CAN_CST_SCMULT {
            IndexDomain: (MNUMYR);
            Text: "scenario multiplier for canada supply curve costs";
        }
        Parameter CAN_QTY_SCMULT {
            IndexDomain: (MNUMYR);
            Text: "scenario multiplier for canada supply curve quantities";
        }
        Parameter CARGRP_CA {
            IndexDomain: (SCALARSet);
            Text: "Carbon Group Index For California";
        }
        Parameter CARGRP_RG {
            IndexDomain: (SCALARSet);
            Text: "Carbon Group Index For RGGI";
        }
        Parameter CFCRDIMP {
            IndexDomain: (MNUMYR);
            Text: "31 Crude oil imports";
        }
        Parameter CFNGC {
            IndexDomain: (MNUMYR);
            Text: "22 Natural Gas - Consumption";
        }
        Parameter CGNTGEN {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR,CHPFuel,OwnerType);
            Text: "NON-TRAD EXIST&PLANNED COGEN GENERATION";
        }
        Parameter CNSTRNTS_EFD {
            IndexDomain: (Season,MNUMYR,SupplyRegionAll_ALT1,SupplyRegionAll);
        }
        Parameter CO2BYGRP {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "CO2 Caps by CO2 Control Groups";
        }
        Parameter CO2EPGRP {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "CO2 Emission Containment Reserve Prc  (If Any) by CO2 Control Groups";
        }
        Parameter CO2EQGRP {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "CO2 Emission Containment Reserve Qty  (If Any) by CO2 Control Groups";
        }
        Parameter CO2ESGRP {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "CO2 Escape Vector or Max Prc  (If Any) by CO2 Control Groups";
        }
        Parameter CO2FLGRP {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "CO2 Price Floors (If Any) by CO2 Control Groups";
        }
        Parameter CO2OPGRP {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "CO2 Offset  Prc  (If Any) by CO2 Control Groups";
        }
        Parameter CO2OQGRP {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "CO2 Offset  Qty  (If Any) by CO2 Control Groups";
        }
        Parameter CO2RPGRP {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "CO2 Reserve Prc  (If Any) by CO2 Control Groups";
        }
        Parameter CO2RQGRP {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "CO2 Reserve Qty  (If Any) by CO2 Control Groups";
        }
        Parameter CO2_ADJNT {
            IndexDomain: (SCALARSet);
            Text: "EPA Emission Adjustment for NT Cogen";
        }
        Parameter CO2_CL_BY_FL {
            IndexDomain: (FuelRegion,CO2CapGroup);
            Text: "FRAC OF COAL CO2 EMISSIONS BY FUEL/CO2 REGION";
        }
        Parameter CO2_DEMHS {
            IndexDomain: (EMMStates);
            Text: "Historical Demand by State -- for aggregation if needed";
        }
        Parameter CO2_DE_BY_CA {
            IndexDomain: (MNUMYR);
            Text: "CO2 EMISSION RATE FOR DOMESTIC ECONOMY IMPORTS TO CALIFORNIA BY YEAR";
        }
        Parameter CO2_DE_BY_RG {
            IndexDomain: (SupplyRegion_ALT1,CO2CapGroup);
            Text: "CO2 EMISSION RATE FOR DOMESTIC ECONOMY IMPORTS BY EXPORT EMM/CO2 REGION";
        }
        Parameter CO2_DF_BY_CA {
            IndexDomain: (MNUMYR);
            Text: "CO2 EMISSION RATE FOR DOMESTIC FIRM IMPORTS TO CALIFORNIA BY YEAR";
        }
        Parameter CO2_DF_BY_RG {
            IndexDomain: (SupplyRegion_ALT1,CO2CapGroup);
            Text: "CO2 EMISSION RATE FOR DOMESTIC FIRM IMPORTS BY IMPORT EMM/CO2 REGION";
        }
        Parameter CO2_EFFSW {
            IndexDomain: (SCALARSet);
            Text: "11 = Yes)to include Efficiency improvements (0=No";
        }
        Parameter CO2_EMSWD {
            IndexDomain: (SCALARSet);
            Text: "EPA Emission Rate for Biomass Cofiring";
        }
        Parameter CO2_ENDCG {
            IndexDomain: (SCALARSet);
            Text: "wwind) for compliancencremental end-use rnw cogen (hydro";
        }
        Parameter CO2_EORSW {
            IndexDomain: (SCALARSet);
            Text: "11 = yes)to turn off CO2 for EOR (0 = no";
        }
        Parameter CO2_ERCSW {
            IndexDomain: (SCALARSet);
            Text: "22 = Mass-based)ude ERC trade in standard (0 = No";
        }
        Parameter CO2_GENHS {
            IndexDomain: (EMMStates);
            Text: "Historical Generation by State -- for aggregation if needed";
        }
        Parameter CO2_GENSN {
            IndexDomain: (EMMStates,SupplyRegion);
            Text: "Historical Generation by State and EMM Region -- for aggregation if needed";
        }
        Parameter CO2_GRP {
            IndexDomain: (SCALARSet);
            Text: "Number of CO2 Cap Groups";
        }
        Parameter CO2_IM_BY_CA {
            IndexDomain: (MNUMYR);
            Text: "CO2 EMISSION RATE FOR INTERNATIONAL IMPORTS TO CALIFORNIA BY YEAR";
        }
        Parameter CO2_IM_BY_RG {
            IndexDomain: (SupplyRegion_ALT1,CO2CapGroup);
            Text: "CO2 EMISSION RATE FOR INTERNATIONAL IMPORTS BY EMM/CO2 REGION";
        }
        Parameter CO2_INCSW {
            IndexDomain: (PlantType_ECP);
            Text: "Fraction of incremental plant generation that is covered by Standards";
        }
        Parameter CO2_OG_BY_FL {
            IndexDomain: (FuelRegion,CO2CapGroup);
            Text: "FRAC OF O/G CO2 EMISSIONS BY FUEL/CO2 REGION";
        }
        Parameter CO2_OS_BY_RG {
            IndexDomain: (SupplyRegion_ALT1,CO2CapGroup);
            Text: "CO2 EMISSION RATE FOR OUT/ST GEN BY EMM/CO2 REGION";
        }
        Parameter CO2_PLTRG {
            IndexDomain: (PlantType_ECP,SupplyRegion);
            Text: "mmass or rate) that is covered by Standards.e.";
        }
        Parameter CO2_PRCSW {
            IndexDomain: (SCALARSet);
            Text: "33=use difference (ECP-EFD)g methodology (0=no marg prc adj";
        }
        Parameter CO2_STDBY {
            IndexDomain: (SCALARSet);
            Text: "Base Year to use weights for grouping State Standards";
        }
        Parameter CO2_STDGF {
            IndexDomain: (int_fuel_region_ALT1,int_fuel_region);
            Text: "iif anyroup of Fuel Regions";
        }
        Parameter CO2_STDGN {
            IndexDomain: (SupplyRegion_ALT1,SupplyRegion);
            Text: "iif anyroup of EMM  Regions";
        }
        Parameter CO2_STDQS {
            IndexDomain: (EMMStates,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by State and Year";
        }
        Parameter CO2_STDRS {
            IndexDomain: (EMMStates,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by State and Year";
        }
        Parameter CO2_STDSW {
            IndexDomain: (SCALARSet);
            Text: "iif anyh to indicate aggregation of State Standards";
        }
        Parameter CO2_STDTF {
            IndexDomain: (int_fuel_region_ALT1);
            Text: "2=mass) -- Fuel Region11d standard type (1=rate";
        }
        Parameter CO2_STDTN {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "2=mass) -- EMM  Region11d standard type (1=rate";
        }
        Parameter CO2_STDWT {
            IndexDomain: (SCALARSet);
            Text: "iif anyh to indicate weight for grouping State Standards";
        }
        Parameter CO2_STDY1 {
            IndexDomain: (SCALARSet);
            Text: "First Year of intensity standards";
        }
        Parameter CO2_THRET {
            IndexDomain: (SCALARSet);
            Text: "CF Threshold for Existing CT";
        }
        Parameter CO2_TRDSW {
            IndexDomain: (SCALARSet);
            Text: "11 = Yes)to include interregional trade in intensity standard (0 = No";
        }
        Parameter COST111COM {
            IndexDomain: (CensusRegion,MNUMYR);
            Text: "Commercial costs";
        }
        Parameter COST111IND {
            IndexDomain: (CensusRegion,MNUMYR);
            Text: "Industrial costs";
        }
        Parameter COST111RES {
            IndexDomain: (CensusRegion,MNUMYR);
            Text: "Residential costs";
        }
        Parameter CPFLECP {
            IndexDomain: (PlantType_ECP,CensusRegion,int_fuel_region_ALT1,int_fuel_region);
            Text: "capacity in combined fuel region by ECP type";
        }
        Parameter CPFLEFD {
            IndexDomain: (PlantType,CensusRegion,int_fuel_region_ALT1,int_fuel_region);
            Text: "capacity in combined fuel region by EFD type";
        }
        Parameter CTDMDF {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "purch pwr costs-fixed cap domestic";
        }
        Parameter CTEXPD {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "purch pwr costs-fixed cap intntl exp";
        }
        Parameter CTIMPD {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "purch pwr costs-fixed cap intntl imp";
        }
        Parameter CTLBTU {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion,MNUMYR);
            Text: "Coal-to-liquid (CTL) trillion Btus";
        }
        Parameter CURIYR {
            IndexDomain: (SCALARSet);
            Text: "CURRENT IYEAR INDEX";
        }
        Parameter ECP_SCRUB {
            IndexDomain: (UtilitySector,MNUMYR);
            Text: {
                "Scrubber Code by Coal Sector / ECP Type (2 -> Unscrubbed ; 1 -> Scrubbed)"
            }
        }
        Parameter ECANSQZ {
            IndexDomain: (CanadianSupplyRegion,MNUMYR);
        }
        Parameter ECASTS {
            IndexDomain: (DispPlantGroup,SupplyRegion);
            Text: "DSP PLT GRP EFD CAPACITY TYPE";
        }
        Parameter ECCAP {
            IndexDomain: (DispPlantGroup,Season,SupplyRegion);
            Text: "DISPATCHABLE (DSP) CAPACITY";
        }
        Parameter ECDBID {
            IndexDomain: (DispPlantGroup,SupplyRegion);
            Text: "DSP PLT GRP DB ID";
        }
        Parameter ECLEL {
            IndexDomain: (MNUMYR);
            Text: "25 Coal - Electric Power";
        }
        Parameter ECMRUNCF {
            IndexDomain: (PlantGroup);
        }
        Parameter ECMXCP {
            IndexDomain: (DispPlantGroup,SupplyRegion);
            Text: "DSP PLT GRP MAX CAP FACTOR";
        }
        Parameter ECNTP {
            IndexDomain: (SCALARSet,SupplyRegion);
            Text: "NUMBER OF CAPACITY GROUPS";
        }
        Parameter ECO2FRPP {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by Fuel Region and Year - ECP";
        }
        Parameter ECO2NRPP {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by EMM  Region and Year - ECP";
        }
        Parameter ECP_MIN {
            IndexDomain: (SCALARSet);
            Text: "MINIMUM VALUE FOR ECP COEFFICIENTS";
        }
        Parameter EDCAP {
            IndexDomain: (DistGenPlantGroup,Season,SupplyRegion);
            Text: "DIST GENERATION PLANT GROUP CAPACITY";
        }
        Parameter EDDBID {
            IndexDomain: (DistGenPlantGroup,SupplyRegion);
            Text: "DIST GEN PLT GRP DB ID";
        }
        Parameter EDMXCP {
            IndexDomain: (DistGenPlantGroup,SupplyRegion);
            Text: "DIST GEN PLT GRP MAX CAP FACTOR";
        }
        Parameter EDMXDS {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "avg max dist share by plt type and fuel region";
        }
        Parameter EDMXGS {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "avg max gas share by plt type and fuel region";
        }
        Parameter EDMXRS {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "avg max resid share by plt type and fuel region";
        }
        Parameter EDRPSRG {
            IndexDomain: (SCALARSet,SupplyRegion);
            Text: "REN. GRID SALES FOR RPS";
        }
        Parameter EDRPSRO {
            IndexDomain: (SCALARSet,SupplyRegion);
            Text: "REN. OWN USE FOR RPS";
        }
        Parameter EDSEL {
            IndexDomain: (MNUMYR);
            Text: "36 Distillate - Electricity (+petroleum coke)";
        }
        Parameter EEITAJ {
            IndexDomain: (Season,SupplyRegion);
            Text: "NET IMPORTS/EXPORTS?";
        }
        Parameter EENSP {
            IndexDomain: (SCALARSet,SupplyRegion);
            Text: "NUMBER OF SEASONAL PERIODS";
        }
        Parameter EETIME {
            IndexDomain: (Season,SupplyRegion);
            Text: "NUMBER OF HOURS PER SEASON";
        }
        Parameter EFACTR {
            IndexDomain: (SCALARSet,SupplyRegion);
            Text: "CONVERTS I2 TO R4(IE. * .001>";
        }
        Parameter EFDMAT {
            IndexDomain: (SCALARSet);
            Text: "RREVISE = 1 - CREATE = 0";
        }
        Parameter EFD_CONT {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion,OwnerType,MNUMYR);
            Text: {
                "22 = unscr); expand to include international"
            }
        }
        Parameter EFD_LG_DVLIM {
            IndexDomain: (CoalDemandRegion,UtilitySector,MNUMYR);
            Text: "EFD Diversity Limits for Lignite";
        }
        Parameter EFD_SB_DVLIM {
            IndexDomain: (CoalDemandRegion,UtilitySector,MNUMYR);
            Text: "EFD Diversity Limits for Subbituminous";
        }
        Parameter EFD_GRPS_F {
            IndexDomain: (PlantGroupOrd);
            Text: "First EMM Group in EFD Super Group";
        }
        Parameter EFD_GRPS_N {
            IndexDomain: (PlantGroup);
            Text: "Next EMM Group in EFD Super Group";
        }
        Parameter EFD_GW {
            IndexDomain: (Segment,Group,ImportStep,CanadianSupplyRegion,MNUMYR);
        }
        Parameter EFD_DSP {
            IndexDomain: (SCALARSet);
            Text: "DISPATCHABLE CAPACITY TYPES";
        }
        Parameter EFD_RNW {
            IndexDomain: (SCALARSet);
            Text: "RENEWABLE TYPES";
        }
        Parameter EFD_DGN {
            IndexDomain: (SCALARSet);
            Text: "DISTRIBUTED GENERATION CAPACITY TYPES";
        }
        Parameter ECP_RNW {
            IndexDomain: (SCALARSet);
            Text: "ECP NUMBER OF OTHER RENEWABLE CAPACITY TYPES";
        }
        Parameter CL_CRV_PROD {
            IndexDomain: (CoalSupplyCurve,MNUMYR);
            Text: "EFD Coal Production Capacity for Coal Supply Curves";
        }
        Parameter EFD_Slice_ID {
            IndexDomain: (Group,Segment);
        }
        Parameter EFD_TIER1_LIM {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion,ScrubCode,MNUMYR);
            Text: "EFD Coal Tier 1 Transportation Limits";
        }
        Parameter EGEN_FRST {
            IndexDomain: (PlantType_ECPp2,int_fuel_region1,EMMStates);
            Text: "Generation by EMM Region/State -- Current";
        }
        Parameter EGEN_NRFR {
            IndexDomain: (PlantType_ECPp2,SupplyRegion,int_fuel_region1_ALT1);
            Text: "Generation by EMM Region/Fuel Region -- Current";
        }
        Parameter EGEN_NRST {
            IndexDomain: (PlantType_ECPp2,SupplyRegion,EMMStates);
            Text: "Generation by EMM Region/State -- Current";
        }
        Parameter EGFEL {
            IndexDomain: (MNUMYR);
            Text: "CCore - Electric Power";
        }
        Parameter EHCAP {
            IndexDomain: (nHGCODE,Season,SupplyRegion);
            Text: "NON-DSP PLANT GROUP CAPACITY";
        }
        Parameter EHDBID {
            IndexDomain: (nHGCODE,SupplyRegion);
            Text: "NON-DSP PLT GRP DB ID";
        }
        Parameter EHHYCF {
            IndexDomain: (nHGCODE,Season,SupplyRegion);
            Text: "NON-DSP PLT GRP CAPACITY FACTOR BY SEASON";
        }
        Parameter EHLDCF {
            IndexDomain: (nHGCODE,Segment,Group,SupplyRegion);
            Text: "NON-DSP PLT GRP CAPACITY FACTOR BY LOAD SEG";
        }
        Parameter EHTECP {
            IndexDomain: (nHGCODE,SupplyRegion);
            Text: "NON-DSP PLT GRP ECP CAP TYPE";
        }
        Parameter ELEC_FLAG {
            IndexDomain: (SCALARSet);
            Text: "Cap Applies to Elec Only";
        }
        Parameter ELGRP {
            IndexDomain: (SliceSorted,Season,SupplyRegion);
            Text: "TIME OF DAY/SEASON GROUP INDEX";
        }
        Parameter ELNVCT {
            IndexDomain: (Season,SupplyRegion);
            Text: "NUMBER OF POINTS IN LOAD CRV";
        }
        Parameter ELSEG {
            IndexDomain: (SliceSorted,Season,SupplyRegion);
            Text: "TIME OF DAY/SEASON SEG. INDEX";
        }
        Parameter ELWDTH {
            IndexDomain: (SliceSorted,Season,SupplyRegion);
            Text: "WIDTH OF VERTICAL LOAD SEG";
        }
        Parameter EMCMC {
            IndexDomain: (CensusRegion,EmissionType,MNUMYR);
            Text: "12 Comm Emissions by Region";
        }
        Parameter EMEL {
            IndexDomain: (Four,EmissionType,MNUMYR);
            Text: "23 EMM Emissions by Fuel Type";
        }
        Parameter EMELBNK {
            IndexDomain: (MNUMYR,SO2Region);
            Text: "43 Banked sulfur dioxide allowances";
        }
        Parameter EMEL_QHG {
            IndexDomain: (nHGCODE,MNUMYR);
            Text: "66 Mercury Caps by Group and Year";
        }
        Parameter EMETAX {
            IndexDomain: (Fifteen,MNUMYR);
            Text: "37 Excise (Consumption) Tax by Fuel";
        }
        Parameter EMINCC {
            IndexDomain: (CensusRegion,EmissionType,MNUMYR);
            Text: "14 Ind Emis by Region-Comb";
        }
        Parameter EMLIM {
            IndexDomain: (Four,MNUMYR);
            Text: "Hg)9 Emission Constraints by (CO2";
        }
        Parameter EMNT {
            IndexDomain: (CensusRegion,EmissionType,MNUMYR);
            Text: "19 NGTDM Emissions by Region";
        }
        Parameter EMRFSA {
            IndexDomain: (MNUMYR,SO2Region);
            Text: "11 Sulfur allowances";
        }
        Parameter EMRSC {
            IndexDomain: (CensusRegion,EmissionType,MNUMYR);
            Text: "10 Resd Emissions by Region";
        }
        Parameter EMTRC {
            IndexDomain: (CensusRegion,EmissionType,MNUMYR);
            Text: "17 Trans Emissions by Region";
        }
        Parameter ENFLTP {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Number of Fuel Types";
        }
        Parameter ENGEL {
            IndexDomain: (MNUMYR);
            Text: "17 Natural Gas - Electric Power";
        }
        Parameter EOUIPP {
            IndexDomain: (SCALARSet,SupplyRegion);
            Text: "TOTAL IPP CAP - OWN USE";
        }
        Parameter EOUNT {
            IndexDomain: (SCALARSet,SupplyRegion);
            Text: "TOTAL NONTRAD CAP - OWN";
        }
        Parameter EPAREG {
            IndexDomain: (SCALARSet);
        }
        Parameter EPCAMP {
            IndexDomain: (FuelRegion);
            Text: "carbon region associated with a given combined region";
        }
        Parameter EPCARPR {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "ECP CAR Allowance Price";
        }
        Parameter EPCLMP {
            IndexDomain: (FuelRegion);
            Text: "coal region associated with a given combined region";
        }
        Parameter EPCSMP {
            IndexDomain: (FuelRegion);
            Text: "census region associated with a given combined region";
        }
        Parameter EPGSMP {
            IndexDomain: (FuelRegion);
            Text: "gas region associated with a given combined region";
        }
        Parameter EPNOXPR {
            IndexDomain: (NOXRegion,MNUMYR);
            Text: "ECP NOX Allowance Price";
        }
        Parameter EPPOPM {
            IndexDomain: (PlantType);
            Text: "planned main switch by EFD plant type";
        }
        Parameter EPPOPR {
            IndexDomain: (PlantType);
            Text: "operate switch by EFD plant type";
        }
        Parameter EPRPSPR {
            IndexDomain: (MNUMYR);
            Text: "ECP RPS Credit Price";
        }
        Parameter EPRPSPRR {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "ECP RPS Credit Price";
        }
        Parameter EQFCO2 {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "CO2 Emissions by Fuel Type";
        }
        Parameter EQFFL {
            IndexDomain: (FuelType,OwnerShipType,SupplyRegion,MNUMYR);
            Text: "Fuel Consumption by Fuel Type";
        }
        Parameter EQFHG {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Hg Emissions by Fuel Type";
        }
        Parameter EQFNOX {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "NOX Emissions by Fuel Type";
        }
        Parameter ERFFC {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Fuel Cost by Fuel Type";
        }
        Parameter ERFFL {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Fuel Cost by Fuel Type (Includes ACI)";
        }
        Parameter ERLEL {
            IndexDomain: (MNUMYR);
            Text: "LLow Sulfur - Electricity";
        }
        Parameter ERSEL {
            IndexDomain: (MNUMYR);
            Text: "53 Residual Fuel - Electricity";
        }
        Parameter EST_FRG {
            IndexDomain: (EMMStates);
            Text: "Fuel Region Corresponding to State";
        }
        Parameter ETEXPE {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Exports - Economy(MWH)";
        }
        Parameter EXPCI {
            IndexDomain: (MNUMYR,SupplyRegion);
        }
        Parameter EXPGEN {
            IndexDomain: (PlantType_ECP,SupplyRegion);
        }
        Parameter EXSGEN {
            IndexDomain: (PlantType_ECP,SupplyRegion);
        }
        Parameter FCRL {
            IndexDomain: (SCALARSet);
            Text: "FINAL CONVERGENCE AND REPORTING LOOP SWITCH (1=ON)";
        }
        Parameter FGD_FCTR {
            IndexDomain: (PlantType_ECP,EmissionRank);
            Text: "FGD Emission Factor";
        }
        Parameter FR_OR_TRANCOST {
            IndexDomain: (FuelRegion,OGSMRegion,MNUMYR);
            Text: "Unit Co2 trsnport costs from each fuel region to each OGSM region";
        }
        Parameter FTDMDF {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "purch pwr costs-var fuel domestic";
        }
        Parameter FTEXPD {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "purch pwr costs-var fuel intntl exp";
        }
        Parameter FTIMPD {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "purch pwr costs-var fuel intntl imp";
        }
        Parameter HG_CHOICE {
            IndexDomain: (PlantType_ECP);
            Text: "33=>Input or Outputr Output Mercury Standard: 0=>None";
        }
        Parameter HG_CLASS {
            IndexDomain: (PlantType_ECP);
            Text: "33=>New IGCC and Other Coal 0=>NA";
        }
        Parameter HG_GRAMS_MWH {
            IndexDomain: (MercuryClass,MNUMYR);
            Text: "0 => Not Applicable limits in grams per megawatthour";
        }
        Parameter HG_GRP {
            IndexDomain: (CoalDemandRegion);
            Text: "44 Identify Mercury Cap and Trade Group by Region";
        }
        Parameter HG_INPUT {
            IndexDomain: (MercuryClass,EmissionRank,MNUMYR);
            Text: "0 => Not Applicable limits in grams per million btu by coal rank";
        }
        Parameter HG_MEF {
            IndexDomain: (MercuryClass,EmissionRank,MNUMYR);
            Text: "0 => Not Applicable limits as percent of input mercury (i.e. Maximum MEF)";
        }
        Parameter HG_MEFNC {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "89 Required Hg MEF if No CAMR";
        }
        Parameter HG_OUTPUT {
            IndexDomain: (MercuryClass,EmissionRank,MNUMYR);
            Text: "0 => Not Applicable limits in grams per megawatthour by coal rank";
        }
        Parameter HRTCLNR {
            IndexDomain: (CoalDemandRegion,MNUMYR,PlantType_ECP);
            Text: "Average Heatrate";
        }
        Parameter IT_WOP {
            IndexDomain: (MNUMYR,OwnerType);
            Text: "WORLD OIL PRICE (2--UNITS)";
        }
        Parameter JDSEL {
            IndexDomain: (MNUMYR);
            Text: "52 Distillate - Electricity (+petroleum coke)";
        }
        Parameter JGFELGR {
            IndexDomain: (MNUMYR);
            Text: "E UTIL FIRM NG EMISSIONS (87$/MMBTU)";
        }
        Parameter JRSEL {
            IndexDomain: (MNUMYR);
            Text: "74 Residual Fuel - Electricity";
        }
        Parameter KWH_DM_BY_RG {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "KWH DOMESTIC FIRM IMPORTS BY REGION AND YEAR";
        }
        Parameter KWH_IM_BY_RG {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "KWH INTERNATIONAL FIRM/ECON IMPORTS BY REGION AND YEAR";
        }
        Parameter LINELOSS {
            IndexDomain: (SCALARSet);
        }
        Parameter MappCtoN {
            IndexDomain: (SupplyRegion_ALT1,CensusRegion,DemandSectors);
        }
        Parameter MAP_ECNTP_EFD_GRPS {
            IndexDomain: (DispPlantGroup,SupplyRegion);
            Text: "Map ECNTP to EFD Super Group Number";
        }
        Parameter MAP_EDNTP_EFD_GRPS {
            IndexDomain: (DistGenPlantGroup,SupplyRegion);
            Text: "Map EDNTP to EFD Super Group Number";
        }
        Parameter MAP_EHNTP_EFD_GRPS {
            IndexDomain: (nHGCODE,SupplyRegion);
            Text: "Map EHNTP to EFD Super Group Number";
        }
        Parameter MIN_EMF {
            IndexDomain: (PlantType_ECP,EmissionRank);
            Text: "Minimum Achievable Emission Modification Factor using ACI";
        }
        Parameter MP_BM_BT {
            IndexDomain: (BiomassType);
            Text: "Map Applicable Supply Types for Biomass to Liquids Sector";
        }
        Parameter MP_BM_CM {
            IndexDomain: (BiomassType);
            Text: "Map Applicable Supply Types for Commercial Sector";
        }
        Parameter MP_BM_ET {
            IndexDomain: (BiomassType);
            Text: "Map Applicable Supply Types for Cellulosic Ethanol Sector";
        }
        Parameter MP_BM_H2 {
            IndexDomain: (BiomassType);
            Text: "Map Applicable Supply Types for Hydrogen Production Sector";
        }
        Parameter MP_BM_IN {
            IndexDomain: (BiomassType);
            Text: "Map Applicable Supply Types for Non-Refinery Industrial Sector";
        }
        Parameter MP_BM_PW {
            IndexDomain: (BiomassType);
            Text: "Map Applicable Supply Types for Electric Power Sector";
        }
        Parameter MP_BM_RS {
            IndexDomain: (BiomassType);
            Text: "Map Applicable Supply Types for Residential Sector";
        }
        Parameter MUST_STORE {
            IndexDomain: (FuelRegion,MNUMYR);
            Text: "Indicates that captured CO2 must be stored in saline or EOR sites";
        }
        Parameter MX_NCOALS {
            IndexDomain: (SCALARSet);
        }
        Parameter MX_SO2_GRP {
            IndexDomain: (SCALARSet);
        }
        Parameter NM_BM_SUP_STP {
            IndexDomain: (SCALARSet);
            Text: "Number of Biomass Supply Steps";
        }
        Parameter NOX_EFD {
            IndexDomain: (Season,NOXRegion);
            Text: "Number Hours per EFD Season in each NOX Control";
        }
        Parameter NOX_GRP {
            IndexDomain: (SCALARSet);
            Text: "Number of NOX Cap Groups";
        }
        Parameter NOX_NEW {
            IndexDomain: (BoilerType,PlantType_ECP);
            Text: "NOX Emission Rate";
        }
        Parameter NOX_SHR_BY_CLRG {
            IndexDomain: (nHGCODE,NOXRegion);
            Text: "77 Share of NOX Emission in NOX Group by Coal region";
        }
        Parameter NSTEP {
            IndexDomain: (SCALARSet);
        }
        Parameter NUCPLNF {
            IndexDomain: (FuelRegion,MNUMYR);
        }
        Parameter NUCPLNN {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter NUMIRUNS {
            IndexDomain: (SCALARSet);
            Text: "Total requested number of cycled runs";
        }
        Parameter NUM_ACI {
            IndexDomain: (SCALARSet);
            Text: "Number of Activated Carbon Injection Options";
        }
        Parameter NUM_ACSS {
            IndexDomain: (SCALARSet);
            Text: "Number of Activated Carbon Supply Steps";
        }
        Parameter NUM_CMM_UNITS {
            IndexDomain: (SCALARSet);
            Text: "Number of Coal Units";
        }
        Parameter NUM_HG_GRP {
            IndexDomain: (SCALARSet);
            Text: "33 Number of Mercury Cap and Trade Groups";
        }
        Parameter NUM_SO2_GRP {
            IndexDomain: (SCALARSet);
            Text: "102 Number of SO2 Compliance Groups";
        }
        Parameter NUTSEC {
            IndexDomain: (SCALARSet);
        }
        Parameter NW_COAL {
            IndexDomain: (SCALARSet);
            Text: "Last New  Coal Plant Type Index";
        }
        Parameter N_EFD_GRPS {
            IndexDomain: (SCALARSet);
            Text: "Number of EFD Super Groups";
        }
        Parameter OGCO2AVL {
            IndexDomain: (OGSMRegion_ALTTo,Thirteen,MNUMYR);
            Text: "CO2 available (mmcf) by bin";
        }
        Parameter OGCO2PRC {
            IndexDomain: (OGSMRegion_ALTTo,Thirteen,MNUMYR);
            Text: "CO2 price ($/mmcf)";
        }
        Parameter OGCO2PUR {
            IndexDomain: (OGSMRegion_ALTTo,Thirteen,MNUMYR);
            Text: "CO2 purchased (mmcf) CO2 Purchased from Available Sources";
        }
        Parameter OGCO2PUR2 {
            IndexDomain: (OGSMRegion_ALTTo,Thirteen,MNUMYR);
            Text: "CO2 purchased (mmcf) CO2 Purchased at the EOR sites";
        }
        Parameter OGCO2TAR {
            IndexDomain: (OGSMRegion_ALTTo,OGSMRegion);
            Text: "Transport price from OGSM ($/mmcf)";
        }
        Parameter OGWPRNG {
            IndexDomain: (OGSMReg,MNUMYR);
            Text: "NG WELLHEAD PRICE ($87/MCF)";
        }
        Parameter PARM_A {
            IndexDomain: (PlantType_ECP,EmissionRank);
            Text: "PARAMETER A in ACI Calculation";
        }
        Parameter PARM_B {
            IndexDomain: (PlantType_ECP,EmissionRank);
            Text: "PARAMETER B in ACI Calculation";
        }
        Parameter PARM_C {
            IndexDomain: (PlantType_ECP,EmissionRank);
            Text: "PARAMETER C in ACI Calculation";
        }
        Parameter PARM_D {
            IndexDomain: (PlantType_ECP,EmissionRank);
            Text: "PARAMETER D in ACI Calculation";
        }
        Parameter PERMIT_FLAG {
            IndexDomain: (SCALARSet);
            Text: "AUCTION FOR PERMITS";
        }
        Parameter PLNT_EMF {
            IndexDomain: (PlantType_ECP,EmissionRank);
            Text: "Emission Modification Factor by Plant Type and Coal Rank";
        }
        Parameter PTHRESH1 {
            IndexDomain: (MNUMYR,SupplyRegionAll,SupplyRegionAll_ALT1);
        }
        Parameter PTHRESH2 {
            IndexDomain: (MNUMYR,SupplyRegionAll,SupplyRegionAll_ALT1);
        }
        Parameter PV_CURT_SW {
            IndexDomain: (SCALARSet);
            Text: "Switch to turn off Wind Curtailments";
        }
        Parameter QBMBTCL {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Demand in Biomass to Liquids Demand";
        }
        Parameter QBMCMCL {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Demand in Commercial Sector";
        }
        Parameter QBMETCL {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Demand in Cellulosic Ethanol Demand";
        }
        Parameter QBMH2CL {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Demand in Hydrogen Production Sector";
        }
        Parameter QBMINCL {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Demand in Non-Refinery Industrial Sector";
        }
        Parameter QBMRSCL {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Demand in Residential Sector";
        }
        Parameter QDSEL {
            IndexDomain: (CensusRegion,MNUMYR);
            Text: "53 Distillate - Electricity (+petroleum coke)";
        }
        Parameter QELAS {
            IndexDomain: (CensusRegion,MNUMYR);
            Text: "77 Purchased Electricity - All Sectors";
        }
        Parameter QELASN {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "773 TOTAL DEMAND BY NERC REGION";
        }
        Parameter QRSEL {
            IndexDomain: (CensusRegion,MNUMYR);
            Text: "78 Residual Fuel - Electricity";
        }
        Parameter RCLCLNR {
            IndexDomain: (CoalDemandRegion,MNUMYR,PlantType_ECP);
            Text: "Combined Percent Removal by ECP Plant Type";
        }
        Parameter SAVE111COM {
            IndexDomain: (CensusRegion,MNUMYR);
            Text: "Commercial sector savings in kilowatthours";
        }
        Parameter SAVE111IND {
            IndexDomain: (CensusRegion,MNUMYR);
            Text: "Industrial sector savings in kilowatthours";
        }
        Parameter SAVE111RES {
            IndexDomain: (CensusRegion,MNUMYR);
            Text: "Residential sector savings in kilowatthours";
        }
        Parameter SCALPR {
            IndexDomain: (SCALARSet);
            Text: "YYEARPR $ (EG 1.315)";
        }
        Parameter SCR_FCTR {
            IndexDomain: (PlantType_ECP,EmissionRank);
            Text: "SCR Emission Factor";
        }
        Parameter SO2_SHR_ALW_GRP {
            IndexDomain: (MNUMYR,SO2Region);
            Text: "76 Value of Allowances Shared Across SO2 Groups (0 = no sharing)";
        }
        Parameter SO2_SHR_BY_CLRG {
            IndexDomain: (nHGCODE,SO2Region);
            Text: "74 Share of SO2 Emissions in SO2 Group by Coal Region 1 => East  2 => West";
        }
        Parameter SO2_SHR_BY_OLRG {
            IndexDomain: (CensusRegion,SO2Region);
            Text: "75 Share of SO2 Emissions in SO2 Group by Coal Region 1 => East  2 => West";
        }
        Parameter SPNGELGR {
            IndexDomain: (GasRegion,MNUMYR,Three);
        }
        Parameter SR_CREDIT {
            IndexDomain: (PlantType_ECP);
            Text: "Percent of excess capacity commited to load that is credited against spinning reserve requirement";
        }
        Parameter SR_INT {
            IndexDomain: (PlantType_ECP,SupplyRegion);
            Text: "Percent of derated intermitten capacity that must be matched with spinning reserves";
        }
        Parameter SR_MAX_LF {
            IndexDomain: (PlantType_ECP);
        }
        Parameter SR_MIN_CF {
            IndexDomain: (PlantType_ECP);
            Text: "Minimum Capacity Factor Allowed for Determining Split between Generation and Spinning Reserve";
        }
        Parameter SR_MIN_LF {
            IndexDomain: (PlantType_ECP);
        }
        Parameter SR_RQMT_DIFF {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "Percent of Difference between Seasonal Peak and Load Height Required for Spinning Reserve";
        }
        Parameter SR_RQMT_HGHT {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "Percent of Load Height Required for Spinning Reserve";
        }
        Parameter SR_TRAN_CREDIT {
            IndexDomain: (SCALARSet);
            Text: "Percent of excess transmission capacity that is credited against spinning reserve requirement";
        }
        Parameter ST_RNW_BND {
            IndexDomain: (MNUMYR,SupplyRegion);
            Text: "RESULTING REGIONAL RPS DEMAND SHARES FROM STATE RPS CONSTRAINTS";
        }
        Parameter ST_RNW_SHR {
            IndexDomain: (PlantType_ECP,SupplyRegion,MNUMYR);
            Text: "RESULTING REGIONAL RPS CAPACITY SHARES BY ECP TYPE FROM STATE RPS CONSTRAINTS";
        }
        Parameter ST_RPS_EMM_P {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Average marginal value of generation used to satisfy state RPS requirments";
        }
        Parameter ST_RPS_SW {
            IndexDomain: (SCALARSet);
            Text: "State RPS switch 0=>Off 1=>On";
        }
        Parameter TAX_FLAG {
            IndexDomain: (SCALARSet);
            Text: "TTAX ONLY";
        }
        Parameter TBTU_SHR_BY_ST {
            IndexDomain: (NOXStates,DispatchableECP);
        }
        Parameter TMPMBTU {
            IndexDomain: (MNUMYR);
            Text: "Average mercury emissions in tons of hg per million Btu (for stock adjustment)";
        }
        Parameter TnS_Costs {
            IndexDomain: (FuelRegion,MNUMYR);
            Text: "Unit Co2 trsnport and storage costs in each fuel region for non-EOR CO2";
        }
        Parameter TRANRULE1 {
            IndexDomain: (SCALARSet);
            Text: "Year for Phase 1 of EPA Transport Rule";
        }
        Parameter TRANRULE2 {
            IndexDomain: (SCALARSet);
            Text: "Year for Phase 2 of EPA Transport Rule";
        }
        Parameter TSO2_CL_BY_ST {
            IndexDomain: (NOXStates);
            Text: "Coal Region Containing State";
        }
        Parameter TSO2_LIM_BY_CLRG {
            IndexDomain: (CoalDemandRegion);
            Text: "CSAPR Phase 2 SO2 Limit by Coal Region";
        }
        Parameter TSO2_LIM_BY_ST {
            IndexDomain: (NOXStates);
            Text: "PPhase 2 (transport rule/csapr)";
        }
        Parameter TSO2_LM1_BY_CLRG {
            IndexDomain: (CoalDemandRegion);
            Text: "CSAPR Phase 1 SO2 Limit by Coal Region";
        }
        Parameter TSO2_NST {
            IndexDomain: (SCALARSet);
            Text: "Number of States with Limits in EPA Transport Rule";
        }
        Parameter TSO2_OL_BY_ST {
            IndexDomain: (NOXStates);
            Text: "Oil Region Containing State";
        }
        Parameter TSO2_OSH_BY_OLCL {
            IndexDomain: (CensusRegion,CoalDemandRegion,SO2_Transport);
            Text: "Oil SO2 shares by Oil/Coal Region";
        }
        Parameter TSO2_OSH_BY_ST {
            IndexDomain: (NOXStates);
            Text: "SO2 Oil  SO2 Share of Oil  Region by State (transport rule/csapr)";
        }
        Parameter TSO2_SHR_BY_CLRG {
            IndexDomain: (CoalDemandRegion,SO2_Transport);
            Text: "Coal SO2 Emission Share by Coal and CSAPR Region";
        }
        Parameter TSO2_TR_BY_ST {
            IndexDomain: (NOXStates);
            Text: "Transport Region Containing State";
        }
        Parameter TSO2_VR1_BY_CLRG {
            IndexDomain: (CoalDemandRegion);
            Text: "CSAPR 1 Year Variability Limit by Coal Region";
        }
        Parameter TSO2_VR1_BY_ST {
            IndexDomain: (NOXStates);
            Text: "SO2 1-Year Variability Allowance by State (transport rule/csapr)";
        }
        Parameter TSO2_VR3_BY_ST {
            IndexDomain: (NOXStates);
            Text: "SO2 3-Year Variability Allowance by State (transport rule/csapr)";
        }
        Parameter TSO2_VR_BY_CLRG {
            IndexDomain: (SCALARSet);
            Text: "Type of Variability from Cap";
        }
        Parameter TSO2_VR_BY_ST {
            IndexDomain: (SCALARSet);
            Text: "3=3yr) of Variability from State Cap (0=none";
        }
        Parameter TSO2_YR_BY_CLRG {
            IndexDomain: (SCALARSet);
            Text: "Initial Year to Impose Coal Region Caps";
        }
        Parameter TSO2_YR_BY_ST {
            IndexDomain: (SCALARSet);
            Text: "Year to Begin State Limits in EPA Transport Rule";
        }
        Parameter TSPMBTU {
            IndexDomain: (MNUMYR);
            Text: "Average SO2 Emissions in tons of SO2 per million Btu";
        }
        Parameter UCAP_HG {
            IndexDomain: (SCALARSet);
            Text: "100 CAP ON HG  CREDIT PRICE";
        }
        Parameter UCF_RCAP {
            IndexDomain: (BiomassRetrofit,CoalDemandRegion,MNUMYR);
            Text: "CCDS Demand Region and Model Yeary by Cofiring Group";
        }
        Parameter UCL_PAC {
            IndexDomain: (numACI);
            Text: "Activated Carbon Supply Price";
        }
        Parameter UCL_QAC {
            IndexDomain: (numACI);
            Text: "Activated Carbon Supply Quantity";
        }
        Parameter UCRBKNR {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "22 Total RPS/CPS Bnk/Crd by NERC";
        }
        Parameter UESTYR {
            IndexDomain: (SCALARSet);
            Text: "INITIAL EXECUTION YEAR FOR EMM (DATA)";
        }
        Parameter UFACP2 {
            IndexDomain: (SCALARSet);
        }
        Parameter UFACPS {
            IndexDomain: (SCALARSet);
        }
        Parameter UFHCNT {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "HEAT CONTENT";
        }
        Parameter UFLCLNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "25 COAL CONS BY OWNERSHIP TYPE/NERC";
        }
        Parameter UFLDGNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "36 DGen CONS Gas by Ownership Type/NERC";
        }
        Parameter UFLDSNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "29 DS   CONS BY OWNERSHIP TYPE/NERC";
        }
        Parameter UFLGCNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "28 GAS (COMP.) CONS BY OWNERSHIp Type/NERC";
        }
        Parameter UFLGFNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "26 GAS (FIRM) CONS BY OWNERSHIP Type/NERC";
        }
        Parameter UFLGINR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "27 GAS (INT.) CONS BY OWNERSHIP Type/NERC";
        }
        Parameter UFLRHNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "31 RH   CONS BY OWNERSHIP TYPE/NERC";
        }
        Parameter UFLRLNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "30 RL   CONS BY OWNERSHIP TYPE/NERC";
        }
        Parameter UFRCAR {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "CARBON EMISSION RATE";
        }
        Parameter UFRCO2 {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "CO2 EMISSION RATE";
        }
        Parameter UFRHG {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "Mercury Content by EFD Fuel Type";
        }
        Parameter UFRSO2 {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "SO2 EMISSION RATE";
        }
        Parameter UGNCLNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "11 Coal Gen by Ownership Type/NERC";
        }
        Parameter UGNDSNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "55 DS   Gen by Ownership type/NERC";
        }
        Parameter UGNGCNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "44 Gas (Comp.) Gen by Ownership Type/NERC";
        }
        Parameter UGNGFNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "22 Gas (Firm) Gen by Ownership Type/NERC";
        }
        Parameter UGNGINR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "33 Gas (Int.) Gen by Ownership Type/NERC";
        }
        Parameter UGNRHNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "77 RH   Gen by Ownership type/NERC";
        }
        Parameter UGNRLNR {
            IndexDomain: (OwnerType,SupplyRegion,MNUMYR);
            Text: "66 RL   Gen by Ownership type/NERC";
        }
        Parameter UG_ECPt {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group ECP Type";
        }
        Parameter UG_EFDt {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group EFD Type";
        }
        Parameter UG_EMM_RG {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group EMM Region";
        }
        Parameter UG_FL_RG {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group Fuel Region";
        }
        Parameter UG_FOR {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group Forced Outage Rate";
        }
        Parameter UG_GCF {
            IndexDomain: (Segment,Group,PlantGroupOrd);
            Text: "EFD Super Group Time Slice Capacity Factor";
        }
        Parameter UG_GEN {
            IndexDomain: (Season,PlantGroupOrd);
            Text: "EFD Super Group Historical Generation by Season";
        }
        Parameter UG_GSUB {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group Generation Subsisy";
        }
        Parameter UG_HTRT {
            IndexDomain: (Season,PlantGroupOrd);
            Text: "EFD Super Group Average Heatrate";
        }
        Parameter UG_MRUN {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group Must Run Status (0=>No 1=>Yes)";
        }
        Parameter UG_NOXC {
            IndexDomain: (Season,NOXRegion,PlantGroupOrd);
            Text: "EFD Super Group NOX Emission Rate";
        }
        Parameter UG_OMR {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group Variable O&M Cost";
        }
        Parameter UG_PMR {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group Planned Maintenance Rate";
        }
        Parameter UG_SCF {
            IndexDomain: (Season,PlantGroupOrd);
            Text: "EFD Super Group Seasonal Capacity Factor";
        }
        Parameter UG_STATE {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group State";
        }
        Parameter UHBSYR {
            IndexDomain: (SCALARSet);
            Text: "HISTORICAL BASE YEAR FOR EMM";
        }
        Parameter UIAC2 {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: New Advanced Combined Cycle";
        }
        Parameter UIACC {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Advanced Combined Cycle";
        }
        Parameter UIACS {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Advanced Combined Cycle W/SEQ.";
        }
        Parameter UIACT {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Advanced Turbine";
        }
        Parameter UIBMS {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Wood/Biomass";
        }
        Parameter UICAS {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: New Advanced Coal W/SEQ.";
        }
        Parameter UICCX {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Oil/Gas Combined Cycle";
        }
        Parameter UICNU {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Conventional Nuclear";
        }
        Parameter UICTX {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Oil/Gas Turbine";
        }
        Parameter UIDGB {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Distributed Generation-Base";
        }
        Parameter UIDGP {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Distributed Generation-Peak";
        }
        Parameter UIDIS {
            IndexDomain: (FuelType);
            Text: "index to indicate if fuel type is distillate";
        }
        Parameter UIDS {
            IndexDomain: (SCALARSet);
            Text: "Index: Distillate Fuel Oil";
        }
        Parameter UIFCG {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Fuel Cell";
        }
        Parameter UIGAS {
            IndexDomain: (FuelType);
            Text: "index to indicate if fuel type is gas";
        }
        Parameter UIGC {
            IndexDomain: (SCALARSet);
            Text: "Index: Natural Gas Competitive";
        }
        Parameter UIGF {
            IndexDomain: (SCALARSet);
            Text: "Index: Natural Gas Firm";
        }
        Parameter UIGI {
            IndexDomain: (SCALARSet);
            Text: "Index: Natural Gas Interruptable";
        }
        Parameter UIHYC {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Conventional Hydroelectric";
        }
        Parameter UIRES {
            IndexDomain: (FuelType);
            Text: "index to indicate if fuel type is resid";
        }
        Parameter UIRL {
            IndexDomain: (SCALARSet);
            Text: "Index: Residual Fuel Oil Low Sulfur";
        }
        Parameter UISMR {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: SMR Advanced Nuclear";
        }
        Parameter UIUF {
            IndexDomain: (SCALARSet);
            Text: "Index: Uranium Fuel";
        }
        Parameter UIWD {
            IndexDomain: (SCALARSet);
            Text: "Index: Biomass (Wood) Energy";
        }
        Parameter ULEIXR {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "Economy International Exports - Revenues";
        }
        Parameter ULHGHT {
            IndexDomain: (SliceSorted,Season,SupplyRegion_SUB);
        }
        Parameter ULHTRT_EFD {
            IndexDomain: (PlantGroup,Season);
            Text: "Average EFD Seasonal Heatrate (Normalized) by Plant Group";
        }
        Parameter ULVINT {
            IndexDomain: (PlantGroup);
            Text: "33 = New)ned = Existing";
        }
        Parameter UNFRGN {
            IndexDomain: (SCALARSet);
            Text: "number of fuel regions";
        }
        Parameter UNRGNS {
            IndexDomain: (SCALARSet);
            Text: "# NERC REGIONS IN EMM (.LE. MNUMNR)";
        }
        Parameter UNSTAS {
            IndexDomain: (SCALARSet);
            Text: "# STATES";
        }
        Parameter UNYEAR {
            IndexDomain: (SCALARSet);
            Text: "# YRS IN MODEL HORIZON (.LE. MNUMYR)";
        }
        Parameter UPCFBTU {
            IndexDomain: (BiomassRetrofit,CoalDemandRegion);
            Text: "AVERAGE BTU CONSUMPTION";
        }
        Parameter UPCFLEV {
            IndexDomain: (BiomassRetrofit,BiomassOption);
            Text: "COFIRING RETROFIT LEVEL";
        }
        Parameter UPCFNSTP {
            IndexDomain: (BiomassRetrofit);
            Text: "Number of COFIRING RETROFIT Steps";
        }
        Parameter UPCFSTEP {
            IndexDomain: (BiomassRetrofit,BiomassOption);
            Text: "COFIRING RETROFIT EXTRA TRANSPORTATION COSTS";
        }
        Parameter UPCRVSIZ {
            IndexDomain: (SCALARSet);
            Text: "SIZE (FRAC) OF NG SUP CRV STEPS";
        }
        Parameter UPCRVSTP {
            IndexDomain: (SCALARSet);
            Text: "NUMBER OF SUP STEPS ABV/BLW MIDPOINT";
        }
        Parameter UPEFDT {
            IndexDomain: (PlantType_ECP);
            Text: "EFD PLANT TYPE";
        }
        Parameter UPNCAR {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "CARBON PENALTY COST - DISPATCHING";
        }
        Parameter UPPCEF {
            IndexDomain: (DispatchableECP);
            Text: "Carbon Sequestration Efficiency";
        }
        Parameter UPRNWBND {
            IndexDomain: (MNUMYR);
            Text: "LOWER BOUND OF GEN BY RNW PLTS";
        }
        Parameter UPRNWBNDR {
            IndexDomain: (MNUMYR,SupplyRegion);
            Text: "REGIONAL LOWER BOUND OF GEN BY RNW PLTS";
        }
        Parameter UPRNWCAS {
            IndexDomain: (SCALARSet);
            Text: "RPS CASE (IDENTIFIES BILL)";
        }
        Parameter UPRNWCOG {
            IndexDomain: (SCALARSet);
            Text: "INDEX TO INCLUDE COGEN IN RPS";
        }
        Parameter UPRNWEXG {
            IndexDomain: (PlantType_ECP);
            Text: "IIF ANYION OF EXISTING GENERATION EXCLUDED FROM RPS";
        }
        Parameter UPRNWEXGR {
            IndexDomain: (PlantType_ECP,SupplyRegion);
            Text: "IIF ANYION OF EXISTING GENERATION EXCLUDED FROM RPS";
        }
        Parameter UPRNWREG {
            IndexDomain: (SCALARSet);
            Text: "RPS CASE - IDENTIFIES NATIONAL/REGIONAL/BOTH";
        }
        Parameter UPRNWSHR {
            IndexDomain: (PlantType_ECP);
            Text: "SHR OF GEN INCL. IN RNW BND ROW";
        }
        Parameter UPRNWSHRR {
            IndexDomain: (PlantType_ECP,SupplyRegion);
            Text: "REGIONAL SHR OF GEN INCL. IN RNW BND ROW";
        }
        Parameter UPSTYR {
            IndexDomain: (SCALARSet);
            Text: "INITIAL EXECUTION YEAR FOR ECP";
        }
        Parameter UPTTYP {
            IndexDomain: (PlantType_ECP);
            Text: "PLANT TYPE";
        }
        Parameter UPWDCFR {
            IndexDomain: (DispatchableECP,CoalDemandRegion);
            Text: "ECP Determined Cofire Share by Coal Demand Region";
        }
        Parameter UQFSO2 {
            IndexDomain: (FuelType,SupplyRegion);
            Text: "SO2 Content by Fuel Type";
        }
        Parameter URGTCFA {
            IndexDomain: (MNUMYR);
            Text: "ADJUSTMENT FACTOR FOR GEOTH CAPACITY FACTORS - STEO";
        }
        Parameter URHYCFA {
            IndexDomain: (MNUMYR);
            Text: "ADJUSTMENT FACTOR FOR HYDRO CAPACITY FACTORS - STEO";
        }
        Parameter URNCCFA {
            IndexDomain: (MNUMYR);
            Text: "ADJUSTMENT FACTOR FOR NUCLEAR CAPACITY FACTORS - STEO";
        }
        Parameter URNCSTEX_EFD {
            IndexDomain: (Season,SupplyRegion);
            Text: "EXPORT CAPABILITY";
        }
        Parameter URNCSTIM_EFD {
            IndexDomain: (Season,SupplyRegion);
            Text: "IMPORT CAPABILITY";
        }
        Parameter USW_CAMR {
            IndexDomain: (SCALARSet);
            Text: "11 = No CAMR)o turn off CAMR (0 = CAMR";
        }
        Parameter USW_CAR {
            IndexDomain: (SCALARSet);
            Text: "3=ECP/EFD)TCH TO IMPOSE EMM CARBON CONSTRAINT(0=No";
        }
        Parameter USW_ECPCF {
            IndexDomain: (SCALARSet);
            Text: "1=Yes) SWITCH TO USE ECP COFIRING SHARES (0=No";
        }
        Parameter USW_EFDRPS {
            IndexDomain: (SCALARSet);
            Text: "1=Yes) SWITCH TO USE EFD RPS/CES CONSTRAINT (0=No";
        }
        Parameter USW_HG {
            IndexDomain: (SCALARSet);
            Text: {
                "Mercury Switch 0=> No Limit ; 1=> Mercury Emission Limit"
            }
        }
        Parameter USW_OWN {
            IndexDomain: (SCALARSet);
            Text: "USER SWITCH OWNERSHIP";
        }
        Parameter USYEAR {
            IndexDomain: (MNUMYR);
            Text: "YEAR CODES";
        }
        Parameter UTHGHT {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UTWDTH {
            IndexDomain: (Segment,Group);
        }
        Parameter UYR_CAR {
            IndexDomain: (SCALARSet);
            Text: "YEAR TO IMPOSE EMM CARBON CONSTRAINT(0=None)";
        }
        Parameter UYR_STEO {
            IndexDomain: (SCALARSet);
        }
        Parameter WDSUP_AVL {
            IndexDomain: (BiomassType);
        }
        Parameter WDSUP_P {
            IndexDomain: (BiomassProductionStep,CoalDemandRegion,MNUMYR,BiomassType);
            Text: "Biomass Supply Prices - All Sources";
        }
        Parameter WDSUP_Q {
            IndexDomain: (BiomassProductionStep,CoalDemandRegion,MNUMYR,BiomassType);
            Text: "Biomass Supply Quantities - All Sources";
        }
        Parameter WFLTP {
            IndexDomain: (PlantType,FuelsPerPlant);
            Text: "EFD Fuel Types for new unplanned capacity";
        }
        Parameter WFOR {
            IndexDomain: (PlantType);
            Text: "FORCED OUTAGE RATE";
        }
        Parameter WIA2 {
            IndexDomain: (SCALARSet);
            Text: "Index for New Advanced Comb Cycle";
        }
        Parameter WIAN {
            IndexDomain: (SCALARSet);
            Text: "Index for Advanced Nuclear";
        }
        Parameter WICN {
            IndexDomain: (SCALARSet);
            Text: "Index for Conventional Nuclear";
        }
        Parameter WICS {
            IndexDomain: (SCALARSet);
            Text: "Index for Advanced Combined cycle W/Seq.";
        }
        Parameter WIDB {
            IndexDomain: (SCALARSet);
            Text: "Index for Distributed Generation-Base";
        }
        Parameter WIDP {
            IndexDomain: (SCALARSet);
            Text: "Index for Distributed Generation-Peak";
        }
        Parameter WIFC {
            IndexDomain: (SCALARSet);
            Text: "Index for Fuel Cell";
        }
        Parameter WIGT {
            IndexDomain: (SCALARSet);
            Text: "Index for Geothermal";
        }
        Parameter WIHY {
            IndexDomain: (SCALARSet);
            Text: "Index for Conventional Hydroelectric";
        }
        Parameter WIIG {
            IndexDomain: (SCALARSet);
            Text: "Index for Integrated Gas Combined Cycle";
        }
        Parameter WIIS {
            IndexDomain: (SCALARSet);
            Text: "Index for Integrated Gas Combined Cycle W/Seq.";
        }
        Parameter WIMS {
            IndexDomain: (SCALARSet);
            Text: "Index for Municipal Solid Waste";
        }
        Parameter WIP2 {
            IndexDomain: (SCALARSet);
            Text: "Index for Other Storage";
        }
        Parameter WIPC {
            IndexDomain: (SCALARSet);
            Text: "Index for Pulverised Coal";
        }
        Parameter WIPQ {
            IndexDomain: (SCALARSet);
            Text: "Index for IGCC w/Partial Sequestration";
        }
        Parameter WIPV {
            IndexDomain: (SCALARSet);
            Text: "Index for Solar Photovoltaic";
        }
        Parameter WISM {
            IndexDomain: (SCALARSet);
            Text: "Index for SMR Nuclear";
        }
        Parameter WIST {
            IndexDomain: (SCALARSet);
            Text: "Index for oil and gas STeam";
        }
        Parameter WIWD {
            IndexDomain: (SCALARSet);
            Text: "Index for Biomass (Wood)";
        }
        Parameter WLOWER {
            IndexDomain: (PlantType);
            Text: "CAPACITY FAC LOWER BOUND";
        }
        Parameter WN_CURT_SW {
            IndexDomain: (SCALARSet);
            Text: "Switch to turn off Wind Curtailments";
        }
        Parameter WSFWFEL_CF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR,Three,Months,HoursADay);
            Text: "read in in new wesarea file";
        }
        Parameter WSFWIEL_CF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR,Three,Months,HoursADay);
            Text: "read in in new wesarea file";
        }
        Parameter WSFWLEL_CF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR,Three,Months,HoursADay);
            Text: "read in in new wesarea file";
        }
        Parameter WSSPTEL_CF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR,Three,Months,HoursADay);
            Text: "read in in new solarin fle";
        }
        Parameter WSSPVEL_CF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR,Three,Months,HoursADay);
            Text: "read in in new solarin fle";
        }
        Parameter WSSSTEL_CF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR,Three,Months,HoursADay);
            Text: "read in in new solarin file";
        }
        Parameter WUPPER {
            IndexDomain: (PlantType);
            Text: "CAPACITY FAC UPPER BOUND";
        }
        Parameter XCL_1TESC {
            IndexDomain: (CoalSupplyCurve,PlanningHorizon,MNUMYR,CoalDemandRegion);
            Text: "Expected Coal Transportation Escalation Factors";
        }
        Parameter XCL_2TESC {
            IndexDomain: (CoalSupplyCurve,PlanningHorizon,MNUMYR,CoalDemandRegion);
            Text: "Expected Coal Transportation Escalation Factors";
        }
        Parameter XCL_CAR_YR {
            IndexDomain: (CoalSupplyCurve,MNUMYR);
            Text: "Carbon Content by Supply Curve";
        }
        Parameter XCL_HG_YR {
            IndexDomain: (CoalSupplyCurve,MNUMYR);
            Text: "Mercury Content by Supply Curve";
        }
        Parameter XCL_IMPORT {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "Expected Coal Imports";
        }
        Parameter XCL_OTHER {
            IndexDomain: (CoalSupplyCurve,MNUMYR);
            Text: "Expected Coal Supply Demand for Non-Utility Coal";
        }
        Parameter XCL_PECP {
            IndexDomain: (CoalSupplyCurve,Eleven,PlanningHorizon,MNUMYR);
            Text: "Expected Coal Supply Prices by Supply Step - Lower to Upper";
        }
        Parameter XCL_PIMP {
            IndexDomain: (CoalSupplyCurve,Ten,MNUMYR);
            Text: "Coal import prices for supply curve step combos (thermal only)";
        }
        Parameter XCL_QECP {
            IndexDomain: (CoalSupplyCurve,PlanningHorizon,MNUMYR);
            Text: "Expected Coal Supply Quantities";
        }
        Parameter XCL_QIMP {
            IndexDomain: (CoalSupplyCurve,Ten,MNUMYR);
            Text: "Coal import quantities for supply curve and step combos (thermal only)";
        }
        Parameter XCL_SO2_YR {
            IndexDomain: (CoalSupplyCurve,MNUMYR);
            Text: "SO2 Content by Supply Curve";
        }
        Parameter XCL_STEPS {
            IndexDomain: (Eleven);
            Text: "Expected Coal Supply Step Def. - Lower to Upper Must Have 0 Step (ie ... -.01  0 .01 ...)";
        }
        Parameter XCL_STOCK {
            IndexDomain: (MNUMYR);
            Text: "Expected Coal Stock Changes";
        }
        Parameter XCL_TR_T1 {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion,MNUMYR);
            Text: "Expected Coal First Tier Base Transportation Rates";
        }
        Parameter XCL_TR_T2 {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion,MNUMYR);
            Text: "Expected Coal Second Tier Base Transportation Rates";
        }
        Parameter XCL_TRNINDX {
            IndexDomain: (UtilitySector,CoalSupplyCurve,CoalDemandRegion);
            Text: "Index identifying whether the coal transp rate is feasible";
        }
        Parameter XQSBMEL {
            IndexDomain: (CoalDemandRegion,BiomassSector,MNUMYR);
            Text: "6-H2omass Demand by Coal Demand Region By 6 Sectors: 1-IN";
        }
        Parameter ZTDMMF {
            IndexDomain: (SupplyRegion_ALT1);
        }
        Parameter ZTEXDF {
            IndexDomain: (SupplyRegion_ALT1);
        }
        Parameter ZTEXMF {
            IndexDomain: (SupplyRegion_ALT1);
        }
        Parameter ZTEXPF {
            IndexDomain: (SupplyRegion_ALT1);
        }
        Parameter ZTIMPF {
            IndexDomain: (SupplyRegion_ALT1);
        }
        Parameter UPRNWNR {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter CLSCPLDR {
            IndexDomain: (CoalSupplyCurve,UtilitySector,CoalDemandRegion);
        }
        Parameter UTTSO2 {
            IndexDomain: (UtilitySector,MNUMYR);
            Text: "Utility total SO2 emissions";
        }
        Parameter GRD_TGTS {
            IndexDomain: (MNUMYR,SupplyRegion);
            Text: "Grid resilience target";
        }
        Parameter GRD_RATS {
            IndexDomain: (PlantType_ECP,SupplyRegion);
            Text: "Grid resillience rating";
        }
        Parameter GRD_RATSA {
            IndexDomain: (PlantType_ECP,SupplyRegion,GridResilienceSource);
            Text: "Grid resilience ratings for all sources";
        }
        Parameter BMIMPTOL {
            IndexDomain: (SCALARSet);
            Text: "STEO BENCHMARKING TOLERANCE -- OL";
        }
        Parameter NGSCRV_ELAS {
            IndexDomain: (Five);
            Text: "NG supply curve slope (q change / p change)";
        }
        Parameter NGSCRV_P0 {
            IndexDomain: (MNUMYR);
            Text: "NG supply curve base price";
        }
        Parameter NGSCRV_PER {
            IndexDomain: (OwnerType);
            Text: "NG supply curve segment percent deviation";
        }
        Parameter NGSCRV_Q {
            IndexDomain: (MNUMYR);
            Text: "NG supply curve solution quantity";
        }
        Parameter NGSCRV_Q0 {
            IndexDomain: (MNUMYR);
            Text: "NG supply curve base quantity";
        }
        Parameter CAN_CST {
            IndexDomain: (ImportStep,CanadianSupplyRegion,MNUMYR);
        }
        Parameter UG_CAP {
            IndexDomain: (Season,PlantGroupOrd);
            Text: "EFD Super Group Capacity (from UG_CAP(0,:)";
        }
        Parameter UP_CAP {
            IndexDomain: (Season,PlantGroup);
            Text: "Plant Group Capacity from (UP_CAP(0,:)";
        }
        Parameter UP_GEN {
            IndexDomain: (Season,PlantGroup);
            Text: "Plant Group Historical Generation by Season";
        }
        Parameter UG_CAP0 {
            IndexDomain: (PlantGroupOrd);
            Text: "EFD Super Group Capacity (from UG_CAP(0,:), ANNUAL VERSION";
        }
        Parameter UP_CAP0 {
            IndexDomain: (PlantGroup);
            Text: "Plant Group Capacity from (UP_CAP(0,:) ANNUAL VERSION";
        }
        Parameter UP_GEN0 {
            IndexDomain: (PlantGroup);
            Text: "Plant Group Historical Generation by Season, ANNUAL VERSION";
        }
        Parameter UPGNPD {
            IndexDomain: (SCALARSet);
            Text: "GNP DEFLATOR";
        }
    }
    DeclarationSection TransferVariable_Output {
        Parameter ACICST {
            IndexDomain: (MNUMYR);
        }
        Parameter ACICST_pass {
            IndexDomain: (MNUMYR);
        }
        Parameter ACICST_calc {
            IndexDomain: (MNUMYR);
        }
        Parameter ACIOAM {
            IndexDomain: (MNUMYR);
        }
        Parameter ACIOAM_pass {
            IndexDomain: (MNUMYR);
        }
        Parameter ACIOAM_calc {
            IndexDomain: (MNUMYR);
        }
        Parameter ACI_CST {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP);
            Text: "Equipment Cost per Trillion Btu of Coal for Activated Carbon Injection";
        }
        Parameter ACI_CST_pass {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP);
            Text: "Equipment Cost per Trillion Btu of Coal for Activated Carbon Injection";
        }
        Parameter ACI_CST_calc {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP);
            Text: "Equipment Cost per Trillion Btu of Coal for Activated Carbon Injection";
        }
        Parameter ACI_QAC {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP);
            Text: "Activated Carbon Requirement per Trillion Btu of Coal for Activated Carbon Injection";
        }
        Parameter ACI_QAC_pass {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP);
            Text: "Activated Carbon Requirement per Trillion Btu of Coal for Activated Carbon Injection";
        }
        Parameter ACI_QAC_calc {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP);
            Text: "Activated Carbon Requirement per Trillion Btu of Coal for Activated Carbon Injection";
        }
        Parameter BEC_IMP {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "ECONOMY IMPORTS";
        }
        Parameter BEC_IMP_pass {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "ECONOMY IMPORTS";
        }
        Parameter BEC_IMP_calc {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "ECONOMY IMPORTS";
        }
        Parameter CAREFD {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "Carbon Emissions by Grp -- EFD";
        }
        Parameter CAREFD_pass {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "Carbon Emissions by Grp -- EFD";
        }
        Parameter CAREFD_calc {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "Carbon Emissions by Grp -- EFD";
        }
        Parameter CARTGT {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "Carbon Emissions Limits by Grp";
        }
        Parameter CARTGT_pass {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "Carbon Emissions Limits by Grp";
        }
        Parameter CARTGT_calc {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "Carbon Emissions Limits by Grp";
        }
        Parameter CHKGEN {
            IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
        }
        Parameter CHKGEN_pass {
            IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
        }
        Parameter CHKGEN_calc {
            IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
        }
        Parameter CO2_ERCFR {
            IndexDomain: (int_fuel_region_ALT1);
            Text: ">> 0 = Yes) - EMM Regionsrade partners in standard (0 = No";
        }
        Parameter CO2_ERCFR_pass {
            IndexDomain: (int_fuel_region_ALT1);
            Text: ">> 0 = Yes) - EMM Regionsrade partners in standard (0 = No";
        }
        Parameter CO2_ERCFR_calc {
            IndexDomain: (int_fuel_region_ALT1);
            Text: ">> 0 = Yes) - EMM Regionsrade partners in standard (0 = No";
        }
        Parameter CO2_ERCNR {
            IndexDomain: (SupplyRegion_ALT1);
            Text: ">> 0 = Yes) - EMM Regionsrade partners in standard (0 = No";
        }
        Parameter CO2_ERCNR_pass {
            IndexDomain: (SupplyRegion_ALT1);
            Text: ">> 0 = Yes) - EMM Regionsrade partners in standard (0 = No";
        }
        Parameter CO2_ERCNR_calc {
            IndexDomain: (SupplyRegion_ALT1);
            Text: ">> 0 = Yes) - EMM Regionsrade partners in standard (0 = No";
        }
        Parameter CO2_PLTSW {
            IndexDomain: (PlantType_ECP);
            Text: "Fraction of plant generation that is covered by Standards";
        }
        Parameter CO2_PLTSW_pass {
            IndexDomain: (PlantType_ECP);
            Text: "Fraction of plant generation that is covered by Standards";
        }
        Parameter CO2_PLTSW_calc {
            IndexDomain: (PlantType_ECP);
            Text: "Fraction of plant generation that is covered by Standards";
        }
        Parameter CO2_STDQE {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by EPA  Region and Year";
        }
        Parameter CO2_STDQE_pass {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by EPA  Region and Year";
        }
        Parameter CO2_STDQE_calc {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by EPA  Region and Year";
        }
        Parameter CO2_STDQF {
            IndexDomain: (int_fuel_region_ALT1,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by Fuel Region and Year";
        }
        Parameter CO2_STDQF_pass {
            IndexDomain: (int_fuel_region_ALT1,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by Fuel Region and Year";
        }
        Parameter CO2_STDQF_calc {
            IndexDomain: (int_fuel_region_ALT1,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by Fuel Region and Year";
        }
        Parameter CO2_STDQN {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by EMM  Region and Year";
        }
        Parameter CO2_STDQN_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by EMM  Region and Year";
        }
        Parameter CO2_STDQN_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Generation Mass-Based Standard by EMM  Region and Year";
        }
        Parameter CO2_STDRE {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by EPA  Region and Year";
        }
        Parameter CO2_STDRE_pass {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by EPA  Region and Year";
        }
        Parameter CO2_STDRE_calc {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by EPA  Region and Year";
        }
        Parameter CO2_STDRF {
            IndexDomain: (int_fuel_region_ALT1,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by Fuel Region and Year";
        }
        Parameter CO2_STDRF_pass {
            IndexDomain: (int_fuel_region_ALT1,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by Fuel Region and Year";
        }
        Parameter CO2_STDRF_calc {
            IndexDomain: (int_fuel_region_ALT1,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by Fuel Region and Year";
        }
        Parameter CO2_STDRN {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by EMM  Region and Year";
        }
        Parameter CO2_STDRN_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by EMM  Region and Year";
        }
        Parameter CO2_STDRN_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Generation Intensity Rate Standard by EMM  Region and Year";
        }
        Parameter CTLHGEM {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "ttonsMercury emissions from CTL";
        }
        Parameter CTLHGEM_pass {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "ttonsMercury emissions from CTL";
        }
        Parameter CTLHGEM_calc {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "ttonsMercury emissions from CTL";
        }
        Parameter CTLNOXEM {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "tthousand tonsions from CTL";
        }
        Parameter CTLNOXEM_pass {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "tthousand tonsions from CTL";
        }
        Parameter CTLNOXEM_calc {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "tthousand tonsions from CTL";
        }
        Parameter CTLSO2EM {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "tthousand tonsions from CTL";
        }
        Parameter CTLSO2EM_pass {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "tthousand tonsions from CTL";
        }
        Parameter CTLSO2EM_calc {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "tthousand tonsions from CTL";
        }
        Parameter ECARCLF {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Carbon Emissions from Coal by Fuel Region -- EFD";
        }
        Parameter ECARCLF_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Carbon Emissions from Coal by Fuel Region -- EFD";
        }
        Parameter ECARCLF_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Carbon Emissions from Coal by Fuel Region -- EFD";
        }
        Parameter ECARCLS {
            IndexDomain: (EMMStates,MNUMYR);
            Text: "Carbon Emissions from Coal by State -- EFD";
        }
        Parameter ECARCLS_pass {
            IndexDomain: (EMMStates,MNUMYR);
            Text: "Carbon Emissions from Coal by State -- EFD";
        }
        Parameter ECARCLS_calc {
            IndexDomain: (EMMStates,MNUMYR);
            Text: "Carbon Emissions from Coal by State -- EFD";
        }
        Parameter ECAROGF {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Carbon Emissions from Oil/Gas by Fuel Region -- EFD";
        }
        Parameter ECAROGF_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Carbon Emissions from Oil/Gas by Fuel Region -- EFD";
        }
        Parameter ECAROGF_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Carbon Emissions from Oil/Gas by Fuel Region -- EFD";
        }
        Parameter ECAROGS {
            IndexDomain: (EMMStates,MNUMYR);
            Text: "Carbon Emissions from Oil/Gas by State  -- EFD";
        }
        Parameter ECAROGS_pass {
            IndexDomain: (EMMStates,MNUMYR);
            Text: "Carbon Emissions from Oil/Gas by State  -- EFD";
        }
        Parameter ECAROGS_calc {
            IndexDomain: (EMMStates,MNUMYR);
            Text: "Carbon Emissions from Oil/Gas by State  -- EFD";
        }
        Parameter ECCOPM {
            IndexDomain: (DispPlantGroup,Season,SupplyRegion);
            Text: "DSP CAP NET OF PLANNED MNT.";
        }
        Parameter ECCOPM_pass {
            IndexDomain: (DispPlantGroup,Season,SupplyRegion);
            Text: "DSP CAP NET OF PLANNED MNT.";
        }
        Parameter ECCOPM_calc {
            IndexDomain: (DispPlantGroup,Season,SupplyRegion);
            Text: "DSP CAP NET OF PLANNED MNT.";
        }
        Parameter ECDSPC {
            IndexDomain: (PlantGroup,Season);
            Text: "CAP IN EACH SEASON";
        }
        Parameter ECDSPC_pass {
            IndexDomain: (PlantGroup,Season);
            Text: "CAP IN EACH SEASON";
        }
        Parameter ECDSPC_calc {
            IndexDomain: (PlantGroup,Season);
            Text: "CAP IN EACH SEASON";
        }
        Parameter ECDSPE {
            IndexDomain: (PlantGroup,Season);
            Text: "ENERGY IN EACH SEASON";
        }
        Parameter ECDSPE_pass {
            IndexDomain: (PlantGroup,Season);
            Text: "ENERGY IN EACH SEASON";
        }
        Parameter ECDSPE_calc {
            IndexDomain: (PlantGroup,Season);
            Text: "ENERGY IN EACH SEASON";
        }
        Parameter ECDSPF {
            IndexDomain: (PlantGroup,Season);
            Text: "FUEL CONSUMPTION IN EACH SEASON";
        }
        Parameter ECDSPF_pass {
            IndexDomain: (PlantGroup,Season);
            Text: "FUEL CONSUMPTION IN EACH SEASON";
        }
        Parameter ECDSPF_calc {
            IndexDomain: (PlantGroup,Season);
            Text: "FUEL CONSUMPTION IN EACH SEASON";
        }
        Parameter ECO2ERPR {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by EPA  Region and Year - EFD";
        }
        Parameter ECO2ERPR_pass {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by EPA  Region and Year - EFD";
        }
        Parameter ECO2ERPR_calc {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by EPA  Region and Year - EFD";
        }
        Parameter ECO2ERQF {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Emissions From Affected Plant Types by EPA  Region and Year";
        }
        Parameter ECO2ERQF_pass {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Emissions From Affected Plant Types by EPA  Region and Year";
        }
        Parameter ECO2ERQF_calc {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Emissions From Affected Plant Types by EPA  Region and Year";
        }
        Parameter ECO2ERQY {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Mass-Based Target by EPA  Region and Year";
        }
        Parameter ECO2ERQY_pass {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Mass-Based Target by EPA  Region and Year";
        }
        Parameter ECO2ERQY_calc {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Mass-Based Target by EPA  Region and Year";
        }
        Parameter ECO2ERRT {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Intensity Standard Target Rate by EPA  Region and Year";
        }
        Parameter ECO2ERRT_pass {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Intensity Standard Target Rate by EPA  Region and Year";
        }
        Parameter ECO2ERRT_calc {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Intensity Standard Target Rate by EPA  Region and Year";
        }
        Parameter ECO2ERTL {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Emissions by EPA  Region and Year";
        }
        Parameter ECO2ERTL_pass {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Emissions by EPA  Region and Year";
        }
        Parameter ECO2ERTL_calc {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "CO2 Emissions by EPA  Region and Year";
        }
        Parameter ECO2FRPR {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by Fuel Region and Year - EFD";
        }
        Parameter ECO2FRPR_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by Fuel Region and Year - EFD";
        }
        Parameter ECO2FRPR_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by Fuel Region and Year - EFD";
        }
        Parameter ECO2FRQF {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Emissions From Affected Plant Types by Fuel Region and Year";
        }
        Parameter ECO2FRQF_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Emissions From Affected Plant Types by Fuel Region and Year";
        }
        Parameter ECO2FRQF_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Emissions From Affected Plant Types by Fuel Region and Year";
        }
        Parameter ECO2FRQY {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Mass-Based Target by Fuel Region and Year";
        }
        Parameter ECO2FRQY_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Mass-Based Target by Fuel Region and Year";
        }
        Parameter ECO2FRQY_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Mass-Based Target by Fuel Region and Year";
        }
        Parameter ECO2FRRT {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Target Rate by Fuel Region and Year";
        }
        Parameter ECO2FRRT_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Target Rate by Fuel Region and Year";
        }
        Parameter ECO2FRRT_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Target Rate by Fuel Region and Year";
        }
        Parameter ECO2FRTL {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Emissions by Fuel Region and Year";
        }
        Parameter ECO2FRTL_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Emissions by Fuel Region and Year";
        }
        Parameter ECO2FRTL_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "CO2 Emissions by Fuel Region and Year";
        }
        Parameter ECO2NRPR {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by EMM  Region and Year - EFD";
        }
        Parameter ECO2NRPR_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by EMM  Region and Year - EFD";
        }
        Parameter ECO2NRPR_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Allowance Price by EMM  Region and Year - EFD";
        }
        Parameter ECO2NRQF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Emissions From Affected Plant Types by EMM  Region and Year";
        }
        Parameter ECO2NRQF_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Emissions From Affected Plant Types by EMM  Region and Year";
        }
        Parameter ECO2NRQF_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Emissions From Affected Plant Types by EMM  Region and Year";
        }
        Parameter ECO2NRQY {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Mass-Based Target by EMM  Region and Year";
        }
        Parameter ECO2NRQY_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Mass-Based Target by EMM  Region and Year";
        }
        Parameter ECO2NRQY_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Mass-Based Target by EMM  Region and Year";
        }
        Parameter ECO2NRRT {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Target Rate by EMM  Region and Year";
        }
        Parameter ECO2NRRT_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Target Rate by EMM  Region and Year";
        }
        Parameter ECO2NRRT_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Intensity Standard Target Rate by EMM  Region and Year";
        }
        Parameter ECO2NRTL {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Emissions by EMM  Region and Year";
        }
        Parameter ECO2NRTL_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Emissions by EMM  Region and Year";
        }
        Parameter ECO2NRTL_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "CO2 Emissions by EMM  Region and Year";
        }
        Parameter ECPPRCFL {
            IndexDomain: (FuelRegion,MNUMYR);
        }
        Parameter ECPPRCFL_pass {
            IndexDomain: (FuelRegion,MNUMYR);
        }
        Parameter ECPPRCFL_calc {
            IndexDomain: (FuelRegion,MNUMYR);
        }
        Parameter ECPPRCNL {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter ECPPRCNL_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter ECPPRCNL_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter ECSTFREE {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation Savings Cost from Energy Efficiency by Fuel Region and Year";
        }
        Parameter ECSTFREE_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation Savings Cost from Energy Efficiency by Fuel Region and Year";
        }
        Parameter ECSTFREE_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation Savings Cost from Energy Efficiency by Fuel Region and Year";
        }
        Parameter ECSTNREE {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation Savings Cost from Energy Efficiency by EMM  Region and Year";
        }
        Parameter ECSTNREE_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation Savings Cost from Energy Efficiency by EMM  Region and Year";
        }
        Parameter ECSTNREE_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation Savings Cost from Energy Efficiency by EMM  Region and Year";
        }
        Parameter EECF {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
        }
        Parameter EECF_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
        }
        Parameter EECF_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
        }
        Parameter EECN {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EECN_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EECN_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EEIF {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
        }
        Parameter EEIF_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
        }
        Parameter EEIF_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
        }
        Parameter EEIN {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EEIN_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EEIN_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EERCNRPM {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "EMission Reduction Credits (ERC) Marginal Cost by EMM  Region and Year ($/MT)";
        }
        Parameter EERCNRPM_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "EMission Reduction Credits (ERC) Marginal Cost by EMM  Region and Year ($/MT)";
        }
        Parameter EERCNRPM_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "EMission Reduction Credits (ERC) Marginal Cost by EMM  Region and Year ($/MT)";
        }
        Parameter EERCNRPR {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "EMission Reduction Credits (ERC) Marginal Cost by EMM  Region and Year in Rate Based case ($/Mwh)";
        }
        Parameter EERCNRPR_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "EMission Reduction Credits (ERC) Marginal Cost by EMM  Region and Year in Rate Based case ($/Mwh)";
        }
        Parameter EERCNRPR_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "EMission Reduction Credits (ERC) Marginal Cost by EMM  Region and Year in Rate Based case ($/Mwh)";
        }
        Parameter EERCNRQM {
            IndexDomain: (SupplyRegion_ALT1,SupplyRegion,MNUMYR);
            Text: "Emission Reduction Credits (ERC) Traded Between EMM Regions in Mass-base case (million tonnes)";
        }
        Parameter EERCNRQM_pass {
            IndexDomain: (SupplyRegion_ALT1,SupplyRegion,MNUMYR);
            Text: "Emission Reduction Credits (ERC) Traded Between EMM Regions in Mass-base case (million tonnes)";
        }
        Parameter EERCNRQM_calc {
            IndexDomain: (SupplyRegion_ALT1,SupplyRegion,MNUMYR);
            Text: "Emission Reduction Credits (ERC) Traded Between EMM Regions in Mass-base case (million tonnes)";
        }
        Parameter EERCNRQR {
            IndexDomain: (SupplyRegion_ALT1,SupplyRegion,MNUMYR);
            Text: "Emission Reduction Credits (ERC) Traded Between EMM Regions in Rate-base case (kwh)";
        }
        Parameter EERCNRQR_pass {
            IndexDomain: (SupplyRegion_ALT1,SupplyRegion,MNUMYR);
            Text: "Emission Reduction Credits (ERC) Traded Between EMM Regions in Rate-base case (kwh)";
        }
        Parameter EERCNRQR_calc {
            IndexDomain: (SupplyRegion_ALT1,SupplyRegion,MNUMYR);
            Text: "Emission Reduction Credits (ERC) Traded Between EMM Regions in Rate-base case (kwh)";
        }
        Parameter EERF {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
        }
        Parameter EERF_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
        }
        Parameter EERF_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
        }
        Parameter EERN {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EERN_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EERN_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EFDPRCFL {
            IndexDomain: (FuelRegion,MNUMYR);
        }
        Parameter EFDPRCFL_pass {
            IndexDomain: (FuelRegion,MNUMYR);
        }
        Parameter EFDPRCFL_calc {
            IndexDomain: (FuelRegion,MNUMYR);
        }
        Parameter EFDPRCNL {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EFDPRCNL_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EFDPRCNL_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter EFD_LCAR {
            IndexDomain: (MNUMYR);
            Text: "84 ECP Carbon emissions limit for electricity";
        }
        Parameter EFD_LCAR_pass {
            IndexDomain: (MNUMYR);
            Text: "84 ECP Carbon emissions limit for electricity";
        }
        Parameter EFD_MIN {
            IndexDomain: (SCALARSet);
        }
        Parameter EFD_MIN_pass {
            IndexDomain: (SCALARSet);
        }
        Parameter EFD_MIN_calc {
            IndexDomain: (SCALARSet);
        }
        Parameter EFD_PCAR {
            IndexDomain: (MNUMYR);
            Text: "86 ECP Carbon emission allowance price";
        }
        Parameter EFD_PCAR_pass {
            IndexDomain: (MNUMYR);
            Text: "86 ECP Carbon emission allowance price";
        }
        Parameter EFD_QCAR {
            IndexDomain: (MNUMYR);
            Text: "85 ECP Carbon emissions for electricity";
        }
        Parameter EFD_QCAR_pass {
            IndexDomain: (MNUMYR);
            Text: "85 ECP Carbon emissions for electricity";
        }
        Parameter EFD_RANK {
            IndexDomain: (CoalSupplyCurve);
            Text: "EFD Coal Rank Indicator";
        }
        Parameter EFD_RANK_pass {
            IndexDomain: (CoalSupplyCurve);
            Text: "EFD Coal Rank Indicator";
        }
        Parameter EFD_RANK_calc {
            IndexDomain: (CoalSupplyCurve);
            Text: "EFD Coal Rank Indicator";
        }
        Parameter EFHCNT {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Btu Content by Fuel Type";
        }
        Parameter EFHCNT_pass {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Btu Content by Fuel Type";
        }
        Parameter EFHCNT_calc {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Btu Content by Fuel Type";
        }
        Parameter EFRCO2 {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. CO2 Content by Fuel Type";
        }
        Parameter EFRCO2_pass {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. CO2 Content by Fuel Type";
        }
        Parameter EFRCO2_calc {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. CO2 Content by Fuel Type";
        }
        Parameter EFRHG {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Hg Content by Fuel Type";
        }
        Parameter EFRHG_pass {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Hg Content by Fuel Type";
        }
        Parameter EFRHG_calc {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Hg Content by Fuel Type";
        }
        Parameter EFRNOX {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. NOX Content by Fuel Type";
        }
        Parameter EFRNOX_pass {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. NOX Content by Fuel Type";
        }
        Parameter EFRNOX_calc {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. NOX Content by Fuel Type";
        }
        Parameter EFRSO2 {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. SO2 Content by Fuel Type";
        }
        Parameter EFRSO2_pass {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. SO2 Content by Fuel Type";
        }
        Parameter EFRSO2_calc {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. SO2 Content by Fuel Type";
        }
        Parameter EGENERQF {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "Generation From Affected Plant Types by EPA  Region and Year";
        }
        Parameter EGENERQF_pass {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "Generation From Affected Plant Types by EPA  Region and Year";
        }
        Parameter EGENERQF_calc {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "Generation From Affected Plant Types by EPA  Region and Year";
        }
        Parameter EGENERTL {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "Generation From All Plant Types by EPA  Region and Year";
        }
        Parameter EGENERTL_pass {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "Generation From All Plant Types by EPA  Region and Year";
        }
        Parameter EGENERTL_calc {
            IndexDomain: (CPPRegion,MNUMYR);
            Text: "Generation From All Plant Types by EPA  Region and Year";
        }
        Parameter EGENFREE {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation Savings from Energy Efficiency by Fuel Region and Year";
        }
        Parameter EGENFREE_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation Savings from Energy Efficiency by Fuel Region and Year";
        }
        Parameter EGENFREE_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation Savings from Energy Efficiency by Fuel Region and Year";
        }
        Parameter EGENFRQF {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation From Affected Plant Types by Fuel Region and Year";
        }
        Parameter EGENFRQF_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation From Affected Plant Types by Fuel Region and Year";
        }
        Parameter EGENFRQF_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation From Affected Plant Types by Fuel Region and Year";
        }
        Parameter EGENFRTL {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation From All Plant Types by Fuel Region and Year";
        }
        Parameter EGENFRTL_pass {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation From All Plant Types by Fuel Region and Year";
        }
        Parameter EGENFRTL_calc {
            IndexDomain: (int_fuel_region1_ALT1,MNUMYR);
            Text: "Generation From All Plant Types by Fuel Region and Year";
        }
        Parameter EGENNREE {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation Savings from Energy Efficiency by EMM  Region and Year";
        }
        Parameter EGENNREE_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation Savings from Energy Efficiency by EMM  Region and Year";
        }
        Parameter EGENNREE_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation Savings from Energy Efficiency by EMM  Region and Year";
        }
        Parameter EGENNRQF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation From Affected Plant Types by EMM  Region and Year";
        }
        Parameter EGENNRQF_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation From Affected Plant Types by EMM  Region and Year";
        }
        Parameter EGENNRQF_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation From Affected Plant Types by EMM  Region and Year";
        }
        Parameter EGENNRTL {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation From All Plant Types by EMM  Region and Year";
        }
        Parameter EGENNRTL_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation From All Plant Types by EMM  Region and Year";
        }
        Parameter EGENNRTL_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "Generation From All Plant Types by EMM  Region and Year";
        }
        Parameter ELGENE {
            IndexDomain: (SliceSorted,Season,PlantGroup);
            Text: "Generation by Plant Group and Time Slice";
        }
        Parameter ELGENE_pass {
            IndexDomain: (SliceSorted,Season,PlantGroup);
            Text: "Generation by Plant Group and Time Slice";
        }
        Parameter ELGENE_calc {
            IndexDomain: (SliceSorted,Season,PlantGroup);
            Text: "Generation by Plant Group and Time Slice";
        }
        Parameter EMMBMDUAL {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "Dual on BIOMASS row in EMM (Max willingness to pay)";
        }
        Parameter EMMBMDUAL_pass {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "Dual on BIOMASS row in EMM (Max willingness to pay)";
        }
        Parameter EMMBMDUAL_calc {
            IndexDomain: (CoalDemandRegion,MNUMYR);
            Text: "Dual on BIOMASS row in EMM (Max willingness to pay)";
        }
        Parameter EMM_CL_BTUs {
            IndexDomain: (PlantGroup,MNUMYR);
            Text: "BTUs of Demand for Each Coal Unit in Each Forecast Year";
        }
        Parameter EMM_CL_BTUs_pass {
            IndexDomain: (PlantGroup,MNUMYR);
            Text: "BTUs of Demand for Each Coal Unit in Each Forecast Year";
        }
        Parameter EMM_CL_BTUs_calc {
            IndexDomain: (PlantGroup,MNUMYR);
            Text: "BTUs of Demand for Each Coal Unit in Each Forecast Year";
        }
        Parameter EMM_MEF {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP);
            Text: "CCoal Rank and Activated Carbon Step(1=>No ACI)";
        }
        Parameter EMM_MEF_pass {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP);
            Text: "CCoal Rank and Activated Carbon Step(1=>No ACI)";
        }
        Parameter EMM_MEF_calc {
            IndexDomain: (numACI,EmissionRank,PlantType_ECP);
            Text: "CCoal Rank and Activated Carbon Step(1=>No ACI)";
        }
        Parameter EMRFNA {
            IndexDomain: (NOXRegion,MNUMYR);
            Text: "64 NOX Allowances by Group and Year";
        }
        Parameter EMRFNA_pass {
            IndexDomain: (NOXRegion,MNUMYR);
            Text: "64 NOX Allowances by Group and Year";
        }
        Parameter EMRFNA_calc {
            IndexDomain: (NOXRegion,MNUMYR);
            Text: "64 NOX Allowances by Group and Year";
        }
        Parameter EPFLPR {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Fuel Price by Fuel Type";
        }
        Parameter EPFLPR_pass {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Fuel Price by Fuel Type";
        }
        Parameter EPFLPR_calc {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Fuel Price by Fuel Type";
        }
        Parameter EPFUEL {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Fuel Price by Fuel Type (Includes ACI)";
        }
        Parameter EPFUEL_pass {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Fuel Price by Fuel Type (Includes ACI)";
        }
        Parameter EPFUEL_calc {
            IndexDomain: (FuelType,SupplyRegion,MNUMYR);
            Text: "Avg. Fuel Price by Fuel Type (Includes ACI)";
        }
        Parameter ETDIMERG {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "REGIONAL INTERNATIONAL ECONOMY SALES (MWH)";
        }
        Parameter ETDIMERG_pass {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "REGIONAL INTERNATIONAL ECONOMY SALES (MWH)";
        }
        Parameter ETDIMERG_calc {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "REGIONAL INTERNATIONAL ECONOMY SALES (MWH)";
        }
        Parameter ETDMDE {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Economy Sales (MM$)";
        }
        Parameter ETDMDE_pass {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Economy Sales (MM$)";
        }
        Parameter ETDMDE_calc {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Economy Sales (MM$)";
        }
        Parameter ETDMDERG {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "REGIONAL DOMESTIC ECONOMY SALES (MM$)";
        }
        Parameter ETDMDERG_pass {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "REGIONAL DOMESTIC ECONOMY SALES (MM$)";
        }
        Parameter ETDMDERG_calc {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "REGIONAL DOMESTIC ECONOMY SALES (MM$)";
        }
        Parameter ETDMDF {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Firm Pwr Sales (MM$)";
        }
        Parameter ETDMDF_pass {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Firm Pwr Sales (MM$)";
        }
        Parameter ETDMDF_calc {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Firm Pwr Sales (MM$)";
        }
        Parameter ETDMME {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Economy Sales (MWH)";
        }
        Parameter ETDMME_pass {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Economy Sales (MWH)";
        }
        Parameter ETDMME_calc {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Economy Sales (MWH)";
        }
        Parameter ETDMMERG {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "REGIONAL DOMESTIC ECONOMY SALES (MWH)";
        }
        Parameter ETDMMERG_pass {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "REGIONAL DOMESTIC ECONOMY SALES (MWH)";
        }
        Parameter ETDMMERG_calc {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "REGIONAL DOMESTIC ECONOMY SALES (MWH)";
        }
        Parameter ETDMMF {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Firm Pwr Sales (MWH)";
        }
        Parameter ETDMMF_pass {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Firm Pwr Sales (MWH)";
        }
        Parameter ETDMMF_calc {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Domestic Firm Pwr Sales (MWH)";
        }
        Parameter ETEXPD {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Exports - Revenues (MM$)";
        }
        Parameter ETEXPD_pass {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Exports - Revenues (MM$)";
        }
        Parameter ETEXPD_calc {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Exports - Revenues (MM$)";
        }
        Parameter ETEXPF {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Exports - Firm (MWH)";
        }
        Parameter ETEXPF_pass {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Exports - Firm (MWH)";
        }
        Parameter ETEXPF_calc {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Exports - Firm (MWH)";
        }
        Parameter ETIMPD {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Import Revenues (MM$)";
        }
        Parameter ETIMPD_pass {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Import Revenues (MM$)";
        }
        Parameter ETIMPD_calc {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Import Revenues (MM$)";
        }
        Parameter ETIMPE {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Imports - Economy (MWH)";
        }
        Parameter ETIMPE_pass {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Imports - Economy (MWH)";
        }
        Parameter ETIMPE_calc {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Imports - Economy (MWH)";
        }
        Parameter ETIMPF {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Imports - Firm (MWH)";
        }
        Parameter ETIMPF_pass {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Imports - Firm (MWH)";
        }
        Parameter ETIMPF_calc {
            IndexDomain: (SCALARSet,SupplyRegion,MNUMYR);
            Text: "Imports - Firm (MWH)";
        }
        Parameter FCLSH {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final coal share by plt type and fuel region";
        }
        Parameter FCLSH_pass {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final coal share by plt type and fuel region";
        }
        Parameter FCLSH_calc {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final coal share by plt type and fuel region";
        }
        Parameter FGSSH {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final gas  share by plt type and fuel region";
        }
        Parameter FGSSH_pass {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final gas  share by plt type and fuel region";
        }
        Parameter FGSSH_calc {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final gas  share by plt type and fuel region";
        }
        Parameter FOLSH {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final oil  share by plt type and fuel region";
        }
        Parameter FOLSH_pass {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final oil  share by plt type and fuel region";
        }
        Parameter FOLSH_calc {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final oil  share by plt type and fuel region";
        }
        Parameter FWDSH {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final biomass share by plt type and fuel region";
        }
        Parameter FWDSH_pass {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final biomass share by plt type and fuel region";
        }
        Parameter FWDSH_calc {
            IndexDomain: (OwnerType,PlantType_ECP,FuelRegion);
            Text: "final biomass share by plt type and fuel region";
        }
        Parameter NMARCST {
            IndexDomain: (SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR);
            Text: "after trade marginal cost";
        }
        Parameter NMARCST_pass {
            IndexDomain: (SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR);
            Text: "after trade marginal cost";
        }
        Parameter NMARCST_calc {
            IndexDomain: (SupplyRegionAll_ALT1,Season,SliceSorted,MNUMYR);
            Text: "after trade marginal cost";
        }
        Parameter NWGPSGEN {
            IndexDomain: (PlantType_ECP,SupplyRegion,MNUMYR);
        }
        Parameter NWGPSGEN_pass {
            IndexDomain: (PlantType_ECP,SupplyRegion,MNUMYR);
        }
        Parameter NWGPSGEN_calc {
            IndexDomain: (PlantType_ECP,SupplyRegion,MNUMYR);
        }
        Parameter OGCO2QEM {
            IndexDomain: (OGSMRegion_ALTTo,MNUMYR);
            Text: "CO2 quantity from EMM(mmcf)";
        }
        Parameter OGCO2QEM_pass {
            IndexDomain: (OGSMRegion_ALTTo,MNUMYR);
            Text: "CO2 quantity from EMM(mmcf)";
        }
        Parameter OGCO2QEM_calc {
            IndexDomain: (OGSMRegion_ALTTo,MNUMYR);
            Text: "CO2 quantity from EMM(mmcf)";
        }
        Parameter PBMPWCL {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Price to Electric Power Sector";
        }
        Parameter PBMPWCL_pass {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Price to Electric Power Sector";
        }
        Parameter PBMPWCL_calc {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Price to Electric Power Sector";
        }
        Parameter QBMPWCL {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Demand in Electric Power Sector";
        }
        Parameter QBMPWCL_pass {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Demand in Electric Power Sector";
        }
        Parameter QBMPWCL_calc {
            IndexDomain: (BiomassType,CoalDemandRegion,MNUMYR);
            Text: "Biomass Demand in Electric Power Sector";
        }
        Parameter RMPOOL {
            IndexDomain: (MNUMYR,SupplyRegion);
            Text: "Capacity Payment Pool of Dollars";
        }
        Parameter RMPOOL_pass {
            IndexDomain: (MNUMYR,SupplyRegion);
            Text: "Capacity Payment Pool of Dollars";
        }
        Parameter RMPOOL_calc {
            IndexDomain: (MNUMYR,SupplyRegion);
            Text: "Capacity Payment Pool of Dollars";
        }
        Parameter TST_HG {
            IndexDomain: (UtilitySector,nHGCODE);
        }
        Parameter TST_HG_pass {
            IndexDomain: (UtilitySector,nHGCODE);
        }
        Parameter TST_HG_calc {
            IndexDomain: (UtilitySector,nHGCODE);
        }
        Parameter TST_NOX {
            IndexDomain: (PlantType_ECPp2,NOXRegion);
        }
        Parameter TST_NOX_pass {
            IndexDomain: (PlantType_ECPp2,NOXRegion);
        }
        Parameter TST_NOX_calc {
            IndexDomain: (PlantType_ECPp2,NOXRegion);
        }
        Parameter TST_SO2 {
            IndexDomain: (PlantType_ECPp2,SO2Region);
        }
        Parameter TST_SO2_pass {
            IndexDomain: (PlantType_ECPp2,SO2Region);
        }
        Parameter TST_SO2_calc {
            IndexDomain: (PlantType_ECPp2,SO2Region);
        }
        Parameter UCARPRC {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "11 Car Allowance Price -- Regional";
        }
        Parameter UCARPRC_pass {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "11 Car Allowance Price -- Regional";
        }
        Parameter UCARPRC_calc {
            IndexDomain: (CO2CapGroup,MNUMYR);
            Text: "11 Car Allowance Price -- Regional";
        }
        Parameter UCRNW {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UCRNW_pass {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UCRNW_calc {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UCRPS {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UCRPS_pass {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UCRPS_calc {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UIHYR {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Reversible Hydroelectric";
        }
        Parameter UIHYR_pass {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Reversible Hydroelectric";
        }
        Parameter UIHYR_calc {
            IndexDomain: (SCALARSet);
            Text: "EFD Type Index: Reversible Hydroelectric";
        }
        Parameter ULCO2CST {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter ULCO2CST_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter ULCO2CST_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
        }
        Parameter ULTGEN {
            IndexDomain: (PlantGroup);
            Text: "Generation by Plant Group";
        }
        Parameter ULTGEN_pass {
            IndexDomain: (PlantGroup);
            Text: "Generation by Plant Group";
        }
        Parameter ULTGEN_calc {
            IndexDomain: (PlantGroup);
            Text: "Generation by Plant Group";
        }
        Parameter UPFUEL {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "DELIVERED FUEL PRICES";
        }
        Parameter UPFUEL_pass {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "DELIVERED FUEL PRICES";
        }
        Parameter UPFUEL_calc {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "DELIVERED FUEL PRICES";
        }
        Parameter UQCOAL {
            IndexDomain: (UtilitySector,CoalDemandRegion,MNUMYR);
            Text: "EMM Coal Consumption by ECP Type and Coal Demand Region";
        }
        Parameter UQCOAL_pass {
            IndexDomain: (UtilitySector,CoalDemandRegion,MNUMYR);
            Text: "EMM Coal Consumption by ECP Type and Coal Demand Region";
        }
        Parameter UQCOAL_calc {
            IndexDomain: (UtilitySector,CoalDemandRegion,MNUMYR);
            Text: "EMM Coal Consumption by ECP Type and Coal Demand Region";
        }
        Parameter UTCNSTSL {
            IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "transmission constraint by season & slice";
        }
        Parameter UTCNSTSL_pass {
            IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "transmission constraint by season & slice";
        }
        Parameter UTCNSTSL_calc {
            IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "transmission constraint by season & slice";
        }
        Parameter UTCO2QEM {
            IndexDomain: (OGSMRegion_ALTTo,MNUMYR);
            Text: "CO2 quantity from EMM(mmcf)";
        }
        Parameter UTCO2QEM_pass {
            IndexDomain: (OGSMRegion_ALTTo,MNUMYR);
            Text: "CO2 quantity from EMM(mmcf)";
        }
        Parameter UTCO2QEM_calc {
            IndexDomain: (OGSMRegion_ALTTo,MNUMYR);
            Text: "CO2 quantity from EMM(mmcf)";
        }
        Parameter UTDMDE {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "44 Net Domestic Economy Sales--Nerc (MM$)";
        }
        Parameter UTDMDE_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "44 Net Domestic Economy Sales--Nerc (MM$)";
        }
        Parameter UTDMDE_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "44 Net Domestic Economy Sales--Nerc (MM$)";
        }
        Parameter UTDMDF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "33 Net Domestic Firm Power   -Nerc (MM$)";
        }
        Parameter UTDMDF_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "33 Net Domestic Firm Power   -Nerc (MM$)";
        }
        Parameter UTDMDF_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "33 Net Domestic Firm Power   -Nerc (MM$)";
        }
        Parameter UTDMME {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "22 Net Domestic Economy Sales-Nerc (Mkwh)";
        }
        Parameter UTDMME_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "22 Net Domestic Economy Sales-Nerc (Mkwh)";
        }
        Parameter UTDMME_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "22 Net Domestic Economy Sales-Nerc (Mkwh)";
        }
        Parameter UTDMMF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "11 Net Domestic Firm Power  --Nerc (Mkwh)";
        }
        Parameter UTDMMF_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "11 Net Domestic Firm Power  --Nerc (Mkwh)";
        }
        Parameter UTDMMF_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "11 Net Domestic Firm Power  --Nerc (Mkwh)";
        }
        Parameter UTECON {
            IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "detailed economy trade";
        }
        Parameter UTECON_pass {
            IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "detailed economy trade";
        }
        Parameter UTECON_calc {
            IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "detailed economy trade";
        }
        Parameter UTECONSL {
            IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "detailed economy trade by season & slice";
        }
        Parameter UTECONSL_pass {
            IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "detailed economy trade by season & slice";
        }
        Parameter UTECONSL_calc {
            IndexDomain: (Season,SliceSorted,SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "detailed economy trade by season & slice";
        }
        Parameter UTEXDE {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "112 Gross Dom. Economy Sales--Nerc (MM$)";
        }
        Parameter UTEXDE_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "112 Gross Dom. Economy Sales--Nerc (MM$)";
        }
        Parameter UTEXDE_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "112 Gross Dom. Economy Sales--Nerc (MM$)";
        }
        Parameter UTEXDF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "111 Gross Dom. Firm Power   -Nerc (MM$)";
        }
        Parameter UTEXDF_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "111 Gross Dom. Firm Power   -Nerc (MM$)";
        }
        Parameter UTEXDF_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "111 Gross Dom. Firm Power   -Nerc (MM$)";
        }
        Parameter UTEXME {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "110 Gross Dom. Economy Sales-Nerc (Mkwh)";
        }
        Parameter UTEXME_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "110 Gross Dom. Economy Sales-Nerc (Mkwh)";
        }
        Parameter UTEXME_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "110 Gross Dom. Economy Sales-Nerc (Mkwh)";
        }
        Parameter UTEXMF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "99 Gross Dom. Firm Power  --Nerc (Mkwh)";
        }
        Parameter UTEXMF_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "99 Gross Dom. Firm Power  --Nerc (Mkwh)";
        }
        Parameter UTEXMF_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "99 Gross Dom. Firm Power  --Nerc (Mkwh)";
        }
        Parameter UTEXPE {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "88 Economy Power Exports--Nerc (Mwh)";
        }
        Parameter UTEXPE_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "88 Economy Power Exports--Nerc (Mwh)";
        }
        Parameter UTEXPE_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "88 Economy Power Exports--Nerc (Mwh)";
        }
        Parameter UTEXPF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "77 Firm Power Exports--Nerc (Mwh)";
        }
        Parameter UTEXPF_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "77 Firm Power Exports--Nerc (Mwh)";
        }
        Parameter UTEXPF_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "77 Firm Power Exports--Nerc (Mwh)";
        }
        Parameter UTHTP2 {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UTHTP2_pass {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UTHTP2_calc {
            IndexDomain: (Segment,Group,SupplyRegion_ALT1);
        }
        Parameter UTIMPE {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "66 Economy Power Imports--Nerc (Mkwh)";
        }
        Parameter UTIMPE_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "66 Economy Power Imports--Nerc (Mkwh)";
        }
        Parameter UTIMPE_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "66 Economy Power Imports--Nerc (Mkwh)";
        }
        Parameter UTIMPF {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "55 Firm Power Imports--Nerc (Mkwh)";
        }
        Parameter UTIMPF_pass {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "55 Firm Power Imports--Nerc (Mkwh)";
        }
        Parameter UTIMPF_calc {
            IndexDomain: (SupplyRegion_ALT1,MNUMYR);
            Text: "55 Firm Power Imports--Nerc (Mkwh)";
        }
        Parameter UTSALES {
            IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "detailed trade sales $";
        }
        Parameter UTSALES_pass {
            IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "detailed trade sales $";
        }
        Parameter UTSALES_calc {
            IndexDomain: (SupplyRegionAll_ALT1,SupplyRegionAll);
            Text: "detailed trade sales $";
        }
        Parameter XCL_TYPE {
            IndexDomain: (CoalSupplyCurve);
            Text: "ECP Coal Type by Coal Supply Curve";
        }
        Parameter XCL_TYPE_pass {
            IndexDomain: (CoalSupplyCurve);
            Text: "ECP Coal Type by Coal Supply Curve";
        }
        Parameter XCL_TYPE_calc {
            IndexDomain: (CoalSupplyCurve);
            Text: "ECP Coal Type by Coal Supply Curve";
        }
        Parameter UFRSO2Q {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "SO2 EMISSIONS Quantity";
        }
        Parameter UFRSO2Q_pass {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "SO2 EMISSIONS Quantity";
        }
        Parameter UFRSO2Q_calc {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "SO2 EMISSIONS Quantity";
        }
        Parameter UFRSO2R {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "SO2 EMISSION RATE Revised";
        }
        Parameter UFRSO2R_pass {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "SO2 EMISSION RATE Revised";
        }
        Parameter UFRSO2R_calc {
            IndexDomain: (FuelType,int_fuel_region);
            Text: "SO2 EMISSION RATE Revised";
        }
    }
    Section ccalc_parameter_declare {
        DeclarationSection ED_BENCH;
        DeclarationSection ED_BIO;
        DeclarationSection ED_BTU;
        DeclarationSection ED_CAR {
            Parameter ccalc_cCARBNK_EFDCOSTS {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cCARBNK_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARBNK_UBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARBNK(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARBONOT_LBOUND {
                Text: "OML Columns: CARBONOT and OML Rows: LBOUND";
            }
            Parameter ccalc_cCARBONOT_rCARBONn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARBONOT and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCARBONOT_UBOUND {
                Text: "OML Columns: CARBONOT and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARECR_EFDCOSTS {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cCARECR_rCARBONle {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCARECR_UBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARECR(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARESC_EFDCOSTS {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cCARESC_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARESC_rCARBONle {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCARFUE_LBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARFUE(**) and OML Rows: LBOUND";
            }
            Parameter ccalc_cCARFUE_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARFUE_UBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARFUE(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARIND_LBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARIND(**) and OML Rows: LBOUND";
            }
            Parameter ccalc_cCARIND_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARIND_UBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARIND(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARLIM_EFDCOSTS {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cCARLIM_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARLIM_rCARBONle {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCARLIM_UBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARLIM(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCAROFF_EFDCOSTS {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cCAROFF_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCAROFF_rCARBONle {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCAROFF_UBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CAROFF(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCAROTH_LBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CAROTH(**) and OML Rows: LBOUND";
            }
            Parameter ccalc_cCAROTH_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCAROTH_UBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CAROTH(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARREF_LBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARREF(**) and OML Rows: LBOUND";
            }
            Parameter ccalc_cCARREF_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARREF_UBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARREF(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARRSV_EFDCOSTS {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cCARRSV_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARRSV_rCARBONle {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCARRSV_UBOUND {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARRSV(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARUTL_rCARBONABeq {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARUTL_rCARBONle {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
            }
        }
        DeclarationSection ED_CCAP {
            Parameter ccalc_cNSR_EFDCOSTS {
                IndexDomain: (FuelRegion,OGSMRegion);
                Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cNSR_rZFLRSeq {
                IndexDomain: (FuelRegion,OGSMRegion);
                Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
            }
            Parameter ccalc_cNSR_rZFLRSge {
                IndexDomain: (FuelRegion,OGSMRegion);
                Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
            }
            Parameter ccalc_cNSR_rZOGSMeq {
                IndexDomain: (OGSMRegion,FuelRegion);
                Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
            }
            Parameter ccalc_cNSX_EFDCOSTS {
                IndexDomain: (FuelRegion);
                Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cNSX_rZFLRSeq {
                IndexDomain: (FuelRegion);
                Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
            }
            Parameter ccalc_cNSX_rZFLRSge {
                IndexDomain: (FuelRegion);
                Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
            }
        }
        DeclarationSection ED_CL_IMPORTS {
            Parameter ccalc_cT_STOCK__rMERCURYn {
                IndexDomain: (nHGCODE);
                Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
            }
            Parameter ccalc_cT_STOCK__rSULFURn {
                IndexDomain: (SO2Region);
                Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
            }
            Parameter ccalc_cT_STOCK__UBOUND {
                Text: "OML Columns: T_STOCK_ and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
        }
        DeclarationSection ED_COL {
            Parameter ccalc_cACISPLY_EFDCOSTS {
                IndexDomain: (numACI);
                Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cACISPLY_rACICSTle {
                IndexDomain: (numACI);
                Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
            }
            Parameter ccalc_cC_Z_EFDCOSTS {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
                Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cC_Z_rT_le {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
                Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
            }
            Parameter ccalc_cCoalOtherUsage_LBOUND {
                IndexDomain: (CoalSupplyCurve);
                Text: "OML Columns: CP(**)OTXX and OML Rows: LBOUND";
            }
            Parameter ccalc_cCoalOtherUsage_rS_CLle {
                IndexDomain: (CoalSupplyCurve,CoalType);
                Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
            }
            Parameter ccalc_cCoalOtherUsage_UBOUND {
                IndexDomain: (CoalSupplyCurve);
                Text: "OML Columns: CP(**)OTXX and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCP_EFDCOSTS {
                IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
                Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cCP_rS_CLle {
                IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
                Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
            }
            Parameter ccalc_cCP_UBOUND {
                IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
                Text: "OML Columns: CP(**)(**)(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCT_EFDCOSTS {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cCT_rACICSTle {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
            }
            Parameter ccalc_cCT_rACIOMCSTn {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
            }
            Parameter ccalc_cCT_rACIRMVXXn {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
            }
            Parameter ccalc_cCT_rCARBONn {
                IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCT_rCLle {
                IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
            }
            Parameter ccalc_cCT_rDVle {
                IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
            }
            Parameter ccalc_cCT_rK_ge {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
            }
            Parameter ccalc_cCT_rMERC_le {
                IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
            }
            Parameter ccalc_cCT_rS_CLle {
                IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
            }
            Parameter ccalc_cCT_rSULFle {
                IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
            }
            Parameter ccalc_cCT_rT_le {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
            }
            Parameter ccalc_cCT_UBOUND {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cDX_EFDCOSTS {
                IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
                Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cDX_rDVle {
                IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
                Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
            }
            Parameter ccalc_cKX_EFDCOSTS {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
                Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cKX_rK_ge {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
                Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
            }
            Parameter ccalc_cMVS_EFDCOSTS {
                IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
                Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cMVS_rMVSO2le {
                IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
                Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
            }
            Parameter ccalc_cMVS_rSULFURCRle {
                IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
                Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
            }
            Parameter ccalc_cRHS_rDVle {
                IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
                Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
            }
            Parameter ccalc_cRHS_rK_ge {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
                Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
            }
            Parameter ccalc_cRHS_rMVSO2le {
                IndexDomain: (CoalDemandRegion);
                Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
            }
            Parameter ccalc_cRHS_rT_le {
                IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
                Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
            }
        }
        DeclarationSection ED_GAS;
        DeclarationSection ED_GRD {
            Parameter ccalc_cDPVCP_LBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: DPVCP(**) and OML Rows: LBOUND";
            }
            Parameter ccalc_cDPVCP_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
                Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
            }
            Parameter ccalc_cDPVCP_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
                Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
            }
            Parameter ccalc_cDPVCP_UBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: DPVCP(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
        }
        DeclarationSection ED_LOAD;
        DeclarationSection ED_OIL {
            Parameter ccalc_cDPUS_EFDCOSTS {
                IndexDomain: (DistillateProductionStep);
                Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cDPUS_rS_DSUSle {
                IndexDomain: (DistillateProductionStep);
                Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
            }
            Parameter ccalc_cDTUS_EFDCOSTS {
                IndexDomain: (OilRegion);
                Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cDTUS_rCARBONn {
                IndexDomain: (CarbonRegion,OilRegion);
                Text: "OML Columns: DTUS(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cDTUS_rDSle {
                IndexDomain: (CensusRegion,OilRegion);
                Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
            }
            Parameter ccalc_cDTUS_rMERC_DSle {
                IndexDomain: (nHGCODE,OilRegion);
                Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
            }
            Parameter ccalc_cDTUS_rS_DSUSle {
                IndexDomain: (OilRegion);
                Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
            }
            Parameter ccalc_cRTUS_rMERC_RSle {
                IndexDomain: (nHGCODE,OilRegion);
                Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
            }
            Parameter ccalc_cRTUS_rSULFle {
                IndexDomain: (PlantType_ECP,SO2Region,OilRegion);
                Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
            }
        }
        DeclarationSection ED_OP;
        DeclarationSection ED_PM;
        DeclarationSection ED_RNW {
            Parameter ccalc_cRHS_rENeq {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
            }
            Parameter ccalc_cRHS_rENle {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
            }
        }
        DeclarationSection ED_TRADE;
        DeclarationSection EPA_TRANRG_EFD {
            Parameter ccalc_cCT_rSULFURCRle {
                IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
            }
            Parameter ccalc_cRHS_rSULFURCRle {
                IndexDomain: (CoalDemandRegion);
                Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
            }
            Parameter ccalc_cRTUS_rSULFURCRle {
                IndexDomain: (CoalDemandRegion,OilRegion);
                Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
            }
        }
        DeclarationSection OPBSLD {
            Parameter ccalc_cJ_EFDCOSTS {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cJ_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            }
            Parameter ccalc_cJ_rBTUXXle {
                IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
            }
            Parameter ccalc_cJ_rCARBONle {
                IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cJ_rCBle {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
            }
            Parameter ccalc_cJ_rCO2QNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
            }
            Parameter ccalc_cJ_rCO2TNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
            }
            Parameter ccalc_cJ_rCONCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
            }
            Parameter ccalc_cJ_rCONNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
            }
            Parameter ccalc_cJ_rELNOX0n {
                IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
            }
            Parameter ccalc_cJ_rELNOXle {
                IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
            }
            Parameter ccalc_cJ_rGENCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
            }
            Parameter ccalc_cJ_rGENNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
            }
            Parameter ccalc_cJ_rGENQNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
            }
            Parameter ccalc_cJ_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            }
            Parameter ccalc_cJ_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            }
            Parameter ccalc_cJ_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            }
            Parameter ccalc_cJ_rMRXge {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
            }
            Parameter ccalc_cJ_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            }
            Parameter ccalc_cJ_rZFLRGeq {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            }
            Parameter ccalc_cJ_UBOUND {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cO_EFDCOSTS {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cO_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            }
            Parameter ccalc_cO_rBTUXXle {
                IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
            }
            Parameter ccalc_cO_rCARBONle {
                IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cO_rCBle {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
            }
            Parameter ccalc_cO_rCO2QNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
            }
            Parameter ccalc_cO_rCO2TNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
            }
            Parameter ccalc_cO_rCONCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
            }
            Parameter ccalc_cO_rCONNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
            }
            Parameter ccalc_cO_rELNOX0n {
                IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
            }
            Parameter ccalc_cO_rELNOXle {
                IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
            }
            Parameter ccalc_cO_rGENCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
            }
            Parameter ccalc_cO_rGENNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
            }
            Parameter ccalc_cO_rGENQNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
            }
            Parameter ccalc_cO_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            }
            Parameter ccalc_cO_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            }
            Parameter ccalc_cO_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            }
            Parameter ccalc_cO_rMRXge {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
            }
            Parameter ccalc_cO_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            }
            Parameter ccalc_cO_rZFLRGeq {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            }
            Parameter ccalc_cO_UBOUND {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cU_EFDCOSTS {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cU_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            }
            Parameter ccalc_cU_rBTUXXle {
                IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
            }
            Parameter ccalc_cU_rCARBONle {
                IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cU_rCBle {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
            }
            Parameter ccalc_cU_rCO2QNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
            }
            Parameter ccalc_cU_rCO2TNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
            }
            Parameter ccalc_cU_rCONCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
            }
            Parameter ccalc_cU_rCONNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
            }
            Parameter ccalc_cU_rELNOX0n {
                IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
            }
            Parameter ccalc_cU_rELNOXle {
                IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
            }
            Parameter ccalc_cU_rGENCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
            }
            Parameter ccalc_cU_rGENNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
            }
            Parameter ccalc_cU_rGENQNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
            }
            Parameter ccalc_cU_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            }
            Parameter ccalc_cU_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            }
            Parameter ccalc_cU_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            }
            Parameter ccalc_cU_rMRXge {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
            }
            Parameter ccalc_cU_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            }
            Parameter ccalc_cU_rZFLRGeq {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            }
            Parameter ccalc_cU_UBOUND {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
        }
        DeclarationSection OPDG {
            Parameter ccalc_cD_EFDCOSTS {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cD_LBOUND {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: LBOUND";
            }
            Parameter ccalc_cD_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            }
            Parameter ccalc_cD_rCO2TNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
            }
            Parameter ccalc_cD_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            }
            Parameter ccalc_cD_UBOUND {
                IndexDomain: (PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
        }
        DeclarationSection OPHYD {
            Parameter ccalc_cF_EFDCOSTS {
                IndexDomain: (PlantGroup,Season,Slice);
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cF_rENeq {
                IndexDomain: (PlantGroup,Season,Slice);
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
            }
            Parameter ccalc_cF_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            }
            Parameter ccalc_cF_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            }
            Parameter ccalc_cH_EFDCOSTS {
                IndexDomain: (PlantGroup,Season,Slice);
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cH_rENeq {
                IndexDomain: (PlantGroup,Season,Slice);
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
            }
            Parameter ccalc_cH_rENle {
                IndexDomain: (PlantGroup,Season,Slice);
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
            }
            Parameter ccalc_cH_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            }
            Parameter ccalc_cH_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
                Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            }
            Parameter ccalc_cJX_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
                Text: "OML Columns: J(*****)X(*) and OML Rows: GRDGN(**)(*)";
            }
            Parameter ccalc_cJX_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
                Text: "OML Columns: J(*****)X(*) and OML Rows: GRDRT(**)(*)";
            }
        }
        DeclarationSection OPINT {
            Parameter ccalc_cI_EFDCOSTS {
                IndexDomain: (PlantGroup,Season,Slice);
                Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cI_LBOUND {
                IndexDomain: (PlantGroup,Season,Slice);
                Text: "OML Columns: I(*****)(*)(*) and OML Rows: LBOUND";
            }
            Parameter ccalc_cI_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
                Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            }
            Parameter ccalc_cI_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
                Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            }
            Parameter ccalc_cI_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
                Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            }
            Parameter ccalc_cI_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
                Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            }
            Parameter ccalc_cI_UBOUND {
                IndexDomain: (PlantGroup,Season,Slice);
                Text: "OML Columns: I(*****)(*)(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
        }
        DeclarationSection OPRNBS {
            Parameter ccalc_cJX_EFDCOSTS {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cJX_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
                Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
            }
            Parameter ccalc_cJX_rCBle {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
            }
            Parameter ccalc_cJX_rGn {
                IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
                Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
            }
            Parameter ccalc_cJX_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
                Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
            }
            Parameter ccalc_cJX_rMRXge {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
            }
            Parameter ccalc_cJX_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
                Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
            }
            Parameter ccalc_cJX_UBOUND {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: J(*****)X(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cOX_EFDCOSTS {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cOX_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
                Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
            }
            Parameter ccalc_cOX_rCBle {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
            }
            Parameter ccalc_cOX_rELNOX0n {
                IndexDomain: (INOXP,PlantGroup,Season);
                Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
            }
            Parameter ccalc_cOX_rELNOXle {
                IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season);
                Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
            }
            Parameter ccalc_cOX_rGn {
                IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
                Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
            }
            Parameter ccalc_cOX_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
                Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
            }
            Parameter ccalc_cOX_rMRXge {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
            }
            Parameter ccalc_cOX_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
                Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
            }
            Parameter ccalc_cOX_UBOUND {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: O(*****)X(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cUX_EFDCOSTS {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cUX_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
                Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
            }
            Parameter ccalc_cUX_rCBle {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
            }
            Parameter ccalc_cUX_rGn {
                IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
                Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
            }
            Parameter ccalc_cUX_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
                Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
            }
            Parameter ccalc_cUX_rMRXge {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
            }
            Parameter ccalc_cUX_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
                Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
            }
            Parameter ccalc_cUX_UBOUND {
                IndexDomain: (PlantGroup,Season);
                Text: "OML Columns: U(*****)X(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
        }
        DeclarationSection OPSTR;
        DeclarationSection REVEFD {
            Parameter ccalc_cELNOX_rELNOX0le {
                IndexDomain: (INOXP,PlantType_ECP);
                Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
            }
            Parameter ccalc_cELNOX_rELNOXle {
                IndexDomain: (INOXP,PlantType_ECP);
                Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
            }
            Parameter ccalc_cMERC__rMERC_le {
                IndexDomain: (PlantType_ECP,nHGCODE);
                Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
            }
            Parameter ccalc_cMERC__rMERCURYn {
                IndexDomain: (nHGCODE,PlantType_ECP);
                Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
            }
            Parameter ccalc_cMERC_DS_rMERC_DSle {
                IndexDomain: (nHGCODE);
                Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
            }
            Parameter ccalc_cMERC_DS_rMERCURYn {
                IndexDomain: (nHGCODE);
                Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
            }
            Parameter ccalc_cMERC_RS_rMERC_RSle {
                IndexDomain: (nHGCODE);
                Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
            }
            Parameter ccalc_cMERC_RS_rMERCURYn {
                IndexDomain: (nHGCODE);
                Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
            }
            Parameter ccalc_cSULF_EFDCOSTS {
                IndexDomain: (PlantType_ECP,SO2Region);
                Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cSULF_rSULFle {
                IndexDomain: (PlantType_ECP,SO2Region);
                Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
            }
            Parameter ccalc_cSULF_rSULFURn {
                IndexDomain: (SO2Region,PlantType_ECP);
                Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
            }
        }
        DeclarationSection OtherParams {
            Parameter ccalc_cBCTLN_LBOUND {
                IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP);
                Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: LBOUND";
            }
            Parameter ccalc_cBCTLN_rELNOX0le {
                IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason);
                Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
            }
            Parameter ccalc_cBCTLN_rELNOXle {
                IndexDomain: (INOXP,PlantType_ECP,CoalDemandRegion_ALT1,GenerationSeason);
                Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)(**)";
            }
            Parameter ccalc_cBCTLN_UBOUND {
                IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP);
                Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARBNK_rCARBONABn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARDM_LBOUND {
                IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
                Text: "OML Columns: CARDM(*)(**) and OML Rows: LBOUND";
            }
            Parameter ccalc_cCARDM_rCARBONle {
                IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
                Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCARDM_rCARBONn {
                IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
                Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCARDM_UBOUND {
                IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
                Text: "OML Columns: CARDM(*)(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARESC_rCARBONABn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARFUE_rCARBONABn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARIM_LBOUND {
                IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
                Text: "OML Columns: CARIM(*)(**) and OML Rows: LBOUND";
            }
            Parameter ccalc_cCARIM_rCARBONle {
                IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
                Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCARIM_rCARBONn {
                IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
                Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCARIM_UBOUND {
                IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
                Text: "OML Columns: CARIM(*)(**) and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cCARIND_rCARBONABn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCAROFF_rCARBONABn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCAROTH_rCARBONABn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARREF_rCARBONABn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARRSV_rCARBONABn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARUTL_rCARBONABn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
            }
            Parameter ccalc_cCARUTL_rCARBONn {
                IndexDomain: (CarbonRegion);
                Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cCMNR_EFDCOSTS {
                IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto);
                Text: "OML Columns: CM(**)(**)NR and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cCMNR_rCO2QNRle {
                IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
                Text: "OML Columns: CM(**)(**)NR and OML Rows: CO2QNR(**)";
            }
            Parameter ccalc_cCT_rSULFURCRn {
                IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
                Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
            }
            Parameter ccalc_cD_rCAROGn {
                IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: CAROG(**)";
            }
            Parameter ccalc_cD_rCO2QFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QFR(**)";
            }
            Parameter ccalc_cD_rCO2QNRle {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
            }
            Parameter ccalc_cD_rCO2QNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
            }
            Parameter ccalc_cD_rCO2RNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
            }
            Parameter ccalc_cD_rCO2TFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TFR(**)";
            }
            Parameter ccalc_cD_rGENQFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQFR(**)";
            }
            Parameter ccalc_cD_rGENQNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
            }
            Parameter ccalc_cF_rENle {
                IndexDomain: (PlantGroup,Season,Slice);
                Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
            }
            Parameter ccalc_cGEESNR_LBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: G(**)EESNR and OML Rows: LBOUND";
            }
            Parameter ccalc_cGEESNR_rCO2RNRn {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: G(**)EESNR and OML Rows: CO2RNR(**)";
            }
            Parameter ccalc_cGEESNR_UBOUND {
                IndexDomain: (SupplyRegion_ALT2);
                Text: "OML Columns: G(**)EESNR and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cIGEN_LBOUND {
                IndexDomain: (SupplyRegion_ALT1,PlantType_ECP);
                Text: "OML Columns: I(*)(**)GEN and OML Rows: LBOUND";
            }
            Parameter ccalc_cIGEN_rCO2RNRn {
                IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
                Text: "OML Columns: I(*)(**)GEN and OML Rows: CO2RNR(**)";
            }
            Parameter ccalc_cIGEN_rGENQNRn {
                IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
                Text: "OML Columns: I(*)(**)GEN and OML Rows: GENQNR(**)";
            }
            Parameter ccalc_cIGEN_UBOUND {
                IndexDomain: (SupplyRegion_ALT1,PlantType_ECP);
                Text: "OML Columns: I(*)(**)GEN and OML Rows: UBOUND";
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cJ_ALT_EFDCOSTS {
                IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
                }
            }
            Parameter ccalc_cJ_ALT_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
                }
            }
            Parameter ccalc_cJ_ALT_rBTUXXle {
                IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
                }
            }
            Parameter ccalc_cJ_ALT_rCARBONle {
                IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCARBONn {
                IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCARCLn {
                IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCAROGn {
                IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCBle {
                IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
                }
            }
            Parameter ccalc_cJ_ALT_rCO2QFRn {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCO2QNRle {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCO2QNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCO2RNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCO2TFRn {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCO2TNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCONCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rCONNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rELNOX0n {
                IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
                }
            }
            Parameter ccalc_cJ_ALT_rELNOXle {
                IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rGENCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rGENNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rGENQFRn {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rGENQNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
                }
            }
            Parameter ccalc_cJ_ALT_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
                }
            }
            Parameter ccalc_cJ_ALT_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
                }
            }
            Parameter ccalc_cJ_ALT_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
                }
            }
            Parameter ccalc_cJ_ALT_rMRXge {
                IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
                }
            }
            Parameter ccalc_cJ_ALT_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
                }
            }
            Parameter ccalc_cJ_ALT_rZFLRGeq {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
                }
            }
            Parameter ccalc_cJ_ALT_rZFLRGge {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
                }
            }
            Parameter ccalc_cJ_ALT_rZFLRSeq {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
                }
            }
            Parameter ccalc_cJ_ALT_UBOUND {
                IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: J(*****)(*)(*)!ALT and OML Rows: UBOUND"
                }
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cJ_rCARBONn {
                IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cJ_rCARCLn {
                IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARCL(**)";
            }
            Parameter ccalc_cJ_rCAROGn {
                IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CAROG(**)";
            }
            Parameter ccalc_cJ_rCO2QFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QFR(**)";
            }
            Parameter ccalc_cJ_rCO2QNRle {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
            }
            Parameter ccalc_cJ_rCO2RNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
            }
            Parameter ccalc_cJ_rCO2TFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TFR(**)";
            }
            Parameter ccalc_cJ_rGENQFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQFR(**)";
            }
            Parameter ccalc_cJ_rZFLRGge {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            }
            Parameter ccalc_cJ_rZFLRSeq {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
            }
            Parameter ccalc_cMERC__rMERCURYle {
                IndexDomain: (nHGCODE,PlantType_ECP);
                Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
            }
            Parameter ccalc_cMERC_DS_rMERCURYle {
                IndexDomain: (nHGCODE);
                Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
            }
            Parameter ccalc_cMERC_RS_rMERCURYle {
                IndexDomain: (nHGCODE);
                Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
            }
            Parameter ccalc_cMVSO2_EFDCOSTS {
                IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo);
                Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
            }
            Parameter ccalc_cMVSO2_rSULFURle {
                IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo);
                Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
            }
            Parameter ccalc_cO_ALT_EFDCOSTS {
                IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
                }
            }
            Parameter ccalc_cO_ALT_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
                }
            }
            Parameter ccalc_cO_ALT_rBTUXXle {
                IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
                }
            }
            Parameter ccalc_cO_ALT_rCARBONle {
                IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCARBONn {
                IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCARCLn {
                IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCAROGn {
                IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCBle {
                IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
                }
            }
            Parameter ccalc_cO_ALT_rCO2QFRn {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCO2QNRle {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCO2QNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCO2RNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCO2TFRn {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCO2TNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCONCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
                }
            }
            Parameter ccalc_cO_ALT_rCONNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
                }
            }
            Parameter ccalc_cO_ALT_rELNOX0n {
                IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
                }
            }
            Parameter ccalc_cO_ALT_rELNOXle {
                IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
                }
            }
            Parameter ccalc_cO_ALT_rGENCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
                }
            }
            Parameter ccalc_cO_ALT_rGENNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
                }
            }
            Parameter ccalc_cO_ALT_rGENQFRn {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
                }
            }
            Parameter ccalc_cO_ALT_rGENQNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
                }
            }
            Parameter ccalc_cO_ALT_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
                }
            }
            Parameter ccalc_cO_ALT_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
                }
            }
            Parameter ccalc_cO_ALT_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
                }
            }
            Parameter ccalc_cO_ALT_rMRXge {
                IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
                }
            }
            Parameter ccalc_cO_ALT_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
                }
            }
            Parameter ccalc_cO_ALT_rZFLRGeq {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
                }
            }
            Parameter ccalc_cO_ALT_rZFLRGge {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
                }
            }
            Parameter ccalc_cO_ALT_rZFLRSeq {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
                }
            }
            Parameter ccalc_cO_ALT_UBOUND {
                IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: O(*****)(*)(*)!ALT and OML Rows: UBOUND"
                }
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cO_rCARBONn {
                IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cO_rCARCLn {
                IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARCL(**)";
            }
            Parameter ccalc_cO_rCAROGn {
                IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CAROG(**)";
            }
            Parameter ccalc_cO_rCO2QFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QFR(**)";
            }
            Parameter ccalc_cO_rCO2QNRle {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
            }
            Parameter ccalc_cO_rCO2RNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
            }
            Parameter ccalc_cO_rCO2TFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TFR(**)";
            }
            Parameter ccalc_cO_rGENQFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQFR(**)";
            }
            Parameter ccalc_cO_rZFLRGge {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            }
            Parameter ccalc_cO_rZFLRSeq {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
            }
            Parameter ccalc_cRHS_rSULFURle {
                IndexDomain: (SO2Region);
                Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
            }
            Parameter ccalc_cRTUS_rSULFURCRn {
                IndexDomain: (CoalDemandRegion,OilRegion);
                Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
            }
            Parameter ccalc_cSR_rCARBONn {
                IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
                Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cSULF_rSULFURle {
                IndexDomain: (SO2Region,PlantType_ECP);
                Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
            }
            Parameter ccalc_cT_STOCK__rMERCURYle {
                IndexDomain: (nHGCODE);
                Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
            }
            Parameter ccalc_cTR_rCARBONn {
                IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
                Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cU_ALT_EFDCOSTS {
                IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
                }
            }
            Parameter ccalc_cU_ALT_rBTUle {
                IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
                }
            }
            Parameter ccalc_cU_ALT_rBTUXXle {
                IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
                }
            }
            Parameter ccalc_cU_ALT_rCARBONle {
                IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCARBONn {
                IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCARCLn {
                IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCAROGn {
                IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCBle {
                IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
                }
            }
            Parameter ccalc_cU_ALT_rCO2QFRn {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCO2QNRle {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCO2QNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCO2RNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCO2TFRn {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCO2TNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCONCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
                }
            }
            Parameter ccalc_cU_ALT_rCONNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
                }
            }
            Parameter ccalc_cU_ALT_rELNOX0n {
                IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
                }
            }
            Parameter ccalc_cU_ALT_rELNOXle {
                IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
                }
            }
            Parameter ccalc_cU_ALT_rGENCLeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
                }
            }
            Parameter ccalc_cU_ALT_rGENNGeq {
                IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
                }
            }
            Parameter ccalc_cU_ALT_rGENQFRn {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
                }
            }
            Parameter ccalc_cU_ALT_rGENQNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
                }
            }
            Parameter ccalc_cU_ALT_rGRDGNge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
                }
            }
            Parameter ccalc_cU_ALT_rGRDRTge {
                IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
                }
            }
            Parameter ccalc_cU_ALT_rLDge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
                }
            }
            Parameter ccalc_cU_ALT_rMRXge {
                IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
                }
            }
            Parameter ccalc_cU_ALT_rSRge {
                IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
                }
            }
            Parameter ccalc_cU_ALT_rZFLRGeq {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
                }
            }
            Parameter ccalc_cU_ALT_rZFLRGge {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
                }
            }
            Parameter ccalc_cU_ALT_rZFLRSeq {
                IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
                }
            }
            Parameter ccalc_cU_ALT_UBOUND {
                IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
                Text: {
                    "OML Columns: U(*****)(*)(*)!ALT and OML Rows: UBOUND"
                }
                Range: nonnegative;
                Default: inf;
            }
            Parameter ccalc_cU_rCARBONn {
                IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
            }
            Parameter ccalc_cU_rCARCLn {
                IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARCL(**)";
            }
            Parameter ccalc_cU_rCAROGn {
                IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CAROG(**)";
            }
            Parameter ccalc_cU_rCO2QFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QFR(**)";
            }
            Parameter ccalc_cU_rCO2QNRle {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
            }
            Parameter ccalc_cU_rCO2RNRn {
                IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
            }
            Parameter ccalc_cU_rCO2TFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TFR(**)";
            }
            Parameter ccalc_cU_rGENQFRn {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQFR(**)";
            }
            Parameter ccalc_cU_rZFLRGge {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            }
            Parameter ccalc_cU_rZFLRSeq {
                IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
                Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
            }
        }
    }
    DeclarationSection cpass_parameter_declare {
        Parameter cpass_cACISPLY_EFDCOSTS {
            IndexDomain: (numACI);
            Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cACISPLY_rACICSTle {
            IndexDomain: (numACI);
            Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
        }
        Parameter cpass_cB_EFDCOSTS {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cB_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
        }
        Parameter cpass_cB_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
        }
        Parameter cpass_cB_rCARBONle {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cB_rCARBONn {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cB_rCARSEQn {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQ(**)";
        }
        Parameter cpass_cB_rCFGn {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
        }
        Parameter cpass_cB_rCLle {
            IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
        }
        Parameter cpass_cB_rDSle {
            IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
        }
        Parameter cpass_cB_rNGle {
            IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
        }
        Parameter cpass_cB_rRSle {
            IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
        }
        Parameter cpass_cB_rS_WD_allle {
            IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
        }
        Parameter cpass_cBCTLN_LBOUND {
            IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: LBOUND";
        }
        Parameter cpass_cBCTLN_rELNOX0le {
            IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
        }
        Parameter cpass_cBCTLN_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,CoalDemandRegion_ALT1,GenerationSeason);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)(**)";
        }
        Parameter cpass_cBCTLN_UBOUND {
            IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cBiomassOtherUsage_LBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType);
            Text: "OML Columns: B(**)(**)(**)X and OML Rows: LBOUND";
        }
        Parameter cpass_cBiomassOtherUsage_rS_WD_typele {
            IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector);
            Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
        }
        Parameter cpass_cBiomassOtherUsage_UBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType);
            Text: "OML Columns: B(**)(**)(**)X and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cBP_type_EFDCOSTS {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cBP_type_rS_WD_allle {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
        }
        Parameter cpass_cBP_type_rS_WD_typele {
            IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
        }
        Parameter cpass_cBP_type_UBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cC_Z_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cC_Z_rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
        }
        Parameter cpass_cCARBNK_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cCARBNK_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARBNK_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARBNK_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARBONOT_LBOUND {
            Text: "OML Columns: CARBONOT and OML Rows: LBOUND";
        }
        Parameter cpass_cCARBONOT_rCARBONn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBONOT and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARBONOT_UBOUND {
            Text: "OML Columns: CARBONOT and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARDM_LBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cCARDM_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARDM_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARDM_UBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARECR_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cCARECR_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARECR_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARECR(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARESC_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cCARESC_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARESC_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARESC_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARFUE_LBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cCARFUE_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARFUE_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARFUE_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARIM_LBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cCARIM_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARIM_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARIM_UBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARIND_LBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cCARIND_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARIND_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARIND_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARLIM_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cCARLIM_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARLIM_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARLIM_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCAROFF_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cCAROFF_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCAROFF_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCAROFF_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCAROFF_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCAROTH_LBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cCAROTH_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCAROTH_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCAROTH_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARREF_LBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cCARREF_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARREF_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARREF_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARRSV_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cCARRSV_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARRSV_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARRSV_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARRSV_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCARUTL_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARUTL_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
        }
        Parameter cpass_cCARUTL_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCARUTL_rCARBONn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCMNR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: CM(**)(**)NR and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cCMNR_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: CM(**)(**)NR and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cCoalOtherUsage_LBOUND {
            IndexDomain: (CoalSupplyCurve);
            Text: "OML Columns: CP(**)OTXX and OML Rows: LBOUND";
        }
        Parameter cpass_cCoalOtherUsage_rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType);
            Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
        }
        Parameter cpass_cCoalOtherUsage_UBOUND {
            IndexDomain: (CoalSupplyCurve);
            Text: "OML Columns: CP(**)OTXX and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCONCLB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONCLB(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cCONCLB_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
        }
        Parameter cpass_cCONCLB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONCLB(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCONNGB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONNGB(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cCONNGB_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
        }
        Parameter cpass_cCONNGB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONNGB(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCP_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cCP_rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
        }
        Parameter cpass_cCP_UBOUND {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Text: "OML Columns: CP(**)(**)(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cCT_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cCT_rACICSTle {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
        }
        Parameter cpass_cCT_rACIOMCSTn {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
        }
        Parameter cpass_cCT_rACIRMVXXn {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
        }
        Parameter cpass_cCT_rCARBONn {
            IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cCT_rCLle {
            IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
        }
        Parameter cpass_cCT_rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
        }
        Parameter cpass_cCT_rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
        }
        Parameter cpass_cCT_rMERC_le {
            IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
        }
        Parameter cpass_cCT_rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
        }
        Parameter cpass_cCT_rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
        }
        Parameter cpass_cCT_rSULFURCRle {
            IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
        }
        Parameter cpass_cCT_rSULFURCRn {
            IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
        }
        Parameter cpass_cCT_rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
        }
        Parameter cpass_cCT_UBOUND {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cD_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cD_LBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: LBOUND";
        }
        Parameter cpass_cD_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
        }
        Parameter cpass_cD_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CAROG(**)";
        }
        Parameter cpass_cD_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QFR(**)";
        }
        Parameter cpass_cD_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cD_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cD_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
        }
        Parameter cpass_cD_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TFR(**)";
        }
        Parameter cpass_cD_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
        }
        Parameter cpass_cD_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQFR(**)";
        }
        Parameter cpass_cD_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
        }
        Parameter cpass_cD_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cD_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cDPUS_EFDCOSTS {
            IndexDomain: (DistillateProductionStep);
            Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cDPUS_rS_DSUSle {
            IndexDomain: (DistillateProductionStep);
            Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
        }
        Parameter cpass_cDPVCP_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: DPVCP(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cDPVCP_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
            Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
        }
        Parameter cpass_cDPVCP_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
            Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
        }
        Parameter cpass_cDPVCP_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: DPVCP(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cDTUS_EFDCOSTS {
            IndexDomain: (OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cDTUS_rCARBONn {
            IndexDomain: (CarbonRegion,OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cDTUS_rDSle {
            IndexDomain: (CensusRegion,OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
        }
        Parameter cpass_cDTUS_rMERC_DSle {
            IndexDomain: (nHGCODE,OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
        }
        Parameter cpass_cDTUS_rS_DSUSle {
            IndexDomain: (OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
        }
        Parameter cpass_cDX_EFDCOSTS {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cDX_rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
        }
        Parameter cpass_cELNOX_rELNOX0le {
            IndexDomain: (INOXP,PlantType_ECP);
            Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
        }
        Parameter cpass_cELNOX_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP);
            Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
        }
        Parameter cpass_cES_EFDCOSTS {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cES_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cES_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ES(****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cESCNOX_EFDCOSTS {
            IndexDomain: (INOXP);
            Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cESCNOX_rELNOX0le {
            IndexDomain: (INOXP);
            Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
        }
        Parameter cpass_cF_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cF_rENeq {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
        }
        Parameter cpass_cF_rENle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
        }
        Parameter cpass_cF_rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
        }
        Parameter cpass_cF_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
        }
        Parameter cpass_cF_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
        }
        Parameter cpass_cF_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cF_rPS_le {
            IndexDomain: (SupplyRegion,Season,PlantGroup,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
        }
        Parameter cpass_cF_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cF_UBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cG_LBOUND {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "OML Columns: G(*)CGTRAD and OML Rows: LBOUND";
        }
        Parameter cpass_cG_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1);
            Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cG_UBOUND {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "OML Columns: G(*)CGTRAD and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cGEESNR_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: G(**)EESNR and OML Rows: LBOUND";
        }
        Parameter cpass_cGEESNR_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: G(**)EESNR and OML Rows: CO2RNR(**)";
        }
        Parameter cpass_cGEESNR_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: G(**)EESNR and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cGENCLB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENCLB(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cGENCLB_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
        }
        Parameter cpass_cGENCLB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENCLB(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cGENNGB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENNGB(**) and OML Rows: LBOUND";
        }
        Parameter cpass_cGENNGB_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
        }
        Parameter cpass_cGENNGB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENNGB(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cGPUS_EFDCOSTS {
            IndexDomain: (GasProductionStep);
            Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cGPUS_rS_NGUSle {
            IndexDomain: (GasProductionStep);
            Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
        }
        Parameter cpass_cGPUS_UBOUND {
            IndexDomain: (GasProductionStep);
            Text: "OML Columns: GPUS(**) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cGTUS_EFDCOSTS {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cGTUS_rCARBONn {
            IndexDomain: (CarbonRegion,GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cGTUS_rNGle {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
        }
        Parameter cpass_cGTUS_rS_NGUSle {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
        }
        Parameter cpass_cH_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cH_rENeq {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
        }
        Parameter cpass_cH_rENle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
        }
        Parameter cpass_cH_rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
        }
        Parameter cpass_cH_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
        }
        Parameter cpass_cH_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
        }
        Parameter cpass_cH_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cH_rP2_le {
            IndexDomain: (SupplyRegion,Season,PlantGroup,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
        }
        Parameter cpass_cH_rP2le {
            IndexDomain: (Slice,SupplyRegion,Season,PlantGroup);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
        }
        Parameter cpass_cH_rPS_le {
            IndexDomain: (SupplyRegion,Season,PlantGroup,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
        }
        Parameter cpass_cH_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cH_UBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cI_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cI_LBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: LBOUND";
        }
        Parameter cpass_cI_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
        }
        Parameter cpass_cI_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
        }
        Parameter cpass_cI_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cI_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cI_UBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cIGEN_LBOUND {
            IndexDomain: (SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: LBOUND";
        }
        Parameter cpass_cIGEN_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: CO2RNR(**)";
        }
        Parameter cpass_cIGEN_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: GENQNR(**)";
        }
        Parameter cpass_cIGEN_UBOUND {
            IndexDomain: (SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cJ_ALT_EFDCOSTS {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
            }
        }
        Parameter cpass_cJ_ALT_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
            }
        }
        Parameter cpass_cJ_ALT_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
            }
        }
        Parameter cpass_cJ_ALT_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCBle {
            IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
            }
        }
        Parameter cpass_cJ_ALT_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
            }
        }
        Parameter cpass_cJ_ALT_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
            }
        }
        Parameter cpass_cJ_ALT_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
            }
        }
        Parameter cpass_cJ_ALT_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
            }
        }
        Parameter cpass_cJ_ALT_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
            }
        }
        Parameter cpass_cJ_ALT_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
            }
        }
        Parameter cpass_cJ_ALT_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
            }
        }
        Parameter cpass_cJ_ALT_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
            }
        }
        Parameter cpass_cJ_ALT_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
            }
        }
        Parameter cpass_cJ_ALT_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
            }
        }
        Parameter cpass_cJ_ALT_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
            }
        }
        Parameter cpass_cJ_ALT_rMRXge {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
            }
        }
        Parameter cpass_cJ_ALT_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
            }
        }
        Parameter cpass_cJ_ALT_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
        }
        Parameter cpass_cJ_ALT_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
        }
        Parameter cpass_cJ_ALT_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
            }
        }
        Parameter cpass_cJ_ALT_UBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: UBOUND"
            }
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cJ_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cJ_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
        }
        Parameter cpass_cJ_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
        }
        Parameter cpass_cJ_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cJ_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cJ_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARCL(**)";
        }
        Parameter cpass_cJ_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CAROG(**)";
        }
        Parameter cpass_cJ_rCBle {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
        }
        Parameter cpass_cJ_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QFR(**)";
        }
        Parameter cpass_cJ_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cJ_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cJ_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
        }
        Parameter cpass_cJ_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TFR(**)";
        }
        Parameter cpass_cJ_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
        }
        Parameter cpass_cJ_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
        }
        Parameter cpass_cJ_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
        }
        Parameter cpass_cJ_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
        }
        Parameter cpass_cJ_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
        }
        Parameter cpass_cJ_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
        }
        Parameter cpass_cJ_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
        }
        Parameter cpass_cJ_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQFR(**)";
        }
        Parameter cpass_cJ_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
        }
        Parameter cpass_cJ_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
        }
        Parameter cpass_cJ_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
        }
        Parameter cpass_cJ_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cJ_rMRXge {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
        }
        Parameter cpass_cJ_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cJ_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cJ_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cJ_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
        }
        Parameter cpass_cJ_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cJX_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cJX_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
        }
        Parameter cpass_cJX_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
        }
        Parameter cpass_cJX_rGn {
            IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
        }
        Parameter cpass_cJX_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: GRDGN(**)(*)";
        }
        Parameter cpass_cJX_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: GRDRT(**)(*)";
        }
        Parameter cpass_cJX_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cJX_rMRXge {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
        }
        Parameter cpass_cJX_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cJX_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cKX_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cKX_rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
        }
        Parameter cpass_cMB_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cMB_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
        }
        Parameter cpass_cMB_rMBge {
            IndexDomain: (SupplyRegion_ALT1,PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
        }
        Parameter cpass_cMB_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cMERC__rMERC_le {
            IndexDomain: (PlantType_ECP,nHGCODE);
            Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
        }
        Parameter cpass_cMERC__rMERCURYle {
            IndexDomain: (nHGCODE,PlantType_ECP);
            Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
        }
        Parameter cpass_cMERC__rMERCURYn {
            IndexDomain: (nHGCODE,PlantType_ECP);
            Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
        }
        Parameter cpass_cMERC_DS_rMERC_DSle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
        }
        Parameter cpass_cMERC_DS_rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
        }
        Parameter cpass_cMERC_DS_rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
        }
        Parameter cpass_cMERC_RS_rMERC_RSle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
        }
        Parameter cpass_cMERC_RS_rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
        }
        Parameter cpass_cMERC_RS_rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
        }
        Parameter cpass_cMVS_EFDCOSTS {
            IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cMVS_rMVSO2le {
            IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
        }
        Parameter cpass_cMVS_rSULFURCRle {
            IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
        }
        Parameter cpass_cMVSO2_EFDCOSTS {
            IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo);
            Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cMVSO2_rSULFURle {
            IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo);
            Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
        }
        Parameter cpass_cNOT_EFDCOSTS {
            IndexDomain: (OGSMSector,OGSMRegion);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cNOT_rZOGSMeq {
            IndexDomain: (OGSMRegion,OGSMSector);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
        }
        Parameter cpass_cNOT_rZOTHRge {
            IndexDomain: (OGSMRegion,OGSMSector);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
        }
        Parameter cpass_cNOT_UBOUND {
            IndexDomain: (OGSMSector,OGSMRegion);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cNOTSF_EFDCOSTS {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cNOTSF_rZOGSMeq {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
        }
        Parameter cpass_cNSR_EFDCOSTS {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cNSR_rZFLRSeq {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
        }
        Parameter cpass_cNSR_rZFLRSge {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
        }
        Parameter cpass_cNSR_rZOGSMeq {
            IndexDomain: (OGSMRegion,FuelRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
        }
        Parameter cpass_cNSX_EFDCOSTS {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cNSX_rZFLRSeq {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
        }
        Parameter cpass_cNSX_rZFLRSge {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
        }
        Parameter cpass_cNTO_EFDCOSTS {
            IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cNTO_rZOGSMeq {
            IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
        }
        Parameter cpass_cNTO_rZOTHRge {
            IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
        }
        Parameter cpass_cNTR_EFDCOSTS {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cNTR_rZFLRGeq {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cNTR_rZFLRGge {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cNTR_rZOGSMeq {
            IndexDomain: (OGSMRegion,FuelRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
        }
        Parameter cpass_cNTX_EFDCOSTS {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cNTX_rZFLRGeq {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cNTX_rZFLRGge {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cO_ALT_EFDCOSTS {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
            }
        }
        Parameter cpass_cO_ALT_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
            }
        }
        Parameter cpass_cO_ALT_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
            }
        }
        Parameter cpass_cO_ALT_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
        }
        Parameter cpass_cO_ALT_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
        }
        Parameter cpass_cO_ALT_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
            }
        }
        Parameter cpass_cO_ALT_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
            }
        }
        Parameter cpass_cO_ALT_rCBle {
            IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
            }
        }
        Parameter cpass_cO_ALT_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
            }
        }
        Parameter cpass_cO_ALT_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
        }
        Parameter cpass_cO_ALT_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
        }
        Parameter cpass_cO_ALT_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
            }
        }
        Parameter cpass_cO_ALT_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
            }
        }
        Parameter cpass_cO_ALT_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
            }
        }
        Parameter cpass_cO_ALT_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
            }
        }
        Parameter cpass_cO_ALT_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
            }
        }
        Parameter cpass_cO_ALT_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
            }
        }
        Parameter cpass_cO_ALT_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
            }
        }
        Parameter cpass_cO_ALT_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
            }
        }
        Parameter cpass_cO_ALT_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
            }
        }
        Parameter cpass_cO_ALT_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
            }
        }
        Parameter cpass_cO_ALT_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
            }
        }
        Parameter cpass_cO_ALT_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
            }
        }
        Parameter cpass_cO_ALT_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
            }
        }
        Parameter cpass_cO_ALT_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
            }
        }
        Parameter cpass_cO_ALT_rMRXge {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
            }
        }
        Parameter cpass_cO_ALT_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
            }
        }
        Parameter cpass_cO_ALT_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
        }
        Parameter cpass_cO_ALT_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
        }
        Parameter cpass_cO_ALT_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
            }
        }
        Parameter cpass_cO_ALT_UBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: UBOUND"
            }
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cO_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cO_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
        }
        Parameter cpass_cO_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
        }
        Parameter cpass_cO_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cO_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cO_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARCL(**)";
        }
        Parameter cpass_cO_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CAROG(**)";
        }
        Parameter cpass_cO_rCBle {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
        }
        Parameter cpass_cO_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QFR(**)";
        }
        Parameter cpass_cO_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cO_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cO_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
        }
        Parameter cpass_cO_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TFR(**)";
        }
        Parameter cpass_cO_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
        }
        Parameter cpass_cO_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
        }
        Parameter cpass_cO_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
        }
        Parameter cpass_cO_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
        }
        Parameter cpass_cO_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
        }
        Parameter cpass_cO_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
        }
        Parameter cpass_cO_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
        }
        Parameter cpass_cO_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQFR(**)";
        }
        Parameter cpass_cO_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
        }
        Parameter cpass_cO_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
        }
        Parameter cpass_cO_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
        }
        Parameter cpass_cO_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cO_rMRXge {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
        }
        Parameter cpass_cO_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cO_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cO_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cO_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
        }
        Parameter cpass_cO_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cOX_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cOX_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
        }
        Parameter cpass_cOX_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
        }
        Parameter cpass_cOX_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
        }
        Parameter cpass_cOX_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
        }
        Parameter cpass_cOX_rGn {
            IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
        }
        Parameter cpass_cOX_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cOX_rMRXge {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
        }
        Parameter cpass_cOX_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cOX_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cRHS_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
        }
        Parameter cpass_cRHS_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
        }
        Parameter cpass_cRHS_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cRHS_rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
        }
        Parameter cpass_cRHS_rENeq {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
        }
        Parameter cpass_cRHS_rENle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
        }
        Parameter cpass_cRHS_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
        }
        Parameter cpass_cRHS_rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
        }
        Parameter cpass_cRHS_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
        }
        Parameter cpass_cRHS_rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
        }
        Parameter cpass_cRHS_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cRHS_rMBge {
            IndexDomain: (SupplyRegion_ALT1,PlantGroup);
            Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
        }
        Parameter cpass_cRHS_rMRXge {
            IndexDomain: (PlantGroup);
            Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
        }
        Parameter cpass_cRHS_rMVSO2le {
            IndexDomain: (CoalDemandRegion);
            Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
        }
        Parameter cpass_cRHS_rP2le {
            IndexDomain: (Slice,SupplyRegion,Season);
            Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
        }
        Parameter cpass_cRHS_rSULFURCRle {
            IndexDomain: (CoalDemandRegion);
            Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
        }
        Parameter cpass_cRHS_rSULFURle {
            IndexDomain: (SO2Region);
            Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
        }
        Parameter cpass_cRHS_rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
        }
        Parameter cpass_cRHS_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
        }
        Parameter cpass_cRHS_rTLle {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
        }
        Parameter cpass_cRHS_rZOGSMeq {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
        }
        Parameter cpass_cRPUS_EFDCOSTS {
            IndexDomain: (ResidProductionStep);
            Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cRPUS_rS_RSUSle {
            IndexDomain: (ResidProductionStep);
            Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
        }
        Parameter cpass_cRTUS_EFDCOSTS {
            IndexDomain: (OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cRTUS_rCARBONn {
            IndexDomain: (CarbonRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cRTUS_rMERC_RSle {
            IndexDomain: (nHGCODE,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
        }
        Parameter cpass_cRTUS_rRSle {
            IndexDomain: (CensusRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
        }
        Parameter cpass_cRTUS_rS_RSUSle {
            IndexDomain: (OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
        }
        Parameter cpass_cRTUS_rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
        }
        Parameter cpass_cRTUS_rSULFURCRle {
            IndexDomain: (CoalDemandRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
        }
        Parameter cpass_cRTUS_rSULFURCRn {
            IndexDomain: (CoalDemandRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
        }
        Parameter cpass_cS2_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cS2_rP2_le {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
        }
        Parameter cpass_cS2_rP2le {
            IndexDomain: (Slice,SupplyRegion,Season);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
        }
        Parameter cpass_cS2_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cSC_EFDCOSTS {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cSC_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
        }
        Parameter cpass_cSC_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cSC_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cSC_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
        }
        Parameter cpass_cSPx_EFDCOSTS {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cSPx_LBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: LBOUND";
        }
        Parameter cpass_cSPx_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cSPx_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cSR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cSR_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cSR_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cSR_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
        }
        Parameter cpass_cSR_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
        }
        Parameter cpass_cSR_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cSR_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cSR_UBOUND {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cST_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cST_rPS_le {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
        }
        Parameter cpass_cST_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ST(****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cSULF_EFDCOSTS {
            IndexDomain: (PlantType_ECP,SO2Region);
            Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cSULF_rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region);
            Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
        }
        Parameter cpass_cSULF_rSULFURle {
            IndexDomain: (SO2Region,PlantType_ECP);
            Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
        }
        Parameter cpass_cSULF_rSULFURn {
            IndexDomain: (SO2Region,PlantType_ECP);
            Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
        }
        Parameter cpass_cT_STOCK__rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
        }
        Parameter cpass_cT_STOCK__rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
        }
        Parameter cpass_cT_STOCK__rSULFURn {
            IndexDomain: (SO2Region);
            Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
        }
        Parameter cpass_cT_STOCK__UBOUND {
            Text: "OML Columns: T_STOCK_ and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cTC_EFDCOSTS {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cTC_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
        }
        Parameter cpass_cTC_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cTC_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
        }
        Parameter cpass_cTR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cTR_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cTR_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cTR_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
        }
        Parameter cpass_cTR_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
        }
        Parameter cpass_cTR_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cTR_rTLle {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
        }
        Parameter cpass_cTR_UBOUND {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cU_ALT_EFDCOSTS {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
            }
        }
        Parameter cpass_cU_ALT_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
            }
        }
        Parameter cpass_cU_ALT_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
            }
        }
        Parameter cpass_cU_ALT_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
        }
        Parameter cpass_cU_ALT_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
        }
        Parameter cpass_cU_ALT_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
            }
        }
        Parameter cpass_cU_ALT_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
            }
        }
        Parameter cpass_cU_ALT_rCBle {
            IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
            }
        }
        Parameter cpass_cU_ALT_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
            }
        }
        Parameter cpass_cU_ALT_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
        }
        Parameter cpass_cU_ALT_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
        }
        Parameter cpass_cU_ALT_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
            }
        }
        Parameter cpass_cU_ALT_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
            }
        }
        Parameter cpass_cU_ALT_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
            }
        }
        Parameter cpass_cU_ALT_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
            }
        }
        Parameter cpass_cU_ALT_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
            }
        }
        Parameter cpass_cU_ALT_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
            }
        }
        Parameter cpass_cU_ALT_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
            }
        }
        Parameter cpass_cU_ALT_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
            }
        }
        Parameter cpass_cU_ALT_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
            }
        }
        Parameter cpass_cU_ALT_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
            }
        }
        Parameter cpass_cU_ALT_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
            }
        }
        Parameter cpass_cU_ALT_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
            }
        }
        Parameter cpass_cU_ALT_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
            }
        }
        Parameter cpass_cU_ALT_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
            }
        }
        Parameter cpass_cU_ALT_rMRXge {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
            }
        }
        Parameter cpass_cU_ALT_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
            }
        }
        Parameter cpass_cU_ALT_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
        }
        Parameter cpass_cU_ALT_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
        }
        Parameter cpass_cU_ALT_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
            }
        }
        Parameter cpass_cU_ALT_UBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: UBOUND"
            }
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cU_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cU_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
        }
        Parameter cpass_cU_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
        }
        Parameter cpass_cU_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cU_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
        }
        Parameter cpass_cU_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARCL(**)";
        }
        Parameter cpass_cU_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CAROG(**)";
        }
        Parameter cpass_cU_rCBle {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
        }
        Parameter cpass_cU_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QFR(**)";
        }
        Parameter cpass_cU_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cU_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
        }
        Parameter cpass_cU_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
        }
        Parameter cpass_cU_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TFR(**)";
        }
        Parameter cpass_cU_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
        }
        Parameter cpass_cU_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
        }
        Parameter cpass_cU_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
        }
        Parameter cpass_cU_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
        }
        Parameter cpass_cU_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
        }
        Parameter cpass_cU_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
        }
        Parameter cpass_cU_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
        }
        Parameter cpass_cU_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQFR(**)";
        }
        Parameter cpass_cU_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
        }
        Parameter cpass_cU_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
        }
        Parameter cpass_cU_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
        }
        Parameter cpass_cU_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cU_rMRXge {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
        }
        Parameter cpass_cU_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cU_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cU_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
        }
        Parameter cpass_cU_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
        }
        Parameter cpass_cU_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
        Parameter cpass_cUX_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
        }
        Parameter cpass_cUX_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
        }
        Parameter cpass_cUX_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
        }
        Parameter cpass_cUX_rGn {
            IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
        }
        Parameter cpass_cUX_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
        }
        Parameter cpass_cUX_rMRXge {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
        }
        Parameter cpass_cUX_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
        }
        Parameter cpass_cUX_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: UBOUND";
            Range: nonnegative;
            Default: inf;
        }
    }
    DeclarationSection check_parameter_declare {
        Parameter cdiff_cACISPLY_EFDCOSTS {
            IndexDomain: (numACI);
            Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cACISPLY_EFDCOSTS(numACI) -
                     cpass_cACISPLY_EFDCOSTS(numACI) )
                ! /$ ccalc_cACISPLY_EFDCOSTS(numACI) *100
            }
        }
        Parameter cdiff_cACISPLY_rACICSTle {
            IndexDomain: (numACI);
            Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
            Definition: {
                   ( ccalc_cACISPLY_rACICSTle(numACI) -
                     cpass_cACISPLY_rACICSTle(numACI) )
                ! /$ ccalc_cACISPLY_rACICSTle(numACI) *100
            }
        }
        Parameter cdiff_cB_EFDCOSTS {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
            Definition: {
                   ( ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
            Definition: {
                   ( ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rCARBONle {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rCARBONn {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rCARSEQn {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQ(**)";
            Definition: {
                   ( ccalc_cB_rCARSEQn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rCARSEQn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rCARSEQn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rCFGn {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
            Definition: {
                   ( ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rCLle {
            IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
            Definition: {
                   ( ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rDSle {
            IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
            Definition: {
                   ( ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rNGle {
            IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
            Definition: {
                   ( ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rRSle {
            IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
            Definition: {
                   ( ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cB_rS_WD_allle {
            IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
            Definition: {
                   ( ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) -
                     cpass_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) )
                ! /$ ccalc_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *100
            }
        }
        Parameter cdiff_cBCTLN_LBOUND {
            IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) -
                     cpass_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) )
                ! /$ ccalc_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) *100
            }
        }
        Parameter cdiff_cBCTLN_rELNOX0le {
            IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
            Definition: {
                   ( ccalc_cBCTLN_rELNOX0le(INOXP,CoalDemandRegion_ALT1,GenerationSeason) -
                     cpass_cBCTLN_rELNOX0le(INOXP,CoalDemandRegion_ALT1,GenerationSeason) )
                ! /$ ccalc_cBCTLN_rELNOX0le(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *100
            }
        }
        Parameter cdiff_cBCTLN_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,CoalDemandRegion_ALT1,GenerationSeason);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)(**)";
            Definition: {
                   ( ccalc_cBCTLN_rELNOXle(INOXP,PlantType_ECP,CoalDemandRegion_ALT1,GenerationSeason) -
                     cpass_cBCTLN_rELNOXle(INOXP,PlantType_ECP,CoalDemandRegion_ALT1,GenerationSeason) )
                ! /$ ccalc_cBCTLN_rELNOXle(INOXP,PlantType_ECP,CoalDemandRegion_ALT1,GenerationSeason) *100
            }
        }
        Parameter cdiff_cBCTLN_UBOUND {
            IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> inf
                  and cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) <> inf ) then
                   ( ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) -
                     cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) )
                ! /$ ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) *100
                elseif ( ccalc_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) = inf ) then
                        inf
                elseif ( cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cBiomassOtherUsage_LBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType);
            Text: "OML Columns: B(**)(**)(**)X and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) -
                     cpass_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) )
                ! /$ ccalc_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) *100
            }
        }
        Parameter cdiff_cBiomassOtherUsage_rS_WD_typele {
            IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector);
            Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
            Definition: {
                   ( ccalc_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) -
                     cpass_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) )
                ! /$ ccalc_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) *100
            }
        }
        Parameter cdiff_cBiomassOtherUsage_UBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType);
            Text: "OML Columns: B(**)(**)(**)X and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> inf
                  and cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) <> inf ) then
                   ( ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) -
                     cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) )
                ! /$ ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) *100
                elseif ( ccalc_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) = inf ) then
                        inf
                elseif ( cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cBP_type_EFDCOSTS {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) -
                     cpass_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) )
                ! /$ ccalc_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
            }
        }
        Parameter cdiff_cBP_type_rS_WD_allle {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
            Definition: {
                   ( ccalc_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) -
                     cpass_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) )
                ! /$ ccalc_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
            }
        }
        Parameter cdiff_cBP_type_rS_WD_typele {
            IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
            Definition: {
                   ( ccalc_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) -
                     cpass_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) )
                ! /$ ccalc_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) *100
            }
        }
        Parameter cdiff_cBP_type_UBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf
                  and cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) <> inf ) then
                   ( ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) -
                     cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) )
                ! /$ ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *100
                elseif ( ccalc_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) = inf ) then
                        inf
                elseif ( cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cC_Z_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
                     cpass_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
                ! /$ ccalc_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
            }
        }
        Parameter cdiff_cC_Z_rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
            Definition: {
                   ( ccalc_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
                     cpass_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
                ! /$ ccalc_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
            }
        }
        Parameter cdiff_cCARBNK_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cCARBNK_EFDCOSTS(CarbonRegion) -
                     cpass_cCARBNK_EFDCOSTS(CarbonRegion) )
                ! /$ ccalc_cCARBNK_EFDCOSTS(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARBNK_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARBNK_rCARBONABeq(CarbonRegion) -
                     cpass_cCARBNK_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCARBNK_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARBNK_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARBNK_rCARBONABn(CarbonRegion) -
                     cpass_cCARBNK_rCARBONABn(CarbonRegion) )
                ! /$ ccalc_cCARBNK_rCARBONABn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARBNK_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARBNK_UBOUND(CarbonRegion) <> inf
                  and cpass_cCARBNK_UBOUND(CarbonRegion) <> inf ) then
                   ( ccalc_cCARBNK_UBOUND(CarbonRegion) -
                     cpass_cCARBNK_UBOUND(CarbonRegion) )
                ! /$ ccalc_cCARBNK_UBOUND(CarbonRegion) *100
                elseif ( ccalc_cCARBNK_UBOUND(CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCARBNK_UBOUND(CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARBONOT_LBOUND {
            Text: "OML Columns: CARBONOT and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCARBONOT_LBOUND -
                     cpass_cCARBONOT_LBOUND )
                ! /$ ccalc_cCARBONOT_LBOUND *100
            }
        }
        Parameter cdiff_cCARBONOT_rCARBONn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBONOT and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARBONOT_rCARBONn(CarbonRegion) -
                     cpass_cCARBONOT_rCARBONn(CarbonRegion) )
                ! /$ ccalc_cCARBONOT_rCARBONn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARBONOT_UBOUND {
            Text: "OML Columns: CARBONOT and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARBONOT_UBOUND <> inf
                  and cpass_cCARBONOT_UBOUND <> inf ) then
                   ( ccalc_cCARBONOT_UBOUND -
                     cpass_cCARBONOT_UBOUND )
                ! /$ ccalc_cCARBONOT_UBOUND *100
                elseif ( ccalc_cCARBONOT_UBOUND = inf ) then
                        inf
                elseif ( cpass_cCARBONOT_UBOUND = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARDM_LBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) -
                     cpass_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) )
                ! /$ ccalc_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARDM_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) -
                     cpass_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) )
                ! /$ ccalc_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *100
            }
        }
        Parameter cdiff_cCARDM_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) -
                     cpass_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) )
                ! /$ ccalc_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *100
            }
        }
        Parameter cdiff_cCARDM_UBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf
                  and cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf ) then
                   ( ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) -
                     cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) )
                ! /$ ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) *100
                elseif ( ccalc_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARECR_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cCARECR_EFDCOSTS(CarbonRegion) -
                     cpass_cCARECR_EFDCOSTS(CarbonRegion) )
                ! /$ ccalc_cCARECR_EFDCOSTS(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARECR_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARECR_rCARBONle(CarbonRegion) -
                     cpass_cCARECR_rCARBONle(CarbonRegion) )
                ! /$ ccalc_cCARECR_rCARBONle(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARECR_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARECR(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARECR_UBOUND(CarbonRegion) <> inf
                  and cpass_cCARECR_UBOUND(CarbonRegion) <> inf ) then
                   ( ccalc_cCARECR_UBOUND(CarbonRegion) -
                     cpass_cCARECR_UBOUND(CarbonRegion) )
                ! /$ ccalc_cCARECR_UBOUND(CarbonRegion) *100
                elseif ( ccalc_cCARECR_UBOUND(CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCARECR_UBOUND(CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARESC_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cCARESC_EFDCOSTS(CarbonRegion) -
                     cpass_cCARESC_EFDCOSTS(CarbonRegion) )
                ! /$ ccalc_cCARESC_EFDCOSTS(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARESC_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARESC_rCARBONABeq(CarbonRegion) -
                     cpass_cCARESC_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCARESC_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARESC_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARESC_rCARBONABn(CarbonRegion) -
                     cpass_cCARESC_rCARBONABn(CarbonRegion) )
                ! /$ ccalc_cCARESC_rCARBONABn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARESC_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARESC_rCARBONle(CarbonRegion) -
                     cpass_cCARESC_rCARBONle(CarbonRegion) )
                ! /$ ccalc_cCARESC_rCARBONle(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARFUE_LBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCARFUE_LBOUND(CarbonRegion) -
                     cpass_cCARFUE_LBOUND(CarbonRegion) )
                ! /$ ccalc_cCARFUE_LBOUND(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARFUE_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARFUE_rCARBONABeq(CarbonRegion) -
                     cpass_cCARFUE_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCARFUE_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARFUE_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARFUE_rCARBONABn(CarbonRegion) -
                     cpass_cCARFUE_rCARBONABn(CarbonRegion) )
                ! /$ ccalc_cCARFUE_rCARBONABn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARFUE_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARFUE_UBOUND(CarbonRegion) <> inf
                  and cpass_cCARFUE_UBOUND(CarbonRegion) <> inf ) then
                   ( ccalc_cCARFUE_UBOUND(CarbonRegion) -
                     cpass_cCARFUE_UBOUND(CarbonRegion) )
                ! /$ ccalc_cCARFUE_UBOUND(CarbonRegion) *100
                elseif ( ccalc_cCARFUE_UBOUND(CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCARFUE_UBOUND(CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARIM_LBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) -
                     cpass_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) )
                ! /$ ccalc_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARIM_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) -
                     cpass_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) )
                ! /$ ccalc_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *100
            }
        }
        Parameter cdiff_cCARIM_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) -
                     cpass_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) )
                ! /$ ccalc_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *100
            }
        }
        Parameter cdiff_cCARIM_UBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf
                  and cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) <> inf ) then
                   ( ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) -
                     cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) )
                ! /$ ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) *100
                elseif ( ccalc_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARIND_LBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCARIND_LBOUND(CarbonRegion) -
                     cpass_cCARIND_LBOUND(CarbonRegion) )
                ! /$ ccalc_cCARIND_LBOUND(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARIND_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARIND_rCARBONABeq(CarbonRegion) -
                     cpass_cCARIND_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCARIND_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARIND_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARIND_rCARBONABn(CarbonRegion) -
                     cpass_cCARIND_rCARBONABn(CarbonRegion) )
                ! /$ ccalc_cCARIND_rCARBONABn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARIND_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARIND_UBOUND(CarbonRegion) <> inf
                  and cpass_cCARIND_UBOUND(CarbonRegion) <> inf ) then
                   ( ccalc_cCARIND_UBOUND(CarbonRegion) -
                     cpass_cCARIND_UBOUND(CarbonRegion) )
                ! /$ ccalc_cCARIND_UBOUND(CarbonRegion) *100
                elseif ( ccalc_cCARIND_UBOUND(CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCARIND_UBOUND(CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARLIM_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cCARLIM_EFDCOSTS(CarbonRegion) -
                     cpass_cCARLIM_EFDCOSTS(CarbonRegion) )
                ! /$ ccalc_cCARLIM_EFDCOSTS(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARLIM_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARLIM_rCARBONABeq(CarbonRegion) -
                     cpass_cCARLIM_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCARLIM_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARLIM_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARLIM_rCARBONle(CarbonRegion) -
                     cpass_cCARLIM_rCARBONle(CarbonRegion) )
                ! /$ ccalc_cCARLIM_rCARBONle(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARLIM_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARLIM_UBOUND(CarbonRegion) <> inf
                  and cpass_cCARLIM_UBOUND(CarbonRegion) <> inf ) then
                   ( ccalc_cCARLIM_UBOUND(CarbonRegion) -
                     cpass_cCARLIM_UBOUND(CarbonRegion) )
                ! /$ ccalc_cCARLIM_UBOUND(CarbonRegion) *100
                elseif ( ccalc_cCARLIM_UBOUND(CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCARLIM_UBOUND(CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCAROFF_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cCAROFF_EFDCOSTS(CarbonRegion) -
                     cpass_cCAROFF_EFDCOSTS(CarbonRegion) )
                ! /$ ccalc_cCAROFF_EFDCOSTS(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCAROFF_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCAROFF_rCARBONABeq(CarbonRegion) -
                     cpass_cCAROFF_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCAROFF_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCAROFF_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCAROFF_rCARBONABn(CarbonRegion) -
                     cpass_cCAROFF_rCARBONABn(CarbonRegion) )
                ! /$ ccalc_cCAROFF_rCARBONABn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCAROFF_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCAROFF_rCARBONle(CarbonRegion) -
                     cpass_cCAROFF_rCARBONle(CarbonRegion) )
                ! /$ ccalc_cCAROFF_rCARBONle(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCAROFF_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCAROFF_UBOUND(CarbonRegion) <> inf
                  and cpass_cCAROFF_UBOUND(CarbonRegion) <> inf ) then
                   ( ccalc_cCAROFF_UBOUND(CarbonRegion) -
                     cpass_cCAROFF_UBOUND(CarbonRegion) )
                ! /$ ccalc_cCAROFF_UBOUND(CarbonRegion) *100
                elseif ( ccalc_cCAROFF_UBOUND(CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCAROFF_UBOUND(CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCAROTH_LBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCAROTH_LBOUND(CarbonRegion) -
                     cpass_cCAROTH_LBOUND(CarbonRegion) )
                ! /$ ccalc_cCAROTH_LBOUND(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCAROTH_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCAROTH_rCARBONABeq(CarbonRegion) -
                     cpass_cCAROTH_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCAROTH_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCAROTH_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCAROTH_rCARBONABn(CarbonRegion) -
                     cpass_cCAROTH_rCARBONABn(CarbonRegion) )
                ! /$ ccalc_cCAROTH_rCARBONABn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCAROTH_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCAROTH_UBOUND(CarbonRegion) <> inf
                  and cpass_cCAROTH_UBOUND(CarbonRegion) <> inf ) then
                   ( ccalc_cCAROTH_UBOUND(CarbonRegion) -
                     cpass_cCAROTH_UBOUND(CarbonRegion) )
                ! /$ ccalc_cCAROTH_UBOUND(CarbonRegion) *100
                elseif ( ccalc_cCAROTH_UBOUND(CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCAROTH_UBOUND(CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARREF_LBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCARREF_LBOUND(CarbonRegion) -
                     cpass_cCARREF_LBOUND(CarbonRegion) )
                ! /$ ccalc_cCARREF_LBOUND(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARREF_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARREF_rCARBONABeq(CarbonRegion) -
                     cpass_cCARREF_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCARREF_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARREF_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARREF_rCARBONABn(CarbonRegion) -
                     cpass_cCARREF_rCARBONABn(CarbonRegion) )
                ! /$ ccalc_cCARREF_rCARBONABn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARREF_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARREF_UBOUND(CarbonRegion) <> inf
                  and cpass_cCARREF_UBOUND(CarbonRegion) <> inf ) then
                   ( ccalc_cCARREF_UBOUND(CarbonRegion) -
                     cpass_cCARREF_UBOUND(CarbonRegion) )
                ! /$ ccalc_cCARREF_UBOUND(CarbonRegion) *100
                elseif ( ccalc_cCARREF_UBOUND(CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCARREF_UBOUND(CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARRSV_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cCARRSV_EFDCOSTS(CarbonRegion) -
                     cpass_cCARRSV_EFDCOSTS(CarbonRegion) )
                ! /$ ccalc_cCARRSV_EFDCOSTS(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARRSV_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARRSV_rCARBONABeq(CarbonRegion) -
                     cpass_cCARRSV_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCARRSV_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARRSV_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARRSV_rCARBONABn(CarbonRegion) -
                     cpass_cCARRSV_rCARBONABn(CarbonRegion) )
                ! /$ ccalc_cCARRSV_rCARBONABn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARRSV_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARRSV_rCARBONle(CarbonRegion) -
                     cpass_cCARRSV_rCARBONle(CarbonRegion) )
                ! /$ ccalc_cCARRSV_rCARBONle(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARRSV_UBOUND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCARRSV_UBOUND(CarbonRegion) <> inf
                  and cpass_cCARRSV_UBOUND(CarbonRegion) <> inf ) then
                   ( ccalc_cCARRSV_UBOUND(CarbonRegion) -
                     cpass_cCARRSV_UBOUND(CarbonRegion) )
                ! /$ ccalc_cCARRSV_UBOUND(CarbonRegion) *100
                elseif ( ccalc_cCARRSV_UBOUND(CarbonRegion) = inf ) then
                        inf
                elseif ( cpass_cCARRSV_UBOUND(CarbonRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCARUTL_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARUTL_rCARBONABeq(CarbonRegion) -
                     cpass_cCARUTL_rCARBONABeq(CarbonRegion) )
                ! /$ ccalc_cCARUTL_rCARBONABeq(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARUTL_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
            Definition: {
                   ( ccalc_cCARUTL_rCARBONABn(CarbonRegion) -
                     cpass_cCARUTL_rCARBONABn(CarbonRegion) )
                ! /$ ccalc_cCARUTL_rCARBONABn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARUTL_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARUTL_rCARBONle(CarbonRegion) -
                     cpass_cCARUTL_rCARBONle(CarbonRegion) )
                ! /$ ccalc_cCARUTL_rCARBONle(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCARUTL_rCARBONn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCARUTL_rCARBONn(CarbonRegion) -
                     cpass_cCARUTL_rCARBONn(CarbonRegion) )
                ! /$ ccalc_cCARUTL_rCARBONn(CarbonRegion) *100
            }
        }
        Parameter cdiff_cCMNR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: CM(**)(**)NR and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cCMNR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
                     cpass_cCMNR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
                ! /$ ccalc_cCMNR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
            }
        }
        Parameter cdiff_cCMNR_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: CM(**)(**)NR and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cCMNR_rCO2QNRle(SupplyRegion_ALT2,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
                     cpass_cCMNR_rCO2QNRle(SupplyRegion_ALT2,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
                ! /$ ccalc_cCMNR_rCO2QNRle(SupplyRegion_ALT2,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
            }
        }
        Parameter cdiff_cCoalOtherUsage_LBOUND {
            IndexDomain: (CoalSupplyCurve);
            Text: "OML Columns: CP(**)OTXX and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCoalOtherUsage_LBOUND(CoalSupplyCurve) -
                     cpass_cCoalOtherUsage_LBOUND(CoalSupplyCurve) )
                ! /$ ccalc_cCoalOtherUsage_LBOUND(CoalSupplyCurve) *100
            }
        }
        Parameter cdiff_cCoalOtherUsage_rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType);
            Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
            Definition: {
                   ( ccalc_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) -
                     cpass_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) )
                ! /$ ccalc_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) *100
            }
        }
        Parameter cdiff_cCoalOtherUsage_UBOUND {
            IndexDomain: (CoalSupplyCurve);
            Text: "OML Columns: CP(**)OTXX and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) <> inf
                  and cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) <> inf ) then
                   ( ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) -
                     cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) )
                ! /$ ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) *100
                elseif ( ccalc_cCoalOtherUsage_UBOUND(CoalSupplyCurve) = inf ) then
                        inf
                elseif ( cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCONCLB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONCLB(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCONCLB_LBOUND(SupplyRegion_ALT2) -
                     cpass_cCONCLB_LBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cCONCLB_LBOUND(SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cCONCLB_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
            Definition: {
                   ( ccalc_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) -
                     cpass_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) )
                ! /$ ccalc_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cCONCLB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONCLB(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) <> inf
                  and cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) <> inf ) then
                   ( ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) -
                     cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) *100
                elseif ( ccalc_cCONCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                        inf
                elseif ( cpass_cCONCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCONNGB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONNGB(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cCONNGB_LBOUND(SupplyRegion_ALT2) -
                     cpass_cCONNGB_LBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cCONNGB_LBOUND(SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cCONNGB_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
            Definition: {
                   ( ccalc_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) -
                     cpass_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) )
                ! /$ ccalc_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cCONNGB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONNGB(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) <> inf
                  and cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) <> inf ) then
                   ( ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) -
                     cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) *100
                elseif ( ccalc_cCONNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                        inf
                elseif ( cpass_cCONNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCP_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) -
                     cpass_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) )
                ! /$ ccalc_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep) *100
            }
        }
        Parameter cdiff_cCP_rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
            Definition: {
                   ( ccalc_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) -
                     cpass_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) )
                ! /$ ccalc_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) *100
            }
        }
        Parameter cdiff_cCP_UBOUND {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Text: "OML Columns: CP(**)(**)(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf
                  and cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) <> inf ) then
                   ( ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) -
                     cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) )
                ! /$ ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) *100
                elseif ( ccalc_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) = inf ) then
                        inf
                elseif ( cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cCT_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) -
                     cpass_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_rACICSTle {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
            Definition: {
                   ( ccalc_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) -
                     cpass_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_rACIOMCSTn {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
            Definition: {
                   ( ccalc_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) -
                     cpass_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_rACIRMVXXn {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
            Definition: {
                   ( ccalc_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) -
                     cpass_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_rCARBONn {
            IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cCT_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) -
                     cpass_cCT_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_rCLle {
            IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
            Definition: {
                   ( ccalc_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) -
                     cpass_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) )
                ! /$ ccalc_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) *100
            }
        }
        Parameter cdiff_cCT_rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
            Definition: {
                   ( ccalc_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,numACI) -
                     cpass_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,numACI) )
                ! /$ ccalc_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,numACI) *100
            }
        }
        Parameter cdiff_cCT_rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
            Definition: {
                   ( ccalc_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI) -
                     cpass_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_rMERC_le {
            IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
            Definition: {
                   ( ccalc_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) -
                     cpass_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) )
                ! /$ ccalc_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) *100
            }
        }
        Parameter cdiff_cCT_rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
            Definition: {
                   ( ccalc_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,numACI) -
                     cpass_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
            Definition: {
                   ( ccalc_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) -
                     cpass_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) )
                ! /$ ccalc_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) *100
            }
        }
        Parameter cdiff_cCT_rSULFURCRle {
            IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
            Definition: {
                   ( ccalc_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) -
                     cpass_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_rSULFURCRn {
            IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
            Definition: {
                   ( ccalc_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) -
                     cpass_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
            Definition: {
                   ( ccalc_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI) -
                     cpass_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI) *100
            }
        }
        Parameter cdiff_cCT_UBOUND {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) <> inf
                  and cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) <> inf ) then
                   ( ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) -
                     cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) )
                ! /$ ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *100
                elseif ( ccalc_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) = inf ) then
                        inf
                elseif ( cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cD_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) -
                     cpass_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_LBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cD_LBOUND(PlantGroup,Season,OperatingMode) -
                     cpass_cD_LBOUND(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_LBOUND(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            Definition: {
                   ( ccalc_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CAROG(**)";
            Definition: {
                   ( ccalc_cD_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QFR(**)";
            Definition: {
                   ( ccalc_cD_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
            Definition: {
                   ( ccalc_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TFR(**)";
            Definition: {
                   ( ccalc_cD_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
            Definition: {
                   ( ccalc_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQFR(**)";
            Definition: {
                   ( ccalc_cD_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
            Definition: {
                   ( ccalc_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
                     cpass_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
                ! /$ ccalc_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
            }
        }
        Parameter cdiff_cD_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) <> inf
                  and cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
                   ( ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) -
                     cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) *100
                elseif ( ccalc_cD_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                        inf
                elseif ( cpass_cD_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cDPUS_EFDCOSTS {
            IndexDomain: (DistillateProductionStep);
            Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cDPUS_EFDCOSTS(DistillateProductionStep) -
                     cpass_cDPUS_EFDCOSTS(DistillateProductionStep) )
                ! /$ ccalc_cDPUS_EFDCOSTS(DistillateProductionStep) *100
            }
        }
        Parameter cdiff_cDPUS_rS_DSUSle {
            IndexDomain: (DistillateProductionStep);
            Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
            Definition: {
                   ( ccalc_cDPUS_rS_DSUSle(DistillateProductionStep) -
                     cpass_cDPUS_rS_DSUSle(DistillateProductionStep) )
                ! /$ ccalc_cDPUS_rS_DSUSle(DistillateProductionStep) *100
            }
        }
        Parameter cdiff_cDPVCP_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: DPVCP(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cDPVCP_LBOUND(SupplyRegion_ALT2) -
                     cpass_cDPVCP_LBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cDPVCP_LBOUND(SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cDPVCP_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
            Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
            Definition: {
                   ( ccalc_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) -
                     cpass_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) )
                ! /$ ccalc_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) *100
            }
        }
        Parameter cdiff_cDPVCP_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
            Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
            Definition: {
                   ( ccalc_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) -
                     cpass_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) )
                ! /$ ccalc_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) *100
            }
        }
        Parameter cdiff_cDPVCP_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: DPVCP(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) <> inf
                  and cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) <> inf ) then
                   ( ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) -
                     cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) *100
                elseif ( ccalc_cDPVCP_UBOUND(SupplyRegion_ALT2) = inf ) then
                        inf
                elseif ( cpass_cDPVCP_UBOUND(SupplyRegion_ALT2) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cDTUS_EFDCOSTS {
            IndexDomain: (OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cDTUS_EFDCOSTS(OilRegion) -
                     cpass_cDTUS_EFDCOSTS(OilRegion) )
                ! /$ ccalc_cDTUS_EFDCOSTS(OilRegion) *100
            }
        }
        Parameter cdiff_cDTUS_rCARBONn {
            IndexDomain: (CarbonRegion,OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cDTUS_rCARBONn(CarbonRegion,OilRegion) -
                     cpass_cDTUS_rCARBONn(CarbonRegion,OilRegion) )
                ! /$ ccalc_cDTUS_rCARBONn(CarbonRegion,OilRegion) *100
            }
        }
        Parameter cdiff_cDTUS_rDSle {
            IndexDomain: (CensusRegion,OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
            Definition: {
                   ( ccalc_cDTUS_rDSle(CensusRegion,OilRegion) -
                     cpass_cDTUS_rDSle(CensusRegion,OilRegion) )
                ! /$ ccalc_cDTUS_rDSle(CensusRegion,OilRegion) *100
            }
        }
        Parameter cdiff_cDTUS_rMERC_DSle {
            IndexDomain: (nHGCODE,OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
            Definition: {
                   ( ccalc_cDTUS_rMERC_DSle(nHGCODE,OilRegion) -
                     cpass_cDTUS_rMERC_DSle(nHGCODE,OilRegion) )
                ! /$ ccalc_cDTUS_rMERC_DSle(nHGCODE,OilRegion) *100
            }
        }
        Parameter cdiff_cDTUS_rS_DSUSle {
            IndexDomain: (OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
            Definition: {
                   ( ccalc_cDTUS_rS_DSUSle(OilRegion) -
                     cpass_cDTUS_rS_DSUSle(OilRegion) )
                ! /$ ccalc_cDTUS_rS_DSUSle(OilRegion) *100
            }
        }
        Parameter cdiff_cDX_EFDCOSTS {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) -
                     cpass_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) )
                ! /$ ccalc_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
            }
        }
        Parameter cdiff_cDX_rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
            Definition: {
                   ( ccalc_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) -
                     cpass_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) )
                ! /$ ccalc_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
            }
        }
        Parameter cdiff_cELNOX_rELNOX0le {
            IndexDomain: (INOXP,PlantType_ECP);
            Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
            Definition: {
                   ( ccalc_cELNOX_rELNOX0le(INOXP,PlantType_ECP) -
                     cpass_cELNOX_rELNOX0le(INOXP,PlantType_ECP) )
                ! /$ ccalc_cELNOX_rELNOX0le(INOXP,PlantType_ECP) *100
            }
        }
        Parameter cdiff_cELNOX_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP);
            Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
            Definition: {
                   ( ccalc_cELNOX_rELNOXle(INOXP,PlantType_ECP) -
                     cpass_cELNOX_rELNOXle(INOXP,PlantType_ECP) )
                ! /$ ccalc_cELNOX_rELNOXle(INOXP,PlantType_ECP) *100
            }
        }
        Parameter cdiff_cES_EFDCOSTS {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) -
                     cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cES_EFDCOSTS(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cES_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cES_rLDge(SupplyRegion,Season,Slice) -
                     cpass_cES_rLDge(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cES_rLDge(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cES_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ES(****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cES_UBOUND(SupplyRegion,Season,Slice) <> inf
                  and cpass_cES_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
                   ( ccalc_cES_UBOUND(SupplyRegion,Season,Slice) -
                     cpass_cES_UBOUND(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cES_UBOUND(SupplyRegion,Season,Slice) *100
                elseif ( ccalc_cES_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                        inf
                elseif ( cpass_cES_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cESCNOX_EFDCOSTS {
            IndexDomain: (INOXP);
            Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cESCNOX_EFDCOSTS(INOXP) -
                     cpass_cESCNOX_EFDCOSTS(INOXP) )
                ! /$ ccalc_cESCNOX_EFDCOSTS(INOXP) *100
            }
        }
        Parameter cdiff_cESCNOX_rELNOX0le {
            IndexDomain: (INOXP);
            Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
            Definition: {
                   ( ccalc_cESCNOX_rELNOX0le(INOXP) -
                     cpass_cESCNOX_rELNOX0le(INOXP) )
                ! /$ ccalc_cESCNOX_rELNOX0le(INOXP) *100
            }
        }
        Parameter cdiff_cF_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cF_EFDCOSTS(PlantGroup,Season,Slice) -
                     cpass_cF_EFDCOSTS(PlantGroup,Season,Slice) )
                ! /$ ccalc_cF_EFDCOSTS(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cF_rENeq {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
            Definition: {
                   ( ccalc_cF_rENeq(PlantGroup,Season,Slice) -
                     cpass_cF_rENeq(PlantGroup,Season,Slice) )
                ! /$ ccalc_cF_rENeq(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cF_rENle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
            Definition: {
                   ( ccalc_cF_rENle(PlantGroup,Season,Slice) -
                     cpass_cF_rENle(PlantGroup,Season,Slice) )
                ! /$ ccalc_cF_rENle(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cF_rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
            Definition: {
                   ( ccalc_cF_rFle(PlantGroup,Season,Slice) -
                     cpass_cF_rFle(PlantGroup,Season,Slice) )
                ! /$ ccalc_cF_rFle(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cF_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: {
                   ( ccalc_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
                     cpass_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
                ! /$ ccalc_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cF_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: {
                   ( ccalc_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
                     cpass_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
                ! /$ ccalc_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cF_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cF_rPS_le {
            IndexDomain: (SupplyRegion,Season,PlantGroup,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
            Definition: {
                   ( ccalc_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) -
                     cpass_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) )
                ! /$ ccalc_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *100
            }
        }
        Parameter cdiff_cF_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cF_UBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cF_UBOUND(PlantGroup,Season,Slice) <> inf
                  and cpass_cF_UBOUND(PlantGroup,Season,Slice) <> inf ) then
                   ( ccalc_cF_UBOUND(PlantGroup,Season,Slice) -
                     cpass_cF_UBOUND(PlantGroup,Season,Slice) )
                ! /$ ccalc_cF_UBOUND(PlantGroup,Season,Slice) *100
                elseif ( ccalc_cF_UBOUND(PlantGroup,Season,Slice) = inf ) then
                        inf
                elseif ( cpass_cF_UBOUND(PlantGroup,Season,Slice) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cG_LBOUND {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "OML Columns: G(*)CGTRAD and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cG_LBOUND(SupplyRegion_ALT1) -
                     cpass_cG_LBOUND(SupplyRegion_ALT1) )
                ! /$ ccalc_cG_LBOUND(SupplyRegion_ALT1) *100
            }
        }
        Parameter cdiff_cG_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1);
            Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) -
                     cpass_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) )
                ! /$ ccalc_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) *100
            }
        }
        Parameter cdiff_cG_UBOUND {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "OML Columns: G(*)CGTRAD and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cG_UBOUND(SupplyRegion_ALT1) <> inf
                  and cpass_cG_UBOUND(SupplyRegion_ALT1) <> inf ) then
                   ( ccalc_cG_UBOUND(SupplyRegion_ALT1) -
                     cpass_cG_UBOUND(SupplyRegion_ALT1) )
                ! /$ ccalc_cG_UBOUND(SupplyRegion_ALT1) *100
                elseif ( ccalc_cG_UBOUND(SupplyRegion_ALT1) = inf ) then
                        inf
                elseif ( cpass_cG_UBOUND(SupplyRegion_ALT1) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cGEESNR_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: G(**)EESNR and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cGEESNR_LBOUND(SupplyRegion_ALT2) -
                     cpass_cGEESNR_LBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cGEESNR_LBOUND(SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cGEESNR_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: G(**)EESNR and OML Rows: CO2RNR(**)";
            Definition: {
                   ( ccalc_cGEESNR_rCO2RNRn(SupplyRegion_ALT2) -
                     cpass_cGEESNR_rCO2RNRn(SupplyRegion_ALT2) )
                ! /$ ccalc_cGEESNR_rCO2RNRn(SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cGEESNR_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: G(**)EESNR and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cGEESNR_UBOUND(SupplyRegion_ALT2) <> inf
                  and cpass_cGEESNR_UBOUND(SupplyRegion_ALT2) <> inf ) then
                   ( ccalc_cGEESNR_UBOUND(SupplyRegion_ALT2) -
                     cpass_cGEESNR_UBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cGEESNR_UBOUND(SupplyRegion_ALT2) *100
                elseif ( ccalc_cGEESNR_UBOUND(SupplyRegion_ALT2) = inf ) then
                        inf
                elseif ( cpass_cGEESNR_UBOUND(SupplyRegion_ALT2) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cGENCLB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENCLB(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cGENCLB_LBOUND(SupplyRegion_ALT2) -
                     cpass_cGENCLB_LBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cGENCLB_LBOUND(SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cGENCLB_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
            Definition: {
                   ( ccalc_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) -
                     cpass_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) )
                ! /$ ccalc_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cGENCLB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENCLB(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) <> inf
                  and cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) <> inf ) then
                   ( ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) -
                     cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) *100
                elseif ( ccalc_cGENCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                        inf
                elseif ( cpass_cGENCLB_UBOUND(SupplyRegion_ALT2) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cGENNGB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENNGB(**) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cGENNGB_LBOUND(SupplyRegion_ALT2) -
                     cpass_cGENNGB_LBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cGENNGB_LBOUND(SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cGENNGB_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
            Definition: {
                   ( ccalc_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) -
                     cpass_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) )
                ! /$ ccalc_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cGENNGB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENNGB(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) <> inf
                  and cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) <> inf ) then
                   ( ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) -
                     cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) )
                ! /$ ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) *100
                elseif ( ccalc_cGENNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                        inf
                elseif ( cpass_cGENNGB_UBOUND(SupplyRegion_ALT2) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cGPUS_EFDCOSTS {
            IndexDomain: (GasProductionStep);
            Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cGPUS_EFDCOSTS(GasProductionStep) -
                     cpass_cGPUS_EFDCOSTS(GasProductionStep) )
                ! /$ ccalc_cGPUS_EFDCOSTS(GasProductionStep) *100
            }
        }
        Parameter cdiff_cGPUS_rS_NGUSle {
            IndexDomain: (GasProductionStep);
            Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
            Definition: {
                   ( ccalc_cGPUS_rS_NGUSle(GasProductionStep) -
                     cpass_cGPUS_rS_NGUSle(GasProductionStep) )
                ! /$ ccalc_cGPUS_rS_NGUSle(GasProductionStep) *100
            }
        }
        Parameter cdiff_cGPUS_UBOUND {
            IndexDomain: (GasProductionStep);
            Text: "OML Columns: GPUS(**) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cGPUS_UBOUND(GasProductionStep) <> inf
                  and cpass_cGPUS_UBOUND(GasProductionStep) <> inf ) then
                   ( ccalc_cGPUS_UBOUND(GasProductionStep) -
                     cpass_cGPUS_UBOUND(GasProductionStep) )
                ! /$ ccalc_cGPUS_UBOUND(GasProductionStep) *100
                elseif ( ccalc_cGPUS_UBOUND(GasProductionStep) = inf ) then
                        inf
                elseif ( cpass_cGPUS_UBOUND(GasProductionStep) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cGTUS_EFDCOSTS {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cGTUS_EFDCOSTS(GasRegion,GasSeason) -
                     cpass_cGTUS_EFDCOSTS(GasRegion,GasSeason) )
                ! /$ ccalc_cGTUS_EFDCOSTS(GasRegion,GasSeason) *100
            }
        }
        Parameter cdiff_cGTUS_rCARBONn {
            IndexDomain: (CarbonRegion,GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cGTUS_rCARBONn(CarbonRegion,GasRegion,GasSeason) -
                     cpass_cGTUS_rCARBONn(CarbonRegion,GasRegion,GasSeason) )
                ! /$ ccalc_cGTUS_rCARBONn(CarbonRegion,GasRegion,GasSeason) *100
            }
        }
        Parameter cdiff_cGTUS_rNGle {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
            Definition: {
                   ( ccalc_cGTUS_rNGle(GasRegion,GasSeason) -
                     cpass_cGTUS_rNGle(GasRegion,GasSeason) )
                ! /$ ccalc_cGTUS_rNGle(GasRegion,GasSeason) *100
            }
        }
        Parameter cdiff_cGTUS_rS_NGUSle {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
            Definition: {
                   ( ccalc_cGTUS_rS_NGUSle(GasRegion,GasSeason) -
                     cpass_cGTUS_rS_NGUSle(GasRegion,GasSeason) )
                ! /$ ccalc_cGTUS_rS_NGUSle(GasRegion,GasSeason) *100
            }
        }
        Parameter cdiff_cH_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cH_EFDCOSTS(PlantGroup,Season,Slice) -
                     cpass_cH_EFDCOSTS(PlantGroup,Season,Slice) )
                ! /$ ccalc_cH_EFDCOSTS(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cH_rENeq {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
            Definition: {
                   ( ccalc_cH_rENeq(PlantGroup,Season,Slice) -
                     cpass_cH_rENeq(PlantGroup,Season,Slice) )
                ! /$ ccalc_cH_rENeq(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cH_rENle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
            Definition: {
                   ( ccalc_cH_rENle(PlantGroup,Season,Slice) -
                     cpass_cH_rENle(PlantGroup,Season,Slice) )
                ! /$ ccalc_cH_rENle(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cH_rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
            Definition: {
                   ( ccalc_cH_rFle(PlantGroup,Season,Slice) -
                     cpass_cH_rFle(PlantGroup,Season,Slice) )
                ! /$ ccalc_cH_rFle(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cH_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: {
                   ( ccalc_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
                     cpass_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
                ! /$ ccalc_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cH_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: {
                   ( ccalc_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
                     cpass_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
                ! /$ ccalc_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cH_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cH_rP2_le {
            IndexDomain: (SupplyRegion,Season,PlantGroup,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
            Definition: {
                   ( ccalc_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) -
                     cpass_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) )
                ! /$ ccalc_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) *100
            }
        }
        Parameter cdiff_cH_rP2le {
            IndexDomain: (Slice,SupplyRegion,Season,PlantGroup);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
            Definition: {
                   ( ccalc_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) -
                     cpass_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) )
                ! /$ ccalc_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) *100
            }
        }
        Parameter cdiff_cH_rPS_le {
            IndexDomain: (SupplyRegion,Season,PlantGroup,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
            Definition: {
                   ( ccalc_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) -
                     cpass_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) )
                ! /$ ccalc_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *100
            }
        }
        Parameter cdiff_cH_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cH_UBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cH_UBOUND(PlantGroup,Season,Slice) <> inf
                  and cpass_cH_UBOUND(PlantGroup,Season,Slice) <> inf ) then
                   ( ccalc_cH_UBOUND(PlantGroup,Season,Slice) -
                     cpass_cH_UBOUND(PlantGroup,Season,Slice) )
                ! /$ ccalc_cH_UBOUND(PlantGroup,Season,Slice) *100
                elseif ( ccalc_cH_UBOUND(PlantGroup,Season,Slice) = inf ) then
                        inf
                elseif ( cpass_cH_UBOUND(PlantGroup,Season,Slice) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cI_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cI_EFDCOSTS(PlantGroup,Season,Slice) -
                     cpass_cI_EFDCOSTS(PlantGroup,Season,Slice) )
                ! /$ ccalc_cI_EFDCOSTS(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cI_LBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cI_LBOUND(PlantGroup,Season,Slice) -
                     cpass_cI_LBOUND(PlantGroup,Season,Slice) )
                ! /$ ccalc_cI_LBOUND(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cI_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: {
                   ( ccalc_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
                     cpass_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
                ! /$ ccalc_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cI_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: {
                   ( ccalc_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) -
                     cpass_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) )
                ! /$ ccalc_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cI_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cI_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cI_UBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cI_UBOUND(PlantGroup,Season,Slice) <> inf
                  and cpass_cI_UBOUND(PlantGroup,Season,Slice) <> inf ) then
                   ( ccalc_cI_UBOUND(PlantGroup,Season,Slice) -
                     cpass_cI_UBOUND(PlantGroup,Season,Slice) )
                ! /$ ccalc_cI_UBOUND(PlantGroup,Season,Slice) *100
                elseif ( ccalc_cI_UBOUND(PlantGroup,Season,Slice) = inf ) then
                        inf
                elseif ( cpass_cI_UBOUND(PlantGroup,Season,Slice) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cIGEN_LBOUND {
            IndexDomain: (SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cIGEN_LBOUND(SupplyRegion_ALT1,PlantType_ECP) -
                     cpass_cIGEN_LBOUND(SupplyRegion_ALT1,PlantType_ECP) )
                ! /$ ccalc_cIGEN_LBOUND(SupplyRegion_ALT1,PlantType_ECP) *100
            }
        }
        Parameter cdiff_cIGEN_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: CO2RNR(**)";
            Definition: {
                   ( ccalc_cIGEN_rCO2RNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP) -
                     cpass_cIGEN_rCO2RNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP) )
                ! /$ ccalc_cIGEN_rCO2RNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP) *100
            }
        }
        Parameter cdiff_cIGEN_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: GENQNR(**)";
            Definition: {
                   ( ccalc_cIGEN_rGENQNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP) -
                     cpass_cIGEN_rGENQNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP) )
                ! /$ ccalc_cIGEN_rGENQNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP) *100
            }
        }
        Parameter cdiff_cIGEN_UBOUND {
            IndexDomain: (SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cIGEN_UBOUND(SupplyRegion_ALT1,PlantType_ECP) <> inf
                  and cpass_cIGEN_UBOUND(SupplyRegion_ALT1,PlantType_ECP) <> inf ) then
                   ( ccalc_cIGEN_UBOUND(SupplyRegion_ALT1,PlantType_ECP) -
                     cpass_cIGEN_UBOUND(SupplyRegion_ALT1,PlantType_ECP) )
                ! /$ ccalc_cIGEN_UBOUND(SupplyRegion_ALT1,PlantType_ECP) *100
                elseif ( ccalc_cIGEN_UBOUND(SupplyRegion_ALT1,PlantType_ECP) = inf ) then
                        inf
                elseif ( cpass_cIGEN_UBOUND(SupplyRegion_ALT1,PlantType_ECP) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cJ_ALT_EFDCOSTS {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
            }
            Definition: {
                   ( ccalc_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCBle {
            IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rMRXge {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
            }
            Definition: {
                   ( ccalc_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_ALT_UBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: UBOUND"
            }
            Definition: {
                if ( ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf
                  and cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
                   ( ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
                elseif ( ccalc_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                        inf
                elseif ( cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cJ_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) -
                     cpass_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            Definition: {
                   ( ccalc_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
            Definition: {
                   ( ccalc_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARCL(**)";
            Definition: {
                   ( ccalc_cJ_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CAROG(**)";
            Definition: {
                   ( ccalc_cJ_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCBle {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
            Definition: {
                   ( ccalc_cJ_rCBle(PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCBle(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCBle(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QFR(**)";
            Definition: {
                   ( ccalc_cJ_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
            Definition: {
                   ( ccalc_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TFR(**)";
            Definition: {
                   ( ccalc_cJ_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
            Definition: {
                   ( ccalc_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
            Definition: {
                   ( ccalc_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
            Definition: {
                   ( ccalc_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
            Definition: {
                   ( ccalc_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
            Definition: {
                   ( ccalc_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
            Definition: {
                   ( ccalc_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
            Definition: {
                   ( ccalc_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQFR(**)";
            Definition: {
                   ( ccalc_cJ_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
            Definition: {
                   ( ccalc_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: {
                   ( ccalc_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: {
                   ( ccalc_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
                     cpass_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
                ! /$ ccalc_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rMRXge {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
            Definition: {
                   ( ccalc_cJ_rMRXge(PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rMRXge(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rMRXge(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
                     cpass_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
                ! /$ ccalc_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
            Definition: {
                   ( ccalc_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cJ_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) <> inf
                  and cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
                   ( ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) -
                     cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) *100
                elseif ( ccalc_cJ_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                        inf
                elseif ( cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cJX_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cJX_EFDCOSTS(PlantGroup,Season) -
                     cpass_cJX_EFDCOSTS(PlantGroup,Season) )
                ! /$ ccalc_cJX_EFDCOSTS(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cJX_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
            Definition: {
                   ( ccalc_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) -
                     cpass_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) )
                ! /$ ccalc_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cJX_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
            Definition: {
                   ( ccalc_cJX_rCBle(PlantGroup,Season) -
                     cpass_cJX_rCBle(PlantGroup,Season) )
                ! /$ ccalc_cJX_rCBle(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cJX_rGn {
            IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
            Definition: {
                   ( ccalc_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) -
                     cpass_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) )
                ! /$ ccalc_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cJX_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: GRDGN(**)(*)";
            Definition: {
                   ( ccalc_cJX_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season) -
                     cpass_cJX_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season) )
                ! /$ ccalc_cJX_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cJX_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: GRDRT(**)(*)";
            Definition: {
                   ( ccalc_cJX_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season) -
                     cpass_cJX_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season) )
                ! /$ ccalc_cJX_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cJX_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cJX_rMRXge {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
            Definition: {
                   ( ccalc_cJX_rMRXge(PlantGroup,Season) -
                     cpass_cJX_rMRXge(PlantGroup,Season) )
                ! /$ ccalc_cJX_rMRXge(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cJX_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cJX_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cJX_UBOUND(PlantGroup,Season) <> inf
                  and cpass_cJX_UBOUND(PlantGroup,Season) <> inf ) then
                   ( ccalc_cJX_UBOUND(PlantGroup,Season) -
                     cpass_cJX_UBOUND(PlantGroup,Season) )
                ! /$ ccalc_cJX_UBOUND(PlantGroup,Season) *100
                elseif ( ccalc_cJX_UBOUND(PlantGroup,Season) = inf ) then
                        inf
                elseif ( cpass_cJX_UBOUND(PlantGroup,Season) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cKX_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
                     cpass_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
                ! /$ ccalc_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
            }
        }
        Parameter cdiff_cKX_rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
            Definition: {
                   ( ccalc_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
                     cpass_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
                ! /$ ccalc_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
            }
        }
        Parameter cdiff_cMB_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cMB_EFDCOSTS(PlantGroup,Season) -
                     cpass_cMB_EFDCOSTS(PlantGroup,Season) )
                ! /$ ccalc_cMB_EFDCOSTS(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cMB_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
            Definition: {
                   ( ccalc_cMB_rCBle(PlantGroup,Season) -
                     cpass_cMB_rCBle(PlantGroup,Season) )
                ! /$ ccalc_cMB_rCBle(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cMB_rMBge {
            IndexDomain: (SupplyRegion_ALT1,PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
            Definition: {
                   ( ccalc_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) -
                     cpass_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) )
                ! /$ ccalc_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cMB_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cMB_UBOUND(PlantGroup,Season) <> inf
                  and cpass_cMB_UBOUND(PlantGroup,Season) <> inf ) then
                   ( ccalc_cMB_UBOUND(PlantGroup,Season) -
                     cpass_cMB_UBOUND(PlantGroup,Season) )
                ! /$ ccalc_cMB_UBOUND(PlantGroup,Season) *100
                elseif ( ccalc_cMB_UBOUND(PlantGroup,Season) = inf ) then
                        inf
                elseif ( cpass_cMB_UBOUND(PlantGroup,Season) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cMERC__rMERC_le {
            IndexDomain: (PlantType_ECP,nHGCODE);
            Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
            Definition: {
                   ( ccalc_cMERC__rMERC_le(PlantType_ECP,nHGCODE) -
                     cpass_cMERC__rMERC_le(PlantType_ECP,nHGCODE) )
                ! /$ ccalc_cMERC__rMERC_le(PlantType_ECP,nHGCODE) *100
            }
        }
        Parameter cdiff_cMERC__rMERCURYle {
            IndexDomain: (nHGCODE,PlantType_ECP);
            Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
            Definition: {
                   ( ccalc_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) -
                     cpass_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) )
                ! /$ ccalc_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) *100
            }
        }
        Parameter cdiff_cMERC__rMERCURYn {
            IndexDomain: (nHGCODE,PlantType_ECP);
            Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
            Definition: {
                   ( ccalc_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) -
                     cpass_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) )
                ! /$ ccalc_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) *100
            }
        }
        Parameter cdiff_cMERC_DS_rMERC_DSle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
            Definition: {
                   ( ccalc_cMERC_DS_rMERC_DSle(nHGCODE) -
                     cpass_cMERC_DS_rMERC_DSle(nHGCODE) )
                ! /$ ccalc_cMERC_DS_rMERC_DSle(nHGCODE) *100
            }
        }
        Parameter cdiff_cMERC_DS_rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
            Definition: {
                   ( ccalc_cMERC_DS_rMERCURYle(nHGCODE) -
                     cpass_cMERC_DS_rMERCURYle(nHGCODE) )
                ! /$ ccalc_cMERC_DS_rMERCURYle(nHGCODE) *100
            }
        }
        Parameter cdiff_cMERC_DS_rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
            Definition: {
                   ( ccalc_cMERC_DS_rMERCURYn(nHGCODE) -
                     cpass_cMERC_DS_rMERCURYn(nHGCODE) )
                ! /$ ccalc_cMERC_DS_rMERCURYn(nHGCODE) *100
            }
        }
        Parameter cdiff_cMERC_RS_rMERC_RSle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
            Definition: {
                   ( ccalc_cMERC_RS_rMERC_RSle(nHGCODE) -
                     cpass_cMERC_RS_rMERC_RSle(nHGCODE) )
                ! /$ ccalc_cMERC_RS_rMERC_RSle(nHGCODE) *100
            }
        }
        Parameter cdiff_cMERC_RS_rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
            Definition: {
                   ( ccalc_cMERC_RS_rMERCURYle(nHGCODE) -
                     cpass_cMERC_RS_rMERCURYle(nHGCODE) )
                ! /$ ccalc_cMERC_RS_rMERCURYle(nHGCODE) *100
            }
        }
        Parameter cdiff_cMERC_RS_rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
            Definition: {
                   ( ccalc_cMERC_RS_rMERCURYn(nHGCODE) -
                     cpass_cMERC_RS_rMERCURYn(nHGCODE) )
                ! /$ ccalc_cMERC_RS_rMERCURYn(nHGCODE) *100
            }
        }
        Parameter cdiff_cMVS_EFDCOSTS {
            IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) -
                     cpass_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) )
                ! /$ ccalc_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
            }
        }
        Parameter cdiff_cMVS_rMVSO2le {
            IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
            Definition: {
                   ( ccalc_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) -
                     cpass_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) )
                ! /$ ccalc_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
            }
        }
        Parameter cdiff_cMVS_rSULFURCRle {
            IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
            Definition: {
                   ( ccalc_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) -
                     cpass_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) )
                ! /$ ccalc_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *100
            }
        }
        Parameter cdiff_cMVSO2_EFDCOSTS {
            IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo);
            Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) -
                     cpass_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) )
                ! /$ ccalc_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo) *100
            }
        }
        Parameter cdiff_cMVSO2_rSULFURle {
            IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo);
            Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
            Definition: {
                   ( ccalc_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) -
                     cpass_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) )
                ! /$ ccalc_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) *100
            }
        }
        Parameter cdiff_cNOT_EFDCOSTS {
            IndexDomain: (OGSMSector,OGSMRegion);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) -
                     cpass_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) )
                ! /$ ccalc_cNOT_EFDCOSTS(OGSMSector,OGSMRegion) *100
            }
        }
        Parameter cdiff_cNOT_rZOGSMeq {
            IndexDomain: (OGSMRegion,OGSMSector);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
            Definition: {
                   ( ccalc_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) -
                     cpass_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) )
                ! /$ ccalc_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) *100
            }
        }
        Parameter cdiff_cNOT_rZOTHRge {
            IndexDomain: (OGSMRegion,OGSMSector);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
            Definition: {
                   ( ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) -
                     cpass_cNOT_rZOTHRge(OGSMRegion,OGSMSector) )
                ! /$ ccalc_cNOT_rZOTHRge(OGSMRegion,OGSMSector) *100
            }
        }
        Parameter cdiff_cNOT_UBOUND {
            IndexDomain: (OGSMSector,OGSMRegion);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) <> inf
                  and cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) <> inf ) then
                   ( ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) -
                     cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) )
                ! /$ ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) *100
                elseif ( ccalc_cNOT_UBOUND(OGSMSector,OGSMRegion) = inf ) then
                        inf
                elseif ( cpass_cNOT_UBOUND(OGSMSector,OGSMRegion) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cNOTSF_EFDCOSTS {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cNOTSF_EFDCOSTS(OGSMRegion) -
                     cpass_cNOTSF_EFDCOSTS(OGSMRegion) )
                ! /$ ccalc_cNOTSF_EFDCOSTS(OGSMRegion) *100
            }
        }
        Parameter cdiff_cNOTSF_rZOGSMeq {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
            Definition: {
                   ( ccalc_cNOTSF_rZOGSMeq(OGSMRegion) -
                     cpass_cNOTSF_rZOGSMeq(OGSMRegion) )
                ! /$ ccalc_cNOTSF_rZOGSMeq(OGSMRegion) *100
            }
        }
        Parameter cdiff_cNSR_EFDCOSTS {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) -
                     cpass_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) )
                ! /$ ccalc_cNSR_EFDCOSTS(FuelRegion,OGSMRegion) *100
            }
        }
        Parameter cdiff_cNSR_rZFLRSeq {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
            Definition: {
                   ( ccalc_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) -
                     cpass_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) )
                ! /$ ccalc_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) *100
            }
        }
        Parameter cdiff_cNSR_rZFLRSge {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
            Definition: {
                   ( ccalc_cNSR_rZFLRSge(FuelRegion,OGSMRegion) -
                     cpass_cNSR_rZFLRSge(FuelRegion,OGSMRegion) )
                ! /$ ccalc_cNSR_rZFLRSge(FuelRegion,OGSMRegion) *100
            }
        }
        Parameter cdiff_cNSR_rZOGSMeq {
            IndexDomain: (OGSMRegion,FuelRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
            Definition: {
                   ( ccalc_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) -
                     cpass_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) )
                ! /$ ccalc_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) *100
            }
        }
        Parameter cdiff_cNSX_EFDCOSTS {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cNSX_EFDCOSTS(FuelRegion) -
                     cpass_cNSX_EFDCOSTS(FuelRegion) )
                ! /$ ccalc_cNSX_EFDCOSTS(FuelRegion) *100
            }
        }
        Parameter cdiff_cNSX_rZFLRSeq {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
            Definition: {
                   ( ccalc_cNSX_rZFLRSeq(FuelRegion) -
                     cpass_cNSX_rZFLRSeq(FuelRegion) )
                ! /$ ccalc_cNSX_rZFLRSeq(FuelRegion) *100
            }
        }
        Parameter cdiff_cNSX_rZFLRSge {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
            Definition: {
                   ( ccalc_cNSX_rZFLRSge(FuelRegion) -
                     cpass_cNSX_rZFLRSge(FuelRegion) )
                ! /$ ccalc_cNSX_rZFLRSge(FuelRegion) *100
            }
        }
        Parameter cdiff_cNTO_EFDCOSTS {
            IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) -
                     cpass_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) )
                ! /$ ccalc_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
            }
        }
        Parameter cdiff_cNTO_rZOGSMeq {
            IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
            Definition: {
                   ( ccalc_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) -
                     cpass_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) )
                ! /$ ccalc_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
            }
        }
        Parameter cdiff_cNTO_rZOTHRge {
            IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
            Definition: {
                   ( ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) -
                     cpass_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) )
                ! /$ ccalc_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *100
            }
        }
        Parameter cdiff_cNTR_EFDCOSTS {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) -
                     cpass_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) )
                ! /$ ccalc_cNTR_EFDCOSTS(FuelRegion,OGSMRegion) *100
            }
        }
        Parameter cdiff_cNTR_rZFLRGeq {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) -
                     cpass_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) )
                ! /$ ccalc_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) *100
            }
        }
        Parameter cdiff_cNTR_rZFLRGge {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cNTR_rZFLRGge(FuelRegion,OGSMRegion) -
                     cpass_cNTR_rZFLRGge(FuelRegion,OGSMRegion) )
                ! /$ ccalc_cNTR_rZFLRGge(FuelRegion,OGSMRegion) *100
            }
        }
        Parameter cdiff_cNTR_rZOGSMeq {
            IndexDomain: (OGSMRegion,FuelRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
            Definition: {
                   ( ccalc_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) -
                     cpass_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) )
                ! /$ ccalc_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) *100
            }
        }
        Parameter cdiff_cNTX_EFDCOSTS {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cNTX_EFDCOSTS(FuelRegion) -
                     cpass_cNTX_EFDCOSTS(FuelRegion) )
                ! /$ ccalc_cNTX_EFDCOSTS(FuelRegion) *100
            }
        }
        Parameter cdiff_cNTX_rZFLRGeq {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cNTX_rZFLRGeq(FuelRegion) -
                     cpass_cNTX_rZFLRGeq(FuelRegion) )
                ! /$ ccalc_cNTX_rZFLRGeq(FuelRegion) *100
            }
        }
        Parameter cdiff_cNTX_rZFLRGge {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cNTX_rZFLRGge(FuelRegion) -
                     cpass_cNTX_rZFLRGge(FuelRegion) )
                ! /$ ccalc_cNTX_rZFLRGge(FuelRegion) *100
            }
        }
        Parameter cdiff_cO_ALT_EFDCOSTS {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
            }
            Definition: {
                   ( ccalc_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
            }
            Definition: {
                   ( ccalc_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCBle {
            IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rMRXge {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
            }
            Definition: {
                   ( ccalc_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
            }
            Definition: {
                   ( ccalc_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: {
                   ( ccalc_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: {
                   ( ccalc_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
            }
            Definition: {
                   ( ccalc_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_ALT_UBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: UBOUND"
            }
            Definition: {
                if ( ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf
                  and cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
                   ( ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
                elseif ( ccalc_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                        inf
                elseif ( cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cO_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) -
                     cpass_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            Definition: {
                   ( ccalc_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
            Definition: {
                   ( ccalc_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARCL(**)";
            Definition: {
                   ( ccalc_cO_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CAROG(**)";
            Definition: {
                   ( ccalc_cO_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCBle {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
            Definition: {
                   ( ccalc_cO_rCBle(PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCBle(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCBle(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QFR(**)";
            Definition: {
                   ( ccalc_cO_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
            Definition: {
                   ( ccalc_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TFR(**)";
            Definition: {
                   ( ccalc_cO_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
            Definition: {
                   ( ccalc_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
            Definition: {
                   ( ccalc_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
            Definition: {
                   ( ccalc_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
            Definition: {
                   ( ccalc_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
            Definition: {
                   ( ccalc_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
            Definition: {
                   ( ccalc_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
            Definition: {
                   ( ccalc_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQFR(**)";
            Definition: {
                   ( ccalc_cO_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
            Definition: {
                   ( ccalc_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: {
                   ( ccalc_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: {
                   ( ccalc_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
                     cpass_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
                ! /$ ccalc_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rMRXge {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
            Definition: {
                   ( ccalc_cO_rMRXge(PlantGroup,Season,OperatingMode) -
                     cpass_cO_rMRXge(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rMRXge(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
                     cpass_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
                ! /$ ccalc_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
            Definition: {
                   ( ccalc_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cO_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) <> inf
                  and cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
                   ( ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) -
                     cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) *100
                elseif ( ccalc_cO_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                        inf
                elseif ( cpass_cO_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cOX_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cOX_EFDCOSTS(PlantGroup,Season) -
                     cpass_cOX_EFDCOSTS(PlantGroup,Season) )
                ! /$ ccalc_cOX_EFDCOSTS(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cOX_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
            Definition: {
                   ( ccalc_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) -
                     cpass_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) )
                ! /$ ccalc_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cOX_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
            Definition: {
                   ( ccalc_cOX_rCBle(PlantGroup,Season) -
                     cpass_cOX_rCBle(PlantGroup,Season) )
                ! /$ ccalc_cOX_rCBle(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cOX_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
            Definition: {
                   ( ccalc_cOX_rELNOX0n(INOXP,PlantGroup,Season) -
                     cpass_cOX_rELNOX0n(INOXP,PlantGroup,Season) )
                ! /$ ccalc_cOX_rELNOX0n(INOXP,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cOX_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
            Definition: {
                   ( ccalc_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) -
                     cpass_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) )
                ! /$ ccalc_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cOX_rGn {
            IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
            Definition: {
                   ( ccalc_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) -
                     cpass_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) )
                ! /$ ccalc_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cOX_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cOX_rMRXge {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
            Definition: {
                   ( ccalc_cOX_rMRXge(PlantGroup,Season) -
                     cpass_cOX_rMRXge(PlantGroup,Season) )
                ! /$ ccalc_cOX_rMRXge(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cOX_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cOX_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cOX_UBOUND(PlantGroup,Season) <> inf
                  and cpass_cOX_UBOUND(PlantGroup,Season) <> inf ) then
                   ( ccalc_cOX_UBOUND(PlantGroup,Season) -
                     cpass_cOX_UBOUND(PlantGroup,Season) )
                ! /$ ccalc_cOX_UBOUND(PlantGroup,Season) *100
                elseif ( ccalc_cOX_UBOUND(PlantGroup,Season) = inf ) then
                        inf
                elseif ( cpass_cOX_UBOUND(PlantGroup,Season) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cRHS_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
            Definition: {
                   ( ccalc_cRHS_rCBle(PlantGroup,Season) -
                     cpass_cRHS_rCBle(PlantGroup,Season) )
                ! /$ ccalc_cRHS_rCBle(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cRHS_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
            Definition: {
                   ( ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) -
                     cpass_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) )
                ! /$ ccalc_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice) *100
            }
        }
        Parameter cdiff_cRHS_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cRHS_rCO2QNRle(SupplyRegion_ALT2) -
                     cpass_cRHS_rCO2QNRle(SupplyRegion_ALT2) )
                ! /$ ccalc_cRHS_rCO2QNRle(SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cRHS_rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
            Definition: {
                   ( ccalc_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) -
                     cpass_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) )
                ! /$ ccalc_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *100
            }
        }
        Parameter cdiff_cRHS_rENeq {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
            Definition: {
                   ( ccalc_cRHS_rENeq(PlantGroup,Season) -
                     cpass_cRHS_rENeq(PlantGroup,Season) )
                ! /$ ccalc_cRHS_rENeq(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cRHS_rENle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
            Definition: {
                   ( ccalc_cRHS_rENle(PlantGroup,Season) -
                     cpass_cRHS_rENle(PlantGroup,Season) )
                ! /$ ccalc_cRHS_rENle(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cRHS_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
            Definition: {
                   ( ccalc_cRHS_rEXle(SupplyRegion,Season,Slice) -
                     cpass_cRHS_rEXle(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cRHS_rEXle(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cRHS_rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
            Definition: {
                   ( ccalc_cRHS_rFle(PlantGroup,Season,Slice) -
                     cpass_cRHS_rFle(PlantGroup,Season,Slice) )
                ! /$ ccalc_cRHS_rFle(PlantGroup,Season,Slice) *100
            }
        }
        Parameter cdiff_cRHS_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
            Definition: {
                   ( ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) -
                     cpass_cRHS_rIMle(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cRHS_rIMle(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cRHS_rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
            Definition: {
                   ( ccalc_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
                     cpass_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
                ! /$ ccalc_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
            }
        }
        Parameter cdiff_cRHS_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cRHS_rLDge(SupplyRegion,Season,Slice) -
                     cpass_cRHS_rLDge(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cRHS_rLDge(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cRHS_rMBge {
            IndexDomain: (SupplyRegion_ALT1,PlantGroup);
            Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
            Definition: {
                   ( ccalc_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) -
                     cpass_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) )
                ! /$ ccalc_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup) *100
            }
        }
        Parameter cdiff_cRHS_rMRXge {
            IndexDomain: (PlantGroup);
            Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
            Definition: {
                   ( ccalc_cRHS_rMRXge(PlantGroup) -
                     cpass_cRHS_rMRXge(PlantGroup) )
                ! /$ ccalc_cRHS_rMRXge(PlantGroup) *100
            }
        }
        Parameter cdiff_cRHS_rMVSO2le {
            IndexDomain: (CoalDemandRegion);
            Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
            Definition: {
                   ( ccalc_cRHS_rMVSO2le(CoalDemandRegion) -
                     cpass_cRHS_rMVSO2le(CoalDemandRegion) )
                ! /$ ccalc_cRHS_rMVSO2le(CoalDemandRegion) *100
            }
        }
        Parameter cdiff_cRHS_rP2le {
            IndexDomain: (Slice,SupplyRegion,Season);
            Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
            Definition: {
                   ( ccalc_cRHS_rP2le(Slice,SupplyRegion,Season) -
                     cpass_cRHS_rP2le(Slice,SupplyRegion,Season) )
                ! /$ ccalc_cRHS_rP2le(Slice,SupplyRegion,Season) *100
            }
        }
        Parameter cdiff_cRHS_rSULFURCRle {
            IndexDomain: (CoalDemandRegion);
            Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
            Definition: {
                   ( ccalc_cRHS_rSULFURCRle(CoalDemandRegion) -
                     cpass_cRHS_rSULFURCRle(CoalDemandRegion) )
                ! /$ ccalc_cRHS_rSULFURCRle(CoalDemandRegion) *100
            }
        }
        Parameter cdiff_cRHS_rSULFURle {
            IndexDomain: (SO2Region);
            Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
            Definition: {
                   ( ccalc_cRHS_rSULFURle(SO2Region) -
                     cpass_cRHS_rSULFURle(SO2Region) )
                ! /$ ccalc_cRHS_rSULFURle(SO2Region) *100
            }
        }
        Parameter cdiff_cRHS_rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
            Definition: {
                   ( ccalc_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) -
                     cpass_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) )
                ! /$ ccalc_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *100
            }
        }
        Parameter cdiff_cRHS_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
            Definition: {
                   ( ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) -
                     cpass_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) )
                ! /$ ccalc_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice) *100
            }
        }
        Parameter cdiff_cRHS_rTLle {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
            Definition: {
                   ( ccalc_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
            }
        }
        Parameter cdiff_cRHS_rZOGSMeq {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
            Definition: {
                   ( ccalc_cRHS_rZOGSMeq(OGSMRegion) -
                     cpass_cRHS_rZOGSMeq(OGSMRegion) )
                ! /$ ccalc_cRHS_rZOGSMeq(OGSMRegion) *100
            }
        }
        Parameter cdiff_cRPUS_EFDCOSTS {
            IndexDomain: (ResidProductionStep);
            Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cRPUS_EFDCOSTS(ResidProductionStep) -
                     cpass_cRPUS_EFDCOSTS(ResidProductionStep) )
                ! /$ ccalc_cRPUS_EFDCOSTS(ResidProductionStep) *100
            }
        }
        Parameter cdiff_cRPUS_rS_RSUSle {
            IndexDomain: (ResidProductionStep);
            Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
            Definition: {
                   ( ccalc_cRPUS_rS_RSUSle(ResidProductionStep) -
                     cpass_cRPUS_rS_RSUSle(ResidProductionStep) )
                ! /$ ccalc_cRPUS_rS_RSUSle(ResidProductionStep) *100
            }
        }
        Parameter cdiff_cRTUS_EFDCOSTS {
            IndexDomain: (OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cRTUS_EFDCOSTS(OilRegion) -
                     cpass_cRTUS_EFDCOSTS(OilRegion) )
                ! /$ ccalc_cRTUS_EFDCOSTS(OilRegion) *100
            }
        }
        Parameter cdiff_cRTUS_rCARBONn {
            IndexDomain: (CarbonRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cRTUS_rCARBONn(CarbonRegion,OilRegion) -
                     cpass_cRTUS_rCARBONn(CarbonRegion,OilRegion) )
                ! /$ ccalc_cRTUS_rCARBONn(CarbonRegion,OilRegion) *100
            }
        }
        Parameter cdiff_cRTUS_rMERC_RSle {
            IndexDomain: (nHGCODE,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
            Definition: {
                   ( ccalc_cRTUS_rMERC_RSle(nHGCODE,OilRegion) -
                     cpass_cRTUS_rMERC_RSle(nHGCODE,OilRegion) )
                ! /$ ccalc_cRTUS_rMERC_RSle(nHGCODE,OilRegion) *100
            }
        }
        Parameter cdiff_cRTUS_rRSle {
            IndexDomain: (CensusRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
            Definition: {
                   ( ccalc_cRTUS_rRSle(CensusRegion,OilRegion) -
                     cpass_cRTUS_rRSle(CensusRegion,OilRegion) )
                ! /$ ccalc_cRTUS_rRSle(CensusRegion,OilRegion) *100
            }
        }
        Parameter cdiff_cRTUS_rS_RSUSle {
            IndexDomain: (OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
            Definition: {
                   ( ccalc_cRTUS_rS_RSUSle(OilRegion) -
                     cpass_cRTUS_rS_RSUSle(OilRegion) )
                ! /$ ccalc_cRTUS_rS_RSUSle(OilRegion) *100
            }
        }
        Parameter cdiff_cRTUS_rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
            Definition: {
                   ( ccalc_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) -
                     cpass_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) )
                ! /$ ccalc_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) *100
            }
        }
        Parameter cdiff_cRTUS_rSULFURCRle {
            IndexDomain: (CoalDemandRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
            Definition: {
                   ( ccalc_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) -
                     cpass_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) )
                ! /$ ccalc_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) *100
            }
        }
        Parameter cdiff_cRTUS_rSULFURCRn {
            IndexDomain: (CoalDemandRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
            Definition: {
                   ( ccalc_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) -
                     cpass_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) )
                ! /$ ccalc_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) *100
            }
        }
        Parameter cdiff_cS2_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cS2_rLDge(SupplyRegion,Season,Slice) -
                     cpass_cS2_rLDge(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cS2_rLDge(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cS2_rP2_le {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
            Definition: {
                   ( ccalc_cS2_rP2_le(SupplyRegion,Season,Slice) -
                     cpass_cS2_rP2_le(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cS2_rP2_le(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cS2_rP2le {
            IndexDomain: (Slice,SupplyRegion,Season);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
            Definition: {
                   ( ccalc_cS2_rP2le(Slice,SupplyRegion,Season) -
                     cpass_cS2_rP2le(Slice,SupplyRegion,Season) )
                ! /$ ccalc_cS2_rP2le(Slice,SupplyRegion,Season) *100
            }
        }
        Parameter cdiff_cS2_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) <> inf
                  and cpass_cS2_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
                   ( ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) -
                     cpass_cS2_UBOUND(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) *100
                elseif ( ccalc_cS2_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                        inf
                elseif ( cpass_cS2_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cSC_EFDCOSTS {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) -
                     cpass_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) )
                ! /$ ccalc_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
            }
        }
        Parameter cdiff_cSC_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
            Definition: {
                   ( ccalc_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) -
                     cpass_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) )
                ! /$ ccalc_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cSC_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) -
                     cpass_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) )
                ! /$ ccalc_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cSC_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) -
                     cpass_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) )
                ! /$ ccalc_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cSC_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
            Definition: {
                   ( ccalc_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) -
                     cpass_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) )
                ! /$ ccalc_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *100
            }
        }
        Parameter cdiff_cSPx_EFDCOSTS {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) -
                     cpass_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cSPx_EFDCOSTS(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cSPx_LBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: LBOUND";
            Definition: {
                   ( ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) -
                     cpass_cSPx_LBOUND(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cSPx_LBOUND(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cSPx_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cSPx_rSRge(SupplyRegion,Season,Slice) -
                     cpass_cSPx_rSRge(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cSPx_rSRge(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cSPx_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) <> inf
                  and cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
                   ( ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) -
                     cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) *100
                elseif ( ccalc_cSPx_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                        inf
                elseif ( cpass_cSPx_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cSR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
            }
        }
        Parameter cdiff_cSR_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
            }
        }
        Parameter cdiff_cSR_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
            }
        }
        Parameter cdiff_cSR_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
            Definition: {
                   ( ccalc_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
                     cpass_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
                ! /$ ccalc_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
            }
        }
        Parameter cdiff_cSR_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
            Definition: {
                   ( ccalc_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
                     cpass_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
                ! /$ ccalc_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
            }
        }
        Parameter cdiff_cSR_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
                     cpass_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
                ! /$ ccalc_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
            }
        }
        Parameter cdiff_cSR_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
                     cpass_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
                ! /$ ccalc_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
            }
        }
        Parameter cdiff_cSR_UBOUND {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
                  and cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
                   ( ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
                elseif ( ccalc_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                        inf
                elseif ( cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cST_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cST_rLDge(SupplyRegion,Season,Slice) -
                     cpass_cST_rLDge(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cST_rLDge(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cST_rPS_le {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
            Definition: {
                   ( ccalc_cST_rPS_le(SupplyRegion,Season,Slice) -
                     cpass_cST_rPS_le(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cST_rPS_le(SupplyRegion,Season,Slice) *100
            }
        }
        Parameter cdiff_cST_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ST(****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cST_UBOUND(SupplyRegion,Season,Slice) <> inf
                  and cpass_cST_UBOUND(SupplyRegion,Season,Slice) <> inf ) then
                   ( ccalc_cST_UBOUND(SupplyRegion,Season,Slice) -
                     cpass_cST_UBOUND(SupplyRegion,Season,Slice) )
                ! /$ ccalc_cST_UBOUND(SupplyRegion,Season,Slice) *100
                elseif ( ccalc_cST_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                        inf
                elseif ( cpass_cST_UBOUND(SupplyRegion,Season,Slice) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cSULF_EFDCOSTS {
            IndexDomain: (PlantType_ECP,SO2Region);
            Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) -
                     cpass_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) )
                ! /$ ccalc_cSULF_EFDCOSTS(PlantType_ECP,SO2Region) *100
            }
        }
        Parameter cdiff_cSULF_rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region);
            Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
            Definition: {
                   ( ccalc_cSULF_rSULFle(PlantType_ECP,SO2Region) -
                     cpass_cSULF_rSULFle(PlantType_ECP,SO2Region) )
                ! /$ ccalc_cSULF_rSULFle(PlantType_ECP,SO2Region) *100
            }
        }
        Parameter cdiff_cSULF_rSULFURle {
            IndexDomain: (SO2Region,PlantType_ECP);
            Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
            Definition: {
                   ( ccalc_cSULF_rSULFURle(SO2Region,PlantType_ECP) -
                     cpass_cSULF_rSULFURle(SO2Region,PlantType_ECP) )
                ! /$ ccalc_cSULF_rSULFURle(SO2Region,PlantType_ECP) *100
            }
        }
        Parameter cdiff_cSULF_rSULFURn {
            IndexDomain: (SO2Region,PlantType_ECP);
            Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
            Definition: {
                   ( ccalc_cSULF_rSULFURn(SO2Region,PlantType_ECP) -
                     cpass_cSULF_rSULFURn(SO2Region,PlantType_ECP) )
                ! /$ ccalc_cSULF_rSULFURn(SO2Region,PlantType_ECP) *100
            }
        }
        Parameter cdiff_cT_STOCK__rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
            Definition: {
                   ( ccalc_cT_STOCK__rMERCURYle(nHGCODE) -
                     cpass_cT_STOCK__rMERCURYle(nHGCODE) )
                ! /$ ccalc_cT_STOCK__rMERCURYle(nHGCODE) *100
            }
        }
        Parameter cdiff_cT_STOCK__rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
            Definition: {
                   ( ccalc_cT_STOCK__rMERCURYn(nHGCODE) -
                     cpass_cT_STOCK__rMERCURYn(nHGCODE) )
                ! /$ ccalc_cT_STOCK__rMERCURYn(nHGCODE) *100
            }
        }
        Parameter cdiff_cT_STOCK__rSULFURn {
            IndexDomain: (SO2Region);
            Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
            Definition: {
                   ( ccalc_cT_STOCK__rSULFURn(SO2Region) -
                     cpass_cT_STOCK__rSULFURn(SO2Region) )
                ! /$ ccalc_cT_STOCK__rSULFURn(SO2Region) *100
            }
        }
        Parameter cdiff_cT_STOCK__UBOUND {
            Text: "OML Columns: T_STOCK_ and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cT_STOCK__UBOUND <> inf
                  and cpass_cT_STOCK__UBOUND <> inf ) then
                   ( ccalc_cT_STOCK__UBOUND -
                     cpass_cT_STOCK__UBOUND )
                ! /$ ccalc_cT_STOCK__UBOUND *100
                elseif ( ccalc_cT_STOCK__UBOUND = inf ) then
                        inf
                elseif ( cpass_cT_STOCK__UBOUND = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cTC_EFDCOSTS {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) -
                     cpass_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) )
                ! /$ ccalc_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice) *100
            }
        }
        Parameter cdiff_cTC_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
            Definition: {
                   ( ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) -
                     cpass_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) )
                ! /$ ccalc_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cTC_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) -
                     cpass_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) )
                ! /$ ccalc_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *100
            }
        }
        Parameter cdiff_cTC_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
            Definition: {
                   ( ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) -
                     cpass_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) )
                ! /$ ccalc_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *100
            }
        }
        Parameter cdiff_cTR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
            }
        }
        Parameter cdiff_cTR_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
            }
        }
        Parameter cdiff_cTR_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
            }
        }
        Parameter cdiff_cTR_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
            Definition: {
                   ( ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
                     cpass_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
                ! /$ ccalc_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
            }
        }
        Parameter cdiff_cTR_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
            Definition: {
                   ( ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
                     cpass_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
                ! /$ ccalc_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
            }
        }
        Parameter cdiff_cTR_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) -
                     cpass_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) )
                ! /$ ccalc_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *100
            }
        }
        Parameter cdiff_cTR_rTLle {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
            Definition: {
                   ( ccalc_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
            }
        }
        Parameter cdiff_cTR_UBOUND {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf
                  and cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) <> inf ) then
                   ( ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) -
                     cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) )
                ! /$ ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *100
                elseif ( ccalc_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                        inf
                elseif ( cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cU_ALT_EFDCOSTS {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
            }
            Definition: {
                   ( ccalc_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
            }
            Definition: {
                   ( ccalc_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCBle {
            IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rMRXge {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
            }
            Definition: {
                   ( ccalc_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
            }
            Definition: {
                   ( ccalc_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: {
                   ( ccalc_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: {
                   ( ccalc_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
            }
            Definition: {
                   ( ccalc_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_ALT_UBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: UBOUND"
            }
            Definition: {
                if ( ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf
                  and cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) <> inf ) then
                   ( ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) -
                     cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) )
                ! /$ ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) *100
                elseif ( ccalc_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                        inf
                elseif ( cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cU_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) -
                     cpass_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_EFDCOSTS(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            Definition: {
                   ( ccalc_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
            Definition: {
                   ( ccalc_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: {
                   ( ccalc_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARCL(**)";
            Definition: {
                   ( ccalc_cU_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CAROG(**)";
            Definition: {
                   ( ccalc_cU_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCBle {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
            Definition: {
                   ( ccalc_cU_rCBle(PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCBle(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCBle(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QFR(**)";
            Definition: {
                   ( ccalc_cU_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: {
                   ( ccalc_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
            Definition: {
                   ( ccalc_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TFR(**)";
            Definition: {
                   ( ccalc_cU_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
            Definition: {
                   ( ccalc_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
            Definition: {
                   ( ccalc_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
            Definition: {
                   ( ccalc_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
            Definition: {
                   ( ccalc_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
            Definition: {
                   ( ccalc_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
            Definition: {
                   ( ccalc_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
            Definition: {
                   ( ccalc_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQFR(**)";
            Definition: {
                   ( ccalc_cU_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
            Definition: {
                   ( ccalc_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: {
                   ( ccalc_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: {
                   ( ccalc_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
                     cpass_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
                ! /$ ccalc_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rMRXge {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
            Definition: {
                   ( ccalc_cU_rMRXge(PlantGroup,Season,OperatingMode) -
                     cpass_cU_rMRXge(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rMRXge(PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) -
                     cpass_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) )
                ! /$ ccalc_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: {
                   ( ccalc_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
            Definition: {
                   ( ccalc_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) -
                     cpass_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *100
            }
        }
        Parameter cdiff_cU_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) <> inf
                  and cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) <> inf ) then
                   ( ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) -
                     cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) )
                ! /$ ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) *100
                elseif ( ccalc_cU_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                        inf
                elseif ( cpass_cU_UBOUND(PlantGroup,Season,OperatingMode) = inf ) then
                        -inf
                endif
            }
        }
        Parameter cdiff_cUX_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
            Definition: {
                   ( ccalc_cUX_EFDCOSTS(PlantGroup,Season) -
                     cpass_cUX_EFDCOSTS(PlantGroup,Season) )
                ! /$ ccalc_cUX_EFDCOSTS(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cUX_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
            Definition: {
                   ( ccalc_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) -
                     cpass_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) )
                ! /$ ccalc_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cUX_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
            Definition: {
                   ( ccalc_cUX_rCBle(PlantGroup,Season) -
                     cpass_cUX_rCBle(PlantGroup,Season) )
                ! /$ ccalc_cUX_rCBle(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cUX_rGn {
            IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
            Definition: {
                   ( ccalc_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) -
                     cpass_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) )
                ! /$ ccalc_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cUX_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
            Definition: {
                   ( ccalc_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cUX_rMRXge {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
            Definition: {
                   ( ccalc_cUX_rMRXge(PlantGroup,Season) -
                     cpass_cUX_rMRXge(PlantGroup,Season) )
                ! /$ ccalc_cUX_rMRXge(PlantGroup,Season) *100
            }
        }
        Parameter cdiff_cUX_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
            Definition: {
                   ( ccalc_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) -
                     cpass_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) )
                ! /$ ccalc_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *100
            }
        }
        Parameter cdiff_cUX_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: UBOUND";
            Definition: {
                if ( ccalc_cUX_UBOUND(PlantGroup,Season) <> inf
                  and cpass_cUX_UBOUND(PlantGroup,Season) <> inf ) then
                   ( ccalc_cUX_UBOUND(PlantGroup,Season) -
                     cpass_cUX_UBOUND(PlantGroup,Season) )
                ! /$ ccalc_cUX_UBOUND(PlantGroup,Season) *100
                elseif ( ccalc_cUX_UBOUND(PlantGroup,Season) = inf ) then
                        inf
                elseif ( cpass_cUX_UBOUND(PlantGroup,Season) = inf ) then
                        -inf
                endif
            }
        }
    }
    DeclarationSection coeff_parameter_declare {
        Parameter coeff_cACISPLY_EFDCOSTS {
            IndexDomain: (numACI);
            Text: "OML Columns: ACISPLY(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cACISPLY_EFDCOSTS(numACI);
        }
        Parameter coeff_cACISPLY_rACICSTle {
            IndexDomain: (numACI);
            Text: "OML Columns: ACISPLY(*) and OML Rows: ACICSTXX";
            Definition: cpass_cACISPLY_rACICSTle(numACI);
        }
        Parameter coeff_cB_EFDCOSTS {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)(*)";
            Definition: cpass_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: BTU(*)(***)X";
            Definition: cpass_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rCARBONle {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
            Definition: cpass_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rCARBONn {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARBON(**)";
            Definition: cpass_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rCARSEQn {
            IndexDomain: (CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CARSEQ(**)";
            Definition: cpass_cB_rCARSEQn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rCFGn {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CFG(*)(**)XX";
            Definition: cpass_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rCLle {
            IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: CL(**)(**)";
            Definition: cpass_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rDSle {
            IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: DS(**)";
            Definition: cpass_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rNGle {
            IndexDomain: (GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: NG(**)(*)";
            Definition: cpass_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rRSle {
            IndexDomain: (CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: RS(**)";
            Definition: cpass_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cB_rS_WD_allle {
            IndexDomain: (CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**) and OML Rows: S_WD(**)";
            Definition: cpass_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
        }
        Parameter coeff_cBCTLN_rELNOX0le {
            IndexDomain: (INOXP,CoalDemandRegion_ALT1,GenerationSeason);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX0(*)";
            Definition: cpass_cBCTLN_rELNOX0le(INOXP,CoalDemandRegion_ALT1,GenerationSeason);
        }
        Parameter coeff_cBCTLN_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,CoalDemandRegion_ALT1,GenerationSeason);
            Text: "OML Columns: B(*)CTL(*)N(*) and OML Rows: ELNOX(*)(**)";
            Definition: cpass_cBCTLN_rELNOXle(INOXP,PlantType_ECP,CoalDemandRegion_ALT1,GenerationSeason);
        }
        Parameter coeff_cBiomassOtherUsage_rS_WD_typele {
            IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassSector);
            Text: "OML Columns: B(**)(**)(**)X and OML Rows: S_WD(**)(**)";
            Definition: cpass_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector);
        }
        Parameter coeff_cBP_type_EFDCOSTS {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
        }
        Parameter coeff_cBP_type_rS_WD_allle {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)";
            Definition: cpass_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
        }
        Parameter coeff_cBP_type_rS_WD_typele {
            IndexDomain: (BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**) and OML Rows: S_WD(**)(**)";
            Definition: cpass_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep);
        }
        Parameter coeff_cC_Z_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: EFDCOSTS";
            Definition: cpass_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
        }
        Parameter coeff_cC_Z_rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: C_(**)(*)_(*)Z and OML Rows: T_(**)(*)_(*)Z";
            Definition: cpass_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
        }
        Parameter coeff_cCARBNK_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cCARBNK_EFDCOSTS(CarbonRegion);
        }
        Parameter coeff_cCARBNK_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARBNK_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCARBNK_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARBNK_rCARBONABn(CarbonRegion);
        }
        Parameter coeff_cCARBONOT_rCARBONn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBONOT and OML Rows: CARBON(**)";
            Definition: cpass_cCARBONOT_rCARBONn(CarbonRegion);
        }
        Parameter coeff_cCARDM_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1);
        }
        Parameter coeff_cCARDM_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARDM(*)(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1);
        }
        Parameter coeff_cCARECR_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARECR(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cCARECR_EFDCOSTS(CarbonRegion);
        }
        Parameter coeff_cCARECR_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARECR(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARECR_rCARBONle(CarbonRegion);
        }
        Parameter coeff_cCARESC_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cCARESC_EFDCOSTS(CarbonRegion);
        }
        Parameter coeff_cCARESC_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARESC_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCARESC_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARESC_rCARBONABn(CarbonRegion);
        }
        Parameter coeff_cCARESC_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARESC_rCARBONle(CarbonRegion);
        }
        Parameter coeff_cCARFUE_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARFUE_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCARFUE_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARFUE_rCARBONABn(CarbonRegion);
        }
        Parameter coeff_cCARIM_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1);
        }
        Parameter coeff_cCARIM_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALT1);
            Text: "OML Columns: CARIM(*)(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1);
        }
        Parameter coeff_cCARIND_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARIND_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCARIND_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARIND_rCARBONABn(CarbonRegion);
        }
        Parameter coeff_cCARLIM_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cCARLIM_EFDCOSTS(CarbonRegion);
        }
        Parameter coeff_cCARLIM_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARLIM_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCARLIM_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARLIM_rCARBONle(CarbonRegion);
        }
        Parameter coeff_cCAROFF_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cCAROFF_EFDCOSTS(CarbonRegion);
        }
        Parameter coeff_cCAROFF_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
            Definition: cpass_cCAROFF_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCAROFF_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: CARBONAB";
            Definition: cpass_cCAROFF_rCARBONABn(CarbonRegion);
        }
        Parameter coeff_cCAROFF_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCAROFF_rCARBONle(CarbonRegion);
        }
        Parameter coeff_cCAROTH_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
            Definition: cpass_cCAROTH_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCAROTH_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**) and OML Rows: CARBONAB";
            Definition: cpass_cCAROTH_rCARBONABn(CarbonRegion);
        }
        Parameter coeff_cCARREF_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARREF_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCARREF_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARREF_rCARBONABn(CarbonRegion);
        }
        Parameter coeff_cCARRSV_EFDCOSTS {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cCARRSV_EFDCOSTS(CarbonRegion);
        }
        Parameter coeff_cCARRSV_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARRSV_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCARRSV_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARRSV_rCARBONABn(CarbonRegion);
        }
        Parameter coeff_cCARRSV_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARRSV_rCARBONle(CarbonRegion);
        }
        Parameter coeff_cCARUTL_rCARBONABeq {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARUTL_rCARBONABeq(CarbonRegion);
        }
        Parameter coeff_cCARUTL_rCARBONABn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBONAB";
            Definition: cpass_cCARUTL_rCARBONABn(CarbonRegion);
        }
        Parameter coeff_cCARUTL_rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARUTL_rCARBONle(CarbonRegion);
        }
        Parameter coeff_cCARUTL_rCARBONn {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**) and OML Rows: CARBON(**)";
            Definition: cpass_cCARUTL_rCARBONn(CarbonRegion);
        }
        Parameter coeff_cCMNR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: CM(**)(**)NR and OML Rows: EFDCOSTS";
            Definition: cpass_cCMNR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter coeff_cCMNR_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: CM(**)(**)NR and OML Rows: CO2QNR(**)";
            Definition: cpass_cCMNR_rCO2QNRle(SupplyRegion_ALT2,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter coeff_cCoalOtherUsage_rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType);
            Text: "OML Columns: CP(**)OTXX and OML Rows: S_CL(**)(**)";
            Definition: cpass_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType);
        }
        Parameter coeff_cCONCLB_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: CONCLB(**) and OML Rows: CONCL(**)";
            Definition: cpass_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2);
        }
        Parameter coeff_cCONNGB_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: CONNGB(**) and OML Rows: CONNG(**)";
            Definition: cpass_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2);
        }
        Parameter coeff_cCP_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Text: "OML Columns: CP(**)(**)(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep);
        }
        Parameter coeff_cCP_rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Text: "OML Columns: CP(**)(**)(**) and OML Rows: S_CL(**)(**)";
            Definition: cpass_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep);
        }
        Parameter coeff_cCT_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
        }
        Parameter coeff_cCT_rACICSTle {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACICSTXX";
            Definition: cpass_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
        }
        Parameter coeff_cCT_rACIOMCSTn {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIOMCST";
            Definition: cpass_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
        }
        Parameter coeff_cCT_rACIRMVXXn {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: ACIRMVXX";
            Definition: cpass_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
        }
        Parameter coeff_cCT_rCARBONn {
            IndexDomain: (CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cCT_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
        }
        Parameter coeff_cCT_rCLle {
            IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: CL(**)(**)";
            Definition: cpass_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
        }
        Parameter coeff_cCT_rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: DV(*)(**)(*)XX";
            Definition: cpass_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,numACI);
        }
        Parameter coeff_cCT_rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: K_(**)(*)(*)XX";
            Definition: cpass_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
        }
        Parameter coeff_cCT_rMERC_le {
            IndexDomain: (PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: MERC_(**)(*)";
            Definition: cpass_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
        }
        Parameter coeff_cCT_rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: S_CL(**)(**)";
            Definition: cpass_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
        }
        Parameter coeff_cCT_rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULF(**)(*)";
            Definition: cpass_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI);
        }
        Parameter coeff_cCT_rSULFURCRle {
            IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
            Definition: cpass_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
        }
        Parameter coeff_cCT_rSULFURCRn {
            IndexDomain: (CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: SULFUR(**)";
            Definition: cpass_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
        }
        Parameter coeff_cCT_rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*) and OML Rows: T_(**)(*)_(*)Z";
            Definition: cpass_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI);
        }
        Parameter coeff_cD_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cD_EFDCOSTS(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            Definition: cpass_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CAROG(**)";
            Definition: cpass_cD_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QFR(**)";
            Definition: cpass_cD_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: cpass_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: cpass_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2RNR(**)";
            Definition: cpass_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TFR(**)";
            Definition: cpass_cD_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: CO2TNR(**)";
            Definition: cpass_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQFR(**)";
            Definition: cpass_cD_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: GENQNR(**)";
            Definition: cpass_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
        }
        Parameter coeff_cDPUS_EFDCOSTS {
            IndexDomain: (DistillateProductionStep);
            Text: "OML Columns: DPUS(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cDPUS_EFDCOSTS(DistillateProductionStep);
        }
        Parameter coeff_cDPUS_rS_DSUSle {
            IndexDomain: (DistillateProductionStep);
            Text: "OML Columns: DPUS(**) and OML Rows: S_DSUS";
            Definition: cpass_cDPUS_rS_DSUSle(DistillateProductionStep);
        }
        Parameter coeff_cDPVCP_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
            Text: "OML Columns: DPVCP(**) and OML Rows: GRDGN(**)(*)";
            Definition: cpass_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource);
        }
        Parameter coeff_cDPVCP_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
            Text: "OML Columns: DPVCP(**) and OML Rows: GRDRT(**)(*)";
            Definition: cpass_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource);
        }
        Parameter coeff_cDTUS_EFDCOSTS {
            IndexDomain: (OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cDTUS_EFDCOSTS(OilRegion);
        }
        Parameter coeff_cDTUS_rCARBONn {
            IndexDomain: (CarbonRegion,OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: CARBON(**)";
            Definition: cpass_cDTUS_rCARBONn(CarbonRegion,OilRegion);
        }
        Parameter coeff_cDTUS_rDSle {
            IndexDomain: (CensusRegion,OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: DS(**)";
            Definition: cpass_cDTUS_rDSle(CensusRegion,OilRegion);
        }
        Parameter coeff_cDTUS_rMERC_DSle {
            IndexDomain: (nHGCODE,OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: MERC_DS(*)";
            Definition: cpass_cDTUS_rMERC_DSle(nHGCODE,OilRegion);
        }
        Parameter coeff_cDTUS_rS_DSUSle {
            IndexDomain: (OilRegion);
            Text: "OML Columns: DTUS(**) and OML Rows: S_DSUS";
            Definition: cpass_cDTUS_rS_DSUSle(OilRegion);
        }
        Parameter coeff_cDX_EFDCOSTS {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: EFDCOSTS";
            Definition: cpass_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
        }
        Parameter coeff_cDX_rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: DX(*)(**)(*)XX and OML Rows: DV(*)(**)(*)XX";
            Definition: cpass_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
        }
        Parameter coeff_cELNOX_rELNOX0le {
            IndexDomain: (INOXP,PlantType_ECP);
            Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX0(*)";
            Definition: cpass_cELNOX_rELNOX0le(INOXP,PlantType_ECP);
        }
        Parameter coeff_cELNOX_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP);
            Text: "OML Columns: ELNOX(*)(**) and OML Rows: ELNOX(*)(**)";
            Definition: cpass_cELNOX_rELNOXle(INOXP,PlantType_ECP);
        }
        Parameter coeff_cES_EFDCOSTS {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ES(****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cES_EFDCOSTS(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cES_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ES(****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cES_rLDge(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cESCNOX_EFDCOSTS {
            IndexDomain: (INOXP);
            Text: "OML Columns: ESCNOX0(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cESCNOX_EFDCOSTS(INOXP);
        }
        Parameter coeff_cESCNOX_rELNOX0le {
            IndexDomain: (INOXP);
            Text: "OML Columns: ESCNOX0(*) and OML Rows: ELNOX0(*)";
            Definition: cpass_cESCNOX_rELNOX0le(INOXP);
        }
        Parameter coeff_cF_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cF_EFDCOSTS(PlantGroup,Season,Slice);
        }
        Parameter coeff_cF_rENeq {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
            Definition: cpass_cF_rENeq(PlantGroup,Season,Slice);
        }
        Parameter coeff_cF_rENle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: EN(*****)(*)";
            Definition: cpass_cF_rENle(PlantGroup,Season,Slice);
        }
        Parameter coeff_cF_rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
            Definition: cpass_cF_rFle(PlantGroup,Season,Slice);
        }
        Parameter coeff_cF_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: cpass_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
        }
        Parameter coeff_cF_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: cpass_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
        }
        Parameter coeff_cF_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cF_rPS_le {
            IndexDomain: (SupplyRegion,Season,PlantGroup,Slice);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: PS_(****)(*)";
            Definition: cpass_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice);
        }
        Parameter coeff_cF_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: F(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cG_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALT1);
            Text: "OML Columns: G(*)CGTRAD and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1);
        }
        Parameter coeff_cGEESNR_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: G(**)EESNR and OML Rows: CO2RNR(**)";
            Definition: cpass_cGEESNR_rCO2RNRn(SupplyRegion_ALT2);
        }
        Parameter coeff_cGENCLB_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: GENCLB(**) and OML Rows: GENCL(**)";
            Definition: cpass_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2);
        }
        Parameter coeff_cGENNGB_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,SupplyRegion_ALT2);
            Text: "OML Columns: GENNGB(**) and OML Rows: GENNG(**)";
            Definition: cpass_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2);
        }
        Parameter coeff_cGPUS_EFDCOSTS {
            IndexDomain: (GasProductionStep);
            Text: "OML Columns: GPUS(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cGPUS_EFDCOSTS(GasProductionStep);
        }
        Parameter coeff_cGPUS_rS_NGUSle {
            IndexDomain: (GasProductionStep);
            Text: "OML Columns: GPUS(**) and OML Rows: S_NGUS";
            Definition: cpass_cGPUS_rS_NGUSle(GasProductionStep);
        }
        Parameter coeff_cGTUS_EFDCOSTS {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cGTUS_EFDCOSTS(GasRegion,GasSeason);
        }
        Parameter coeff_cGTUS_rCARBONn {
            IndexDomain: (CarbonRegion,GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cGTUS_rCARBONn(CarbonRegion,GasRegion,GasSeason);
        }
        Parameter coeff_cGTUS_rNGle {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: NG(**)(*)";
            Definition: cpass_cGTUS_rNGle(GasRegion,GasSeason);
        }
        Parameter coeff_cGTUS_rS_NGUSle {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*) and OML Rows: S_NGUS";
            Definition: cpass_cGTUS_rS_NGUSle(GasRegion,GasSeason);
        }
        Parameter coeff_cH_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cH_EFDCOSTS(PlantGroup,Season,Slice);
        }
        Parameter coeff_cH_rENeq {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
            Definition: cpass_cH_rENeq(PlantGroup,Season,Slice);
        }
        Parameter coeff_cH_rENle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: EN(*****)(*)";
            Definition: cpass_cH_rENle(PlantGroup,Season,Slice);
        }
        Parameter coeff_cH_rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: F(*****)(*)(*)";
            Definition: cpass_cH_rFle(PlantGroup,Season,Slice);
        }
        Parameter coeff_cH_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: cpass_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
        }
        Parameter coeff_cH_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: cpass_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
        }
        Parameter coeff_cH_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cH_rP2_le {
            IndexDomain: (SupplyRegion,Season,PlantGroup,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2_(****)(*)";
            Definition: cpass_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice);
        }
        Parameter coeff_cH_rP2le {
            IndexDomain: (Slice,SupplyRegion,Season,PlantGroup);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: P2(*)(****)(*)";
            Definition: cpass_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup);
        }
        Parameter coeff_cH_rPS_le {
            IndexDomain: (SupplyRegion,Season,PlantGroup,Slice);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: PS_(****)(*)";
            Definition: cpass_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice);
        }
        Parameter coeff_cH_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: H(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cI_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cI_EFDCOSTS(PlantGroup,Season,Slice);
        }
        Parameter coeff_cI_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: cpass_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
        }
        Parameter coeff_cI_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: cpass_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice);
        }
        Parameter coeff_cI_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cI_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: I(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cIGEN_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: CO2RNR(**)";
            Definition: cpass_cIGEN_rCO2RNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
        }
        Parameter coeff_cIGEN_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN and OML Rows: GENQNR(**)";
            Definition: cpass_cIGEN_rGENQNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP);
        }
        Parameter coeff_cJ_ALT_EFDCOSTS {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
            }
            Definition: cpass_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
            }
            Definition: cpass_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
            }
            Definition: cpass_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: cpass_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: cpass_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
            }
            Definition: cpass_cJ_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
            }
            Definition: cpass_cJ_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCBle {
            IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
            }
            Definition: cpass_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
            }
            Definition: cpass_cJ_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: cpass_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: cpass_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
            }
            Definition: cpass_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
            }
            Definition: cpass_cJ_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
            }
            Definition: cpass_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
            }
            Definition: cpass_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
            }
            Definition: cpass_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
            }
            Definition: cpass_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
            }
            Definition: cpass_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
            }
            Definition: cpass_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
            }
            Definition: cpass_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
            }
            Definition: cpass_cJ_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
            }
            Definition: cpass_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
            }
            Definition: cpass_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
            }
            Definition: cpass_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
            }
            Definition: cpass_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rMRXge {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
            }
            Definition: cpass_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
            }
            Definition: cpass_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: cpass_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: cpass_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_ALT_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
            }
            Definition: cpass_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cJ_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            Definition: cpass_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: BTU(*)(***)X";
            Definition: cpass_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CARCL(**)";
            Definition: cpass_cJ_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CAROG(**)";
            Definition: cpass_cJ_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCBle {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CB(*****)(*)";
            Definition: cpass_cJ_rCBle(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QFR(**)";
            Definition: cpass_cJ_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: cpass_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: cpass_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2RNR(**)";
            Definition: cpass_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TFR(**)";
            Definition: cpass_cJ_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CO2TNR(**)";
            Definition: cpass_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONCL(**)";
            Definition: cpass_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: CONNG(**)";
            Definition: cpass_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX0(*)";
            Definition: cpass_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
            Definition: cpass_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENCL(**)";
            Definition: cpass_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENNG(**)";
            Definition: cpass_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQFR(**)";
            Definition: cpass_cJ_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GENQNR(**)";
            Definition: cpass_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: cpass_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: cpass_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
        }
        Parameter coeff_cJ_rMRXge {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: MR(*****)X";
            Definition: cpass_cJ_rMRXge(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
        }
        Parameter coeff_cJ_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: cpass_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: cpass_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJ_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*) and OML Rows: ZFLRS(**)_";
            Definition: cpass_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cJX_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cJX_EFDCOSTS(PlantGroup,Season);
        }
        Parameter coeff_cJX_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: BTU(*)(***)(*)";
            Definition: cpass_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
        }
        Parameter coeff_cJX_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: CB(*****)(*)";
            Definition: cpass_cJX_rCBle(PlantGroup,Season);
        }
        Parameter coeff_cJX_rGn {
            IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: G(****)(***)";
            Definition: cpass_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season);
        }
        Parameter coeff_cJX_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: GRDGN(**)(*)";
            Definition: cpass_cJX_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
        }
        Parameter coeff_cJX_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: GRDRT(**)(*)";
            Definition: cpass_cJX_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season);
        }
        Parameter coeff_cJX_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: J(*****)X(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cJX_rMRXge {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*) and OML Rows: MR(*****)X";
            Definition: cpass_cJX_rMRXge(PlantGroup,Season);
        }
        Parameter coeff_cJX_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: J(*****)X(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cKX_EFDCOSTS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: EFDCOSTS";
            Definition: cpass_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
        }
        Parameter coeff_cKX_rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: KX(**)(*)(*)XX and OML Rows: K_(**)(*)(*)XX";
            Definition: cpass_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
        }
        Parameter coeff_cMB_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cMB_EFDCOSTS(PlantGroup,Season);
        }
        Parameter coeff_cMB_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: CB(*****)(*)";
            Definition: cpass_cMB_rCBle(PlantGroup,Season);
        }
        Parameter coeff_cMB_rMBge {
            IndexDomain: (SupplyRegion_ALT1,PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*) and OML Rows: MB(*)(*****)";
            Definition: cpass_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season);
        }
        Parameter coeff_cMERC__rMERC_le {
            IndexDomain: (PlantType_ECP,nHGCODE);
            Text: "OML Columns: MERC_(**)(*) and OML Rows: MERC_(**)(*)";
            Definition: cpass_cMERC__rMERC_le(PlantType_ECP,nHGCODE);
        }
        Parameter coeff_cMERC__rMERCURYle {
            IndexDomain: (nHGCODE,PlantType_ECP);
            Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
            Definition: cpass_cMERC__rMERCURYle(nHGCODE,PlantType_ECP);
        }
        Parameter coeff_cMERC__rMERCURYn {
            IndexDomain: (nHGCODE,PlantType_ECP);
            Text: "OML Columns: MERC_(**)(*) and OML Rows: MERCURY(*)";
            Definition: cpass_cMERC__rMERCURYn(nHGCODE,PlantType_ECP);
        }
        Parameter coeff_cMERC_DS_rMERC_DSle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*) and OML Rows: MERC_DS(*)";
            Definition: cpass_cMERC_DS_rMERC_DSle(nHGCODE);
        }
        Parameter coeff_cMERC_DS_rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
            Definition: cpass_cMERC_DS_rMERCURYle(nHGCODE);
        }
        Parameter coeff_cMERC_DS_rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*) and OML Rows: MERCURY(*)";
            Definition: cpass_cMERC_DS_rMERCURYn(nHGCODE);
        }
        Parameter coeff_cMERC_RS_rMERC_RSle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*) and OML Rows: MERC_RS(*)";
            Definition: cpass_cMERC_RS_rMERC_RSle(nHGCODE);
        }
        Parameter coeff_cMERC_RS_rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
            Definition: cpass_cMERC_RS_rMERCURYle(nHGCODE);
        }
        Parameter coeff_cMERC_RS_rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*) and OML Rows: MERCURY(*)";
            Definition: cpass_cMERC_RS_rMERCURYn(nHGCODE);
        }
        Parameter coeff_cMVS_EFDCOSTS {
            IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
        }
        Parameter coeff_cMVS_rMVSO2le {
            IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**) and OML Rows: MVSO2(**)";
            Definition: cpass_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
        }
        Parameter coeff_cMVS_rSULFURCRle {
            IndexDomain: (CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**) and OML Rows: SULFUR(**)";
            Definition: cpass_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
        }
        Parameter coeff_cMVSO2_EFDCOSTS {
            IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo);
            Text: "OML Columns: MVSO2(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo);
        }
        Parameter coeff_cMVSO2_rSULFURle {
            IndexDomain: (SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo);
            Text: "OML Columns: MVSO2(*)(*) and OML Rows: SULFUR(*)";
            Definition: cpass_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo);
        }
        Parameter coeff_cNOT_EFDCOSTS {
            IndexDomain: (OGSMSector,OGSMRegion);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: EFDCOSTS";
            Definition: cpass_cNOT_EFDCOSTS(OGSMSector,OGSMRegion);
        }
        Parameter coeff_cNOT_rZOGSMeq {
            IndexDomain: (OGSMRegion,OGSMSector);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOGSM(**)_";
            Definition: cpass_cNOT_rZOGSMeq(OGSMRegion,OGSMSector);
        }
        Parameter coeff_cNOT_rZOTHRge {
            IndexDomain: (OGSMRegion,OGSMSector);
            Text: "OML Columns: NOT(**)(**)_ and OML Rows: ZOTHR(**)_";
            Definition: cpass_cNOT_rZOTHRge(OGSMRegion,OGSMSector);
        }
        Parameter coeff_cNOTSF_EFDCOSTS {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: NOTSF(**)_ and OML Rows: EFDCOSTS";
            Definition: cpass_cNOTSF_EFDCOSTS(OGSMRegion);
        }
        Parameter coeff_cNOTSF_rZOGSMeq {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: NOTSF(**)_ and OML Rows: ZOGSM(**)_";
            Definition: cpass_cNOTSF_rZOGSMeq(OGSMRegion);
        }
        Parameter coeff_cNSR_EFDCOSTS {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: EFDCOSTS";
            Definition: cpass_cNSR_EFDCOSTS(FuelRegion,OGSMRegion);
        }
        Parameter coeff_cNSR_rZFLRSeq {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
            Definition: cpass_cNSR_rZFLRSeq(FuelRegion,OGSMRegion);
        }
        Parameter coeff_cNSR_rZFLRSge {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZFLRS(**)_";
            Definition: cpass_cNSR_rZFLRSge(FuelRegion,OGSMRegion);
        }
        Parameter coeff_cNSR_rZOGSMeq {
            IndexDomain: (OGSMRegion,FuelRegion);
            Text: "OML Columns: NSR(**)(**)_ and OML Rows: ZOGSM(**)_";
            Definition: cpass_cNSR_rZOGSMeq(OGSMRegion,FuelRegion);
        }
        Parameter coeff_cNSX_EFDCOSTS {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___ and OML Rows: EFDCOSTS";
            Definition: cpass_cNSX_EFDCOSTS(FuelRegion);
        }
        Parameter coeff_cNSX_rZFLRSeq {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
            Definition: cpass_cNSX_rZFLRSeq(FuelRegion);
        }
        Parameter coeff_cNSX_rZFLRSge {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___ and OML Rows: ZFLRS(**)_";
            Definition: cpass_cNSX_rZFLRSge(FuelRegion);
        }
        Parameter coeff_cNTO_EFDCOSTS {
            IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_ and OML Rows: EFDCOSTS";
            Definition: cpass_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
        }
        Parameter coeff_cNTO_rZOGSMeq {
            IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOGSM(**)_";
            Definition: cpass_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
        }
        Parameter coeff_cNTO_rZOTHRge {
            IndexDomain: (OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_ and OML Rows: ZOTHR(**)_";
            Definition: cpass_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
        }
        Parameter coeff_cNTR_EFDCOSTS {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: EFDCOSTS";
            Definition: cpass_cNTR_EFDCOSTS(FuelRegion,OGSMRegion);
        }
        Parameter coeff_cNTR_rZFLRGeq {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
            Definition: cpass_cNTR_rZFLRGeq(FuelRegion,OGSMRegion);
        }
        Parameter coeff_cNTR_rZFLRGge {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZFLRG(**)_";
            Definition: cpass_cNTR_rZFLRGge(FuelRegion,OGSMRegion);
        }
        Parameter coeff_cNTR_rZOGSMeq {
            IndexDomain: (OGSMRegion,FuelRegion);
            Text: "OML Columns: NTR(**)(**)_ and OML Rows: ZOGSM(**)_";
            Definition: cpass_cNTR_rZOGSMeq(OGSMRegion,FuelRegion);
        }
        Parameter coeff_cNTX_EFDCOSTS {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___ and OML Rows: EFDCOSTS";
            Definition: cpass_cNTX_EFDCOSTS(FuelRegion);
        }
        Parameter coeff_cNTX_rZFLRGeq {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
            Definition: cpass_cNTX_rZFLRGeq(FuelRegion);
        }
        Parameter coeff_cNTX_rZFLRGge {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___ and OML Rows: ZFLRG(**)_";
            Definition: cpass_cNTX_rZFLRGge(FuelRegion);
        }
        Parameter coeff_cO_ALT_EFDCOSTS {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
            }
            Definition: cpass_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
            }
            Definition: cpass_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
            }
            Definition: cpass_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: cpass_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: cpass_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
            }
            Definition: cpass_cO_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
            }
            Definition: cpass_cO_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCBle {
            IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
            }
            Definition: cpass_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
            }
            Definition: cpass_cO_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: cpass_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: cpass_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
            }
            Definition: cpass_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
            }
            Definition: cpass_cO_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
            }
            Definition: cpass_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
            }
            Definition: cpass_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
            }
            Definition: cpass_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
            }
            Definition: cpass_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
            }
            Definition: cpass_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
            }
            Definition: cpass_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
            }
            Definition: cpass_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
            }
            Definition: cpass_cO_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
            }
            Definition: cpass_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
            }
            Definition: cpass_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
            }
            Definition: cpass_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
            }
            Definition: cpass_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rMRXge {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
            }
            Definition: cpass_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
            }
            Definition: cpass_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: cpass_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: cpass_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_ALT_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
            }
            Definition: cpass_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cO_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cO_EFDCOSTS(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            Definition: cpass_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: BTU(*)(***)X";
            Definition: cpass_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CARCL(**)";
            Definition: cpass_cO_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CAROG(**)";
            Definition: cpass_cO_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCBle {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CB(*****)(*)";
            Definition: cpass_cO_rCBle(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QFR(**)";
            Definition: cpass_cO_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: cpass_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: cpass_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2RNR(**)";
            Definition: cpass_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TFR(**)";
            Definition: cpass_cO_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CO2TNR(**)";
            Definition: cpass_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONCL(**)";
            Definition: cpass_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: CONNG(**)";
            Definition: cpass_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX0(*)";
            Definition: cpass_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
            Definition: cpass_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENCL(**)";
            Definition: cpass_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENNG(**)";
            Definition: cpass_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQFR(**)";
            Definition: cpass_cO_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GENQNR(**)";
            Definition: cpass_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: cpass_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: cpass_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
        }
        Parameter coeff_cO_rMRXge {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: MR(*****)X";
            Definition: cpass_cO_rMRXge(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
        }
        Parameter coeff_cO_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: cpass_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: cpass_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cO_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*) and OML Rows: ZFLRS(**)_";
            Definition: cpass_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cOX_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cOX_EFDCOSTS(PlantGroup,Season);
        }
        Parameter coeff_cOX_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: BTU(*)(***)(*)";
            Definition: cpass_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
        }
        Parameter coeff_cOX_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: CB(*****)(*)";
            Definition: cpass_cOX_rCBle(PlantGroup,Season);
        }
        Parameter coeff_cOX_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX0(*)";
            Definition: cpass_cOX_rELNOX0n(INOXP,PlantGroup,Season);
        }
        Parameter coeff_cOX_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: ELNOX(*)(**)";
            Definition: cpass_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season);
        }
        Parameter coeff_cOX_rGn {
            IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: G(****)(***)";
            Definition: cpass_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season);
        }
        Parameter coeff_cOX_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: O(*****)X(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cOX_rMRXge {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*) and OML Rows: MR(*****)X";
            Definition: cpass_cOX_rMRXge(PlantGroup,Season);
        }
        Parameter coeff_cOX_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: O(*****)X(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cRHS_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: RHSEFD and OML Rows: CB(*****)(*)";
            Definition: cpass_cRHS_rCBle(PlantGroup,Season);
        }
        Parameter coeff_cRHS_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: CNCP(*)(*)(*)(*)";
            Definition: cpass_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice);
        }
        Parameter coeff_cRHS_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: RHSEFD and OML Rows: CO2QNR(**)";
            Definition: cpass_cRHS_rCO2QNRle(SupplyRegion_ALT2);
        }
        Parameter coeff_cRHS_rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: RHSEFD and OML Rows: DV(*)(**)(*)XX";
            Definition: cpass_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
        }
        Parameter coeff_cRHS_rENeq {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
            Definition: cpass_cRHS_rENeq(PlantGroup,Season);
        }
        Parameter coeff_cRHS_rENle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: RHSEFD and OML Rows: EN(*****)(*)";
            Definition: cpass_cRHS_rENle(PlantGroup,Season);
        }
        Parameter coeff_cRHS_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: EX(****)(*)(*)";
            Definition: cpass_cRHS_rEXle(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cRHS_rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: F(*****)(*)(*)";
            Definition: cpass_cRHS_rFle(PlantGroup,Season,Slice);
        }
        Parameter coeff_cRHS_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: IM(****)(*)(*)";
            Definition: cpass_cRHS_rIMle(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cRHS_rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: RHSEFD and OML Rows: K_(**)(*)(*)XX";
            Definition: cpass_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
        }
        Parameter coeff_cRHS_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cRHS_rLDge(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cRHS_rMBge {
            IndexDomain: (SupplyRegion_ALT1,PlantGroup);
            Text: "OML Columns: RHSEFD and OML Rows: MB(*)(*****)";
            Definition: cpass_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup);
        }
        Parameter coeff_cRHS_rMRXge {
            IndexDomain: (PlantGroup);
            Text: "OML Columns: RHSEFD and OML Rows: MR(*****)X";
            Definition: cpass_cRHS_rMRXge(PlantGroup);
        }
        Parameter coeff_cRHS_rMVSO2le {
            IndexDomain: (CoalDemandRegion);
            Text: "OML Columns: RHSEFD and OML Rows: MVSO2(**)";
            Definition: cpass_cRHS_rMVSO2le(CoalDemandRegion);
        }
        Parameter coeff_cRHS_rP2le {
            IndexDomain: (Slice,SupplyRegion,Season);
            Text: "OML Columns: RHSEFD and OML Rows: P2(*)(****)(*)";
            Definition: cpass_cRHS_rP2le(Slice,SupplyRegion,Season);
        }
        Parameter coeff_cRHS_rSULFURCRle {
            IndexDomain: (CoalDemandRegion);
            Text: "OML Columns: RHSEFD and OML Rows: SULFUR(**)";
            Definition: cpass_cRHS_rSULFURCRle(CoalDemandRegion);
        }
        Parameter coeff_cRHS_rSULFURle {
            IndexDomain: (SO2Region);
            Text: "OML Columns: RHSEFD and OML Rows: SULFUR(*)";
            Definition: cpass_cRHS_rSULFURle(SO2Region);
        }
        Parameter coeff_cRHS_rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: RHSEFD and OML Rows: T_(**)(*)_(*)Z";
            Definition: cpass_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
        }
        Parameter coeff_cRHS_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: TCN(*)(**)(*)(*)";
            Definition: cpass_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice);
        }
        Parameter coeff_cRHS_rTLle {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: RHSEFD and OML Rows: TL(**)(**)(*)(*)";
            Definition: cpass_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter coeff_cRHS_rZOGSMeq {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: RHSEFD and OML Rows: ZOGSM(**)_";
            Definition: cpass_cRHS_rZOGSMeq(OGSMRegion);
        }
        Parameter coeff_cRPUS_EFDCOSTS {
            IndexDomain: (ResidProductionStep);
            Text: "OML Columns: RPUS(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cRPUS_EFDCOSTS(ResidProductionStep);
        }
        Parameter coeff_cRPUS_rS_RSUSle {
            IndexDomain: (ResidProductionStep);
            Text: "OML Columns: RPUS(**) and OML Rows: S_RSUS";
            Definition: cpass_cRPUS_rS_RSUSle(ResidProductionStep);
        }
        Parameter coeff_cRTUS_EFDCOSTS {
            IndexDomain: (OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: EFDCOSTS";
            Definition: cpass_cRTUS_EFDCOSTS(OilRegion);
        }
        Parameter coeff_cRTUS_rCARBONn {
            IndexDomain: (CarbonRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: CARBON(**)";
            Definition: cpass_cRTUS_rCARBONn(CarbonRegion,OilRegion);
        }
        Parameter coeff_cRTUS_rMERC_RSle {
            IndexDomain: (nHGCODE,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: MERC_RS(*)";
            Definition: cpass_cRTUS_rMERC_RSle(nHGCODE,OilRegion);
        }
        Parameter coeff_cRTUS_rRSle {
            IndexDomain: (CensusRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: RS(**)";
            Definition: cpass_cRTUS_rRSle(CensusRegion,OilRegion);
        }
        Parameter coeff_cRTUS_rS_RSUSle {
            IndexDomain: (OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: S_RSUS";
            Definition: cpass_cRTUS_rS_RSUSle(OilRegion);
        }
        Parameter coeff_cRTUS_rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: SULF(**)(*)";
            Definition: cpass_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion);
        }
        Parameter coeff_cRTUS_rSULFURCRle {
            IndexDomain: (CoalDemandRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
            Definition: cpass_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion);
        }
        Parameter coeff_cRTUS_rSULFURCRn {
            IndexDomain: (CoalDemandRegion,OilRegion);
            Text: "OML Columns: RTUS(**) and OML Rows: SULFUR(**)";
            Definition: cpass_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion);
        }
        Parameter coeff_cS2_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cS2_rLDge(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cS2_rP2_le {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2_(****)(*)";
            Definition: cpass_cS2_rP2_le(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cS2_rP2le {
            IndexDomain: (Slice,SupplyRegion,Season);
            Text: "OML Columns: S2(****)(*)(*) and OML Rows: P2(*)(****)(*)";
            Definition: cpass_cS2_rP2le(Slice,SupplyRegion,Season);
        }
        Parameter coeff_cSC_EFDCOSTS {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
        }
        Parameter coeff_cSC_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
            Definition: cpass_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
        }
        Parameter coeff_cSC_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
        }
        Parameter coeff_cSC_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
        }
        Parameter coeff_cSC_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
            Text: "OML Columns: SC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
            Definition: cpass_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
        }
        Parameter coeff_cSPx_EFDCOSTS {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cSPx_EFDCOSTS(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cSPx_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cSPx_rSRge(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cSR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter coeff_cSR_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter coeff_cSR_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter coeff_cSR_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
            Definition: cpass_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter coeff_cSR_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
            Definition: cpass_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter coeff_cSR_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter coeff_cSR_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: SR(**)(**)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter coeff_cST_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ST(****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cST_rLDge(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cST_rPS_le {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ST(****)(*)(*) and OML Rows: PS_(****)(*)";
            Definition: cpass_cST_rPS_le(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cSULF_EFDCOSTS {
            IndexDomain: (PlantType_ECP,SO2Region);
            Text: "OML Columns: SULF(**)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cSULF_EFDCOSTS(PlantType_ECP,SO2Region);
        }
        Parameter coeff_cSULF_rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region);
            Text: "OML Columns: SULF(**)(*) and OML Rows: SULF(**)(*)";
            Definition: cpass_cSULF_rSULFle(PlantType_ECP,SO2Region);
        }
        Parameter coeff_cSULF_rSULFURle {
            IndexDomain: (SO2Region,PlantType_ECP);
            Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
            Definition: cpass_cSULF_rSULFURle(SO2Region,PlantType_ECP);
        }
        Parameter coeff_cSULF_rSULFURn {
            IndexDomain: (SO2Region,PlantType_ECP);
            Text: "OML Columns: SULF(**)(*) and OML Rows: SULFUR(*)";
            Definition: cpass_cSULF_rSULFURn(SO2Region,PlantType_ECP);
        }
        Parameter coeff_cT_STOCK__rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
            Definition: cpass_cT_STOCK__rMERCURYle(nHGCODE);
        }
        Parameter coeff_cT_STOCK__rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: T_STOCK_ and OML Rows: MERCURY(*)";
            Definition: cpass_cT_STOCK__rMERCURYn(nHGCODE);
        }
        Parameter coeff_cT_STOCK__rSULFURn {
            IndexDomain: (SO2Region);
            Text: "OML Columns: T_STOCK_ and OML Rows: SULFUR(*)";
            Definition: cpass_cT_STOCK__rSULFURn(SO2Region);
        }
        Parameter coeff_cTC_EFDCOSTS {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
        }
        Parameter coeff_cTC_rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: CNCP(*)(*)(*)(*)";
            Definition: cpass_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2);
        }
        Parameter coeff_cTC_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2);
        }
        Parameter coeff_cTC_rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
            Text: "OML Columns: TC(*)(*)(**)(*)(*) and OML Rows: TCN(*)(**)(*)(*)";
            Definition: cpass_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep);
        }
        Parameter coeff_cTR_EFDCOSTS {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter coeff_cTR_rCARBONle {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter coeff_cTR_rCARBONn {
            IndexDomain: (CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter coeff_cTR_rEXle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: EX(****)(*)(*)";
            Definition: cpass_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter coeff_cTR_rIMle {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: IM(****)(*)(*)";
            Definition: cpass_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter coeff_cTR_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto);
        }
        Parameter coeff_cTR_rTLle {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*) and OML Rows: TL(**)(**)(*)(*)";
            Definition: cpass_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Parameter coeff_cU_ALT_EFDCOSTS {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: EFDCOSTS"
            }
            Definition: cpass_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)(*)"
            }
            Definition: cpass_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: BTU(*)(***)X"
            }
            Definition: cpass_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: cpass_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARBON(**)"
            }
            Definition: cpass_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CARCL(**)"
            }
            Definition: cpass_cU_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CAROG(**)"
            }
            Definition: cpass_cU_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCBle {
            IndexDomain: (PlantGroup,Season,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CB(*****)(*)"
            }
            Definition: cpass_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QFR(**)"
            }
            Definition: cpass_cU_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: cpass_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2QNR(**)"
            }
            Definition: cpass_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2RNR(**)"
            }
            Definition: cpass_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TFR(**)"
            }
            Definition: cpass_cU_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CO2TNR(**)"
            }
            Definition: cpass_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONCL(**)"
            }
            Definition: cpass_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: CONNG(**)"
            }
            Definition: cpass_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX0(*)"
            }
            Definition: cpass_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ELNOX(*)(**)"
            }
            Definition: cpass_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENCL(**)"
            }
            Definition: cpass_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENNG(**)"
            }
            Definition: cpass_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQFR(**)"
            }
            Definition: cpass_cU_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GENQNR(**)"
            }
            Definition: cpass_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDGN(**)(*)"
            }
            Definition: cpass_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: GRDRT(**)(*)"
            }
            Definition: cpass_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: LD(****)(*)(*)"
            }
            Definition: cpass_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rMRXge {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: MR(*****)X"
            }
            Definition: cpass_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: SR(****)(*)(*)"
            }
            Definition: cpass_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: cpass_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRG(**)_"
            }
            Definition: cpass_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_ALT_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT and OML Rows: ZFLRS(**)_"
            }
            Definition: cpass_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode);
        }
        Parameter coeff_cU_EFDCOSTS {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cU_EFDCOSTS(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)(*)";
            Definition: cpass_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: BTU(*)(***)X";
            Definition: cpass_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCARBONle {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCARBONn {
            IndexDomain: (CarbonRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARBON(**)";
            Definition: cpass_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCARCLn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CARCL(**)";
            Definition: cpass_cU_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCAROGn {
            IndexDomain: (SupplyStates,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CAROG(**)";
            Definition: cpass_cU_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCBle {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CB(*****)(*)";
            Definition: cpass_cU_rCBle(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCO2QFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QFR(**)";
            Definition: cpass_cU_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: cpass_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2QNR(**)";
            Definition: cpass_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2RNR(**)";
            Definition: cpass_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCO2TFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TFR(**)";
            Definition: cpass_cU_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CO2TNR(**)";
            Definition: cpass_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONCL(**)";
            Definition: cpass_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: CONNG(**)";
            Definition: cpass_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rELNOX0n {
            IndexDomain: (INOXP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX0(*)";
            Definition: cpass_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ELNOX(*)(**)";
            Definition: cpass_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENCL(**)";
            Definition: cpass_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENNG(**)";
            Definition: cpass_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rGENQFRn {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQFR(**)";
            Definition: cpass_cU_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GENQNR(**)";
            Definition: cpass_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDGN(**)(*)";
            Definition: cpass_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: GRDRT(**)(*)";
            Definition: cpass_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
        }
        Parameter coeff_cU_rMRXge {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: MR(*****)X";
            Definition: cpass_cU_rMRXge(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode);
        }
        Parameter coeff_cU_rZFLRGeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: cpass_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rZFLRGge {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRG(**)_";
            Definition: cpass_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cU_rZFLRSeq {
            IndexDomain: (FuelRegion,PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*) and OML Rows: ZFLRS(**)_";
            Definition: cpass_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cUX_EFDCOSTS {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: EFDCOSTS";
            Definition: cpass_cUX_EFDCOSTS(PlantGroup,Season);
        }
        Parameter coeff_cUX_rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: BTU(*)(***)(*)";
            Definition: cpass_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season);
        }
        Parameter coeff_cUX_rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: CB(*****)(*)";
            Definition: cpass_cUX_rCBle(PlantGroup,Season);
        }
        Parameter coeff_cUX_rGn {
            IndexDomain: (SupplyRegion,PlantType,PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: G(****)(***)";
            Definition: cpass_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season);
        }
        Parameter coeff_cUX_rLDge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: U(*****)X(*) and OML Rows: LD(****)(*)(*)";
            Definition: cpass_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup);
        }
        Parameter coeff_cUX_rMRXge {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*) and OML Rows: MR(*****)X";
            Definition: cpass_cUX_rMRXge(PlantGroup,Season);
        }
        Parameter coeff_cUX_rSRge {
            IndexDomain: (SupplyRegion,Season,Slice,PlantGroup);
            Text: "OML Columns: U(*****)X(*) and OML Rows: SR(****)(*)(*)";
            Definition: cpass_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup);
        }
    }
    DeclarationSection Decision_Variable_Declare {
        Variable cACISPLY {
            IndexDomain: (numACI);
            Text: "OML Columns: ACISPLY(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "total amount of activated carbon needed (pounds)";
        }
        Variable cBiomassOtherUsage {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType);
            Text: "OML Columns: B(**)(**)(**)X";
            Range: [coeff_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2, BiomassSector, BiomassType), coeff_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2, BiomassSector, BiomassType)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "biomass usage from other sectors, by coal region and biomass supply type (trill BTU)";
        }
        Parameter coeff_cBiomassOtherUsage_LBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType);
            Range: nonnegative;
            Definition: cpass_cBiomassOtherUsage_LBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType);
        }
        Parameter coeff_cBiomassOtherUsage_UBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassSector,BiomassType);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cBiomassOtherUsage_UBOUND(CoalDemandRegion_ALT2,BiomassSector,BiomassType);
        }
        Variable cBP {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType);
            Text: "OML Columns: BP(**)(**)XX";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "biomass production from coal region and biomass type (sum over steps) (trill BTU)";
        }
        Variable cBP_all {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
        }
        Variable cBP_type {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Text: "OML Columns: BP(**)(**)(**)";
            Range: [coeff_cBP_type_LBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep), coeff_cBP_type_UBOUND(CoalDemandRegion_ALT2, BiomassType, BiomassProductionStep)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "biomass production from coal region, biomass type and supply step (trill BTU)";
        }
        Parameter coeff_cBP_type_LBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Range: nonnegative;
        }
        Parameter coeff_cBP_type_UBOUND {
            IndexDomain: (CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cBP_type_UBOUND(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep);
        }
        Variable cB {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption);
            Text: "OML Columns: B(*)(***)(*)(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "fuel consumption by fuel region, plant type, season (gas only) and fuel mix (trill BTU)";
        }
        Variable cBCTLN {
            IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP);
            Text: "OML Columns: B(*)CTL(*)N(*)";
            Range: [coeff_cBCTLN_LBOUND(CoalDemandRegion_ALT1, GenerationSeason, INOXP), coeff_cBCTLN_UBOUND(CoalDemandRegion_ALT1, GenerationSeason, INOXP)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "fuel consumed by CTL plants by coal region, season and nox group (trill BTU)";
        }
        Parameter coeff_cBCTLN_LBOUND {
            IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP);
            Range: nonnegative;
            Definition: cpass_cBCTLN_LBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP);
        }
        Parameter coeff_cBCTLN_UBOUND {
            IndexDomain: (CoalDemandRegion_ALT1,GenerationSeason,INOXP);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cBCTLN_UBOUND(CoalDemandRegion_ALT1,GenerationSeason,INOXP);
        }
        Variable cC_Z {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: C_(**)(*)_(*)Z";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "coal consumed from supply curve, coal region, scrubber type (at Tier 2 premium price) (trill BTU)";
        }
        Variable cCAR {
            IndexDomain: (CarbonEmissionType,CarbonRegion);
            Text: "OML Columns: CAR(***)(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
        }
        Variable cCARBNK {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARBNK(**)";
            Range: [coeff_cCARBNK_LBOUND(CarbonRegion), coeff_cCARBNK_UBOUND(CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "use/accumulate carbon banks by carbon region (million metric tons carbon)";
        }
        Parameter coeff_cCARBNK_LBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
        }
        Parameter coeff_cCARBNK_UBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARBNK_UBOUND(CarbonRegion);
        }
        Variable cCARBONOT {
            Text: "OML Columns: CARBONOT";
            Range: [coeff_cCARBONOT_LBOUND, coeff_cCARBONOT_UBOUND];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon emissions from MSW and geothermal (million metric tons carbon)";
        }
        Parameter coeff_cCARBONOT_LBOUND {
            Range: nonnegative;
            Definition: cpass_cCARBONOT_LBOUND;
        }
        Parameter coeff_cCARBONOT_UBOUND {
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARBONOT_UBOUND;
        }
        Variable cCARDM {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARDM(*)(**)";
            Range: [coeff_cCARDM_LBOUND(SupplyRegion_ALT1, CarbonRegion), coeff_cCARDM_UBOUND(SupplyRegion_ALT1, CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon emissions from domestic imports by EMM region and carbon region (CA only) (million metric tons carbon)";
        }
        Parameter coeff_cCARDM_LBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Range: nonnegative;
            Definition: cpass_cCARDM_LBOUND(SupplyRegion_ALT1,CarbonRegion);
        }
        Parameter coeff_cCARDM_UBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARDM_UBOUND(SupplyRegion_ALT1,CarbonRegion);
        }
        Variable cCARESC {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARESC(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "escape vector for carbon constraint by carbon region (million metric tons carbon)";
        }
        Variable cCARFUE {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARFUE(**)";
            Range: [coeff_cCARFUE_LBOUND(CarbonRegion), coeff_cCARFUE_UBOUND(CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon emissions from fuel use sector by carbon region (CA only) (million metric tons carbon)";
        }
        Parameter coeff_cCARFUE_LBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Definition: cpass_cCARFUE_LBOUND(CarbonRegion);
        }
        Parameter coeff_cCARFUE_UBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARFUE_UBOUND(CarbonRegion);
        }
        Variable cCARIM {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Text: "OML Columns: CARIM(*)(**)";
            Range: [coeff_cCARIM_LBOUND(SupplyRegion_ALT1, CarbonRegion), coeff_cCARIM_UBOUND(SupplyRegion_ALT1, CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon emissions from international imports by EMM region and carbon region (CA only) (million metric tons carbon)";
        }
        Parameter coeff_cCARIM_LBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Range: nonnegative;
            Definition: cpass_cCARIM_LBOUND(SupplyRegion_ALT1,CarbonRegion);
        }
        Parameter coeff_cCARIM_UBOUND {
            IndexDomain: (SupplyRegion_ALT1,CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARIM_UBOUND(SupplyRegion_ALT1,CarbonRegion);
        }
        Variable cCARIND {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARIND(**)";
            Range: [coeff_cCARIND_LBOUND(CarbonRegion), coeff_cCARIND_UBOUND(CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon emissions from industrial sector by carbon region (CA only) (million metric tons carbon)";
        }
        Parameter coeff_cCARIND_LBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Definition: cpass_cCARIND_LBOUND(CarbonRegion);
        }
        Parameter coeff_cCARIND_UBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARIND_UBOUND(CarbonRegion);
        }
        Variable cCARLIM {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARLIM(**)";
            Range: [coeff_cCARLIM_LBOUND(CarbonRegion), coeff_cCARLIM_UBOUND(CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon limit for carbon region (million metric tons carbon)";
        }
        Parameter coeff_cCARLIM_LBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
        }
        Parameter coeff_cCARLIM_UBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARLIM_UBOUND(CarbonRegion);
        }
        Variable cCAROFF {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROFF(**)";
            Range: [coeff_cCAROFF_LBOUND(CarbonRegion), coeff_cCAROFF_UBOUND(CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon offsets used by carbon region (million metric tons carbon)";
        }
        Parameter coeff_cCAROFF_LBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
        }
        Parameter coeff_cCAROFF_UBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCAROFF_UBOUND(CarbonRegion);
        }
        Variable cCAROTH {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CAROTH(**)";
            Range: [coeff_cCAROTH_LBOUND(CarbonRegion), coeff_cCAROTH_UBOUND(CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon emissions from other sectors by carbon region (CA only) (million metric tons carbon)";
        }
        Parameter coeff_cCAROTH_LBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Definition: cpass_cCAROTH_LBOUND(CarbonRegion);
        }
        Parameter coeff_cCAROTH_UBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCAROTH_UBOUND(CarbonRegion);
        }
        Variable cCARREF {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARREF(**)";
            Range: [coeff_cCARREF_LBOUND(CarbonRegion), coeff_cCARREF_UBOUND(CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon emissions from refinery sector by carbon region (CA only) (million metric tons carbon)";
        }
        Parameter coeff_cCARREF_LBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Definition: cpass_cCARREF_LBOUND(CarbonRegion);
        }
        Parameter coeff_cCARREF_UBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARREF_UBOUND(CarbonRegion);
        }
        Variable cCARRSV {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARRSV(**)";
            Range: [coeff_cCARRSV_LBOUND(CarbonRegion), coeff_cCARRSV_UBOUND(CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon reserve allowances used by carbon region (million metric tons carbon)";
        }
        Parameter coeff_cCARRSV_LBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
        }
        Parameter coeff_cCARRSV_UBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARRSV_UBOUND(CarbonRegion);
        }
        Variable cCARECR {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARECR(**)";
            Range: [coeff_cCARECR_LBOUND(CarbonRegion), coeff_cCARECR_UBOUND(CarbonRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "carbon emissions containment reserve allowances used (RGGI only) (million metric tons carbon)";
        }
        Parameter coeff_cCARECR_LBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
        }
        Parameter coeff_cCARECR_UBOUND {
            IndexDomain: (CarbonRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCARECR_UBOUND(CarbonRegion);
        }
        Variable cCARUTL {
            IndexDomain: (CarbonRegion);
            Text: "OML Columns: CARUTL(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "accumulate carbon emissions from the utility sector by carbon region (CA only) (million metric tons carbon)";
        }
        Variable cCMNR {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto);
            Text: "OML Columns: CM(**)(**)NR";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "trade carbon emissions between EMM regions - CPP only (billion lbs CO2)";
        }
        Variable cCoalOtherUsage {
            IndexDomain: (CoalSupplyCurve);
            Text: "OML Columns: CP(**)OTXX";
            Range: [coeff_cCoalOtherUsage_LBOUND(CoalSupplyCurve), coeff_cCoalOtherUsage_UBOUND(CoalSupplyCurve)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "coal used by other sectors by supply curve (trill BTU)";
        }
        Parameter coeff_cCoalOtherUsage_LBOUND {
            IndexDomain: (CoalSupplyCurve);
            Range: nonnegative;
            Definition: cpass_cCoalOtherUsage_LBOUND(CoalSupplyCurve);
        }
        Parameter coeff_cCoalOtherUsage_UBOUND {
            IndexDomain: (CoalSupplyCurve);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCoalOtherUsage_UBOUND(CoalSupplyCurve);
        }
        Variable cCONCLB {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONCLB(**)";
            Range: [coeff_cCONCLB_LBOUND(SupplyRegion_ALT2), coeff_cCONCLB_UBOUND(SupplyRegion_ALT2)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "coal consumption by EMM region for STEO benchmarking (trill BTU)";
        }
        Parameter coeff_cCONCLB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Definition: cpass_cCONCLB_LBOUND(SupplyRegion_ALT2);
        }
        Parameter coeff_cCONCLB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCONCLB_UBOUND(SupplyRegion_ALT2);
        }
        Variable cCONNGB {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: CONNGB(**)";
            Range: [coeff_cCONNGB_LBOUND(SupplyRegion_ALT2), coeff_cCONNGB_UBOUND(SupplyRegion_ALT2)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "gas consumption by EMM region for STEO benchmarking (trill BTU)";
        }
        Parameter coeff_cCONNGB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Definition: cpass_cCONNGB_LBOUND(SupplyRegion_ALT2);
        }
        Parameter coeff_cCONNGB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCONNGB_UBOUND(SupplyRegion_ALT2);
        }
        Variable cCP {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Text: "OML Columns: CP(**)(**)(**)";
            Range: [coeff_cCP_LBOUND(CoalSupplyCurve, CoalType, CoalProductionStep), coeff_cCP_UBOUND(CoalSupplyCurve, CoalType, CoalProductionStep)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "coal production by coal supply curve, coal type, and step (trill BTU)";
        }
        Parameter coeff_cCP_LBOUND {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Range: nonnegative;
        }
        Parameter coeff_cCP_UBOUND {
            IndexDomain: (CoalSupplyCurve,CoalType,CoalProductionStep);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCP_UBOUND(CoalSupplyCurve,CoalType,CoalProductionStep);
        }
        Variable cCT {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Text: "OML Columns: CT(**)(*)(**)(*)";
            Range: [coeff_cCT_LBOUND(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP, numACI), coeff_cCT_UBOUND(CoalSupplyCurve, CoalDemandRegion_ALT1, PlantType_ECP, numACI)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "transport coal from coal supply curve to coal demand region for plant type and ACI option (trill BTU)";
        }
        Parameter coeff_cCT_LBOUND {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Range: nonnegative;
        }
        Parameter coeff_cCT_UBOUND {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cCT_UBOUND(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI);
        }
        Variable cCTLHG {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1);
            Text: "OML Columns: CTL(**)(*)HG";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "mercury emissions from CTL by coal supply curve and coal demand region (tons * 1000)";
        }
        Variable cCTLS {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,SO2Region);
            Text: "OML Columns: CTL(**)(*)S(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "SO2 emissions from CTL by coal supply curve, coal demand region and SO2 region (thousand tons)";
        }
        Variable cD {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: D(*****)(*)(*)";
            Range: [coeff_cD_LBOUND(PlantGroup, Season, OperatingMode), coeff_cD_UBOUND(PlantGroup, Season, OperatingMode)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: " distributed gen operates by plant group, season and operating mode (GW)";
        }
        Parameter coeff_cD_LBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Range: nonnegative;
            Definition: cpass_cD_LBOUND(PlantGroup,Season,OperatingMode);
        }
        Parameter coeff_cD_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cD_UBOUND(PlantGroup,Season,OperatingMode);
        }
        Variable cDPUS {
            IndexDomain: (DistillateProductionStep);
            Text: "OML Columns: DPUS(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Production of distillate oil for power sector (trillion BTU)";
        }
        Variable cDTUS {
            IndexDomain: (OilRegion);
            Text: "OML Columns: DTUS(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Transport distillate oil to oil (census) region (trillion BTU)";
        }
        Variable cDPVCP {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: DPVCP(**)";
            Range: [coeff_cDPVCP_LBOUND(SupplyRegion_ALT2), coeff_cDPVCP_UBOUND(SupplyRegion_ALT2)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Column for Distributed PV Capacity to be Excluded from Grid Resilience Rows to prevent ?double-counting?";
        }
        Parameter coeff_cDPVCP_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Definition: cpass_cDPVCP_LBOUND(SupplyRegion_ALT2);
        }
        Parameter coeff_cDPVCP_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cDPVCP_UBOUND(SupplyRegion_ALT2);
        }
        Variable cDX {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Columns: DX(*)(**)(*)XX";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Escape vector for coal diversity constraint, by coal demand region, coal plant type and coal type (subbit/lig) (trill BTU)";
        }
        Variable cELNOX {
            IndexDomain: (INOXP,PlantType_ECP);
            Text: "OML Columns: ELNOX(*)(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "accumulate NOX emissions by Nox region and plant type (thousand tons)";
        }
        Variable cES {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ES(****)(*)(*)";
            Range: [coeff_cES_LBOUND(SupplyRegion, Season, Slice), coeff_cES_UBOUND(SupplyRegion, Season, Slice)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Escape vector for the load row, by EMM region, season and slice (GW)";
        }
        Parameter coeff_cES_LBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Range: nonnegative;
        }
        Parameter coeff_cES_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cES_UBOUND(SupplyRegion,Season,Slice);
        }
        Variable cESCNOX {
            IndexDomain: (INOXP);
            Text: "OML Columns: ESCNOX0(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "accumulate NOX emissions by Nox region (thousand tons)";
        }
        Variable cF {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: F(*****)(*)(*)";
            Range: [coeff_cF_LBOUND(PlantGroup, Season, Slice), coeff_cF_UBOUND(PlantGroup, Season, Slice)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate hydro in maximum spinning reserve mode, by plant group, season and slice (GW)";
        }
        Parameter coeff_cF_LBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Range: nonnegative;
        }
        Parameter coeff_cF_UBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cF_UBOUND(PlantGroup,Season,Slice);
        }
        Variable cG {
            IndexDomain: (SupplyRegion_ALT1);
            Text: "OML Columns: G(*)CGTRAD";
            Range: [coeff_cG_LBOUND(SupplyRegion_ALT1), coeff_cG_UBOUND(SupplyRegion_ALT1)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "fixed vector for traditional cogen sales to the grid, by EMM region (GW)";
        }
        Parameter coeff_cG_LBOUND {
            IndexDomain: (SupplyRegion_ALT1);
            Range: nonnegative;
            Definition: cpass_cG_LBOUND(SupplyRegion_ALT1);
        }
        Parameter coeff_cG_UBOUND {
            IndexDomain: (SupplyRegion_ALT1);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cG_UBOUND(SupplyRegion_ALT1);
        }
        Variable cGEESFR {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: G(**)EESFR";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "fixed contribution from demand EE for CPP rate case, by fuel region (bkwh)";
        }
        Variable cGEESNR {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: G(**)EESNR";
            Range: [coeff_cGEESNR_LBOUND(SupplyRegion_ALT2), coeff_cGEESNR_UBOUND(SupplyRegion_ALT2)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "fixed contribution from demand EE for CPP rate case, by EMM region (bkwh)";
        }
        Parameter coeff_cGEESNR_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Definition: cpass_cGEESNR_LBOUND(SupplyRegion_ALT2);
        }
        Parameter coeff_cGEESNR_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cGEESNR_UBOUND(SupplyRegion_ALT2);
        }
        Variable cGENCLB {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENCLB(**)";
            Range: [coeff_cGENCLB_LBOUND(SupplyRegion_ALT2), coeff_cGENCLB_UBOUND(SupplyRegion_ALT2)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "coal generation by EMM region for STEO benchmarking (billion kWH)";
        }
        Parameter coeff_cGENCLB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Definition: cpass_cGENCLB_LBOUND(SupplyRegion_ALT2);
        }
        Parameter coeff_cGENCLB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cGENCLB_UBOUND(SupplyRegion_ALT2);
        }
        Variable cGENNGB {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: GENNGB(**)";
            Range: [coeff_cGENNGB_LBOUND(SupplyRegion_ALT2), coeff_cGENNGB_UBOUND(SupplyRegion_ALT2)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "gas generation by EMM region for STEO benchmarking (billion kWH)";
        }
        Parameter coeff_cGENNGB_LBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Definition: cpass_cGENNGB_LBOUND(SupplyRegion_ALT2);
        }
        Parameter coeff_cGENNGB_UBOUND {
            IndexDomain: (SupplyRegion_ALT2);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cGENNGB_UBOUND(SupplyRegion_ALT2);
        }
        Variable cGNUPFR {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: G(**)NUPFR";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "contribution from planned nuclear to CPP rate (if appropriate), by fuel region (bkwh)";
        }
        Variable cGNUPNR {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Columns: G(**)NUPNR";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "contribution from planned nuclear to CPP rate (if appropriate), by EMM region (bkwh)";
        }
        Variable cGPUS {
            IndexDomain: (GasProductionStep);
            Text: "OML Columns: GPUS(**)";
            Range: [coeff_cGPUS_LBOUND(GasProductionStep), coeff_cGPUS_UBOUND(GasProductionStep)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Production of natural gas by supply step (trill BTU)";
        }
        Parameter coeff_cGPUS_LBOUND {
            IndexDomain: (GasProductionStep);
            Range: nonnegative;
        }
        Parameter coeff_cGPUS_UBOUND {
            IndexDomain: (GasProductionStep);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cGPUS_UBOUND(GasProductionStep);
        }
        Variable cGTUS {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Columns: GTUS(**)(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Transport natural gas to gas region by gas season (trill BTU)";
        }
        Variable cH {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: H(*****)(*)(*)";
            Range: [coeff_cH_LBOUND(PlantGroup, Season, Slice), coeff_cH_UBOUND(PlantGroup, Season, Slice)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate hydro in maximum generation mode, by plant group, season and slice (GW)";
        }
        Parameter coeff_cH_LBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Range: nonnegative;
        }
        Parameter coeff_cH_UBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cH_UBOUND(PlantGroup,Season,Slice);
        }
        Variable cI {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Columns: I(*****)(*)(*)";
            Range: [coeff_cI_LBOUND(PlantGroup, Season, Slice), coeff_cI_UBOUND(PlantGroup, Season, Slice)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate intermittent plant by plant group, season and slice (GW)";
        }
        Parameter coeff_cI_LBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Range: nonnegative;
            Definition: cpass_cI_LBOUND(PlantGroup,Season,Slice);
        }
        Parameter coeff_cI_UBOUND {
            IndexDomain: (PlantGroup,Season,Slice);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cI_UBOUND(PlantGroup,Season,Slice);
        }
        Variable cIGEN {
            IndexDomain: (SupplyRegion_ALT1,PlantType_ECP);
            Text: "OML Columns: I(*)(**)GEN";
            Range: [coeff_cIGEN_LBOUND(SupplyRegion_ALT1, PlantType_ECP), coeff_cIGEN_UBOUND(SupplyRegion_ALT1, PlantType_ECP)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "contribution from incremental renewable generation to CPP rate (if appropriate) by EMM region and plant type (bkwh)";
        }
        Parameter coeff_cIGEN_LBOUND {
            IndexDomain: (SupplyRegion_ALT1,PlantType_ECP);
            Range: nonnegative;
            Definition: cpass_cIGEN_LBOUND(SupplyRegion_ALT1,PlantType_ECP);
        }
        Parameter coeff_cIGEN_UBOUND {
            IndexDomain: (SupplyRegion_ALT1,PlantType_ECP);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cIGEN_UBOUND(SupplyRegion_ALT1,PlantType_ECP);
        }
        Variable cJ_ALT {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: J(*****)(*)(*)!ALT"
            }
            Range: [coeff_cJ_ALT_LBOUND(PlantGroup, SeasonCCS, OperatingMode), coeff_cJ_ALT_UBOUND(PlantGroup, SeasonCCS, OperatingMode)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate dispatchable CCS plant without capture equipment in minimum generation /max spinning reserves mode, by plant group, season and operate option";
        }
        Parameter coeff_cJ_ALT_LBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Range: nonnegative;
        }
        Parameter coeff_cJ_ALT_UBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cJ_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode);
        }
        Variable cJ {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: J(*****)(*)(*)";
            Range: [coeff_cJ_LBOUND(PlantGroup, Season, OperatingMode), coeff_cJ_UBOUND(PlantGroup, Season, OperatingMode)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate dispatchable fossil/nuclear plant in minimum generation /max spinning reserves mode, by plant group, season and operate option (GW)";
        }
        Parameter coeff_cJ_LBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Range: nonnegative;
        }
        Parameter coeff_cJ_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cJ_UBOUND(PlantGroup,Season,OperatingMode);
        }
        Variable cJX {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: J(*****)X(*)";
            Range: [coeff_cJX_LBOUND(PlantGroup, Season), coeff_cJX_UBOUND(PlantGroup, Season)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate dispatchable renewable plant in minimum generation /max spinning reserves mode, by plant group and season (GW)";
        }
        Parameter coeff_cJX_LBOUND {
            IndexDomain: (PlantGroup,Season);
            Range: nonnegative;
        }
        Parameter coeff_cJX_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cJX_UBOUND(PlantGroup,Season);
        }
        Variable cKX {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Columns: KX(**)(*)(*)XX";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "escape vector for coal contract constraint, by coal supply curve, coal demand region and scrubbed/unscrubbed type (trill BTU)";
        }
        Variable cMB {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: MB(*****)(*)";
            Range: [coeff_cMB_LBOUND(PlantGroup, Season), coeff_cMB_UBOUND(PlantGroup, Season)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "planned maintenance level by plant group and season (GW)";
        }
        Parameter coeff_cMB_LBOUND {
            IndexDomain: (PlantGroup,Season);
            Range: nonnegative;
        }
        Parameter coeff_cMB_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cMB_UBOUND(PlantGroup,Season);
        }
        Variable cMERC_ {
            IndexDomain: (PlantType_ECP,nHGCODE);
            Text: "OML Columns: MERC_(**)(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "mercury emissions by plant type and mercury group (tons * 1000)";
        }
        Variable cMERC_DS {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_DS(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "mercury emissions from distillate consumption by mercury group (tons * 1000)";
        }
        Variable cMERC_OT {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_OT(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "mercury emissions from other (coal stock changes) by mercury group (tons * 1000)";
        }
        Variable cMERC_RS {
            IndexDomain: (nHGCODE);
            Text: "OML Columns: MERC_RS(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "mercury emissions from residual fuel by mercury group (tons * 1000)";
        }
        Variable cMVS {
            IndexDomain: (CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto);
            Text: "OML Columns: MVS(**)(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "SO2 allowances traded between coal demand regions (CSAPR) (thousand tons)";
        }
        Variable cMVSO2 {
            IndexDomain: (SO2Region_ALTFrom,SO2Region_ALTTo);
            Text: "OML Columns: MVSO2(*)(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "SO2 allowances traded between SO2 regions (CAIR) (thousand tons)";
        }
        Variable cNOT {
            IndexDomain: (OGSMSector,OGSMRegion);
            Text: "OML Columns: NOT(**)(**)_";
            Range: [coeff_cNOT_LBOUND(OGSMSector, OGSMRegion), coeff_cNOT_UBOUND(OGSMSector, OGSMRegion)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "non-EMM CO2 used for EOR, by OGSM sector and OGSM region (million metric tons CO2)";
        }
        Parameter coeff_cNOT_LBOUND {
            IndexDomain: (OGSMSector,OGSMRegion);
            Range: nonnegative;
        }
        Parameter coeff_cNOT_UBOUND {
            IndexDomain: (OGSMSector,OGSMRegion);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cNOT_UBOUND(OGSMSector,OGSMRegion);
        }
        Variable cNOTSF {
            IndexDomain: (OGSMRegion);
            Text: "OML Columns: NOTSF(**)_";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "escape vector for CO2 for EOR by OGSM region (million metric tons CO2)";
        }
        Variable cNSR {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NSR(**)(**)_";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "transport CO2 from EMM fuel regions to OGSM region for EOR with 45Q subsidy (million metric tons CO2)";
        }
        Variable cNSX {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NSX(**)___";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "CO2 captured and stored by EMM fuel region with 45Q subsidy (million metric tons CO2)";
        }
        Variable cNTO {
            IndexDomain: (OGSMRegion_ALTFrom,OGSMRegion_ALTTo);
            Text: "OML Columns: NTO(**)(**)_";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "transport CO2 from other sources between OGSM regions for EOR (million metric tons CO2)";
        }
        Variable cNTR {
            IndexDomain: (FuelRegion,OGSMRegion);
            Text: "OML Columns: NTR(**)(**)_";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "transport CO2 from EMM fuel regions to OGSM region for EOR (million metric tons CO2)";
        }
        Variable cNTX {
            IndexDomain: (FuelRegion);
            Text: "OML Columns: NTX(**)___";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "CO2 captured but not used for EOR by EMM fuel region (million metric tons CO2)";
        }
        Variable cO_ALT {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: O(*****)(*)(*)!ALT"
            }
            Range: [coeff_cO_ALT_LBOUND(PlantGroup, SeasonCCS, OperatingMode), coeff_cO_ALT_UBOUND(PlantGroup, SeasonCCS, OperatingMode)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate dispatchable CCS plant without capture  in load following mode, by plant group, season and operate option (GW)";
        }
        Parameter coeff_cO_ALT_LBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Range: nonnegative;
        }
        Parameter coeff_cO_ALT_UBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cO_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode);
        }
        Variable cO {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: O(*****)(*)(*)";
            Range: [coeff_cO_LBOUND(PlantGroup, Season, OperatingMode), coeff_cO_UBOUND(PlantGroup, Season, OperatingMode)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate dispatchable fossil/nuclear plant in load following mode, by plant group, season and operate option (GW)";
        }
        Parameter coeff_cO_LBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Range: nonnegative;
        }
        Parameter coeff_cO_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cO_UBOUND(PlantGroup,Season,OperatingMode);
        }
        Variable cOX {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: O(*****)X(*)";
            Range: [coeff_cOX_LBOUND(PlantGroup, Season), coeff_cOX_UBOUND(PlantGroup, Season)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate dispatchable renewable plant in load following mode, by plant group and season (GW)";
        }
        Parameter coeff_cOX_LBOUND {
            IndexDomain: (PlantGroup,Season);
            Range: nonnegative;
        }
        Parameter coeff_cOX_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cOX_UBOUND(PlantGroup,Season);
        }
        Variable cRPUS {
            IndexDomain: (ResidProductionStep);
            Text: "OML Columns: RPUS(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Production of residual fuel for power use (trillion BTU)";
        }
        Variable cRTUS {
            IndexDomain: (OilRegion);
            Text: "OML Columns: RTUS(**)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Transport residual fuel to oil (census) region (trillion BTU)";
        }
        Variable cS2 {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: S2(****)(*)(*)";
            Range: [coeff_cS2_LBOUND(SupplyRegion, Season, Slice), coeff_cS2_UBOUND(SupplyRegion, Season, Slice)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "generate to replace demand storage dispatch (P2) by EMM region, season and slice (million kwh/10)";
        }
        Parameter coeff_cS2_LBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Range: nonnegative;
        }
        Parameter coeff_cS2_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cS2_UBOUND(SupplyRegion,Season,Slice);
        }
        Variable cSC {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: SC(*)(*)(**)(*)(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "apply trade to spinning reserves (if option allowed), by Canadian supply region, supply step, EMM region, season and slice (GW)";
        }
        Variable cSPx {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: SP(****)(*)(*)";
            Range: [coeff_cSPx_LBOUND(SupplyRegion, Season, Slice), coeff_cSPx_UBOUND(SupplyRegion, Season, Slice)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Base spinning reserve requirement by region, season and time slice (GW)";
        }
        Parameter coeff_cSPx_LBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Range: nonnegative;
            Definition: cpass_cSPx_LBOUND(SupplyRegion,Season,Slice);
        }
        Parameter coeff_cSPx_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cSPx_UBOUND(SupplyRegion,Season,Slice);
        }
        Variable cST {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Columns: ST(****)(*)(*)";
            Range: [coeff_cST_LBOUND(SupplyRegion, Season, Slice), coeff_cST_UBOUND(SupplyRegion, Season, Slice)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "generate to replace pumped storage use by EMM region, season and slice (million kwh/10)";
        }
        Parameter coeff_cST_LBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Range: nonnegative;
        }
        Parameter coeff_cST_UBOUND {
            IndexDomain: (SupplyRegion,Season,Slice);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cST_UBOUND(SupplyRegion,Season,Slice);
        }
        Variable cSULF {
            IndexDomain: (PlantType_ECP,SO2Region);
            Text: "OML Columns: SULF(**)(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "SO2 emissions by plant type and SO2 region (thousand tons)";
        }
        Variable cT_STOCK_ {
            Text: "OML Columns: T_STOCK_";
            Range: [coeff_cT_STOCK__LBOUND, coeff_cT_STOCK__UBOUND];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "coal used from stocks (trill BTU)";
        }
        Parameter coeff_cT_STOCK__LBOUND {
            Range: nonnegative;
        }
        Parameter coeff_cT_STOCK__UBOUND {
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cT_STOCK__UBOUND;
        }
        Variable cTC {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Columns: TC(*)(*)(**)(*)(*)";
            Range: nonnegative;
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "Canadian imports from Canadian supply region, supply step to EMM region, season and slice (GW)";
        }
        Variable cTR {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: TR(**)(**)(*)(*)";
            Range: [coeff_cTR_LBOUND(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice), coeff_cTR_UBOUND(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "domestic imports between EMM regions, by season and slice (GW)";
        }
        Parameter coeff_cTR_LBOUND {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Range: nonnegative;
        }
        Parameter coeff_cTR_UBOUND {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cTR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Variable cSR {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Columns: SR(**)(**)(*)(*)";
            Range: [coeff_cSR_LBOUND(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice), coeff_cSR_UBOUND(SupplyRegion_ALTfrom, SupplyRegion_ALTto, Season, Slice)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "use domestic imports for spinning reserves (if allowed), between EMM regions by season and slice (GW)";
        }
        Parameter coeff_cSR_LBOUND {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Range: nonnegative;
        }
        Parameter coeff_cSR_UBOUND {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cSR_UBOUND(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
        }
        Variable cU_ALT {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Text: {
                "OML Columns: U(*****)(*)(*)!ALT"
            }
            Range: [coeff_cU_ALT_LBOUND(PlantGroup, SeasonCCS, OperatingMode), coeff_cU_ALT_UBOUND(PlantGroup, SeasonCCS, OperatingMode)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate dispatchable CCS plant without capture in maximum generation /min spinning reserves mode, by plant group, season and operate option (GW)";
        }
        Parameter coeff_cU_ALT_LBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Range: nonnegative;
        }
        Parameter coeff_cU_ALT_UBOUND {
            IndexDomain: (PlantGroup,SeasonCCS,OperatingMode);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cU_ALT_UBOUND(PlantGroup,SeasonCCS,OperatingMode);
        }
        Variable cU {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Text: "OML Columns: U(*****)(*)(*)";
            Range: [coeff_cU_LBOUND(PlantGroup, Season, OperatingMode), coeff_cU_UBOUND(PlantGroup, Season, OperatingMode)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate dispatchable fossil/nuclear plant in maximum generation /min spinning reserves mode, by plant group, season and operate option (GW)";
        }
        Parameter coeff_cU_LBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Range: nonnegative;
        }
        Parameter coeff_cU_UBOUND {
            IndexDomain: (PlantGroup,Season,OperatingMode);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cU_UBOUND(PlantGroup,Season,OperatingMode);
        }
        Variable cUX {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Columns: U(*****)X(*)";
            Range: [coeff_cUX_LBOUND(PlantGroup, Season), coeff_cUX_UBOUND(PlantGroup, Season)];
            Property: ReducedCost, CoefficientRange, Basic;
            Comment: "operate dispatchable renewable plant in maximum generation /min spinning reserves mode, by plant group and season (GW)";
        }
        Parameter coeff_cUX_LBOUND {
            IndexDomain: (PlantGroup,Season);
            Range: nonnegative;
        }
        Parameter coeff_cUX_UBOUND {
            IndexDomain: (PlantGroup,Season);
            Range: nonnegative;
            Default: inf;
            Definition: cpass_cUX_UBOUND(PlantGroup,Season);
        }
    }
    DeclarationSection LP_safety_valve_variables;
    DeclarationSection Objective_Declaration {
        Parameter K {
            Text: "safety valve OBJ coefficient";
            Range: nonnegative;
            InitialData: 9999;
        }
        Variable EFDCOSTS {
            Range: free;
            Definition: {
                                              sum((numACI),
                           coeff_cACISPLY_EFDCOSTS(numACI)
                           *              cACISPLY(numACI))
                
                           +
                
                                        sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                           coeff_cB_EFDCOSTS(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption)
                           *              cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                
                           +
                
                                              sum((CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep),
                           coeff_cBP_type_EFDCOSTS(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep)
                           *              cBP_type(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep))
                
                           +
                
                                          sum((CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD),
                           coeff_cC_Z_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
                           *              cC_Z(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD))
                
                           +
                
                                             sum((CarbonRegion),
                           coeff_cCARBNK_EFDCOSTS(CarbonRegion)
                           *              cCARBNK(CarbonRegion))
                
                           +
                
                                             sum((CarbonRegion),
                           coeff_cCARECR_EFDCOSTS(CarbonRegion)
                           *              cCARECR(CarbonRegion))
                
                           +
                
                                             sum((CarbonRegion),
                           coeff_cCARESC_EFDCOSTS(CarbonRegion)
                           *              cCARESC(CarbonRegion))
                
                           +
                
                                             sum((CarbonRegion),
                           coeff_cCARLIM_EFDCOSTS(CarbonRegion)
                           *              cCARLIM(CarbonRegion))
                
                           +
                
                                             sum((CarbonRegion),
                           coeff_cCAROFF_EFDCOSTS(CarbonRegion)
                           *              cCAROFF(CarbonRegion))
                
                           +
                
                                             sum((CarbonRegion),
                           coeff_cCARRSV_EFDCOSTS(CarbonRegion)
                           *              cCARRSV(CarbonRegion))
                
                           +
                
                                           sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
                           coeff_cCMNR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto)
                           *              cCMNR(SupplyRegion_ALTfrom,SupplyRegion_ALTto))
                
                           +
                
                                         sum((CoalSupplyCurve,CoalType,CoalProductionStep),
                           coeff_cCP_EFDCOSTS(CoalSupplyCurve,CoalType,CoalProductionStep)
                           *              cCP(CoalSupplyCurve,CoalType,CoalProductionStep))
                
                           +
                
                                         sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI),
                           coeff_cCT_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI)
                           *              cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                
                           +
                
                                        sum((PlantGroup,Season,OperatingMode),
                           coeff_cD_EFDCOSTS(PlantGroup,Season,OperatingMode)
                           *              cD(PlantGroup,Season,OperatingMode))
                
                           +
                
                                           sum((DistillateProductionStep),
                           coeff_cDPUS_EFDCOSTS(DistillateProductionStep)
                           *              cDPUS(DistillateProductionStep))
                
                           +
                
                                           sum((OilRegion),
                           coeff_cDTUS_EFDCOSTS(OilRegion)
                           *              cDTUS(OilRegion))
                
                           +
                
                                         sum((CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType),
                           coeff_cDX_EFDCOSTS(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)
                           *              cDX(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType))
                
                           +
                
                                         sum((SupplyRegion,Season,Slice),
                           coeff_cES_EFDCOSTS(SupplyRegion,Season,Slice)
                           *              cES(SupplyRegion,Season,Slice))
                
                           +
                
                                             sum((INOXP),
                           coeff_cESCNOX_EFDCOSTS(INOXP)
                           *              cESCNOX(INOXP))
                
                           +
                
                                        sum((PlantGroup,Season,Slice),
                           coeff_cF_EFDCOSTS(PlantGroup,Season,Slice)
                           *              cF(PlantGroup,Season,Slice))
                
                           +
                
                                           sum((GasProductionStep),
                           coeff_cGPUS_EFDCOSTS(GasProductionStep)
                           *              cGPUS(GasProductionStep))
                
                           +
                
                                           sum((GasRegion,GasSeason),
                           coeff_cGTUS_EFDCOSTS(GasRegion,GasSeason)
                           *              cGTUS(GasRegion,GasSeason))
                
                           +
                
                                        sum((PlantGroup,Season,Slice),
                           coeff_cH_EFDCOSTS(PlantGroup,Season,Slice)
                           *              cH(PlantGroup,Season,Slice))
                
                           +
                
                                        sum((PlantGroup,Season,Slice),
                           coeff_cI_EFDCOSTS(PlantGroup,Season,Slice)
                           *              cI(PlantGroup,Season,Slice))
                
                           +
                
                                            sum((PlantGroup,SeasonCCS,OperatingMode),
                           coeff_cJ_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)
                           *              cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                
                           +
                
                                        sum((PlantGroup,Season,OperatingMode),
                           coeff_cJ_EFDCOSTS(PlantGroup,Season,OperatingMode)
                           *              cJ(PlantGroup,Season,OperatingMode))
                
                           +
                
                                         sum((PlantGroup,Season),
                           coeff_cJX_EFDCOSTS(PlantGroup,Season)
                           *              cJX(PlantGroup,Season))
                
                           +
                
                                         sum((CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD),
                           coeff_cKX_EFDCOSTS(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
                           *              cKX(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD))
                
                           +
                
                                         sum((PlantGroup,Season),
                           coeff_cMB_EFDCOSTS(PlantGroup,Season)
                           *              cMB(PlantGroup,Season))
                
                           +
                
                                          sum((CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto),
                           coeff_cMVS_EFDCOSTS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto)
                           *              cMVS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto))
                
                           +
                
                                            sum((SO2Region_ALTFrom,SO2Region_ALTTo),
                           coeff_cMVSO2_EFDCOSTS(SO2Region_ALTFrom,SO2Region_ALTTo)
                           *              cMVSO2(SO2Region_ALTFrom,SO2Region_ALTTo))
                
                           +
                
                                          sum((OGSMSector,OGSMRegion),
                           coeff_cNOT_EFDCOSTS(OGSMSector,OGSMRegion)
                           *              cNOT(OGSMSector,OGSMRegion))
                
                           +
                
                                            sum((OGSMRegion),
                           coeff_cNOTSF_EFDCOSTS(OGSMRegion)
                           *              cNOTSF(OGSMRegion))
                
                           +
                
                                          sum((FuelRegion,OGSMRegion),
                           coeff_cNSR_EFDCOSTS(FuelRegion,OGSMRegion)
                           *              cNSR(FuelRegion,OGSMRegion))
                
                           +
                
                                          sum((FuelRegion),
                           coeff_cNSX_EFDCOSTS(FuelRegion)
                           *              cNSX(FuelRegion))
                
                           +
                
                                          sum((OGSMRegion_ALTFrom,OGSMRegion_ALTTo),
                           coeff_cNTO_EFDCOSTS(OGSMRegion_ALTFrom,OGSMRegion_ALTTo)
                           *              cNTO(OGSMRegion_ALTFrom,OGSMRegion_ALTTo))
                
                           +
                
                                          sum((FuelRegion,OGSMRegion),
                           coeff_cNTR_EFDCOSTS(FuelRegion,OGSMRegion)
                           *              cNTR(FuelRegion,OGSMRegion))
                
                           +
                
                                          sum((FuelRegion),
                           coeff_cNTX_EFDCOSTS(FuelRegion)
                           *              cNTX(FuelRegion))
                
                           +
                
                                            sum((PlantGroup,SeasonCCS,OperatingMode),
                           coeff_cO_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)
                           *              cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                
                           +
                
                                        sum((PlantGroup,Season,OperatingMode),
                           coeff_cO_EFDCOSTS(PlantGroup,Season,OperatingMode)
                           *              cO(PlantGroup,Season,OperatingMode))
                
                           +
                
                                         sum((PlantGroup,Season),
                           coeff_cOX_EFDCOSTS(PlantGroup,Season)
                           *              cOX(PlantGroup,Season))
                
                           +
                
                                           sum((ResidProductionStep),
                           coeff_cRPUS_EFDCOSTS(ResidProductionStep)
                           *              cRPUS(ResidProductionStep))
                
                           +
                
                                           sum((OilRegion),
                           coeff_cRTUS_EFDCOSTS(OilRegion)
                           *              cRTUS(OilRegion))
                
                           +
                
                                         sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice),
                           coeff_cSC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)
                           *              cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
                
                           +
                
                                          sum((SupplyRegion,Season,Slice),
                           coeff_cSPx_EFDCOSTS(SupplyRegion,Season,Slice)
                           *              cSPx(SupplyRegion,Season,Slice))
                
                           +
                
                                         sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
                           coeff_cSR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
                           *              cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                
                           +
                
                                           sum((PlantType_ECP,SO2Region),
                           coeff_cSULF_EFDCOSTS(PlantType_ECP,SO2Region)
                           *              cSULF(PlantType_ECP,SO2Region))
                
                           +
                
                                         sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice),
                           coeff_cTC_EFDCOSTS(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice)
                           *              cTC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
                
                           +
                
                                         sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
                           coeff_cTR_EFDCOSTS(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
                           *              cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                
                           +
                
                                            sum((PlantGroup,SeasonCCS,OperatingMode),
                           coeff_cU_ALT_EFDCOSTS(PlantGroup,SeasonCCS,OperatingMode)
                           *              cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                
                           +
                
                                        sum((PlantGroup,Season,OperatingMode),
                           coeff_cU_EFDCOSTS(PlantGroup,Season,OperatingMode)
                           *              cU(PlantGroup,Season,OperatingMode))
                
                           +
                
                                         sum((PlantGroup,Season),
                           coeff_cUX_EFDCOSTS(PlantGroup,Season)
                           *              cUX(PlantGroup,Season))
            }
        }
    }
    DeclarationSection ConstraintDeclare {
        Constraint rACICSTle {
            Text: "OML Rows: ACICSTXX";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((numACI),
                             coeff_cACISPLY_rACICSTle(numACI) *
                                   cACISPLY(numACI))
                             +
                             sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI),
                             coeff_cCT_rACICSTle(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *
                                   cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                
                             <=
                
                             0.
            }
            Comment: "balance row for activated carbon injection (pounds)";
        }
        Constraint rBTUle {
            IndexDomain: (FuelRegion_ALT1,PlantType,GenerationSeason);
            Text: "OML Rows: BTU(*)(***)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((FuelShareOption),
                             coeff_cB_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                                   cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cD_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *
                                   cD(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,Season),
                             coeff_cJX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *
                                   cJX(PlantGroup,Season))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,Season),
                             coeff_cOX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *
                                   cOX(PlantGroup,Season))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,Season),
                             coeff_cUX_rBTUle(FuelRegion_ALT1,PlantType,GenerationSeason,PlantGroup,Season) *
                                   cUX(PlantGroup,Season))
                
                             <=
                
                             0.
            }
            Comment: "BTU balance row by EMM fuel region, plant type (using gas) and gas season (trill BTU)";
        }
        Constraint rBTUXXle {
            IndexDomain: (FuelRegion_ALT1,PlantType);
            Text: "OML Rows: BTU(*)(***)X";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((GenerationSeason,FuelShareOption),
                             coeff_cB_rBTUXXle(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                                   cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rBTUXXle(FuelRegion_ALT1,PlantType,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             <=
                
                             0.
            }
            Comment: "BTU balance row by EMM fuel region, plant type (not using gas) (trill BTU)";
        }
        Constraint rCARBONABeq {
            Text: "OML Rows: CARBONAB";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((CarbonRegion),
                             coeff_cCARBNK_rCARBONABeq(CarbonRegion) *
                                   cCARBNK(CarbonRegion))
                             +
                             sum((CarbonRegion),
                             coeff_cCARESC_rCARBONABeq(CarbonRegion) *
                                   cCARESC(CarbonRegion))
                             +
                             sum((CarbonRegion),
                             coeff_cCARFUE_rCARBONABeq(CarbonRegion) *
                                   cCARFUE(CarbonRegion))
                             +
                             sum((CarbonRegion),
                             coeff_cCARIND_rCARBONABeq(CarbonRegion) *
                                   cCARIND(CarbonRegion))
                             +
                             sum((CarbonRegion),
                             coeff_cCARLIM_rCARBONABeq(CarbonRegion) *
                                   cCARLIM(CarbonRegion))
                             +
                             sum((CarbonRegion),
                             coeff_cCAROFF_rCARBONABeq(CarbonRegion) *
                                   cCAROFF(CarbonRegion))
                             +
                             sum((CarbonRegion),
                             coeff_cCAROTH_rCARBONABeq(CarbonRegion) *
                                   cCAROTH(CarbonRegion))
                             +
                             sum((CarbonRegion),
                             coeff_cCARREF_rCARBONABeq(CarbonRegion) *
                                   cCARREF(CarbonRegion))
                             +
                             sum((CarbonRegion),
                             coeff_cCARRSV_rCARBONABeq(CarbonRegion) *
                                   cCARRSV(CarbonRegion))
                             +
                             sum((CarbonRegion),
                             coeff_cCARUTL_rCARBONABeq(CarbonRegion) *
                                   cCARUTL(CarbonRegion))
                
                             =
                             0.
            }
            Comment: "all sector CO2 constraint for California (AB32/AB398) (million metric tons carbon)";
        }
        Constraint rCARBONle {
            IndexDomain: (CarbonRegion);
            Text: "OML Rows: CARBON(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                             coeff_cB_rCARBONle(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                                   cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                             +
                             sum((SupplyRegion_ALT1),
                             coeff_cCARDM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *
                                   cCARDM(SupplyRegion_ALT1,CarbonRegion))
                             +
                             coeff_cCARECR_rCARBONle(CarbonRegion) *
                                   cCARECR(CarbonRegion)
                             +
                             coeff_cCARESC_rCARBONle(CarbonRegion) *
                                   cCARESC(CarbonRegion)
                             +
                             sum((SupplyRegion_ALT1),
                             coeff_cCARIM_rCARBONle(CarbonRegion,SupplyRegion_ALT1) *
                                   cCARIM(SupplyRegion_ALT1,CarbonRegion))
                             +
                             coeff_cCARLIM_rCARBONle(CarbonRegion) *
                                   cCARLIM(CarbonRegion)
                             +
                             coeff_cCAROFF_rCARBONle(CarbonRegion) *
                                   cCAROFF(CarbonRegion)
                             +
                             coeff_cCARRSV_rCARBONle(CarbonRegion) *
                                   cCARRSV(CarbonRegion)
                             +
                             coeff_cCARUTL_rCARBONle(CarbonRegion) *
                                   cCARUTL(CarbonRegion)
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
                             coeff_cSR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                                   cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                             +
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
                             coeff_cTR_rCARBONle(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                                   cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rCARBONle(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rCARBONle(CarbonRegion,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             <=
                
                             0.
            }
            Comment: "impose carbon limit by carbon region, if appropriate (million metric tons carbon)";
        }
        Constraint rCBle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Rows: CB(*****)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((OperatingMode),
                             coeff_cJ_rCBle(PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             coeff_cJX_rCBle(PlantGroup,Season) *
                                   cJX(PlantGroup,Season)
                             +
                             coeff_cMB_rCBle(PlantGroup,Season) *
                                   cMB(PlantGroup,Season)
                             +
                             sum((SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((OperatingMode),
                             coeff_cO_rCBle(PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             coeff_cOX_rCBle(PlantGroup,Season) *
                                   cOX(PlantGroup,Season)
                             +
                             sum((SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rCBle(PlantGroup,Season,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((OperatingMode),
                             coeff_cU_rCBle(PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                             +
                             coeff_cUX_rCBle(PlantGroup,Season) *
                                   cUX(PlantGroup,Season)
                
                             <=
                
                             coeff_cRHS_rCBle(PlantGroup,Season)
            }
            Comment: "capacity balance by plant group and season (GW)";
        }
        Constraint rCLle {
            IndexDomain: (CoalDemandRegion_ALT2,PlantType_ECP);
            Text: "OML Rows: CL(**)(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                             coeff_cB_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                                   cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                             +
                             sum((CoalSupplyCurve,CoalDemandRegion_ALT1,numACI),
                             coeff_cCT_rCLle(CoalDemandRegion_ALT2,PlantType_ECP,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) *
                                   cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                
                             <=
                
                             0.
            }
            Comment: "coal consumption balance row by coal demand region and ECP plant type (trill BTU)";
        }
        Constraint rCNCPle {
            IndexDomain: (CanadianSupplyRegion,CanadianSupplyStep,Season,Slice);
            Text: "OML Rows: CNCP(*)(*)(*)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SupplyRegion_ALT2),
                             coeff_cSC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *
                                   cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
                             +
                             sum((SupplyRegion_ALT2),
                             coeff_cTC_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice,SupplyRegion_ALT2) *
                                   cTC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
                
                             <=
                
                             coeff_cRHS_rCNCPle(CanadianSupplyRegion,CanadianSupplyStep,Season,Slice)
            }
            Comment: "Canadian import balance row by Canadian supply region, step, season and slice (GW)";
        }
        Constraint rCO2QNRle {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "OML Rows: CO2QNR(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
                             coeff_cCMNR_rCO2QNRle(SupplyRegion_ALT2,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                                   cCMNR(SupplyRegion_ALTfrom,SupplyRegion_ALTto))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cD_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                                   cD(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rCO2QNRle(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             <=
                
                             coeff_cRHS_rCO2QNRle(SupplyRegion_ALT2)
            }
            Comment: "CPP EMM region mass based carbon constraint for affected sources (billion lbs CO2)";
        }
        Constraint rCONCLeq {
            IndexDomain: (SupplyRegion_ALTto);
            Text: "OML Rows: CONCL(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SupplyRegion_ALT2),
                             coeff_cCONCLB_rCONCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *
                                   cCONCLB(SupplyRegion_ALT2))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rCONCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rCONCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             =
                             0.
            }
            Comment: "accumulate coal consumption by EMM region for STEO benchmarking (trill BTU)";
        }
        Constraint rCONNGeq {
            IndexDomain: (SupplyRegion_ALTto);
            Text: "OML Rows: CONNG(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SupplyRegion_ALT2),
                             coeff_cCONNGB_rCONNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *
                                   cCONNGB(SupplyRegion_ALT2))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rCONNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rCONNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             =
                             0.
            }
            Comment: "accumulate natural gas consumption by EMM region for STEO benchmarking (trill BTU)";
        }
        Constraint rDSle {
            IndexDomain: (CensusRegion);
            Text: "OML Rows: DS(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                             coeff_cB_rDSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                                   cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                             +
                             sum((OilRegion),
                             coeff_cDTUS_rDSle(CensusRegion,OilRegion) *
                                   cDTUS(OilRegion))
                
                             <=
                
                             0.
            }
            Comment: "distillate consumption balance row by oil (census) region (trill BTU)";
        }
        Constraint rDVle {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType);
            Text: "OML Rows: DV(*)(**)(*)XX";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((CoalSupplyCurve,numACI),
                             coeff_cCT_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType,CoalSupplyCurve,numACI) *
                                   cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                             +
                             coeff_cDX_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType) *
                                   cDX(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)
                
                             <=
                
                             coeff_cRHS_rDVle(CoalDemandRegion_ALT1,PlantType_ECP,CoalDiversityType)
            }
            Comment: "impose coal diversity limit by coal demand region, ECP plant type and coal type (subbit/lignite) (trill BTU)";
        }
        Constraint rELNOX0le {
            IndexDomain: (INOXP);
            Text: "OML Rows: ELNOX0(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((CoalDemandRegion_ALT1,GenerationSeason),
                             coeff_cBCTLN_rELNOX0le(INOXP,CoalDemandRegion_ALT1,GenerationSeason) *
                                   cBCTLN(CoalDemandRegion_ALT1,GenerationSeason,INOXP))
                             +
                             sum((PlantType_ECP),
                             coeff_cELNOX_rELNOX0le(INOXP,PlantType_ECP) *
                                   cELNOX(INOXP,PlantType_ECP))
                             +
                             coeff_cESCNOX_rELNOX0le(INOXP) *
                                   cESCNOX(INOXP)
                
                             <=
                
                             0.
            }
            Comment: "enforce NOX emission limit by NOX compliance program (thousand tons)";
        }
        Constraint rELNOXle {
            IndexDomain: (INOXP,PlantType_ECP);
            Text: "OML Rows: ELNOX(*)(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((CoalDemandRegion_ALT1,GenerationSeason),
                             coeff_cBCTLN_rELNOXle(INOXP,PlantType_ECP,CoalDemandRegion_ALT1,GenerationSeason) *
                                   cBCTLN(CoalDemandRegion_ALT1,GenerationSeason,INOXP))
                             +
                             coeff_cELNOX_rELNOXle(INOXP,PlantType_ECP) *
                                   cELNOX(INOXP,PlantType_ECP)
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,Season),
                             coeff_cOX_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season) *
                                   cOX(PlantGroup,Season))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rELNOXle(INOXP,PlantType_ECP,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rELNOXle(INOXP,PlantType_ECP,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             <=
                
                             0.
            }
            Comment: "balance NOX emissions by NOX compliance group and ECP plant type, if constrained (thousand tons)";
        }
        Constraint rENeq {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Rows: EN(*****)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((Slice),
                             coeff_cF_rENeq(PlantGroup,Season,Slice) *
                                   cF(PlantGroup,Season,Slice))
                             +
                             sum((Slice),
                             coeff_cH_rENeq(PlantGroup,Season,Slice) *
                                   cH(PlantGroup,Season,Slice))
                
                             =
                             coeff_cRHS_rENeq(PlantGroup,Season)
            }
            Comment: "maximum generation from pumped storage units, by plant group and season (bkwh)";
        }
        Constraint rENle {
            IndexDomain: (PlantGroup,Season);
            Text: "OML Rows: EN(*****)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((Slice),
                             coeff_cF_rENle(PlantGroup,Season,Slice) *
                                   cF(PlantGroup,Season,Slice))
                             +
                             sum((Slice),
                             coeff_cH_rENle(PlantGroup,Season,Slice) *
                                   cH(PlantGroup,Season,Slice))
                
                             <=
                
                             coeff_cRHS_rENle(PlantGroup,Season)
            }
            Comment: "maximum generation from conventional hydro units, by plant group and season (bkwh)";
        }
        Constraint rEXle {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Rows: EX(****)(*)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
                             coeff_cSR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                                   cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                             +
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
                             coeff_cTR_rEXle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                                   cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                
                             <=
                
                             coeff_cRHS_rEXle(SupplyRegion,Season,Slice)
            }
            Comment: "limit total exports from supply region, by season and slice (GW)";
        }
        Constraint rFle {
            IndexDomain: (PlantGroup,Season,Slice);
            Text: "OML Rows: F(*****)(*)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             coeff_cF_rFle(PlantGroup,Season,Slice) *
                                   cF(PlantGroup,Season,Slice)
                             +
                             coeff_cH_rFle(PlantGroup,Season,Slice) *
                                   cH(PlantGroup,Season,Slice)
                
                             <=
                
                             coeff_cRHS_rFle(PlantGroup,Season,Slice)
            }
            Comment: "capacity balance by hydro plant group, season and slice (GW)";
        }
        Constraint rGENCLeq {
            IndexDomain: (SupplyRegion_ALTto);
            Text: "OML Rows: GENCL(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SupplyRegion_ALT2),
                             coeff_cGENCLB_rGENCLeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *
                                   cGENCLB(SupplyRegion_ALT2))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rGENCLeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rGENCLeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             =
                             0.
            }
            Comment: "generation balance for STEO benchmarking - coal generation (bkwh)";
        }
        Constraint rGENNGeq {
            IndexDomain: (SupplyRegion_ALTto);
            Text: "OML Rows: GENNG(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SupplyRegion_ALT2),
                             coeff_cGENNGB_rGENNGeq(SupplyRegion_ALTto,SupplyRegion_ALT2) *
                                   cGENNGB(SupplyRegion_ALT2))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rGENNGeq(SupplyRegion_ALTto,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rGENNGeq(SupplyRegion_ALTto,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             =
                             0.
            }
            Comment: "generation balance for STEO benchmarking - gas generation (bkwh)";
        }
        Constraint rGRDGNge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
            Text: "OML Rows: GRDGN(**)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             coeff_cDPVCP_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource) *
                                   cDPVCP(SupplyRegion_ALT2)
                             +
                             sum((PlantGroup,Season,Slice),
                             coeff_cF_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                                   cF(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup,Season,Slice),
                             coeff_cH_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                                   cH(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup,Season,Slice),
                             coeff_cI_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                                   cI(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,Season),
                             coeff_cJX_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season) *
                                   cJX(PlantGroup,Season))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rGRDGNge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             >=
                
                             0.
            }
            Comment: "accumulate generation contributing to grid resilience calculation, by region (bkwh)";
        }
        Constraint rGRDRTge {
            IndexDomain: (SupplyRegion_ALT2,GridResilienceSource);
            Text: "OML Rows: GRDRT(**)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             coeff_cDPVCP_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource) *
                                   cDPVCP(SupplyRegion_ALT2)
                             +
                             sum((PlantGroup,Season,Slice),
                             coeff_cF_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                                   cF(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup,Season,Slice),
                             coeff_cH_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                                   cH(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup,Season,Slice),
                             coeff_cI_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,Slice) *
                                   cI(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,Season),
                             coeff_cJX_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season) *
                                   cJX(PlantGroup,Season))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rGRDRTge(SupplyRegion_ALT2,GridResilienceSource,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             >=
                
                             0.
            }
            Comment: "accumulate  grid resilience rating weighted by generation, by region (bkwh)";
        }
        Constraint rIMle {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Rows: IM(****)(*)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
                             coeff_cSR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                                   cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                             +
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
                             coeff_cTR_rIMle(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                                   cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                
                             <=
                
                             coeff_cRHS_rIMle(SupplyRegion,Season,Slice)
            }
            Comment: "limit total imports from supply region, by season and slice (GW)";
        }
        Constraint rK_ge {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Rows: K_(**)(*)(*)XX";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantType_ECP,numACI),
                             coeff_cCT_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI) *
                                   cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                             +
                             coeff_cKX_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *
                                   cKX(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
                
                             >=
                
                             coeff_cRHS_rK_ge(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
            }
            Comment: "coal contract row by supply curve, coal demand region and coal type (scrubbed/unscrubbed) (trill BTU)";
        }
        Constraint rLDge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Rows: LD(****)(*)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantGroup,OperatingMode),
                             coeff_cD_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                                   cD(PlantGroup,Season,OperatingMode))
                             +
                             coeff_cES_rLDge(SupplyRegion,Season,Slice) *
                                   cES(SupplyRegion,Season,Slice)
                             +
                             sum((PlantGroup),
                             coeff_cF_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cF(PlantGroup,Season,Slice))
                             +
                             sum((SupplyRegion_ALT1),
                             coeff_cG_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALT1) *
                                   cG(SupplyRegion_ALT1))
                             +
                             sum((PlantGroup),
                             coeff_cH_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cH(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup),
                             coeff_cI_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cI(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,OperatingMode),
                             coeff_cJ_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup),
                             coeff_cJX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cJX(PlantGroup,Season))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,OperatingMode),
                             coeff_cO_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup),
                             coeff_cOX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cOX(PlantGroup,Season))
                             +
                             coeff_cS2_rLDge(SupplyRegion,Season,Slice) *
                                   cS2(SupplyRegion,Season,Slice)
                             +
                             sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2),
                             coeff_cSC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *
                                   cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
                             +
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
                             coeff_cSR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                                   cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                             +
                             coeff_cST_rLDge(SupplyRegion,Season,Slice) *
                                   cST(SupplyRegion,Season,Slice)
                             +
                             sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2),
                             coeff_cTC_rLDge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *
                                   cTC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
                             +
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
                             coeff_cTR_rLDge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                                   cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rLDge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,OperatingMode),
                             coeff_cU_rLDge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup),
                             coeff_cUX_rLDge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cUX(PlantGroup,Season))
                
                             >=
                
                             coeff_cRHS_rLDge(SupplyRegion,Season,Slice)
            }
            Comment: "electricity load requirement by EMM region, season and slice (million kwh /10)";
        }
        Constraint rMBge {
            IndexDomain: (SupplyRegion_ALT1,PlantGroup);
            Text: "OML Rows: MB(*)(*****)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((Season),
                             coeff_cMB_rMBge(SupplyRegion_ALT1,PlantGroup,Season) *
                                   cMB(PlantGroup,Season))
                
                             >=
                
                             coeff_cRHS_rMBge(SupplyRegion_ALT1,PlantGroup)
            }
            Comment: "planned maintenance requirement by supply region, and plant group (bkwh)";
        }
        Constraint rMERC_DSle {
            IndexDomain: (nHGCODE);
            Text: "OML Rows: MERC_DS(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((OilRegion),
                             coeff_cDTUS_rMERC_DSle(nHGCODE,OilRegion) *
                                   cDTUS(OilRegion))
                             +
                             coeff_cMERC_DS_rMERC_DSle(nHGCODE) *
                                   cMERC_DS(nHGCODE)
                
                             <=
                
                             0.
            }
            Comment: "balance row for mercury emissions from distillate, by mercury region (tons * 1000)";
        }
        Constraint rMERC_le {
            IndexDomain: (PlantType_ECP,nHGCODE);
            Text: "OML Rows: MERC_(**)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((CoalSupplyCurve,CoalDemandRegion_ALT1,numACI),
                             coeff_cCT_rMERC_le(PlantType_ECP,nHGCODE,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) *
                                   cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                             +
                             coeff_cMERC__rMERC_le(PlantType_ECP,nHGCODE) *
                                   cMERC_(PlantType_ECP,nHGCODE)
                
                             <=
                
                             0.
            }
            Comment: "balance row for mercury emissions by ECP coal type and mercury region (tons * 1000)";
        }
        Constraint rMERC_RSle {
            IndexDomain: (nHGCODE);
            Text: "OML Rows: MERC_RS(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             coeff_cMERC_RS_rMERC_RSle(nHGCODE) *
                                   cMERC_RS(nHGCODE)
                             +
                             sum((OilRegion),
                             coeff_cRTUS_rMERC_RSle(nHGCODE,OilRegion) *
                                   cRTUS(OilRegion))
                
                             <=
                
                             0.
            }
            Comment: "balance row for mercury emissions from residual fuel oil by mercury region (tons * 1000)";
        }
        Constraint rMERCURYle {
            IndexDomain: (nHGCODE);
            Text: "OML Rows: MERCURY(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantType_ECP),
                             coeff_cMERC__rMERCURYle(nHGCODE,PlantType_ECP) *
                                   cMERC_(PlantType_ECP,nHGCODE))
                             +
                             coeff_cMERC_DS_rMERCURYle(nHGCODE) *
                                   cMERC_DS(nHGCODE)
                             +
                             coeff_cMERC_RS_rMERCURYle(nHGCODE) *
                                   cMERC_RS(nHGCODE)
                             +
                             coeff_cT_STOCK__rMERCURYle(nHGCODE) *
                                   cT_STOCK_
                
                             <=
                
                             0.
            }
            Comment: "enforce mercury emission limit (if applicable) by mercury region (tons * 1000)";
        }
        Constraint rMRXge {
            IndexDomain: (PlantGroup);
            Text: "OML Rows: MR(*****)X";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((Season,OperatingMode),
                             coeff_cJ_rMRXge(PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((Season),
                             coeff_cJX_rMRXge(PlantGroup,Season) *
                                   cJX(PlantGroup,Season))
                             +
                             sum((SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((Season,OperatingMode),
                             coeff_cO_rMRXge(PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((Season),
                             coeff_cOX_rMRXge(PlantGroup,Season) *
                                   cOX(PlantGroup,Season))
                             +
                             sum((SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rMRXge(PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((Season,OperatingMode),
                             coeff_cU_rMRXge(PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                             +
                             sum((Season),
                             coeff_cUX_rMRXge(PlantGroup,Season) *
                                   cUX(PlantGroup,Season))
                
                             >=
                
                             coeff_cRHS_rMRXge(PlantGroup)
            }
            Comment: "require must-run plants to generate at specified level (or higher) (million kwh/10)";
        }
        Constraint rMVSO2le {
            IndexDomain: (CoalDemandRegion);
            Text: "OML Rows: MVSO2(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto),
                             coeff_cMVS_rMVSO2le(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *
                                   cMVS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto))
                
                             <=
                
                             coeff_cRHS_rMVSO2le(CoalDemandRegion)
            }
            Comment: "limit total SO2 allowance purchases (CSAPR) by coal region (thousand tons)";
        }
        Constraint rNGle {
            IndexDomain: (GasRegion,GasSeason);
            Text: "OML Rows: NG(**)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                             coeff_cB_rNGle(GasRegion,GasSeason,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                                   cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                             +
                             coeff_cGTUS_rNGle(GasRegion,GasSeason) *
                                   cGTUS(GasRegion,GasSeason)
                
                             <=
                
                             0.
            }
            Comment: "natural gas consumption balance row by gas region and gas season (trill BTU)";
        }
        Constraint rP2_le {
            IndexDomain: (SupplyRegion,Season);
            Text: "OML Rows: P2_(****)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantGroup,Slice),
                             coeff_cH_rP2_le(SupplyRegion,Season,PlantGroup,Slice) *
                                   cH(PlantGroup,Season,Slice))
                             +
                             sum((Slice),
                             coeff_cS2_rP2_le(SupplyRegion,Season,Slice) *
                                   cS2(SupplyRegion,Season,Slice))
                
                             <=
                
                             0.
            }
            Comment: "enforce storage requirements for demand storage (P2 technology) by EMM region and season (million kwh/10)";
        }
        Constraint rP2le {
            IndexDomain: (Slice,SupplyRegion,Season);
            Text: "OML Rows: P2(*)(****)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantGroup),
                             coeff_cH_rP2le(Slice,SupplyRegion,Season,PlantGroup) *
                                   cH(PlantGroup,Season,Slice))
                             +
                             coeff_cS2_rP2le(Slice,SupplyRegion,Season) *
                                   cS2(SupplyRegion,Season,Slice)
                
                             <=
                
                             coeff_cRHS_rP2le(Slice,SupplyRegion,Season)
            }
            Comment: "demand storage balance row by EMM region, season and slice (million kwh/10)";
        }
        Constraint rPS_le {
            IndexDomain: (SupplyRegion,Season);
            Text: "OML Rows: PS_(****)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantGroup,Slice),
                             coeff_cF_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *
                                   cF(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup,Slice),
                             coeff_cH_rPS_le(SupplyRegion,Season,PlantGroup,Slice) *
                                   cH(PlantGroup,Season,Slice))
                             +
                             sum((Slice),
                             coeff_cST_rPS_le(SupplyRegion,Season,Slice) *
                                   cST(SupplyRegion,Season,Slice))
                
                             <=
                
                             0.
            }
            Comment: "enforce storage requirements for pumped storage, by EMM region and season (million kwh/10)";
        }
        Constraint rRSle {
            IndexDomain: (CensusRegion);
            Text: "OML Rows: RS(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                             coeff_cB_rRSle(CensusRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                                   cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                             +
                             sum((OilRegion),
                             coeff_cRTUS_rRSle(CensusRegion,OilRegion) *
                                   cRTUS(OilRegion))
                
                             <=
                
                             0.
            }
            Comment: "residual fuel oil consumption balance row by oil (census) region (trill BTU)";
        }
        Constraint rS_CLle {
            IndexDomain: (CoalSupplyCurve,CoalType);
            Text: "OML Rows: S_CL(**)(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             coeff_cCoalOtherUsage_rS_CLle(CoalSupplyCurve,CoalType) *
                                   cCoalOtherUsage(CoalSupplyCurve)
                             +
                             sum((CoalProductionStep),
                             coeff_cCP_rS_CLle(CoalSupplyCurve,CoalType,CoalProductionStep) *
                                   cCP(CoalSupplyCurve,CoalType,CoalProductionStep))
                             +
                             sum((CoalDemandRegion_ALT1,PlantType_ECP,numACI),
                             coeff_cCT_rS_CLle(CoalSupplyCurve,CoalType,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *
                                   cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                
                             <=
                
                             0.
            }
            Comment: "coal supply balance row, by coal supply curve and coal type (trill BTU)";
        }
        Constraint rS_DSUSle {
            Text: "OML Rows: S_DSUS";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((DistillateProductionStep),
                             coeff_cDPUS_rS_DSUSle(DistillateProductionStep) *
                                   cDPUS(DistillateProductionStep))
                             +
                             sum((OilRegion),
                             coeff_cDTUS_rS_DSUSle(OilRegion) *
                                   cDTUS(OilRegion))
                
                             <=
                
                             0.
            }
            Comment: "Supply balance for distillate oil (trill BTU)";
        }
        Constraint rS_NGUSle {
            Text: "OML Rows: S_NGUS";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((GasProductionStep),
                             coeff_cGPUS_rS_NGUSle(GasProductionStep) *
                                   cGPUS(GasProductionStep))
                             +
                             sum((GasRegion,GasSeason),
                             coeff_cGTUS_rS_NGUSle(GasRegion,GasSeason) *
                                   cGTUS(GasRegion,GasSeason))
                
                             <=
                
                             0.
            }
            Comment: "Supply balance for natural gas (trill BTU)";
        }
        Constraint rS_RSUSle {
            Text: "OML Rows: S_RSUS";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((ResidProductionStep),
                             coeff_cRPUS_rS_RSUSle(ResidProductionStep) *
                                   cRPUS(ResidProductionStep))
                             +
                             sum((OilRegion),
                             coeff_cRTUS_rS_RSUSle(OilRegion) *
                                   cRTUS(OilRegion))
                
                             <=
                
                             0.
            }
            Comment: "Supply balance for residual fuel oil (trill BTU)";
        }
        Constraint rS_WD_allle {
            IndexDomain: (CoalDemandRegion_ALT2);
            Text: "OML Rows: S_WD(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                             coeff_cB_rS_WD_allle(CoalDemandRegion_ALT2,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                                   cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                             +
                             sum((BiomassType,BiomassProductionStep),
                             coeff_cBP_type_rS_WD_allle(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep) *
                                   cBP_type(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep))
                
                             <=
                
                             0.
            }
            Comment: "supply balance for total biomass by coal demand region (trill BTU)";
        }
        Constraint rS_WD_typele {
            IndexDomain: (BiomassType,CoalDemandRegion_ALT2);
            Text: "OML Rows: S_WD(**)(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((BiomassSector),
                             coeff_cBiomassOtherUsage_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassSector) *
                                   cBiomassOtherUsage(CoalDemandRegion_ALT2,BiomassSector,BiomassType))
                             +
                             sum((BiomassProductionStep),
                             coeff_cBP_type_rS_WD_typele(BiomassType,CoalDemandRegion_ALT2,BiomassProductionStep) *
                                   cBP_type(CoalDemandRegion_ALT2,BiomassType,BiomassProductionStep))
                
                             <=
                
                             0.
            }
            Comment: "supply balance for biomass supply type by coal demand region (trill BTU)";
        }
        Constraint rSRge {
            IndexDomain: (SupplyRegion,Season,Slice);
            Text: "OML Rows: SR(****)(*)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantGroup),
                             coeff_cF_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cF(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup),
                             coeff_cH_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cH(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup),
                             coeff_cI_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cI(PlantGroup,Season,Slice))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,OperatingMode),
                             coeff_cJ_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup),
                             coeff_cJX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cJX(PlantGroup,Season))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,OperatingMode),
                             coeff_cO_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup),
                             coeff_cOX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cOX(PlantGroup,Season))
                             +
                             sum((CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2),
                             coeff_cSC_rSRge(SupplyRegion,Season,Slice,CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2) *
                                   cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
                             +
                             coeff_cSPx_rSRge(SupplyRegion,Season,Slice) *
                                   cSPx(SupplyRegion,Season,Slice)
                             +
                             sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto),
                             coeff_cSR_rSRge(SupplyRegion,Season,Slice,SupplyRegion_ALTfrom,SupplyRegion_ALTto) *
                                   cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rSRge(SupplyRegion,Season,Slice,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,OperatingMode),
                             coeff_cU_rSRge(SupplyRegion,Season,Slice,PlantGroup,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup),
                             coeff_cUX_rSRge(SupplyRegion,Season,Slice,PlantGroup) *
                                   cUX(PlantGroup,Season))
                
                             >=
                
                             0.
            }
            Comment: "Spinning reserve balance row by region, season and time slice (GW)";
        }
        Constraint rSULFle {
            IndexDomain: (PlantType_ECP,SO2Region);
            Text: "OML Rows: SULF(**)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((CoalSupplyCurve,CoalDemandRegion_ALT1,numACI),
                             coeff_cCT_rSULFle(PlantType_ECP,SO2Region,CoalSupplyCurve,CoalDemandRegion_ALT1,numACI) *
                                   cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                             +
                             sum((OilRegion),
                             coeff_cRTUS_rSULFle(PlantType_ECP,SO2Region,OilRegion) *
                                   cRTUS(OilRegion))
                             +
                             coeff_cSULF_rSULFle(PlantType_ECP,SO2Region) *
                                   cSULF(PlantType_ECP,SO2Region)
                
                             <=
                
                             0.
            }
            Comment: "accumulate SO2 emissions by ECP plant type and SO2 region (thousand tons)";
        }
        Constraint rSULFURCRle {
            IndexDomain: (CoalDemandRegion);
            Text: "OML Rows: SULFUR(**)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI),
                             coeff_cCT_rSULFURCRle(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *
                                   cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                             +
                             sum((CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto),
                             coeff_cMVS_rSULFURCRle(CoalDemandRegion,CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto) *
                                   cMVS(CoalDemandRegion_ALTfrom,CoalDemandRegion_ALTto))
                             +
                             sum((OilRegion),
                             coeff_cRTUS_rSULFURCRle(CoalDemandRegion,OilRegion) *
                                   cRTUS(OilRegion))
                
                             <=
                
                             coeff_cRHS_rSULFURCRle(CoalDemandRegion)
            }
            Comment: "enforce SO2 limit (CSAPR) by coal region (thousand tons)";
        }
        Constraint rSULFURle {
            IndexDomain: (SO2Region);
            Text: "OML Rows: SULFUR(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((SO2Region_ALTFrom,SO2Region_ALTTo),
                             coeff_cMVSO2_rSULFURle(SO2Region,SO2Region_ALTFrom,SO2Region_ALTTo) *
                                   cMVSO2(SO2Region_ALTFrom,SO2Region_ALTTo))
                             +
                             sum((PlantType_ECP),
                             coeff_cSULF_rSULFURle(SO2Region,PlantType_ECP) *
                                   cSULF(PlantType_ECP,SO2Region))
                
                             <=
                
                             coeff_cRHS_rSULFURle(SO2Region)
            }
            Comment: "enforce SO2 limit (CAIR) by SO2 region (thousand tons)";
        }
        Constraint rT_le {
            IndexDomain: (CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD);
            Text: "OML Rows: T_(**)(*)_(*)Z";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             coeff_cC_Z_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD) *
                                   cC_Z(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
                             +
                             sum((PlantType_ECP,numACI),
                             coeff_cCT_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD,PlantType_ECP,numACI) *
                                   cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                
                             <=
                
                             coeff_cRHS_rT_le(CoalSupplyCurve,CoalDemandRegion_ALT1,nIFGD)
            }
            Comment: "enforce Tier 2 pricing if consumption is above Tier 1 limit by coal supply curve , coal demand region and scrubbed/unscrubbed type (trill BTU)";
        }
        Constraint rTCNle {
            IndexDomain: (CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice);
            Text: "OML Rows: TCN(*)(**)(*)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((CanadianSupplyStep),
                             coeff_cSC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *
                                   cSC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
                             +
                             sum((CanadianSupplyStep),
                             coeff_cTC_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice,CanadianSupplyStep) *
                                   cTC(CanadianSupplyRegion,CanadianSupplyStep,SupplyRegion_ALT2,Season,Slice))
                
                             <=
                
                             coeff_cRHS_rTCNle(CanadianSupplyRegion,SupplyRegion_ALT2,Season,Slice)
            }
            Comment: "limit imports from Canadian supply region to EMM region by season and slice (GW) - ensures total from supply steps doesn\'t exceed transmission capacit";
        }
        Constraint rTLle {
            IndexDomain: (SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice);
            Text: "OML Rows: TL(**)(**)(*)(*)";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             coeff_cTR_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                                   cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
                
                             <=
                
                             coeff_cRHS_rTLle(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice)
            }
            Comment: "enforce transmission constraint between EMM regions if trade can be used for spinning reserves, by season and slice (GW)";
        }
        Constraint rZFLRGeq {
            IndexDomain: (FuelRegion);
            Text: "OML Rows: ZFLRG(**)_";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((OGSMRegion),
                             coeff_cNTR_rZFLRGeq(FuelRegion,OGSMRegion) *
                                   cNTR(FuelRegion,OGSMRegion))
                             +
                             coeff_cNTX_rZFLRGeq(FuelRegion) *
                                   cNTX(FuelRegion)
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rZFLRGeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rZFLRGeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             =
                             0.
            }
            Comment: "balance row for captured CO2 from power plants and storage/use for EOR, by fuel region (million metric tons CO2)";
        }
        Constraint rZFLRGge {
            IndexDomain: (FuelRegion);
            Text: "OML Rows: ZFLRG(**)_";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((OGSMRegion),
                             coeff_cNTR_rZFLRGge(FuelRegion,OGSMRegion) *
                                   cNTR(FuelRegion,OGSMRegion))
                             +
                             coeff_cNTX_rZFLRGge(FuelRegion) *
                                   cNTX(FuelRegion)
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rZFLRGge(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rZFLRGge(FuelRegion,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             >=
                
                             0.
            }
        }
        Constraint rZFLRSeq {
            IndexDomain: (FuelRegion);
            Text: "OML Rows: ZFLRS(**)_";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cJ_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cJ_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                                   cJ(PlantGroup,Season,OperatingMode))
                             +
                             sum((OGSMRegion),
                             coeff_cNSR_rZFLRSeq(FuelRegion,OGSMRegion) *
                                   cNSR(FuelRegion,OGSMRegion))
                             +
                             coeff_cNSX_rZFLRSeq(FuelRegion) *
                                   cNSX(FuelRegion)
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cO_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cO_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                                   cO(PlantGroup,Season,OperatingMode))
                             +
                             sum((PlantGroup,SeasonCCS,OperatingMode),
                             coeff_cU_ALT_rZFLRSeq(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                                   cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                             +
                             sum((PlantGroup,Season,OperatingMode),
                             coeff_cU_rZFLRSeq(FuelRegion,PlantGroup,Season,OperatingMode) *
                                   cU(PlantGroup,Season,OperatingMode))
                
                             =
                             0.
            }
            Comment: "balance row for captured CO2 from power plants and storage/use for EOR, by fuel region with 45Q subsidy (million metric tons CO2)";
        }
        Constraint rZFLRSge {
            IndexDomain: (FuelRegion);
            Text: "OML Rows: ZFLRS(**)_";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((OGSMRegion),
                             coeff_cNSR_rZFLRSge(FuelRegion,OGSMRegion) *
                                   cNSR(FuelRegion,OGSMRegion))
                             +
                             coeff_cNSX_rZFLRSge(FuelRegion) *
                                   cNSX(FuelRegion)
                
                             >=
                
                             0.
            }
        }
        Constraint rZOGSMeq {
            IndexDomain: (OGSMRegion);
            Text: "OML Rows: ZOGSM(**)_";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((OGSMSector),
                             coeff_cNOT_rZOGSMeq(OGSMRegion,OGSMSector) *
                                   cNOT(OGSMSector,OGSMRegion))
                             +
                             coeff_cNOTSF_rZOGSMeq(OGSMRegion) *
                                   cNOTSF(OGSMRegion)
                             +
                             sum((FuelRegion),
                             coeff_cNSR_rZOGSMeq(OGSMRegion,FuelRegion) *
                                   cNSR(FuelRegion,OGSMRegion))
                             +
                             sum((OGSMRegion_ALTFrom,OGSMRegion_ALTTo),
                             coeff_cNTO_rZOGSMeq(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *
                                   cNTO(OGSMRegion_ALTFrom,OGSMRegion_ALTTo))
                             +
                             sum((FuelRegion),
                             coeff_cNTR_rZOGSMeq(OGSMRegion,FuelRegion) *
                                   cNTR(FuelRegion,OGSMRegion))
                
                             =
                             coeff_cRHS_rZOGSMeq(OGSMRegion)
            }
            Comment: "ensure total CO2 use for EOR matches purchases by OGSM region (million metric tons CO2)";
        }
        Constraint rZOTHRge {
            IndexDomain: (OGSMRegion);
            Text: "OML Rows: ZOTHR(**)_";
            Property: Bound, ShadowPrice, Level;
            Definition: {
                             sum((OGSMSector),
                             coeff_cNOT_rZOTHRge(OGSMRegion,OGSMSector) *
                                   cNOT(OGSMSector,OGSMRegion))
                             +
                             sum((OGSMRegion_ALTFrom,OGSMRegion_ALTTo),
                             coeff_cNTO_rZOTHRge(OGSMRegion,OGSMRegion_ALTFrom,OGSMRegion_ALTTo) *
                                   cNTO(OGSMRegion_ALTFrom,OGSMRegion_ALTTo))
                
                             >=
                
                             0.
            }
            Comment: "balance row for CO2 use in other sectors by OGSM region (million metric tons CO2)";
        }
        Parameter rACIOMCSTn {
            Text: "Free row in OML, Rows: ACIOMCST";
            Definition: {
                sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI),
                coeff_cCT_rACIOMCSTn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *
                      cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
            }
        }
        Parameter rACIRMVXXn {
            Text: "Free row in OML, Rows: ACIRMVXX";
            Definition: {
                sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI),
                coeff_cCT_rACIRMVXXn(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *
                      cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
            }
        }
        Parameter rCARBONABn {
            Text: "Free row in OML, Rows: CARBONAB";
            Definition: {
                sum((CarbonRegion),
                coeff_cCARBNK_rCARBONABn(CarbonRegion) *
                      cCARBNK(CarbonRegion))
                +
                sum((CarbonRegion),
                coeff_cCARESC_rCARBONABn(CarbonRegion) *
                      cCARESC(CarbonRegion))
                +
                sum((CarbonRegion),
                coeff_cCARFUE_rCARBONABn(CarbonRegion) *
                      cCARFUE(CarbonRegion))
                +
                sum((CarbonRegion),
                coeff_cCARIND_rCARBONABn(CarbonRegion) *
                      cCARIND(CarbonRegion))
                +
                sum((CarbonRegion),
                coeff_cCAROFF_rCARBONABn(CarbonRegion) *
                      cCAROFF(CarbonRegion))
                +
                sum((CarbonRegion),
                coeff_cCAROTH_rCARBONABn(CarbonRegion) *
                      cCAROTH(CarbonRegion))
                +
                sum((CarbonRegion),
                coeff_cCARREF_rCARBONABn(CarbonRegion) *
                      cCARREF(CarbonRegion))
                +
                sum((CarbonRegion),
                coeff_cCARRSV_rCARBONABn(CarbonRegion) *
                      cCARRSV(CarbonRegion))
                +
                sum((CarbonRegion),
                coeff_cCARUTL_rCARBONABn(CarbonRegion) *
                      cCARUTL(CarbonRegion))
            }
        }
        Parameter rCARBONn {
            IndexDomain: (CarbonRegion);
            Text: "Free row in OML, Rows: CARBON(**)";
            Definition: {
                sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                coeff_cB_rCARBONn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                      cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
                +
                coeff_cCARBONOT_rCARBONn(CarbonRegion) *
                      cCARBONOT
                +
                sum((SupplyRegion_ALT1),
                coeff_cCARDM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *
                      cCARDM(SupplyRegion_ALT1,CarbonRegion))
                +
                sum((SupplyRegion_ALT1),
                coeff_cCARIM_rCARBONn(CarbonRegion,SupplyRegion_ALT1) *
                      cCARIM(SupplyRegion_ALT1,CarbonRegion))
                +
                coeff_cCARUTL_rCARBONn(CarbonRegion) *
                      cCARUTL(CarbonRegion)
                +
                sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI),
                coeff_cCT_rCARBONn(CarbonRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *
                      cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                +
                sum((OilRegion),
                coeff_cDTUS_rCARBONn(CarbonRegion,OilRegion) *
                      cDTUS(OilRegion))
                +
                sum((GasRegion,GasSeason),
                coeff_cGTUS_rCARBONn(CarbonRegion,GasRegion,GasSeason) *
                      cGTUS(GasRegion,GasSeason))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((OilRegion),
                coeff_cRTUS_rCARBONn(CarbonRegion,OilRegion) *
                      cRTUS(OilRegion))
                +
                sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
                coeff_cSR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                      cSR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                +
                sum((SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice),
                coeff_cTR_rCARBONn(CarbonRegion,SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice) *
                      cTR(SupplyRegion_ALTfrom,SupplyRegion_ALTto,Season,Slice))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rCARBONn(CarbonRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rCARBONn(CarbonRegion,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rCARCLn {
            IndexDomain: (SupplyStates);
            Text: "Free row in OML, Rows: CARCL(**)";
            Definition: {
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rCARCLn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rCARCLn(SupplyStates,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rCAROGn {
            IndexDomain: (SupplyStates);
            Text: "Free row in OML, Rows: CAROG(**)";
            Definition: {
                sum((PlantGroup,Season,OperatingMode),
                coeff_cD_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) *
                      cD(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rCAROGn(SupplyStates,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rCAROGn(SupplyStates,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rCARSEQn {
            IndexDomain: (CarbonRegion);
            Text: "Free row in OML, Rows: CARSEQ(**)";
            Definition: {
                sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                coeff_cB_rCARSEQn(CarbonRegion,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                      cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
            }
        }
        Parameter rCFCPn {
            IndexDomain: (CoalDemandRegion_ALT1,nRCF);
            Text: "Free row in OML, Rows: CFCP(*)X(*)";
        }
        Parameter rCFGn {
            IndexDomain: (CoalDemandRegion_ALT1,PlantType_ECP);
            Text: "Free row in OML, Rows: CFG(*)(**)XX";
            Definition: {
                sum((FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption),
                coeff_cB_rCFGn(CoalDemandRegion_ALT1,PlantType_ECP,FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption) *
                      cB(FuelRegion_ALT1,PlantType,GenerationSeason,FuelShareOption))
            }
        }
        Parameter rCO2QFRn {
            IndexDomain: (FuelRegion);
            Text: "Free row in OML, Rows: CO2QFR(**)";
            Definition: {
                sum((PlantGroup,Season,OperatingMode),
                coeff_cD_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cD(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rCO2QFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rCO2QFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rCO2QNRn {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "Free row in OML, Rows: CO2QNR(**)";
            Definition: {
                sum((PlantGroup,Season,OperatingMode),
                coeff_cD_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cD(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rCO2QNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rCO2RNRn {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "Free row in OML, Rows: CO2RNR(**)";
            Definition: {
                sum((PlantGroup,Season,OperatingMode),
                coeff_cD_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cD(PlantGroup,Season,OperatingMode))
                +
                coeff_cGEESNR_rCO2RNRn(SupplyRegion_ALT2) *
                      cGEESNR(SupplyRegion_ALT2)
                +
                sum((SupplyRegion_ALT1,PlantType_ECP),
                coeff_cIGEN_rCO2RNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP) *
                      cIGEN(SupplyRegion_ALT1,PlantType_ECP))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rCO2RNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rCO2TFRn {
            IndexDomain: (FuelRegion);
            Text: "Free row in OML, Rows: CO2TFR(**)";
            Definition: {
                sum((PlantGroup,Season,OperatingMode),
                coeff_cD_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cD(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rCO2TFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rCO2TFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rCO2TNRn {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "Free row in OML, Rows: CO2TNR(**)";
            Definition: {
                sum((PlantGroup,Season,OperatingMode),
                coeff_cD_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cD(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rCO2TNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rELNOX0n {
            IndexDomain: (INOXP);
            Text: "Free row in OML, Rows: ELNOX0(*)";
            Definition: {
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,Season),
                coeff_cOX_rELNOX0n(INOXP,PlantGroup,Season) *
                      cOX(PlantGroup,Season))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rELNOX0n(INOXP,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rELNOX0n(INOXP,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rGENQFRn {
            IndexDomain: (FuelRegion);
            Text: "Free row in OML, Rows: GENQFR(**)";
            Definition: {
                sum((PlantGroup,Season,OperatingMode),
                coeff_cD_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cD(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rGENQFRn(FuelRegion,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rGENQFRn(FuelRegion,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rGENQNRn {
            IndexDomain: (SupplyRegion_ALT2);
            Text: "Free row in OML, Rows: GENQNR(**)";
            Definition: {
                sum((PlantGroup,Season,OperatingMode),
                coeff_cD_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cD(PlantGroup,Season,OperatingMode))
                +
                sum((SupplyRegion_ALT1,PlantType_ECP),
                coeff_cIGEN_rGENQNRn(SupplyRegion_ALT2,SupplyRegion_ALT1,PlantType_ECP) *
                      cIGEN(SupplyRegion_ALT1,PlantType_ECP))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cJ_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cJ_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cJ_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cJ(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cO_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cO_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cO_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cO(PlantGroup,Season,OperatingMode))
                +
                sum((PlantGroup,SeasonCCS,OperatingMode),
                coeff_cU_ALT_rGENQNRn(SupplyRegion_ALT2,PlantGroup,SeasonCCS,OperatingMode) *
                      cU_ALT(PlantGroup,SeasonCCS,OperatingMode))
                +
                sum((PlantGroup,Season,OperatingMode),
                coeff_cU_rGENQNRn(SupplyRegion_ALT2,PlantGroup,Season,OperatingMode) *
                      cU(PlantGroup,Season,OperatingMode))
            }
        }
        Parameter rGn {
            IndexDomain: (SupplyRegion,PlantType);
            Text: "Free row in OML, Rows: G(****)(***)";
            Definition: {
                sum((PlantGroup,Season),
                coeff_cJX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *
                      cJX(PlantGroup,Season))
                +
                sum((PlantGroup,Season),
                coeff_cOX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *
                      cOX(PlantGroup,Season))
                +
                sum((PlantGroup,Season),
                coeff_cUX_rGn(SupplyRegion,PlantType,PlantGroup,Season) *
                      cUX(PlantGroup,Season))
            }
        }
        Parameter rMERCURYn {
            IndexDomain: (nHGCODE);
            Text: "Free row in OML, Rows: MERCURY(*)";
            Definition: {
                sum((PlantType_ECP),
                coeff_cMERC__rMERCURYn(nHGCODE,PlantType_ECP) *
                      cMERC_(PlantType_ECP,nHGCODE))
                +
                coeff_cMERC_DS_rMERCURYn(nHGCODE) *
                      cMERC_DS(nHGCODE)
                +
                coeff_cMERC_RS_rMERCURYn(nHGCODE) *
                      cMERC_RS(nHGCODE)
                +
                coeff_cT_STOCK__rMERCURYn(nHGCODE) *
                      cT_STOCK_
            }
        }
        Parameter rSULFURCRn {
            IndexDomain: (CoalDemandRegion);
            Text: "Free row in OML, Rows: SULFUR(**)";
            Definition: {
                sum((CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI),
                coeff_cCT_rSULFURCRn(CoalDemandRegion,CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI) *
                      cCT(CoalSupplyCurve,CoalDemandRegion_ALT1,PlantType_ECP,numACI))
                +
                sum((OilRegion),
                coeff_cRTUS_rSULFURCRn(CoalDemandRegion,OilRegion) *
                      cRTUS(OilRegion))
            }
        }
        Parameter rSULFURn {
            IndexDomain: (SO2Region);
            Text: "Free row in OML, Rows: SULFUR(*)";
            Definition: {
                sum((PlantType_ECP),
                coeff_cSULF_rSULFURn(SO2Region,PlantType_ECP) *
                      cSULF(PlantType_ECP,SO2Region))
                +
                coeff_cT_STOCK__rSULFURn(SO2Region) *
                      cT_STOCK_
            }
        }
    }
    Procedure WriteToNEMS {
        Body: {
                OutToNEMS_FileName:="OutToNEMS_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt";
                put OutToNEMS; ! opens the file and sets stage for subsequent display and put statements
                display EFD_WithoutSafety.ProgramStatus ;
                display EFD_WithSafety.ProgramStatus ;
                display {cACISPLY.level, cACISPLY.NominalCoefficient, cACISPLY.lower, cACISPLY.upper, cACISPLY.ReducedCost} where decimals := 10 ;
                display {cBP_type.level, cBP_type.NominalCoefficient, coeff_cBP_type_LBOUND, coeff_cBP_type_UBOUND, cBP_type.ReducedCost} where decimals := 10 ;
                display {cB.level, cB.NominalCoefficient, cB.lower, cB.upper, cB.ReducedCost} where decimals := 10 ;
                display {cCARBNK.level, cCARBNK.NominalCoefficient, coeff_cCARBNK_LBOUND, coeff_cCARBNK_UBOUND, cCARBNK.ReducedCost} where decimals := 10 ;
                display {cCARESC.level, cCARESC.NominalCoefficient, cCARESC.lower, cCARESC.upper, cCARESC.ReducedCost} where decimals := 10 ;
                display {cCARLIM.level, cCARLIM.NominalCoefficient, coeff_cCARLIM_LBOUND, coeff_cCARLIM_UBOUND, cCARLIM.ReducedCost} where decimals := 10 ;
                display {cCAROFF.level, cCAROFF.NominalCoefficient, coeff_cCAROFF_LBOUND, coeff_cCAROFF_UBOUND, cCAROFF.ReducedCost} where decimals := 10 ;
                display {cCARRSV.level, cCARRSV.NominalCoefficient, coeff_cCARRSV_LBOUND, coeff_cCARRSV_UBOUND, cCARRSV.ReducedCost} where decimals := 10 ;
                display {cCARECR.level, cCARECR.NominalCoefficient, coeff_cCARECR_LBOUND, coeff_cCARECR_UBOUND, cCARECR.ReducedCost} where decimals := 10 ;
                display {cCARUTL.level, cCARUTL.NominalCoefficient, cCARUTL.lower, cCARUTL.upper, cCARUTL.ReducedCost} where decimals := 10 ;
                display {cCMNR.level, cCMNR.NominalCoefficient, cCMNR.lower, cCMNR.upper, cCMNR.ReducedCost} where decimals := 10 ;
                display {cCONCLB.level, cCONCLB.NominalCoefficient, coeff_cCONCLB_LBOUND, coeff_cCONCLB_UBOUND, cCONCLB.ReducedCost} where decimals := 10 ;
                display {cCONNGB.level, cCONNGB.NominalCoefficient, coeff_cCONNGB_LBOUND, coeff_cCONNGB_UBOUND, cCONNGB.ReducedCost} where decimals := 10 ;
                display {cD.level, cD.NominalCoefficient, coeff_cD_LBOUND, coeff_cD_UBOUND, cD.ReducedCost} where decimals := 10 ;
                display {cF.level, cF.NominalCoefficient, coeff_cF_LBOUND, coeff_cF_UBOUND, cF.ReducedCost} where decimals := 10 ;
                display {cGENCLB.level, cGENCLB.NominalCoefficient, coeff_cGENCLB_LBOUND, coeff_cGENCLB_UBOUND, cGENCLB.ReducedCost} where decimals := 10 ;
                display {cGENNGB.level, cGENNGB.NominalCoefficient, coeff_cGENNGB_LBOUND, coeff_cGENNGB_UBOUND, cGENNGB.ReducedCost} where decimals := 10 ;
                display {cH.level, cH.NominalCoefficient, coeff_cH_LBOUND, coeff_cH_UBOUND, cH.ReducedCost} where decimals := 10 ;
                display {cI.level, cI.NominalCoefficient, coeff_cI_LBOUND, coeff_cI_UBOUND, cI.ReducedCost} where decimals := 10 ;
                display {cJ.level, cJ.NominalCoefficient, coeff_cJ_LBOUND, coeff_cJ_UBOUND, cJ.ReducedCost} where decimals := 10 ;
                display {cJX.level, cJX.NominalCoefficient, coeff_cJX_LBOUND, coeff_cJX_UBOUND, cJX.ReducedCost} where decimals := 10 ;
                display {cMB.level, cMB.NominalCoefficient, coeff_cMB_LBOUND, coeff_cMB_UBOUND, cMB.ReducedCost} where decimals := 10 ;
                display {cNOT.level, cNOT.NominalCoefficient, coeff_cNOT_LBOUND, coeff_cNOT_UBOUND, cNOT.ReducedCost} where decimals := 10 ;
                display {cNOTSF.level, cNOTSF.NominalCoefficient, cNOTSF.lower, cNOTSF.upper, cNOTSF.ReducedCost} where decimals := 10 ;
                display {cNTO.level, cNTO.NominalCoefficient, cNTO.lower, cNTO.upper, cNTO.ReducedCost} where decimals := 10 ;
                display {cNTR.level, cNTR.NominalCoefficient, cNTR.lower, cNTR.upper, cNTR.ReducedCost} where decimals := 10 ;
                display {cNTX.level, cNTX.NominalCoefficient, cNTX.lower, cNTX.upper, cNTX.ReducedCost} where decimals := 10 ;
                display {cO.level, cO.NominalCoefficient, coeff_cO_LBOUND, coeff_cO_UBOUND, cO.ReducedCost} where decimals := 10 ;
                display {cOX.level, cOX.NominalCoefficient, coeff_cOX_LBOUND, coeff_cOX_UBOUND, cOX.ReducedCost} where decimals := 10 ;
                display {cS2.level, cS2.NominalCoefficient, coeff_cS2_LBOUND, coeff_cS2_UBOUND, cS2.ReducedCost} where decimals := 10 ;
                display {cSC.level, cSC.NominalCoefficient, cSC.lower, cSC.upper, cSC.ReducedCost} where decimals := 10 ;
                display {cSPx.level, cSPx.NominalCoefficient, coeff_cSPx_LBOUND, coeff_cSPx_UBOUND, cSPx.ReducedCost} where decimals := 10 ;
                display {cTC.level, cTC.NominalCoefficient, cTC.lower, cTC.upper, cTC.ReducedCost} where decimals := 10 ;
                display {cTR.level, cTR.NominalCoefficient, coeff_cTR_LBOUND, coeff_cTR_UBOUND, cTR.ReducedCost} where decimals := 10 ;
                display {cSR.level, cSR.NominalCoefficient, coeff_cSR_LBOUND, coeff_cSR_UBOUND, cSR.ReducedCost} where decimals := 10 ;
                display {cU.level, cU.NominalCoefficient, coeff_cU_LBOUND, coeff_cU_UBOUND, cU.ReducedCost} where decimals := 10 ;
                display {cUX.level, cUX.NominalCoefficient, coeff_cUX_LBOUND, coeff_cUX_UBOUND, cUX.ReducedCost} where decimals := 10 ;
                display {EFDCOSTS} where decimals := 10 ;
                display {rACIOMCSTn} where decimals := 10 ;
                display {rBTUXXle.level, rBTUXXle.lower, rBTUXXle.upper, rBTUXXle.ShadowPrice} where decimals := 10  ;
                display {rCARBONABeq.level, rCARBONABeq.lower, rCARBONABeq.upper, rCARBONABeq.ShadowPrice} where decimals := 10  ;
                display {rCARBONle.level, rCARBONle.lower, rCARBONle.upper, rCARBONle.ShadowPrice} where decimals := 10  ;
                display {rCARBONn} where decimals := 10 ;
                display {rCARCLn} where decimals := 10 ;
                display {rCAROGn} where decimals := 10 ;
                display {rCO2QFRn} where decimals := 10 ;
                display {rCO2QNRle.level, rCO2QNRle.lower, rCO2QNRle.upper, rCO2QNRle.ShadowPrice} where decimals := 10  ;
                display {rCO2QNRn} where decimals := 10 ;
                display {rCO2TFRn} where decimals := 10 ;
                display {rCO2TNRn} where decimals := 10 ;
                display {rCONCLeq.level, rCONCLeq.lower, rCONCLeq.upper, rCONCLeq.ShadowPrice} where decimals := 10  ;
                display {rCONNGeq.level, rCONNGeq.lower, rCONNGeq.upper, rCONNGeq.ShadowPrice} where decimals := 10  ;
                display {rELNOX0le.level, rELNOX0le.lower, rELNOX0le.upper, rELNOX0le.ShadowPrice} where decimals := 10  ;
                display {rGENCLeq.level, rGENCLeq.lower, rGENCLeq.upper, rGENCLeq.ShadowPrice} where decimals := 10  ;
                display {rGENNGeq.level, rGENNGeq.lower, rGENNGeq.upper, rGENNGeq.ShadowPrice} where decimals := 10  ;
                display {rGENQFRn} where decimals := 10 ;
                display {rGENQNRn} where decimals := 10 ;
                display {rGRDGNge.level, rGRDGNge.lower, rGRDGNge.upper, rGRDGNge.ShadowPrice} where decimals := 10  ;
                display {rGRDRTge.level, rGRDRTge.lower, rGRDRTge.upper, rGRDRTge.ShadowPrice} where decimals := 10  ;
                display {rLDge.level, rLDge.lower, rLDge.upper, rLDge.ShadowPrice} where decimals := 10  ;
                display {rMERC_DSle.level, rMERC_DSle.lower, rMERC_DSle.upper, rMERC_DSle.ShadowPrice} where decimals := 10  ;
                display {rMERC_le.level, rMERC_le.lower, rMERC_le.upper, rMERC_le.ShadowPrice} where decimals := 10  ;
                display {rMERC_RSle.level, rMERC_RSle.lower, rMERC_RSle.upper, rMERC_RSle.ShadowPrice} where decimals := 10  ;
                display {rMERCURYle.level, rMERCURYle.lower, rMERCURYle.upper, rMERCURYle.ShadowPrice} where decimals := 10  ;
                display {rMERCURYn} where decimals := 10 ;
                display {rMRXge.level, rMRXge.lower, rMRXge.upper, rMRXge.ShadowPrice} where decimals := 10  ;
                display {rS_WD_allle.level, rS_WD_allle.lower, rS_WD_allle.upper, rS_WD_allle.ShadowPrice} where decimals := 10  ;
                display {rS_WD_typele.level, rS_WD_typele.lower, rS_WD_typele.upper, rS_WD_typele.ShadowPrice} where decimals := 10  ;
                display {rSRge.level, rSRge.lower, rSRge.upper, rSRge.ShadowPrice} where decimals := 10  ;
                display {rSULFURle.level, rSULFURle.lower, rSULFURle.upper, rSULFURle.ShadowPrice} where decimals := 10  ;
                display {rSULFURn} where decimals := 10 ;
                display {rTCNle.level, rTCNle.lower, rTCNle.upper, rTCNle.ShadowPrice} where decimals := 10  ;
                display {rTLle.level, rTLle.lower, rTLle.upper, rTLle.ShadowPrice} where decimals := 10  ;
                display {rZFLRGeq.level, rZFLRGeq.lower, rZFLRGeq.upper, rZFLRGeq.ShadowPrice} where decimals := 10  ;
                display {rZFLRGge.level, rZFLRGge.lower, rZFLRGge.upper, rZFLRGge.ShadowPrice} where decimals := 10  ;
                display {rZOGSMeq.level, rZOGSMeq.lower, rZOGSMeq.upper, rZOGSMeq.ShadowPrice} where decimals := 10  ;
                display {rZOTHRge.level, rZOTHRge.lower, rZOTHRge.upper, rZOTHRge.ShadowPrice} where decimals := 10  ;
            put "! ==========================================================================" / ;
            put "! Remainder of solution used for validation only" / ;
            put "! ==========================================================================" / ;
            put " " ;
            if (AIMEFDBG = 1) then
                display {cBiomassOtherUsage.level, cBiomassOtherUsage.NominalCoefficient, coeff_cBiomassOtherUsage_LBOUND, coeff_cBiomassOtherUsage_UBOUND, cBiomassOtherUsage.ReducedCost} where decimals := 10 ;
                display {cBP.level, cBP.NominalCoefficient, cBP.lower, cBP.upper, cBP.ReducedCost} where decimals := 10 ;
                display {cBP_all.level, cBP_all.NominalCoefficient, cBP_all.lower, cBP_all.upper, cBP_all.ReducedCost} where decimals := 10 ;
                display {cBCTLN.level, cBCTLN.NominalCoefficient, coeff_cBCTLN_LBOUND, coeff_cBCTLN_UBOUND, cBCTLN.ReducedCost} where decimals := 10 ;
                display {cC_Z.level, cC_Z.NominalCoefficient, cC_Z.lower, cC_Z.upper, cC_Z.ReducedCost} where decimals := 10 ;
                display {cCAR.level, cCAR.NominalCoefficient, cCAR.lower, cCAR.upper, cCAR.ReducedCost} where decimals := 10 ;
                display {cCARBONOT.level, cCARBONOT.NominalCoefficient, coeff_cCARBONOT_LBOUND, coeff_cCARBONOT_UBOUND, cCARBONOT.ReducedCost} where decimals := 10 ;
                display {cCARDM.level, cCARDM.NominalCoefficient, coeff_cCARDM_LBOUND, coeff_cCARDM_UBOUND, cCARDM.ReducedCost} where decimals := 10 ;
                display {cCARFUE.level, cCARFUE.NominalCoefficient, coeff_cCARFUE_LBOUND, coeff_cCARFUE_UBOUND, cCARFUE.ReducedCost} where decimals := 10 ;
                display {cCARIM.level, cCARIM.NominalCoefficient, coeff_cCARIM_LBOUND, coeff_cCARIM_UBOUND, cCARIM.ReducedCost} where decimals := 10 ;
                display {cCARIND.level, cCARIND.NominalCoefficient, coeff_cCARIND_LBOUND, coeff_cCARIND_UBOUND, cCARIND.ReducedCost} where decimals := 10 ;
                display {cCAROTH.level, cCAROTH.NominalCoefficient, coeff_cCAROTH_LBOUND, coeff_cCAROTH_UBOUND, cCAROTH.ReducedCost} where decimals := 10 ;
                display {cCARREF.level, cCARREF.NominalCoefficient, coeff_cCARREF_LBOUND, coeff_cCARREF_UBOUND, cCARREF.ReducedCost} where decimals := 10 ;
                display {cCoalOtherUsage.level, cCoalOtherUsage.NominalCoefficient, coeff_cCoalOtherUsage_LBOUND, coeff_cCoalOtherUsage_UBOUND, cCoalOtherUsage.ReducedCost} where decimals := 10 ;
                display {cCP.level, cCP.NominalCoefficient, coeff_cCP_LBOUND, coeff_cCP_UBOUND, cCP.ReducedCost} where decimals := 10 ;
                display {cCT.level, cCT.NominalCoefficient, coeff_cCT_LBOUND, coeff_cCT_UBOUND, cCT.ReducedCost} where decimals := 10 ;
                display {cCTLHG.level, cCTLHG.NominalCoefficient, cCTLHG.lower, cCTLHG.upper, cCTLHG.ReducedCost} where decimals := 10 ;
                display {cCTLS.level, cCTLS.NominalCoefficient, cCTLS.lower, cCTLS.upper, cCTLS.ReducedCost} where decimals := 10 ;
                display {cDPUS.level, cDPUS.NominalCoefficient, cDPUS.lower, cDPUS.upper, cDPUS.ReducedCost} where decimals := 10 ;
                display {cDTUS.level, cDTUS.NominalCoefficient, cDTUS.lower, cDTUS.upper, cDTUS.ReducedCost} where decimals := 10 ;
                display {cDPVCP.level, cDPVCP.NominalCoefficient, coeff_cDPVCP_LBOUND, coeff_cDPVCP_UBOUND, cDPVCP.ReducedCost} where decimals := 10 ;
                display {cDX.level, cDX.NominalCoefficient, cDX.lower, cDX.upper, cDX.ReducedCost} where decimals := 10 ;
                display {cELNOX.level, cELNOX.NominalCoefficient, cELNOX.lower, cELNOX.upper, cELNOX.ReducedCost} where decimals := 10 ;
                display {cES.level, cES.NominalCoefficient, coeff_cES_LBOUND, coeff_cES_UBOUND, cES.ReducedCost} where decimals := 10 ;
                display {cESCNOX.level, cESCNOX.NominalCoefficient, cESCNOX.lower, cESCNOX.upper, cESCNOX.ReducedCost} where decimals := 10 ;
                display {cG.level, cG.NominalCoefficient, coeff_cG_LBOUND, coeff_cG_UBOUND, cG.ReducedCost} where decimals := 10 ;
                display {cGEESFR.level, cGEESFR.NominalCoefficient, cGEESFR.lower, cGEESFR.upper, cGEESFR.ReducedCost} where decimals := 10 ;
                display {cGEESNR.level, cGEESNR.NominalCoefficient, coeff_cGEESNR_LBOUND, coeff_cGEESNR_UBOUND, cGEESNR.ReducedCost} where decimals := 10 ;
                display {cGNUPFR.level, cGNUPFR.NominalCoefficient, cGNUPFR.lower, cGNUPFR.upper, cGNUPFR.ReducedCost} where decimals := 10 ;
                display {cGNUPNR.level, cGNUPNR.NominalCoefficient, cGNUPNR.lower, cGNUPNR.upper, cGNUPNR.ReducedCost} where decimals := 10 ;
                display {cGPUS.level, cGPUS.NominalCoefficient, coeff_cGPUS_LBOUND, coeff_cGPUS_UBOUND, cGPUS.ReducedCost} where decimals := 10 ;
                display {cGTUS.level, cGTUS.NominalCoefficient, cGTUS.lower, cGTUS.upper, cGTUS.ReducedCost} where decimals := 10 ;
                display {cIGEN.level, cIGEN.NominalCoefficient, coeff_cIGEN_LBOUND, coeff_cIGEN_UBOUND, cIGEN.ReducedCost} where decimals := 10 ;
                display {cJ_ALT.level, cJ_ALT.NominalCoefficient, coeff_cJ_ALT_LBOUND, coeff_cJ_ALT_UBOUND, cJ_ALT.ReducedCost} where decimals := 10 ;
                display {cKX.level, cKX.NominalCoefficient, cKX.lower, cKX.upper, cKX.ReducedCost} where decimals := 10 ;
                display {cMERC_.level, cMERC_.NominalCoefficient, cMERC_.lower, cMERC_.upper, cMERC_.ReducedCost} where decimals := 10 ;
                display {cMERC_DS.level, cMERC_DS.NominalCoefficient, cMERC_DS.lower, cMERC_DS.upper, cMERC_DS.ReducedCost} where decimals := 10 ;
                display {cMERC_OT.level, cMERC_OT.NominalCoefficient, cMERC_OT.lower, cMERC_OT.upper, cMERC_OT.ReducedCost} where decimals := 10 ;
                display {cMERC_RS.level, cMERC_RS.NominalCoefficient, cMERC_RS.lower, cMERC_RS.upper, cMERC_RS.ReducedCost} where decimals := 10 ;
                display {cMVS.level, cMVS.NominalCoefficient, cMVS.lower, cMVS.upper, cMVS.ReducedCost} where decimals := 10 ;
                display {cMVSO2.level, cMVSO2.NominalCoefficient, cMVSO2.lower, cMVSO2.upper, cMVSO2.ReducedCost} where decimals := 10 ;
                display {cNSR.level, cNSR.NominalCoefficient, cNSR.lower, cNSR.upper, cNSR.ReducedCost} where decimals := 10 ;
                display {cNSX.level, cNSX.NominalCoefficient, cNSX.lower, cNSX.upper, cNSX.ReducedCost} where decimals := 10 ;
                display {cO_ALT.level, cO_ALT.NominalCoefficient, coeff_cO_ALT_LBOUND, coeff_cO_ALT_UBOUND, cO_ALT.ReducedCost} where decimals := 10 ;
                display {cRPUS.level, cRPUS.NominalCoefficient, cRPUS.lower, cRPUS.upper, cRPUS.ReducedCost} where decimals := 10 ;
                display {cRTUS.level, cRTUS.NominalCoefficient, cRTUS.lower, cRTUS.upper, cRTUS.ReducedCost} where decimals := 10 ;
                display {cST.level, cST.NominalCoefficient, coeff_cST_LBOUND, coeff_cST_UBOUND, cST.ReducedCost} where decimals := 10 ;
                display {cSULF.level, cSULF.NominalCoefficient, cSULF.lower, cSULF.upper, cSULF.ReducedCost} where decimals := 10 ;
                display {cT_STOCK_.level, cT_STOCK_.NominalCoefficient, coeff_cT_STOCK__LBOUND, coeff_cT_STOCK__UBOUND, cT_STOCK_.ReducedCost} where decimals := 10 ;
                display {cU_ALT.level, cU_ALT.NominalCoefficient, coeff_cU_ALT_LBOUND, coeff_cU_ALT_UBOUND, cU_ALT.ReducedCost} where decimals := 10 ;
                display {rACICSTle.level, rACICSTle.lower, rACICSTle.upper, rACICSTle.ShadowPrice} where decimals := 10  ;
                display {rACIRMVXXn} where decimals := 10 ;
                display {rBTUle.level, rBTUle.lower, rBTUle.upper, rBTUle.ShadowPrice} where decimals := 10  ;
                display {rCARBONABn} where decimals := 10 ;
                display {rCARSEQn} where decimals := 10 ;
                display {rCBle.level, rCBle.lower, rCBle.upper, rCBle.ShadowPrice} where decimals := 10  ;
                display {rCFCPn} where decimals := 10 ;
                display {rCFGn} where decimals := 10 ;
                display {rCLle.level, rCLle.lower, rCLle.upper, rCLle.ShadowPrice} where decimals := 10  ;
                display {rCNCPle.level, rCNCPle.lower, rCNCPle.upper, rCNCPle.ShadowPrice} where decimals := 10  ;
                display {rCO2RNRn} where decimals := 10 ;
                display {rDSle.level, rDSle.lower, rDSle.upper, rDSle.ShadowPrice} where decimals := 10  ;
                display {rDVle.level, rDVle.lower, rDVle.upper, rDVle.ShadowPrice} where decimals := 10  ;
                display {rELNOX0n} where decimals := 10 ;
                display {rELNOXle.level, rELNOXle.lower, rELNOXle.upper, rELNOXle.ShadowPrice} where decimals := 10  ;
                display {rENeq.level, rENeq.lower, rENeq.upper, rENeq.ShadowPrice} where decimals := 10  ;
                display {rENle.level, rENle.lower, rENle.upper, rENle.ShadowPrice} where decimals := 10  ;
                display {rEXle.level, rEXle.lower, rEXle.upper, rEXle.ShadowPrice} where decimals := 10  ;
                display {rFle.level, rFle.lower, rFle.upper, rFle.ShadowPrice} where decimals := 10  ;
                display {rGn} where decimals := 10 ;
                display {rIMle.level, rIMle.lower, rIMle.upper, rIMle.ShadowPrice} where decimals := 10  ;
                display {rK_ge.level, rK_ge.lower, rK_ge.upper, rK_ge.ShadowPrice} where decimals := 10  ;
                display {rMBge.level, rMBge.lower, rMBge.upper, rMBge.ShadowPrice} where decimals := 10  ;
                display {rMVSO2le.level, rMVSO2le.lower, rMVSO2le.upper, rMVSO2le.ShadowPrice} where decimals := 10  ;
                display {rNGle.level, rNGle.lower, rNGle.upper, rNGle.ShadowPrice} where decimals := 10  ;
                display {rP2_le.level, rP2_le.lower, rP2_le.upper, rP2_le.ShadowPrice} where decimals := 10  ;
                display {rP2le.level, rP2le.lower, rP2le.upper, rP2le.ShadowPrice} where decimals := 10  ;
                display {rPS_le.level, rPS_le.lower, rPS_le.upper, rPS_le.ShadowPrice} where decimals := 10  ;
                display {rRSle.level, rRSle.lower, rRSle.upper, rRSle.ShadowPrice} where decimals := 10  ;
                display {rS_CLle.level, rS_CLle.lower, rS_CLle.upper, rS_CLle.ShadowPrice} where decimals := 10  ;
                display {rS_DSUSle.level, rS_DSUSle.lower, rS_DSUSle.upper, rS_DSUSle.ShadowPrice} where decimals := 10  ;
                display {rS_NGUSle.level, rS_NGUSle.lower, rS_NGUSle.upper, rS_NGUSle.ShadowPrice} where decimals := 10  ;
                display {rS_RSUSle.level, rS_RSUSle.lower, rS_RSUSle.upper, rS_RSUSle.ShadowPrice} where decimals := 10  ;
                display {rSULFle.level, rSULFle.lower, rSULFle.upper, rSULFle.ShadowPrice} where decimals := 10  ;
                display {rSULFURCRle.level, rSULFURCRle.lower, rSULFURCRle.upper, rSULFURCRle.ShadowPrice} where decimals := 10  ;
                display {rSULFURCRn} where decimals := 10 ;
                display {rT_le.level, rT_le.lower, rT_le.upper, rT_le.ShadowPrice} where decimals := 10  ;
                display {rZFLRSeq.level, rZFLRSeq.lower, rZFLRSeq.upper, rZFLRSeq.ShadowPrice} where decimals := 10  ;
                display {rZFLRSge.level, rZFLRSge.lower, rZFLRSge.upper, rZFLRSge.ShadowPrice} where decimals := 10  ;
                endif;
                putclose;
        }
    }
    DeclarationSection PassBacktoNEMSDeclare {
        ElementParameter NEMSYearIndex {
            Range: MNUMYR_;
        }
        Parameter SupplyRegionNumber {
            Range: integer;
        }
    }
    Procedure PassBackToNEMS {
        Body: {
                  OutToNEMS_FileName:="PassBack_"+formatstring("%i",curcalyr(1))+"_"+formatstring("%>02i",curitr(1))+".txt";
                  put OutToNEMS; ! opens the file and sets stage for subsequent display and put statements
            ! output the EMM variables derived from the LP solution values
                  display {ACICST} where decimals := 10 ;
                  display {ACIOAM} where decimals := 10 ;
                  display {ACI_CST} where decimals := 10 ;
                  display {ACI_QAC} where decimals := 10 ;
                  display {BEC_IMP} where decimals := 10 ;
                  display {CAREFD} where decimals := 10 ;
                  display {CARTGT} where decimals := 10 ;
                  display {CHKGEN} where decimals := 10 ;
                  display {CO2_ERCFR} where decimals := 10 ;
                  display {CO2_ERCNR} where decimals := 10 ;
                  display {CO2_PLTSW} where decimals := 10 ;
                  display {CO2_STDQE} where decimals := 10 ;
                  display {CO2_STDQF} where decimals := 10 ;
                  display {CO2_STDQN} where decimals := 10 ;
                  display {CO2_STDRE} where decimals := 10 ;
                  display {CO2_STDRF} where decimals := 10 ;
                  display {CO2_STDRN} where decimals := 10 ;
                  display {CTLHGEM} where decimals := 10 ;
                  display {CTLNOXEM} where decimals := 10 ;
                  display {CTLSO2EM} where decimals := 10 ;
                  display {ECARCLF} where decimals := 10 ;
                  display {ECARCLS} where decimals := 10 ;
                  display {ECAROGF} where decimals := 10 ;
                  display {ECAROGS} where decimals := 10 ;
                  display {ECDSPC} where decimals := 10 ;
                  display {ECDSPE} where decimals := 10 ;
                  display {ECDSPF} where decimals := 10 ;
                  display {ECO2ERPR} where decimals := 10 ;
                  display {ECO2ERQF} where decimals := 10 ;
                  display {ECO2ERQY} where decimals := 10 ;
                  display {ECO2ERRT} where decimals := 10 ;
                  display {ECO2ERTL} where decimals := 10 ;
                  display {ECO2FRPR} where decimals := 10 ;
                  display {ECO2FRQF} where decimals := 10 ;
                  display {ECO2FRQY} where decimals := 10 ;
                  display {ECO2FRRT} where decimals := 10 ;
                  display {ECO2FRTL} where decimals := 10 ;
                  display {ECO2NRPR} where decimals := 10 ;
                  display {ECO2NRQF} where decimals := 10 ;
                  display {ECO2NRQY} where decimals := 10 ;
                  display {ECO2NRRT} where decimals := 10 ;
                  display {ECO2NRTL} where decimals := 10 ;
                  display {ECPPRCFL} where decimals := 10 ;
                  display {ECPPRCNL} where decimals := 10 ;
                  display {ECSTFREE} where decimals := 10 ;
                  display {ECSTNREE} where decimals := 10 ;
                  display {EECF} where decimals := 10 ;
                  display {EECN} where decimals := 10 ;
                  display {EEIF} where decimals := 10 ;
                  display {EEIN} where decimals := 10 ;
                  display {EERCNRPM} where decimals := 10 ;
                  display {EERCNRPR} where decimals := 10 ;
                  display {EERCNRQM} where decimals := 10 ;
                  display {EERCNRQR} where decimals := 10 ;
                  display {EERF} where decimals := 10 ;
                  display {EERN} where decimals := 10 ;
                  display {EFDPRCFL} where decimals := 10 ;
                  display {EFDPRCNL} where decimals := 10 ;
                  display {EFD_LCAR} where decimals := 10 ;
                  display {EFD_MIN} where decimals := 10 ;
                  display {EFD_PCAR} where decimals := 10 ;
                  display {EFD_QCAR} where decimals := 10 ;
                  display {EFD_RANK} where decimals := 10 ;
                  display {EGENERQF} where decimals := 10 ;
                  display {EGENERTL} where decimals := 10 ;
                  display {EGENFREE} where decimals := 10 ;
                  display {EGENFRQF} where decimals := 10 ;
                  display {EGENFRTL} where decimals := 10 ;
                  display {EGENNREE} where decimals := 10 ;
                  display {EGENNRQF} where decimals := 10 ;
                  display {EGENNRTL} where decimals := 10 ;
                  display {ELGENE} where decimals := 10 ;
                  display {EMMBMDUAL} where decimals := 10 ;
                  display {EMM_CL_BTUs} where decimals := 10 ;
                  display {EMM_MEF} where decimals := 10 ;
                  display {EMRFNA} where decimals := 10 ;
                  display {ETDIMERG} where decimals := 10 ;
                  display {ETDMDERG} where decimals := 10 ;
                  display {ETDMMERG} where decimals := 10 ;
                  display {FCLSH} where decimals := 10 ;
                  display {FGSSH} where decimals := 10 ;
                  display {FOLSH} where decimals := 10 ;
                  display {FWDSH} where decimals := 10 ;
                  display {NMARCST} where decimals := 10 ;
                  display {NWGPSGEN} where decimals := 10 ;
                  display {OGCO2QEM} where decimals := 10 ;
                  display {PBMPWCL} where decimals := 10 ;
                  display {QBMPWCL} where decimals := 10 ;
                  display {RMPOOL} where decimals := 10 ;
                  display {TST_HG} where decimals := 10 ;
                  display {TST_NOX} where decimals := 10 ;
                  display {TST_SO2} where decimals := 10 ;
                  display {UCARPRC} where decimals := 10 ;
                  display {UCRNW} where decimals := 10 ;
                  display {UCRPS} where decimals := 10 ;
                  display {UIHYR} where decimals := 10 ;
                  display {ULCO2CST} where decimals := 10 ;
                  display {ULTGEN} where decimals := 10 ;
                  display {UPFUEL} where decimals := 10 ;
                  display {UQCOAL} where decimals := 10 ;
                  display {UTCNSTSL} where decimals := 10 ;
                  display {UTCO2QEM} where decimals := 10 ;
                  display {UTDMDE} where decimals := 10 ;
                  display {UTDMDF} where decimals := 10 ;
                  display {UTDMME} where decimals := 10 ;
                  display {UTDMMF} where decimals := 10 ;
                  display {UTECON} where decimals := 10 ;
                  display {UTECONSL} where decimals := 10 ;
                  display {UTEXDE} where decimals := 10 ;
                  display {UTEXDF} where decimals := 10 ;
                  display {UTEXME} where decimals := 10 ;
                  display {UTEXMF} where decimals := 10 ;
                  display {UTEXPE} where decimals := 10 ;
                  display {UTEXPF} where decimals := 10 ;
                  display {UTHTP2} where decimals := 10 ;
                  display {UTIMPE} where decimals := 10 ;
                  display {UTIMPF} where decimals := 10 ;
                  display {UTSALES} where decimals := 10 ;
                  display {XCL_TYPE} where decimals := 10 ;
                  display {UFRSO2Q} where decimals := 10 ;
                  display {UFRSO2R} where decimals := 10 ;
            ! write variables with implicit year and region indices as implemented via direct access files in nems.
            ! use NEMSYearIndex to set the Year and SupplyRegionNumber to set the Region   
                  NEMSYearIndex:=stringtoelement(mnumyr_,FormatString("%02i", CURCALYR('1')-1989));
                  for (SupplyRegion in SupplyRegion_) do
                    SupplyRegionNumber:=ord(SupplyRegion);
                    display SupplyRegionNumber;
                    display {ECCOPM(DispPlantGroup,Season,SupplyRegion)} where decimals := 10 ;
                    display {EFHCNT(FuelType,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {EFRCO2(FuelType,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {EFRHG(FuelType,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {EFRNOX(FuelType,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {EFRSO2(FuelType,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {EPFLPR(FuelType,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {EPFUEL(FuelType,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {ETDMDE(SCALARSet,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {ETDMDF(SCALARSet,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {ETDMME(SCALARSet,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {ETDMMF(SCALARSet,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {ETEXPD(SCALARSet,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {ETEXPF(SCALARSet,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {ETIMPD(SCALARSet,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {ETIMPE(SCALARSet,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                    display {ETIMPF(SCALARSet,SupplyRegion,NEMSYearIndex)} where decimals := 10 ;
                  endfor;
                  putclose;
        }
    }
}
