## ams_version=1.0

Model Main_Coal {
	Section DbConn {
		DeclarationSection DbConnStr {
			StringParameter CPSConnectionString;
			StringParameter CMMConnectionString;
			StringParameter CMM2ConnectionString;
			StringParameter DirectoryName;
			ElementParameter epODBCDriver {
				Range: sODBCDrivers;
			}
			StringParameter CoalOutConnectionString;
			StringParameter AccessDatabaseFile;
			Set sODBCDrivers {
				Index: iOdbcDrivers;
			}
		}
	}
	Procedure CreateAccessFileConnectionString {
		Arguments: (AccessDatabaseFile,ConnectionString);
		Body: {
			
			!Find all ODBC drivers
			while LoopCount <= SQLNumberOfDrivers( 'odbc' ) do
			    SetElementAdd(
			        Setname : sODBCDrivers ,
			        Elempar : epODBCDriver ,
			        Newname : SQLDriverName( 'ODBC' , Loopcount) ) ;
			
			endwhile ;
			
			!First try to find the driver that handles both access 2007 and up
			!drivers (i.e. .accdb)
			epODBCDriver := first( iOdbcDrivers |
			                       FindString(iOdbcDrivers,"*.accdb" ));
			
			!if that does not exist, then try to find the driver that
			!handles .mdb files
			if not epODBCDriver then
			    epODBCDriver := first( iOdbcDrivers |
			                               FindString(iOdbcDrivers,"*.mdb"));
			endif ;
			
			!If we also could not find this driver, we have a problem...
			if not epODBCDriver then
			    raise error "Could not find MS Access ODBC driver!" ;
			endif ;
			
			!Now we can create the connection string based on the name of the
			!driver, the name of the database. We provide the DefaultDir as
			!an additional argument to ensure that paths relative to the
			!prj file will work also. If you provide an absolute path as the
			!first argument, the ODBC layer will discard the DefaultDir information.
			
			!DirectoryGetCurrent(DirectoryName);
			
			ConnectionString := SQLCreateConnectionString(
			    DatabaseInterface              :  'odbc',
			    DriverName                     :  epODBCDriver,
			    DatabaseName                   :  AccessDatabaseFile,
			    AdditionalConnectionParameters :  ";DefaultDir=.\\") ;
			
			!Set sODBCDrivers {
			!    Index: iOdbcDrivers;
			!}
			!
			!ElementParameter epODBCDriver {
			!    Range: sODBCDrivers;
			!}
			
			!StringParameter AccessDatabaseFile {
			!    Property: Input;
			!}
			
			!StringParameter ConnectionString {
			!    Property: Output;
			!}
			!
		}
		StringParameter AccessDatabaseFile {
			Property: Input;
		}
		StringParameter ConnectionString {
			Property: Output;
		}
	}
	Procedure MainExecution {
		Body: {
			
			
			                    ReadGlobalDataFromNEMS; ! read globaldatatoAIMMS_yyyy_ii.txt where yyyy is ncntrl_curcalyr(1) and ii is ncntrl_curitr(1)
			
			                    if ncntrl_curcalyr(1) = cpsbaseyr then
			                                      SaveGlobal("cases\\global_data");
			                    endif;
			
			                    !loading the variables into memory that are lagged and needed for pricing equation
			                    if ((ncntrl_curcalyr(1) = cpsbaseyr and (ncntrl_curitr('1') > 1)) or (ncntrl_curcalyr(1) > cpsbaseyr)) then
			                                      CMMLagDataLoad("cases\\CMMLagData");
			                    endif;  
			
					SetUpRateEscalators;  !Added with convertions to new AIMMS version
			
			                    !If you need to be consistent with AEO2016 uncomment the following statement
			                    !CurrentSolver('LP') := StringToElement(AllSolvers, "CPLEX 12.5.1") ; !AEO2016 Solver
			
			                                   !Make sure access tables are empty before filling them
			                                   !if ncntrl_curcalyr(1) = cpsbaseyr and ncntrl_curitr('1')= 1 then
			                                   !EmptyEMMDBTables;  !the EMMDBTables are currently time consuming to output so relying on Excel file instead
			                                   !endif;
			
			                    if(AIMCLSolvDebug=1) then ! for validation/debugging, options vary
			                                        option display_infeasibility_analysis:=1,
			                                                linear_presolve:="off",
			                                                eliminate_nonvar_columns:="off",
			                                                infeasibility_finder:="on",
			                                                postsolve_continuous_variables:="no rounding",
			                                                Store_complete_solver_solution:="yes",
			                                                solver_column_row_mapping:="at_every_solve",
			                                                "CPLEX_12_10".MPS := "at every solve";
			                    else ! use speed-up options; effect of some options vary depending on the lp. presolve may increase total time with this LP; postsolve rounding seemed to speed it up a lot.
			                                         option display_infeasibility_analysis:="off",
			                                                linear_presolve:="off", 
			                                                eliminate_nonvar_columns:="automatic",
			                                                infeasibility_finder:="off",
			                                                postsolve_continuous_variables:="round to nearest bound",
			                                                !postsolve_continuous_variables:="no rounding",
			                                                Store_complete_solver_solution:="no",
			                                                solver_column_row_mapping:="never",
			                                                "CPLEX_12_10".MPS := "never";
			                    endif;            
			                                   !if ncntrl_curcalyr(1) < cpsbaseyr then
			                                   !	OverwritesFixForHistory;
			                                   !endif;
			             if ncntrl_curcalyr(1) > cpsbaseyr - 1 then
			                        CurrentStudyYear := ncntrl_curcalyr(1);
			
			                       PreviousYear := ncntrl_curcalyr(1)-1 ;
			             !          for cyr | (val(cyr) = CurrentStudyYear) do       !yda: for- loop takes more time than setting an element parameter with cyr range
			                                                   coalout_coalcode(1) := 0; !assume feasible =0
			
			                             if ncntrl_curcalyr(1) = cpsbaseyr and ncntrl_curitr(1) = 1 then
			                                   		CalculationOfCoalPricingEquationBaseYearItr1;
			                                   	EMM_CL_BTUs_A(pu_id,cyr) :=  BY_CoalPlantDeliveries_A(pu_id,cyr); ! Added by DAF 9/12/19
			                                   	EMM_CL_BTUs_A_Alt(pu_id,cyr) :=  BY_CoalPlantDeliveries_A(pu_id,cyr); ! Added by DAF 9/30/21
			                                   	EMM_CL_BTUs_A_AltScrv(pu_id,MX_NCI,cyr) :=  BY_CoalPlantDeliveriesWscrv_A(pu_id,MX_NCI,cyr);
			                             else
			                                            CalculationOfCoalPricingEquation;
			                                    EMM_CL_BTUs_A(pu_id,cyr) := Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,cyr),EMM_CL_BTUs_B(pu_id,MNUMYR));
			                                    ! Added by DAF 9/12/19 to use base year plant level btus for contracts calculated in itteration 1        
			                                    if ncntrl_curitr(1) = 1 then
			                                    	EMM_CL_BTUs_A_Alt(pu_id,cyr) :=  BY_CoalPlantDeliveries_A(pu_id,cyr);
			                                    	EMM_CL_BTUs_A_AltScrv(pu_id,MX_NCI,cyr) :=  BY_CoalPlantDeliveriesWscrv_A(pu_id,MX_NCI,cyr);
			                                    else        
			                                    	EMM_CL_BTUs_A_Alt(pu_id,cyr) := Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,cyr),EMM_CL_BTUs_B(pu_id,MNUMYR));
			                                    	EMM_CL_BTUs_A_AltScrv(pu_id,MX_NCI,cyr) :=  BY_CoalPlantDeliveriesWscrv_A(pu_id,MX_NCI,cyr);
			                                    endif;
			                             endif;
			            		! this is for STEO easy button on Exports
			            		if ncntrl_curitr(1)=1 then
			            			ExportMultCokeKeep(cyr) := 1.00;
			            			ExportMultSteamKeep(cyr) := 1.00;
			            		endif;
			
			
			            		!This is the main AIMMS solver call for coal model
			                             solve PartialLeastCostDomesticCoal;
			                             EscapeVectorCheck();
			                            !WriteEscapeVectorTotal;
			                            !adding definitions below that need to occur after the model is run otherwise cause a cyclic error
			                             SupplyCurveStepBalShadow3((Scrv1,SReg, Sulf, Mtyp, Rank,cyr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)) :=
			                             						   if SupplyCurveStepBalShadow2(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) > 10 then
			                                                                                    sc_1_price87(Scrv1,SReg, Sulf, Mtyp, Rank,'5',cyr)*1.0697
			                                                                               else
			                                                                                    SupplyCurveStepBalShadow2(Scrv1,SReg, Sulf, Mtyp, Rank,cyr)
			                                                                               endif;
			
			                   		ResultMessage(CurrentStudyYear,Itr_Element) := PartialLeastCostDomesticCoal.ProgramStatus;
			                            SupplyCurveStepBalShadow4((Scrv1,SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)) 
			                                                                                    :=SupplyCurveStepBalShadow3(Scrv1,SReg, Sulf, Mtyp, Rank,cyr)*Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
			                            SupplyCurveStepBalShadow5((Scrv1,SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)) 
			                                                                                    :=SupplyCurveStepBalShadow4(Scrv1,SReg, Sulf, Mtyp, Rank,cyr);
			                            ShadowDomesticElectricityDemand(pt2,DReg,cyr)   	:=DomesticElectricityDemandRequirement.ShadowPrice(pt2,DReg,cyr)*mc_jpgdp(CPSBaseYr);
			                            ShadowResidCommDemand(ResSec,DReg,cyr)   		:=ResidentialDemandRequirement.ShadowPrice(ResSec,DReg,cyr)*mc_jpgdp(CPSBaseYr);
			                            ShadowIndustrialDemand(IndSec,DReg,cyr)   		:=IndustrialDemandRequirement.ShadowPrice(IndSec,DReg,cyr)*mc_jpgdp(CPSBaseYr);
			                            ShadowCokingDemand(CokSec,DReg,cyr)   			:=CokingDemandRequirement.ShadowPrice(CokSec,DReg,cyr)*mc_jpgdp(CPSBaseYr);
			                            ShadowThermExpSecExportDemand(USe,cyr)   		:=LinkUSDomesticThermalExportsWithInternational.ShadowPrice(USe,cyr)*mc_jpgdp(CPSBaseYr);
			                            ShadowCokeExpSecExportDemand(USe,cyr)   		:=LinkUSDomesticCokingExportsWithInternational.ShadowPrice(USe,cyr)*mc_jpgdp(CPSBaseYr);
			                            LevelResidCommDemand(ResSec,DReg,cyr)   		:=ResidentialDemandRequirement.Level(ResSec,DReg,cyr);
			                            LevelIndustrialDemand(IndSec,DReg,cyr)   		:=IndustrialDemandRequirement.Level(IndSec,DReg,cyr);
			                            LevelCokingDemand(CokSec,DReg,cyr)   			:=CokingDemandRequirement.Level(CokSec,DReg,cyr);
			                            WriteMinePrices;
			
			                            if (ResultMessage(CurrentStudyYear,Itr_Element) = 'Optimal' ) then
			                            	CalcCoalReportingTotals;
			
			                            endif;
			                            if ncntrl_curcalyr(1) > cpsbaseyr then
			                                 qprods((SReg, Sulf, Mtyp, Rank) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)) 
			                                 	:= if ProductionVolumeTons(SReg, Sulf, Mtyp, Rank,CurrentStudyYear) then
			                                     		ProductionVolumeTons(SReg, Sulf, Mtyp, Rank,CurrentStudyYear)
			                                     	  else   ProductionVolumeTons(SReg, Sulf, Mtyp, Rank,PreviousYear)
			                                     	  endif;
			                                     	LAG_PROD((Scrv1,SReg,Sulf,Mtyp,Rank,cyr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)) := ProductionVolumeTons1(SReg,Sulf,Mtyp,Rank,cyr-1);
			                                     	PriceAdjustment;
			                                     	mcnt_prev((Scrv1,SReg,Sulf,Mtyp,Rank)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)) := PMN(SReg,Sulf,Mtyp,Rank,CurrentStudyYear); !hopefully this is still in memory
			                             elseif ncntrl_curcalyr(1) = cpsbaseyr then
			                                     			mcnt_prev((Scrv1,SReg,Sulf,Mtyp,Rank)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank))  := BY_MMP(Scrv1,SReg,Sulf,Mtyp,Rank)/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
			                                     			qprods((SReg,Sulf,Mtyp,Rank)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank))  := Sum(Scrv1|Btu(Scrv1,SReg,Sulf,Mtyp,Rank),BY_PROD(Scrv1,SReg,Sulf,Mtyp,Rank));
			                            endif;	
			                            if ncntrl_curitr(1)=1 then
			                            	!CalcCoalReportingTotals;
			            			ExportMultCokeKeep(cyr) := ExportMultScaleCoke(cyr);
			            			ExportMultSteamKeep(cyr) := ExportMultScaleSteam(cyr);
			            		endif;
			            !           endfor;
			                    !ResultMessage(CurrentStudyYear,Itr_Element) := PartialLeastCostDomesticCoal.ProgramStatus;
			                    if (ResultMessage(CurrentStudyYear,Itr_Element) <> 'Optimal' ) then 
			
			                    	EmptyVariablesWhenInfeasible;
			                    	ExportMultCokeKeep(cyr) := ExportMultCokeKeep(cyr-1);
			                    	ExportMultSteamKeep(cyr) := ExportMultSteamKeep(cyr-1);
			                    	CalculationOfCoalPricingEquation;
			                    	solve PartialLeastCostDomesticCoal;
			                        ResultMessage(CurrentStudyYear,Itr_Element) :=   PartialLeastCostDomesticCoal.ProgramStatus;
			                     	!InfeasibleProcedure;   !This procedure in a loop, that may result in crash but often works - it adds quantity to step 11 and resolves.
			                    	if PartialLeastCostDomesticCoal.ProgramStatus = 'Infeasible' then
			                                   			coalout_coalcode(1) := 1;
			                            elseif PartialLeastCostDomesticCoal.ProgramStatus = 'Unbounded' then
			                                   			coalout_coalcode(1) := 2;
			                            elseif PartialLeastCostDomesticCoal.ProgramStatus = 'UnknownError' then
			                                   			coalout_coalcode(1) := 3;
			                            else
			                                   			coalout_coalcode(1) := 4;  !See ResultsMessage(yr) for specific cause of error
			                            endif;
			                            if(AIMCLSolvDebug=0) then
			             		    	if (ResultMessage(CurrentStudyYear,Itr_Element) <> 'Optimal' ) then		 
			             			   block option Save_Data_Update_Definitions := 'off';              
			                            		SaveAll( FormatString("cases\\debug%e_%i", CurrentStudyYear, ncntrl_curitr(1)));           
			                            		empty ObjTotalCost;
			                            	   endblock;
			                             	endif;	   
			                            endif;
			                    endif;
			                    redoflg(cyr) := 0;
			
			                   			! LaggedProductionPriceforCPS1(Scrv1,yr)     := Sum(Scrv,LaggedProductionPriceforCPS2(Scrv1,Scrv,yr));
			
			                    CoalOutProcedure();
			
			                                                 !for cyr | (val(cyr) = CurrentStudyYear) do
			                                                 !	if cyr > cpsbaseyr then
			                                                 !		CalculationOfCoalPricingEquation;  ! This yields higher prices Test3
			                                                 !	endif;
			                                                 !endfor;
			                    ProdVolSolutionPriorYr(cyr,Scrv1,SReg,Sulf,Mtyp,Rank) :=	ProductionVolumeTons3(cyr,Scrv1,Sreg,Sulf,Mtyp,Rank);
			                    USO2GRP_ECP_PECP_A(mx_ncl,ecpxph,globalyr):=Sum((Scrv1,SReg,Sulf,Mtyp,Rank,cyr)|Map_Scrv1_MX_NCL(Scrv1,mx_ncl)and Map_globalyr_cyr(globalyr,cyr)
			                                                                                             and Btu(Scrv1,SReg,Sulf,Mtyp,Rank),SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr));
			                    USO2GRP_XCL_PCAP_B(Scrv1,globalyr):=Sum((SReg,Sulf,Mtyp,Rank,cyr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and map_globalyr_cyr(globalyr,cyr),
			                                                            Fy_prod_cap2(Scrv1,SReg,Sulf,Mtyp,Rank,cyr));
			                    USO2GRP_XCL_PCAP_A(MX_NCL,globalyr):=Sum((Scrv1)|Map_Scrv1_MX_NCL(Scrv1,mx_ncl),USO2GRP_XCL_PCAP_B(Scrv1,globalyr));
			                    USO2GRP_EFD_PROD_A1(Scrv1):=Sum((SReg,Sulf,Mtyp,Rank,cyr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank),FY_PROD_CAP3(SReg,Sulf,Mtyp,Rank,cyr));
			                    USO2GRP_EFD_PROD_A(MX_NCL):=Sum((Scrv1)|Map_Scrv1_MX_NCL(Scrv1,mx_ncl),USO2GRP_EFD_PROD_A1(Scrv1));
			                    USO2GRP_EFD_PROD_A2(Scrv1,cyr):=Sum((SReg,Sulf,Mtyp,Rank)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank),FY_PROD_CAP3(SReg,Sulf,Mtyp,Rank,cyr));
			
			                    if PartialLeastCostDomesticCoal.ProgramStatus = 'Optimal' then
			                                   	ResultObjTotalCost(cyr) :=  ObjTotalCost;
			                                   	Initialize_Global();
			                                   	Copy_Global();
			                            !Not needed with text data transfer: !  SaveGlobal("cases\\global_data");
			                                    CMMLagDataSave("cases\\CMMLagData");
			                    endif;
			
			                    if ncntrl_curcalyr(1) = cpsbaseyr then
			                                   	 Overwrites();
			                    endif;
			                    if (ncntrl_curitr(1)=1)then
			            		COALEMM_QCLCLNR(NDRGGN,ncntrl_curiyr(1),NUTSEC) := COALEMM_QCLCLNR(NDRGGN,ncntrl_curiyr(1)-1,NUTSEC);                       	
			                    endif;   ! Move the calulation of supply curves for ECP and EFD outside the If statement
			                    	 ! Do these every itteration  11-09-18  DAF
			                            CalculationOfElectricityPricingEquation;
			                            CMMLagDataSave("cases\\CMMLagData");
			                    !endif;   
			                    ! following writes ouptut information to an Excel file (a case is also saved)
			                    WriteMinePrices;
			                    if (ncntrl_curcalyr(1)=2050 and ncntrl_fcrl(1)=1) then
			                                    SaveGlobal("cases\\global_data");
			                                    CMMLagDataSave("cases\\CMMLagData");
			                                    Calculate_report_totals;
			                                    if (Switch_SaveEachCycle) then 
			                                       CycleDataSave(FormatString("%s.%i", NCHAR_SCEN_DATE(1),CYCLEINFO_CURIRUN(1)));  !yda save a case file at the end of each NEMS cycle 
			                      		    else
			                      		       CycleDataSave(FormatString("%s", NCHAR_SCEN_DATE(1)));
			                      		    endif;
			                      		    if (Switch_write_coal_out_db) then WriteEMMDBTables(); endif; !  Enable this switch to write COAL_OUT database - or prefered manually run WriteEMMDBTables procedure
			
			                                    WritetoExcelFileAxll;
			                    endif;
			
			             endif;
			                                   ! output the global variables (as previously set up in coalGetVars.txt) to nems in a text file
			                                   SendGlobalDataToNEMS;
		}
	}
	Procedure DebugWhenInfeasible {
		Body: {
			                    if(AIMCLSolvDebug=1) then ! for validation/debugging, options vary
			                                        option display_infeasibility_analysis:=1,
			                                                linear_presolve:="off",
			                                                eliminate_nonvar_columns:="off",
			                                                infeasibility_finder:="on",
			                                                postsolve_continuous_variables:="no rounding",
			                                                Store_complete_solver_solution:="yes",
			                                                solver_column_row_mapping:="at_every_solve",
			                                                "CPLEX_12_6_3".MPS := "at every solve";
			                    else ! use speed-up options; effect of some options vary depending on the lp. presolve may increase total time with this LP; postsolve rounding seemed to speed it up a lot.
			                                         option display_infeasibility_analysis:="off",
			                                                linear_presolve:="off", 
			                                                eliminate_nonvar_columns:="automatic",
			                                                infeasibility_finder:="off",
			                                                postsolve_continuous_variables:="round to nearest bound",
			                                                !postsolve_continuous_variables:="no rounding",
			                                                Store_complete_solver_solution:="no",
			                                                solver_column_row_mapping:="never",
			                                                "CPLEX_12_6_3".MPS := "never";
			                    endif;            
			
			             if ncntrl_curcalyr(1) > cpsbaseyr - 1 then
			                       CurrentStudyYear := ncntrl_curcalyr(1);
			                       coalout_coalcode(1) := 0; !assume feasible =0        
			            		!This is the main AIMMS solver call for coal model
			                             solve PartialLeastCostDomesticCoal;
			                             EscapeVectorCheck();
			                   	    ResultMessage(CurrentStudyYear,Itr_Element) := PartialLeastCostDomesticCoal.ProgramStatus;  
			                   	    Calculate_report_totals;    
			             endif;
		}
	}
	Procedure OverwritesFixForHistory {
		Body: {
			!hard code ncntrl_curcalyr and ncntrl_curiyr and then run this procedure
			  CurrentStudyYear := ncntrl_curcalyr(1);
			!  for cyr | (val(cyr) = CurrentStudyYear) do
				Overwrites();
			    SaveGlobal("cases\\global_data");
			!  endfor;
		}
	}
	Procedure YearLoop_old {
		Body: {
			AIMCLSolvDebug :=0;  !Changing solver settings for debugging using YearLoop procedure
					     !! Value of 1 will generate MPS files and skip debug file output on infeasibility
			ncntrl_curitr(1):=1;
			ncntrl_fcrl(1):=0;
			for (iy in {30..31}) do
			  ncntrl_curitr(1):=1;
			  ncntrl_curiyr(1):=val(iy);
			  ncntrl_curcalyr(1):=1989+val(iy);
			  MainExecution();
			  ncntrl_curitr(1):=2;
			  MainExecution();
			  ncntrl_curitr(1):=3;
			  MainExecution();
			  ncntrl_curitr(1):=4;
			  MainExecution();
			  ncntrl_curitr(1):=5;
			  MainExecution();
			endfor;
			
			
			
			
			 !! CurrentStudyYear := ncntrl_curcalyr(1);
			
			 !! for cyr | (val(cyr) = CurrentStudyYear) do  !you can run the Overwrites beginning in year 14 (2003)
			!!	Overwrites ();
			!!	casesave(0);
			  !!endfor;
		}
		Comment: {
			"This procedure is for testing purposes in the windows environment where
			you want to recreate a problem that occurred in a NEMS run.  For instance,
			if a problem occurred in 2020, I might set \'iy in {22..31}\' in the above
			code.  Note:  the coal_out.mdb Lagged Price and Lagged Production tables
			need to be modified to only have 2018 data in it and the model must start
			in the year 29. 2050 is year 61"
		}
	}
	Procedure YearLoop_new {
		Body: {
			!read from file "coalmapping.txt";
			AIMCLSolvDebug :=0;  !Changing solver settings for debugging using YearLoop procedure
					     !! Value of 1 will generate MPS files and skip debug file output on infeasibility
			
			ncntrl_curitr(1):=1;
			ncntrl_fcrl(1):=0;
			ncntrl_curiyr(1):=val(Start_iyr)-1989;
			ncntrl_curcalyr(1):=val(Start_iyr);
			!MaxIter := 5; ! maximum iteration to run; can be connected to NCNTRL_MAXITR; moved to definition
			Cur_iyr := Start_iyr;
			
			repeat
			  if (ncntrl_curitr(1)<MaxIter) then
			   if IterationFlag(Element(SelectIterations,ncntrl_curitr(1))) then
			    MainExecution();
			    endif;
			    ncntrl_curitr(1)+=1;
			  else
			   if IterationFlag(Element(SelectIterations,ncntrl_curitr(1))) then
			    MainExecution();  
			    endif;  
			    break when (Cur_iyr = End_iyr);
			    ncntrl_curitr(1):=1;   !reset the iteration count
			    Cur_iyr +=1;           ! proceed to the next year
			    ncntrl_curiyr(1)+=1;   
			    ncntrl_curcalyr(1)+=1;    
			  endif;
			endrepeat;
			Calculate_report_totals;
		}
		Comment: {
			"This procedure is for testing purposes in the windows environment where
			you want to recreate a problem that occurred in a NEMS run.  For instance,
			if a problem occurred in 2020, I might set \'iy in {22..31}\' in the above
			code.  Note:  the coal_out.mdb Lagged Price and Lagged Production tables
			need to be modified to only have 2018 data in it and the model must start
			in the year 29. 2050 is year 61"
		}
	}
	DeclarationSection CostRowWithConstraints {
		MathematicalProgram LeastCostDomesticCoal {
			Objective: ObjTotalCost;
			Direction: minimize;
			Constraints: AllConstraints;
			Variables: AllVariables;
			Type: LP;
		}
		MathematicalProgram PartialLeastCostDomesticCoal {
			Objective: ObjTotalCost;
			Direction: minimize;
			Constraints: MyConstraints;
			Variables: MyVariables;
			Type: LP;
		}
		Variable ObjTotalCost {
			Range: free;
			Definition: {
				Sum(cyr|cyr in STEOYears, -8*WestStocksLow(cyr) + 8*WestStocksHigh(cyr) -
				14*AppStocksLow(cyr) + 14*AppStocksHigh(cyr) -
				12*InteriorStocksLow(cyr) + 12*InteriorStocksHigh(cyr))+
				Sum((nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)|nsteps < 3,
				 ElectricityTransport1Cost(nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)) +!E  999*EscapeElectrAC(nsteps,Scrv,pt2,DReg,cyr))+
				Sum((USe,cyr), EscapePlusUSCokingExports(USe,cyr)*999 + EscapeMinusUSCokingExports(USe,cyr)*999) +
				Sum((USe,cyr), EscapePlusUSThermalExports(use,cyr)*999 + EscapeMinusUSThermalExports(use,cyr)*999) +
				Sum((SReg, Sulf, Mtyp, Rank,DReg,cyr),ElectricityTransport2Scrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)*tier2_adj(SReg, Sulf, Mtyp, Rank,DReg,cyr)) +
				Sum((SReg, Sulf, Mtyp, Rank,DReg,cyr),ElectricityTransport2Unscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)*tier2_adj(SReg, Sulf, Mtyp, Rank,DReg,cyr))+
				Sum((SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr),ResidentialTransportCost(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr))+ !E 999*EscapeRC(Scrv,ResSec,DReg,cyr))+
				Sum((SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr),IndustrialTransportCost(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr)) + !E 999*EscapeInd(Scrv,IndSec,DReg,cyr))+
				Sum((SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr),CokingTransportCost(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr)) +  !E Sum((Scrv,CokSec,Dreg,Cyr),999*EscapeCoke(Scrv,CokSec,DReg,cyr))+
				Sum((SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr),LiquidsTransportCost(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)) + !E 999*EscapeLiqu(Scrv,LiquSec,DReg,cyr))+
				Sum((cyr),InlandImportsCost(cyr))+
				Sum((CokSec,DReg,nUS,USi,cyr),ImportsCoking(CokSec,DReg,nUS,USi,cyr)*
				InlandImportTranspRateBtu('C',nUS,DReg,USi)) +
				Sum((cyr), EscapeNeedMoreElectImportsTons(cyr)*999 + EscapeNeedLessElectImportsTons(cyr)*999) +
				Sum((cyr), EscapeNeedMoreIndustImportsTons(cyr)*999 + EscapeNeedLessIndustImportsTons(cyr)*999) +
				Sum((cyr), EscapeNeedMoreCokingImportsTons(cyr)*999 + EscapeNeedLessCokingImportsTons(cyr)*999) +
				 Sum((SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr),ProductionCost(SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr))+
				 Sum((SReg, Sulf, Mtyp, Rank,DReg,cyr),999*ContractEscape1(SReg, Sulf, Mtyp, Rank,DReg,cyr)
				+999*ContractEscape2(SReg, Sulf, Mtyp, Rank,DReg,cyr))
				!E +Sum((pt2,DReg,cyr),999*SubbitEscape(pt2,DReg,cyr)
				!E +999*LigniteEscape(pt2,DReg,cyr))
				+ sum((USe,tc,cyr), 999*TestICMMEscape(USe,tc,cyr) ) ! added 8/17/2021 to test using US export constraints from the new International Coal Market Model
				!!                       International Trade
				+ sum[ (nUS,s,tc,cyr), (InternationalFOBScalintbTU(nUS,s,tc,cyr)*ExpSupply(NUS,s,tc,cyr))] ! int'l FOB price
				+ Sum((SReg, Sulf, Mtyp, Rank,DReg,ExpSec,USe,cyr),Trate1Exp(SReg, Sulf, Mtyp, Rank,Dreg,ExpSec)*ExportsTransport2(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,cyr)) ! U.S. rail rate to U.S. ports
				!+ Sum((nUS,i,tc,cyr),InternationalUnitTransportBtuNonUS(nUS,i,tc)*TotalTransportNonUS(nUS,i,tc,cyr)) !int' ocean freight (old no change in cost by year)
				+ Sum((nUS,i,tc,cyr),InternationalUnitTransportBtuNonUS87D(nUS,i,tc,cyr)*TotalTransportNonUS(nUS,i,tc,cyr)) !int' ocean freight cost -new May-2019
				+ Sum((Use,NonUSi,tc,cyr),InternationalUnitTransportBtuUSEx87D(USe,NonUSi,tc,cyr)*(TotalTransportUS(USe,NonUSi,tc,cyr))) !US Exports freight cost - new May-2019
				!+ Sum((Use,NonUSi,cyr), InternationalUnitTransport(USe,NonUSi,'1')/1.182/27.78*(TotalTransportUS(USe,NonUSi,'1',cyr)))  ! U.S. coking ocean freight
				!+ Sum((Use,NonUSi,cyr), InternationalUnitTransport(USe,NonUSi,'2')/1.182/27.78*(TotalTransportUS(USe,NonUSi,'2',cyr))) ! U.S. thermal ocean freight
				+ Sum((Ae,tc,cyr),999*EscapeExportShareConstrNonUS(Ae,tc,cyr))
				!!                        Carbon
				+ Sum(cyr,CarbonxCost(cyr)
				!!                        Sulfur
				+0.0001* (MVso2outCAIR12(cyr) + MVso2outCAIR21(cyr)))
				!
				!Supply Balance Escape Added Nov 2022 DAF
				+Sum((SReg, Sulf, Mtyp, Rank,cyr), EscapePlusSupplyCurveStepBalance(SReg, Sulf, Mtyp, Rank,cyr)*999)  
				+Sum((SReg, Sulf, Mtyp, Rank,cyr), EscapeMinusSupplyCurveStepBalance(SReg, Sulf, Mtyp, Rank,cyr)*999)
				!!                        Electricity Costs
				!+ Sum((nsteps,Sreg,sulf,Mtyp,Rank,Dreg,pt2,cyr),ActivatedCarbonEquipmentCost(nsteps,Sreg,sulf,Mtyp,Rank,Dreg,pt2,cyr))
				+ Sum(nsteps,ActivatedCarbonCost(NSTEPS))   ! Test turning this back on DAF 3/27/2018
				
				!!                         Miscellaneous Escape Vectors
				
				+Sum((SReg, Sulf, Mtyp, Rank,cyr),999*EscapeProductiveCapacity(SReg, Sulf, Mtyp, Rank,cyr))
				
				!E Sum((elecscrv,dreg,cyr),999*EscapeUnscrubTransportationBound(elecscrv,dreg,cyr) +
				!E 999*EscapeScrubTransportationBound(elecscrv,dreg,cyr))
				!E  +Sum((elecscrv,pt2,dreg,cyr), 999*EscapeMakeSureSecondTierGetsFirstTierPrice(elecscrv,pt2,dreg,cyr))
			}
		}
		Set MyConstraints {
			SubsetOf: AllConstraints;
			Definition: {
				
				Data {
				!!              Short-Term Energy Outlook Calibration
				                       STEOAppalachiaLower,
				                       STEOAppalachiaUpper,
				                       STEOInteriorLower,
				                       STEOInteriorUpper,
				                       STEOWestLower,
				                       STEOWestUpper,
				                       STEOWasteCoalLower,
				                       STEOWasteCoalUpper,
				                       STEOElecTonsLower,
				                       STEOElecTonsUpper,
				                       STEOCokeTonsStocks,
				                       STEOIndustrialTonsStocks,
				                       STEOImportsLower,
				                       STEOImportsUpper,
				                       AppalachiaStocks,
				                       InteriorStocks,
				                       WestStocks,
				                       STEOStocksByRegion1, !applies if STEO stocks are positive
						       STEOStocksByRegion1a, !applies if STEO stocks are positive
				                       STEOStocksByRegion2,!applies if STEO stocks are negative
				                       STEOStocksByRegion2a,!applies if STEO stocks are negative
				!!               U.S. Export and International Trade Constraints
				AggRegTransport,
				LInkUSDomesticCokingExportsWithInternational,! balances U.S. export volumes to US port districts with U.S. export freight volume to importing countries
				LInkUSDomesticThermalExportsWithInternational,
				Test_IntlSupplyStepBalancewTotal, !balances non U.S. export countries with their freight volume
				!Disabling the two contraints below for testing to Match ICMM US exports
				SdxTherm3, !added 4/24/13
				SdxCoking3, !added 4/24/13
				InternationalDemandRequirement,  !commented on 3/14/13
				BalanceCokingwithUSDomestic, !added on 3/13/13
				BalanceThermalwithUSDomestic,
				ExportsSupplybyExportRegionThermal,
				ExportsSupplyByExportRegionCoking, !added 4/23/13
				TotalTransportNonUS,
				TotalTransporttoCountryi,
				TotalTransportfromCountrye,
				TotalfromCountrye,
				TotalfromCountryetoi,
				IntlSupplyStepBalancewTotal,
				ImportShareConstr,
				TotalfromCountryetoibySector,
				ExportShareConstrNonUS,  ! separated US and NONUS on 3/14/13
				ExportShareConstrUS,  ! separated US and NONUS on 3/14/13
				SubtotalforExportShareConstrUS1, !added on 3/14/13
				SubtotalforExportShareConstrUS2, !added on 3/14/13
				SubtotalforExportShareConstrUS3, !added on 3/14/13
				SubtotalforExportShareConstrNonUS1, !added on 3/14/13
				SubtotalforExportShareConstrNonUS3, !added on 3/14/13
				ExportBalance,
				ImportBalance,
				!MatchICMMexportsFromUStrills,  !added 8/19/21 for ICMM integration
				!MatchICMMexportsFromUStons,  !added 8/19/21 for ICMM integration
				UpperBoundICMMexportsFromUSTons, !Replace exact match of ICMM exports with bounds 11/07/22
				LowerBoundICMMexportsFromUSTons, !Replace exact match of ICMM exports with bounds 11/07/22
				ExportsTranport2InTons,  !added 8/19/21 for ICMM integration
				!!              Production Constraints
				ProductionTransportBalance,
				ProductionCost,
				ProductionCapacityLimit,
				SupplyCurveStepBalance,
				!!               U.S. Import Constraints
				InlandImportsCost,
				ElectricityImportMinimum,
				ElectricityImportMaximum,
				IndustrialImportMinimum,
				IndustrialImportMaximum,
				CokingImportMinimum,
				CokingImportMaximum,
				ImportMaxShareElectr,
				USImportThermalBalance,
				USImportCokingBalance,
				ImportstoUS,
				USImportBalanceIntlExportsToUS,
				ActivatedCarbonUseImports,
				ImportsElectricitySubtotalbyExporter,
				ImportsElectricityTons,
				ImportsElectricitySubtotal,
				ImportsIndustrialSubtotal,
				ImportsIndustrialSubtotalbyExporter,  !added 8/18/2017
				ImportsIndustrialTons,                !added 8/18/2017
				ImportsCokingSubtotal,		      !added 8/18/2017
				ImportsCokingSubtotalbyExporter,      !added 8/18/2017
				ImportsCokingTons,
				!!              Other Sectoral Constraints
				IndustrialDemandRequirement,
				CokingDemandRequirement,
				ResidentialDemandRequirement,
				ResidentialTransportCost,
				TotalResidentialCost,
				IndustrialTransportCost,
				TotalIndustrialCost,
				CokingTransportCost,
				TotalCokingCost,
				LiquidsDemandRequirement,
				LiquidsTransportCost,
				TotalLiquidsCost,
				
				!!              Electricity Constraints
				DomesticElectricityDemandRequirement,
				ActivatedCarbonUseDomestic,
				SulfpenConstraint,
				Copy_SulfpnConstraint,  !REMOVE CSAPR
				Mercp02,
				ElectricityTransport1Cost,
				ElectricityTransport2Cost,
				TotalElectricityCost,
				ElectricityTransportScrubbed,
				ContractsScrubbed,
				ElectricityTransportUnscrubbed,
				ContractsUnscrubbed,
				SubbituminousDiversity,
				LigniteDiversity,
				TransportationBoundUnScrubbed,  !4/27/13 test
				TransportationBoundScrubbed,   !4/27/13 test
				ElectricityTransport2Scrubbed,
				ElectricityTransport2Unscrubbed,
				SulfurVariability, !REMOVE CSAPR
				Mvso2,  !REMOVE CSAPR
				BalanceScrubUnscrubTier1,
				BalanceScrubUnscrubTier2,
				MakeSureSecondTierGetsFirstTierPrice,
				!Ttonmile,
				SubtotalElecTransportACSubto,
				TotalMVCost,
				!!TotalSulfurEscapeCost
				ActivatedCarbonCost,
				!ActivatedCarbonEquipmentCostDefinition,
				!Acixxxxy,
				Acixxxxy2,
				Carbonxx,
				CarbonxCost,
				
				!!            Objective Function:
				ObjTotalCost}
			}
		}
		Set MyVariables {
			SubsetOf: AllVariables;
			Definition: {
				Data {
				                       !!              Short-term Energy Outlook Calibration
				                                     CokeStocksTrills,
								     IndustrialStocksTrills,
								     AppalachiaStocks,
				                                     InteriorStocks,
				                                     WestStocks,
				                                     AppStocksLow,
				                                     AppStocksHigh,
				                                     InteriorStocksLow,
				                                     InteriorStocksHigh,
				                                     WestSTocksLow,
				                                     WestSTocksHigh,
				                        TestICMMEscape,  !new escape variable 8/17/2021
				!!              U.S. Exports and International Trade Variables!!              U.S. Exports and International Trade Variables
				                 !E EscapeRC,
				                 !E EscapeInd,
				                 !E EscapeCoke,
				                 !E EscapeLiqu,
				                 !E EscapeElectrAC,
				                 !E EscapeExportShareConstrNonUS,
				                 ExportsTransport2, !volume of exports moved from U.S. to U.S. port
				                 EscapePlusUSThermalExports,	!escape variables enabled Nov 2022
				                 EscapeMinusUSThermalExports,
				                 EscapePlusUSCokingExports,
				                 EscapeMinusUSCokingExports,
				                 ExportsSupplybyExportRegionThermal,
				                 ExportsSupplybyExportRegionCoking,
				                 !ExportsTransportCost,
				                 Transport,
				                 ExpSupply,
				                 TotalTransportNonUS,
				                 TotalTransportUS,
				                 TotalTransporttoCountryi,
				                 TotalTransportfromCountrye,
				                 TotalfromCountrye,
				                 TotalfromCountryetoi,
				                 AggRegTransport,
				                 !TotalNonUSExpTransportCost,
				                 !TotalUSExpTransportCokingCost,
				                 !TotalUSExpTransportThermalCost,
				                 TotalfromCountryetoibySector,
				                 SubtotalforExportShareConstrUS1, !added on 3/14/13
				                 SubtotalforExportShareConstrUS2, !added on 3/14/13
				                 SubtotalforExportShareConstrUS3, !added on 3/14/13
				                 SubtotalforExportShareConstrNonUS1, !added on 3/14/13
				                 SubtotalforExportShareConstrNonUS3, !added on 3/14/13
				                 UXThermal,
				                 UXCoking,
				                 USBalanceThermal,  !added 8/18/2017
				                 USBalanceCoke,  !added 8/18/2017 
					ExportsTranport2InTons, ! new free row for Exports Constraint
				!!                        Electricity Variables
				ActivatedCarbonUseDomestic,
				!ElectricityTransport1,
				ElectricityTransport1Cost,
				ElectricityTransport2Cost,
				TotalElectricityCost,
				ElectricityTransportScrubbed,
				ContractEscape1,
				ElectricityTransportUnscrubbed,
				ContractEscape2,
				!E SubbitEscape,
				!E LigniteEscape,
				!E TotalContractEscapeCost,
				!E TotalSubitLigEscapeCost,
				!Ttonmile,
				ElectricityTransport2,
				ElectricityTransport2Scrubbed,
				ElectricityTransport2Unscrubbed,
				!!MVso2out, REMOVE CSAPR
				!!MVsin,   REMOVE CSAPR
				MVso2outCAIR12, !CAIR
				MVso2outCAIR21,!CAIR
				ActivatedCarbonCost,
				!ActivatedCarbonEquipmentCost,
				ElectricityTransportAC,
				ElectricityTransportACSubtotal,
				!!TotalMVCost, Remove CSAPR
				!sulfurescape1,
				!sulfurescape2,
				!TotalSulfurEscapeCost}
				Mercev,
				Morehgxx,
				acixss1y,
				
				
				EscapeProductiveCapacity,
				
				!E EscapeUnscrubTransportationBound,
				!E EscapeScrubTransportationBound,
				!E EscapeMakeSureSecondTierGetsFirstTierPrice,
				!!                          U.S. Import Variables
				InlandImportsCost,
				ImportstoUS,
				ActivatedCarbonUseImports,
				ImportsIndustrial,
				ImportsCoking,
				ImportsElectricity,
				ImportsElectricitySubtotalbyExporter,
				ImportsElectricityTons,
				ImportsElectricitySubtotal,
				ImportsIndustrialSubtotal,
				ImportsIndustrialSubtotalbyExporter,  !added 8/18/2017
				ImportsIndustrialTons,                !added 8/18/2017
				ImportsCokingSubtotal,		      
				ImportsCokingTons,                    !added 8/18/2017
				ImportsCokingSubtotalbyExporter,      !added 8/18/2017
				EscapeNeedMoreElectImportsTons,		!added imports escape variables Nov 2022 DAF
				EscapeNeedLessElectImportsTons,
				EscapeNeedMoreIndustImportsTons,
				EscapeNeedLessIndustImportsTons,
				EscapeNeedMoreCokingImportsTons,
				EscapeNeedLessCokingImportsTons,
				
				!                         Domestic Production Variables
				ProductionVolume,
				ProductionVolumeSteps,
				EscapePlusSupplyCurveStepBalance,
				EscapeMinusSupplyCurveStepBalance,
				ProductionCost,
				TotalProductionCost,
				!!Other Sector Constraints
				ResidentialTransport,
				ResidentialTransportCost,
				TotalResidentialCost,
				IndustrialTransport,
				IndustrialTransportCost,
				TotalIndustrialCost,
				CokingTransport,
				CokingTransportCost,
				TotalCokingCost,
				LiquidsTransport,
				LiquidsTransportCost,
				TotalLiquidsCost,
				!                        Carbon
				CarbonxCost,
				Carbonx,
				!                        Overall Objective Function
				ObjTotalCost
				}
			}
		}
	}
	DeclarationSection IndexesAKASets {
		Horizon ndYear {
			SubsetOf: AllYears;
			Text: "Year";
			Index: cyr;
			CurrentPeriod: CurrentStudyYear;
			IntervalLength: 1;
			Definition: {
				Data {                2003,2004,2005,2006,2007,2008,2009,2010,
				        2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,
				        2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,
				        2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,
				        2041,2042,2043,2044,2045,2046,2047,2048,2049,2050    }
			}
		}
		Set InternationalYears {
			SubsetOf: ndYear;
			Index: Intlyear;
			Definition: {
				Data {                                                          2009,2010,
				        2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,
				        2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,
				        2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,
				        2041,2042,2043,2044,2045,2046,2047,2048,2049,2050    }
			}
		}
		Set CoalToLiquidYears {
			SubsetOf: ndYear;
			Definition: {
				Data {                                                          2009,2010,
				        2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,
				        2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,
				        2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,
				        2041,2042,2043,2044,2045,2046,2047,2048,2049,2050    }
			}
		}
		Set ContractYears {
			SubsetOf: ndYear;
			Definition: {
				{2003..2050}
				!Data {                                                          2009,2010,
				!        2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,
				!        2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,
				!        2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,
				!        2041,2042,2043,2044,2045,2046,2047,2048,2049,2050    }
			}
		}
		Set StockYears {
			SubsetOf: AllYears;
			Index: stockyr;
			Property: ElementsAreNumerical;
		}
		Set HistoricalYears {
			SubsetOf: AllYears;
			Index: hyr;
			Definition: {
				{1998..2015}
			}
		}
		ElementParameter CurrentStudyYear {
			Range: ndYear;
		}
		ElementParameter PreviousYear {
			Range: ndYear;
		}
		Set IntlStartYear {
			Index: syr;
		}
		Set AllYears {
			SubsetOf: Integers;
			Index: yr;
			Property: ElementsAreNumerical;
			Definition: {
				{1987..2050}
			}
		}
		Set ForecastYears {
			SubsetOf: AllYears;
			Index: fyr;
			Definition: {
				{CurrentStudyYear..CPSEndYr}
			}
		}
		ElementParameter Cur_year {
			Range: AllYears;
		}
		Set IntlEndYear {
			Index: eyr;
		}
		Set Iy_ {
			Text: "For YearLoop index";
			Index: iy;
			Definition: {
				{14..51}
			}
		}
		Set It_ {
			Text: "For YearLoop index";
			Index: Itr;
			Definition: {
				!{1..10}
				ElementRange(1,MaxIter)
			}
		}
		Set AggregateSupplyRegion {
			SubsetOf: Integers;
			Index: ASReg;
		}
		Set EastWestRegion {
			SubsetOf: Integers;
			Index: EW;
		}
		Set SupplyRegion {
			Index: SReg;
		}
		Set SulfurClassification {
			Index: Sulf;
		}
		StringParameter AggSupReg_Name {
			IndexDomain: ASReg;
		}
		Set Minetype {
			Text: "surface \'S\' or deep/underground \'D\'";
			Index: Mtyp;
		}
		Set DemandRegion {
			Index: DReg;
			OrderBy: DemandRegionOrder(Dreg);
			Definition: {
				Data { '01NE','02YP', '03S1','04S2', '05GF','06OH',
				'07EN','08KT' , '09AM','10C1','11C2', '12WS','13MT',
				'14CU', '15ZN', '16PC'}
			}
		}
		Set StockDemandRegions {
			SubsetOf: DemandRegion;
			Index: StockReg;
		}
		Set CoalRankType {
			Index: Rank;
		}
		Set ElectricityRanks {
			SubsetOf: CoalRankType;
			Index: ElecRank;
			Definition: {
				{ (Rank) | Rank <> '4P'}
			}
		}
		Set MajorSector {
			Index: Sec;
			Comment: "manually added X for Exports";
		}
		Set ImportingSector {
			SubsetOf: MajorSector;
			Index: ImpSec;
			Comment: "manually added X for Exports";
		}
		Set IndustrialMajSector {
			SubsetOf: MajorSector;
			Index: IndMSec;
			Definition: {
				{Sec|MajorSectorFlag(Sec)=-2}
			}
		}
		Set RecComMajSector {
			SubsetOf: MajorSector;
			Index: ResMSec;
			Definition: {
				{Sec|MajorSectorFlag(Sec)=-1}
			}
		}
		Set CokingMajSector {
			SubsetOf: MajorSector;
			Index: CokMSec;
			Definition: {
				{Sec|MajorSectorFlag(Sec)=-3}
			}
		}
		Set LiquidsMajSector {
			SubsetOf: MajorSector;
			Index: LiqMSec;
			Definition: {
				{Sec|MajorSectorFlag(Sec)=-4}
			}
		}
		Set ExportsMajSector {
			SubsetOf: MajorSector;
			Index: ExpMSec;
			Definition: {
				{Sec|MajorSectorFlag(Sec)=-5}
			}
		}
		Set ElectricityMajSector {
			SubsetOf: MajorSector;
			Index: ElecMSec;
			Definition: {
				{Sec|MajorSectorFlag(Sec)=-6}
			}
		}
		Parameter SupplyCurveNumber_Map {
			IndexDomain: (SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank);
			Definition: 1;
		}
		Set SubSector {
			Index: Subsec;
			OrderBy: SubSectorOrder(Subsec);
		}
		Set ResComSubSector {
			SubsetOf: SubSector;
			Index: ResSec;
			Definition: {
				{SubSec|SubSectorFlag(Subsec)=-1}
			}
		}
		Set IndustrialSubSector {
			SubsetOf: SubSector;
			Index: IndSec;
			Definition: {
				{SubSec|SubSectorFlag(Subsec)=-2}
			}
		}
		Set CokingSubSector {
			SubsetOf: SubSector;
			Index: CokSec;
			Definition: {
				{SubSec|SubSectorFlag(Subsec)=-3}
			}
		}
		Set LiquidsSubSector {
			SubsetOf: SubSector;
			Index: LiquSec;
			Definition: {
				{SubSec|SubSectorFlag(Subsec)=-4}
			}
		}
		Set ExportsSubSector {
			SubsetOf: SubSector;
			Index: ExpSec;
			Definition: {
				{SubSec|SubSectorFlag(Subsec)=-5}
			}
		}
		Set ElectricitySubSector {
			SubsetOf: SubSector;
			Index: ElecSec;
			Definition: {
				{SubSec|SubSectorFlag(Subsec)=-6}
			}
		}
		Set NonElectricitySubSector {
			SubsetOf: SubSector;
			Definition: {
				{SubSec|SubSectorFlag(Subsec)<>-6}
			}
		}
		ElementParameter ElecSubSec {
			IndexDomain: pt2;
			Range: SubSector;
			Definition: ElementCast(Subsec,pt2);
		}
		Parameter ElecSubsec_Map {
			IndexDomain: (Subsec,pt2);
			Definition: {
				if Subsec=ElementCast(ElecSec,pt2) then
				1
				endif;
			}
		}
		Set TierDesignation {
			Index: tier;
		}
		Set CensusDivision {
			Index: CensDiv;
		}
		Set PADDRegion {
			Index: PADD;
		}
		Set ContractProfileNumber {
			SubsetOf: Integers;
			Index: cnum;
			Property: ElementsAreLabels;
		}
		Set CoalGroup {
			Index: cgroup;
		}
		Set TranspProfileNumber {
			SubsetOf: Integers;
			Index: tnum;
		}
		Parameter SubbituminousSupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
				Rank = '2S'
			}
			Definition: 1;
		}
		Parameter BituminousSupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
				Rank = '1B'
			}
			Definition: 1;
		}
		Parameter LowSulfurSupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
				Sulf = '1C'
			}
			Definition: 1;
		}
		Parameter MediumSulfurSupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
				Sulf = '2M'
			}
			Definition: 1;
		}
		Parameter HighSulfurSupplyCurves_Map {
			IndexDomain: (SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and Sulf = '3H';
			Definition: 1;
		}
		Parameter SurfaceSupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
				Mtyp = '1S'
			}
			Definition: 1;
		}
		Parameter UndergroundSupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
				Mtyp = '2D'
			}
			Definition: 1;
		}
		Set SubDivProfileNumber {
			SubsetOf: Integers;
			Index: snum;
		}
		Parameter LigniteSupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
				Rank = '3L' or Rank = '5G'
			}
			Definition: 1;
		}
		Parameter CokingSupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
				Rank = '4P'
			}
			Definition: 1;
		}
		Parameter ThermalSupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
				Rank <> '4P'
			}
			Definition: 1;
		}
		Set LigDivProfileNumber {
			SubsetOf: Integers;
			Index: lnum;
		}
		Set Plantid_unitid {
			Index: pu_id;
		}
		Set PlantsWContracts;
		Parameter PossibleSupplyCurves_Map {
			IndexDomain: (DReg,SubSec,SReg, Sulf, Mtyp, Rank) | CoalGroupFlag(DReg,Subsec,SReg, Sulf, Mtyp, Rank)=-1;
			Definition: 1;
		}
		Parameter PossibleExportSupplyCurves_Map {
			IndexDomain: (DReg,ExpSec,SReg, Sulf, Mtyp, Rank) |Trate1Exp(SReg, Sulf, Mtyp, Rank,DReg,ExpSec);
			Definition: 1;
		}
		Parameter ElectricitySupplyCurves_Map {
			IndexDomain: {
				(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0
				and Rank <> '4P'
			}
			Definition: 1;
		}
		Set Xcl_pecp_yr {
			SubsetOf: AllYears;
			Index: pyr;
			Property: ElementsAreLabels;
			Definition: {
				{(yr)|yr >= NCNTRL_CURcalyr(1) and yr <= NCNTRL_CURcalyr(1)+30 and
				yr <= NCNTRL_ijumpyr(1)+1989}
			}
		}
		Set Ecp_pecp_yr {
			Index: pyr2;
		}
		Set SupplyCurveNumber2 {
			SubsetOf: Integers;
			Index: Scrv1;
			OrderBy: scrvOrder(Scrv1);
		}
		Parameter Scrv1_Map {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
			Definition: 1;
		}
		Parameter Map_MXNCI_CoalType {
			IndexDomain: (MX_NCI,SReg,Sulf,Mtyp,Rank);
		}
		Set CPSCoalType {
			Index: CPSCoalTyp;
		}
		Set SupplyCurveSteps {
			SubsetOf: Integers;
			Index: Scrv1Step, Scrv1Step_x;
			Property: ElementsAreLabels;
			InitialData: {
				{ 1..11 }
			}
		}
		Set commodity {
			Index: icmm_comm;
		}
		Set arcdestnode {
			Index: arcdest;
		}
	}
	DeclarationSection Integration_Mappings {
		Comment: {
			"Contains mappings to relate the coal model\'s indices back to that used
			by the other models (or vice versa)"
		}
		Parameter Map_Nutsec_pt2 {
			IndexDomain: (NUTSEC,pt2);
			Text: {
				"equals 1 when match between nutsec 1-35 and pt2 15-29; 1-14 for pt2 are other demands"
			}
		}
		Parameter Map_nutsec_pt3 {
			IndexDomain: (NUTSEC,pt3);
			Text: {
				"equals 1 when match between nutsec 1-35 and pt2 15-29; 1-14 for pt2 are other demands"
			}
		}
		Parameter Map_pt1_pt2 {
			IndexDomain: (pt1,pt2);
			Text: {
				"equals 1 when match between nutsec 1-35 and pt2 15-29; 1-14 for pt2 are other demands"
			}
			Definition: Sum(Nutsec|Val(Nutsec)=Val(pt1),Map_Nutsec_pt2(NUTSEC,pt2));
		}
		StringParameter Map_ndregn {
			IndexDomain: (NDREGN);
			Text: "maps demand region number to character code";
		}
		Parameter Map_Ndrggn_DReg {
			IndexDomain: (ndrggn,DReg);
			Definition: DReg = Map_ndregn(ndrggn);
		}
		Parameter Map_ndregn_DReg {
			IndexDomain: (NDREGN,DReg);
			Definition: DReg = Map_ndregn(ndregn);
		}
		Parameter Map_Mnumcr_CensDiv {
			IndexDomain: (MNUMCR,CensDiv);
			Text: "maps census division number to character code";
		}
		Parameter Map_PADD_Mnumpr {
			IndexDomain: (PADD,MNUMPR);
			Text: "maps census division number to character code";
		}
		Parameter Map_SReg_ASReg {
			IndexDomain: (SReg,ASReg);
			Text: "maps supply region to App, East or West";
		}
		Parameter Map_SReg_EW {
			IndexDomain: (SReg,EW);
		}
		Parameter Map_DReg_MNUMCR {
			IndexDomain: (DReg,MNUMCR);
		}
		Parameter Map_PADD_DReg {
			IndexDomain: (PADD,DReg);
		}
		Parameter Map_SReg_M14 {
			IndexDomain: (SReg,M14);
		}
		Parameter Map_Rank_M4 {
			IndexDomain: (Rank,M4);
		}
		Parameter Map_Mtyp_M3 {
			IndexDomain: (Mtyp,M3);
		}
		Parameter Map_e_MX_ISC {
			IndexDomain: (e,MX_ISC);
			Comment: "Now read from cdsRegionRef.txt  April 2022";
		}
		Parameter Map_USi_M4 {
			IndexDomain: (USi,M4);
			Text: "Mapping for US import regions to integers representing coal ports along US coasts";
			Comment: "read from cdsRegionRef.txt  April 2022";
		}
		Parameter Map_MX_UNT_pu_id {
			IndexDomain: (MX_UNT,pu_id);
			Definition: coalemm_emm_cl_units(mx_unt) = pu_id;
		}
		Parameter Map_Scrv1_MX_NCL {
			IndexDomain: (Scrv1,MX_NCL)|Scrv1 = Mx_ncl;
			Definition: 1;
		}
		Parameter Map_Scrv1_MX_NCI {
			IndexDomain: (Scrv1,MX_NCI)|Scrv1 = mx_nci;
			Definition: 1;
		}
		Parameter Map_MX_NCL_MX_NCI {
			IndexDomain: (MX_NCL,MX_NCI)|mx_ncl = Mx_nci;
			Definition: 1;
		}
		Parameter Map_Sulf_M3 {
			IndexDomain: (Sulf,M3);
		}
		Parameter Map_Mx_so2_Mx_So2_Tran {
			IndexDomain: (Mx_so2,Mx_so2_tran)|mx_so2=Mx_so2_tran;
			Definition: 1;
		}
		Parameter Map_Sulf2_M3 {
			IndexDomain: (M4,M3);
			Definition: M4=M3;
		}
		Parameter Map_e_M11 {
			IndexDomain: (e,M11);
			Text: "Maps exporting region names to ftab ordering";
		}
		StringParameter IntSplyName {
			IndexDomain: (e,M11);
		}
		Parameter Map_i_M4 {
			IndexDomain: (i,M4);
			Text: "Maps importing regions to Europe,Asia,America";
		}
		StringParameter IntlDemGroup {
			IndexDomain: (i,M4);
		}
		Parameter MAP_M4_MX_Rnk {
			IndexDomain: (M4,MX_RNK);
			Definition: M4=MX_Rnk;
		}
		Parameter MAP_mnumyr_yr {
			IndexDomain: (MNUMYR,yr);
			Property: Integer;
			Definition: mnumyr = yr - 1989;
		}
		Parameter MAP_mnumy3_yr {
			IndexDomain: (MNUMY3,yr);
			Property: Integer;
			Definition: mnumy3 = yr - 1986;
		}
		Parameter MAP_cyr_yr {
			IndexDomain: (cyr,yr);
			Definition: cyr = yr;
		}
		Parameter MAP_ecpfph_pyr {
			IndexDomain: {
				(ECPFPH,pyr)|ecpfph = 1 or ecpfph = 2
				or ecpfph = 3 or ecpfph = 4 or
				ecpfph = 5 or ecpfph = 6 or
				ecpfph = 7 or ecpfph = 8 or
				ecpfph = 9 or ecpfph = 10 or
				ecpfph = 11 or ecpfph = 12 or
				ecpfph = 13 or ecpfph = 14 or
				ecpfph = 15 or ecpfph = 16 or
				ecpfph = 17 or ecpfph = 18 or
				ecpfph = 19 or ecpfph = 20 or
				ecpfph = 21 or ecpfph = 22 or
				ecpfph = 23 or ecpfph = 24 or
				ecpfph = 25 or ecpfph = 26 or
				ecpfph = 27 or ecpfph = 28 or
				ecpfph = 29 or ecpfph = 30 or
				ecpfph = 31
			}
			Definition: 1;
		}
		Parameter MAP_ecpfph_cyr_yr {
			IndexDomain: {
				(cyr,ECPFPH,yr)|(ecpfph = 1 or ecpfph = 2
				or ecpfph = 3 or ecpfph = 4 or
				ecpfph = 5 or ecpfph = 6 or
				ecpfph = 7 or ecpfph = 8 or
				ecpfph = 9 or ecpfph = 10 or
				ecpfph = 11 or ecpfph = 12 or
				ecpfph = 13 or ecpfph = 14 or
				ecpfph = 15 or ecpfph = 16 or
				ecpfph = 17 or ecpfph = 18 or
				ecpfph = 19 or ecpfph = 20 or
				ecpfph = 21 or ecpfph = 22 or
				ecpfph = 23 or ecpfph = 24 or
				ecpfph = 25 or ecpfph = 26 or
				ecpfph = 27 or ecpfph = 28 or
				ecpfph = 29 or ecpfph = 30 or
				ecpfph = 31) and  yr = min(2050,cyr-1+ecpfph)
			}
			Definition: ecpfph;
		}
		Parameter MAP_ecpfph_yr {
			IndexDomain: (ECPFPH,yr);
			Definition: Sum(cyr,MAP_ecpfph_cyr_yr(cyr,ECPFPH,yr));
		}
		Parameter MAP_ecpfph_globalyr {
			IndexDomain: (ECPFPH,cyr);
			Text: "for expected prices sent to the electricity model, this will be the last year that will represent a calculation (all later years will copy the last calc\'ed value)";
			Definition: ecpfph|ecpfph<=ncntrl_lastyr('1')-cyr+1990;
		}
		Parameter MAP_ecpxph_pyr {
			IndexDomain: {
				(ECPFPH,pyr)|ecpfph = pyr - ncntrl_curcalyr(1) +1 or ecpfph = pyr - ncntrl_curcalyr(1) +2
				or ecpfph = pyr - ncntrl_curcalyr(1) +3 or ecpfph = pyr - ncntrl_curcalyr(1) +4 or
				ecpfph = pyr - ncntrl_curcalyr(1) +5
			}
			Definition: 1;
		}
		Parameter Map_globalyr_cyr {
			IndexDomain: (globalyr,cyr)|globalyr=cyr-1989;
			Definition: 1;
		}
		Parameter Map_globalyr_steoyr {
			IndexDomain: (globalyr,cyr)|globalyr=cyr-1989;
			Definition: 1;
		}
		Parameter Map_m14_mnumlr {
			IndexDomain: (M14,MNUMLR)|m14=mnumlr;
			Definition: 1;
		}
		Parameter Map_m14_nsregn {
			IndexDomain: (M14,nsregn)|m14=nsregn;
			Definition: 1;
		}
		Parameter Map_NSREGN_mnumlr {
			IndexDomain: (NSREGN,MNUMLR);
			Definition: NSREGN=mnumlr;
		}
		Parameter Map_mxprf_lnum {
			IndexDomain: (MX_PRF,lnum)|mx_prf = lnum;
			Definition: 1;
		}
		Parameter Map_mxprf_snum {
			IndexDomain: (MX_PRF,snum)|mx_prf = snum;
			Definition: 1;
		}
		Parameter Map_mxprf_tnum {
			IndexDomain: (MX_PRF,tnum)|mx_prf = tnum;
			Definition: 1;
		}
		Parameter Map_mxprf_cnum {
			IndexDomain: (MX_PRF,cnum)|mx_prf=cnum;
			Definition: 1;
		}
		Parameter Map_intl_mxnci {
			IndexDomain: (nUS);
		}
		Parameter Map_reportingyears {
			IndexDomain: yr|yr> cpsbaseyr -1;
			Definition: 1;
		}
		Set PlantTypeNum1 {
			Index: pt1;
		}
		StringParameter PlantTypeCode1 {
			IndexDomain: (NUTSEC);
		}
		StringParameter PlantFGDCode {
			IndexDomain: (NUTSEC);
		}
		DatabaseTable inp_Map2b {
			DataSource: CMMConnectionString;
			TableName: "tInp_Map2";
			Mapping: {
				"PlantTypeNum1" --> nutsec,
				"PlantTypeNum2" --> pt3,
				"Map2"          --> Map_nutsec_pt3
			}
		}
		Parameter EMM_CL_CLRG {
			IndexDomain: (MX_UNT);
		}
		Parameter XCL_Btu_A {
			IndexDomain: MX_NCI;
			Definition: {
				Sum((Mx_NCL,SReg,Sulf,Mtyp,Rank)|
				Mx_NCL = MX_NCI,
				Btu(Mx_NCL,SReg,Sulf,Mtyp,Rank))
			}
		}
		Parameter USDRegImportMapping {
			IndexDomain: (USi,DReg);
			Text: "-1 if the combination is possible (determined in cmm2.mdb by existence of inland rate)";
		}
		ElementParameter Map_MNUMYR_Element {
			IndexDomain: yr | yr>1989;
			Range: MNUMYR_;
			Definition: element(MNUMYR_,ord(yr)-3);
		}
		ElementParameter Map_yr_Element {
			IndexDomain: MNUMYR | MNUMYR> 15 and MNUMYR < 20;
			Range: ContractYears;
			Definition: element(ContractYears,1989);
		}
	}
	DeclarationSection Time_Saving_Parameters {
		Parameter FutureYears {
			IndexDomain: (yr);
			Definition: Val(Yr) >= Val(CPSBaseYr);
		}
		Parameter Trate1ExpFixed {
			IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,ExpSec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
		}
	}
	DeclarationSection ErrorFlags {
		Parameter EscapeVector {
			IndexDomain: (yr);
		}
		StringParameter ResultMessage {
			IndexDomain: (yr,Itr);
		}
		Parameter AIMCLSolvDebug {
			Range: integer;
			InitialData: 0;
		}
		Set CrashYear {
			SubsetOf: AllYears;
			Text: "Year where model did not solve";
		}
		ElementParameter Itr_Element {
			Range: It_;
			Definition: Element (It_,ncntrl_curitr(1));
		}
		ElementParameter Yr_Element {
			Range: ndYear;
			Definition: Element (AllYears,ncntrl_curiyr(1));
		}
	}
	DeclarationSection PackFiles {
		Parameter LInkUSDomesticCokingExportsWithInternationalShadow {
			IndexDomain: (USe,cyr);
			Definition: LInkUSDomesticCokingExportsWithInternational.ShadowPrice(USe,cyr);
		}
		Parameter IndustrialDemandRequirementShadow {
			IndexDomain: (IndSec,DReg,cyr);
			Definition: IndustrialDemandRequirement.ShadowPrice(IndSec,DReg,cyr);
		}
		Parameter CokingDemandRequirementShadow {
			IndexDomain: (CokSec,DReg,cyr);
			Definition: CokingDemandRequirement.ShadowPrice(CokSec,DReg,cyr);
		}
		Parameter ResidentialDemandRequirementShadow {
			IndexDomain: (ResSec,DReg,cyr);
			Definition: ResidentialDemandRequirement.ShadowPrice(ResSec,DReg,cyr);
		}
		Parameter LiquidsDemandRequirementShadow {
			IndexDomain: (LiquSec,DReg,cyr);
			Definition: LiquidsDemandRequirement.ShadowPrice(LiquSec,DReg,cyr);
		}
		Parameter DomesticElectricityDemandRequirementShadow {
			IndexDomain: (pt2,DReg,cyr);
			Definition: DomesticElectricityDemandRequirement.ShadowPrice(pt2,DReg,cyr);
		}
		Parameter InternationalDemandRequirementShadow {
			IndexDomain: (nonusi,tc,cyr);
			Definition: InternationalDemandRequirement.ShadowPrice(nonusi,tc,cyr);
		}
		Parameter ContractsScrubbedShadow {
			IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
			Definition: ContractsScrubbed.ShadowPrice(SReg, Sulf, Mtyp, Rank,DReg,cyr);
		}
		Parameter ContractsUnscrubbedShadow {
			IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
			Definition: ContractsUnscrubbed.ShadowPrice(SReg, Sulf, Mtyp, Rank,DReg,cyr);
		}
		Parameter SubbituminousDiversityShadow {
			IndexDomain: (DReg,pt2,cyr);
			Definition: SubbituminousDiversity.ShadowPrice(DReg,pt2,cyr);
		}
		Parameter LigniteDiversityShadow {
			IndexDomain: (DReg,pt2,cyr);
			Definition: LigniteDiversity.ShadowPrice(DReg,pt2,cyr);
		}
		Parameter ProductiveCapacityShadow {
			IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
			Definition: ProductionCapacityLimit.ShadowPrice(SReg, Sulf, Mtyp, Rank,cyr);
		}
		Parameter ResidentialDemandRequirementLevel {
			IndexDomain: (ResSec,DReg,cyr);
			Definition: ResidentialDemandRequirement.Level(ResSec,DReg,cyr);
		}
		Parameter LInkUSDomesticCokingExportsWithInternationalLevel {
			IndexDomain: (USe,cyr);
			Definition: LInkUSDomesticCokingExportsWithInternational.Level(USe,cyr);
		}
		Parameter IndustrialDemandRequirementLevel {
			IndexDomain: (IndSec,DReg,cyr);
			Definition: IndustrialDemandRequirement.Level(IndSec,DReg,cyr);
		}
		Parameter CokingDemandRequirementLevel {
			IndexDomain: (CokSec,DReg,cyr);
			Definition: CokingDemandRequirement.Level(CokSec,DReg,cyr);
		}
		Parameter LiquidsDemandRequirementLevel {
			IndexDomain: (LiquSec,DReg,cyr);
			Definition: LiquidsDemandRequirement.Level(LiquSec,DReg,cyr);
		}
		Parameter DomesticElectricityDemandRequirementLevel {
			IndexDomain: (pt2,DReg,cyr);
			Definition: DomesticElectricityDemandRequirement.Level(pt2,DReg,cyr);
		}
		Parameter InternationalDemandRequirementLevel {
			IndexDomain: (nonusi,tc,cyr);
			Definition: InternationalDemandRequirement.Level(nonusi,tc,cyr);
		}
		Parameter ContractsScrubbedLevel {
			IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
			Definition: ContractsScrubbed.Level(SReg, Sulf, Mtyp, Rank,DReg,cyr);
		}
		Parameter ContractsUnscrubbedLevel {
			IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
			Definition: ContractsUnscrubbed.Level(SReg, Sulf, Mtyp, Rank,DReg,cyr);
		}
		Parameter SubbituminousDiversityLevel {
			IndexDomain: (DReg,pt2,cyr);
			Definition: SubbituminousDiversity.Level(DReg,pt2,cyr);
		}
		Parameter LigniteDiversityLevel {
			IndexDomain: (DReg,pt2,cyr);
			Definition: LigniteDiversity.Level(DReg,pt2,cyr);
		}
	}
	DeclarationSection Quick_Output_Stats {
		Parameter TotalProductionByYear {
			IndexDomain: yr;
			Text: "million short tons";
			Definition: {
				Sum((SReg, Sulf, Mtyp, Rank,Scrv1Step)|Btu2(SReg, Sulf, Mtyp, Rank),ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank,Scrv1Step,yr)/
				Btu2(SReg, Sulf, Mtyp, Rank))
			}
		}
		Parameter TotalProductionByYearScrv {
			IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
			Text: "million short tons";
			Definition: {
				
				Sum((Scrv1Step)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank,Scrv1Step,yr)/
				Btu(Scrv1,SReg, Sulf, Mtyp, Rank))
			}
		}
		Parameter TotalExports {
			IndexDomain: (yr);
			Text: "million short tons";
			Definition: {
				!Sum((Scrv,ExpSec,USe,DReg)|Btu2(Scrv),
				!ExportsTransport2(Scrv,ExpSec,USe,DReg,yr)/Btu2(Scrv))
			}
			Comment: "See procedure CalcCoalReportingTotals";
		}
		Parameter TotElectricTranportUSCoalTons {
			IndexDomain: (yr);
			Text: "million short tons";
			Definition: {
				!Sum((nsteps,Scrv,pt2,DReg)|Btu2(Scrv),
				!ElectricityTransportAC(nsteps,Scrv,Dreg,pt2,yr)/
				!Btu2(Scrv))
			}
		}
		Parameter TotalCommercialConsumption {
			IndexDomain: (yr);
			Text: "million short tons";
			Definition: {
				!Sum((Scrv,ResSec,DReg)|Btu2(Scrv),
				!ResidentialTransport(Scrv,ResSec,DReg,yr)/Btu2(Scrv))
			}
		}
		Parameter TotalIndustrialConsumption {
			IndexDomain: (yr);
			Text: "million short tons";
			Definition: {
				!Sum((Scrv,IndSec,DReg)|Btu2(Scrv),
				!IndustrialTransport(Scrv,IndSec,DReg,yr)/Btu2(Scrv))
			}
		}
		Parameter TotalCokingConsumption {
			IndexDomain: (yr);
			Text: "million short tons";
			Definition: {
				!Sum((Scrv,CokSec,DReg)|Btu2(Scrv),
				!CokingTransport(Scrv,CokSec,DReg,yr)/Btu2(Scrv))
			}
		}
		Parameter TotalLiquidsConsumption {
			IndexDomain: (yr);
			Text: "million short tons";
			Definition: {
				!Sum((Scrv,LiquSec,DReg)|Btu2(Scrv),
				!LiquidsTransport(Scrv,LiquSec,DReg,yr)/Btu2(Scrv))
			}
		}
		Parameter TotalImports {
			IndexDomain: (yr);
			Text: "million short tons";
			Definition: {
				!Sum((nsteps,nUS,uSi,DReg,pt2),ImportsElectricity(nsteps,nUS,uSi,DReg,pt2,yr)/InternationalHeatContent(nUS,'2'))
				!+Sum((IndSec,DReg,nUS,USi),ImportsIndustrial(IndSec,DReg,nUS,USi,yr)/InternationalHeatContent(nUS,'2'))
				!+Sum((CokSec,DReg,nUS,USi),ImportsCoking(CokSec,DReg,nUS,USi,yr)/InternationalHeatContent(nUS,'1'))
			}
		}
		Parameter TotElecImportsTons {
			IndexDomain: yr;
			Definition: {
				! see CalcCoalReportingTotals
			}
		}
		Parameter TotalConsumption {
			IndexDomain: (yr);
			Text: "million short tons";
			Definition: {
				!TotalElectricityConsumptionUSCoal(yr)+
				!TotalCommercialConsumption(yr) +
				!TotalIndustrialConsumption(yr) +
				!TotalCokingConsumption(yr) +
				!TotalLiquidsConsumption(yr) +
				!TotalImports(yr)
			}
		}
		Parameter PriceByScrv {
			IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
			Text: "2022 dollars per short ton";
			Definition: {
				SupplyCurveStepBalShadow3(Scrv1,SReg, Sulf, Mtyp, Rank,yr)*
				Btu(Scrv1,SReg, Sulf, Mtyp, Rank)*MACOUT_MC_JPGDP('32')
			}
			Comment: "Changed to 2018$ to compare to ftab tables";
		}
		Parameter ResultObjTotalCost {
			IndexDomain: yr;
		}
		Parameter ElectTransportTier2Total {
			IndexDomain: yr;
			Definition: {
				!Sum((Scrv,pt2,DReg)|Btu2(Scrv),
				!ElectricityTransport2(Scrv,pt2,Dreg,yr)/
				!Btu2(Scrv))
			}
		}
	}
	Section OutputReports {
		Comment: {
			"Writing to an Access database appears to be taking too long. For some reason, it is much quicker to write
			to an Excel file."
		}
		DeclarationSection EMMDB_Tables {
			DatabaseTable CMM_SUPPLY_CRV_TABLE {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SUPPLY_CRV_TABLE";
				Mapping: {
					"Yr"         --> yr,
					"CSCurveIdx" --> Scrv1,
					"SReg"       --> SReg,
					"Sulf"       --> Sulf,
					"Mtyp"       --> Mtyp,
					"Rank"       --> Rank,
					"StepIdx"    --> Scrv1Step,
					"StepPrice"  --> SC_PRICE87,
					"StepQty"    --> SC_QUAN
				}
			}
			DatabaseTable OutputTransportDollars {
				DataSource: CoalOutConnectionString;
				TableName: "ElectricityDollars";
				Mapping: {
					"SupplyRegion"     --> SReg,
					"SulfurClass"      --> Sulf,
					"MineMethod"       --> Mtyp,
					"Rank"             --> Rank,
					"planttype"        --> pt2,
					"DReg"             --> DReg,
					"Year"             --> yr,
					"Transport1Volume" --> OutputTransport1,
					"Transport2Volume" --> OutputElectricityTransport2,
					"Transport1Cost"   --> ElectricityTransport1CostDetail,
					"Transport2Cost"   --> ElectricityTransport2CostDetail
				}
			}
			DatabaseTable CMM_SUPPLY_CRV_TABLE2 {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SUPPLY_CRV_TABLE2";
				Mapping: {
					"Yr"          --> yr,
					"CSCurveIdx"  --> Scrv1,
					"SReg"        --> SReg,
					"Sulf"        --> Sulf,
					"Mtyp"        --> Mtyp,
					"Rank"        --> Rank,
					"ProdCap"     --> FY_PROD_CAP
				}
			}
			DatabaseTable CMM_ANN_COAL_PRC_MODEL_VAR {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_ANN_COAL_PRC_MODEL_VAR";
				Mapping: {
					"CY_INDEX"            --> yr,
					"CMM_CSCURVE_INDEX"   --> Scrv1,
					"SReg"                --> SReg,
					"Sulf"                --> Sulf,
					"Mtyp"                --> Mtyp,
					"Rank"                --> Rank,
					"CMM_PRODUCTION"      --> ProductionVolumeTons3,
					"CMM_MINE_COAL_PRICE" --> SupplyCurveStepBalShadow4a
				}
			}
			DatabaseTable CMM_UTIL_CONT_DIV_VALUES {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_UTIL_CONT_DIV_VALUES";
				Mapping: {
					"CY_INDEX"          --> yr,
					"CMM_ICL_PID"       --> pu_id,
					"CMM_SDVVALUE_YEAR" --> Sdvconct_1_A2,
					"CMM_LDVVALUE_YEAR" --> Ldvconct_1B2
				}
			}
			DatabaseTable CMM_UTIL_CONT_DIV_VALUES2 {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_UTIL_CONT_DIV_VALUES";
				Mapping: {
					"CY_INDEX"           --> yr,
					"CMM_CSCURVE_INDEX"  --> Scrv1,
					"CMM_ICL_PID"        --> pu_id,
					"CMM_CONTVALUE_YEAR" --> Copy8_CdyrsScrubbed2
				}
				Comment: "contract values for scrubbed plants";
			}
			DatabaseTable CMM_UTIL_CONT_DIV_VALUES3 {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_UTIL_CONT_DIV_VALUES";
				Mapping: {
					"CY_INDEX"           --> yr,
					"CMM_CSCURVE_INDEX"  --> Scrv1,
					"CMM_ICL_PID"        --> pu_id,
					"CMM_CONTVALUE_YEAR" --> Copy9_CdyrsUnScrubbed2
				}
				Comment: "contract values for scrubbed plants";
			}
			DatabaseTable CMM_CONT_IMP_ADJ_FCTR {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SUPPLY_CRV_TABLE";
				Mapping: {
					"Yr"         --> yr,
					"CSCurveIdx" --> Scrv1,
					"SReg"       --> SReg,
					"Sulf"       --> Sulf,
					"Mtyp"       --> Mtyp,
					"Rank"       --> Rank,
					"StepIdx"    --> Scrv1Step,
					"StepPrice"  --> SC_PRICE87,
					"StepQty"    --> SC_QUAN
				}
			}
			DatabaseTable CMM_TRAN_RATE_ESC_COMP {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_TRAN_RATE_ESC_COMP";
				Mapping: {
					"CY_INDEX"                  --> yr,
					"CMM_IMPLICIT_PRC_DEFLATOR" --> MC_JPGDP,
					"CMM_TRAN_RATE_ESC_EAST"    --> FinalEast,
					"CMM_TRAN_RATE_ESC_WEST"    --> FinalWest
				}
			}
			DatabaseTable CMM_SURCHARGE_DOMESTIC1 {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SURCHARGE_DOMESTIC_Tier1";
				Mapping: {
					"CY_INDEX"         --> yr,
					"CMM_CSRG_INDEX"   --> SReg,
					"CMM_CDRG_INDEX"   --> DReg,
					"CMM_SURCHRG_TIER" --> SurcharT1(SReg,Dreg,yr)
				}
			}
			DatabaseTable Copy_CMM_SURCHARGE_DOMESTIC1 {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SURCHARGE_DOMESTIC_Tier1";
				Mapping: {
					"CY_INDEX"         --> yr,
					"CMM_CSRG_INDEX"   --> SReg,
					"CMM_CDRG_INDEX"   --> DReg,
					"CMM_TIER_INDEX"   --> tier,
					"CMM_PDONRD_PRICE" --> PDSTRHWY(yr),
					"CMM_CONVF_DSTONRD" --> CFDSTRHWY(yr),
					"CMM_IMPLICIT_PRC_DEFLATOR" --> MC_JPGDP(yr),
					"CMM_TRIGGER_DPRICE" --> TRIGGER(SReg),
					"CMM_TRIGINCR_FUELSUR" --> TRIG_INCR(SReg),
					"CMM_PERMILE_CHARGE" --> ChargePerMile_Car(SReg),
					"CMM_TONS_PERCAR" --> TonsPCar(SReg),
					"CMM_AVGDIST_TIER" --> DistanceSurcharge(SReg,DReg,tier),
					"CMM_SURCHRG_TIER" --> SurcharT1(SReg,Dreg,yr)
				}
			}
			DatabaseTable CMM_SURCHARGE_DOMESTIC1b {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SURCHARGE_DOMESTIC_TIER1b";
				Mapping: {
					"CMM_CSRG_INDEX"       --> SReg,
					"CMM_TRIGGER_DPRICE"   --> Trigger,
					"CMM_TRIGINCR_FUELSUR" --> Trig_Incr,
					"CMM_PERMILE_CHARGE"   --> ChargePerMile_Car,
					"CMM_TONS_PERCAR"      --> TonsPCar
				}
			}
			DatabaseTable CMM_SURCHARGE_DOMESTIC1c {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SURCHARGE_DOMESTIC_Tier1c";
				Mapping: {
					"CY_INDEX"                  --> yr,
					"CMM_PDONRD_PRICE"          --> pdstrhwy,
					"CMM_CONVF_DSTONRD"         --> cfdstrhwy,
					"CMM_IMPLICIT_PRC_DEFLATOR" --> MC_JPGDP
				}
			}
			DatabaseTable CMM_SURCHARGE_DOMESTIC1d {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SURCHARGE_DOMESTIC_Tier1d";
				Mapping: {
					"CMM_CSRG_INDEX"   --> SReg,
					"CMM_CDRG_INDEX"   --> DReg,
					"CMM_AVGDIST_TIER" --> DistanceSurchargeTier1
				}
			}
			DatabaseTable CMM_SURCHARGE_IMPORTS1 {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SURCHARGE_IMPORTS1";
				Mapping: {
					"CY_INDEX"         --> yr,
					"CMM_CIDRG_INDEX"  --> USi,
					"CMM_CDRG_INDEX"   --> DReg,
					"CMM_SURCHRG_IMPS" --> SurcharTImp
				}
			}
			DatabaseTable CMM_SURCHARGE_IMPORTS1b {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SURCHARGE_IMPORTS1b";
				Mapping: {
					"CMM_CIDRG_INDEX"         --> USi,
					"CMM_TRIGGER_DPRICE_IMPS" --> Trigger_Imp,
					"CMM_TRIGINCR_FUELSUR"    --> Trig_Incr_Imp,
					"CMM_PERMILE_CHARGE"      --> ChargePerMile_Car_Imp,
					"CMM_TONS_PERCAR_IMOS"    --> TonsPCar_Imp
				}
			}
			DatabaseTable CMM_SURCHARGE_IMPORTS1c {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SURCHARGE_IMPORTS1c";
				Mapping: {
					"CY_INDEX"                  --> yr,
					"CMM_PDONRD_PRICE"          --> pdstrhwy,
					"CMM_CONVF_DSTONRD"         --> cfdstrhwy,
					"CMM_IMPLICIT_PRC_DEFLATOR" --> MC_JPGDP
				}
			}
			DatabaseTable CMM_SURCHARGE_IMPORTS1d {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SURCHARGE_IMPORTS1d";
				Mapping: {
					"CMM_CIDRG_INDEX"  --> USi,
					"CMM_CDRG_INDEX"   --> DReg,
					"CMM_AVGDIST_IMPS" --> DistanceSurchargeImport
				}
			}
			DatabaseTable CMM_EXPCOAL_TRANS_ESCAL_FCTR {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SUPPLY_CRV_TABLE";
				Mapping: {
					"Yr"         --> yr,
					"CSCurveIdx" --> Scrv1,
					"SReg"       --> SReg,
					"Sulf"       --> Sulf,
					"Mtyp"       --> Mtyp,
					"Rank"       --> Rank,
					"StepIdx"    --> Scrv1Step,
					"StepPrice"  --> SC_PRICE87,
					"StepQty"    --> SC_QUAN
				}
			}
			DatabaseTable CMM_EXPCOAL_TRANS_ESCAL_IMP_FCTR {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SUPPLY_CRV_TABLE";
				Mapping: {
					"Yr"         --> yr,
					"CSCurveIdx" --> Scrv1,
					"SReg"       --> SReg,
					"Sulf"       --> Sulf,
					"Mtyp"       --> Mtyp,
					"Rank"       --> Rank,
					"StepIdx"    --> Scrv1Step,
					"StepPrice"  --> SC_PRICE87,
					"StepQty"    --> SC_QUAN
				}
			}
			DatabaseTable CMM_DETAILED_IMPORT_EXPORT1a {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_DETAILED_IMPORT_EXPORT1a";
				Mapping: {
					"CY_INDEX"                 --> yr,
					"CMM_CISRG_INDEX"          --> e,
					"CMM_CIDRG_INDEX"          --> i,
					"CMM_CICTYPE_INDEX"        --> tc,
					"CMM_CLEXOUT_BTU"          --> OutputInternationalTrills,
					"CMM_CLEXOUT_MILLION_TONS" --> OutputInternationalTons
				}
			}
			DatabaseTable CMM_DETAILED_IMPORT_EXPORT1b {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_DETAILED_IMPORT_EXPORT1b";
				Mapping: {
					"CMM_CISRG_INDEX"            --> e,
					"CMM_CICTYPE_INDEX"          --> tc,
					"CMM_CLEXOUT_HEAT_CONTENT"   --> InternationalHeatContent,
					"CMM_CLEXOUT_SULFUR_CONTENT" --> InternationalSO2Unit
				}
			}
			DatabaseTable CMM_DETAILED_IMPORT_EXPORT1c {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_DETAILED_IMPORT_EXPORT1c";
				Mapping: {
					"CY_INDEX"              --> yr,
					"CMM_CISRG_INDEX"       --> e,
					"CMM_CICTYPE_INDEX"     --> tc,
					"CMM_CLEXOUT_FOB_PRICE" --> ShadowInternationalSupplyCurve
				}
			}
			DatabaseTable CMM_DETAILED_IMPORT_EXPORT1d {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_DETAILED_IMPORT_EXPORT1d";
				Mapping: {
					"CMM_CISRG_INDEX"   --> e,
					"CMM_CIDRG_INDEX"   --> i,
					"CMM_CICTYPE_INDEX" --> tc,
					"CMM_CLEXOUT_RATE"  --> InternationUnitPriceBaseYear
				}
			}
			DatabaseTable CMM_DETAILED_IMPORT_EXPORT1e {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_DETAILED_IMPORT_EXPORT1e";
				Mapping: {
					"CY_INDEX"            --> yr,
					"CMM_CICTYPE_INDEX"   --> tc,
					"CMM_CIDRG_INDEX"     --> i,
					"ShadowPriceonDemand" --> ShadowInternationalDemandRequirement,
					"TotalimportDemand"   --> OutputInternationalDemand
				}
			}
			DatabaseTable CMM_DETAILED_IMPORT_EXPORT1f {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_DETAILED_IMPORT_EXPORT1f";
				Mapping: {
					"CY_INDEX"                 --> yr,
					"CMM_CISRG_INDEX"          --> USe,
					"CMM_CDRG_INDEX"           --> DReg,
					"CMM_CDSECT_INDEX"         --> ExpSec,
					"Scrv1"                    --> Scrv1,
					"SReg"                     --> SReg,
					"Sulf"                     --> Sulf,
					"Mtyp"                     --> Mtyp,
					"Rank"                     --> Rank,
					"CMM_CLEXOUT_BTU"          --> ExportsTransportTrills4,
					"CMM_CLEXOUT_MILLION_TONS" --> ExportsTransportTons2
				}
			}
			DatabaseTable CMM_US_IMPORTS1a {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_US_IMPORTS1a";
				Mapping: {
					"CMM_CISRG_INDEX"    --> nUS,
					"CMM_CIDRG_INDEX"    --> USi,
					"CMM_CDRG_INDEX"     --> DReg,
					"CMM_CDSECT_INDEX"   --> pt2,
					"CY_INDEX"           --> yr,
					"CMM_IMPORTS_TRILLS" --> ImportsElectricityTrillsDetail2,
					"CMM_IMPORTS_TONS"   --> ImportsElectricityTonsDetail2
				}
			}
			DatabaseTable CMM_US_IMPORTS1b {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_US_IMPORTS1b";
				Mapping: {
					"CMM_CDRG_INDEX"         --> DReg,
					"CMM_CIDRG_INDEX"        --> USi,
					"CMM_CISRG_INDEX"        --> nUS,
					"CMM_INLAND_RATE_$MMBTU" --> ElectricityInlandImportTranspRateBtuBaseYearDol
				}
			}
			DatabaseTable CMM_SO2_REPORT {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SUPPLY_CRV_TABLE";
				Mapping: {
					"Yr"         --> yr,
					"CSCurveIdx" --> Scrv1,
					"SReg"       --> SReg,
					"Sulf"       --> Sulf,
					"Mtyp"       --> Mtyp,
					"Rank"       --> Rank,
					"StepIdx"    --> Scrv1Step,
					"StepPrice"  --> SC_PRICE87,
					"StepQty"    --> SC_QUAN
				}
			}
			DatabaseTable CMM_NEMS_INFO1a {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_NEMS_INFO1a";
				Mapping: {
					"CY_INDEX"                  --> yr,
					"EFD_CENSUS_RG_INDEX"       --> CensDiv,
					"CMM_PELIN_IND_EL_PRC"      --> pelin_A,
					"CMM_PDSIN_DIESEL_FUEL_PRC" --> pdsin_A,
					"CMM_QCLEL_EL_COAL_DMD"     --> qclel_A
				}
			}
			DatabaseTable CMM_NEMS_INFO1b {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_NEMS_INFO1b";
				Mapping: {
					"CY_INDEX"                  --> yr,
					"REAL_UTILITY_BOND_RATE"    --> MC_RLRMCORPPUAA,
					"UTILITY_BOND_RATE"         --> MC_RMCORPPUAA_A,
					"CMM_QCLEL_EL_COAL_DMD"     --> qclel_Annual,
					"CMM_PDSIN_DIESEL_FUEL_PRC" --> pdsin_Annual
				}
			}
			DatabaseTable CMM_PRC_DMD_REP {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_SUPPLY_CRV_TABLE";
				Mapping: {
					"Yr"         --> yr,
					"CSCurveIdx" --> Scrv1,
					"SReg"       --> SReg,
					"Sulf"       --> Sulf,
					"Mtyp"       --> Mtyp,
					"Rank"       --> Rank,
					"StepIdx"    --> Scrv1Step,
					"StepPrice"  --> SC_PRICE87,
					"StepQty"    --> SC_QUAN
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_Elec1a {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_Elec1a";
				Mapping: {
					"CY_INDEX"                   --> yr,
					"CMM_CDRG_INDEX"             --> DReg,
					"CMM_CDSECT_INDEX"           --> pt2,
					"CMM_REQ_TRILL_BTU"          --> Qdutzr,
					"CMM_DECISION_PRICE_$_MMBTU" --> ShadowDomesticElectricityDemand
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_Elec1b {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_Elec1b";
				Mapping: {
					"CMM_CSRG_INDEX"   --> SReg,
					"Sulf"             --> Sulf,
					"Mtyp"             --> Mtyp,
					"Rank"             --> Rank,
					"CMM_CDRG_INDEX"   --> DReg,
					"Sector"           --> Sec,
					"CY_INDEX"         --> yr,
					"CMM_RATE_87$_TON" --> Trate2wSurch
				}
				Comment: {
					"This is the 1st tier transportation rate in 1987 dollars per short ton; the escalator and the surcharge have
					both been applied at this stage"
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_Elec1c {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_Elec1c";
				Mapping: {
					"CY_INDEX"             --> yr,
					"CMM_CDRG_INDEX"       --> DReg,
					"CMM_CSRG_INDEX"       --> SReg,
					"Sulf"                 --> Sulf,
					"Mtyp"                 --> Mtyp,
					"CMM_CDSECT_INDEX"     --> pt2,
					"CMM_REQ_CONTRACT_BTU" --> ContractsbyPlantType2
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_Elec1d {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_Elec1d";
				Mapping: {
					"CY_INDEX"               --> yr,
					"CMM_CDRG_INDEX"         --> DReg,
					"CMM_CDSECT_INDEX"       --> pt2,
					"Scrv1"                  --> Scrv1,
					"CMM_CSRG_INDEX"         --> SReg,
					"Sulf"                   --> Sulf,
					"Mytp"                   --> Mtyp,
					"Rank"                   --> Rank,
					"CMM_ASSIGNED_TRILL_BTU" --> ElectricityTransportACSubtotalTrill
				}
			}
			DatabaseTable CMM_PRC_DMD_TIER2_REP_Scrub_1 {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_TIER2_REP_Scrub_query1";
				Mapping: {
					"CY_INDEX"                  --> yr,
					"Scrv1"                     --> Scrv1,
					"CMM_CSRG_INDEX"            --> SReg,
					"Sulf"                      --> Sulf,
					"Mtyp"                      --> Mtyp,
					"Rank"                      --> Rank,
					"CMM_CDRG_INDEX"            --> DReg,
					"CMM_REQ_Bound_BTU"         --> TrubndScrubbedOutput,
					"Tier 1 Trills"             --> Electricity1ScrubbedOutput,
					"Tier 2 Trills"             --> Electricity2ScrubbedOutput,
					"CMM_TOTAL_2nd Tier TRANS$" --> ScrubbedTier2Cost
				}
			}
			DatabaseTable CMM_PRC_DMD_TIER2_REP_UnScrub_2 {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_TIER2_REP_UnScrub_query2";
				Mapping: {
					"CY_INDEX"                  --> yr,
					"Scrv1"                     --> Scrv1,
					"CMM_CSRG_INDEX"            --> SReg,
					"Sulf"                      --> Sulf,
					"Mtyp"                      --> Mtyp,
					"Rank"                      --> Rank,
					"CMM_CDRG_INDEX"            --> DReg,
					"CMM_REQ_Bound_BTU"         --> TrubndUnScrubbedOutput,
					"Tier 1 Trills"             --> Electricity1UnScrubbedOutput,
					"Tier 2 Trills"             --> Electricity2UnScrubbedOutput,
					"CMM_TOTAL_2nd Tier TRANS$" --> UnScrubbedTier2Cost,
					"CMM_REQ_Bound_BTU"         --> TrubndUnScrubbedOutput
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_NonElec1a {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_NonElec1a";
				Mapping: {
					"CY_INDEX"                   --> yr,
					"CMM_CDRG_INDEX"             --> DReg,
					"CMM_CDSECT_INDEX"           --> Subsec,
					"CMM_REQ_TRILL_BTU"          --> TotalLevel,
					"CMM_DECISION_PRICE_$_MMBTU" --> TotalShadow
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_NonElec1b {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_NonElec1b";
				Mapping: {
					"CY_INDEX"         --> yr,
					"CMM_CDRG_INDEX"   --> DReg,
					"CMM_CDSECT_INDEX" --> Subsec,
					"CMM_CSRG_INDEX"   --> SReg,
					"Sulf"             --> Sulf,
					"Mtyp"             --> Mtyp,
					"Rank"             --> Rank,
					"CMM_RATE_$_TRILL" --> Trate1NonElecwSurch
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_NonElec1d_Ind {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_NonElec1d_Ind";
				Mapping: {
					"Scrv1"                  --> Scrv1,
					"CMM_CSRG_INDEX"         --> SReg,
					"Sulf"                   --> Sulf,
					"Mytp"                   --> Mtyp,
					"Rank"                   --> Rank,
					"CMM_CDRG_INDEX"         --> DReg,
					"CMM_CDSECT_INDEX"       --> IndSec,
					"CY_INDEX"               --> yr,
					"CMM_ASSIGNED_TRILL_BTU" --> IndustrialTransportTrills
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_NonElec1d_Cok {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_NonElec1d_Cok";
				Mapping: {
					"Scrv1"                  --> Scrv1,
					"CMM_CSRG_INDEX"         --> SReg,
					"Sulf"                   --> Sulf,
					"Mytp"                   --> Mtyp,
					"Rank"                   --> Rank,
					"CMM_CDSECT_INDEX"       --> CokSec,
					"CMM_CDRG_INDEX"         --> DReg,
					"CY_INDEX"               --> yr,
					"CMM_ASSIGNED_TRILL_BTU" --> CokingTransportTrills
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_NonElec1d_Res {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_NonElec1d_Res";
				Mapping: {
					"Scrv1"                  --> Scrv1,
					"CMM_CSRG_INDEX"         --> SReg,
					"Sulf"                   --> Sulf,
					"Mytp"                   --> Mtyp,
					"Rank"                   --> Rank,
					"CMM_CDSECT_INDEX"       --> ResSec,
					"CMM_CDRG_INDEX"         --> DReg,
					"CY_INDEX"               --> yr,
					"CMM_ASSIGNED_TRILL_BTU" --> ResidentialTransportTrills
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_NonElec1d_Liqu {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_NonElec1d_Liqu";
				Mapping: {
					"Scrv1"                  --> Scrv1,
					"CMM_CSRG_INDEX"         --> SReg,
					"Sulf"                   --> Sulf,
					"Mytp"                   --> Mtyp,
					"Rank"                   --> Rank,
					"CMM_CDSECT_INDEX"       --> LiquSec,
					"CMM_CDRG_INDEX"         --> DReg,
					"CY_INDEX"               --> yr,
					"CMM_ASSIGNED_TRILL_BTU" --> LiquidsTransportTrills
				}
			}
			DatabaseTable CMM_PRC_DMD_REP_NonElec1d_Exp {
				DataSource: CoalOutConnectionString;
				TableName: "CMM_PRC_DMD_REP_NonElec1d_Exp";
				Mapping: {
					"Scrv1"                  --> Scrv1,
					"CMM_CSRG_INDEX"         --> SReg,
					"Sulf"                   --> Sulf,
					"Mytp"                   --> Mtyp,
					"Rank"                   --> Rank,
					"CMM_CDSECT_INDEX"       --> ExpSec,
					"CMM_CDRG_INDEX"         --> DReg,
					"CY_INDEX"               --> yr,
					"CMM_ASSIGNED_TRILL_BTU" --> ExportsTransportTrills2a
				}
			}
			Parameter ShadowDomesticElectricityDemand {
				IndexDomain: (pt2,DReg,yr);
				Definition: {
					!DomesticElectricityDemandRequirement.ShadowPrice(pt2,DReg,cyr)
				}
			}
			Parameter ShadowResidCommDemand {
				IndexDomain: (ResSec,DReg,cyr);
			}
			Parameter LevelResidCommDemand {
				IndexDomain: (ResSec,DReg,cyr);
			}
			Parameter ShadowIndustrialDemand {
				IndexDomain: (IndSec,DReg,cyr);
			}
			Parameter LevelIndustrialDemand {
				IndexDomain: (IndSec,DReg,cyr);
			}
			Parameter ShadowCokingDemand {
				IndexDomain: (CokSec,DReg,cyr);
				Definition: {
					!
				}
			}
			Parameter LevelCokingDemand {
				IndexDomain: (CokSec,DReg,cyr);
				Definition: {
					!
				}
			}
			Parameter TotalLevel {
				IndexDomain: (DReg,Subsec,yr);
				Text: "sum non-electr levels except for CTL";
				Definition: {
					LevelResidCommDemand(Subsec,DReg,yr)+
					LevelIndustrialDemand(SubSec,DReg,yr) +
					LevelCokingDemand(SubSec,DReg,yr)+
					TotalLevelExport(SubSec,DReg,yr)
				}
			}
			Parameter ShadowThermExpSecExportDemand {
				IndexDomain: (USe,cyr);
			}
			Parameter ShadowCokeExpSecExportDemand {
				IndexDomain: (USe,cyr);
			}
			Parameter ShadowSdxCoking3a {
				IndexDomain: (DReg,CokeExpSec,cyr);
				Definition: SdxCoking3.ShadowPrice(DReg,CokeExpSec,cyr);
			}
			Parameter LevelSdxCoking3a {
				IndexDomain: (DReg,CokeExpSec,cyr);
				Definition: SdxCoking3.Level(DReg,CokeExpSec,cyr);
			}
			Parameter ShadowSdxTherm3a {
				IndexDomain: (DReg,ThermExpSec,cyr);
				Definition: SdxTherm3.ShadowPrice(DReg,ThermExpSec,cyr);
			}
			Parameter LevelSdxTherm3a {
				IndexDomain: (DReg,ThermExpSec,cyr);
				Definition: SdxTherm3.Level(DReg,ThermExpSec,cyr);
			}
			Parameter TotalShadowExport {
				IndexDomain: (DReg,ExpSec,yr);
				Definition: {
					ShadowSdxCoking3a(DReg,ExpSec,yr) +
					ShadowSdxTherm3a(DReg,ExpSec,yr)
				}
			}
			Parameter TotalLevelExport {
				IndexDomain: (ExpSec,DReg,yr);
				Definition: Sum((Scrv1,SReg, Sulf, Mtyp, Rank),ExportsTransportTrills2(Scrv1,SReg, Sulf, Mtyp, Rank,ExpSec,DReg,yr));
			}
			Parameter TotalShadow {
				IndexDomain: (Subsec,DReg,yr);
				Text: {
					"sum non-electr levels except for CTL; 2013 dollars"
				}
				Definition: {
					ShadowResidCommDemand(Subsec,DReg,yr)+
					ShadowIndustrialDemand(SubSec,DReg,yr) +
					ShadowCokingDemand(SubSec,DReg,yr)
				}
				Comment: "even though I am summing...because the Subsec are unique for each sector it won\'t really sum";
			}
			Parameter TotalTrates {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,SubSec,yr);
				Text: "sum non-electr levels except for CTL";
				Definition: {
					(Trate1ResidwSurchBtu(SReg,Sulf,Mtyp,Rank,DReg,SubSec,yr)+
					Trate1IndwSurchBtu(SReg,Sulf,Mtyp,Rank,DReg,SubSec,yr) +
					Trate1CokewSurchBtu(SReg,Sulf,Mtyp,Rank,DReg,SubSec,yr) +
					Trate1LiquwSurchBtu(SReg,Sulf,Mtyp,Rank,DReg,SubSec,yr)+
					Trate1ExpwSurchBtu(SReg,Sulf,Mtyp,Rank,DReg,SubSec,yr))*
					mc_jpgdp(CPSBaseYr)
				}
				Comment: "even though I am summing...because the Subsec are unique for each sector it won\'t really sum";
			}
			Parameter TotalAssigned {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,DReg,Subsec,yr);
				Text: "sum non-electr levels";
				Definition: {
					!ResidentialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr)+
					!IndustrialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr) +
					!CokingTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr) +
					!LiquidsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr)+
					!ExportsTransportTrills2(Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr)
				}
				Comment: "even though I am summing...because the Subsec are unique for each sector it won\'t really sum";
			}
			Parameter ShadowLiquidDemand {
				IndexDomain: (LiquSec,DReg,cyr);
				Definition: {
					!DomesticElectricityDemandRequirement.ShadowPrice(pt2,DReg,cyr)
				}
			}
			Parameter LevelLiquidDemand {
				IndexDomain: (LiquSec,DReg,cyr);
				Definition: {
					!DomesticElectricityDemandRequirement.ShadowPrice(pt2,DReg,cyr)
				}
			}
			Parameter Erates1 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,yr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					Trate2wSurchBtu('1',SReg, Sulf, Mtyp, Rank,DReg,'E',yr)*mc_jpgdp(CPSBaseYr)
					!CPSBaseYr
				}
			}
			Parameter Erates1a {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Text: "current year dollars 2013 dollars per mmBtu";
				Definition: Erates1(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter TotalContracts {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,yr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					Copy9c_CdyrsUnscrubbed(SReg, Sulf, Mtyp, Rank,DReg,yr) +
					Copy8c_CdyrsScrubbed(SReg, Sulf, Mtyp, Rank,DReg,yr)
				}
			}
			Parameter ContractsbyPlantType {
				IndexDomain: (pt2,Scrv1,DReg,yr);
				Text: "Annual Contract Quantity in TBtus";
				Definition: {
					Sum(pu_id|EMM_CL_ECPT_Fast(pu_id,yr,pt2) and MapPlantid_unitid_DemandRegion(pu_id,DReg),
					Copy9_CdyrsUnScrubbed2(pu_Id,Scrv1,yr)+  Copy8_CdyrsScrubbed2(pu_id,Scrv1,yr))
					!Replace with new contracts calculation and input files May 2022 DAF
					!ActiveContScrubbedCoal(pu_id,SReg,Sulf,Mtyp,Rank,cyr) + ActiveContUnScrubbedCoal(pu_id,SReg,Sulf,Mtyp,Rank,cyr)
				}
				Comment: {
					"This is the annual contract Quantity in TBtus - Pre 2022 Read from CMM.mdb Contracts table but now from cmmProfiles.txt
					[see db indentifier inp_specificplantprofile]"
				}
			}
			Parameter ContractsbyPlantType2 {
				IndexDomain: (pt2,SReg,Sulf,Mtyp,Rank,DReg,yr);
				Definition: Sum(Scrv1|Btu(Scrv1,SReg,Sulf,Mtyp,Rank),ContractsbyPlantType(pt2,Scrv1,DReg,yr));
			}
			Parameter SupplyCurveStepBalShadow4a {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
				Text: "current year dollars";
				Definition: {
					SupplyCurveStepBalShadow4(Scrv1,SReg,Sulf,Mtyp,Rank,yr)*
					mc_jpgdp(CPSBaseYr)
				}
			}
			Parameter ElectricityTransportACSubtotalTrill {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: {
					!ElectricityTransportACSubtotal(SReg,Sulf,Mtyp,Rank,pt2,DReg,yr)
				}
			}
			Parameter ShadowInternationalSupplyCurve {
				IndexDomain: (yr,e,tc);
				Definition: IntlSupplyStepBalancewTotal.ShadowPrice(e,tc,yr)*mc_jpgdp(CPSBaseyr);
			}
			Parameter OutputInternationalTrills {
				IndexDomain: (e,i,tc,yr);
				Definition: {
					if tc = '1' then
					OutputTrillsTransportUSbyImporterCoking(e,i,yr)+
					OutputTrillsTransportNonUSbyImporterCoking(e,i,yr)
					elseif tc = '2' then
					OutputTrillsTransportUSbyImporterThermal(e,i,yr)+
					OutputTrillsTransportNonUSbyImporterThermal(e,i,yr)
					endif
				}
			}
			Parameter OutputInternationalTons {
				IndexDomain: (e,i,tc,yr);
				Definition: {
					if tc = '1' then
					OutputTonsTransportTotalbyImporterCoking(e,i,yr)
					elseif tc = '2' then
					OutputTonsTransportTotalbyImporterThermal(e,i,yr)
					endif
				}
			}
			Parameter InternationUnitPriceBaseYear {
				IndexDomain: (e,i,tc);
				Definition: InternationalUnitTransport(e,i,tc)/1.18/27.78*mc_jpgdp(CPSBaseyr);
			}
			Parameter ShadowInternationalDemandRequirement {
				IndexDomain: (i,tc,yr);
				Definition: InternationalDemandRequirement.ShadowPrice(i,tc,yr)*mc_jpgdp(CPSBaseyr);
			}
			Parameter OutputInternationalDemand {
				IndexDomain: (i,tc,yr);
				Definition: TotalTransporttoCountryi(i,tc,yr);
			}
			Parameter ElectricityInlandImportTranspRateBtuBaseYearDol {
				IndexDomain: (DReg,USi,nUS);
				Definition: InlandImportTranspRateBtu('E',nUS,DReg,USi)*mc_jpgdp(CPSBaseYr);
			}
			Parameter Electricity1ScrubbedOutput {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Total scrubbed volume";
				Definition: ElectricityTransportScrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter Electricity1UnScrubbedOutput {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Total unscrubbed volume";
				Definition: ElectricityTransportUnScrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter Electricity2ScrubbedOutput {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Total scrubbed volume GETTING 2ND TIER RATE";
				Definition: ElectricityTransport2Scrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter Electricity2UnScrubbedOutput {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Total unscrubbed volume GETTING 2ND TIER";
				Definition: ElectricityTransport2UnScrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter TrubndScrubbedOutput {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "bound";
				Definition: TrubndScrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter TrubndUnScrubbedOutput {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "bound";
				Definition: TrubndUnScrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter ScrubbedTier2Cost {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: ElectricityTransport2Scrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr)*tier2_adj(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter UnScrubbedTier2Cost {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: ElectricityTransport2UnScrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr)*tier2_adj(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter pelin_A {
				IndexDomain: (CensDiv,yr);
				Definition: {
					!Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
					!QBLK_QCLEL(mnumcr,mnumyr))
					Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and MAP_mnumyr_yr(MNUMYR,yr),
					MPBLK_PELIN(mnumcr,MNUMYR))
				}
			}
			Parameter qclel_Annual {
				IndexDomain: (yr);
				Definition: {
					Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),
					QBLK_QCLEL('11',mnumyr))
				}
			}
			Parameter pdsin_Annual {
				IndexDomain: (yr);
				Definition: {
					Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),
					MPBLK_PDSIN('11',MNUMYR))
				}
			}
			Parameter pdsin_A {
				IndexDomain: (CensDiv,yr);
				Definition: {
					
					Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and MAP_mnumyr_yr(MNUMYR,yr),
					MPBLK_PDSIN(mnumcr,MNUMYR))
				}
			}
			Parameter MC_RMCORPPUAA_A {
				IndexDomain: (yr);
				Definition: {
					
					Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),
					MACOUT_MC_RMCORPPUAA(MNUMYR))
				}
			}
		}
		DeclarationSection EMMDBVariables {
			Parameter IndustrialTransportTrills {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and Map_reportingyears(yr);
				Definition: {
					!IndustrialTransport(SReg,Sulf,Mtyp,Rank,IndSec,DReg,yr)
				}
			}
			Parameter ResidentialTransportTrills {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and Map_reportingyears(yr);
				Definition: {
					!ResidentialTransport(SReg,Sulf,Mtyp,Rank,ResSec,DReg,yr)
				}
			}
			Parameter CokingTransportTrills {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank)and Map_reportingyears(yr);
				Definition: {
					!CokingTransport(SReg,Sulf,Mtyp,Rank,CokSec,DReg,yr)
				}
			}
			Parameter ExportsTransportTrills2a {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank)and Map_reportingyears(yr);
				Definition: {
					!ExportsTransportTrills2(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,yr)
					sum( USe, ExportsTransportDetailCurve2(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ElectricityTransport2CostScrvYr {
				IndexDomain: (Scrv1,pt2,DReg,yr)|Map_reportingyears(yr);
				Range: nonnegative;
				Definition: {
					!Sum(Scrv|Scrv in ElectricitySupplyCurves and Btu(Scrv1,Scrv),ElectricityTransport2Cost(Scrv,pt2,DReg,yr))
				}
			}
			Parameter PriceByYr {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,yr)|Btu2(SReg,Sulf,Mtyp,Rank) and map_reportingyears(yr);
			}
			Parameter TotalMineDolByYr2 {
				IndexDomain: (M14,M4,M3,yr)|map_reportingyears(yr);
			}
			Parameter TotalMineDolByYr3 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,yr)|Btu2(SReg,Sulf,Mtyp,Rank) and map_reportingyears(yr) and yr <= CurrentStudyYear;
			}
			Parameter Trate1NonElecwSurch {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Subsec,yr)|Btu2(SReg,Sulf,Mtyp,Rank) and Subsec in NonElectricitySubSector and Map_reportingyears(yr);
				Text: "transportation rate for non-electricity sector ($/ton)";
				Definition: {
					If (SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					                           SReg = '04EI' or SReg = '05WI' or SReg = '06GL') then
					              Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,SubSec)*FinalEast(yr)+
					              Surchart1(Sreg,DReg,yr)
					                            else
					              Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,SubSec)*FinalWest(yr)+
					              Surchart1(Sreg,DReg,yr)
					        endif
				}
			}
			Parameter AllSectorsTransportTrills {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and Map_reportingyears(yr);
				Definition: {
					if SubSectorFlag(Subsec)=-1 then !Residential/Commercial
					   ResidentialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr)
					elseif SubSectorFlag(Subsec)=-2 then !Industrial
					   IndustrialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr)
					elseif SubSectorFlag(Subsec)=-3 then !Coking
					   CokingTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr)
					elseif SubSectorFlag(Subsec)=-4 then !Liquids
					   LiquidsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr)
					elseif SubSectorFlag(Subsec)=-5 then !Exports
					   ExportsTransportTrills2a(Scrv1,SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr)
					elseif SubSectorFlag(Subsec)=-6 then !Electric Power
					   sum(pt2| ElecSubsec_Map(Subsec, pt2), ElectricityTransportACSubtotalTrill(Scrv1,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr))
					endif;
				}
			}
			StringParameter WorkbookName;
			StringParameter RowRange;
			StringParameter DataRange;
			StringParameter DataRange1;
			StringParameter DataRange2;
			StringParameter DataRange3;
			StringParameter DataRange4;
			StringParameter DataRange5;
			StringParameter DataRange6;
			StringParameter ExcelErrorMessage;
			Parameter ExcelStatus;
			ElementParameter err {
				Range: errh::PendingErrors;
			}
		}
		Procedure WriteEMMDBTables {
			Body: {
				AccessDatabaseFile:= "coal_out.mdb"; 
				                    CreateAccessFileConnectionString(AccessDatabaseFile, CoalOutConnectionString);
				
				!!!write to table CMM_SUPPLY_CRV_TABLE;!triple exclamation at the beginning means I updated it
				!!!write to table CMM_SUPPLY_CRV_TABLE2;
				!!!write to table CMM_ANN_COAL_PRC_MODEL_VAR;!priority tables includes mineprice
				!!write to table CMM_UTIL_CONT_DIV_VALUES;! lignite and subbituminous constraints
				!!write to table CMM_UTIL_CONT_DIV_VALUES2;!adding scrubbed contract values
				!!!write to table CMM_UTIL_CONT_DIV_VALUES3; !adding unscrubbed contract values
				if EscalAndSurchargeOutput = 1 then
					write to table CMM_TRAN_RATE_ESC_COMP;
					write to table CMM_SURCHARGE_DOMESTIC1;
					write to table CMM_SURCHARGE_DOMESTIC1b;
					write to table CMM_SURCHARGE_DOMESTIC1c;
					write to table CMM_SURCHARGE_DOMESTIC1d;
				endif;
				!!!write to table CMM_SURCHARGE_IMPORTS1;
				!!!write to table CMM_SURCHARGE_IMPORTS1b;!NOT WORKING
				!!!write to table CMM_SURCHARGE_IMPORTS1c;!NOT WORKING
				!!!write to table CMM_SURCHARGE_IMPORTS1d;
				if ElectricityOutput = 1 then
					write to table CMM_PRC_DMD_REP_Elec1a; !companion to CMM_US_IMPORTS
					write to table CMM_PRC_DMD_REP_Elec1b;
					write to table OutputTransportDollars;
					write to table CMM_PRC_DMD_REP_Elec1c;
					write to table CMM_PRC_DMD_REP_Elec1d;
				endif;
				!!!write to table CMM_PRC_DMD_REP_NonElec1a;
				if NonElectricityOutput = 1 then
					write to table CMM_PRC_DMD_REP_NonElec1a;
					!write to table CMM_PRC_DMD_REP_NonElec1b;
					!write to table CMM_PRC_DMD_REP_NonElec1d_Ind;
					!write to table CMM_PRC_DMD_REP_NonElec1d_Res;
					!write to table CMM_PRC_DMD_REP_NonElec1d_Cok;
					!write to table CMM_PRC_DMD_REP_NonElec1d_Liqu;
					!write to table CMM_PRC_DMD_REP_NonElec1d_Exp;
					!write IndustrialTransportTrills(Scrv1,SReg,sulf,Mtyp,Rank,IndSec,Dreg,yr) | Btu(Scrv1,Sreg,Sulf,Mtyp,Rank)and
					!IndustrialTransportTrills(Scrv1,SReg,sulf,Mtyp,Rank,IndSec,Dreg,yr) )to table CMM_PRC_DMD_REP_NonElec1d_Ind;
					!write ResidentialTransportTrills(Scrv1,SReg,sulf,Mtyp,Rank,IndSec,Dreg,yr) | Btu(Scrv1,Sreg,Sulf,Mtyp,Rank)and
					!ResidentialTransportTrills(Scrv1,SReg,sulf,Mtyp,Rank,ResSec,Dreg,yr) )to table CMM_PRC_DMD_REP_NonElec1d_Res;
					!write CokingTransportTrills((Scrv1,SReg,sulf,Mtyp,Rank,CokSec,Dreg,yr)| Btu(Scrv1,Sreg,Sulf,Mtyp,Rank)and
					!CokingTransportTrills(Scrv1,SReg,sulf,Mtyp,Rank,CokSec,Dreg,yr) )to table CMM_PRC_DMD_REP_NonElec1d_Cok;
					!write to table CMM_PRC_DMD_REP_NonElec1d_Liqu;
					!write ExportsTransportTrills2a(Scrv1,SReg,sulf,Mtyp,Rank,ExpSec,Dreg,yr)| Btu(Scrv1,Sreg,Sulf,Mtyp,Rank)and
					!ExportsTransportTrills2a(Scrv1,SReg,sulf,Mtyp,Rank,ExpSec,Dreg,yr) )to table CMM_PRC_DMD_REP_NonElec1d_Exp;
				endif;
				!!!write to table CMM_DETAILED_IMPORT_EXPORT1a;
				!!!write to table CMM_DETAILED_IMPORT_EXPORT1b;
				!!!write to table CMM_DETAILED_IMPORT_EXPORT1c;!companion to CMM_US_IMPORTS
				!!!write to table CMM_DETAILED_IMPORT_EXPORT1d;!companion to CMM_US_IMPORTS
				!!!write to table CMM_DETAILED_IMPORT_EXPORT1e;
				!write to table CMM_DETAILED_IMPORT_EXPORT1f;
				!!!write to table CMM_US_IMPORTS1a;  !need to fill in duals and activated carbon info.
				!!!write to table CMM_US_IMPORTS1b;
				if ElectricityOutput = 1 then
					write to table CMM_PRC_DMD_TIER2_REP_Scrub_1;
					write to table CMM_PRC_DMD_TIER2_REP_UnScrub_2;
				endif;
				!!write to table CMM_NEMS_INFO1a;
				!!write to table CMM_NEMS_INFO1b;
				!!write to table CMM_CONT_IMP_ADJ_FCTR;!priority tables
				!!write to table CMM_TRAN_RATE_ESC_COMP;
				!!write to table CMM_SURCHARGE_DOMESTIC;
				!!write to table CMM_SURCHARGE_IMPORTS;
				!!write to table CMM_EXPCOAL_TRANS_ESCAL_FCTR;
				!!write to table CMM_EXPCOAL_TRANS_ESCAL_IMP_FCTR;
				!!write to table CMM_DETAILED_IMPORT_EXPORT;
				
				!!write to table CMM_ANN_COAL_PRODUCTION;
				!!write to table  CMM_SO2_REPORT;
				
				!!write to table CMM_PRC_DMD_TIER2_REP;
				
				!write to table CMM_DVCONCT_OTHERBTU,
				!write to table CMM_UTIL_CONT_DIV_VALUES,
				!write to table CMM_CONT_IMP_ADJ_FCTR,
				!write to table CMM_TRAN_RATE_ESC_COMP,
				!write to table CMM_SURCHARGE_DOMESTIC,
				!write to table CMM_SURCHARGE_IMPORTS,
				!write to table CMM_EXPCOAL_TRANS_ESCAL_FCTR,
				!write to table CMM_EXPCOAL_TRANS_ESCAL_IMP_FCTR,
				!write to table CMM_TIER2_REP,
				!write to table CMM_PRC_DMD_TIER2_REP,
				!write to table CMM_US_IMPORTS,
				!write to table CMM_NEMS_INFO,
				!write to table CMM_PRC_DMD_REP,
				!write to table CMM_PRC_DMD_TIER2_REP,
				!write to table CMM_SUPPLY_CRV_TABLE,
				!write to table CMM_CPS_PRC_MODEL_COST_FCTRS,
				!write to table CMM_ANN_COAL_PRC_MODEL_VAR,
				!write to table CMM_FCST_PRODUCTIVITY,
				!write to table CMM_CPS_PRC_MODEL_COEF,
				!write to table CMM_CLUSER_ANN_INPUTS,
				!write to table CMM_CLUSER_INPUTS,
				!write to table CMM_SREG_NBAS_CTYPE_DEF,
				!write to table CMM_BASE_YR_SUPPLY_CURVE,
				!write to table CMM_SCURVE_STEP_SIZE,
				!write to table CMM_SCURVE_REGTYPE_MAP,
				
				
				CloseDataSource(CoalOutConnectionString);
			}
		}
		Procedure EmptyEMMDBTables {
			Body: {
				AccessDatabaseFile:= "coal_out.mdb"; 
				CreateAccessFileConnectionString(AccessDatabaseFile, CoalOutConnectionString);
				
				
				EMPTY CMM_SUPPLY_CRV_TABLE;!triple exclamation at the beginning means I updated it
				EMPTY CMM_SUPPLY_CRV_TABLE2;
				EMPTY CMM_ANN_COAL_PRC_MODEL_VAR;!priority tables includes mineprice
				EMPTY CMM_UTIL_CONT_DIV_VALUES;! lignite and subbituminous constraints
				EMPTY CMM_UTIL_CONT_DIV_VALUES2;!adding scrubbed contract values
				EMPTY CMM_UTIL_CONT_DIV_VALUES3; !adding unscrubbed contract values
				EMPTY CMM_TRAN_RATE_ESC_COMP;
				EMPTY CMM_SURCHARGE_DOMESTIC1;
				EMPTY CMM_SURCHARGE_DOMESTIC1b;
				EMPTY CMM_SURCHARGE_DOMESTIC1c;
				EMPTY CMM_SURCHARGE_DOMESTIC1d;
				EMPTY CMM_SURCHARGE_IMPORTS1;
				EMPTY CMM_SURCHARGE_IMPORTS1b;!NOT WORKING
				EMPTY CMM_SURCHARGE_IMPORTS1c;!NOT WORKING
				EMPTY CMM_SURCHARGE_IMPORTS1d;
				EMPTY CMM_PRC_DMD_REP_Elec1a; !companion to CMM_US_IMPORTS
				EMPTY CMM_PRC_DMD_REP_Elec1b;
				EMPTY CMM_PRC_DMD_REP_Elec1c;
				EMPTY CMM_PRC_DMD_REP_NonElec1a;
				EMPTY CMM_PRC_DMD_REP_NonElec1b;
				!EMPTY CMM_PRC_DMD_REP_NonElec1d_Ind;
				!EMPTY CMM_PRC_DMD_REP_NonElec1d_Cok;
				!EMPTY CMM_PRC_DMD_REP_NonElec1d_Res;
				!EMPTY CMM_PRC_DMD_REP_NonElec1d_Exp;
				!EMPTY CMM_PRC_DMD_REP_NonElec1d_Liqu;
				EMPTY CMM_DETAILED_IMPORT_EXPORT1a;
				EMPTY CMM_DETAILED_IMPORT_EXPORT1b;
				EMPTY CMM_DETAILED_IMPORT_EXPORT1c;!companion to CMM_US_IMPORTS
				EMPTY CMM_DETAILED_IMPORT_EXPORT1d;!companion to CMM_US_IMPORTS
				EMPTY CMM_DETAILED_IMPORT_EXPORT1e;
				EMPTY CMM_DETAILED_IMPORT_EXPORT1f;
				EMPTY CMM_US_IMPORTS1a;  !need to fill in duals and activated carbon info.
				EMPTY CMM_US_IMPORTS1b;
				EMPTY CMM_PRC_DMD_TIER2_REP_Scrub_1;
				EMPTY CMM_PRC_DMD_TIER2_REP_UnScrub_2;
				EMPTY OutputTransportDollars;
				EMPTY CMM_NEMS_INFO1a;
				EMPTY CMM_NEMS_INFO1b;
				
				
				
				!!write to table CMM_CONT_IMP_ADJ_FCTR;!priority tables
				!!write to table CMM_TRAN_RATE_ESC_COMP;
				!!write to table CMM_SURCHARGE_DOMESTIC;
				!!write to table CMM_SURCHARGE_IMPORTS;
				!!write to table CMM_EXPCOAL_TRANS_ESCAL_FCTR;
				!!write to table CMM_EXPCOAL_TRANS_ESCAL_IMP_FCTR;
				!!write to table CMM_DETAILED_IMPORT_EXPORT;
				
				!!write to table CMM_ANN_COAL_PRODUCTION;
				!!write to table  CMM_SO2_REPORT;
				
				!!write to table CMM_PRC_DMD_TIER2_REP;
				
				!write to table CMM_DVCONCT_OTHERBTU,
				!write to table CMM_UTIL_CONT_DIV_VALUES,
				!write to table CMM_CONT_IMP_ADJ_FCTR,
				!write to table CMM_TRAN_RATE_ESC_COMP,
				!write to table CMM_SURCHARGE_DOMESTIC,
				!write to table CMM_SURCHARGE_IMPORTS,
				!write to table CMM_EXPCOAL_TRANS_ESCAL_FCTR,
				!write to table CMM_EXPCOAL_TRANS_ESCAL_IMP_FCTR,
				!write to table CMM_TIER2_REP,
				!write to table CMM_PRC_DMD_TIER2_REP,
				!write to table CMM_US_IMPORTS,
				!write to table CMM_NEMS_INFO,
				!write to table CMM_PRC_DMD_REP,
				!write to table CMM_PRC_DMD_TIER2_REP,
				!write to table CMM_SUPPLY_CRV_TABLE,
				!write to table CMM_CPS_PRC_MODEL_COST_FCTRS,
				!write to table CMM_ANN_COAL_PRC_MODEL_VAR,
				!write to table CMM_FCST_PRODUCTIVITY,
				!write to table CMM_CPS_PRC_MODEL_COEF,
				!write to table CMM_CLUSER_ANN_INPUTS,
				!write to table CMM_CLUSER_INPUTS,
				!write to table CMM_SREG_NBAS_CTYPE_DEF,
				!write to table CMM_BASE_YR_SUPPLY_CURVE,
				!write to table CMM_SCURVE_STEP_SIZE,
				!write to table CMM_SCURVE_REGTYPE_MAP,
				
				CloseDataSource(CoalOutConnectionString);
			}
		}
		Procedure WriteMinePrices {
			Body: {
				! Changed 10-17-18 DAF  Prices in $1987 per MMBtu over $5 per MMBtu should not be used
				!moved into this procedure 05/07-20  DAF
				PriceSolutionBySC(SReg, Sulf, Mtyp, Rank, cyr) := if SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr) > 5 then
											MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'7',cyr)
										elseif SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr) < 0 then  0.0
										else
											SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr)
										endif;
				
				PriceByYr(SReg,Sulf,Mtyp,Rank,cyr) := PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr);
				TotalMineDolByYr2(M14,m4,m3,cyr):= Sum((SReg,Sulf,Mtyp,Rank,yr)|Map_SReg_M14(SReg,M14) and Map_Rank_M4(Rank,M4)
				and Map_Sulf_M3(Sulf,M3)
				and Btu2(SReg,Sulf,Mtyp,Rank) and cyr=yr,
				ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*
				PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,yr));
				TotalMineDolByYr3(SReg,Sulf,Mtyp,Rank,cyr)$PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr):=
				ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr);
			}
		}
		Procedure WriteToExcelFile {
			Body: {
				 if (Switch_SaveEachCycle) then
				 WorkbookName := FormatString("CoalOutput-%i.xls", CYCLEINFO_CURIRUN(1));
				 else
				   WorkbookName := "CoalOutput.xls";
				 endif;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "Industrial" ) ;
				
				                RowRange  := FormatString( "A2:H%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,yr) | IndustrialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,yr) ) + 3 ) ;
				                DataRange := FormatString( "I2:I%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,yr) | IndustrialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : IndustrialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "Industrial",
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "Residential" ) ;
				
				                RowRange  := FormatString( "A2:H%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,yr) | ResidentialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,yr) ) + 3 ) ;
				                DataRange := FormatString( "I2:I%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,yr) | ResidentialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : ResidentialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "Residential",
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "Coking" ) ;
				
				                RowRange  := FormatString( "A2:H%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,yr) | CokingTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,yr) ) + 3 ) ;
				                DataRange := FormatString( "I2:I%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,yr) | CokingTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : CokingTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "Coking",
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "Liquids" ) ;
				
				                RowRange  := FormatString( "A2:H%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr) | LiquidsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr) ) + 3 ) ;
				                DataRange := FormatString( "I2:I%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr) | LiquidsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : LiquidsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "Liquids",
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				
				
				
				                /* Nonelectricity sector revised transportation rates (backs out surcharge in base year) */
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "RevisedRate" ) ;
				
				                RowRange  := FormatString( "A2:F%i",  Count( (SReg,Sulf,Mtyp,Rank,DReg,Subsec) | Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,SubSec) ) + 3 ) ;
				                DataRange := FormatString( "G2:G%i",  Count( (SReg,Sulf,Mtyp,Rank,DReg,Subsec) | Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,SubSec) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,SubSec),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "RevisedRate",
				                                        Sparse       : 0,
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "Exports" ) ;
				
				                RowRange  := FormatString( "A2:H%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,yr) | ExportsTransportTrills2a(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,yr) ) + 3 ) ;
				                DataRange := FormatString( "I2:I%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,yr) | ExportsTransportTrills2a(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : ExportsTransportTrills2a(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "Exports",
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "ImportsElec" ) ;
				
				                RowRange  := FormatString( "A2:E%i",  Count( (nUS,USi,DReg,pt2,yr) | ImportsElectricityTonsDetail2(nUS,USi,DReg,pt2,yr) ) + 1 ) ;
				                DataRange1 := FormatString( "F2:F%i",  Count( (nUS,USi,DReg,pt2,yr) | ImportsElectricityTonsDetail2(nUS,USi,DReg,pt2,yr) ) + 1 ) ;
				                DataRange2 := FormatString( "G2:G%i",  Count( (nUS,USi,DReg,pt2,yr) | ImportsElectricityTrillsDetail2(nUS,USi,DReg,pt2,yr) ) + 1 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : ImportsElectricityTonsDetail2(nUS,USi,DReg,pt2,yr),
				                                        DataRange    : DataRange1,
				                                        RowsRange    : RowRange,
				                                        Sparse       : 0,
				                                        ColumnMode   : 3
				                                         ) ;
				                Spreadsheet::AssignTable( WorkbookName, ImportsElectricityTrillsDetail2(nUS,USi,DReg,pt2,yr), DataRange2, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "ExportsFromUS" ) ;
				
				                RowRange  := FormatString( "A2:D%i",  Count( (Use,nonUSi,tc,yr) | OutputExportFromUSTrils(USe,NonUSi,tc,yr) ) + 1 ) ;
				                DataRange1 := FormatString( "E2:E%i",  Count( (Use,nonUSi,tc,yr) | OutputExportFromUSTrils(USe,NonUSi,tc,yr) ) + 1 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : OutputExportFromUSTrils(USe,NonUSi,tc,yr),
				                                        DataRange    : DataRange1,
				                                        RowsRange    : RowRange,
				                                        Sparse       : 1,
				                                        ColumnMode   : 3
				                                         ) ;
				                RowRange  := FormatString( "G2:I%i",  Count( (Use,nonUSi,yr) | OutputTonsTransportUSbyImporterCoking(USe,NonUSi,yr) ) + 1 ) ;
				                DataRange1 := FormatString( "J2:J%i",  Count( (Use,nonUSi,yr) | OutputTonsTransportUSbyImporterCoking(USe,NonUSi,yr) ) + 1 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : OutputTonsTransportUSbyImporterCoking(USe,NonUSi,yr),
				                                        DataRange    : DataRange1,
				                                        RowsRange    : RowRange,
				                                        Sparse       : 1,
				                                        ColumnMode   : 3
				                                         ) ;
				                RowRange  := FormatString( "L2:N%i",  Count( (Use,nonUSi,yr) | OutputTonsTransportUSbyImporterThermal(USe,NonUSi,yr) ) + 1 ) ;
				                DataRange1 := FormatString( "O2:O%i",  Count( (Use,nonUSi,yr) | OutputTonsTransportUSbyImporterThermal(USe,NonUSi,yr) ) + 1 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : OutputTonsTransportUSbyImporterThermal(USe,NonUSi,yr),
				                                        DataRange    : DataRange1,
				                                        RowsRange    : RowRange,
				                                        Sparse       : 1,
				                                        ColumnMode   : 3
				                                         ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "InternationalTrade" ) ;
				
				                RowRange  := FormatString( "A2:D%i",  Count( (nUS,i,tc,yr) | OutputTransportNonUS(nUS,i,tc,yr) ) + 1 ) ;
				                DataRange1 := FormatString( "E2:E%i",  Count( (nUS,i,tc,yr) | OutputTransportNonUS(nUS,i,tc,yr) ) + 1 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : OutputTransportNonUS(nUS,i,tc,yr),
				                                        DataRange    : DataRange1,
				                                        RowsRange    : RowRange,
				                                        Sparse       : 0,
				                                        ColumnMode   : 3
				                                         ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "ImportsSubtotal" ) ;
				
				                RowRange  := FormatString( "A2:B%i",  Count( (USi,yr) | ImportsElectricitySubtotalReport(USi,yr) ) + 1 ) ;
				                DataRange := FormatString( "C2:C%i",  Count( (USi,yr) | ImportsElectricitySubtotalReport(USi,yr) ) + 1 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : ImportsElectricitySubtotalReport(USi,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sparse       : 1,
				                                        ColumnMode   : 3
				                                         ) ;
				                RowRange  := FormatString( "D2:E%i",  Count( (USi,yr) | ImportsIndustrialSubtotalReport(USi,yr) ) + 1 ) ;
				                DataRange1 := FormatString( "F2:F%i",  Count( (USi,yr) | ImportsIndustrialSubtotalReport(USi,yr) ) + 1 ) ;
				                Spreadsheet::AssignTable( WorkbookName, ImportsIndustrialSubtotalReport(USi,yr), DataRange1, RowRange, Sparse : 0, ColumnMode : 3 );
				                RowRange  := FormatString( "G2:H%i",  Count( (USi,yr) | ImportsCokingSubtotalReport(USi,yr) ) + 1 ) ;
				                DataRange2 := FormatString( "I2:I%i",  Count( (USi,yr) | ImportsCokingSubtotalReport(USi,yr) ) + 1 ) ;
				                Spreadsheet::AssignTable( WorkbookName, ImportsCokingSubtotalReport(USi,yr), DataRange2, RowRange, Sparse : 0, ColumnMode : 3 );
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                /*Total electricity Btus*/
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "ElectricityACTrills" ) ;
				
				                RowRange  := FormatString( "A2:H%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr) | ElectricityTransportACSubtotalTrill(Scrv1,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr) ) + 3 ) ;
				                DataRange := FormatString( "I2:I%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr) | ElectricityTransportACSubtotalTrill(Scrv1,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : ElectricityTransportACSubtotalTrill(Scrv1,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "ElectricityACTRills",
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                /*1st tier transportation rate in $/short ton*/
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "ElectricityT1rate" ) ;
				
				                RowRange  := FormatString( "A2:G%i",  Count( (SReg,Sulf,Mtyp,Rank,DReg,Sec,yr) | Trate2wSurch(SReg,Sulf,Mtyp,Rank,DReg,Sec,yr) ) + 3 ) ;
				                DataRange := FormatString( "H2:H%i",  Count( (SReg,Sulf,Mtyp,Rank,DReg,Sec,yr) | Trate2wSurch(SReg,Sulf,Mtyp,Rank,DReg,Sec,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : Trate2wSurch(SReg,Sulf,Mtyp,Rank,DReg,Sec,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "ElectricityT1rate",
				                                        Sparse       : 0,
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                /*Total tier2 transportation cost - use to yield correct delivered price*/
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "ElectrTier2TotalCost" ) ;
				
				                RowRange  := FormatString( "A2:D%i",  Count( (Scrv1,pt2,DReg,yr) | ElectricityTransport2CostScrvYr(Scrv1,pt2,DReg,yr) ) + 3 ) ;
				                DataRange := FormatString( "E2:E%i",  Count( (Scrv1,pt2,DReg,yr) | ElectricityTransport2CostScrvYr(Scrv1,pt2,DReg,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : ElectricityTransport2CostScrvYr(Scrv1,pt2,DReg,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "ElectrTier2TotalCost",
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				
				                /*Heat content to convert Btus to tons*/
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "HeatContent" ) ;
				
				                RowRange  := FormatString( "A2:E%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank) | Btu(Scrv1,SReg,Sulf,Mtyp,Rank) ) + 3 ) ;
				                DataRange := FormatString( "F2:F%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank) | Btu(Scrv1,SReg,Sulf,Mtyp,Rank) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : Btu(Scrv1,SReg,Sulf,Mtyp,Rank),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "HeatContent",
				                                        Sparse       : 0,
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                /*Surcharge */
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "Surcharge" ) ;
				
				                RowRange  := FormatString( "A2:C%i",  Count( (SReg,DReg,yr) | SurcharT1(SReg,DReg,yr) ) + 3 ) ;
				                DataRange := FormatString( "D2:D%i",  Count( (SReg,DReg,yr) | SurcharT1(SReg,DReg,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : SurcharT1(SReg,DReg,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "Surcharge",
				                                        Sparse       : 0,
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                /*Escalator */
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "TransMultiplier" ) ;
				
				                RowRange  := FormatString( "A2:A%i",  Count( (yr) | FinalWest(yr) ) + 1 ) ;
				                DataRange1 := FormatString( "B2:B%i",  Count( (yr) | FinalWest(yr) ) + 1 ) ;
				                DataRange2 := FormatString( "C2:C%i",  Count( (yr) | FinalEast(yr) ) + 1 ) ;
				                DataRange3 := FormatString( "D2:D%i",  Count( (yr) | FinalRCAFindex(yr) ) + 1 ) ;
				                DataRange4 := FormatString( "E2:E%i",  Count( (yr) | Indx_Labor(yr) ) + 1 ) ;
				                DataRange5 := FormatString( "F2:F%i",  Count( (yr) | Indx_Fuel(yr) ) + 1 ) ;
				                DataRange6 := FormatString( "G2:G%i",  Count( (yr) | Indx_Other(yr) ) + 1 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : FinalWest(yr),
				                                        DataRange    : DataRange1,
				                                        RowsRange    : RowRange,
				                                        Sparse       : 0,
				                                        ColumnMode   : 3
				                                         ) ;
				                Spreadsheet::AssignTable( WorkbookName, FinalEast(yr), DataRange2, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                Spreadsheet::AssignTable( WorkbookName, FinalRCAFindex(yr), DataRange3, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                Spreadsheet::AssignTable( WorkbookName, Indx_Labor(yr), DataRange4, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                Spreadsheet::AssignTable( WorkbookName, Indx_Fuel(yr), DataRange5, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                Spreadsheet::AssignTable( WorkbookName, Indx_Other(yr), DataRange6, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                /*Mineprice*/
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "MinePrice" ) ;
				
				                RowRange  := FormatString( "A2:E%i",  Count( (SReg,Sulf,Mtyp,Rank,yr) | PriceByYr(SReg,Sulf,Mtyp,Rank,yr) ) + 3 ) ;
				                DataRange := FormatString( "F2:F%i",  Count( (SReg,Sulf,Mtyp,Rank,yr) | PriceByYr(SReg,Sulf,Mtyp,Rank,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : PriceByYr(SReg,Sulf,Mtyp,Rank,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "MinePrice",
				                                        Sparse       : 0,
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "USCoalSupplyCurves" ) ;
				
				                RowRange   := FormatString( "A2:G%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) | SC_QUAN(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) )+ 1 ) ;
				                DataRange1 := FormatString( "H2:H%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) | SC_QUAN(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) )+ 1 ) ;
				                DataRange2 := FormatString( "I2:I%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) | SC_PRICE87(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) )+ 1 ) ;
				                DataRange3 := FormatString( "J2:J%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) | SC_PRICE_BYDollars(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) )+ 1 ) ;
				                !DataRange4 := FormatString( "K2:K%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,yr) | SulfLabel(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) )+ 1 ) ;
				                !DataRange5 := FormatString( "L2:L%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,yr) | MTypeLabel(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) )+ 1 ) ;
				                !DataRange6 := FormatString( "M2:M%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) | RankLabel(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) )+ 1 ) ;
				
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : SC_QUAN(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr),
				                                        DataRange    : DataRange1,
				                                        RowsRange    : RowRange,
				                                        Sparse       : 0,
				                                        ColumnMode   : 3
				                                         ) ;
				                Spreadsheet::AssignTable( WorkbookName, SC_PRICE87(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr), DataRange2, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                Spreadsheet::AssignTable( WorkbookName, SC_PRICE_BYDollars(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr), DataRange3, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                !Spreadsheet::AssignTable( WorkbookName, SulfLabel(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr), DataRange4, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                !Spreadsheet::AssignTable( WorkbookName, MTypeLabel(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr), DataRange5, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                !Spreadsheet::AssignTable( WorkbookName, RankLabel(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr), DataRange6, RowRange, Sparse : 0 ,ColumnMode : 3 );
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
				
				                BLOCK
				                Spreadsheet::SetActiveSheet( WorkbookName, "AllSectorsCombined" ) ;
				
				                RowRange  := FormatString( "A2:H%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr) | AllSectorsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr) ) + 3 ) ;
				                DataRange := FormatString( "I2:I%i",  Count( (Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr) | AllSectorsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr) ) + 3 ) ;
				                Spreadsheet::AssignTable( WorkbookName,
				                                        Parameter    : AllSectorsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,SubSec,DReg,yr),
				                                        DataRange    : DataRange,
				                                        RowsRange    : RowRange,
				                                        Sheet        : "AllSectorsCombined",
				                                        ColumnMode   : 3
				                                         ) ;
				
				                                	Spreadsheet::CloseWorkbook( WorkbookName, 1 ) ;
				                ONERROR err DO
				                                CheckExcelError;
				                ENDBLOCK;
			}
		}
		Procedure WriteToExcelFileAxll {
			Body: {
				!! Set the name of the workbook with the cycle information 
				if (Switch_SaveEachCycle) then
					WorkbookName := FormatString("CoalOutput-%i.xls", CYCLEINFO_CURIRUN(1));
				else
					WorkbookName := "CoalOutput.xls";
				endif;
				
				!! Assigning the variables to each of the sheet of the Excel file workbook 
				Industrial := DATA{'IndustrialTransportTrills'};
				Residential := DATA{'ResidentialTransportTrills'};
				Coking := DATA{'CokingTransportTrills'};
				Exports := DATA{'ExportsTransportTrills2a'};
				Liquids := DATA{'LiquidsTransportTrills'};
				ElectricityACTrills := DATA{'ElectricityTransportACSubtotalTrill'};
				AllSectorsCombined := DATA{'AllSectorsTransportTrills'};
				ElectricityT1Rate := DATA{'Trate2wSurch'};
				ElectricityTier2TotalCost := DATA{'ElectricityTransport2CostScrvYr'};
				RevisedRate := DATA{'Trate1RevisedBase'};
				HeatContent := DATA{'Btu'};
				Surcharge := DATA{'SurcharT1'};
				TransMultiplier := DATA{'FinalWest',
							'FinalEast',
							'FinalRCAFindex',
							'Indx_Labor',
							'Indx_Fuel',
							'Indx_Other'};
				MinePrice := DATA{'PriceByYr'};
				! The Exports From US has 3 tables (with different indexes), so each table is defined separately to be added to the same sheet
				ExportsFromUS1 := DATA{'OutputExportFromUSTrils'};
				ExportsFromUS2 := DATA{'OutputTonsTransportUSbyImporterCoking'};
				ExportsFromUS3 := DATA{'OutputTonsTransportUSbyImporterThermal'};
				InternationalTrade := DATA{'OutputTransportNonUS'};
				ImportsElec := DATA{'ImportsElectricityTonsDetail2',
							'ImportsElectricityTrillsDetail2'};
				! The Imports Subtotal has 3 tables (with different indexes), so each table is defined separately to be added to the same sheet
				ImportsSubtotal1 := DATA{'ImportsElectricitySubtotalReport'};
				ImportsSubtotal2 := DATA{'ImportsIndustrialSubtotalReport'};
				ImportsSubtotal3 := DATA{'ImportsCokingSubtotalReport'};
				USCoalSupplyCurves := DATA{'SC_QUAN',
							'SC_PRICE87',
							'SC_PRICE_BYDollars'};
				
				!! If the workbook exist, it deletes it and then recreates the workbook
				if fileexists(WorkbookName) then
					filedelete(WorkbookName);
				endif;
				
				!! Creates the workbook and the name of the first sheet
				block
					axll::CreateNewWorkBook(WorkbookName,"Industrial");
				onerror err do
				endblock;
				
				!! The following creates new sheets and fill in the sets of variables defined previously
				block
					axll::SelectSheet("Industrial");
					axll::WriteCompositeTable(Industrial,"A1",1,1);
				
					axll::CreateSheet("Residential");
					axll::SelectSheet("Residential");
					axll::WriteCompositeTable(Residential,"A1",1,1);
				
					axll::CreateSheet("Coking");
					axll::SelectSheet("Coking");
					axll::WriteCompositeTable(Coking,"A1",1,1);
				
					axll::CreateSheet("Exports");
					axll::SelectSheet("Exports");
					axll::WriteCompositeTable(Exports,"A1",1,1);
				
					axll::CreateSheet("Liquids");
					axll::SelectSheet("Liquids");
					axll::WriteCompositeTable(Liquids,"A1",1,1);
				
					axll::CreateSheet("ElectricityACTrills");
					axll::SelectSheet("ElectricityACTrills");
					axll::WriteCompositeTable(ElectricityACTrills,"A1",1,1);
				
					axll::CreateSheet("AllSectorsCombined");
					axll::SelectSheet("AllSectorsCombined");
					axll::WriteCompositeTable(AllSectorsCombined,"A1",1,1);
				
					axll::CreateSheet("ElectricityT1Rate");
					axll::SelectSheet("ElectricityT1Rate");
					axll::WriteCompositeTable(ElectricityT1Rate,"A1",1,1);
				
					axll::CreateSheet("ElectricityTier2TotalCost");
					axll::SelectSheet("ElectricityTier2TotalCost");
					axll::WriteCompositeTable(ElectricityTier2TotalCost,"A1",1,1);
				
					axll::CreateSheet("RevisedRate");
					axll::SelectSheet("RevisedRate");
					axll::WriteCompositeTable(RevisedRate,"A1",1,1);
				
					axll::CreateSheet("HeatContent");
					axll::SelectSheet("HeatContent");
					axll::WriteCompositeTable(HeatContent,"A1",1,1);
				
					axll::CreateSheet("Surcharge");
					axll::SelectSheet("Surcharge");
					axll::WriteCompositeTable(Surcharge,"A1",1,1);
				
					axll::CreateSheet("TransMultiplier");
					axll::SelectSheet("TransMultiplier");
					axll::WriteCompositeTable(TransMultiplier,"A1",1,1);
				
					axll::CreateSheet("MinePrice");
					axll::SelectSheet("MinePrice");
					axll::WriteCompositeTable(MinePrice,"A1",1,1);
				
					axll::CreateSheet("ImportsElec");
					axll::SelectSheet("ImportsElec");
					axll::WriteCompositeTable(ImportsElec,"A1",1,1);
				
					axll::CreateSheet("ImportsSubtotal");
					axll::SelectSheet("ImportsSubtotal");
					axll::WriteCompositeTable(ImportsSubtotal1,"A1",1,1);
					axll::WriteCompositeTable(ImportsSubtotal2,"D1",1,1);
					axll::WriteCompositeTable(ImportsSubtotal3,"G1",1,1);
				
					axll::CreateSheet("ExportsFromUS");
					axll::SelectSheet("ExportsFromUS");
					axll::WriteCompositeTable(ExportsFromUS1,"A1",1,1);
					axll::WriteCompositeTable(ExportsFromUS2,"G1",1,1);
					axll::WriteCompositeTable(ExportsFromUS3,"L1",1,1);
				
					axll::CreateSheet("InternationalTrade");
					axll::SelectSheet("InternationalTrade");
					axll::WriteCompositeTable(InternationalTrade,"A1",1,1);
				
					axll::CreateSheet("USCoalSupplyCurves");
					axll::SelectSheet("USCoalSupplyCurves");
					axll::WriteCompositeTable(USCoalSupplyCurves,"A1",1,1);
				
				onerror err do
				endblock;
				
				!! Closes the workbook when finished
				axll::CloseWorkBook(WorkbookName);
			}
		}
		DeclarationSection ExcelSheets {
			Set Industrial {
				SubsetOf: AllIdentifiers;
			}
			Set Residential {
				SubsetOf: AllIdentifiers;
			}
			Set Coking {
				SubsetOf: AllIdentifiers;
			}
			Set Exports {
				SubsetOf: AllIdentifiers;
			}
			Set Liquids {
				SubsetOf: AllIdentifiers;
			}
			Set ElectricityACTrills {
				SubsetOf: AllIdentifiers;
			}
			Set AllSectorsCombined {
				SubsetOf: AllIdentifiers;
			}
			Set ElectricityT1Rate {
				SubsetOf: AllIdentifiers;
			}
			Set ElectricityTier2TotalCost {
				SubsetOf: AllIdentifiers;
			}
			Set RevisedRate {
				SubsetOf: AllIdentifiers;
			}
			Set HeatContent {
				SubsetOf: AllIdentifiers;
			}
			Set Surcharge {
				SubsetOf: AllIdentifiers;
			}
			Set TransMultiplier {
				SubsetOf: AllIdentifiers;
			}
			Set MinePrice {
				SubsetOf: AllIdentifiers;
			}
			Set ExportsFromUS1 {
				SubsetOf: AllIdentifiers;
			}
			Set ExportsFromUS2 {
				SubsetOf: AllIdentifiers;
			}
			Set ExportsFromUS3 {
				SubsetOf: AllIdentifiers;
			}
			Set InternationalTrade {
				SubsetOf: AllIdentifiers;
			}
			Set ImportsElec {
				SubsetOf: AllIdentifiers;
			}
			Set ImportsSubtotal1 {
				SubsetOf: AllIdentifiers;
			}
			Set ImportsSubtotal2 {
				SubsetOf: AllIdentifiers;
			}
			Set ImportsSubtotal3 {
				SubsetOf: AllIdentifiers;
			}
			Set USCoalSupplyCurves {
				SubsetOf: AllIdentifiers;
			}
		}
		Procedure CheckExcelError {
			Body: {
				if not ExcelStatus then
				                            if CurrentErrorMessage then
				                                    ExcelErrorMessage := FormatString("Function failed with error %s",CurrentErrorMessage);
				                            else
				                                    ExcelErrorMessage := FormatString("Function failed without an error message");
				                            endif;
				
				                            DialogError(ExcelErrorMessage);
				                            empty CurrentErrorMessage;
				
				                            Spreadsheet::CloseWorkbook(WorkbookName,0);
				                            halt;
				endif;
			}
		}
		DeclarationSection ReportSwitches {
			Parameter ElectricityOutput {
				Text: "A 1 indicates electricity tables will be output (0 otherwise)";
				Definition: 0;
			}
			Parameter NonElectricityOutput {
				Text: "A 1 indicates nonelectricity tables will be output (0 otherwise)";
				Definition: 1;
			}
			Parameter EscalAndSurchargeOutput {
				Text: "A 1 indicates escalator and surcharge tables will be output (0 otherwise)";
				Range: binary;
				InitialData: 1;
			}
			File OutputResult1 {
				Device: Disk;
				Mode: replace;
			}
			Parameter Switch_SaveEachCycle {
				Range: binary;
				InitialData: 1;
			}
			Parameter Switch_AIMMSStandalone {
				Range: binary;
				InitialData: 0;
			}
			Parameter Switch_LoadCycle {
				Text: "Load data from a specific cycle";
				Range: binary;
				InitialData: 0;
			}
			Parameter CycleNum;
			Parameter Switch_write_coal_out_db {
				Range: binary;
				InitialData: 0;
			}
		}
	}
	Section MainDataManagement {
		Procedure SaveGlobal {
			Arguments: (CaseName);
			Body: {
				CaseFileSave(
				url: FormatString("%s.data",CaseName),
				contents: Global_Identifiers_ );
			}
			StringParameter CaseName {
				Property: Input;
			}
		}
		Procedure LoadGlobal {
			Arguments: (CaseName);
			Body: {
				CaseFileLoad(
				url: FormatString("%s.data",CaseName),0);
			}
			StringParameter CaseName {
				Property: Input;
			}
		}
		DeclarationSection IdentifierSets2Declaration {
			Set Global_Identifiers_ {
				SubsetOf: AllIdentifiers;
				Definition: {
					Global_Data_Structure ;
				}
			}
		}
	}
	Section RestartDataDataManagement {
		Comment: {
			"Per the original coal model conversion from FORTRAN to AIMMS, the coal model stays open with each NEMS runs.  To minimize license purchase
			requirements, the coal model via this procedure will be able to close after each year or iteration, but retain pertinent information
			via a saved case.  This saved case will be reloaded as necessary, so that the coal model can pick up where it left off.  These
			procedures should eliminate the need for the coal model to run consecutively, one year after the other."
		}
		Procedure CMMLagDataSave {
			Arguments: (CaseName);
			Body: {
				CaseFileSave(
				url: FormatString("%s.data",CaseName),
				contents: CMMLagData_Identifiers );
			}
			StringParameter CaseName {
				Property: Input;
			}
		}
		Procedure SaveAll {
			Arguments: (CaseName);
			Body: {
				CaseFileSave(
				url: FormatString("%s.data",CaseName),
				contents: AllIdentifiers );
			}
			StringParameter CaseName {
				Property: Input;
			}
		}
		Procedure CMMLagDataLoad {
			Arguments: (CaseName);
			Body: {
				CaseFileMerge(url: FormatString("%s.data",CaseName),1); !Do not destroy identifiers not listed in the case
			}
			Comment: {
				"\"A value of \\\"0\\\" in the function \\\"CaseFileLoad\\\" indicates runtime libraries in existence before the data is loaded, but not referenced in the case file, are destroyed during the data load.
				A value of \\\"1\\\" keeps the existing runtime libraries.\""
			}
			StringParameter CaseName {
				Property: Input;
			}
		}
		Procedure RestartDataTestSavingcase {
			Body: {
				CMMLagDataSave("cases\\CMMLagData");
			}
		}
		Procedure RestartDataTestloadingcase {
			Body: {
				
				CMMLagDataLoad("cases\\CMMLagData");
			}
		}
		Procedure CalcCoalReportingTotals {
			Body: {
				!for yr | (val(yr) = CurrentStudyYear) do
					ProductionVolumeStepsDetail(SReg,Sulf,Mtyp,Rank,Scrv1Step,cyr) := ProductionVolumeSteps(SReg,Sulf,Mtyp,Rank,Scrv1Step,cyr);
					ExportsTransport3(Scrv1,SReg, Sulf, Mtyp, Rank,ExpSec,Use,DReg,cyr) := ExportsTransport2(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,cyr) |Btu(Scrv1,SReg, Sulf, Mtyp, Rank) ;
					ProductionVolumeTons((SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)) := ProductionVolume(SReg, Sulf, Mtyp, Rank,cyr)/$Btu2(SReg, Sulf, Mtyp, Rank);
					ProductionVolumeTons1((SReg,Sulf,Mtyp,Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)) := ProductionVolume(SReg,Sulf,mtyp,rank,cyr)/$Btu2(SReg,Sulf,mtyp,rank);
				
				
					TotalExports(cyr) := Sum((SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg)|Btu2(SReg,Sulf,Mtyp,Rank), ExportsTransport2(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)/Btu2(SReg,Sulf,Mtyp,Rank));
					TotElectricTranportUSCoalTons(cyr) := Sum((nsteps,SReg,Sulf,Mtyp,Rank,pt2,DReg)|Btu2(SReg,Sulf,Mtyp,Rank),ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,Dreg,pt2,cyr)/Btu2(SReg,Sulf,Mtyp,Rank));
					TotalCommercialConsumption(cyr) := Sum((SReg,Sulf,Mtyp,Rank,ResSec,DReg)|Btu2(SReg,Sulf,Mtyp,Rank),ResidentialTransport(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr)/Btu2(SReg,Sulf,Mtyp,Rank));
					TotalIndustrialConsumption(cyr) := Sum((SReg,Sulf,Mtyp,Rank,IndSec,DReg)|Btu2(SReg,Sulf,Mtyp,Rank),IndustrialTransport(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr)/Btu2(SReg,Sulf,Mtyp,Rank));
					TotalCokingConsumption(cyr) := Sum((SReg,Sulf,Mtyp,Rank,CokSec,DReg)|Btu2(SReg,Sulf,Mtyp,Rank),CokingTransport(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)/Btu2(SReg,Sulf,Mtyp,Rank));
					TotalLiquidsConsumption(cyr) := Sum((SReg,Sulf,Mtyp,Rank,LiquSec,DReg)|Btu2(SReg,Sulf,Mtyp,Rank),LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr)/Btu2(SReg,Sulf,Mtyp,Rank));
					TotalImports(cyr) := Sum((nsteps,nUS,uSi,DReg,pt2),ImportsElectricity(nsteps,nUS,uSi,DReg,pt2,cyr)/$InternationalHeatContent(nUS,'2'))
							+Sum((IndSec,DReg,nUS,USi),ImportsIndustrial(IndSec,DReg,nUS,USi,cyr)/$InternationalHeatContent(nUS,'2'))
							+Sum((CokSec,DReg,nUS,USi),ImportsCoking(CokSec,DReg,nUS,USi,cyr)/$InternationalHeatContent(nUS,'1'));
					TotElecImportsTons(cyr) 	:= Sum((nsteps,nUS,uSi,DReg,pt2),ImportsElectricity(nsteps,nUS,uSi,DReg,pt2,cyr)/$InternationalHeatContent(nUS,'2')) ;	
					TotalConsumption(cyr) := TotElectricTranportUSCoalTons(cyr)+TotalCommercialConsumption(cyr) +TotalIndustrialConsumption(cyr) 
							+ TotalCokingConsumption(cyr) + TotalLiquidsConsumption(cyr) ;
					ElectTransportTier2Total(cyr) := Sum((SReg,Sulf,Mtyp,Rank,pt2,DReg)|Btu2(SReg,Sulf,Mtyp,Rank),ElectricityTransport2(SReg,Sulf,Mtyp,Rank,pt2,Dreg,cyr)/Btu2(SReg,Sulf,Mtyp,Rank));
					TotalProduction((SReg,Sulf,Mtyp,Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)) := ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr);
					ElectricityTransport2CostScrvYr(Scrv1,pt2,DReg,cyr)|Map_reportingyears(cyr) := Sum( (SReg,Sulf,Mtyp,Rank) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and Btu(Scrv1,SReg,Sulf,Mtyp,Rank), ElectricityTransport2Cost(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr));
					ElectricityTransportACSubtotalTrill(Scrv1,SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) := 
						if Btu(SCrv1,SReg,Sulf,MTyp,Rank) >0 then 
							sum(nsteps, ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))
						endif;
				
					CokingTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank)and Map_reportingyears(cyr) 
					 	:= CokingTransport(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr);
					IndustrialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and Map_reportingyears(cyr)
						:= IndustrialTransport(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr);	
					ResidentialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank)and Map_reportingyears(cyr)
						:= ResidentialTransport(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr);
					LiquidsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank)
						:= LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr);
					ExportsTransportTrills3(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) := ExportsTransport2(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr);
					ExportsTransportTrills2(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,cyr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) := Sum(USe,ExportsTransport2(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr));
					ImportsElectricityTrillsDetail2(nUS,USi,DReg,pt2,cyr)|USDRegIMportmapping(usi,dReg) := Sum(nsteps,ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr));
					OutputExportFromUSTrils(USe,NonUSi,tc,cyr) := TotalTransportUS(Use,NonUSi,tc,cyr) |USDRegIntlMapping2(Use,nonUSi,tc);
					OutputTransportNonUS(nUS,i,tc,cyr) := TotalTransportNonUS(nUS,i,tc,cyr);
					TotalNonUSExpTransportCost(nUS,cyr) := sum[ (i,tc) |InternationalUnitTransportBtuNonUS(nUS,i,tc) > 0,(InternationalUnitTransportBtuNonUS(nUS,i,tc)
							* TotalTransportNonUS(nUS,i,tc,cyr))] ;
					InternationalSupplyPrice(nUS,tc,yr) := InternationalSupplyDollars(nUS,tc,yr) / $InternationalSupplyVolume(nUS,tc,yr);
				
					ElectrTranspTrillsCR(MNUMCR,cyr) := If mnumcr < 11 then
						Sum((nsteps,SReg,Sulf,Mtyp,Rank,pt2,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1 and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))+
						Sum((nsteps,nUS,USi,DReg,pt2)|Map_DReg_MNUMCR(DReg,mnumcr)=1,ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr))
						else
						Sum((nsteps,SReg,Sulf,Mtyp,Rank,pt2,DReg)| ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))+
						Sum((nsteps,nUS,USi,DReg,pt2),ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr))
						endif;
				
					ElectricityTransport1Tons(SReg,Sulf,Mtyp,ElecRank,pt2,DReg,cyr) :=
						if Btu2(SReg,Sulf,Mtyp,ElecRank) >0 then
							Sum(nsteps,ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,ElecRank,DReg,pt2,cyr)/Btu2(SReg,Sulf,Mtyp,ElecRank))
						endif;
				
					ImportsElectricitySubtotalReport(USi,cyr) := Sum((nsteps,pt2,nUS,DReg)|USDRegImportMapping(USi,DReg)=-1,
						ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr));
					ImportsIndustrialSubtotalReport(USi,cyr) := Sum((IndSec,DReg,nUS)|USDRegImportMapping(USi,Dreg)=-1,
						ImportsIndustrial(IndSec,DReg,nUS,USi,cyr));
					ImportsCokingSubtotalReport(USi,cyr) := Sum((CokSec,DReg,nUS),
				 		ImportsCoking(CokSec,DReg,nUS,USi,cyr));
				
				
				
				        !Fill the parameter for all sectors (yda) ----moved to definition
				!        AllSectorsTransportTrills((Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):=CokingTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr);
				!        AllSectorsTransportTrills((Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):=IndustrialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr);
				!        AllSectorsTransportTrills((Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):=ResidentialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr);
				!        AllSectorsTransportTrills((Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):=LiquidsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr);
				!        AllSectorsTransportTrills((Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,cyr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):=ExportsTransportTrills2a(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,cyr);
				!        AllSectorsTransportTrills((Scrv1,SReg,Sulf,Mtyp,ElecRank,ElecSec,DReg,cyr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, ElecRank) and Map_reportingyears(cyr)):=
				!                                                                                   sum(pt2| ElecSubsec_Map(ElecSec, pt2), ElectricityTransportACSubtotalTrill(Scrv1,SReg,Sulf,Mtyp,ElecRank,pt2,DReg,cyr));
				
				        !Transport cost for all sectors
				!        Copy_AllSectorsTransportCost((SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):= CokingTransportCost(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr);
				!        Copy_AllSectorsTransportCost((SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):= IndustrialTransportCost(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr);
				!        Copy_AllSectorsTransportCost((SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):= ResidentialTransportCost(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr);
				!        Copy_AllSectorsTransportCost((SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):= LiquidsTransportCost(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr);
				!        Copy_AllSectorsTransportCost((SReg,Sulf,Mtyp,Rank,ExpSec,DReg,cyr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)):= sum(USe,ExportsTransportCost(SReg, Sulf, Mtyp, Rank, ExpSec, USe, DReg, cyr));
				!        Copy_AllSectorsTransportCost((SReg,Sulf,Mtyp,ElecRank,ElecSec,DReg,cyr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, ElecRank) and Map_reportingyears(cyr)):= sum(pt2| ElecSubsec_Map(ElecSec, pt2),ElectricityTransport2Cost(SReg, Sulf, Mtyp, ElecRank,pt2,DReg,cyr) +
				!                               Trate2wSurch(SReg, Sulf, Mtyp, ElecRank, DReg, 'E', cyr)*ElectricityTransport1Tons(SReg,Sulf,Mtyp,ElecRank,pt2,DReg,cyr));
				
				        AllSectorsTransportCost((Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr) and PossibleSupplyCurves_Map(DReg, CokSec, SReg, Sulf, Mtyp, Rank)):= 
				                                 CokingTransportCost(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr);
				        AllSectorsTransportCost((Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr)|Scrv1_Map(Scrv1,SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)and PossibleSupplyCurves_Map(DReg, IndSec, SReg, Sulf, Mtyp, Rank)):=
				                                 IndustrialTransportCost(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr);
				        AllSectorsTransportCost((Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr)|Scrv1_Map(Scrv1,SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)and PossibleSupplyCurves_Map(DReg, ResSec, SReg, Sulf, Mtyp, Rank)):=
				                                 ResidentialTransportCost(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr);
				        AllSectorsTransportCost((Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr)|Scrv1_Map(Scrv1,SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)and PossibleSupplyCurves_Map(DReg, LiquSec, SReg, Sulf, Mtyp, Rank)):=
				                                 LiquidsTransportCost(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr);
				        AllSectorsTransportCost((Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,DReg,cyr)|Scrv1_Map(Scrv1,SReg, Sulf, Mtyp, Rank) and Map_reportingyears(cyr)and PossibleSupplyCurves_Map(DReg, ExpSec, SReg, Sulf, Mtyp, Rank)):=
				                                sum(USe,ExportsTransportCost(SReg, Sulf, Mtyp, Rank, ExpSec, USe, DReg, cyr));
				        AllSectorsTransportCost((Scrv1,SReg,Sulf,Mtyp,ElecRank,ElecSec,DReg,cyr)|Scrv1_Map(Scrv1,SReg, Sulf, Mtyp, ElecRank) and Map_reportingyears(cyr)and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, ElecRank)):=
				                          sum(pt2| ElecSubsec_Map(ElecSec, pt2), ElectricityTransport2Cost(SReg, Sulf, Mtyp, ElecRank,pt2,DReg,cyr) +
				                               Trate2wSurch(SReg, Sulf, Mtyp, ElecRank, DReg, 'E', cyr)*ElectricityTransport1Tons(SReg,Sulf,Mtyp,ElecRank,pt2,DReg,cyr));
				
				
				 	!COALREP_UTCONS_A(NUTSEC,globalyr) := Sum((ElecScrv,pt2,DReg,cyr)|Map_nutsec_pt3(NUTSEC,pt2)AND map_globalyr_cyr(globalyr,cyr),
				  	!	ElectricityTransport2(ElecScrv,pt2,DReg,cyr)) ;
				  	!COALREP_UTTSO2_B(ElecScrv,pt2,DReg,cyr) := Sum(nsteps,ElectricityTransportAC(nsteps,ElecScrv,DReg,pt2,cyr)) ;
				
				!endfor;
			}
			Comment: "Compute report parameters in a procedure.  Remove from definitions if you want to be able save totals and close CMM";
		}
		Procedure CycleDataSave {
			Arguments: (CaseName);
			Body: {
				CaseFileSave(
				url: FormatString("cases\\%s.data",CaseName) ,
				contents: CycleDataIdentifiers );
			}
			StringParameter CaseName {
				Property: Input;
			}
		}
		DeclarationSection RestartDataIdentifierSets {
			Set CMMLagData_Identifiers {
				SubsetOf: AllIdentifiers;
				Definition: {
					data 
					    { ResultMessage                         , TotalProductionByYear                 , TotalProductionByYearScrv             ,
					      TotalExports                          , TotElectricTranportUSCoalTons         , TotalCommercialConsumption            ,
					      TotalIndustrialConsumption            , TotalCokingConsumption                , TotalLiquidsConsumption               ,
					      TotalImports                          , TotElecImportsTons                    , TotalConsumption                      ,
					      PriceByScrv                           , ResultObjTotalCost                    , ElectTransportTier2Total              ,
					      ElectricityTransportACSubtotalTrill   , IndustrialTransportTrills             , ResidentialTransportTrills            ,
					      CokingTransportTrills                 , ExportsTransportTrills2a              , ElectricityTransport2CostScrvYr       ,
					      PriceByYr                             , COALOUT_TOTMINERS                     , COALOUT_TTONMILE                      ,
					      COALREP_PALSULF                       , COALREP_UCMERC                        , COALREP_PWPSULF                       ,
					      COALEMM_CCLCLNR                       , COALEMM_GCLCLNR                       , COALEMM_PSLCLNR                       ,
					      COALEMM_PCACLNR                       , COALEMM_HCLCLNR                       , USO2GRP_XCL_QECP                      ,
					      USO2GRP_XCL_PECP                      , USO2GRP_ECP_PECP                      , USO2GRP_XCL_PCAP                      ,
					      USO2GRP_XCL_PCAP_LIMIT                , USO2GRP_EFD_PROD                      , USO2GRP_CL_CRV_PROD                   ,
					      PriceSolutionBySC                     , MinersbySupplyRegionYr                , USO2GRP_XCL_QECP_A                    ,
					      USO2GRP_XCL_PECP_A                    , USO2GRP_XCL_PECP_B1                   , USO2GRP_XCL_PECP_C                    ,
					      USO2GRP_ECP_PECP_A                    , ProductionVolumeTons                  , ProductionVolumeTons1                 ,
					      ProductionVolumeTons2                 , ProductionVolumeTons3                 , ProdVolSolutionPriorYr                ,
					      LaggedProductionTonsforCPS1           , SupplyCurveStepBalShadow3             , TotalProduction                       ,
					      ProductionVolumeStepsDetail           , ElectricityTransport1Tons             , ElectrTranspTrillsCR                  ,
					      LiquidsTransportTrills                , ExportsTransport2a                    , ExportsTransport3                     ,
					      ExportsTransport5Final                , ExportsTransportDetailCurve2          , ExportsTransport2Tons                 ,
					      ExportsTransportTons                  , ExportsTransportTrills2               , ExportsMetTranspTons                  ,
					      ExportsThermTranspTons                , Hours                                 , ExportsTransportCost                  ,
					      westsup                               , capexp                                , ttonmile2                             ,
					      ttonmilelag1                          , ttonmilelag2                          , Tr_prod_e                             ,
					      Tr_prod_w                             , PPIraileq                             , PPIraileq2                            ,
					      costcap                               , EastEscalator                         , invest                                ,
					      invtemp                               , Westcheck                             , Indx_Labor                            ,
					      Indx_Fuel                             , Indx_Other                            , USProdPriorCycle                      ,
					      FinalRCAFindex                        , ImportsElectricitySubtotalReport      , ImportsIndustrialSubtotalReport       ,
					      ImportsCokingSubtotalReport           , ImportsElectricityTrillsDetail2       , ImportsElectricityTonsDetail2         ,
					      OutputTransportNonUS                  , OutputExportFromUSTrils               , OutputTonsTransportUSbyImporterCoking ,
					      OutputTonsTransportUSbyImporterThermal, TotalNonUSExpTransportCost            , TotalUSExpTransportCokingCost         ,
					      TotalUSExpTransportThermalCost        , Btu                                   , P_EQUIP                               ,
					      Mcnt_prev                             , qprods                                , LAG_PRI                               ,
					      LAG_PROD                              , LAG_PROD3                                                    ,
					      FY_TPH                                , D_FUEL                                , E_FUEL                                ,
					      MINE_FUEL                             , FY_PROD_CAP                           , FY_PROD_CAP_X                         ,
					      MULT                                  , T_QTARG_CMM                           , T_Util2                               ,
					      T_QUAN                                , SC_PRICE                              , SC_QUAN                               ,
					      SC_PRICE87                            , FY_PROD_CAP2                          , FY_PROD_CAP3                          ,
					      Mercury2                              , Carbon2                               , FY_TPH1                               ,
					      Ecp_lag_prod_cap                      , Ecp_lag_prod_cap_a                    , Ecp_lag_prod                          ,
					      Ecp_prod_cap                          , Xcl_qecp                              , Xcl_qecp_b2                           ,
					      Xcl_qecp_b                            , S_ptarg_b                             , xcl_pecp_b                            ,
					      max_ecpfph                            , xcl_pecp_b2                           , xcl_pecp_c                            ,
					      xcl_pecp                              , Lag_pri_ecp_pecp                      , Lag_pri_ecp_pecp_1                    ,
					      Lag_pri_ecp_pecp_2                    , PMN                                   , StocksChangeEP                        ,
					      StocksChangePrim                      , ExportMultCokeKeep                    , ExportMultSteamKeep                   ,
					      BY_PROD1				    , QTarget				    , AllSectorsTransportCost               }
				}
			}
			Set TestSetDiff {
				SubsetOf: AllIdentifiers;
				Definition: (AllIdentifiers - Global_Identifiers_);
			}
			Set CycleDataIdentifiers {
				SubsetOf: AllIdentifiers;
				Definition: {
					Global_Identifiers_ + CMMLagData_Identifiers + Standalone_Reports;
				}
			}
		}
	}
	Section Global_Data_Structure {
		Section GDS_Parameters {
			Section QBLK {
				Parameter QBLK_QELRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Residential";
				}
				Parameter QBLK_QELCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Commercial";
				}
				Parameter QBLK_QELTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Transportation";
				}
				Parameter QBLK_QELIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Industrial";
				}
				Parameter QBLK_QELRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Refinery";
				}
				Parameter QBLK_QELHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Hydrogen";
				}
				Parameter QBLK_QELAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - All Sectors";
				}
				Parameter QBLK_QGFRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Residential";
				}
				Parameter QBLK_QGFCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Commercial";
				}
				Parameter QBLK_QGFTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Transportation";
				}
				Parameter QBLK_QGFIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Industrial";
				}
				Parameter QBLK_QGFRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Refinery";
				}
				Parameter QBLK_QGFEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Electric Power";
				}
				Parameter QBLK_QGFHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Hydrogen";
				}
				Parameter QBLK_QGFAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - All Sectors";
				}
				Parameter QBLK_QGIRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Residential";
				}
				Parameter QBLK_QGICM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Commercial";
				}
				Parameter QBLK_QGITR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Transportation";
				}
				Parameter QBLK_QGIIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Industrial";
				}
				Parameter QBLK_QGIRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Refinery";
				}
				Parameter QBLK_QGIEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Electric Power";
				}
				Parameter QBLK_QGIHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Hydrogen";
				}
				Parameter QBLK_QGIAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - All Sectors";
				}
				Parameter QBLK_QNGRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Residential";
				}
				Parameter QBLK_QNGCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Commercial";
				}
				Parameter QBLK_QNGTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Transportation";
				}
				Parameter QBLK_QNGIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Industrial";
				}
				Parameter QBLK_QNGRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Refinery";
				}
				Parameter QBLK_QNGEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Electric Power";
				}
				Parameter QBLK_QNGHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Hydrogen";
				}
				Parameter QBLK_QNGAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - All Sectors";
				}
				Parameter QBLK_QGPTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Pipeline";
				}
				Parameter QBLK_QLPIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Lease and Plant Fuel";
				}
				Parameter QBLK_QCLRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Residential";
				}
				Parameter QBLK_QCLCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Commercial";
				}
				Parameter QBLK_QCLIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Industrial";
				}
				Parameter QBLK_QCLRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Refinery";
				}
				Parameter QBLK_QCLEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Electric Power";
				}
				Parameter QBLK_QCLSN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Synthetics";
				}
				Parameter QBLK_QCLHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Hydrogen";
				}
				Parameter QBLK_QCLAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - All Sectors";
				}
				Parameter QBLK_QMCIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Metallurgical Coal - Industrial";
				}
				Parameter QBLK_QMGCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Motor Gasoline - Commercial";
				}
				Parameter QBLK_QMGTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Motor Gasoline - Transportation";
				}
				Parameter QBLK_QMGIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Motor Gasoline - Industrial";
				}
				Parameter QBLK_QMGAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Motor Gasoline - All Sectors";
				}
				Parameter QBLK_QJFTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Jet Fuel - Transportation";
				}
				Parameter QBLK_QDSRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Residential";
				}
				Parameter QBLK_QDSCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Commercial";
				}
				Parameter QBLK_QDSTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Transportation";
				}
				Parameter QBLK_QDSIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Industrial";
				}
				Parameter QBLK_QDSRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Refinery";
				}
				Parameter QBLK_QDSEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Electricity (+petroleum cok";
				}
				Parameter QBLK_QDSAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - All Sectors";
				}
				Parameter QBLK_QKSRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Kerosene - Residential";
				}
				Parameter QBLK_QKSCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Kerosene - Commercial";
				}
				Parameter QBLK_QKSIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Kerosene - Industrial";
				}
				Parameter QBLK_QKSAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Kerosene - All Sectors";
				}
				Parameter QBLK_QLGRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - Residential";
				}
				Parameter QBLK_QLGCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - Commercial";
				}
				Parameter QBLK_QLGTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - Transportation";
				}
				Parameter QBLK_QLGIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - Industrial";
				}
				Parameter QBLK_QLGRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - Refinery";
				}
				Parameter QBLK_QLGAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - All Sectors";
				}
				Parameter QBLK_QRLCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - Commercial";
				}
				Parameter QBLK_QRLTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - Transportati";
				}
				Parameter QBLK_QRLIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - Industrial";
				}
				Parameter QBLK_QRLRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - Refinery";
				}
				Parameter QBLK_QRLEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - Electric Pow";
				}
				Parameter QBLK_QRLAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - All Sectors";
				}
				Parameter QBLK_QRHTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, High Sulfur - Transportat";
				}
				Parameter QBLK_QRHEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, High Sulfur - Electric Po";
				}
				Parameter QBLK_QRHAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, High Sulfur - All Sectors";
				}
				Parameter QBLK_QRSCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - Commercial";
				}
				Parameter QBLK_QRSTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - Transportation";
				}
				Parameter QBLK_QRSIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - Industrial";
				}
				Parameter QBLK_QRSRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - Refinery";
				}
				Parameter QBLK_QRSEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - Electric Power";
				}
				Parameter QBLK_QRSAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - All Sectors";
				}
				Parameter QBLK_QPFIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Petrochemical Feedstocks - Industrial";
				}
				Parameter QBLK_QSGIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Still Gas - Industrial";
				}
				Parameter QBLK_QSGRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Still Gas - Refinery";
				}
				Parameter QBLK_QPCIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Petroleum Coke - Industrial";
				}
				Parameter QBLK_QPCRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Petroleum Coke - Refinery";
				}
				Parameter QBLK_QPCEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Petroleum Coke - Electric Power";
				}
				Parameter QBLK_QPCAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Petroleum Coke - All Sectors";
				}
				Parameter QBLK_QASIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Asphalt and Road Oil - Industrial";
				}
				Parameter QBLK_QOTTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Other Petroleum - Transportation";
				}
				Parameter QBLK_QOTIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Other Petroleum - Industrial";
				}
				Parameter QBLK_QOTRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Other Petroleum - Refinery";
				}
				Parameter QBLK_QOTAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Other Petroleum - All Sectors";
				}
				Parameter QBLK_QTPRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Residential";
				}
				Parameter QBLK_QTPCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Commercial";
				}
				Parameter QBLK_QTPTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Transportation";
				}
				Parameter QBLK_QTPIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Industrial";
				}
				Parameter QBLK_QTPRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Refinery";
				}
				Parameter QBLK_QTPEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Electric Power";
				}
				Parameter QBLK_QTPAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - All Sectors";
				}
				Parameter QBLK_QMETR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Methanol - Transportation";
				}
				Parameter QBLK_QETTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Ethanol - Transportation";
				}
				Parameter QBLK_QETHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Ethanol - Hydrogen";
				}
				Parameter QBLK_QHYTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Hydrogen - Transportation";
				}
				Parameter QBLK_QUREL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Uranium - Electric Power";
				}
				Parameter QBLK_QURHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Uranium - Hydrogen";
				}
				Parameter QBLK_QHOIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Hydropower - Industrial";
				}
				Parameter QBLK_QHOEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Hydropower - Electric Power";
				}
				Parameter QBLK_QHOAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Hydropower - All Sectors";
				}
				Parameter QBLK_QGERS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Geothermal - Residential";
				}
				Parameter QBLK_QGEIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Geothermal - Industrial";
				}
				Parameter QBLK_QGEEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Geothermal - Electric Power";
				}
				Parameter QBLK_QGEAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Geothermal - All Sectors";
				}
				Parameter QBLK_QBMRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Biomass - Residential";
				}
				Parameter QBLK_QBMCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Biomass - Commercial";
				}
				Parameter QBLK_QBMIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Biomass - Industrial";
				}
				Parameter QBLK_QBMRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Biomass - Refinery";
				}
				Parameter QBLK_QBMEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Biomass - Electric Power";
				}
				Parameter QBLK_QBMSN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Biomass - Synthetics";
				}
				Parameter QBLK_QBMHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Biomass - Hydrogen";
				}
				Parameter QBLK_QBMAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Biomass - All Sectors";
				}
				Parameter QBLK_QMSIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Municipal Solid Waste - Industrial";
				}
				Parameter QBLK_QMSEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Municipal Solid Waste - Electric Power";
				}
				Parameter QBLK_QMSAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Municipal Solid Waste - All Sectors";
				}
				Parameter QBLK_QSTRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Solar Thermal - Residential";
				}
				Parameter QBLK_QSTCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Solar Thermal - Commercial";
				}
				Parameter QBLK_QSTIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Solar Thermal - Industrial";
				}
				Parameter QBLK_QSTEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Solar Thermal - Electric Power";
				}
				Parameter QBLK_QSTAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Solar Thermal - All Sectors";
				}
				Parameter QBLK_QPVRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Photovoltaic - Residential";
				}
				Parameter QBLK_QPVCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Photovoltaic - Commercial";
				}
				Parameter QBLK_QPVIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Photovoltaic - Industrial";
				}
				Parameter QBLK_QPVEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Photovoltaic - Electric Power";
				}
				Parameter QBLK_QPVAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Photovoltaic - All Sectors";
				}
				Parameter QBLK_QWIIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Wind - Industrial";
				}
				Parameter QBLK_QWIEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Wind - Electric Power";
				}
				Parameter QBLK_QWIAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Wind - All Sectors";
				}
				Parameter QBLK_QTRRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Renewables - Residential";
				}
				Parameter QBLK_QTRCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Renewables - Commercial";
				}
				Parameter QBLK_QTRTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Renewables - Transportation";
				}
				Parameter QBLK_QTRIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Renewables - Industrial";
				}
				Parameter QBLK_QTREL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Renewables - Electric Power";
				}
				Parameter QBLK_QTRSN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Renewables - Synthetics";
				}
				Parameter QBLK_QTRHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Renewables - Hydrogen";
				}
				Parameter QBLK_QTRAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Renewables - All Sectors";
				}
				Parameter QBLK_QEIEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Net Electricity Imports - Electric Power";
				}
				Parameter QBLK_QCIIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Net Coal Coke Imports - Industrial";
				}
				Parameter QBLK_QTSRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Energy Consumption - Residential";
				}
				Parameter QBLK_QTSCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Energy Consumption - Commercial";
				}
				Parameter QBLK_QTSTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Energy Consumption - Transportatio";
				}
				Parameter QBLK_QTSIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Energy Consumption - Industrial";
				}
				Parameter QBLK_QTSRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Energy Consumption - Refinery";
				}
				Parameter QBLK_QTSEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Energy Consumption - Electric Powe";
				}
				Parameter QBLK_QTSSN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Energy Consumption - Synthetics";
				}
				Parameter QBLK_QTSHM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Energy Consumption - Hydrogen";
				}
				Parameter QBLK_QTSAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Energy Consumption - All Sectors";
				}
				Parameter QBLK_QH1TR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Hydrogen, Large Citites - Transportation";
				}
				Parameter QBLK_QH2TR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Hydrogen, Small Citites - Transportation";
				}
				Parameter QBLK_QH3TR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Hydrogen, Rural - Transportation";
				}
			}
			Section MPBLK {
				Parameter MPBLK_PELRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Residential";
				}
				Parameter MPBLK_PELCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Commercial";
				}
				Parameter MPBLK_PELTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Transportation";
				}
				Parameter MPBLK_PELIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - Industrial";
				}
				Parameter MPBLK_PELAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Purchased Electricity - All Sectors";
				}
				Parameter MPBLK_PGFRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Residential";
				}
				Parameter MPBLK_PGFCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Commercial";
				}
				Parameter MPBLK_PGFTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Transportation";
				}
				Parameter MPBLK_PGFIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Industrial";
				}
				Parameter MPBLK_PGFEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - Electric Power";
				}
				Parameter MPBLK_PGFAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Core - All Sectors";
				}
				Parameter MPBLK_PGIRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Residential";
				}
				Parameter MPBLK_PGICM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Commercial";
				}
				Parameter MPBLK_PGITR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Transportation";
				}
				Parameter MPBLK_PGIIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Industrial";
				}
				Parameter MPBLK_PGIEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - Electric Power";
				}
				Parameter MPBLK_PGIAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas, Noncore - All Sectors";
				}
				Parameter MPBLK_PNGRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Residential";
				}
				Parameter MPBLK_PNGCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Commercial";
				}
				Parameter MPBLK_PNGTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Transportation";
				}
				Parameter MPBLK_PNGIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Industrial";
				}
				Parameter MPBLK_PNGEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Electric Power";
				}
				Parameter MPBLK_PNGAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - All Sectors";
				}
				Parameter MPBLK_PGPTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas - Pipeline";
				}
				Parameter MPBLK_PLPIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Natural Gas Lease and Plant Fuel";
				}
				Parameter MPBLK_PCLRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Residential";
				}
				Parameter MPBLK_PCLRStemp {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Residential";
				}
				Parameter MPBLK_PCLCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Commercial";
				}
				Parameter MPBLK_PCLCMtemp {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Commercial";
				}
				Parameter MPBLK_PCLIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Industrial";
				}
				Parameter MPBLK_PCLINtemp {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Industrial";
				}
				Parameter MPBLK_PCLEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal Price - Electric Power Sector By Census Region (1987$)";
					Comment: "This is the delivered coal price to power sector as it exists in the restart file.  Census regions 1 to 9, 10 blank, 11 National Price";
				}
				Parameter MPBLK_PCLELtemp {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Electric Power";
				}
				Parameter MPBLK_PCLSN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - Synthetics";
				}
				Parameter MPBLK_PCLAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal - All Sectors";
				}
				Parameter MPBLK_PMCIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Metallurgical Coal - Industrial";
				}
				Parameter MPBLK_PMCINtemp {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Metallurgical Coal - Industrial";
				}
				Parameter MPBLK_PMGCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Motor Gasoline - Commercial";
				}
				Parameter MPBLK_PMGTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Motor Gasoline - Transportation";
				}
				Parameter MPBLK_PMGIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Motor Gasoline - Industrial";
				}
				Parameter MPBLK_PMGAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Motor Gasoline - All Sectors";
				}
				Parameter MPBLK_PJFTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Jet Fuel - Transportation";
				}
				Parameter MPBLK_PDSRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Residential";
				}
				Parameter MPBLK_PDSCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Commercial";
				}
				Parameter MPBLK_PDSTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate Price, Low Sulfur - Transportation Sector By Census Region 1987$/MMBtu";
					Comment: "West South Central is Census Region 7 to use for MGO Diesel Price";
				}
				Parameter MPBLK_PDSIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Industrial";
				}
				Parameter MPBLK_PDSEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - Electricity (incl. petroleu";
				}
				Parameter MPBLK_PDSAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Distillate - All Sectors";
				}
				Parameter MPBLK_PKSRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Kerosene - Residential";
				}
				Parameter MPBLK_PKSCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Kerosene - Commercial";
				}
				Parameter MPBLK_PKSIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Kerosene - Industrial";
				}
				Parameter MPBLK_PKSAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Kerosene - All Sectors";
				}
				Parameter MPBLK_PLGRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - Residential";
				}
				Parameter MPBLK_PLGCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - Commercial";
				}
				Parameter MPBLK_PLGTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - Transportation";
				}
				Parameter MPBLK_PLGIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - Industrial";
				}
				Parameter MPBLK_PLGAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Petroleum Gases - All Sectors";
				}
				Parameter MPBLK_PRLCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - Commercial";
				}
				Parameter MPBLK_PRLTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel Price, Low Sulfur - Transportation Sector By Census Region";
					Comment: "West South Central is census region 7, use for Bunker Fuel price.";
				}
				Parameter MPBLK_PRLIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - Industrial";
				}
				Parameter MPBLK_PRLEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - Electric Pow";
				}
				Parameter MPBLK_PRLAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, Low Sulfur - All Sectors";
				}
				Parameter MPBLK_PRHTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel Price, High Sulfur - Transportation Sector By Census Region";
				}
				Parameter MPBLK_PRHEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, High Sulfur - Electric Po";
				}
				Parameter MPBLK_PRHAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel, High Sulfur - All Sectors";
				}
				Parameter MPBLK_PRSCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - Commercial";
				}
				Parameter MPBLK_PRSTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - Transportation";
				}
				Parameter MPBLK_PRSIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - Industrial";
				}
				Parameter MPBLK_PRSEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel -  Electric Power";
				}
				Parameter MPBLK_PRSAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Residual Fuel - All Sectors";
				}
				Parameter MPBLK_PPFIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Petrochemical Feedstocks - Industrial";
				}
				Parameter MPBLK_PASIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Asphalt, Road Oil - Industrial";
				}
				Parameter MPBLK_POTTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Other -  Transportation";
				}
				Parameter MPBLK_POTIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Other - Industrial";
				}
				Parameter MPBLK_POTAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Other - All Sectors";
				}
				Parameter MPBLK_PTPRS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Residential";
				}
				Parameter MPBLK_PTPCM {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Commercial";
				}
				Parameter MPBLK_PTPTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Transportation";
				}
				Parameter MPBLK_PTPIN {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Industrial";
				}
				Parameter MPBLK_PTPRF {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Refinery";
				}
				Parameter MPBLK_PTPEL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - Electric Power";
				}
				Parameter MPBLK_PTPAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total Petroleum - All Sectors";
				}
				Parameter MPBLK_PMETR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Methanol - Transportation";
				}
				Parameter MPBLK_PETTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Ethanol - Transportation";
				}
				Parameter MPBLK_PHYTR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Liquid Hydrogen - Transportation";
				}
				Parameter MPBLK_PUREL {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Uranium - Electricity";
				}
				Parameter MPBLK_PH1TR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Large Cities, Hydrogen - Transportation";
				}
				Parameter MPBLK_PH2TR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Small Cities, Hydrogen - Transportation";
				}
				Parameter MPBLK_PH3TR {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Rural, Hydrogen - Transportation";
				}
			}
			Section NCNTRL {
				Parameter NCNTRL_EXW {
					IndexDomain: (M1);
					Text: "      EXECUTE WORLD  (INTERNATIONAL)";
				}
				Parameter NCNTRL_EXM {
					IndexDomain: (M1);
					Text: "EXECUTE MAC    (MACROECONOMIC)";
				}
				Parameter NCNTRL_EXR {
					IndexDomain: (M1);
					Text: "EXECUTE RESD   (RESIDENTIAL)";
				}
				Parameter NCNTRL_EXK {
					IndexDomain: (M1);
					Text: "EXECUTE COMM   (COMMERCIAL)";
				}
				Parameter NCNTRL_EXI {
					IndexDomain: (M1);
					Text: "EXECUTE IND    (INDUSTRIAL)";
				}
				Parameter NCNTRL_EXT {
					IndexDomain: (M1);
					Text: "EXECUTE TRAN   (TRANSPORTATION)";
				}
				Parameter NCNTRL_EXE {
					IndexDomain: (M1);
					Text: "EXECUTE UTIL   (UTILITY)";
				}
				Parameter NCNTRL_EXC {
					IndexDomain: (M1);
					Text: "EXECUTE COAL   (COAL SUPPLY)";
				}
				Parameter NCNTRL_EXL {
					IndexDomain: (M1);
					Text: "EXECUTE WELL   (OIL AND GAS SUPPLY)";
				}
				Parameter NCNTRL_EXG {
					IndexDomain: (M1);
					Text: "EXECUTE PIPE   (GAS TRANS.& DISTR.)";
				}
				Parameter NCNTRL_EXO {
					IndexDomain: (M1);
					Text: "EXECUTE REFINE (PETROLEUM REFINERY)";
				}
				Parameter NCNTRL_EXN {
					IndexDomain: (M1);
					Text: "EXECUTE RENEW  (RENEWABLES)";
				}
				Parameter NCNTRL_EXH {
					IndexDomain: (M1);
					Text: "EXECUTE Hydrogen";
				}
				Parameter NCNTRL_RUNMOD {
					IndexDomain: (NMODEL);
					Text: "FLAGS FOR WHETHER EACH MODEL IS BEING RU";
				}
				Parameter NCNTRL_FIRSYR {
					IndexDomain: (M1);
					Text: "FIRST FORECAST YEAR INDEX (EG. 2)";
				}
				Parameter NCNTRL_LASTYR {
					IndexDomain: (M1);
					Text: "LAST FORECAST YEAR INDEX  (EG. 29)";
				}
				Parameter NCNTRL_LASTCALYR {
					IndexDomain: (M1);
					Text: "LAST FORECAST YEAR as Year (EG. 2020)";
				}
				Parameter NCNTRL_MAXITR {
					IndexDomain: (M1);
					Text: "MAXIMUM ITERATIONS";
					Range: integer;
				}
				Parameter NCNTRL_FRCTOL {
					IndexDomain: (M1);
					Text: "MINIMUM FRACTIONAL CONVERGENCE TOLERANCE";
				}
				Parameter NCNTRL_ABSTOL {
					IndexDomain: (M1);
					Text: "MINIMUM ABSOLUTE CONVERGENCE TOLERANCE";
				}
				Parameter NCNTRL_RLXPC {
					IndexDomain: (M1);
					Text: "RELAXATION FRACTION";
				}
				Parameter NCNTRL_NYRS {
					IndexDomain: (M1);
					Text: "NUMBER OF GROWTH YEARS FOR EXPECTATIONS";
				}
				Parameter NCNTRL_I4SITE {
					IndexDomain: (M1);
					Text: "FORESIGHT OPT (1:MYOPIC, 2: ADAPTIVE, 3:";
				}
				Parameter NCNTRL_I4SCNT {
					IndexDomain: (M1);
					Text: "FORESIGHT CONTROL: (1: MAIN, 2: SUBMODUL";
				}
				Parameter NCNTRL_IRELAX {
					IndexDomain: (M1);
					Text: "OPTION TO RUN HEURISTIC ROUTINE TO SPEED";
				}
				Parameter NCNTRL_WWOP {
					IndexDomain: (M1);
					Text: "WORLD OIL PRICE CASE";
				}
				Parameter NCNTRL_MMAC {
					IndexDomain: (M1);
					Text: "MACRO CASE";
				}
				Parameter NCNTRL_HISTORY {
					IndexDomain: (M1);
					Text: "OPTION TO OVERWRITE 1990 DATA W/SEDS DAT";
				}
				Parameter NCNTRL_CURITR {
					IndexDomain: (M1);
					Text: "CURRENT ITERATION";
				}
				Parameter NCNTRL_CURIYR {
					IndexDomain: (M1);
					Text: "CURRENT YEAR INDEX";
				}
				Parameter NCNTRL_CURCALYR {
					IndexDomain: (M1);
					Text: "CURRENT CALENDAR YEAR";
				}
				Parameter NCNTRL_LOOPOP {
					IndexDomain: (M1);
					Text: "NEMS YEAR LOOPING (1: A YEAR AT A TIME,";
				}
				Parameter NCNTRL_CTEST {
					IndexDomain: (M1);
					Text: "OVERALL CONVERGENCE TEST (0: NOT, 1:CONV";
				}
				Parameter NCNTRL_FCRL {
					IndexDomain: (M1);
					Text: "FINAL CONVERGENCE AND REPORTING LOOP SWI";
				}
				Parameter NCNTRL_NCRL {
					IndexDomain: (M1);
					Text: "REPORTING LOOP SWITCH FOR EACH MODEL (1=";
				}
				Parameter NCNTRL_MACFDBK {
					IndexDomain: (M1);
					Text: "MACROECONOMIC FEEDBACK SWITCH";
				}
				Parameter NCNTRL_ELASSW {
					IndexDomain: (M1);
					Text: "ELASTICITY SWITCH (0->OFF, 1->ON)";
				}
				Parameter NCNTRL_DSMSWTCH {
					IndexDomain: (M1);
					Text: "DEM SIDE MGMT SWITCH(0->OFF,1->ON)";
				}
				Parameter NCNTRL_DBDUMP {
					IndexDomain: (M1);
					Text: "DATABASE DUMP/YR SW (0->OFF,1->ON) (DEF=";
				}
				Parameter NCNTRL_MODELON {
					IndexDomain: (M1);
					Text: "MODELS NEVER OFF SWITCH(0->OFF,1->ON)(DE";
				}
				Parameter NCNTRL_ECPSTART {
					IndexDomain: (M1);
					Text: "START YEAR FOR ECP MODULE (DEF=1)";
				}
				Parameter NCNTRL_CNVTST {
					IndexDomain: (NMODEL,MNUMYR);
					Text: "CONVERGENCE TEST FLAGS FOR EACH MODEL";
				}
				Parameter NCNTRL_ITIMNG {
					IndexDomain: (M1);
					Text: "TIMING SWITCH (ITIMNG=1 MEANS TIMING ON)";
				}
				Parameter NCNTRL_YEARPR {
					IndexDomain: (M1);
					Text: "FOR REPORTING, YEAR DOLLARS";
				}
				Parameter NCNTRL_SCALPR {
					IndexDomain: (M1);
					Text: "FOR REPORTING, DEFLATOR FOR YEARPR";
				}
				Parameter NCNTRL_MORDER {
					IndexDomain: (NMODEL);
					Text: "MODULE EXECUTION ORDER";
				}
				Parameter NCNTRL_PRTDBGW {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN WORLD  (INTERNATIONAL)";
				}
				Parameter NCNTRL_PRTDBGM {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN MAC    (MACROECONOMIC)";
				}
				Parameter NCNTRL_PRTDBGR {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN RESD   (RESIDENTIAL)";
				}
				Parameter NCNTRL_PRTDBGK {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN COMM   (COMMERCIAL)";
				}
				Parameter NCNTRL_PRTDBGI {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN IND    (INDUSTRIAL)";
				}
				Parameter NCNTRL_PRTDBGT {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN TRAN   (TRANSPORTATION)";
				}
				Parameter NCNTRL_PRTDBGE {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN UTIL   (UTILITY)";
				}
				Parameter NCNTRL_PRTDBGC {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN COAL   (COAL SUPPLY)";
				}
				Parameter NCNTRL_PRTDBGL {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN WELL   (OIL AND GAS SUPPL";
				}
				Parameter NCNTRL_PRTDBGG {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN PIPE   (GAS TRANS.& DISTR";
				}
				Parameter NCNTRL_PRTDBGO {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN REFINE (PETROLEUM REFINER";
				}
				Parameter NCNTRL_PRTDBGN {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN RENEW  (RENEWABLES)";
				}
				Parameter NCNTRL_PRTDBGH {
					IndexDomain: (M1);
					Text: "PRINT DEBUG IN Hydrogen";
				}
				Parameter NCNTRL_IJUMPYR {
					IndexDomain: (M1);
					Text: "End of forecast horizon - index";
				}
				Parameter NCNTRL_IJUMPCALYR {
					IndexDomain: (M1);
					Text: "End of forecast horizon - calendar year";
				}
			}
			Section PMMOUT {
				Parameter PMMOUT_QCLRFPD {
					IndexDomain: (MNUMPR,MNUMYR);
					Text: "Quantity of CTL (Coal to Liquid)";
				}
			}
			Section COALOUT {
				Parameter COALOUT_CLSYNGQN {
					IndexDomain: (M17,MNUMYR);
					Text: "Synthetic NG quantity";
				}
				Parameter COALOUT_CQSBB {
					IndexDomain: (M3,MNUMYR);
					Text: "Coal Prod (East,West Miss)";
				}
				Parameter CQSBB_Prior {
					IndexDomain: (M3,yr);
					Text: "Coal Prod (East,West Miss) - Coal Supply from prior Restart file in TBtus";
					Definition: {
						If M3 = 3 then
						Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr), COALOUT_CQSBB(M3,MNUMYR))
						endif;
					}
				}
				Parameter CQSBB_PriorTot {
					IndexDomain: (yr);
					Text: "Coal Prod (East,West Miss) - Coal Supply from prior Restart file in TBtus";
					Definition: sum(M3, CQSBB_Prior(M3,yr));
				}
				Parameter COALOUT_CQSBT {
					IndexDomain: (M3,MNUMYR);
					Text: "Coal Conv Factor for Prod";
				}
				Parameter COALOUT_CPSB {
					IndexDomain: (M3,MNUMYR);
					Text: "Coal Minemouth Price - 1987 dollars";
				}
				Parameter COALOUT_CPSBT {
					IndexDomain: (M3,MNUMYR);
					Text: "Coal Conv Factor for Minemouth Prices";
				}
				Parameter COALOUT_CQDBFT {
					IndexDomain: (MNUMCR,CLSECT,MNUMYR);
					Text: "Coal Conversion Factor for Consumption By Sector and Census Region";
					Definition: {
						! These are calculated in the Copy_Global subrotine only for the current run year, when the model has solved with an "Optimal" solution.
					}
					Comment: {
						"CLSECT 1: Residential-Commercial-Institutional 2: Industrial Steam Coal 3:Industrial Coking Coal 4: Coal-to-Liquids 5: Coal Exports
						       6: Electric Power 7:Coal Imports"
					}
				}
				Parameter COALOUT_CPDBFT {
					IndexDomain: (MNUMCR,CLSECT,MNUMYR);
					Text: "Coal Conv Factor for Delivered Prices";
				}
				Parameter COALOUT_CQDBFB {
					IndexDomain: (MNUMCR,CLSECT,MNUMYR);
					Text: "Imports, Exports, Stock Changes";
				}
				Parameter COALOUT_PCLRFPD {
					IndexDomain: (MNUMPR,MNUMYR);
					Text: "Price of CTL (coal to liquids)";
				}
				Parameter COALOUT_LIQUCARB {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "CTL carbon content";
				}
				Parameter COALOUT_LCVBTU {
					IndexDomain: (MNUMPR,MNUMYR);
					Text: "Heat content for coal to CTL";
				}
				Parameter COALOUT_LTRNTON {
					IndexDomain: (MNUMPR,MNUMYR);
					Text: "Transportation rate for coal to CTL";
				}
				Parameter COALOUT_TOTMINERS {
					IndexDomain: (MNUMYR);
					Text: "Number of coal miners by year";
				}
				Parameter COALOUT_L_SO2P {
					IndexDomain: (MNUMPR,MNUMYR);
					Text: "Cost of SO2 allowances";
				}
				Parameter COALOUT_L_HGP {
					IndexDomain: (MNUMPR,MNUMYR);
					Text: "Cost of Hg allowances";
				}
				Parameter COALOUT_IIMP_BTU {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Industrial Imports";
				}
				Parameter COALOUT_EIMP_BTU {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Electricity Imports";
				}
				Parameter COALOUT_MIMP_BTU {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Metallurgical Imports";
				}
				Parameter COALOUT_QCLGAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Total coal to synthetic natural gas";
				}
				Parameter COALOUT_QCLGHP {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal to syngas heat and power";
				}
				Parameter COALOUT_EASTTOEA {
					IndexDomain: (MNUMYR);
					Text: "Eastern coal for eastern electr demand";
				}
				Parameter COALOUT_WESTSUP {
					IndexDomain: (MNUMYR);
					Text: "Western coal for national electr demand";
				}
				Parameter COALOUT_EASTTOT {
					IndexDomain: (MNUMYR);
					Text: "Total eastern electr demand";
				}
				Parameter COALOUT_TTONMILE {
					IndexDomain: (MNUMYR);
					Text: "Total ton-miles of electr coal";
				}
				Parameter COALOUT_ETONMILE {
					IndexDomain: (MNUMYR);
					Text: "East ton-miles of electr coal";
				}
				Parameter COALOUT_WTONMILE {
					IndexDomain: (MNUMYR);
					Text: "West ton-miles of electr coal";
				}
				Parameter COALOUT_TTON {
					IndexDomain: (MNUMYR);
					Text: "Total tons (electr) of coal";
				}
				Parameter COALOUT_ETON {
					IndexDomain: (MNUMYR);
					Text: "East tons (electr) of coal";
				}
				Parameter COALOUT_WTON {
					IndexDomain: (MNUMYR);
					Text: "West tons (electr) of coal";
				}
				Parameter COALOUT_COALCODE {
					IndexDomain: (M1);
					Text: {
						"print AIMMS debug in nohup.out via main; a value greater than 0 indicates an infeasibility"
					}
				}
				Parameter COALOUT_INDSTEAMBAL {
					IndexDomain: MNUMYR;
				}
				Parameter COALOUT_INDCOKEBAL {
					IndexDomain: MNUMYR;
				}
				Parameter COALOUT_ELECCOALBAL {
					IndexDomain: MNUMYR;
				}
				Parameter COALOUT_APPSTOCKS {
					IndexDomain: MNUMYR;
				}
				Parameter COALOUT_INTSTOCKS {
					IndexDomain: MNUMYR;
				}
				Parameter COALOUT_WESTSTOCKS {
					IndexDomain: MNUMYR;
				}
			}
			Section COALREP {
				Parameter COALREP_COALPROD {
					IndexDomain: (MNUMCR,MNUMLR,MNUMYR);
					Text: "COAL DISTRIBUTION";
				}
				Parameter COALREP_COALPROD2 {
					IndexDomain: (MNUMCR,MNUMLR,MNUMYR);
					Text: "COAL DISTRIBUTION INCLUDING EXPORTS";
				}
				Parameter COALREP_COALPRICE {
					IndexDomain: (MNUMLR,MNUMYR);
					Text: "COAL PRICE";
				}
				Parameter COALREP_WC_DIST_ST {
					IndexDomain: (MNUMCR,MNUMLR,MNUMYR);
					Text: "WASTE COAL DISTRIBUTION in mmTons";
				}
				Parameter COALREP_WC_PROD_ST {
					IndexDomain: (MNUMCR,MNUMLR,MNUMYR);
					Text: "WASTE COAL DISTRIBUTION INCLUDING EXPORT";
				}
				Parameter COALREP_WC_PROD_BTU {
					IndexDomain: (MNUMCR,MNUMLR,MNUMYR);
					Text: "WASTE COAL DISTRIBUTION INCLUDING EXPORT";
				}
				Parameter COALREP_ABSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Appalachia Bituminous Coal";
				}
				Parameter COALREP_ALSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Appalachia Lignite Coal";
				}
				Parameter COALREP_IBSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Interior Bituminous Coal";
				}
				Parameter COALREP_ILSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Interior Lignite Coal";
				}
				Parameter COALREP_WBSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "West Bituminous Coal";
				}
				Parameter COALREP_WSSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "West Sub-Bituminous Coal";
				}
				Parameter COALREP_WLSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "West Lignite Coal";
				}
				Parameter COALREP_WSCF {
					IndexDomain: (M4,M11,MNUMYR);
					Text: "Steam Coal World Flows";
				}
				Parameter COALREP_WMCF {
					IndexDomain: (M4,M11,MNUMYR);
					Text: "Metallurgical Coal World Flows";
				}
				Parameter COALREP_WTCF {
					IndexDomain: (M4,M11,MNUMYR);
					Text: "Total Coal World Flows";
				}
				Parameter COALREP_PCLEX {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal Export Price";
				}
				Parameter COALREP_CLSULF {
					IndexDomain: (M14,M4,M3,MNUMYR);
					Text: "Coal Production by Region";
				}
				Parameter COALREP_PCLSULF {
					IndexDomain: (M14,M4,M3,MNUMYR);
					Text: "Coal Price by Region";
				}
				Parameter COALREP_PABSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Price of App Bit Coal";
				}
				Parameter COALREP_PALSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Price of App Lig Coal";
				}
				Parameter COALREP_PIBSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Price of Int Bit Coal";
				}
				Parameter COALREP_PILSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Price of Int Lig Coal";
				}
				Parameter COALREP_PWBSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Price of West Bit Coal";
				}
				Parameter COALREP_PWSSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Price of West Sub Coal";
				}
				Parameter COALREP_PWLSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Price of West Lig Coal";
				}
				Parameter COALREP_APSULF_BTU {
					IndexDomain: (M4,MNUMYR);
					Text: "Appalachia Premium Coal";
				}
				Parameter COALREP_ABSULF_BTU {
					IndexDomain: (M4,MNUMYR);
					Text: "Appalachia Bituminous Coal";
				}
				Parameter COALREP_ALSULF_BTU {
					IndexDomain: (M4,MNUMYR);
					Text: "Appalachia Lignite Coal";
				}
				Parameter COALREP_IBSULF_BTU {
					IndexDomain: (M4,MNUMYR);
					Text: "Interior Bituminous Coal";
				}
				Parameter COALREP_ILSULF_BTU {
					IndexDomain: (M4,MNUMYR);
					Text: "Interior Lignite Coal";
				}
				Parameter COALREP_WBSULF_BTU {
					IndexDomain: (M4,MNUMYR);
					Text: "West Bituminous Coal";
				}
				Parameter COALREP_WSSULF_BTU {
					IndexDomain: (M4,MNUMYR);
					Text: "West Sub-Bituminous Coal";
				}
				Parameter COALREP_WLSULF_BTU {
					IndexDomain: (M4,MNUMYR);
					Text: "West Lignite Coal";
				}
				Parameter COALREP_CLSULF_BTU {
					IndexDomain: (M14,M4,M3,MNUMYR);
					Text: "Coal Production by Region";
				}
				Parameter COALREP_PMTD {
					IndexDomain: (NSREGN,MNUMYR);
					Text: "Underground Coal Production by Region";
				}
				Parameter COALREP_PMTS {
					IndexDomain: (NSREGN,MNUMYR);
					Text: "Surface Coal Production by Region";
				}
				Parameter COALREP_PMTD_BTU {
					IndexDomain: (NSREGN,MNUMYR);
					Text: "Underground Coal Production by Region";
				}
				Parameter COALREP_PMTS_BTU {
					IndexDomain: (NSREGN,MNUMYR);
					Text: "Surface Coal Production by Region";
				}
				Parameter COALREP_PMTDP {
					IndexDomain: (NSREGN,MNUMYR);
					Text: "Price of Underground Coal Production by";
				}
				Parameter COALREP_PMTSP {
					IndexDomain: (NSREGN,MNUMYR);
					Text: "Price of Surface Coal Production by Regi";
				}
				Parameter COALREP_APSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "App Premium Coal";
				}
				Parameter COALREP_PAPSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Price App Premium Coal";
				}
				Parameter COALREP_UTCONS {
					IndexDomain: (NUTSEC,MNUMYR);
					Text: "Util Coal consumption by plant sub-sector (Quantity in TBtus)";
				}
				Parameter COALREP_UTPSO2 {
					IndexDomain: (NUTSEC,MNUMYR);
					Text: "Util potential SO2 emissions from NEMMS by utility sub-sector";
				}
				Parameter COALREP_UTTSO2 {
					IndexDomain: (NUTSEC,MNUMYR);
					Text: "Util total SO2 emissions";
				}
				Parameter COALREP_UCSO2 {
					IndexDomain: (NUTSEC,MNUMYR);
					Text: "Util uncontrolled SO2 emissions";
				}
				Parameter COALREP_UCMERC {
					IndexDomain: (NUTSEC,MNUMYR);
					Text: "Util uncontrolled Hg  emissions";
				}
				Parameter COALREP_ACMERC {
					IndexDomain: (MNUMYR);
					Text: "Removal of Hg  emissions-activated carbo";
				}
				Parameter COALREP_HGEM95 {
					IndexDomain: (M31,MNUMYR);
					Text: "Hg emissions by Table 95 groupings";
				}
				Parameter COALREP_TSPMBTU {
					IndexDomain: (MNUMYR);
					Text: "Average SO2 emissions in tons of SO2 per";
				}
				Parameter COALREP_TMPMBTU {
					IndexDomain: (MNUMYR);
					Text: "Average mercury emissions in tons of hg";
				}
				Parameter COALREP_TOTLABPROD {
					IndexDomain: (MNUMYR);
					Text: "total labor productivity";
				}
				Parameter COALREP_WAGEPHOUR {
					IndexDomain: (MNUMYR);
					Text: "Total Wages per hour";
				}
				Parameter COALREP_WAGEGROWTH {
					IndexDomain: (MNUMYR);
					Text: "Growth in wages from 1997";
				}
				Parameter COALREP_LABPRODGROWTH {
					IndexDomain: (MNUMYR);
					Text: "Growth in labor productivity";
				}
				Parameter COALREP_COAL2GAS {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Coal for gasification (mainly Great Plai";
				}
				Parameter COALREP_WPSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "West Premium Coal";
				}
				Parameter COALREP_PWPSULF {
					IndexDomain: (M4,MNUMYR);
					Text: "Price West Premium Coal";
				}
				Parameter COALREP_WPSULF_BTU {
					IndexDomain: (M4,MNUMYR);
					Text: "West Premium Coal";
				}
				Parameter COALREP_CLIMPRANK {
					IndexDomain: (M5,MNUMYR);
					Text: "US Coal Imports By Rank";
				}
				Parameter COALREP_CLEXPRANK {
					IndexDomain: (M5,MNUMYR);
					Text: "US Coal Exports By Rank";
				}
			}
			Section TRANREP {
				Parameter TRANREP_TRTMRRC {
					IndexDomain: (M2,MNUMYR);
					Text: "Billion Ton Miles by Railroad for coal (";
				}
				Parameter CONVFACT_CFRSQ {
					IndexDomain: M1;
					Text: "Residual Fuel BTU to BBL convertion factor (same for all years)";
					Definition: 6.28700017929077;
				}
				Parameter CONVFACT_CFDSTR {
					IndexDomain: (MNUMYR);
					Text: "Distillate Million Btu to BBL conversion Factor by Year";
				}
				Parameter CFDSTR {
					IndexDomain: yr;
					Text: "Conversion factor MMBtu per BBL for Transportation distillate (diesel) includes ulsd";
					Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr), CONVFACT_CFDSTR(MNUMYR));
				}
				Parameter CFRSQ {
					IndexDomain: yr;
					Definition: sum(M1, CONVFACT_CFRSQ(M1));
				}
			}
			Section MACOUT {
				Parameter MACOUT_MC_JPGDP {
					IndexDomain: (MNUMY3);
					Text: "Chained price index-gross domestic produ";
				}
				Parameter MACOUT_MC_RLRMCORPPUAA {
					IndexDomain: (MNUMYR);
					Text: "Real rate on AA-rated public utility bonds";
				}
				Parameter MACOUT_MC_RMCORPPUAA {
					IndexDomain: (MNUMYR);
					Text: "Rate on AA-rated public utility bonds - nominal rate";
				}
				Parameter MC_RMCORPPUAA {
					IndexDomain: Yr;
					Text: "Rate on AA-rated public utility bonds - nominal rate";
					Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),MACOUT_MC_RMCORPPUAA(MNUMYR));
				}
				Parameter MACOUT_MC_WPI10 {
					IndexDomain: (MNUMYR);
					Text: "Producer Price Index-metals & metal prod";
				}
				Parameter MC_WPI10_V2 {
					IndexDomain: Yr;
					Text: "Producer Price Index-metals & metal prod - remove inflation from index";
					Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),MACOUT_MC_WPI10(MNUMYR)) / MC_JPGDP(yr);
				}
				Parameter MACOUT_MC_WPI11 {
					IndexDomain: (MNUMYR);
					Text: "Producer price index-machinery & equipment";
				}
				Parameter MACOUT_MC_RMTCM10Y {
					IndexDomain: (MNUMYR);
					Text: "10 year Treasury note yield";
				}
				Parameter MC_RMTCM10Y {
					IndexDomain: yr;
					Text: "10 year Treasury note yield";
					Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr), MACOUT_MC_RMTCM10Y(MNUMYR));
				}
				Parameter MACOUT_MC_WPI14 {
					IndexDomain: (MNUMYR);
					Text: "Producer price index-Transportation Equipment";
				}
				Parameter MC_WPI14 {
					IndexDomain: (yr);
					Text: "Producer price index-Transportation Equipment - remove inflation (this variable is used for railroad depreciation)";
					Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr), MACOUT_MC_WPI14(MNUMYR)) / MC_JPGDP(yr);
				}
				Parameter MACOUT_MC_JECIWSP {
					IndexDomain: (MNUMYR);
					Text: "Employment cost index-private wages & salaries";
				}
				Parameter MC_JECIWSP {
					IndexDomain: (yr);
					Text: "Employment cost index-private wages & salaries - remove inflation from index";
					Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr), MACOUT_MC_JECIWSP(MNUMYR))  / MC_JPGDP(yr);
				}
				Parameter MACOUT_MC_JECIWSSP {
					IndexDomain: (MNUMYR);
					Text: "Employment cost index";
				}
				Parameter MACOUT_MC_WPIIND05 {
					IndexDomain: (MNUMYR);
					Text: "Producer price index - Industrial commodities excluding energy";
				}
				Parameter MC_WPIIND05 {
					IndexDomain: (yr);
					Text: "Producer price index - Industrial commodities excluding energy - remove inflation";
					Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr), MACOUT_MC_WPIIND05(MNUMYR))  / MC_JPGDP(yr);
				}
			}
			Section EMISSION {
				Parameter EMISSION_NUM_HG_GRP {
					IndexDomain: (M1);
					Text: "Number of Mercury Cap and Trade Groups";
				}
				Parameter EMISSION_EMCOALPROD {
					IndexDomain: (M6,M2,MNUMYR);
					Text: "coal production, shtons, by 5 emissions";
				}
				Parameter EMISSION_HG_INPUT {
					IndexDomain: (HG_CLS,MX_RNK,MNUMYR);
					Text: "Mercury emissions limits in grams/MMBtu";
				}
				Parameter EMISSION_HG_MEF {
					IndexDomain: (HG_CLS,MX_RNK,MNUMYR);
					Text: "Mercury emissions limits as percent of i";
				}
				Parameter EMISSION_NUM_SO2_GRP {
					IndexDomain: (M1);
					Text: "Number of SO2 Compliance Groups";
				}
				Parameter EMISSION_EMRFSA {
					IndexDomain: (MNUMYR,MX_SO2);
					Text: "Sulfur allowances";
				}
				Parameter EMISSION_TOT_MERC {
					IndexDomain: (MNUMYR);
					Text: "Mercury Emission by Year";
				}
				Parameter EMISSION_EMEL_QHG {
					IndexDomain: (NDREGN,MNUMYR);
					Text: "Mercury Caps by Group and Year (quantity tons)";
				}
				Parameter EMISSION_EMEL_PHG {
					IndexDomain: (NDREGN,MNUMYR);
					Text: "Mercury Penalty Price by Group and Year";
				}
				Parameter EMISSION_EMETAX {
					IndexDomain: (M15,MNUMYR);
					Text: "Excise (Consumption) Tax by Fuel";
				}
				Parameter EMISSION_EMLIM {
					IndexDomain: (M4,MNUMYR);
					Text: "Emission Constraints by (CO2,SOx,NOx,HG)";
				}
				Parameter EMISSION_EMELPSO2 {
					IndexDomain: (MNUMYR,MX_SO2);
					Text: "CDS Sulfur dioxide emission allowance pr";
				}
				Parameter EMISSION_SO2_SHR_BY_CLRG {
					IndexDomain: (NDRGGN,MX_SO2);
					Text: "Fraction of SO2 Emissions by Compliance";
				}
				Parameter EMISSION_SO2_SHR_ALW_GRP {
					IndexDomain: (MNUMYR,MX_SO2);
					Text: "Value of SO2 Allowances Shared Across Groups (0.0 = no sharing)";
				}
				Parameter EMISSION_HG_MEFNC {
					IndexDomain: (NDREGN,MNUMYR);
					Text: "Hg MEF If No CAMR";
				}
				Parameter EMISSION_USW_CAMR {
					IndexDomain: (M1);
					Text: "CAMR Off Switch";
				}
				Parameter EMISSION_EXTRARISK {
					IndexDomain: (MNUMYR);
					Text: "Extra risk premium above and beyond";
				}
			}
			Section COALEMM {
				DeclarationSection Declaration_Of_Restart_File_Variables {
					Parameter COALEMM_QCLCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "Regional Demand for Coal by ECP Plant Type  (TBtus)";
						Comment: "Coal demand data red from GlobalDataToAIMMS_YYYY_IT.txt  files.";
					}
					Parameter COALEMM_RCLCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "% Removal of SO2 by ECP Coal Plant";
					}
					Parameter COALEMM_SCLCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "Avg SO2 Content by ECP Coal Plant";
					}
					Parameter COALEMM_CCLCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "Avg Car Content by ECP Coal Plant";
					}
					Parameter COALEMM_BCLCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "Avg Btu Content by ECP Coal Plant";
					}
					Parameter COALEMM_XCLCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "% Removal of Car by ECP Coal Plant";
					}
					Parameter COALEMM_SO2OTHER {
						IndexDomain: (MNUMYR,MX_SO2);
						Text: "Other SO2 Emissions";
					}
					Parameter COALEMM_HGOTHER {
						IndexDomain: (MNUMYR);
						Text: "Other HG Emissions";
						Comment: "Comes from restart file, but unclear why we want other mercury emmissions.";
					}
					Parameter COALEMM_GCLCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "HG Removal Rate by ECP Coal Plant";
					}
					Parameter COALEMM_PSLCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "SO2 Comp Prc by ECP Coal Plant";
					}
					Parameter COALEMM_PHGCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "HG Comp Prc by ECP Coal Plant";
					}
					Parameter COALEMM_PCACLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "CAR Comp Prc by ECP Coal Plant";
					}
					Parameter COALEMM_HRTCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "Heatrate for by ECP Coal Plant";
					}
					Parameter COALEMM_HCLCLNR {
						IndexDomain: (NDRGGN,MNUMYR,NUTSEC);
						Text: "HG Content tby ECP Coal Plant";
					}
					Parameter COALEMM_EMM_MEF {
						IndexDomain: (NSTEPS,MX_RNK,NUTSEC);
						Text: "Mercury Emission Factors";
					}
					Parameter COALEMM_ACI_CST {
						IndexDomain: (NSTEPS,MX_RNK,NUTSEC);
						Text: "ACI Equipment Costs";
					}
					Parameter COALEMM_ACI_QAC {
						IndexDomain: (NSTEPS,MX_RNK,NUTSEC);
						Text: "Activated Carbon Requirement";
					}
					Parameter COALEMM_P_AC_SC {
						IndexDomain: (MXACSS);
						Text: "Activated Carbon Cost $/pound for each supply step";
					}
					Parameter COALEMM_Q_AC_SC {
						IndexDomain: (MXACSS);
						Text: "Activated Carbon Supply pounds per supply step";
					}
					Parameter COALEMM_N_AC_SC {
						IndexDomain: (M1);
						Text: "Number of Activated Carbon Supply Steps";
					}
					Parameter COALEMM_ACI_OPT {
						IndexDomain: (NSTEPS,MX_RNK,NUTSEC,MNUMYR);
						Text: "Allowed ACI Options (0 => No , 1 => Yes)";
					}
					Parameter COALEMM_CMM_CL_BTUS {
						IndexDomain: (MX_NCI,MX_UNT);
						Text: "Historical Coal Demands by Unit and Supp";
					}
					Parameter COALEMM_CMM_CONT_INDX {
						IndexDomain: (MX_NCI,MX_UNT);
						Text: "ID Contract Profile for Each Coal Unit";
					}
					Parameter COALEMM_CMM_TRANS_INDX {
						IndexDomain: (MX_NCI,MX_UNT);
						Text: "ID Transportation Profile for Each Coal";
					}
					Parameter COALEMM_CMM_SDV_INDX {
						IndexDomain: (MX_UNT);
						Text: "ID Sub Diversity Profile for Each Coal U";
					}
					Parameter COALEMM_CMM_LDV_INDX {
						IndexDomain: (MX_UNT);
						Text: "ID Lig Diversity Profile for Each Coal U";
					}
					Parameter COALEMM_NEW_SDV_INDX {
						IndexDomain: (NDRGGN);
						Text: "ID Sub Diversity Profile for New Coal Un";
					}
					Parameter COALEMM_NEW_LDV_INDX {
						IndexDomain: (NDRGGN);
						Text: "ID Lig Diversity Profile for New Coal Un";
					}
					Parameter COALEMM_CMM_CONT_PRF {
						IndexDomain: (MX_PRF,MNUMYR);
						Text: "Contract Profile for Each Coal Unit";
					}
					Parameter COALEMM_CMM_TRANS_PRF {
						IndexDomain: (MX_PRF,MNUMYR);
						Text: "Transportation Profile for Each Coal Uni";
					}
					Parameter COALEMM_CMM_SDV_PRF {
						IndexDomain: (MX_PRF,MNUMYR);
						Text: "Sub Diversity Profile for Each Coal Unit";
					}
					Parameter COALEMM_C_DR {
						IndexDomain: (MNUMYR);
						Text: "Discount rate - Capture";
					}
					Parameter COALEMM_CMM_LDV_PRF {
						IndexDomain: (MX_PRF,MNUMYR);
						Text: "Lig Diversity Profile for Each Coal Unit";
					}
					Parameter COALEMM_EMM_CL_ECPT {
						IndexDomain: (MX_UNT,MNUMYR);
						Text: "ECP Type for Each Coal Unit in Each Forecast Year - Value of 99 for retired unit";
						Comment: "Laura changed this to now pass 99 code when plant is retired.  June 2022  DAF";
					}
					Parameter COALEMM_EMM_CL_BTUs {
						IndexDomain: (MX_UNT,MNUMYR);
						Text: "BTUs of Demand for Each Coal Unit - from EMM or restart file";
					}
					Parameter COALEMM_EMM_CL_BTUs_ActiveUnits {
						IndexDomain: (MX_UNT,MNUMYR);
						Text: "BTUs of Demand for Each Coal Unit - Acitive Plants from COALEMM_EMM_CL_ECPT where plant type <> 99";
						Definition: COALEMM_EMM_CL_BTUs(MX_UNT,MNUMYR)*COALEMM_EMM_CL_ECPT_Active_FLAG(MX_UNT,MNUMYR);
						Comment: "Added in Jun 2022 when Laura now passes NUTSEC code of 99 for retired units";
					}
					Parameter COALEMM_EMM_CL_ActiveUnits_ByPltNum {
						IndexDomain: (pltnum,MNUMYR);
						Text: "Count of active EMM units -";
						Definition: {
							
							sum((pu_id),COALEMM_EMM_CL_ECPT_Active_FLAG_PUID(pu_id,MNUMYR)|map_pltnum_puid(pu_id,pltnum))
						}
						Comment: "Added in Jun 2022 when Laura now passes NUTSEC code of 99 for retired units";
					}
					Parameter COALEMM_EMM_CL_BTUs_withPUID {
						IndexDomain: (pu_id,MNUMYR);
						Text: "BTUs of Demand for Each Coal Unit From Restart/EMM in pu_id for non-retired/Active units";
						Definition: sum((MX_UNT),COALEMM_EMM_CL_BTUs_ActiveUnits(MX_UNT,MNUMYR) |Map_MX_UNT_pu_id(MX_UNT,pu_id));
					}
					Parameter EMM_PlantBtus {
						IndexDomain: (pltnum,MNUMYR);
						Text: "Sum all active units to get BTUs by Plant - Need for coal contracts";
						Definition: sum((pu_id),COALEMM_EMM_CL_BTUs_withPUID(pu_id,MNUMYR)|map_pltnum_puid(pu_id,pltnum));
					}
					Parameter EMM_Plant_NumberOActiveUnitsAtPlant_In2019 {
						IndexDomain: pltnum;
						Text: "Sum all active units to get BTUs by Plant - Need for coal contracts";
						Definition: {
							!sum((pu_id),COALEMM_EMM_CL_BTUs_withPUID(pu_id,MNUMYR)|map_pltnum_puid(pu_id,pltnum))
							
							COALEMM_EMM_CL_ActiveUnits_ByPltNum(pltnum,'30')
						}
					}
					Parameter EMM_UnitShareOfPlant {
						IndexDomain: (pu_id,pltnum,MNUMYR) |map_pltnum_puid(pu_id,pltnum);
						Definition: {
							COALEMM_EMM_CL_BTUs_withPUID(pu_id,MNUMYR)/ $ EMM_PlantBtus(pltnum,MNUMYR)
							
							!EMM_CL_BTUs_ForContactsC(MX_NCI,pu_id,pltnum,MNUMYR) / $ sum((pltnum), EMM_CL_BTUs_ForContactsC(MX_NCI,pu_id,pltnum,MNUMYR))
						}
					}
					Parameter EMM_PlantBtus_2019 {
						IndexDomain: pltnum;
						Text: "Used to compute contracts in AnalyseEIA923Deliveries.xls";
						Definition: EMM_PlantBtus(pltnum,'30');
					}
					Parameter COALEMM_NUM_CMM_UNITS {
						IndexDomain: (M1);
						Text: "Number of Coal Units";
					}
					Parameter PlantBTUs_MX_NCI {
						IndexDomain: (pltnum,MX_NCI,MNUMYR);
						Definition: CurvShareOfPlant(pltnum,MX_NCI) * EMM_PlantBtus(pltnum,MNUMYR);
					}
					Parameter UnitBTUs_MX_NCI {
						IndexDomain: (pu_id,MX_NCI,MNUMYR);
						Definition: sum((pltnum),PlantBTUs_MX_NCI(pltnum,MX_NCI,MNUMYR) * EMM_UnitShareOfPlant(pu_id,pltnum,MNUMYR));
					}
					Parameter COALEMM_CMM_CL_BTUS_Alt2 {
						IndexDomain: (MX_NCI,MX_UNT,MNUMYR);
						Definition: sum((pu_id), UnitBTUs_MX_NCI(pu_id,MX_NCI,MNUMYR) |Map_MX_UNT_pu_id(MX_UNT,pu_id));
					}
					Parameter COALEMM_NUM_CONT_PRF {
						IndexDomain: (M1);
						Text: "Number of Contract Profiles";
					}
					Parameter COALEMM_NUM_TRANS_PRF {
						IndexDomain: (M1);
						Text: "Number of Transportation Profiles";
					}
					Parameter COALEMM_NUM_SDV_PRF {
						IndexDomain: (M1);
						Text: "Number of Subbitminous Diversity Profile";
					}
					Parameter COALEMM_NUM_LDV_PRF {
						IndexDomain: (M1);
						Text: "Number of Lignite Diversity Profiles";
					}
					Parameter COALEMM_NUM_SC {
						IndexDomain: (M1);
						Text: "Number of Coal Supply Curves";
					}
					Parameter COALEMM_EMM_CL_CLRG {
						IndexDomain: (MX_UNT);
						Text: "Coal Region for Each Coal Unit";
					}
					StringParameter COALEMM_EMM_CL_UNITS {
						IndexDomain: (MX_UNT);
						Text: "EMM Plant and Unit IDs";
					}
					StringParameter COALEMM_CMM_CL_UNITS {
						IndexDomain: (MX_UNT);
						Text: "CMM Plant and Unit IDs";
					}
					Parameter COALEMM_PLNT_EMF {
						IndexDomain: (ECPCAP,MX_RNK);
						Text: "EMF by Plant Type and Coal Rank";
					}
					Parameter COALEMM_MIN_EMF {
						IndexDomain: (ECPCAP,MX_RNK);
						Text: "Minimum Achievable EMF using ACI";
					}
					Parameter COALEMM_ACI_OandM {
						IndexDomain: (ECPCAP,MX_RNK);
						Text: "Incremental O&M for ACI (87$/MWh)";
					}
					Parameter COALEMM_ACI_STEPS {
						IndexDomain: (ECPCAP,MX_RNK);
						Text: "Number of ACI Steps to Create";
					}
					Parameter COALEMM_HG_CHOICE {
						IndexDomain: (ECPCAP);
						Text: "Choice of Input or Output Mercury Standa";
					}
					Parameter COALEMM_HG_CLASS {
						IndexDomain: (ECPCAP);
						Text: "HG Class : 0=>NA, 1=>Ex Cl, 2=>Nw Cl, 3=";
					}
					Parameter COALEMM_ACI_FOM_SW {
						IndexDomain: (ECPCAP);
						Text: "ACI FOM Switch";
					}
					Parameter COALEMM_FGD_FCTR {
						IndexDomain: (NUTSEC,MX_RNK);
						Text: "FGD Emission Factor";
					}
					Parameter COALEMM_SCR_FCTR {
						IndexDomain: (NUTSEC,MX_RNK);
						Text: "SCR Emission Factor";
					}
					Parameter COALEMM_PARM_A {
						IndexDomain: (NUTSEC,MX_RNK);
						Text: "PARAMETER A in ACI Calculation";
					}
					Parameter COALEMM_PARM_B {
						IndexDomain: (NUTSEC,MX_RNK);
						Text: "PARAMETER B in ACI Calculation";
					}
					Parameter COALEMM_PARM_C {
						IndexDomain: (NUTSEC,MX_RNK);
						Text: "PARAMETER C in ACI Calculation";
					}
					Parameter COALEMM_PARM_D {
						IndexDomain: (NUTSEC,MX_RNK);
						Text: "PARAMETER D in ACI Calculation";
					}
					Parameter COALEMM_EMM_CL_CF {
						IndexDomain: (MX_UNT,MNUMYR);
						Text: "Capacity Factor for Each Coal Unit by Ye";
					}
				}
			}
			Section COALPRC {
				Parameter COALPRC_PCLELCDR {
					IndexDomain: (M2,NDRGGN,MNUMYR);
					Text: "Coal Price to Generators";
				}
			}
			Section USO2GRP {
				Parameter USO2GRP_XCL_QECP {
					IndexDomain: (MX_NCL,ECPFPH,MNUMYR);
					Text: "Expected Coal Supply Quantities";
				}
				Parameter USO2GRP_XCL_PECP {
					IndexDomain: (MX_NCL,M11,ECPFPH,MNUMYR);
					Text: "Expected Coal Supply Prices by ECP Step";
				}
				Parameter USO2GRP_XCL_STEPS {
					IndexDomain: (M11);
					Text: "Expected Coal Supply Step Definitions";
				}
				Parameter USO2GRP_XCL_OTHER {
					IndexDomain: (MX_NCI,MNUMYR);
					Text: "Expected Coal Supply Quantities - Non-Ut";
				}
				Parameter USO2GRP_XCL_TRATE {
					IndexDomain: (MX_NCL,NDREGN);
					Text: "Expected Coal Transportation Tier 2 Rates";
				}
				Parameter USO2GRP_XCL_TR_T2 {
					IndexDomain: (MX_NCL,NDREGN,MNUMYR);
					Text: "Expected Coal Transportation Base Rates";
				}
				Parameter USO2GRP_XCL_TYPE {
					IndexDomain: (MX_NCI);
					Text: "ECP Coal Type by Coal Supply Curve";
				}
				Parameter USO2GRP_XCL_IMPORT {
					IndexDomain: (NDREGN,MNUMYR);
					Text: "Expected Coal Imports";
				}
				Parameter USO2GRP_XCL_STOCK {
					IndexDomain: (MNUMYR);
					Text: "Expected Coal Stock Changes";
				}
				Parameter USO2GRP_XCL_SO2 {
					IndexDomain: (MX_NCI);
					Text: "SO2 Content by Supply Curve";
				}
				Parameter USO2GRP_XCL_SO2_YR {
					IndexDomain: (MX_NCI,MNUMYR);
					Text: "SO2 Content by Supply Curve";
				}
				Parameter USO2GRP_XCL_HG {
					IndexDomain: (MX_NCI);
					Text: "Mercury Content by Supply Curve";
				}
				Parameter USO2GRP_XCL_HG_YR {
					IndexDomain: (MX_NCI,MNUMYR);
					Text: "Mercury Content by Supply Curve";
				}
				Parameter USO2GRP_XCL_CAR {
					IndexDomain: (MX_NCI);
					Text: "Carbon Content by Supply Curve";
				}
				Parameter USO2GRP_XCL_CAR_YR {
					IndexDomain: (MX_NCI,MNUMYR);
					Text: "Carbon Content by Supply Curve";
				}
				Parameter USO2GRP_UQCOAL {
					IndexDomain: (NUTSEC,NDREGN,MNUMYR);
					Text: "EMM Coal Consumption by ECP Type and CDS";
				}
				Parameter USO2GRP_C_ECP_SCRUB {
					IndexDomain: (NUTSEC);
					Text: "Scrubber Code by EMM coal plant type (1=Scrubbed 2=Unscrubbed)";
				}
				Parameter USO2GRP_ECP_SCRUB {
					IndexDomain: (NUTSEC,MNUMYR);
					Text: {
						"Scrubber Code by Coal Sector (0->Unscb;1  By NEMS Year"
					}
				}
				Parameter USO2GRP_ECP_QECP {
					IndexDomain: (MX_NCL,ECPXPH,MNUMYR);
					Text: "ECP Coal Supply Quantities";
				}
				Parameter USO2GRP_ECP_PECP {
					IndexDomain: (MX_NCL,ECPXPH,MNUMYR);
					Text: "ECP Coal Supply Prices";
				}
				Parameter USO2GRP_XCL_TRAT1 {
					IndexDomain: (MX_NCL,NDREGN);
					Text: "Expected Coal 1st Tier Transportation Rate";
				}
				Parameter USO2GRP_XCL_TR_T1 {
					IndexDomain: (MX_NCL,NDREGN,MNUMYR);
					Text: "Expected Coal 1st Tier Transportation Rate";
				}
				Parameter USO2GRP_XCL_PCAP {
					IndexDomain: (MX_NCL,MNUMYR);
					Text: "Current Year Coal Supply Production Capa";
				}
				Parameter USO2GRP_XCL_PCAP_LIMIT {
					IndexDomain: (MX_NCL,MNUMYR);
					Text: "Maximum Coal Supply Production Capacity";
				}
				Parameter USO2GRP_XCL_MX_PCAP {
					IndexDomain: (MX_NCL);
					Text: "Maximum Rate of Increase in Production C";
				}
				Parameter USO2GRP_XCL_MAX_INCR {
					IndexDomain: (MX_NCL,MNUMYR);
					Text: "Maximum Rate of Increase in Production C";
				}
				Parameter USO2GRP_XCL_BTU {
					IndexDomain: (MX_NCI);
					Text: "BTU Content by Coal Supply Curve";
				}
				Parameter USO2GRP_XCL_PLIM {
					IndexDomain: (MX_NCL,MNUMYR);
					Text: "Coal Supply Production Capacity Maximum";
				}
				Parameter USO2GRP_XCL_1TESC {
					IndexDomain: (MX_NCL,ECPFPH,MNUMYR,NDREGN);
					Text: "Expected Coal Transportation Escalation";
				}
				Parameter USO2GRP_XCL_2TESC {
					IndexDomain: (MX_NCL,ECPFPH,MNUMYR,NDREGN);
					Text: "Expected Coal Transportation Escalation";
				}
				Parameter USO2GRP_BNK_TO_CMM_HG {
					IndexDomain: (MNUMYR);
					Text: "Mercury Bank Adjustments";
				}
				Parameter USO2GRP_EFD_PROD {
					IndexDomain: (MX_NCL);
					Text: "EFD Coal Production Capacity by Coal Supply Curve";
				}
				Parameter USO2GRP_CL_CRV_PROD {
					IndexDomain: (MX_NCL,MNUMYR);
					Text: "Coal Productive Capacity by Coal Supply (Scrv1) and retart file year";
					Comment: "Added 12-21-17 DAF to replace EFD_PROD.  We will need to fill it for historical years that EMM runs.";
				}
				Parameter USO2GRP_EFD_TIER1 {
					IndexDomain: (MX_NCL,NDREGN,NUTSEC);
					Text: "EFD Coal Tier 1 Transportation Limits";
				}
				Parameter USO2GRP_EFD_TIER1_LIM {
					IndexDomain: (MX_NCL,NDREGN,NUTSEC,MNUMYR);
					Text: "EFD Coal Tier 1 Transportation Limits";
				}
				Parameter USO2GRP_EFD_CONT {
					IndexDomain: (MX_NCI,NDREGN,M2,MNUMYR);
					Text: "EFD Coal Contracts (1 = scr, 2 = unscr)";
				}
				Parameter USO2GRP_EFD_DVSB {
					IndexDomain: (NDREGN,NUTSEC);
					Text: "EFD Coal Diversity Limits for Subbitumin";
				}
				Parameter USO2GRP_EFD_SB_DVLIM {
					IndexDomain: (NDREGN,NUTSEC,MNUMYR);
					Text: "EFD Coal Diversity Limits for Subbitumin";
				}
				Parameter USO2GRP_EFD_DVLG {
					IndexDomain: (NDREGN,NUTSEC);
					Text: "EFD Coal Diversity Limits for Lignite";
				}
				Parameter USO2GRP_EFD_LG_DVLIM {
					IndexDomain: (NDREGN,NUTSEC,MNUMYR);
					Text: "EFD Coal Diversity Limits for Lignite";
				}
				Parameter USO2GRP_EFD_SC_DR_PT {
					IndexDomain: (MX_NCI,NDREGN,NUTSEC);
					Text: "EFD Coal Tier 1 Transportation Limits";
				}
				Parameter USO2GRP_EFD_RANK {
					IndexDomain: (MX_NCI);
					Text: "EFD Coal Rank Indicator";
				}
				Parameter USO2GRP_CTLBTU {
					IndexDomain: (MX_NCL,NDREGN,MNUMYR);
					Text: "Coal-to-liquids quantity for calc of emi";
				}
				Parameter USO2GRP_XCL_PIMP {
					IndexDomain: (MX_ISC,MX_IST,MNUMYR);
					Text: "Coal import supply curve/step prices (th";
				}
				Parameter USO2GRP_XCL_QIMP {
					IndexDomain: (MX_ISC,MX_IST,MNUMYR);
					Text: "Coal import supply curve/step quantities";
				}
				Parameter USO2GRP_XCL_TRATI1 {
					IndexDomain: (M4,MX_ISC,NDREGN);
					Text: "Coal Imports Inland Transportation Rate";
				}
				Parameter USO2GRP_XCL_TRATI2 {
					IndexDomain: (M4,MX_ISC,NDREGN);
					Text: "International Freight Rate for US Coal imports";
					Comment: "M4 is US Importing regions(USi) UI =1 , UE=2, UG=3, and UNN=4";
				}
				Parameter USO2GRP_CTL_TRATE {
					IndexDomain: (MX_NCL,NDREGN);
					Text: "Expected Coal Transportation Rates for C";
				}
				Parameter USO2GRP_CTL_OTHER {
					IndexDomain: (MX_NCL,MNUMYR);
					Text: "Expected Coal Demand for Non - Coal to L";
				}
				Parameter USO2GRP_CTL_CLDR {
					IndexDomain: (NDREGN);
					Text: "CTL Coal Demand Regions (0 => No CTL Dem";
				}
				Parameter USO2GRP_XCL_TR_IN {
					IndexDomain: (M4,MX_ISC,NDREGN,globalyr);
				}
				Parameter USO2GRP_XCL_TESCI {
					IndexDomain: (M4,MNUMYR,NDREGN);
					Text: "Coal Transportation Escalation Factors for Inland Imports";
					Comment: "Just going to set this equal to our RCAF escalation factor.";
				}
			}
			Section QONROAD {
				Parameter QONROAD_QDSTRHWY {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Quantity distillate, transportation sect";
				}
				Parameter QONROAD_CFDSTRHWY {
					IndexDomain: (MNUMYR);
					Text: "Conversion factor, distillate, transport";
				}
			}
			Section APONROAD {
				Parameter APONROAD_PDSTRHWY {
					IndexDomain: (MNUMCR,MNUMYR);
					Text: "Adjusted price, distillate, transportati";
				}
			}
			Section CSAPR {
				Parameter CSAPR_TSO2_SHR_BY_CLRG {
					IndexDomain: (NDRGGN,MX_SO2_TRAN);
					Text: "Coal SO2 Emission Share by Coal and CSAPR Region";
				}
				Parameter CSAPR_SO2OTHCL {
					IndexDomain: (MNUMYR,NDRGGN);
				}
				Parameter CSAPR_TEMRFSA {
					IndexDomain: (MNUMYR,MX_SO2_TRAN);
				}
				Parameter CSAPR_TSO2_LM1_BY_CLRG {
					IndexDomain: NDRGGN;
				}
				Parameter CSAPR_TSO2_LIM_BY_CLRG {
					IndexDomain: NDRGGN;
				}
				Parameter CSAPR_TSO2_VR1_BY_CLRG {
					IndexDomain: NDRGGN;
				}
				Parameter CSAPR_TSO2_VR3_BY_CLRG {
					IndexDomain: NDRGGN;
				}
				Parameter CSAPR_TSO2_YR_BY_CLRG {
					IndexDomain: M1;
				}
				Parameter CSAPR_TSO2_VR_BY_CLRG {
					IndexDomain: M1;
				}
				Parameter CSAPR_TRANRULE1 {
					IndexDomain: M1;
				}
				Parameter CSAPR_TRANRULE2 {
					IndexDomain: M1;
				}
			}
			Section CYCLEINFO {
				Parameter CYCLEINFO_CURIRUN {
					IndexDomain: M1;
					Text: "Reporting Loop Switch (1=ON)";
					InitialData: 1;
				}
			}
			Section NCHAR {
				StringParameter NCHAR_SCEN {
					IndexDomain: M1;
				}
				StringParameter NCHAR_DATE {
					IndexDomain: M1;
				}
				StringParameter NCHAR_SCEN_DATE {
					IndexDomain: M1;
				}
			}
		}
		DeclarationSection GDS_Sets {
			Set MNUMY3_ {
				SubsetOf: Integers;
				Text: "MNUMYR + 1987-1989";
				Index: MNUMY3;
				Property: ElementsAreLabels;
				InitialData: {
					{1..0064}
				}
			}
			Set MNUMYR_ {
				SubsetOf: Integers;
				Text: "Years=1990-2050";
				Index: MNUMYR;
				Property: ElementsAreNumerical;
				Definition: {
					{1..0061}
				}
			}
			Set MNXYRS_ {
				SubsetOf: Integers;
				Text: "No. of Expectation Years";
				Index: MNXYRS;
				InitialData: {
					{1..0091}
				}
			}
			Set MNUMCR_ {
				SubsetOf: Integers;
				Text: "Census Regions";
				Index: MNUMCR;
				Definition: {
					{1..0011}
				}
			}
			Set MNUMOR_ {
				SubsetOf: Integers;
				Text: "Oil & Gas Regions";
				Index: MNUMOR;
				InitialData: {
					{1..0013}
				}
			}
			Set MNUMGR_ {
				SubsetOf: Integers;
				Text: "NGTDM Regions";
				Index: MNUMGR;
				InitialData: {
					{1..0015}
				}
			}
			Set MNUMNR_ {
				SubsetOf: Integers;
				Text: "Electricity Supply (NERC)";
				Index: MNUMNR;
				InitialData: {
					{1..0025}
				}
			}
			Set MNUMLR_ {
				SubsetOf: Integers;
				Text: "Coal Supply Regions";
				Index: MNUMLR;
				InitialData: {
					{1..0017}
				}
			}
			Set MNUMPR_ {
				SubsetOf: Integers;
				Text: "PADD Regions";
				Index: MNUMPR;
				InitialData: {
					{1..0010}
				}
			}
			Set REFREG_ {
				SubsetOf: Integers;
				Text: "No Refinery Regions (LFMM";
				Index: REFREG;
				InitialData: {
					{1..0009}
				}
			}
			Set NMODEL_ {
				SubsetOf: Integers;
				Text: "Number of Modules";
				Index: NMODEL;
				InitialData: {
					{1..0013}
				}
			}
			Set NDRGGN_ {
				SubsetOf: Integers;
				Text: "Coal demand regions for C";
				Index: NDRGGN;
				InitialData: {
					{1..0016}
				}
			}
			Set NDREGN_ {
				SubsetOf: Integers;
				Text: "Coal Demand Regions";
				Index: NDREGN;
				InitialData: {
					{1..0016}
				}
			}
			Set NDRGN1_ {
				SubsetOf: Integers;
				Text: "Coal Demand Regions + 1";
				Index: NDRGN1;
				InitialData: {
					{1..0017}
				}
			}
			Set NSREGN_ {
				SubsetOf: Integers;
				Text: "Number of Coal Supply Reg";
				Index: NSREGN;
				InitialData: {
					{1..0014}
				}
			}
			Set ECPDSP_ {
				SubsetOf: Integers;
				Text: "Number of ECP Dispatchabl";
				Index: ECPDSP;
				InitialData: {
					{1..0055}
				}
			}
			Set ECPCAP_ {
				SubsetOf: Integers;
				Text: "Number of ECP Plant Types";
				Index: ECPCAP;
				Definition: {
					{1..0080}
				}
			}
			Set ECPXPH_ {
				SubsetOf: Integers;
				Text: "Maximum Number of Years i";
				Index: ECPXPH;
				InitialData: {
					{1..0011}
				}
			}
			Set ECPFPH_ {
				SubsetOf: Integers;
				Text: "Maximum Number of Years i";
				Index: ECPFPH;
				InitialData: {
					{1..0031}
				}
			}
			Set ECPRCF_ {
				SubsetOf: Integers;
				Text: "Number of Cofire Retrofit";
				Index: ECPRCF;
				InitialData: {
					{1..0005}
				}
			}
			Set MECPYR_ {
				SubsetOf: Integers;
				Text: "MNUMYR + 10 yrs (horizon)";
				Index: MECPYR;
				InitialData: {
					{1..0071}
				}
			}
			Set HG_CLS_ {
				SubsetOf: Integers;
				Text: "Number of Mercury Complia";
				Index: HG_CLS;
				InitialData: {
					{1..0003}
				}
			}
			Set CLSECT_ {
				SubsetOf: Integers;
				Text: "Coal Sectors (NUMSEC in c";
				Index: CLSECT;
				InitialData: {
					{1..0007}
				}
			}
			Set NUTSEC_ {
				SubsetOf: Integers;
				Text: "No. of utility demand sec";
				Index: NUTSEC;
				InitialData: {
					{1..0038}
				}
			}
			Set NSTEPS_ {
				SubsetOf: Integers;
				Text: "Number of steps in activa";
				Index: NSTEPS;
				Definition: {
					{1..0008}
				}
			}
			Set CLTYPE_ {
				SubsetOf: Integers;
				Text: "CPS Coal Type (MX_CPS_CTY";
				Index: CLTYPE;
				InitialData: {
					{1..0015}
				}
			}
			Set MXACSS_ {
				SubsetOf: Integers;
				Text: "Maximum Number of Activat";
				Index: MXACSS;
				InitialData: {
					{1..0005}
				}
			}
			Set MX_NCI_ {
				SubsetOf: Integers;
				Text: "Number of Coal Supply Cur";
				Index: MX_NCI;
				InitialData: {
					{1..0053}
				}
			}
			Set MX_NCL_ {
				SubsetOf: Integers;
				Text: "Number of Domestic Coal S";
				Index: MX_NCL;
				InitialData: {
					{1..0041}
				}
			}
			Set MX_RNK_ {
				SubsetOf: Integers;
				Text: "Number of coal ranks";
				Index: MX_RNK;
				Definition: {
					{1..0003}
				}
			}
			Set MX_UNT_ {
				SubsetOf: Integers;
				Text: "Maximum number of Coal Ge";
				Index: MX_UNT;
				Definition: {
					{1..1800}
				}
			}
			Set MX_PRF_ {
				SubsetOf: Integers;
				Text: "Maximum number of Coal Co";
				Index: MX_PRF;
				InitialData: {
					{1..0500}
				}
			}
			Set MX_ISC_ {
				SubsetOf: Integers;
				Text: "Number of Coal Import Sup";
				Index: MX_ISC;
				InitialData: {
					{1..0012}
				}
			}
			Set MX_IST_ {
				SubsetOf: Integers;
				Text: "Maximum Coal Import Suppl";
				Index: MX_IST;
				InitialData: {
					{1..0010}
				}
			}
			Set MX_IMP_ {
				SubsetOf: Integers;
				Text: "Number of Thermal Coal Im";
				Index: MX_IMP;
				InitialData: {
					{1..0035}
				}
			}
			Set MX_SO2_ {
				SubsetOf: Integers;
				Text: "Number of SO2 Compliance";
				Index: MX_SO2;
				InitialData: {
					{1..0002}
				}
			}
			Set MX_SO2_TRAN_ {
				SubsetOf: Integers;
				Index: MX_SO2_TRAN, MXSO2T;
				InitialData: {
					{1..003}
				}
			}
			Set M1_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M1;
				InitialData: {
					{1..0001}
				}
			}
			Set M2_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M2;
				InitialData: {
					{1..0002}
				}
			}
			Set M3_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M3;
				Definition: {
					{1..0003}
				}
			}
			Set M4_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M4;
				Definition: {
					{1..0004}
				}
			}
			Set M5_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M5;
				InitialData: {
					{1..0005}
				}
			}
			Set M6_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M6;
				InitialData: {
					{1..0006}
				}
			}
			Set M7_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M7;
				InitialData: {
					{1..0007}
				}
			}
			Set M8_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M8;
				InitialData: {
					{1..0008}
				}
			}
			Set M9_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M9;
				InitialData: {
					{1..0009}
				}
			}
			Set M11_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M11;
				Definition: {
					{1..11}
				}
			}
			Set M12_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M12;
				InitialData: {
					{1..0012}
				}
			}
			Set M14_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M14;
				Definition: {
					{1..0014}
				}
			}
			Set M15_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M15;
				InitialData: {
					{1..0015}
				}
			}
			Set M17_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M17;
				InitialData: {
					{1..0017}
				}
			}
			Set M31_ {
				SubsetOf: Integers;
				Text: "Unnamed";
				Index: M31;
				InitialData: {
					{1..0031}
				}
			}
		}
	}
	Section Readin_Strings {
		DeclarationSection Readin_Parameter_Strings {
			StringParameter DatabaseName;
			StringParameter root;
			StringParameter inputLocation;
			StringParameter inputLocationCoal;
			StringParameter prefix5;
			Parameter lenroot {
				Property: Integer;
			}
			Parameter loccoal {
				Property: Integer;
			}
			Parameter locp2;
			StringParameter prefix6;
			StringParameter prefix7;
			StringParameter prefix8;
			StringParameter prefix9;
			StringParameter Fullfilename;
			StringParameter sDataYearFile;
			File GlobalDataToNEMS {
				Name: sDataYearFile;
				Device: Disk;
				Mode: replace;
			}
			File NEMSMessageInFile {
				Name: sMessageInFile;
				Device: Disk;
				Mode: replace;
			}
			File NEMSMessageOutFile {
				Name: sMessageOutFile;
				Device: Disk;
				Mode: replace;
			}
			StringParameter sMessageInFile {
				Definition: "monitor.in.txt";
			}
			StringParameter sMessageOutFile {
				Definition: "monitor.out.txt";
			}
			StringParameter sAction;
			StringParameter sStatusMessage;
			File ClUserSCrv {
				Device: Disk;
				Mode: replace;
			}
		}
	}
	Section Integration_Out_Variables {
		Comment: {
			"These are variables (or interim steps to create those variables) that are:
			(1) created by the Coal model
			(2) that are needed by other NEMS models."
		}
		Procedure CoaloutProcedure {
			Body: {
				COALOUT_CLSYNGQN_A(M17,globalyr)	:=0;
				COALOUT_CQSBB_A(M3,globalyr)		:=Sum((EW,Mx_NCL,SReg,Sulf,Mtyp,Rank,cyr)|M3 = EW and Map_SReg_EW(SReg,EW)=1
										and Btu(Mx_NCL,SReg,Sulf,Mtyp,Rank)>0
										and globalyr = (cyr - 1989) and Rank <> '5G',
				 						ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr));
				COALOUT_CQSBB_A('3',globalyr) 		:=COALOUT_CQSBB_A('1',globalyr)	+ COALOUT_CQSBB_A('2',globalyr);
				COALOUT_CQSBB_B(globalyr)		:=Sum(M3|m3<3,COALOUT_CQSBB_A(M3,globalyr));
				COALOUT_CQSBT_Tons_C(M3,globalyr)	:=Sum((EW,Mx_NCL,SReg,Sulf,Mtyp,Rank,cyr)|M3 = EW
									and Map_SReg_EW(SReg,EW)
									and Btu(Mx_NCL,SReg,Sulf,Mtyp,Rank)
									and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
									ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,cyr));
				COALOUT_CQSBT_A(M3,globalyr)		:=COALOUT_CQSBB_A(M3,globalyr)/$COALOUT_CQSBT_Tons_C(M3,globalyr);
				COALOUT_CQSBT_Tons_D(globalyr)		:=Sum(M3|m3<3,COALOUT_CQSBT_Tons_C(M3,globalyr));
				COALOUT_CQSBT_B(globalyr)		:=COALOUT_CQSBB_B(globalyr)/$COALOUT_CQSBT_Tons_D(globalyr);
				ProductionDollarsbyEWRegion(M3,globalyr):=Sum((EW,SReg,Sulf,Mtyp,Rank,yr)|M3 = EW and Map_SReg_EW(SReg,EW)=1
									  and Btu2(SReg,Sulf,Mtyp,Rank)>0
									  and globalyr = (yr - 1989) and Rank <> '5G',
									  ProductionVolume(SReg,Sulf,Mtyp,Rank,yr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,yr));
				
				COALOUT_CPSB_A(M3,globalyr)		:=ProductionDollarsbyEWRegion(M3,globalyr)/$COALOUT_CQSBB_A(M3,globalyr);
				COALOUT_CPSB_B(globalyr)		:=If COALOUT_CQSBB_B(globalyr) then
									  (ProductionDollarsbyEWRegion('1',globalyr) + ProductionDollarsbyEWRegion('2',globalyr))/
									  COALOUT_CQSBB_B(globalyr)
									  endif;
				MMPfromLP(SReg,Sulf,Mtyp,Rank,yr)	:=Max(Sum(Scrv1step|MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,yr)>0,
									 (MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,yr))),0);
				COALOUT_CPSBT_A(M3,globalyr)		:=if m3 < 3 then
									  COALOUT_CQSBT_A(M3,globalyr)
									  else
									  COALOUT_CQSBT_B(globalyr)
									  endif;
				
				!COALOUT_CQDBFT_A(MNUMCR,CLSECT,globalyr):=
				!COALOUT_CPDBFT_A(MNUMCR,CLSECT,globalyr):=
				!COALOUT_CQDBFB_A(MNUMCR,CLSECT,globalyr):=
				COALOUT_PCLRFPD_A(MNUMPR,globalyr)	:=Sum((PADD,yr)|Map_PADD_Mnumpr(PADD,MNUMPR)=1 and yr=globalyr+1989 and LiquidsTranspTrillsPR(PADD,yr)>0,
									LiquidsTotalCostPR(PADD,yr)/LiquidsTranspTrillsPR(PADD,yr));
				COALOUT_LIQUCARB_B(MNUMCR,globalyr)	:=if mnumcr < 11 then
									Sum((DReg,SReg,Sulf,Mtyp,Rank,LiquSec,yr)|Map_DReg_MNUMCR(DReg,MNUMCR) and
									yr=globalyr+1989 and LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr)>0,
									(Carbon2(SReg,Sulf,Mtyp,Rank) * (12.0/44.0) /2.204623*
									LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr)))
									else
									Sum((DReg,SReg,Sulf,Mtyp,Rank,LiquSec,yr)|
									yr=globalyr+1989 and LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr)>0,
									(Carbon2(SReg,Sulf,Mtyp,Rank) * (12.0/44.0) /2.204623*
									LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr)))
									endif;
				COALOUT_LIQUCARB_A(MNUMCR,globalyr)	:=Sum((cyr)|cyr=globalyr+1989 and LiquidsTranspTrillsCR(MNUMCR,cyr),
						              		COALOUT_LIQUCARB_B(MNUMCR,globalyr)/LiquidsTranspTrillsCR(MNUMCR,cyr));
				COALOUT_LCVBTU_A(MNUMPR,globalyr)	:=Sum((PADD,yr)|
									yr=globalyr+1989 and Map_PADD_Mnumpr(PADD,MNUMPR) and LiquidsTranspTonsPR2(mnumpr,yr),
									LiquidsTranspTrillsPR(PADD,yr)/LiquidsTranspTonsPR2(mnumpr,yr));
				COALOUT_LTRNTON_A(MNUMPR,globalyr)	:=Sum((yr)|yr=globalyr+1989 and LiquidsTranspTonsPR2(mnumpr,yr)>0,
									LiquidsTranspCostPR2(mnumpr,yr)/LiquidsTranspTonsPR2(mnumpr,yr));
				Hours(SReg,yr)				:=sum[(Sulf,Mtyp,Rank)|Btu2(Sreg,Sulf,Mtyp,Rank) and Btu2(Sreg,Sulf,Mtyp,Rank),
				                			(1.0/$FY_TPH1(Sreg,Sulf,Mtyp,Rank,yr))
				                			*TotalProduction(SReg,Sulf,Mtyp,Rank,yr)/Btu2(Sreg,Sulf,Mtyp,Rank)*1000000];  !This should be total labor hours by Supply region
				                					!*Btu2(Sreg,Sulf,Mtyp,Rank)*TotalProduction(SReg,Sulf,Mtyp,Rank,yr)];
				MinersbySupplyRegionYr(SReg,cyr)	:=if cyr > val(CPSBaseYr) and MinersbySupplyRegionYr(SReg,cyr-1)and hours(sreg,cyr-1) and hours(sreg,cyr) then
				                				MinersbySupplyRegionYr(SReg,cyr-1)*hours(sreg,cyr)/hours(sreg,cyr-1)
				                			elseif cyr = val(cpsbaseyr) then
				                				miners(Sreg)
				                			elseif hours(sreg,cyr) then
				                				hours(sreg,cyr)/50/44  !assume 50 weeks per year at 45 hours per week
									endif;
				MinersbySupplyRegion(SReg,globalyr)	:=Sum(cyr|globalyr=cyr-1989,MinersbySupplyRegionYr(SReg,cyr));
				COALOUT_TOTMINERS_A(globalyr)		:=Sum(SReg,MinersbySupplyRegion(SReg,globalyr));
				COALOUT_L_SO2P_A(MNUMPR,globalyr)	:=Sum((PADD,yr,mx_so2)|yr=globalyr+1989 and Map_PADD_Mnumpr(PADD,MNUMPR)=1,
									if LiquidsTranspTrillsPR(PADD,yr)>0 and
				       					mnumpr < 4 and mx_so2 = 1 THEN                      !FOR PMM REGIONS
				                			EMISSION_EMELPSO2(globalyr,MX_SO2)*L_SO2BTU(MNUMPR,yr)              !$/TON SO2 X tonSO2/MMBtu =$/mmBtu
									elseif LiquidsTranspTrillsPR(PADD,yr)>0 and
				       					mnumpr < 6  and mx_so2 = 2 THEN
				                			EMISSION_EMELPSO2(globalyr,MX_SO2)*L_SO2BTU(MNUMPR,yr)              !$/TON SO2 X TONSO2/MMBtu=$/mmBtu
									elseif mnumpr < 4 and mx_so2 = 1 THEN                                                           !L_SO2P AND L_HGP WILL BE GT 0 WHEN CORRESP. AL
				               				EMISSION_EMELPSO2(globalyr,MX_SO2)*.00003     !replaced
									elseif mnumpr < 6 and mx_so2 = 2 THEN                !  LFMM:   ELSE
				               				EMISSION_EMELPSO2(globalyr,MX_SO2)*.00003
									endif);
				L_HGBTU(PADD,yr)			:=If LiquidsBtus(PADD,yr)>0 then
									MercuryEmissionsfromLiquids(PADD,yr)/
									LiquidsBtus(PADD,yr)
									endif;
				COALOUT_L_HGP_A(MNUMPR,globalyr)	:=Sum((PADD,yr,mx_so2)|yr=globalyr+1989 and Map_PADD_Mnumpr(PADD,MNUMPR)=1,
									if LiquidsTranspTrillsPR(PADD,yr)>0 and
				       					mnumpr < 4  THEN                      !FOR PMM REGIONS
				                			(Emel_phg(yr)/2.0)*L_HGBTU(PADD,yr)/1000.             !$/TON SO2 X tonSO2/MMBtu =$/mmBtu
									elseif LiquidsTranspTrillsPR(PADD,yr)>0 and
				       					mnumpr < 5  THEN
				                			(EMEL_PHG(yr)/2.0)*0.35/1000.
									endif);
				MercuryEmissionsfromLiquids(PADD,yr)	:=Sum((SReg,Sulf,Mtyp,Rank,DReg,LiquSec)|Map_PADD_DReg(PADD,DReg)=1,
									LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr)*.05*
									0.5*Mercury2(SReg,Sulf,Mtyp,Rank));
				LiquidsBtus(PADD,yr)			:=Sum((SReg,Sulf,Mtyp,Rank,DReg,LiquSec)|Map_PADD_DReg(PADD,DReg)=1,
									LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr));
				
				COALOUT_TTONMILE_A(globalyr)		:=Sum(yr|yr=globalyr+1989,Ttonmile(yr));
				Invtemp_a(MNUMYR)			:=Sum((yr,m1)|NCNTRL_CURCALYR(M1)=yr and yr =mnumyr + 1989,
									invtemp(yr));
				COALOUT_Invtemp(MNUMYR)			:=0;
			}
		}
		DeclarationSection Integration_Out_Coalemm {
			Parameter COALEMM_SCLCLNR_A {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "Avg SO2 Content by ECP Coal Plant";
				Definition: {
					If ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)>0then
					UncontrolledSulfurDioxidebyDrYrandPlant(NDRGGN,globalyr,NUTSEC)/
					ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)
					endif
				}
			}
			Parameter ElectricityTrillsbyDrYrandPlant {
				IndexDomain: (NDRGGN,globalYR,NUTSEC);
				Definition: {
					Sum((CYR,SReg,Sulf,Mtyp,Rank,DReg,pt2,nsteps)|
					Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(ndrggn,dreg)
					and map_globalyr_cyr(globalyr,cyr) and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					!(ElectricityTransport1(Scrv,pt2,DReg,yr)+
					ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))
					+Sum((cyr,nsteps,nUS,USi,DReg,pt2)|Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(ndrggn,dreg) and map_globalyr_cyr(globalyr,cyr),
					ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr))
				}
				Comment: "Modify ElectricityTrills calc to include imported coal DAF 3/22/19";
			}
			Parameter UncontrolledSulfurDioxidebyDrYrandPlant {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Definition: {
					Sum((cyr)|map_globalyr_cyr(globalyr,cyr),
					UncontrolledSulfurDioxidebyDrYrandPlant_D(NDRGGN,cyr,NUTSEC))
				}
			}
			Parameter UncontrolledSulfurDioxidebyDrYrandPlant_B {
				IndexDomain: (DReg,cyr,pt2);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,nsteps) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					(Sulfur2(SReg,Sulf,Mtyp,Rank)*
					ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr)))
				}
			}
			Parameter UncontrolledSulfurDioxidebyDrYrandPlant_C {
				IndexDomain: (DReg,cyr,NUTSEC);
				Definition: {
					Sum((pt2)|
					Map_nutsec_pt3(NUTSEC,pt2),
					UncontrolledSulfurDioxidebyDrYrandPlant_B(DReg,cyr,pt2))
				}
			}
			Parameter UncontrolledSulfurDioxidebyDrYrandPlant_D {
				IndexDomain: (NDRGGN,cyr,NUTSEC);
				Definition: {
					Sum((DReg)|
					Map_Ndrggn_DReg(ndrggn,dreg),
					UncontrolledSulfurDioxidebyDrYrandPlant_C(DReg,cyr,NUTSEC))
				}
			}
			Parameter UncontrolledCarbonDioxidebyDrYrandPlant {
				IndexDomain: (ndrggn,globalyr,nutsec);
				Definition: {
					
					Sum((cyr)|
					MAP_globalyr_cyr(globalyr,cyr),
					UncontrolledCarbonDioxidebyDrYrandPlant_D(NDRGGN,cyr,NUTSEC))
				}
			}
			Parameter UncontrolledCarbonDioxidebyDrYrandPlant_B {
				IndexDomain: (DReg,cyr,pt2);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,nsteps) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(Carbon2(SReg,Sulf,Mtyp,Rank)*
					!(ElectricityTransport1(Scrv,pt2,DReg,yr)+
					ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr)))
					+ sum((nsteps,nUS,USi), 206.4 *ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr))
				}
				Comment: "Modify Carbon calc to include imported coal.  Assumed carbon content of US imports at 206.4 lbs per MMbtu DAF 3/22/19";
			}
			Parameter UncontrolledCarbonDioxidebyDrYrandPlant_C {
				IndexDomain: (DReg,cyr,nutsec);
				Definition: {
					
					Sum((pt2)|
					Map_nutsec_pt3(NUTSEC,pt2),
					UncontrolledCarbonDioxidebyDrYrandPlant_B(DReg,cyr,pt2))
				}
			}
			Parameter UncontrolledCarbonDioxidebyDrYrandPlant_D {
				IndexDomain: (ndrggn,cyr,nutsec);
				Definition: {
					
					Sum((DReg)|
					Map_Ndrggn_DReg(ndrggn,dreg),
					UncontrolledCarbonDioxidebyDrYrandPlant_C(DReg,cyr,NUTSEC))
				}
			}
			Parameter COALEMM_CCLCLNR_A {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "Avg Car Content by ECP Coal Plant";
				Definition: {
					!If ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)>0then
					UncontrolledCarbonDioxidebyDrYrandPlant(NDRGGN,globalyr,NUTSEC)/$
					ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)
					!endif
				}
			}
			Parameter COALEMM_BCLCLNR_A {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "Avg Btu Content by ECP Coal Plant";
				Definition: {
					if TonsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)>0then
					ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)/
					TonsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)
					endif
				}
			}
			Parameter TonsbyDrYrandPlant {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Definition: {
					Sum((cyr)|
					map_globalyr_cyr(globalyr,cyr),
					TonsbyDrYrandPlant_F(NDRGGN,cyr,NUTSEC))
				}
			}
			Parameter TonsbyDrYrandPlant_B {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,cyr,pt2) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					Sum((nsteps)|
					Btu2(SReg,Sulf,Mtyp,Rank),
					ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))
				}
			}
			Parameter TonsbyDrYrandPlant_C {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,cyr,pt2) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: TonsbyDrYrandPlant_B(SReg,Sulf,Mtyp,Rank,DReg,cyr,pt2)/$Btu2(SReg,Sulf,Mtyp,Rank);
			}
			Parameter TonsbyDrYrandPlant_Imports {
				IndexDomain: (nUS,DReg,cyr,pt2);
				Definition: sum((nsteps,USi), ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr)) /$InternationalHeatContent(nUS,'2');
				Comment: "Added parameter to modify TonsDrPlant calc to include imports DAF 3/22/19";
			}
			Parameter TonsbyDrYrandPlant_D {
				IndexDomain: (DReg,cyr,pt2);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank)|Btu2(SReg,Sulf,Mtyp,Rank),
					TonsbyDrYrandPlant_C(SReg,Sulf,Mtyp,Rank,DReg,cyr,pt2))
					+sum ((nUS), TonsbyDrYrandPlant_Imports(nUS,DReg,cyr,pt2))
				}
				Comment: "Modify TonsDrYrPlant calc to include imports DAF 3/22/19";
			}
			Parameter TonsbyDrYrandPlant_E {
				IndexDomain: (NDRGGN,cyr,pt2);
				Definition: {
					Sum((DReg)|
					Map_Ndrggn_DReg(ndrggn,dreg),
					TonsbyDrYrandPlant_D(DReg,cyr,pt2))
				}
			}
			Parameter TonsbyDrYrandPlant_F {
				IndexDomain: (NDRGGN,cyr,NUTSEC);
				Definition: {
					Sum((pt2)|
					Map_nutsec_pt3(NUTSEC,pt2),
					TonsbyDrYrandPlant_E(NDRGGN,cyr,pt2))
				}
			}
			Parameter ControlledMercurybyDrYrandPlant {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "lbs of controlled mercury emitted";
				Definition: {
					!Sum((SReg,Sulf,Mtyp,Rank,nsteps,pt2,DReg,cyr)|
					!Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(NDRgGN,DReg)
					!and map_globalyr_cyr(globalyr,cyr) and Btu2(SReg,SUlf,Mtyp,Rank),
					!(Mercury2(SReg,Sulf,Mtyp,Rank)*
					!emm_mef(nsteps,Rank,pt2)*
					!ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr)))!*10^6)
					ControlledMercurybyDrYrandPlant_B(NUTSEC,NDRGGN,globalyr)
				}
			}
			Parameter ControlledMercurybyDrYrandPlant_A {
				IndexDomain: (pt2,DReg,cyr);
				Text: "lbs of controlled mercury emitted";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,nsteps)|
					!Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(NDRgGN,DReg)
					!and map_globalyr_cyr(globalyr,cyr) and
					Btu2(SReg,SUlf,Mtyp,Rank),
					(Mercury2(SReg,Sulf,Mtyp,Rank)*
					!(emm_mef('1',Rank,Dreg,pt2,yr)*
					!ElectricityTransport1(SReg,Sulf,Mtyp,Rank,pt2,DReg,yr)+
					emm_mef(nsteps,Rank,pt2)*
					ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr)))!*10^6)
				}
			}
			Parameter ControlledMercurybyDrYrandPlant_B {
				IndexDomain: (nutsec,ndrggn,globalyr);
				Text: "lbs of controlled mercury emitted";
				Definition: {
					Sum((pt2,Dreg,cyr)|
					Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(NDRgGN,DReg)
					and map_globalyr_cyr(globalyr,cyr),
					!Btu2(SReg,SUlf,Mtyp,Rank),
					ControlledMercurybyDrYrandPlant_A(pt2,DReg,cyr))!*10^6)
				}
			}
			Parameter COALEMM_GCLCLNR_A {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "HG Removal Rate by ECP Coal Plant";
				Definition: {
					If ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)>0then
					ControlledMercurybyDrYrandPlant(NDRGGN,globalyr,NUTSEC)*.001/
					ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)
					endif
				}
			}
			Parameter EmittedSulfurDioxidebyDrYrandPlant {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Definition: {
					Sum((CYR,SReg,Sulf,Mtyp,Rank,nsteps,pt2,DReg)|
					Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(NDRGGN,DReg)
					and map_globalyr_cyr(globalyr,cyr),
					(Sulfur2(SReg,Sulf,Mtyp,Rank)*(1-rclclnr(pt2))*Ashsulf(Rank)*
					!(ElectricityTransport1(SReg,Sulf,Mtyp,Rank,pt2,DReg,yr)+
					ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr)))
				}
			}
			Parameter COALEMM_PSLCLNR_A {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "SO2 Comp Prc by ECP Coal Plant";
				Definition: {
					if ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)>0then
					SulfurCostbyDrYRandPlant(NDRGGN,globalyr,NUTSEC)/
					ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)
					endif
				}
			}
			Parameter SulfurCostbyDrYRandPlant {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "SO2 Comp Prc by ECP Coal Plant";
				Definition: {
					Sum((DReg,MX_SO2)|
					DReg = Map_ndregn(NDRGGN),
					so2_shr_by_clreg(DReg,MX_SO2) * EMISSION_EMELPSO2(globalyr,MX_SO2)
					 * 0.001 *
					 EmittedSulfurDioxidebyDrYrandPlant(NDRGGN,globalyr,NUTSEC))
				}
			}
			Parameter Ashsulf {
				IndexDomain: (Rank);
				Definition: {
					if Rank = '1B' then
					.98
					elseif Rank = '2S' then
					.94
					elseif Rank = '3L' then
					.96
					elseif Rank = '5G' then
					.96
					endif
				}
			}
			Parameter COALEMM_PHGCLNR_A {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "HG Comp Prc by ECP Coal Plant";
				Definition: {
					if ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)>0then
					(Tmp_phg1(NDRGGN,globalyr,NUTSEC)+Tmp_phg2(NDRGGN,globalyr,NUTSEC)+
					Tmp_phg3(NDRGGN,globalyr,NUTSEC))/
					ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)
					endif
				}
			}
			Parameter Tmp_phg1 {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: {
					"activated carbon equipment cost; hardwire"
				}
				Definition: {
					!Sum((SReg,Sulf,Mtyp,Rank,nsteps,pt2,DReg,cyr)|
					!Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(NDRGGN,DReg) and cyr > '2015'
					!and map_globalyr_cyr(globalyr,cyr) and Btu2(SReg,SUlf,Mtyp,Rank),
					!aci_cst('2',rank,pt2)/10.0
					!*ElectricityTransportAC('2',SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr))
					Sum((cyr)|
					cyr > 2015
					and map_globalyr_cyr(globalyr,cyr),
					Tmp_phgPre1_c(NDRGGN,NUTSEC,cyr))
				}
			}
			Parameter Tmp_phgPre1_a {
				IndexDomain: (pt2,DReg,cyr);
				Text: {
					"activated carbon equipment cost; hardwire"
				}
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank)|
					cyr > 2015
					and
					Btu2(SReg,SUlf,Mtyp,Rank),
					aci_cst('2',rank,pt2)/10.0
					*ElectricityTransportAC('2',SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))
				}
			}
			Parameter Tmp_phgPre1_b {
				IndexDomain: (DReg,NUTSEC,cyr);
				Text: {
					"activated carbon equipment cost; hardwire"
				}
				Definition: {
					Sum((pt2)|
					Map_nutsec_pt3(NUTSEC,pt2) and cyr > 2015,
					Tmp_phgPre1_a(pt2,DReg,cyr))
				}
			}
			Parameter Tmp_phgPre1_c {
				IndexDomain: (NDRGGN,NUTSEC,cyr);
				Text: {
					"activated carbon equipment cost; hardwire"
				}
				Definition: {
					Sum((DReg)|
					Map_Ndrggn_DReg(NDRGGN,DReg) and cyr > 2015,
					Tmp_phgPre1_b(DReg,NUTSEC,cyr))
				}
			}
			Parameter Tmp_phgPre1_d {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: {
					"activated carbon equipment cost; hardwire"
				}
				Definition: {
					Sum((cyr)|
					cyr > 2015
					and map_globalyr_cyr(globalyr,cyr),
					Tmp_phgPre1_c(NDRGGN,NUTSEC,cyr))
				}
			}
			Parameter Tmp_phg2 {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: {
					"activated carbon cost; hardwire"
				}
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,nsteps,pt2,DReg,cyr)|
					Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(NDRGGN,DReg) and cyr > '2015'
					and map_globalyr_cyr(globalyr,cyr) and Btu2(SReg,Sulf,Mtyp,Rank),
					aci_qac('2',Rank,DReg,pt2,cyr)*.000001*p_aci(cyr)
					*ElectricityTransportAC('2',SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))
				}
			}
			Parameter Tmp_phg3 {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: {
					"mercury penalty times emissions ignored case when mact_sw = 1; hardwire"
				}
				Definition: {
					Sum((nsteps,SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr)|
					Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(NDRGGN,DReg) and cyr > '2015'
					and map_globalyr_cyr(globalyr,cyr) and Btu2(SReg,Sulf,Mtyp,Rank),
					.0005*mercury2(SReg,Sulf,Mtyp,Rank)*emel_phg(cyr)
					*(emm_mef('2',Rank,pt2)*ElectricityTransportAC('2',SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr)))
					!+(emm_Mef('1',Rank,DREg,pt2,yr)*ElectricityTransport1(SReg,Sulf,Mtyp,Rank,pt2,DReg,yr))))
				}
			}
			Parameter COALEMM_PCACLNR_A {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "CAR Comp Prc by ECP Coal Plant";
				Definition: {
					if ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)>0 then
					CarbonCostbyDrYRandPlant(NDRGGN,globalyr,NUTSEC)/
					ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)
					endif
				}
			}
			Parameter CarbonCostbyDrYRandPlant {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "SO2 Comp Prc by ECP Coal Plant";
				Definition: {
					Sum((DReg)|
					DReg = Map_ndregn(NDRGGN),
					 UncontrolledCarbonDioxidebyDrYrandPlant(NDRGGN,globalyr,NUTSEC)
					* (1.0 - COALEMM_XCLCLNR(NDRGGN,globalyr,NUTSEC)*
					EMISSION_EMETAX('1',globalyr)))
				}
			}
			Parameter UncontrolledMercurybyDrYrandPlant {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Definition: {
					Sum((cyr)|
					map_globalyr_cyr(globalyr,cyr),
					UncontrolledMercurybyDrYrandPlant_3(NDRGGN,NUTSEC,cyr))
				}
			}
			Parameter UncontrolledMercurybyDrYrandPlant_1 {
				IndexDomain: (DReg,pt2,cyr);
				Definition: {
					Sum((nsteps,SReg,Sulf,Mtyp,Rank)|
					Btu2(SReg,Sulf,Mtyp,Rank),
					(0.5*Mercury2(SReg,Sulf,Mtyp,Rank)*
					ElectricityTransportAC(NSteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr)))!*10^6)
				}
			}
			Parameter UncontrolledMercurybyDrYrandPlant_2 {
				IndexDomain: (DReg,NUTSEC,cyr);
				Definition: {
					Sum((pt2)|
					Map_nutsec_pt3(NUTSEC,pt2),
					UncontrolledMercurybyDrYrandPlant_1(DReg,pt2,cyr))
				}
			}
			Parameter UncontrolledMercurybyDrYrandPlant_3 {
				IndexDomain: (NDRGGN,NUTSEC,cyr);
				Definition: {
					Sum((DReg)|
					Map_Ndrggn_DReg(NDRGGN,DReg),
					UncontrolledMercurybyDrYrandPlant_2(DReg,NUTSEC,cyr))
				}
			}
			Parameter COALEMM_HCLCLNR_A {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "HG Content tby ECP Coal Plant";
				Definition: {
					if ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)>0 then
					UncontrolledMercurybyDrYrandPlant(NDRGGN,globalyr,NUTSEC)/
					ElectricityTrillsbyDrYrandPlant(NDRGGN,globalyr,NUTSEC)
					endif
				}
			}
			Parameter COALEMM_NUM_SC_A {
				IndexDomain: (M1);
				Text: "Number of Coal Supply Curves";
				Definition: 41;
			}
			Parameter CMM_CL_BTUs {
				IndexDomain: (MX_NCI,MX_UNT);
				Definition: {
					Sum((Mx_NCL)|Map_MX_NCL_MX_NCI(mx_nci,mx_ncl),
					CMM_CL_BTUs_C(Mx_NCL,MX_UNT))
					
					!Sum((pu_id,Mx_NCL,SReg,Sulf,Mtyp,Rank)|Map_MX_UNT_pu_id(MX_UNT,pu_id)
					!and Btu(Mx_NCL,SReg,Sulf,Mtyp,Rank)
					!and Mx_NCL = MX_NCI,
					!Plant_BaseYear_Btu(pu_id,SReg,Sulf,Mtyp,Rank))
				}
				Comment: {
					"I realize that I am just copying this variable but doing so to remind me of compound set difficulty and problems that
					will arise in interaction with electricity model"
				}
			}
			Parameter CMM_CL_BTUs_C {
				IndexDomain: (MX_NCL,MX_UNT);
				Definition: {
					Sum((pu_id)|Map_MX_UNT_pu_id(MX_UNT,pu_id),
					CMM_CL_BTUs_B(Mx_NCL,pu_id))
				}
				Comment: {
					"I realize that I am just copying this variable but doing so to remind me of compound set difficulty and problems that
					will arise in interaction with electricity model"
				}
			}
			Parameter CMM_CL_BTUs_D {
				IndexDomain: (MX_NCI,Mx_unt);
				Definition: {
					Sum((Mx_NCL)|Map_MX_NCL_MX_NCI(mx_ncl,mx_nci),
					CMM_CL_BTUs_C(Mx_NCL,MX_UNT))
				}
				Comment: {
					"I realize that I am just copying this variable but doing so to remind me of compound set difficulty and problems that
					will arise in interaction with electricity model"
				}
			}
			Parameter CMM_CL_BTUs_B {
				IndexDomain: (MX_NCL,pu_id);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank)|
					Btu(Mx_NCL,SReg,Sulf,Mtyp,Rank),
					Plant_BaseYear_Btu(pu_id,SReg,Sulf,Mtyp,Rank))
				}
				Comment: {
					"I realize that I am just copying this variable but doing so to remind me of compound set difficulty and problems that
					will arise in interaction with electricity model"
				}
			}
			Parameter COALEMM_CMM_CL_BTUS_A {
				IndexDomain: (MX_NCI,MX_UNT);
				Text: "Historical Coal Demands by Unit and Supply Curve";
				Definition: CMM_CL_BTUs(MX_NCI,MX_UNT);
				Comment: {
					"This came from input of Plant_T_Prof(pu_id,SReg,Sulf,Mtyp,Rank) from CMM.mdb
					Plan to replace this version of coal plant Btus with COALEMM_EMM_CL_BTUs(MX_UNT,MNUMYR) by adding avaiable supply curves to each plant"
				}
			}
			Parameter COALEMM_CMM_CL_BTUS_Alt {
				IndexDomain: (MX_NCI,MX_UNT);
				Text: "Coal Demands by Unit from ECP with Supply Curve Mapped To It";
				Definition: {
					COALEMM_EMM_CL_BTUs_ForCoalContacts(MX_NCI,MX_UNT,30) *0.90 ! 90% of ECP value in 2019
					!sum((pu_id), EMM_CL_BTUs_A_AltScrv(pu_id,MX_NCI,yr) |Map_MX_UNT_pu_id(MX_UNT,pu_id))
				}
				Comment: {
					"This replaces coal plant Btus with COALEMM_EMM_CL_BTUs(MX_UNT,MNUMYR) by adding avaiable supply curves to each plant
					Assume contracted BTUs is for 90% of unit operating potential Btus in 2019 or MNUMYR=30"
				}
			}
			Parameter COALEMM_CMM_CL_BTUS_AltWscrv {
				IndexDomain: (MX_NCI,MX_UNT,pu_id,SReg,Sulf,Mtyp,Rank) | Map_MX_UNT_pu_id(MX_UNT,pu_id) and Map_MXNCI_CoalType(MX_NCI,SReg,Sulf,Mtyp,Rank);
				Text: "Coal Demands by Unit from ECP with Detailed Supply Curve Indicies Mapped To It";
				Definition: COALEMM_CMM_CL_BTUS_Alt(MX_NCI,MX_UNT);
				Comment: {
					"This replaces coal plant Btus with COALEMM_EMM_CL_BTUs(MX_UNT,MNUMYR) by adding avaiable supply curves to each plant
					Assume contracted BTUs is for 90% of unit operating potential Btus in 2019 or MNUMYR=30"
				}
			}
			Parameter COALEMM_CMM_CONT_INDX_A {
				IndexDomain: (MX_NCI,MX_UNT);
				Text: "ID Contract Profile for Each Coal Unit";
				Definition: Cmm_cont_indx(MX_NCI,MX_UNT);
			}
			Parameter COALEMM_CMM_CONT_INDX_Alt {
				IndexDomain: (MX_NCI,MX_UNT);
				Text: "ID Contract Profile for Each Coal Unit";
				Definition: {
					!Cmm_cont_indx(MX_NCI,MX_UNT)
					ContProfNum_C(MX_NCI,MX_UNT)
				}
			}
			Parameter Cmm_cont_indx {
				IndexDomain: (MX_NCI,MX_UNT);
				Definition: {
					!Sum((pu_id,Scrv1,SReg,Sulf,Mtyp,Rank)|Map_MX_UNT_pu_id(MX_UNT,pu_id)
					!and
					!Btu(Scrv1,SReg,Sulf,Mtyp,Rank)
					!and Map_Scrv1_MX_NCI(scrv1,mx_nci) and Plant_C_Prof(pu_id,SReg,Sulf,Mtyp,Rank),
					!Plant_C_Prof(pu_id,SReg,Sulf,Mtyp,Rank))
					Sum((pu_id)|Map_MX_UNT_pu_id(MX_UNT,pu_id),
					Cmm_cont_indx_2(MX_NCI,pu_id))
				}
			}
			Parameter Cmm_cont_indx_1 {
				IndexDomain: (Scrv1,pu_id);
				Definition: {
					!Sum((SReg,Sulf,Mtyp,Rank)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and Plant_C_Prof(pu_id,SReg,Sulf,Mtyp,Rank),
					!Plant_C_Prof(pu_id,SReg,Sulf,Mtyp,Rank))
				}
			}
			Parameter Cmm_cont_indx_2 {
				IndexDomain: (mx_nci,pu_id);
				Definition: {
					Sum((Scrv1)|Map_Scrv1_MX_NCI(scrv1,mx_nci),
					Cmm_cont_indx_1(Scrv1,pu_id))
				}
			}
			Parameter COALEMM_CMM_TRANS_INDX_A {
				IndexDomain: (MX_NCI,MX_UNT);
				Text: "ID Transportation Profile for Each Coal";
				Definition: {
					Sum((Mx_NCL)|
					Map_MX_NCL_MX_NCI(mx_ncl,mx_nci),
					CMM_TRANS_INDX_C(Mx_NCL,MX_UNT))
				}
			}
			Parameter COALEMM_CMM_TRANS_INDX_Alt {
				IndexDomain: (MX_NCI,MX_UNT);
				Text: "ID Transportation Profile for Each Coal curve and coal unit";
				Definition: {
					if ContExpireYr_C(MX_NCI,MX_UNT) > 0 Then 1
					Endif
				}
			}
			Parameter CMM_TRANS_INDX_C {
				IndexDomain: (MX_NCL,MX_UNT);
				Text: "ID Transportation Profile for Each Coal";
				Definition: {
					Sum((pu_id)|
					Map_MX_UNT_pu_id(MX_UNT,pu_id),
					CMM_TRANS_INDX_B(Mx_NCL,pu_id))
				}
			}
			Parameter CMM_TRANS_INDX_B {
				IndexDomain: (MX_NCL,pu_id);
				Text: "ID Transportation Profile for Each Coal";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank)|
					Btu(Mx_NCL,SReg,Sulf,Mtyp,Rank),
					Plant_T_Prof(pu_id,SReg,Sulf,Mtyp,Rank))
				}
			}
			Parameter COALEMM_CMM_SDV_INDX_A {
				IndexDomain: (MX_UNT);
				Text: "ID Sub Diversity Profile for Each Coal U";
				Definition: Sum(pu_id|Map_MX_UNT_pu_id(MX_UNT,pu_id)=1,Plant_S_Prof(pu_id));
			}
			Parameter CMM_SDV_INDX {
				IndexDomain: (MX_NCI,MX_UNT);
				Text: "ID Transportation Profile for Each Coal";
				Definition: {
					Sum((Scrv1)|
					Map_Scrv1_MX_NCI(Scrv1,MX_NCI),
					CMM_SDV_INDX_B(Scrv1,MX_UNT))
				}
				Comment: "I think we\'re going to input this so it doesn\'t matter per supply curve, we were making fortran do the work here in NEMS";
			}
			Parameter CMM_SDV_INDX_B {
				IndexDomain: (Scrv1,MX_UNT);
				Text: "ID Transportation Profile for Each Coal";
				Definition: {
					Sum((pu_id,SReg,Sulf,Mtyp,Rank)|Map_MX_UNT_pu_id(MX_UNT,pu_id) and
					Btu(SCrv1,SReg,Sulf,Mtyp,Rank),
					Plant_S_Prof(pu_id))
				}
				Comment: "I think we\'re going to input this so it doesn\'t matter per supply curve, we were making fortran do the work here in NEMS";
			}
			Parameter COALEMM_CMM_LDV_INDX_A {
				IndexDomain: (MX_UNT);
				Text: "ID Lig Diversity Profile for Each Coal Unit";
				Definition: {
					Sum((pu_id)|Map_MX_UNT_pu_id(MX_UNT,pu_id),
					Plant_L_Prof(pu_id))
				}
				Comment: "April 2022 With new profiles created plants using lignite will use profile 11 while those not using lignite will see profile 1.";
			}
			Parameter COALEMM_NEW_SDV_INDX_A {
				IndexDomain: (NDRGGN);
				Text: "ID Sub Diversity Profile for New Coal Un";
				Definition: Sum(DReg|DReg=Map_ndregn(NDRGGN),NewPlantSubitProfile(DReg));
			}
			Parameter COALEMM_NEW_LDV_INDX_A {
				IndexDomain: (NDRGGN);
				Text: "ID Lig Diversity Profile for New Coal Un";
				Definition: Sum(DReg|DReg=Map_ndregn(NDRGGN),NewPlantLigProfile(DReg));
			}
			Parameter COALEMM_CMM_CONT_PRF_A {
				IndexDomain: (MX_PRF,globalyr);
				Text: "Contract Profile for Each Coal Unit";
				Definition: {
					Sum((cyr,cnum)|map_globalyr_cyr(globalyr,cyr)
					and map_mxprf_cnum(mx_prf,cnum),
					ContractProfile(cnum,cyr))
				}
				Comment: {
					"Changed this in May 2022 to use profile numbers 30 to 61 to match MNUMYRs.  Contracts active in 2021 will use profiles
					32 or greater with profile 61 having active contracts up through 2050 (MNUMYR=61)  All profile values are 1.00 for 10% of
					the COALEMM_CMM_CL_BTUS_Alt value."
				}
			}
			Parameter COALEMM_CMM_TRANS_PRF_A {
				IndexDomain: (MX_PRF,globalyr);
				Text: "Transportation Profile for Each Coal Uni";
				Definition: {
					Sum((cyr,tnum)|map_globalyr_cyr(globalyr,cyr)
					and map_mxprf_tnum(mx_prf,tnum),
					TranspProfile(tnum,cyr))
				}
			}
			Parameter COALEMM_CMM_SDV_PRF_A {
				IndexDomain: (MX_PRF,globalyr);
				Text: "Sub Diversity Profile for Each Coal Unit";
				Definition: {
					Sum((cyr,snum)|MAP_globalyr_cyr(globalyr,cyr)
					and map_mxprf_snum(mx_prf,snum),
					SubDivProfile(snum,cyr))
				}
			}
			Parameter COALEMM_CMM_LDV_PRF_A {
				IndexDomain: (MX_PRF,globalyr);
				Text: "Lig Diversity Profile for Each Coal Unit";
				Definition: {
					Sum((cyr,lnum)|map_globalyr_cyr(globalyr,cyr)
					and map_mxprf_lnum(mx_prf,lnum),
					LigDivProfile(lnum,cyr))
				}
			}
		}
		DeclarationSection Integration_Out_Coalrep {
			Parameter TonsbyEWRegion {
				IndexDomain: (M3,globalyr);
				Text: "Coal Conv Factor for Prod";
				Definition: {
					Sum((EW,SReg,Sulf,Mtyp,Rank,cyr)|M3 = EW and Map_SReg_ASReg(SReg,EW)
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
				}
				Comment: "exclude waste coal";
			}
			Parameter COALREP_COALPROD_A {
				IndexDomain: (MNUMCR,MNUMLR,globalyr);
				Text: "COAL DISTRIBUTION - exclude exports";
				Definition: {
					Sum((cyr)|Map_globalyr_cyr(globalyr,cyr),
					ResidTranspTonsCRSR2(mnumcr,mnumlr,cyr)+
					IndTranspTonsCRSR2(MNUMCR,mnumlr,cyr)+
					CokeTranspTonsCRSR2(MNUMCR,mnumlr,cyr)+
					LiquidsTranspTonsCRSR2(MNUMCR,mnumlr,cyr)+
					ElectrTranspTonsCRSR4(MNUMCR,mnumlr,cyr))
				}
			}
			Parameter COALREP_COALPROD2_A {
				IndexDomain: (MNUMCR,MNUMLR,globalyr);
				Text: "COAL DISTRIBUTION INCLUDING EXPORTS - for Table 15";
				Definition: {
					Sum((cyr)|Map_globalyr_cyr(globalyr,cyr),
					ResidTranspTonsCRSR2(mnumcr,mnumlr,cyr)+
					IndTranspTonsCRSR2(MNUMCR,mnumlr,cyr)+
					CokeTranspTonsCRSR2(MNUMCR,mnumlr,cyr)+
					LiquidsTranspTonsCRSR2(MNUMCR,mnumlr,cyr)+
					ElectrTranspTonsCRSR4(MNUMCR,mnumlr,cyr) +
					ExportsTranspTonsCRSR3(MNUMCR,mnumlr,cyr))
				}
			}
			Parameter COALREP_COALPROD_B {
				IndexDomain: (MNUMCR,MNUMLR,globalyr);
				Text: "COAL DISTRIBUTION - exclude exports - No Waste Coal";
				Range: nonnegative;
				Definition: {
					! Make sure this is never negative value for delivered production
					
					if COALREP_COALPROD_A(MNUMCR,MNUMLR,GLOBALYR) > COALREP_WC_DIST_ST_A(MNUMCR,MNUMLR,GLOBALYR) then
					
					COALREP_COALPROD_A(MNUMCR,MNUMLR,GLOBALYR)-COALREP_WC_DIST_ST_A(MNUMCR,MNUMLR,GLOBALYR)    !exclude exports and waste coal
					else
					0
					endif
				}
			}
			Parameter COALREP_COALPROD2_B {
				IndexDomain: (MNUMCR,MNUMLR,globalyr);
				Text: "COAL DISTRIBUTION INCLUDING EXPORTS - for Table 15 - No Waste Coal";
				Range: nonnegative;
				Definition: {
					! Make sure this is never negative value for delivereed production
					
					if COALREP_COALPROD2_A(MNUMCR,MNUMLR,GLOBALYR) > COALREP_WC_DIST_ST_A(MNUMCR,MNUMLR,GLOBALYR) then
					
					COALREP_COALPROD2_A(MNUMCR,MNUMLR,GLOBALYR)-COALREP_WC_DIST_ST_A(MNUMCR,MNUMLR,GLOBALYR)    !exclude exports and waste coal
					else
					0
					endif
				}
			}
			Parameter TonsbySupplyRegion {
				IndexDomain: (MNUMLR,globalyr);
				Text: "excludes waste coal";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,M14,yr)|Map_SReg_M14(SReg,M14)=1 and
					Map_m14_mnumlr(M14,MNUMLR) and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and globalyr = (yr - 1989) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,yr)/Btu2(SReg,Sulf,Mtyp,Rank))
				}
			}
			Parameter ProductionDollarsbySupplyRegion {
				IndexDomain: (MNUMLR,globalyr);
				Text: "excludes waste coal";
				Definition: {
					Sum((SReg,M14,cyr)|Map_SReg_M14(SReg,M14) and
					Map_m14_mnumlr(M14,MNUMLR)
					and map_globalyr_cyr(globalyr,cyr),
					ProductionDollarsbySupplyRegion_B(SReg,cyr))
				}
			}
			Parameter ProductionDollarsbySupplyRegion_B {
				IndexDomain: (SReg,cyr);
				Text: "excludes waste coal";
				Definition: {
					Sum((Sulf,Mtyp,Rank)|
					Btu2(SReg,Sulf,Mtyp,Rank) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)
					*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
				}
			}
			Parameter COALREP_COALPRICE_A {
				IndexDomain: (MNUMLR,globalyr);
				Text: {
					"COAL PRICE; excludes waste coal"
				}
				Definition: {
					if TonsbySupplyRegion(MNUMLR,globalyr)>0then
					ProductionDollarsbySupplyRegion(MNUMLR,globalyr)/
					TonsbySupplyRegion(MNUMLR,globalyr)
					endif
				}
			}
			Parameter COALREP_WC_DIST_ST_A {
				IndexDomain: (MNUMCR,MNUMLR,globalyr);
				Text: "WASTE COAL DISTRIBUTION in mmTons";
				Definition: {
					
					if mnumlr < 2 then  !only NA has waste coal
					Sum(cyr|map_globalyr_cyr(globalyr,cyr) ,
					ElectricityByRankBtuCR('5G',MNUMCR,cyr)+
					ResidentialByRankBtuCR('5G',MNUMCR,cyr) +
					IndustrialByRankBtuCR('5G',MNUMCR,cyr) +
					CokingByRankBtuCR('5G',MNUMCR,cyr) +
					LiquidsByRankBtuCR('5G',MNUMCR,cyr) +
					ExportsByRankBtuCR('5G',MNUMCR,cyr)) / Btu('6','01NA','3H','1S','5G')
					else
					0
					endif
				}
				Comment: "Corrected waste coal calculation to make this be in tons  12-19-17 DAF";
			}
			Parameter COALREP_WC_PROD_ST_A {
				IndexDomain: (MNUMCR,MNUMLR,globalyr);
				Text: "WASTE COAL DISTRIBUTION INCLUDING EXPORT";
				Definition: {
					if mnumlr < 2 then  !only NA has waste coal
					Sum(cyr|map_globalyr_cyr(globalyr,cyr),
					ElectricityByRankTonsCR('5G',MNUMCR,cyr)+
					ResidentialByRankTonsCR('5G',MNUMCR,cyr) +
					IndustrialByRankTonsCR('5G',MNUMCR,cyr) +
					CokingByRankTonsCR('5G',MNUMCR,cyr) +
					LiquidsByRankTonsCR('5G',MNUMCR,cyr) +
					ExportsByRankTonsCR('5G',MNUMCR,cyr))
					else
					0
					endif
					
					!Sum((nsteps,SReg,M14,Sulf,Mtyp,Rank,pt2,DReg,yr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and yr = globalyr+1989
					!and Btu2(SReg,Sulf,Mtyp,Rank)>0, ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr)/
					!Btu2(SReg,Sulf,Mtyp,Rank))+
					!Sum((SReg,M14,Sulf,Mtyp,Rank,ResSec,DReg,yr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and yr = globalyr+1989
					!and Btu2(SReg,Sulf,Mtyp,Rank)>0, ResidentialTransport(SReg,Sulf,Mtyp,Rank,ResSec,DReg,yr)/
					!Btu2(Sreg,Sulf,Mtyp,Rank))+
					!Sum((SReg,M14,Sulf,Mtyp,Rank,IndSec,DReg,yr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and MAP_mnumyr_yr(GlobalYear,yr)
					!and Btu2(SReg,Sulf,Mtyp,Rank)>0, IndustrialTransport(SReg,Sulf,Mtyp,Rank,IndSec,DReg,yr)/
					!Btu2(Sreg,Sulf,Mtyp,Rank)) +
					!Sum((SReg,M14,Sulf,Mtyp,Rank,CokSec,DReg,yr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and MAP_mnumyr_yr(GlobalYear,yr)
					!and Btu2(SReg,Sulf,Mtyp,Rank)>0,CokingTransport(SReg,Sulf,Mtyp,Rank,CokSec,DReg,yr)/
					!Btu2(SReg,Sulf,Mtyp,Rank)) +
					!Sum((SReg,M14,Sulf,Mtyp,Rank,LiquSec,DReg,yr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and MAP_mnumyr_yr(GlobalYear,yr)
					!and Btu2(Sreg,Sulf,Mtyp,Rank)>0,LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr)/
					!Btu2(Sreg,Sulf,Mtyp,Rank))+
					!Sum((SReg,M14,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and yr= globalyr + 1989
					!and Btu2(SReg,Sulf,Mtyp,Rank)>0 and USDRegIntlMapping(USe,DReg),
					!ExportsTransport(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr)
					!/Btu2(Sreg,Sulf,Mtyp,Rank))
				}
			}
			Parameter ElectricityByRankBtu {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,pt2),
					!OutputElectricityTransport2(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr))
					ElectricityTransportACSubtotal(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr))
				}
			}
			Parameter ElectricityByRankBtuCR {
				IndexDomain: (Rank,MNUMCR,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,pt2,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					!OutputElectricityTransport2(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr)) ! is this the 2nd tier
					ElectricityTransportACSubtotal(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr))
				}
			}
			Parameter ElectricityByRankTons {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,pt2),
					!OutputElectricityTransport2Tons(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr))
					ElectricityTransportACSubtotalTons(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr))
				}
			}
			Parameter ElectricityByRankTonsCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,pt2,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					!OutputElectricityTransport2Tons(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr))
					ElectricityTransportACSubtotalTons(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr))
				}
			}
			Parameter ResidentialByRankBtu {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,ResSec),
					ResidentialTransport(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr))
				}
			}
			Parameter ResidentialByRankBtuCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,ResSec,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					ResidentialTransport(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr))
				}
			}
			Parameter ResidentialByRankTons {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,ResSec),
					ResidentialTransportTons(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr))
				}
			}
			Parameter ResidentialByRankTonsCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,ResSec,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					ResidentialTransportTons(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr))
				}
			}
			Parameter IndustrialByRankBtu {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,IndSec),
					IndustrialTransport(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr))
				}
			}
			Parameter IndustrialByRankBtuCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,IndSec,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					IndustrialTransport(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr))
				}
			}
			Parameter IndustrialByRankTons {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,IndSec),
					IndustrialTransportTons(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr))
				}
			}
			Parameter IndustrialByRankTonsCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,IndSec,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					IndustrialTransportTons(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr))
				}
			}
			Parameter CokingByRankBtu {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,CokSec),
					CokingTransport(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)
					)
				}
			}
			Parameter CokingByRankBtuCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,CokSec,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					CokingTransport(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)
					)
				}
			}
			Parameter CokingByRankTons {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,CokSec),
					CokingTransportTons(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)
					)
				}
			}
			Parameter CokingByRankTonsCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,CokSec,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					CokingTransportTons(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)
					)
				}
			}
			Parameter LiquidsByRankBtu {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,LiquSec),
					LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter LiquidsByRankBtuCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,LiquSec,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter LiquidsByRankTons {
				IndexDomain: (Rank,DReg,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,LiquSec),
					LiquidsTransportTons(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter LiquidsByRankTonsCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,LiquSec,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					LiquidsTransportTons(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter ExportsByRankBtu {
				IndexDomain: (Rank,DReg,yr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,ExpSec,Use),
					ExportsTransport5Final(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsByRankUSBtu {
				IndexDomain: (Rank,yr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,ExpSec,Use,Dreg),
					ExportsTransport5Final(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsByRankBtuCR {
				IndexDomain: (Rank,mnumcr,yr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,ExpSec,Use,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					ExportsTransport5Final(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportProductionDollarsCR {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,MNUMCR,cyr);
				Definition: {
					Sum((ExpSec,Use,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					ExportsTransport5Final(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)
					*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
				}
			}
			Parameter ExportProductionDollarsCR2 {
				IndexDomain: (MNUMCR,cyr);
				Definition: Sum((SReg,Sulf,Mtyp,Rank)|Btu2(SReg,Sulf,Mtyp,Rank),ExportProductionDollarsCR(SReg,Sulf,Mtyp,Rank,MNUMCR,cyr));
			}
			Parameter ExportTransportationDollarsCR {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,MNUMCR,cyr)|Btu2(SReg,Sulf,Mtyp,Rank);
				Text: "transport to port only";
				Definition: {
					Sum((DReg,ExpSec,USe)|Map_DReg_MNUMCR(DReg,MNUMCR),
					Trate1Exp(SReg,Sulf,Mtyp,Rank,Dreg,ExpSec)*
					ExportsTransportDetailCurve(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr))     ! U.S. rail rate to U.S. ports
					!Sum((Use,NonUSi), InternationalUnitTransport(USe,NonUSi,'1')/1.182/27.78*
					!(TotalTransportUS(USe,NonUSi,'1',cyr)))  ! U.S. coking ocean freight
					!+ Sum((Use,NonUSi,cyr), InternationalUnitTransport(USe,NonUSi,'2')/1.182/27.78*
					!(TotalTransportUS(USe,NonUSi,'2',cyr))) ! U.S. thermal ocean freight
				}
			}
			Parameter ExportTransportationDollarsCR2 {
				IndexDomain: (MNUMCR,cyr);
				Text: "transport to port only";
				Definition: Sum((SReg,Sulf,Mtyp,Rank)|Btu2(SReg,Sulf,Mtyp,Rank),ExportTransportationDollarsCR(SReg,Sulf,Mtyp,Rank,MNUMCR,cyr));
			}
			Parameter ExportsTonsCR {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,MNUMCR,cyr);
				Definition: {
					Sum((ExpSec,Use,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					ExportsTransportTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr))
				}
			}
			Parameter ExportsTonsCR2 {
				IndexDomain: (MNUMCR,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank)|Btu2(SReg,Sulf,Mtyp,Rank),
					ExportsTonsCR(SReg,Sulf,Mtyp,Rank,MNUMCR,cyr))
				}
			}
			Parameter ExportsTons {
				IndexDomain: (cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,MNUMCR)|Btu2(SReg,Sulf,Mtyp,Rank) AND MNUMCR<11,
					ExportsTonsCR(SReg,Sulf,Mtyp,Rank,MNUMCR,cyr))
				}
			}
			Parameter ExportsByRankTons {
				IndexDomain: (Rank,DReg,yr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,ExpSec,Use),
					ExportsTransportTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsByRankTonsCR {
				IndexDomain: (Rank,mnumcr,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,ExpSec,Use,DReg)|Map_DReg_MNUMCR(DReg,MNUMCR),
					ExportsTransportTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr))
				}
			}
			Parameter COALREP_WC_PROD_BTU_A {
				IndexDomain: (MNUMCR,MNUMLR,globalyr);
				Text: "WASTE COAL DISTRIBUTION INCLUDING EXPORT";
				Definition: {
					if mnumlr < 2 then  !only NA has waste coal
					Sum(cyr|map_globalyr_cyr(globalyr,cyr) ,
					ElectricityByRankBtuCR('5G',MNUMCR,cyr)+
					ResidentialByRankBtuCR('5G',MNUMCR,cyr) +
					IndustrialByRankBtuCR('5G',MNUMCR,cyr) +
					CokingByRankBtuCR('5G',MNUMCR,cyr) +
					LiquidsByRankBtuCR('5G',MNUMCR,cyr) +
					ExportsByRankBtuCR('5G',MNUMCR,cyr))
					!elseif cyr < CPSBaseyr + 1 then
					!hwcprodbty(cyr)
					else
					0
					endif
					
					
					
					
					
					!Sum((nsteps,SReg,M14,Sulf,Mtyp,Rank,pt2,DReg,cyr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and cyr = globalyr+1989, ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr))+
					!Sum((SReg,M14,Sulf,Mtyp,Rank,ResSec,DReg,cyr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and cyr = globalyr+1989, ResidentialTransport(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr))+
					!Sum((SReg,M14,Sulf,Mtyp,Rank,IndSec,DReg,cyr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and MAP_mnumyr_yr(GlobalYear,cyr), IndustrialTransport(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr)) +
					!Sum((SReg,M14,Sulf,Mtyp,Rank,CokSec,DReg,cyr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and MAP_mnumyr_yr(GlobalYear,cyr),CokingTransport(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)) +
					!Sum((SReg,M14,Sulf,Mtyp,Rank,LiquSec,DReg,cyr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and MAP_mnumyr_yr(GlobalYear,cyr),LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr))+
					!Sum((SReg,M14,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)|
					!Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and M14 = MNUMLR and Rank = '5G' and
					!Map_DReg_MNUMCR(DReg,MNUMCR)=1 and MAP_mnumyr_yr(GlobalYear,cyr) and USDRegIntlMapping(USe,DReg),
					!ExportsTransport(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr))
				}
			}
			Parameter COALREP_ABSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 endif
				}
			}
			Parameter ProductionDollars_ABSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter ProductionDollars_ABSULF_A_temp {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Bituminous Coal";
				Definition: {
					
					if (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter ProductionDollars_APSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02NA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_ALSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Lignite Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 endif
				}
			}
			Parameter ProductionDollars_ALSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Lignite Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter MaxScrvPrice {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
				Definition: {
					Max(Scrv1step,
					if MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '11' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'11',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '10' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'10',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '9' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'9',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '8' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'8',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '7' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'7',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '6' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'6',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '5' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'5',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '4' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'4',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '3' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'3',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '2' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'2',cyr)
					elseif
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,cyr)>0
					and Scrv1step = '1' then
					MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'1',cyr)
					else
					0
					endif)
				}
			}
			Parameter COALREP_IBSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Interior Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 endif
				}
			}
			Parameter ProductionDollars_IBSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Interior Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_ILSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Interior Lignite Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '3L',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 endif
				}
			}
			Parameter ProductionDollars_ILSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Interior Lignite Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '3L',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_WBSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "West Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 endif
				}
			}
			Parameter ProductionDollars_WBSULF {
				IndexDomain: (M4,globalyr);
				Text: "West Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_WSSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "West Sub-Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '2S',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '2S',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '2S',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '2S',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 endif
				}
			}
			Parameter ProductionDollars_WSSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "West Sub-Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '2S',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '2S',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '2S',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '2S',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_WLSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "West Lignite Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '3L',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '3L',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 endif
				}
			}
			Parameter ProductionDollars_WLSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "West Lignite Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '3L',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '3L',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_WSCF_A {
				IndexDomain: (M4,M11,globalyr);
				Text: "Steam Coal World Flows";
				Definition: {
					Sum((e,i,cyr)|Map_i_M4(i,M4)
					and Map_e_M11(e,M11)
					and map_globalyr_cyr(globalyr,cyr),
					OutputTonsTransportTotalbyImporterThermal(e,i,cyr))
				}
			}
			Parameter COALREP_WMCF_A {
				IndexDomain: (M4,M11,globalyr);
				Text: "Metallurgical Coal World Flows";
				Definition: {
					Sum((e,i,cyr)|Map_i_M4(i,M4)
					and Map_e_M11(e,M11)
					and map_globalyr_cyr(globalyr,cyr),
					OutputTonsTransportTotalbyImporterCoking(e,i,cyr))
				}
			}
			Parameter COALREP_WTCF_A {
				IndexDomain: (M4,M11,globalyr);
				Text: "Total Coal World Flows";
				Definition: COALREP_WSCF_A(M4,M11,globalyr)+COALREP_WMCF_A(M4,M11,globalyr);
			}
			Parameter COALREP_PCLEX_A {
				IndexDomain: (MNUMCR,globalyr);
				Text: "Coal Export Price -- excludes freight rate";
				Definition: {
					Sum(cyr|map_globalyr_cyr(globalyr,cyr),
					(ExportProductionDollarsCR2(MNUMCR,cyr) + ExportTransportationDollarsCR2(MNUMCR,cyr))/$ExportsTranspTrillsCR(MNUMCR,cyr))
				}
			}
			Parameter COALREP_CLSULF_A {
				IndexDomain: (M14,M4,M3,globalyr);
				Text: "Coal Production by Region";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|Map_SReg_M14(SReg,M14) and Map_Rank_M4(Rank,M4)
					and Map_Sulf_M3(Sulf,M3)
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr),
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
				}
			}
			Parameter COALREP_PCLSULF_A {
				IndexDomain: (M14,M4,M3,globalyr);
				Text: "Coal Price by Region";
				Definition: {
					if COALREP_CLSULF_A(M14,M4,M3,globalyr)>0then
					ProductionDollarsbySupRegRankSulf(M14,M4,M3,globalyr)
					endif
				}
			}
			Parameter COALREP_PABSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Price of App Bit Coal";
				Definition: {
					if COALREP_ABSULF_A(M4,globalyr)>0 then
					ProductionDollars_ABSULF_A(M4,globalyr)/COALREP_ABSULF_A(M4,globalyr)
					endif
				}
			}
			Parameter COALREP_PALSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Price of App Lig Coal";
				Definition: {
					if COALREP_ALSULF_A(M4,globalyr)>0 then
					ProductionDollars_ALSULF_A(M4,globalyr)/
					COALREP_ALSULF_A(M4,globalyr)
					endif
				}
			}
			Parameter COALREP_PIBSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Price of Int Bit Coal";
				Definition: {
					if COALREP_IBSULF_A(M4,globalyr)>0 then
					ProductionDollars_IBSULF_A(M4,globalyr)/
					COALREP_IBSULF_A(M4,globalyr)
					endif
				}
			}
			Parameter COALREP_PILSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Price of Int Lig Coal";
				Definition: {
					if COALREP_ILSULF_A(M4,globalyr) > 0 then
					ProductionDollars_ILSULF_A(M4,globalyr)/
					COALREP_ILSULF_A(M4,globalyr)
					endif
				}
			}
			Parameter COALREP_PWBSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Price of West Bit Coal";
				Definition: {
					if COALREP_WBSULF_A(M4,globalyr)>0 then
					ProductionDollars_WBSULF(M4,globalyr)/
					COALREP_WBSULF_A(M4,globalyr)
					endif
				}
			}
			Parameter COALREP_PWSSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Price of West Sub Coal";
				Definition: {
					if COALREP_WSSULF_A(M4,globalyr)>0then
					ProductionDollars_WSSULF_A(M4,globalyr)/
					COALREP_WSSULF_A(M4,globalyr)
					endif
				}
			}
			Parameter COALREP_PWLSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Price of West Lig Coal";
				Definition: {
					if COALREP_WLSULF_A(M4,globalyr)>0 then
					ProductionDollars_WLSULF_A(M4,globalyr)/
					COALREP_WLSULF_A(M4,globalyr)
					endif
				}
			}
			Parameter COALREP_APSULF_BTU_A {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Premium Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '4P',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02NA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_ABSULF_BTU_A {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02NA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_ALSULF_BTU_A {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Lignite Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02NA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '5G',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_IBSULF_BTU_A {
				IndexDomain: (M4,globalyr);
				Text: "Interior Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL' )
					and Btu2(SReg,Sulf,Mtyp,Rank)>0
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_ILSULF_BTU_A {
				IndexDomain: (M4,globalyr);
				Text: "Interior Lignite Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '3L',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '04EI' or SReg = '05WI'
					or SReg = '06GL' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_WBSULF_BTU_A {
				IndexDomain: (M4,globalyr);
				Text: "West Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '1B',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '1B',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_WSSULF_BTU_A {
				IndexDomain: (M4,globalyr);
				Text: "West Sub-Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '2S',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '2S',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '2S',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '2S',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_WLSULF_BTU_A {
				IndexDomain: (M4,globalyr);
				Text: "West Lignite Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '3L',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '3L',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '3L',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_CLSULF_BTU_A {
				IndexDomain: (M14,M4,M3,globalyr);
				Text: "Coal Production by Region";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|Map_SReg_M14(SReg,M14) and Map_Rank_M4(Rank,M4)
					and Map_Sulf_M3(Sulf,M3)
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
				}
				Comment: {
					"Note:  M3 here represents sulfur, not mtyp
					M4 represents rank"
				}
			}
			Parameter ProductionDollarsbySupRegRankMtyp {
				IndexDomain: (M14,M4,M3,globalyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|Map_SReg_M14(SReg,M14) and Map_Rank_M4(Rank,M4)
					and Map_Mtyp_M3(Mtyp,M3)
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					!Price(SReg,Sulf,Mtyp,Rank,cyr))
				}
			}
			Parameter ProductionDollarsbySupRegRankSulf {
				IndexDomain: (M14,M4,M3,globalyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|Map_SReg_M14(SReg,M14) and Map_Rank_M4(Rank,M4)
					and Map_Sulf_M3(Sulf,M3)
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr),
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					!Price(SReg,Sulf,Mtyp,Rank,cyr))
				}
			}
			Parameter PriceSolutionBySC {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
				Text: "Solution Price of Coal by Supply area (1987$)";
				Definition: {
					
					!if SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr) > 50 then
					! Changed 10-17-18 DAF  Prices in $1987 per MMBtu over $5 per MMBtu should not be used
					!if SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr) > 5 then!
					!MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,'7',cyr)
					!else
					!SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr)
					!endif
				}
			}
			Parameter COALREP_PMTD_A {
				IndexDomain: (NSREGN,globalyr);
				Text: "Underground Coal Production by Region";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,M14,cyr)| Mtyp = '2D' and Map_SReg_M14(SReg,M14)
					and M14 = NSREGN and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
				}
			}
			Parameter COALREP_PMTS_A {
				IndexDomain: (NSREGN,globalyr);
				Text: "Surface Coal Production by Region";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,M14,cyr)| Mtyp = '1S' and Map_SReg_M14(SReg,M14)
					and M14 = NSREGN and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
				}
			}
			Parameter COALREP_PMTD_BTU_A {
				IndexDomain: (NSREGN,globalyr);
				Text: "Underground Coal Production by Region";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,M14,cyr)| Mtyp = '2D' and Map_SReg_M14(SReg,M14)
					and M14 = NSREGN and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
				}
			}
			Parameter COALREP_PMTS_BTU_A {
				IndexDomain: (NSREGN,globalyr);
				Text: "Surface Coal Production by Region";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,M14,cyr)| Mtyp = '1S' and Map_SReg_M14(SReg,M14)
					and M14 = NSREGN and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
				}
			}
			Parameter COALREP_PMTDP_A {
				IndexDomain: (NSREGN,globalyr);
				Text: "Price of Underground Coal Production by";
				Definition: {
					if COALREP_PMTD_A(NSREGN,globalyr)>0 then
					ProductionDollars_PMTDP(NSREGN,globalyr)/
					COALREP_PMTD_A(NSREGN,globalyr)
					endif
				}
			}
			Parameter ProductionDollars_PMTDP {
				IndexDomain: (NSREGN,globalyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,M14,cyr)|Map_SReg_M14(SReg,M14)
					and M14 = NSREGN and Mtyp = '2D'
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
				}
			}
			Parameter COALREP_PMTSP_A {
				IndexDomain: (NSREGN,globalyr);
				Text: "Price of Surface Coal Production by Regi";
				Definition: {
					if COALREP_PMTS_A(NSREGN,globalyr)>0 then
					ProductionDollars_PMTDS(NSREGN,globalyr)/
					COALREP_PMTS_A(NSREGN,globalyr)
					endif
				}
			}
			Parameter ProductionDollars_PMTDS {
				IndexDomain: (NSREGN,globalyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,M14,cyr)|Map_SReg_M14(SReg,M14)
					and M14 = NSREGN and Mtyp = '1S'
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
				}
			}
			Parameter COALREP_APSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "App Premium Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '4P',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02NA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 endif
				}
			}
			Parameter COALREP_PAPSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Price App Premium Coal";
				Definition: {
					If COALREP_APSULF_A(M4,globalyr)>0then
					ProductionDollars_PAPSULF_A(M4,globalyr)/
					COALREP_APSULF_A(M4,globalyr)
					endif
				}
			}
			Parameter COALREP_UTCONS_A {
				IndexDomain: (NUTSEC,globalyr);
				Text: "excluded imports";
				Definition: {
					
					Sum((SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)|Map_nutsec_pt3(NUTSEC,pt2)AND map_globalyr_cyr(globalyr,cyr) and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					  ElectricityTransport2(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
				}
			}
			Parameter ProductionDollars_PAPSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Appalachia Premium";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '4P',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02NA'
					or SReg = '03SA') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '01NA' or SReg = '02CA'
					or SReg = '03SA' )
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and map_globalyr_cyr(globalyr,cyr) and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_UTTSO2_A {
				IndexDomain: (NUTSEC,globalyr);
				Text: "Util total SO2 emissions in NEMS space (NUTSEC & globalyr)";
				Definition: {
					
					!Sum((nsteps,ElecScrv,pt2,DReg,cyr)|Map_nutsec_pt3(NUTSEC,pt2)AND map_globalyr_cyr(globalyr,cyr),
					!  Sulfur2(ElecScrv)*.001*
					!  Ash(ElecScrv)*(1.0 - rclclnr(pt2))*
					!  ElectricityTransportAC(nsteps,ElecScrv,pt2,DReg,cyr))
					
					Sum((pt2,cyr)|Map_nutsec_pt3(NUTSEC,pt2)AND map_globalyr_cyr(globalyr,cyr),
					COALREP_UTTSO2_E(pt2,cyr))
				}
			}
			Parameter COALREP_UTTSO2_B {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Text: "This is total EU transport by Scrv, Dreg, and pt2 (elec subsector) Units TBtu";
				Definition: {
					!SOLVAL(1) * SSUL(K,L) * 0.001 * ASHSULF * (1.0 - RCLCLNR(I,CURIYR,J)
					!* SFACT++ CSO2IMP(JJ,CURIYR)
					
					  Sum(nsteps, ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
				}
			}
			Parameter COALREP_UTTSO2_C {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Text: "Util total SO2 emissions (partial calc from TransportAC solution)";
				Definition: {
					!SOLVAL(1) * SSUL(K,L) * 0.001 * ASHSULF * (1.0 - RCLCLNR(I,CURIYR,J)
					!* SFACT++ CSO2IMP(JJ,CURIYR)
					  Sulfur2(SReg, Sulf, Mtyp, Rank)*.001*
					  Ash(SReg, Sulf, Mtyp, Rank)*
					  COALREP_UTTSO2_B(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)
				}
			}
			Parameter COALREP_UTTSO2_D {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Text: "Util total SO2 emissions (partial calc Add another step)";
				Definition: {
					!SOLVAL(1) * SSUL(K,L) * 0.001 * ASHSULF * (1.0 - RCLCLNR(I,CURIYR,J)
					!* SFACT++ CSO2IMP(JJ,CURIYR)
					
					(1.0 - rclclnr(pt2))*
					COALREP_UTTSO2_C(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)
				}
			}
			Parameter COALREP_UTTSO2_E {
				IndexDomain: (pt2,cyr);
				Text: "Util total SO2 emissions by plant type for current year and iteration";
				Definition: {
					!SOLVAL(1) * SSUL(K,L) * 0.001 * ASHSULF * (1.0 - RCLCLNR(I,CURIYR,J)
					!* SFACT++ CSO2IMP(JJ,CURIYR)
					
					Sum((SReg, Sulf, Mtyp, Rank,dreg) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),COALREP_UTTSO2_D(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
				}
			}
			Parameter COALREP_UCSO2_A {
				IndexDomain: (NUTSEC,globalyr);
				Text: "Util uncontrolled SO2 emissions";
				Definition: {
					
					
					!Sum((NSTEPS,ElecScrv,pt2,DReg,cyr)|Map_nutsec_pt3(NUTSEC,pt2)AND map_globalyr_cyr(globalyr,cyr) AND NSTEPS < 3,
					!  Sulfur2(ElecScrv)*.001*  !now tons or SO2 per million Btu or million tons SO2 per trillion Btu
					!  Ash(ElecScrv)*
					!  ElectricityTransportAC(nsteps,ElecScrv,pt2,DReg,cyr))
					
					Sum((pt2,cyr)|Map_nutsec_pt3(NUTSEC,pt2)AND map_globalyr_cyr(globalyr,cyr),
					COALREP_UCSO2_B(pt2,cyr))
				}
			}
			Parameter COALREP_UCSO2_B {
				IndexDomain: (pt2,cyr);
				Text: "Util uncontrolled Hg  emissions partial calc";
				Definition: {
					!SOLVAL(1) * SSUL(K,L) * 0.001 * ASHSULF * (1.0 - RCLCLNR(I,CURIYR,J)
					!* SFACT++ CSO2IMP(JJ,CURIYR)
					
					Sum((SReg, Sulf, Mtyp, Rank,dreg) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),COALREP_UTTSO2_C(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
				}
			}
			Parameter COALREP_UCMERC_A {
				IndexDomain: (NUTSEC,globalyr);
				Text: "Util uncontrolled Hg  emissions in NEMS space (NUTSEC,globalyr)";
				Definition: {
					Sum((pt2,cyr)|Map_nutsec_pt3(NUTSEC,pt2)AND map_globalyr_cyr(globalyr,cyr),
					COALREP_UCMERC_D(pt2,cyr))
				}
			}
			Parameter COALREP_UCMERC_B {
				IndexDomain: (pt2,cyr);
				Text: "Util uncontrolled Hg  emissions";
				Definition: {
					Sum((nsteps,SReg,Sulf,Mtyp,Rank,DReg)|Btu2(SReg,Sulf,Mtyp,Rank),
					merccont(nsteps,SReg,Sulf,Mtyp,Rank,pt2)*
					ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))
				}
			}
			Parameter COALREP_UCMERC_C {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Text: "Util uncontrolled Hg  emissions";
				Definition: {
					Mercury2(SReg, Sulf, Mtyp, Rank)*
					COALREP_UTTSO2_B(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)  !this is just btus
				}
			}
			Parameter COALREP_UCMERC_D {
				IndexDomain: (pt2,cyr);
				Text: "Util uncontrolled Hg  emissions by plant type and year";
				Definition: {
					
					
					Sum((SReg, Sulf, Mtyp, Rank,dreg) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),COALREP_UCMERC_C(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
				}
			}
			Parameter COALREP_ACMERC_A {
				IndexDomain: (globalyr);
				Text: "Removal of Hg  emissions-activated carbo";
				Definition: {
					Sum((cyr)|map_globalyr_cyr(globalyr,cyr),
					COALREP_ACMERC_B(cyr)*.001)
				}
				Comment: "caution: in fortran is also divided by 1000 and didn\'t do that here";
			}
			Parameter COALREP_ACMERC_B {
				IndexDomain: (cyr);
				Text: "Removal of Hg  emissions-activated carbo";
				Definition: {
					Sum((nsteps,SReg,Sulf,Mtyp,Rank,pt2,DReg)|nsteps <> '1' and Btu2(SReg,Sulf,Mtyp,Rank),
					merccont(nsteps,SReg,Sulf,Mtyp,Rank,pt2)*
					ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))
				}
				Comment: "caution: in fortran is also divided by 1000 and didn\'t do that here";
			}
			Parameter COALREP_TSPMBTU_B {
				IndexDomain: (globalyr);
				Text: "Average SO2 emissions in tons of SO2 per trillion Btu";
				Definition: {
					Sum((nutsec,mnumyr)|mnumyr = globalyr,COALREP_UTTSO2(NUTSEC,mnumyr-1))  !million tons so2
					/Sum((nutsec,mnumyr)|mnumyr = globalyr,COALREP_UTCONS(NUTSEC,mnumyr-1))
				}
			}
			Parameter COALREP_TSPMBTU_A {
				IndexDomain: (globalyr);
				Text: "Average SO2 emissions in million tons of SO2 per trillion Btu or tons of SO2 per million Btu";
				Definition: {
					!Sum((nutsec,mnumyr)|mnumyr = globalyr,COALREP_UTTSO2(NUTSEC,mnumyr-1))  !million tons so2
					!/Sum((nutsec,mnumyr)|mnumyr = globalyr,COALREP_UTCONS(NUTSEC,mnumyr-1))
					sum(nutsec, COALREP_UTTSO2_A(NUTSEC,GLOBALYR) / $COALREP_UTCONS_A(NUTSEC,GLOBALYR))
				}
			}
			Parameter Copy_COALREP_TMPMBTU_A {
				IndexDomain: (globalyr);
				Text: "Average mercury emissions in tons of hg";
			}
			Parameter Copy_COALREP_TOTLABPROD_A {
				IndexDomain: (globalyr);
				Text: "total labor productivity";
			}
			Parameter Copy_COALREP_WAGEPHOUR_A {
				IndexDomain: (globalyr);
				Text: "Total Wages per hour";
			}
			Parameter Copy_COALREP_WAGEGROWTH_A {
				IndexDomain: (globalyr);
				Text: "Growth in wages from 1997";
			}
			Parameter Copy_COALREP_LABPRODGROWTH_A {
				IndexDomain: (globalyr);
				Text: "Growth in labor productivity";
			}
			Parameter Copy_COALREP_COAL2GAS_A {
				IndexDomain: (MNUMCR,globalyr);
				Text: "Coal for gasification (mainly Great Plai";
			}
			Parameter COALREP_WPSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "West Premium Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '4P',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '4P',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)/Btu2(SReg,Sulf,Mtyp,Rank))
					 endif
				}
			}
			Parameter COALREP_PWPSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "Price West Premium Coal";
				Definition: {
					if COALREP_WPSULF_A(M4,globalyr)>0then
					ProductionDollars_WPSULF_A(M4,globalyr)/
					COALREP_WPSULF_A(M4,globalyr)
					endif
				}
			}
			Parameter ProductionDollars_WPSULF_A {
				IndexDomain: (M4,globalyr);
				Text: "West Bituminous Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '4P',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '4P',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr)*PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_WPSULF_BTU_A {
				IndexDomain: (M4,globalyr);
				Text: "West Premium Coal";
				Definition: {
					If (M4 = 1)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Sulf = '1C' and Rank = '4P',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 2)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg  = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Sulf = '2M' and Rank = '4P',
					ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 3)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13RM' or SReg = '14AW') and
					Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Sulf = '3H' and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					elseif (M4 = 4)then
					Sum((SReg,Sulf,Mtyp,Rank,cyr)|(SReg = '07DL' or SReg = '08WM'
					or SReg = '09NW' or SReg = '10SW' or SReg = '11WW' or
					SReg = '12RM' or SReg = '13ZN' or SReg = '14AW')
					and Btu2(SReg,Sulf,Mtyp,Rank)
					and Map_globalyr_cyr(globalyr,cyr) and Rank = '4P',
					 ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr))
					 endif
				}
			}
			Parameter COALREP_CLEXPRANK_A {
				IndexDomain: (M4,globalyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,ExpSec,Use,Dreg,yr) | Map_Rank_M4(Rank,M4) and map_globalyr_cyr(globalyr,yr),
					ExportsTransport5Final(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter COALREP_CLIMPRANK_A {
				IndexDomain: (M4,globalyr);
				Definition: {
					If (M4 = 4)then
					  Sum((CokSec,DReg,nUS,USi,yr)| map_globalyr_cyr(globalyr,yr),
					      ImportsCoking(CokSec,DReg,nUS,USi,yr)) 
					elseif (M4 = 1)then
					  Sum((NSTEPS,nUS,USi,DReg,pt2,yr)| map_globalyr_cyr(globalyr,yr),
					      ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,yr))
					+ Sum((IndSec,DReg,nUS,USi,yr)| map_globalyr_cyr(globalyr,yr),
						ImportsIndustrial(IndSec,DReg,nUS,USi,yr))
					endif
				}
			}
		}
		DeclarationSection Integration_Out_Coalout {
			Parameter COALOUT_CLSYNGQN_A {
				IndexDomain: (M17,globalyr);
				Text: "Synthetic NG quantity";
				Definition: {
					 !DATA SYNGQN/54.788,54.186,60.309,59.468,57.127,51.550,25.775/
					
					  !    DO I = 1,17
					  !       DO J = 1, IJUMPYR
					  !          CLSYNGQN(I,J) = 0.0
					  !       END DO
					  !    END DO
					!
					   !   DO J = 1, IJUMPYR
					    !     if( j .le. 5) CLSYNGQN(5,J) = SYNGQN(J)
					    !     IF( J .GT. 5 .AND. J .LE. 10) CLSYNGQN(5,J) = SYNGQN(6)
					    !     IF( J .EQ. 11) CLSYNGQN(5,J) = SYNGQN(7)
					    !  END DO
				}
			}
			Parameter COALOUT_CQSBB_A {
				IndexDomain: (M3,globalyr);
				Text: "Coal Prod (East,West Miss)";
				Definition: {
					!Sum((EW,Mx_NCL,SReg,Sulf,Mtyp,Rank,cyr)|M3 = EW and Map_SReg_EW(SReg,EW)=1
					!						and Btu(Mx_NCL,SReg,!Sulf,Mtyp,Rank)>0
					!						and globalyr = (cyr - 1989) and Rank <> '5G',
					! 						ProductionVolume(SReg,Sulf,Mtyp,Rank,cyr));
				}
				Comment: "should exclude waste coal";
			}
			Parameter COALOUT_CQSBB_B {
				IndexDomain: (globalyr);
				Text: "Coal Prod (East,West Miss)";
				Definition: {
					!Sum(M3|m3<3,COALOUT_CQSBB_A(M3,globalyr))
				}
				Comment: "should exclude waste coal";
			}
			Parameter COALOUT_CQSBT_A {
				IndexDomain: (M3,globalyr);
				Text: "Coal Conv Factor for Prod";
				Definition: {
					!COALOUT_CQSBB_A(M3,globalyr)/$COALOUT_CQSBT_Tons_C(M3,globalyr)
				}
			}
			Parameter COALOUT_CQSBT_B {
				IndexDomain: (globalyr);
				Text: "Coal Conv Factor for Prod";
				Definition: {
					!COALOUT_CQSBB_B(globalyr)/$COALOUT_CQSBT_Tons_D(globalyr)
				}
			}
			Parameter COALOUT_CQSBT_Tons_C {
				IndexDomain: (M3,globalyr);
				Text: "Coal Conv Factor for Prod";
				Definition: {
					!Sum((EW,Mx_NCL,SReg,Sulf,Mtyp,Rank,cyr)|M3 = EW
					!and Map_SReg_EW(SReg,EW)
					!and Btu(Mx_NCL,SReg,Sulf,Mtyp,Rank)
					!and map_globalyr_cyr(globalyr,cyr) and Rank <> '5G',
					!ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,cyr));
				}
			}
			Parameter COALOUT_CQSBT_Tons_D {
				IndexDomain: (globalyr);
				Text: "Coal Conv Factor for Prod";
				Definition: {
					!Sum(M3|m3<3,COALOUT_CQSBT_Tons_C(M3,globalyr))
				}
			}
			Parameter COALOUT_CPSB_A {
				IndexDomain: (M3,globalyr);
				Text: "Coal Minemouth Price";
				Definition: {
					!ProductionDollarsbyEWRegion(M3,globalyr)/$COALOUT_CQSBB_A(M3,globalyr)
				}
			}
			Parameter COALOUT_CPSB_B {
				IndexDomain: (globalyr);
				Text: "Coal Minemouth Price";
				Definition: {
					!ProductionDollarsbyEWRegion(M3,globalyr)/$COALOUT_CQSBB_A(M3,globalyr)
				}
			}
			Parameter MMPfromLP {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,yr);
				Definition: {
					!Max(Sum(Scrv1step|MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,yr)>0,
					!(MarginalProductionPrice(SReg,Sulf,Mtyp,Rank,Scrv1step,yr))))
				}
			}
			Parameter ProductionDollarsbyEWRegion {
				IndexDomain: (M3,globalyr);
				Definition: {
					!Sum((EW,SReg,Sulf,Mtyp,Rank,yr)|M3 = EW and Map_SReg_ASReg(SReg,EW)=1
					!and Btu2(SReg,Sulf,Mtyp,Rank)>0
					!and globalyr = (yr - 1989) and Rank <> '5G',
					!ProductionVolume(SReg,Sulf,Mtyp,Rank,yr)*Price(SReg,Sulf,Mtyp,Rank,yr))
				}
			}
			Parameter COALOUT_CPSBT_A {
				IndexDomain: (M3,globalyr);
				Text: "Coal Conv Factor for Minemouth Prices";
				Definition: {
					!COALOUT_CQSBT_A(M3,globalyr)
				}
			}
			Parameter COALOUT_CQDBFT_A {
				IndexDomain: (MNUMCR,CLSECT,globalyr);
				Text: "Coal Conv Factor for Cons";
			}
			Parameter COALOUT_CPDBFT_A {
				IndexDomain: (MNUMCR,CLSECT,globalyr);
				Text: "Coal Conv Factor for Delivered Prices";
				Comment: "this parameter appears to be not used  DAF";
			}
			Parameter COALOUT_CQDBFB_A {
				IndexDomain: (MNUMCR,CLSECT,globalyr);
				Text: "Imports, Exports, Stock Changes";
				Comment: {
					"!need to come back to this to add imports all else should be commented per
					discussion with Dan"
				}
			}
			Parameter COALOUT_PCLRFPD_A {
				IndexDomain: (MNUMPR,globalyr);
				Text: "Price of CTL (coal to liquids)";
				Definition: {
					!Sum((PADD,yr)|
					!Map_PADD_Mnumpr(PADD,MNUMPR)=1
					!and yr=globalyr+1989 and LiquidsTranspTrillsPR(PADD,yr)>0,
					!LiquidsTotalCostPR(PADD,yr)/
					!LiquidsTranspTrillsPR(PADD,yr))
				}
			}
			Parameter COALOUT_LIQUCARB_A {
				IndexDomain: (MNUMCR,globalyr);
				Text: "CTL carbon content";
				Definition: {
					!Sum((cyr)|
					!cyr=globalyr+1989 and LiquidsTranspTrillsCR(MNUMCR,cyr),
					!COALOUT_LIQUCARB_B(MNUMCR,globalyr)/
					!LiquidsTranspTrillsCR(MNUMCR,cyr))
				}
			}
			Parameter COALOUT_LIQUCARB_B {
				IndexDomain: (MNUMCR,globalyr);
				Text: "Total carbon";
				Definition: {
					!if mnumcr < 11 then
					!Sum((DReg,Scrv,LiquSec,yr)|Map_DReg_MNUMCR(DReg,MNUMCR) and
					!yr=globalyr+1989 and LiquidsTransport(Scrv,LiquSec,DReg,yr)>0,
					!(Carbon2(Scrv) * (12.0/44.0) /2.204623*
					!LiquidsTransport(Scrv,LiquSec,DReg,yr)))
					!else
					!Sum((DReg,Scrv,LiquSec,yr)|
					!yr=globalyr+1989 and LiquidsTransport(Scrv,LiquSec,DReg,yr)>0,
					!(Carbon2(Scrv) * (12.0/44.0) /2.204623*
					!LiquidsTransport(Scrv,LiquSec,DReg,yr)))
					!endif
				}
			}
			Parameter COALOUT_LCVBTU_A {
				IndexDomain: (MNUMPR,globalyr);
				Text: "Heat content for coal to CTL";
				Definition: {
					!Sum((PADD,yr)|
					!yr=globalyr+1989 and Map_PADD_Mnumpr(PADD,MNUMPR) and LiquidsTranspTonsPR2(mnumpr,yr),
					!LiquidsTranspTrillsPR(PADD,yr)/
					!LiquidsTranspTonsPR2(mnumpr,yr))
				}
			}
			Parameter COALOUT_LTRNTON_A {
				IndexDomain: (MNUMPR,globalyr);
				Text: "Transportation rate for coal to CTL";
				Definition: {
					!Sum((yr)|
					!yr=globalyr+1989 and LiquidsTranspTonsPR2(mnumpr,yr)>0,
					!LiquidsTranspCostPR2(mnumpr,yr)/
					!LiquidsTranspTonsPR2(mnumpr,yr))
				}
			}
			Parameter COALOUT_TOTMINERS_A {
				IndexDomain: (globalyr);
				Text: "Number of coal miners by year";
				Definition: {
					!Sum(SReg,MinersbySupplyRegion(SReg,globalyr))
				}
			}
			Parameter MinersbySupplyRegionYr {
				IndexDomain: (SReg,yr);
			}
			Parameter MinersbySupplyRegion {
				IndexDomain: (SReg,globalyr);
			}
			Parameter COALOUT_L_SO2P_A {
				IndexDomain: (MNUMPR,globalyr);
				Text: "Cost of SO2 allowances";
				Definition: {
					!Sum((PADD,yr,mx_so2)|yr=globalyr+1989 and Map_PADD_Mnumpr(PADD,MNUMPR)=1,
					!if LiquidsTranspTrillsPR(PADD,yr)>0 and
					!       mnumpr < 4 and mx_so2 = 1 THEN                      !FOR PMM REGIONS
					!                EMISSION_EMELPSO2(globalyr,MX_SO2)*L_SO2BTU(MNUMPR,yr)              !$/TON SO2 X tonSO2/MMBtu =$/mmBtu
					!elseif LiquidsTranspTrillsPR(PADD,yr)>0 and
					!       mnumpr < 6  and mx_so2 = 2 THEN
					!                EMISSION_EMELPSO2(globalyr,MX_SO2)*L_SO2BTU(MNUMPR,yr)              !$/TON SO2 X TONSO2/MMBtu=$/mmBtu
					!elseif mnumpr < 4 and mx_so2 = 1 THEN                                                           !L_SO2P AND L_HGP WILL BE GT 0 WHEN CORRESP. AL
					!                EMISSION_EMELPSO2(globalyr,MX_SO2)*.00003     !replaced
					!elseif mnumpr < 6 and mx_so2 = 2 THEN                !  LFMM:   ELSE
					!               EMISSION_EMELPSO2(globalyr,MX_SO2)*.00003
					!endif)
				}
				Comment: "replaced tempso2 with a number temporarily";
			}
			Parameter COALOUT_L_HGP_A {
				IndexDomain: (MNUMPR,globalyr);
				Text: "Cost of Hg allowances";
				Definition: {
					
					!Sum((PADD,yr,mx_so2)|yr=globalyr+1989 and Map_PADD_Mnumpr(PADD,MNUMPR)=1,
					!if LiquidsTranspTrillsPR(PADD,yr)>0 and
					!       mnumpr < 4  THEN                      !FOR PMM REGIONS
					!                (Emel_phg(yr)/2.0)*L_HGBTU(PADD,yr)/1000.             !$/TON SO2 X tonSO2/MMBtu =$/mmBtu
					!elseif LiquidsTranspTrillsPR(PADD,yr)>0 and
					!       mnumpr < 5  THEN
					!                (EMEL_PHG(yr)/2.0)*0.35/1000.
					!endif)
				}
			}
			Parameter MercuryEmissionsfromLiquids {
				IndexDomain: (PADD,yr);
				Text: ".05 represents the portion of mercury that remains";
				Definition: {
					!Sum((Scrv,DReg,LiquSec)|Map_PADD_DReg(PADD,DReg)=1,LiquidsTransport(Scrv,LiquSec,DReg,yr)*.05*
					!0.5*Mercury2(Scrv))
				}
			}
			Parameter LiquidsBtus {
				IndexDomain: (PADD,yr);
				Text: ".05 represents the portion of mercury that remains";
				Definition: {
					!Sum((Scrv,DReg,LiquSec)|Map_PADD_DReg(PADD,DReg)=1,
					!LiquidsTransport(Scrv,LiquSec,DReg,yr))
				}
			}
			Parameter L_HGBTU {
				IndexDomain: (PADD,yr);
				Definition: {
					!If LiquidsBtus(PADD,yr)>0 then
					!MercuryEmissionsfromLiquids(PADD,yr)/
					!LiquidsBtus(PADD,yr)
					!endif
				}
			}
			Parameter COALOUT_TTONMILE_A {
				IndexDomain: (globalyr);
				Text: "Total ton-miles of electr coal";
				Definition: {
					!Sum(yr|yr=globalyr+1989,Ttonmile(yr))
				}
			}
			Parameter Invtemp_a {
				IndexDomain: mnumyr;
				Definition: {
					!Sum((yr,m1)|NCNTRL_CURCALYR(M1)=yr and yr =mnumyr + 1989,
					!invtemp(yr))
				}
			}
			Parameter COALOUT_Invtemp {
				IndexDomain: mnumyr;
			}
		}
		DeclarationSection Integration_Out_Uso2grp {
			Parameter USO2GRP_XCL_QECP_A {
				IndexDomain: (MX_NCL,ECPFPH,globalyr);
				Text: "Expected Coal Supply Quantities";
			}
			Set YearUpdateforGlobalVariables {
				SubsetOf: MNUMYR_;
				Index: globalyr;
				Property: ElementsAreNumerical;
				Definition: ncntrl_curiyr(1);
			}
			Parameter USO2GRP_XCL_QECP_B {
				IndexDomain: (MX_NCL,cyr);
				Text: "Expected Coal Supply Quantities";
			}
			Parameter USO2GRP_XCL_QECP_B1 {
				IndexDomain: (MX_NCL,cyr);
				Text: "Expected Coal Supply Quantities";
			}
			Parameter USO2GRP_XCL_QECP_C {
				IndexDomain: (MX_NCL,pyr);
				Text: "Expected Coal Supply Quantities";
			}
			Parameter USO2GRP_XCL_QECP1_D {
				IndexDomain: (MX_NCL,ECPFPH);
				Text: "Expected Coal Supply Quantities";
			}
			Parameter USO2GRP_XCL_PECP_A {
				IndexDomain: (globalyr,MX_NCL,M11,ECPFPH);
				Text: "Expected Coal Supply Prices by ECP Step";
				Definition: {
					!Sum((pyr,M1)|map_ecpfph_pyr(ecpfph,pyr),
					!USO2GRP_XCL_PECP_C(MX_NCL,M11,pyr))
				}
				Comment: "AIMMS detected a cyclic definition";
			}
			Parameter USO2GRP_XCL_PECP_B {
				IndexDomain: (MX_NCL,M11,cyr);
				Text: "Expected Coal Supply Prices by ECP Step";
				Definition: {
					!Sum((Scrv1step)|M11 = Scrv1step,
					!USO2GRP_XCL_PECP_B1(Mx_NCL,Scrv1Step,cyr))
				}
				Comment: "AIMMS detected a cyclic definition";
			}
			Parameter USO2GRP_XCL_PECP_B1 {
				IndexDomain: (MX_NCL,Scrv1step,ecpfph,cyr);
				Text: {
					"Expected Coal Supply Prices by ECP Step; defined in Execution"
				}
				Definition: {
					!Sum((Scrv1)|Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
					!SC_3_PRICE87(Scrv1,Scrv1Step,cyr))
				}
				Comment: "AIMMS detected a cyclic definition";
			}
			Parameter USO2GRP_XCL_PECP_C {
				IndexDomain: (MX_NCL,M11,ECPFPH,cyr);
				Text: {
					"Expected Coal Supply Prices by ECP Step; defined in MainExecution"
				}
				Definition: {
					!Sum(yr|yr = pyr,USO2GRP_XCL_PECP_B(MX_NCL,M11,yr))
				}
			}
			Parameter USO2GRP_XCL_STEPS_A {
				IndexDomain: (M11);
				Text: "Expected Coal Supply Step Definitions";
				Definition: {
					Sum(Scrv1Step|Scrv1Step=M11,
					StepSize(Scrv1Step))
				}
			}
			Parameter USO2GRP_XCL_OTHER_A {
				IndexDomain: (MX_NCI,globalyr);
				Text: "Expected Coal Supply Quantities - Non-Ut";
				Definition: {
					if(USO2GRP_XCL_OTHER_B(MX_NCI,globalyr)-
					USO2GRP_XCL_OTHER_C(MX_NCI,globalyr))<0 then
					0
					else
					USO2GRP_XCL_OTHER_B(MX_NCI,globalyr)-
					USO2GRP_XCL_OTHER_C(MX_NCI,globalyr)
					endif
				}
			}
			Parameter USO2GRP_XCL_OTHER_B {
				IndexDomain: (MX_NCI,globalyr);
				Text: "Expected Coal Supply Quantities - Non-Ut";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,cyr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCI(Scrv1,mx_nci) and MAP_globalyr_cyr(globalyr,cyr),
					ProductionVolume(SReg, Sulf, Mtyp, Rank,cyr))
					
					!Sum(((Scrv1,Scrv,yr)|Btu(Scrv1,Scrv)>0
					!and Scrv1 = MX_NCI and MAP_mnumyr_yr(GlobalYear,yr), ProductionVolume(Scrv,yr)-
					!Sum((nsteps,pt2,DReg), ElectricityTransportAC(nsteps,Scrv,pt2,DReg,yr)))
				}
			}
			Parameter USO2GRP_XCL_OTHER_C {
				IndexDomain: (MX_NCI,globalyr);
				Text: "Expected Coal Supply Quantities - Non-Ut";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,cyr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCI(Scrv1,mx_nci) and MAP_globalyr_cyr(globalyr,cyr),
					USO2GRP_XCL_OTHER_D(SReg, Sulf, Mtyp, Rank,cyr))
				}
			}
			Parameter USO2GRP_XCL_OTHER_D {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "Expected Coal Supply Quantities - Non-Ut";
				Definition: {
					Sum((nsteps,pt2,DReg),
					ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
				}
			}
			Parameter USO2GRP_XCL_IMPORT_A {
				IndexDomain: (NDREGN,globalyr);
				Text: "Expected Coal Imports";
			}
			Parameter USO2GRP_XCL_STOCK_A {
				IndexDomain: (globalyr);
				Text: "Expected Coal Stock Changes";
				Definition: Sum((stockyr,stockreg)|stockyr in AllYears and stockyr=globalyr+1989,stocks(stockyr,stockreg));
			}
			Parameter USO2GRP_XCL_SO2_A {
				IndexDomain: (MX_NCI);
				Text: "SO2 Content by Supply Curve";
				Definition: {
					IF mx_nci < 42 then
					Sum((Scrv1,SReg,Sulf,Mtyp,Rank)|
					Map_Scrv1_MX_NCI(SCrv1,Mx_nci),
					Sulfur(Scrv1,SReg,Sulf,Mtyp,Rank)*2.0)
					else
					USO2GRP_XCL_SO2_C(MX_NCI)
					endif
				}
				Comment: "the units look messed up on this unless I add the units descriptor";
			}
			Parameter USO2GRP_XCL_SO2_YR_A {
				IndexDomain: (MX_NCI,globalyr);
				Text: "SO2 Content by Supply Curve";
				Definition: {
					IF mx_nci < 42 then
					Sum((Scrv1,SReg,Sulf,Mtyp,Rank)|
					Map_Scrv1_MX_NCI(SCrv1,Mx_nci),
					Sulfur(Scrv1,SReg,Sulf,Mtyp,Rank)*2.0)
					else
					USO2GRP_XCL_SO2_C(MX_NCI)
					endif
				}
				Comment: "the units look messed up on this unless I add the units descriptor";
			}
			Parameter USO2GRP_XCL_SO2_B {
				IndexDomain: (e,MX_NCI);
				Text: "Sulfur Dioxide Content by International Supply Curve";
				Definition: {
					if mx_nci > 41 and Map_intl_mxnci(e) = mx_nci then
					InternationalSO2Unit(e,'2')
					endif
				}
			}
			Parameter USO2GRP_XCL_SO2_C {
				IndexDomain: (MX_NCI);
				Text: "Carbon Content by Supply Curve";
				Definition: {
					if mx_nci > 41 then
					Sum(e,USO2GRP_XCL_SO2_B(e,MX_NCI))
					endif
				}
			}
			Parameter USO2GRP_XCL_HG_A {
				IndexDomain: (MX_NCI);
				Text: "Mercury Content by Supply Curve";
				Definition: {
					if mx_nci < 42 then
					Sum((Scrv1,SReg,Sulf,Mtyp,Rank)|
					Map_Scrv1_MX_NCI(SCrv1,mx_nci),
					Mercury(Scrv1,SReg,Sulf,Mtyp,Rank))
					else
					USO2GRP_XCL_HG_C(MX_NCI)
					endif
				}
			}
			Parameter USO2GRP_XCL_HG_YR_A {
				IndexDomain: (MX_NCI,globalyr);
				Text: "Mercury Content by Supply Curve";
				Definition: {
					if mx_nci < 42 then
					Sum((Scrv1,SReg,Sulf,Mtyp,Rank)|
					Map_Scrv1_MX_NCI(SCrv1,mx_nci),
					Mercury(Scrv1,SReg,Sulf,Mtyp,Rank))
					else
					USO2GRP_XCL_HG_C(MX_NCI)
					endif
				}
			}
			Parameter USO2GRP_XCL_HG_B {
				IndexDomain: (e,MX_NCI);
				Text: "Carbon Content by Supply Curve";
				Definition: {
					if mx_nci > 41 and Map_intl_mxnci(e) = mx_nci then
					InternationalMercuryUnit(e,'2')
					endif
				}
			}
			Parameter USO2GRP_XCL_HG_C {
				IndexDomain: (MX_NCI);
				Text: "Carbon Content by Supply Curve";
				Definition: {
					if mx_nci > 41 then
					Sum(e,USO2GRP_XCL_HG_B(e,MX_NCI))
					endif
				}
			}
			Parameter USO2GRP_XCL_CAR_A {
				IndexDomain: (MX_NCI);
				Text: "Carbon Content by Supply Curve";
				Definition: {
					if mx_nci < 42 then
					Sum((Scrv1,SReg,Sulf,Mtyp,Rank)|
					Map_Scrv1_MX_NCI(Scrv1,Mx_nci),
					Carbon(Scrv1,SReg,Sulf,Mtyp,Rank))
					else
					USO2GRP_XCL_CAR_C(MX_NCI)
					endif
				}
			}
			Parameter USO2GRP_XCL_CAR_YR_A {
				IndexDomain: (MX_NCI,globalyr);
				Text: "Carbon Content by Supply Curve";
				Definition: {
					if mx_nci < 42 then
					Sum((Scrv1,SReg,Sulf,Mtyp,Rank)|
					Map_Scrv1_MX_NCI(Scrv1,Mx_nci),
					Carbon(Scrv1,SReg,Sulf,Mtyp,Rank))
					else
					USO2GRP_XCL_CAR_C(MX_NCI)
					endif
				}
			}
			Parameter USO2GRP_XCL_CAR_B {
				IndexDomain: (e,MX_NCI);
				Text: "Carbon Content by Supply Curve";
				Definition: {
					if mx_nci > 41 and Map_intl_mxnci(e) = mx_nci then
					InternationalCO2Unit(e,'2')
					endif
				}
			}
			Parameter USO2GRP_XCL_CAR_C {
				IndexDomain: (MX_NCI);
				Text: "Carbon Content by Supply Curve";
				Definition: {
					if mx_nci > 41 then
					Sum(e,USO2GRP_XCL_CAR_B(e,MX_NCI))
					endif
				}
			}
			Parameter USO2GRP_XCL_TYPE_A {
				IndexDomain: (MX_NCI);
				Text: "ECP Coal Type by Coal Supply Curve";
				Definition: {
					if mx_nci < 42 then
					Sum(Scrv1|Map_Scrv1_MX_NCI(Scrv1,mx_nci),USO2GRP_XCL_TYPE_C(Scrv1))
					else
					1
					endif
				}
			}
			Parameter USO2GRP_XCL_TYPE_B {
				IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
				Text: "ECP Coal Type by Coal Supply Curve";
				Definition: {
					
					if LowSulfurSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and
					   BituminousSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) then
					1
					elseif MediumSulfurSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and
					       BituminousSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) then
					2
					elseif  HighSulfurSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and
					        BituminousSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) then
					3
					elseif LowSulfurSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and
					       SubbituminousSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) then
					4
					elseif MediumSulfurSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and
					       SubbituminousSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) then
					5
					elseif LigniteSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) then
					6
					endif
				}
			}
			Parameter USO2GRP_XCL_TYPE_C {
				IndexDomain: (Scrv1);
				Text: "ECP Coal Type by Coal Supply Curve";
				Definition: Sum((SReg, Sulf, Mtyp, Rank)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank), USO2GRP_XCL_TYPE_B(Scrv1,SReg, Sulf, Mtyp, Rank));
			}
			Parameter USO2GRP_ECP_PECP_A {
				IndexDomain: (MX_NCL,ECPXPH,globalyr)|ecpxph = 1 or ecpxph = 2 or ecpxph = 3 or ecpxph =4 or ecpxph =5;
				Text: "ECP Coal Supply Prices";
				Definition: {
					!USO2GRP_ECP_PECP_C(MX_NCL,globalyr)
					!Sum((Scrv1,Scrv,cyr)|Map_Scrv1_MX_NCL(Scrv1,mx_ncl)and Map_globalyr_cyr(globalyr,cyr)
					!and Btu(Scrv1,Scrv),
					!SupplyCurveStepBalShadow(Scrv,cyr))
				}
			}
			Parameter USO2GRP_ECP_PECP_B {
				IndexDomain: (Mx_ncl,ecpxph,globalyr);
				Definition: {
					!Sum((Scrv1)| Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
					!USO2GRP_ECP_PECP_B1(Scrv1,cyr))
				}
			}
			Parameter USO2GRP_ECP_PECP_B1 {
				IndexDomain: (Scrv1,cyr);
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank)|
					Btu(Scrv1,SReg, Sulf, Mtyp, Rank),MaxScrvPrice(SReg, Sulf, Mtyp, Rank,cyr))
				}
			}
			Parameter USO2GRP_ECP_PECP_C {
				IndexDomain: (MX_NCL,globalyr);
				Definition: {
					
					if ncntrl_curcalyr('1') - 1989 - globalyr < 5 then
					
					Sum(cyr|
					(cyr - 1989 - globalyr = 0 and globalyr = ncntrl_curcalyr('1') - 1989)
					or (cyr - 1989 - globalyr = 1 and globalyr = ncntrl_curcalyr('1') - 1989 - 1)
					or (cyr - 1989 - globalyr = 2 and globalyr = ncntrl_curcalyr('1') - 1989 - 2)
					or (cyr - 1989 - globalyr = 3 and globalyr = ncntrl_curcalyr('1') - 1989 - 3)
					or (cyr - 1989 - globalyr = 4 and globalyr = ncntrl_curcalyr('1') - 1989 - 4),
					
					USO2GRP_ECP_PECP_B1(MX_NCL,cyr))
					
					endif
				}
			}
			Parameter USO2GRP_XCL_TRATE_A {
				IndexDomain: (MX_NCL,NDREGN);
				Text: "Expected Coal Transportation Base Rates";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,DReg)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCL(Scrv1,MX_NCL) and !Dreg = Map_ndregn(NDREGN),
					Map_ndregn_DReg(NDReGN,DReg), Trate3x(SReg, Sulf, Mtyp, Rank,DReg))
				}
			}
			Parameter USO2GRP_XCL_TRATE_B {
				IndexDomain: (MX_NCL,NDREGN);
				Text: "Expected Coal Transportation Tier 2 Rates";
				Definition: {
					If USO2GRP_XCL_TRATE_A(MX_NCL,NDREGN) > 20 then
					  	999.99
					else
					  USO2GRP_XCL_TRATE_A(MX_NCL,NDREGN)
					endif
				}
			}
			Parameter USO2GRP_XCL_TRAT1_A {
				IndexDomain: (MX_NCL,NDREGN);
				Text: "Expected Coal 1st Tier Transportation Rate";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,DReg)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and Map_ndregn_DReg(ndregn,dreg),
					Trate2x(SReg, Sulf, Mtyp, Rank,DReg))
				}
			}
			Parameter USO2GRP_XCL_TRAT1_B {
				IndexDomain: (MX_NCL,NDREGN);
				Text: "Expected Coal 1st Tier Transportation Rate";
				Definition: {
					If USO2GRP_XCL_TRAT1_A(MX_NCL,NDREGN) > 20 then
					  999.99
					else
					  USO2GRP_XCL_TRAT1_A(MX_NCL,NDREGN)
					endif
				}
			}
			Parameter USO2GRP_XCL_TR_T1_A {
				IndexDomain: (MX_NCL,NDREGN,globalyr);
				Text: "Expected Coal 1st Tier Transportation Rate";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,DReg)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and Map_ndregn_DReg(ndregn,dreg),
					Trate2x(SReg, Sulf, Mtyp, Rank,DReg))
				}
			}
			Parameter USO2GRP_XCL_TR_T1_B {
				IndexDomain: (MX_NCL,NDREGN,globalyr);
				Text: "Expected Coal 1st Tier Transportation Rate";
				Definition: {
					If USO2GRP_XCL_TR_T1_A(MX_NCL,NDREGN,globalyr) > 20 then
					  999.99
					else
					  USO2GRP_XCL_TR_T1_A(MX_NCL,NDREGN,globalyr)
					endif
				}
			}
			Parameter USO2GRP_XCL_TR_T2_A {
				IndexDomain: (MX_NCL,NDREGN,globalyr);
				Text: "Expected Coal Transportation Base Rates";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,DReg)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCL(Scrv1,MX_NCL) and !Dreg = Map_ndregn(NDREGN),
					Map_ndregn_DReg(NDReGN,DReg), Trate3x(SReg, Sulf, Mtyp, Rank,DReg))
				}
			}
			Parameter USO2GRP_XCL_TR_T2_B {
				IndexDomain: (MX_NCL,NDREGN,globalyr);
				Text: "Expected Coal Transportation Base Rates";
				Definition: {
					If USO2GRP_XCL_TR_T2_A(MX_NCL,NDREGN,globalyr) > 20 then
					  999.99
					else
					  USO2GRP_XCL_TR_T2_A(MX_NCL,NDREGN,globalyr)
					endif
				}
			}
			Parameter USO2GRP_XCL_PCAP_A {
				IndexDomain: (MX_NCL,globalyr);
				Text: "Current Year Coal Supply Production Capa";
			}
			Parameter USO2GRP_XCL_PCAP_B {
				IndexDomain: (Scrv1,globalyr);
				Text: "Current Year Coal Supply Production Capa";
			}
			Parameter USO2GRP_XCL_PCAP_LIMIT_A {
				IndexDomain: (MX_NCL,globalyr);
				Text: "Maximum Coal Supply Production Capacity";
				Definition: USO2GRP_XCL_PCAP_A(MX_NCL,globalyr);
			}
			Parameter USO2GRP_XCL_MX_PCAP_A {
				IndexDomain: (MX_NCL);
				Text: "Maximum Rate of Increase in Production C";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank)|Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and Btu(Scrv1,SReg, Sulf, Mtyp, Rank),
					Util_Mid_Adj(Scrv1,SReg, Sulf, Mtyp, Rank))
				}
			}
			Parameter USO2GRP_XCL_MAX_INCR_A {
				IndexDomain: (MX_NCL,globalyr);
				Text: "Maximum Rate of Increase in Production C";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank)|Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and Btu(Scrv1,SReg, Sulf, Mtyp, Rank),
					Util_Mid_Adj(Scrv1,SReg, Sulf, Mtyp, Rank))
				}
			}
			Parameter USO2GRP_XCL_BTU_A {
				IndexDomain: (MX_NCI);
				Text: "BTU Content by Coal Supply Curve";
				Definition: {
					if mx_nci < 42 then
					Sum((Scrv1,SReg,Sulf,Mtyp,Rank)|
					Map_Scrv1_MX_NCI(SCrv1,mx_nci),
					Btu(Scrv1,SReg,Sulf,Mtyp,Rank))
					else
					USO2GRP_XCL_BTU_C(MX_NCI)
					endif
				}
			}
			Parameter USO2GRP_XCL_BTU_B {
				IndexDomain: (e,MX_NCI);
				Text: "Carbon Content by Supply Curve";
				Definition: {
					if mx_nci > 41 and Map_intl_mxnci(e) = mx_nci then
					InternationalHeatContent(e,'2')
					endif
				}
			}
			Parameter USO2GRP_XCL_BTU_C {
				IndexDomain: (MX_NCI);
				Text: "Carbon Content by Supply Curve";
				Definition: {
					if mx_nci > 41 then
					Sum(e,USO2GRP_XCL_BTU_B(e,MX_NCI))
					endif
				}
			}
			Parameter USO2GRP_XCL_PLIM_A {
				IndexDomain: (MX_NCL,globalyr);
				Text: "Coal Supply Production Capacity Maximum";
				Definition: {
					
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,cyr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank) and
					MAP_globalyr_cyr(globalyr,cyr) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
					SCLIMIT(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) *Btu(Scrv1,SReg, Sulf, Mtyp, Rank))
				}
			}
			Parameter USO2GRP_XCL_1TESC_A {
				IndexDomain: (MX_NCL,ECPFPH,globalyr,NDREGN);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					if (globalyr = ncntrl_curcalyr('1') - 1989) then
					USO2GRP_XCL_1TESC_E(MX_NCL,NDREGN,ECPFPH)endif
				}
			}
			Parameter USO2GRP_XCL_1TESC_A1 {
				IndexDomain: (MX_NCL,ECPFPH,yr,NDREGN);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum(cyr,
					If USO2GRP_XCL_1TESC_E1(MX_NCL,NDREGN,cyr,yr,ECPFPH)>0 then
					USO2GRP_XCL_1TESC_E1(MX_NCL,NDREGN,cyr,yr,ECPFPH)
					endif)
				}
			}
			Parameter USO2GRP_XCL_1TESC_B {
				IndexDomain: (MX_NCL,DReg,cyr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((Scrv1)|
					Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
					USO2GRP_XCL_1TESC_B1(Scrv1,DReg,cyr))
				}
			}
			Parameter USO2GRP_XCL_1TESC_B1 {
				IndexDomain: (Scrv1,DReg,cyr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank)|
					Btu(Scrv1,SReg, Sulf, Mtyp, Rank),
					NewEsc1(SReg, Sulf, Mtyp, Rank,DReg,cyr))
				}
			}
			Parameter USO2GRP_XCL_1TESC_C {
				IndexDomain: (MX_NCL,NDREGN,yr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((DReg)|Map_ndregn_DReg(ndregn,Dreg),
					USO2GRP_XCL_1TESC_B(MX_NCL,DReg,yr))
				}
			}
			Parameter USO2GRP_XCL_1TESC_C1 {
				IndexDomain: (MX_NCL,NDREGN,cyr,yr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					!Sum((DReg)|Map_ndregn_DReg(ndregn,Dreg),
					!USO2GRP_XCL_1TESC_B(MX_NCL,DReg,yr))
					Sum((DReg)|Map_ndregn_DReg(ndregn,Dreg) and
					(cyr - yr + 1) > 0,
					USO2GRP_XCL_1TESC_B(MX_NCL,DReg,cyr))
				}
			}
			Parameter USO2GRP_XCL_1TESC_D {
				IndexDomain: (MX_NCL,NDREGN,pyr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((yr)|yr = pyr,
					USO2GRP_XCL_1TESC_C(MX_NCL,NDREGN,yr))
				}
			}
			Parameter USO2GRP_XCL_1TESC_E {
				IndexDomain: (MX_NCL,NDREGN,ecpfph);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((pyr)|
					MAP_ecpfph_pyr(ECPFPH,pyr),
					USO2GRP_XCL_1TESC_D(MX_NCL,NDREGN,pyr))
				}
			}
			Parameter USO2GRP_XCL_1TESC_E1 {
				IndexDomain: (MX_NCL,NDREGN,cyr,yr,ecpfph);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					if  yr > Cpsbaseyr - 1 and (cyr-yr +1) > 0 and cyr-yr+1=ecpfph then
					USO2GRP_XCL_1TESC_C1(MX_NCL,NDREGN,cyr,yr)
					endif
				}
			}
			Parameter USO2GRP_XCL_2TESC_A {
				IndexDomain: (MX_NCL,ECPFPH,globalyr,NDREGN);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					if (globalyr = ncntrl_curcalyr('1') - 1989) then
					USO2GRP_XCL_2TESC_E(MX_NCL,NDREGN,ECPFPH)endif
				}
			}
			Parameter USO2GRP_XCL_2TESC_A1 {
				IndexDomain: (MX_NCL,ECPFPH,yr,NDREGN);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum(cyr,
					If USO2GRP_XCL_2TESC_E1(MX_NCL,NDREGN,cyr,yr,ECPFPH)>0 then
					USO2GRP_XCL_2TESC_E1(MX_NCL,NDREGN,cyr,yr,ECPFPH)
					endif)
				}
			}
			Parameter USO2GRP_XCL_2TESC_B {
				IndexDomain: (MX_NCL,DReg,cyr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((Scrv1)|
					Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
					USO2GRP_XCL_2TESC_B1(Scrv1,DReg,cyr))
				}
			}
			Parameter USO2GRP_XCL_2TESC_B1 {
				IndexDomain: (Scrv1,DReg,cyr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank)|
					Btu(Scrv1,SReg, Sulf, Mtyp, Rank),
					NewEsc2(SReg, Sulf, Mtyp, Rank,DReg,cyr))
				}
			}
			Parameter USO2GRP_XCL_2TESC_C {
				IndexDomain: (MX_NCL,NDREGN,cyr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((DReg)|Map_ndregn_DReg(ndregn,dreg),
					USO2GRP_XCL_2TESC_B(MX_NCL,DReg,cyr))
				}
			}
			Parameter USO2GRP_XCL_2TESC_C1 {
				IndexDomain: (MX_NCL,NDREGN,cyr,yr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					!Sum((DReg)|Map_ndregn_DReg(ndregn,Dreg),
					!USO2GRP_XCL_1TESC_B(MX_NCL,DReg,yr))
					Sum((DReg)|Map_ndregn_DReg(ndregn,Dreg) and
					(cyr - yr + 1) > 0,
					USO2GRP_XCL_2TESC_B(MX_NCL,DReg,cyr))
				}
			}
			Parameter USO2GRP_XCL_2TESC_D {
				IndexDomain: (MX_NCL,NDREGN,pyr);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((yr)|yr = pyr,
					USO2GRP_XCL_2TESC_C(MX_NCL,NDREGN,yr))
				}
			}
			Parameter USO2GRP_XCL_2TESC_E {
				IndexDomain: (MX_NCL,NDREGN,ecpfph);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					Sum((pyr)|map_ecpfph_pyr(ecpfph,pyr),
					USO2GRP_XCL_2TESC_D(MX_NCL,NDREGN,pyr))
				}
			}
			Parameter USO2GRP_XCL_2TESC_E1 {
				IndexDomain: (MX_NCL,NDREGN,cyr,yr,ecpfph);
				Text: "Expected Coal Transportation Escalation";
				Definition: {
					if  yr > Cpsbaseyr - 1 and (cyr-yr +1) > 0 and cyr-yr+1=ecpfph then
					USO2GRP_XCL_2TESC_C1(MX_NCL,NDREGN,cyr,yr)
					endif
				}
			}
			Parameter USO2GRP_EFD_PROD_A {
				IndexDomain: (MX_NCL);
				Text: "EFD Coal Production Capacity for Coal Su";
			}
			Parameter USO2GRP_EFD_PROD_A1 {
				IndexDomain: (Scrv1);
				Text: "EFD Coal Production Capacity for Coal Su";
			}
			Parameter USO2GRP_EFD_PROD_A2 {
				IndexDomain: (Scrv1,yr);
				Text: "EFD Coal Production Capacity for Coal Supply Curves by Year";
			}
			Parameter USO2GRP_EFD_TIER1_A {
				IndexDomain: (MX_NCL,NDREGN,NUTSEC);
				Text: "EFD Coal Tier 1 Transportation Limits";
				Definition: {
					
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,DReg)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and Map_ndregn_DReg(ndregn,DReg),
					USO2GRP_EFD_TIER1_B(SReg, Sulf, Mtyp, Rank,DReg,NUTSEC))
				}
			}
			Parameter USO2GRP_EFD_TIER1_LIM_A {
				IndexDomain: (MX_NCL,NDREGN,NUTSEC,GLOBALYR);
				Text: "EFD Coal Tier 1 Transportation Limits";
				Definition: {
					
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,DReg,cyr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and Map_ndregn_DReg(ndregn,DReg) and MAP_globalyr_cyr(globalyr,cyr),
					USO2GRP_EFD_TIER1_LIM_B(SReg, Sulf, Mtyp, Rank,DReg,NUTSEC,cyr))
				}
			}
			Parameter USO2GRP_EFD_TIER1_B {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,Nutsec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "EFD Coal Tier 1 Transportation Limits";
				Definition: {
					If nutsec = 1 then
					Sum((cyr),
					TrubndScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr))
					elseif nutsec = 2 then
					Sum((cyr),
					TrubndUnScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr))
					endif
				}
			}
			Parameter USO2GRP_EFD_TIER1_LIM_B {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,Nutsec,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "EFD Coal Tier 1 Transportation Limits";
				Definition: {
					If nutsec = 1 then
					TrubndScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					elseif nutsec = 2 then
					TrubndUnScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					endif
				}
			}
			Parameter USO2GRP_EFD_CONT_A {
				IndexDomain: (MX_NCI,NDREGN,M2,globalyr);
				Text: "EFD Coal Contracts (1 = scr, 2 = unscr)";
				Definition: {
					If USO2GRP_EFD_CONT_E(MX_NCI,NDREGN,M2,globalyr)>0 then
					USO2GRP_EFD_CONT_E(MX_NCI,NDREGN,M2,globalyr)
					else
					-1
					endif
				}
			}
			Parameter USO2GRP_EFD_CONT_B {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,M2,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "EFD Coal Tier 1 Transportation Limits";
				Definition: {
					If M2 = 1 then
					!Sum((yr)| yr = ncntrl_curcalyr('1'),
					Copy8c_CdyrsScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)!)
					elseif M2 = 2 then
					!Sum((yr)| yr = ncntrl_curcalyr('1'),
					Copy9c_CdyrsUnScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)!)
					endif
				}
			}
			Parameter USO2GRP_EFD_CONT_C {
				IndexDomain: (MX_NCI,DReg,M2,cyr);
				Text: "EFD Coal Contracts (1 = scr, 2 = unscr)";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank) and
					Map_Scrv1_MX_NCI(Scrv1,mx_nci),USO2GRP_EFD_CONT_B(SReg, Sulf, Mtyp, Rank,DReg,M2,cyr))
				}
			}
			Parameter USO2GRP_EFD_CONT_D {
				IndexDomain: (MX_NCI,NDREGN,M2,cyr);
				Text: "EFD Coal Contracts (1 = scr, 2 = unscr)";
				Definition: {
					Sum(DReg|Map_ndregn_DReg(Ndregn,DReg),
					USO2GRP_EFD_CONT_C(MX_NCI,DReg,M2,cyr))
				}
			}
			Parameter USO2GRP_EFD_CONT_E {
				IndexDomain: (MX_NCI,NDREGN,M2,globalyr);
				Text: "EFD Coal Contracts (1 = scr, 2 = unscr)";
				Definition: {
					Sum((cyr)|map_globalyr_cyr(globalyr,cyr),
					USO2GRP_EFD_CONT_D(MX_NCI,NDREGN,M2,cyr))
				}
			}
			Parameter COALEMM_EMM_CL_ECPT_Active_NUTSEC {
				IndexDomain: (MX_UNT,MNUMYR);
				Text: "ECP Type for Each Coal Unit in Each Forecast Year - Value of Zero/NULL for retired unit";
				Definition: {
					
					if COALEMM_EMM_CL_ECPT(MX_UNT,MNUMYR)<>99
					then COALEMM_EMM_CL_ECPT(MX_UNT,MNUMYR)
					endif
				}
				Comment: "Laura";
			}
			Parameter COALEMM_EMM_CL_ECPT_Active_FLAG {
				IndexDomain: (MX_UNT,MNUMYR);
				Text: "ECP Type for Each Coal Unit in Each Forecast Year - Value of Zero/NULL for retired unit";
				Definition: {
					
					if COALEMM_EMM_CL_ECPT_Active_NUTSEC(MX_UNT,MNUMYR) >0 Then 1
					else 0
					endif
				}
				Comment: "Laura";
			}
			Parameter COALEMM_EMM_CL_ECPT_Active_FLAG_PUID {
				IndexDomain: (pu_id,MNUMYR);
				Text: "ECP Type for Each Coal Unit in Each Forecast Year - Value of Zero/NULL for retired unit";
				Definition: {
					
					sum((MX_UNT), COALEMM_EMM_CL_ECPT_Active_FLAG(MX_UNT,MNUMYR)|Map_MX_UNT_pu_id(MX_UNT,pu_id))
				}
				Comment: "Laura";
			}
			Parameter UnitTypeYr {
				IndexDomain: (MX_UNT,MNUMYR,NUTSEC);
				Text: "Mapping for current plant group (NUTSEC) for each unit";
				Definition: NUTSEC = COALEMM_EMM_CL_ECPT_Active_NUTSEC(MX_UNT,MNUMYR);
			}
			Parameter EMM_CL_BTUS_NUTSEC {
				IndexDomain: (MX_UNT,MNUMYR,NUTSEC)| UnitTypeYr(MX_UNT,MNUMYR,NUTSEC);
				Definition: {
					If NUTSEC <> 99
					then COALEMM_EMM_CL_BTUs(MX_UNT,MNUMYR)
					endif
				}
			}
			Parameter Map_MX_UNT_NDREGN {
				IndexDomain: (MX_UNT,NDREGN);
				Definition: {
					!sum((pu_id),Unit_NDREGN(pu_id,NDREGN)) 
					
					!|Map_MX_UNT_pu_id(MX_UNT,pu_id)
				}
			}
			Parameter EMM_CL_BTUS_NUTSEC_NDREGN {
				IndexDomain: (PU_ID,MX_UNT,MNUMYR,NUTSEC,NDREGN) |Map_MX_UNT_pu_id(MX_UNT,PU_ID) and Unit_NDREGN(pu_id,NDREGN);
				Definition: EMM_CL_BTUS_NUTSEC(MX_UNT,MNUMYR,NUTSEC);
			}
			Parameter SDVCONCT {
				IndexDomain: (DReg,pt2);
				Text: "EFD Coal Diversity Constraints for Subituminous Coal";
				Definition: {
					
					Sum((Ndregn,nutsec)|Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(ndregn,dreg),
					USO2GRP_EFD_DVSB_E(NDREGN,NUTSEC))
				}
			}
			Parameter COALEMM_EMM_CL_BTUs_ForCoalContacts {
				IndexDomain: (MX_NCI,MX_UNT,MNUMYR);
				Text: "BTUs of Demand for Each Coal Unit";
				Definition: COALEMM_EMM_CL_BTUs(MX_UNT,MNUMYR)*COALEMM_CMM_TRANS_INDX_Alt(MX_NCI,MX_UNT);
				Comment: "Assume power plants (MX_UNT)  can access the same supply curves (NX_NCI) in all projection years (MNUMYR)  May 2022 DAF";
			}
			Parameter EMM_CL_BTUs_ForContactsB {
				IndexDomain: (MX_NCI,pu_id,MNUMYR);
				Text: "BTUs of Demand for Each Coal Unit Using Pu_id";
				Definition: {
					sum((MX_UNT), COALEMM_EMM_CL_BTUs_ForCoalContacts(MX_NCI,MX_UNT,MNUMYR) |Map_MX_UNT_pu_id(MX_UNT,pu_id))
					
					!sum((pu_id), EMM_CL_BTUs_A_AltScrv(pu_id,MX_NCI,yr) |Map_MX_UNT_pu_id(MX_UNT,pu_id))
				}
			}
			Parameter EMM_CL_BTUs_ForContactsC {
				IndexDomain: (MX_NCI,pu_id,pltnum,MNUMYR) |map_pltnum_puid(pu_id,pltnum);
				Text: "BTUs of Demand for Each Coal Unit In pu_id";
				Definition: EMM_CL_BTUs_ForContactsB(MX_NCI,pu_id,MNUMYR);
			}
			Parameter EMM_CL_BTUs_ForContactsD {
				IndexDomain: {
					(MX_NCI,pu_id,pltnum,MNUMYR) ! |map_pltnum_puid(pu_id,pltnum)
				}
				Text: "BTUs of Demand for Each Coal Unit";
				Definition: {
					EMM_CL_BTUs_ForContactsC(MX_NCI,pu_id,pltnum,MNUMYR) * EMM_UnitShareOfPlant(pu_id,pltnum,MNUMYR)
					
					!EMM_CL_BTUs_ForContactsB(MX_NCI,pu_id,MNUMYR)
					
					
					!sum((MX_UNT), COALEMM_EMM_CL_BTUs_ForCoalContacts(MX_NCI,MX_UNT,MNUMYR) |Map_MX_UNT_pu_id(MX_UNT,pu_id))
					
					!sum((pu_id), EMM_CL_BTUs_A_AltScrv(pu_id,MX_NCI,yr) |Map_MX_UNT_pu_id(MX_UNT,pu_id))
				}
			}
			Parameter EMM_max_BitBtus {
				IndexDomain: (NDREGN,NUTSEC,MNUMYR);
				Definition: sum((pu_id,MX_UNT),EMM_CL_BTUS_NUTSEC_NDREGN(pu_id,MX_UNT,MNUMYR,NUTSEC,NDREGN));
			}
			Parameter EMM_max_GOBBtus {
				IndexDomain: (NDREGN,NUTSEC,MNUMYR);
				Definition: sum((pu_id,MX_UNT),EMM_CL_BTUS_NUTSEC_NDREGN(pu_id,MX_UNT,MNUMYR,NUTSEC,NDREGN) * GOB_Share(pu_id));
			}
			Parameter EMM_max_LigBtus {
				IndexDomain: (NDREGN,NUTSEC,MNUMYR);
				Definition: {
					if MNUMYR > 19  and NUTSEC<> 99 then
					!sum((pu_id,MX_UNT),EMM_CL_BTUS_NUTSEC_NDREGN(pu_id,MX_UNT,MNUMYR,NUTSEC,NDREGN) *Lig_share(pu_id))+ 0.05
					sum((pu_id,MX_UNT),EMM_CL_BTUS_NUTSEC_NDREGN(pu_id,MX_UNT,MNUMYR,NUTSEC,NDREGN) *max(Lig_share(pu_id),GOB_share(pu_id)))+ 0.05
					else
					0
					endif
				}
				Comment: "This should be used for waste coal too.  Change to make it Lig_share or GOB_share  8-30-2022 DAF";
			}
			Parameter EMM_max_LigBtus_B {
				IndexDomain: (DReg,pt2,MNUMYR);
				Text: "Change index to DReg and CMM SubSec (p2)";
				Definition: sum((NUTSEC,NDREGN),  EMM_max_LigBtus(NDREGN,NUTSEC,MNUMYR) | Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(NDREGN,DReg));
			}
			Parameter EMM_max_LigBtus_C {
				IndexDomain: (DReg,pt2,MNUMYR,yr) | MAP_mnumyr_yr(MNUMYR,yr);
				Text: "Change index to DReg and CMM SubSec (p2)";
				Definition: EMM_max_LigBtus_B(DReg,pt2,MNUMYR);
			}
			Parameter EMM_max_LigBtus_D {
				IndexDomain: (DReg,pt2,yr);
				Definition: sum((MNUMYR), EMM_max_LigBtus_C(DReg,pt2,MNUMYR,yr));
			}
			Parameter EMM_max_SubBitBtus {
				IndexDomain: (NDREGN,NUTSEC,MNUMYR);
				Definition: {
					if MNUMYR > 19  and NUTSEC<> 99 then
					sum((pu_id,MX_UNT),EMM_CL_BTUS_NUTSEC_NDREGN(pu_id,MX_UNT,MNUMYR,NUTSEC,NDREGN) *SubBit_share(pu_id))+ 0.05
					Else
					0
					endif
				}
			}
			Parameter EMM_max_SubBitBtus_B {
				IndexDomain: (DReg,pt2,MNUMYR);
				Definition: sum((NUTSEC,NDREGN),  EMM_max_SubBitBtus(NDREGN,NUTSEC,MNUMYR) | Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(NDREGN,DReg));
			}
			Parameter EMM_max_SubBitBtus_C {
				IndexDomain: (DReg,pt2,MNUMYR,yr) | MAP_mnumyr_yr(MNUMYR,yr);
				Text: "Change index to DReg and CMM SubSec (p2)";
				Definition: EMM_max_SubBitBtus_B(DReg,pt2,MNUMYR);
			}
			Parameter EMM_max_SubBitBtus_D {
				IndexDomain: (DReg,pt2,yr);
				Definition: sum((MNUMYR), EMM_max_SubBitBtus_C(DReg,pt2,MNUMYR,yr));
			}
			Parameter EMM_CL_BTUS_ByPlantGrp {
				IndexDomain: (NUTSEC,MNUMYR);
			}
			Parameter USO2GRP_EFD_DVSB_B {
				IndexDomain: (NDRegn,NUTSEC);
				Text: "EFD Coal Contracts (1 = scr, 2 = unscr)";
				Definition: {
					Sum((pt2,DReg,cyr)|Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(ndregn,dreg),
					Sdvconct_2(pt2,DReg,cyr))
				}
			}
			Parameter USO2GRP_EFD_DVSB_B1 {
				IndexDomain: (NDRegn,NUTSEC,yr);
				Text: "EFD Coal Contracts (1 = scr, 2 = unscr)";
				Definition: {
					Sum((pt2,DReg)|Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(ndregn,dreg),
					Sdvconct_2(pt2,DReg,yr))
				}
			}
			Parameter USO2GRP_EFD_DVSB_B2 {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR,yr);
				Text: "EFD Coal Contracts (1 = scr, 2 = unscr)";
				Definition: {
					Sum((pt2,DReg)|Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(ndregn,dreg) and MAP_mnumyr_yr(MNUMYR,yr),
					Sdvconct_2(pt2,DReg,yr))
				}
			}
			Parameter USO2GRP_EFD_DVSB_D {
				IndexDomain: (NDRegn,NUTSEC);
				Text: "EFD Coal Diversity Constraints for Subbituminous Coal";
				Definition: {
					if EMM_CLCON(NDREGN,NUTSEC)>0 then
					(USO2GRP_EFD_DVSB_B(NDREGN,NUTSEC)/EMM_CLCON(NDREGN,NUTSEC))
					endif
				}
			}
			Parameter USO2GRP_EFD_DVSB_YR_D {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR,yr);
				Text: "EFD Coal Diversity Constraints for Subbituminous Coal";
				Definition: {
					if EMM_CLCON_YR(NDREGN,NUTSEC,MNUMYR) >0 then
					(USO2GRP_EFD_DVSB_B2(NDREGN,NUTSEC,MNUMYR,yr)/EMM_CLCON_YR(NDREGN,NUTSEC,MNUMYR))
					endif
				}
			}
			Parameter USO2GRP_EFD_DVSB_YR_D1 {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR);
				Text: "EFD Coal Diversity Constraints for Subbituminous By NEMS Year";
				Definition: sum(yr, USO2GRP_EFD_DVSB_YR_D(NDRegn,NUTSEC,MNUMYR,yr));
			}
			Parameter USO2GRP_EFD_DVSB_E {
				IndexDomain: (NDRegn,NUTSEC);
				Text: "EFD Coal Diversity Constraints for Subbituminous";
				Definition: USO2GRP_EFD_DVSB_D(NDREGN,NUTSEC)*(COALEMM_QCLCLNR(NDReGN, NCNTRL_CURIYR(1), NUTSEC) + 1.0);
			}
			Parameter USO2GRP_EFD_DVSB_YR_E {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR);
				Text: "EFD Coal Diversity Constraints for Subbituminous";
				Definition: {
					IF USO2GRP_EFD_DVSB_YR_D1(NDREGN,NUTSEC,MNUMYR) > 0 THEN
					USO2GRP_EFD_DVSB_YR_D1(NDREGN,NUTSEC,MNUMYR)*(COALEMM_QCLCLNR(NDReGN, MNUMYR, NUTSEC) + 1.0)
					ELSE
					1
					ENDIF
				}
			}
			Parameter USO2GRP_EFD_DVSB_A {
				IndexDomain: (NDRegn,NUTSEC);
				Text: "EFD Coal Contracts (1 = scr, 2 = unscr)";
				Definition: {
					If USO2GRP_EFD_DVSB_E(NDREGN,NUTSEC)>0 then
					USO2GRP_EFD_DVSB_E(NDREGN,NUTSEC)
					else
					1
					endif
				}
			}
			Parameter USO2GRP_EFD_DVSB_YR_A {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR);
				Text: "EFD Coal Diversity Constraints for Lignite";
				Definition: {
					If USO2GRP_EFD_DVSB_YR_E(NDREGN,NUTSEC,MNUMYR)>0 then
					USO2GRP_EFD_DVSB_YR_E(NDREGN,NUTSEC,MNUMYR)
					else
					-1
					endif
				}
				Comment: "If missing we code this as a -1";
			}
			Parameter LDVCONCT {
				IndexDomain: (DReg,pt2);
				Text: "EFD Coal Diversity Constraints for Lignite Coal";
				Definition: {
					
					Sum((Ndregn,nutsec)|Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(ndregn,dreg),
					USO2GRP_EFD_DVLG_E(NDREGN,NUTSEC))
				}
			}
			Parameter USO2GRP_EFD_DVLG_B {
				IndexDomain: (NDRegn,NUTSEC);
				Text: "EFD Coal Diversity Constraints for Lignite";
				Definition: {
					Sum((pt2,DReg,cyr)|Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(ndregn,dreg),
					Ldvconct_2(pt2,DReg,cyr))
				}
			}
			Parameter USO2GRP_EFD_DVLG_B1 {
				IndexDomain: (NDRegn,NUTSEC,cyr);
				Text: "Lignite Contracts";
				Definition: {
					Sum((pt2,DReg)|Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(ndregn,dreg) ,
					Ldvconct_2(pt2,DReg,cyr))
				}
			}
			Parameter USO2GRP_EFD_DVLG_B2 {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR,yr);
				Text: "Lignite Contracts In NEMS space";
				Definition: {
					
					Sum((pt2,DReg)|Map_nutsec_pt3(NUTSEC,pt2) and Map_ndregn_DReg(ndregn,dreg) and MAP_mnumyr_yr(MNUMYR,yr),
					Ldvconct_2(pt2,DReg,yr))
				}
			}
			Parameter EMM_CLCON {
				IndexDomain: (NDRegn,NUTSEC);
				Text: "EMM Coal Consumption by ECP Type and CDS";
				Definition: USO2GRP_UQCOAL(Nutsec,NDREGN,ncntrl_curiyr(1));
				Comment: "Used as denominator of Lignite and Subbituminous Diversity Limits";
			}
			Parameter EMM_CLCON_YR {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR);
				Text: "EMM Coal Consumption by ECP Type and Coal Demand Region";
				Definition: USO2GRP_UQCOAL(Nutsec,NDREGN,MNUMYR);
				Comment: "Used as denominator of Lignite and Subbituminous Diversity Limits";
			}
			Parameter USO2GRP_EFD_DVLG_D {
				IndexDomain: (NDRegn,NUTSEC);
				Text: "EFD Coal Diversity Constraints for Lignite";
				Definition: {
					if EMM_CLCON(NDREGN,NUTSEC)>0 AND USO2GRP_EFD_DVLG_B(NDREGN,NUTSEC) > 0 then
					(USO2GRP_EFD_DVLG_B(NDREGN,NUTSEC)/EMM_CLCON(NDREGN,NUTSEC))
					ELSE
					0
					endif
				}
			}
			Parameter USO2GRP_EFD_DVLG_YR_D {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR,yr);
				Text: "EFD Coal Diversity Constraints for Lignite";
				Definition: {
					if EMM_CLCON_YR(NDREGN,NUTSEC,MNUMYR)>0 AND USO2GRP_EFD_DVLG_B(NDREGN,NUTSEC) > 0 then
					(USO2GRP_EFD_DVLG_B2(NDREGN,NUTSEC,MNUMYR,yr)/EMM_CLCON_YR(NDREGN,NUTSEC,MNUMYR))
					ELSE
					0
					endif
				}
			}
			Parameter USO2GRP_EFD_DVLG_YR_D1 {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR);
				Text: "EFD Coal Diversity Constraints for Lignite By NEMS Year";
				Definition: sum(yr, USO2GRP_EFD_DVLG_YR_D(NDRegn,NUTSEC,MNUMYR,yr));
			}
			Parameter USO2GRP_EFD_DVLG_E {
				IndexDomain: (NDRegn,NUTSEC);
				Text: "EFD Coal Diversity Constraints for Lignite";
				Definition: {
					IF USO2GRP_EFD_DVLG_D(NDREGN,NUTSEC) > 0 THEN
					
					USO2GRP_EFD_DVLG_D(NDREGN,NUTSEC)*(COALEMM_QCLCLNR(NDReGN, NCNTRL_CURIYR(1), NUTSEC) + 1.0)
					ELSE
					1
					ENDIF
				}
			}
			Parameter USO2GRP_EFD_DVLG_YR_E {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR);
				Text: "EFD Coal Diversity Constraints for Lignite";
				Definition: {
					IF USO2GRP_EFD_DVLG_YR_D1(NDREGN,NUTSEC,MNUMYR) > 0 THEN
					
					USO2GRP_EFD_DVLG_YR_D1(NDREGN,NUTSEC,MNUMYR)*(COALEMM_QCLCLNR(NDReGN, MNUMYR, NUTSEC) + 1.0)
					ELSE
					1
					ENDIF
				}
			}
			Parameter USO2GRP_EFD_DVLG_A {
				IndexDomain: (NDRegn,NUTSEC);
				Text: "EFD Coal Diversity Constraints for Lignite";
				Definition: {
					If USO2GRP_EFD_DVLG_E(NDREGN,NUTSEC)>0 then
					USO2GRP_EFD_DVLG_E(NDREGN,NUTSEC)
					else
					-1
					endif
				}
				Comment: "If missing we code this as a -1";
			}
			Parameter USO2GRP_EFD_DVLG_YR_A {
				IndexDomain: (NDRegn,NUTSEC,MNUMYR);
				Text: "EFD Coal Diversity Constraints for Lignite";
				Definition: {
					If USO2GRP_EFD_DVLG_YR_E(NDREGN,NUTSEC,MNUMYR)>0 then
					USO2GRP_EFD_DVLG_YR_E(NDREGN,NUTSEC,MNUMYR)
					else
					-1
					endif
				}
				Comment: "If missing we code this as a -1";
			}
			Parameter USO2GRP_EFD_SC_DR_PT_A {
				IndexDomain: (MX_NCI,NDREGN,NUTSEC);
				Definition: {
					Sum((pt2)|Map_nutsec_pt3(NUTSEC,pt2),
					USO2GRP_EFD_SC_DR_PT_B(MX_NCI,NDREGN,pt2))
				}
				Comment: "I winged this one...not sure what the purpose is";
			}
			Parameter USO2GRP_EFD_SC_DR_PT_B {
				IndexDomain: (MX_NCI,NDREGN,pt2);
				Definition: {
					Sum((cyr)|!yr = ncntrl_curcalyr('1')
					!and
					USO2GRP_XCL_2TESC_C(MX_NCI,NDREGN,cyr)>0,
					1)
				}
				Comment: "I winged this one...not sure what the purpose is";
			}
			Parameter USO2GRP_EFD_RANK_A {
				IndexDomain: (MX_NCI);
				Text: "EFD Coal Rank Indicator";
				Definition: {
					
					if mx_nci < 42 then
						Sum((Scrv1,SReg,Sulf,Mtyp,Rank)| Btu(Scrv1,SReg,Sulf,Mtyp,Rank) > 0 and Scrv1 = MX_NCI,
						if (Rank = '1B' and Sulf = '1C') then
						1
						elseif (Rank = '1B' and Sulf = '2M') THEN
						1
						elseif (Rank = '1B' and Sulf = '3H') THEN
						1
						elseif (Rank = '2S' and Sulf = '1C') THEN
						2
						elseif (Rank = '2S' and Sulf = '2M') THEN
						2
						elseif (Rank = '3L' or Rank = '5G')  THEN
						3
						endif)
					else
						1
					endif
				}
			}
			Parameter USO2GRP_CTLBTU_A {
				IndexDomain: (MX_NCL,NDREGN,globalyr);
				Text: "Coal-to-liquids quantity for calc of emi";
				Definition: {
					Sum((DReg)|USO2GRP_CTL_CLDR_A(NDREGN) and Map_ndregn_DReg(ndregn,dreg),
					USO2GRP_CTLBTU_B(MX_NCL,DReg,globalyr))
				}
			}
			Parameter USO2GRP_CTLBTU_B {
				IndexDomain: (MX_NCL,DReg,globalyr);
				Text: "Coal-to-liquids quantity for calc of emi";
				Definition: {
					Sum((cyr,Scrv1,SReg, Sulf, Mtyp, Rank,LiquSec)|map_globalyr_cyr(globalyr,cyr)
					and Btu(Scrv1,SReg, Sulf, Mtyp, Rank) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
					LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter USO2GRP_XCL_PIMP_A {
				IndexDomain: (MX_ISC,MX_IST,globalyr);
				Text: "Coal import supply curve/step prices (th";
				Definition: {
					Sum((cyr)|MAP_globalyr_cyr(globalyr,cyr),
					USO2GRP_XCL_PIMP_B(MX_ISC,MX_IST,cyr))
				}
				Comment: "need to check the units I think needs to change to 87 dollars still";
			}
			Parameter USO2GRP_XCL_PIMP_B {
				IndexDomain: (MX_ISC,MX_IST,cyr);
				Text: "Coal import supply curve/step prices (th";
				Definition: {
					Sum((nUS,s)|Map_e_MX_ISC(nUS,MX_ISC) and
					s = mx_ist and InternationalHeatContent(nUS,'2'),
					InternationalFOBScalintBTU(nUS,s,'2',cyr))
				}
			}
			Parameter USO2GRP_XCL_QIMP_A {
				IndexDomain: (MX_ISC,MX_IST,globalyr);
				Text: "Coal import supply curve/step prices (th";
				Definition: {
					Sum((cyr)|MAP_globalyr_cyr(globalyr,cyr),
					USO2GRP_XCL_QIMP_B(MX_ISC,MX_IST,cyr))
				}
				Comment: "need to check the units I think needs to change to 87 dollars still";
			}
			Parameter USO2GRP_XCL_QIMP_B {
				IndexDomain: (MX_ISC,MX_IST,cyr);
				Text: "Coal import supply curve/step prices (th";
				Definition: {
					Sum((nUS,s)|Map_e_MX_ISC(nUS,MX_ISC)=1 and
					s = mx_ist,
					InternationalSupplyBtu(nUS,s,'2',cyr))
				}
			}
			Parameter USO2GRP_CTL_TRATE_B {
				IndexDomain: (MX_NCL,NDREGN);
				Text: "Expected Coal Transportation Rates for C";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,DReg,LiquSec)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl)
					and DReg = Map_ndregn(NDREGN),
					Trate1Liqu(SReg, Sulf, Mtyp, Rank,DReg,LiquSec))
				}
			}
			Parameter USO2GRP_CTL_TRATE_A {
				IndexDomain: (MX_NCL,NDREGN);
				Text: "Expected Coal Transportation Rates for CTL";
				Definition: {
					If USO2GRP_CTL_TRATE_B(MX_NCL,NDREGN)>0 then
					 USO2GRP_CTL_TRATE_B(MX_NCL,NDREGN)
					 else
					 999.99!*10^6
					 endif
				}
			}
			Parameter USO2GRP_CTL_OTHER_A {
				IndexDomain: (MX_NCL,globalyr);
				Text: "Expected Coal Demand for Non - Coal to L";
				Definition: USO2GRP_CTL_OTHER_B(MX_NCL,globalyr)-USO2GRP_CTL_OTHER_C(MX_NCL,globalyr);
			}
			Parameter USO2GRP_CTL_OTHER_B {
				IndexDomain: (MX_NCL,globalyr);
				Text: "Expected Coal Demand for Non - Coal to L";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,cyr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and map_globalyr_cyr(globalyr,cyr),
					ProductionVolume(SReg, Sulf, Mtyp, Rank,cyr))
				}
			}
			Parameter USO2GRP_CTL_OTHER_C {
				IndexDomain: (MX_NCL,globalyr);
				Text: "Expected Coal Demand for Non - Coal to L";
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
					and Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and map_globalyr_cyr(globalyr,cyr),
					LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter USO2GRP_CTL_CLDR_A {
				IndexDomain: (NDREGN);
				Text: "CTL Coal Demand Regions (0 => No CTL Dem";
				Definition: Sum((DReg,cyr)|LiquidDemand(DReg,cyr) and Map_ndregn(NDREGN) = DReg,1);
			}
			Parameter USO2GRP_XCL_TRATI2_A {
				IndexDomain: (M4,MX_ISC,NDREGN,globalyr);
				Text: "International Freight Rate for US Coal imports";
				Definition: sum ((yr) |map_globalyr_cyr(globalyr,yr), USO2GRP_XCL_TRATI2_C(M4,MX_ISC,NDREGN,YR));
				Comment: "M4 is US Importing regions(USi) UI =1 , UE=2, UG=3, and UNN=4";
			}
			Parameter USO2GRP_XCL_TRATI2_B {
				IndexDomain: (M4,MX_ISC,NDREGN,tc,yr);
				Text: "International Freight Rate for US Coal imports";
				Definition: {
					if tc = '2' then 
					Sum((nUS,DReg,USi) |Map_e_MX_ISC(nUS,MX_ISC) and Map_Ndregn_DReg(NDREGN,DReg) and Map_USi_M4(USi,M4),
					InternationalUnitTransportBtuUSImp87D(nUS,USi,tc,yr))
					Endif
				}
				Comment: {
					"M4 is US Importing regions(USi) UI =1 , UE=2, UG=3, and UNN=4
					MX_ISC is 12 coal supply curves in old international structure map to nUS"
				}
			}
			Parameter USO2GRP_XCL_TRATI2_C {
				IndexDomain: (M4,MX_ISC,NDREGN,yr);
				Text: "International Freight Rate for US Coal imports";
				Definition: sum((tc), USO2GRP_XCL_TRATI2_B(M4,MX_ISC,NDREGN,tc,yr));
				Comment: {
					"M4 is US Importing regions(USi) UI =1 , UE=2, UG=3, and UNN=4
					MX_ISC is 12 coal supply curves in old international structure map to nUS"
				}
			}
			Parameter USO2GRP_XCL_TR_IN_A {
				IndexDomain: (M4,MX_ISC,NDREGN,globalyr);
				Text: "Inland Coal Transport Rate for US Coal imports -Power Sector only";
				Comment: {
					"M4 is US Importing regions(USi) UI =1 , UE=2, UG=3, and UNN=4
					Value assigned in Copy_Global procedure"
				}
			}
			Parameter USO2GRP_XCL_TR_IN_B {
				IndexDomain: (M4,MX_ISC,NDREGN,ImpSec);
				Text: "Inland Coal Transport Rate for US Coal imports -Power Sector only";
				Definition: {
					if ImpSec = 'E' then 
					Sum((nUS,DReg,USi) |Map_e_MX_ISC(nUS,MX_ISC) and Map_Ndregn_DReg(NDREGN,DReg) and Map_USi_M4(USi,M4),
					InlandImportTranspRateBtu('E',nUS,DReg,USi))
					Endif
				}
				Comment: "M4 is US Importing regions(USi) UI =1 , UE=2, UG=3, and UNN=4";
			}
			Parameter USO2GRP_XCL_TR_IN_C {
				IndexDomain: (M4,MX_ISC,NDREGN);
				Text: "Inland Coal Transport Rate for US Coal imports -Power Sector only";
				Definition: sum ((ImpSec), USO2GRP_XCL_TR_IN_B(M4,MX_ISC,NDREGN,ImpSec));
				Comment: "M4 is US Importing regions(USi) UI =1 , UE=2, UG=3, and UNN=4";
			}
			Parameter USO2GRP_XCL_TESCI_A {
				IndexDomain: (M4,globalyr,NDREGN);
				Definition: {
					
					sum ((yr) |map_globalyr_cyr(globalyr,yr), USO2GRP_XCL_TESCI_C(M4,yr,NDREGN))
				}
			}
			Parameter USO2GRP_XCL_TESCI_B {
				IndexDomain: (M4,yr);
				Definition: {
					
					FinalRCAFindex(yr)
				}
			}
			Parameter USO2GRP_XCL_TESCI_C {
				IndexDomain: (M4,yr,NDREGN);
				Definition: {
					
					USO2GRP_XCL_TESCI_B(M4,yr)
				}
			}
		}
		DeclarationSection Integration_Out_Emission {
			Parameter EMISSION_EMELPSO2_A {
				IndexDomain: (globalyr,MX_SO2);
				Text: "CDS Sulfur dioxide emission allowance pr";
				Definition: {
					sum((cyr)|map_globalyr_cyr(globalyr,cyr),
					SULFPENConstraint.Shadowprice(cyr,MX_SO2))*1000.0*(-1.0)
				}
			}
			Parameter EMISSION_TOT_MERC_A {
				IndexDomain: (globalyr);
				Text: "Mercury Emission by Year";
				Definition: {
					Sum((ndrggn,nutsec),
					ControlledMercurybyDrYrandPlant(NDRGGN,globalyr,NUTSEC))
				}
			}
			Parameter EMISSION_EMEL_PHG_A {
				IndexDomain: (NDREGN,globalyr);
				Text: "Mercury Penalty Price by Group and Year";
				Definition: {
					Sum((cyr)| map_globalyr_cyr(globalyr,cyr) and
					NDREGN = 1, Emel_phg(cyr))
				}
				Comment: {
					"mercp01 only; no"
				}
			}
		}
		DeclarationSection Integration_Out_Mpblk {
			Parameter MPBLK_PCLRS_A {
				IndexDomain: (MNUMCR,MNUMYR);
				Text: "Coal - Residential";
			}
			Parameter MPBLK_PCLIN_A {
				IndexDomain: (MNUMCR,globalyr);
				Text: "Industrial Coal Price By Census Region (1987$/MMBtu)";
				Comment: "Calculated in Copy_Global procedure";
			}
			Parameter MPBLK_PCLIN_B {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: {
					IndustrialTransport(SReg,sulf,Mtyp,Rank,IndSec,DReg,cyr)*
					PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr)
				}
			}
			Parameter MPBLK_PCLIN_C {
				IndexDomain: (DReg,cyr);
				Text: "Coal - Industrial Mine Price Dollars plus Transport Cost By Coal Demand Region (1987$)";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,IndSec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),(MPBLK_PCLIN_B(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr)+
					IndustrialTransportCost(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr)))
				}
			}
			Parameter MPBLK_PCLIN_IMP_Dol {
				IndexDomain: (DReg,cyr);
				Text: "Imported US Coal Total Dollars - Industrial Steam coal";
				Definition: {
					
					sum ((IndSec,nUS,USi),
					ImportsIndustrial(IndSec,DReg,nUS,USi,cyr) *( InternationalUnitTransportBtuNonUS87D(nUS,USi,'2',cyr) |USDRegImportMapping(USi,DReg)
					+ InlandImportTranspRateBtu('I',nUs,DReg,USi) ))
					+ sum((nUS), ImportsIndustrial_nUS_FOBDollars(DReg,NUS,cyr))
				}
				Comment: "Added 8-17-20 as imported coal cost may be missing from US Price.";
			}
			Parameter MPBLK_PCLIN_C1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - Industrial Delivered Dollars";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,MNUMCR),mpblk_pclin_c(DReg,cyr) + MPBLK_PCLIN_IMP_Dol(dReg,cyr) );
				Comment: "Changed to add imported coal dollars to mine dollars";
			}
			Parameter MPBLK_PCLIN_C2 {
				IndexDomain: (cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg,mpblk_pclin_C(DReg,cyr)+ MPBLK_PCLIN_IMP_Dol(dReg,cyr));
			}
			Parameter MPBLK_PCLIN_D {
				IndexDomain: (DReg,cyr);
				Text: "Coal Transported to Industrial Sector By Coal Demand Region- Volume (TBtus)";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,IndSec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					IndustrialTransport(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr))
				}
			}
			Parameter MPBLK_PCLIN_Imp_Vol {
				IndexDomain: (DReg,cyr);
				Text: "Coal Imported to Industrial Sector By Coal Demand Region- Volume (TBtus)";
				Definition: {
					sum ((IndSec,nUS,USi),
					ImportsIndustrial(IndSec,DReg,nUS,USi,cyr) )
				}
			}
			Parameter MPBLK_PCLIN_D1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - Industrial Steam Volumes By Census Region (TBtus)";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,Mnumcr), mpblk_pclin_d(DReg,cyr) + MPBLK_PCLIN_Imp_Vol(DReg,cyr) );
			}
			Parameter MPBLK_PCLIN_D2 {
				IndexDomain: (cyr);
				Text: "Coal - Industrial Total Volume (TBtus)";
				Definition: Sum(DReg,mpblk_pclin_d(DReg,cyr) + MPBLK_PCLIN_Imp_Vol(DReg,cyr) );
			}
			Parameter MPBLK_PCLEL_A {
				IndexDomain: (MNUMCR,globalyr);
				Text: "Coal Price - Electric Power Sector By Census Region (1987$/MMBtu)";
				Comment: "This is the delivered coal price calculated in Copy_Global procedure.  Census regions 1 to 9, 10 blank, 11 National Price";
			}
			Parameter MPBLK_PCLEL_B {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "Coal Domestic Supply Cost for Electricity - Mine Price * Transport Volume (no transport cost)";
				Definition: {
					Sum((nsteps,pt2)|nsteps < 3 and Btu2(SReg, Sulf, Mtyp, Rank),
					ElectricityTransportAC(NSteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr)*
					PriceSolutionBySC(SReg, Sulf, Mtyp, Rank,cyr))
				}
			}
			Parameter MPBLK_PCLEL_C {
				IndexDomain: (DReg,cyr);
				Text: "Coal - Electricity Mine Dollars plus Transport Cost By Coal Demand Region (1987$)";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),(MPBLK_PCLEL_B(SReg, Sulf, Mtyp, Rank,DReg,cyr)))
					
					+ Sum((SReg, Sulf, Mtyp, Rank,pt2)|Btu2(SReg, Sulf, Mtyp, Rank) and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),  !volume not using activated carbon
					Trate2wSurchBtu('1',SReg, Sulf, Mtyp, Rank,DReg,'E',cyr)
					* ElectricityTransportAC('1',SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					
					
					+Sum((SReg, Sulf, Mtyp, Rank,pt2)|Btu2(SReg, Sulf, Mtyp, Rank) and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),  !volume using activated carbon
					Trate2wSurchBtu('2',SReg, Sulf, Mtyp, Rank,DReg,'E',cyr)
					* ElectricityTransportAC('2',SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					
					+ Sum((SReg, Sulf, Mtyp, Rank,pt2)|Btu2(SReg, Sulf, Mtyp, Rank) and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),  !incremental 2nd tier cost
					ElectricityTransport2Cost(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
				}
			}
			Parameter MPBLK_PCLEL_C1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal Delivered to Electricity Sector Total Dollars By Census Region (1987$)";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,MNUMCR),mpblk_pclel_c(DReg,cyr));
			}
			Parameter MPBLK_PCLEL_C2 {
				IndexDomain: (cyr);
				Text: "Delivered Coal Cost to Electricity Sector Total Dollars (1987$) for Solution Year";
				Definition: Sum(DReg,mpblk_pclel_c(DReg,cyr));
			}
			Parameter MPBLK_PCLEL_D {
				IndexDomain: (DReg,cyr);
				Text: "Coal Transported to Electricity Sector By Coal Demand Region- Volume (TBtus)";
				Definition: {
					Sum((nsteps,SReg, Sulf, Mtyp, Rank,pt2)|nsteps < 3 and Btu2(SReg, Sulf, Mtyp, Rank),
					ElectricityTransportAC(NSteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
				}
			}
			Parameter MPBLK_PCLEL_D1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal Transported to Electricity Sector By Census Region- Volume (TBtus)";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,Mnumcr),mpblk_pclel_d(DReg,cyr));
			}
			Parameter MPBLK_PCLEL_D2 {
				IndexDomain: (cyr);
				Text: "Coal Transported to Electricity Sector Total US - Volume (TBtus)";
				Definition: Sum(DReg,mpblk_pclel_d(DReg,cyr));
			}
			Parameter MPBLK_PCLSN_A {
				IndexDomain: (MNUMCR,globalyr);
				Text: "CTL Coal Price By Census Region (1987$/MMBtu)";
				Definition: {
					if mnumcr < 11 then
					Sum(cyr|mpblk_pclsn_d1(mnumcr,cyr) and map_globalyr_cyr(globalyr,cyr),
					mpblk_pclsn_c1(mnumcr,cyr)/mpblk_pclsn_d1(mnumcr,cyr))
					else
					Sum (cyr|map_globalyr_cyr(globalyr,cyr) and mpblk_pclsn_d2(cyr),
					mpblk_pclsn_c2(cyr)/mpblk_pclsn_d2(cyr))
					endif
				}
				Comment: "Calculated in Copy_Global procedure";
			}
			Parameter MPBLK_PCLSN_B {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr);
				Text: "Coal - Liquids Mine Price Dollars";
				Definition: {
					LiquidsTransport(SReg,sulf,Mtyp,Rank,LiquSec,DReg,cyr)*
					PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr)
				}
			}
			Parameter MPBLK_PCLSN_C {
				IndexDomain: (DReg,cyr);
				Text: "Coal - Liquids Mine Price Dollars plus Transport Cost By Coal Demand Region (1987$)";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,LiquSec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),(MPBLK_PCLSN_B(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)+
					LiquidsTransportCost(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)))
				}
			}
			Parameter MPBLK_PCLSN_C1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - Liquids Mine Price Dollars";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,MNUMCR),mpblk_pclsn_c(DReg,cyr));
			}
			Parameter MPBLK_PCLSN_C2 {
				IndexDomain: (cyr);
				Text: "Coal - Liquids Mine Price Dollars";
				Definition: Sum(DReg,mpblk_pclsn_c(DReg,cyr));
			}
			Parameter MPBLK_PCLSN_D {
				IndexDomain: (DReg,cyr);
				Text: "Coal Transport to CTL Sector by Coal Demand Region (TBtus)";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,LiquSec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter MPBLK_PCLSN_D1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - Liquids Mine Price Dollars";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,Mnumcr),mpblk_pclsn_d(DReg,cyr));
			}
			Parameter MPBLK_PCLSN_D2 {
				IndexDomain: (cyr);
				Text: "Coal - Liquids Mine Price Dollars";
				Definition: Sum(DReg,mpblk_pclsn_d(DReg,cyr));
			}
			Parameter MPBLK_PCLCM_A {
				IndexDomain: (MNUMCR,globalyr);
				Text: "Commercial Coal Price By Census Region (1987$/MMBtu)";
			}
			Parameter MPBLK_PCLCM_B {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: {
					ResidentialTransport(SReg,sulf,Mtyp,Rank,ResSec,DReg,cyr)*
					PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr)
				}
			}
			Parameter MPBLK_PCLCM_C {
				IndexDomain: (DReg,cyr);
				Text: "Coal Residential & Commercial Mine Price Dollars plus Transport Cost By Coal Demand Region (1987$)";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,ResSec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),(MPBLK_PCLCM_B(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr)+
					ResidentialTransportCost(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr)))
				}
			}
			Parameter MPBLK_PCLCM_C1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - Commercial Mine Price Dollars plus Transport Cost By Census Region (1987$)";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,MNUMCR),mpblk_pclcm_c(DReg,cyr));
			}
			Parameter MPBLK_PCLCM_C2 {
				IndexDomain: (cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg,mpblk_pclcm_c(DReg,cyr));
			}
			Parameter MPBLK_PCLCM_D {
				IndexDomain: (DReg,cyr);
				Text: "Coal Transported to Residential & Commercial Sector By Coal Demand Region- Volume (TBtus)";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,ResSec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					ResidentialTransport(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr))
				}
			}
			Parameter MPBLK_PCLCM_D1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,Mnumcr),mpblk_pclcm_d(DReg,cyr));
			}
			Parameter MPBLK_PCLCM_D2 {
				IndexDomain: (cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg,mpblk_pclcm_d(DReg,cyr));
			}
			Parameter MPBLK_PCLAS_A {
				IndexDomain: (MNUMCR,globalyr);
				Text: "Coal - All Sectors";
				Definition: {
					if mnumcr < 11 then
					Sum(cyr|mpblk_pclas_d1(mnumcr,cyr) and map_globalyr_cyr(globalyr,cyr),
					mpblk_pclas_c1(mnumcr,cyr)/mpblk_pclas_d1(mnumcr,cyr))
					else
					Sum (cyr|map_globalyr_cyr(globalyr,cyr) and mpblk_pclas_d2(cyr),
					mpblk_pclas_c2(cyr)/mpblk_pclas_d2(cyr))
					endif
				}
			}
			Parameter MPBLK_PCLAS_C1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - All Sectors Total Dollars";
				Definition: {
					MPBLK_PCLCM_C1(MNUMCR,cyr) + MPBLK_PCLIN_C1(MNUMCR,cyr)
					+MPBLK_PCLEL_C1(MNUMCR,cyr) + MPBLK_PMCIN_C1(MNUMCR,cyr)
					+MPBLK_PCLSN_C1(MNUMCR,cyr)
					
					!need ctl
				}
			}
			Parameter MPBLK_PCLAS_C2 {
				IndexDomain: (cyr);
				Text: "Coal - All Sectors Dollars";
				Definition: {
					MPBLK_PCLCM_C2(cyr) + MPBLK_PCLIN_C2(cyr)
					+MPBLK_PCLEL_C2(cyr) + MPBLK_PMCIN_C2(cyr)
					+MPBLK_PCLSN_C2(cyr)
					
					!need to add ctl
				}
			}
			Parameter MPBLK_PCLAS_D {
				IndexDomain: (DReg,cyr);
				Text: "Coal - All Sectors Transport Btus";
				Definition: {
					MPBLK_PCLCM_D(DReg,cyr) + MPBLK_PCLIN_D(DReg,cyr)
					+MPBLK_PCLEL_D(DReg,cyr) + MPBLK_PMCIN_D(DReg,cyr)
					+MPBLK_PCLSN_D(DReg,cyr)
					
					!need to add ctl
				}
			}
			Parameter MPBLK_PCLAS_D1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,Mnumcr),mpblk_pclas_d(DReg,cyr));
			}
			Parameter MPBLK_PCLAS_D2 {
				IndexDomain: (cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg,mpblk_pclas_d(DReg,cyr));
			}
			Parameter MPBLK_PMCIN_A {
				IndexDomain: (MNUMCR,globalyr);
				Text: "Metallurgical Coal Price By Census Region (1987$/MMBtu)";
				Definition: {
					if mnumcr < 11 then
					Sum(cyr|mpblk_pmcin_d1(mnumcr,cyr) and map_globalyr_cyr(globalyr,cyr),
					mpblk_pmcin_c1(mnumcr,cyr)/mpblk_pmcin_d1(mnumcr,cyr))
					else
					Sum (cyr|map_globalyr_cyr(globalyr,cyr) and mpblk_pmcin_d2(cyr),
					mpblk_pmcin_c2(cyr)/mpblk_pmcin_d2(cyr))
					endif
				}
				Comment: "Calculated in Copy_Global procedure";
			}
			Parameter MPBLK_PMCIN_B {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: {
					CokingTransport(SReg,sulf,Mtyp,Rank,CokSec,DReg,cyr)*
					PriceSolutionBySC(SReg,Sulf,Mtyp,Rank,cyr)
				}
			}
			Parameter MPBLK_PMCIN_C {
				IndexDomain: (DReg,cyr);
				Text: "Coal - Coking Mine Price Dollars plus Transport Cost By Coal Demand Region (1987$)";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,CokSec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),(MPBLK_PMCIN_B(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr)+
					CokingTransportCost(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr)))
				}
			}
			Parameter MPBLK_PMCIN_C1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,MNUMCR),mpblk_pmcin_c(DReg,cyr));
			}
			Parameter MPBLK_PMCIN_C2 {
				IndexDomain: (cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg,mpblk_pmcin_c(DReg,cyr));
			}
			Parameter MPBLK_PMCIN_D {
				IndexDomain: (DReg,cyr);
				Text: "Coal Transported to Coking Sector By Coal Demand Region- Volume (TBtus)";
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,CokSec) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					CokingTransport(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr))
				}
			}
			Parameter MPBLK_PMCIN_D1 {
				IndexDomain: (MNUMCR,cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg|Map_DReg_MNUMCR(DReg,Mnumcr),mpblk_pmcin_d(DReg,cyr));
			}
			Parameter MPBLK_PMCIN_D2 {
				IndexDomain: (cyr);
				Text: "Coal - Industrial Mine Price Dollars";
				Definition: Sum(DReg,mpblk_pmcin_d(DReg,cyr));
			}
		}
		DeclarationSection Integration_Out_Coalprc {
			Parameter COALPRC_PCLELCDR_A {
				IndexDomain: (M2,NDRGGN,globalyr);
				Text: "Coal Price to Generators";
				Definition: {
					Sum((DReg,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Ndrggn_DReg(NDRGGN,DReg)
					and ElectrBtuByScrubUnscrub(M2,DReg,cyr),
					(MineDollarsByScrubUnscrub(M2,DReg,cyr)+
					TranspDollarsByScrubUnscrub(M2,DReg,cyr))/
					ElectrBtuByScrubUnscrub(M2,DReg,cyr))
				}
			}
			Parameter MineDollarsByScrubUnscrub {
				IndexDomain: (M2,DReg,cyr);
				Text: "Coal - Domestic Supply for Electricity Mine Price Dollars by Scrub and Unscrub";
				Definition: {
					!Sum((nsteps,Scrv,pt2)|nsteps < 3 and Btu2(Scrv) and c_ecp_scrub(pt2) = M2,
					!ElectricityTransportAC(NSteps,Scrv,pt2,DReg,cyr)*
					!Price(Scrv,cyr))
					Sum((pt2)|c_ecp_scrub(pt2) = M2,
					MineDollarsByScrubUnscrub_A(pt2,DReg,cyr))
				}
			}
			Parameter MineDollarsByScrubUnscrub_A {
				IndexDomain: (pt2,DReg,cyr);
				Text: "Coal - Domestic Supply for Electricity Mine Price Dollars by Scrub and Unscrub";
				Definition: {
					Sum((nsteps,SReg, Sulf, Mtyp, Rank)|nsteps < 3 and
					Btu2(SReg, Sulf, Mtyp, Rank),! and c_ecp_scrub(pt2) = M2,
					ElectricityTransportAC(NSteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr)*
					PriceSolutionBySC(SReg, Sulf, Mtyp, Rank,cyr))
				}
			}
			Parameter TranspDollarsByScrubUnscrub {
				IndexDomain: (M2,DReg,cyr);
				Text: "Coal - Electricity Mine Dollars plus Transport Cost (U.S. Supply)";
				Definition: {
					
					
					+ Sum((SReg, Sulf, Mtyp, Rank,pt2)|Btu2(SReg, Sulf, Mtyp, Rank) and c_ecp_scrub(pt2)=m2 and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),  !volume not using activated carbon
					Trate2wSurchBtu('1',SReg, Sulf, Mtyp, Rank,DReg,'E',cyr)
					* ElectricityTransportAC('1',SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					
					
					+Sum((SReg, Sulf, Mtyp, Rank,pt2)|Btu2(SReg, Sulf, Mtyp, Rank) and c_ecp_scrub(pt2)=m2 and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),  !volume using activated carbon
					Trate2wSurchBtu('2',SReg, Sulf, Mtyp, Rank,DReg,'E',cyr)
					* ElectricityTransportAC('2',SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					
					+ Sum((SReg, Sulf, Mtyp, Rank,pt2)|Btu2(SReg, Sulf, Mtyp, Rank) and c_ecp_scrub(pt2)=m2 and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),  !incremental 2nd tier cost
					ElectricityTransport2Cost(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
				}
			}
			Parameter ElectrBtuByScrubUnscrub {
				IndexDomain: (M2,DReg,cyr);
				Text: "Coal - Electricity Transportation Dollars by Scrub and Unscrub";
				Definition: {
					
					Sum((SReg, Sulf, Mtyp, Rank,pt2)|c_ecp_scrub(pt2)=M2 and Btu2(SReg, Sulf, Mtyp, Rank) and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					ElectricityTransportAC('1',SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr)
					+ ElectricityTransportAC('2',SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
				}
			}
		}
		DeclarationSection EMM_Interaction {
			Set ActivatedCarbonSteps {
				Index: ac;
			}
			Set PlantTypeNum2 {
				SubsetOf: PlantTypeNum3;
				Index: pt2;
				Definition: {
					!subset of planttyeactive
					!PlanttypeActive
					! {(pt3)| ActivePlanttypes(pt3)>0}
				}
			}
			Set PlantTypeNum3 {
				Index: pt3;
			}
			Set PlanttypeNum4 {
				SubsetOf: PlantTypeNum3;
				Index: pt4;
			}
			Parameter ActivePlanttypes {
				IndexDomain: (pt3);
				Definition: {
					Sum((ndrggn,mnumyr)|
					mnumyr = ncntrl_curcalyr('1')-1989,
					Copy2b_Qdutzr(pt3,NDRGGN,MNUMYR))
				}
			}
			Set PlanttypeActive {
				SubsetOf: PlantTypeNum3;
				Index: pt5;
				Definition: {
					{(pt3)|
					ActivePlanttypes(pt3)>0}
				}
			}
			Parameter Copy2b_Qdutzr {
				IndexDomain: (pt3,NDRGGN,MNUMYR);
				Range: nonnegative;
				Definition: {
					Sum((nutsec)|
					Map_nutsec_pt3(NUTSEC,pt3)=1,
					COALEMM_QCLCLNR(NDRGGN,MNUMYR,NUTSEC))
				}
			}
			StringParameter PlantTypeCode3 {
				IndexDomain: (pt2,DReg);
			}
			Parameter EMF_T {
				IndexDomain: (ac,Rank,pt2);
				Text: "Mercury emission factor where a 1 indicates no activ carbon injection";
			}
			Parameter ACI {
				IndexDomain: (ac,Rank,pt2);
				Text: {
					"Activated carbon requirements per trillion btu of coal for activ carb injection; also equals ACI_QAC in Fortran code"
				}
				Comment: "Parameter appears to be unused.  Can we eliminate? DAF";
			}
			Parameter ACI_Steps {
				IndexDomain: (pt2,Rank);
				Text: "number of activated carbon steps to create";
				Definition: {
					Sum((ecpcap,nutsec,mx_rnk,m4)|ecpcap = nutsec and Map_nutsec_pt3(NUTSEC,pt2)=1and
					mx_rnk = M4 and Map_Rank_M4(Rank,M4) =1,
					COALEMM_ACI_STEPS(ECPCAP,MX_RNK))
				}
			}
			Parameter MACT_SW {
				IndexDomain: (Rank,pt2);
			}
			Parameter EMM_CL_BTUs_A {
				IndexDomain: (pu_id,yr);
				Definition: {
					!Sum((mx_unt,mnumyr)|Map_MX_UNT_pu_id(mx_unt,pu_id) and MAP_mnumyr_yr(MNUMYR,yr),
					!COALEMM_EMM_CL_BTUs(mx_unt,mnumyr))
					!Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),
					!EMM_CL_BTUs_B(pu_id,MNUMYR))
				}
				Comment: "Move to MaineExicution routine for Contracts file calibaration fix   DAF 9-12-19";
			}
			Parameter EMM_CL_BTUs_A_Alt {
				IndexDomain: (pu_id,yr);
				Text: "Set in MainExecution based on itteration";
				Comment: "Move to MaineExicution routine for Contracts file calibaration fix   DAF 9-12-19";
			}
			Parameter EMM_CL_BTUs_A_AltScrv {
				IndexDomain: (pu_id,MX_NCI,yr);
				Text: "Set in MainExecution based on itteration";
				Comment: "Move to MaineExicution routine for Contracts file calibaration fix   DAF 9-12-19";
			}
			Parameter EMM_CL_BTUs_A_AltScrv2 {
				IndexDomain: (pu_id,SReg,Sulf,Mtyp,Rank,yr);
				Definition: sum((MX_NCI), EMM_CL_BTUs_A_AltScrv(pu_id,MX_NCI,yr) | Map_MXNCI_CoalType(MX_NCI,SReg,Sulf,Mtyp,Rank));
			}
			Parameter EMM_CL_BTUs_B {
				IndexDomain: (pu_id,mnumyr);
				Definition: {
					Sum((mx_unt)|Map_MX_UNT_pu_id(mx_unt,pu_id),
					COALEMM_EMM_CL_BTUs(mx_unt,mnumyr))
				}
			}
			StringParameter zzz_EMM_CL_ECPT_A {
				IndexDomain: (pu_id,yr);
				Definition: {
					!Sum((mx_unt,mnumyr)|Map_MX_UNT_pu_id(mx_unt,pu_id) and MAP_mnumyr_yr(MNUMYR,yr),
					!COALEMM_EMM_CL_ECPT(mx_unt,mnumyr)+14)
					
					Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),zzz_Copy_EMM_CL_ECPT_A(pu_id,MNUMYR))
				}
			}
			StringParameter zzz_Copy_EMM_CL_ECPT_A {
				IndexDomain: (pu_id,MNUMyr);
				Definition: {
					if Sum((mx_unt)|Map_MX_UNT_pu_id(mx_unt,pu_id),COALEMM_EMM_CL_ECPT_Active_NUTSEC(mx_unt,mnumyr))>0
					then Sum((mx_unt)|Map_MX_UNT_pu_id(mx_unt,pu_id),COALEMM_EMM_CL_ECPT_Active_NUTSEC(mx_unt,mnumyr)+14)
					endif
				}
			}
			Parameter EMM_CL_ECPT_Fast {
				IndexDomain: (pu_id,yr,pt2);
				Definition: zzz_EMM_CL_ECPT_A(pu_id,yr)= pt2;
			}
			StringParameter c_ecp_scrub {
				IndexDomain: (pt2);
				Text: "is the puid scrubbed or unscrubbed";
				Definition: {
					c_ecp_scrub_Alt2(pt2)
					!Sum((nutsec,globalyr)|Map_nutsec_pt3(nutsec,pt2),
					!USO2GRP_ECP_Scrub(nutsec,globalyr))
				}
				Comment: {
					"Changed c_ecp_scrub to use new input USO2GRP_ECP_Scrub but then drop the year.
					Substitute c_ecp_scrub_Alt2(pt2) version  June 2022 DAF"
				}
			}
			StringParameter c_ecp_scrub_Alt1 {
				IndexDomain: (NUTSEC,pt2)| Map_nutsec_pt2(NUTSEC,pt2);
				Text: "is the puid scrubbed or unscrubbed";
				Definition: USO2GRP_C_ECP_SCRUB(NUTSEC);
				Comment: "Trying different formulat  Jun2 2022";
			}
			StringParameter c_ecp_scrub_new {
				IndexDomain: (pt2,globalyr);
				Text: "is the puid scrubbed or unscrubbed";
				Definition: {
					Sum((nutsec)|Map_nutsec_pt3(nutsec,pt2),
					USO2GRP_ECP_Scrub(nutsec,globalyr))
				}
				Comment: "Created this scrubbed/unscrubbed parameter with NEMS year but not using it.  Just changed c_ecp_scrub to use new input but then drop the year.";
			}
			StringParameter c_ecp_scrub_Alt2 {
				IndexDomain: (pt2);
				Text: "is the puid scrubbed or unscrubbed";
				Definition: sum((NUTSEC), c_ecp_scrub_Alt1(NUTSEC,pt2));
				Comment: "Trying different formulat  Jun2 2022";
			}
			StringParameter M2temp {
				IndexDomain: (pt2);
				Text: "is the puid scrubbed or unscrubbed";
				Definition: {
					Sum((nutsec)|Map_nutsec_pt3(nutsec,pt2),
					USO2GRP_C_ECP_Scrub(nutsec))
				}
			}
			Parameter c_ecp_scrub_Scrubbed {
				IndexDomain: (pt2);
				Definition: c_ecp_scrub(pt2) = '1';
			}
			Parameter c_ecp_scrub_Unscrubbed {
				IndexDomain: (pt2);
				Definition: c_ecp_scrub(pt2) = '2';
			}
			StringParameter EMM_CL_CLRG_A {
				IndexDomain: (pu_id);
				Definition: Sum((mx_unt)|Map_MX_UNT_pu_id(MX_UNT,pu_id)=1,Map_ndregn(COALEMM_EMM_CL_CLRG(mx_unt)));
			}
			Parameter MapPlantid_unitid_DemandRegion {
				IndexDomain: (pu_id,DReg);
				Definition: EMM_CL_CLRG_A(pu_id) = DReg;
			}
			Set ScrubDesignationforContracts {
				Index: iscr;
				Definition: Data {1..2};
			}
			Parameter CMM_CL_BTUs_A {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: Plant_BaseYear_Btu(pu_id,SReg, Sulf, Mtyp, Rank);
				Comment: {
					"I realize that I am just copying this variable but doing so to remind me of compound set difficulty and problems that
					will arise in interaction with electricity model"
				}
			}
			Parameter CMM_CL_BTUs_FromECP {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					!Plant_BaseYear_Btu(pu_id,SReg, Sulf, Mtyp, Rank)
					
					!EMM_CL_BTUs_A_Alt(pu_id,yr)
				}
			}
			Parameter TBTU {
				IndexDomain: (pu_id);
			}
			Parameter uttso2_A {
				IndexDomain: (pt2,yr);
			}
			Parameter qclel_A {
				IndexDomain: (CensDiv,yr);
				Definition: {
					Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
					QBLK_QCLEL(mnumcr,mnumyr))
					
					!if yr < '2008' then
					!Sum((mx_unt,mnumyr)|Map1(mx_unt,pu_id)=1 and MAP_mnumyr_yr(MNUMYR,yr),
					!COALEMM_EMM_CL_ECPT(mx_unt,mnumyr))
					!elseif yr < '2026' then
					!Sum((mx_unt,mnumyr)|Map1(mx_unt,pu_id)=1 and mnumyr = yr-2007,
					!COALEMM_EMM_CL_ECPT2(mx_unt,mnumyr))
					!elseif yr < '2044' then
					!Sum((mx_unt,mnumyr)|Map1(mx_unt,pu_id)=1 and mnumyr = yr-2025,
					!COALEMM_EMM_CL_ECPT3(mx_unt,mnumyr))
					!elseif yr > '2043' then
					!Sum((mx_unt,mnumyr)|Map1(mx_unt,pu_id)=1 and mnumyr = yr-2043,
					!COALEMM_EMM_CL_ECPT4(mx_unt,mnumyr))
					!endif
				}
			}
		}
	}
	Section Coal_Domestic_Distribution_Submodule {
		Procedure TestEmptyPlantFile {
			Body: {
				empty Plantid_unitid;
				        !   read from file "..\\COALEMM_EMM_CL_UNITS.txt" ;   ! Try reading from coalunits.txt
				read from file "input/coalunits.txt" ;
			}
		}
		DeclarationSection OtherModelDemands {
			Parameter Qdutzr {
				IndexDomain: (pt2,DReg,yr);
				Range: nonnegative;
				Definition: {
					!Sum((ndrggn,mnumyr,nutsec)|
					!Map_Nutsec_pt2(NUTSEC,pt2)=1 and
					!MAP_mnumyr_yr(MNUMYR,yr) and DReg = Map_ndregn(NDRGGN),
					!COALEMM_QCLCLNR(NDRGGN,MNUMYR,NUTSEC))
					Sum((mnumyr)|
					MAP_mnumyr_yr(MNUMYR,yr),
					Copy1_Qdutzr(pt2,DReg,MNUMYR))
				}
			}
			Parameter Copy1_Qdutzr {
				IndexDomain: (pt2,DReg,mnumyr);
				Range: nonnegative;
				Definition: {
					Sum((ndrggn,nutsec)|
					Map_nutsec_pt3(NUTSEC,pt2) and
					Map_Ndrggn_DReg(ndrggn,DReg),
					Copy2_Qdutzr(pt2,NDRGGN,MNUMYR))
				}
			}
			Parameter Copy2_Qdutzr {
				IndexDomain: (pt2,NDRGGN,mnumyr);
				Range: nonnegative;
				Definition: {
					Sum((nutsec)|
					Map_nutsec_pt3(NUTSEC,pt2)=1,
					COALEMM_QCLCLNR(NDRGGN,MNUMYR,NUTSEC))
				}
			}
			Parameter Qclrs {
				IndexDomain: (CensDiv,yr);
				Range: nonnegative;
				Definition: {
					Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
					QBLK_QCLRS(mnumcr,mnumyr))
				}
			}
			Parameter ResidCommDemand {
				IndexDomain: (ResSec,DReg,yr);
				Definition: {
					Sum((CensDiv,ResMSec)|CensDivShare(ResMSec,CensDiv,DReg)>0,
					(Qclrs(CensDiv,yr)+Qclcm(CensDiv,yr))
					*FRADI(DReg,ResSec)*CensDivShare(ResMSec,CensDiv,DReg))
				}
			}
			Parameter Qclcm {
				IndexDomain: (CensDiv,yr);
				Range: nonnegative;
				Definition: {
					if Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
					                      QBLK_QCLCM(mnumcr,mnumyr)) > 0 
					then
					   Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
							 	QBLK_QCLCM(mnumcr,mnumyr))
					else
					   0.0001
					endif;
				}
				Comment: {
					"  When the commericial model does not send any demand for a region, assume demand is almost zero (0,00001) but still create a regional price.
					                    DAF 11-15-2019"
				}
			}
			Parameter IndustrialDemand {
				IndexDomain: (IndSec,DReg,yr);
				Text: "Industrial Demand in TBtus from QCLIN split into sectors IndSec";
				Definition: {
					Sum((CensDiv,IndMSec)|CensDivShare(IndMSec,CensDiv,DReg)>0,
					(Qclin(CensDiv,yr)-Qclrf(CensDiv,yr))
					*FRADI(DReg,IndSec)*CensDivShare(IndMSec,CensDiv,DReg))
				}
			}
			Parameter Qclin {
				IndexDomain: (CensDiv,yr);
				Range: nonnegative;
				Definition: {
					Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
					QBLK_QCLIN(mnumcr,mnumyr))
				}
			}
			Parameter Qclrf {
				IndexDomain: (CensDiv,yr);
				Range: nonnegative;
				Definition: {
					Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
					QBLK_QCLRF(mnumcr,mnumyr))
				}
			}
			Parameter Qclsn {
				IndexDomain: (CensDiv,yr);
				Range: nonnegative;
				Definition: {
					Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
					QBLK_QCLSN(mnumcr,mnumyr))
				}
			}
			Parameter Qmcin {
				IndexDomain: (CensDiv,yr);
				Range: nonnegative;
				Definition: {
					Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(mnumcr,CensDiv)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
					QBLK_Qmcin(mnumcr,mnumyr))
				}
			}
			Parameter CokingDemand {
				IndexDomain: (CokSec,DReg,yr);
				Definition: {
					Sum((CensDiv,CokMSec)|CensDivShare(CokMSec,CensDiv,DReg)>0,
					Qmcin(CensDiv,yr)
					*FRADI(DReg,CokSec)*CensDivShare(CokMSec,CensDiv,DReg))
				}
			}
			Parameter Qclrfpd {
				IndexDomain: (PADD,yr);
				Range: nonnegative;
				Definition: {
					Sum((mnumpr,mnumyr)|Map_PADD_Mnumpr(PADD,MNUMPR)=1 and yr > 1989 and MAP_mnumyr_yr(MNUMYR,yr),
					PMMOUT_Qclrfpd(mnumpr,mnumyr))
				}
			}
			Parameter LiquidDemand {
				IndexDomain: (DReg,yr);
				Definition: {
					Sum((PADD,LiqMSec,LiquSec)|PMMDivShare(LiqMSec,PADD,DReg)>0,
					(Qclrfpd(PADD,yr)
					*FRADI(DReg,LiquSec)*PMMDivShare(LiqMSec,PADD,DReg)))
				}
			}
		}
		DeclarationSection HistoricalValues {
			Parameter hclprd {
				IndexDomain: (NSREGN,M4,M3,M2,yr);
				Text: "m4= rank, m3 = sulfur, m2 = minetype";
			}
			Parameter tempcurcal;
			Parameter hclmmpr1 {
				IndexDomain: (NSREGN,M4,M3,M2,yr);
				Text: "m4= rank, m3 = sulfur, m2 = minetype";
			}
			Parameter hclprdbt {
				IndexDomain: (m3,yr);
				Text: "m3 = east, west, total";
				Comment: "1= East of Mississippi, 2= West of Mississippi, 3= Total US   Units are Tbtus";
			}
			Parameter hwcdistst {
				IndexDomain: (yr);
				Text: " historical waste coal in tons";
			}
			Parameter hwcprodbtu {
				IndexDomain: (yr);
				Text: "historical waste coal in trillion Btu";
			}
			Parameter hcltrtmrrc {
				IndexDomain: (M2,yr);
				Text: "historical rail coal shipments by east (1) and west(2) in billion ton-miles";
			}
			Parameter hcldist {
				IndexDomain: (NSREGN,yr);
				Text: "historical coal distribution by supply region in million tons";
			}
			Parameter hclexptn {
				IndexDomain: (yr);
				Text: "historical coal exports in million short tons";
			}
			Parameter hclexpbt {
				IndexDomain: (yr);
				Text: "historical coal exports in trillion Btus";
			}
			Parameter hclimptn {
				IndexDomain: (yr);
				Text: "historical coal imports in million short tons";
			}
			Parameter hclimpbt {
				IndexDomain: (yr);
				Text: "historical coal imports in trillion Btus";
			}
			Parameter hclmmtn1 {
				IndexDomain: (yr);
				Text: "historical coal minemouth prices nominal dollars/ton";
			}
			Parameter hclmmbt1 {
				IndexDomain: (yr);
				Text: "historical coal minemouth prices nominal dollars/ton";
			}
			Parameter hclcon {
				IndexDomain: (Sec,yr);
				Text: "historical coal consumption by Major Sector (fortran 1=res/com,2indus,3coke,4exp,5electric)";
				Comment: {
					"AIMMS CMM coded R=Res/Com, I=Industrial, C=Coke, X=Exports, E=Electricity
					Appear to be delivered tons by sector (not consumption) with difference being the coal stocks"
				}
			}
			Parameter hcldprtn1 {
				IndexDomain: (Sec,yr);
				Text: "historical coal prices by Major Sector in nominal $/ton (fortran 1=res/com,2indus,3coke,4exp,5electric)";
			}
			Parameter hcldprbt1 {
				IndexDomain: (Sec,yr);
				Text: "historical coal prices by Major Sector in nominal $/mmBtu (fortran 1=res/com,2indus,3coke,4exp,5electric)";
			}
			Parameter hclworld {
				IndexDomain: (m4,m11,tc,yr);
				Text: {
					"m4=Europe,Asia,Other,Total;m11=Australia,etc; tc=1(thermal)2(coking)"
				}
			}
			StringParameter WrldImpRegionName {
				IndexDomain: (m4,m11,tc,yr);
			}
			StringParameter WrldExpRegionName {
				IndexDomain: (m4,m11,tc,yr);
			}
			Parameter map_m11_Ae {
				IndexDomain: (M11,Ae);
			}
			Parameter map_m4_importregion {
				IndexDomain: (M4,i);
				Text: "4 = Total";
			}
			Parameter sumpcl {
				IndexDomain: (NSREGN,M4,M3,M2,yr);
			}
			Parameter sumpcl2 {
				IndexDomain: (NSREGN,MNUMYR);
			}
			Parameter sumprodcl2deep {
				IndexDomain: (NSREGN,MNUMYR);
				Text: "minetype 1 subtotal";
			}
			Parameter sumpprodcl2surface {
				IndexDomain: (NSREGN,MNUMYR);
				Text: "minetype 2 subtotal";
			}
			Parameter sumpcl3 {
				IndexDomain: (MNUMLR,MNUMYR);
			}
			Parameter sumclprd {
				IndexDomain: (M3,MNUMYR);
			}
			Parameter COALREP_PABSULF_histdol {
				IndexDomain: (M4,mnumyr);
			}
			Parameter COALREP_PALSULF_histdol {
				IndexDomain: (M4,mnumyr);
			}
			Parameter COALREP_PAPSULF_histdol {
				IndexDomain: (M4,MNUMYR);
			}
			Parameter COALREP_PIBSULF_histdol {
				IndexDomain: (M4,MNUMYR);
			}
			Parameter COALREP_PILSULF_histdol {
				IndexDomain: (M4,MNUMYR);
			}
			Parameter COALREP_PWBSULF_histdol {
				IndexDomain: (M4,MNUMYR);
			}
			Parameter COALREP_PWSSULF_histdol {
				IndexDomain: (M4,MNUMYR);
			}
			Parameter COALREP_PWLSULF_histdol {
				IndexDomain: (M4,MNUMYR);
			}
			Parameter COALREP_PWPSULF_histdol {
				IndexDomain: (M4,MNUMYR);
			}
			Parameter COALREP_PMTDP_histdol {
				IndexDomain: (NSREGN,MNUMYR);
			}
			Parameter COALREP_PMTSP_histdol {
				IndexDomain: (NSREGN,MNUMYR);
			}
			Parameter prclcm {
				IndexDomain: (MNUMYR);
			}
			Parameter prclin {
				IndexDomain: (MNUMYR);
			}
			Parameter prmcin {
				IndexDomain: (MNUMYR);
			}
			Parameter prclel {
				IndexDomain: (MNUMYR);
			}
			Parameter COALREP_PCLSULF_prelim {
				IndexDomain: (M14,M4,M3,M2,globalyr);
			}
		}
		DeclarationSection Domestic_Coal {
			Parameter MajorSectorFlag {
				IndexDomain: Sec;
			}
			Parameter SupplyRegionOrder {
				IndexDomain: Sreg;
			}
			Parameter SulfurClassificationOrder {
				IndexDomain: Sulf;
			}
			Parameter DemandRegionOrder {
				IndexDomain: (DReg);
			}
			Parameter SupplyCurveOrder {
				IndexDomain: (SReg, Sulf, Mtyp, Rank) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
			}
			Parameter SubSectorFlag {
				IndexDomain: (Subsec);
				Text: "Flag to point to sector";
			}
			Parameter SectorComboFlag {
				IndexDomain: (Sec,Subsec);
			}
			Parameter SubsectorOrder {
				IndexDomain: (Subsec);
			}
			StringParameter SubsectorName {
				IndexDomain: (Sec,Subsec);
			}
			Parameter CensDivShare {
				IndexDomain: (Sec,CensDiv,DReg);
				Text: "shares out demand by census division to the coal demand regions";
			}
			Parameter PMMDivShare {
				IndexDomain: (Sec,PADD,DReg);
			}
			Parameter FRADI {
				IndexDomain: (DReg,Subsec);
				InitialData: 0;
			}
			Parameter Trate1 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,SubSec);
				Text: "Transportation Rates by Subsector for non-electricity sectors";
			}
			Parameter Trate1SurchAdj {
				IndexDomain: (SReg,DReg);
				Definition: {
					!If Trate1(SReg,Sulf,Mtyp,Rank,DReg,Subsec) < 900
					!and (Trate1(Sreg,Sulf,Mtyp,Rank,DReg,Subsec) - Surchart1(SReg,DReg,'2010'))>0 then
					Surchart1(SReg,DReg,CPSBaseYr)
					!else
					!Trate1(SReg,Sulf,Mtyp,Rank,DReg,Subsec)
					!endif
				}
			}
			Parameter Trate1Resid {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,ResSec)|PossibleSupplyCurves_Map(DReg, Ressec, SReg, Sulf, Mtyp, Rank);
				Text: "Transportation Rates by Subsector for non-electricity sectors";
				Definition: {
					!if Trate1RevisedBase(Scrv,Dreg,ResSec)<900 then
					!(sum(Subsec| Subsec = ResSec,Trate1RevisedBase(Scrv,Dreg,ResSec)/Btu2(Scrv)))
					!endif
					Sum(cyr,Trate1ResidwSurchBtu(SReg, Sulf, Mtyp, Rank,DReg,ResSec,cyr))
				}
			}
			Parameter Trate1ResidwEscalator {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,ResSec,cyr);
				Text: "1st tier transportation rate for electricity sector";
				Definition: {
					!If SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					!SReg = '04EI' or SReg = '05WI' or SReg = '06GL' then
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,ResSec)*FinalEast(cyr)
					!else
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,ResSec)*FinalWest(cyr)
					!endif
					
					Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,ResSec)*FinalRCAFindex(cyr)
				}
				Comment: "Switched to new RCAF based index for rate escalation 10-07-20";
			}
			Parameter Trate1ResidwSurchBtu {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,ResSec,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "1st tier transportation rate for res-commercial sector";
				Definition: {
					
					!(Trate1ResidwEscalator(SReg,Sulf,Mtyp,Rank,DReg,ResSec,cyr)+Surchart1(Sreg,DReg,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
					(Trate1ResidwEscalator(SReg,Sulf,Mtyp,Rank,DReg,ResSec,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate1RevisedBase {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,SubSec);
				Text: "Transportation Rates by Subsector for non-electricity sectors";
				Definition: {
					!if((Trate1(SReg,Sulf,Mtyp,Rank,DReg,Subsec)-
					!Trate1SurchAdj(SReg, DReg))>0) then
					!Trate1(SReg,Sulf,Mtyp,Rank,DReg,Subsec)-Trate1SurchAdj(SReg,DReg)
					!else
					Trate1(SReg,Sulf,Mtyp,Rank,DReg,Subsec)
					!endif
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate1Ind {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,IndSec)| PossibleSupplyCurves_Map(DReg, IndSec, SReg, Sulf, Mtyp, Rank);
				Text: "Transportation Rates by Subsector for non-electricity sectors";
				Definition: {
					!if Trate1RevisedBase(Scrv,Dreg,IndSec)<900 then
					!(sum(Subsec| Subsec = IndSec,Trate1RevisedBase(Scrv,Dreg,IndSec)/Btu2(Scrv)))
					!endif
					Sum(cyr,Trate1IndwSurchBtu(SReg, Sulf, Mtyp, Rank,DReg,IndSec,cyr))
				}
			}
			Parameter Trate1IndwEscalator {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,IndSec,cyr);
				Text: "1st tier transportation rate for industrial sector";
				Definition: {
					!If SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					!SReg = '04EI' or SReg = '05WI' or SReg = '06GL' then
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,IndSec)*FinalEast(cyr)
					!else
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,IndSec)*FinalWest(cyr)
					!endif
					
					Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,IndSec)*FinalRCAFindex(cyr)
				}
				Comment: "Switch to new RCAF based index for rate escalation 10-07-20";
			}
			Parameter Trate1IndwSurchBtu {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,IndSec,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "1st tier transportation rate for industrial sector";
				Definition: {
					
					!(Trate1IndwEscalator(SReg,Sulf,Mtyp,Rank,DReg,IndSec,cyr)+ Surchart1(Sreg,DReg,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
					(Trate1IndwEscalator(SReg,Sulf,Mtyp,Rank,DReg,IndSec,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate1Coke {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,CokSec)| PossibleSupplyCurves_Map(DReg, CokSec, SReg, Sulf, Mtyp, Rank);
				Text: "Transportation Rates by Subsector for non-electricity sectors";
				Definition: {
					!if (Trate1RevisedBase(Scrv,Dreg,CokSec)<900) then
					!(sum(Subsec| Subsec = CokSec,Trate1RevisedBase(Scrv,Dreg,CokSec)/Btu2(Scrv)))
					!endif
					Sum(cyr,Trate1CokewSurchBtu(SReg, Sulf, Mtyp, Rank,DReg,CokSec,cyr))
				}
			}
			Parameter Trate1CokewEscalator {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,CokSec,cyr);
				Text: "1st tier transportation rate for coal coke sector";
				Definition: {
					!If SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					!SReg = '04EI' or SReg = '05WI' or SReg = '06GL' then
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,CokSec)*FinalEast(cyr)
					!else
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,CokSec)*FinalWest(cyr)
					!endif
					
					Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,CokSec)*FinalRCAFindex(cyr)
				}
				Comment: "Switch to new RCAF based index for rate escalation 10-07-20";
			}
			Parameter Trate1CokewSurchBtu {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,CokSec,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "1st tier transportation rate for coal coke sector";
				Definition: {
					
					!(Trate1CokewEscalator(SReg,Sulf,Mtyp,Rank,DReg,CokSec,cyr)+Surchart1(Sreg,DReg,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
					(Trate1CokewEscalator(SReg,Sulf,Mtyp,Rank,DReg,CokSec,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate1Liqu {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,LiquSec)| PossibleSupplyCurves_Map(DReg, LiquSec, SReg, Sulf, Mtyp, Rank);
				Text: "Transportation Rates by Subsector for non-electricity sectors";
				Definition: {
					!if Trate1RevisedBase(Scrv,Dreg,LiquSec)<900 then
					!(sum(Subsec| Subsec = LiquSec,Trate1RevisedBase(Scrv,Dreg,LiquSec)/Btu2(Scrv)))
					!endif
					Sum(cyr,Trate1LiquwSurchBtu(SReg, Sulf, Mtyp, Rank,DReg,LiquSec,cyr))
				}
			}
			Parameter Trate1LiquwEscalator {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,LiquSec,cyr);
				Text: "1st tier transportation rate for coal to liquids sector";
				Definition: {
					!If SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					!SReg = '04EI' or SReg = '05WI' or SReg = '06GL' then
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,LiquSec)*FinalEast(cyr)
					!else
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,LiquSec)*FinalWest(cyr)
					!endif
					
					Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,LiquSec)*FinalRCAFindex(cyr)
				}
				Comment: "Switch to new RCAF based index for rate escalation 10-07-20";
			}
			Parameter Trate1LiquwSurchBtu {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,LiquSec,cyr);
				Text: "1st tier transportation rate for coal to liquids sector";
				Definition: {
					
					!(Trate1LiquwEscalator(SReg,Sulf,Mtyp,Rank,DReg,LiquSec,cyr)+Surchart1(Sreg,DReg,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
					(Trate1LiquwEscalator(SReg,Sulf,Mtyp,Rank,DReg,LiquSec,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate1Exp {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,ExpSec)| PossibleSupplyCurves_Map(DReg, ExpSec, SReg, Sulf, Mtyp, Rank);
				Text: "Transportation Rates by Subsector for non-electricity sectors";
				Definition: {
					!if Trate1RevisedBase(Scrv,Dreg,ExpSec)<900 then
					!(sum(Subsec| Subsec = ExpSec,Trate1RevisedBase(Scrv,Dreg,ExpSec)/Btu2(Scrv)))
					!endif
					Sum(cyr,Trate1ExpwSurchBtu(SReg, Sulf, Mtyp, Rank,DReg,ExpSec,cyr))
				}
			}
			Parameter Trate1Exp2 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,ExpSec,USe)| PossibleSupplyCurves_Map(DReg, ExpSec, SReg, Sulf, Mtyp, Rank);
				Definition: {
					! Trate1Exp(SReg, Sulf, Mtyp, Rank,DReg,ExpSec) |USDRegIntlMapping(Use,Dreg)
					
					Trate1Exp(SReg, Sulf, Mtyp, Rank,DReg|USDRegIntlMapping(Use,Dreg) ,ExpSec)
				}
			}
			Parameter Trate1ExpwEscalator {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,ExpSec,cyr);
				Text: "1st tier transportation rate for coal exports sector";
				Definition: {
					!If SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					!SReg = '04EI' or SReg = '05WI' or SReg = '06GL' then
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,ExpSec)*FinalEast(cyr)
					!else
					!Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,ExpSec)*FinalWest(cyr)
					!endif
					
					Trate1RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,ExpSec)*FinalRCAFindex(cyr)
				}
				Comment: "Switch to new RCAF based index for rate escalation 10-07-20";
			}
			Parameter Trate1ExpwSurchBtu {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,ExpSec,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "1st tier transportation rate for coal exports sector";
				Definition: {
					
					!(Trate1ExpwEscalator(SReg,Sulf,Mtyp,Rank,DReg,ExpSec,cyr)+Surchart1(Sreg,DReg,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
					(Trate1ExpwEscalator(SReg,Sulf,Mtyp,Rank,DReg,ExpSec,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec);
				Text: "1st tier transportation rate for electricity sector 1987$/short ton";
			}
			Parameter Trate2flag {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg)|trate2(SReg,Sulf,Mtyp,Rank,DReg,'E') < 999 and Btu2(SReg, Sulf, Mtyp, Rank);
				Definition: 1;
			}
			Parameter Trate2SurchAdj {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec);
				Text: {
					"Surcharge for base year; this will be debited from base transp rates, $/short ton"
				}
				Definition: {
					!If Trate1(SReg,Sulf,Mtyp,Rank,DReg,Subsec) < 900
					!and (Trate1(Sreg,Sulf,Mtyp,Rank,DReg,Subsec) - Surchart1(SReg,DReg,'2010'))>0 then
					Surchart1(SReg,DReg,CPSBaseYr)
					!else
					!Trate1(SReg,Sulf,Mtyp,Rank,DReg,Subsec)
					!endif
				}
			}
			Parameter Trate2RevisedBase {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec);
				Text: "1st tier transportation rate for electricity sector, $/short ton";
				Definition: {
					!if((Trate2(SReg,Sulf,Mtyp,Rank,DReg,Sec)-
					!Trate2SurchAdj(SReg,Sulf,Mtyp,Rank,DReg,Sec))>0) then
					!Trate2(SReg,Sulf,Mtyp,Rank,DReg,Sec)-Trate2SurchAdj(SReg,Sulf,Mtyp,Rank,DReg,Sec)
					!else
					Trate2(SReg,Sulf,Mtyp,Rank,DReg,Sec)
					!endif
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate2wEscalator {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec,yr);
				Text: "1st tier transportation rate for electricity sector, $/short ton";
				Definition: {
					!If SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					!SReg = '04EI' or SReg = '05WI' or SReg = '06GL' then
					!Trate2RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,Sec)*FinalEast(yr)*bsrzr_util(yr)
					!else
					!Trate2RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,Sec)*FinalWest(yr)*bsrzr_util(yr)
					!endif
					
					Trate2RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,Sec)*FinalRCAFindex(yr)*bsrzr_util(yr)
				}
				Comment: "Switch to new RCAF based index for rate escalation 10-07-20";
			}
			Parameter Trate2wSurch {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec,yr)|Btu2(SReg,Sulf,Mtyp,Rank);
				Text: "1st tier transportation rate for electricity sector, $/short ton";
				Definition: {
					If Sec = 'E' then
					(Trate2wEscalator(SReg,Sulf,Mtyp,Rank,DReg,Sec,yr)+
					Surchart1(Sreg,DReg,yr))
					endif
				}
			}
			Parameter Trate2wSurchBtu {
				IndexDomain: (NSTEPS,SReg,Sulf,Mtyp,Rank,DReg,Sec,cyr) |Sec = 'E';
				Text: "1st tier transportation rate for electricity sector";
				Definition: {
					!If Sec = 'E' then
					!(Trate2wEscalator(SReg,Sulf,Mtyp,Rank,DReg,Sec,cyr)+Surchart1(Sreg,DReg,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
					!endif
					
					If Sec = 'E' then
					(Trate2wEscalator(SReg,Sulf,Mtyp,Rank,DReg,Sec,cyr))/$Btu2(SReg,Sulf,Mtyp,Rank)
					endif
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate2wSurchTons {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec,yr);
				Text: "1st tier transportation rate for electricity sector";
				Definition: {
					If Sec = 'E' then
					(Trate2wEscalator(SReg,Sulf,Mtyp,Rank,DReg,Sec,yr)+
					Surchart1(Sreg,DReg,yr))
					endif
				}
			}
			Parameter Trate3 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec);
				Text: "2nd tier transportation rate for electricity sector";
			}
			Parameter Trate3SurchAdj {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec);
				Definition: {
					!If Trate1(SReg,Sulf,Mtyp,Rank,DReg,Subsec) < 900
					!and (Trate1(Sreg,Sulf,Mtyp,Rank,DReg,Subsec) - Surchart1(SReg,DReg,'2010'))>0 then
					Surchart2(SReg,DReg,CPSBaseYr)
					!else
					!Trate1(SReg,Sulf,Mtyp,Rank,DReg,Subsec)
					!endif
				}
			}
			Parameter Trate3RevisedBase {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec);
				Text: "1st tier transportation rate for electricity sector";
				Definition: {
					!if((Trate3(SReg,Sulf,Mtyp,Rank,DReg,Sec)-
					!Trate3SurchAdj(SReg,Sulf,Mtyp,Rank,DReg,Sec))>0) then  !using 1st tier on purpose
					!Trate3(SReg,Sulf,Mtyp,Rank,DReg,Sec)-Trate3SurchAdj(SReg,Sulf,Mtyp,Rank,DReg,Sec)
					!else
					Trate3(SReg,Sulf,Mtyp,Rank,DReg,Sec)
					!endif
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate3wEscalator {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec,yr);
				Text: "2nd tier transportation rate for electricity sector";
				Definition: {
					!If SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					!SReg = '04EI' or SReg = '05WI' or SReg = '06GL' then
					!Trate3RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,Sec)*FinalEast(yr)
					!else
					!Trate3RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,Sec)*FinalWest(yr)
					!endif
					
					Trate3RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,Sec)*FinalRCAFindex(yr)
				}
				Comment: "Switch to new RCAF based index for rate escalation 10-07-20";
			}
			Parameter Trate3wSurchBtu {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec,yr);
				Text: "2nd tier transportation rate for electricity sector";
				Definition: {
					!If Sec = 'E' then
					!(Trate3wEscalator(SReg,Sulf,Mtyp,Rank,DReg,Sec,yr)+Surchart2(Sreg,DReg,yr))/$Btu2(SReg,Sulf,Mtyp,Rank)
					!endif
					
					If Sec = 'E' then
					(Trate3wEscalator(SReg,Sulf,Mtyp,Rank,DReg,Sec,yr))/$Btu2(SReg,Sulf,Mtyp,Rank)
					endif
				}
				Comment: {
					"Changed to remove the surcharge subtraction from the base transport rates 10-07-20; Switching to RCAF index.  10-07-20"
				}
			}
			Parameter Trate3wSurchTons {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,Sec,yr);
				Text: "2nd tier transportation rate for electricity sector";
				Definition: {
					If Sec = 'E' then
					(Trate3wEscalator(SReg,Sulf,Mtyp,Rank,DReg,Sec,yr)+
					Surchart2(Sreg,DReg,yr))
					endif
				}
			}
			Parameter Trate3x {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					!if(Trate3RevisedBase(Scrv,DReg,'E') < 900.)then
					Trate3RevisedBase(SReg, Sulf, Mtyp, Rank,DReg,'E')/Btu2(SReg, Sulf, Mtyp, Rank)
					!endif
				}
			}
			Parameter Trate2x {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg);
				Definition: {
					!if(Trate2RevisedBase(Scrv,DReg,'E') < 900.)then
					Trate2RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,'E')/$Btu2(SReg,Sulf,Mtyp,Rank)
					!endif
				}
			}
			Parameter Trate4x {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					!if(Trate2RevisedBase(Scrv,DReg,'E') < 900.)then
					Trate2RevisedBase(SReg, Sulf, Mtyp, Rank,DReg,'E')
					!endif
				}
			}
			Parameter NewEsc1 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr)|trate2(SReg,Sulf,Mtyp,Rank,DReg,'E')>0;
				Definition: {
					If SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					SReg = '04EI' or SReg = '05WI' or SReg = '06GL' then
					
					((trate2(SReg,Sulf,Mtyp,Rank,DReg,'E') * bsrzr_util(YR) * FinalEast(yr))
					 + SURCHART1(Sreg,DReg,yr))/trate2(SReg,Sulf,Mtyp,Rank,DReg,'E')
					
					 else
					
					 ((trate2(SReg,Sulf,Mtyp,Rank,DReg,'E') * bsrzr_util(YR) * FinalWest(yr))
					 + SURCHART1(Sreg,DReg,yr))/trate2(SReg,Sulf,Mtyp,Rank,DReg,'E')
					
					 endif
				}
			}
			Parameter NewEsc2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr)|trate3(SReg,Sulf,Mtyp,Rank,DReg,'E')>0;
				Definition: {
					If SReg = '01NA' or SReg = '02CA' or SReg = '03SA' or
					SReg = '04EI' or SReg = '05WI' or SReg = '06GL' then
					
					((trate3(SReg,Sulf,Mtyp,Rank,DReg,'E') * bsrzr_util(YR) * FinalEast(yr))
					 + SURCHART1(Sreg,DReg,yr))/trate3(SReg,Sulf,Mtyp,Rank,DReg,'E')
					
					 else
					
					 ((trate3(SReg,Sulf,Mtyp,Rank,DReg,'E') * bsrzr_util(YR) * FinalWest(yr))
					 + SURCHART1(Sreg,DReg,yr))/trate3(SReg,Sulf,Mtyp,Rank,DReg,'E')
					
					 endif
				}
			}
			Parameter ContractProfile {
				IndexDomain: (cnum,yr);
			}
			Parameter TranspProfile {
				IndexDomain: (tnum,yr);
			}
			Parameter SubDivProfile {
				IndexDomain: (snum,yr);
			}
			Parameter LigDivProfile {
				IndexDomain: (lnum,yr);
			}
			Parameter NewPlantSubitProfile {
				IndexDomain: Dreg;
			}
			Parameter NewPlantLigProfile {
				IndexDomain: DReg;
			}
			Parameter Plantid {
				IndexDomain: (pu_id);
			}
			Parameter mx_unt_echo {
				IndexDomain: pu_id;
			}
			Parameter map_pltnum_puid {
				IndexDomain: (pu_id,pltnum);
				Text: "Lists which units belong as part of each coal plant";
				Comment: "Read from cmmCoalPlantsData.txt";
			}
			Parameter map_pltnum_MX_UNT {
				IndexDomain: (MX_UNT,pltnum);
				Text: "Lists which units belong as part of each coal plant";
				Definition: sum((pu_id)| Map_MX_UNT_pu_id(MX_UNT,pu_id)=1, map_pltnum_puid(pu_id,pltnum));
			}
			StringParameter Unitid {
				IndexDomain: (pu_id);
			}
			StringParameter PlantName {
				IndexDomain: (pu_id);
			}
			StringParameter PlantState {
				IndexDomain: (pu_id);
			}
			Parameter NDReg_plant {
				IndexDomain: (pu_id);
			}
			Parameter Unit_NDREGN {
				IndexDomain: (pu_id,NDREGN);
				Definition: NDREGN = NDReg_plant(pu_id);
			}
			Parameter Bit_Share {
				IndexDomain: pu_id;
			}
			Parameter GOB_Share {
				IndexDomain: pu_id;
			}
			Parameter Lig_share {
				IndexDomain: pu_id;
			}
			Parameter SubBit_share {
				IndexDomain: pu_id;
			}
			Parameter Plant_C_Prof {
				IndexDomain: (pltnum,MX_NCI);
			}
			Parameter Plant_C_Prof1 {
				IndexDomain: (pu_id,MX_NCI);
				Definition: sum((pltnum),Plant_C_Prof(pltnum,MX_NCI)| map_pltnum_puid(pu_id,pltnum));
			}
			Parameter Plant_C_Prof2 {
				IndexDomain: (pu_id,SReg,Sulf,Mtyp,Rank);
				Definition: {
					
					
					sum((MX_NCI), Plant_C_Prof1(pu_id,MX_NCI) | Map_MXNCI_CoalType(MX_NCI,SReg, Sulf, Mtyp, Rank))
				}
			}
			Parameter Plant_C_ProfActYrs {
				IndexDomain: (pu_id,SReg,Sulf,Mtyp,Rank,yr);
				Text: "This shows years with active coal contracts by puid (plant-unit)";
				Definition: sum((cnum), ContractProfile(cnum,yr)|Map_ContProfileNum(pu_id,SReg,Sulf,Mtyp,Rank,cnum));
			}
			ElementParameter Plant_S_Prof {
				IndexDomain: (pu_id);
				Range: SubDivProfileNumber;
			}
			Parameter Plant_T_Prof {
				IndexDomain: (pu_id,SReg,Sulf,Mtyp,Rank);
			}
			Parameter ContExpireYr {
				IndexDomain: (pltnum,MX_NCI);
				Text: "Contract expire year for contracted coal represented in ContSupCrvBtus(pltnum,MX_NCI)";
			}
			Parameter ContSupCrvBtus {
				IndexDomain: (pltnum,MX_NCI);
				Text: "Contracted coal supply by plant number and coal supply curve (including international)";
				Comment: {
					"New input of contracted coal supply to replace what was previously read from CMM_C7_inp_specificplantprofile.txt
					The new parameter is read from cmmProfiles.txt"
				}
			}
			Parameter CurvShareOfPlant {
				IndexDomain: (pltnum,MX_NCI);
				Text: "Historical share of plant capacity filled by this supply curve";
				Comment: "This is calculated share of EMM plant capacity in 2019 as denominator and EIA-923 deliveris as numerator.  Max of 1.0";
			}
			Parameter ContSupCrvBtus_B {
				IndexDomain: (pu_id,MX_NCI);
				Text: "Coal Contract quantiy by Unit from ECP with Supply Curve Mapped To It (TBtus)";
				Definition: sum((pltnum)| map_pltnum_puid(pu_id,pltnum)=1, ContSupCrvBtus(pltnum,MX_NCI) );
				Comment: "This replaces coal plant Btus with COALEMM_EMM_CL_BTUs(MX_UNT,MNUMYR) by adding avaiable supply curves to each plant";
			}
			Parameter ContSupCrvBtus_C {
				IndexDomain: (MX_NCI,MX_UNT,pu_id,SReg,Sulf,Mtyp,Rank) | Map_MX_UNT_pu_id(MX_UNT,pu_id) and Map_MXNCI_CoalType(MX_NCI,SReg,Sulf,Mtyp,Rank);
				Text: "Coal Contract quantiy by Unit from ECP with Supply Curve Mapped To It (TBtus)";
				Definition: ContSupCrvBtus_B(pu_id,MX_NCI);
				Comment: "This replaces coal plant Btus with COALEMM_EMM_CL_BTUs(MX_UNT,MNUMYR) by adding avaiable supply curves to each plant";
			}
			Parameter ContExpireYr_B {
				IndexDomain: (pu_id,MX_NCI);
				Definition: sum((pltnum)| map_pltnum_puid(pu_id,pltnum)=1, ContExpireYr(pltnum,MX_NCI) );
			}
			Parameter ContExpireYr_C {
				IndexDomain: (MX_NCI,MX_UNT);
				Definition: sum((pu_id)| Map_MX_UNT_pu_id(MX_UNT,pu_id)=1, ContExpireYr_B(pu_id,MX_NCI) );
			}
			Set CoalPlantNum {
				Index: pltnum;
			}
			Parameter ContProfNum {
				IndexDomain: (pltnum,MX_NCI);
			}
			Parameter ContProfNum_B {
				IndexDomain: (pu_id,MX_NCI);
				Definition: sum((pltnum)| map_pltnum_puid(pu_id,pltnum)=1, Plant_C_Prof(pltnum,MX_NCI) );
			}
			Parameter ContProfNum_C {
				IndexDomain: (MX_NCI,MX_UNT);
				Definition: sum((pu_id)| Map_MX_UNT_pu_id(MX_UNT,pu_id)=1, ContProfNum_B(pu_id,MX_NCI) );
			}
			Parameter Plant_T_Prof2 {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: Plant_T_Prof(pu_id,SReg, Sulf, Mtyp, Rank);
			}
			Parameter MapPlant_T_Prof2_and_tnum {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank,tnum) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: Plant_T_Prof2(pu_id,SReg, Sulf, Mtyp, Rank)=Val(tnum);
			}
			ElementParameter Plant_L_Prof {
				IndexDomain: (pu_id);
				Range: LigDivProfileNumber;
			}
			Parameter Trubnd1 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					!sum((pu_id,tnum)|
					!Plant_T_Prof2(pu_id,Scrv)=tnum,
					!TranspProfile(tnum,yr)*emm_cl_btus(pu_id,yr))
				}
			}
			Parameter Plant_BaseYear_Btu {
				IndexDomain: (pu_id,SReg,Sulf,Mtyp,Rank);
				Comment: {
					"This is coal deliveries from EIA-923 as computed for the base year and supplied from the \"Contracts\" query in CMM.mdb.
					See inp_specificplantprofile for file read of the MSAccess table.  Note, this file is by plant and coal supply region but has no year."
				}
			}
			Parameter TrubndScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					!sum((pu_id,pt2,tnum)|
					!EMM_CL_ECPT_Fast(pu_id,yr,pt2) and MapPlant_T_Prof2_and_tnum(pu_id,Scrv,tnum)
					!and c_ecp_scrub(pt2) = '1' and MapPlantid_unitid_DemandRegion(pu_id,DReg)
					!and Trate2RevisedBase(Scrv,DReg,'E') < Trate3RevisedBase(Scrv,DReg,'E'),
					!TranspProfile(tnum,yr)*EMM_CL_BTUs_A(pu_id,yr))
					
					sum((pu_id)|
					MapPlantid_unitid_DemandRegion(pu_id,DReg),
					!and Trate2RevisedBase(Scrv,DReg,'E') < Trate3RevisedBase(Scrv,DReg,'E'),
					Copy1_TrubndScrubbed(SReg, Sulf, Mtyp, Rank,pu_id,yr))
				}
			}
			Parameter BY_CoalPlantDeliveries {
				IndexDomain: (pu_id);
				Definition: {
					!Sum((SReg,Sulf,Mtyp,Rank), Plant_BaseYear_Btu(pu_id,SReg,Sulf,Mtyp,Rank))
					
					! Replaced with new Base coal plant deliveries from ECP values for 2019.
					sum ((MX_NCI,MX_UNT,SReg,Sulf,Mtyp,Rank),  ContSupCrvBtus_C(MX_NCI,MX_UNT,pu_id,SReg,Sulf,Mtyp,Rank) )
				}
				Comment: {
					"Sum of contract deliveries by plant from CMM.mdb in TBtus.  Will use to replace EMM_CL_BTUs in the base year iteration 1 only, 
					and contract quanties in forecast years where contracts are active.  DAF 9-12-19"
				}
			}
			Parameter BY_CoalPlantDeliveriesWscrv {
				IndexDomain: (pu_id,MX_NCI);
				Definition: {
					!Sum((SReg,Sulf,Mtyp,Rank), Plant_BaseYear_Btu(pu_id,SReg,Sulf,Mtyp,Rank))
					
					! Replaced with new Base coal plant deliveries from ECP values for 2019.
					sum ((MX_UNT,SReg,Sulf,Mtyp,Rank),  ContSupCrvBtus_C(MX_NCI,MX_UNT,pu_id,SReg,Sulf,Mtyp,Rank) )
				}
				Comment: {
					"Sum of contract deliveries by plant from CMM.mdb in TBtus.  Will use to replace EMM_CL_BTUs in the base year iteration 1 only, 
					and contract quanties in forecast years where contracts are active.  DAF 9-12-19"
				}
			}
			Parameter BY_CoalPlantDeliveries_A {
				IndexDomain: (pu_id,yr);
				Definition: BY_CoalPlantDeliveries(pu_id);
				Comment: "Contract quantities from the base year appied to all NEMS years.  MNUMYR is the index years.";
			}
			Parameter BY_CoalPlantDeliveriesWscrv_A {
				IndexDomain: (pu_id,MX_NCI,yr);
				Definition: BY_CoalPlantDeliveriesWscrv(pu_id,MX_NCI);
				Comment: "Contract quantities from the base year appied to all NEMS years.  MNUMYR is the index years.";
			}
			Parameter Copy_TrubndScrubbed {
				IndexDomain: (pu_id,yr,pt2);
				Range: nonnegative;
				Definition: EMM_CL_ECPT_Fast(pu_id,yr,pt2);
				Comment: "This variable appear unused - could remove DF 9/19";
			}
			Parameter TrubndScrubbedNEMS {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Text: "temporary";
				Range: nonnegative;
			}
			Parameter Copy1_TrubndScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pu_id,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					sum((pt2,tnum)|
					EMM_CL_ECPT_Fast(pu_id,yr,pt2) and MapPlant_T_Prof2_and_tnum(pu_id,SReg, Sulf, Mtyp, Rank,tnum)
					and c_ecp_scrub_Scrubbed(pt2), !and MapPlantid_unitid_DemandRegion(pu_id,DReg)
					!and Trate2RevisedBase(Scrv,DReg,'E') < Trate3RevisedBase(Scrv,DReg,'E'),
					TranspProfile(tnum,yr)*EMM_CL_BTUs_A(pu_id,yr))
				}
			}
			Parameter Copy1_TrubndUnScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pu_id,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					sum((pt2,tnum)|
					EMM_CL_ECPT_Fast(pu_id,yr,pt2) and MapPlant_T_Prof2_and_tnum(pu_id,SReg, Sulf, Mtyp, Rank,tnum)
					and c_ecp_scrub_Unscrubbed(pt2), !and MapPlantid_unitid_DemandRegion(pu_id,DReg)
					!and Trate2RevisedBase(Scrv,DReg,'E') < Trate3RevisedBase(Scrv,DReg,'E'),
					TranspProfile(tnum,yr)*EMM_CL_BTUs_A(pu_id,yr))
				}
			}
			Parameter Copy_Copy1_TrubndScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pu_id,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					sum((pt2,tnum)|
					EMM_CL_ECPT_Fast(pu_id,yr,pt2) and Plant_T_Prof2(pu_id,SReg, Sulf, Mtyp, Rank)=Val(tnum)
					and c_ecp_scrub_Scrubbed(pt2), !and EMM_CL_CLRG_A(pu_id) = DReg
					!and Trate2RevisedBase(Scrv,DReg,'E') < Trate3RevisedBase(Scrv,DReg,'E'),
					TranspProfile(tnum,yr)*EMM_CL_BTUs_A(pu_id,yr))
				}
			}
			Parameter Copy_Copy1_TrubndUnScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pu_id,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					sum((pt2,tnum)|
					EMM_CL_ECPT_Fast(pu_id,yr,pt2) and Plant_T_Prof2(pu_id,SReg, Sulf, Mtyp, Rank)=Val(tnum)
					and c_ecp_scrub_UNSCRUBBED(pt2), !and EMM_CL_CLRG_A(pu_id) = DReg
					!and Trate2RevisedBase(Scrv,DReg,'E') < Trate3RevisedBase(Scrv,DReg,'E'),
					TranspProfile(tnum,yr)*EMM_CL_BTUs_A(pu_id,yr))
				}
			}
			Parameter TrubndUnscrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					!sum((pu_id,pt2,tnum)|
					!EMM_CL_ECPT_Fast(pu_id,yr,pt2) and MapPlant_T_Prof2_and_tnum(pu_id,Scrv,tnum)
					!and c_ecp_scrub(pt2) = '2' and MapPlantid_unitid_DemandRegion(pu_id,DReg)
					!and Trate2RevisedBase(Scrv,DReg,'E') < Trate3RevisedBase(Scrv,DReg,'E'),
					!TranspProfile(tnum,yr)*EMM_CL_BTUs_A(pu_id,yr))
					sum((pu_id)|
					MapPlantid_unitid_DemandRegion(pu_id,DReg),
					!and Trate2RevisedBase(Scrv,DReg,'E') < Trate3RevisedBase(Scrv,DReg,'E'),
					Copy1_TrubndUnScrubbed(SReg, Sulf, Mtyp, Rank,pu_id,yr))
				}
			}
			Parameter TrubndUnscrubbedNEMS {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Range: nonnegative;
			}
			Parameter Sdvconct_1_A {
				IndexDomain: (pu_id,yr);
				Definition: {
					sum((snum,SReg, Sulf, Mtyp, Rank)| SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank) and
					Plant_S_Prof(pu_id) = snum,
					SubDivProfile(snum,yr)*EMM_CL_BTUs_A(pu_id,yr)
					*CMM_CL_BTUs_A(pu_id,SReg, Sulf, Mtyp, Rank)
					/$TBTU(pu_id))
				}
			}
			Parameter Sdvconct_1_A2 {
				IndexDomain: (yr,pu_id);
				Definition: Sdvconct_1_A(pu_id,yr);
			}
			Parameter Sdvconct_1 {
				IndexDomain: (pu_id,DReg,yr)|MapPlantid_unitid_DemandREgion(pu_id,DReg);
				Range: nonnegative;
				Definition: Sdvconct_1_A(pu_id,yr);
			}
			Parameter Sdvconct_2 {
				IndexDomain: (pt2,Dreg,cyr);
				Range: nonnegative;
				Definition: {
					sum((pu_id)|
					( EMM_CL_ECPT_Fast(pu_id,cyr,pt2)),
					Sdvconct_1(pu_id,DReg,cyr))
				}
			}
			Parameter Sdvconct_NEMS {
				IndexDomain: (pt4,DReg,yr);
				Range: nonnegative;
			}
			Parameter Ldvconct_1B {
				IndexDomain: (pu_id,yr);
				Range: nonnegative;
				Definition: {
					!!sum((lnum)|
					!!Plant_L_Prof(pu_id)= lnum,
					!and EMM_CL_CLRG_A(pu_id)= DReg and EMM_CL_ECPT_Fast(pu_id,yr,pt2)),
					!!LigDivProfile(lnum,yr)*EMM_CL_BTUs_A(pu_id,yr))
					!*CMM_CL_BTUs_A(pu_id,Scrv)
					!/$TBTU(pu_id))
					
					!this was pretty quick
					
					sum((lnum,SReg, Sulf, Mtyp, Rank)| SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank) and
					Plant_L_Prof(pu_id) = lnum,
					LigDivProfile(lnum,yr)*EMM_CL_BTUs_A(pu_id,yr)
					*CMM_CL_BTUs_A(pu_id,SReg, Sulf, Mtyp, Rank)
					/$TBTU(pu_id))
				}
			}
			Parameter Ldvconct_1B2 {
				IndexDomain: (yr,pu_id);
				Range: nonnegative;
				Definition: Ldvconct_1B(pu_id,yr);
			}
			Parameter Ldvconct_1 {
				IndexDomain: (pu_id,DReg,yr);
				Range: nonnegative;
				Definition: {
					!sum((pu_id,lnum,Scrv)|
					!(Plant_L_Prof(pu_id)= lnum
					!and MapPlantid_unitid_DemandRegion(pu_id,DReg)
					!and EMM_CL_ECPT_Fast(pu_id,yr,pt2)),
					!LigDivProfile(lnum,yr)*EMM_CL_BTUs_A(pu_id,yr)
					!*CMM_CL_BTUs_A(pu_id,Scrv)
					!/$TBTU(pu_id))
					
					!this was pretty quick
					!Ldvconct_1B(pu_id,yr)
				}
				Comment: "New calc of Lignite constraints April 2022 DAF";
			}
			Parameter Ldvconct_2 {
				IndexDomain: (pt2,Dreg,yr);
				Range: nonnegative;
				Definition: {
					sum((pu_id)|
					( EMM_CL_ECPT_Fast(pu_id,yr,pt2)),
					Ldvconct_1(pu_id,DReg,yr))
				}
			}
			Parameter Ldvconct_1C {
				IndexDomain: (pu_id);
				Range: nonnegative;
				Definition: {
					sum((SReg, Sulf, Mtyp, Rank)| LigniteSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					!Plant_L_Prof(pu_id)= lnum,
					!and EMM_CL_CLRG_A(pu_id)= DReg and EMM_CL_ECPT_Fast(pu_id,yr,pt2)),
					CMM_CL_BTUs_A(pu_id,SReg, Sulf, Mtyp, Rank))
					!/$TBTU(pu_id))
					
					!this was pretty quick
				}
			}
			Parameter Ldvconct_1D {
				IndexDomain: (pt2,DReg,yr);
				Range: nonnegative;
				Definition: {
					sum((pu_id)|
					!Plant_L_Prof(pu_id)= lnum,
					MapPlantid_unitid_DemandRegion(pu_id,DReg) and EMM_CL_ECPT_Fast(pu_id,yr,pt2),
					Ldvconct_1B(pu_id,yr)
					*Ldvconct_1C(pu_id)
					/$TBTU(pu_id))
					
					!this was pretty quick
				}
			}
			Parameter Ldvconct_NEMS {
				IndexDomain: (pt4,DReg,yr);
				Range: nonnegative;
			}
			Parameter Cdyrs_1 {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "jammed up then tried removing DReg order and still jammed up now trying DREG as 2nd step had to add pu_id";
				Range: nonnegative;
				Definition: {
					sum((cnum)|
					!( EMM_CL_ECPT_Fast(pu_id,yr,pt2) and
					(TBTU(pu_id) >0 and Plant_C_Prof2(pu_id,SReg, Sulf, Mtyp, Rank)= cnum),
					ContractProfile(cnum,yr)*EMM_CL_BTUs_A(pu_id,yr)*Cdyrs_2(pu_id,SReg, Sulf, Mtyp, Rank))
				}
				Comment: "This parameter was old version of plant-unit contracted Btus but not used anywhere.  -eliminate DAF";
			}
			Parameter Map_ContProfileNum {
				IndexDomain: (pu_id,SReg,Sulf,Mtyp,Rank,cnum);
				Definition: Plant_C_Prof2(pu_id,SReg, Sulf, Mtyp, Rank)= cnum;
			}
			Parameter Cdyrs_2 {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "jammed up then tried removing DReg order and still jammed up now trying DREG as 2nd step had to add pu_id";
				Range: nonnegative;
				Definition: {
					If TBTU(pu_id) > 0 then
					CMM_CL_BTUs_A(pu_id,SReg, Sulf, Mtyp, Rank)/$TBTU(pu_id)
					endif
				}
			}
			Parameter ContractedCoalBtusPuidYrs {
				IndexDomain: (pu_id,SReg,Sulf,Mtyp,Rank,yr);
				Definition: {
					!EMM_CL_BTUs_A_Alt(pu_id,yr)*
				}
			}
			Parameter ActiveContScrubbedCoal {
				IndexDomain: (pu_id,SReg,Sulf,Mtyp,Rank,cyr);
				Definition: {
					sum((pt2) | (EMM_CL_ECPT_Fast(pu_id,cyr,pt2) and c_ecp_scrub(pt2) = '1'),
					EMM_CL_BTUs_A_AltScrv2(pu_id,Sreg,Sulf,Mtyp,Rank,cyr) * Plant_C_ProfActYrs(pu_id,SReg,Sulf,Mtyp,Rank,cyr))
				}
				Comment: "This will replace Copy8_CdyrsScrubbed(pu_id,SReg, Sulf, Mtyp, Rank,yr) in contracts logic";
			}
			Parameter ActiveContUnScrubbedCoal {
				IndexDomain: (pu_id,SReg,Sulf,Mtyp,Rank,cyr);
				Definition: {
					sum((pt2) | (EMM_CL_ECPT_Fast(pu_id,cyr,pt2) and c_ecp_scrub(pt2) = '2'),
					EMM_CL_BTUs_A_AltScrv2(pu_id,Sreg,Sulf,Mtyp,Rank,cyr) * Plant_C_ProfActYrs(pu_id,SReg,Sulf,Mtyp,Rank,cyr))
				}
				Comment: "This will replace Copy9_CdyrsUnScrubbed(pu_id,SReg, Sulf, Mtyp, Rank,yr) in contracts logic.";
			}
			Parameter Copy8_CdyrsScrubbed {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank,cyr)|TBTU(pu_id) > 0 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					sum((pt2,cnum)|
					( EMM_CL_ECPT_Fast(pu_id,cyr,pt2) and c_ecp_scrub(pt2) = '1' and
					!TBTU(pu_id) > 0 and
					Plant_C_Prof2(pu_id,SReg, Sulf, Mtyp, Rank)= cnum),
					ContractProfile(cnum,cyr)*EMM_CL_BTUs_A_Alt(pu_id,cyr)) !*CMM_CL_BTUs_A(pu_id,SReg, Sulf, Mtyp, Rank)/$TBTU(pu_id))
				}
				Comment: "Rework contract quanties to not use EMM_CL_BTUs from restart file, now uses CMM.mdb contract quatities in itteration 1  DAF 9/17/19";
			}
			Parameter Copy8_CdyrsScrubbed2 {
				IndexDomain: (pu_id,Scrv1,yr);
				Range: nonnegative;
				Definition: Sum((SReg, Sulf, Mtyp, Rank)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),Copy8_CdyrsScrubbed(pu_id,SReg, Sulf, Mtyp, Rank,yr));
			}
			Parameter Copy8c_CdyrsScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,Dreg,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					!sum((pu_id,pt2,cnum)|
					!( EMM_CL_ECPT(pu_id,yr)= pt2 and C_ECP_Scrub(pt2) = '1' and
					!Plant_C_Prof(pu_id,Scrv)= cnum
					!and EMM_CL_CLRG(pu_id)= DReg),
					!ContractProfile(cnum,yr)*emm_cl_btus(pu_id,yr)
					!*cmm_cl_btu(pu_id,Scrv)/tbtu(pu_id)) -----> Goal
					
					
					!sum((pu_id)| EMM_CL_CLRG_A(pu_id)=DReg,
					sum((pu_id)| MapPlantid_unitid_DemandRegion(pu_id,DReg),
					!Copy8_CdyrsScrubbed(pu_id,SReg, Sulf, Mtyp, Rank,yr))
					ActiveContScrubbedCoal(pu_id,SReg,Sulf,Mtyp,Rank,yr))
				}
				Comment: {
					"!Replaced with new contracts logic May 2022"
				}
			}
			Parameter Copy9_CdyrsUnScrubbed {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "jammed up then tried removing DReg order and still jammed up now trying DREG as 2nd step had to add pu_id";
				Range: nonnegative;
				Definition: {
					sum((pt2,cnum)|
					( EMM_CL_ECPT_Fast(pu_id,cyr,pt2) and c_ecp_scrub(pt2) = '2' and
					Plant_C_Prof2(pu_id,SReg, Sulf, Mtyp, Rank)= cnum),
					ContractProfile(cnum,cyr)*EMM_CL_BTUs_A_Alt(pu_id,cyr)*CMM_CL_BTUs_A(pu_id,SReg, Sulf, Mtyp, Rank)/$TBTU(pu_id))
				}
				Comment: "Rework contract quanties to not use EMM_CL_BTUs from restart file, now uses CMM.mdb contract quatities in itteration 1  DAF 9/17/19";
			}
			Parameter CONTRACTSall1 {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "jammed up then tried removing DReg order and still jammed up now trying DREG as 2nd step had to add pu_id";
				Range: nonnegative;
				Definition: EMM_CL_BTUs_A(pu_id,cyr)*CMM_CL_BTUs_A(pu_id,SReg, Sulf, Mtyp, Rank)/$TBTU(pu_id);
			}
			Parameter CONTRACTSall1A {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank,DReg,cyr)| MapPlantid_unitid_DemandRegion(pu_id,DReg) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "jammed up then tried removing DReg order and still jammed up now trying DREG as 2nd step had to add pu_id";
				Range: nonnegative;
				Definition: CONTRACTSall1(pu_id,SReg, Sulf, Mtyp, Rank,cyr);
			}
			Parameter CONTRACTSall2 {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank,cyr)|CONTRACTSall1(pu_id,SReg, Sulf, Mtyp, Rank,cyr) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "jammed up then tried removing DReg order and still jammed up now trying DREG as 2nd step had to add pu_id";
				Range: nonnegative;
				Definition: {
					Sum(cnum|Plant_C_Prof2(pu_id,SReg, Sulf, Mtyp, Rank)= cnum,
					ContractProfile(cnum,cyr))
				}
			}
			Parameter CONTRACTSall2A {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank,DReg,cyr)| MapPlantid_unitid_DemandRegion(pu_id,DReg) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "jammed up then tried removing DReg order and still jammed up now trying DREG as 2nd step had to add pu_id";
				Range: nonnegative;
				Definition: CONTRACTSall2(pu_id,SReg, Sulf, Mtyp, Rank,cyr);
			}
			Parameter CONTRACTSall3 {
				IndexDomain: (pu_id,SReg, Sulf, Mtyp, Rank,cyr)|Btu2(SReg, Sulf, Mtyp, Rank);
				Text: "jammed up then tried removing DReg order and still jammed up now trying DREG as 2nd step had to add pu_id";
				Range: nonnegative;
				Definition: CONTRACTSall1(pu_id,SReg, Sulf, Mtyp, Rank,cyr)*CONTRACTSall2(pu_id,SReg, Sulf, Mtyp, Rank,cyr);
			}
			Parameter CONTRACTSall4 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: sum((pu_id)| MapPlantid_unitid_DemandRegion(pu_id,DReg),CONTRACTSall3(pu_id,SReg, Sulf, Mtyp, Rank,yr));
			}
			Parameter Copy9_CdyrsUnScrubbed2 {
				IndexDomain: (pu_id,Scrv1,yr);
				Range: nonnegative;
				Definition: Sum((SReg, Sulf, Mtyp, Rank)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),Copy9_CdyrsUnScrubbed(pu_id,SReg, Sulf, Mtyp, Rank,yr));
			}
			Parameter Copy9c_CdyrsUnScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,Dreg,yr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					!sum((pu_id)| EMM_CL_CLRG_A(pu_id)=DReg,
					sum((pu_id)| MapPlantid_unitid_DemandRegion(pu_id,DReg),
					!Copy9_CdyrsUnScrubbed(pu_id,SReg, Sulf, Mtyp, Rank,yr))
					ActiveContUnScrubbedCoal(pu_id,SReg,Sulf,Mtyp,Rank,yr))
				}
			}
			Variable ProductionVolume {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
			}
			Parameter ProductionVolumeTons {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: {
					!ProductionVolume(Scrv,yr)/$Btu2(Scrv)
				}
			}
			Parameter ProductionVolumeTons1 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,yr);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: {
					!ProductionVolume(SReg,Sulf,mtyp,rank,yr)/$Btu2(SReg,Sulf,mtyp,rank)
				}
			}
			Parameter ProductionVolumeTons2 {
				IndexDomain: (Scrv1,yr);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: Sum((SReg, Sulf, Mtyp, Rank)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),ProductionVolumeTons(SReg, Sulf, Mtyp, Rank,yr));
			}
			Parameter ProductionVolumeTons3 {
				IndexDomain: (yr,Scrv1,SReg,Sulf,Mtyp,Rank)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,yr);
			}
			Parameter ProdVolSolutionPriorYr {
				IndexDomain: (yr,Scrv1,SReg,Sulf,Mtyp,Rank);
				Range: nonnegative;
			}
			Parameter ProductionVolumeTonsforQtarg {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
				Definition: ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,cyr);
			}
			Parameter LaggedProductionTonsforCPS1 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: {
					
					Sum(cyr|Map1_Lag_Cyr_yr(cyr,yr),
					If ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,cyr) then
					ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,cyr)
					else
					By_prod1(SReg,Sulf,Mtyp,Rank)
					endif)
				}
			}
			Parameter QtargProductionTonsforCPS1 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: {
					
					Sum(cyr|Map1_Lag_Cyr_yr(cyr,yr) and ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,cyr),
					ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,cyr))
				}
			}
			Parameter Map1_Lag_Cyr_yr {
				IndexDomain: (cyr,yr)|yr=cyr or yr=cyr+1;
				Definition: 1;
			}
			Parameter SupplyCurveStepBalShadow {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr)|Btu2(SReg, Sulf, Mtyp, Rank);
				Definition: SupplyCurveStepBalance.ShadowPrice(SReg, Sulf, Mtyp, Rank,cyr);
			}
			Parameter SupplyCurveStepBalShadow2 {
				IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,cyr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
				Definition: SupplyCurveStepBalShadow(SReg, Sulf, Mtyp, Rank,cyr);
			}
			Parameter SupplyCurveStepBalShadow2a {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
			}
			Parameter SupplyCurveStepBalShadow3 {
				IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "See Execution Statement";
			}
			Parameter SupplyCurveStepBalShadow4 {
				IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					!SupplyCurveStepBalShadow3(Scrv1,Scrv,cyr)*Btu(Scrv1,Scrv)
				}
			}
			Parameter SupplyCurveStepBalShadow5 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
				Definition: {
					!SupplyCurveStepBalShadow4(Scrv1,SReg,Sulf,Mtyp,Rank,yr)
				}
			}
			Parameter SupplyCurveStepBalShadow6 {
				IndexDomain: (Scrv1,yr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank)|btu(Scrv1,SReg,Sulf,Mtyp,Rank),
					SupplyCurveStepBalShadow4(Scrv1,SReg,Sulf,Mtyp,Rank,yr))
				}
			}
			Parameter LaggedProductionPriceforCPS1 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: {
					
					!Sum(cyr|Map1_Lag_Cyr_yr(cyr,yr),
					!If SupplyCurveStepBalShadow4(Scrv1,SReg,Sulf,Mtyp,Rank,cyr)>0 then
					!SupplyCurveStepBalShadow4(Scrv1,SReg,Sulf,Mtyp,Rank,cyr)
					!else
					!By_mmp1(SReg,Sulf,Mtyp,Rank)
					LaggedProductionPriceforCPS2(Scrv1,SReg, Sulf, Mtyp, Rank,yr)
				}
			}
			Parameter LaggedProductionPriceforCPS2 {
				IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,yr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: {
					
					!Sum(cyr|Map1_Lag_Cyr_yr(cyr,yr),
					!If SupplyCurveStepBalShadow4(Scrv1,SReg,Sulf,Mtyp,Rank,cyr)>0 then
					!SupplyCurveStepBalShadow4(Scrv1,SReg,Sulf,Mtyp,Rank,cyr)
					!else
					!By_mmp1(SReg,Sulf,Mtyp,Rank)
					!endif)
				}
			}
			Parameter LaggedProductionPriceforCPS3 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: {
					
					!Sum(cyr|Map1_Lag_Cyr_yr(cyr,yr),
					!If SupplyCurveStepBalShadow4(Scrv1,SReg,Sulf,Mtyp,Rank,cyr)>0 then
					!SupplyCurveStepBalShadow4(Scrv1,SReg,Sulf,Mtyp,Rank,cyr)
					!else
					!By_mmp1(SReg,Sulf,Mtyp,Rank)
					!endif)
				}
			}
			Parameter InputProductionTonsforCPS1 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: {
					
					!IF ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,yr)>0 then
					!ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,yr)
					!elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank)and yr = '1990' then
					!Lag_Prod_Temp(SCrv1,SReg,Sulf,Mtyp,Rank,'1990')
					!else
					!Lag_Prod_Temp(SCrv1,SReg,Sulf,Mtyp,Rank,yr)
					
					!endif
				}
			}
			Parameter InputProductionPriceforCPS1 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
				Text: "cumulative production on the supply curve - part of model solution";
				Range: nonnegative;
				Definition: {
					
					!IF ProductionVolumeTons(SReg,Sulf,Mtyp,Rank,yr)>0 then !if there's something in memory for this already
					!LaggedProductionPriceforCPS1(Scrv1,SReg,Sulf,Mtyp,Rank,yr)
					!elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank)and yr = '1990' then
					!Lag_PriTemp(SCrv1,SReg,Sulf,Mtyp,Rank,'1990')
					!else
					!Lag_PriTemp(SCrv1,SReg,Sulf,Mtyp,Rank,yr)
					
					!endif
				}
			}
			Parameter TotalProduction {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,yr);
				Definition: {
					!ProductionVolume(SReg,Sulf,Mtyp,Rank,yr)
				}
			}
			Variable ProductionVolumeSteps {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Scrv1Step,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: [0, SC_QUAN1(SReg, Sulf, Mtyp, Rank, Scrv1Step, cyr)];
			}
			Parameter ProductionVolumeStepsDetail {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
				Definition: {
					!ProductionVolumeSteps(SReg,Sulf,Mtyp,Rank,Scrv1Step,yr)
				}
			}
			Parameter OutputTransport1 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,yr)|Btu2(SReg,Sulf,Mtyp,Rank);
				Definition: Sum((nsteps),ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,yr));
			}
			Parameter MarginalProductionPrice {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
				Definition: {
					if ProductionVolumeStepsDetail(SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) >0 then
					ProductionCostDetail(SReg,Sulf,Mtyp,Rank,Scrv1Step,yr)/
					ProductionVolumeStepsDetail(SReg,Sulf,Mtyp,Rank,Scrv1Step,yr)
					endif
				}
			}
			Parameter ElectricityTransport1Tons {
				IndexDomain: (SReg,Sulf,Mtyp,ElecRank,pt2,DReg,yr);
				Text: "Moved definition to CalcCoalReportingTotals   05-08-18 DAF";
				Definition: {
					!if Btu2(SReg,Sulf,Mtyp,ElecRank) >0 then
					!Sum(nsteps,ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,ElecRank,DReg,pt2,cyr)/
					!Btu2(SReg,Sulf,Mtyp,ElecRank))
					!endif
				}
			}
			Variable ResidentialTransport {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "Residential and Commercial";
				Range: nonnegative;
			}
			Variable EscapeRC {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Parameter EscapeRCreporting {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr);
				Definition: {
					Sum((cyr,ResSec)|map_cyr_yr(cyr,yr) and ResSec in Subsector,
					EscapeRC(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr))
				}
			}
			Parameter ElectrTranspTonsCR {
				IndexDomain: (MNUMCR,yr);
				Definition: {
					If mnumcr < 11 then
					Sum((SReg, Sulf, Mtyp, Rank,pt2,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					(ElectricityTransport1Tons(SReg, Sulf, Mtyp, Rank,pt2,DReg,yr)))
					else
					Sum((SReg, Sulf, Mtyp, Rank,pt2,DReg),
					(ElectricityTransport1Tons(SReg, Sulf, Mtyp, Rank,pt2,DReg,yr)))
					endif
				}
			}
			Parameter ElectrTranspTrillsCR {
				IndexDomain: (MNUMCR,yr);
				Text: "Moved definition to CalcCoalReportingTotals  5-08-18 DAF";
				Definition: {
					!If mnumcr < 11 then
					!Sum((nsteps,ElecScrv,pt2,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					!ElectricityTransportAC(nsteps,ElecScrv,DReg,pt2,cyr))+
					!Sum((nsteps,nUS,USi,DReg,pt2)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					!ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr))
					!else
					!Sum((nsteps,ElecScrv,pt2,DReg),
					!ElectricityTransportAC(nsteps,ElecScrv,DReg,pt2,cyr))+
					!Sum((nsteps,nUS,USi,DReg,pt2),
					!ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr))
					!endif
				}
			}
			Parameter WasteCoalDistribution_btu {
				IndexDomain: (MNUMCR,MNUMLR,cyr);
				Definition: {
					Sum((nsteps,SReg,M14,Sulf,Mtyp,Rank,pt2,DReg)|
					Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and Map_m14_mnumlr(M14,MNUMLR) and Rank = '5G' and
					Map_DReg_MNUMCR(DReg,MNUMCR)=1, ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))+
					Sum((SReg,M14,Sulf,Mtyp,Rank,ResSec,DReg)|
					Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and Map_m14_mnumlr(M14,MNUMLR) and Rank = '5G' and
					Map_DReg_MNUMCR(DReg,MNUMCR)=1, ResidentialTransport(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr))+
					Sum((SReg,M14,Sulf,Mtyp,Rank,IndSec,DReg)|
					Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and Map_m14_mnumlr(M14,MNUMLR) and Rank = '5G' and
					Map_DReg_MNUMCR(DReg,MNUMCR)=1, IndustrialTransport(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr)) +
					Sum((SReg,M14,Sulf,Mtyp,Rank,CokSec,DReg)|
					Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and Map_m14_mnumlr(M14,MNUMLR) and Rank = '5G' and
					Map_DReg_MNUMCR(DReg,MNUMCR)=1,CokingTransport(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)) +
					Sum((SReg,M14,Sulf,Mtyp,Rank,LiquSec,DReg)|
					Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and Map_m14_mnumlr(M14,MNUMLR) and Rank = '5G' and
					Map_DReg_MNUMCR(DReg,MNUMCR)=1,LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr))+
					Sum((SReg,M14,Sulf,Mtyp,Rank,ExpSec,USe,DReg)|
					Sreg = '01NA' and Map_SReg_M14(SReg,M14)=1 and Map_m14_mnumlr(M14,MNUMLR) and Rank = '5G' and
					Map_DReg_MNUMCR(DReg,MNUMCR)=1 and USDRegIntlMapping(USe,DReg),
					ExportsTransport5Final(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr))
				}
			}
			Parameter ElectrTranspTonsCRSR {
				IndexDomain: (MNUMCR,SReg,cyr);
				Definition: {
					Sum((Sulf,Mtyp,Rank,pt2,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					(ElectricityTransport1Tons(Sreg,Sulf,Mtyp,Rank,pt2,DReg,cyr)))
				}
			}
			Parameter ElectrTranspTonsCRSR2 {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					
					Sum((SReg,m14)|
					Map_SReg_M14(SReg,M14) and
					Map_m14_mnumlr(M14,MNUMLR),
					ElectrTranspTonsCRSR(MNUMCR,SReg,cyr))
				}
			}
			Parameter ElectrTranspTonsCRSR3 {
				IndexDomain: (MNUMLR,cyr);
				Definition: {
					
					Sum(mnumcr,ElectrTranspTonsCRSR2(MNUMCR,MNUMLR,cyr))
				}
			}
			Parameter ElectrTranspTonsCRSR4 {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					if mnumcr < 11 then
					ElectrTranspTonsCRSR2(MNUMCR,MNUMLR,cyr)
					else
					ElectrTranspTonsCRSR3(MNUMLR,cyr)
					endif
				}
			}
			Parameter ResidentialTransportTons {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr);
				Definition: {
					if Btu2(SReg,Sulf,Mtyp,Rank) >0 then
					ResidentialTransport(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr)/
					Btu2(SReg,Sulf,Mtyp,Rank)
					endif
				}
			}
			Parameter ResidTranspTonsCR {
				IndexDomain: (MNUMCR,cyr);
				Definition: {
					If mnumcr < 11 then
					Sum((SReg, Sulf, Mtyp, Rank,ResSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(ResidentialTransportTons(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr)))
					else
					Sum((SReg, Sulf, Mtyp, Rank,ResSec,DReg)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(ResidentialTransportTons(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr)))
					endif
				}
			}
			Parameter ResidTranspTonsCRSR {
				IndexDomain: (MNUMCR,SReg,cyr);
				Definition: {
					Sum((Sulf,Mtyp,Rank,ResSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					(ResidentialTransportTons(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr)))
				}
			}
			Parameter ResidTranspTonsCRSR2 {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					if mnumcr < 11 then
					ResidTranspTonsCRSR2c(MNUMCR,MNUMLR,cyr)
					else
					ResidTranspTonsCRSR2d(MNUMLR,cyr)
					endif
				}
			}
			Parameter ResidTranspTonsCRSR2d {
				IndexDomain: (mnumlr,cyr);
				Definition: Sum((mnumcr)|mnumcr<11,ResidTranspTonsCRSR2c(MNUMCR,MNUMLR,cyr));
			}
			Parameter ResidTranspTonsCRSR2a {
				IndexDomain: (DReg,m14,cyr);
				Definition: {
					
					Sum((SReg,Sulf,Mtyp,Rank,ResSec)|
					Map_SReg_M14(SReg,M14),
					(ResidentialTransportTons(SReg,Sulf,Mtyp,Rank,ResSec,DReg,cyr)))
				}
			}
			Parameter ResidTranspTonsCRSR2b {
				IndexDomain: (DReg,mnumlr,cyr);
				Definition: {
					
					Sum((m14)|
					Map_m14_mnumlr(M14,MNUMLR),
					(ResidTranspTonsCRSR2a(DReg,M14,cyr)))
				}
			}
			Parameter ResidTranspTonsCRSR2c {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					
					Sum((DReg)|Map_DReg_MNUMCR(DReg,mnumcr),
					ResidTranspTonsCRSR2b(DReg,MNUMLR,cyr))
				}
			}
			Variable IndustrialTransport {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Variable EscapeInd {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Parameter EscapeIndreporting {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr);
				Definition: {
					Sum((cyr,IndSec)|map_cyr_yr(cyr,yr) and IndSec in Subsector,
					EscapeInd(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr))
				}
			}
			Parameter IndustrialTransportTons {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr);
				Definition: {
					if Btu2(SReg,Sulf,Mtyp,Rank) >0 then
					IndustrialTransport(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr)/
					Btu2(SReg,Sulf,Mtyp,Rank)
					endif
				}
			}
			Parameter IndTranspTonsCR {
				IndexDomain: (MNUMCR,cyr);
				Definition: {
					if mnumcr < 11 then
					Sum((SReg, Sulf, Mtyp, Rank,IndSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(IndustrialTransportTons(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr)))
					else
					Sum((SReg, Sulf, Mtyp, Rank,IndSec,DReg) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(IndustrialTransportTons(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr)))
					endif
				}
			}
			Parameter IndTranspTrillsCR {
				IndexDomain: (MNUMCR,cyr);
				Definition: {
					if mnumcr < 11 then
					Sum((SReg, Sulf, Mtyp, Rank,IndSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(IndustrialTransport(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr)))
					else
					Sum((SReg, Sulf, Mtyp, Rank,IndSec,DReg) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(IndustrialTransport(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr)))
					endif
				}
			}
			Parameter IndTranspTonsCRSR {
				IndexDomain: (MNUMCR,SReg,cyr);
				Definition: {
					Sum((Sulf,Mtyp,Rank,IndSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					(IndustrialTransportTons(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr)))
				}
			}
			Parameter IndTranspTonsCRSR2 {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					if mnumcr < 11 then
					IndTranspTonsCRSR2c(MNUMCR,MNUMLR,cyr)
					else
					IndTranspTonsCRSR2d(MNUMLR,cyr)
					endif
				}
			}
			Parameter IndTranspTonsCRSR2a {
				IndexDomain: (DReg,m14,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,IndSec)|
					Map_SReg_M14(SReg,M14),
					IndustrialTransportTons(SReg,Sulf,Mtyp,Rank,IndSec,DReg,cyr))
				}
			}
			Parameter IndTranspTonsCRSR2b {
				IndexDomain: (DREg,mnumlr,cyr);
				Definition: {
					
					Sum((m14)|
					Map_m14_mnumlr(M14,MNUMLR),
					IndTranspTonsCRSR2a(DReg,M14,cyr))
				}
			}
			Parameter IndTranspTonsCRSR2c {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					Sum((DReg)|Map_DReg_MNUMCR(DReg,mnumcr),
					IndTranspTonsCRSR2b(DReg,MNUMLR,cyr))
				}
			}
			Parameter IndTranspTonsCRSR2d {
				IndexDomain: (mnumlr,cyr);
				Definition: {
					
					Sum((mnumcr)|mnumcr < 11,
					IndTranspTonsCRSR2c(MNUMCR,MNUMLR,cyr))
				}
			}
			Variable CokingTransport {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Variable EscapeCoke {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Parameter EscapeCokereporting {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr);
				Definition: {
					Sum((cyr,CokSec)|map_cyr_yr(cyr,yr) and CokSec in Subsector,
					EscapeCoke(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr))
				}
			}
			Parameter CokingTransportTons {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr);
				Definition: {
					if Btu2(SReg,Sulf,Mtyp,Rank) >0 then
					CokingTransport(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)/
					Btu2(SReg,Sulf,Mtyp,Rank)
					endif
				}
			}
			Parameter CokeTranspTonsCR {
				IndexDomain: (MNUMCR,cyr);
				Definition: {
					if mnumcr < 11 then
					Sum((SReg, Sulf, Mtyp, Rank,CokSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(CokingTransportTons(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr)))
					else
					Sum((SReg, Sulf, Mtyp, Rank,CokSec,DReg) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(CokingTransportTons(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr)))
					endif
				}
			}
			Parameter CokeTranspTonsCRSR {
				IndexDomain: (MNUMCR,SReg,cyr);
				Definition: {
					Sum((Sulf,Mtyp,Rank,CokSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					(CokingTransportTons(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr)))
				}
			}
			Parameter CokeTranspTonsCRSR2 {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					if mnumcr < 11 then
					CokeTranspTonsCRSR2c(MNUMCR,MNUMLR,cyr)
					else
					CokeTranspTonsCRSR2d(MNUMLR,cyr)
					endif
				}
			}
			Parameter CokeTranspTonsCRSR2a {
				IndexDomain: (Dreg,m14,cyr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,CokSec)|
					Map_SReg_M14(SReg,M14),
					CokingTransportTons(SReg,Sulf,Mtyp,Rank,CokSec,DReg,cyr))
				}
			}
			Parameter CokeTranspTonsCRSR2b {
				IndexDomain: (Dreg,mnumlr,cyr);
				Definition: {
					
					Sum((m14)|
					Map_m14_mnumlr(M14,MNUMLR),
					CokeTranspTonsCRSR2a(DReg,M14,cyr))
				}
			}
			Parameter CokeTranspTonsCRSR2c {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					
					Sum((DReg)|Map_DReg_MNUMCR(DReg,mnumcr),
					CokeTranspTonsCRSR2b(DReg,MNUMLR,cyr))
				}
			}
			Parameter CokeTranspTonsCRSR2d {
				IndexDomain: (MNUMLR,cyr);
				Definition: {
					
					Sum((mnumcr)|mnumcr < 11,
					CokeTranspTonsCRSR2c(MNUMCR,MNUMLR,cyr))
				}
			}
			Variable LiquidsTransport {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Variable EscapeLiqu {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr);
				Range: nonnegative;
			}
			Parameter EscapeLiqureporting {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr);
				Definition: {
					Sum((cyr,LiquSec)|map_cyr_yr(cyr,yr) and LiquSec in Subsector,
					EscapeLiqu(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter LiquidsTransportTons {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr);
				Definition: {
					if Btu2(SReg,Sulf,Mtyp,Rank) >0 then
					LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr)/
					Btu2(SReg,Sulf,Mtyp,Rank)
					endif
				}
			}
			Parameter LiquidsTransportTrills {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: {
					!LiquidsTransport(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr)
				}
			}
			Parameter LiquidsTranspTonsCR {
				IndexDomain: (MNUMCR,cyr);
				Definition: {
					if mnumcr < 11 then
					Sum((SReg, Sulf, Mtyp, Rank,LiquSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(LiquidsTransportTons(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)))
					else
					Sum((SReg, Sulf, Mtyp, Rank,LiquSec,DReg)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(LiquidsTransportTons(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)))
					endif
				}
			}
			Parameter LiquidsTranspTonsCRSR {
				IndexDomain: (MNUMCR,SReg,cyr);
				Definition: {
					Sum((Sulf,Mtyp,Rank,LiquSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					(LiquidsTransportTons(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr)))
				}
			}
			Parameter LiquidsTranspTonsCRSR2 {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					if mnumcr < 11 then
					LiquidsTranspTonsCRSR2c(MNUMCR,MNUMLR,cyr)
					else
					LiquidsTranspTonsCRSR2d(MNUMLR,cyr)
					endif
				}
			}
			Parameter LiquidsTranspTonsCRSR2a {
				IndexDomain: (Dreg,m14,cyr);
				Definition: {
					
					Sum((SReg,Sulf,Mtyp,Rank,LiquSec)|
					Map_SReg_M14(SReg,M14),
					LiquidsTransportTons(SReg,Sulf,Mtyp,Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter LiquidsTranspTonsCRSR2b {
				IndexDomain: (DReg,MNUMLR,cyr);
				Definition: {
					
					Sum((m14)|
					Map_m14_mnumlr(M14,MNUMLR),
					LiquidsTranspTonsCRSR2a(DReg,M14,cyr))
				}
			}
			Parameter LiquidsTranspTonsCRSR2c {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					
					Sum((DReg)|Map_DReg_MNUMCR(DReg,mnumcr),
					LiquidsTranspTonsCRSR2b(DReg,MNUMLR,cyr))
				}
			}
			Parameter LiquidsTranspTonsCRSR2d {
				IndexDomain: (MNUMLR,cyr);
				Definition: {
					
					Sum((mnumcr)|mnumcr < 11,
					LiquidsTranspTonsCRSR2c(MNUMCR,MNUMLR,cyr))
				}
			}
			Parameter LiquidsTranspTonsPR {
				IndexDomain: (PADD,cyr);
				Definition: {
					
					
					Sum((SReg, Sulf, Mtyp, Rank,LiquSec,DReg)|Map_PADD_DReg(PADD,DReg) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(LiquidsTransportTons(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)))
				}
			}
			Parameter LiquidsTranspTonsPR2 {
				IndexDomain: (MNUMPR,cyr);
				Definition: {
					
					if mnumpr < 10 then
					Sum((PADD)|Map_PADD_Mnumpr(PADD,mnumpr),
					LiquidsTranspTonsPR(PADD,cyr))
					else
					Sum(PADD,
					LiquidsTranspTonsPR(PADD,cyr))
					endif
				}
			}
			Parameter LiquidsTranspTrillsCR {
				IndexDomain: (MNUMCR,cyr);
				Definition: {
					if mnumcr < 11 then
					Sum((SReg, Sulf, Mtyp, Rank,LiquSec,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)))
					else
					Sum((SReg, Sulf, Mtyp, Rank,LiquSec,DReg)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)))
					endif
				}
			}
			Parameter LiquidsTranspTrillsPR {
				IndexDomain: (PADD,cyr);
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,LiquSec,DReg)|Map_PADD_DReg(PADD,DReg)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)))
				}
			}
			Parameter LiquidsTranspTrillsPR2 {
				IndexDomain: (MNUMPR,cyr);
				Definition: {
					if mnumpr < 10 then
					Sum(PADD|Map_PADD_Mnumpr(PADD,MNUMPR),LiquidsTranspTrillsPR(PADD,cyr))
					else
					Sum(PADD,LiquidsTranspTrillsPR(PADD,cyr))
					endif
				}
			}
			Parameter L_SO2BTU {
				IndexDomain: (MNUMPR,cyr);
				Definition: {
					If (MNUMPR < 4)then
					        Sum((PADD,SReg, Sulf, Mtyp, Rank,LiquSec,DReg)|Map_PADD_DReg(PADD,DReg)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)
					        and Map_PADD_Mnumpr(PADD,MNUMPR)=1 and LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)>0,
					        (LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)*
					 !       Sulfur2(Scrv)*(1-Rclclnr(DReg,'48',cyr))*
					        Sulfur2(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr('48'))*
					        so2_shr_by_clreg(DReg,'1'))/LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))
					elseif (MNUMPR < 6)then
					        Sum((PADD,SReg, Sulf, Mtyp, Rank,LiquSec,DReg)|Map_PADD_DReg(PADD,DReg)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)
					        and Map_PADD_Mnumpr(PADD,MNUMPR)=1 and LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)>0,
					        (LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)*
					 !       Sulfur2(Scrv)*(1-Rclclnr(DReg,'48',cyr))*
					 	Sulfur2(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr('48'))*
					        so2_shr_by_clreg(DReg,'2'))/LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))
					endif
					!sulfcont is temporary
				}
			}
			Parameter ExportsTransport {
				IndexDomain: {
					(SReg,Sulf,Mtyp,Rank,ExpSec,Use,DReg,yr)|USDRegIntlMapping(USe,DReg)=-1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)!and Trate1exp(Scrv,DReg,ExpSec)
				}
				Text: "U.S. exports";
				Definition: {
					Sum((Scrv1)  ,ExportsTransport3(Scrv1,SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr))  !|Scrv in SupplyCurveNumber
					!|Scrv in SupplyCurveNumber and USDRegIntlMapping(USe,DReg)=-1
				}
			}
			Parameter ExportsTransport2a {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr)|USDRegIntlMapping(USe,DReg)=-1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "U.S. exports";
				Definition: Sum((Scrv1),ExportsTransport3(Scrv1,SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr));
			}
			Parameter ExportsTransport3 {
				IndexDomain: {
					(Scrv1,SReg, Sulf, Mtyp, Rank,ExpSec,Use,DReg,yr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)!|USDRegIntlMapping(USe,DReg)=-1 and Btu(Scrv1,Scrv)!and Trate1exp(Scrv,DReg,ExpSec)
				}
				Text: "U.S. exports in TBtus";
				Definition: {
					!ExportsTransport2(Scrv,ExpSec,USe,DReg,yr)
				}
				Comment: "Calculated in procedure CalcCoalReportingTotals";
			}
			Parameter ExportsTransport4 {
				IndexDomain: (Scrv1,ExpSec,USe,DReg,yr)|USDRegIntlMapping(USe,DReg)=-1;
				Text: "U.S. exports";
				Definition: Sum((SReg, Sulf, Mtyp, Rank)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),ExportsTransport3(Scrv1,SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr));
			}
			Parameter ExportsTransport5Final {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr)|USDRegIntlMapping(USe,DReg)=-1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "U.S. exports in Trills";
				Definition: Sum((Scrv1)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank),ExportsTransport4(Scrv1,ExpSec,USe,DReg,yr));
			}
			Variable ExportsTransport2 {
				IndexDomain: {
					(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,cyr)|USDRegIntlMapping(Use,Dreg) and Trate1Exp(SReg, Sulf, Mtyp, Rank,DReg,ExpSec)
					and USDRegIntlMapping3(USe,ExpSec) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)
				}
				Text: "U.S. exports";
				Range: nonnegative;
				Property: ReducedCost;
			}
			Parameter USThermalExportsTransportByRankCoast {
				IndexDomain: (Rank,USe,cyr);
				Definition: {
					
					Sum((SReg, Sulf, Mtyp, ThermExpSec, DReg)|ThermalSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					ExportsTransport2(SReg, Sulf, Mtyp, Rank,ThermExpSec,USe,DReg,cyr))
				}
			}
			Variable ExportsTranport2InTons {
				IndexDomain: {
					(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)|USDRegIntlMapping(Use,Dreg) and Trate1Exp(SReg, Sulf, Mtyp, Rank,DReg,ExpSec)
					and USDRegIntlMapping3(USe,ExpSec) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)
				}
				Range: nonnegative;
				Definition: {
					
					ExportsTransport2(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr) 
					/  Btu2(SReg,Sulf,Mtyp,Rank)
				}
			}
			Parameter ExportsTransportDetailCurve {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)|Btu2(SReg,Sulf,Mtyp,Rank);
				Definition: Sum(Scrv1,ExportsTransportDetailCurve2(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr));
			}
			Parameter ExportsTransportDetailCurve2 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: {
					!Sum((SReg, Sulf, Mtyp, Rank)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),ExportsTransport2a(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr))
					ExportsTransport2a(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr)
				}
			}
			Parameter ExportsTransport2precursur {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,ExpSEc,USe,DReg)|USDRegIntlMapping(Use,Dreg) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: Trate1Exp(SReg, Sulf, Mtyp, Rank,DReg,ExpSec);
			}
			Parameter ExportsTranspTrillsCR {
				IndexDomain: (MNUMCR,yr);
				Definition: {
					
					Sum((SReg, Sulf, Mtyp, Rank,ExpSec,Use,DReg)|Map_DReg_MNUMCR(DReg,mnumcr) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(ExportsTransport2a(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr)))
				}
			}
			Parameter ExportsTranspTrillsCR2 {
				IndexDomain: (yr);
				Definition: Sum(mnumcr|mnumcr < 11,ExportsTranspTrillsCR(MNUMCR,yr));
			}
			Parameter ExportsTranspTrillsCR3 {
				IndexDomain: (MNUMCR,yr);
				Definition: {
					if mnumcr > 10 then
					ExportsTranspTrillsCR2(yr)
					else
					ExportsTranspTrillsCR(MNUMCR,yr)
					endif
				}
			}
			Parameter ExportsTransport2Tons {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,ExpSEc,USe,DReg,yr)|USDRegIntlMapping(Use,Dreg) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					
					ExportsTransport2a(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr)/
					Btu2(SReg, Sulf, Mtyp, Rank)
				}
			}
			Parameter ExportsTransportTons {
				IndexDomain: (SReg,sulf,mtyp,rank,ExpSec,USe,DReg,yr)|Btu2(SReg,sulf,mtyp,rank) and USDRegIntlMapping(Use,DReg);
				Definition: {
					
					ExportsTransport2Tons(SReg,sulf,mtyp,rank,ExpSec,USe,DReg,yr)
				}
			}
			Parameter ExportsTransportTons2 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and USDRegIntlMapping(Use,DReg);
				Definition: {
					
					!ExportsTransport3(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr)/
					!Btu2(Scrv)
				}
			}
			Parameter ExportsTransportTrills {
				IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,ExpSec,DReg,yr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
				Definition: {
					
					Sum(USe|USDRegIntlMapping(Use,DReg),ExportsTransport2(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsTransportTrills2 {
				IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,ExpSec,DReg,yr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
				Definition: {
					
					!Sum(USe,ExportsTransport2(Scrv,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsTransportTrills3 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: {
					
					!ExportsTransport2(Scrv,ExpSec,USe,DReg,yr)
				}
			}
			Parameter ExportsTransportTrills4 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: {
					
					!ExportsTransportTrills3(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr)
				}
			}
			Parameter ExportsTransportTonsCokingUSe {
				IndexDomain: (USe,yr);
				Definition: {
					!Sum(Scrv|Scrv in SupplyCurveNumber,ExportsTransport2(Scrv,ExpSec,USe,DReg,cyr)/
					!Btu2(SReg,Sulf,Mtyp,Rank))
					Sum((SReg,Sulf,Mtyp,Rank,DReg,ExpSec)|Rank = '4P',ExportsTransportTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsTransportTonsThermalUSe {
				IndexDomain: (USe,yr);
				Definition: Sum((SReg,Sulf,Mtyp,Rank,DReg,ExpSec)|Rank <> '4P',ExportsTransportTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr));
			}
			Parameter ExportsTransportTrillsCokingUSe {
				IndexDomain: (USe,yr);
				Definition: {
					
					Sum((SReg, Sulf, Mtyp, Rank,ExpSec,DReg)|Btu2(SReg, Sulf, Mtyp, Rank) and CokingSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					ExportsTransport2a(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsTransportTrillsThermalUSe {
				IndexDomain: (USe,yr);
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,ExpSec,DReg)|Btu2(SReg, Sulf, Mtyp, Rank) and ThermalSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					ExportsTransport2a(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsTransportHeatContentCokingUSe {
				IndexDomain: (USe,yr);
				Text: "Average heat content for use in allocating export trills to importing countries";
				Definition: ExportsTransportTrillsCokingUSe(USe,yr)/$ExportsTransportTonsCokingUSe(USe,yr);
			}
			Parameter ExportsTransportHeatContentThermalUSe {
				IndexDomain: (USe,yr);
				Text: "Average heat content for use in allocating export trills to importing countries";
				Definition: ExportsTransportTrillsThermalUSe(USe,yr)/$ExportsTransportTonsThermalUSe(USe,yr);
			}
			Parameter ExportsTranspTonsCR {
				IndexDomain: (MNUMCR,yr);
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,Expsec,USe,DReg)|Map_DReg_MNUMCR(DReg,mnumcr) and USDRegIntlMapping(USe,DReg) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					(ExportsTransportTons(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr)))
				}
			}
			Parameter ExportsTranspTonsCR2 {
				IndexDomain: (yr);
				Definition: {
					Sum(mnumcr|mnumcr < 11,
					ExportsTranspTonsCR(MNUMCR,yr))
				}
			}
			Parameter ExportsTranspTonsCR3 {
				IndexDomain: (MNUMCR,yr);
				Definition: {
					if mnumcr > 10 then
					ExportsTranspTonsCR2(yr)
					else
					ExportsTranspTonsCR(MNUMCR,yr)
					endif
				}
			}
			Parameter ExportsMetTranspTons {
				IndexDomain: (yr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,Expsec,USe,DReg)|Rank = '4P' and USDRegIntlMapping(USe,DReg),
					ExportsTransportTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsMetTranspTonsLag {
				IndexDomain: (cyr);
			}
			Parameter Exmetby {
				Text: "total met coal exports in base year";
				Definition: ExportsMetTranspTons(minebyrexp);
			}
			Parameter ExportsThermTranspTons {
				IndexDomain: (yr);
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,Expsec,USe,DReg)|Rank <> '4P' and
					USDRegIntlMapping(USe,DReg),
					ExportsTransportTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter ExportsThermtranspTonsLag {
				IndexDomain: (cyr);
			}
			Parameter ExportsTranspTonsCRSR {
				IndexDomain: (MNUMCR,SReg,cyr);
				Definition: {
					Sum((Sulf,Mtyp,Rank,Expsec,USe,DReg)|Map_DReg_MNUMCR(DReg,mnumcr)=1 and
					USDRegIntlMapping(USe,DReg),
					(ExportsTransportTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)))
				}
			}
			Parameter ExportsTranspTonsCRSR2 {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					
					Sum((SReg,m14)|
					Map_SReg_M14(SReg,M14) and
					Map_m14_mnumlr(M14,MNUMLR),
					ExportsTranspTonsCRSR(MNUMCR,SReg,cyr))
				}
			}
			Parameter ExportsTranspTonsCRSR3 {
				IndexDomain: (MNUMCR,mnumlr,cyr);
				Definition: {
					if mnumcr < 11 then
					ExportsTranspTonsCRSR2(MNUMCR,MNUMLR,cyr)
					else
					TotalTranspTons(MNUMLR,cyr)
					endif
				}
			}
			Parameter TotalTranspTons {
				IndexDomain: (MNUMLR,cyr);
				Definition: Sum(mnumcr,ExportsTranspTonsCRSR2(MNUMCR,MNUMLR,cyr));
			}
			Parameter OutputTranScrub {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Definition: ElectricityTransportScrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter OutputTranScrub2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Definition: ElectricityTransport2Scrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter OutputTranUnScrub {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Definition: ElectricityTransportUnscrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Parameter OutputTranUnScrub2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Definition: ElectricityTransport2Unscrubbed(SReg,Sulf,Mtyp,Rank,DReg,yr);
			}
			Variable ElectricityTransportScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					sum((nsteps,pt2)| c_ecp_scrub_Scrubbed(pt2),
					ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					!ElectricityTransport1(ElecScrv,pt2,DReg,cyr)]
				}
			}
			Variable ElectricityTransport2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Parameter OutputElectricityTransport2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,yr)|Btu2(SReg,Sulf,Mtyp,Rank);
				Definition: ElectricityTransport2(SReg,Sulf,Mtyp,Rank,pt2,DReg,yr);
			}
			Parameter OutputElectricityTransport3 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,yr)|Btu2(SReg,Sulf,Mtyp,Rank);
				Definition: OutputElectricityTransport2(SReg,Sulf,Mtyp,Rank,pt2,DReg,yr);
			}
			Parameter OutputElectricityTransport2wScrv1 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: ElectricityTransport2(SReg,Sulf,Mtyp,Rank,pt2,DReg,yr);
			}
			Parameter OutputElectricityTransport2Tons {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr)|btu2(SReg,Sulf,Mtyp,Rank) and rank <> '4P';
				Definition: {
					ElectricityTransportACSubtotal(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr)/
					btu2(SReg,Sulf,Mtyp,Rank)
				}
			}
			Variable ElectricityTransportUnscrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: sum[(nsteps,pt2)| c_ecp_scrub_UnScrubbed(pt2), ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr)];
			}
			Variable ElectricityTransport2Scrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: sum[(pt2)| c_ecp_scrub_Scrubbed(pt2),ElectricityTransport2(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)];
			}
			Variable ElectricityTransport2Unscrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: sum[(pt2)| c_ecp_scrub_UnScrubbed(pt2),ElectricityTransport2(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)];
			}
			Parameter Ttonmile {
				IndexDomain: (yr);
				Range: nonnegative;
				Definition: {
					if Ttonmileprelim(yr) < 0 then
					681508.
					else
					Ttonmileprelim(yr)
					endif
				}
			}
			Parameter Ttonmileprelim {
				IndexDomain: (yr);
				Definition: {
					sum[(Scrv1,SReg,Sulf,Mtyp,Rank,DReg,pt2),
					DistanceSurcharge(SReg,DReg,'1')*
					ElectricityTransportACSubtotalTrill(Scrv1,SReg,Sulf,Mtyp,Rank,pt2,Dreg,yr)
					/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank)]+
					sum[(Scrv1,nsteps,SReg,Sulf,Mtyp,Rank,ResSec,DReg),
					DistanceSurcharge(SReg,DReg,'1')*
					ResidentialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,ResSec,DReg,yr) 
					/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank)]+
					sum[(Scrv1,nsteps,SReg,Sulf,Mtyp,Rank,IndSec,DReg),
					DistanceSurcharge(SReg,DReg,'1')*
					IndustrialTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,IndSec,DReg,yr)
					/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank)]+
					sum[(Scrv1,nsteps,SReg,Sulf,Mtyp,Rank,CokSec,DReg),
					DistanceSurcharge(SReg,DReg,'1')*
					CokingTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,CokSec,DReg,yr)
					/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank)]+
					sum[(Scrv1,nsteps,SReg,Sulf,Mtyp,Rank,LiquSec,DReg),
					DistanceSurcharge(SReg,DReg,'1')*
					LiquidsTransportTrills(Scrv1,SReg,Sulf,Mtyp,Rank,LiquSec,DReg,yr)
					/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank)]
					+sum[(Scrv1,SReg,Sulf,Mtyp,Rank,ExpSec,Use,DReg),
					DistanceSurcharge(SReg,DReg,'1')*
					ExportsTransport3(Scrv1,SReg, Sulf, Mtyp, Rank,ExpSec,Use,DReg,yr)
					/$Btu(Scrv1,Sreg,Sulf,Mtyp,Rank)]
					!sum[(SReg,DReg),
					!Distance(SReg,DReg)*
					!x(SReg,DReg,cyr)]
				}
			}
			Parameter Ttonmile_2 {
				IndexDomain: yr;
				Definition: Ttonmile(yr);
			}
			Variable EscapeProductiveCapacity {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Parameter EscapeProductiveCapacityReporting {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: Sum(cyr|Map_cyr_yr(cyr,yr),EscapeProductiveCapacity(SReg, Sulf, Mtyp, Rank,cyr));
			}
			Variable EscapePlusSupplyCurveStepBalance {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr);
				Range: nonnegative;
			}
			Variable EscapeMinusSupplyCurveStepBalance {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr);
				Range: nonnegative;
			}
			Parameter EscapeSupplyCurveReporting {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,yr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: Sum(cyr|Map_cyr_yr(cyr,yr),EscapePlusSupplyCurveStepBalance(SReg, Sulf, Mtyp, Rank,cyr));
			}
			Variable EscapeUnscrubTransportationBound {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Variable EscapeScrubTransportationBound {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Variable EscapeMakeSureSecondTierGetsFirstTierPrice {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Parameter Hours {
				IndexDomain: (SReg,yr);
				Text: "this formula needs to be fixed";
			}
			Parameter CoalGroupFlag {
				IndexDomain: (DReg,Subsec,Sreg,Sulf,Mtyp,Rank);
			}
			Parameter CoalGroupOrd {
				IndexDomain: (DReg,Subsec,Sreg,Sulf,Mtyp,Rank);
				Text: "Coal grouping used in prior versions of CMM but many not be relavent to AIMMS version";
			}
			Parameter SCurveEcho {
				IndexDomain: (DReg,Subsec,Sreg,Sulf,Mtyp,Rank);
				Text: "Echo of scrv but not an index here";
			}
			Constraint ProductionTransportBalance {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "balances coal transported for all sectors with the production volume solution";
				Definition: {
					Sum((nsteps,pt2,DReg)| ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank)
					and nsteps < 3, ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))+
					Sum((ResSec,DReg)| PossibleSupplyCurves_Map(DReg, ResSec, SReg, Sulf, Mtyp, Rank),ResidentialTransport(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr))+
					Sum((IndSec,DReg)|PossibleSupplyCurves_Map(DReg, IndSec, SReg, Sulf, Mtyp, Rank),IndustrialTransport(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr))+
					Sum((CokSec,DReg)|PossibleSupplyCurves_Map(DReg, CokSec, SReg, Sulf, Mtyp, Rank),CokingTransport(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr))+
					Sum((LiquSec,DReg)|PossibleSupplyCurves_Map(DReg, LiquSec, SReg, Sulf, Mtyp, Rank),LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))
					+Sum((ThermExpSec,USe,DReg)|
					ThermalSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and
					USDRegIntlMapping(USe,DReg)=-1 and USDRegIntlMapping3(USe,ThermExpSec), ExportsTransport2(SReg, Sulf, Mtyp, Rank,ThermExpSec,USe,DReg,cyr))
					+Sum((CokeExpSec,USe,DReg)|
					CokingSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and
					USDRegIntlMapping(USe,DReg)=-1 AND USDRegIntlMapping3(USe,CokeExpSec),ExportsTransport2(SReg, Sulf, Mtyp, Rank,CokeExpSec,USe,DReg,cyr))
					!- Sum((USi)|Scrv in {(02CA,2M,2D,4P)}, ImportsCokingSubtotal(USi,cyr))
					!- Sum((CokSec,DReg,nUS,USi)|Scrv in PossibleSupplyCurves(DReg,CokSec), ImportsCoking(CokSec,DReg,nUS,USi,cyr))
					- ProductionVolume(SReg, Sulf, Mtyp, Rank,cyr)= 0
				}
				Comment: "Added imports to this balance 06/20/2017, which was a mistake. Removed 01/11/2018   DAF";
			}
			Constraint ProductionCapacityLimit {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Property: ShadowPrice;
				Definition: {
					Sum(Scrv1Step,ProductionVolumeSteps(SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr))-EscapeProductiveCapacity(SReg, Sulf, Mtyp, Rank,cyr)
					-FY_PROD_CAP3(SReg, Sulf, Mtyp, Rank,cyr) <= 0
				}
			}
			Constraint SupplyCurveStepBalance {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Property: ShadowPrice;
				Definition: {
					Sum(Scrv1step,ProductionVolumeSteps(SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr)) +EscapePlusSupplyCurveStepBalance(SReg, Sulf, Mtyp, Rank,cyr)
					-EscapeMinusSupplyCurveStepBalance(SReg, Sulf, Mtyp, Rank,cyr) -ProductionVolume(SReg, Sulf, Mtyp, Rank,cyr)= 0
				}
			}
			Constraint ResidentialDemandRequirement {
				IndexDomain: (ResSec,DReg,cyr);
				Property: Bound, ShadowPrice, Level, Basic;
				Definition: {
					sum[(SReg, Sulf, Mtyp, Rank)|PossibleSupplyCurves_Map(DReg, ReSSec, SReg, Sulf, Mtyp, Rank),
					ResidentialTransport(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr)
					+ EscapeRC(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr)] =
					ResidCommDemand(ResSec,DReg,cyr)
				}
			}
			Constraint CokingDemandRequirement {
				IndexDomain: (CokSec,DReg,cyr)|CokingDemand(CokSec,DReg,cyr)>0;
				Property: Bound, ShadowPrice, Level, Basic;
				Definition: {
					sum[(SReg, Sulf, Mtyp, Rank)|PossibleSupplyCurves_Map(DReg, CokSec, SReg, Sulf, Mtyp, Rank),
					CokingTransport(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr) +
					EscapeCoke(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr)]+
					Sum((nUS,USi),ImportsCoking(CokSec,DReg,nUS,USi,cyr))>=
					CokingDemand(CokSec,DReg,cyr)
				}
			}
			Constraint IndustrialDemandRequirement {
				IndexDomain: (IndSec,DReg,cyr) |IndustrialDemand(IndSec,DReg,cyr)>0;
				Property: Bound, ShadowPrice, Level, Basic;
				Definition: {
					sum[(SReg, Sulf, Mtyp, Rank)|PossibleSupplyCurves_Map(DReg, IndSec, SReg, Sulf, Mtyp, Rank),
					IndustrialTransport(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr)
					+EscapeInd(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr)]
					+ sum((nUS,USi)|USDRegImportMapping(USi,DReg)=-1,ImportsIndustrial(IndSec,DReg,nUS,USi,cyr))>=
					IndustrialDemand(IndSec,DReg,cyr)
				}
			}
			Constraint LiquidsDemandRequirement {
				IndexDomain: (LiquSec,DReg,cyr)|cyr in CoaltoLiquidYears;
				Property: Bound, ShadowPrice, Level, Basic;
				Definition: {
					sum[(SReg, Sulf, Mtyp, Rank)|PossibleSupplyCurves_Map(DReg,LiquSec , SReg, Sulf, Mtyp, Rank) and
					Trate1Liqu(SReg, Sulf, Mtyp, Rank,Dreg,LiquSec),
					LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)
					+EscapeLiqu(SReg, Sulf, Mtyp, Rank,LiquSec,Dreg,cyr)] =
					LiquidDemand(DReg,cyr)
				}
			}
			Constraint DomesticElectricityDemandRequirement {
				IndexDomain: (pt2,DReg,cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					sum[(SReg, Sulf, Mtyp, Rank,nsteps)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and
					Trate2(SReg, Sulf, Mtyp, Rank,DReg,'E') < 900
					and Trate4x(SReg, Sulf, Mtyp, Rank,DReg)<900 and
					nsteps < 3,! and qdutzr(pt2,DReg,cyr)>0.01,
					!ElectricityTransport1(ElecScrv,pt2,DReg,cyr)
					ElectricityTransportAC(NSteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr) +
					EscapeElectrAC(nsteps,SReg, Sulf, Mtyp, Rank,pt2,DREg,cyr)]
					+ Sum[(nsteps,nUS,USi)|USDRegImportMapping(USi,DReg)=-1 and nsteps<3,
					ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr)] =
					 Qdutzr(pt2,DReg,cyr)-Stockreg2(pt2,DReg,cyr)
				}
				Comment: "EscapeElectrAC is currently inactive. To enable add it to the MyVariables set and uncomment in the Objective function.";
			}
			Constraint ContractsUnScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr)|cyr in ContractYears and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					if TempFortranContractFlag = 1 then
					ElectricityTransportUnscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) + ContractEscape2(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					>= TempFortranCdyrsUnScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					else
					ElectricityTransportUnscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) + ContractEscape2(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					>= Copy9c_CdyrsUnscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					endif
				}
			}
			Constraint ContractsScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr)| ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and cyr in ContractYears;
				Property: Bound, ShadowPrice, Level;
				Definition: {
					if TempFortranContractFlag = 1 then
					ElectricityTransportScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) + ContractEscape1(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					>= TempFortranCdyrsScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					else
					ElectricityTransportScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) + ContractEscape1(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					>= Copy8c_CdyrsScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					endif
				}
			}
			Constraint TransportationBoundUnScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					if (TrubndUnscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) >=0 and tier2_adj(SReg, Sulf, Mtyp, Rank,DReg,cyr)>0) then
					ElectricityTransportUnscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) -
					ElectricityTransport2Unscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)!-EscapeUnscrubTransportationBound(elecscrv,dreg,cyr)
					<=
					TrubndUnscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					!TrubndUnScrubbedNEMS(ElecScrv,DReg,cyr)
					else
					!ElectricityTransportUnscrubbed(ElecScrv,dReg,cyr) -
					!ElectricityTransport2Unscrubbed(ElecScrv,DReg,cyr) <=
					!.01
					ElectricityTransport2Unscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) <= 0
					
					endif
				}
			}
			Constraint TransportationBoundScrubbed {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					if TrubndScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) >= 0 and tier2_adj(SReg, Sulf, Mtyp, Rank,DReg,cyr)>0 then
					ElectricityTransportScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) -
					ElectricityTransport2Scrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)!-EscapeScrubTransportationBound(ElecScrv,Dreg,cyr)
					 <=
					TrubndScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					!TrubndScrubbedNEMS(ElecScrv,DReg,cyr)
					else
					!ElectricityTransportScrubbed(ElecScrv,DReg,cyr) -
					ElectricityTransport2Scrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr) <=
					0
					endif
				}
			}
			Constraint BalanceScrubUnscrubTier1 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					(ElectricityTransportScrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)+
					ElectricityTransportUnscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr))
					=sum((nsteps,pt2)|nsteps < 3,
					ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
				}
			}
			Constraint BalanceScrubUnscrubTier2 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					(ElectricityTransport2Scrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr)+
					ElectricityTransport2Unscrubbed(SReg, Sulf, Mtyp, Rank,DReg,cyr))
					=sum(pt2,ElectricityTransport2(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
				}
			}
			Constraint SubbituminousDiversity {
				IndexDomain: (DReg,pt2,cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					
					sum((nsteps,SReg, Sulf, Mtyp, Rank)|Sdvconct_2(pt2,DReg,cyr) < 999and
					Sdvconct_2(pt2,DReg,cyr) > 0 and
					nsteps< 3 and SubbituminousSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr)) <=
					!Sdvconct(DReg,pt2)+ SubbitEscape(pt2,DReg,cyr)
					! New method to create diveristy constraints  April 2022 DAF
					EMM_max_SubBitBtus_D(DReg,pt2,cyr)
				}
				Comment: "The SubbitEscape varriable is currently inactive.  It is commented out of the objective function and the MyVariable set.  DAF";
			}
			Constraint LigniteDiversity {
				IndexDomain: (DReg,pt2,cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					
					
					sum((nsteps,SReg, Sulf, Mtyp, Rank)|nsteps < 3 and LigniteSupplyCurves_Map(SReg, Sulf, Mtyp, Rank)
					and Ldvconct_2(pt2,DReg,cyr) < 9999,! and
					!Ldvconct_2(pt2,DReg,cyr) > 0,
					ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr)) <=
					!Ldvconct_1(pt2,DReg,cyr) + LigniteEscape(pt2,DReg,cyr)
					EMM_max_LigBtus_D(DReg,pt2,cyr)
					!Ldvconct(DReg,pt2) + LigniteEscape(pt2,DReg,cyr)
				}
				Comment: "The SubbitEscape varriable is currently inactive.  It is commented out of the objective function and the MyVariable set.  DAF";
			}
			Constraint MakeSureSecondTierGetsFirstTierPrice {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					Sum(nsteps|nsteps<3,ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					!+EscapeMakeSureSecondTierGetsFirstTierPrice(elecscrv,pt2,dreg,cyr)
					>=
					ElectricityTransport2(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)
				}
			}
			Constraint Carbonxx {
				IndexDomain: (cyr);
				Text: "consider any existing tax on carbon when making coal choice";
				Property: ShadowPrice;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,DReg,pt2,nsteps)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),carbon2(SReg, Sulf, Mtyp, Rank)*(1-xclclnr(DReg,pt2,cyr))*
					!(ElectricityTransport1Tons(SCrv,pt2,DReg,cyr)+
					ElectricityTransportAC(NSTEPS,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					-carbonx(cyr) = 0
				}
				Comment: "need to add other sectors in as well";
			}
			Parameter xclclnr {
				IndexDomain: (DReg,pt2,yr);
				Definition: {
					Sum((ndrggn,mnumyr,nutsec)|
					Map_nutsec_pt3(NUTSEC,pt2) and Map_Ndrggn_DReg(NDRGGN,DReg)
					and MAP_mnumyr_yr(MNUMYR,yr),
					COALEMM_XCLCLNR(ndrggn,mnumyr,nutsec))
				}
			}
			Variable ElectricityTransport1Cost {
				IndexDomain: (nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)|Btu2(SReg, Sulf, Mtyp, Rank) and nsteps < 3 and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					
					If nsteps = 1 then
					(Trate2wSurchBtu('1',SReg, Sulf, Mtyp, Rank,DReg,'E',cyr)
					!*10^6
					* ElectricityTransportAC('1',SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					else
					
					((Trate2wSurchBtu('2',SReg, Sulf, Mtyp, Rank,DReg,'E',cyr) +
					aci_cst_bySupplyCurve('2',SReg, Sulf, Mtyp, Rank,pt2)/10.0)
					*ElectricityTransportAC('2',SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					endif
				}
				Comment: "We thin the original /10 was to conver $/MWh into $/TBtu assuming a heat rate of 10,0000";
			}
			Parameter ElectricityTransport1CostDetail {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,yr);
				Definition: Sum(nsteps,ElectricityTransport1aCostDetail(NSTEPS,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr));
			}
			Parameter ElectricityTransport1aCostDetail {
				IndexDomain: (nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg,yr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: ElectricityTransport1Cost(nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg,yr);
			}
			Variable ElectricityTransport2Cost {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					!Tier2(ElecScrv,DReg)*ElectricityTransport2(ElecScrv,pt2,DReg,cyr)
					
					!if(Trate3wSurchBtu(Scrv,DReg,'E',cyr) > 0.0!and
					!Scrv in ElectricitySupplyCurves)
					!then
					!Tier2Nems(Scrv,DReg)*ElectricityTransport2(Scrv,pt2,DReg,cyr)
					tier2_adj(SReg,Sulf,Mtyp,Rank,DReg,cyr)*ElectricityTransport2(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr)
					!endif
				}
			}
			Parameter ElectricityTransport2CostDetail {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,yr);
				Definition: ElectricityTransport2Cost(SReg,Sulf,Mtyp,Rank,pt2,DReg,yr);
			}
			Variable TotalElectricityCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: {
					Sum((nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg)|nsteps < 3 and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					ElectricityTransport1Cost(nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr)) +
					Sum((SReg, Sulf, Mtyp, Rank,pt2,DReg)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),ElectricityTransport2Cost(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
				}
			}
			Parameter tier2 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,yr)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					(Trate3wSurchBtu(SReg, Sulf, Mtyp, Rank,DReg,'E',yr)-
					Trate2wSurchBtu('1',SReg, Sulf, Mtyp, Rank,DReg,'E',yr))
				}
			}
			Parameter tier2_adj {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,yr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					if tier2(SReg, Sulf, Mtyp, Rank,DReg,yr)<0 then
					.00
					else
					tier2(SReg, Sulf, Mtyp, Rank,DReg,yr)
					endif
				}
			}
			Parameter tier2Nems {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg);
			}
			Parameter trate2xNems {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg);
			}
			Variable ProductionCost {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					if TempFortranPriceAndQtyFlag = 1 then
					ProductionVolumeSteps(SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr)*
					TempFortranPrice(SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr)
					else
					ProductionVolumeSteps(SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr)*
					SC_2_PRICE87(SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr)
					endif;
				}
			}
			Parameter ProductionCostDetail {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
				Definition: ProductionCost(SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			}
			Variable TotalProductionCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: Sum((SReg, Sulf, Mtyp, Rank,Scrv1Step)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),ProductionCost(SReg, Sulf, Mtyp, Rank,Scrv1Step,cyr));
			}
			Variable ResidentialTransportCost {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					!if(Scrv in PossibleSupplyCurves(DReg,ResSec) and
					if (PossibleSupplyCurves_Map(DReg, ResSec, SReg, Sulf, Mtyp, Rank) and
					Trate1Resid(SReg, Sulf, Mtyp, Rank,Dreg,ResSec) > 0.0)then
					Trate1Resid(SReg, Sulf, Mtyp, Rank,Dreg,ResSec)*ResidentialTransport(SReg, Sulf, Mtyp, Rank,Ressec,DReg,cyr)
					endif
				}
			}
			Variable TotalResidentialCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: Sum((SReg, Sulf, Mtyp, Rank,ResSec,DReg)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),ResidentialTransportCost(SReg, Sulf, Mtyp, Rank,ResSec,DReg,cyr));
			}
			Variable IndustrialTransportCost {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					if(Trate1Ind(SReg, Sulf, Mtyp, Rank,Dreg,IndSec) > 0.0 and
					PossibleSupplyCurves_Map(DReg, IndSec, SReg, Sulf, Mtyp, Rank))then
					Trate1Ind(SReg, Sulf, Mtyp, Rank,Dreg,IndSec)*IndustrialTransport(SReg, Sulf, Mtyp, Rank,Indsec,DReg,cyr)
					endif
				}
			}
			Variable TotalIndustrialCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: Sum((SReg, Sulf, Mtyp, Rank,IndSec,DReg)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),IndustrialTransportCost(SReg, Sulf, Mtyp, Rank,IndSec,DReg,cyr));
			}
			Variable CokingTransportCost {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr) | SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					if(Trate1Coke(SReg, Sulf, Mtyp, Rank,Dreg,CokSec) > 0.0 and
					PossibleSupplyCurves_Map(DReg, CokSec, SReg, Sulf, Mtyp, Rank))then
					Trate1Coke(SReg, Sulf, Mtyp, Rank,Dreg,CokSec)*CokingTransport(SReg, Sulf, Mtyp, Rank,Coksec,DReg,cyr)
					endif
				}
			}
			Variable TotalCokingCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: Sum((SReg, Sulf, Mtyp, Rank,CokSec,DReg)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),CokingTransportCost(SReg, Sulf, Mtyp, Rank,CokSec,DReg,cyr));
			}
			Variable LiquidsTransportCost {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
				Definition: {
					if(Trate1Liqu(SReg, Sulf, Mtyp, Rank,Dreg,LiquSec) > 0.0 and
					 PossibleSupplyCurves_Map(DReg, LiquSec, SReg, Sulf, Mtyp, Rank))then
					Trate1Liqu(SReg, Sulf, Mtyp, Rank,Dreg,LiquSec)*LiquidsTransport(SReg, Sulf, Mtyp, Rank,Liqusec,DReg,cyr)
					endif
				}
			}
			Variable TotalLiquidsCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: Sum((SReg, Sulf, Mtyp, Rank,LiquSec,DReg)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),LiquidsTransportCost(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr));
			}
			Parameter ExportsTransportCost {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr) | PossibleSupplyCurves_Map(DReg, ExpSec, SReg, Sulf, Mtyp, Rank);
				Text: "transportation to U.S. port for U.S. exports (domestic transportation cost)";
				Range: nonnegative;
				Definition: {
					if(Trate1Exp2(SReg, Sulf, Mtyp, Rank,Dreg,ExpSec,USe) > 0.0) and
					PossibleSupplyCurves_Map(DReg, ExpSec, SReg, Sulf, Mtyp, Rank)
					then
					Trate1Exp2(SReg, Sulf, Mtyp, Rank,Dreg,ExpSec,USe)*ExportsTransport2a(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr)
					endif
				}
			}
			Parameter LiquidsTotalCostPR {
				IndexDomain: (PADD,cyr);
				Definition: {
					Sum((Dreg,SReg, Sulf, Mtyp, Rank,LiquSec)|
					Map_PADD_DReg(PADD,DReg)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					((PriceSolutionBySC(SReg, Sulf, Mtyp, Rank,cyr)*
					LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))+
					LiquidsTransportCost(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)))
				}
			}
			Parameter LiquidsTotalCostPR2 {
				IndexDomain: (PADD,cyr);
				Definition: {
					Sum((Dreg,SReg, Sulf, Mtyp, Rank,LiquSec)|
					Map_PADD_DReg(PADD,DReg)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					((PriceSolutionBySC(SReg, Sulf, Mtyp, Rank,cyr)*
					LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))+
					LiquidsTransportCost(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr)))
				}
			}
			Parameter LiquidsMineCostPR {
				IndexDomain: (padd,cyr);
				Definition: {
					
					Sum((Dreg,SReg, Sulf, Mtyp, Rank,LiquSec)|
					Map_PADD_DReg(PADD,DReg) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					((PriceSolutionBySC(SReg, Sulf, Mtyp, Rank,cyr)*
					LiquidsTransport(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))))
				}
			}
			Parameter LiquidsMineCostPR2 {
				IndexDomain: (mnumpr,cyr);
				Definition: {
					if mnumpr < 10 then
					Sum(PADD|Map_PADD_Mnumpr(PADD,MNUMPR),LiquidsMineCostPR(PADD,cyr))
					else
					Sum(PADD,LiquidsMineCostPR(PADD,cyr))
					endif
				}
			}
			Parameter LiquidsTranspCostPR {
				IndexDomain: (PADD,cyr);
				Definition: {
					Sum((Dreg,SReg, Sulf, Mtyp, Rank,LiquSec)|
					Map_PADD_DReg(PADD,DReg)=1 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
					LiquidsTransportCost(SReg, Sulf, Mtyp, Rank,LiquSec,DReg,cyr))
				}
			}
			Parameter LiquidsTranspCostPR2 {
				IndexDomain: (MNUMPR,cyr);
				Definition: {
					if mnumpr < 10 then
					Sum(PADD|Map_PADD_Mnumpr(PADD,MNUMPR),
					LiquidsTranspCostPR(PADD,cyr))
					else
					Sum(PADD,
					LiquidsTranspCostPR(PADD,cyr))
					endif
				}
			}
			Variable ContractEscape1 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) | ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Variable ContractEscape2 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,DReg,cyr) |ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Variable TotalContractEscapeCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,DReg)| ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					99*ContractEscape1(SReg, Sulf, Mtyp, Rank,DReg,cyr)
					+99*ContractEscape2(SReg, Sulf, Mtyp, Rank,DReg,cyr))
				}
			}
			Variable TotalSulfurEscapeCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: {
					Sum((mx_so2),
					99*SulfurEscape1(cyr,mx_so2))
					+Sum(DReg,99*SulfurEscape2(DReg,cyr))
				}
			}
			Variable LigniteEscape {
				IndexDomain: (pt2,DReg,cyr);
				Range: nonnegative;
			}
			Variable TotalSubitLigEscapeCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: {
					Sum((pt2,DReg),99*SubbitEscape(pt2,DReg,cyr)
					+99*LigniteEscape(pt2,DReg,cyr))
				}
			}
			Variable SubbitEscape {
				IndexDomain: (pt2,DReg,cyr);
				Range: nonnegative;
			}
			Variable CarbonxCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: {
					Sum(mnumyr|mnumyr=cyr-1989,
					Carbonx(cyr)*EMISSION_EMETAX('1',MNUMYR))
				}
			}
			Variable Carbonx {
				IndexDomain: (cyr);
				Range: nonnegative;
			}
			MathematicalProgram TransportationMultiplier {
				Direction: minimize;
				Constraints: AllConstraints;
				Variables: AllVariables;
				Type: LS;
			}
		}
		DeclarationSection AllThingsSulfur {
			Parameter TSPMBTU {
				IndexDomain: (cyr);
				Text: {
					"laggest uncontrolled sulfur emissions for stock adjustment; tons of sulfur per million Btu"
				}
				Definition: {
					Sum((nutsec,mnumyr)|cyr=mnumyr + 1989,COALREP_UCSO2(nutsec,mnumyr-1))*1000/
					Sum((SReg, Sulf, Mtyp, Rank,pt2,DReg)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),ElectricityTransport2(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
				}
			}
			Parameter Copy_c_ecp_scrub_Scrubbed {
				IndexDomain: (pt2);
				Definition: c_ecp_scrub(pt2)='1';
			}
			Parameter Copy_c_ecp_scrub_Unscrubbed {
				IndexDomain: (pt2);
				Definition: c_ecp_scrub(pt2)='2';
			}
			Parameter emrfsa {
				IndexDomain: (yr,MX_SO2);
				Definition: Sum(mnumyr|yr=mnumyr+1989,EMISSION_EMRFSA(MNUMYR,MX_SO2));
			}
			Parameter so2other {
				IndexDomain: (yr,mx_SO2);
				Definition: {
					Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),
					 COALEMM_SO2OTHER(MNUMYR,MX_SO2)/10^3)
				}
			}
			Parameter Sulftemp {
				IndexDomain: (yr,MX_SO2);
				Definition: {
					 !IF ((STOCKS(cyr) > 0.0 or STOCKS(cyr)< 0.0))then !and mx_so2 = 1) THEN
					 !     (emrfsa(cyr,mx_so2) - so2other(cyr,mx_so2)) / 10^6 + (STOCKS(cyr) * TSPMBTU(cyr))
					!else
					!      ((emrfsa(cyr,mx_so2) - so2other(cyr,mx_so2))/ 10^6)
					!endif
					 !IF ((STOCKREG(yr) > 0.0 or STOCKREG(yr) < 0.0))then !and mx_so2 = 1) THEN
					     (emrfsa(yr,mx_so2)) !+ (STOCKREG(yr) * TSPMBTU(yr))
					! ENDIF
				}
			}
			Set TranRule1 {
				SubsetOf: AllYears;
				Index: tran1;
			}
			Set TranRule2 {
				SubsetOf: AllYears;
				Index: tran2;
			}
			Set Tso2_vr_by_clrg {
				SubsetOf: AllYears;
			}
			Parameter Stocks {
				IndexDomain: (stockyr,StockReg);
			}
			Parameter AnnualStocks {
				IndexDomain: (MNUMCR,cyr);
				Definition: {
					Sum((Dreg)|
					Map_DReg_MNUMCR(Dreg,mnumcr),
					Stocks(cyr,DReg))
				}
			}
			Parameter Tso2_shr_by_clreg {
				IndexDomain: (DReg,MX_SO2);
				Definition: {
					Sum((ndrggn,mx_so2_tran)|Map_ndrggn_dreg(ndrggn,dreg) and
					map_mx_so2_mx_so2_tran(mx_so2,mx_so2_tran),csapr_tso2_shr_by_clrg(ndrggn,mx_so2_tran))
				}
			}
			Parameter so2_shr_by_clreg {
				IndexDomain: (DReg,MX_SO2);
				Definition: {
					Sum((ndrggn)|DReg = Map_ndregn(NDRGGN),
					emission_so2_shr_by_clrg(NDRGGN,MX_SO2))
				}
			}
			Parameter Tso2_lim_by_clrg {
				IndexDomain: (DReg,MX_SO2);
				Definition: Sum((ndrggn)|map_ndrggn_dreg(ndrggn,dreg),csapr_tso2_lim_by_clrg(ndrggn));
			}
			Parameter Tso2_lim_by_clrg2 {
				IndexDomain: (DReg,MX_SO2,yr);
				Definition: {
					
					if yr > '2013' then  !I wasn't quite sure how to specify this
					        if yr >= TRANRULE2('1') then
					                Sum((ndrggn)|map_ndrggn_dreg(ndrggn,dreg),csapr_tso2_lim_by_clrg(ndrggn))
					        elseif yr >= TRANRULE1('1') then
					               Sum((ndrggn)|map_ndrggn_dreg(ndrggn,dreg),csapr_tso2_lm1_by_clrg(ndrggn))
					        endif
					endif
				}
			}
			Parameter Tso2_lm1_by_clrg {
				IndexDomain: (DReg,MX_SO2);
				Text: "Phase 1 limit";
				Definition: Sum((ndrggn)|map_ndrggn_dreg(ndrggn,dreg),csapr_tso2_lm1_by_clrg(ndrggn));
			}
			Parameter Tso2_vr1_by_clrg {
				IndexDomain: (DReg,MX_SO2);
				Text: {
					"applies for years between TranRule1 and TransRule2; changed to Dreg from dreg2"
				}
				Definition: Sum((ndrggn)|map_ndrggn_dreg(ndrggn,dreg),csapr_tso2_vr1_by_clrg(ndrggn));
			}
			Parameter Tso2_vr3_by_clrg {
				IndexDomain: (DReg,MX_SO2);
				Text: "changed from dreg2 to dreg";
				Definition: Sum((ndrggn)|map_ndrggn_dreg(ndrggn,dreg),csapr_tso2_vr3_by_clrg(ndrggn));
			}
			Parameter Tso2_vr4_by_clrg {
				IndexDomain: (DReg,MX_SO2,yr);
				Text: "changed from dreg2 to dreg";
				Range: nonnegative;
				Definition: {
					
					if yr > '2013' then  !I wasn't quite sure how to specify this
					        if yr >= csapr_TRANRULE2a('1') then
					                Sum((ndrggn)|map_ndrggn_dreg(ndrggn,dreg),csapr_tso2_vr3_by_clrg(ndrggn))
					        elseif yr >= csapr_TRANRULE1a('1') then
					                Sum((ndrggn)|map_ndrggn_dreg(ndrggn,dreg),csapr_tso2_vr1_by_clrg(ndrggn))
					        endif
					endif
				}
			}
			Parameter rclclnr {
				IndexDomain: (pt2);
				Text: "should be the same for every region and nutsec";
				Definition: {
					!Sum((ndrggn, ndregn,nutsec,mnumyr)|
					Max((ndrggn,globalyr,nutsec)|Map_nutsec_pt3(NUTSEC,pt2),
					COALEMM_RCLCLNR(ndrggn,globalyr,NUTSEC))
				}
			}
			Parameter rclclnr_B {
				IndexDomain: (ndrggn,pt2);
				Text: "should be the same for every region and nutsec";
				Definition: {
					!Sum((ndrggn, ndregn,nutsec,mnumyr)|
					Max((globalyr,nutsec)|Map_nutsec_pt3(NUTSEC,pt2),
					COALEMM_RCLCLNR(ndrggn,globalyr,NUTSEC))
				}
			}
			Parameter rclclnr_C {
				IndexDomain: (ndrggn,globalyr,pt2);
				Text: "should be the same for every region and nutsec";
				Definition: {
					!Sum((ndrggn, ndregn,nutsec,mnumyr)|
					Max((nutsec)|Map_nutsec_pt3(NUTSEC,pt2),
					COALEMM_RCLCLNR(ndrggn,globalyr,NUTSEC))
				}
			}
			Parameter rclclnr_D {
				IndexDomain: (ndrggn,globalyr,nutsec);
				Text: "should be the same for every region and nutsec";
				Definition: {
					!Sum((ndrggn, ndregn,nutsec,mnumyr)|
					max(COALEMM_RCLCLNR(ndrggn,globalyr,NUTSEC),0)
				}
			}
			Parameter Sulfur2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "lbs of sulfur per million Btu";
				Definition: Sum(Scrv1,Sulfur(Scrv1,SReg,Sulf,Mtyp,Rank));
			}
			Parameter Ash {
				IndexDomain: (SReg,Sulf,Mtyp,Rank);
				Definition: {
					if Btu2(SReg,Sulf,Mtyp,Rank)>0then
					Ashsulf(Rank)
					endif
				}
			}
			Parameter So2oth {
				IndexDomain: (DReg,yr);
			}
			Set ShadowDemandRegions {
				SubsetOf: DemandRegion;
				Index: DReg2;
				Definition: {
					Data { '01NE','02YP', '03S1','04S2', '05GF','06OH',
					'07EN','08KT' , '09AM','10C1','11C2', '12WS','13MT',
					'14CU', '15ZN', '16PC'}
				}
			}
			Parameter test {
				IndexDomain: (MX_SO2,SReg, Sulf, Mtyp, Rank,pt2,DReg2,cyr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					Sum((DReg)|mx_so2 = '1' and
					DReg2 <> DReg,
					Tso2_shr_by_clreg(DReg,mx_so2)*Sulfur2(SReg, Sulf, Mtyp, Rank)*
					(1-Rclclnr(pt2)))
				}
			}
			Parameter TEST2 {
				IndexDomain: (DReg,MX_SO2);
				Definition: -(Tso2_lim_by_clrg(DReg,mx_so2)/1000);
			}
			Parameter SulfurCoeficient1 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pt2,DReg)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					
					  Sulfur2(SReg, Sulf, Mtyp, Rank)*Ash(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr(pt2))*
					  so2_shr_by_clreg(DReg,'1')
				}
			}
			Parameter SulfurCoeficient2 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,pt2,DReg)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank);
				Definition: {
					
					  Sulfur2(SReg, Sulf, Mtyp, Rank)*Ash(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr(pt2))*
					  so2_shr_by_clreg(DReg,'2')
				}
			}
			Constraint UnusedSULFPENConstraint {
				IndexDomain: (cyr,MX_SO2);
				Property: ShadowPrice;
				Definition: {
					!IF (cyr < '1995') THEN   !No constraint before 1995
					!  Sum((ElecScrv,pt2,DReg),Sulfur2(ElecScrv)*Ash(ElecScrv)*(1-Rclclnr(pt2))
					!  *ElectricityTransportACSubtotal(ElecScrv,pt2,DReg,cyr)) <= 2.0e6
					!else
					  Sum((SReg, Sulf, Mtyp, Rank,pt2,DReg)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					  Sulfur2(SReg, Sulf, Mtyp, Rank)*Ash(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr(pt2))*
					  so2_shr_by_clreg(DReg,mx_so2)*ElectricityTransportACSubtotal(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
					  - sulfurescape1(cyr,mx_so2)
					   <= sulftemp(cyr,mx_so2)
					  + (so2other(cyr,MX_SO2) + 1400)
					!endif
				}
			}
			Constraint SulfurVariability {
				IndexDomain: (DReg,cyr)|CSAPR_TSO2_YR_BY_CLRG('1')<9999;
				Property: ShadowPrice;
				Definition: MVso2out(DReg,cyr) - Sum(DReg2|DReg2 <> DReg,MVsin(DReg,DReg2,cyr))= 0;
				Comment: "CSAPR SO2 trading is inactive as MVso2out and MVsin are commented out of MyVariables list.";
			}
			Constraint SULFPNConstraint {
				IndexDomain: (DReg,cyr);
				Text: "only for mx_so2=1";
				Property: ShadowPrice;
				Definition: {
					Sum((MX_SO2,SReg, Sulf, Mtyp, Rank,pt2)|mx_so2 = '1' and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					Tso2_shr_by_clreg(DReg,mx_so2)
					*Sulfur2(SReg, Sulf, Mtyp, Rank)*Ash(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr(pt2))
					*ElectricityTransportACSubtotal(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
					-MVso2out(DReg,cyr) - sulfurescape2(DReg,cyr)
					-Tso2_lim_by_clrg(DReg,'1')*1000.
					+Sum(DReg2|DReg2 <> DReg,MVsin(DReg,DReg2,cyr))
					<=0
				}
				Comment: "CSAPR SO2 trading is inactive as MVso2out and MVsin are commented out of MyVariables list.";
			}
			Constraint Mvso2 {
				IndexDomain: (DReg2,MX_SO2,cyr)|CSAPR_TSO2_YR_BY_CLRG('1')<9999;
				Text: "the limit of how much can be moved to the region";
				Property: ShadowPrice;
				Definition: Sum(DReg|DReg <> DReg2, MVsin(DReg,DReg2,cyr)) - Tso2_vr4_by_clrg(DReg2,mx_so2,cyr) <= 0;
				Comment: "CSAPR SO2 trading is inactive as MVso2out and MVsin are commented out of MyVariables list.";
			}
			Constraint SulfpenConstraint {
				IndexDomain: (cyr,MX_SO2)|CSAPR_TSO2_YR_BY_CLRG('1')=9999 or (cyr < csapr_tranrule1a('1'));
				Property: ShadowPrice;
				Definition: {
					IF (cyr < '1995') THEN   !No constraint before 1995
					  Sum((nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),Sulfur2(SReg, Sulf, Mtyp, Rank)*Ash(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr(pt2))
					  *ElectricityTransportAC(NSTEPS,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))+
					  Sum((nUS,pt2,usi,dreg,nsteps)|USDRegImportMapping(USi,DReg)=-1 and nsteps <3,
					  InternationalSO2unit(NUs,'1')*Ashsulf('1B')*(1-rclclnr(pt2))*
					  ImportsElectricity(nsteps,nus,USi,dreg,pt2,cyr)) <= 2.0e6
					else
					  Sum((nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg)|so2_shr_by_clreg(DReg,mx_so2) and nsteps <3 and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					  Sulfur2(SReg, Sulf, Mtyp, Rank)*Ash(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr(pt2))*
					  so2_shr_by_clreg(DReg,mx_so2)*ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr))
					  +Sum((nUS,pt2,usi,DReg,nsteps)|so2_shr_by_clreg(DReg,mx_so2) and
					  USDRegImportMapping(USi,DReg)=-1 and nsteps <3,
					  InternationalSO2unit(nUS,'1')*Ashsulf('1B')*(1-rclclnr(pt2))*so2_shr_by_clreg(DReg,mx_so2)*
					  ImportsElectricity(nsteps,NUS,usi,DReg,pt2,cyr))+so2_shr_alw_grp12(cyr,mx_so2)*MVso2outCAIR12(cyr)
					  +so2_shr_alw_grp21(cyr,mx_so2)*MVso2outCAIR21(cyr)
					  - sulfurescape1(cyr,mx_so2)
					   <= (sulftemp(cyr,mx_so2)
					  + so2other(cyr,MX_SO2))/1000.
					endif
				}
			}
			Constraint Copy_2SULFPENConstraint {
				IndexDomain: (cyr,MX_SO2);
				Property: ShadowPrice;
				Definition: {
					IF (cyr < '1995') THEN   !No constraint before 1995
					  Sum((SReg, Sulf, Mtyp, Rank,pt2,DReg)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),Sulfur2(SReg, Sulf, Mtyp, Rank)*Ash(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr(pt2))
					  *ElectricityTransportACSubtotal(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))+
					  Sum((nUS,pt2,usi,dreg,nsteps)|USDRegImportMapping(USi,DReg)=-1 and nsteps <3,
					  InternationalSO2unit(NUs,'1')*(1-rclclnr(pt2))*
					  ImportsElectricity(nsteps,nus,USi,dreg,pt2,cyr)) <= 2.0e6
					else
					  Sum((SReg, Sulf, Mtyp, Rank,pt2,DReg)|ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					  Sulfur2(SReg, Sulf, Mtyp, Rank)*Ash(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr(pt2))*
					  so2_shr_by_clreg(DReg,mx_so2)*ElectricityTransportACSubtotal(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))
					  +Sum((nUS,pt2,usi,DReg,nsteps)|USDRegImportMapping(USi,DReg)=-1 and nsteps <3,
					  InternationalSO2unit(nUS,'1')*(1-rclclnr(pt2))*
					  ImportsElectricity(nsteps,NUS,usi,DReg,pt2,cyr))
					  - sulfurescape1(cyr,mx_so2)
					   <= (sulftemp(cyr,mx_so2)
					  + so2other(cyr,MX_SO2))
					endif
				}
			}
			Constraint Copy_SULFPNConstraint {
				IndexDomain: (DReg,cyr)|CSAPR_TSO2_YR_BY_CLRG('1')<9999 and (cyr >= csapr_tranrule1a('1'));
				Text: "only for mx_so2=1";
				Property: ShadowPrice;
				Definition: {
					Sum[(MX_SO2,SReg, Sulf, Mtyp, Rank,pt2)|mx_so2 = '1' and ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					Tso2_shr_by_clreg(DReg,mx_so2)
					*(Sulfur2(SReg, Sulf, Mtyp, Rank)*Ash(SReg, Sulf, Mtyp, Rank)*(1-Rclclnr(pt2))
					*ElectricityTransportACSubtotal(SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr))]!+
					!(Sum((nUS,usi,nsteps,pt2)|USDRegImportMapping(USi,DReg)=-1 and nsteps <3,
					!  InternationalSO2unit(NUs,'1')*(1-rclclnr(pt2))*
					!  ImportsElectricity(nsteps,nus,USi,dreg,pt2,cyr)))
					-MVso2out(DReg,cyr) - sulfurescape2(DReg,cyr)
					-Tso2_lim_by_clrg2(DReg,'1',cyr)*1000.
					+Sum(DReg2|DReg2 <> DReg,MVsin(DReg,DReg2,cyr))
					<=0
				}
			}
			ElementParameter CSAPR_TRANRULE1a {
				IndexDomain: M1;
				Range: ndYear;
				Definition: StringToElement(ndYear,CSAPR_TRANRULE1(M1));
			}
			ElementParameter CSAPR_TRANRULE2a {
				IndexDomain: M1;
				Range: ndYear;
				Definition: StringToElement(ndYear,CSAPR_TRANRULE2(M1));
			}
			Variable MVso2out {
				IndexDomain: (DReg,cyr);
				Range: nonnegative;
			}
			Variable MVso2outCAIR12 {
				IndexDomain: (cyr);
				Range: nonnegative;
			}
			Variable MVso2outCAIR21 {
				IndexDomain: (cyr);
				Range: nonnegative;
			}
			Parameter so2_shr_alw_grp12 {
				IndexDomain: (cyr,MX_SO2);
				Definition: {
					if mx_so2 = 1 and so2_shr_alw_grp2(cyr)>0 then
					so2_shr_alw_grp1(cyr)/so2_shr_alw_grp2(cyr)*(-1)
					else
					1
					endif
				}
			}
			Parameter so2_shr_alw_grp21 {
				IndexDomain: (cyr,MX_SO2);
				Definition: {
					if mx_so2 = 2 and so2_shr_alw_grp1(cyr)>0 then
					so2_shr_alw_grp2(cyr)/so2_shr_alw_grp1(cyr)*(-1)
					else
					1
					endif
				}
			}
			Parameter so2_shr_alw_grp1 {
				IndexDomain: (cyr);
				Definition: {
					Sum(mnumyr|map_mnumyr_yr(mnumyr,cyr),
					EMISSION_SO2_SHR_ALW_GRP(MNUMYR,'1'))
				}
			}
			Parameter so2_shr_alw_grp2 {
				IndexDomain: (cyr);
				Definition: {
					Sum(mnumyr|map_mnumyr_yr(mnumyr,cyr),
					EMISSION_SO2_SHR_ALW_GRP(MNUMYR,'2'))
				}
			}
			Variable MVsin {
				IndexDomain: (DReg,DReg2,cyr);
				Range: nonnegative;
			}
			Variable TotalMVCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: {
					.0001*Sum(DReg,MVso2out(DReg,cyr))+
					.0001*Sum((DReg,DReg2),MVsin(DReg,DReg2,cyr))
				}
			}
			Variable sulfurescape1 {
				IndexDomain: (cyr,MX_SO2);
				Range: nonnegative;
			}
			Variable sulfurescape2 {
				IndexDomain: (DReg,cyr);
				Range: nonnegative;
			}
		}
		DeclarationSection AllThingsMercury {
			Parameter usw_camr {
				Definition: EMISSION_USW_CAMR('1');
			}
			Parameter hg_mefnc {
				IndexDomain: (DReg,yr);
				Text: "Mercury Emission Factor (%) if no CAMR";
				Definition: {
					Sum((ndregn,mnumyr)|Dreg = Map_ndregn(ndregn)and MAP_mnumyr_yr(MNUMYR,yr),
					EMISSION_HG_MEFNC(NDREGN,MNUMYR))
				}
			}
			Parameter plnt_emf {
				IndexDomain: (pt2,Rank);
				Text: "EMF by Plant Type and Coal Rank (%)";
				Definition: {
					Sum((ecpcap,nutsec,mx_rnk,m4)|ecpcap = nutsec and Map_nutsec_pt3(NUTSEC,pt2) and
					mx_rnk = M4 and Map_Rank_M4(Rank,M4),
					COALEMM_PLNT_EMF(ECPCAP,MX_RNK))
				}
			}
			Parameter emf_max {
				IndexDomain: (pt2,DReg,Rank,cyr);
				Definition: {
					MIN(hg_mefnc(DReg,cyr) , plnt_emf(pt2,Rank))
					
					
					
					!     Skip Steps If No CAMR and Just Specified Required EMF, If Achievable
					!      IF (USW_CAMR <= 0)THEN
					!         MIN(plnt_emf(pt2,Rank) , emf_prct(pu_id,Rank,yr))
					!         else IF (hg_choice(pt2) = 1) THEN
					!            MIN(plnt_emf(pt2,rank),emf_prct(pu_id,rank,yr),emf_in(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,yr))
					!         ELSE IF (hg_choice(pt2) = 2) THEN
					!            MIN(plnt_emf(pt2,Rank),emf_prct(pu_id,Rank,yr) , emf_out(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,DReg,pt2,yr))
					!         ELSE IF (hg_choice(pt2) = 3) THEN
					!            MAX(MIN(plnt_emf(pt2,Rank),emf_prct(pu_id,Rank,yr),
					!            emf_in(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,yr)) ,
					!            MIN(plnt_emf(pt2,Rank),emf_prct(pu_id,Rank,yr),
					!            emf_out(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,DReg,pt2,yr)))
					!         ENDIF
					!         endif
					!         endif
					!         endif
				}
			}
			Parameter parm_a {
				IndexDomain: (pt2,Rank);
				Text: "PARAMETER A in ACI Calculation";
				Definition: {
					Sum((nutsec,mx_rnk,m4)|Map_nutsec_pt3(NUTSEC,pt2)=1and
					mx_rnk = M4 and Map_Rank_M4(Rank,M4) =1,COALEMM_PARM_A(NUTSEC,MX_RNK))
				}
			}
			Parameter parm_b {
				IndexDomain: (pt2,Rank);
				Text: "PARAMETER B in ACI Calculation";
				Definition: {
					Sum((nutsec,mx_rnk,m4)|Map_nutsec_pt3(NUTSEC,pt2)=1and
					mx_rnk = M4 and Map_Rank_M4(Rank,M4) =1,COALEMM_PARM_B(NUTSEC,MX_RNK))
				}
			}
			Parameter parm_c {
				IndexDomain: (pt2,Rank);
				Definition: {
					Sum((nutsec,mx_rnk,m4)|Map_nutsec_pt3(NUTSEC,pt2)=1and
					mx_rnk = M4 and Map_Rank_M4(Rank,M4) =1,COALEMM_PARM_C(NUTSEC,MX_RNK))
				}
			}
			Parameter parm_d {
				IndexDomain: (pt2,Rank);
				Definition: {
					Sum((nutsec,mx_rnk,m4)|Map_nutsec_pt3(NUTSEC,pt2)=1and
					mx_rnk = M4 and Map_Rank_M4(Rank,M4) =1,COALEMM_PARM_D(NUTSEC,MX_RNK))
				}
			}
			Parameter fgd_fct {
				IndexDomain: (pt2,Rank);
				Text: "fgd emission factor";
				Definition: {
					Sum((nutsec,mx_rnk,m4)|Map_nutsec_pt3(NUTSEC,pt2)=1and
					mx_rnk = M4 and Map_Rank_M4(Rank,M4) =1,COALEMM_FGD_FCTR(NUTSEC,MX_RNK))
				}
			}
			Parameter scr_fctr {
				IndexDomain: (pt2,Rank);
				Text: "scr emission factor";
				Definition: {
					Sum((nutsec,mx_rnk,m4)|Map_nutsec_pt3(NUTSEC,pt2)=1and
					mx_rnk = M4 and Map_Rank_M4(Rank,M4) =1,COALEMM_SCR_FCTR(NUTSEC,MX_RNK))
				}
			}
			Parameter emf_t2 {
				IndexDomain: (NSTEPS);
				Text: "mercury emissions factor 1--> no aci";
			}
			Parameter emm_mef {
				IndexDomain: (NSTEPS,Rank,pt2);
				Text: "emission factor by plant type EMM_MEF(%)";
				Definition: {
					!  If No CAMR but Other HG Standard, Specify Just One ACI Step for Standard Unless Min EMF is Insufficient
					 !   IF (emf_max(pt2,DReg,Rank,yr) < plnt_emf(pt2,Rank))THEN
					 !    IF (Allowed(nsteps) = 1)THEN
					 !      IF (emf_max(pt2,DReg,Rank,yr) >= min_emf(pt2,Rank))THEN
					 !        emf_max(pt2,DReg,Rank,yr)
					 !      ENDIF
					 !   ENDIF
					 !   ENDIF
					 Sum((M4,mx_rnk,nutsec)|Map_Rank_M4(Rank,M4)=1 and MAP_M4_MX_Rnk(M4,MX_RNK) and
					  Map_nutsec_pt3(NUTSEC,pt2)=1,
					 COALEMM_EMM_MEF(NSTEPS,MX_RNK,NUTSEC))
					
					  !Sum((M4,mx_rnk,nutsec)|Map_Rank_M4(Rank,M4) and M4=MX_Rnk and
					  !Map_nutsec_pt3(NUTSEC,pt2),
					 !COALEMM_EMM_MEF(NSTEPS,MX_RNK,NUTSEC))
				}
			}
			Parameter min_emf {
				IndexDomain: (pt2,Rank);
				Definition: {
					Sum((ecpcap,nutsec,mx_rnk,m4)|ecpcap = nutsec and Map_nutsec_pt3(NUTSEC,pt2)=1and
					mx_rnk = M4 and Map_Rank_M4(Rank,M4) =1,
					COALEMM_MIN_EMF(ECPCAP,MX_RNK))
				}
			}
			Parameter aci_opt {
				IndexDomain: (NSTEPS,Rank,pt2,yr);
				Definition: {
					Sum((mx_rnk,m4,nutsec,m1,mnumyr)|Mx_rnk = M4 and
					Map_Rank_M4(Rank,M4) and Map_nutsec_pt3(NUTSEC,pt2) and
					yr = ncntrl_curcalyr(m1) and MAP_mnumyr_yr(MNUMYR,yr),
					COALEMM_ACI_OPT(NSTEPS,MX_RNK,NUTSEC,MNUMYR))
				}
			}
			Parameter aci_qac {
				IndexDomain: (NSTEPS,Rank,DReg,pt2,cyr)|aci_qac_flag4(NSTEPS,Rank,DReg,pt2,cyr);
				Text: "Activated Carbon Requirement - Units are tons of AC";
				Definition: {
					!!   If No CAMR but Other HG Standard, Specify Just One ACI Step for Standard Unless Min EMF is Insufficient
					 !    IF (emf_max(pt2,DReg,Rank,yr) < plnt_emf(pt2,Rank))THEN
					! !     IF (Allowed(nsteps) = 1)THEN
					   !    If (aci_cst(nsteps,Rank,pt2) = 0)then
					    !    IF (emf_max(pt2,DReg,Rank,yr) >= min_emf(pt2,Rank))THEN
					     !             1000.0 * 1000.0 * 1000.0 * 0.000454 * parm_c(pt2,rank) *
					      !            2.2 / 12000.0  *
					       !           MAX(0.0 , (parm_a(pt2,Rank) / (parm_d(pt2,Rank)
					        !           - 100.0 + 100.0 * emf_max(pt2,DReg,Rank,yr)
					         !           / (fgd_fct(pt2,Rank)*
					          !         scr_fctr(pt2,Rank))) - parm_b(pt2,Rank)))
					       ! ENDIF
					     !ENDIF
					     !ENDIF
					 !              1000.0 * 1000.0 * 1000.0 * 0.000454 * parm_c(pt2,rank) *
					                1000.0 * 0.000454 * parm_c(pt2,rank) *
					                  2.2 / 12000.0  *
					                  MAX(0.0 , (parm_a(pt2,Rank) / (parm_d(pt2,Rank)
					                   - 100.0 + 100.0 * emf_max(pt2,DReg,Rank,cyr)
					                    / (fgd_fct(pt2,Rank)*
					                   scr_fctr(pt2,Rank))) - parm_b(pt2,Rank)))
				}
				Comment: "Mimics a calculation in the EMM for Activated Carbon requirment by plant type and coal rank.";
			}
			Parameter aci_qac_flag1 {
				IndexDomain: (Rank,DReg,pt2,cyr)|emf_max(pt2,DReg,Rank,cyr) < plnt_emf(pt2,Rank);
				Definition: 1;
			}
			Parameter aci_qac_flag2 {
				IndexDomain: (NSTEPS,Rank,pt2)|aci_cst(nsteps,Rank,pt2)=0;
				Definition: 1;
			}
			Parameter aci_qac_flag3 {
				IndexDomain: (Rank,DReg,pt2,cyr)|emf_max(pt2,DReg,Rank,cyr) >= min_emf(pt2,Rank);
				Definition: 1;
			}
			Parameter aci_qac_flag4 {
				IndexDomain: (nsteps,Rank,DReg,pt2,cyr)|aci_qac_flag2(NSTEPS,Rank,pt2)and aci_qac_flag1(Rank,DReg,pt2,cyr)and aci_qac_flag3(Rank,DReg,pt2,cyr);
				Definition: 1;
			}
			Parameter aci_cst {
				IndexDomain: (NSTEPS,Rank,pt2);
				Text: "equipment cost per trillion btu of coal for activated carbon injection";
				Definition: {
					Sum((Mx_Rnk,M4,nutsec)|Mx_rnk = M4 and
					Map_Rank_M4(Rank,M4)=1 and
					Map_nutsec_pt3(NUTSEC,pt2)=1,
					COALEMM_ACI_CST(NSTEPS,MX_RNK,NUTSEC))
				}
			}
			Parameter aci_cst_bySupplyCurve {
				IndexDomain: (NSTEPS,SReg,Sulf,Mtyp,Rank,pt2);
				Text: "equipment cost per trillion btu of coal for activated carbon injection";
				Definition: aci_cst(nsteps,rank,pt2);
			}
			Parameter aci_cst_bySupplyCurve2 {
				IndexDomain: (NSTEPS,SReg,Sulf,Mtyp,Rank,pt2);
				Text: "equipment cost per trillion btu of coal for activated carbon injection";
				Definition: aci_cst(nsteps,rank,pt2)/10;
				Comment: "Laura Martin said units on ACI_CST are actually $/MWh so lets make this caclulation correct by using passed heat rates from HRTCLNR.";
			}
			Parameter allowed {
				IndexDomain: (NSTEPS);
				Text: "if = 1 then the step is allowed";
			}
			Parameter emel_qhg {
				IndexDomain: (yr);
				Definition: {
					Sum((Ndregn,mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),
					EMISSION_EMEL_QHG(NDREGN,MNUMYR))
				}
			}
			Parameter hgother {
				IndexDomain: (yr);
				Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),COALEMM_HGOTHER(MNUMYR));
			}
			Parameter merccont {
				IndexDomain: (NSTEPS,SReg,Sulf,Mtyp,Rank,pt2);
				Definition: {
					0.5 *
					Mercury2(SReg,Sulf,Mtyp,Rank) *
					(emm_mef('1',Rank,pt2) -
					emm_mef(nsteps,Rank,pt2))
				}
			}
			Parameter q_ac_sc {
				IndexDomain: (NSTEPS);
				Definition: Sum(MXACSS|MXACSS=NSTEPS,COALEMM_Q_AC_SC(MXACSS));
			}
			Variable ActivatedCarbonEquipmentCost {
				IndexDomain: (nsteps,Sreg,sulf,Mtyp,Rank,Dreg,pt2,cyr);
				Text: "quantity of trills using activated carbon times the corresponding cost";
				Range: [0, MercuryRemovalUpperBoundTest(NSTEPS, SReg, Sulf, Mtyp, Rank, DReg, pt2, cyr));
				Definition: {
					!ElectricityTransportAC(nsteps,Sreg,sulf,Mtyp,Rank,Dreg,pt2,cyr) * aci_cst(nsteps,Rank,pt2)
				}
			}
			Variable ElectricityTransportAC {
				IndexDomain: (nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr);
				Text: "quantity of coal that uses activated carbon";
				Range: [0, MercuryRemovalUpperBoundTest(NSTEPS, SReg, Sulf, Mtyp, Rank, DReg, pt2, cyr));
			}
			Variable Copy_ElectricityTransportAC {
				IndexDomain: (cyr,NSTEPS,SReg,Sulf,Mtyp,Rank,DReg,pt2);
				Text: "quantity of coal that uses activated carbon";
				Range: [0, MercuryRemovalUpperBoundTest(NSTEPS, SReg, Sulf, Mtyp, Rank, DReg, pt2, cyr));
			}
			Variable EscapeElectrAC {
				IndexDomain: (nsteps,SReg, Sulf, Mtyp, Rank,pt2,DReg,cyr) |SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Range: nonnegative;
			}
			Parameter ElectricityTransportACYr {
				IndexDomain: (nsteps,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr);
				Text: "quantity of coal that uses activated carbon";
				Definition: ElectricityTransportAC(NSTEPS,SReg,Sulf,Mtyp,Rank,DReg,pt2,yr);
			}
			Parameter ElectricityTransportACYr2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Text: "quantity of coal that uses activated carbon";
				Definition: Sum((nsteps,pt2),ElectricityTransportAC(NSTEPS,SReg,Sulf,Mtyp,Rank,DReg,pt2,yr));
			}
			Parameter ElectricitySRegDebug {
				IndexDomain: (SReg,pt2,yr);
				Definition: Sum((nsteps,Sulf,Mtyp,Rank,DReg),ElectricityTransportACYr(NSTEPS,SReg,Sulf,Mtyp,Rank,pt2,DReg,yr));
			}
			Variable SubtotalElecTranspor {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr);
				Range: nonnegative;
			}
			Variable ElectricityTransportACSubtotal {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr);
				Text: "quantity of coal that uses activated carbon";
				Range: nonnegative;
			}
			Parameter ElectricityTransportACSubtotalTons {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr);
				Definition: ElectricityTransportACSubtotal(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr)/$Btu2(SReg,Sulf,Mtyp,Rank);
			}
			Variable ActivatedCarbonCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: coalemm_p_ac_sc('1')*acixss1y(cyr);
			}
			Parameter ActivatedCarbonCostMultiplier {
				IndexDomain: (mxacss);
				Range: nonnegative;
				Definition: coalemm_p_ac_sc(mxacss);
			}
			Constraint SubtotalElecTransportACSubto {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr) | Btu2(SReg, Sulf, Mtyp, Rank);
				Property: ShadowPrice;
				Definition: {
					ElectricityTransportACSubtotal(SReg,Sulf,Mtyp,Rank,pt2,DReg,cyr)=
					Sum(nsteps|nsteps < 3,
					ElectricityTransportAC(NSTEPS,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr))
				}
			}
			Variable Mercev {
				Range: nonnegative;
			}
			Variable Morehgxx {
				Range: nonnegative;
				Comment: "This variable is declared in MyVariables but never referenced anywhere. In old CMM mask this was called the Mercury Escape Vector.  DAF";
			}
			Variable acixss1y {
				IndexDomain: (cyr);
				Range: nonnegative;
			}
			Constraint Acixxxxy {
				IndexDomain: (cyr);
				Property: ShadowPrice;
				Definition: {
					Sum((SReg,Sulf,Mtyp,ElecRank,pt2,DReg)|Btu2(SReg,Sulf,Mtyp,ElecRank),
					ElectricityTransportAC('2',SReg,Sulf,Mtyp,ElecRank,DReg,pt2,cyr)*.000001*
					ACI_QAC('2',ElecRank,Dreg,pt2,cyr)*10.0 - 10.*acixss1y(cyr)) <= 0
				}
			}
			Parameter P_aci {
				IndexDomain: (cyr);
				Definition: Acixxxxy.Shadowprice(cyr)*10.;
			}
			Parameter Emel_phg {
				IndexDomain: (cyr);
				Definition: Mercp02.Shadowprice(cyr)*1000.;
			}
			Parameter testmerc {
				IndexDomain: (SReg,Sulf,Mtyp,ElecRank,nsteps,pt2);
				Definition: {
					Mercury2(SReg,Sulf,Mtyp,ElecRank)*2000*
					(emm_mef(nsteps,ElecRank,pt2))!*10^6
				}
			}
			Set numbersteps2 {
				Index: numsteps;
			}
			Set activeACsteps {
				SubsetOf: NSTEPS_;
				Index: ACsteps;
				InitialData: Data {1};
			}
			Constraint Acixxxxy2 {
				IndexDomain: (cyr);
				Property: ShadowPrice;
				Definition: {
					!Sum((SReg,Sulf,Mtyp,ElecRank,pt2,DReg),
					!ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,ElecRank,pt2,DReg,cyr)*.000001*
					!ACI_QAC(nsteps,ElecRank,Dreg,pt2,cyr)*10.0)+
					!Sum((pt2,nUS,DReg),ImportsElectricity(nsteps,pt2,nUS,DReg,cyr)
					!*.000001*
					!ACI_QAC(nsteps,ElecRank,Dreg,pt2,cyr)*10.0) - 10.*acixss1y(nsteps) = 0
					 ActivatedCarbonUseDomestic(cyr) +
					 ActivatedCarbonUseImports(cyr)- 10.*acixss1y(cyr)
					 <= 0
				}
			}
			Variable ActivatedCarbonUseDomestic {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: {
					Sum((SReg,Mtyp,Sulf,ElecRank,Dreg,pt2),
					
					!ACI_QAC('1',ElecRank,Dreg,pt2,cyr)*10.0*.000001*
					ACI_QAC('1',ElecRank,Dreg,pt2,cyr)*ElectricityTransportAC('2',SReg,Sulf,Mtyp,ElecRank,DReg,pt2,cyr))*10
				}
			}
			Variable ElectricityTransportAC2 {
				IndexDomain: (NSTEPS,ElecRank,DReg,pt2,cyr)|nsteps<3;
				Range: nonnegative;
				Definition: {
					Sum((SReg,Sulf,Mtyp),
					ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,ElecRank,DReg,pt2,cyr))
				}
			}
			Variable ActivatedCarbonUseImports {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: {
					Sum((pt2,nUS,usi,DReg)|USDRegImportMapping(USi,DReg)=-1,
					ImportsElectricity('2',nUS,usi,DReg,pt2,cyr)
					!*.000001*
					*ACI_QAC('1','1B',Dreg,pt2,cyr)*10.0)
				}
			}
			Parameter P_aci2 {
				IndexDomain: (nsteps,cyr);
				Definition: Acixxxxy2.Shadowprice(cyr)*10.;
			}
			Parameter TotTonsActivatedCarbon {
				IndexDomain: yr;
				Definition: {
					ActivatedCarbonUseDomestic(yr) 
					 +ActivatedCarbonUseImports(yr)
				}
			}
			Parameter mercsubtotal {
				IndexDomain: (SReg,Sulf,Mtyp,ElecRank,nsteps,DReg,pt2,cyr)|nsteps<3 and Mercury2(SReg,Sulf,Mtyp,ElecRank);
				Definition: Mercury2(SReg,Sulf,Mtyp,ElecRank)*(Copy_emm_mef(nsteps,ElecRank,DReg,pt2,cyr));
			}
			Constraint Mercp02 {
				IndexDomain: cyr;
				Text: "Mercury constraint (lbs) RHS set by EMEL_QHG from restart file";
				Property: ShadowPrice;
				Definition: {
					
					
					Sum((SReg,Sulf,Mtyp,ElecRank,DReg,pt2)|Mercury2(SReg,Sulf,Mtyp,ElecRank),
					Mercury2(SReg,Sulf,Mtyp,ElecRank)*(Copy_emm_mef('1',ElecRank,DReg,pt2,cyr)*
					ElectricityTransportAC('1',SReg,Sulf,Mtyp,ElecRank,Dreg,pt2,cyr)))+
					Sum((SReg,Sulf,Mtyp,ElecRank,DReg,pt2)|Mercury2(SReg,Sulf,Mtyp,Elecrank),
					Mercury2(SReg,Sulf,Mtyp,ElecRank)*(Copy_emm_mef('2',ElecRank,DReg,pt2,cyr)*
					ElectricityTransportAC('2',SReg,Sulf,Mtyp,ElecRank,DReg,pt2,cyr)))
					+ Sum((usi,DReg,nUS,pt2)|USDRegImportMapping(USi,DReg)=-1,
					InternationalMercuryUnit(nUS,'2')*Copy_emm_mef('1','1B',DReg,pt2,cyr)*
					ImportsElectricity('1',nUS,usi,DReg,pt2,cyr))+
					Sum((usi,DReg,nUS,pt2)|USDRegImportMapping(USi,DReg)=-1,
					InternationalMercuryUnit(nUS,'2')
					*Copy_emm_mef('2','1B',DReg,pt2,cyr)*ImportsElectricity('2',nUS,usi,DReg,pt2,cyr))
					- Mercev <= EMEL_QHG(cyr)*2000.
				}
				Comment: {
					"  Transport volumes (Tbtus) * mercury content (lbs/Tbtu) * emission factor by plant type EMM_MEF(%) = mercury (lbs)
					  Mercev  is escape vector
					  RHS Mercury cap EMEL_QHG (tons) * 2000 = mercury (lbs)"
				}
			}
			Parameter TotLbsMercury {
				IndexDomain: yr;
				Definition: {
					Sum((SReg,Sulf,Mtyp,ElecRank,DReg,pt2)|Mercury2(SReg,Sulf,Mtyp,ElecRank),
					Mercury2(SReg,Sulf,Mtyp,ElecRank)*(Copy_emm_mef('1',ElecRank,DReg,pt2,yr)*
					ElectricityTransportAC('1',SReg,Sulf,Mtyp,ElecRank,Dreg,pt2,yr)))+
					Sum((SReg,Sulf,Mtyp,ElecRank,DReg,pt2)|Mercury2(SReg,Sulf,Mtyp,Elecrank),
					Mercury2(SReg,Sulf,Mtyp,ElecRank)*(Copy_emm_mef('2',ElecRank,DReg,pt2,yr)*
					ElectricityTransportAC('2',SReg,Sulf,Mtyp,ElecRank,DReg,pt2,yr)))
					+ Sum((usi,DReg,nUS,pt2)|USDRegImportMapping(USi,DReg)=-1,
					InternationalMercuryUnit(nUS,'2')*Copy_emm_mef('1','1B',DReg,pt2,yr)*
					ImportsElectricity('1',nUS,usi,DReg,pt2,yr))+
					Sum((usi,DReg,nUS,pt2)|USDRegImportMapping(USi,DReg)=-1,
					InternationalMercuryUnit(nUS,'2')
					*Copy_emm_mef('2','1B',DReg,pt2,yr)*ImportsElectricity('2',nUS,usi,DReg,pt2,yr))
				}
			}
			Parameter Step1MercuryCoef {
				IndexDomain: (SReg,Sulf,Mtyp,ElecRank,DReg,pt2,cyr)|Btu2(SReg,Sulf,Mtyp,ElecRank);
				Definition: 0.5*Mercury2(SReg,Sulf,Mtyp,ElecRank)*Copy_emm_mef('1',ElecRank,DReg,pt2,cyr);
			}
			Parameter Step2MercuryCoef {
				IndexDomain: (SReg,Sulf,Mtyp,ElecRank,DReg,pt2,cyr)|Btu2(SReg,Sulf,Mtyp,ElecRank);
				Definition: 0.5* Mercury2(SReg,Sulf,Mtyp,ElecRank)*Copy_emm_mef('2',ElecRank,DReg,pt2,cyr);
			}
			Parameter MercuryRemoval {
				IndexDomain: (nsteps,Rank,DReg,pt2,cyr);
				Text: "This creates a check to see if the transportation vector can comply with MATS";
				Definition: {
					if nsteps = '1' and copy_emm_mef(nsteps,rank,DReg,pt2,cyr) > .101 then
					1
					else
					2
					endif
				}
			}
			Parameter MercuryRemovalUpperBound {
				IndexDomain: (NSTEPS,Rank,DReg,pt2,cyr)|nsteps < 3;
				Text: "This creates a check to see if the transportation vector can comply with MATS";
				Definition: {
					!if cyr < '2016' then
					!30000
					!else
					if cyr > 2015 and MercuryRemoval(nsteps,RAnk,DReg,pt2,cyr) = '1' then
					0
					else
					30000
					endif
				}
			}
			Parameter MercuryRemovalUpperBoundTest {
				IndexDomain: (nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,cyr)|trate2flag(SReg,Sulf,Mtyp,Rank,DReg);
				Text: "This creates a check to see if the transportation vector can comply with MATS";
				Definition: {
					!if trate2flag(SReg,Sulf,Mtyp,Rank,DReg)then
					MercuryRemovalUpperBound(NSTEPS,Rank,DReg,pt2,cyr)
					!else
					!0
					!endif;
				}
			}
			Parameter Copy_emm_mef {
				IndexDomain: (NSTEPS,Rank,DReg,pt2,cyr);
				Text: "emission factor by plant type EMM_MEF(%) w/ Dreg and cyr";
				Definition: {
					!  If No CAMR but Other HG Standard, Specify Just One ACI Step for Standard Unless Min EMF is Insufficient
					 !   IF (emf_max(pt2,DReg,Rank,yr) < plnt_emf(pt2,Rank))THEN
					 !    IF (Allowed(nsteps) = 1)THEN
					 !      IF (emf_max(pt2,DReg,Rank,yr) >= min_emf(pt2,Rank))THEN
					 !        emf_max(pt2,DReg,Rank,yr)
					 !      ENDIF
					 !   ENDIF
					 !   ENDIF
					 Sum((M4,mx_rnk,nutsec)|Map_Rank_M4(Rank,M4) and M4=MX_Rnk and
					  Map_nutsec_pt3(NUTSEC,pt2),
					 COALEMM_EMM_MEF(NSTEPS,MX_RNK,NUTSEC))
				}
			}
		}
		DeclarationSection UnusedMercuryItems {
			Parameter mx_aci2 {
				Definition: 8;
			}
			Parameter Copy_Tmp_phg2 {
				IndexDomain: (NDRGGN,globalyr,NUTSEC);
				Text: "activated carbon cost";
				Definition: {
					Sum((SReg,Sulf,Mtyp,Rank,nsteps,DReg,pt2,yr)|
					Map_nutsec_pt3(NUTSEC,pt2)=1 and Map_Ndrggn_DReg(NDRGGN,DReg)
					and yr = globalyr + 1989 and Btu2(SReg,Sulf,Mtyp,Rank)>0,
					aci_qac('2',Rank,DReg,pt2,yr)*.000001*p_aci2(nsteps,yr)
					*ElectricityTransportAC(nsteps,SReg,Sulf,Mtyp,Rank,DReg,pt2,yr))
				}
			}
			Set numberemissions {
				SubsetOf: Integers;
				Text: "4=co2,so2,nox,hg";
				Index: numemiss;
				Definition: Data {'1','2','3','4'};
			}
			Parameter aci_steps2 {
				IndexDomain: (pt2,Rank);
				Text: "number of aci_steps to create";
			}
			Parameter hg_choice {
				IndexDomain: (pt2);
				Text: "choice of input or output mercury standard 1=input only 2= output only 3= input or output";
				Definition: {
					!Sum((ecpcap,nutsec)|ecpcap = nutsec and Map_nutsec_pt3(NUTSEC,pt2)=1,
					!COALEMM_HG_CHOICE(ECPCAP))
				}
			}
			Parameter numbersteps;
			Parameter hrtclnr {
				IndexDomain: (DReg,yr,pt2);
				Text: {
					"average heat rate;  source: coalemm"
				}
				Definition: {
					Sum((ndrggn,mnumyr,nutsec)|Map_nutsec_pt3(NUTSEC,pt2)=1 and
					MAP_mnumyr_yr(MNUMYR,yr) and DReg = Map_ndregn(NDRGGN),
					COALEMM_HRTCLNR(NDRGGN,MNUMYR,NUTSEC))
				}
			}
			Parameter emf_max2 {
				IndexDomain: (yr);
				Definition: {
					!(pt2,rank,pu_id,yr,scrv1,sreg,sulf,mtyp,dreg)
					!     Skip Steps If No CAMR and Just Specified Required EMF, If Achievable
					!      IF (USW_CAMR <= 0)THEN
					!         MIN(plnt_emf(pt2,Rank) , emf_prct(pu_id,Rank,yr))
					 !        else IF (hg_choice(pt2) = 1) THEN
					 !           MIN(plnt_emf(pt2,rank),emf_prct(pu_id,rank,yr),emf_in(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,yr))
					 !        ELSE IF (hg_choice(pt2) = 2) THEN
					 !           MIN(plnt_emf(pt2,Rank),emf_prct(pu_id,Rank,yr) , emf_out(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,DReg,pt2,yr))
					 !        ELSE IF (hg_choice(pt2) = 3) THEN
					 !           MAX(MIN(plnt_emf(pt2,Rank),emf_prct(pu_id,Rank,yr),
					  !          emf_in(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,yr)) ,
					  !          MIN(plnt_emf(pt2,Rank),emf_prct(pu_id,Rank,yr),
					  !          emf_out(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,DReg,pt2,yr)))
					 !        ENDIF
					 !        endif
					 !        endif
					 !        endif
				}
			}
			Parameter hg_input {
				IndexDomain: (pu_id,Rank,yr);
				Text: {
					"mercury emissions limits in grams per million but by coal rank; 0.0 -> n/a"
				}
			}
			Parameter hg_mef {
				IndexDomain: (pu_id,Rank,yr);
				Text: "mercury emission";
			}
			Parameter emlim {
				IndexDomain: (numemiss,yr);
				Definition: {
					Sum((M4,MNUMYR)|m4=numemiss and MAP_mnumyr_yr(MNUMYR,yr),
					EMISSION_EMLIM(M4,MNUMYR))
				}
			}
			Parameter hg_grams_mwh {
				IndexDomain: (pu_id,yr);
				Text: "mercury emissions limits in grams per mwhr, 0 --> n/a";
			}
			Parameter hg_output {
				IndexDomain: (pu_id,Rank,yr);
				Text: {
					"mercury emissions limits in grams per megawatthour by coal rank, 0.0 means n/a; coalemm"
				}
			}
			Parameter aci2 {
				IndexDomain: (NSTEPS);
				Text: "activated carbon requirement per trillion btu for activted carbon injection";
			}
			Parameter mact_sw2 {
				IndexDomain: (pu_id,rank,yr);
				Definition: {
					if (hg_output(pu_id,Rank,yr) > 0.0 or hg_input(pu_id,Rank,yr) > 0.0 or hg_mef(pu_id,Rank,yr) > 0.0) THEN
					1[-]
					else
					0[-]
					endif
				}
			}
			Parameter emf_prct {
				IndexDomain: (pu_id,rank,yr);
				Definition: {
					!IF (hg_mef(pu_id,Rank,yr) > 0.0) THEN
					!        hg_mef(pu_id,Rank,yr)
					!      ELSE
					 !        1.0
					!ENDIF
				}
			}
			Parameter emf_in {
				IndexDomain: (yr);
				Definition: {
					!(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,yr)
					!IF (hg_input(pu_id,Rank,yr) > 0.0) THEN
					!         MIN(1.0 , hg_input(pu_id,Rank,yr) / Mercury(Scrv1,SReg,Sulf,Mtyp,Rank))
					!      ELSE
					!         1.0[-]
					!ENDIF
				}
			}
			Parameter emf_out {
				IndexDomain: (yr);
				Definition: {
					!(pu_id,Rank,Scrv1,SReg,Sulf,Mtyp,DReg,pt2,yr)
					!IF (hg_output(pu_id,Rank,yr) > 0.0) THEN
					 !        MIN(1.0 , 1000.0 * hg_output(pu_id,Rank,yr) / hrtclnr(DReg,yr,pt2)
					 !         / Mercury(Scrv1,SReg,Sulf,Mtyp,Rank))
					  !    ELSE
					 !       1.0
					 !     ENDIF
				}
			}
		}
		DeclarationSection Calibration {
			Comment: {
				"We are required to match historical data as best we can.
				We are also required to match the Short-term Energy Outlook
				for the first few years of the model.  We do this through
				overwrites for the base year, but we also may manipulate other
				items including the transportation rate for the electricity
				sector (bsrzr_util)and stocks.
				This process is referred to as calibration."
			}
			Parameter Stockbase {
				IndexDomain: (yr,DReg);
			}
			Parameter Stockshare {
				IndexDomain: (yr,DReg);
			}
			Parameter Stockreg2 {
				IndexDomain: (pt2,DReg,cyr)|QdutzrSubtotal(cyr,DReg);
				Definition: Stockshare(cyr,DReg)*Stockbase(cyr,DReg)*Qdutzr(pt2,DReg,cyr)/$QdutzrSubtotal(cyr,DReg);
			}
			Parameter Totalstocks {
				IndexDomain: (nutsec,globalyr);
				Definition: Sum((pt2,DReg,cyr)|Map_nutsec_pt3(NUTSEC,pt2)AND map_globalyr_cyr(globalyr,cyr),Stockreg2(pt2,DReg,cyr));
			}
			Parameter QdutzrSubtotal {
				IndexDomain: (cyr,DReg);
				Definition: Sum(pt2,qdutzr(pt2,DReg,cyr));
			}
		}
		DeclarationSection Escalator_and_Surcharge {
			Parameter TonsPCar_Imp {
				IndexDomain: USi;
				Text: "Assumption  110 tons per rail car";
			}
			Parameter Trigger_Imp {
				IndexDomain: USi;
			}
			Parameter Trig_Incr_Imp {
				IndexDomain: USi;
			}
			Parameter ChargePerMile_Car_Imp {
				IndexDomain: USi;
			}
			Parameter TonsPCar {
				IndexDomain: (SReg);
			}
			Parameter Tonrailmile {
				IndexDomain: (SReg,DReg,Sec);
			}
			Parameter Trigger {
				IndexDomain: (SReg);
			}
			Parameter Trig_Incr {
				IndexDomain: SReg;
			}
			Parameter DistanceSurcharge {
				IndexDomain: (SReg,DReg,tier);
				Comment: "This is the distance between Sreg to Dreg in miles";
			}
			Parameter DistanceSurchargeTier1 {
				IndexDomain: (SReg,DReg);
				Definition: DistanceSurcharge(SReg,DReg,'1');
				Comment: {
					"all non-electricity sectors have only one Tier; electricity may have a 2nd tier"
				}
			}
			Parameter DistanceSurchargeTier2 {
				IndexDomain: (SReg,DReg);
				Definition: DistanceSurcharge(SReg,DReg,'2');
				Comment: {
					"all non-electricity sectors have only one Tier; electricity may have a 2nd tier"
				}
			}
			Parameter DistanceSurchargeImport {
				IndexDomain: (USi,DReg);
				Text: "This is distance in miles from port to demand region center (estimate) values of 3000 are not viable";
				Comment: {
					"all non-electricity sectors have only one Tier; electricity may have a 2nd tier"
				}
			}
			Parameter ChargePerMile_Car {
				IndexDomain: (SReg);
			}
			Parameter SurcharT1 {
				IndexDomain: (SReg,DReg,yr);
				Text: "per ton - 1987$";
				Definition: {
					Sum((mnumy3)|MAP_mnumy3_yr(MNUMY3,yr),
					SurcharT1_D(SReg,DReg,yr)!*10^6
					/MACOUT_MC_JPGDP(MNUMY3))
					
					!I have to multiply this by 10^6 to compensate for the units problems
				}
			}
			Parameter SurcharT1_D {
				IndexDomain: (SReg,DReg,yr);
				Text: "per ton";
				Definition: {
					
					If (Surchart1_C(SReg,yr)>0)then
					SurcharT1_C(SReg,yr)/TonsPCar(SReg)*DistanceSurcharge(SReg,DReg,'1')
					endif
				}
			}
			Parameter SurcharT1_C {
				IndexDomain: (SReg,yr);
				Text: "per ton";
				Definition: {
					
					If SurcharT1_B(SReg,yr) > 0 then
					((SurcharT1_B(SReg,yr)  - Trigger(SReg))/Trig_Incr(SReg))*ChargePerMile_Car(SReg)
					endif
				}
			}
			Parameter SurcharT1_B {
				IndexDomain: (SReg,yr);
				Text: "per ton";
				Definition: {
					
					Sum((mnumyr,mnumy3)|(MAP_mnumyr_yr(MNUMYR,yr) and MAP_mnumy3_yr(MNUMY3,yr) and
					(APONROAD_PDSTRHWY('11',MNUMYR)*QONROAD_CFDSTRHWY(MNUMYR)/42.)*
					MACOUT_MC_JPGDP(MNUMY3) > Trigger(SReg)),
					!
					(APONROAD_PDSTRHWY('11',MNUMYR)*QONROAD_CFDSTRHWY(MNUMYR)/42.)*
					MACOUT_MC_JPGDP(MNUMY3))
				}
				Comment: "This is nominal price of distilate from transporation sector in nominal $/gallon.";
			}
			Parameter pdstrhwy {
				IndexDomain: (yr);
				Definition: {
					
					Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),
					APONROAD_PDSTRHWY('11',mnumyr))
				}
			}
			Parameter cfdstrhwy {
				IndexDomain: (yr);
				Text: "per ton";
				Definition: {
					
					Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),
					QONROAD_CFDSTRHWY(MNUMYR))
				}
			}
			Parameter SurcharT2 {
				IndexDomain: (SReg,DReg,yr);
				Text: "per ton";
				Definition: {
					Sum((mnumy3)|MAP_mnumy3_yr(MNUMY3,yr),
					SurcharT2_D(SReg,DReg,yr)!*10^6
					/MACOUT_MC_JPGDP(MNUMY3))
					
					!not sure why i need to multiply by 10^6
				}
			}
			Parameter SurcharT2_D {
				IndexDomain: (SReg,DReg,yr);
				Text: "per ton";
				Definition: {
					
					If (Surchart1_C(SReg,yr)>0)then
					SurcharT1_C(SReg,yr)/TonsPCar(SReg)*DistanceSurcharge(SReg,DReg,'2')
					endif
				}
			}
			Parameter Inv_p_tm {
				Text: "+/- cents per corresponding +/- ton-miles";
				Definition: .0530;
			}
			ElementParameter Inv_yr {
				Text: "investment dollar base year";
				Range: AllYears;
				InitialData: '2006';
			}
			Parameter Invbase {
				Text: "investment for base year (same format as econometric equation)";
				InitialData: 1.54;
			}
			Parameter Invdol {
				Text: "investment for base year (billion 1987 dollars)";
				InitialData: 93166;
			}
			Parameter Cap_p_tm {
				Text: "+/- cents of capital expenditures per corresponding +/- ton-miles";
				InitialData: .0030;
			}
			Parameter Basket {
				Text: "+/- \'basket of rail goods\' purchased per +/- ton-miles";
				Definition: .0003;
			}
			Parameter basket2 {
				IndexDomain: (yr);
				Definition: {
					if PPI_YR <> 2050 and yr = PPI_YR THEN
					BASKET * ttonmilelag1(yr)
					elseif PPI_YR <> 2050 and yr > PPI_YR THEN
					BASKET * ttonmilelag1(yr)   !how many 'baskets' of rail equipment needed
					endif
				}
			}
			Parameter basket2lag1 {
				IndexDomain: (yr);
				Definition: {
					if PPI_YR <> 2050 and yr = PPI_YR + 1 THEN
					BASKET * ttonmilelag2(yr)
					elseif PPI_YR <> 2050 and yr > PPI_YR + 1 THEN
					BASKET * ttonmilelag2(yr)   !how many 'baskets' of rail equipment needed
					endif
				}
			}
			ElementParameter Cap_yr {
				Text: "Base year for capital expenditures";
				Range: AllYears;
				InitialData: '2007';
			}
			Parameter Capbase {
				Text: "capital expenditures (national) in base year (billion 1987 dollars)";
				Definition: 4734;
			}
			ElementParameter PPI_yr {
				Text: {
					"PPI rail equipment (national) base year; first year of calculation for escalator"
				}
				Range: AllYears;
				Definition: 2021;
			}
			Parameter westsup {
				IndexDomain: (yr);
				Definition: {
					!Sum((SReg,Sulf,Mtyp,ElecRank,pt2,DReg)|Map_SReg_EW(SReg,'2')=1,
					!ElectricityTransport1Tons(SReg,Sulf,Mtyp,ElecRank,pt2,DReg,yr))
					
					!Sum((MNUMCR,MNUMLR,MNUMYR)|MNUMLR > 6 and mnumcr < 11 and
					!MAP_mnumyr_yr(MNUMYR,yr),
					!COALREP_COALPROD(MNUMCR,MNUMLR,MNUMYR))
					
					Sum((MNUMYR)|MAP_mnumyr_yr(MNUMYR,yr),
					!MAP_mnumyr_yr(MNUMYR,yr),
					COALOUT_WESTSUP(MNUMYR))
				}
				Comment: "I think I need to calc this from the restart file";
			}
			Parameter PPI_base {
				Text: "PPI rail equipment base year quantity (nominal series, 1982=1, divided by 100)";
				InitialData: 1.8020;
			}
			Parameter Cof1 {
				Text: "West intercept";
				InitialData: .632603;
			}
			Parameter Cof2 {
				Text: "coefficient for investment term for West formulation";
				InitialData: .434937;
			}
			Parameter Cof3 {
				Text: "productivity coefficient (West formulation) billion ton-miles/employee";
				InitialData: -.111765;
			}
			Parameter Cof4 {
				Text: "western share of national production coefficient (West formulation)";
				InitialData: -.264830;
			}
			Parameter Cof5 {
				Text: "East intercept";
				InitialData: 1.59107;
			}
			Parameter Cof6 {
				Text: "east productivity coefficient (billion ton-miles per employee)";
				InitialData: -.124193;
			}
			Parameter Cof7 {
				Text: "diesel coefficient (East)";
				InitialData: 0;
			}
			Parameter Cof8 {
				Text: "rho for East";
				InitialData: .361206;
			}
			Parameter Cof9 {
				Text: "coefficient for coal of capital railroad equipment (East formulation)";
				InitialData: .013095;
			}
			Parameter Cof10 {
				Text: "rho for West";
				InitialData: .547600;
			}
			Parameter dum {
				IndexDomain: yr;
				Definition: {
					if yr > 2000 then  !year greater than 2000
					1.0
					else
					0.0
					endif
				}
			}
			Parameter Railwage {
				IndexDomain: (yr);
			}
			Parameter capexp {
				IndexDomain: (yr);
				Definition: {
					!if(yr = PPI_YR) then                     !2008 for aeo2010
					!CAPBASE  + CAP_P_TM *(ttonmilelag1(yr) - ttonmilelag2(yr)) !1987 dollars capital expenditures
					!elseif(yr > PPI_YR)then  !e.g ppi_yr 2008 and cap_yr 2007
					!capexplag1(yr)  + CAP_P_TM * (ttonmilelag1(yr) - ttonmilelag2(yr)) !1987 dollars capital expenditures
					!endif
				}
				Comment: "Moved to SetUpRateEscalators Procedure 6-12-20 DAF";
			}
			Parameter capexplag1 {
				IndexDomain: (yr);
				Definition: {
					if(yr = PPI_YR) then                     !2008 for aeo2010
					CAPBASE  + CAP_P_TM *(ttonmilelag1(yr) - ttonmilelag2(yr)) !1987 dollars capital expenditures
					elseif(yr > PPI_YR)then  !e.g ppi_yr 2008 and cap_yr 2007
					CAPEXP(yr-1)
					endif
				}
			}
			Parameter ttonmile2 {
				IndexDomain: (yr);
				Definition: {
					
					!if ttonmile(yr) > 0 then
					!ttonmile(yr)
					!else
					
					!!if yr < cpsbaseyr +1  then
					!!(hcltrtmrrc('1',yr) + hcltrtmrrc('2',yr))*1000
					!!else
					Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),COALOUT_TTONMILE(MNUMYR))
					!!endif
					
					
					!IF(PPI_YR <> 2050)THEN
					!                    IF(I .EQ. PPI_YR) THEN                      !2008 for aeo2010
					!                            IF(TTONMILE(I-1) .EQ. 0.0) THEN
					!                                    TTONMILE(I-1) = 681508.
					!                                 ENDIF
					!                            PPIRAILEQ(I) = PPIBASE
					!                                 CAPEXP(I) = CAPBASE  + CAP_P_TM *(TTONMILE(I-1) - TTONMILE(I-2)) !1987 dollars capital expenditures
					!                                 BASKET2(I) = BASKET * TTONMILE(I-1)
					!                                 CAPEXP2(I) = 7680.  !nominal cap exp
					!                         ENDIF
					!                         IF(I .GT. PPI_YR)THEN  !e.g ppi_yr 2008 and cap_yr 2007
					!
					!                                 IF(TTONMILE(I-1) .EQ. 0.0)TTONMILE(I-1) = TTONMILE(I-2)
					!                                 CAPEXP(I) = CAPEXP(I-1)  + CAP_P_TM * (TTONMILE(I-1) - TTONMILE(I-2)) !1987 dollars capital expenditures
					!                                 CAPEXP2(I) = CAPEXP(I)*MC_JPGDP(I)  !convert to nominal because PPI is nominal
					!                                 BASKET2(I) = BASKET * TTONMILE(I-1)   !how many 'baskets' of rail equipment needed
					!!                                IF(CAPEXP2(I-1) .EQ. 0)CAPEXP2(I-1) = 1.0        !safety net
					!!                                IF(BASKET2(I-1) .EQ. 0)BASKET2(I-1) = 1.0        !safety net
					!!                                IF(BASKET2(I) .EQ. 0)BASKET2(I) = 1.0            !safety net
					  !            PPIRAILEQ(I) = PPIRAILEQ(I-1) * dble(CAPEXP2(I)/BASKET2(I)) / (CAPEXP2(I-1)/BASKET2(I-1))
					!                               ENDIF
				}
			}
			Parameter ttonmilelag1 {
				IndexDomain: (yr);
				Definition: {
					
					if yr < 1991 then
					681508.
					!elseif ttonmile2(yr-1) > 0 then
					!ttonmile2(yr-1)
					elseif ttonmile2(yr-1)>0 then
					ttonmile2(yr-1)
					else
					681508.
					endif
					!IF(PPI_YR <> 2050)THEN
					!                    IF(I .EQ. PPI_YR) THEN                      !2008 for aeo2010
					!                            IF(TTONMILE(I-1) .EQ. 0.0) THEN
					!                                    TTONMILE(I-1) = 681508.
					!                                 ENDIF
					!                            PPIRAILEQ(I) = PPIBASE
					!                                 CAPEXP(I) = CAPBASE  + CAP_P_TM *(TTONMILE(I-1) - TTONMILE(I-2)) !1987 dollars capital expenditures
					!                                 BASKET2(I) = BASKET * TTONMILE(I-1)
					!                                 CAPEXP2(I) = 7680.  !nominal cap exp
					!                         ENDIF
					!                         IF(I .GT. PPI_YR)THEN  !e.g ppi_yr 2008 and cap_yr 2007
					!
					!                                 IF(TTONMILE(I-1) .EQ. 0.0)TTONMILE(I-1) = TTONMILE(I-2)
					!                                 CAPEXP(I) = CAPEXP(I-1)  + CAP_P_TM * (TTONMILE(I-1) - TTONMILE(I-2)) !1987 dollars capital expenditures
					!                                 CAPEXP2(I) = CAPEXP(I)*MC_JPGDP(I)  !convert to nominal because PPI is nominal
					!                                 BASKET2(I) = BASKET * TTONMILE(I-1)   !how many 'baskets' of rail equipment needed
					!!                                IF(CAPEXP2(I-1) .EQ. 0)CAPEXP2(I-1) = 1.0        !safety net
					!!                                IF(BASKET2(I-1) .EQ. 0)BASKET2(I-1) = 1.0        !safety net
					!!                                IF(BASKET2(I) .EQ. 0)BASKET2(I) = 1.0            !safety net
					  !            PPIRAILEQ(I) = PPIRAILEQ(I-1) * dble(CAPEXP2(I)/BASKET2(I)) / (CAPEXP2(I-1)/BASKET2(I-1))
					!                               ENDIF
				}
			}
			Parameter ttonmilelag2 {
				IndexDomain: (yr);
				Definition: {
					
					if yr < 1992 then
					681508.
					elseif ttonmile2(yr-2)>0 then
					ttonmile2(yr-2)
					else
					681508.
					endif
					!IF(PPI_YR <> 2050)THEN
					!                    IF(I .EQ. PPI_YR) THEN                      !2008 for aeo2010
					!                            IF(TTONMILE(I-1) .EQ. 0.0) THEN
					!                                    TTONMILE(I-1) = 681508.
					!                                 ENDIF
					!                            PPIRAILEQ(I) = PPIBASE
					!                                 CAPEXP(I) = CAPBASE  + CAP_P_TM *(TTONMILE(I-1) - TTONMILE(I-2)) !1987 dollars capital expenditures
					!                                 BASKET2(I) = BASKET * TTONMILE(I-1)
					!                                 CAPEXP2(I) = 7680.  !nominal cap exp
					!                         ENDIF
					!                         IF(I .GT. PPI_YR)THEN  !e.g ppi_yr 2008 and cap_yr 2007
					!
					!                                 IF(TTONMILE(I-1) .EQ. 0.0)TTONMILE(I-1) = TTONMILE(I-2)
					!                                 CAPEXP(I) = CAPEXP(I-1)  + CAP_P_TM * (TTONMILE(I-1) - TTONMILE(I-2)) !1987 dollars capital expenditures
					!                                 CAPEXP2(I) = CAPEXP(I)*MC_JPGDP(I)  !convert to nominal because PPI is nominal
					!                                 BASKET2(I) = BASKET * TTONMILE(I-1)   !how many 'baskets' of rail equipment needed
					!!                                IF(CAPEXP2(I-1) .EQ. 0)CAPEXP2(I-1) = 1.0        !safety net
					!!                                IF(BASKET2(I-1) .EQ. 0)BASKET2(I-1) = 1.0        !safety net
					!!                                IF(BASKET2(I) .EQ. 0)BASKET2(I) = 1.0            !safety net
					  !            PPIRAILEQ(I) = PPIRAILEQ(I-1) * dble(CAPEXP2(I)/BASKET2(I)) / (CAPEXP2(I-1)/BASKET2(I-1))
					!                               ENDIF
				}
			}
			Parameter capexp2 {
				IndexDomain: (yr);
				Definition: {
					Sum(mnumy3|mnumy3=yr-1986,
					IF(PPI_YR <> 2050 and yr = PPI_YR)THEN
					7680.  !nominal cap exp
					elseif yr > ppi_yr then
					CAPEXP(yr)*macout_MC_JPGDP(mnumy3)  !convert to nominal because PPI is nominal
					endif)
				}
			}
			Parameter capexp2lag1 {
				IndexDomain: (yr);
				Definition: {
					Sum(mnumy3|mnumy3=yr-1986,
					IF(yr = PPI_YR + 1)THEN
					7680.  !nominal cap exp
					elseif yr > ppi_yr then
					CAPEXP(yr-1)*macout_MC_JPGDP(mnumy3)  !convert to nominal because PPI is nominal
					endif)
				}
			}
			Parameter Tr_prod_e {
				IndexDomain: (yr);
				Text: "productivity assumptions for the East";
			}
			Parameter Tr_prod_w {
				IndexDomain: (yr);
				Text: "productivity assumptions for the West";
			}
			Parameter Dist_w {
				IndexDomain: (yr);
				Text: "distance assumptions for the West";
			}
			Parameter Contrdur_e {
				IndexDomain: (yr);
			}
			Parameter Contrdur_w {
				IndexDomain: (yr);
			}
			Parameter PPIrail_actual {
				IndexDomain: (yr);
				Comment: "plunges to 0.19 in 2042";
			}
			Parameter PPIraileq {
				IndexDomain: (yr);
				Definition: {
					!if (yr <= PPI_YR ) then                    !2008 for aeo2010
					!PPIrail_actual(yr)
					!elseif (yr > PPI_YR) then
					!LagPPIraileq(yr) * (CAPEXP2(yr)/$BASKET2(yr)) / $(CAPEXP2lag1(yr)/$BASKET2lag1(yr))
					!PPIraileqLag1(yr) * ((CAPEXP2(yr)/$BASKET2(yr)) / $(CAPEXP2lag1(yr)/$BASKET2lag1(yr)))
					!endif
				}
				Comment: "Moved to SetUpRateEscalators Procedure 6-12-20 DAF";
			}
			Parameter PPIraileqLag1 {
				IndexDomain: (yr);
				Definition: PPIraileq(yr-1);
			}
			Parameter PPIraileq2 {
				IndexDomain: (yr);
				Definition: {
					!if yr > ppi_yr then
					!(PPIraileq(yr) + PPIraileq(yr-1) + PPIraileq(yr-2))/3
					!elseif yr < ppi_yr +1 then
					!PPIrail_actual(yr)
					!else
					!ppi_base
					!endif
				}
				Comment: {
					"Changed logic so it will never use hard wired ppi_base parameter that caused issues in the past.  Now picks up PPIrail_actual value in ppi_yr.  DAF 10/03/19
					Moved to SetUpRateEscalators Procedure 6-12-20 DAF"
				}
			}
			Parameter LagPPIraileq {
				IndexDomain: (yr);
				Definition: {
					!if (yr = PPI_YR) then                    !2008 for aeo2010
					!PPI_BASE
					!elseif(yr > PPI_YR) then
					PPIraileq2(yr-1)
					!endif
				}
			}
			Parameter Numeast {
				Text: "number of eastern supply regions";
				InitialData: 6;
			}
			Parameter Numeastsc {
				Text: "Number of eastern supply curves";
				InitialData: 26;
			}
			Parameter Distance {
				IndexDomain: (SReg,DReg);
			}
			Parameter rdel_pk {
				IndexDomain: (yr);
				Definition: {
					!Sum(mnumy3|mnumy3=yr-1986,!yr begins in 1987 and so does mnumy3 but mnumy3 calls it 1
					!if(yr > 1990 and lagppiraileq(yr)>0) then
					!((PPIRAILEQ2(yr)/MACOUT_MC_JPGDP(MNUMY3))/(lagppiraileq(yr)/MACOUT_MC_JPGDP(MNUMY3-1)))-1.0
					!else
					!((PPIRAILEQ2(yr)/MACOUT_MC_JPGDP(MNUMY3))/(1.349/MACOUT_MC_JPGDP(13)))-1.0   !hard code 2002 ppi rail equ and deflator
					!endif)
				}
				Comment: "Moved to SetUpRateEscalators Procedure 6-12-20 DAF";
			}
			Parameter costcap {
				IndexDomain: (yr);
				Definition: {
					Sum(mnumy3|mnumy3=yr-1986, !yr begins in 1987 and so does mnumy3 but mnumy3 calls it 1
					((realrate(yr)/100.0) + 0.1 - rdel_pk(yr))*
					(ppiraileq2(yr)/MACOUT_MC_JPGDP(MNUMY3))*100.0)
				}
			}
			Parameter inflrate {
				IndexDomain: (yr);
				Definition: {
					!Sum(mnumy3|mnumy3=yr-1986 and yr > 1990,
					!(MACOUT_MC_JPGDP(MNUMY3)/MACOUT_MC_JPGDP(MNUMY3-1) - 1.0)*100.0)
				}
			}
			Parameter realrate {
				IndexDomain: (yr);
				Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),(MACOUT_MC_RMCORPPUAA(MNUMYR)+EMISSION_EXTRARISK(MNUMYR)) - inflrate(yr));
			}
			Parameter EastEscalator {
				IndexDomain: yr;
				Definition: {
					!Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),
					!if(yr > 2000 and EastEscalatorLag1(yr)>0) then
					!EastEscalatorLag1(yr)^cof8 + cof5*(1-cof8) +
					!tr_prod_e(yr)*cof6 - tr_prod_e(yr-1)*cof6*cof8 +
					!dum(yr)*MPBLK_PDSIN(11,MNUMYR)*cof7 - dum(yr)*MPBLK_PDSIN(11,MNUMYR-1)*cof7*cof8 +
					!costcap(yr)*cof9 - costcap(yr-1)*cof9*cof8    !costcap is calculated with a riskpremium when there is one
					!else
					!1.0954
					!endif)
				}
				Comment: "Moved to SetUpRateEscalators Procedure 6-12-20 DAF";
			}
			Parameter EastEscalatorLag1 {
				IndexDomain: yr;
				Definition: {
					
					EastEscalator(yr-1)
				}
			}
			Parameter invest {
				IndexDomain: (yr);
				Definition: {
					if invest2(yr) < .58 then
					0.58
					else
					invest2(yr)
					endif
				}
			}
			Parameter invest2 {
				IndexDomain: (yr);
				Definition: {
					!IF(INV_YR = 2050 and yr > 2000 and yr = 2001)then
					!dist_w(MINEBYR)*(1.0+(westsup(yr)*1.005/westsup(yr-1)-1.0))/1000.0   !dist_w is really investment;allow to increase in proportion to
					
					!elseif (INV_YR = 2050 and yr > 2000 and yr > 2001)then
					!invest(yr-1)*(1.0+(westsup(yr)*1.005/westsup(yr-1)-1.0))
					
					!elseif (INV_YR = 2050 and yr < 2001)then
					!dist_w(MINEBYR)/1000.0
					
					!elseif inv_yr <> 2050 and yr < INV_YR and yr > 2001 and yr = 2001 then
					!dist_w(MINEBYR)*(1.0+(westsup(yr)*1.005/westsup(yr-1)-1.0))/1000.0   !dist_w is really investment;allow to increase in proportion to
					
					!elseif inv_yr <> 2050 and yr < INV_YR and yr > 2001 then
					!invest(yr-1)*(1.0+(westsup(yr)*1.005/westsup(yr-1)-1.0))
					
					!elseif(inv_yr <> 2050 and yr < INV_YR and yr < 2001)then
					!dist_w(MINEBYR)/1000.0
					
					!if (INV_YR <> 2050 and yr = CAP_YR)THEN
					!INVBASE
					
					!elseif (INV_YR <> 2050 and yr = CAP_YR + 1)THEN
					!INVDOL + investadder(yr)
					
					!elseif (INV_YR <> 2050 and yr > CAP_YR + 1)THEN
					!INVTEMP(yr-1) + investadder(yr)
					
					!else
					INVTEMP(yr)/59489.0
				}
			}
			Parameter investlag1 {
				IndexDomain: (yr);
				Definition: {
					if(yr > 1990)then
					invest(yr-1)
					else
					1
					endif
				}
			}
			Parameter invtemp {
				IndexDomain: (yr);
				Definition: {
					!IF(yr <= cap_yr + 1 )THEN
					!INVDOL  + investadder(yr) !1987 dollars dollars
					!ELSE
					!Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr),
					!COALOUT_Invtemp(MNUMYR-1) +
					!invtempLag1(yr)+
					!INV_P_TM * (TTONMILElag1(yr)- TTONMILElag2(yr)))
					!ENDIF
				}
				Comment: "Moved to SetUpRateEscalators Procedure 6-12-20 DAF";
			}
			Parameter invtempLag1 {
				IndexDomain: (yr);
				Definition: invtemp(yr-1);
			}
			Parameter investadder {
				IndexDomain: (yr);
				Definition: {
					if(yr > 1990)then
					INV_P_TM * (TTONMILElag1(yr)- TTONMILElag2(yr))
					endif
				}
			}
			Parameter WestEscalator {
				IndexDomain: (yr);
				Definition: {
					sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),
					if yr > 2000 then
					EXP
					(westcheck(yr))
					else
					exp(.4538)
					endif)
				}
			}
			Parameter Westcheck {
				IndexDomain: (yr);
				Definition: {
					!Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),((.286)
					!+invest(yr)*cof2
					!-investlag1(yr)*cof2*cof10
					!+tr_prod_w(yr)*cof3
					!-tr_prod_w(yr-1)*cof3*cof10
					!+westsup(yr)/$((QBLK_QCLEL(11,MNUMYR)*100.)/$COALOUT_CQDBFT(11,6,MNUMYR))*cof4
					!-westsup(yr-1)/$((QBLK_QCLEL(11,MNUMYR-1)*100.)/$COALOUT_CQDBFT(11,6,MNUMYR-1))*cof4*cof10))
				}
				Comment: "Moved to SetUpRateEscalators Procedure 6-12-20 DAF";
			}
			Parameter Westcheck_1 {
				IndexDomain: (yr);
				Definition: {
					Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),
					(QBLK_QCLEL(11,MNUMYR)))
				}
			}
			Parameter Westcheck_2 {
				IndexDomain: (yr);
				Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),COALOUT_CQDBFT(11,6,MNUMYR));
			}
			Parameter Westcheck_3 {
				IndexDomain: (yr);
				Definition: {
					Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),((.286)
					+invest(yr)*cof2
					-investlag1(yr)*cof2*cof10
					+tr_prod_w(yr)*cof3
					-tr_prod_w(yr-1)*cof3*cof10
					+westsup(yr)/$((QBLK_QCLEL(11,MNUMYR)*100.)/$COALOUT_CQDBFT(11,6,MNUMYR))*cof4
					-westsup(yr-1)/$((QBLK_QCLEL(11,MNUMYR-1)*100.)/$COALOUT_CQDBFT(11,6,MNUMYR-1))*cof4*cof10))
				}
			}
			Parameter FinalEast {
				IndexDomain: (yr);
				Definition: EastEscalator(yr)/EastEscalator(CPSBaseYr);
			}
			Parameter FinalWest {
				IndexDomain: (yr);
				Definition: WestEscalator(yr)/WestEscalator(CPSBaseYr);
			}
			Parameter xcl_1esc {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr)|Btu2(SReg,Sulf,Mtyp,Rank);
				Text: "1st tier adjustment (including surcharge) to send to electricity model";
				Definition: {
					!If Trate2RevisedBase(SReg,sulf,Mtyp,Rank,DReg,'E')>0  and yr < 2041 then
					!Trate2wSurchBtu(SReg,Sulf,Mtyp,Rank,DReg,'E',yr)/
					!(Trate2(SReg,Sulf,Mtyp,Rank,DReg,'E')/
					!Btu2(SReg,Sulf,Mtyp,Rank))
					!else
					!1
					!endif
					If Trate2RevisedBase(SReg,sulf,Mtyp,Rank,DReg,'E')>0  and yr < 2041 then
					Trate2wSurchTons(SReg,Sulf,Mtyp,Rank,DReg,'E',yr)/
					Trate2RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,'E')
					else
					1
					endif
				}
			}
			Parameter xcl_2esc {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Text: "2nd tier adjustment (including surcharge) to send to electricity model";
				Definition: {
					!If Trate3RevisedBase(SReg,sulf,Mtyp,Rank,DReg,'E')>0 and yr < 2041 and
					!Btu2(SReg,Sulf,Mtyp,Rank)>0 then
					!Trate3wSurchBtu(SReg,Sulf,Mtyp,Rank,DReg,'E',yr)/
					!(Trate3RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,'E')/
					!Btu2(SReg,Sulf,Mtyp,Rank))
					!else
					!1
					!endif
					If Trate3RevisedBase(SReg,sulf,Mtyp,Rank,DReg,'E')>0 and yr < 2041 and
					Btu2(SReg,Sulf,Mtyp,Rank)>0 then
					Trate3wSurchTons(SReg,Sulf,Mtyp,Rank,DReg,'E',yr)/
					Trate3RevisedBase(SReg,Sulf,Mtyp,Rank,DReg,'E')
					else
					1
					endif
				}
			}
			Parameter ImportEscalator {
				IndexDomain: (USi,yr);
				Definition: {
					If USi = 'UI' then
					FinalEast(yr)
					elseif USi = 'UE' or USi = 'UG' then
					FinalWest(yr)
					else
					1.0
					endif
				}
			}
			Parameter xcl_tesci_B {
				IndexDomain: (nUS,DReg,USi,yr);
				Definition: {
					If PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,USi)>0
					and PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,USi)<999 then
					((PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,USi)
					*ImportEscalator(USi,yr))
					+ SurcharTImp(USi,DReg,yr))
					
					endif
				}
			}
			Parameter xcl_tesci_C {
				IndexDomain: (nUS,DReg,yr);
				Definition: {
					If xcl_tesci_B(nUS,DReg,'UE',yr) > xcl_tesci_B(nUS,DReg,'UG',yr) THEN
					xcl_tesci_B(nUS,DReg,'UG',yr) else
					xcl_tesci_B(nUS,DReg,'UE',yr)
					endif
					!/
					!PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,USi)
				}
			}
			Parameter xcl_tesci_C1 {
				IndexDomain: (nUS,DReg,yr);
				Definition: {
					If xcl_tesci_B(nUS,DReg,'UE',yr) > xcl_tesci_B(nUS,DReg,'UG',yr) then
					PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,'UG')
					else
					PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,'UE')
					endif
				}
			}
			Parameter xcl_tesci_C2 {
				IndexDomain: (nUS,DReg,yr);
				Text: "UE and UG version of  xcl_tesci";
				Definition: {
					!UE and UG escalator's
					if xcl_tesci_C1(nUS,DReg,yr)>0 then
					xcl_tesci_C(nUS,DReg,yr)/xcl_tesci_C1(nUS,DReg,yr)
					endif
				}
			}
			Parameter xcl_tesci_D {
				IndexDomain: (nUS,DReg,yr);
				Text: "UN and UI version ofxcl_tesci";
				Definition: {
					Sum(USi| USi = 'UI' or USi = 'UN',
					If USi = 'UI' then
					xcl_tesci_B(nUS,DReg,'UI',yr)
					/PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,'UI')
					elseif USi = 'UN' then
					xcl_tesci_B(nUS,DReg,'UN',yr)
					/PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,'UN')
					endif)
				}
			}
			Parameter xcl_tesci_E {
				IndexDomain: (nUS,DReg,yr);
				Text: "UN and UI version ofxcl_tesci";
				Definition: {
					Sum(USi| USi = 'UE' or USi = 'UG' ,
					If Pinlandtr('E',nUS,DReg,'UE')<900 and Pinlandtr('E',nUS,DReg,'UG')>900 then
					xcl_tesci_B(nUS,DReg,'UE',yr)
					/PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,'UE')
					elseif Pinlandtr('E',nUS,DReg,'UG')<900 and Pinlandtr('E',nUS,DReg,'UE')>900 then
					xcl_tesci_B(nUS,DReg,'UG',yr)
					/PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,'UG')
					endif)
				}
			}
		}
		DeclarationSection RCAF_Escalator_Rework {
			ElementParameter RCAFBaseYr {
				Text: "Base year for CPS Data Inputs and Model Calibration";
				Range: AllYears;
				Definition: 2021;
			}
			Parameter wt_Labor {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - weight for Labor";
			}
			Parameter RR_Productivity {
				IndexDomain: yr;
				Text: "Per Hellerworx Assumption that some share 1.4% Railroad Productivity Imporovements could be passed on to shippers";
				Definition: -0.014;
			}
			Parameter wt_Fuel {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - weight for Fuel";
			}
			Parameter RR_Prdctvty_prct {
				IndexDomain: yr;
				Text: "Share of railraod poductivity gains passed to shippers (Max 50%, Min 0%)";
			}
			Parameter wt_MaterialSup {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - weight for Materials and Supplies";
			}
			Parameter wt_Equipment {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - weight for Equipment";
			}
			Parameter wt_Depreciation {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - weight for Depreciation";
			}
			Parameter wt_Interest {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - weight for Interest";
			}
			Parameter wt_Other {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - weight for Other costs";
			}
			Parameter Indx_Labor {
				IndexDomain: yr;
				Text: "Index for labor based on MACOUT_MC_JECIWSP - Employment cost index-private wages & salaries";
				Comment: "Index is set up in SetUpRateEscalators procedure with 1.00 in RCAFBaseYr";
			}
			Parameter gr_Labor {
				IndexDomain: yr;
				Text: "Growth rate for labor based on MACOUT_MC_JECIWSP - Employment cost index-private wages & salaries";
			}
			Parameter Indx_Fuel {
				IndexDomain: yr;
				Text: "Index for railroad fuel based on national transporation sector diesel price (real dollars)";
				Definition: {
					!See calc in SetupRateEscalators procedure
				}
				Comment: "Index is set up in SetUpRateEscalators procedure with 1.00 in RCAFBaseYr";
			}
			Parameter gr_Fuel {
				IndexDomain: yr;
				Text: "Growth rate/ annual change in railroad fuel based on national transporation sector diesel price (real dollars)";
				Definition: {
					!See calc in SetupRateEscalators procedure
					!gr_fuel(yr) := PDSTR_USAvg_A(yr) /$PDSTR_USAvg_A(yr-1)	;
				}
			}
			Parameter Indx_MaterialSup {
				IndexDomain: yr;
				Text: "Index for railroad materials and supplies based on MACOUT_MC_WPI10 - Producer Price Index-metals & metal products";
				Comment: "Index is set up in SetUpRateEscalators procedure with 1.00 in RCAFBaseYr";
			}
			Parameter gr_MaterialSup {
				IndexDomain: yr;
				Text: "Growth rate for railroad materials and supplies based on MACOUT_MC_WPI10 - Producer Price Index-metals & metal products";
			}
			Parameter Indx_Equipment {
				IndexDomain: yr;
				Text: "Index for equipment rentals based on MACOUT_MC_WPIIND05 - Producer price index - Industrial commodities excluding energy";
				Comment: "Index is set up in SetUpRateEscalators procedure with 1.00 in RCAFBaseYr";
			}
			Parameter gr_Equipment {
				IndexDomain: yr;
				Text: "Growth rate for equipment rentals based on MACOUT_MC_WPIIND05 - Producer price index - Industrial commodities excluding energy";
			}
			Parameter Indx_Depreciation {
				IndexDomain: yr;
				Text: "Index for depreciation based on railroad equipment from MC_WPI14 - Producer price index-Transportation Equipment";
				Comment: "Index is set up in SetUpRateEscalators procedure with 1.00 in RCAFBaseYr";
			}
			Parameter gr_Depreciation {
				IndexDomain: yr;
				Text: "Growth rate for depreciation based on railroad equipment from MC_WPI14 - Producer price index-Transportation Equipment";
			}
			Parameter Indx_Interest {
				IndexDomain: yr;
				Text: "Index for borrowed debt by the railroads - Based on Real AA utility bond rates from MC_RLRMCORPPUAA";
			}
			Parameter gr_Interest {
				IndexDomain: yr;
			}
			Parameter Indx_Other {
				IndexDomain: yr;
				Text: "Index for Other costs based on MACOUT_MC_WPIIND05 - Producer price index - Industrial commodities excluding energy";
				Comment: "Index is set up in SetUpRateEscalators procedure with 1.00 in RCAFBaseYr";
			}
			Parameter gr_Other {
				IndexDomain: yr;
				Text: "Growth rate for Other costs based on MACOUT_MC_WPIIND05 - Producer price index - Industrial commodities excluding energy";
			}
			Parameter sh_Labor {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - projected share for Labor";
			}
			Parameter sh_Fuel {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - projected share for Fuel";
			}
			Parameter sh_MaterialSup {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - projected share for Materials and Supplies";
			}
			Parameter sh_Equipment {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - projected share for Equipment";
			}
			Parameter sh_Depreciation {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - projected share for Depreciation";
			}
			Parameter sh_Interest {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - projected share for Interest";
			}
			Parameter sh_Other {
				IndexDomain: yr;
				Text: "Rail Cost Adjustment Factor from Surface Transportation Board - projected share for Other costs";
			}
			Parameter TotTransIndx_A {
				IndexDomain: yr;
				Text: "Total Transportation Index w/o Railroad Productivity imporovements";
			}
			Parameter TotTransIndx_B {
				IndexDomain: yr;
				Text: "Total Transportation Index including Railroad Productivity imporovements";
			}
			Parameter CumRRTransIndx {
				IndexDomain: yr;
				Text: "Cummulative Railroad Transportation Index including Railroad Productivity imporovements";
			}
			Parameter USProdPriorCycle {
				IndexDomain: yr;
			}
			Parameter gr_USProd {
				IndexDomain: yr;
			}
			Parameter gr_USProd3yrAvg {
				IndexDomain: yr;
			}
			Parameter FinalRCAFindex {
				IndexDomain: yr;
			}
		}
		DeclarationSection Imports_and_Exports {
			Set CokingExportsSubSector {
				SubsetOf: ExportsSubSector;
				Index: CokeExpSec;
				Definition: {
					{ExpSec|ExpSec = 'X1' or ExpSec = 'X2' or ExpSec = 'X3'}
				}
			}
			Set ThermalExportsSubSector {
				SubsetOf: ExportsSubSector;
				Index: ThermExpSec;
				Definition: {
					{ExpSec|ExpSec = 'X4' or ExpSec = 'X5' or ExpSec = 'X6'}
				}
			}
			Parameter ImportsElectricityCR {
				IndexDomain: (MNUMCR,yr);
				Definition: {
					If mnumcr < 11 then
					Sum((nsteps,nUS,USi,DReg,pt2)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					ImportsElectricity(nsteps,nUS,uSI,DREg,pt2,yr))
					else
					Sum((nsteps,nUS,USi,DReg,pt2),
					ImportsElectricity(nsteps,nUS,uSI,DREg,pt2,yr))
					endif
				}
			}
			Parameter ImportsElectricityTonsCR {
				IndexDomain: (mnumcr,yr);
				Definition: {
					If mnumcr < 11 then
					Sum((nsteps,nUS,USi,DReg,pt2)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					ImportsElectricityTonsDetail(nsteps,nUS,uSI,DREg,pt2,yr))
					else
					Sum((nsteps,nUS,USi,DReg,pt2),
					ImportsElectricityTonsDetail(nsteps,nUS,uSI,DREg,pt2,yr))
					endif
				}
			}
			Parameter USImpShare {
				IndexDomain: DReg;
				Text: "Regional Share for US Electricity Sector Coal Imports";
				InitialData: 0;
			}
			Parameter ImportsIndustrialCR {
				IndexDomain: (MNUMCR,yr);
				Definition: {
					If mnumcr < 11 then
					Sum((IndSec,DReg,nUS,USi)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					ImportsIndustrial(IndSec,DReg,nUS,USi,yr))
					else
					Sum((IndSec,DReg,nUS,USi),
					ImportsIndustrial(IndSec,DReg,nUS,USi,yr))
					endif
				}
			}
			Parameter ImportsIndustrialVolFrom_nUS {
				IndexDomain: (DReg,nUS,yr);
				Definition: {
					
					Sum((IndSec,USi), ImportsIndustrial(IndSec,DReg,nUS,USi,yr))
				}
			}
			Parameter ImportsIndustrial_nUS_FOBDollars {
				IndexDomain: (DReg,nUS,yr);
				Definition: {
					
					Sum((IndSec,USi), ImportsIndustrial(IndSec,DReg,nUS,USi,yr)) * InternationalSupplyPrice(nUS,'2',yr)
				}
			}
			Parameter ImportsIndustrialTonsCR {
				IndexDomain: (mnumcr,yr);
				Definition: {
					If mnumcr < 11 then
					Sum((IndSec,DReg,NUS,USi)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					ImportsIndustrialTonsDetail(IndSec,DReg,nUS,USi,yr))
					else
					Sum((IndSec,DReg,nUS,USi),
					ImportsIndustrialTonsDetail(IndSec,DReg,nUS,USi,yr))
					endif
				}
			}
			Parameter ImportsCokingCR {
				IndexDomain: (MNUMCR,yr);
				Definition: {
					If mnumcr < 11 then
					Sum((CokSec,DReg,nUS,USi)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					ImportsCoking(CokSec,DReg,nUS,USi,yr))
					else
					Sum((CokSec,DReg,nUS,USi),
					ImportsCoking(CokSec,DReg,nUS,USi,yr))
					endif
				}
			}
			Parameter ImportsCokingTonsCR {
				IndexDomain: (mnumcr,yr);
				Definition: {
					If mnumcr < 11 then
					Sum((CokSec,DReg,NUS,USi)|Map_DReg_MNUMCR(DReg,mnumcr)=1,
					ImportsCokingTonsDetail(CokSec,DReg,nUS,USi,yr))
					else
					Sum((CokSec,DReg,nUS,USi),
					ImportsCokingTonsDetail(CokSec,DReg,nUS,USi,yr))
					endif
				}
			}
			Variable ImportsElectricity {
				IndexDomain: (NSTEPS,nUS,USi,DReg,pt2,cyr)|nsteps<3 and USDRegImportMapping(USi,DReg)=-1;
				Range: [0, MercuryRemovalUpperBound(NSTEPS, '1B', DReg, pt2, cyr));
			}
			Variable ImportsIndustrial {
				IndexDomain: {
					(IndSec,DReg,nUS,USi,cyr)|USDRegImportMapping(USi,DReg)=-1;
				}
				Text: "US Industrial Imports of Steam Coal by Region (TBtus)";
				Range: nonnegative;
			}
			Variable ImportsCoking {
				IndexDomain: {
					(CokSec,DReg,nUS,USi,cyr)|USDRegImportMapping(USi,DReg)=-1;
				}
				Text: "US Imports of Met Coal by Region (TBtus)";
				Range: nonnegative;
			}
			Variable ImportsElectricitySubtotal {
				IndexDomain: (USi,cyr);
				Range: nonnegative;
				Definition: {
					Sum((nsteps,pt2,nUS,DReg)|USDRegImportMapping(USi,DReg)=-1,
					ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr))
				}
				Comment: "Units are Tillion Btu";
			}
			Parameter ImportsElectricitySubtotalReport {
				IndexDomain: (USi,yr);
				Range: free;
				Comment: "Units are Tillion Btu";
			}
			Variable ImportsIndustrialSubtotal {
				IndexDomain: (USi,cyr);
				Range: nonnegative;
				Definition: {
					Sum((IndSec,DReg,nUS)|USDRegImportMapping(USi,Dreg)=-1,
					ImportsIndustrial(IndSec,DReg,nUS,USi,cyr))
				}
			}
			Parameter ImportsIndustrialSubtotalReport {
				IndexDomain: (USi,yr);
				Range: free;
			}
			Variable ImportsCokingSubtotal {
				IndexDomain: (USi,cyr);
				Range: nonnegative;
				Definition: {
					Sum((CokSec,DReg,nUS),
					ImportsCoking(CokSec,DReg,nUS,USi,cyr))
				}
				Comment: "Units in Trillion Btu";
			}
			Parameter ImportsCokingSubtotalReport {
				IndexDomain: (USi,yr);
				Range: free;
				Comment: "Units in Trillion Btu";
			}
			Variable ImportsElectricityTons {
				IndexDomain: (nUS,cyr);
				Range: nonnegative;
				Definition: ImportsElectricitySubtotalbyExporter(nUS,cyr)/$InternationalHeatContent(nUS,'2');
			}
			Variable ImportsIndustrialTons {
				IndexDomain: (nUS,cyr);
				Range: nonnegative;
				Definition: ImportsIndustrialSubtotalbyExporter(nUS,cyr)/$InternationalHeatContent(nUS,'2');
			}
			Variable ImportsCokingTons {
				IndexDomain: (nUS,cyr);
				Range: nonnegative;
				Definition: ImportsCokingSubtotalbyExporter(nUS,cyr)/$InternationalHeatContent(nUS,'1');
			}
			Variable ImportsElectricitySubtotalbyExporter {
				IndexDomain: (nUS,cyr);
				Range: nonnegative;
				Definition: {
					Sum((nsteps,usi,DReg,pt2)|USDRegImportMapping(USi,DReg)=-1,
					ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr))
				}
			}
			Variable ImportsIndustrialSubtotalbyExporter {
				IndexDomain: (nUS,cyr);
				Range: nonnegative;
				Definition: {
					Sum((IndSec,DReg,USi)|USDRegImportMapping(USi,DReg)=-1,
					ImportsIndustrial(IndSec,DReg,nUS,USi,cyr))
				}
			}
			Variable ImportsCokingSubtotalbyExporter {
				IndexDomain: (nUS,cyr);
				Range: nonnegative;
				Definition: {
					Sum((CokSec,DReg,USi),
					ImportsCoking(CokSec,DReg,nUS,USi,cyr))
				}
			}
			Parameter ImportsElectricityTrillsDetail2 {
				IndexDomain: (nUS,USi,DReg,pt2,yr)|USDRegIMportmapping(usi,dReg);
				Range: nonnegative;
				Definition: {
					!Sum(nsteps,ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,yr))
				}
			}
			Parameter ImportsElectricityTonsDetail {
				IndexDomain: (nsteps,nus,usi,dreg,pt2,yr)|USDRegIMportmapping(usi,dReg);
				Range: nonnegative;
				Definition: {
					if ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,yr) > 0 then
					ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,yr)/$InternationalHeatContent(nUS,'2')
					endif
				}
			}
			Parameter ImportsElectricityTonsDetail2 {
				IndexDomain: (nus,usi,dreg,pt2,yr)|USDRegIMportmapping(usi,dReg);
				Range: nonnegative;
				Definition: {
					ImportsElectricityTrillsDetail2(nUS,USi,DReg,pt2,yr)/$
					InternationalHeatContent(nUS,'2')
				}
			}
			Parameter ImportsIndustrialTonsDetail {
				IndexDomain: (IndSec,DReg,NUS,USi,cyr)|USDRegIMportmapping(usi,dReg);
				Range: nonnegative;
				Definition: {
					if ImportsIndustrial(IndSec,DReg,nUS,USi,cyr) > 0 then
					ImportsIndustrial(IndSec,DReg,nUS,USi,cyr)/$InternationalHeatContent(nUS,'2')
					endif
				}
			}
			Parameter ImportsCokingTonsDetail {
				IndexDomain: (CokSec,DReg,NUS,USi,yr)|USDRegIMportmapping(usi,dReg);
				Range: nonnegative;
				Definition: {
					if ImportsCoking(CokSec,DReg,nUS,USi,yr) > 0 then
					ImportsCoking(CokSec,DReg,nUS,USi,yr)/$InternationalHeatContent(nUS,'1')
					endif
				}
			}
			Parameter ExportUpperBound {
				IndexDomain: (DReg,tc,ExpSec,USe,yr);
			}
			Parameter ThermalUpperBound {
				IndexDomain: (DReg,ThermExpSec,USe,yr);
				Definition: {
					!if yr >= cpsbaseyr and yr in STEOYears then
					!	ExportUpperBound(DReg,'2',ThermExpSec,USe,yr) * ExportMultSteamKeep(yr)
					!else
						ExportUpperBound(DReg,'2',ThermExpSec,Use,yr)
					!endif
				}
			}
			Parameter CokingUpperBound {
				IndexDomain: (DReg,CokeExpSec,USe,yr);
				Definition: {
					!if yr >= cpsbaseyr and yr in STEOYears then
					!	ExportUpperBound(DReg,'1',CokeExpSec,USe,yr) * ExportMultCokeKeep(yr)
					!else
						ExportUpperBound(DReg,'1',CokeExpSec,USe,yr)
					!endif
				}
			}
			Parameter ExportLowerBound {
				IndexDomain: (DReg,tc,ExpSec,USe,yr);
			}
			Parameter ThermalLowerBound {
				IndexDomain: (DReg,ThermExpSec,USe,yr);
				Definition: {
					!if yr >= cpsbaseyr and yr in STEOYears then
					!	ExportLowerBound(DReg,'2',ThermExpSec,USe,yr) * ExportMultSteamKeep(yr)
					!else
						ExportLowerBound(DReg,'2',ThermExpSec,USe,yr)
					!endif
				}
			}
			Parameter CokingLowerBound {
				IndexDomain: (DReg,CokeExpSec,USe,yr);
				Definition: {
					!if yr >= cpsbaseyr and yr in STEOYears then
					!	ExportLowerBound(DReg,'1',CokeExpSec,USe,yr) * ExportMultCokeKeep(yr)
					!else
						ExportLowerBound(DReg,'1',CokeExpSec,USe,yr)
					!endif
				}
			}
			Parameter ExpThermUBndInTbtusByUSe {
				IndexDomain: (USe,yr);
				Definition: sum ((Dreg,ThermExpSec) ,ThermalUpperBound(DReg,ThermExpSec,USe,yr));
			}
			Parameter ExpThermLBndInTbtusByUSe {
				IndexDomain: (USe,yr);
				Definition: sum ((Dreg,ThermExpSec) ,ThermalLowerBound(DReg,ThermExpSec,USe,yr));
			}
			Parameter ExpCokingUBndInTbtusByUSe {
				IndexDomain: (USe,yr);
				Definition: sum ((Dreg,CokeExpSec) ,CokingUpperBound(DReg,CokeExpSec,USe,yr));
			}
			Parameter ExpCokingLBndInTbtusByUSe {
				IndexDomain: (USe,yr);
				Definition: sum ((Dreg,CokeExpSec) ,CokingLowerBound(DReg,CokeExpSec,USe,yr));
			}
			Parameter ExpThermUBndInTons {
				IndexDomain: yr;
				Definition: sum((USe) , ExpThermUBndInTbtusByUSe(USe,yr) / $ExportsTransportHeatContentThermalUSe(USe,yr));
			}
			Parameter ExpThermLBndInTons {
				IndexDomain: (yr);
				Definition: sum((USe) , ExpThermLBndInTbtusByUSe(USe,yr) / $ExportsTransportHeatContentThermalUSe(USe,yr));
			}
			Parameter ExpCokingUBndInTons {
				IndexDomain: yr;
				Definition: sum((USe) , ExpCokingUBndInTbtusByUSe(USe,yr) / $ExportsTransportHeatContentCokingUSe(USe,yr));
			}
			Parameter ExpCokingLBndInTons {
				IndexDomain: yr;
				Definition: sum((USe) , ExpCokingLBndInTbtusByUSe(USe,yr) / $ExportsTransportHeatContentCokingUSe(USe,yr));
			}
			Parameter ImportsMinimumElectricity {
				IndexDomain: yr;
			}
			Parameter ImportsMaximumElectricity {
				IndexDomain: yr;
			}
			Parameter ImportsMinimumIndustrial {
				IndexDomain: yr;
			}
			Parameter ImportsMaximumIndustrial {
				IndexDomain: yr;
			}
			Parameter ImportsMinimumCoking {
				IndexDomain: yr;
			}
			Parameter ImportsMaximumCoking {
				IndexDomain: yr;
			}
			Variable UxThermal {
				IndexDomain: (DReg,ThermExpSec,USe,cyr);
				Text: "establishes lower and upper bounds for U.S. thermal exports";
				Range: (ThermalLowerBound(DReg, ThermExpSec, USe, cyr), ThermalUpperBound(DReg, ThermExpSec, USe, cyr));
				Property: ReducedCost;
			}
			Variable UxCoking {
				IndexDomain: (DReg,CokeExpSec,USe,cyr);
				Range: (CokingLowerBound(DReg, CokeExpSec, USe, cyr), CokingUpperBound(DReg, CokeExpSec, USe, cyr));
				Property: ReducedCost;
			}
			Constraint SdxTherm3 {
				IndexDomain: (DReg,ThermExpSec,cyr);
				Text: "commented stuff out temporarily";
				Property: ShadowPrice, Level;
				Definition: {
					-Sum((SReg, Sulf, Mtyp, Rank,USe)|ThermalSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),ExportsTransport2(SReg, Sulf, Mtyp, Rank,ThermExpSec,USe,DReg,cyr))
					+Sum(USe,UxThermal(DReg,ThermExpSec,USe,cyr))=0
				}
			}
			Variable EscapeNeedMoreElectImportsTons {
				IndexDomain: cyr;
				Range: nonnegative;
			}
			Variable EscapeNeedLessElectImportsTons {
				IndexDomain: cyr;
				Range: nonnegative;
			}
			Constraint ElectricityImportMaximum {
				IndexDomain: (cyr)|ImportsMaximumElectricity(cyr);
				Definition: Sum(nUS,ImportsElectricityTons(nUS,cyr)) - EscapeNeedLessElectImportsTons(cyr) <= ImportsMaximumElectricity(cyr);
			}
			Constraint ElectricityImportMinimum {
				IndexDomain: (cyr);
				Definition: Sum(nUS,ImportsElectricityTons(nUS,cyr)) + EscapeNeedMoreElectImportsTons(cyr) >= ImportsMinimumElectricity(cyr);
			}
			Variable EscapeNeedMoreIndustImportsTons {
				IndexDomain: cyr;
				Range: nonnegative;
			}
			Variable EscapeNeedLessIndustImportsTons {
				IndexDomain: cyr;
				Range: nonnegative;
			}
			Constraint IndustrialImportMinimum {
				IndexDomain: cyr;
				Definition: Sum(nUS,ImportsIndustrialTons(nUS,cyr)) + EscapeNeedMoreIndustImportsTons(cyr) >= ImportsMinimumIndustrial(cyr);
			}
			Constraint IndustrialImportMaximum {
				IndexDomain: (cyr)|ImportsMaximumIndustrial(cyr);
				Definition: Sum(nUS,ImportsIndustrialTons(nUS,cyr)) - EscapeNeedLessIndustImportsTons(cyr) <= ImportsMaximumIndustrial(cyr);
			}
			Constraint CokingImportMinimum {
				IndexDomain: cyr;
				Definition: Sum((nUS),ImportsCokingTons(nUS,cyr)) + EscapeNeedMoreCokingImportsTons(cyr) >= ImportsMinimumCoking(cyr);
			}
			Constraint CokingImportMaximum {
				IndexDomain: (cyr)|ImportsMaximumCoking(cyr);
				Definition: Sum((nUS),ImportsCokingTons(nUS,cyr)) - EscapeNeedLessCokingImportsTons(cyr) <= ImportsMaximumCoking(cyr);
			}
			Variable EscapeNeedMoreCokingImportsTons {
				IndexDomain: cyr;
				Range: nonnegative;
			}
			Variable EscapeNeedLessCokingImportsTons {
				IndexDomain: cyr;
				Range: nonnegative;
			}
			Constraint ImportMaxShareElectr {
				IndexDomain: (cyr,DReg)|ImportShareFlag(cyr);
				Definition: {
					Sum((NSTEPS,nUS,USi,pt2),ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr)) <=
					USImpShare(Dreg)*Sum((pt2),Qdutzr(pt2,DReg,cyr))
				}
			}
			Constraint SdxCoking3 {
				IndexDomain: (DReg,CokeExpSec,cyr);
				Text: "commented stuff out temporarily";
				Property: ShadowPrice, Level;
				Definition: {
					-Sum((SReg, Sulf, Mtyp, Rank,USe)|CokingSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),ExportsTransport2(SReg, Sulf, Mtyp, Rank,CokeExpSec,USe,DReg,cyr))
					+Sum((USe),UxCoking(DReg,CokeExpSec,USe,cyr))=0
				}
			}
			Variable InlandImportsCost {
				IndexDomain: (cyr);
				Range: nonnegative;
				Definition: {
					
					Sum((nsteps,nus,usi,DReg,pt2)|nsteps =1,ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr)*
					InlandImportTranspRateBtu('E',nUS,DReg,USi))
					+
					Sum((nsteps,nus,usi,DReg,pt2)|nsteps > 1,ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,cyr)*
					(InlandImportTranspRateBtu('E',nUS,DReg,USi)+ActivatedCarbonCostMultiplier('1')))
					 +
					Sum((IndSec,DReg,nUS,USi),ImportsIndustrial(IndSec,DReg,nUS,USi,cyr)*
					InlandImportTranspRateBtu('I',nUS,DReg,USi)) !+
					! move this to the objective function.
					!Sum((CokSec,DReg,nUS,USi),ImportsCoking(CokSec,DReg,nUS,USi,cyr)*
					!InlandImportTranspRateBtu('C',nUS,DReg,USi))
				}
			}
			Parameter InlandImportTranspRateBtu {
				IndexDomain: (ImpSec,nUS,DReg,USi);
				Definition: {
					if PinlandtrWithoutBaseYrSurcharge(ImpSec,nUS,DReg,USi) <999 then
					If ImpSec = 'E' then
					PinlandtrWithoutBaseYrSurcharge('E',nUS,DReg,USi)/$
					InternationalHeatContent(nUS,'2')
					elseif ImpSec = 'I' then
					PinlandtrWithoutBaseYrSurcharge('I',nUS,DReg,USi)/$
					InternationalHeatContent(nUS,'2')
					elseif ImpSec = 'C' then
					PinlandtrWithoutBaseYrSurcharge('C',nUS,DReg,USi)/$
					InternationalHeatContent(nUS,'1')
					endif
					else PinlandtrWithoutBaseYrSurcharge(ImpSec,nUS,DReg,USi)
					endif
				}
			}
			Parameter PinlandtrWithoutBaseYrSurcharge_B {
				IndexDomain: (ImpSec,nUS,DReg,USi);
				Definition: {
					Sum((yr)|yr = minebyr,
					Pinlandtr(ImpSec,nUS,DReg,USi)-SurchartImp(USi,DReg,yr))
				}
			}
			Parameter PinlandtrWithoutBaseYrSurcharge {
				IndexDomain: (ImpSec,nUS,DReg,USi);
				Definition: {
					If PinlandtrWithoutBaseYrSurcharge_B(ImpSec,nUS,DReg,USi) >0 and
					Pinlandtr(ImpSec,nUS,DReg,USi)<999 then
					PinlandtrWithoutBaseYrSurcharge_B(ImpSec,nUS,DReg,USi)
					else
					Pinlandtr(ImpSec,nUS,DReg,USi)
					endif
					
					
					                               !no change for non-contiguous
					!            IF(YR .LT. MINEBYR)SURCHARGEI(K,J,YR) = 0.0            !don't apply surcharge in years before base year
					!            IF(M .EQ. 1)THEN
					!             XCL_TESCI(K,YR,J)=((INLANDTR(M,INTLSC,J,K)*TEMPE) + SURCHARGEI(K,J,YR))/ &
					!                                        INLANDTR(M,INTLSC,J,K)
					!                ENDIF
					!            IF(M .EQ. 2)THEN
					!               IND_TESCI(K,YR,J)=((INLANDTR(M,INTLSC,J,K)*TEMPE) + SURCHARGEI(K,J,YR))/ &
					!                                       INLANDTR(M,INTLSC,J,K)
					!            ENDIF
				}
			}
			Parameter Pinlandtr {
				IndexDomain: (ImpSec,nUS,DReg,USi);
				Text: "Coal imports surcharge for imports into the US by sector from other countries - Assumed in $/ton";
				Comment: {
					"This is legacy surcharge values used as proxy for additional US inland transport costs - not by year dimemsioned
					Now read from cdsImpSurcharge.txt as of April 2022"
				}
			}
			Parameter SurcharTImp {
				IndexDomain: (USi,DReg,yr);
				Text: "Imports Surcharge in 1987 dollars per ton";
				Definition: {
					Sum((mnumy3)|MAP_mnumy3_yr(MNUMY3,yr),
					SurcharTImp_D(USi,DReg,yr)
					/MACOUT_MC_JPGDP(MNUMY3))
				}
			}
			Parameter SurcharTImp_D {
				IndexDomain: (USi,DReg,yr);
				Text: "Imports Surcharge in nominal dollars per ton";
				Definition: {
					
					If (SurchartImp_C(USi,yr)>0 and DistanceSurchargeImport(USi,DReg)<3000 )then
					SurcharTImp_C(USi,yr)/TonsPCar_Imp(USi)*DistanceSurchargeImport(USi,DReg)
					endif ;
				}
			}
			Parameter SurcharTImp_C {
				IndexDomain: (USi,yr);
				Text: "Charge of $.01 per ton mile for every $0.04 over $2 per gallon";
				Definition: {
					
					If SurcharTImp_B(USi,yr) > 0 then
					((SurcharTImp_B(USi,yr)  - Trigger_Imp(USi))/Trig_Incr_Imp(USi))*ChargePerMile_Car_Imp(USi)
					endif ;
				}
			}
			Parameter SurcharTImp_B {
				IndexDomain: (USi,yr);
				Text: "Price of US Diesel Fuel in nominal dollars per gallon";
				Definition: {
					
					Sum((mnumyr,mnumy3)|(MAP_mnumyr_yr(MNUMYR,yr) and MAP_mnumy3_yr(MNUMY3,yr) and
					(APONROAD_PDSTRHWY('11',MNUMYR)*QONROAD_CFDSTRHWY(MNUMYR)/42.)*
					MACOUT_MC_JPGDP(MNUMY3) > Trigger_Imp(USi)),
					!
					(APONROAD_PDSTRHWY('11',MNUMYR)*QONROAD_CFDSTRHWY(MNUMYR)/42.)*
					MACOUT_MC_JPGDP(MNUMY3)) ;
				}
			}
			Variable ImportsToUS {
				IndexDomain: (USi,tc,cyr);
				Range: nonnegative;
				Definition: {
					If tc = '2' then
					ImportsElectricitySubtotal(USi,cyr) +
					ImportsIndustrialSubtotal(USi,cyr)
					else
					ImportsCokingSubtotal(USi,cyr)
					endif
				}
			}
			Variable ExportsSupplyByExportRegionCoking {
				IndexDomain: (USe,cyr);
				Range: nonnegative;
				Property: ReducedCost, Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,CokeExpSec,DReg)|
					USDRegIntlMapping(Use,DReg) = -1 and Trate1exp(SReg, Sulf, Mtyp, Rank,DReg,CokeExpSec) and
					CokingSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					!and Btu2(Scrv)>0 ,
					ExportsTransport2(SReg, Sulf, Mtyp, Rank,CokeExpSec,USe,DReg,cyr))
				}
			}
			Variable ExportsSupplyByExportRegionThermal {
				IndexDomain: (USe,cyr);
				Range: nonnegative;
				Property: ReducedCost, Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,ThermExpSec,DReg)|
					USDRegIntlMapping(Use,DReg) = -1
					!and Btu2(Scrv)>0
					and Trate1exp(SReg, Sulf, Mtyp, Rank,DReg,ThermExpSec)
					!and Rank <> '4P',
					and ThermalSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					ExportsTransport2(SReg, Sulf, Mtyp, Rank,ThermExpSec,USe,DReg,cyr))
				}
			}
			Parameter Copy_SurcharTImp {
				IndexDomain: (USi,DReg,yr);
				Text: "per ton";
				Definition: {
					Sum((mnumy3)|mnumy3 = yr - 1986,
					SurcharTImp_D(USi,DReg,yr)!*10^6
					/MACOUT_MC_JPGDP(MNUMY3))
					
					!I have to multiply this by 10^6 to compensate for the units problems
				}
			}
			Parameter ICMM_USA_export_trills {
				IndexDomain: (icmm_comm,yr,USe,arcdest);
			}
			Parameter ICMM_USA_export_MMst {
				IndexDomain: (icmm_comm,yr,USe,arcdest);
			}
			Parameter ICMM_USA_export_Mmt {
				IndexDomain: (icmm_comm,yr,USe,arcdest);
			}
			Parameter map_ICMM_commodity {
				IndexDomain: (Rank,icmm_comm);
			}
			Parameter ICMMusTotExportsTCTons {
				IndexDomain: (tc,yr);
				Definition: sum ((icmm_comm, USe, arcdest)| map_ICMM_ThermalCoke(tc,icmm_comm) , ICMM_USA_export_MMst(icmm_comm,yr,USe,arcdest) );
			}
			Parameter map_ICMM_ThermalCoke {
				IndexDomain: (tc,icmm_comm);
			}
			Parameter map_Rank_tc {
				IndexDomain: (Rank,tc);
			}
			Parameter USAexportTarget_ICMM_trills {
				IndexDomain: (yr,USe,tc);
				Text: "ICMM US exports by coast and tc in TBtus";
				Definition: sum ((icmm_comm, arcdest)| map_ICMM_ThermalCoke(tc,icmm_comm) , ICMM_USA_export_trills(icmm_comm,yr,USe,arcdest) );
			}
			Parameter USAexportTarget_ICMM_tons {
				IndexDomain: (yr,USe,tc);
				Text: "ICMM US exports by coast and tc in Million short tons";
				Definition: sum ((icmm_comm, arcdest)| map_ICMM_ThermalCoke(tc,icmm_comm) , ICMM_USA_export_MMst(icmm_comm,yr,USe,arcdest) );
			}
			Parameter USAexportTarget_ICMM_tons_Upper {
				IndexDomain: (yr,USe,tc);
				Text: "ICMM US exports by coast and tc in Million short tons";
				Definition: USAexportTarget_ICMM_tons(yr,USe,tc)*(1+Tolerance(yr)*SideTolerance(yr));
			}
			Parameter USAexportTarget_ICMM_tons_Lower {
				IndexDomain: (yr,USe,tc);
				Text: "ICMM US exports by coast and tc in Million short tons";
				Definition: USAexportTarget_ICMM_tons(yr,USe,tc)*(1-Tolerance(yr)*SideTolerance(yr));
			}
			Parameter USAexportTarget_ICMMwSTEO_tons {
				IndexDomain: (yr,USe,tc);
				Text: "ICMM US exports by coast and tc in Million short tons and scaled to STEO exports";
				Definition: {
					if USe = 'UA'  or yr < 2010 then 0
					
					elseif tc='1' then
						sum ((icmm_comm, arcdest)| map_ICMM_ThermalCoke(tc,icmm_comm) , ICMM_USA_export_MMst(icmm_comm,yr,USe,arcdest) )
						* ExportMultScaleCoke(yr) +.001
					else
						sum ((icmm_comm, arcdest)| map_ICMM_ThermalCoke(tc,icmm_comm) , ICMM_USA_export_MMst(icmm_comm,yr,USe,arcdest) )
						* ExportMultScaleSteam(yr) +.001
					endif
				}
			}
			Parameter USAexportTarget_ICMMwSTEO_tons_Upper {
				IndexDomain: (yr,USe,tc);
				Text: "ICMM US exports by coast and tc in Million short tons and scaled to STEO exports";
				Definition: {
					if USe = 'UA'  or yr < 2010 then 0
					
					elseif tc='1' then
						sum ((icmm_comm, arcdest)| map_ICMM_ThermalCoke(tc,icmm_comm) , ICMM_USA_export_MMst(icmm_comm,yr,USe,arcdest) )
						* ExportMultScaleCoke(yr)*(1+Tolerance(yr)*SideTolerance(yr)) +.001
					else
						sum ((icmm_comm, arcdest)| map_ICMM_ThermalCoke(tc,icmm_comm) , ICMM_USA_export_MMst(icmm_comm,yr,USe,arcdest) )
						* ExportMultScaleSteam(yr)*(1+Tolerance(yr)*SideTolerance(yr)) +.001
					endif
				}
			}
			Parameter USAexportTarget_ICMMwSTEO_tons_Lower {
				IndexDomain: (yr,USe,tc);
				Text: "ICMM US exports by coast and tc in Million short tons and scaled to STEO exports";
				Definition: {
					if USe = 'UA'  or yr < 2010 then 0
					
					elseif tc='1' then
						sum ((icmm_comm, arcdest)| map_ICMM_ThermalCoke(tc,icmm_comm) , ICMM_USA_export_MMst(icmm_comm,yr,USe,arcdest) )
						* ExportMultScaleCoke(yr)*(1-Tolerance(yr)*SideTolerance(yr)) +.001
					else
						sum ((icmm_comm, arcdest)| map_ICMM_ThermalCoke(tc,icmm_comm) , ICMM_USA_export_MMst(icmm_comm,yr,USe,arcdest) )
						* ExportMultScaleSteam(yr)*(1-Tolerance(yr)*SideTolerance(yr)) +.001
					endif
				}
			}
			Constraint MatchICMMexportsFromUStrills {
				IndexDomain: (USe,tc,cyr);
				Property: ShadowPrice, Level;
				Definition: {
					Sum((nonUSi), TotalTransportUS(Use,nonUSi,tc,cyr)) 
					!+ TestICMMEscape(USe,tc,cyr)  
					= USAexportTarget_ICMM_trills(cyr,USe,tc)
				}
			}
			Constraint MatchICMMexportsFromUSTons {
				IndexDomain: (USe,tc,cyr);
				Property: ShadowPrice, Level;
				Definition: {
					!Sum((nonUSi), TotalTransportUS(Use,nonUSi,tc,cyr)) 
					!+ TestICMMEscape(USe,tc,cyr)  
					!= USAexportTarget_ICMM_trills(cyr,USe,tc)
					
					sum((SReg,Sulf,Mtyp,Rank,ExpSec,DReg), ExportsTranport2InTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)|map_Rank_tc(rank,tc)) 
					= USAexportTarget_ICMMwSTEO_tons(cyr,USe,tc)
				}
			}
			Constraint UpperBoundICMMexportsFromUSTons {
				IndexDomain: (USe,tc,cyr);
				Property: ShadowPrice, Level;
				Definition: {
					
					sum((SReg,Sulf,Mtyp,Rank,ExpSec,DReg), ExportsTranport2InTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)|map_Rank_tc(rank,tc)) 
					<= USAexportTarget_ICMMwSTEO_tons_Upper(cyr,USe,tc)
				}
			}
			Constraint LowerBoundICMMexportsFromUSTons {
				IndexDomain: (USe,tc,cyr);
				Property: ShadowPrice, Level;
				Definition: {
					
					sum((SReg,Sulf,Mtyp,Rank,ExpSec,DReg), ExportsTranport2InTons(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,cyr)|map_Rank_tc(rank,tc)) 
					>= USAexportTarget_ICMMwSTEO_tons_Lower(cyr,USe,tc)
				}
			}
			Variable TestICMMEscape {
				IndexDomain: (USe,tc,cyr);
				Range: nonnegative;
			}
		}
		DeclarationSection Miscellaneous {
			Parameter Miners {
				IndexDomain: (SReg);
				Text: "Number of Miners By Supply Regiion - base year";
				Comment: "Updated in with base year miner count in CMM.mdb  table tInp_NumberMiners";
			}
		}
	}
	Section Coal_International_Distribution_Submodule {
		DeclarationSection International {
			Set ExportingRegion {
				Index: e;
			}
			Set USExportingRegion {
				SubsetOf: ExportingRegion;
				Index: USe;
				Definition: {
					{e | UseFlag(e) = -1}
				}
			}
			Set AggExportingRegion {
				Index: Ae;
			}
			Set NonUSExportingRegion {
				SubsetOf: ExportingRegion;
				Index: nUS;
				Definition: {
					{e | UseFlag(e) <> -1}
				}
			}
			Set NonUSImportingRegion {
				SubsetOf: ImportingRegion;
				Index: NonUSi;
			}
			Set USImportingRegion {
				SubsetOf: ImportingRegion;
				Index: USi;
			}
			Set AggImportingRegion {
				Index: Ai;
			}
			DatabaseTable OutputFreightRate {
				DataSource: CoalOutConnectionString;
				TableName: "FreightRate";
				Mapping: {
					"Exporter"  --> e,
					"Importer"  --> i,
					"tc" --> tc,
					"Rate"      --> InternationalUnitTransportBtuNonUS(e,i,tc)
				}
			}
			DatabaseTable OutputTradeBtu {
				DataSource: CoalOutConnectionString;
				TableName: "TradeBtu";
				Mapping: {
					"Exporter"  --> nUS,
					"Importer"  --> i,
					"Year"       --> cyr,
					"tc" --> tc,
					"Trills"      --> TotalTransportNonUS(nUS,i,tc,cyr)
				}
			}
			DatabaseTable OutputTradeBtuUS {
				DataSource: CoalOutConnectionString;
				TableName: "TradeBtuUS";
				Mapping: {
					"US"       --> USe,
					"Importer" --> NonUSi,
					"tc"       --> tc,
					"Year"     --> cyr,
					"Trills"   --> TotalTransportUS
				}
			}
			Set ImportingRegion {
				Index: i;
			}
			Set CoalSupplySteps {
				SubsetOf: Integers;
				Index: s;
			}
			Set IntlThermalorCoking {
				SubsetOf: Integers;
				Text: {
					"1= coking and 2=thermal; data entry"
				}
				Index: tc;
			}
			Parameter AggExportingCode {
				IndexDomain: (e,Ae);
			}
			Set VesselClass {
				Text: "Capesize or Panamax";
				Index: vclass;
			}
			Parameter AggImportingCode {
				IndexDomain: (i,Ai);
			}
			Parameter USeFLAG {
				IndexDomain: (e);
				Text: "set to -1 if the exporting region is in the US";
			}
			Parameter NonUSFLAG {
				IndexDomain: (e);
				Text: "set to -1 if the exporting region is NOT in the U.S.";
			}
			Parameter ExpSubSectorFLAG {
				IndexDomain: (ExpSec);
				Text: "set to -7 if sector is Coking and to -8 if Thermal";
			}
			Parameter PossibleAeToi {
				IndexDomain: (Ae,i);
			}
			Parameter USDRegIntlMapping {
				IndexDomain: (USe,DReg);
				Text: "set to -1 if viable USAggRegison US Domestic Demand Region combination";
			}
			Parameter USDRegIntlMapping2 {
				IndexDomain: (USe,i,tc)|InternationalUnitTransport(USe,i,tc);
				Definition: 1;
			}
			Parameter USDRegIntlMapping3 {
				IndexDomain: (USe,ExpSec);
				Text: "these calculated numbers themsevles are meaningless but it it exists it means its viable on the domestic side";
				Definition: Sum((tc,i),USDRegIntlMapping4(tc,ExpSec)*InternationalUnitTransport(USe,i,tc)*USDRegGoodCombos2(ExpSec,USe));
			}
			Parameter USDRegGoodCombos1 {
				IndexDomain: (DReg,ExpSec,USe)|ThermalLowerBound(DReg,ExpSec,USe,cpsbaseyr) or CokingLowerBound(DReg,ExpSec,USe,cpsbaseyr);
				Definition: 1;
			}
			Parameter USDRegGoodCombos2 {
				IndexDomain: (ExpSec,USe);
				Definition: Sum(DReg,USDRegGoodCombos1(DReg,ExpSec,USe));
			}
			Parameter USDRegIntlMapping4 {
				IndexDomain: (tc,ExpSec);
				Text: "1 = coking and 2 = thermal";
				Definition: {
					!if ExpSec = 'x1' or ExpSec = 'x2' or ExpSec = 'x3' then
					!tc = '1'
					!else
					!tc = '2'
					!endif
					1
				}
			}
			Parameter NUSDRegIntlMapping2 {
				IndexDomain: (nUS,i,tc)|InternationalUnitTransport(nUS,i,tc);
				Definition: 1;
			}
			Parameter InternationalDemand {
				IndexDomain: (nonUSi,tc,yr);
				Range: nonnegative;
			}
			Parameter InternationalDemandMtce {
				IndexDomain: (nonUSi,tc,yr);
				Range: nonnegative;
				Definition: InternationalDemand(NonUSi,tc,yr)*MtceToBtu;
			}
			Parameter IntlDemandYears {
				IndexDomain: (yr);
				Definition: Sum((NonUsi,tc),InternationalDemand(NonUSi,tc,yr));
			}
			Parameter MtceToBtu {
				Definition: 27.78;
				Comment: "converting metrictons of coalequivalent to Btu";
			}
			Parameter Minebyr {
				Definition: 2021;
			}
			Parameter Minebyrexp {
				InitialData: '2020';
			}
			Parameter InternationalUnitTransport {
				IndexDomain: (e,i,tc);
				Text: {
					"freight rates; 1992 dollars per metric ton"
				}
				Comment: "Prior to AEO2020 coking and thermal were read in from clfreight.txt.  New method implemented in May 2019 DAF";
			}
			Parameter DailyHireCost {
				IndexDomain: (yr,vclass);
				Text: "Daily Hire rate by Vessel class in Real Dollars";
				Comment: {
					"Read from CMM2.mdb  table \"tInp_IntlVesselCosts\"
					OFBaseYr parameter sets year dollars for the Ocean Fuel inputs."
				}
			}
			Parameter PortCostPer_mTon {
				IndexDomain: (yr,vclass);
				Text: "Port Usage cost per Metric ton in real dollars";
				Comment: {
					"Read from CMM2.mdb  table \"tInp_IntlVesselCosts\"
					OFBaseYr parameter sets year dollars for the Ocean Fuel and Port cost inputs."
				}
			}
			ElementParameter OFBaseYr {
				Text: "Base year for Ocean Freight Equations Fuel and Cost Inputs";
				Range: AllYears;
				Definition: '2018';
			}
			Parameter PortDays {
				IndexDomain: (yr,vclass);
			}
			Parameter BunkerFuelUseSea {
				IndexDomain: (yr,vclass);
			}
			Parameter DieselFuelUseSea {
				IndexDomain: (yr,vclass);
			}
			Parameter DieselFuelUsePort {
				IndexDomain: (yr,vclass);
			}
			Parameter SailingSpeedKn {
				IndexDomain: (yr,vclass);
			}
			Parameter TotPortCost {
				IndexDomain: (e,i,tc,vclass,yr);
				Text: "Total Port Cost in Real dollars for active arcs (those with lading tons > 0)";
				Definition: {
					
					if VesselLadingT(e,i,tc,vclass) > 0 Then PortCostPer_mTon(yr,vclass) endif
					+ (DailyHireCost(yr,vclass) * PortDays(yr,vclass)) /$ VesselLadingT(e,i,tc,vclass) 
					+ (DieselFuelUsePort(yr,vclass) * PortDays(yr,vclass) * DieselFuelCost(e,yr)) /$ VesselLadingT(e,i,tc,vclass)
				}
				Comment: "OFBaseYr parameter sets year dollars for the Ocean Fuel and Port cost inputs.";
			}
			Parameter BunkerIFO380_USGulf {
				IndexDomain: yr;
				Text: " Bunker Fuel IFO380 Prices by year for US Gulf Coast in real 2018$";
				Comment: {
					"For first test runs these fuel price are exogenous from tInp_MarineFuels in CMM2.mdb 
					Price in real$ specified in parameter OFBaseYr
					Later we hope to use a NEMS price for IFO380 prices in real dollars."
				}
			}
			Parameter DieselMGO_USGulf {
				IndexDomain: yr;
				Text: " Diesel MGO Prices by year for US Gulf Coast in real 2018$";
				Comment: {
					"For first test runs these fuel price are exogenous from tInp_MarineFuels in CMM2.mdb 
					Later we hope to used NEMS Gulf Coast low sulfur diesel or Marine Gas Oil (MGO) prices in real dollars."
				}
			}
			Parameter PRLTR_MidAtlantic_B {
				IndexDomain: Yr;
				Text: "Transportation Sector Low Sulfur Residual Fuel Price, 1987$/BBL";
				Definition: PRLTR_MidAtlantic_A(yr) * CFRSQ(yr);
			}
			Parameter PRLTR_MidAtlantic_B1_CurYearDol {
				IndexDomain: Yr;
				Text: "Transportation Sector Low Sulfur Residual Fuel Price, Current year $/BBL";
				Definition: PRLTR_MidAtlantic_A1_CurYearDol(yr) * CFRSQ(yr);
				Comment: "Should roughly match Grafnem Table 12 Line 34 but not exact as this price is for Mid Atlantic region";
			}
			Parameter PRLTR_MidAtlantic_NomDolPerGal {
				IndexDomain: Yr;
				Text: "Transportation Sector Low Sulfur Residual Fuel Price $/gallon";
				Definition: PRLTR_MidAtlantic_A(yr) * CFDSTR(yr) / 42 * MC_JPGDP(yr);
			}
			Parameter PRLTR_MidAtlantic_NomDolPerBBL {
				IndexDomain: Yr;
				Text: "Transportation Sector Low Sulfur Residual Fuel Price $/BBL";
				Definition: PRLTR_MidAtlantic_A(yr) * CFDSTR(yr) * MC_JPGDP(yr);
			}
			Parameter PRHTR_MidAtlantic_NomDolPerBBL {
				IndexDomain: Yr;
				Text: "Transportation Sector High Sulfur Residual Fuel Price $/BBL";
				Definition: PRHTR_MidAtlantic_A(yr) * CFDSTR(yr) * MC_JPGDP(yr);
			}
			Parameter BunkerIFO380_FromNEMS {
				IndexDomain: yr;
				Text: "Bunker Fuel IFO380 Prices by year for US Gulf Coast in real current year $ per metric ton";
				Definition: DieselMGO_USAvg_FromNEMS(yr) * 0.12 + PRLTR_MidAtlantic_B1_CurYearDol(yr) * 6.7 * 0.88;
				Comment: {
					"Using density of 6.7 BBL per metric ton for Residual Fuel
					Using share of 12% distilate and 88% low sulfur resid for our bunker fuel IFO380 price."
				}
			}
			Parameter PDSTR_USAvg_B {
				IndexDomain: Yr;
				Text: "Transportation Sector Diesel Fuel Price, Current Year $/BBL";
				Definition: PDSTR_USAvg_A1_CurYearDol(yr) * CFDSTR(yr);
			}
			Parameter PDSTR_USAvg_B1 {
				IndexDomain: Yr;
				Text: "Transportation Sector Diesel Fuel Price, Current Year $/ Gallon";
				Definition: PDSTR_USAvg_A1_CurYearDol(yr) * CFDSTR(yr) /42;
				Comment: "This should roughly match Grafnem Table 12 Line 32";
			}
			Parameter DieselMGO_USAvg_FromNEMS {
				IndexDomain: Yr;
				Text: "Transportation Sector Diesel Fuel Price, Current Year $/Metric Ton";
				Definition: PDSTR_USAvg_B(yr) * 7.5 * 0.65;
				Comment: {
					"Using density for Diesel fuel of 7.5 BBL per Metric ton
					Scale factor of 0.65 applied to refelect the differnce between US Avg Diesel price and Marine Gas Oil price (calc from IHS series)."
				}
			}
			Parameter PDSTR_USAvg_NomDolPerGal {
				IndexDomain: Yr;
				Text: "Transportation Sector Diesel Fuel Price $/Gallon  (Retail price including taxes)";
				Definition: PDSTR_USAvg_A(yr) * CFDSTR(yr) / 42 * MC_JPGDP(yr);
				Comment: "This should match Grafnem Table 12 Line 78";
			}
			Parameter BunkerIFO_RgnDiff {
				IndexDomain: e;
			}
			Parameter DieselMGO_RgnDiff {
				IndexDomain: e;
			}
			Parameter DieselFuelCost {
				IndexDomain: (e,yr);
				Definition: {
					if yr > '2004' then
					!DieselMGO_USGulf(yr) + DieselMGO_RgnDiff(e)
					DieselMGO_USAVG_FromNEMS(yr) + DieselMGO_RgnDiff(e)    ! replace with NEMS derived fuel prices instead of exogenous inputs 8/07/20 DAF
					endif
				}
			}
			Parameter BunkerFuelCost {
				IndexDomain: (e,yr);
				Definition: {
					if yr > '2004' then
					!BunkerIFO380_USGulf(yr) + BunkerIFO_RgnDiff(e)
					BunkerIFO380_FromNEMS(yr) + BunkerIFO_RgnDiff(e)  ! replace with NEMS derived fuel prices instead of exogenous inputs 8/07/20 DAF
					endif
				}
			}
			Parameter IntlNauticalMiles {
				IndexDomain: (e,i,tc,vclass);
			}
			Parameter VesselLadingT {
				IndexDomain: (e,i,tc,vclass);
			}
			Parameter DaysAtSea {
				IndexDomain: (e,i,tc,vclass,yr);
				Definition: IntlNauticalMiles(e,i,tc,vclass)/ $ (SailingSpeedKn(yr,vclass) *24);
			}
			Parameter TotSeaCost {
				IndexDomain: (e,i,tc,vclass,yr);
				Text: "Total At-Sea Cost in Real dollars for active arcs (those with lading tons > 0)";
				Definition: {
					(DailyHireCost(yr,vclass) * DaysAtSea(e,i,tc,vclass,yr)) /$ VesselLadingT(e,i,tc,vclass) 
					+ (BunkerFuelUseSea(yr,vclass) * DaysAtSea(e,i,tc,vclass,yr) * BunkerFuelCost(e,yr)) /$ VesselLadingT(e,i,tc,vclass)
				}
				Comment: "OFBaseYr parameter sets year dollars for the Ocean Fuel and Port cost inputs.";
			}
			Parameter InternationalUnitTransportOceanFreight {
				IndexDomain: (e,i,tc,yr);
				Text: {
					"New ocean freight rates; Real dollars per metric ton"
				}
				Definition: Sum ((vclass),  TotPortCost(e,i,tc,vclass,yr) + TotSeaCost(e,i,tc,vclass,yr) );
				Comment: "OFBaseYr parameter sets year dollars for the new Ocean Freight calaculation.  DAF 5-24-2019";
			}
			Parameter InternationalUnitTranportOF92D {
				IndexDomain: (e,i,tc,yr);
				Text: {
					"New ocean freight rates; Real 1992 dollars per metric ton"
				}
				Definition: InternationalUnitTransportOceanFreight(e,i,tc,yr) * MC_JPGDP('1992') / MC_JPGDP(OFBaseYr);
				Comment: "Put into 1992 Dollars to compare to old clfreight.txt input file";
			}
			Parameter InternationalUnitTransportBtuNonUS {
				IndexDomain: (nUS,i,tc);
				Text: {
					"freight rates; 1987 dollars per mmBtu"
				}
				Definition: {
					if InternationalHeatContent(nUS,tc) >0 then
					InternationalUnitTransport(nUS,i,tc)*2000./2204.623!now it's in $/short ton
					/$InternationalHeatContent(nUS,tc) !now it's in $92/mmBtu
					/1.182 ! now it's in $87/mmBtu
					endif
				}
				Comment: {
					"This calc converted old clfreight.txt input of InternationalUnitTransport to 1987$ per MMBtu except 1.182 does not match current
					deflator series for 1992 in MC_JPGDP."
				}
			}
			Parameter InternationalUnitTransportBtuUS {
				IndexDomain: (USe,i,SReg, Sulf, Mtyp, Rank,DReg,ExpSec,tc)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: {
					"freight rates; 1987 dollars per mmBtu"
				}
				Definition: {
					if Btu2(SReg, Sulf, Mtyp, Rank) >0 and USDRegIntlMapping(USe,DReg) = -1
					and Trate1Exp(SReg, Sulf, Mtyp, Rank,DReg,ExpSec) > 0 then
					InternationalUnitTransport(USe,i,tc)!*10^12
					!/Btu2(Scrv)/1.182
					/1.182/27.78   ! convert to 1987$; the 27.78 appears to be a proxy for the heat content
							!fix to actual heat content in final AIMMS run
					else
					10
					endif
				}
				Comment: {
					"This calc converted old clfreight.txt input of InternationalUnitTransport to 1987$ per MMBtu except 1.182 does not match current
					deflator series for 1992 in MC_JPGDP."
				}
			}
			Parameter InternationalUnitTransportBtuNonUS87D {
				IndexDomain: (nUS,i,tc,yr);
				Text: {
					"freight rates; 1987 dollars per mmBtu"
				}
				Definition: {
					if InternationalHeatContent(nUS,tc) >0 then
					InternationalUnitTranportOF92D(nUS,i,tc,yr)*2000./2204.623!now it's in $/short ton
					/$InternationalHeatContent(nUS,tc) !now it's in $92/mmBtu
					/MC_JPGDP('1992') ! now it's in $87/mmBtu
					endif
				}
				Comment: "This will replace InternationalUnitTransportBtuNonUS in the objective function.  May-2019";
			}
			Parameter InternationalUnitTransportBtuUSEx87D {
				IndexDomain: (USe,NonUSi,tc,yr);
				Text: {
					"freight rates; 1987 dollars per mmBtu"
				}
				Definition: {
					if tc='1' then
					  InternationalUnitTranportOF92D(USe,NonUSi,tc,yr)*2000./2204.623! convert to 92$/short ton
					  /28.7 ! convert to MMBtu - this is heat content value we assume for coking coal when figuring int'l demand
					  /MC_JPGDP('1992') ! now it's in $87/mmBtu
					else
					  InternationalUnitTranportOF92D(USe,NonUSi,tc,yr)*2000./2204.623! convert to 92$/short ton
					  /21.8 ! convert to MMBtu - this is calc average heat content value from 2017 for steam exports
					  /MC_JPGDP('1992') ! now it's in $87/mmBtu
					endif
				}
				Comment: "This will replace InternationalUnitTransportBtuNonUS in the objective function.  May-2019";
			}
			Parameter InternationalUnitTransportBtuUSImp87D {
				IndexDomain: (nUS,USi,tc,yr);
				Text: {
					"freight rates; 1987 dollars per mmBtu for US imports"
				}
				Definition: {
					if tc='1' then
					  InternationalUnitTranportOF92D(nUS,USi,tc,yr)*2000./2204.623! convert to 92$/short ton
					  /28.7 ! convert to MMBtu - this is heat content value we assume for coking coal when figuring int'l demand
					  /MC_JPGDP('1992') ! now it's in $87/mmBtu
					else
					  InternationalUnitTranportOF92D(nUS,USi,tc,yr)*2000./2204.623! convert to 92$/short ton
					  /21.8 ! convert to MMBtu - this is calc average heat content value from 2017 for steam exports
					  /MC_JPGDP('1992') ! now it's in $87/mmBtu
					endif
				}
				Comment: "This will replace InternationalUnitTransportBtuNonUS in the objective function.  May-2019";
			}
			Parameter InternationalSupply {
				IndexDomain: (nUS,s,tc,yr);
				Range: nonnegative;
				Comment: "The top production at that step";
			}
			Parameter InternationalSupplyBtu {
				IndexDomain: (nUS,s,tc,yr);
				Range: nonnegative;
				Definition: {
					InternationalSupply(nUS,s,tc,yr)*InternationalHeatContent(nUS,tc)
					*2204.623/2000.
				}
				Comment: "The top production at that step";
			}
			Parameter InternationalHeatContent {
				IndexDomain: (e,tc);
				Comment: "million Btu per short ton";
			}
			Parameter InternationalFOB {
				IndexDomain: (nUS,s,tc,yr);
			}
			Parameter ScaleUSPrices {
				IndexDomain: (e,tc);
			}
			Parameter InternationalFOBScalint {
				IndexDomain: (nUS,s,tc,yr)|(ScaleUSPrices(nUS,tc) + InternationalScaleFactor(nUS,tc));
				Definition: {
					if (yr < MINEBYREXP + 1) then
					InternationalFOB(nUS,s,tc,yr)/MACOUT_MC_JPGDP('3')
					           elseif (yr > MINEBYREXP and tc = '1' ) then !coking
					                    InternationalFOB(nUS,s,'1',yr)/MACOUT_MC_JPGDP('3')*((1.0/(ScaleUSPrices(nUS,'1') + InternationalScaleFactor(nUS,'1')-1.0))^(yr-MINEBYREXP))!*
					            !       (EXPRMET(yr)/exmetbyprice))
					           elseif (yr > MINEBYREXP and tc = '2' ) then !steam
					                    InternationalFOB(nUS,s,'2',yr)/MACOUT_MC_JPGDP('3')*((1.0/(ScaleUSPrices(nUS,'2') + InternationalScaleFactor(nUS,'2')-1.0))^(yr-MINEBYREXP))!*
					             !       (EXPRSTM(yr)/exthermbyprice))
					           endif
				}
				Comment: "should convert to btu and 87 dollars prior to doing this calc to match fortran code";
			}
			Parameter InternationalFOBScalintBtu {
				IndexDomain: (nUS,s,tc,yr);
				Definition: {
					if InternationalSupply(nUS,s,'1',yr) and tc = '1' then
					InternationalFOBScalint(nUS,s,'1',yr)*(2000./2204.623)*(2000./2204.623)/$
					InternationalHeatContent(nUS,'1')
					elseif InternationalSupply(nUS,s,'2',yr) and tc = '2' then
					InternationalFOBScalint(nUS,s,'2',yr)*(2000./2204.623)*(2000./2204.623)/$
					InternationalHeatContent(nUS,'2')
					else
					100
					endif
				}
			}
			Parameter InternationalSO2Unit {
				IndexDomain: (e,tc);
				Range: nonnegative;
				Comment: "lbs of SO2 per million Btu";
			}
			Parameter InternationalSupplyDollars {
				IndexDomain: (nUS,tc,yr);
				Definition: Sum((s), InternationalFOBScalintBtu(nUS,s,tc,yr) * ExpSupply(nUS,s,tc,yr) );
			}
			Parameter InternationalSupplyVolume {
				IndexDomain: (nUS,tc,yr);
				Definition: Sum((s), ExpSupply(nUS,s,tc,yr) );
			}
			Parameter InternationalSupplyPrice {
				IndexDomain: (nUS,tc,yr);
				Text: "International Solution FOB Price $/MMBtu";
				Definition: {
					!InternationalSupplyDollars(nUS,tc,yr) / $InternationalSupplyVolume(nUS,tc,yr)
				}
				Comment: "Moved to CalcCoalReportingTotals";
			}
			Parameter InternationalMercuryUnit {
				IndexDomain: (e,tc);
				Comment: "lbs of mercury per trillion Btu";
			}
			Parameter InternationalCO2Unit {
				IndexDomain: (e,tc);
				Comment: "lbs of CO2 per million Btu";
			}
			Parameter InternationalScaleFactor {
				IndexDomain: (e,tc);
				Comment: "adjusts international supply curves w.r.t. U.S. prices (simulates productivity)";
			}
			Parameter InternationalImportMaxShare {
				IndexDomain: (Ae,i,tc);
				Comment: "percent";
			}
			Parameter InternationalExportMaxShare {
				IndexDomain: (Ae);
			}
			Parameter I_SO2p {
				IndexDomain: (e,DReg,pt2,mx_so2,yr);
				Text: "$ SO2 per ton of coal";
				Definition: {
					if so2_shr_by_clreg(DReg,MX_SO2) > 0 then
					InternationalSO2Unit(e,'2')*
					InternationalHeatContent(e,'2')
					*so2_shr_by_clreg(DReg,MX_SO2)
					*emission_emelpso2_a(yr,mx_so2)
					endif
					!elseif
					!so2shr
				}
			}
			Parameter I_SO2pBTU {
				IndexDomain: (e,DReg,pt2,mx_so2,yr)|InternationalHeatContent(e,'2');
				Text: "$ SO2 per ton of coal";
				Definition: {
					I_SO2p(e,DReg,pt2,MX_SO2,yr)/
					InternationalHeatContent(e,'2')
				}
			}
			Parameter Exprmet {
				IndexDomain: (yr);
				Definition: {
					if (MetexpTest(yr) = 1)then
					(Sum((SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg)|
					!Rank = '4P'
					CokingSupplyCurves_Map(SReg, Sulf, Mtyp, Rank)
					and USDRegIntlMapping(USe,DReg),
					ExportsTransportCost(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr-1))
					+
					sum((USe),TotalUSExpTransportCokingCost(USe,yr-1)))/
					Sum((SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg)|Rank = '4P' and USDRegIntlMapping(USe,DReg),
					ExportsTransport5Final(SReg,Sulf,Mtyp,RAnk,ExpSec,USe,DReg,yr-1))
					elseif (MetexpTest(yr) <> 1 )then
					exmetbyprice
					endif
				}
			}
			Parameter Exprstm {
				IndexDomain: (yr);
				Definition: {
					if (ThermexpTest(yr) = 1)then
					(Sum((SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg)|
					!Rank <> '4P'
					ThermalSupplyCurves_Map(SReg, Sulf, Mtyp, Rank)
					and USDRegIntlMapping(USe,DReg),
					ExportsTransportCost(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr-1))
					+
					sum((USe),TotalUSExpTransportThermalCost(USe,yr-1)))/
					Sum((SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg)|Rank <> '4P' and
					USDRegIntlMapping(USe,DReg),
					ExportsTransport(SReg,Sulf,Mtyp,Rank,ExpSec,USe,DReg,yr-1))
					elseif (ThermexpTest(yr) <> 1 )then
					exthermbyprice
					endif
				}
			}
			Parameter MetexpTest {
				IndexDomain: (yr);
				Text: "test to see if lagged met export price exists";
				Definition: {
					if ExportsMetTranspTons(yr-1)>0then
					'1'
					endif
				}
			}
			Parameter ThermexpTest {
				IndexDomain: (yr);
				Text: "test to see if lagged thermal export price exists";
				Definition: {
					if ExportsThermTranspTons(yr-1)>0then
					'1'
					endif
				}
			}
			Parameter exmetbyprice {
				Text: "U.S. met coal\'s base year price for use in scalint calculation";
				InitialData: {
					!(Sum((SReg,Sulf,Mtyp,Rank,ExpSec,DReg)| Rank = '4P',
					!ExportsTransportCost(SReg,Sulf,Mtyp,Rank,ExpSec,DReg,minebyrexp))
					!+
					!sum((USe),TotalUSExpTransportCokingCost(USe,minebyrexp)))/
					!Sum((SReg,Sulf,Mtyp,Rank,ExpSec,DReg)|Rank='4P',
					!ExportsTransport(SReg,Sulf,Mtyp,Rank,ExpSec,DReg,minebyrexp))
					145
				}
				Comment: "will generate errors until I get a good starting case w mineybyr populated using filler of 145 for now";
			}
			Parameter exthermbyprice {
				Text: "U.S. met coal\'s base year price for use in scalint calculation";
				Definition: {
					!(Sum((SReg,Sulf,Mtyp,Rank,ExpSec,DReg)| Rank <> '4P',
					!ExportsTransportCost(SReg,Sulf,Mtyp,Rank,ExpSec,DReg,minebyrexp))
					!+
					!sum((USe),TotalUSExpTransportThermalCost(USe,minebyrexp)))/
					!Sum((SReg,Sulf,Mtyp,Rank,ExpSec,DReg)|Rank <>'4P',
					!ExportsTransport(SReg,Sulf,Mtyp,Rank,ExpSec,DReg,minebyrexp))
					65
				}
			}
			Variable Transport {
				IndexDomain: (nUS,i,s,tc,cyr)|InternationalUnitTransportOceanFreight(nUS,i,tc,cyr);
				Range: nonnegative;
			}
			Variable ExpSupply {
				IndexDomain: (nUS,s,tc,cyr);
				Range: [0, InternationalSupplyBtu(nUS, s, tc, cyr));
				Property: ReducedCost;
			}
			Variable TotalTransportNonUS {
				IndexDomain: (nUS,i,tc,cyr);
				Text: {
					"all exports from non-US countries/regions; includes imports to U.S."
				}
				Range: nonnegative;
				Definition: sum[ (s), Transport(nUS,i,s,tc,cyr) ];
			}
			Parameter OutputTransportNonUS {
				IndexDomain: (nUS,i,tc,yr);
				Text: {
					"Reporting parameter for all exports from non-US countries/regions; includes imports to U.S. (set in CalcCoalReportingTotals)"
				}
			}
			Variable TotalTransportUS {
				IndexDomain: (Use,nonUSi,tc,cyr)|USDRegIntlMapping2(Use,nonUSi,tc);
				Text: "U.S. exports to other countries";
				Range: nonnegative;
			}
			Variable TXDRegXSIDRThermal {
				IndexDomain: (DReg);
				Range: free;
			}
			Parameter OutputExportFromUSTrils {
				IndexDomain: (USe,NonUSi,tc,yr);
				Definition: {
					!TotalTransportUS(Use,NonUSi,tc,yr) |USDRegIntlMapping2(Use,nonUSi,tc)
				}
				Comment: "computed in procedure CalcCoalReportingTotals";
			}
			Parameter OutputTonsTransportUSbyImporterCoking {
				IndexDomain: (USe,NonUSi,yr);
				Text: "tc = 1 indicates coking";
				Definition: OutputExportFromUSTrils(USe,NonUSi,'1',yr)/$ExportsTransportHeatcontentCokingUse(Use,yr);
			}
			Parameter OutputTonsTransportUSbyImporterThermal {
				IndexDomain: (USe,NonUSi,yr);
				Text: "tc = 2 indicates thermal";
				Definition: OutputExportFromUSTrils(USe,NonUSi,'2',yr)/$ExportsTransportHeatcontentThermalUse(Use,yr);
			}
			Parameter TotalUSTons {
				IndexDomain: (yr);
				Definition: {
					Sum((Use,nonUSi),OutputTonsTransportUSbyImporterCoking(USe,NonUSi,yr)+
					OutputTonsTransportUSbyImporterThermal(USe,NonUSi,yr))
				}
			}
			Parameter OutputTrillsTransportUSbyImporterCoking {
				IndexDomain: (USe,NonUSi,yr);
				Text: "tc = 1 indicates coking";
				Definition: TotalTransportUS(USe,NonUSi,'1',yr);
			}
			Parameter OutputTrillsTransportUSbyImporterThermal {
				IndexDomain: (USe,NonUSi,yr);
				Text: "tc = 2 indicates thermal";
				Definition: TotalTransportUS(USe,NonUSi,'2',yr);
			}
			Parameter OutputTrillsTransportNonUSbyImporterCoking {
				IndexDomain: (nUS,i,cyr);
				Text: "tc = 1 indicates coking";
				Definition: Sum(s,Transport(nUS,i,s,'1',cyr));
			}
			Parameter OutputTrillsTransportNonUSbyImporterThermal {
				IndexDomain: (nUS,i,cyr);
				Text: "tc = 2 indicates thermal";
				Definition: Sum(s,Transport(nUS,i,s,'2',cyr));
			}
			Parameter OutputTonsTransportNonUSbyImporterCoking {
				IndexDomain: (nUS,i,cyr);
				Text: "tc = 1 indicates coking";
				Definition: OutputTrillsTransportNonUSbyImporterCoking(nUS,i,cyr)/$InternationalHeatContent(nUS,'1');
			}
			Parameter OutputTonsTransportNonUSbyImporterThermal {
				IndexDomain: (nUS,i,cyr);
				Text: "tc = 1 indicates coking";
				Definition: OutputTrillsTransportNonUSbyImporterThermal(nUS,i,cyr)/$InternationalHeatContent(nUS,'2');
			}
			Parameter OutputTonsTransportTotalbyImporterThermal {
				IndexDomain: (e,i,cyr);
				Definition: {
					OutputTonsTransportUSbyImporterThermal(e,i,cyr) +
					OutputTonsTransportNonUSbyImporterThermal(e,i,cyr)
				}
			}
			Parameter OutputTonsTransportTotalbyImporterCoking {
				IndexDomain: (e,i,cyr);
				Definition: {
					OutputTonsTransportUSbyImporterCoking(e,i,cyr) +
					OutputTonsTransportNonUSbyImporterCoking(e,i,cyr)
				}
			}
			Parameter TotalTRILLSTransportUS {
				IndexDomain: (cyr);
				Definition: {
					Sum((Use,NonUSi),OutputTrillsTransportUSbyImporterCoking(USe,NonUSi,cyr)
					+OutputTrillsTransportUSbyImporterThermal(USe,NonUSi,cyr))
				}
			}
			Parameter TotalTonsTransportUS {
				IndexDomain: (cyr);
				Definition: {
					Sum((Use,NonUSi),OutputTONSTransportUSbyImporterCoking(USe,NonUSi,cyr)
					+OutputTONSTransportUSbyImporterThermal(USe,NonUSi,cyr))
				}
			}
			Parameter TotalTrillsTransportbyImporterCoking {
				IndexDomain: (e,i,cyr);
				Definition: {
					
					OutputTrillsTransportUSbyImporterCoking(e,i,cyr)+
					OutputTrillsTransportNonUSbyImporterCoking(e,i,cyr)
				}
			}
			Parameter TotalTrillsTransportbyImporterThermal {
				IndexDomain: (e,i,cyr);
				Definition: {
					
					OutputTrillsTransportUSbyImporterThermal(e,i,cyr)+
					OutputTrillsTransportNonUSbyImporterThermal(e,i,cyr)
				}
			}
			Variable TotalTransporttoCountryi {
				IndexDomain: (i,tc,cyr);
				Range: nonnegative;
				Definition: {
					sum[ (nUS), TotalTransportNonUS(nUS,i,tc,cyr)]+
					sum[ (USe),  TotalTransportUS(USe,i,tc,cyr)]
				}
			}
			Variable TotalTransportfromCountrye {
				IndexDomain: (e,tc,cyr);
				Range: nonnegative;
				Definition: {
					sum[ (i), TotalTransportNonUS(e,i,tc,cyr)+
					TotalTransportUS(e,i,tc,cyr)]
				}
			}
			Variable TotalfromCountrye {
				IndexDomain: (Ae,cyr);
				Range: nonnegative;
				Definition: sum[ (e,tc), AggExportingCode(e,Ae)*TotalTransportfromCountrye(e,tc,cyr) ];
			}
			Variable TotalfromCountryetoi {
				IndexDomain: (Ae,i,cyr);
				Range: nonnegative;
				Definition: {
					sum[ (e,tc), AggExportingCode(e,Ae)*TotalTransportNonUS(e,i,tc,cyr)
					+ AggExportingCode(e,Ae)*TotalTransportUS(e,i,tc,cyr)]
				}
			}
			Variable TotalfromCountryetoibySector {
				IndexDomain: (Ae,tc,cyr);
				Range: nonnegative;
				Definition: {
					sum[ (e,i), AggExportingCode(e,Ae)*TotalTransportNonUS(e,i,tc,cyr)
					+ AggExportingCode(e,Ae)*TotalTransportUS(e,i,tc,cyr)]
				}
			}
			Variable AggRegTransport {
				IndexDomain: (Ae,i,tc,cyr);
				Range: nonnegative;
				Definition: {
					sum[ (e), PossibleAeToi(Ae,i)*[AggExportingCode(e,Ae) * TotalTransportNonUS(e,i,tc,cyr)
					+ AggExportingCode(e,Ae) * TotalTransportUS(e,i,tc,cyr)]]
				}
			}
			Parameter TotalNonUSExpTransportCost {
				IndexDomain: (nUS,yr);
				Range: nonnegative;
				Definition: {
					!sum[ (i,tc) |InternationalUnitTransportBtuNonUS(nUS,i,tc) > 0,
					!(InternationalUnitTransportBtuNonUS(nUS,i,tc)
					!* TotalTransportNonUS(nUS,i,tc,cyr))]
				}
			}
			Parameter TotalUSExpTransportCokingCost {
				IndexDomain: (USe,yr);
				Text: "not sure if this converts 92 dollars per metric ton to 87 dollars per short ton wo my help";
				Range: nonnegative;
				Definition: {
					Sum((NonUSi,tc),
					InternationalUnitTransport(USe,NonUSi,'1')/1.182/27.78*
					OutputExportFromUSTrils(USe,NonUSi,'1',yr))
					+ sum((SReg, Sulf, Mtyp, Rank,Dreg,ExpSec) |ExpSubSectorFLAG(ExpSec) = -7 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank), ExportsTransportCost(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter TotalUSExpTransportThermalCost {
				IndexDomain: (USe,yr);
				Text: "not sure if this converts 92 dollars per metric ton to 87 dollars per short ton wo my help";
				Range: nonnegative;
				Definition: {
					Sum((NonUSi,tc),
					InternationalUnitTransport(USe,NonUSi,'2')/1.182/27.78*
					OutputExportFromUSTrils(USe,NonUSi,'2',yr))
					+ sum((SReg, Sulf, Mtyp, Rank,Dreg,ExpSec) |ExpSubSectorFLAG(ExpSec) = -8 and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank), ExportsTransportCost(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,yr))
				}
			}
			Parameter IntlTotalCost {
				Text: "for now summing cost across all years";
				Range: nonnegative;
				Definition: {
					sum[ (nUS,s,tc,cyr), (InternationalFOBScalintbTU(nUS,s,tc,cyr)*ExpSupply(NUS,s,tc,cyr))] +
					sum[(nUS,cyr),TotalNonUSExpTransportCost(nUS,cyr)]+
					sum[(USe,cyr),TotalUSExpTransportCokingCost(USe,cyr)+
					TotalUSExpTransportThermalCost(USe,cyr)]
				}
			}
			Variable USBalanceCoke {
				IndexDomain: (USe,cyr);
				Range: nonnegative;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,ExpSec,DReg)|
					USDRegIntlMapping(USe,DReg)
					and CokingSupplyCurves_Map(SReg, Sulf, Mtyp, Rank)
					and ExpSubSectorFLAG(ExpSec) = -7 and
					Btu2(SReg, Sulf, Mtyp, Rank) and Trate1Exp(SReg, Sulf, Mtyp, Rank,DReg,ExpSec),
					ExportsTransport2(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,cyr))
				}
			}
			Variable USBalanceThermal {
				IndexDomain: (USe,cyr);
				Range: nonnegative;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,ExpSec,DReg)|USDRegIntlMapping(USe,DReg)
					and ThermalSupplyCurves_Map(SReg, Sulf, Mtyp, Rank)
					and ExpSubSectorFLAG(ExpSec) = -8 and
					Btu2(SReg, Sulf, Mtyp, Rank) and Trate1Exp(SReg, Sulf, Mtyp, Rank,DReg,ExpSec),
					ExportsTransport2(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,cyr))
					
					!Sum((SReg, Sulf, Mtyp, Rank,ThermExpSec,DReg)|ThermalSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					!ExportsTransport2(SReg, Sulf, Mtyp, Rank,ThermExpSec,USe,DReg,cyr))
				}
			}
			Variable SubtotalforExportShareConstrUS1 {
				IndexDomain: (USe,tc,cyr);
				Range: nonnegative;
				Definition: {
					Sum ((Ae)|AggExportingCode(USe,Ae),
					TotalTransportfromCountrye(Use,tc,cyr)*
					InternationalExportMaxShare(Ae)/100.)
				}
			}
			Variable SubtotalforExportShareConstrNonUS1 {
				IndexDomain: {
					(Ae,cyr)!(Ae,tc,cyr)
				}
				Range: nonnegative;
				Definition: {
					
					!TotalfromCountryetoibySector(Ae,tc,cyr)*
					TotalfromCountrye(Ae,cyr)*
					InternationalExportMaxShare(Ae)/100.
				}
			}
			Variable SubtotalforExportShareConstrUS2 {
				IndexDomain: (Ae,cyr);
				Range: nonnegative;
				Definition: {
					Sum ((Use,tc)|AggExportingCode(USe,Ae),
					SubtotalforExportShareConstrUS1(USe,tc,cyr))
				}
			}
			Variable SubtotalforExportShareConstrUS3 {
				IndexDomain: (Ae,NonUSi,tc,cyr);
				Range: nonnegative;
				Definition: {
					Sum ((USe)|AggExportingCode(USe,Ae),
					TotalTransportUS(USe,NonUSi,tc,cyr))
				}
			}
			Variable SubtotalforExportShareConstrNonUS3 {
				IndexDomain: (Ae,NonUSi,tc,cyr);
				Range: nonnegative;
				Definition: PossibleAeToi(Ae,nonusi)*AggRegTransport(Ae,nonUSi,tc,cyr);
			}
			Constraint Test_IntlSupplyStepBalancewTotal {
				IndexDomain: (nUS,s,tc,cyr);
				Text: "Balances export supply curves with imported volumes";
				Property: ShadowPrice;
				Definition: {
					ExpSupply(nUS,s,tc,cyr)
					- sum [ (i), Transport(nUS,i,s,tc,cyr)] = 0
				}
			}
			Constraint ImportShareConstr {
				IndexDomain: (Ae,nonUSi,tc,cyr)|cyr in InternationalYears and nonusi <> 'NI';
				Property: ShadowPrice;
				Definition: {
					PossibleAeToi(Ae,nonUSi)*[AggRegTransport(Ae,nonUSi,tc,cyr)-
					InternationalImportMaxShare(Ae,nonUSi,tc)/100.*
					InternationalDemand(nonUSi,tc,cyr) * MtceToBtu] <=0
				}
			}
			Constraint ExportShareConstrNonUS {
				IndexDomain: (Ae,NonUSi,tc,cyr)|Ae <> 'US';
				Text: "constraint disappears if possibleAetoi = 0";
				Property: ShadowPrice;
				Definition: {
					!Sum ((nUS)|AggExportingCode(nUS,Ae),PossibleAeToi(Ae,i)*[AggRegTransport(Ae,i,tc,cyr)-
					!InternationalExportMaxShare(Ae)/100.*
					!TotalfromCountryetoibySector(Ae,tc,cyr)]) <= 0
					
					SubtotalforExportShareConstrNonUS3(Ae,NonUSi,tc,cyr)
					- (EscapeExportShareConstrNonUS(Ae,tc,cyr) +
					SubtotalforExportShareConstrNonUS1(Ae,cyr)) <= 0
				}
			}
			Constraint IntlSupplyStepBalancewTotal {
				IndexDomain: (nUS,tc,cyr);
				Text: "Balances export supply curves with imported volumes";
				Property: ShadowPrice;
				Definition: {
					sum [ (s), ExpSupply(nUS,s,tc,cyr)]
					- sum [ (i), TotalTransportNonUS(nUS,i,tc,cyr)] = 0
				}
			}
			Parameter ImportShareConstrCheck {
				IndexDomain: (Ae,NonUSi,tc,cyr);
				Definition: {
					InternationalImportMaxShare(Ae,nonUSi,tc)/100.*
					InternationalDemand(nonUSi,tc,cyr) * MtceToBtu
				}
			}
			Variable EscapeExportShareConstrNonUS {
				IndexDomain: (Ae,tc,cyr);
				Range: nonnegative;
			}
			Constraint ExportShareConstrUS {
				IndexDomain: (Ae,nonUSi,tc,cyr)|Ae = 'US';
				Text: "constraint disappears if possibleAetoi = 0";
				Property: ShadowPrice;
				Definition: {
					SubtotalforExportShareConstrUS3(Ae,NonUSi,tc,cyr)-
					SubtotalforExportShareConstrUS2(Ae,cyr)
					 <= 0
				}
			}
			Constraint ExportBalance {
				IndexDomain: (e,tc,cyr);
				Property: ShadowPrice;
				Definition: {
					sum(i, TotalTransportNonUS(e,i,tc,cyr)+TotalTransportUS(e,i,tc,cyr))
					- TotalTransportfromCountrye(e,tc,cyr) = 0
				}
			}
			Constraint ImportBalance {
				IndexDomain: (i,tc,cyr);
				Property: ShadowPrice;
				Definition: {
					sum(e, TotalTransportNonUS(e,i,tc,cyr)+TotalTransportUS(e,i,tc,cyr))
					- TotalTransporttoCountryi(i,tc,cyr) = 0
				}
			}
			Constraint LInkUSDomesticCokingExportsWithInternational {
				IndexDomain: (USe,cyr);
				Property: Bound, ShadowPrice, Level, Basic;
				Definition: {
					EscapePlusUSCokingExports(use,cyr) - EscapeMinusUSCokingExports(USe,cyr)+
					Sum((nonUSi),TotalTransportUs(USe,NonUSi,'1',cyr))
					-Sum((SReg, Sulf, Mtyp, Rank,CokeExpSec,DReg)| CokingSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					ExportsTransport2(SReg, Sulf, Mtyp, Rank,CokeExpSec,USe,DReg,cyr))=0
				}
			}
			Variable EscapePlusUSCokingExports {
				IndexDomain: (USe,cyr);
				Range: nonnegative;
			}
			Variable EscapeMinusUSCokingExports {
				IndexDomain: (USe,cyr);
				Range: nonnegative;
			}
			Constraint LInkUSDomesticThermalExportsWithInternational {
				IndexDomain: (USe,cyr);
				Property: ShadowPrice;
				Definition: {
					EscapePlusUSThermalExports(use,cyr) - EscapeMinusUSThermalExports(USe,cyr)+
					Sum((nonUSi),TotalTransportUs(USe,NonUSi,'2',cyr))
					-Sum((SReg, Sulf, Mtyp, Rank,ThermExpSec,DReg)|ThermalSupplyCurves_Map(SReg, Sulf, Mtyp, Rank),
					ExportsTransport2(SReg, Sulf, Mtyp, Rank,ThermExpSec,USe,DReg,cyr))=0
				}
			}
			Variable EscapePlusUSThermalExports {
				IndexDomain: (USe,cyr);
				Range: nonnegative;
			}
			Variable EscapeMinusUSThermalExports {
				IndexDomain: (USe,cyr);
				Range: nonnegative;
			}
			Constraint InternationalDemandRequirement {
				IndexDomain: (nonusi,tc,cyr)|cyr in InternationalYears and nonusi <> 'NI';
				Property: Bound, ShadowPrice, Level, Basic;
				Definition: {
					
					Sum((nUS),TotalTransportNonUS(nUS,nonusi,tc,cyr))+
					Sum((USe),TotalTransportUS(USe,nonusi,tc,cyr))
					-InternationalDemand(nonusi,tc,cyr) * MtceToBtu=
					0
				}
			}
			Constraint BalanceThermalwithUSDomestic {
				IndexDomain: {
					(USe,cyr)!|ExportsSupplyByExportRegionThermal(Use,cyr)
				}
				Property: Bound, ShadowPrice, Level, Basic;
				Definition: {
					TotalTransportfromCountrye(USe,'2',cyr)-
					ExportsSupplyByExportRegionThermal(USe,cyr)=0
				}
			}
			Constraint BalanceCokingwithUSDomestic {
				IndexDomain: {
					(USe,cyr)!|ExportsSupplyByExportRegionCoking(USe,cyr)
				}
				Property: Bound, ShadowPrice, Level, Basic;
				Definition: {
					TotalTransportfromCountrye(USe,'1',cyr)-
					ExportsSupplyByExportRegionCoking(USe,cyr)=0
				}
			}
			Constraint USImportThermalBalance {
				IndexDomain: (USi,cyr);
				Definition: {
					Sum(nUS,TotalTransportNonUS(nUS,USi,'2',cyr))=ImportsElectricitySubtotal(USi,cyr)
					+ImportsIndustrialSubtotal(USi,cyr)
				}
			}
			Constraint USImportCokingBalance {
				IndexDomain: (USi,cyr);
				Definition: Sum(nUS,TotalTransportNonUS(nUS,USi,'1',cyr))-ImportsCokingSubtotal(USi,cyr) <=0;
			}
			Constraint USImportBalanceIntlExportsToUS {
				IndexDomain: (nUS,cyr);
				Definition: {
					Sum((USi,tc),TotalTransportNonUS(nUS,USi,tc,cyr))=
					Sum((nsteps,usi,DReg,pt2)|USDRegImportMapping(USi,DReg)=-1 and nsteps <3,
					ImportsElectricity(NSTEPS,nUS,usi,DReg,pt2,cyr)) +
					Sum((IndSec,DReg,usi)|USDRegImportMapping(USi,DReg)=-1,
					ImportsIndustrial(IndSec,DReg,nUS,usi,cyr)) +
					Sum((CokSec,DReg,usi)|USDRegImportMapping(USi,DReg)=-1,
					ImportsCoking(CokSec,DReg,nUS,usi,cyr))
				}
			}
		}
	}
	Section Coal_Production_Submodule {
		Procedure CalculationOfCoalPricingEquation {
			Body: {
				!for yr | (val(yr) >= CurrentStudyYear) do
				
				if (ncntrl_curitr('1') = 1)then
					if TempFortranLagPriceFlag = 1 then
					LAG_PRI(Scrv1,SReg,Sulf,Mtyp,Rank,fyr) := TempFortranLag_Pric(fyr,Scrv1,SReg,Sulf,Mtyp,Rank);
					else
					   	LAG_PRI(Scrv1,SReg,Sulf,Mtyp,Rank,fyr) := If mcnt_prev(Scrv1,SReg,Sulf,Mtyp,Rank) then
						mcnt_prev(Scrv1,SReg,Sulf,Mtyp,Rank)*Btu(Scrv1,SReg,Sulf,Mtyp,Rank)*MC_JPGDP('1992')/MC_JPGDP('1987')
						else
							Lag_pri_ecp_pecp(Scrv1,'1',fyr)
						endif;
					! Test not emptying qprods DAF 10/12/18
					!	empty qprods;     ! Lets try emptying prior production for Iter=1 so we start with prior year production  DAF 12-29-17
						qprods(SReg,Sulf,MTyp,Rank) := sum((Scrv1),LAG_PROD(SCrv1,SReg,Sulf,MTyp,Rank,CurrentStudyYear)) ;
					endif;
				endif;
				
				!if (ncntrl_curitr('1') = 1 and ord(fyr) < (CPSBaseYr+1))then  !this should mimic lag_prod -- not in AIMMS -- BUT THE VARIABLE OF THE NAME 'LAG_PROD' IN FORTRAN CODE
				
				!	LAG_PROD3(Scrv1,SReg,Sulf,Mtyp,Rank,fyr) := by_prod(Scrv1,SReg,Sulf,Mtyp,Rank)
				
				!endif;
				
				for yr | (val(yr) >= CurrentStudyYear) do
				if (ncntrl_curitr('1') = 1)then
					! Removed this TempFortan Read, it was confusing with the nested if statements DAF 10-19-18
					!if TempFortranLagProd3Flag = 1 then
					!	LAG_PROD3(Scrv1,SReg,Sulf,Mtyp,Rank,fyr) := TempFortranLag_Prod3(fyr,Scrv1,SReg,Sulf,Mtyp,Rank);
				
					LAG_PROD3((Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) :=   !This should be whatever was solved for most recently regardless of year
						if (yr <= CPSBaseYr+1) THEN
							BY_PROD(SCrv1,SReg,Sulf,MTyp,Rank)
						else
							ProdVolSolutionPriorYr(yr-1,Scrv1,Sreg,Sulf,Mtyp,Rank)
						endif;
						!Sum((mx_ncl,mnumyr)|Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and MAP_mnumyr_yr(MNUMYR,fyr),
						!uso2grp_xcl_qecp(mx_ncl,'1',mnumyr-1)/Btu(Scrv1,SReg,Sulf,Mtyp,Rank))
				
					else LAG_PROD3((Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) :=  qprods(SReg,Sulf,Mtyp,Rank);
				
					!if qprods(SReg,Sulf,Mtyp,Rank) then
					!		qprods(SReg,Sulf,Mtyp,Rank)	
				endif;
				if (ncntrl_curitr('1') = 1)then
				
					if TempFortranProdCapFlag = 1 then  !for debugging purposes only
					FY_PROD_CAP(yr,SCrv1,SReg,Sulf,MTyp,Rank):= TempFortranFY_PROD_CAP(yr,Scrv1,SReg,Sulf,Mtyp,Rank);
					else
				
					FY_PROD_CAP((yr,SCrv1,SReg,Sulf,MTyp,Rank)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)):=if (Ord(yr) <= ord(CPSBaseYr)) THEN
				        	BY_PROD_CAP(SCrv1,SReg,Sulf,MTyp,Rank)
						elseif (LAG_PROD3(SCrv1,SReg,Sulf,MTyp,Rank,yr) <= FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank)*
				        	util_min(SCrv1,SReg,Sulf,MTyp,Rank)) THEN
				
				        	FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank) * (1-util_min_adj(SCrv1,SReg,Sulf,MTyp,Rank))
				
						elseif (LAG_PROD3(SCrv1,SReg,Sulf,MTyp,Rank,yr) >= FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank)*
				        	util_max(SCrv1,SReg,Sulf,MTyp,Rank)) THEN
				
				        	FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank) * (1+util_max_adj(SCrv1,SReg,Sulf,MTyp,Rank))
				
						elseif (LAG_PROD3(SCrv1,SReg,Sulf,MTyp,Rank,yr) >= FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank)*
				        	util_mid(SCrv1,SReg,Sulf,MTyp,Rank)) THEN
				
				        	FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank) * (1+util_mid_adj(SCrv1,SReg,Sulf,MTyp,Rank))
				
						else
				        	FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank)
						ENDIF;
					endif;
					FY_PROD_CAP2a((yr,Scrv1,SReg, Sulf, Mtyp, Rank)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank))	:= FY_PROD_CAP(yr,Scrv1,SReg,Sulf,Mtyp,Rank);
					FY_PROD_CAP2((Scrv1,SReg, Sulf, Mtyp, Rank,yr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank))	:=if Btu(Scrv1,SReg, Sulf, Mtyp, Rank) then
									FY_PROD_CAP2a(yr,Scrv1,SReg, Sulf, Mtyp, Rank)
				        				*Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
				        				endif;
					FY_PROD_CAP3((SReg, Sulf, Mtyp, Rank,yr)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank))		:=Sum((Scrv1)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),FY_PROD_CAP2(Scrv1,SReg, Sulf, Mtyp, Rank,yr));
				
				 	FY_PROD_CAP_X((Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) :=FY_PROD_CAP(yr,Scrv1,SReg,Sulf,Mtyp,Rank);
				
				        T_util2((Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) :=
				        	if (yr < CPSBaseYr + 3) then
				        		! let's not shift the supply curves during the first few years of the projection 8-01-2018 DAF
				        		BY_CAP_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank)
				        	elseif fy_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank) then
							!Qprods(SReg,Sulf,Mtyp,Rank)/FY_PROD_CAP(fyr,Scrv1,SReg,Sulf,Mtyp,Rank)
							! this was not being cacluated correct. changed 5-07-2018 DAF
							ProductionVolumeTons3(yr,Scrv1,SReg,Sulf,Mtyp,Rank)/FY_PROD_CAP(yr,Scrv1,SReg,Sulf,Mtyp,Rank)
						endif;
				
				
				endif;
				endfor;
				
				
				           if (ncntrl_curitr('1') = 1)then
					   	if TempFortranLag_prodFlag = 1 then  ! for debugging purposes only
						LAG_PROD3((Scrv1,SReg,Sulf,Mtyp,Rank,fyr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) := TemFortranLAG_PROD(Scrv1,SReg,Sulf,Mtyp,Rank,fyr);
						else
							LAG_PROD((Scrv1,SReg,Sulf,Mtyp,Rank,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) := if (fyr < CPSBaseYr + 1) then
				
				        		BY_CAP_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank) * BY_PROD_CAP(Scrv1,SReg,Sulf,Mtyp,Rank)
				
							else
								if (T_UTIL2(Scrv1,SReg,Sulf,Mtyp,Rank,fyr) < BY_Cap_util(Scrv1,SReg,Sulf,Mtyp,Rank)) then
				
								FY_PROD_CAP(fyr,Scrv1,Sreg,Sulf,Mtyp,Rank) * BY_Cap_util(Scrv1,SReg,Sulf,Mtyp,Rank)
				
				        			elseif (T_UTIL2(Scrv1,SReg,Sulf,Mtyp,Rank,fyr) > Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank)) then
				
				       				fy_prod_cap(fyr,Scrv1,SReg,Sulf,Mtyp,Rank) * Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank)
				
				        			else
				         !       	QtargProductionTonsforCPS1(Scrv1,SReg,Sulf,Mtyp,Rank,fyr)
				         !			ProductionVolumeTons1(SReg,Sulf,Mtyp,Rank,fyr-1)
				         			QTarget(Scrv1,SReg,Sulf,Mtyp,Rank,fyr)
				        			endif
							endif;
						endif;
					   endif;
				
				for yr | (val(yr) >= CurrentStudyYear) do
					   if TempFortranFPFlag = 1 then
					   Mult((SCrv1,SReg,Sulf,MTyp,Rank,yr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)):=TempFortranFP(Scrv1,SReg,Sulf,Mtyp,Rank,yr);
					   else
				
					   Mult((SCrv1,SReg,Sulf,MTyp,Rank,yr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) :=
						if (Val(yr) <= Val(CPSBaseYr)) then
				    			BY_MULT(SCrv1,SReg,Sulf,MTyp,Rank)
						else
				    			BB(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			(FY_TPH(yr,SCrv1,SReg,Sulf,MTyp,Rank)^RC_TPH_T(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			(FY_WAGE(SCrv1,SReg,Sulf,MTyp,Rank,yr)^RC_Wage_T(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			(Usr_Cst_Capital(SCrv1,SReg,Sulf,MTyp,Rank,yr)^RCoe_UserCstCap(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			(MINE_FUEL(yr,SCrv1,SReg,Sulf,MTyp,Rank)^RC_Fuel_T(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			(FY_PROD_CAP(yr,SCrv1,SReg,Sulf,MTyp,Rank)^RC_PROD_CAP_T(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			(P_OPER_OTH(SCrv1,SReg,Sulf,MTyp,Rank,yr)^RCoe_POperOth(SCrv1,SReg,Sulf,MTyp,Rank))*
				    			  (LAG_PRI(SCrv1,SReg,Sulf,MTyp,Rank,yr)^RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			   (FY_TPH(yr,SCrv1,SReg,Sulf,MTyp,Rank)^((-1.* RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			    RC_TPH_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (FY_WAGE(SCrv1,SReg,Sulf,MTyp,Rank,yr)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				    			   RC_Wage_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (Usr_Cst_Capital(SCrv1,SReg,Sulf,MTyp,Rank,yr)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			    RCoe_UserCstCap(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (MINE_FUEL(yr,SCrv1,SReg,Sulf,MTyp,Rank)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			    RC_Fuel_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (FY_PROD_CAP(yr,SCrv1,SReg,Sulf,MTyp,Rank)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			    RC_PROD_CAP_T(SCrv1,SReg,Sulf,MTyp,Rank))[-])*
				   			   (P_OPER_OTH(SCrv1,SReg,Sulf,MTyp,Rank,yr)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			    RCoe_POperOth(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (((LAG_PROD(SCrv1,SReg,Sulf,MTyp,Rank,yr)/FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank))*100.0)^
				   			   (-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			   (RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			   ((((LAG_PROD(SCrv1,SReg,Sulf,MTyp,Rank,yr)/FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank))*100.0)/
				   			 CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop))))*
				   			(CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank)^((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
				   			(((((LAG_PROD(SCrv1,SReg,Sulf,MTyp,Rank,yr)/FY_PROD_CAP(yr-1,SCrv1,SReg,Sulf,MTyp,Rank))*100.0)/
				    			CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop)*RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
				    			(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))))
							endif;
						endif;
				endfor;
				! let's not shift the supply curves during the first few years of the projection 8-01-2018 DAF	
				
					QTarget((Scrv1,SReg,Sulf,Mtyp,Rank,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) := 
						if (Val(fyr) <= Val(CPSBaseYr)) then
							BY_PROD(SCrv1,SReg,Sulf,MTyp,Rank)
						!else qprods(SReg,Sulf,Mtyp,Rank)  ! try something different for this QTarg variable 11-15-2022 DAF
						else
							if (ncntrl_curitr('1') = 1)then ProductionVolumeTons(SReg, Sulf, Mtyp, Rank,PreviousYear)
										   else ProductionVolumeTons(SReg, Sulf, Mtyp, Rank,CurrentStudyYear)
							endif
						endif;
				
					T_util((Scrv1,SReg,Sulf,Mtyp,Rank,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) :=!if fy_prod_cap(fyr,Scrv1,SReg,Sulf,Mtyp,Rank) then
										QTarget(Scrv1,SReg,Sulf,Mtyp,Rank,fyr)/$FY_PROD_CAP(fyr,Scrv1,SReg,Sulf,Mtyp,Rank);
										!endif;
					if TempFortranTQtargCmmFlag = 1 then
					T_QTARG_CMM(SCrv1,SReg,Sulf,MTyp,Rank,fyr):= TempFortranT_QTARG_CMM(Scrv1,SReg,Sulf,Mtyp,Rank,fyr);
				
					else
						T_QTARG_CMM((SCrv1,SReg,Sulf,MTyp,Rank,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)):=if BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank) > 0.0 then
				  						if (Val(fyr) <= Val(CPSBaseYr)) then
				       						BY_PROD_CAP(SCrv1,SReg,Sulf,MTyp,Rank) * BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank)
				  						elseif ((Val(fyr) > Val(CPSBaseYr)) AND
				         					T_util(Scrv1,SReg,Sulf,Mtyp,Rank,fyr)) < Util_Min(SCrv1,SReg,Sulf,MTyp,Rank) then
				       						FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank) * Util_Min(SCrv1,SReg,Sulf,MTyp,Rank)
				  						elseif (Val(fyr) > Val(CPSBaseYr)) AND
				         					T_util(Scrv1,SReg,Sulf,Mtyp,Rank,fyr) <= Util_Max(SCrv1,SReg,Sulf,MTyp,Rank) then
				       						QTarget(SCrv1,SReg,Sulf,MTyp,Rank,fyr)
				  						else
				       						FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank) * Util_Max(SCrv1,SReg,Sulf,MTyp,Rank)
				  						endif
									   endif;
					endif;
				
					T_QUAN((Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) := min(T_QTARG_CMM(SCrv1,SReg,Sulf,MTyp,Rank,fyr) * (1.0 + StepSize(SCrv1Step)),
											FY_Prod_Cap(fyr,SCrv1,SReg,Sulf,MTyp,Rank)*0.99);  !Capped at 99% of FY_Prod_Cap  12-28-17 DAF
				
					SC_PRICE((Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)):=if Val(SCrv1Step) <= (5) then
				    				(MULT(SCrv1,SReg,Sulf,MTyp,Rank,fyr) * (CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank)^(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
				    				((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*((((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/
				     				FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank))*100.0)/CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpBot))))) *
				    				(((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank)))*100.0)^
				    				(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*(((((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/
				     				FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank)))*100.0)/
				    				 CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpBot))) + CALK(SCrv1,SReg,Sulf,MTyp,Rank)
								else
				    				(MULT(SCrv1,SReg,Sulf,MTyp,Rank,fyr) * (CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank)^(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
				    				((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*((((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/
				     				FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank))*100.0)/CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop))))) *
				    				(((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank)))*100.0)^
				    				(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*(((((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/
				    				 FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank)))*100.0)/
				     				CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop))) + CALK(SCrv1,SReg,Sulf,MTyp,Rank)
								endif;
				
				
				
				
				
					SC_PRICE87((Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) := ((SC_PRICE(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr) *  (MC_JPGDP('1987')/MC_JPGDP('1992'))) +
				 				 ADJ_MMP_ADD(SCrv1,SReg,Sulf,MTyp,Rank,fyr)) * ADJ_MMP_MULT(SCrv1,SReg,Sulf,MTyp,Rank,fyr);
				
				
					SC_1_PRICE87((Scrv1,SReg, Sulf, Mtyp, Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank))	:=if Btu(Scrv1,SReg, Sulf, Mtyp, Rank) then
									(SC_PRICE87(Scrv1,SReg, Sulf, Mtyp, Rank,Scrv1Step,fyr)/
									Btu(Scrv1,SReg, Sulf, Mtyp, Rank))
									endif;
				
					SC_2_PRICE87((SReg, Sulf, Mtyp, Rank,Scrv1Step,fyr)| SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank))	:= !had to divide by 2 because the sum scrv1 causes everything to be multiplied by 2
				Sum((Scrv1),SC_1_PRICE87(Scrv1,SReg, Sulf, Mtyp, Rank,Scrv1Step,fyr));
				
					 SC_QUAN((Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) := if Val(SCrv1Step) = 1 then
				   				T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)
								else
				   				T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)*1.00001 - T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step-1,fyr)
								endif;     ! Multiplied target quantity by small multiplier to keep supply curve step 11 from not being eliminated in a spase matrix
				
				
				SC_QUAN1a((SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)):=
									Sum(Scrv1|Btu(Scrv1,SReg,Sulf,Mtyp,Rank),
								SC_QUAN(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)*Btu(Scrv1,SReg,Sulf,Mtyp,Rank));
				
				SC_QUAN1((SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)):=if TempFortranPriceAndQtyFlag =1 then
									TempFortranQuantity(SReg,Sulf,Mtyp,Rank,Scrv1step,fyr)
									else
									SC_QUAN1a(SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)
									endif;
				
				
				
				
				
				
				!added on 081414, previously only u
				  if printpricedebug('1')=1 then
				        if ncntrl_curitr('1') = '1'  then
				        write to table Sc_priceitr1;
				        write to table Sc_priceitr1a;
				        write to table Sc_priceitr1b;
				        endif;
					if ncntrl_curitr('1') = '2'  then
				        write to table Sc_priceitr2;
				        write to table Sc_priceitr2a;
				        write to table Sc_priceitr2extra;
				        write to table Sc_priceitr2b;
				        endif;
				        if ncntrl_curitr('1') = '3'  then
				        write to table Sc_priceitr3;
				        write to table Sc_priceitr3a;
				        write to table Sc_priceitr3extra;
				        write to table Sc_priceitr3b;
				        endif;
				        if ncntrl_curitr('1') = '4'  then
				        write to table Sc_priceitr4;
				        write to table Sc_priceitr4a;
				        write to table Sc_priceitr4b;
				        endif;
				        if ncntrl_curitr('1') = '5'  then
				        write to table Sc_priceitr5;
				        write to table Sc_priceitr5a;
				        write to table Sc_priceitr5b;
				        endif;
				        if ncntrl_curitr('1') = '6'  then
				        write to table Sc_priceitr6;
				        write to table Sc_priceitr6a;
				        write to table Sc_priceitr6b;
				        endif;
				        if ncntrl_curitr('1') = '7'   then
				        write to table Sc_priceitr7;
				        write to table Sc_priceitr7a;
				        write to table Sc_priceitr7b;
				        endif;
				endif;
				
				
				
				
				!endfor;
			}
		}
		Procedure CalculationOfCoalPricingEquationBaseYearItr1 {
			Body: {
				!for yr | (val(yr) >= CurrentStudyYear) do
					MinersbySupplyRegionYr((SReg,fyr)):= miners(SReg);
				        FY_PROD_CAP((fyr,SCrv1,SReg,Sulf,MTyp,Rank)):= BY_PROD_CAP(SCrv1,SReg,Sulf,MTyp,Rank);
				        FY_PROD_CAP_X((Scrv1,SReg,Sulf,Mtyp,Rank,fyr)) :=FY_PROD_CAP(fyr,Scrv1,SReg,Sulf,Mtyp,Rank);
				
					LAG_PRI((Scrv1,SReg,Sulf,Mtyp,Rank,fyr)) := BY_MMP92(Scrv1,SReg,Sulf,Mtyp,Rank);
				
					QTarget((Scrv1,SReg,Sulf,Mtyp,Rank,fyr)) :=  BY_PROD(Scrv1,SReg,Sulf,Mtyp,Rank);
				
					LAG_PROD((Scrv1,SReg,Sulf,Mtyp,Rank,fyr)) := BY_PROD(Scrv1,SReg,Sulf,Mtyp,Rank);
				
					T_QTARG_CMM((SCrv1,SReg,Sulf,MTyp,Rank,fyr)):= BY_PROD_CAP(SCrv1,SReg,Sulf,MTyp,Rank) * BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank);
				
					Mult((SCrv1,SReg,Sulf,MTyp,Rank,fyr)):= BY_MULT(SCrv1,SReg,Sulf,MTyp,Rank);
				
					T_QUAN((Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) := min(T_QTARG_CMM(SCrv1,SReg,Sulf,MTyp,Rank,fyr) * (1.0 + StepSize(SCrv1Step)),
												FY_Prod_Cap(fyr,SCrv1,SReg,Sulf,MTyp,Rank)*0.99);  !Capped at 99% of FY_Prod_Cap  12-22-17 DAF
				
					SC_PRICE((Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)):=if Val(SCrv1Step) <= (5) then
				    				(MULT(SCrv1,SReg,Sulf,MTyp,Rank,fyr) * (CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank)^(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
				    				((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*((((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/
				     				FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank))*100.0)/CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpBot))))) *
				    				(((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank)))*100.0)^
				    				(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*(((((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/
				     				FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank)))*100.0)/
				    				 CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpBot))) + CALK(SCrv1,SReg,Sulf,MTyp,Rank)
								else
				    				(MULT(SCrv1,SReg,Sulf,MTyp,Rank,fyr) * (CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank)^(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
				    				((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*((((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/
				     				FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank))*100.0)/CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop))))) *
				    				(((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank)))*100.0)^
				    				(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*(((((T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)/
				    				 FY_PROD_CAP(fyr,SCrv1,SReg,Sulf,MTyp,Rank)))*100.0)/
				     				CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop))) + CALK(SCrv1,SReg,Sulf,MTyp,Rank)
								endif;
				
					SC_QUAN((Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) := if Val(SCrv1Step) = 1 then
				   				T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr)
								else
				   				T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr) - T_QUAN(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step-1,fyr)
								endif;
				
					SC_PRICE87((Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank)) := ((SC_PRICE(SCrv1,SReg,Sulf,MTyp,Rank,SCrv1Step,fyr) *  (MC_JPGDP('1987')/MC_JPGDP('1992'))) +
				 				 ADJ_MMP_ADD(SCrv1,SReg,Sulf,MTyp,Rank,fyr)) * ADJ_MMP_MULT(SCrv1,SReg,Sulf,MTyp,Rank,fyr);
				!items below here are for LP
				
				
				SC_QUAN1a((SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)):=
									Sum(Scrv1|Btu(Scrv1,SReg,Sulf,Mtyp,Rank),
								SC_QUAN(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)*Btu(Scrv1,SReg,Sulf,Mtyp,Rank));
				
				SC_QUAN1((SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)| SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank)):=if TempFortranPriceAndQtyFlag =1 then
									TempFortranQuantity(SReg,Sulf,Mtyp,Rank,Scrv1step,fyr)
									else
									SC_QUAN1a(SReg,Sulf,Mtyp,Rank,Scrv1Step,fyr)
									endif;
				
				SC_1_PRICE87((Scrv1,SReg, Sulf, Mtyp, Rank,Scrv1Step,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank))	:=if Btu(Scrv1,SReg, Sulf, Mtyp, Rank) then
									(SC_PRICE87(Scrv1,SReg, Sulf, Mtyp, Rank,Scrv1Step,fyr)/
									Btu(Scrv1,SReg, Sulf, Mtyp, Rank))
									endif;
				
				SC_2_PRICE87((SReg, Sulf, Mtyp, Rank,Scrv1Step,fyr))	:= !had to divide by 2 because the sum scrv1 causes everything to be multiplied by 2
				Sum((Scrv1),SC_1_PRICE87(Scrv1,SReg, Sulf, Mtyp, Rank,Scrv1Step,fyr));
				FY_PROD_CAP2a((fyr,Scrv1,SReg, Sulf, Mtyp, Rank))	:=FY_PROD_CAP(fyr,Scrv1,SReg,Sulf,Mtyp,Rank);
				FY_PROD_CAP2((Scrv1,SReg, Sulf, Mtyp, Rank,fyr)| Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank))	:=if Btu(Scrv1,SReg, Sulf, Mtyp, Rank) then
									FY_PROD_CAP2a(fyr,Scrv1,SReg, Sulf, Mtyp, Rank)
				        				*Btu(Scrv1,SReg, Sulf, Mtyp, Rank)
				        				endif;
				FY_PROD_CAP3(SReg, Sulf, Mtyp, Rank,fyr):=Sum((Scrv1)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),FY_PROD_CAP2(Scrv1,SReg, Sulf, Mtyp, Rank,fyr));
				Mercury2(SReg, Sulf, Mtyp, Rank)				:=Sum((Scrv1)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),Mercury(Scrv1,SReg, Sulf, Mtyp, Rank));
				Carbon2(SReg, Sulf, Mtyp, Rank)					:=Sum((Scrv1)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),Carbon(Scrv1,SReg, Sulf, Mtyp, Rank));
				FY_TPH1(SReg,Sulf,Mtyp,Rank,fyr)	:=Sum((Scrv1)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank),FY_TPH(fyr,Scrv1,SReg,Sulf,Mtyp,Rank));
				BY_PROD1(SReg, Sulf, Mtyp, Rank)				:=Sum((Scrv1)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),BY_PROD(Scrv1,SReg, Sulf, Mtyp, Rank));
				BY_MMP1(SReg, Sulf, Mtyp, Rank)					:=Sum((Scrv1)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank),BY_MMP(Scrv1,SReg, Sulf, Mtyp, Rank));
				
				
				!Below:  for debugging purposes
				if printpricedebug('1')=1 then
				        if ncntrl_curitr('1') = '1'  then
				        write to table Sc_priceitr1;
				        write to table Sc_priceitr1a;
				        write to table Sc_priceitr1b;
				        endif;
				endif;
				!endfor;
			}
		}
		DeclarationSection Cluser_Input_Variables_SCrv1 {
			Parameter SCrvOrder {
				IndexDomain: (SCrv1);
			}
			Parameter BY_PROD {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Base Year Coal Production";
			}
			Parameter BY_MMP {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Base Year Minemouth Coal Price (1987$ per short ton)";
			}
			Parameter BY_PROD_CAP {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Base Year Productive Capacity";
			}
			Parameter BY_TPH {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Base Year Labor Productivity";
			}
			StringParameter CSupplyRegionName {
				IndexDomain: Sreg;
			}
			StringParameter CSupplyRegionName1 {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Coal Supply Region Name";
			}
			StringParameter SRegStates {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Coal Supply Region States Label";
			}
			StringParameter MTypeLabel {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Mine Type Label";
			}
			StringParameter RankLabel {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Coal Grade or Rank Label";
			}
			StringParameter SulfLabel {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Sulfur Category Label";
			}
			Parameter Btu {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Heat Content (million Btu/short ton)";
			}
			Parameter Btu2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank);
				Definition: Sum(Scrv1,Btu(Scrv1,SReg,Sulf,Mtyp,Rank));
			}
			Parameter Sulfur {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Sulfur Content (lbs sulfur/million Btu)";
			}
			Parameter Carbon {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Carbon Content (lbs CO2/million Btu)";
			}
			Parameter Mercury {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Mercury Content (lbs Hg/million Btu)";
			}
			Parameter BY_CAP_UTIL {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Base Year Capacity Utilization (fraction)";
			}
			Parameter CAP_UTIL_HIST {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Avg Historical Capacity Utilization (percent)";
			}
			Parameter BY_PROD_CAP_ADJ {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Intercept Adjustment Factor for Productive Capacity Term";
			}
			Parameter BY_MMP_ADJ {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Intercept Adjustment for Minemouth Price Term";
			}
			Parameter ELEC_SHARE {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Electricity Share of Mine Fuel Usage (fraction of consumption Btu\'s)";
			}
			Parameter DIST_SHARE {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Diesel Fuel Share of Mine Fuel Usage (fraction of consumption Btu\'s)";
			}
			Parameter BY_WAGE {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Base Year Coal Industry Wage (1987$ dollars per year)";
			}
			Parameter BY_ELEC_PRICE {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Base Year Industrial Sector Electricity Price (1992$ per million Btu)";
			}
			Parameter RCoe_OCont {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficient for overall constant term for coal pricing model";
			}
			Parameter RCoe_SregCont {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficients for regional intercept term";
			}
			Parameter RCoe_MTypeCont {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficients for mine type intercept term";
			}
			Parameter RCoe_TPH {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficient for overall labor productivity term";
			}
			Parameter TPH_SDA {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "User-specified adjustment for overall labor productivity coefficient";
			}
			Parameter RCoe_SRegTPH {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficients for regional labor productivity terms";
			}
			Parameter RCoe_SRegMTypeTPH {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficients for regional/mine type productivity terms";
			}
			Parameter RCoe_MTypeTPH {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficients for mine type labor productivity terms";
			}
			Parameter RCoe_Util {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficient for overall mine capacity utilization term";
			}
			Parameter RCoe_MTypeUtil {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficients for mine type capacity utilization terms";
			}
			Parameter RCoe_ProdCap {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficient for overall mine productive capacity term";
			}
			Parameter ProdCap_SDA {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "User-Specified adjustment for overall productive capacity term";
			}
			Parameter RCoe_MTypeProdCap {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficients for mine type productive capacity terms";
			}
			Parameter RCoe_SRegMTypeCont {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression Coefficients for region/mine type intercept term";
			}
			Parameter RCoe_Wage {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficient for overall coal industry wage term";
			}
			Parameter RCoe_MTypeWage {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficients for mine type coal industry wage terms";
			}
			Parameter RCoe_Fuel {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficient for overall coal mine fuel cost term";
			}
			Parameter RCoe_MTypeFuel {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficients for mine type fuel cost terms";
			}
			Parameter RCoe_UserCstCap {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficient for overall coal mine user cost of capital term";
			}
			Parameter RCoe_POperOth {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficient for other operating costs term";
			}
			Parameter RCoe_Rho {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Regression coefficient for the first-order autocorrelation term";
			}
			Parameter Util_Max {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Maximum Trigger Point for Mine Capacity Utilization";
			}
			Parameter Util_Max2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank);
				Text: "Maximum Trigger Point for Mine Capacity Utilization";
				Definition: Sum(Scrv1|Btu(Scrv1,SReg,Sulf,Mtyp,Rank),Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank));
			}
			Parameter Util_Mid {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Mid-Level Trigger Point for Mine Capacity Utilization";
			}
			Parameter Util_Min {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Minimum Trigger Point for Mine Capacity Utilization";
			}
			Parameter Util_Max_Adj {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Upward Capacity Adjustment Factor for Util_Max Term";
			}
			Parameter Util_Mid_Adj {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Upward Capacity Adjustment Factor for Util_Mid Term";
			}
			Parameter Util_Min_Adj {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Text: "Downward Capacity Adjustment Factor for Util_Min Term";
			}
			Parameter RC_Cont_T {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: {
					RCoe_OCont(SCrv1,SReg,Sulf,MTyp,Rank) + RCoe_SregCont(SCrv1,SReg,Sulf,MTyp,Rank) +
					RCoe_MTypeCont(SCrv1,SReg,Sulf,MTyp,Rank) + RCoe_SRegMTypeCont(SCrv1,SReg,Sulf,MTyp,Rank)
				}
			}
			Parameter RC_TPH_T {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: {
					RCoe_TPH(SCrv1,SReg,Sulf,MTyp,Rank) + RCoe_SRegTPH(SCrv1,SReg,Sulf,MTyp,Rank) +
					RCoe_MTypeTPH(SCrv1,SReg,Sulf,MTyp,Rank) + RCoe_SRegMTypeTPH(SCrv1,SReg,Sulf,MTyp,Rank)
				}
			}
			Parameter RC_PROD_CAP_T {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: RCoe_ProdCap(SCrv1,SReg,Sulf,MTyp,Rank) + RCoe_MTypeProdCap(SCrv1,SReg,Sulf,MTyp,Rank);
			}
			Parameter RC_Util_T {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: RCoe_Util(SCrv1,SReg,Sulf,MTyp,Rank) + RCoe_MTypeUtil(SCrv1,SReg,Sulf,MTyp,Rank);
			}
			Parameter RC_Fuel_T {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: RCoe_Fuel(SCrv1,SReg,Sulf,MTyp,Rank) + RCoe_MTypeFuel(SCrv1,SReg,Sulf,MTyp,Rank);
			}
			Parameter RC_Wage_T {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: RCoe_Wage(SCrv1,SReg,Sulf,MTyp,Rank) + RCoe_MTypeWage(SCrv1,SReg,Sulf,MTyp,Rank);
			}
		}
		DeclarationSection Cluser_Input_Variables_SCrv1_Yr {
			Parameter TPH_Growth_Rate {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "User-Specified Productivity Growth Rates by Year";
			}
			Parameter WAGE_MULTIPLIER {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "Annual User-Specified Growth Rates for Wages";
			}
			Parameter ADJ_MMP_MULT {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "User-Specified Adjustment to Minemouth Prices by Year, Multiplier";
			}
			Parameter ADJ_MMP_ADD {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "User-Specified Adjustment to Minemouth Prices by Year, Adder";
			}
			Parameter P_EQUIP {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "PPIs for Mining Equipment by Year";
			}
			Parameter PPI_STEEL_EXPLO {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "PPIs for Other Mine Operating Costs by Year";
			}
			Parameter SCLIMIT {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "Annual Productive Capacity Limits by Supply Curve";
			}
		}
		DeclarationSection Cluser_Input_Variables_Singular {
			ElementParameter CPSBaseYr {
				Text: "Base year for CPS Data Inputs and Model Calibration";
				Range: AllYears;
				Definition: 2021;
			}
			ElementParameter CPSEndYr {
				Range: AllYears;
				Definition: '2050';
			}
			Parameter PPIMetalsSwitch {
				Text: "set to 1 to use PPI Metals variable from NEMS MACRO model and set to 0 to use PPI inputs from cluser file";
				InitialData: '0';
			}
			Parameter CCrvLimit_Max {
				Definition: 999.99;
			}
			Parameter UtilExpTop {
				Text: "Exponent for CPS Capacity Utilization Term, applied to Steps 6-11";
				InitialData: 2;
			}
			Parameter UtilExpBot {
				Text: "Exponent for CPS Capacity Utilization Term, applied to Steps 1-5";
				InitialData: 1.5;
			}
			Parameter CLMaxItr {
				Text: "Maximum number of coal iterations (was set to 7 in AEO\'s prior to the AEO2012)";
				InitialData: '4';
			}
			Parameter Oldyear;
			Parameter prtdbgc;
			Parameter curitr {
				InitialData: 1;
			}
			Parameter Redoflg {
				IndexDomain: cyr;
			}
			Parameter InterimRedoflg {
				IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,cyr)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank);
			}
			Parameter Mcnt_prev {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "This is the adjusted mine price from the previous iteration that will be used in CalculationOfCoalPricingEquation";
			}
			Parameter qprods {
				IndexDomain: (SReg,Sulf,Mtyp,Rank);
			}
			Parameter RedoTest {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
			}
		}
		DeclarationSection Cluser_Input_Variables_SCrv_Steps {
			Parameter StepSize {
				IndexDomain: (SCrv1Step);
				Text: "Coal supply curve step sizes as +/- percentage from Step 6 in 11 step curve";
				InitialData: {
					{     1 : -0.540,
					      2 : -0.270,
					      3 : -0.090,
					      4 : -0.030,
					      5 : -0.010,
					      6 :  0.0,
					      7 :  0.010,
					      8 :  0.030,
					      9 :  0.090,
					     10 :  0.270,
					     11 :  0.540 } ;
				}
				Comment: "Moved from an input read to just be defined as initial data in StepSize parameter  9/29/20 DAF";
			}
		}
		DeclarationSection NEMS_Input_Variables_by_SCrv1_Yr {
			Parameter LAG_PRI {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Lagged Minemouth Coal Price Solution From CDS 92$";
			}
			Parameter LAG_PRITemp {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "Lagged Minemouth Coal Price Solution From CDS";
				Definition: LAG_PRIInitial(Scrv1,SReg,Sulf,Mtyp,Rank,yr);
			}
			Parameter LAG_PRIInitial {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "Lagged Minemouth Coal Price Solution From CDS";
			}
			Parameter LAG_PROD {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Lagged Production Solution From CDS - only set on first iteration so re-located to MainExecution";
				Definition: {
					
					!if (ncntrl_curitr('1') = 1)then
					!if (yr < CPSBaseYr + 1) then
					!        BY_CAP_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank) * BY_PROD_CAP(Scrv1,SReg,Sulf,Mtyp,Rank)
					!else
					!        if (T_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank,yr) < BY_Cap_util(Scrv1,SReg,Sulf,Mtyp,Rank)) then
					!		FY_PROD_CAP(yr,Scrv1,Sreg,Sulf,Mtyp,Rank) * BY_Cap_util(Scrv1,SReg,Sulf,Mtyp,Rank)
					!        elseif (T_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank,yr) > Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank)) then
					!       		fy_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank) * Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank)
					!        else !equals util_max
					!                QtargProductionTonsforCPS1(Scrv1,SReg,Sulf,Mtyp,Rank,yr)
					!        endif
					!endif
					!endif
				}
				Comment: "This is the production target used in the MULT calculation for the CPS.";
			}
			Parameter LAG_PROD3 {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Lagged Production Solution From CDS - only set on first iteration so re-located to MainExecution";
				Definition: {
					
					!if (ncntrl_curitr('1') = 1)then
					!if (yr < CPSBaseYr + 1) then
					!        BY_CAP_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank) * BY_PROD_CAP(Scrv1,SReg,Sulf,Mtyp,Rank)
					!else
					!        if (T_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank,yr) < BY_Cap_util(Scrv1,SReg,Sulf,Mtyp,Rank)) then
					!		FY_PROD_CAP(yr,Scrv1,Sreg,Sulf,Mtyp,Rank) * BY_Cap_util(Scrv1,SReg,Sulf,Mtyp,Rank)
					!        elseif (T_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank,yr) > Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank)) then
					!       		fy_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank) * Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank)
					!        else !equals util_max
					!                QtargProductionTonsforCPS1(Scrv1,SReg,Sulf,Mtyp,Rank,yr)
					!        endif
					!endif
					!endif
				}
			}
			Parameter LAG_PROD_temp {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Text: "Lagged Production Solution From CDS";
			}
			Parameter QTarget {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Target Quantity From CDS Solution for Step 6 of Supply Curve";
				Definition: {
					!QTargTemp(Scrv1,SReg,Sulf,Mtyp,Rank,yr)
					
					!!QTargInitial(Scrv1,SReg,Sulf,Mtyp,Rank,yr)  !or use Mike's initial input file
				}
				Comment: {
					"QTarget should contain the production level from the prior year if in iteration 1 or the production from the prior iteration of the current run year.
					Added to CMMLagData_Identifiers when changed this to pick up ProductionVolumeTons parameter instead of qprods parameter.  11/16/2022 DAF"
				}
			}
			Parameter QTargTemp {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Target Quantity From CDS Solution for Step 5 of Supply Curve";
				Definition: {
					If ProductionVolumeTonsforQtarg(SReg,Sulf,Mtyp,Rank,yr) then
					Sum(cyr|cyr=yr,ProductionVolumeTonsforQtarg(SReg,Sulf,Mtyp,Rank,cyr))
					elseif
					LaggedProductionTonsforCPS1(Scrv1,SReg,Sulf,Mtyp,Rank,yr) then !called Lagged but isn't lagged
					Sum(cyr|cyr=yr,LaggedProductionTonsforCPS1(Scrv1,SReg,Sulf,Mtyp,Rank,cyr))
					else
					QTargInitial(Scrv1,SReg,Sulf,Mtyp,Rank,yr)  !or use Mike's initial input file
					endif
				}
				Comment: "This parameter QTargTemp does not appear to be used anwwhere in the code.";
			}
			Parameter QTargInitial {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
				Text: "Target Quantity From CDS Solution for Step 5 of Supply Curve";
			}
		}
		DeclarationSection NEMS_Input_Variables_by_CDiv_Yr {
			Parameter PELIN {
				IndexDomain: (CensDiv,Yr);
				Text: "Industrial Sector Electricity Price, 1987$/mmBtu";
				Definition: {
					Sum((mnumcr,mnumyr)|Map_Mnumcr_CensDiv(MNUMCR,CensDiv)=1
					and yr = mnumyr+1989,
					MPBLK_PELIN(MNUMCR,MNUMYR))
				}
			}
		}
		DeclarationSection NEMS_Input_Variables_by_Yr {
			Parameter MC_JPGDP {
				IndexDomain: Yr;
				Text: "GDP Deflator, 1987=1.0000";
				Definition: {
					!Sum((mnumy3)|yr = mnumy3 + 1986,MACOUT_MC_JPGDP(MNUMY3))
					
					Sum(mnumy3|MAP_mnumy3_yr(MNUMY3,yr),MACOUT_MC_JPGDP(MNUMY3))
				}
			}
			Parameter MC_RLRMCORPPUAA {
				IndexDomain: Yr;
				Text: "Real rate on AA-rated public utility bonds";
				Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),MACOUT_MC_RLRMCORPPUAA(MNUMYR));
			}
			Parameter PDSIN {
				IndexDomain: Yr;
				Text: "Industrial Sector Diesel Fuel Price, 1987$/mmBtu";
				Definition: {
					Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),
					MPBLK_PDSIN('11',MNUMYR))
				}
			}
			Parameter MC_WPI10 {
				IndexDomain: Yr;
				Text: "Producer Price Index-metals & metal prod";
				Definition: Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),MACOUT_MC_WPI10(MNUMYR));
			}
			Parameter PDSTR_MidAtlantic_A {
				IndexDomain: Yr;
				Text: "Transportation Sector Diesel Fuel Price, 1987$/mmBtu";
				Definition: {
					Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),
					MPBLK_PDSTR('2',MNUMYR))
				}
				Comment: "Mid Atlantic price is census region number 2.";
			}
			Parameter PDSTR_USAvg_A {
				IndexDomain: Yr;
				Text: "Transportation Sector Diesel Fuel Price, 1987$/mmBtu";
				Definition: {
					Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),
					MPBLK_PDSTR('11',MNUMYR))
				}
				Comment: "US average price is census region number 2.";
			}
			Parameter PDSTR_USAvg_A1_CurYearDol {
				IndexDomain: Yr;
				Text: "Transportation Sector Diesel Fuel Price, Current Year $/mmBtu";
				Definition: PDSTR_USAvg_A(yr) *  MC_JPGDP(OFBaseYr);
				Comment: "This should roughly match Grafnem Table 3 Line 30";
			}
			Parameter PRLTR_MidAtlantic_A {
				IndexDomain: Yr;
				Text: "Transportation Sector Low Sulfur Residual Fuel Price, 1987$/mmBtu";
				Definition: {
					Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),
					MPBLK_PRLTR('2',MNUMYR))
				}
				Comment: "Mid Atlantic price is census region number 2.";
			}
			Parameter PRLTR_MidAtlantic_A1_CurYearDol {
				IndexDomain: Yr;
				Text: "Transportation Sector Low Sulfur Residual Fuel Price, Current Year $/mmBtu";
				Definition: PRLTR_MidAtlantic_A(yr) *  MC_JPGDP(OFBaseYr);
				Comment: "Using Mid Atlantic region and low sulfur isnstead of all resid but trend should match Grafnem Table 3 Line 31";
			}
			Parameter PRHTR_MidAtlantic_A {
				IndexDomain: Yr;
				Text: "Transportation Sector High Sulfur Residual Fuel Price, 1987$/mmBtu";
				Definition: {
					Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),
					MPBLK_PRHTR('2',MNUMYR))
				}
				Comment: "Mid Atlantic price is census region number 2.";
			}
			Parameter MC_WPI10_MULTIPLIER {
				IndexDomain: Yr;
			}
		}
		DeclarationSection CPS_Generated_Input_Variables {
			Parameter BY_MMP92 {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: BY_MMP(SCrv1,SReg,Sulf,MTyp,Rank) *  (MC_JPGDP('1992')/MC_JPGDP('1987'));
			}
			Parameter BY_WAGE92 {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: BY_WAGE(SCrv1,SReg,Sulf,MTyp,Rank) *  (MC_JPGDP('1992')/MC_JPGDP('1987'));
			}
			Parameter FY_TPH {
				IndexDomain: (yr,SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: {
					!if (Yr <= CPSBaseYr) then
					!        BY_TPH(SCrv1,SReg,Sulf,MTyp,Rank)
					!else
					!        FY_TPHlag1(Yr,SCrv1,SReg,Sulf,MTyp,Rank) * TPH_Growth_Rate(SCrv1,SReg,Sulf,MTyp,Rank,Yr)
					!endif
				}
				Comment: "Moved to SetUpRateEscalators Procedure 6-12-20 DAF";
			}
			Parameter FY_TPHlag1 {
				IndexDomain: (yr,SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: {
					
					        FY_TPH(Yr-1,SCrv1,SReg,Sulf,MTyp,Rank)
				}
			}
			Parameter FY_WAGE {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Definition: BY_WAGE(SCrv1,SReg,Sulf,MTyp,Rank) * WAGE_MULTIPLIER(SCrv1,SReg,Sulf,MTyp,Rank,Yr) * (MC_JPGDP('1992')/MC_JPGDP('1987'));
			}
			Parameter Usr_Cst_Capital {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Definition: {
					IF (Ord(Yr) <= Ord(CPSBaseYr)) THEN
					        ((MC_RLRMCORPPUAA(CPSBaseYr)/100.0) + (0.1) -
					        ((P_EQUIP(SCrv1,SReg,Sulf,MTyp,Rank,CPSBaseYr)/$P_EQUIP(SCrv1,SReg,Sulf,MTyp,Rank,CPSBaseYr-1))-1)) *
					          P_EQUIP(SCrv1,SReg,Sulf,MTyp,Rank,CPSBaseYr)
					ELSE
					        ((MC_RLRMCORPPUAA(Yr)/100.0) + (0.1) -
					        ((P_EQUIP(SCrv1,SReg,Sulf,MTyp,Rank,Yr)/$P_EQUIP(SCrv1,SReg,Sulf,MTyp,Rank,Yr-1))-1)) *
					          P_EQUIP(SCrv1,SReg,Sulf,MTyp,Rank,Yr)
					ENDIF
				}
			}
			Parameter D_FUEL {
				IndexDomain: Yr;
				Definition: {
					IF (Ord(Yr) <= Ord(CPSBaseYr)) THEN
					        PDSIN(CPSBaseYr) * (MC_JPGDP('1992')/MC_JPGDP('1987'))
					ELSE
					        PDSIN(Yr) * (MC_JPGDP('1992')/MC_JPGDP('1987'))
					ENDIF
				}
			}
			Parameter PPI_METALS {
				IndexDomain: Yr;
				Definition: MC_WPI10(Yr)*100.0*(MC_JPGDP('1992')/MC_JPGDP(Yr))*MC_WPI10_MULTIPLIER(Yr);
			}
			Parameter E_FUEL {
				IndexDomain: (CensDiv,Yr);
				Definition: {
					PELIN(CensDiv,YR)  !* (MC_JPGDP('1992')/MC_JPGDP('1987'))
				}
			}
			ElementParameter SelectedCensusDiv {
				IndexDomain: (SCrv1,Yr);
				Range: CensusDivision;
				Definition: {
					if (Val(Yr) <= Val(CPSBaseYr)) then
					                       ''
					elseif ((Val(Yr) > Val(CPSBaseYr)) AND (Val(SCrv1) <= 6)) then
					        '02MAT'
					elseif ((Val(Yr) > Val(CPSBaseYr)) AND (Val(SCrv1) >= 7) AND (Val(SCrv1) <= 11)) then
					         '05SAT'
					elseif ((Val(Yr) > Val(CPSBaseYr)) AND (Val(SCrv1) >= 12) AND (Val(SCrv1) <= 16)) then
					        '06ESC'
					elseif ((Val(Yr) > Val(CPSBaseYr)) AND (Val(SCrv1) >= 17) AND (Val(SCrv1) <= 21)) then
					        '03ENC'
					elseif ((Val(Yr) > Val(CPSBaseYr)) AND (Val(SCrv1) >= 22) AND (Val(SCrv1) <= 24)) then
					        '07WSC'
					elseif ((Val(Yr) > Val(CPSBaseYr)) AND (Val(SCrv1) = 25)) then
					        '04WNC'
					elseif ((Val(Yr) > Val(CPSBaseYr)) AND (Val(SCrv1) >= 6) AND (Val(SCrv1) <= 40)) then
					        '08MTN'
					else
					        '09PAC'
					endif
				}
			}
			Parameter MINE_FUEL {
				IndexDomain: (Yr,SCrv1,SReg,Sulf,Mtyp,Rank) | ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)+DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank);
				Definition: {
					!if (Yr <= CPSBaseYr) then
					 !       ((BY_ELEC_PRICE(SCrv1,Sreg,Sulf,Mtyp,Rank)*ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank))+
					  !      (D_Fuel(Yr)*DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)))!/$
					  !      (ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)+DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank))
					!else
					 !       MINE_FUELlag1(yr,SCrv1,Sreg,Sulf,Mtyp,Rank)*
					  !      ((E_FUEL(SelectedCensusDiv(SCrv1,YR),Yr)*ELEC_SHARE(Scrv1,Sreg,Sulf,Mtyp,Rank))+
					  !      (D_Fuel(Yr)*DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)))/!$
					  !      !(ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)+DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)))/
					  !      (((E_FUEL(SelectedCensusDiv(SCrv1,YR),Yr-1))*ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank))+
					  !      (D_Fuel(YR-1))*DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank))!/$
					        !(ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)+DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank))
					!endif
				}
				Comment: "Moved to SetUpRateEscalators Procedure 6-12-20 DAF";
			}
			Parameter MINE_FUELlag1 {
				IndexDomain: (Yr,SCrv1,SReg,Sulf,Mtyp,Rank) | ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)+DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank);
				Definition: {
					
					        MINE_FUEL(yr-1,SCrv1,Sreg,Sulf,Mtyp,Rank)
				}
			}
			Parameter P_OPER_OTH {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr);
				Definition: {
					if (Ord(Yr) <= Ord(CPSBaseYr)) then
					        PPI_STEEL_EXPLO(SCrv1,SReg,Sulf,MTyp,Rank,CPSBaseYr)
					elseif ((Ord(Yr) > Ord(CPSBaseYr)) AND (PPIMetalsSwitch = 0)) then
					        PPI_STEEL_EXPLO(SCrv1,SReg,Sulf,MTyp,Rank,Yr)
					elseif ((Ord(Yr) > Ord(CPSBaseYr)) AND (PPIMetalsSwitch = 1) AND (Ord(SCrv1) <= 21)) then
					        PPI_STEEL_EXPLO(SCrv1,SReg,Sulf,MTyp,Rank,Yr)*(PPI_METALS(Yr)/PPI_METALS(CPSBaseYr))
					elseif ((Ord(Yr) > Ord(CPSBaseYr)) AND (PPIMetalsSwitch = 1) AND (Ord(SCrv1) > 21) AND (Ord(MTyp) = 2)) then
					        PPI_STEEL_EXPLO(SCrv1,SReg,Sulf,MTyp,Rank,Yr)*(PPI_METALS(Yr)/PPI_METALS(CPSBaseYr))
					else
					        PPI_STEEL_EXPLO(SCrv1,SReg,Sulf,MTyp,Rank,Yr)
					endif
				}
			}
			Parameter FY_PROD_CAP {
				IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			}
			Parameter TempFY_PROD_CAP {
				IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			}
			Parameter TempFortranprod_capFlag {
				Text: "if Flag = 1 use TempFortranFY_PROD_CAP";
				Definition: 1;
			}
			Parameter FY_PROD_CAP_X {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)| BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			}
		}
		DeclarationSection SCrv1_Calculated_Parameters {
			Parameter BB {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: {
					if BY_TPH(SCrv1,SReg,Sulf,MTyp,Rank) > 0.0 then
					     EXP((RC_Cont_T(SCrv1,SReg,Sulf,MTyp,Rank)*(1.- RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))))*
					    (BY_TPH(SCrv1,SReg,Sulf,MTyp,Rank)^(TPH_SDA(SCrv1,SReg,Sulf,MTyp,Rank)*(1. -RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))))*
					    (BY_PROD_CAP_ADJ(SCrv1,SReg,Sulf,MTyp,Rank)^(RC_PROD_CAP_T(SCrv1,SReg,Sulf,MTyp,Rank)*
					    (1. -RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))))*
					    (BY_MMP_ADJ(SCrv1,SReg,Sulf,MTyp,Rank)^(-RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)))*
					    (BY_PROD_CAP(SCrv1,SReg,Sulf,MTyp,Rank)^(ProdCap_SDA(SCrv1,SReg,Sulf,MTyp,Rank)*
					    (1.-RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))))
					endif
				}
			}
			Parameter BY_MULT {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: {
					 BB(SCrv1,SReg,Sulf,MTyp,Rank)*
					(BY_TPH(SCrv1,SReg,Sulf,MTyp,Rank)^RC_TPH_T(SCrv1,SReg,Sulf,MTyp,Rank))*
					(BY_WAGE92(SCrv1,SReg,Sulf,MTyp,Rank)^RC_Wage_T(SCrv1,SReg,Sulf,MTyp,Rank))*
					(Usr_Cst_Capital(SCrv1,SReg,Sulf,MTyp,Rank,CPSBaseYr)^RCoe_UserCstCap(SCrv1,SReg,Sulf,MTyp,Rank))*
					(MINE_FUEL(CPSBaseYr,SCrv1,SReg,Sulf,MTyp,Rank)^RC_Fuel_T(SCrv1,SReg,Sulf,MTyp,Rank))*
					(BY_PROD_CAP(SCrv1,SReg,Sulf,MTyp,Rank)^RC_PROD_CAP_T(SCrv1,SReg,Sulf,MTyp,Rank))*
					(P_OPER_OTH(SCrv1,SReg,Sulf,MTyp,Rank,CPSBaseYr)^RCoe_POperOth(SCrv1,SReg,Sulf,MTyp,Rank))*
					(BY_MMP92(SCrv1,SReg,Sulf,MTyp,Rank)^RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))*
					(BY_TPH(SCrv1,SReg,Sulf,MTyp,Rank)^((-1.* RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))*RC_TPH_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
					(BY_WAGE92(SCrv1,SReg,Sulf,MTyp,Rank)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*RC_Wage_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
					(Usr_Cst_Capital(SCrv1,SReg,Sulf,MTyp,Rank,CPSBaseYr)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
					 RCoe_UserCstCap(SCrv1,SReg,Sulf,MTyp,Rank)))*
					(MINE_FUEL(CPSBaseYr,SCrv1,SReg,Sulf,MTyp,Rank)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
					 RC_Fuel_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
					(BY_PROD_CAP(SCrv1,SReg,Sulf,MTyp,Rank)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
					 RC_PROD_CAP_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
					(P_OPER_OTH(SCrv1,SReg,Sulf,MTyp,Rank,CPSBaseYr)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
					 RCoe_POperOth(SCrv1,SReg,Sulf,MTyp,Rank)))*
					((BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank)*100.0)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
					(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*(((BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank)*100.0)/
					 CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop))))*
					(CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank)^((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
					((((BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank)*100.0)/CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^
					 UtilExpTop)*RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
					 (-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))))
				}
			}
			Parameter PPRI {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: {
					 BY_MULT(SCrv1,SReg,Sulf,MTyp,Rank)*
					((BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank)*100.0)^
					(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*(((BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank)*100.0)/
					 CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop)))*
					(CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank)^((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
					((((BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank)*100.0)/CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^
					 UtilExpTop)*RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
					 (1.)))
				}
			}
			Parameter CALK {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank);
				Definition: BY_MMP92(SCrv1,SReg,Sulf,MTyp,Rank) - PPRI(SCrv1,SReg,Sulf,MTyp,Rank);
			}
			Parameter MULT {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,yr);
			}
			Parameter T_QTARG_CMM {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,yr);
			}
			Parameter T_Util {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|FY_PROD_CAP(yr,Scrv1,SReg,Sulf,Mtyp,Rank);
			}
			Parameter T_Util2 {
				IndexDomain: {
					(Scrv1,SReg,Sulf,Mtyp,Rank,yr) |Btu(Scrv1,SReg,Sulf,Mtyp,Rank)  !|FY_PROD_CAP(yr,Scrv1,SReg,Sulf,Mtyp,Rank)
				}
				Text: "created so that can compare first iternation and first coal iteration value against Fortran";
			}
			Parameter T_QUAN {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			}
			Parameter SC_PRICE {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			}
			Parameter Sc_price_temp5 {
				Definition: {
					
					(MULT('12','03SA','1C','2D','1B','2011') * (CAP_UTIL_HIST('12','03SA','1C','2D','1B')^(RC_Util_T('12','03SA','1C','2D','1B')-
					((RC_Util_T('12','03SA','1C','2D','1B')*((((T_QUAN('12','03SA','1C','2D','1B','5','2011')/
					FY_PROD_CAP('2011','12','03SA','1C','2D','1B'))*100.0)/CAP_UTIL_HIST('12','03SA','1C','2D','1B'))^UtilExpTop))))) *
					(((T_QUAN('12','03SA','1C','2D','1B','5','2011')/FY_PROD_CAP('2011','12','03SA','1C','2D','1B')))*100.0)^
					(RC_Util_T('12','03SA','1C','2D','1B')*(((((T_QUAN('12','03SA','1C','2D','1B','5','2011')/
					FY_PROD_CAP('2011','12','03SA','1C','2D','1B')))*100.0)/
					CAP_UTIL_HIST('12','03SA','1C','2D','1B'))^UtilExpTop))) + CALK('12','03SA','1C','2D','1B')
				}
			}
			Parameter SC_QUAN {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
				Text: "Supply Curve Quantity for each step  (Million Tons)";
				Range: free;
			}
			Parameter SC_PRICE87 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
				Text: "Price for each of the steps (1987 Dollars)";
			}
			Parameter SC_PRICE_BYDollars {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
				Text: "Price for each of the steps (Base Year Dollars)";
				Definition: SC_PRICE87(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr) / (MC_JPGDP('1987') / MC_JPGDP(CPSBaseYr));
			}
			DatabaseTable OutputSupplyCurves {
				DataSource: CoalOutConnectionString;
				TableName: "CoalSupplyCurves";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Scrv1step"    --> Scrv1Step,
					"Year"         --> yr,
					"Sc_price87"   --> SC_PRICE87,
					"Sc_quan"      --> SC_QUAN
				}
			}
			StringParameter RankDescription {
				IndexDomain: Rank;
				Definition: {
					data { 1B : "Bituminous",  2S : "Subbituminous",  3L : "Lignite", 4P : "Premium", 5G : "GOB" };
				}
			}
			StringParameter SulferContentLevel {
				IndexDomain: Sulf;
				Definition: {
					data { 1C : "Low - Compliance",  2M : "Medium",  3H : "High" };
				}
			}
			StringParameter MineTypeLabel {
				IndexDomain: Mtyp;
				Definition: {
					data { 1S : "Surface",  2D : "Underground" };
				}
			}
		}
		Procedure CalculationOfElectricityPricingEquation {
			Body: {
				
				Lag_pri_ecp_pecp_1(mx_ncl,yr) := Sum((mnumyr)|
				MAP_mnumyr_yr(MNUMYR,yr),!Map_globalyr_cyr(mnumyr,cyr)
				uso2grp_ecp_pecp(mx_ncl,'1',mnumyr-1));
				
				Lag_pri_ecp_pecp_2(Scrv1,yr) := Sum((mx_ncl,SReg, Sulf, Mtyp, Rank)|
				Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and Btu(Scrv1,SReg, Sulf, Mtyp, Rank),!Map_globalyr_cyr(mnumyr,cyr)
				!uso2grp_ecp_pecp(mx_ncl,'1',mnumyr-1)*Btu(Scrv1,Scrv)/
				Lag_pri_ecp_pecp_1(MX_NCL,yr)*Btu(Scrv1,SReg, Sulf, Mtyp, Rank)/
				(MC_JPGDP('1987')/MC_JPGDP('1992')));
				
				Lag_pri_ecp_pecp(ECPXPH,Scrv1,yr) := Lag_pri_ecp_pecp_2(Scrv1,yr);
				
				Ecp_prod(Scrv1,SReg,Sulf,Mtyp,Rank,yr) := !TotalProductionByYearScrv(Scrv1,SReg,Sulf,Mtyp,Rank,yr);  changed this back to old way of getting from Restart file
						Sum((mnumyr,mx_ncl)|MAP_mnumyr_yr(mnumyr,yr) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl),    ! the production solution in ECPFPH position 1  11-20-18 DAF
						USO2GRP_XCL_QECP(MX_NCL,'1',MNUMYR)/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank));
				
				!T_QTARG_CMM(Scrv1,SReg,Sulf,Mtyp,Rank,cyr);!should be t_qtarg_ecp
				
				Ecp_lag_prod(Scrv1,SReg,Sulf,Mtyp,Rank,yr) := 
					if (Val(Yr) <= Val(CPSBaseYr)+1) then
					     BY_PROD(SCrv1,SReg,Sulf,MTyp,Rank)
					else ProdVolSolutionPriorYr(yr-1,Scrv1,Sreg,Sulf,Mtyp,Rank)
					endif; ! Fixed 8-01-2018
				!Sum((mnumyr,mx_ncl)|MAP_mnumyr_yr(mnumyr,yr) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
				!USO2GRP_XCL_QECP(MX_NCL,'1',MNUMYR-1)/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank));
				!if (Val(cYr) <= Val(CPSBaseYr)) then
				!T_QTARG_CMM(Scrv1,SReg,Sulf,Mtyp,Rank,cyr)!*Btu(Scrv1,SReg,Sulf,Mtyp,Rank)
				!else
				!T_QTARG_CMM(Scrv1,SReg,Sulf,Mtyp,Rank,cyr-1)!*Btu(Scrv1,SReg,Sulf,Mtyp,Rank)
				!endif;
				
				! For run years after the CPS Base year, we want to update Ecp_prod_cap with FY_PROD_Cap from Coal Pricing Equation  DAf 12-15-17
				if ncntrl_curcalyr(1) > CPSbaseyr then
					Ecp_prod_cap_a(yr,Scrv1,SReg,Sulf,Mtyp,Rank) !:= Sum((mnumyr,mx_ncl)|MAP_mnumyr_yr(mnumyr,yr) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
					:= FY_PROD_CAP(yr,Scrv1,SReg,Sulf,Mtyp,Rank); !*Btu(Scrv1,SReg,Sulf,Mtyp,Rank)
				else
					Ecp_prod_cap_a(yr,Scrv1,SReg,Sulf,Mtyp,Rank) := Sum((mnumyr,mx_ncl)|MAP_mnumyr_yr(mnumyr,yr) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
					USO2GRP_XCL_PCAP(Mx_ncl,mnumyr)/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank));
				endif;
				
				Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank) := max(.0001,Ecp_prod_cap_a(yr,Scrv1,SReg,Sulf,Mtyp,Rank));
				
				Ecp_lag_prod_cap_a(Scrv1,SReg,Sulf,Mtyp,Rank,yr)     := Sum((mnumyr,mx_ncl)|MAP_mnumyr_yr(mnumyr,yr) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
				USO2GRP_XCL_PCAP(Mx_ncl,mnumyr-1)/$Btu(Scrv1,SReg,Sulf,Mtyp,Rank));
				
				Ecp_lag_prod_cap(Scrv1,SReg,Sulf,Mtyp,Rank,yr)   :=max(.0001,Ecp_lag_prod_cap_a(Scrv1,SReg,Sulf,Mtyp,Rank,yr));
				
				T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) :=  if BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank) > 0.0 then
				  	if (Val(Yr) <= Val(CPSBaseYr)) then  BY_PROD_CAP(SCrv1,SReg,Sulf,MTyp,Rank) * BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank)
				  	elseif ((Val(Yr) > Val(CPSBaseYr)) AND  ((Ecp_prod(Scrv1,SReg,Sulf,Mtyp,Rank,yr)/Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank))
				  		 < util_min(SCrv1,SReg,Sulf,MTyp,Rank))) then   Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank) * util_min(SCrv1,SReg,Sulf,MTyp,Rank)
				  	elseif ((Val(Yr) > Val(CPSBaseYr)) AND   ((Ecp_prod(Scrv1,SReg,Sulf,Mtyp,Rank,yr)/Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank))
				  		 > util_max(SCrv1,SReg,Sulf,MTyp,Rank))) then Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank) * Util_max(SCrv1,SReg,Sulf,MTyp,Rank)
				        elseif TotalProductionByYearScrv(Scrv1,SReg,Sulf,Mtyp,Rank,yr) then TotalProductionByYearScrv(Scrv1,SReg,Sulf,Mtyp,Rank,yr)
				            else
				       		Ecp_prod(Scrv1,SReg,Sulf,Mtyp,Rank,yr)  	    		
				 	endif
				        endif;
				
				T_qtarg_ecp_a(Scrv1,SReg,Sulf,Mtyp,Rank,ECPFPH):= Sum(yr|MAP_ecpfph_yr(ECPFPH,yr)=ecpfph,T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr));
				
				xcl_qecp(Scrv1,SReg,Sulf,Mtyp,Rank,ecpfph,cyr) := !if QtargProductionTonsforCPS1(Scrv1,SReg,Sulf,Mtyp,Rank,yr) then
				
										!QtargProductionTonsforCPS1(Scrv1,SReg,Sulf,Mtyp,Rank,yr)*Btu(Scrv1,SReg,Sulf,Mtyp,Rank)
										!else
										T_qtarg_ecp_a(Scrv1,SReg,Sulf,Mtyp,Rank,ECPFPH)*Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
										!endif;
				
				Lag_qtarg(Scrv1,SReg,Sulf,Mtyp,Rank,yr) := if BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank) > 0.0 then
				  	if (Val(Yr) <= Val(CPSBaseYr)) then
				       		BY_PROD_CAP(SCrv1,SReg,Sulf,MTyp,Rank) * BY_CAP_UTIL(SCrv1,SReg,Sulf,MTyp,Rank)
				  	elseif ((Val(Yr) > Val(CPSBaseYr)) AND
				         	((Ecp_lag_prod(Scrv1,SReg,Sulf,Mtyp,Rank,yr)/Ecp_lag_prod_cap(Scrv1,SReg,Sulf,Mtyp,Rank,yr)) < Mn_util(SCrv1,SReg,Sulf,MTyp,Rank))) then
				       		Ecp_lag_prod_cap(Scrv1,SReg,Sulf,Mtyp,Rank,yr) * Mn_util(SCrv1,SReg,Sulf,MTyp,Rank)
				  	elseif ((Val(Yr) > Val(CPSBaseYr)) AND
				         	((Ecp_lag_prod(Scrv1,SReg,Sulf,Mtyp,Rank,yr)/Ecp_lag_prod_cap(Scrv1,SReg,Sulf,Mtyp,Rank,yr)) <= Mx_util(SCrv1,SReg,Sulf,MTyp,Rank))) then
				       		Ecp_lag_prod(Scrv1,SReg,Sulf,Mtyp,Rank,yr)
				  	else
				       		Ecp_lag_prod_cap(Scrv1,SReg,Sulf,Mtyp,Rank,yr) * Mx_util(SCrv1,SReg,Sulf,MTyp,Rank)
				  	endif
				  endif;
				
				Lag_ptarg(Scrv1,SReg,Sulf,Mtyp,Rank,yr) := max(1.0,min(60.0,Lag_pri_ecp_pecp('1',Scrv1,yr)));
				
				MULT_ecp(SCrv1,SReg,Sulf,MTyp,Rank,yr):=if (Yr <= CPSBaseYr) then
				    			BY_MULT(SCrv1,SReg,Sulf,MTyp,Rank)
				
						else
				    			BB(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			(FY_TPH(yr,SCrv1,SReg,Sulf,MTyp,Rank)^RC_TPH_T(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			(FY_WAGE(SCrv1,SReg,Sulf,MTyp,Rank,Yr)^RC_Wage_T(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			(Usr_Cst_Capital(SCrv1,SReg,Sulf,MTyp,Rank,Yr)^RCoe_UserCstCap(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			(MINE_FUEL(Yr,SCrv1,SReg,Sulf,MTyp,Rank)^RC_Fuel_T(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			(ECP_PROD_CAP(yr,SCrv1,SReg,Sulf,MTyp,Rank)^RC_PROD_CAP_T(SCrv1,SReg,Sulf,MTyp,Rank))[-]*
				   			(P_OPER_OTH(SCrv1,SReg,Sulf,MTyp,Rank,Yr)^RCoe_POperOth(SCrv1,SReg,Sulf,MTyp,Rank))*
				    			  (Lag_Ptarg(SCrv1,SReg,Sulf,MTyp,Rank,Yr)^RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			   (FY_TPH(yr,SCrv1,SReg,Sulf,MTyp,Rank)^((-1.* RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))*
				   			    RC_TPH_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (FY_WAGE(SCrv1,SReg,Sulf,MTyp,Rank,Yr)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				    			   RC_Wage_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (Usr_Cst_Capital(SCrv1,SReg,Sulf,MTyp,Rank,Yr)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			    RCoe_UserCstCap(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (MINE_FUEL(Yr,SCrv1,SReg,Sulf,MTyp,Rank)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			    RC_Fuel_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (ECP_PROD_CAP(Yr,SCrv1,SReg,Sulf,MTyp,Rank)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			    RC_PROD_CAP_T(SCrv1,SReg,Sulf,MTyp,Rank))[-])*
				   			   (P_OPER_OTH(SCrv1,SReg,Sulf,MTyp,Rank,Yr)^(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			    RCoe_POperOth(SCrv1,SReg,Sulf,MTyp,Rank)))*
				   			   (((Lag_qtarg(Scrv1,SReg,Sulf,Mtyp,Rank,yr)/Ecp_lag_prod_cap(Scrv1,SReg,Sulf,Mtyp,Rank,yr))*100.0)^
				   			   (-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			   (RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*
				   			   ((((Lag_qtarg(Scrv1,SReg,Sulf,Mtyp,Rank,yr)/Ecp_lag_prod_cap(Scrv1,SReg,Sulf,Mtyp,Rank,yr))*100.0)/
				   			 CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop))))*
				   			(CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank)^((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
				   			(((((Lag_qtarg(Scrv1,SReg,Sulf,Mtyp,Rank,yr)/Ecp_lag_prod_cap(Scrv1,SReg,Sulf,Mtyp,Rank,yr))*100.0)/
				    			CAP_UTIL_HIST(SCrv1,SReg,Sulf,MTyp,Rank))^UtilExpTop)*RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)))*
				    			(-1.*RCoe_Rho(SCrv1,SReg,Sulf,MTyp,Rank))))
				    		    endif;
				
				T_fp(Scrv1,SReg,Sulf,Mtyp,Rank,yr)   := Mult_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr);
				Copy_T_fp(Scrv1,SReg,Sulf,Mtyp,Rank) := Sum(cyr,Mult_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,cyr));
				
				S_ptarg_b(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1step,yr)  :=if FutureYears(Yr) and  Scrv1step < 6 and Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
										(T_fp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) *
					(CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank)^(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
					((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*(((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) *
					(1.0 + StepSize(SCrv1Step)))/
					Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank))*100.0)/
					CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank))^UtilExpBot)))*(1.))) *
					((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) * (1.0 + StepSize(SCrv1Step))) /
					Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank)))*100.0) ^
					(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*((((((T_QTARG_ECP(Scrv1,SReg,Sulf,Mtyp,Rank,yr) *
					(1.0 + StepSize(SCrv1Step))) / Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank)))*100.0)/CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank))^UtilExpBot))) + YINT(Scrv1,SReg,Sulf,Mtyp,Rank)
				
					elseif FutureYears(Yr) and Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
					(T_FP(Scrv1,SReg,Sulf,Mtyp,Rank,yr) *
					(CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank)^(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
					((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*(((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) *
					(1.0 + StepSize(SCrv1Step)))/
					Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank))*100.0)/
					CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank))^UtilExpTop)))*(1.))) *
					((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) * (1.0 + StepSize(SCrv1Step))) /
					Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank)))*100.0) ^
					(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*((((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) *
					(1.0 + StepSize(SCrv1Step))) / Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank)))*100.0)/
					CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank))^UtilExpTop))) +
					YINT(Scrv1,SReg,Sulf,Mtyp,Rank)
					endif;
				
				S_ptarg_c(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1step,yr) := If S_ptarg_b(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1step,yr) > 0 then
										     S_ptarg_b(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1step,yr)
										     elseif FutureYears(Yr) and Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
					(Copy_T_FP(Scrv1,SReg,Sulf,Mtyp,Rank) *
					(CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank)^(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)-
					((RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*(((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) *
					(1.0 + StepSize(SCrv1Step)))/
					Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank))*100.0)/
					CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank))^UtilExpTop)))*(1.))) *
					((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) * (1.0 + StepSize(SCrv1Step))) /
					Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank)))*100.0) ^
					(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*((((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr) *
					(1.0 + StepSize(SCrv1Step))) / Ecp_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank)))*100.0)/
					CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank))^UtilExpTop))) +
					YINT(Scrv1,SReg,Sulf,Mtyp,Rank)
					endif;
				
				S_ptarg(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr):= If Scrv1step > 9 and Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
										max(S_ptarg_b(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr),S_ptarg_b(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr-1) + .001)
										elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
										S_ptarg_b(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr)
										endif;
				!restricting the expected prices to the years that are calculated
				        xcl_pecp_b1(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr) :=Sum(yr|MAP_ecpfph_cyr_yr(cyr,ECPFPH,yr) and Btu(Scrv1,SReg,Sulf,Mtyp,Rank),
				                                                      S_ptarg(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr)*(MC_JPGDP('1987')/MC_JPGDP('1992')));
				        !what is the last model year that has a calculated price?: max_ecpfph
				        max_ecpfph(ecpfph,cyr):=ncntrl_lastyr('1')-cyr+1990;
				
				        !making the expected prices equal to the last known calculated price if the 31 year horizon extends beyond model years
				        xcl_pecp_b2(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr)  :=Sum((yr)|ecpfph > max_ecpfph(ecpfph,cyr) and yr=cyr+max_ecpfph(ecpfph,cyr)-1 and Btu(Scrv1,SReg,Sulf,Mtyp,Rank),
				                                                      S_ptarg(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr)*(MC_JPGDP('1987')/MC_JPGDP('1992')));
				        !now merge xcl_pecp_b1and
				        xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr) := if ecpfph > max_ecpfph(ecpfph,cyr) then
				        									xcl_pecp_b2(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr)
				        								else
				        									xcl_pecp_b1(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr)
				        								endif;
				
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'1',ECPFPH,cyr):=if (xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'1',ECPFPH,cyr) > xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'2',ECPFPH,cyr)
				and Btu(Scrv1,SReg,Sulf,Mtyp,Rank)) then
				                              MIN(xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'2',ECPFPH,cyr) - (0.009 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'3',ECPFPH,cyr) - (0.009 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                 xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'4',ECPFPH,cyr)- (0.009 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'5',ECPFPH,cyr) - (0.009 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'6',ECPFPH,cyr) - (0.009 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr) - (0.009 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr) - (0.009 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) - (0.009 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr) - (0.009 * (MC_JPGDP('1987')/MC_JPGDP('1992'))))
				                                elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                                xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'1',ECPFPH,cyr)
				                                endif;
				
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'2',ECPFPH,cyr):=if (Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'2',ECPFPH,cyr) > xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'3',ECPFPH,cyr)) then
				                              MIN(xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'3',ECPFPH,cyr) - (0.008 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'4',ECPFPH,cyr) - (0.008 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'5',ECPFPH,cyr) - (0.008 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'6',ECPFPH,cyr) - (0.008 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr) - (0.008 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr) - (0.008 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) - (0.008 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr) - (0.008 * (MC_JPGDP('1987')/MC_JPGDP('1992'))))
				                                elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                                 xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'2',ECPFPH,cyr)
				                                endif;
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'3',ECPFPH,cyr):=if (Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'3',ECPFPH,cyr) > xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'4',ECPFPH,cyr)) then
				                              MIN(xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'4',ECPFPH,cyr) - (0.007 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'5',ECPFPH,cyr) - (0.007 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'6',ECPFPH,cyr) - (0.007 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr) - (0.007 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr) - (0.007 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) - (0.007 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr) - (0.007 * (MC_JPGDP('1987')/MC_JPGDP('1992'))))
				                                  elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                                   xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'3',ECPFPH,cyr)
				                                endif;
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'4',ECPFPH,cyr) :=if (Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'4',ECPFPH,cyr) > xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'5',ECPFPH,cyr)) then
				                              MIN(xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'5',ECPFPH,cyr)- (0.006 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'6',ECPFPH,cyr) - (0.006 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr) - (0.006 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr) - (0.006 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) - (0.006 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr) - (0.006 * (MC_JPGDP('1987')/MC_JPGDP('1992'))))
				                                  elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                                   xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'4',ECPFPH,cyr)
				                          	   endif;
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'5',ECPFPH,cyr) :=if (Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'5',ECPFPH,cyr) > xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'6',ECPFPH,cyr)) then
				                              MIN(xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'6',ECPFPH,cyr) - (0.005 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr) - (0.005 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr) - (0.005 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) - (0.005 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr) - (0.005 * (MC_JPGDP('1987')/MC_JPGDP('1992'))))
				                                  elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'5',ECPFPH,cyr)
				                          	endif;
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'6',ECPFPH,cyr) :=if (Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'6',ECPFPH,cyr) > xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr)) then
				                              MIN(xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr) - (0.004 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr) - (0.004 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) - (0.004 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                 xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr) - (0.004 * (MC_JPGDP('1987')/MC_JPGDP('1992'))))
				                                 elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'6',ECPFPH,cyr)
				                          	endif;
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr) :=if (Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr) > xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr)) then
				                              MIN(xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr) - (0.003 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) - (0.003 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr) - (0.003 * (MC_JPGDP('1987')/MC_JPGDP('1992'))))
				                                  elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'7',ECPFPH,cyr)
				                          	endif;
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr) :=if (Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr) > xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr)) then
				                              MIN(xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) - (0.002 * (MC_JPGDP('1987')/MC_JPGDP('1992'))),
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr) - (0.002 * (MC_JPGDP('1987')/MC_JPGDP('1992'))))
				                                 elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'8',ECPFPH,cyr)
				                          	endif;
				
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) :=if (Btu(Scrv1,SReg,Sulf,Mtyp,Rank) and xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr) > xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr)) then
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr) - (0.001 * (MC_JPGDP('1987')/MC_JPGDP('1992')))
				                                 elseif Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                                  xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'9',ECPFPH,cyr)
				                          	endif;
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr):= if Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                          	xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'10',ECPFPH,cyr)
				                          	endif;
				xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,'11',ECPFPH,cyr):=if Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				                          	xcl_pecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,'11',ECPFPH,cyr)
				                          	endif;
				
				
				
				xcl_pecp(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr):= if Btu(Scrv1,SReg,Sulf,Mtyp,Rank) then
				(xcl_pecp_c(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr)/Btu(Scrv1,SReg,Sulf,Mtyp,Rank)
				+ (ADJ_MMP_ADD(Scrv1,SReg,Sulf,Mtyp,Rank,cyr)/Btu(Scrv1,SReg,Sulf,Mtyp,Rank)))*
				ADJ_MMP_MULT(Scrv1,SReg,Sulf,Mtyp,Rank,cyr)
				endif;
				
				USO2GRP_XCL_PECP_B1(MX_NCL,Scrv1Step,ecpfph,cyr):=
				        Sum((Scrv1,SReg,Sulf,Mtyp,Rank)|Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and
				        Btu(Scrv1,Sreg,Sulf,Mtyp,Rank),
				        xcl_pecp(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr));
				
				USO2GRP_XCL_PECP_C(MX_NCL,M11,ecpfph,cyr):=
				        Sum(Scrv1Step|Scrv1Step = M11,USO2GRP_XCL_PECP_B1(MX_NCL,Scrv1Step,ecpfph,cyr));
				
				USO2GRP_XCL_PECP_A(globalyr,MX_NCL,M11,ECPFPH) :=
				         Sum(cyr|Map_globalyr_cyr(globalyr,cyr),
				         USO2GRP_XCL_PECP_C(MX_NCL,M11,ecpfph,cyr));
				!restricting the quantities to the years that are calculated
				        xcl_qecp_b1(Scrv1,SReg,Sulf,Mtyp,Rank,ECPFPH,cyr) :=Sum(yr|MAP_ecpfph_cyr_yr(cyr,ECPFPH,yr) and Btu(Scrv1,SReg,Sulf,Mtyp,Rank),
				                                                      T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr));
				        !what is the last model year that has a calculated quantity?: max_ecpfph
				        max_ecpfph(ecpfph,cyr):=ncntrl_lastyr('1')-cyr+1990;
				
				        !making the expected quantities equal to the last known calculated quantity if the 31 year horizon extends beyond model years
				        xcl_qecp_b2(Scrv1,SReg,Sulf,Mtyp,Rank,ECPFPH,cyr)  :=Sum((yr)|ecpfph > max_ecpfph(ecpfph,cyr) and yr=cyr+max_ecpfph(ecpfph,cyr)-1 and Btu(Scrv1,SReg,Sulf,Mtyp,Rank),
				                                                      T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,yr));
				        !now merge xcl_qecp_b1bandbxcl_qecp_b2
				        xcl_qecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,ECPFPH,cyr) := if ecpfph > max_ecpfph(ecpfph,cyr) then
				        									xcl_qecp_b2(Scrv1,SReg,Sulf,Mtyp,Rank,ECPFPH,cyr)*Btu(Scrv1,SReg,Sulf,Mtyp,Rank)
				        								else
				        									xcl_qecp_b1(Scrv1,SReg,Sulf,Mtyp,Rank,ECPFPH,cyr)*Btu(Scrv1,SReg,Sulf,Mtyp,Rank)
				        								endif;
				
				USO2GRP_XCL_QECP_A(MX_NCL,ECPFPH,globalyr) := Sum((Scrv1,SReg,Sulf,Mtyp,Rank,cyr)|Btu(Scrv1,Sreg,Sulf,Mtyp,Rank) and
				        Map_Scrv1_MX_NCL(Scrv1,mx_ncl) and Map_globalyr_cyr(globalyr,cyr),
				        xcl_qecp_b(Scrv1,SReg,Sulf,Mtyp,Rank,ECPFPH,cyr));
				!Copy these back to global data set   Added 12-14-17 DAF
				USO2GRP_XCL_QECP(MX_NCL,ECPFPH,GLOBALYR)    := USO2GRP_XCL_QECP_A(MX_NCL,ECPFPH,GLOBALYR)           ;
				USO2GRP_XCL_PECP(MX_NCL,M11,ECPFPH,GLOBALYR)     := USO2GRP_XCL_PECP_A(globalyr,MX_NCL,M11,ECPFPH);
			}
		}
		DeclarationSection Scrv1_Calculated_Parameters_DKE {
			Parameter SC_QUAN1 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
				Range: nonnegative;
			}
			Parameter SC_QUAN1a {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
				Range: nonnegative;
			}
			Parameter SC_1_PRICE87 {
				IndexDomain: (Scrv1,SReg, Sulf, Mtyp, Rank,Scrv1Step,yr)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
				Definition: {
					!sum(Scrv1,
					!if Btu(Scrv1,Scrv)>0then
					!!(SC_PRICE87(Scrv1,Scrv,Scrv1Step,yr)/
					!!Btu(Scrv1,Scrv))
					!endif
				}
			}
			Parameter SC_2_PRICE87 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank,Scrv1Step,yr)|Btu2(SReg, Sulf, Mtyp, Rank);
				Definition: {
					!Sum(Scrv1,SC_1_PRICE87(Scrv1,Scrv,Scrv1Step,yr))
				}
			}
			Parameter FY_PROD_CAP2 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "forecast year productive capacity in Btus";
				Definition: {
					
					!FY_PROD_CAP(yr,Scrv1,Scrv)*Btu(Scrv1,Scrv))
					!Sum((SReg,Sulf,Mtyp,Rank),FY_PROD_CAP(yr,Scrv1,SReg,Sulf,Mtyp,Rank)
					        !*Btu(Scrv1,SReg,Sulf,Mtyp,Rank))
				}
			}
			Parameter FY_PROD_CAP2a {
				IndexDomain: (yr,Scrv1,SReg, Sulf, Mtyp, Rank)|Scrv1_Map(Scrv1, SReg, Sulf, Mtyp, Rank);
			}
			Parameter FY_PROD_CAP3 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,yr)|Btu2(SReg,Sulf,Mtyp,Rank) and SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank);
				Text: "productive capacity in Btus";
				Range: nonnegative;
				Definition: {
					!Sum(Scrv1,FY_PROD_CAP2(Scrv1,Scrv,yr));
				}
			}
			Parameter Mercury2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank)|Btu2(SReg,Sulf,Mtyp,Rank);
				Text: "Mercury Content (lbs per Tillion Btu)";
				Definition: {
					!Sum(Scrv1,Mercury(Scrv1,Scrv))
				}
			}
			Parameter Carbon2 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank)|Btu2(SReg,Sulf,Mtyp,Rank);
				Text: "lbs per million Btu";
				Definition: {
					!Sum(Scrv1,Carbon(Scrv1,Scrv))
				}
			}
			Parameter FY_TPH1 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,yr)|Btu2(SReg,Sulf,Mtyp,Rank);
			}
			Parameter BY_PROD1 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank)|Btu2(SReg, Sulf, Mtyp, Rank);
				Definition: {
					!Sum(Scrv1,BY_PROD(Scrv1,SReg,Sulf,Mtyp,Rank))
				}
			}
			Parameter BY_MMP1 {
				IndexDomain: (SReg, Sulf, Mtyp, Rank)|Btu2(SReg, Sulf, Mtyp, Rank);
				Definition: {
					!Sum(Scrv1,BY_MMP(Scrv1,SReg,Sulf,Mtyp,Rank))
				}
			}
		}
		DeclarationSection CPS_Generated_Input_Variables_for_Electricity {
			Parameter Mn_util {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: By_cap_util(Scrv1,SReg,Sulf,Mtyp,Rank);
			}
			Parameter Mx_util {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank);
			}
			Parameter Ecp_lag_prod_cap {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
			}
			Parameter Ecp_lag_prod_cap_a {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
			}
			Parameter Ecp_lag_prod {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
			}
			Parameter Lag_qtarg {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
			}
			Parameter Ecp_prod_cap {
				IndexDomain: (yr,Scrv1,SReg,Sulf,Mtyp,Rank)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
			}
			Parameter Ecp_prod_cap_a {
				IndexDomain: (yr,Scrv1,SReg,Sulf,Mtyp,Rank);
			}
			Parameter Lag_ptarg {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "indirectly equivalent to lag_pri";
			}
			Parameter T_qtarg_ecp {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
				Text: "see CalculationOfElectricityPricingEquation procedure";
			}
			Parameter Ecp_prod {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter Xcl_qecp {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ECPfPH,cyr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter Xcl_qecp_b1 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ECPfPH,cyr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter Xcl_qecp_b2 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ECPfPH,cyr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter Xcl_qecp_b {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ECPfPH,cyr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter T_qtarg_ecp_a {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,ECPFPH);
			}
			Parameter MULT_ecp {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,yr);
			}
			Parameter Yint {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank);
				Definition: CALK(Scrv1,SReg,Sulf,Mtyp,Rank);
			}
			Parameter T_fp {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,yr);
				Text: {
					"does deflate = 1?;See CalculationOfElectricityPricingEquation procedure"
				}
			}
			Parameter Copy_T_fp {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: {
					"does deflate = 1?;See CalculationOfElectricityPricingEquation procedure"
				}
			}
			Parameter S_ptarg_b {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1step,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter S_ptarg_c {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1step,yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter S_ptarg {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter xcl_pecp_b {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,yr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter xcl_pecp_b1 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr);
			}
			Parameter max_ecpfph {
				IndexDomain: (ECPFPH,cyr);
			}
			Parameter xcl_pecp_b2 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,cyr);
			}
			Parameter xcl_pecp_c {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,yr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter xcl_pecp {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,yr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter xcl_pecp_temp1 {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,ECPFPH,globalyr);
				Text: "See CalculationOfElectricityPricingEquation procedure";
			}
			Parameter USO2GRP_XCL_PECP_temp {
				IndexDomain: (MX_NCL,M11,ECPFPH,MNUMYR);
				Text: "Expected Coal Supply Prices by ECP Step";
			}
			Parameter Lag_pri_ecp_pecp {
				IndexDomain: (ECPXPH,Scrv1,yr);
				Definition: {
					!Sum((mx_ncl,Scrv,mnumyr)|Btu(Scrv1,Scrv) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl)and
					!MAP_mnumyr_yr(MNUMYR,yr),!Map_globalyr_cyr(mnumyr,cyr)
					!uso2grp_ecp_pecp(mx_ncl,'1',mnumyr-1)*Btu(Scrv1,Scrv)/
					!(MC_JPGDP('1987')/MC_JPGDP('1992')))
				}
			}
			Parameter Lag_pri_ecp_pecp_1 {
				IndexDomain: (MX_NCL,yr);
			}
			Parameter Lag_pri_ecp_pecp_2 {
				IndexDomain: (Scrv1,yr);
			}
			Parameter BY_MMP_ecp_pecp_fallback {
				IndexDomain: (Mx_ncl,ecpxph)|ecpxph = 1 or ecpxph = 2 or ecpxph = 3 or ecpxph = 4 or ecpxph = 5;
				Text: {
					"Base Year Minemouth Coal Price (1987$ per mmBtu); alternative value if ecp_pecp > 900"
				}
				Definition: {
					Sum((Scrv1,SReg, Sulf, Mtyp, Rank)|Btu(Scrv1,SReg, Sulf, Mtyp, Rank) and Map_Scrv1_MX_NCL(Scrv1,mx_ncl),
					By_mmp(Scrv1,SReg, Sulf, Mtyp, Rank)/Btu(Scrv1,SReg, Sulf, Mtyp, Rank))
				}
			}
		}
		DeclarationSection FlagsFortranDebugging {
			Parameter TempFortranLagPriceFlag {
				Text: "set to 1 if prod_cap comes from Fortran";
				Definition: 0;
			}
			Parameter TempFortranLag_Pric {
				IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			}
			Parameter TempFortranLagProd3Flag {
				Text: "set to 1 if prod_cap comes from Fortran";
				Definition: 0;
			}
			Parameter TempFortranLag_Prod3 {
				IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			}
			Parameter TempFortranProdCapFlag {
				Text: "set to 1 if prod_cap comes from Fortran";
				Definition: 0;
			}
			Parameter TempFortranFY_PROD_CAP {
				IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			}
			Parameter TempFortranLag_prodFlag {
				Text: "set to 1 if prod_cap comes from Fortran";
				Definition: 0;
			}
			Parameter TemFortranLAG_PROD {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,Yr)|Btu(Scrv1,SReg,Sulf,Mtyp,Rank);
				Text: "Lagged Production Solution From CDS - only set on first iteration so re-located to MainExecution";
				Definition: {
					
					!if (ncntrl_curitr('1') = 1)then
					!if (yr < CPSBaseYr + 1) then
					!        BY_CAP_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank) * BY_PROD_CAP(Scrv1,SReg,Sulf,Mtyp,Rank)
					!else
					!        if (T_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank,yr) < BY_Cap_util(Scrv1,SReg,Sulf,Mtyp,Rank)) then
					!		FY_PROD_CAP(yr,Scrv1,Sreg,Sulf,Mtyp,Rank) * BY_Cap_util(Scrv1,SReg,Sulf,Mtyp,Rank)
					!        elseif (T_UTIL(Scrv1,SReg,Sulf,Mtyp,Rank,yr) > Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank)) then
					!       		fy_prod_cap(yr,Scrv1,SReg,Sulf,Mtyp,Rank) * Util_Max(Scrv1,SReg,Sulf,Mtyp,Rank)
					!        else !equals util_max
					!                QtargProductionTonsforCPS1(Scrv1,SReg,Sulf,Mtyp,Rank,yr)
					!        endif
					!endif
					!endif
				}
			}
			Parameter TempFortranFPFlag {
				Text: "set to 1 if prod_cap comes from Fortran";
				Definition: 0;
			}
			Parameter TempFortranFP {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,yr);
			}
			Parameter TempFortranTQtargCmmFlag {
				Text: "if Flag = 1 use TempFortranT_Qtarg_cmm";
				Definition: 0;
			}
			Parameter TempFortranT_QTARG_CMM {
				IndexDomain: (SCrv1,SReg,Sulf,MTyp,Rank,yr);
			}
			Parameter TempFortranPriceAndQtyFlag {
				Text: "if Flag = 1 use TempFortranQuantity and TempFortranPrice";
				Definition: 0;
			}
			Parameter TempFortranPrice {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			}
			Parameter TempFortranQuantity {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			}
			Parameter TempFortranContractFlag {
				Text: "if Flag = 1 use TempFortranQuantity and TempFortranPrice";
				Definition: 0;
			}
			Parameter TempFortranCdyrsUnScrubbed {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Range: nonnegative;
			}
			Parameter TempFortranCdyrsScrubbed {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,DReg,yr);
				Range: nonnegative;
			}
			Parameter QdutzrSubtotalDbeug {
				IndexDomain: (pt2,yr);
				Definition: Sum(DREg,qdutzr(pt2,DReg,yr));
			}
		}
		DeclarationSection CenteringTheSupplyCurves {
			Parameter Step8Comparison {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
				Text: "if 1, the step 8 price is lower than shadow price so solving at higher step than 8";
				Definition: {
					if ProductionCostDetail(SReg,Sulf,Mtyp,Rank,'8',cyr)-SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr)<0 then
					1
					endif
				}
			}
			Parameter Step1Comparison {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
				Text: {
					"if 1, the step 1 price is higher than shadow price; need to lower the center price"
				}
				Definition: {
					if ProductionCostDetail(SReg,Sulf,Mtyp,Rank,'1',cyr)-SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr)>0 then
					1
					endif
				}
			}
			Parameter Step5Price {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
				Definition: ProductionCostDetail(SReg,Sulf,Mtyp,Rank,'5',cyr);
			}
			Parameter Step1Price {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
				Definition: ProductionCostDetail(SReg,Sulf,Mtyp,Rank,'1',cyr);
			}
			Parameter PMN {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
				Text: "This is the mine price by supply curve that comes out of the Price Adjustment procedure";
			}
			Parameter PM1 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
			}
			Parameter PM5 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
			}
			Parameter PM8 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
			}
			Parameter QM5 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
			}
			Parameter QM8 {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
			}
			Parameter RedoFlag {
				IndexDomain: (yr);
			}
			Parameter DiffLastStepVsSolve {
				IndexDomain: (SReg,Sulf,Mtyp,Rank,cyr);
			}
		}
		DeclarationSection Input_Database {
			DatabaseTable TInp_CLUSER_SCrv {
				DataSource: CPSConnectionString;
				TableName: "TInp_CLUSER_SCrv";
				Mapping: {
					"CMM_CSCURVE_INDEX" --> SCrv1,
					"SupReg_Code"       --> SReg,
					"CMM_CSRG_NAME"	    --> CSupplyRegionName1,
					"CMM_CSRG_STATES_LABEL"  --> SRegStates,
					"MCNT_CTYPE"        --> CPSCoalTyp,
					"mtyp_code"         --> MTyp,
					"CMM_CMINE_NAME"    --> MTypeLabel,
					"Rank_Code"         --> Rank,
					"CMM_CRANK_NAME"    --> RankLabel,
					"sulf_code"         --> Sulf,
					"CMM_CSUL_NAME"     --> SulfLabel,
					"MinePrice"         --> BY_MMP,
					"Prod"              --> BY_PROD,
					"by_tph"            --> BY_TPH,
					"ProdCap"           --> BY_PROD_CAP,
					"BCapUtil"          --> BY_CAP_UTIL,
					"BUtilHist"         --> CAP_UTIL_HIST,
					"AvgBTUCont"        --> Btu,
					"AvgSulfCont"       --> Sulfur,
					"AvgCO2EmisFctr"    --> Carbon,
					"AveMercCont"       --> Mercury,
					"ProdCapAdj"        --> BY_PROD_CAP_ADJ,
					"PriceAdj"          --> BY_MMP_ADJ,
					"ElecShare"         --> ELEC_SHARE,
					"DistShare"         --> DIST_SHARE,
					"BYWage"            --> BY_WAGE,
					"BYElecPrice"       --> BY_ELEC_PRICE,
					"RCoe_Ocont"        --> RCoe_OCont,
					"RCoe_SRegCont"     --> RCoe_SregCont,
					"RCoe_DeepCont"     --> RCoe_MTypeCont,
					"RCoe_SRegMTCont"   --> RCoe_SRegMTypeCont,
					"RCoe_TPH"          --> RCoe_TPH,
					"TPH_SDA"           --> TPH_SDA,
					"RCoe_SRegTPH"      --> RCoe_SRegTPH,
					"RCoe_MTypeTPH"     --> RCoe_MTypeTPH,
					"RCoe_SRegMTypeTPH" --> RCoe_SRegMTypeTPH,
					"RCoe_Util"         --> RCoe_Util,
					"RCoe_MTypeUtil"    --> RCoe_MTypeUtil,
					"RCoe_ProdCap"      --> RCoe_ProdCap,
					"ProdCap_SDA"       --> ProdCap_SDA,
					"RCoe_MTypeProdCap" --> RCoe_MTypeProdCap,
					"RCoe_Wage"         --> RCoe_Wage,
					"RCoe_MTypeWage"    --> RCoe_MTypeWage,
					"RCoe_Fuel"         --> RCoe_Fuel,
					"RCoe_MTypeFuel"    --> RCoe_MTypeFuel,
					"RCoe_UserCstCap"   --> RCoe_UserCstCap,
					"Rcoe_POperOth"     --> RCoe_POperOth,
					"RCoe_Rho"          --> RCoe_Rho,
					"Util_Max"          --> Util_Max,
					"Util_Mid"          --> Util_Mid,
					"Util_Min"          --> Util_Min,
					"Util_Max_Adj"      --> Util_Max_Adj,
					"Util_Mid_Adj"      --> Util_Mid_Adj,
					"Util_Min_Adj"      --> Util_Min_Adj
				}
			}
			DatabaseTable Tinp_CLUSER_SCrv_Yr {
				DataSource: CPSConnectionString;
				TableName: "TInp_CLUSER_SCrv_Yr";
				Mapping: {
					"CMM_CSCURVE_INDEX" --> SCrv1,
					"SupReg_Code"       --> SReg,
					"sulf_code"         --> Sulf,
					"mtyp_code"         --> MTyp,
					"Rank_Code"         --> Rank,
					"CALENDAR_YEAR"     --> Yr,
					"CMM_FCST_YR_PROD"  --> TPH_Growth_Rate,
					"CMM_FCST_YR_WAGE"  --> WAGE_MULTIPLIER,
					"ADJ_MMP_MULT"      --> ADJ_MMP_MULT,
					"ADJ_MULT_ADD"      --> ADJ_MMP_ADD,
					"P_EQUIP"           --> P_EQUIP,
					"P_OPER_OTH"        --> PPI_STEEL_EXPLO,
					"SCLIMIT"           --> SCLIMIT
				}
			}
			DatabaseTable TInp_CLUSER_SCrv_Steps {
				DataSource: CPSConnectionString;
				TableName: "TInp_CLUSER_SCrv_Steps";
				Mapping: {
					"Step"     --> SCrv1Step,
					"StepSize" --> StepSize
				}
			}
			DatabaseTable TInp_NEMS_SCrv_Yr {
				DataSource: CPSConnectionString;
				TableName: "TInp_NEMS_SCrv_Yr";
				Mapping: {
					"CMM_CSCURVE_INDEX" --> SCrv1,
					"SupReg_Code"       --> SReg,
					"sulf_code"         --> Sulf,
					"mtyp_code"         --> MTyp,
					"Rank_Code"         --> Rank,
					"CALENDAR_YEAR"     --> Yr,
					"LAG_PROD"          --> LAG_PROD_Temp,
					"LAG_PRI"           --> LAG_PRIInitial,
					"QTARG"             --> QTargInitial
				}
			}
			DatabaseTable TInp_NEMS_Yr {
				DataSource: CPSConnectionString;
				TableName: "TInp_NEMS_Yr";
				Mapping: {
					"Calendar_Year"       --> yr,
					"MC_WPI10_MULTIPLIER" --> MC_WPI10_MULTIPLIER
				}
			}
			DatabaseTable TempFortranData {
				DataSource: Fullfilename;
				TableName: "TemporaryFortran2";
				Mapping: {
					"Expr1"       --> yr,
					"SupReg_Code" --> SReg,
					"sulf_code"   --> Sulf,
					"mtyp_code"   --> Mtyp,
					"Rank_Code"   --> Rank,
					"scurvestep"  --> Scrv1Step,
					"sprice_temp" --> TempFortranPrice,
					"scquan_temp" --> TempFortranQuantity
				}
			}
			DatabaseTable TempFortranProdCap {
				DataSource: Fullfilename;
				TableName: "TemporaryFortranFP_Prod_cap";
				Mapping: {
					"Scrv1"              --> Scrv1,
					"SupReg_Code"        --> SReg,
					"sulf_code"          --> Sulf,
					"mtyp_code"          --> Mtyp,
					"Rank_Code"          --> Rank,
					"Yr"                 --> yr,
					"Fortranfy_prod_cap" --> TempFortranFY_PROD_CAP,
					"FortranLag_prod"    --> TemFortranLAG_PROD
				}
			}
			DatabaseTable TempFortranFPData {
				DataSource: Fullfilename;
				TableName: "TemporaryFortranFP";
				Mapping: {
					"Scrv1"       --> Scrv1,
					"SupReg_Code" --> SReg,
					"sulf_code"   --> Sulf,
					"mtyp_code"   --> Mtyp,
					"Rank_Code"   --> Rank,
					"Yr"          --> yr,
					"Fortranfp"   --> TempFortranFP
				}
			}
			DatabaseTable TempFortranQTargCMM {
				DataSource: Fullfilename;
				TableName: "TemporaryFortranT_qtarg_cmm";
				Mapping: {
					"Scrv1"              --> Scrv1,
					"SupReg_Code"        --> SReg,
					"sulf_code"          --> Sulf,
					"mtyp_code"          --> Mtyp,
					"Rank_Code"          --> Rank,
					"Yr"                 --> yr,
					"Fortrant_qtarg_cmm" --> TempFortranT_QTARG_CMM
				}
			}
			DatabaseTable TempFortranUnscrubbedContract {
				DataSource: Fullfilename;
				TableName: "TemporaryFortranUnScrubbedContracts";
				Mapping: {
					"ContractYear"  --> yr,
					"Supply Region" --> SReg,
					"Sulfur"        --> Sulf,
					"Mtyp"          --> Mtyp,
					"Rank"          --> Rank,
					"Demand Region" --> DReg,
					"Quantity"      --> TempFortranCdyrsUnScrubbed
				}
			}
			DatabaseTable TempFortranScrubbedContract {
				DataSource: Fullfilename;
				TableName: "TemporaryFortranScrubbedContracts";
				Mapping: {
					"ContractYear"  --> yr,
					"Supply Region" --> SReg,
					"Sulfur"        --> Sulf,
					"Mtyp"          --> Mtyp,
					"Rank"          --> Rank,
					"Demand Region" --> DReg,
					"Quantity"      --> TempFortranCdyrsScrubbed
				}
			}
			DatabaseTable TempFortranLaggedProdandPrice {
				DataSource: Fullfilename;
				TableName: "TempFortranLagPriceandProd";
				Mapping: {
					"curiyr"    --> yr,
					"scrv1"     --> Scrv1,
					"Sreg"      --> SReg,
					"Sulf"      --> Sulf,
					"Mtyp"      --> Mtyp,
					"Rank"      --> Rank,
					"lag_prod"  --> TempFortranLag_Prod3,
					"lag_price" --> TempFortranLag_Pric
				}
			}
			DatabaseTable TInp_CSRegionName {
				DataSource: CPSConnectionString;
				TableName: "TInp_CSRegionName";
				Mapping: {
					"SupReg_Code"       --> SReg,
					"CMM_CSRG_NAME"     --> CSupplyRegionName
				}
				Comment: "Added input table for Supply Region names in table in CPS.MDB  9/08/17  DAF";
			}
		}
	}
	Section Coal_Production_Submodule_Export {
		DeclarationSection Price_Equation_Debugging {
			Parameter PrintPriceDebug {
				IndexDomain: (M1);
				Text: "set to 1 (the number) if you want iterative price parameters printed for debugging";
				Definition: 0;
			}
			DatabaseTable Sc_priceitr1 {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr1";
				Mapping: {
					"Scrv1"         --> Scrv1,
					"SupplyRegion"  --> SReg,
					"SulfurClass"   --> Sulf,
					"MineMethod"    --> Mtyp,
					"Rank"          --> Rank,
					"cap_util_hist" --> CAP_UTIL_HIST
				}
			}
			DatabaseTable Sc_priceitr2 {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr2";
				Mapping: {
					"Scrv1"         --> Scrv1,
					"SupplyRegion"  --> SReg,
					"SulfurClass"   --> Sulf,
					"MineMethod"    --> Mtyp,
					"Rank"          --> Rank,
					"cap_util_hist" --> CAP_UTIL_HIST
				}
			}
			DatabaseTable Sc_priceitr3 {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr3";
				Mapping: {
					"Scrv1"         --> Scrv1,
					"SupplyRegion"  --> SReg,
					"SulfurClass"   --> Sulf,
					"MineMethod"    --> Mtyp,
					"Rank"          --> Rank,
					"cap_util_hist" --> CAP_UTIL_HIST
				}
			}
			DatabaseTable Sc_priceitr4 {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr4";
				Mapping: {
					"Scrv1"         --> Scrv1,
					"SupplyRegion"  --> SReg,
					"SulfurClass"   --> Sulf,
					"MineMethod"    --> Mtyp,
					"Rank"          --> Rank,
					"cap_util_hist" --> CAP_UTIL_HIST
				}
			}
			DatabaseTable Sc_priceitr5 {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr5";
				Mapping: {
					"Scrv1"         --> Scrv1,
					"SupplyRegion"  --> SReg,
					"SulfurClass"   --> Sulf,
					"MineMethod"    --> Mtyp,
					"Rank"          --> Rank,
					"cap_util_hist" --> CAP_UTIL_HIST
				}
			}
			DatabaseTable Sc_priceitr6 {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr6";
				Mapping: {
					"Scrv1"         --> Scrv1,
					"SupplyRegion"  --> SReg,
					"SulfurClass"   --> Sulf,
					"MineMethod"    --> Mtyp,
					"Rank"          --> Rank,
					"cap_util_hist" --> CAP_UTIL_HIST
				}
			}
			DatabaseTable Sc_priceitr7 {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr7";
				Mapping: {
					"Scrv1"         --> Scrv1,
					"SupplyRegion"  --> SReg,
					"SulfurClass"   --> Sulf,
					"MineMethod"    --> Mtyp,
					"Rank"          --> Rank,
					"cap_util_hist" --> CAP_UTIL_HIST
				}
			}
			DatabaseTable Sc_priceitr1a {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr1a";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Scrv1step"    --> Scrv1Step,
					"Year"         --> yr,
					"Sc_price"     --> SC_PRICE,
					"t_quan"       --> T_QUAN
				}
			}
			DatabaseTable Sc_priceitr2a {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr2a";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Scrv1step"    --> Scrv1Step,
					"Year"         --> yr,
					"Sc_price"     --> SC_PRICE,
					"t_quan"       --> T_QUAN
				}
			}
			DatabaseTable Sc_priceitr2extra {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr2_extra";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"calk"         --> CALK,
					"rc_util_t"    --> RC_Util_T
				}
			}
			DatabaseTable Sc_priceitr3extra {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr3_extra";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"calk"         --> CALK,
					"rc_util_t"    --> RC_Util_T
				}
			}
			DatabaseTable Sc_priceitr3a {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr3a";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Scrv1step"    --> Scrv1Step,
					"Year"         --> yr,
					"Sc_price"     --> SC_PRICE,
					"t_quan"       --> T_QUAN
				}
			}
			DatabaseTable Sc_priceitr4a {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr4a";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Scrv1step"    --> Scrv1Step,
					"Year"         --> yr,
					"Sc_price"     --> SC_PRICE,
					"t_quan"       --> T_QUAN
				}
			}
			DatabaseTable Sc_priceitr5a {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr5a";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Scrv1step"    --> Scrv1Step,
					"Year"         --> yr,
					"Sc_price"     --> SC_PRICE,
					"t_quan"       --> T_QUAN
				}
			}
			DatabaseTable Sc_priceitr6a {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr6a";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Scrv1step"    --> Scrv1Step,
					"Year"         --> yr,
					"Sc_price"     --> SC_PRICE,
					"t_quan"       --> T_QUAN
				}
			}
			DatabaseTable Sc_priceitr7a {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr7a";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Scrv1step"    --> Scrv1Step,
					"Year"         --> yr,
					"Sc_price"     --> SC_PRICE,
					"t_quan"       --> T_QUAN
				}
			}
			DatabaseTable Sc_priceitr1b {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr1b";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Year"         --> yr,
					"mult"         --> MULT,
					"fy_prod_cap"  --> FY_PROD_CAP_X
				}
			}
			DatabaseTable Sc_priceitr2b {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr2b";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Year"         --> yr,
					"mult"         --> MULT,
					"fy_prod_cap"  --> FY_PROD_CAP_X
				}
			}
			DatabaseTable Sc_priceitr3b {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr3b";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Year"         --> yr,
					"mult"         --> MULT,
					"fy_prod_cap"  --> FY_PROD_CAP_X
				}
			}
			DatabaseTable Sc_priceitr4b {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr4b";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Year"         --> yr,
					"mult"         --> MULT,
					"fy_prod_cap"  --> FY_PROD_CAP_X
				}
			}
			DatabaseTable Sc_priceitr5b {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr5b";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Year"         --> yr,
					"mult"         --> MULT,
					"fy_prod_cap"  --> FY_PROD_CAP_X
				}
			}
			DatabaseTable Sc_priceitr6b {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr6b";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Year"         --> yr,
					"mult"         --> MULT,
					"fy_prod_cap"  --> FY_PROD_CAP_X
				}
			}
			DatabaseTable Sc_priceitr7b {
				DataSource: CoalOutConnectionString;
				TableName: "Sc_priceItr7b";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Year"         --> yr,
					"mult"         --> MULT,
					"fy_prod_cap"  --> FY_PROD_CAP_X
				}
			}
		}
	}
	Section STEO_Calibration {
		DeclarationSection Steo_Flag {
			Parameter SteoFlagW {
				IndexDomain: (steoyr);
				Text: {
					"set to 1 indicates that STEO Waste Coal is in operation; set from input file clsteo.txt"
				}
			}
			Parameter SteoFlagET {
				IndexDomain: (steoyr);
				Text: {
					"set to 1 indicates that STEO Electricity Coal Tons is in operation; set from input file clsteo.txt"
				}
			}
			Parameter SteoFlagC {
				IndexDomain: (steoyr);
				Text: {
					"set to 1 indicates that STEO Coking Coal tons is in operation; set from input file clsteo.txt"
				}
			}
			Parameter SteoFlagI {
				IndexDomain: (steoyr);
				Text: {
					"set to 1 indicates that STEO Industrial Coal tons  is in operation; set from input file clsteo.txt"
				}
			}
			Parameter SteoFlagRT {
				IndexDomain: (steoyr);
				Text: {
					"set to 1 indicates that STEO is in operation; set from input file clsteo.txt"
				}
			}
			Parameter SteoFlagIMP {
				IndexDomain: (steoyr);
				Text: {
					"set to 1 indicates that STEO is in operation; set from input file clsteo.txt"
				}
			}
			Parameter ImportShareFlag {
				IndexDomain: cyr|steoflagimp(cyr)=0;
				Definition: 1;
			}
			Parameter SteoFlagStocks {
				IndexDomain: (steoyr);
			}
			Parameter SteoFlagExports {
				IndexDomain: steoyr;
				Text: "Flag for years toscale exports to the STEO steam and coking coal targets";
			}
		}
		DeclarationSection Waste_Coal {
			Parameter WasteCoalSTEO {
				IndexDomain: (steoyr);
			}
			Set WasteCoalSupplyCurve {
				SubsetOf: (SupplyRegion,SulfurClassification,Minetype,CoalRankType);
				Text: "Appalachia coal supply curves (excluding waste coal)";
				Definition: {
					{ (SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
					SReg = '01NA'  and Rank = '5G'}
				}
			}
			Parameter WasteCoalSupplyCurve_Map {
				IndexDomain: {
					(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
					SReg = '01NA'  and Rank = '5G'
				}
				Text: "Appalachia coal supply curves (excluding waste coal)";
				Definition: 1;
			}
			Parameter WasteCoalLower {
				IndexDomain: (steoyr);
				Definition: WasteCoalSTEO(steoyr)*(1-Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Parameter WasteCoalUpper {
				IndexDomain: (steoyr);
				Definition: WasteCoalSTEO(steoyr)*(1+Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Constraint STEOWasteCoalLower {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagW(cyr);
				Text: "steoflagW must be 1 (set in clsteo.txt)";
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| WasteCoalSupplyCurve_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))>= sum(steoyr|steoyr=cyr,WasteCoalLower(steoyr));
				}
			}
			Constraint STEOWasteCoalUpper {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagW(cyr);
				Text: "steoflagW must be 1 (set in clsteo.txt)";
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| WasteCoalSupplyCurve_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))<= sum(steoyr|steoyr=cyr,WasteCoalUpper(steoyr));
				}
			}
			Parameter WasteCoalResult {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: Sum((SReg, Sulf, Mtyp, Rank,steoyr)|  WasteCoalSupplyCurve_Map(SReg, Sulf, Mtyp, Rank) and Btu2(SReg, Sulf, Mtyp, Rank) and yr=steoyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank));
			}
		}
		DeclarationSection Electricity_Consumption {
			Parameter ElecTonsSTEO {
				IndexDomain: (steoyr);
			}
			Parameter ElecTonsLower {
				IndexDomain: (steoyr);
				Definition: ElecTonsSTEO(steoyr)*(1-Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Parameter ElecTonsUpper {
				IndexDomain: (steoyr);
				Definition: ElecTonsSTEO(steoyr)*(1+Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Constraint STEOElecTonsLower {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagET(cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,steoyr)| ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr, ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+Sum((nUS,steoyr)|steoyr=cyr,ImportsElectricityTons(nUS,cyr)) >= sum(steoyr|steoyr=cyr,ElecTonsLower(steoyr))    !+StocksChangeEP(steoyr));
				}
				Comment: {
					"Changed 5-12-20 by Fritsch to attempt to correct STEO calibration - removing StocksChangeEP from STEO Electricty constraints STEOElecTonUpper and STEOElecTonsLower
					and adding to the regional production limits - upper and lower"
				}
			}
			Constraint STEOElecTonsUpper {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagET(cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,steoyr)| ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr, ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,cyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+Sum((nUS,steoyr)|steoyr=cyr,ImportsElectricityTons(nUS,cyr))<= sum(steoyr|steoyr=cyr,ElecTonsUpper(steoyr))
					 !+StocksChangeEP(steoyr));
				}
				Comment: {
					"Changed 5-12-20 by Fritsch to attempt to correct STEO calibration - removing StocksChangeEP from STEO Electricty constraints STEOElecTonUpper and STEOElecTonsLower
					and adding to the regional production limits - upper and lower"
				}
			}
			Parameter ElecTonsResult {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: {
					Sum((nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,steoyr)| ElectricitySupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and Btu2(SReg, Sulf, Mtyp, Rank) and yr=steoyr, ElectricityTransportAC(nsteps,SReg, Sulf, Mtyp, Rank,DReg,pt2,yr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+Sum((nUS,steoyr)|steoyr=yr,ImportsElectricityTons(nUS,yr))
				}
			}
			Parameter ElecTonsPercent {
				IndexDomain: (steoyr);
				Definition: ((ElecTonsResult(steoyr)/$ElecTonsSTEO(steoyr)))*100;
			}
		}
		DeclarationSection EOY_Coal_Stocks {
			Parameter EOYStocksPrim {
				IndexDomain: steoyr;
				Text: "Primary Coal Stocks End of Year (Million Short Tons) - Mines, prep plants, and distribution";
			}
			Parameter EOYStocksSecd {
				IndexDomain: steoyr;
				Text: "Secondary Coal Stock End of Year (Million Short Tons) - Elec Power + Ind + Coking + Institutional";
			}
			Parameter EOYStocksEPEast {
				IndexDomain: steoyr;
			}
			Parameter EOYStocksEPMidW {
				IndexDomain: steoyr;
			}
			Parameter EOYStocksEPSouth {
				IndexDomain: steoyr;
			}
			Parameter EOYStocksEPWest {
				IndexDomain: steoyr;
			}
			Parameter EOYStocksEP {
				IndexDomain: steoyr;
				Definition: EOYStocksEPEast(steoyr) + EOYStocksEPMidW(steoyr) + EOYStocksEPSouth(steoyr) + EOYStocksEPWest(steoyr);
			}
			Parameter StocksChangeEP {
				IndexDomain: steoyr;
				Definition: {
					if  EOYStocksEP(steoyr) >0 then 
					EOYStocksEP(steoyr) - EOYStocksEP(steoyr-1)
					else
					0
					Endif
				}
			}
			Parameter StocksChangePrim {
				IndexDomain: steoyr;
				Definition: EOYStocksPrim(steoyr) - EOYStocksPrim(steoyr-1);
			}
		}
		DeclarationSection Coke_Plants {
			Parameter CokeTonsSTEO {
				IndexDomain: (steoyr);
			}
			Variable CokeStocksTrills {
				IndexDomain: (cyr)|cyr in STEOYears;
			}
			Parameter CokeStocksTons {
				IndexDomain: (steoyr)|SteoFlagC(steoyr);
				Definition: CokeTonsSTEO(steoyr)-CokeTonsResult(steoyr);
			}
			Parameter CokeStocksTonsCR {
				IndexDomain: (MNUMCR,steoyr);
				Definition: {
					if mnumcr = '11' then
					CokeStocksTons(steoyr)
					endif
				}
			}
			Parameter CokeTonsResult {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: {
					sum[(SReg, Sulf, Mtyp, Rank,DReg,CokSec)| PossibleSupplyCurves_Map(DReg, CokSec, SReg, Sulf, Mtyp, Rank),
					CokingTransport(SReg, Sulf, Mtyp, Rank,CokSec,DReg,yr)/$Btu2(SReg, Sulf, Mtyp, Rank)]+
					 Sum((CokSec,DReg,nUS,USi),ImportsCoking(CokSec,DReg,nUS,USi,yr)/$InternationalHeatContent(nUS,'1'))
				}
			}
			Parameter CokeConversion {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: (Sum((steoyr,Censdiv)|yr=steoyr,Qmcin(CensDiv,yr)))/$(CokeTranspTonsCR('11',yr) + ImportsCokingTonsCR('11',yr));
			}
			Constraint STEOCokeTonsStocks {
				IndexDomain: cyr|cyr in STEOYears and steoflagC(cyr);
				Definition: {
					
					Sum((CokSec,DReg),CokingDemand(CokSec,DReg,cyr))-Sum(steoyr|steoyr=cyr,(CokeTonsSTEO(steoyr)))
					!*Sum(globalyr|Map_globalyr_cyr(globalyr,cyr),coalout_cqdbft('11','3',globalyr))
					*Sum (globalyr|Map_globalyr_cyr(globalyr,cyr),
					qblk_qmcin('11',globalyr)/$(CokeTranspTonsCR('11',cyr) + ImportsCokingTonsCR('11',cyr)))
					+ CokeStocksTrills(cyr)
					= 0
				}
			}
			Parameter CokeHeatAdjust {
				IndexDomain: (globalyr);
			}
		}
		DeclarationSection Industrial_Plants {
			Parameter IndustrialTonsSTEO {
				IndexDomain: (steoyr);
				Text: "STEO Target read from clsteo.txt in p2\\coal\\";
			}
			Variable IndustrialStocksTrills {
				IndexDomain: (cyr)|cyr in STEOYears;
			}
			Parameter IndustrialStocksTons {
				IndexDomain: (steoyr)|SteoFlagC(steoyr);
				Definition: IndustrialTonsSTEO(steoyr)-IndustrialTonsResult(steoyr);
			}
			Parameter IndustrialStocksTonsCR {
				IndexDomain: (MNUMCR,steoyr);
				Definition: {
					if mnumcr = '11' then
					IndustrialStocksTons(steoyr)
					endif
				}
			}
			Parameter IndustrialTonsResult {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: {
					sum[(SReg, Sulf, Mtyp, Rank,DReg,IndSec)|PossibleSupplyCurves_Map(DReg, IndSec, SReg, Sulf, Mtyp, Rank),
					IndustrialTransport(SReg, Sulf, Mtyp, Rank,IndSec,DReg,yr)/$Btu2(SReg, Sulf, Mtyp, Rank)]
					+ sum((IndSec,DReg,nUS,USi)|USDRegImportMapping(USi,DReg)=-1,ImportsIndustrial(IndSec,DReg,nUS,USi,yr)/$InternationalHeatContent(nUS,'2'))
				}
			}
			Constraint STEOIndustrialTonsStocks {
				IndexDomain: cyr|cyr in STEOYears and steoflagI(cyr);
				Text: "This balance constraint is in TBtus";
				Definition: {
					
					Sum((IndSec,DReg),IndustrialDemand(IndSec,DReg,cyr))
					-Sum(steoyr|steoyr=cyr,(IndustrialTonsSTEO(steoyr)))
					*Sum(globalyr|Map_globalyr_cyr(globalyr,cyr),coalout_cqdbft('11','2',globalyr))
					!*((IndTranspTrillsCR('11',cyr)+ImportsIndustrialCR('11',cyr))
					!/$(IndTranspTonsCR('11',cyr)+ImportsIndustrialTonsCR('11',cyr)))
					+ IndustrialStocksTrills(cyr)
					= 0
				}
			}
			Parameter CQDBFT_A {
				IndexDomain: (MNUMCR,CLSECT,MNUMYR);
				Text: "Coal Conv Factor for Cons";
			}
			Parameter IndustHeatAdjust {
				IndexDomain: (globalyr);
			}
		}
		DeclarationSection Electricity_Price {
			Parameter BSRZR_util {
				IndexDomain: (yr);
				Definition: {
					
					if BSRZR_util_a(yr) > 0 then
					BSRZR_util_a(yr)
					else
					1
					endif
				}
			}
			Parameter BSRZR_util_a {
				IndexDomain: (yr);
				Text: "Coal Price Scaling Factor read from clflags.txt for STEO years";
			}
			Parameter ElecPriceSTEO {
				IndexDomain: (steoyr);
			}
			Parameter ElecPriceLowerSTEO {
				IndexDomain: (steoyr);
				Definition: Sum(mnumyr|steoyr-mnumyr=1989,ElecPriceSTEO(steoyr))*(1-Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Parameter ElecPriceUpperSTEO {
				IndexDomain: (steoyr);
				Definition: Sum(mnumyr|steoyr-mnumyr=1989,ElecPriceSTEO(steoyr))*(1+Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Parameter ElecPriceResult {
				IndexDomain: (steoyr);
				Text: "Delivered Coal Price to Electricty (nom $/MMbtu)";
				Definition: Sum(mnumyr|mnumyr+1989=steoyr,mpblk_pclel(11,mnumyr)*macout_mc_jpgdp(mnumyr+3));
			}
			Parameter ElecPriceResultPerTon {
				IndexDomain: (steoyr);
				Text: "Delivered Coal Price to Electricty (nom $/ton)";
				Definition: Sum(mnumyr|mnumyr+1989=steoyr,mpblk_pclel(11,mnumyr)*macout_mc_jpgdp(mnumyr+3)*COALOUT_CQDBFT('11','6',mnumyr));
			}
			Parameter ElecPricePercent {
				IndexDomain: (steoyr);
				Definition: ((ElecPriceResult(steoyr)/ElecPriceSTEO(steoyr))-1.)*100;
			}
		}
		DeclarationSection Regional_Production {
			Set STEOYears {
				SubsetOf: AllYears;
				Index: steoyr;
				Property: ElementsAreLabels;
			}
			Parameter STEO_Supply_Tot {
				IndexDomain: (steoyr);
				Definition: AppalachiaLimit(steoyr)+InteriorLimit(steoyr)+WestLimit(steoyr)+WasteCoalSTEO(steoyr)-StocksChangePrim(steoyr)-StocksChangeEP(steoyr)+ImportsSTEO(steoyr);
			}
			Parameter AppalachiaSupplyCurves_Map {
				IndexDomain: {
					(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
					(SReg = '01NA' or SReg = '02CA' or SReg = '03SA') and Rank <> '5G'
				}
				Text: "Appalachia coal supply curves (excluding waste coal)";
				Definition: 1;
			}
			Parameter InteriorSupplyCurves_Map {
				IndexDomain: {
					(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
					(SReg = '04EI' or SReg = '05WI' or SReg = '06GL')and Rank <> '5G'
				}
				Text: "Interior coal supply curves (excluding waste coal)";
				Definition: 1;
			}
			Parameter WestSupplyCurves_Map {
				IndexDomain: {
					(SReg, Sulf, Mtyp, Rank) | Btu2(SReg, Sulf, Mtyp, Rank)>0  and
					(SReg = '07DL' or SReg = '08WM' or SReg = '09NW' or SReg = '10SW' or SReg = '11WW'or SReg = '12RM' or SReg = '13ZN'or SReg = '14AW')
					and Rank <> '5G'
				}
				Text: "Western coal supply curves (excluding waste coal)";
				Definition: 1;
			}
			Constraint STEOAppalachiaLower {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagRT(cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| AppalachiaSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+Sum(steoyr|steoyr=cyr,AppalachiaStocks(steoyr))>= sum(steoyr|steoyr=cyr,AppalachiaLower(steoyr));
				}
			}
			Constraint STEOAppalachiaUpper {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagRT(cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| AppalachiaSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr , ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+Sum(steoyr|steoyr=cyr,AppalachiaStocks(steoyr))<= sum(steoyr|steoyr=cyr,AppalachiaUpper(steoyr));
				}
			}
			Parameter AppalachiaLimit {
				IndexDomain: (steoyr);
			}
			Variable AppalachiaStocks {
				IndexDomain: yr|yr in STEOYears and steoflagStocks(yr);
				Definition: AppStocksLow(yr) + AppStocksHigh(yr);
			}
			Variable AppStocksLow {
				IndexDomain: cyr;
				Range: nonpositive;
			}
			Variable AppStocksHigh {
				IndexDomain: cyr;
				Range: nonnegative;
			}
			Parameter AppalachiaLower {
				IndexDomain: (steoyr);
				Definition: {
					AppalachiaLimit(steoyr)*(1-Tolerance(steoyr)*SideTolerance(steoyr))
					!(AppalachiaLimit(steoyr) + StocksChangeEP(steoyr)*(AppalachiaLimit(steoyr)/$ STEO_ProductionTotal(steoyr))) *(1-Tolerance(steoyr)*SideTolerance(steoyr))
				}
				Comment: {
					"Changed 5-12-20 by Fritsch to attempt to correct STEO calibration - removing StocksChangeEP from STEO Electricty constraints STEOElecTonUpper and STEOElecTonsLower
					and adding to the regional production limits - upper and lower
					9-22-21 Changed back to old method of handeling StockChange, this was wrong to do - Fritsch"
				}
			}
			Parameter AppalachiaStocksGlobalyr {
				IndexDomain: globalyr;
				Definition: Sum(cyr|Map_globalyr_cyr(globalyr,cyr),AppalachiaStocks(cyr));
			}
			Parameter AppalachiaUpper {
				IndexDomain: (steoyr);
				Definition: {
					AppalachiaLimit(steoyr)*(1+Tolerance(steoyr)*SideTolerance(steoyr))
					!(AppalachiaLimit(steoyr) + StocksChangeEP(steoyr)*(AppalachiaLimit(steoyr)/STEO_ProductionTotal(steoyr))) *(1+Tolerance(steoyr)*SideTolerance(steoyr))
				}
				Comment: {
					"Changed 5-12-20 by Fritsch to attempt to correct STEO calibration - removing StocksChangeEP from STEO Electricty constraints STEOElecTonUpper and STEOElecTonsLower
					and adding to the regional production limits - upper and lower
					9-22-21 Changed back to old method of handeling StockChange, this was wrong to do - Fritsch"
				}
			}
			Parameter Tolerance {
				IndexDomain: (steoyr);
			}
			Parameter AppalachiaResult {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| AppalachiaSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and Btu2(SReg, Sulf, Mtyp, Rank) and yr=steoyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+AppalachiaStocks(yr)
				}
			}
			Parameter AppalachiaProdBtu {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: Sum((SReg, Sulf, Mtyp, Rank,steoyr)| AppalachiaSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and Btu2(SReg, Sulf, Mtyp, Rank) and yr=steoyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr));
			}
			Parameter AppalachiaProdHeatcontent {
				IndexDomain: (yr)|yr in STEOYears and (AppalachiaResult(yr)-AppalachiaStocks(yr))>0;
				Definition: AppalachiaProdBtu(yr)/(AppalachiaResult(yr)-AppalachiaStocks(yr));
			}
			Parameter AppPercent {
				IndexDomain: (steoyr);
				Definition: ((AppalachiaResult(steoyr)/AppalachiaLimit(steoyr))-1.)*100;
			}
			Constraint STEOInteriorLower {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagRT(cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| InteriorSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+Sum(steoyr|steoyr=cyr,InteriorStocks(steoyr))>= Sum(steoyr|steoyr=cyr,InteriorLower(steoyr));
				}
			}
			Constraint STEOInteriorUpper {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagRT(cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| InteriorSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+Sum(steoyr|steoyr=cyr,InteriorStocks(steoyr))<= Sum(steoyr|steoyr=cyr,InteriorUpper(steoyr));
				}
			}
			Parameter InteriorLimit {
				IndexDomain: (steoyr);
			}
			Parameter InteriorLower {
				IndexDomain: (steoyr);
				Definition: {
					InteriorLimit(steoyr)*(1-Tolerance(steoyr)*SideTolerance(steoyr))
					!(InteriorLimit(steoyr)  + StocksChangeEP(steoyr)*(InteriorLimit(steoyr)/STEO_ProductionTotal(steoyr))) *(1-Tolerance(steoyr)*SideTolerance(steoyr))
				}
				Comment: {
					"Changed 5-12-20 by Fritsch to attempt to correct STEO calibration - removing StocksChangeEP from STEO Electricty constraints STEOElecTonUpper and STEOElecTonsLower
					and adding to the regional production limits - upper and lower
					9-22-21 Changed back to old method of handeling StockChange, this was wrong to do - Fritsch"
				}
			}
			Parameter InteriorStocksGlobalyr {
				IndexDomain: globalyr;
				Definition: Sum(cyr|Map_globalyr_cyr(globalyr,cyr),InteriorStocks(cyr));
			}
			Variable InteriorStocks {
				IndexDomain: yr|yr in STEOYears and steoflagStocks(yr);
				Definition: InteriorStocksLow(yr) + InteriorStocksHigh(yr);
			}
			Variable InteriorStocksLow {
				IndexDomain: cyr;
				Range: nonpositive;
			}
			Variable InteriorStocksHigh {
				IndexDomain: cyr;
				Range: nonnegative;
			}
			Parameter InteriorUpper {
				IndexDomain: (steoyr);
				Definition: {
					InteriorLimit(steoyr)*(1+Tolerance(steoyr)*SideTolerance(steoyr))
					!(InteriorLimit(steoyr)  + StocksChangeEP(steoyr)*(InteriorLimit(steoyr)/STEO_ProductionTotal(steoyr))) *(1+Tolerance(steoyr)*SideTolerance(steoyr))
				}
				Comment: {
					"Changed 5-12-20 by Fritsch to attempt to correct STEO calibration - removing StocksChangeEP from STEO Electricty constraints STEOElecTonUpper and STEOElecTonsLower
					and adding to the regional production limits - upper and lower
					9-22-21 Changed back to old method of handeling StockChange, this was wrong to do - Fritsch"
				}
			}
			Parameter InteriorResult {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| InteriorSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and Btu2(SReg, Sulf, Mtyp, Rank) and yr=steoyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+InteriorStocks(yr)
				}
			}
			Parameter InteriorProdBtu {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: Sum((SReg, Sulf, Mtyp, Rank,steoyr)| InteriorSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and Btu2(SReg, Sulf, Mtyp, Rank) and yr=steoyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr));
			}
			Parameter InteriorProdHeatcontent {
				IndexDomain: (yr)|yr in STEOYears and (InteriorResult(yr)-InteriorStocks(yr))>0;
				Definition: InteriorProdBtu(yr)/(InteriorResult(yr)-InteriorStocks(yr));
			}
			Parameter IntPercent {
				IndexDomain: (steoyr);
				Definition: ((InteriorResult(steoyr)/InteriorLimit(steoyr))-1.)*100;
			}
			Constraint STEOWestLower {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagRT(cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| WestSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+Sum(steoyr|steoyr=cyr,WestStocks(steoyr))>= Sum(steoyr|steoyr=cyr,WestLower(steoyr));
				}
			}
			Constraint STEOWestUpper {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagRT(cyr);
				Property: Bound, ShadowPrice, Level;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| WestSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and steoyr=cyr, ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+Sum(steoyr|steoyr=cyr,WestStocks(steoyr))<= Sum(steoyr|steoyr=cyr,WestUpper(steoyr));
				}
			}
			Parameter WestLimit {
				IndexDomain: (steoyr);
			}
			Parameter STEO_ProductionTotal {
				IndexDomain: (steoyr);
				Definition: AppalachiaLimit(steoyr) + InteriorLimit(steoyr) + WestLimit(steoyr);
			}
			Parameter WestLower {
				IndexDomain: (steoyr);
				Definition: {
					WestLimit(steoyr)*(1-Tolerance(steoyr)*SideTolerance(steoyr))
					!(WestLimit(steoyr) + StocksChangeEP(steoyr)*(WestLimit(steoyr)/STEO_ProductionTotal(steoyr))) *(1-Tolerance(steoyr)*SideTolerance(steoyr))
				}
				Comment: {
					"Changed 5-12-20 by Fritsch to attempt to correct STEO calibration - removing StocksChangeEP from STEO Electricty constraints STEOElecTonUpper and STEOElecTonsLower
					and adding to the regional production limits - upper and lower
					9-22-21 Changed back to old method of handeling StockChange, this was wrong to do - Fritsch"
				}
			}
			Parameter WestStocksGlobalyr {
				IndexDomain: globalyr;
				Definition: Sum(cyr|Map_globalyr_cyr(globalyr,cyr),WestStocks(cyr));
			}
			Variable WestStocks {
				IndexDomain: yr|yr in STEOYears and steoflagStocks(yr);
				Definition: WestStocksLow(yr) + WestStocksHigh(yr);
			}
			Variable WestStocksLow {
				IndexDomain: cyr;
				Range: nonpositive;
			}
			Variable WestStocksHigh {
				IndexDomain: cyr;
				Range: nonnegative;
			}
			Parameter WestUpper {
				IndexDomain: (steoyr);
				Definition: {
					WestLimit(steoyr)*(1+Tolerance(steoyr)*SideTolerance(steoyr))
					!(WestLimit(steoyr) + StocksChangeEP(steoyr)*(WestLimit(steoyr)/STEO_ProductionTotal(steoyr))) *(1+Tolerance(steoyr)*SideTolerance(steoyr))
				}
				Comment: {
					"Changed 5-12-20 by Fritsch to attempt to correct STEO calibration - removing StocksChangeEP from STEO Electricty constraints STEOElecTonUpper and STEOElecTonsLower
					and adding to the regional production limits - upper and lower
					9-22-21 Changed back to old method of handeling StockChange, this was wrong to do - Fritsch"
				}
			}
			Parameter WestResult {
				IndexDomain: yr|yr in STEOYears;
				Definition: {
					Sum((SReg, Sulf, Mtyp, Rank,steoyr)| WestSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and yr = steoyr and Btu2(SReg, Sulf, Mtyp, Rank), ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr)/$Btu2(SReg, Sulf, Mtyp, Rank))
					+WestStocks(yr)
				}
			}
			Parameter WestProdBtu {
				IndexDomain: yr|yr in STEOYears;
				Definition: Sum((SReg, Sulf, Mtyp, Rank,steoyr)| WestSupplyCurves_Map(SReg, Sulf, Mtyp, Rank) and yr = steoyr and Btu2(SReg, Sulf, Mtyp, Rank), ProductionVolume(SReg, Sulf, Mtyp, Rank,steoyr));
			}
			Parameter WestProdHeatcontent {
				IndexDomain: (yr)|yr in STEOYears and (WestResult(yr)-WestStocks(yr))>0;
				Definition: WestProdBtu(yr)/(WestResult(yr)-WestStocks(yr));
			}
			Parameter WestPercent {
				IndexDomain: (steoyr);
				Definition: ((WestResult(steoyr)/$WestLimit(steoyr))-1.)*100;
			}
			Parameter STEOStocks {
				IndexDomain: (steoyr);
				Comment: "This appears to be set up as a target for total stock change by year, but is never filled with data.  DAF 09/05/2018";
			}
			Constraint STEOStocksByRegion1 {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagStocks(cyr);
				Definition: {
					Sum(steoyr|steoyr=cyr and STEOStocks(steoyr)>0,AppalachiaStocks(steoyr)+InteriorStocks(steoyr)+WestStocks(steoyr))<=
					Sum(steoyr|steoyr=cyr and STEOStocks(steoyr)>0,STEOStocks(steoyr))
				}
			}
			Constraint STEOStocksByRegion1a {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagStocks(cyr);
				Definition: Sum(steoyr|steoyr=cyr and STEOStocks(steoyr)>0,AppalachiaStocks(steoyr)+InteriorStocks(steoyr)+WestStocks(steoyr))>=0;
			}
			Constraint STEOStocksByRegion2a {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagStocks(cyr);
				Definition: Sum(steoyr|steoyr=cyr and STEOStocks(steoyr)<0,AppalachiaStocks(steoyr)+InteriorStocks(steoyr)+WestStocks(steoyr))<=0;
			}
			Constraint STEOStocksByRegion2 {
				IndexDomain: (cyr)|cyr in STEOYears and steoflagStocks(cyr);
				Definition: {
					Sum(steoyr|steoyr=cyr and STEOStocks(steoyr)<0,AppalachiaStocks(steoyr)+InteriorStocks(steoyr)+WestStocks(steoyr))>=
					Sum(steoyr|steoyr=cyr and STEOStocks(steoyr)<0,STEOStocks(steoyr))
				}
			}
			Parameter StocksChngProdResult {
				IndexDomain: yr;
				Definition: AppalachiaStocks(yr)+InteriorStocks(yr)+WestStocks(yr);
			}
		}
		DeclarationSection STEOImportsandExports {
			Parameter CokingExpSTEO {
				IndexDomain: (steoyr);
			}
			Parameter CokeExpTonsResult {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: ExportsMetTranspTons(yr);
			}
			Parameter CokeExpTonsLower {
				IndexDomain: (steoyr);
				Definition: CokingExpSTEO(steoyr)*(1-Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Parameter ExportMultScaleCoke {
				IndexDomain: yr;
				Definition: {
					if CokingExpSTEO(yr) > 0 and SteoFlagExports(yr) then
					!CokingExpSTEO(yr) / $CokeExpTonsResult(yr)
					CokingExpSTEO(yr) / $ ICMMusTotExportsTCTons('1',yr)
					
					else
					1
					endif
				}
			}
			Parameter ExportMultCokeKeep {
				IndexDomain: yr;
			}
			Parameter CokeExpTonsUpper {
				IndexDomain: (steoyr);
				Definition: CokingExpSTEO(steoyr)*(1+Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Parameter SteamExpSTEO {
				IndexDomain: (steoyr);
			}
			Parameter SteamExpTonsResult {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: ExportsThermTranspTons(yr);
			}
			Parameter ExportMultScaleSteam {
				IndexDomain: yr;
				Definition: {
					if SteamExpSTEO(yr) > 0 and SteoFlagExports(yr) then
					!SteamExpSTEO(yr) / $SteamExpTonsResult(yr)
					SteamExpSTEO(yr) / $ ICMMusTotExportsTCTons('2',yr)
					else
					1
					endif
				}
			}
			Parameter ExportMultSteamKeep {
				IndexDomain: yr;
				InitialData: {
					!data 
					!{ 2016 : 1,  2017 : 1,  2018 : 1,  2019 : 1,  2020 : 1,  2021 : 1,  2022 : 1,  2023 : 1,  2024 : 1,  2025 : 1,  2026 : 1,
					!  2027 : 1,  2028 : 1,  2029 : 1,  2030 : 1,  2031 : 1,  2032 : 1,  2033 : 1,  2034 : 1,  2035 : 1,  2036 : 1,  2037 : 1,
					!  2038 : 1,  2039 : 1,  2040 : 1,  2041 : 1,  2042 : 1,  2043 : 1,  2044 : 1,  2045 : 1,  2046 : 1,  2047 : 1,  2048 : 1,
					!  2049 : 1,  2050 : 1 }
				}
			}
			Parameter SteamExpTonsLower {
				IndexDomain: (steoyr);
				Definition: SteamExpSTEO(steoyr)*(1-Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Parameter SteamExpTonsUpper {
				IndexDomain: (steoyr);
				Definition: SteamExpSTEO(steoyr)*(1+Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Parameter ImportsSTEO {
				IndexDomain: (steoyr);
			}
			Parameter ImportTonsResult {
				IndexDomain: (yr)|yr in STEOYears;
				Definition: {
					ImportsElectricityTonsCR('11',yr)+
					ImportsIndustrialTonsCR('11',yr) +
					ImportsCokingTonsCR('11',yr)
				}
			}
			Parameter ImportTonsLower {
				IndexDomain: (steoyr);
				Definition: ImportsSTEO(steoyr)*(1-Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Parameter ImportTonsUpper {
				IndexDomain: (steoyr);
				Definition: ImportsSTEO(steoyr)*(1+Tolerance(steoyr)*SideTolerance(steoyr));
			}
			Constraint STEOImportsLower {
				IndexDomain: cyr|cyr in STEOYears and steoflagIMP(cyr);
				Text: "steoflagIMP must be 1 (set in clsteo.txt)";
				Definition: {
					Sum((steoyr)| steoyr=cyr,
					Sum(nUS,ImportsElectricityTons(nUS,cyr))
					+Sum((IndSec,DReg,nUS,USi),ImportsIndustrial(IndSec,DReg,nUS,USi,cyr)/$InternationalHeatContent(nUS,'2'))
					+Sum((CokSec,DReg,nUS,USi),ImportsCoking(CokSec,DReg,nUS,USi,cyr)/$InternationalHeatContent(nUS,'1')))
					>= Sum((steoyr)|steoyr=cyr,ImportTonsLower(steoyr))
				}
			}
			Constraint STEOImportsUpper {
				IndexDomain: cyr|cyr in STEOYears and steoflagIMP(cyr);
				Text: "steoflagIMP must be 1 (set in clsteo.txt)";
				Definition: {
					Sum((steoyr)| steoyr=cyr,
					Sum(nUS,ImportsElectricityTons(nUS,cyr))
					+Sum((IndSec,DReg,nUS,USi),ImportsIndustrial(IndSec,DReg,nUS,USi,cyr)/$InternationalHeatContent(nUS,'2'))
					+Sum((CokSec,DReg,nUS,USi),ImportsCoking(CokSec,DReg,nUS,USi,cyr)/$InternationalHeatContent(nUS,'1')))
					<= Sum((steoyr)|steoyr=cyr,ImportTonsUpper(steoyr))
				}
			}
		}
		DeclarationSection SideCase_Benchmarking {
			Parameter EMMBENCH;
			Parameter SideTolerance {
				IndexDomain: steoyr;
				Text: "expands the typical 2% tolerance level in a side case scenario";
				Definition: {
					if EMMBENCH = 2 then !typcial side case
					TolAdjBench2(steoyr)
					elseif EMMBENCH = 3 then !co2 fee
					TolAdjBench3(steoyr)
					else
					TolAdjBench1(steoyr)
					endif;
				}
			}
			Parameter TolAdjBench1 {
				IndexDomain: steoyr;
			}
			Parameter TolAdjBench2 {
				IndexDomain: steoyr;
			}
			Parameter TolAdjBench3 {
				IndexDomain: steoyr;
			}
			Parameter STEO_Demand_Tot {
				IndexDomain: (steoyr);
				Definition: ElecTonsSTEO(steoyr)+CokeTonsSTEO(steoyr)+IndustrialTonsSTEO(steoyr)+CokingExpSTEO(steoyr)+SteamExpSTEO(steoyr);
			}
		}
	}
	Section Database_Inputs {
		DeclarationSection Coal_Database_Inputs {
			DatabaseTable inp_historical_imports {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_imports";
				Mapping: {
					"Year"                      --> yr,
					"MinimumElectricityImports" --> ImportsMinimumElectricity,
					"MaximumElectricityImports" --> ImportsMaximumElectricity,
					"MinimumIndustrialImports" --> ImportsMinimumIndustrial,
					"MaximumIndustrialImports" --> ImportsMaximumIndustrial,
					"MinimumCokingImports" --> ImportsMinimumCoking,
					"MaximumCokingImports" --> ImportsMaximumCoking
				}
			}
			DatabaseTable inp_historical_production {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_production";
				Mapping: {
					"Mnumlr"   --> NSREGN,
					"Rank"     --> M4,
					"Sulf"     --> M3,
					"Minetype" --> M2,
					"Year"     --> yr,
					"Hclprd"   --> hclprd
				}
			}
			DatabaseTable inp_historical_prices {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_minemouth";
				Mapping: {
					"Mnumlr"   --> NSREGN,
					"Rank"     --> M4,
					"Sulf"     --> M3,
					"Minetype" --> M2,
					"Year"     --> yr,
					"Hclprd"   --> hclmmpr1
				}
			}
			DatabaseTable inp_historical_EastWest {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_East_West";
				Mapping: {
					"m3"       --> M3,
					"yr"       --> yr,
					"hclprdbt" --> hclprdbt
				}
			}
			DatabaseTable inp_historical_waste_Miscel {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_wastecoal_Miscell";
				Mapping: {
					"yr"         --> yr,
					"hwcdistst"  --> hwcdistst,
					"hwcprodbtu" --> hwcprodbtu,
					"hclexptn"   --> hclexptn,
					"hclexpbt"   --> hclexpbt,
					"hclimptn"   --> hclimptn,
					"hclimpbt"   --> hclimpbt,
					"hclmmtn1"   --> hclmmtn1,
					"hclmmbt1"   --> hclmmbt1
				}
			}
			DatabaseTable inp_historical_railtonmiles {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_East_West_Rail";
				Mapping: {
					"m3"         --> M2,
					"yr"         --> yr,
					"hcltrtmrrc" --> hcltrtmrrc
				}
			}
			DatabaseTable inp_historical_bySupplyRegion {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_distribution_by_supplyregion";
				Mapping: {
					"Mnumlr"  --> NSREGN,
					"Year"    --> yr,
					"hcldist" --> hcldist
				}
			}
			DatabaseTable inp_historical_sector_consump_prices {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_sectoral";
				Mapping: {
					"Sec"       --> Sec,
					"yr"        --> yr,
					"hclcon"    --> hclcon,
					"hcldprtn1" --> hcldprtn1,
					"hcldprbt1" --> hcldprbt1
				}
			}
			DatabaseTable inp_historical_worldcoalflows {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_worldtrade";
				Mapping: {
					"M4"   --> M4,
					"Importing Region Description" --> WrldImpRegionName,
					"M11"  --> M11,
					"Exporting Region Description" --> WrldExpRegionName,
					"tc"   --> tc,
					"year" --> yr,
					"hclworld" --> hclworld
				}
			}
			DatabaseTable inp_historical_map_m11_Ae {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_Map_M11_Ae";
				Mapping: {
					"M11"        --> M11,
					"Ae"         --> Ae,
					"Map_M11_Ae" --> map_m11_Ae
				}
			}
			DatabaseTable inp_historical_map_m4_ImportRegion {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_Map_M4_ImportRegion";
				Mapping: {
					"M4"               --> M4,
					"i"                --> i,
					"Map_M4_Importing" --> map_m4_importregion
				}
			}
			DatabaseTable inp_Historical_RCAFWts {
				DataSource: CMM2ConnectionString;
				TableName: "Historical_RCAFWts";
				Mapping: {
					"Year"		--> yr,
					"wt_Labor"	--> wt_Labor,
					"wt_Fuel"	--> wt_Fuel,
					"wt_MaterialSup" --> wt_MaterialSup,
					"wt_Equipment"	--> wt_Equipment,
					"wt_Depreciation" --> wt_Depreciation,
					"wt_Interest"	--> wt_Interest,
					"wt_Other" 	--> wt_Other
				}
			}
			DatabaseTable inp_PADD_mapping {
				DataSource: CMM2ConnectionString;
				TableName: "PADD Mapping";
				Mapping: {
					"MyPADD"      --> PADD,
					"Global PADD" --> MNUMPR,
					"map"         --> Map_PADD_Mnumpr
				}
			}
			DatabaseTable inp_Census_Division {
				DataSource: CMM2ConnectionString;
				TableName: "Census Division Mapping";
				Mapping: {
					"Censusname1" --> MNUMCR,
					"censusname2" --> CensDiv,
					"map"         --> Map_Mnumcr_CensDiv
				}
			}
			DatabaseTable inp_intlsupplycurvnum {
				DataSource: CMM2ConnectionString;
				TableName: "Mapintltomxnci";
				Mapping: {
					"e"            --> nUS,
					"Mapintlmxnci" --> Map_intl_mxnci
				}
			}
			DatabaseTable inp_Census_DReg_Map {
				DataSource: "input\\CMM2.mdb.dsn";
				TableName: "Census Division Mapping";
				Mapping: {
					"Censusname1" --> MNUMCR,
					"censusname2" --> CensDiv,
					"map"         --> Map_Mnumcr_CensDiv
				}
			}
			DatabaseTable inp_DReg_CensusNum_Map {
				DataSource: CMMConnectionString;
				TableName: "Inp_CensusDivMap8";
				Mapping: {
					"CR"           --> MNUMCR,
					"DemandRegion" --> DReg,
					"map8"         --> Map_DReg_MNUMCR
				}
			}
			DatabaseTable inp_Demand_Region {
				DataSource: CMM2ConnectionString;
				TableName: "Demand Regions";
				Mapping: {
					"dr"   --> NDREGN,
					"code" --> Map_ndregn
				}
			}
			DatabaseTable inp_IntlExpReg {
				DataSource: CMMConnectionString;
				TableName: "tInp_InternationalExportReg";
				Mapping: {
					"IntExpReg" --> e,
					"USIntern" --> USeFLAG(e),
					"NonUSInt" --> NonUSFLAG(e)
				}
			}
			DatabaseTable inp_DomesticInternationalMapping {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_clexex_mapping";
				Mapping: {
					"USInternationalRegion" --> USe,
					"DemandRegion"          --> DReg,
					"Flag"                  --> USDRegIntlMapping
				}
			}
			DatabaseTable inp_contractprofile {
				DataSource: CMMConnectionString;
				TableName: "tInp_clcont1_contrProf";
				Mapping: {
					"ContrProfNum" --> cnum,
					"Year"         --> yr,
					"CProfValue"   --> ContractProfile
				}
			}
			DatabaseTable inp_USImportShare {
				DataSource: CMMConnectionString;
				TableName: "USImport_Shares";
				Mapping: {
					"DReg"       --> DReg,
					"USImpShare" --> USImpShare
				}
			}
			DatabaseTable inp_transpprofile {
				DataSource: CMMConnectionString;
				TableName: "tInp_clcont2_TranspProf";
				Mapping: {
					"TranspProfNum" --> TranspProfileNumber,
					"Year"          --> yr,
					"TProfValue"    --> TranspProfile
				}
			}
			DatabaseTable inp_subdivprofile {
				DataSource: CMMConnectionString;
				TableName: "tInp_clcont3_SubDivProf";
				Mapping: {
					"SubDivProfNum" --> SubDivProfileNumber,
					"Year"          --> yr,
					"SDProfValue"   --> SubDivProfile
				}
			}
			DatabaseTable inp_ligdivprofile {
				DataSource: CMMConnectionString;
				TableName: "tInp_clcont4_LigDivProf";
				Mapping: {
					"LigDivProfNum" --> LigDivProfileNumber,
					"Year"          --> yr,
					"LDProfValue"   --> LigDivProfile
				}
			}
			DatabaseTable inp_specificplantprofile {
				DataSource: CMMConnectionString;
				TableName: "Contracts";
				Mapping: {
					"piduid"        --> pu_id,
					"SupplyRegion"  --> SReg,
					"Sulfur"        --> Sulf,
					"Minetype"      --> Mtyp,
					"CoalRank"      --> Rank,
					"ContrProfNum"  --> Plant_C_Prof,
					"ContTBTU"      --> Plant_BaseYear_Btu,
					"TranspProfNum" --> Plant_T_Prof
				}
			}
			DatabaseTable inp_totalBtusbyPlant {
				DataSource: CMMConnectionString;
				TableName: "TotalBtusforPlant";
				Mapping: {
					"piduid"            --> pu_id,
					"TotalBtusforPlant" --> TBTU
				}
			}
			DatabaseTable inp_specificplantprofileSubbit {
				DataSource: CMMConnectionString;
				TableName: "ContractsSubbit";
				Mapping: {
					"piduid" --> pu_id,
					"SubDiv" --> Plant_S_Prof
				}
			}
			DatabaseTable inp_specificplantprofileLig {
				DataSource: CMMConnectionString;
				TableName: "ContractsLig";
				Mapping: {
					"piduid" --> pu_id,
					"LigDiv" --> Plant_L_Prof
				}
			}
			DatabaseTable inp_plantmapping {
				DataSource: CMMConnectionString;
				TableName: "tInp_PlantMapping2";
				Mapping: {
					"piduid"    --> Plantid_unitid,
					"plantid"   --> Plantid,
					"unitid"    --> Unitid,
					"plantname" --> PlantName,
					"state"     --> PlantState
				}
			}
			DatabaseTable inp_newplantprofile {
				DataSource: CMMConnectionString;
				TableName: "tInp_clcont5_NewPlantDivProf";
				Mapping: {
					"dr"              --> DReg,
					"NewSubitProfVal" --> NewPlantSubitProfile,
					"NewLigProfVal"   --> NewPlantLigProfile
				}
			}
			DatabaseTable inp_SupplyReg {
				DataSource: CMMConnectionString;
				TableName: "tInp_SReg";
				Mapping: {
					"SupReg"      --> SReg,
					"AggSupRegId" --> ASReg,
					"Map6"        --> Map_SReg_ASReg
				}
			}
			DatabaseTable inp_EastWestReg {
				DataSource: CMMConnectionString;
				TableName: "tInp_EastWestReg";
				Mapping: {
					"SupReg" --> SReg,
					"EWReg"  --> EW,
					"Map7"   --> Map_SReg_EW
				}
			}
			DatabaseTable inp_Map12Ftab {
				DataSource: CMMConnectionString;
				TableName: "Map12ftab";
				Mapping: {
					"Mtyp"  --> Mtyp,
					"M3"    --> M3,
					"Map12" --> Map_Mtyp_M3
				}
			}
			DatabaseTable inp_AggregSupplyReg {
				DataSource: CMMConnectionString;
				TableName: "tInp_ASReg";
				Mapping: "AggSupRegId" --> ASReg;
			}
			DatabaseTable inp_Map10Ftab {
				DataSource: CMMConnectionString;
				TableName: "Map10ftab";
				Mapping: {
					"SupReg" --> SReg,
					"M14"    --> M14,
					"Map10"  --> Map_SReg_M14
				}
			}
			DatabaseTable inp_Map11Ftab {
				DataSource: CMMConnectionString;
				TableName: "Map11ftab";
				Mapping: {
					"Rank"  --> Rank,
					"M4"    --> M4,
					"Map11" --> Map_Rank_M4
				}
			}
			DatabaseTable inp_Map13Interntional {
				DataSource: CMM2ConnectionString;
				TableName: "International Mapping";
				Mapping: {
					"InternationalSupply" --> e,
					"InternaSupplyNumber" --> MX_ISC,
					"map"                 --> Map_e_MX_ISC
				}
			}
			DatabaseTable inp_Map18Ftab {
				DataSource: CMMConnectionString;
				TableName: "Map18ftab";
				Mapping: {
					"Sulf"  --> Sulf,
					"M3"    --> M3,
					"Map12" --> Map_Sulf_M3
				}
			}
			DatabaseTable inp_Map19Ftab {
				DataSource: CMMConnectionString;
				TableName: "Map19ftab";
				Mapping: {
					"e"     --> e,
					"M11"   --> M11,
					"Map19" --> Map_e_M11
				}
			}
			DatabaseTable inp_Map20Ftab {
				DataSource: CMMConnectionString;
				TableName: "Map20ftab";
				Mapping: {
					"i"     --> i,
					"M4"    --> M4,
					"Map20" --> Map_i_M4
				}
			}
			DatabaseTable inp_numberminers {
				DataSource: CMMConnectionString;
				TableName: "tInp_clparam_NumberMiners";
				Mapping: {
					"SupplyRegion"   --> SReg,
					"NumberofMiners" --> Miners
				}
			}
			DatabaseTable inp_coalgroupflags {
				DataSource: CMMConnectionString;
				TableName: "tInp_clparam_CoalGroupFlags2";
				Mapping: {
					"DemandRegion" --> DReg,
					"DetailSector" --> Subsec,
					"SupplyRegion" --> SReg,
					"Sulfur"       --> Sulf,
					"Minetype"     --> Mtyp,
					"Rank"         --> Rank,
					"Flag"         --> CoalGroupFlag
				}
			}
			DatabaseTable inp_escalator {
				DataSource: CMMConnectionString;
				TableName: "tInp_clparam_Escalator";
				Mapping: {
					"Year"       --> yr,
					"RAILWAGE"   --> Railwage,
					"TR_PROD_E"  --> Tr_prod_e,
					"TR_PROD_W"  --> Tr_prod_w,
					"DIST_W"     --> Dist_w,
					"CONTRDUR_E" --> Contrdur_e,
					"CONTRDUR_W" --> Contrdur_w,
					"PPIRAILEQ"  --> PPIrail_actual
				}
			}
			DatabaseTable inp_escalatordistance {
				DataSource: CMMConnectionString;
				TableName: "tInp_clparam_EscalatorDistance";
				Mapping: {
					"SupplyRegion" --> SReg,
					"DemandRegion" --> DReg,
					"Distance"     --> Distance
				}
			}
			DatabaseTable inp_PADD {
				DataSource: CMMConnectionString;
				TableName: "tInp_clshare_PADD";
				Mapping: {
					"MajorSector"  --> Sec,
					"PADDRegion"   --> PADD,
					"DemandRegion" --> DReg,
					"CTL_CDSL1"    --> PMMDivShare
				}
			}
			DatabaseTable inp_PADD_DReg_Map9 {
				DataSource: CMMConnectionString;
				TableName: "Map_PADD_DReg";
				Mapping: {
					"PADDRegion"   --> PADD,
					"DemandRegion" --> DReg,
					"Map9"         --> Map_PADD_DReg
				}
			}
			DatabaseTable inp_stocks {
				DataSource: CMMConnectionString;
				TableName: "tInp_clshare_STOCKS";
				Mapping: {
					"EntryYear"    --> yr,
					"DemandRegion" --> DReg,
					"StockBase"    --> Stockbase,
					"StockShare"   --> Stockshare
				}
			}
			DatabaseTable inp_FRADI {
				DataSource: CMMConnectionString;
				TableName: "tInp_clshare_FRADI";
				Mapping: {
					"DemandRegion"   --> DReg,
					"DetailedSector" --> SubSec,
					"FRADI"          --> FRADI
				}
			}
			DatabaseTable inp_censusdivision {
				DataSource: CMMConnectionString;
				TableName: "tInp_clshare_CensusDivision";
				Mapping: {
					"MajorSector"    --> Sec,
					"CensusDivision" --> CensDiv,
					"DemandRegion"   --> DReg,
					"FromCenDiv"     --> CensDivShare
				}
			}
			DatabaseTable inp_Sec {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_Sec";
				Mapping: {
					"Sec"             --> Sec,
					"MAJORsECTORfLAG" --> MajorSectorFlag
				}
			}
			DatabaseTable inp_Subsec {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_Subsec";
				Mapping: {
					"Subsec" --> Subsec,
					"flag"   --> SubSectorFlag
				}
			}
			DatabaseTable inp_ExpSubsec {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_ExportsSubsec";
				Mapping: {
					"Subsec" --> ExpSec,
					"flag"   --> ExpSubSectorFLAG
				}
			}
			DatabaseTable inp_ComboSectorFlag {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_SectorComboFlag";
				Mapping: {
					"Subsec" --> Subsec,
					"Sec"    --> Sec,
					"Flag"   --> SectorComboFlag
				}
			}
			DatabaseTable inp_allowed {
				DataSource: CMM2ConnectionString;
				TableName: "Mercury_allowed";
				Mapping: {
					"numsteps" --> nsteps,
					"Allowed"  --> allowed
				}
			}
			DatabaseTable inp_importsurcharge {
				DataSource: CMM2ConnectionString;
				TableName: "clintlsurcharge";
				Mapping: {
					"ImportSectors"         --> ImpSec,
					"nonUSexportingregions" --> nUS,
					"DemandRegions"         --> DReg,
					"USImportingRegions"    --> USi,
					"Pinlandtr"             --> Pinlandtr
				}
			}
			DatabaseTable inp_ImportSurchargeDistance {
				DataSource: CMM2ConnectionString;
				TableName: "clintldistance";
				Mapping: {
					"USImportingRegion"          --> USi,
					"DemandRegion"               --> DReg,
					"InlandDistanceforSurcharge" --> DistanceSurchargeImport
				}
			}
			DatabaseTable inp_USDRegIntlmapping {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_USDRegImportMapping";
				Mapping: {
					"USImportingRegions"    --> USi,
					"DemandRegions"         --> DReg,
					"USDRegImportingRegion" --> USDRegImportMapping
				}
			}
			DatabaseTable inp_iimportinlandrates {
				DataSource: CMM2ConnectionString;
				TableName: "clintlinland";
				Mapping: {
					"USImportingRegion"     --> USi,
					"TonsPCar_Imports"      --> TonsPCar_Imp,
					"Trigger_Imp"           --> Trigger_Imp,
					"Trig_Incr_Imp"         --> Trig_Incr_Imp,
					"ChargePermile_car_imp" --> ChargePerMile_Car_Imp
				}
			}
			DatabaseTable inp_RegionalStocks {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_RegionalStocks";
				Mapping: {
					"stockyr"      --> stockyr,
					"stockregion"  --> StockReg,
					"stocksregion" --> Stocks
				}
			}
			DatabaseTable inp_IntlVesselCosts {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_IntlVesselCosts";
				Mapping: {
					"yr"			-->  yr,
					"VesselClass"		-->  VesselClass,
					"DailyHireCost" 	-->  DailyHireCost,
					"PortCostPer_mTon"	-->  PortCostPer_mTon,
					"PortDays"		-->  PortDays,
					"BunkerFuelUseSea"	-->  BunkerFuelUseSea,
					"DieselFuelUseSea"	-->  DieselFuelUseSea,
					"DieselFuelUsePort"	-->  DieselFuelUsePort,
					"SailingSpeedKn"	-->  SailingSpeedKn
				}
			}
			DatabaseTable Inp_MarineFuels {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_MarineFuels";
				Mapping: {
					"yr"			-->  yr,
					"BunkerIFO380_USGulf"	--> BunkerIFO380_USGulf,
					"DieselMGO_USGulf"	--> DieselMGO_USGulf
				}
			}
			DatabaseTable Inp_MFuelDiffs {
				DataSource: CMM2ConnectionString;
				TableName: "tInp_MFuelDiffs";
				Mapping: {
					"e" 			-->  e,
					"BunkerIFO_RgnDiff"	-->  BunkerIFO_RgnDiff,
					"DieselMGO_RgnDiff" 	-->  DieselMGO_RgnDiff
				}
			}
		}
		DeclarationSection Coal_Database_Outputs {
			DatabaseTable OutputDomesticBtu {
				DataSource: CoalOutConnectionString;
				TableName: "DomesticTransportBtu";
				Mapping: {
					"nsteps"          --> NSTEPS,
					"SupplyRegion"    --> SReg,
					"SulfurClass"     --> Sulf,
					"MineMethod"      --> Mtyp,
					"Rank"            --> Rank,
					"Planttype2"      --> pt2,
					"DemandRegion"    --> DReg,
					"Year"            --> yr,
					"TransportVolume" --> ElectricityTransportACYr
				}
			}
			DatabaseTable OutputProductionDollars {
				DataSource: CoalOutConnectionString;
				TableName: "ProductionDollars";
				Mapping: {
					"SupplyRegion"           --> SReg,
					"SulfurClass"            --> Sulf,
					"MineMethod"             --> Mtyp,
					"Rank"                   --> Rank,
					"Step"                   --> Scrv1Step,
					"Year"                   --> yr,
					"TotalProductiondollars" --> ProductionCostDetail,
					"ProductionVolume"       --> ProductionVolumeStepsDetail,
					"PriceatEachStep"        --> MarginalProductionPrice
				}
			}
			DatabaseTable OutputResComBtu {
				DataSource: CoalOutConnectionString;
				TableName: "ResidentialCommercialTransportBtu";
				Mapping: {
					"SupplyRegion"    --> SReg,
					"SulfurClass"     --> Sulf,
					"MineMethod"      --> Mtyp,
					"Rank"            --> Rank,
					"DemandRegion"    --> DReg,
					"Year"            --> cyr,
					"Subsec"          --> ResComSubSector,
					"TransportVolume" --> ResidentialTransport
				}
			}
			DatabaseTable OutputIndustrialBtu {
				DataSource: CoalOutConnectionString;
				TableName: "IndustrialTransportBtu";
				Mapping: {
					"SupplyRegion"    --> SReg,
					"SulfurClass"     --> Sulf,
					"MineMethod"      --> Mtyp,
					"Rank"            --> Rank,
					"DemandRegion"    --> DReg,
					"Year"            --> cyr,
					"Subsec"          --> IndustrialSubSector,
					"TransportVolume" --> IndustrialTransport
				}
			}
			DatabaseTable OutputCokingBtu {
				DataSource: CoalOutConnectionString;
				TableName: "CokingTransportBtu";
				Mapping: {
					"SupplyRegion"    --> SReg,
					"SulfurClass"     --> Sulf,
					"MineMethod"      --> Mtyp,
					"Rank"            --> Rank,
					"DemandRegion"    --> DReg,
					"Year"            --> cyr,
					"TransportVolume" --> CokingTransport,
					"Subsec"          --> CokingSubSector
				}
			}
			DatabaseTable OutputLiquidsBtu {
				DataSource: CoalOutConnectionString;
				TableName: "LiquidsTransportBtu";
				Mapping: {
					"SupplyRegion"    --> SReg,
					"SulfurClass"     --> Sulf,
					"MineMethod"      --> Mtyp,
					"Rank"            --> Rank,
					"DemandRegion"    --> DReg,
					"Year"            --> cyr,
					"TransportVolume" --> LiquidsTransport,
					"Subsec"          --> LiquidsSubSector
				}
			}
			DatabaseTable OutputLaggedProduction {
				DataSource: CoalOutConnectionString;
				TableName: "LaggedProduction";
				Mapping: {
					"Scrv1"           --> Scrv1,
					"SupplyRegion"    --> SReg,
					"SulfurClass"     --> Sulf,
					"MineMethod"      --> Mtyp,
					"Rank"            --> Rank,
					"Year"            --> yr,
					"ProdutionVolume" --> LaggedProductionTonsforCPS1
				}
			}
			DatabaseTable OutputLaggedPrice {
				DataSource: CoalOutConnectionString;
				TableName: "LaggedPrice";
				Mapping: {
					"Scrv1"        --> Scrv1,
					"SupplyRegion" --> SReg,
					"SulfurClass"  --> Sulf,
					"MineMethod"   --> Mtyp,
					"Rank"         --> Rank,
					"Year"         --> yr,
					"LaggedPrice"  --> LaggedProductionPriceforCPS1
				}
			}
			DatabaseTable OutputMacroVariables {
				DataSource: CoalOutConnectionString;
				TableName: "MacroVariables";
				Mapping: {
					"Yr"  --> MNUMY3,
					"GDP" --> MACOUT_MC_JPGDP
				}
			}
			DatabaseTable OutputExports {
				DataSource: CoalOutConnectionString;
				TableName: "Exports";
				Mapping: {
					"Supply Region"        --> SReg,
					"Sulf"                 --> Sulf,
					"Mintetype"            --> Mtyp,
					"Rank"                 --> Rank,
					"ExportSector"         --> ExpSec,
					"AggUSExportingRegion" --> USe,
					"USDemandRegion"       --> DReg,
					"Year"                 --> yr,
					"TrillionBtu"          --> ExportsTransport5Final
				}
			}
			DatabaseTable OutputExportsTest {
				DataSource: CoalOutConnectionString;
				TableName: "ExportsTest";
				Mapping: {
					"Year"        --> yr,
					"ThermalTest" --> ExportsThermTranspTons,
					"MetTest"     --> ExportsMetTranspTons
				}
			}
			DatabaseTable OutputEscape1 {
				DataSource: CoalOutConnectionString;
				TableName: "EscapeVectors1";
				Mapping: {
					"Sreg"        --> SReg,
					"sulfur"      --> Sulf,
					"minetype"    --> Mtyp,
					"rank"        --> Rank,
					"sector"      --> Subsec,
					"dreg"        --> DReg,
					"year"        --> yr,
					"EscapeRC"    --> EscapeRCReporting,
					"EscapeInd"   --> EscapeIndReporting,
					"EscapeCok"   --> EscapeCokeReporting,
					"EscapeLiqu"  --> EscapeLiquReporting
				}
			}
			DatabaseTable OutputEscapeTotal {
				DataSource: CoalOutConnectionString;
				TableName: "EscapeVectorTotal";
				Mapping: {
					"YearofProblem"     --> yr,
					"EscapeVectorTotal" --> EscapeVector
				}
			}
		}
	}
	Procedure ReadData {
		Body: {
			           empty Plantid_unitid;
			        !   read from file "..\\COALEMM_EMM_CL_UNITS.txt" ;   ! Try reading from coalunits.txt
			           read from file "input/coalunits.txt" ;   !try reading alt file from input/ sub-directory  April 2022
			
			
			! All oal input files will now be read from /coal/input sub-directory of coal project. Use current location defined by "root" variable.
			! DAF 3-14-2022
			 	inputLocationCoal:=root + "\input" ;
			! May not need path above.  Try direct reads from input sub-directory of current directory.
			
				read from file "input/cmmUScoalImports.txt" ;   ! new file March 2022
				read from file "input/cpsProdParam.txt" ;       ! new file March 2022
				read from file "input/cmmheastwest.txt" ;       ! new file March 2022
				read from file "input/cmmhmiscellaneous.txt" ;  ! new file March 2022
				read from file "input/cmmhcldist.txt" ;		! new file March 2022
				read from file "input/cmmhsectoral.txt" ;	! new file March 2022
				read from file "input/cmmhclworld.txt" ;	! new file March 2022
				read from file "input/cdsRegionRef.txt" ; 	! new file March 2022
				read from file "input/cmmRCAFwts.txt" ; 	! new file March 2022
				read from file "input/cpsRegionRef.txt" ; 	! new file March 2022
				read from file "input/cpsSCrvYearIndx.txt" ; 	! new file March 2022
				read from file "input/cdsImpSurcharge.txt" ; 	! new file March 2022
				read from file "input/cmmCoalPlntData.txt" ; 	! new file April 2022
				read from file "input/cmmProfiles.txt" ; 	! new file May 2022
			           !read in side case tolerance adjustment flag
			           read from file "emmbench.txt" ;   !same location - may move read location but not yet
			
				!changed to read those files with SCEDES keys from handshake file created by Clair Su
				read from file "cl_runval.txt" ;
				!new reads using string parameters filled in cl_runval.txt
				read from file CLFLAGSN ; 		! new path March & November 2022  DAF
				read from file CLINTLUSEXPORTN ; 	! new path March & November 2022  DAF
				read from file CLTONSPERCARN ; 		! new path March & November 2022  DAF
				read from file CLTONRAILMILEN ; 	! new path March & November 2022  DAF
				read from file CLRATESNONELECN ; 	! new path March & November 2022  DAF
				read from file CLRATESELECN ;	 	! new path March & November 2022  DAF
				read from file CLFREIGHTN ; 		! new path March & November 2022  DAF
				read from file CLFEASIBLEROUTN ; 	! new path March & November 2022  DAF
				read from file CLDISTANCEN ;	 	! new path March & November 2022  DAF
				read from file CLINTLSUPPLYN ;  	! new path March & November 2022  DAF
				read from file CLINTLQUALITYN ; 	! new path March & November 2022  DAF
				read from file CLINTLDEMANDN ; 		! new path March & November 2022  DAF
				read from file CLEXPORTLIMITSN ; 	! new path March & November 2022  DAF
				read from file CLIMPORTLIMITSN ; 	! new path March & November 2022  DAF
				read from file CLAGGEXPORTMAPN ; 	! new path March & November 2022  DAF
				read from file CLOCEANDISTN ; 		! new path March & November 2022  DAF
				read from file ICMMCOMMODITYMAPN ; 	! new path March & November 2022  DAF
				read from file CLUSEXPORTICMMN ; 	! new path March & November 2022  DAF
			
			
			
			           !fullFilename := inputLocation + "\cmm2.mdb.dsn";
			           !fullFilename := inputLocation + "\cmm2.m.dsn";
			           ! e.g. M:\rec\edt\wrk\run_scenarios\testdef-debug\d041020f\p2\input\cmm2.mdb.dsn
			
			           !Historical data
			                 !read from file "dbFiles/CMM2_H1_inp_historical_imports.txt";
			
			                 !read from file "dbFiles/CMM2_H2_inp_historical_production.txt";	! Moved to new file
			
			                 !read from file "dbFiles/CMM2_H3_inp_historical_prices.txt";		! Moved to new file
			
			                 !read from file "dbFiles/CMM2_H4_inp_historical_EastWest.txt";		! Moved to new file
			
			                 !read from file "dbFiles/CMM2_H5_inp_historical_waste_Miscel.txt";	! Moved to new file
			
			                 !read from file "dbFiles/CMM2_H6_inp_historical_railtonmiles.txt";	!not used removed
			
			                 !read from file "dbFiles/CMM2_H7_inp_historical_bySupplyRegion.txt";	! Moved to new file
			
			                 !read from file "dbFiles/CMM2_H8_inp_historical_sector_consump_prices.txt";	! Moved to new file
			
			                 !read from file "dbFiles/CMM2_H9_inp_historical_worldcoalflows.txt";	! Moved to new file
			
			                 !read from file "dbFiles/CMM2_H10_inp_historical_map_m11_Ae.txt";	! Moved to new file
			
			                 !read from file "dbFiles/CMM2_H11_inp_historical_map_m4_ImportRegion.txt"; ! not used removed
			
			                 !read from file "dbFiles/CMM2_H12_Historical_RCAFWts.txt";		! Moved to new file
			
			                 !begin other reads
			
			           !fullFilename := inputLocation + "\cmm.mdb.dsn" ;
			                ! read from file "dbFiles/CMM_A1_inp_SupplyReg.txt";		! Moved to new file cpsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_A2_inp_EastWestReg.txt";		! Moved to new file cpsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_A3_inp_AggregSupplyReg.txt";	! Moved to new file cpsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_A4_inp_Map10Ftab.txt";		! Moved to new file cpsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_A5_inp_Map11Ftab.txt";		! Moved to new file cpsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_A6_inp_Map12Ftab.txt";		! Moved to new file cpsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_A7_inp_Map18Ftab.txt";		! Moved to new file cpsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_A8_inp_Map19Ftab.txt";		! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_A9_inp_Map20Ftab.txt";		! Moved to new file cdsRegionRef.txt
			
			           !fullFilename := inputLocation + "\cmm2.mdb.dsn" ;
			
			                ! read from file "dbFiles/CMM2_B1_inp_Map13Interntional.txt";	! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM2_B2_inp_PADD_mapping.txt";	! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM2_B3_inp_Census_Division.txt";	! Moved to new file cdsRegionRef.txt
			
			           !fullFilename := inputLocation + "\cmm.mdb.dsn" ;
			                 !read from file "dbFiles/CMM_A10_inp_DReg_CensusNum_Map.txt";	! Moved to new file cdsRegionRef.txt
			
			           !fullFilename := inputLocation + "\cmm2.mdb.dsn" ;
			                ! read from file "dbFiles/CMM2_B4_inp_Demand_Region.txt";	! Moved to new file cdsRegionRef.txt
			
			           !fullFilename := inputLocation + "\cmm.mdb.dsn" ;
			                ! read from file "dbFiles/CMM_A11_inp_IntlExpReg.txt";		! Moved to new file cdsRegionRef.txt
			
			           !fullFilename := inputLocation + "\cmm2.mdb.dsn" ;
			                ! read from file "dbFiles/CMM2_B5_inp_DomesticInternationalMapping.txt";	! Moved to new file cdsRegionRef.txt
			
			           !Inputs for new ocean freight logic - added May 2019
			                ! read from file "dbFiles/CMM2_M1_inp_IntlVesselCosts.txt";	! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM2_M2_Inp_MarineFuels.txt";		! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM2_M3_Inp_MFuelDiffs.txt";		! Moved to new file cdsRegionRef.txt
			
			           !fullFilename := inputLocation + "\cmm.mdb.dsn" ;
			                ! read from file "dbFiles/CMM_C1_inp_USImportShare.txt";	! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_C2_inp_contractprofile.txt";	!redefined and moved to cmmProfiles.txt
			
			                ! read from file "dbFiles/CMM_C3_inp_transpprofile.txt";	
			
			                ! read from file "dbFiles/CMM_C4_inp_subdivprofile.txt";		!redefined and moved to cmmProfiles.txt
			
			                ! read from file "dbFiles/CMM_C5_inp_ligdivprofile.txt";		!redefined and moved to cmmProfiles.txt
			
			                ! read from file "dbFiles/CMM_C6_inp_newplantprofile.txt";		!redefined and moved to cmmProfiles.txt
			
			                ! read from file "dbFiles/CMM_C7_inp_specificplantprofile.txt";
			
			                ! read from file "dbFiles/CMM_C8_inp_totalBtusbyPlant.txt";
			
			                ! read from file "dbFiles/CMM_C9_inp_specificplantprofileSubbit.txt";   !redefined and moved to CoalPlntData.txt
			
			                ! read from file "dbFiles/CMM_C10_inp_specificplantprofileLig.txt";	!redefined and moved to CoalPlntData.txt
			
			                ! read from file "dbFiles/CMM_C11_inp_plantmapping.txt";		!redefined and moved to CoalPlntData.txt
			
			                 !read from file "dbFiles/CMM_C12_inp_Map2b.txt";		! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_C13_inp_numberminers.txt";        ! Moved to new file cdsRegionRef.txt 
			
			                ! read from file "dbFiles/CMM_C14_inp_coalgroupflags.txt";	! Moved to new file cpsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_C15_inp_escalator.txt";		! Test eliminating this read - this file may be unneeded with RCAF escalator logic
			
			                ! read from file "dbFiles/CMM_C16_inp_escalatordistance.txt";	! Not used removed
			
			                ! read from file "dbFiles/CMM_C17_inp_PADD.txt";        	! Moved to new file cdsRegionRef.txt   
			
			                ! read from file "dbFiles/CMM_C18_inp_PADD_DReg_Map9.txt";	! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM_C19_inp_stocks.txt";		! Not used removed
			
			                ! read from file "dbFiles/CMM_C20_inp_FRADI.txt";		! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM2_D1_inp_censusdivision.txt";	! Moved to new file cdsRegionRef.txt
			
			
			           !fullFilename := inputLocation + "\cmm2.mdb.dsn" ;
			                ! read from file "dbFiles/CMM2_D2_inp_Sec.txt";			! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM2_D3_inp_SubSec.txt";		! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM2_D4_inp_ExpSubSec.txt";		! Moved to new file cdsRegionRef.txt
			
			                ! read from file "dbFiles/CMM2_D5_inp_ComboSectorFlag.txt";	! Moved to new file cdsRegionRef.txt
			
			
			           !fullFilename := inputLocation + "\cps.mdb.dsn" ;
			                 !CPS reads
			                ! read from file "dbFiles/CPS_E1_TInp_CLUSER_Scrv.txt";		!Moved to new file cpsProdParam.txt
			
			                ! read from file "dbFiles/CPS_E2_TInp_CSRegionName.txt";	! Moved to new file cpsRegionRef.txt
			
			                ! read from file "dbFiles/CPS_E3_TInp_CLUSER_Scrv_Yr.txt";	! Moved to new file ccpsSCrvYearIndx.txt
			
			                ! read from file "dbFiles/CPS_E4_TInp_CLUSER_Scrv_Steps.txt";  Now defined as initial data in StepSize parameter  9/29/20 DAF
			
			                ! read from file "dbFiles/CPS_E5_TInp_NEMS_Scrv_Yr.txt";	!Not used, no longer needed -eliminate read March 2022
			
			                ! read from file "dbFiles/CPS_E6_TInp_NEMS_Yr.txt";		! Moved to new file cpsRegionRef.txt
			
			                 !Mercury items
			
			           !fullFilename := inputLocation + "\cmm2.mdb.dsn" ;
			                ! read from file "dbFiles/CMM2_F1_inp_allowed.txt";		! Moved to new file cdsRegionRef.txt
			
			                 !sulfur items
			
			        !   fullFilename := inputLocation + "\cloceandist.txt" ;
			        !   read from file fullFilename;
				!read from file "input/cloceandist.txt" ; 	! new file March 2022  DAF
			
			           ! remove the read below for paramter InternationalUnitTransport and replace with new ocean freight logic - added May 2019
			        !   fullFilename := inputLocation + "\clfreight.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clfreight.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\clintlsupply.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clintlsupply.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\clintlquality.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clintlquality.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\clintldemand.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clintldemand.txt" ; 	! new file March 2022  DAF
			
			           !Add read of ICMM US exports  - Aug 2021 DAF
			        !   fullFilename := inputLocation + "\clusexporticmm.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clusexporticmm.txt" ; 	! new file March 2022  DAF
			
			           !Add read of ICMM commodity mapping  - Aug 2021 DAF
				!   fullFilename := inputLocation + "\ICMMcommodityMap.txt" ;
			        !   read from file fullFilename;
				!read from file "input/ICMMcommodityMap.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\clintlUSexport.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clintlUSexport.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\climportlimits.txt" ;
			        !   read from file fullFilename;
				!read from file "input/climportlimits.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\claggexportmap.txt" ;
			        !   read from file fullFilename;
				!read from file "input/claggexportmap.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\clexportlimits.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clexportlimits.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\clfeasiblerout.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clfeasiblerout.txt" ; 	! new file March 2022  DAF
			
			
			           ! Read in clrates file
			        !   fullFilename := inputLocation + "\clratesnonelec.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clratesnonelec.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\clrateselec.txt" ;
			        !   read from file fullFilename;
				!read from file "input/clrateselec.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\cltonrailmile.txt" ;
			        !   read from file fullFilename;
				!read from file "input/cltonrailmile.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\cltonspercar.txt" ;
			        !   read from file fullFilename;
			        !read from file "input/cltonspercar.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\cldistance.txt" ;
			        !   read from file fullFilename;
			        !read from file "input/cldistance.txt" ; 	! new file March 2022  DAF
			
			        !   fullFilename := inputLocation + "\clflags.txt" ;  !Flags indicating whether or not STEO line items are subject to calibration
			        !   read from file fullFilename;
			        !read from file "input/clflags.txt" ; 	! new file March 2022  DAF
			
			   	   read from file "clsteo.txt";		! same location - may move read location but not yet
			
			           !fullFilename := inputLocation + "\cmm2.mdb.dsn" ;
			           ! clrates...U.S. imports surcharge stuff
			           !read from file "dbFiles/CMM2_F2_inp_importsurcharge.txt";		! Moved to new file cdsImpSurcharge.txt
			
			           !read from file "dbFiles/CMM2_F3_inp_ImportSurchargeDistance.txt"; 	! Moved to new file cpsRegionRef.txt
			
			           !read from file "dbFiles/CMM2_F4_inp_USDRegIntlmapping.txt";		! Moved to new file cdsRegionRef.tx
			
			           !read from file "dbFiles/CMM2_F5_inp_iimportinlandrates.txt";	! Moved to new file cdsRegionRef.tx
			
			          ! read from file "dbFiles/CMM2_F6_inp_regionalstocks.txt";		! removed as being not used
			
			          ! read from file "dbFiles/CMM2_F7_inp_intlsupplycurvnum.txt";		! Moved to new file cpsRegionRef.tx
		}
	}
	Procedure PrepDBData {
		Body: {
			fileDelete ( "dbfiles/*.txt" );
			
			
			AccessDatabaseFile:= "..\\input\\cmm2.mdb"; 
			CreateAccessFileConnectionString(AccessDatabaseFile, CMM2ConnectionString);
			
			AccessDatabaseFile:= "..\\input\\cmm.mdb"; 
			CreateAccessFileConnectionString(AccessDatabaseFile, CMMConnectionString);
			
			AccessDatabaseFile:= "..\\input\\cps.mdb"; 
			CreateAccessFileConnectionString(AccessDatabaseFile, CPSConnectionString);
			
			block where
			        single_column_display := 1,
			        listing_page_width := 32000;
			        !listing_number_width := 20;
			        !listing_number_precision := 12 ;
			        !Historical data
				read from table inp_historical_imports;
				write yr, ImportsMinimumElectricity, ImportsMaximumElectricity, ImportsMinimumIndustrial, ImportsMaximumIndustrial, ImportsMinimumCoking, ImportsMaximumCoking
				 to file "dbFiles/CMM2_H1_inp_historical_imports.txt"; !in dense mode;
			
				read from table inp_historical_production;
				write NSREGN, M4, M3, M2, yr, hclprd to file "dbFiles/CMM2_H2_inp_historical_production.txt" ; !in dense mode;
			
				read from table inp_historical_prices;
				write NSREGN, M4, M3, M2, yr, hclmmpr1 to file "dbFiles/CMM2_H3_inp_historical_prices.txt"; !in dense mode;
			
				read from table inp_historical_EastWest;
				write M3, yr, hclprdbt to file "dbFiles/CMM2_H4_inp_historical_EastWest.txt";!in dense mode;
			
				read from table inp_historical_waste_Miscel;
				write yr, hwcdistst, hwcprodbtu,hclexptn,hclexpbt,hclimptn,hclimpbt,hclmmtn1, hclmmbt1 to file "dbFiles/CMM2_H5_inp_historical_waste_Miscel.txt";! in dense mode;
			
				read from table inp_historical_railtonmiles;
				write M2, yr,hcltrtmrrc to file "dbFiles/CMM2_H6_inp_historical_railtonmiles.txt";! in dense mode;
			
				read from table inp_historical_bySupplyRegion;
				write NSREGN, yr, hcldist to file "dbFiles/CMM2_H7_inp_historical_bySupplyRegion.txt";! in dense mode;
			
				read from table inp_historical_sector_consump_prices;
				write Sec, yr, hclcon, hcldprtn1, hcldprbt1 to file "dbFiles/CMM2_H8_inp_historical_sector_consump_prices.txt";! in dense mode;
			
				read from table inp_historical_worldcoalflows;
				write M4, M11,  tc, yr, hclworld to file "dbFiles/CMM2_H9_inp_historical_worldcoalflows.txt";! in dense mode;
				!write M4, M11,  tc, yr, hclworld, WrldImpRegionName, WrldExpRegionName to file "dbFiles/inp_historical_worldcoalflows.txt" in dense mode;
			
				read from table inp_historical_map_m11_Ae;
				write M11, Ae, map_m11_Ae to file "dbFiles/CMM2_H10_inp_historical_map_m11_Ae.txt";! in dense mode;
			
				read from table inp_historical_RCAFWts;
				write yr, wt_Labor, wt_Fuel, wt_MaterialSup, wt_Equipment, wt_Depreciation, wt_Interest, wt_Other to file "dbFiles/CMM2_H12_Historical_RCAFWts.txt"
				;!in dense mode;
			
				read from table inp_historical_map_m4_ImportRegion;
				write M4, i, map_m4_importregion to file "dbFiles/CMM2_H11_inp_historical_map_m4_ImportRegion.txt";! in dense mode;
			
				read from table inp_SupplyReg; 
				write SReg, ASReg, Map_SReg_ASReg to file "dbFiles/CMM_A1_inp_SupplyReg.txt";! in dense mode;
			
				read from table inp_EastWestReg;
				write SReg, EW, Map_SReg_EW to file "dbFiles/CMM_A2_inp_EastWestReg.txt";! in dense mode;
			
				read from table inp_AggregSupplyReg;
				write ASReg, AggSupReg_Name to file "dbFiles/CMM_A3_inp_AggregSupplyReg.txt";! in dense mode;
			
				read from table inp_Map10Ftab;
				write SReg,M14, Map_SReg_M14 to file "dbFiles/CMM_A4_inp_Map10Ftab.txt";! in dense mode;
			
				read from table inp_Map11Ftab;
				write Rank,M4, Map_Rank_M4 to file "dbFiles/CMM_A5_inp_Map11Ftab.txt";! in dense mode;
			
				read from table inp_Map12Ftab;
				write Mtyp, M3, Map_Mtyp_M3 to file "dbFiles/CMM_A6_inp_Map12Ftab.txt";! in dense mode;
			
				read from table inp_Map18Ftab;
				write M3, Map_Sulf_M3 to file "dbFiles/CMM_A7_inp_Map18Ftab.txt";! in dense mode;
			
				read from table inp_Map19Ftab;
				write e, M11, Map_e_M11 to file "dbFiles/CMM_A8_inp_Map19Ftab.txt";! in dense mode;
			
				read from table inp_Map20Ftab;
				write i, M4, Map_i_M4 to file "dbFiles/CMM_A9_inp_Map20Ftab.txt";! in dense mode;
			
				read from table inp_Map13Interntional;
				write e, MX_ISC, Map_e_MX_ISC to file "dbFiles/CMM2_B1_inp_Map13Interntional.txt";! in dense mode;
			
				read from table inp_PADD_mapping;
				write PADD, MNUMPR, Map_PADD_Mnumpr to file "dbFiles/CMM2_B2_inp_PADD_mapping.txt";! in dense mode;
			
				read from table inp_Census_Division;
				write  MNUMCR, CensDiv, Map_Mnumcr_CensDiv to file "dbFiles/CMM2_B3_inp_Census_Division.txt";! in dense mode;
			
				read from table inp_DReg_CensusNum_Map;
				write MNUMCR, DReg, Map_DReg_MNUMCR to file "dbFiles/CMM_A10_inp_DReg_CensusNum_Map.txt";! in dense mode;
			
				read from table inp_Demand_Region;
				write NDREGN, Map_ndregn to file "dbFiles/CMM2_B4_inp_Demand_Region.txt";! in dense mode;
			
				read from table inp_IntlExpReg;
				write e, USeFLAG, NonUSFLAG to file "dbFiles/CMM_A11_inp_IntlExpReg.txt";! in dense mode;
			
				read from table inp_DomesticInternationalMapping;
				write USe, DReg, USDRegIntlMapping to file "dbFiles/CMM2_B5_inp_DomesticInternationalMapping.txt";! in dense mode;
			
				read from table inp_IntlVesselCosts;
				write yr,VesselClass, DailyHireCost,  PortCostPer_mTon, PortDays, BunkerFuelUseSea, DieselFuelUseSea, DieselFuelUsePort, SailingSpeedKn 
				 to file "dbFiles/CMM2_M1_inp_IntlVesselCosts.txt";! in dense mode;
			
				read from table Inp_MarineFuels;
				write yr,BunkerIFO380_USGulf, DieselMGO_USGulf to file "dbFiles/CMM2_M2_Inp_MarineFuels.txt";! in dense mode;
			
				read from table Inp_MFuelDiffs;
				write e,BunkerIFO_RgnDiff,DieselMGO_RgnDiff to file "dbFiles/CMM2_M3_Inp_MFuelDiffs.txt";! in dense mode;
			
				read from table inp_USImportShare;
				write DReg, USImpShare to file "dbFiles/CMM_C1_inp_USImportShare.txt";! in dense mode;
			
				read from table inp_contractprofile;
				write cnum, yr, ContractProfile to file "dbFiles/CMM_C2_inp_contractprofile.txt";! in dense mode;
			
				read from table inp_transpprofile;
				write TranspProfileNumber, yr, TranspProfile to file "dbFiles/CMM_C3_inp_transpprofile.txt";! in dense mode;
			
				read from table inp_subdivprofile;
				write SubDivProfileNumber, yr, SubDivProfile to file "dbFiles/CMM_C4_inp_subdivprofile.txt";! in dense mode;
			
				read from table inp_ligdivprofile;
				write LigDivProfileNumber, yr, LigDivProfile to file "dbFiles/CMM_C5_inp_ligdivprofile.txt";! in dense mode;
			
				read from table inp_newplantprofile;
				write DReg, NewPlantSubitProfile, NewPlantLigProfile to file "dbFiles/CMM_C6_inp_newplantprofile.txt";! in dense mode;
			
				read from table inp_specificplantprofile;   
				write pu_id,SReg,Sulf,Mtyp,Rank,Plant_C_Prof, Plant_BaseYear_Btu, Plant_T_Prof to file "dbFiles/CMM_C7_inp_specificplantprofile.txt";! in dense mode;
			
				read from table inp_totalBtusbyPlant;
				write pu_id, TBTU to file "dbFiles/CMM_C8_inp_totalBtusbyPlant.txt";! in dense mode;
			
				read from table inp_specificplantprofileSubbit; 
				write pu_id, Plant_S_Prof to file "dbFiles/CMM_C9_inp_specificplantprofileSubbit.txt";! in dense mode;
			
				read from table inp_specificplantprofileLig;
				write pu_id, Plant_L_Prof to file "dbFiles/CMM_C10_inp_specificplantprofileLig.txt";! in dense mode;
			
				read from table inp_plantmapping;
				write Plantid_unitid, Plantid, Unitid, PlantName, PlantState to file "dbFiles/CMM_C11_inp_plantmapping.txt";! in dense mode;
			
				read from table inp_Map2b;
				write nutsec,pt3,Map_nutsec_pt3 to file "dbFiles/CMM_C12_inp_Map2b.txt";! in dense mode;
			
				read from table inp_numberminers;
				write SReg, Miners to file "dbFiles/CMM_C13_inp_numberminers.txt";! in dense mode;         
			
				read from table inp_coalgroupflags;
				write DReg, Subsec, SReg, Sulf, Mtyp, Rank, CoalGroupFlag to file "dbFiles/CMM_C14_inp_coalgroupflags.txt" ;!in dense mode;
			
				read from table inp_escalator;
				write yr, Railwage, Tr_prod_e, Tr_prod_w, Dist_w, Contrdur_e, Contrdur_w, PPIrail_actual to file "dbFiles/CMM_C15_inp_escalator.txt";! in dense mode;
			
				read from table inp_escalatordistance;
				write SReg, DReg, Distance to file "dbFiles/CMM_C16_inp_escalatordistance.txt";! in dense mode;
			
				read from table inp_PADD;
				write Sec, PADD, DReg, PMMDivShare to file "dbFiles/CMM_C17_inp_PADD.txt";! in dense mode;           
			
				read from table inp_PADD_DReg_Map9;
				write PADD, DReg, Map_PADD_DReg to file "dbFiles/CMM_C18_inp_PADD_DReg_Map9.txt";! in dense mode;
			
				read from table inp_stocks;
				write yr, DReg, Stockbase, Stockshare to file "dbFiles/CMM_C19_inp_stocks.txt";! in dense mode;
			
				read from table inp_FRADI;
				write DReg, SubSec, FRADI to file "dbFiles/CMM_C20_inp_FRADI.txt";! in dense mode;
			
				read from table inp_censusdivision;
				write Sec, CensDiv, DReg, CensDivShare to file "dbFiles/CMM2_D1_inp_censusdivision.txt";! in dense mode;
			
				read from table inp_Sec;
				write Sec, MajorSectorFlag to file "dbFiles/CMM2_D2_inp_Sec.txt";! in dense mode;
			
				read from table inp_SubSec;
				write Subsec, SubSectorFlag to file "dbFiles/CMM2_D3_inp_SubSec.txt";! in dense mode;
			
				read from table inp_ExpSubSec;
				write ExpSec, ExpSubSectorFLAG to file "dbFiles/CMM2_D4_inp_ExpSubSec.txt";! in dense mode;
			
				read from table inp_ComboSectorFlag;
				write Subsec, Sec, SectorComboFlag to file "dbFiles/CMM2_D5_inp_ComboSectorFlag.txt";! in dense mode;
			
				read from table TInp_CLUSER_Scrv;
				write SCrv1,SReg,CSupplyRegionName1,SRegStates,MTyp,MTypeLabel,Rank,RankLabel,Sulf,SulfLabel,
				BY_MMP,BY_PROD,BY_TPH,BY_PROD_CAP,BY_CAP_UTIL,CAP_UTIL_HIST,Btu,Sulfur,Carbon,Mercury,BY_PROD_CAP_ADJ,
				BY_MMP_ADJ,ELEC_SHARE,DIST_SHARE,BY_WAGE,BY_ELEC_PRICE,RCoe_OCont,RCoe_SregCont,RCoe_MTypeCont,RCoe_SRegMTypeCont,
				RCoe_TPH,TPH_SDA,RCoe_SRegTPH,RCoe_MTypeTPH,RCoe_SRegMTypeTPH,RCoe_Util,RCoe_MTypeUtil,	
				RCoe_ProdCap,	ProdCap_SDA,	RCoe_MTypeProdCap,	RCoe_Wage,	RCoe_MTypeWage,	RCoe_Fuel,	RCoe_MTypeFuel,	RCoe_UserCstCap,RCoe_POperOth,
				RCoe_Rho,	Util_Max,	Util_Mid,	Util_Min,	Util_Max_Adj,	Util_Mid_Adj,	Util_Min_Adj to file "dbFiles/CPS_E1_TInp_CLUSER_Scrv.txt";! in dense mode;
			
			
			
				read from table TInp_CSRegionName;
				write SReg,CSupplyRegionName to file "dbFiles/CPS_E2_TInp_CSRegionName.txt";! in dense mode;
			
				read from table TInp_CLUSER_Scrv_Yr;
				write SCrv1, SReg,Sulf, MTyp, Rank, Yr, TPH_Growth_Rate, WAGE_MULTIPLIER, ADJ_MMP_MULT, ADJ_MMP_ADD, P_EQUIP, PPI_STEEL_EXPLO, SCLIMIT 
				to file "dbFiles/CPS_E3_TInp_CLUSER_Scrv_Yr.txt";! in dense mode;
			
				read from table TInp_CLUSER_Scrv_Steps;
				!Don't write this file as step 6 can be left out with AIMMS sparse write file format.  Changed it mannually to include stepsize 6 as 0.0
				!write SCrv1Step, StepSize to file "dbFiles/CPS_E4_TInp_CLUSER_Scrv_Steps.txt" in dense mode;
			
				read from table TInp_NEMS_Scrv_Yr;
				write SCrv1,SReg, Sulf, MTyp, Rank, Yr, LAG_PROD_Temp, LAG_PRIInitial, QTargInitial to file "dbFiles/CPS_E5_TInp_NEMS_Scrv_Yr.txt";! in dense mode;
			
				read from table TInp_NEMS_Yr;
				write yr, MC_WPI10_MULTIPLIER to file "dbFiles/CPS_E6_TInp_NEMS_Yr.txt";! in dense mode;
			
				read from table inp_allowed; !not doing anything anymore 2/14/2013
				write nsteps, allowed to file "dbFiles/CMM2_F1_inp_allowed.txt";! in dense mode;
			
				read from table inp_importsurcharge;
				write ImpSec, nUS, DReg, USi, Pinlandtr to file "dbFiles/CMM2_F2_inp_importsurcharge.txt";! in dense mode;
			
				read from table inp_ImportSurchargeDistance;
				write USi,DReg,DistanceSurchargeImport to file "dbFiles/CMM2_F3_inp_ImportSurchargeDistance.txt";! in dense mode;
			
				read from table inp_USDRegIntlmapping;
				write USi, DReg, USDRegImportMapping to file "dbFiles/CMM2_F4_inp_USDRegIntlmapping.txt";! in dense mode;
			
				read from table inp_iimportinlandrates;
				write USi, TonsPCar_Imp, Trigger_Imp, Trig_Incr_Imp, ChargePerMile_Car_Imp to file "dbFiles/CMM2_F5_inp_iimportinlandrates.txt";! in dense mode;
			
				read from table inp_regionalstocks;
				write stockyr, StockReg, Stocks to file "dbFiles/CMM2_F6_inp_regionalstocks.txt";! in dense mode;
			
				read from table inp_intlsupplycurvnum;
				write nUS, Map_intl_mxnci to file "dbFiles/CMM2_F7_inp_intlsupplycurvnum.txt";! in dense mode;
			
			
			endblock ;
			
			
			            CloseDataSource(CMMConnectionString);
			            CloseDataSource(CMM2ConnectionString);
			            CloseDataSource(CPSConnectionString);
		}
	}
	Procedure SendGlobalDataToNEMS {
		Body: {
			! send global data back to nems via a text file. The file is read by nems filer subroutine with funfmt=7
			sDataYearFile:="fromAIMMS\\GlobalDataToNEMS_"+formatstring("%i",ncntrl_curcalyr(1))+"_"+formatstring("%>02i",ncntrl_curitr(1))+".txt";
			! Note The "FILE" identifier GlobalDataToNEMS is linked to the string parameter sDataYearFile
			put GlobalDataToNEMS; ! opens the file (sDataYearFile) and sets stage for subsequent display and/or put statements
			
			! "globalyr" in the statements is a subset of MNUMYR corresponding to the year ndex curiry in NEMS.
			! so most of these statements are sending a single-year slice of each parameter.
			
			display {MPBLK_PCLRS(MNUMCR,globalyr)} where decimals:=10;
			display {MPBLK_PCLCM(MNUMCR,globalyr)} where decimals:=10;
			display {MPBLK_PCLIN(MNUMCR,globalyr)} where decimals:=10;
			display {MPBLK_PCLSN(MNUMCR,globalyr)} where decimals:=10;
			display {MPBLK_PCLEL(MNUMCR,globalyr)} where decimals:=10;
			display {MPBLK_PMCIN(MNUMCR,globalyr)} where decimals:=10;
			display {COALPRC_PCLELCDR(M2,NDREGN,globalyr)} where decimals:=10;
			display {COALEMM_SCLCLNR(NDREGN,globalyr,NUTSEC)} where decimals:=10;
			display {COALEMM_CCLCLNR(NDREGN,globalyr,NUTSEC)} where decimals:=10;
			display {COALEMM_BCLCLNR(NDREGN,globalyr,NUTSEC)} where decimals:=10;
			display {COALEMM_GCLCLNR(NDREGN,globalyr,NUTSEC)} where decimals:=10;
			display {COALEMM_PSLCLNR(NDREGN,globalyr,NUTSEC)} where decimals:=10;
			display {COALEMM_PHGCLNR(NDREGN,globalyr,NUTSEC)} where decimals:=10;
			display {COALEMM_PCACLNR(NDREGN,globalyr,NUTSEC)} where decimals:=10;
			display {COALEMM_HCLCLNR(NDREGN,globalyr,NUTSEC)} where decimals:=10;
			display {COALEMM_NUM_SC(M1)} where decimals:=10;
			display {COALEMM_CMM_CL_BTUS(MX_NCI,MX_UNT)} where decimals:=10;
			display {COALEMM_CMM_CONT_INDX(MX_NCI,MX_UNT)} where decimals:=10;
			display {COALEMM_CMM_TRANS_INDX(MX_NCI,MX_UNT)} where decimals:=10;
			display {COALEMM_CMM_SDV_INDX(MX_UNT)} where decimals:=10;
			display {COALEMM_CMM_LDV_INDX(MX_UNT)} where decimals:=10;
			display {COALEMM_NEW_SDV_INDX(NDREGN)} where decimals:=10;
			display {COALEMM_NEW_LDV_INDX(NDREGN)} where decimals:=10;
			display {COALEMM_CMM_CONT_PRF(MX_PRF,globalyr)} where decimals:=10;
			display {COALEMM_CMM_TRANS_PRF(MX_PRF,globalyr)} where decimals:=10;
			display {COALEMM_CMM_SDV_PRF(MX_PRF,globalyr)} where decimals:=10;
			display {COALEMM_CMM_LDV_PRF(MX_PRF,globalyr)} where decimals:=10;
			display {COALREP_COALPROD(MNUMCR,MNUMLR,globalyr)} where decimals:=10;
			display {COALREP_COALPROD2(MNUMCR,MNUMLR,globalyr)} where decimals:=10;
			display {COALREP_COALPRICE(MNUMLR,globalyr)} where decimals:=10;
			display {COALREP_WC_DIST_ST(MNUMCR,MNUMLR,globalyr)} where decimals:=10;
			display {COALREP_WC_PROD_ST(MNUMCR,MNUMLR,globalyr)} where decimals:=10;
			display {COALREP_WC_PROD_BTU(MNUMCR,MNUMLR,globalyr)} where decimals:=10;
			display {COALREP_ABSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_ALSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_IBSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_ILSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_WBSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_WSSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_WLSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_WSCF(M4,M11,globalyr)} where decimals:=10;
			display {COALREP_WMCF(M4,M11,globalyr)} where decimals:=10;
			display {COALREP_WTCF(M4,M11,globalyr)} where decimals:=10;
			display {COALREP_PCLEX(MNUMCR,globalyr)} where decimals:=10;
			display {COALREP_CLSULF(M14,M4,M3,globalyr)} where decimals:=10;
			display {COALREP_PCLSULF(M14,M4,M3,globalyr)} where decimals:=10;
			display {COALREP_PABSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_PALSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_PIBSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_PILSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_PWBSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_PWSSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_PWLSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_APSULF_BTU(M4,globalyr)} where decimals:=10;
			display {COALREP_ABSULF_BTU(M4,globalyr)} where decimals:=10;
			display {COALREP_ALSULF_BTU(M4,globalyr)} where decimals:=10;
			display {COALREP_IBSULF_BTU(M4,globalyr)} where decimals:=10;
			display {COALREP_ILSULF_BTU(M4,globalyr)} where decimals:=10;
			display {COALREP_WBSULF_BTU(M4,globalyr)} where decimals:=10;
			display {COALREP_WSSULF_BTU(M4,globalyr)} where decimals:=10;
			display {COALREP_WLSULF_BTU(M4,globalyr)} where decimals:=10;
			display {COALREP_CLSULF_BTU(M14,M4,M3,globalyr)} where decimals:=10;
			display {COALREP_PMTD(NSREGN,globalyr)} where decimals:=10;
			display {COALREP_PMTS(NSREGN,globalyr)} where decimals:=10;
			display {COALREP_PMTD_BTU(NSREGN,globalyr)} where decimals:=10;
			display {COALREP_PMTS_BTU(NSREGN,globalyr)} where decimals:=10;
			display {COALREP_PMTDP(NSREGN,globalyr)} where decimals:=10;
			display {COALREP_PMTSP(NSREGN,globalyr)} where decimals:=10;
			display {COALREP_APSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_PAPSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_UTCONS(NUTSEC,globalyr)} where decimals:=10;
			display {COALREP_UTTSO2(NUTSEC,globalyr)} where decimals:=10;
			display {COALREP_UCSO2(NUTSEC,globalyr)} where decimals:=10;
			display {COALREP_UCMERC(NUTSEC,globalyr)} where decimals:=10;
			display {COALREP_ACMERC(globalyr)} where decimals:=10;
			display {COALREP_TSPMBTU(globalyr)} where decimals:=10;
			display {COALREP_TMPMBTU(globalyr)} where decimals:=10;
			display {COALREP_TOTLABPROD(globalyr)} where decimals:=10;
			display {COALREP_WAGEPHOUR(globalyr)} where decimals:=10;
			display {COALREP_WAGEGROWTH(globalyr)} where decimals:=10;
			display {COALREP_LABPRODGROWTH(globalyr)} where decimals:=10;
			display {COALREP_COAL2GAS(MNUMCR,globalyr)} where decimals:=10;
			display {COALREP_WPSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_PWPSULF(M4,globalyr)} where decimals:=10;
			display {COALREP_WPSULF_BTU(M4,globalyr)} where decimals:=10;
			display {COALREP_CLIMPRANK(M5,globalyr)} where decimals:=10;
			display {COALREP_CLEXPRANK(M5,globalyr)} where decimals:=10;
			display {COALOUT_CLSYNGQN(M17,globalyr)} where decimals:=10;
			display {COALOUT_CQSBB(M3,globalyr)} where decimals:=10;
			display {COALOUT_CQSBT(M3,globalyr)} where decimals:=10;
			display {COALOUT_CPSB(M3,globalyr)} where decimals:=10;
			display {COALOUT_CPSBT(M3,globalyr)} where decimals:=10;
			display {COALOUT_CQDBFT(MNUMCR,CLSECT,globalyr)} where decimals:=10;
			display {COALOUT_CPDBFT(MNUMCR,CLSECT,globalyr)} where decimals:=10;
			display {COALOUT_CQDBFB(MNUMCR,CLSECT,globalyr)} where decimals:=10;
			display {COALOUT_PCLRFPD(MNUMPR,globalyr)} where decimals:=10;
			display {COALOUT_LIQUCARB(MNUMCR,globalyr)} where decimals:=10;
			display {COALOUT_LCVBTU(MNUMPR,globalyr)} where decimals:=10;
			display {COALOUT_LTRNTON(MNUMPR,globalyr)} where decimals:=10;
			display {COALOUT_TOTMINERS(globalyr)} where decimals:=10;
			display {COALOUT_L_SO2P(MNUMPR,globalyr)} where decimals:=10;
			display {COALOUT_L_HGP(MNUMPR,globalyr)} where decimals:=10;
			display {COALOUT_TTONMILE(globalyr)} where decimals:=10;
			display {COALOUT_INDCOKEBAL(globalyr)} where decimals:=10;
			display {COALOUT_INDSTEAMBAL(globalyr)} where decimals:=10;
			display {COALOUT_ELECCOALBAL(globalyr)} where decimals:=10;
			display {COALOUT_APPSTOCKS(globalyr)} where decimals:=10;
			display {COALOUT_INTSTOCKS(globalyr)} where decimals:=10;
			display {COALOUT_WESTSTOCKS(globalyr)} where decimals:=10;
			display {COALOUT_COALCODE(M1)} where decimals:=10;
			display {USO2GRP_XCL_QECP(MX_NCL,ECPFPH,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_PECP(MX_NCL,M11,ECPFPH,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_STEPS(M11)} where decimals:=10;
			display {USO2GRP_XCL_OTHER(MX_NCI,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_TRATE(MX_NCL,NDREGN)} where decimals:=10;
			display {USO2GRP_XCL_IMPORT(NDREGN,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_STOCK(globalyr)} where decimals:=10;
			display {USO2GRP_XCL_SO2(MX_NCI)} where decimals:=10;
			display {USO2GRP_XCL_HG(MX_NCI)} where decimals:=10;
			display {USO2GRP_XCL_CAR(MX_NCI)} where decimals:=10;
			display {USO2GRP_XCL_SO2_YR(MX_NCI,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_HG_YR(MX_NCI,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_CAR_YR(MX_NCI,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_TYPE(MX_NCI)} where decimals:=10;
			display {USO2GRP_ECP_PECP(MX_NCL,ECPXPH,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_TRAT1(MX_NCL,NDREGN)} where decimals:=10;
			display {USO2GRP_XCL_TR_T1(MX_NCL,NDREGN,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_TR_T2(MX_NCL,NDREGN,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_PCAP(MX_NCL,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_PCAP_LIMIT(MX_NCL,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_MAX_INCR(MX_NCL,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_MX_PCAP(MX_NCL)} where decimals:=10;
			display {USO2GRP_XCL_BTU(MX_NCI)} where decimals:=10;
			display {USO2GRP_XCL_PLIM(MX_NCL,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_1TESC(MX_NCL,ECPFPH,globalyr,NDREGN)} where decimals:=10;
			display {USO2GRP_XCL_2TESC(MX_NCL,ECPFPH,globalyr,NDREGN)} where decimals:=10;
			display {USO2GRP_EFD_PROD(MX_NCL)} where decimals:=10;
			display {USO2GRP_CL_CRV_PROD(MX_NCL,GLOBALYR)} where decimals:=10;
			display {USO2GRP_EFD_TIER1(MX_NCL,NDREGN,NUTSEC)} where decimals:=10;
			display {USO2GRP_EFD_TIER1_LIM(MX_NCL,NDREGN,NUTSEC,globalyr)} where decimals:=10;
			display {USO2GRP_EFD_CONT(MX_NCI,NDREGN,M2,globalyr)} where decimals:=10;
			display {USO2GRP_EFD_DVSB(NDREGN,NUTSEC)} where decimals:=10;
			display {USO2GRP_EFD_SB_DVLIM(NDREGN,NUTSEC,globalyr)} where decimals:=10;
			display {USO2GRP_EFD_DVLG(NDREGN,NUTSEC)} where decimals:=10;
			display {USO2GRP_EFD_LG_DVLIM(NDREGN,NUTSEC,globalyr)} where decimals:=10;
			display {USO2GRP_EFD_SC_DR_PT(MX_NCI,NDREGN,NUTSEC)} where decimals:=10;
			display {USO2GRP_EFD_RANK(MX_NCI)} where decimals:=10;
			display {USO2GRP_CTLBTU(MX_NCL,NDREGN,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_PIMP(MX_ISC,MX_IST,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_QIMP(MX_ISC,MX_IST,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_TR_IN(M4,MX_ISC,NDREGN,globalyr)} where decimals:=10;
			display {USO2GRP_XCL_TESCI(M4,globalyr,NDREGN)} where decimals:=10;
			display {USO2GRP_XCL_TRATI2(M4,MX_ISC,NDREGN)} where decimals:=10;
			display {USO2GRP_CTL_TRATE(MX_NCL,NDREGN)} where decimals:=10;
			display {USO2GRP_CTL_OTHER(MX_NCL,globalyr)} where decimals:=10;
			display {USO2GRP_CTL_CLDR(NDREGN)} where decimals:=10;
			display {EMISSION_EMELPSO2(globalyr,MX_SO2)} where decimals:=10;
			display {EMISSION_TOT_MERC(globalyr)} where decimals:=10;
			display {EMISSION_EMEL_PHG(NDREGN,globalyr)} where decimals:=10;
			putclose;
		}
	}
	Procedure SetUpRateEscalators {
		Body: {
			!This procedure calculates parameters with build on themselves using and fitted equation or growth rate.
			!These paramaeters should not change between runs execpt with Macro inputs or base year inputs changes.
			!Added a FOR LOOP on 6-15-2020 DAF as needed to have them caclulated for all years.
			
			for yr | yr >= 1990 do
				! This uses the production from the prior cycle to figure the production growth or decline rate
				if (ncntrl_curcalyr(1) = cpsbaseyr ) then
					USProdPriorCycle(yr) :=  CQSBB_PriorTot(yr) ;
				endif;
				gr_USProd(yr) := USProdPriorCycle(yr)  /$USProdPriorCycle(yr-1) -1 ;	;
				gr_USProd3yrAvg(yr) := (gr_USProd(yr-1)+gr_USProd(yr-2)+gr_USProd(yr-3))/3 ;
			
				if gr_USProd3yrAvg(yr) < -0.05 then RR_Prdctvty_prct(yr) := 0.50;
				elseif gr_USProd3yrAvg(yr) > 0.0 then RR_Prdctvty_prct(yr) := 0.00;
				    else RR_Prdctvty_prct(yr) := (gr_USProd3yrAvg(yr)/(-0.05))^0.5 *0.50;
				endif;
			
			
			! These are for the the RCAF Rate Escalation method implemented in September 2020 - See Section RCAF Escalator Rework for the parameters  - DAF	9/29/2020				
				Indx_Labor(yr) := MC_JECIWSP(yr)  /$MC_JECIWSP(RCAFBaseYr)  ;
				Indx_Fuel(yr) := PDSTR_USAvg_A(yr) /$PDSTR_USAvg_A(RCAFBaseYr) 	;
				Indx_MaterialSup(yr) := MC_WPI10_V2(yr) /$MC_WPI10_V2(RCAFBaseYr)  ;
				Indx_Equipment(yr) := MC_WPIIND05(yr) /$MC_WPIIND05(RCAFBaseYr)  ;
				Indx_Depreciation(yr) := MC_WPI14(yr) /$MC_WPI14(RCAFBaseYr)  ;
				Indx_Interest(yr) := MC_RLRMCORPPUAA(yr) /$MC_RLRMCORPPUAA(RCAFBaseYr)  ;
				!Indx_Interest(yr) :=  MC_RMCORPPUAA(yr) /$MC_RMCORPPUAA(RCAFBaseYr)  ;  ! Based on nominal interest rates.
				Indx_Other(yr)     := MC_WPIIND05(yr) /$MC_WPIIND05(RCAFBaseYr)  ; ! Other and Equipment rentals are using the same index.
			
				gr_Labor(yr) := Indx_Labor(yr)  /$Indx_Labor(yr-1)	;
				gr_fuel(yr) := Indx_Fuel(yr) /$Indx_Fuel(yr-1)	;
				gr_MaterialSup(yr) := Indx_MaterialSup(yr) /$Indx_MaterialSup(yr-1)  ;	
				gr_Equipment(yr) := Indx_Equipment(yr) /$Indx_Equipment(yr-1)  ;		
				gr_Depreciation(yr) := Indx_Depreciation(yr) /$Indx_Depreciation(yr-1)  ;
				gr_Interest(yr) := Indx_Interest(yr) /$Indx_Interest(yr-1)  ;
				gr_Other(yr) := Indx_Other(yr) /$Indx_Other(yr-1)  ;
			
				if yr > RCAFBaseYr then
					sh_Labor(yr) := gr_Labor(yr) * sh_Labor(yr-1);
					sh_Fuel(yr) := gr_Fuel(yr) * sh_Fuel(yr-1);
					sh_MaterialSup(yr) := gr_MaterialSup(yr) * sh_MaterialSup(yr-1);
					sh_Equipment(yr) := gr_Equipment(yr) * sh_Equipment(yr-1);
					sh_Depreciation(yr) := gr_Depreciation(yr) * sh_Depreciation(yr-1);
					sh_Interest(yr) := gr_Interest(yr) * sh_Interest(yr-1);
					sh_Other(yr) := gr_Other(yr) * sh_Other(yr-1);
				else
					sh_Labor(yr) := wt_Labor(yr);
					sh_Fuel(yr) := wt_Fuel(yr);
					sh_MaterialSup(yr) := wt_MaterialSup(yr);
					sh_Equipment(yr) := wt_Equipment(yr);
					sh_Depreciation(yr) := wt_Depreciation(yr);
					sh_Interest(yr) := wt_Interest(yr);
					sh_Other(yr) := wt_Other(yr) ;
				endif;
			
			
				TotTransIndx_A(yr) := sh_Labor(yr) + sh_Fuel(yr) + sh_MaterialSup(yr) + sh_Equipment(yr) + sh_Depreciation(yr) + sh_Interest(yr) + sh_Other(yr) ;
				if yr <= RCAFBaseYr then
					TotTransIndx_B(yr) := 1.000 ;
				else	
					TotTransIndx_B(yr) := TotTransIndx_A(yr) /$TotTransIndx_A(yr-1) + RR_Productivity(yr)* RR_Prdctvty_prct(yr) ;
				endif;
				!This is new cummulative transporation rate escalator based on RCAF 
				if yr <= RCAFBaseYr then
					CumRRTransIndx(yr) := 1.000 ;
				else	
					CumRRTransIndx(yr) := TotTransIndx_B(yr) * CumRRTransIndx(yr-1) ;
				endif;
			
				if (ncntrl_curcalyr(1) = cpsbaseyr ) then
					FinalRCAFindex(yr) :=  CumRRTransIndx(yr) ;   ! Added it to CMMLagData_Identifiers case save 10-07-20
				endif;
			
			!Below this line are the old rate esclation calculations 
			
			inflrate(yr) := Sum(MNUMY3|MAP_mnumy3_yr(MNUMY3,yr),
					if yr > 1990 then
					 (MACOUT_MC_JPGDP(MNUMY3)/$MACOUT_MC_JPGDP(MNUMY3-1) - 1.0)*100.0
					endif);
			
			
			
			invtemp(yr) := 	IF(yr <= cap_yr + 1 )THEN
						INVDOL  + investadder(yr) !1987 dollars dollars
					ELSE
						Sum((mnumyr)|MAP_mnumyr_yr(MNUMYR,yr), invtempLag1(yr)+ INV_P_TM * (TTONMILElag1(yr)- TTONMILElag2(yr)))
					ENDIF;
			capexp(yr) := 	if(yr = PPI_YR) then  
						CAPBASE  + CAP_P_TM *(ttonmilelag1(yr) - ttonmilelag2(yr)) !1987 dollars capital expenditures
					elseif(yr > PPI_YR) then  
						capexplag1(yr)  + CAP_P_TM * (ttonmilelag1(yr) - ttonmilelag2(yr)) !1987 dollars capital expenditures
					endif;
			PPIrailEq(yr) := 	if (yr <= PPI_YR ) then  
						PPIrail_actual(yr)
					elseif (yr > PPI_YR) then
						PPIraileqLag1(yr) * ((CAPEXP2(yr)/$BASKET2(yr)) / $(CAPEXP2lag1(yr)/$BASKET2lag1(yr)))
					endif;		
			PPIraileq2(yr) := if yr > ppi_yr then
						(PPIraileq(yr) + PPIraileq(yr-1) + PPIraileq(yr-2))/3
					  elseif yr < ppi_yr +1 then
						PPIrail_actual(yr)
					  else
						ppi_base
					  endif;
			
			rdel_pk(yr) := 	Sum(MNUMY3|MAP_mnumy3_yr(MNUMY3,yr),
					if(yr > 1990 and lagppiraileq(yr)>0) then
						((PPIRAILEQ2(yr)/MACOUT_MC_JPGDP(MNUMY3))/(lagppiraileq(yr)/MACOUT_MC_JPGDP(MNUMY3-1)))-1.0
					else
						((PPIRAILEQ2(yr)/MACOUT_MC_JPGDP(MNUMY3))/(1.349/MACOUT_MC_JPGDP(13)))-1.0   !hard code 2002 ppi rail equ and deflator
					endif);
			
			EastEscalator(yr) := Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),if(yr > 2000 and EastEscalatorLag1(yr)>0) then
						EastEscalatorLag1(yr)^cof8 + cof5*(1-cof8) + tr_prod_e(yr)*cof6 - tr_prod_e(yr-1)*cof6*cof8 +
						dum(yr)*MPBLK_PDSIN(11,MNUMYR)*cof7 - dum(yr)*MPBLK_PDSIN(11,MNUMYR-1)*cof7*cof8 +
						costcap(yr)*cof9 - costcap(yr-1)*cof9*cof8    !costcap is calculated with a riskpremium when there is one
						else 1.0954
						endif) ;
			Westcheck(yr) := Sum(mnumyr|MAP_mnumyr_yr(MNUMYR,yr),((.286) + invest(yr)*cof2 -investlag1(yr)*cof2*cof10 + tr_prod_w(yr)*cof3
						-tr_prod_w(yr-1)*cof3*cof10 + westsup(yr)/$((QBLK_QCLEL(11,MNUMYR)*100.)/$COALOUT_CQDBFT(11,6,MNUMYR))*cof4
						-westsup(yr-1)/$((QBLK_QCLEL(11,MNUMYR-1)*100.)/$COALOUT_CQDBFT(11,6,MNUMYR-1))*cof4*cof10)) ;
			! These parameters are used in CPS rather than CDDS but it is ok to calc hear as this procedure will be called at startup by ReadData
			MINE_FUEL(Yr,SCrv1,SReg,Sulf,Mtyp,Rank) | ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)+DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank) := 
					if (Yr <= CPSBaseYr) then
			        		((BY_ELEC_PRICE(SCrv1,Sreg,Sulf,Mtyp,Rank)*ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank))+
			        		(D_Fuel(Yr)*DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank)))
					else
			        		MINE_FUELlag1(yr,SCrv1,Sreg,Sulf,Mtyp,Rank)*((E_FUEL(SelectedCensusDiv(SCrv1,YR),Yr)*ELEC_SHARE(Scrv1,Sreg,Sulf,Mtyp,Rank))+
			        		(D_Fuel(Yr)*DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank))) / (((E_FUEL(SelectedCensusDiv(SCrv1,YR),Yr-1))*ELEC_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank))+
			        		(D_Fuel(YR-1))*DIST_SHARE(SCrv1,Sreg,Sulf,Mtyp,Rank))
					endif;
			FY_TPH(yr,SCrv1,SReg,Sulf,MTyp,Rank) := if (Yr <= CPSBaseYr) then
			       					 BY_TPH(SCrv1,SReg,Sulf,MTyp,Rank)
								else
			        				FY_TPHlag1(Yr,SCrv1,SReg,Sulf,MTyp,Rank) * TPH_Growth_Rate(SCrv1,SReg,Sulf,MTyp,Rank,Yr)
								endif;
			
			
			endfor;
		}
	}
	DeclarationSection NEMS_Monitor_Identifiers {
		Parameter CountSleep;
	}
	DeclarationSection CL_RunVal {
		StringParameter CLUSEXPORTICMMN;
		StringParameter ICMMCOMMODITYMAPN;
		StringParameter CLOCEANDISTN;
		StringParameter CLAGGEXPORTMAPN;
		StringParameter CLEXPORTLIMITSN;
		StringParameter CLIMPORTLIMITSN;
		StringParameter CLINTLDEMANDN;
		StringParameter CLINTLQUALITYN;
		StringParameter CLINTLSUPPLYN;
		StringParameter CLDISTANCEN;
		StringParameter CLFEASIBLEROUTN;
		StringParameter CLFREIGHTN;
		StringParameter CLRATESELECN;
		StringParameter CLRATESNONELECN;
		StringParameter CLTONRAILMILEN;
		StringParameter CLTONSPERCARN;
		StringParameter CLINTLUSEXPORTN;
		StringParameter CLFLAGSN;
	}
	Procedure NEMS_Monitor {
		Body: {
			     ! the initial LoadGlobal is required because this procedure is invoked from the command line.
			     ! Aimms doesn't load case files automatically, as specified in the project settings, when a procedure is invoked from 
			     ! the command line.   
			     LoadGlobal("cases\\global_data"); 
			     ReadData;   
			
			     ! the following allows the aimms project to be kept open (when keepopen=1) and to later Quit at direction of NEMS,
			     ! or to run and exit immediately. NEMS is set up to wait for 
			     ! an action message of "Exited" written by the MainTermination procedure right before aimms exits.
			     CountSleep := 0;
			     ! count sleep/wake cycles while waiting for direction from nems via sAction in the message file, monitor.in.txt
			     while ( CountSleep <= 2000 ) do
			        if fileexists(sMessageInFile) then
			        ! read sAction, current model year, and current iteration from sMessageInFile
			          sAction:=" ";
			          read from file sMessageInFile in merge mode;
			        else
			          put "the NEMS message file not found, CountSleep=",CountSleep," \n ";
			        endif;
			        if sAction = "MainExecution" then
			          sAction:="executing";    ! Action message to tell NEMS I'm executing
			          write sAction to file NEMSMessageOutFile in replace mode;  
			
			          dialogProgress(""); ! remove progress dialog
			          sStatusMessage := formatstring("Invoking MainExecution for %s",ncntrl_curcalyr('1')) + 
			                            formatstring(", iteration %s",ncntrl_curitr('1')) +
			                            formatstring(", reporting loop indicator=%s",ncntrl_ncrl('1'));
			          put sStatusMessage;
			          ReadGlobalDataFromNEMS; ! read globaldatatoAIMMS_yyyy_ii.txt where yyyy is ncntrl_curcalyr(1) and ii is ncntrl_curitr(1)
			          !Initialize ModelYear
			
			          MainExecution;
			          sAction:=formatstring("Completed %s,",ncntrl_curcalyr('1')) + 
			                   formatstring("iteration %s ",ncntrl_curitr('1')) ;    ! Action message to tell NEMS I'v completed this year, iteration
			          write sAction to file NEMSMessageOutFile in replace mode;  
			          CountSleep:=0;   
			          sStatusMessage := "Monitoring NEMS message file("+sMessageInFile+") for "+formatstring("%s",CountSleep/2)+" seconds. Hit Ctrl+Shift+S to Stop this monitoring\n";
			          put sStatusMessage;
			          Delay(1);    ! give nems a chance to pick up status and create new monitor.in.txt file                
			        elseif sAction = "Quit" then ! NEMS says to exit aimms
			          CountSleep:=2000;
			        else
			          sStatusMessage := "Monitoring NEMS message file("+sMessageInFile+") for "+formatstring("%s",CountSleep)+" seconds. Hit Ctrl+Shift+S to Stop this monitoring\n";
			          Delay(.5);                  
			        endif;
			        dialogProgress(sStatusMessage,round(100*CountSleep/2000));
			        CountSleep += 1;
			
			     endwhile;
			     if CountSleep>=2001 then
			       put "Quit directive found in monitor.in.txt. Exiting AIMMS";
			     else
			       put "Wait time exceeded. Exiting Aimms";
			     endif;
			     exitAimms; ! causes MainTermination to run and for aimms to exit. MainTermination sends message "Exited" back to nems.
		}
		Comment: {
			"For KEEPOPEN=1 option, This routines cause AIMMS to sleep and periodically wake to check a message input file from NEMS. If the file
			is found, AIMMS reads it and re-invokes mainexecution if indicated, or closes the project.  
			After invoking mainExecution, it writes an output message file indicating completion.
			This routine then continues the sleep-wait cycle."
		}
	}
	Procedure MainTermination {
		Body: {
			!return DataManagementExit();
			sAction:="Exited";    ! Action message for NEMS
			write sAction to file NEMSMessageOutFile in replace mode;  
			return 1;
		}
	}
	Procedure WriteData {
		Body: {
			write to table OutputFreightRate;
			write to table OutputTradeBtu;
			write to table OutputTradeBtuUS;
			write to table OutputDomesticBtu;
			write to table OutputProductionDollars;
			write to table OutputTransportDollars;
			write to table OutputResComBtu;
			write to table OutputIndustrialBtu;
			write to table OutputCokingBtu;
			write to table OutputLiquidsBtu;
			write to table OutputMacroVariables;
			write to table OutputExports;
			write to table OutputExportsTest;
			!write to table OutputEscape1;
			!write to table OutputSupplyCurves;
		}
	}
	Procedure PutGlobalData {
		Body: {
			                ! For debugging, output all parameters defined in section global_data_structure to a text file. 
			                sDataYearFile:="GlobalData.txt";
			                ! Note The "FILE" identifier GlobalDataToNEMS is linked to the string parameter sDataYearFile
			                put GlobalDataToNEMS; ! opens the file (sDataYearFile) and sets stage for subsequent display and/or put statements
			display { QBLK_QELRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QELCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QELTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QELIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QELRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QELHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QELAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGFRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGFCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGFTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGFIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGFRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGFEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGFHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGFAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGIRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGICM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGITR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGIIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGIRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGIEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGIHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGIAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QNGRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QNGCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QNGTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QNGIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QNGRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QNGEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QNGHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QNGAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGPTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QLPIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QCLRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QCLCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QCLIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QCLRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QCLEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QCLSN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QCLHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QCLAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QMCIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QMGCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QMGTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QMGIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QMGAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QJFTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QDSRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QDSCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QDSTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QDSIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QDSRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QDSEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QDSAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QKSRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QKSCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QKSIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QKSAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QLGRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QLGCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QLGTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QLGIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QLGRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QLGAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRLCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRLTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRLIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRLRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRLEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRLAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRHTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRHEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRHAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRSCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRSTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRSIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRSRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRSEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QRSAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPFIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QSGIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QSGRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPCIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPCRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPCEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPCAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QASIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QOTTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QOTIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QOTRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QOTAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTPRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTPCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTPTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTPIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTPRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTPEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTPAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QMETR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QETTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QETHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QHYTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QUREL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QURHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QHOIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QHOEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QHOAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGERS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGEIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGEEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QGEAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QBMRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QBMCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QBMIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QBMRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QBMEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QBMSN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QBMHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QBMAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QMSIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QMSEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QMSAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QSTRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QSTCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QSTIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QSTEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QSTAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPVRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPVCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPVIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPVEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QPVAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QWIIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QWIEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QWIAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTRRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTRCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTRTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTRIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTREL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTRSN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTRHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTRAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QEIEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QCIIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTSRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTSCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTSTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTSIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTSRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTSEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTSSN (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTSHM (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QTSAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QH1TR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QH2TR (MNUMCR,MNUMYR)} where decimals:=10;
			display { QBLK_QH3TR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PELRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PELCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PELTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PELIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PELAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGFRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGFCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGFTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGFIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGFEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGFAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGIRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGICM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGITR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGIIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGIEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGIAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PNGRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PNGCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PNGTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PNGIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PNGEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PNGAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PGPTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PLPIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLRStemp (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLCMtemp (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLINtemp (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLELtemp (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLSN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PCLAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PMCIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PMCINtemp (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PMGCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PMGTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PMGIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PMGAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PJFTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PDSRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PDSCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PDSTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PDSIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PDSEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PDSAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PKSRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PKSCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PKSIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PKSAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PLGRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PLGCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PLGTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PLGIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PLGAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRLCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRLTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRLIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRLEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRLAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRHTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRHEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRHAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRSCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRSTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRSIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRSEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PRSAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PPFIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PASIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_POTTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_POTIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_POTAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PTPRS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PTPCM (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PTPTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PTPIN (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PTPRF (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PTPEL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PTPAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PMETR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PETTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PHYTR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PUREL (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PH1TR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PH2TR (MNUMCR,MNUMYR)} where decimals:=10;
			display { MPBLK_PH3TR (MNUMCR,MNUMYR)} where decimals:=10;
			display { NCNTRL_EXW (M1)} where decimals:=10;
			display { NCNTRL_EXM (M1)} where decimals:=10;
			display { NCNTRL_EXR (M1)} where decimals:=10;
			display { NCNTRL_EXK (M1)} where decimals:=10;
			display { NCNTRL_EXI (M1)} where decimals:=10;
			display { NCNTRL_EXT (M1)} where decimals:=10;
			display { NCNTRL_EXE (M1)} where decimals:=10;
			display { NCNTRL_EXC (M1)} where decimals:=10;
			display { NCNTRL_EXL (M1)} where decimals:=10;
			display { NCNTRL_EXG (M1)} where decimals:=10;
			display { NCNTRL_EXO (M1)} where decimals:=10;
			display { NCNTRL_EXN (M1)} where decimals:=10;
			display { NCNTRL_EXH (M1)} where decimals:=10;
			display { NCNTRL_RUNMOD (NMODEL)} where decimals:=10;
			display { NCNTRL_FIRSYR (M1)} where decimals:=10;
			display { NCNTRL_LASTYR (M1)} where decimals:=10;
			display { NCNTRL_LASTCALYR (M1)} where decimals:=10;
			display { NCNTRL_MAXITR (M1)} where decimals:=10;
			display { NCNTRL_FRCTOL (M1)} where decimals:=10;
			display { NCNTRL_ABSTOL (M1)} where decimals:=10;
			display { NCNTRL_RLXPC (M1)} where decimals:=10;
			display { NCNTRL_NYRS (M1)} where decimals:=10;
			display { NCNTRL_I4SITE (M1)} where decimals:=10;
			display { NCNTRL_I4SCNT (M1)} where decimals:=10;
			display { NCNTRL_IRELAX (M1)} where decimals:=10;
			display { NCNTRL_WWOP (M1)} where decimals:=10;
			display { NCNTRL_MMAC (M1)} where decimals:=10;
			display { NCNTRL_HISTORY (M1)} where decimals:=10;
			display { NCNTRL_CURITR (M1)} where decimals:=10;
			display { NCNTRL_CURIYR (M1)} where decimals:=10;
			display { NCNTRL_CURCALYR (M1)} where decimals:=10;
			display { NCNTRL_LOOPOP (M1)} where decimals:=10;
			display { NCNTRL_CTEST (M1)} where decimals:=10;
			display { NCNTRL_FCRL (M1)} where decimals:=10;
			display { NCNTRL_NCRL (M1)} where decimals:=10;
			display { NCNTRL_MACFDBK (M1)} where decimals:=10;
			display { NCNTRL_ELASSW (M1)} where decimals:=10;
			display { NCNTRL_DSMSWTCH (M1)} where decimals:=10;
			display { NCNTRL_DBDUMP (M1)} where decimals:=10;
			display { NCNTRL_MODELON (M1)} where decimals:=10;
			display { NCNTRL_ECPSTART (M1)} where decimals:=10;
			display { NCNTRL_CNVTST (NMODEL,MNUMYR)} where decimals:=10;
			display { NCNTRL_ITIMNG (M1)} where decimals:=10;
			display { NCNTRL_YEARPR (M1)} where decimals:=10;
			display { NCNTRL_SCALPR (M1)} where decimals:=10;
			display { NCNTRL_MORDER (NMODEL)} where decimals:=10;
			display { NCNTRL_PRTDBGW (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGM (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGR (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGK (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGI (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGT (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGE (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGC (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGL (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGG (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGO (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGN (M1)} where decimals:=10;
			display { NCNTRL_PRTDBGH (M1)} where decimals:=10;
			display { NCNTRL_IJUMPYR (M1)} where decimals:=10;
			display { NCNTRL_IJUMPCALYR (M1)} where decimals:=10;
			display { PMMOUT_QCLRFPD (MNUMPR,MNUMYR)} where decimals:=10;
			display { COALOUT_CLSYNGQN (M17,MNUMYR)} where decimals:=10;
			display { COALOUT_CQSBB (M3,MNUMYR)} where decimals:=10;
			display { COALOUT_CQSBT (M3,MNUMYR)} where decimals:=10;
			display { COALOUT_CPSB (M3,MNUMYR)} where decimals:=10;
			display { COALOUT_CPSBT (M3,MNUMYR)} where decimals:=10;
			display { COALOUT_CQDBFT (MNUMCR,CLSECT,MNUMYR)} where decimals:=10;
			display { COALOUT_CPDBFT (MNUMCR,CLSECT,MNUMYR)} where decimals:=10;
			display { COALOUT_CQDBFB (MNUMCR,CLSECT,MNUMYR)} where decimals:=10;
			display { COALOUT_PCLRFPD (MNUMPR,MNUMYR)} where decimals:=10;
			display { COALOUT_LIQUCARB (MNUMCR,MNUMYR)} where decimals:=10;
			display { COALOUT_LCVBTU (MNUMPR,MNUMYR)} where decimals:=10;
			display { COALOUT_LTRNTON (MNUMPR,MNUMYR)} where decimals:=10;
			display { COALOUT_TOTMINERS (MNUMYR)} where decimals:=10;
			display { COALOUT_L_SO2P (MNUMPR,MNUMYR)} where decimals:=10;
			display { COALOUT_L_HGP (MNUMPR,MNUMYR)} where decimals:=10;
			display { COALOUT_IIMP_BTU (MNUMCR,MNUMYR)} where decimals:=10;
			display { COALOUT_EIMP_BTU (MNUMCR,MNUMYR)} where decimals:=10;
			display { COALOUT_MIMP_BTU (MNUMCR,MNUMYR)} where decimals:=10;
			display { COALOUT_QCLGAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { COALOUT_QCLGHP (MNUMCR,MNUMYR)} where decimals:=10;
			display { COALOUT_EASTTOEA (MNUMYR)} where decimals:=10;
			display { COALOUT_WESTSUP (MNUMYR)} where decimals:=10;
			display { COALOUT_EASTTOT (MNUMYR)} where decimals:=10;
			display { COALOUT_TTONMILE (MNUMYR)} where decimals:=10;
			display { COALOUT_ETONMILE (MNUMYR)} where decimals:=10;
			display { COALOUT_WTONMILE (MNUMYR)} where decimals:=10;
			display { COALOUT_TTON (MNUMYR)} where decimals:=10;
			display { COALOUT_ETON (MNUMYR)} where decimals:=10;
			display { COALOUT_WTON (MNUMYR)} where decimals:=10;
			display { COALOUT_COALCODE (M1)} where decimals:=10;
			display { COALOUT_INDSTEAMBAL (MNUMYR)} where decimals:=10;
			display { COALOUT_INDCOKEBAL (MNUMYR)} where decimals:=10;
			display { COALOUT_ELECCOALBAL (MNUMYR)} where decimals:=10;
			display { COALOUT_APPSTOCKS (MNUMYR)} where decimals:=10;
			display { COALOUT_INTSTOCKS (MNUMYR)} where decimals:=10;
			display { COALOUT_WESTSTOCKS (MNUMYR)} where decimals:=10;
			display { COALREP_COALPROD (MNUMCR,MNUMLR,MNUMYR)} where decimals:=10;
			display { COALREP_COALPROD2 (MNUMCR,MNUMLR,MNUMYR)} where decimals:=10;
			display { COALREP_COALPRICE (MNUMLR,MNUMYR)} where decimals:=10;
			display { COALREP_WC_DIST_ST (MNUMCR,MNUMLR,MNUMYR)} where decimals:=10;
			display { COALREP_WC_PROD_ST (MNUMCR,MNUMLR,MNUMYR)} where decimals:=10;
			display { COALREP_WC_PROD_BTU (MNUMCR,MNUMLR,MNUMYR)} where decimals:=10;
			display { COALREP_ABSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_ALSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_IBSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_ILSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_WBSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_WSSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_WLSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_WSCF (M4,M11,MNUMYR)} where decimals:=10;
			display { COALREP_WMCF (M4,M11,MNUMYR)} where decimals:=10;
			display { COALREP_WTCF (M4,M11,MNUMYR)} where decimals:=10;
			display { COALREP_PCLEX (MNUMCR,MNUMYR)} where decimals:=10;
			display { COALREP_CLSULF (M14,M4,M3,MNUMYR)} where decimals:=10;
			display { COALREP_PCLSULF (M14,M4,M3,MNUMYR)} where decimals:=10;
			display { COALREP_PABSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_PALSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_PIBSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_PILSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_PWBSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_PWSSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_PWLSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_APSULF_BTU (M4,MNUMYR)} where decimals:=10;
			display { COALREP_ABSULF_BTU (M4,MNUMYR)} where decimals:=10;
			display { COALREP_ALSULF_BTU (M4,MNUMYR)} where decimals:=10;
			display { COALREP_IBSULF_BTU (M4,MNUMYR)} where decimals:=10;
			display { COALREP_ILSULF_BTU (M4,MNUMYR)} where decimals:=10;
			display { COALREP_WBSULF_BTU (M4,MNUMYR)} where decimals:=10;
			display { COALREP_WSSULF_BTU (M4,MNUMYR)} where decimals:=10;
			display { COALREP_WLSULF_BTU (M4,MNUMYR)} where decimals:=10;
			display { COALREP_CLSULF_BTU (M14,M4,M3,MNUMYR)} where decimals:=10;
			display { COALREP_PMTD (NSREGN,MNUMYR)} where decimals:=10;
			display { COALREP_PMTS (NSREGN,MNUMYR)} where decimals:=10;
			display { COALREP_PMTD_BTU (NSREGN,MNUMYR)} where decimals:=10;
			display { COALREP_PMTS_BTU (NSREGN,MNUMYR)} where decimals:=10;
			display { COALREP_PMTDP (NSREGN,MNUMYR)} where decimals:=10;
			display { COALREP_PMTSP (NSREGN,MNUMYR)} where decimals:=10;
			display { COALREP_APSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_PAPSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_UTCONS (NUTSEC,MNUMYR)} where decimals:=10;
			display { COALREP_UTPSO2 (NUTSEC,MNUMYR)} where decimals:=10;
			display { COALREP_UTTSO2 (NUTSEC,MNUMYR)} where decimals:=10;
			display { COALREP_UCSO2 (NUTSEC,MNUMYR)} where decimals:=10;
			display { COALREP_UCMERC (NUTSEC,MNUMYR)} where decimals:=10;
			display { COALREP_ACMERC (MNUMYR)} where decimals:=10;
			display { COALREP_HGEM95 (M31,MNUMYR)} where decimals:=10;
			display { COALREP_TSPMBTU (MNUMYR)} where decimals:=10;
			display { COALREP_TMPMBTU (MNUMYR)} where decimals:=10;
			display { COALREP_TOTLABPROD (MNUMYR)} where decimals:=10;
			display { COALREP_WAGEPHOUR (MNUMYR)} where decimals:=10;
			display { COALREP_WAGEGROWTH (MNUMYR)} where decimals:=10;
			display { COALREP_LABPRODGROWTH (MNUMYR)} where decimals:=10;
			display { COALREP_COAL2GAS (MNUMCR,MNUMYR)} where decimals:=10;
			display { COALREP_WPSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_PWPSULF (M4,MNUMYR)} where decimals:=10;
			display { COALREP_WPSULF_BTU (M4,MNUMYR)} where decimals:=10;
			display { COALREP_CLIMPRANK (M5,MNUMYR)} where decimals:=10;
			display { COALREP_CLEXPRANK (M5,MNUMYR)} where decimals:=10;
			display { TRANREP_TRTMRRC (M2,MNUMYR)} where decimals:=10;
			display { MACOUT_MC_JPGDP (MNUMY3)} where decimals:=10;
			display { MACOUT_MC_RLRMCORPPUAA (MNUMYR)} where decimals:=10;
			display { MACOUT_MC_RMCORPPUAA (MNUMYR)} where decimals:=10;
			display { MACOUT_MC_WPI10 (MNUMYR)} where decimals:=10;
			display { EMISSION_NUM_HG_GRP (M1)} where decimals:=10;
			display { EMISSION_EMCOALPROD (M6,M2,MNUMYR)} where decimals:=10;
			display { EMISSION_HG_INPUT (HG_CLS,MX_RNK,MNUMYR)} where decimals:=10;
			display { EMISSION_HG_MEF (HG_CLS,MX_RNK,MNUMYR)} where decimals:=10;
			display { EMISSION_NUM_SO2_GRP (M1)} where decimals:=10;
			display { EMISSION_EMRFSA (MNUMYR,MX_SO2)} where decimals:=10;
			display { EMISSION_TOT_MERC (MNUMYR)} where decimals:=10;
			display { EMISSION_EMEL_QHG (NDREGN,MNUMYR)} where decimals:=10;
			display { EMISSION_EMEL_PHG (NDREGN,MNUMYR)} where decimals:=10;
			display { EMISSION_EMETAX (M15,MNUMYR)} where decimals:=10;
			display { EMISSION_EMLIM (M4,MNUMYR)} where decimals:=10;
			display { EMISSION_EMELPSO2 (MNUMYR,MX_SO2)} where decimals:=10;
			display { EMISSION_SO2_SHR_BY_CLRG (NDRGGN,MX_SO2)} where decimals:=10;
			display { EMISSION_SO2_SHR_ALW_GRP (MNUMYR,MX_SO2)} where decimals:=10;
			display { EMISSION_HG_MEFNC (NDREGN,MNUMYR)} where decimals:=10;
			display { EMISSION_USW_CAMR (M1)} where decimals:=10;
			display { EMISSION_EXTRARISK (MNUMYR)} where decimals:=10;
			display { COALEMM_QCLCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_RCLCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_SCLCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_CCLCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_BCLCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_XCLCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_SO2OTHER (MNUMYR,MX_SO2)} where decimals:=10;
			display { COALEMM_HGOTHER (MNUMYR)} where decimals:=10;
			display { COALEMM_GCLCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_PSLCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_PHGCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_PCACLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_HRTCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_HCLCLNR (NDRGGN,MNUMYR,NUTSEC)} where decimals:=10;
			display { COALEMM_EMM_MEF (NSTEPS,MX_RNK,NUTSEC)} where decimals:=10;
			display { COALEMM_ACI_CST (NSTEPS,MX_RNK,NUTSEC)} where decimals:=10;
			display { COALEMM_ACI_QAC (NSTEPS,MX_RNK,NUTSEC)} where decimals:=10;
			display { COALEMM_P_AC_SC (MXACSS)} where decimals:=10;
			display { COALEMM_Q_AC_SC (MXACSS)} where decimals:=10;
			display { COALEMM_N_AC_SC (M1)} where decimals:=10;
			display { COALEMM_ACI_OPT (NSTEPS,MX_RNK,NUTSEC,MNUMYR)} where decimals:=10;
			display { COALEMM_CMM_CL_BTUS (MX_NCI,MX_UNT)} where decimals:=10;
			display { COALEMM_CMM_CONT_INDX (MX_NCI,MX_UNT)} where decimals:=10;
			display { COALEMM_CMM_TRANS_INDX (MX_NCI,MX_UNT)} where decimals:=10;
			display { COALEMM_CMM_SDV_INDX (MX_UNT)} where decimals:=10;
			display { COALEMM_CMM_LDV_INDX (MX_UNT)} where decimals:=10;
			display { COALEMM_NEW_SDV_INDX (NDRGGN)} where decimals:=10;
			display { COALEMM_NEW_LDV_INDX (NDRGGN)} where decimals:=10;
			display { COALEMM_CMM_CONT_PRF (MX_PRF,MNUMYR)} where decimals:=10;
			display { COALEMM_CMM_TRANS_PRF (MX_PRF,MNUMYR)} where decimals:=10;
			display { COALEMM_CMM_SDV_PRF (MX_PRF,MNUMYR)} where decimals:=10;
			display { COALEMM_C_DR (MNUMYR)} where decimals:=10;
			display { COALEMM_CMM_LDV_PRF (MX_PRF,MNUMYR)} where decimals:=10;
			display { COALEMM_EMM_CL_ECPT (MX_UNT,MNUMYR)} where decimals:=10;
			display { COALEMM_EMM_CL_BTUs (MX_UNT,MNUMYR)} where decimals:=10;
			display { COALEMM_NUM_CMM_UNITS (M1)} where decimals:=10;
			display { COALEMM_NUM_CONT_PRF (M1)} where decimals:=10;
			display { COALEMM_NUM_TRANS_PRF (M1)} where decimals:=10;
			display { COALEMM_NUM_SDV_PRF (M1)} where decimals:=10;
			display { COALEMM_NUM_LDV_PRF (M1)} where decimals:=10;
			display { COALEMM_NUM_SC (M1)} where decimals:=10;
			display { COALEMM_EMM_CL_CLRG (MX_UNT)} where decimals:=10;
			display { COALEMM_EMM_CL_UNITS (MX_UNT)} where decimals:=10;
			display { COALEMM_CMM_CL_UNITS (MX_UNT)} where decimals:=10;
			display { COALEMM_PLNT_EMF (ECPCAP,MX_RNK)} where decimals:=10;
			display { COALEMM_MIN_EMF (ECPCAP,MX_RNK)} where decimals:=10;
			display { COALEMM_ACI_OandM (ECPCAP,MX_RNK)} where decimals:=10;
			display { COALEMM_ACI_STEPS (ECPCAP,MX_RNK)} where decimals:=10;
			display { COALEMM_HG_CHOICE (ECPCAP)} where decimals:=10;
			display { COALEMM_HG_CLASS (ECPCAP)} where decimals:=10;
			display { COALEMM_ACI_FOM_SW (ECPCAP)} where decimals:=10;
			display { COALEMM_FGD_FCTR (NUTSEC,MX_RNK)} where decimals:=10;
			display { COALEMM_SCR_FCTR (NUTSEC,MX_RNK)} where decimals:=10;
			display { COALEMM_PARM_A (NUTSEC,MX_RNK)} where decimals:=10;
			display { COALEMM_PARM_B (NUTSEC,MX_RNK)} where decimals:=10;
			display { COALEMM_PARM_C (NUTSEC,MX_RNK)} where decimals:=10;
			display { COALEMM_PARM_D (NUTSEC,MX_RNK)} where decimals:=10;
			display { COALEMM_EMM_CL_CF (MX_UNT,MNUMYR)} where decimals:=10;
			display { COALPRC_PCLELCDR (M2,NDRGGN,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_QECP (MX_NCL,ECPFPH,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_PECP (MX_NCL,M11,ECPFPH,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_STEPS (M11)} where decimals:=10;
			display { USO2GRP_XCL_OTHER (MX_NCI,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_TRATE (MX_NCL,NDREGN)} where decimals:=10;
			display { USO2GRP_XCL_TYPE (MX_NCI)} where decimals:=10;
			display { USO2GRP_XCL_IMPORT (NDREGN,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_STOCK (MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_SO2 (MX_NCI)} where decimals:=10;
			display { USO2GRP_XCL_HG (MX_NCI)} where decimals:=10;
			display { USO2GRP_XCL_CAR (MX_NCI)} where decimals:=10;
			display { USO2GRP_XCL_SO2_YR (MX_NCI,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_HG_YR (MX_NCI,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_CAR_YR (MX_NCI,MNUMYR)} where decimals:=10;
			display { USO2GRP_UQCOAL (NUTSEC,NDREGN,MNUMYR)} where decimals:=10;
			display { USO2GRP_ECP_QECP (MX_NCL,ECPXPH,MNUMYR)} where decimals:=10;
			display { USO2GRP_ECP_PECP (MX_NCL,ECPXPH,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_TRAT1 (MX_NCL,NDREGN)} where decimals:=10;
			display { USO2GRP_XCL_TR_T1 (MX_NCL,NDREGN,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_TR_T2 (MX_NCL,NDREGN,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_PCAP (MX_NCL,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_PCAP_LIMIT (MX_NCL,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_MAX_INCR (MX_NCL,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_MX_PCAP (MX_NCL)} where decimals:=10;
			display { USO2GRP_XCL_BTU (MX_NCI)} where decimals:=10;
			display { USO2GRP_XCL_PLIM (MX_NCL,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_1TESC (MX_NCL,ECPFPH,MNUMYR,NDREGN)} where decimals:=10;
			display { USO2GRP_XCL_2TESC (MX_NCL,ECPFPH,MNUMYR,NDREGN)} where decimals:=10;
			display { USO2GRP_BNK_TO_CMM_HG (MNUMYR)} where decimals:=10;
			display { USO2GRP_EFD_PROD (MX_NCL)} where decimals:=10;
			display { USO2GRP_EFD_TIER1 (MX_NCL,NDREGN,NUTSEC)} where decimals:=10;
			display { USO2GRP_EFD_TIER1_LIM (MX_NCL,NDREGN,NUTSEC,MNUMYR)} where decimals:=10;
			display { USO2GRP_EFD_CONT (MX_NCI,NDREGN,M2,MNUMYR)} where decimals:=10;
			display { USO2GRP_EFD_DVSB (NDREGN,NUTSEC)} where decimals:=10;
			display { USO2GRP_EFD_DVLG (NDREGN,NUTSEC)} where decimals:=10;
			display { USO2GRP_EFD_SC_DR_PT (MX_NCI,NDREGN,NUTSEC)} where decimals:=10;
			display { USO2GRP_EFD_RANK (MX_NCI)} where decimals:=10;
			display { USO2GRP_CTLBTU (MX_NCL,NDREGN,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_PIMP (MX_ISC,MX_IST,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_QIMP (MX_ISC,MX_IST,MNUMYR)} where decimals:=10;
			display { USO2GRP_XCL_TRATI1 (M4,MX_ISC,NDREGN)} where decimals:=10;
			display { USO2GRP_CTL_TRATE (MX_NCL,NDREGN)} where decimals:=10;
			display { USO2GRP_CTL_OTHER (MX_NCL,MNUMYR)} where decimals:=10;
			display { USO2GRP_CTL_CLDR (NDREGN)} where decimals:=10;
			display { QONROAD_QDSTRHWY (MNUMCR,MNUMYR)} where decimals:=10;
			display { QONROAD_CFDSTRHWY (MNUMYR)} where decimals:=10;
			display { APONROAD_PDSTRHWY (MNUMCR,MNUMYR)} where decimals:=10;
			display { CSAPR_TSO2_SHR_BY_CLRG (NDRGGN,MX_SO2_TRAN)} where decimals:=10;
			display { CSAPR_SO2OTHCL (MNUMYR,NDRGGN)} where decimals:=10;
			display { CSAPR_TEMRFSA (MNUMYR,MX_SO2_TRAN)} where decimals:=10;
			display { CSAPR_TSO2_LM1_BY_CLRG (NDRGGN)} where decimals:=10;
			display { CSAPR_TSO2_LIM_BY_CLRG (NDRGGN)} where decimals:=10;
			display { CSAPR_TSO2_VR1_BY_CLRG (NDRGGN)} where decimals:=10;
			display { CSAPR_TSO2_VR3_BY_CLRG (NDRGGN)} where decimals:=10;
			display { CSAPR_TSO2_YR_BY_CLRG (M1)} where decimals:=10;
			display { CSAPR_TSO2_VR_BY_CLRG (M1)} where decimals:=10;
			display { CSAPR_TRANRULE1 (M1)} where decimals:=10;
			display { CSAPR_TRANRULE2 (M1)} where decimals:=10;
			                 putclose;
		}
		Comment: "This procedure replaced by Dan Skelly in Sept 2017 with ReadGlobalDataFromNEMS";
	}
	Procedure GetGlobalData {
		Body: {
			! reads global data from globaldata.txt for debugging, usually to initialize from other run
			             sDataYearFile:="GlobalData.txt";
			             put formatstring("the global data file name is %s\n", sDataYearFile);
			              if fileexists(sDataYearFile) then
			             !  the file has data for all years. replace all data for items read (as opposed to merge mode)
			                 read from file sDataYearFile;
			             else
			                put "the global data transfer file not found \n ";
			             endif;
			             SaveGlobal("cases\\global_data");
		}
	}
	Procedure ReadGlobalDataFromNEMS {
		Body: {
			            ! reads global data from NEMS, including "COALEMM_EMM_CL_UNITS"
			                         sDataYearFile:="toAIMMS\\GlobalDataToAimms_"+formatstring("%i",ncntrl_curcalyr(1))+"_"+formatstring("%>02i",ncntrl_curitr(1))+".txt";
			                         put formatstring("the global data transfer file name is %s\n", sDataYearFile);
			                          if fileexists(sDataYearFile) then
			                         !  in first year, file has data for all years. replace all data for items read.
			                         !  in other years, file has data for a single year. read in merge mode so data  
			                         !  is replaced for that year only
			                           if ncntrl_curcalyr(1) = cpsbaseyr then
			
			                             read from file sDataYearFile;
			
			                           else
			
			                             read from file sDataYearFile in merge mode;
			                           endif;
			                         else
			                            put "the global data transfer file not found \n ";
			                         endif;
		}
	}
	Procedure WriteEscapeVectorTotal {
		Body: {
			write to table OutputEscapeTotal;
		}
	}
	Procedure MainInitialization {
		Body: {
			ReadData;
			
			LocalizationInitialize ;
		}
	}
	Procedure Overwrites {
		Body: {
			! The following STOCK and balance variables should be updated along with the base year in the code  
			COALOUT_APPSTOCKS(32)	              := 0;  !overwrite stock for base year to match historical production
			COALOUT_INTSTOCKS(32)	              := 0; !overwrite stock for base year to match historical production
			COALOUT_WESTSTOCKS(32)	              := 0;  !overwrite stock for base year to match historical production
			COALOUT_indsteambal(32)		      := 0;  !overwrite to zero because heat content of model solution is different from historical year.
			
			COALREP_COALPROD(11,MNUMLR,globalyr)    :=Sum((NSREGN,M4,M3,M2,cyr)|Map_globalyr_cyr(globalyr,cyr)
				and Map_NSREGN_mnumlr(NSREGN,MNUMLR), hclprd(NSREGN,m4,M3,M2,cyr));
			COALREP_COALPROD(11,'1',globalyr)    :=	Sum(cyr|Map_globalyr_cyr(globalyr,cyr),COALREP_COALPROD(11,'1',globalyr)-hwcdistst(cyr));
			
			COALREP_COALPROD2(11,MNUMLR,globalyr)   := Sum((NSREGN,M4,M3,M2,cyr)|Map_globalyr_cyr(globalyr,cyr)
				and Map_NSREGN_mnumlr(NSREGN,MNUMLR), hclprd(NSREGN,m4,M3,M2,cyr));
			COALREP_COALPROD2(11,'1',globalyr)    :=	Sum(cyr|Map_globalyr_cyr(globalyr,cyr),COALREP_COALPROD(11,'1',globalyr));!-hwcdistst(cyr));
			
			!waste coal
			
			COALREP_WC_PROD_BTU(    11,1,globalyr) := Sum(cyr|Map_globalyr_cyr(globalyr,cyr),hwcprodbtu(cyr));  !not sure what mnumlR should equal
			
			COALREP_WC_DIST_ST(    11,1,globalyr)  := Sum(cyr|Map_globalyr_cyr(globalyr,cyr),hwcdistst(cyr));
			COALREP_WC_PROD_ST(    11,MNUMLR,globalyr)  := 0;
			
			COALREP_WC_PROD_ST(11,1,globalyr)  :=  Sum(cyr|Map_globalyr_cyr(globalyr,cyr),hclprd(1,3,3,2,cyr));
			
			sumpcl(NSREGN,M4,M3,M2,cyr)		:=hclmmpr1(NSREGN,M4,M3,M2,cyr)/mc_jpgdp(cyr)*hclprd(NSREGN,M4,M3,M2,cyr);
			sumpcl2(NSREGN,globalyr)		:= Sum((m4,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr), sumpcl(NSREGN,M4,M3,M2,cyr));
			sumprodcl2deep(NSREGN,globalyr)		:= Sum((m4,m3,cyr)|Map_globalyr_cyr(globalyr,cyr), hclprd(NSREGN,M4,M3,1,cyr));
			sumpprodcl2surface(NSREGN,globalyr)	:= Sum((m4,m3,cyr)|Map_globalyr_cyr(globalyr,cyr), hclprd(NSREGN,M4,M3,2,cyr));
			sumpcl3(MNUMLR,globalyr)		:=Sum(nsregn|Map_NSREGN_mnumlr(NSREGN,MNUMLR),sumpcl2(NSREGN,globalyr));
			COALREP_COALPRICE(MNUMLR,globalyr)      := if COALREP_COALPROD2(11,MNUMLR,globalyr) then
								sumpcl3(MNUMLR,globalyr)/ COALREP_COALPROD2(11,MNUMLR,globalyr)
								endif; !now in 1987$
			
			
			COALREP_ABSULF(M4,globalyr)             := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn < 4, hclprd(NSREGN,1,M3,M2,cyr));
			COALREP_ABSULF(4,globalyr)             :=  Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)and nsregn < 4, hclprd(NSREGN,1,M3,M2,cyr));
			COALREP_PABSULF_histdol(M4,globalyr)   := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn < 4, sumpcl(NSREGN,1,M3,M2,cyr));
			COALREP_PABSULF_histdol(4,globalyr)   	:= Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)
								and nsregn < 4, sumpcl(NSREGN,1,M3,M2,cyr));
			COALREP_PABSULF(M4,globalyr)   		:= COALREP_PABSULF_histdol(M4,globalyr);!/$COALREP_ABSULF(M4,globalyr);
			
			COALREP_ALSULF(M4,globalyr)             := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)and nsregn < 4,
								 hclprd(NSREGN,3,M3,M2,cyr));
			COALREP_ALSULF(4,globalyr)             :=  Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)and nsregn < 4, hclprd(NSREGN,3,M3,M2,cyr));
			
			COALREP_PALSULF_histdol(M4,globalyr)   := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn < 4, sumpcl(NSREGN,3,M3,M2,cyr));
			COALREP_PALSULF_histdol(4,globalyr)   	:= Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)
								and nsregn < 4, sumpcl(NSREGN,3,M3,M2,cyr));
			COALREP_PALSULF(M4,globalyr)   		:=! if COALREP_ALSULF(M4,globalyr) then
								COALREP_PALSULF_histdol(M4,globalyr);!/COALREP_ALSULF(M4,globalyr)
								!endif;
			
			
			COALREP_APSULF(M4,globalyr)             := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)and nsregn < 4,
								 hclprd(NSREGN,4,M3,M2,cyr));
			COALREP_APSULF(4,globalyr)             :=  Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)and nsregn < 4, hclprd(NSREGN,4,M3,M2,cyr));
			COALREP_PAPSULF_histdol(M4,globalyr)   := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn < 4, sumpcl(NSREGN,4,M3,M2,cyr));
			COALREP_PAPSULF_histdol(4,globalyr)   	:= Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)
								and nsregn < 4, sumpcl(NSREGN,4,M3,M2,cyr));
			COALREP_PAPSULF(M4,globalyr)   		:= COALREP_PAPSULF_histdol(M4,globalyr);!/$COALREP_APSULF(M4,globalyr);
			
			
			COALREP_IBSULF(M4,globalyr)             := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 3 and nsregn <= 6, hclprd(NSREGN,1,M3,M2,cyr));
			COALREP_IBSULF(4,globalyr)             :=  Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)and nsregn > 3 and nsregn < 6, hclprd(NSREGN,1,M3,M2,cyr));
			COALREP_PIBSULF_histdol(M4,globalyr)   := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 3 and nsregn <= 6, sumpcl(NSREGN,1,M3,M2,cyr));
			COALREP_PIBSULF_histdol(4,globalyr)   	:= Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)
								and nsregn > 3 and nsregn <= 6, sumpcl(NSREGN,1,M3,M2,cyr));
			COALREP_PIBSULF(M4,globalyr)   		:= COALREP_PIBSULF_histdol(M4,globalyr);!/$COALREP_IBSULF(M4,globalyr);
			
			COALREP_ILSULF(M4,globalyr)             := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 3 and nsregn <= 6, hclprd(NSREGN,3,M3,M2,cyr));
			COALREP_ILSULF(4,globalyr)             :=  Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)and nsregn > 3 and nsregn <= 6, hclprd(NSREGN,3,M3,M2,cyr));
			COALREP_PILSULF_histdol(M4,globalyr)   := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 3 and nsregn <= 6, sumpcl(NSREGN,3,M3,M2,cyr));
			COALREP_PILSULF_histdol(4,globalyr)   	:= Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)
								and nsregn > 3 and nsregn <= 6, sumpcl(NSREGN,3,M3,M2,cyr));
			COALREP_PILSULF(M4,globalyr)   		:= COALREP_PILSULF_histdol(M4,globalyr);!/$COALREP_ILSULF(M4,globalyr);
			
			COALREP_WBSULF(M4,globalyr)             := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 6, hclprd(NSREGN,1,M3,M2,cyr));
			COALREP_WBSULF(4,globalyr)             :=  Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)and nsregn > 6, hclprd(NSREGN,1,M3,M2,cyr));
			COALREP_PWBSULF_histdol(M4,globalyr)   := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 6, sumpcl(NSREGN,1,M3,M2,cyr));
			COALREP_PWBSULF_histdol(4,globalyr)   	:= Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)
								and nsregn > 6, sumpcl(NSREGN,1,M3,M2,cyr));
			COALREP_PWBSULF(M4,globalyr)   		:= COALREP_PWBSULF_histdol(M4,globalyr);!/$COALREP_WBSULF(M4,globalyr);
			COALREP_WSSULF(M4,globalyr)             := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 6, hclprd(NSREGN,2,M3,M2,cyr));
			COALREP_WSSULF(4,globalyr)             :=  Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)and nsregn > 6, hclprd(NSREGN,2,M3,M2,cyr));
			COALREP_PWSSULF_histdol(M4,globalyr)   := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 6, sumpcl(NSREGN,2,M3,M2,cyr));
			COALREP_PWSSULF_histdol(4,globalyr)   	:= Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)
								and nsregn > 6, sumpcl(NSREGN,2,M3,M2,cyr));
			COALREP_PWSSULF(M4,globalyr)   		:= COALREP_PWSSULF_histdol(M4,globalyr);!/$COALREP_WSSULF(M4,globalyr);
			COALREP_WLSULF(M4,globalyr)             := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 6, hclprd(NSREGN,3,M3,M2,cyr));
			COALREP_WLSULF(4,globalyr)             :=  Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)and nsregn > 6, hclprd(NSREGN,3,M3,M2,cyr));
			COALREP_PWLSULF_histdol(M4,globalyr)   := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 6, sumpcl(NSREGN,3,M3,M2,cyr));
			COALREP_PWLSULF_histdol(4,globalyr)   	:= Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)
								and nsregn > 6, sumpcl(NSREGN,3,M3,M2,cyr));
			COALREP_PWLSULF(M4,globalyr)   		:= COALREP_PWLSULF_histdol(M4,globalyr);!/$COALREP_WLSULF(M4,globalyr);
			
			
			COALREP_WPSULF(M4,globalyr)             := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 6, hclprd(NSREGN,4,M3,M2,cyr));
			COALREP_WPSULF(4,globalyr)             :=  Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)and nsregn > 6, hclprd(NSREGN,4,M3,M2,cyr));
			COALREP_PWPSULF_histdol(M4,globalyr)   := Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and Map_Sulf2_M3(M4,M3)
								and nsregn > 6, sumpcl(NSREGN,4,M3,M2,cyr));
			COALREP_PWPSULF_histdol(4,globalyr)   	:= Sum((nsregn,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr)
								and nsregn > 6, sumpcl(NSREGN,4,M3,M2,cyr));
			COALREP_PWPSULF(M4,globalyr)   		:= COALREP_PWPSULF_histdol(M4,globalyr);!/$COALREP_WPSULF(M4,globalyr);
			!Conversion factors for coal production
			Coalout_CQSBB(1,globalyr)		:= Sum(cyr|Map_globalyr_cyr(globalyr,cyr),(hclprdbt(1,cyr)/.001));
			Coalout_CQSBB(2,globalyr)		:= Sum(cyr|Map_globalyr_cyr(globalyr,cyr),(hclprdbt(2,cyr)/.001));
			Coalout_CQSBB(3,globalyr)		:= Sum(cyr|Map_globalyr_cyr(globalyr,cyr),(hclprdbt(3,cyr)/.001));
			!Rail miles historical numbers not updated and appear unused by the model  DAF March 2022
			tranrep_trtmrrc(1,globalyr)		:= Sum(cyr|Map_globalyr_cyr(globalyr,cyr),(hcltrtmrrc(1,cyr)));
			tranrep_trtmrrc(2,globalyr)		:= Sum(cyr|Map_globalyr_cyr(globalyr,cyr),(hcltrtmrrc(2,cyr)));
			!ease/west Mississippi
			sumclprd(1,globalyr)			:=Sum((nsregn,m4,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and nsregn <= 4,
								hclprd(NSREGN,M4,M3,M2,cyr))-COALREP_WC_PROD_ST(11,1,globalyr);
			sumclprd(2,globalyr)			:=Sum((nsregn,m4,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and nsregn > 4,
								hclprd(NSREGN,M4,M3,M2,cyr));
			sumclprd(3,globalyr)			:=Sum((nsregn,m4,m3,m2,cyr)|Map_globalyr_cyr(globalyr,cyr),
								hclprd(NSREGN,M4,M3,M2,cyr))-COALREP_WC_PROD_ST(11,1,globalyr);
			!conversion factors for production
			coalout_cqsbt(m3,globalyr)		:=if sumclprd(m3,globalyr) then
								coalout_cqsbb(m3,globalyr)/sumclprd(m3,globalyr)
								endif;
			
			
			
			
			!production by mine method
			COALREP_PMTD(NSREGN,globalyr)           :=Sum((m4,m3,cyr)|Map_globalyr_cyr(globalyr,cyr), hclprd(NSREGN,M4,M3,1,cyr));
			
			COALREP_PMTDP_histdol(NSREGN,globalyr)  :=Sum((m4,m3,cyr)|Map_globalyr_cyr(globalyr,cyr), hclmmpr1(NSREGN,M4,M3,1,cyr)/mc_jpgdp(cyr)*
								hclprd(NSREGN,M4,M3,1,cyr));
			COALREP_PMTDP(NSREGN,globalyr)  	:=COALREP_PMTDP_histdol(NSREGN,globalyr);!/$sumprodcl2deep(NSREGN,globalyr);
			COALREP_PMTS(NSREGN,globalyr)           :=Sum((m4,m3,cyr)|Map_globalyr_cyr(globalyr,cyr), hclprd(NSREGN,M4,M3,2,cyr));
			!Table 95 and Table 99 values
			COALREP_CLSULF(M14,M4,M3,globalyr)      := Sum((nsregn,m2,cyr)|Map_globalyr_cyr(globalyr,cyr) and map_m14_nsregn(m14,nsregn) = 1,
								hclprd(NSREGN,M4,M3,M2,cyr));
			COALREP_PCLSULF_prelim(M14,M4,M3,M2,globalyr)         := Sum((nsregn,cyr)| Map_globalyr_cyr(globalyr,cyr) and map_m14_nsregn(m14,nsregn) = 1,
								hclmmpr1(NSREGN,M4,M3,M2,cyr)/mc_jpgdp(cyr)*hclprd(NSREGN,M4,M3,M2,cyr));
			COALREP_PCLSULF(M14,M4,M3,globalyr)         := Sum((m2,cyr)|Map_globalyr_cyr(globalyr,cyr),
								COALREP_PCLSULF_prelim(M14,M4,M3,M2,globalyr));
			!
			
			COALREP_PMTSP_histdol(NSREGN,globalyr)  :=Sum((m4,m3,cyr)|Map_globalyr_cyr(globalyr,cyr), hclmmpr1(NSREGN,M4,M3,2,cyr)/mc_jpgdp(cyr)*
								hclprd(NSREGN,M4,M3,2,cyr));
			COALREP_PMTSP(NSREGN,globalyr)  	:=COALREP_PMTSP_histdol(NSREGN,globalyr);!/$sumpprodcl2surface(NSREGN,globalyr);
			!Fill coal trade
			COALREP_WSCF(M4,M11,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr),hclworld(M4,M11,'1',cyr));
			
			COALREP_WSCF(M4,11,globalyr)		:=Sum((M11,cyr)|M11 < 11
								and Map_globalyr_cyr(globalyr,cyr),hclworld(M4,M11,'1',cyr));
			COALREP_WMCF(M4,M11,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr),hclworld(M4,M11,'2',cyr));
			COALREP_WMCF(M4,11,globalyr)		:=Sum((M11,cyr)| M11 < 11
								and Map_globalyr_cyr(globalyr,cyr),hclworld(M4,M11,'2',cyr));
			
			COALREP_WTCF(M4,M11,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr),(hclworld(M4,M11,'1',cyr)+
								hclworld(M4,M11,'2',cyr)));
			COALREP_WTCF(M4,11,globalyr)		:=Sum((M11,cyr)|M11 < 11
								and Map_globalyr_cyr(globalyr,cyr),hclworld(M4,M11,'1',cyr)+
								hclworld(M4,M11,'2',cyr));
			!Fill consumption conversion variables
			coalout_cqdbft(11,1,globalyr)		:= Sum(cyr|Map_globalyr_cyr(globalyr,cyr)and hclcon('R',cyr)>0,
								((qblk_qclrs(11,globalyr)+qblk_qclcm(11,globalyr))/hclcon('R',cyr)));
			coalout_cqdbft(11,2,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr) and hclcon('I',cyr)>0,
								qblk_qclin(11,globalyr)/
								hclcon('I',cyr));
			coalout_cqdbft(11,3,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr)and hclcon('C',cyr)>0,
								(qblk_qmcin(11,globalyr)/
								hclcon('C',cyr)));
			coalout_cqdbft(11,6,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr)and hclcon('E',cyr)>0,
								(qblk_qclel(11,globalyr)/
								hclcon('E',cyr)));
			
			!Fill minemouth price
			coalout_cpsb(3,globalyr)		:=Sum((mnumy3,cyr)|MAP_mnumy3_yr(MNUMY3,cyr)
								and Map_globalyr_cyr(globalyr,cyr),hclmmbt1(cyr)/MACOUT_MC_JPGDP(mnumy3));
			!Fill minemouth price conversion factors
			coalout_cpsbt(3,globalyr)		:=Sum((mnumy3,cyr)|MAP_mnumy3_yr(MNUMY3,cyr)
								and Map_globalyr_cyr(globalyr,cyr) and hclmmbt1(cyr),
								hclmmtn1(cyr)/hclmmbt1(cyr));
			!Fill export variables
			coalout_cqdbfb(11,5,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr),(hclexpbt(cyr)/.001));
			
			coalout_cqdbft(11,5,globalyr)		:= Sum(cyr|Map_globalyr_cyr(globalyr,cyr),
								(hclexpbt(cyr)/hclexptn(cyr)/.001));
			
			
			
			!Fill import variables
			coalout_cqdbfb(11,7,globalyr)		:=SUm(cyr|Map_globalyr_cyr(globalyr,cyr),(hclimpbt(cyr)/.001));
			
			coalout_cqdbft(11,7,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr) and hclimptn(cyr)>0,
								(hclimpbt(cyr)/hclimptn(cyr)/.001));
			!Fill delivered prices conversion factors
			coalout_cpdbft(11,1,globalyr)		:= Sum(cyr|Map_globalyr_cyr(globalyr,cyr) and hcldprbt1('R',cyr)>0,
								(hcldprtn1('R',cyr)/hcldprbt1('R',cyr)));
			coalout_cpdbft(11,2,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr) and hcldprbt1('I',cyr)>0,
								(hcldprtn1('I',cyr)/hcldprbt1('I',cyr)));
			coalout_cpdbft(11,3,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr) and hcldprbt1('C',cyr)>0,
								(hcldprtn1('C',cyr)/hcldprbt1('C',cyr)));
			coalout_cpdbft(11,5,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr) and hcldprbt1('X',cyr)>0,
								(hcldprtn1('X',cyr)/hcldprbt1('X',cyr)));
			coalout_cpdbft(11,6,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr) and hcldprbt1('E',cyr)>0,
								(hcldprtn1('E',cyr)/hcldprbt1('E',cyr)));
			!Delivered Prices
			MPBLK_pclcmtemp(11,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr),(hcldprbt1('R',cyr)/mc_jpgdp(cyr)));
			
			
			MPBLK_pclintemp(11,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr),
								(hcldprbt1('I',cyr)/mc_jpgdp(cyr)));
			
			MPBLK_pmcintemp(11,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr),
								(hcldprbt1('C',cyr)/mc_jpgdp(cyr)));
			Coalrep_pclex(11,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr),
								(hcldprbt1('X',cyr)/mc_jpgdp(cyr)));
			
			MPBLK_pcleltemp(11,globalyr)		:=Sum(cyr|Map_globalyr_cyr(globalyr,cyr),
								(hcldprbt1('E',cyr)/mc_jpgdp(cyr)));
			!adjust regional prices to average national prices overwritten above
			prclcm(globalyr)			:=if QBLK_QCLCM(11,globalyr) then
								Sum(mnumcr|mnumcr<11,MPBLK_PCLCM(mnumcr,globalyr)*QBLK_QCLCM(MNUMCR,globalyr)
								/QBLK_QCLCM(11,globalyr))
								endif;
			prclin(globalyr)			:=if QBLK_QCLIN(11,globalyr)then
								Sum(mnumcr|mnumcr<11,MPBLK_PCLIN(mnumcr,globalyr)*QBLK_QCLIN(MNUMCR,globalyr))
								/QBLK_QCLIN(11,globalyr)
								endif;
			prmcin(globalyr)			:=if QBLK_QMCIN(11,globalyr) then
								Sum(mnumcr|mnumcr<11,MPBLK_PMCIN_A(mnumcr,globalyr)*QBLK_QMCIN(MNUMCR,globalyr)
								/QBLK_QMCIN(11,globalyr))
								endif;
			prclel(globalyr)			:=if QBLK_QCLEL(11,globalyr) then
								Sum(mnumcr|mnumcr<11,MPBLK_Pclel(mnumcr,globalyr)*QBLK_Qclel(MNUMCR,globalyr)
								/QBLK_Qclel(11,globalyr))
								endif;
			mpblk_pmcin(mnumcr,globalyr)		:=if prmcin(globalyr)and mnumcr < 11 then
								MPBLK_PMCIN_A(mnumcr,globalyr)*MPBLK_PMCINtemp(11,globalyr)/
								prmcin(globalyr)
								elseif mnumcr = 11 then
								MPBLK_pmcintemp(11,globalyr)
								endif;
			MPBLK_pclcm_a(mnumcr,globalyr)		:=MPBLK_PCLCM(mnumcr,globalyr);
			mpblk_pclcm(mnumcr,globalyr)		:=if prclcm(globalyr)and mnumcr < 11 then
								MPBLK_pclcm_a(mnumcr,globalyr)*MPBLK_pclcmtemp(11,globalyr)/
								prclcm(globalyr)
								elseif mnumcr = 11 then
								MPBLK_pclcmtemp(11,globalyr)
								endif;
			MPBLK_pclin_a(mnumcr,globalyr)		:=MPBLK_PCLIN(mnumcr,globalyr);
			mpblk_pclin(mnumcr,globalyr)		:=if prclin(globalyr) and mnumcr < 11 then
								MPBLK_pclin_a(mnumcr,globalyr)*MPBLK_pclintemp(11,globalyr)/
								prclin(globalyr)
								elseif mnumcr = 11 then
								MPBLK_pclintemp(11,globalyr)
								endif;
			MPBLK_pclel_a(mnumcr,globalyr)		:=MPBLK_PCLEL(mnumcr,globalyr);
			mpblk_pclel(mnumcr,globalyr)		:=if prclel(globalyr) and mnumcr < 11 then
								MPBLK_pclel_a(mnumcr,globalyr)*MPBLK_pcleltemp(11,globalyr)/
								prclel(globalyr)
								elseif mnumcr = 11 then
								MPBLK_pcleltemp(11,globalyr)
								endif;
			
			!endfor;
			
			!not sure the items below are necessary, so I have not updated them
			
			  !COALREP_APSULF_BTU(M4,globalyr)             := COALREP_APSULF_BTU_A(M4,globalyr);
			  !COALREP_ABSULF_BTU(M4,globalyr)             := COALREP_ABSULF_BTU_A(M4,GLOBALYR);
			  !COALREP_ALSULF_BTU(M4,GLOBALYR)             := COALREP_ALSULF_BTU_A(M4,GLOBALYR);
			  !COALREP_IBSULF_BTU(M4,GLOBALYR)             := COALREP_IBSULF_BTU_A(M4,GLOBALYR);
			  !COALREP_ILSULF_BTU(M4,GLOBALYR)             := COALREP_ILSULF_BTU_A(M4,GLOBALYR);
			  !COALREP_WBSULF_BTU(M4,GLOBALYR)             := COALREP_WBSULF_BTU_A(M4,GLOBALYR);
			  !COALREP_WSSULF_BTU(M4,GLOBALYR)             := COALREP_WSSULF_BTU_A(M4,GLOBALYR);
			  !COALREP_WLSULF_BTU(M4,GLOBALYR)             := COALREP_WLSULF_BTU_A(M4,GLOBALYR);
			  !COALREP_CLSULF_BTU(M14,M4,M3,GLOBALYR)      := COALREP_CLSULF_BTU_A(M14,M4,M3,GLOBALYR);
			  !COALREP_PMTD_BTU(NSREGN,GLOBALYR)           := COALREP_PMTD_BTU_A(NSREGN,GLOBALYR);
			  !COALREP_PMTS_BTU(NSREGN,GLOBALYR)           := COALREP_PMTS_BTU_A(NSREGN,GLOBALYR);
			
			
			  !COALREP_UTCONS(NUTSEC,GLOBALYR) 		:=COALREP_UTCONS_A(NUTSEC,GLOBALYR);
			  !COALREP_UTTSO2(NUTSEC,GLOBALYR)             := COALREP_UTTSO2_A(NUTSEC,GLOBALYR)/10^6;
			  !COALREP_UCSO2(NUTSEC,GLOBALYR)             := COALREP_UCSO2_A(NUTSEC,GLOBALYR)/10^6;
			  !COALREP_ACMERC(GLOBALYR)                    := COALREP_ACMERC_A(GLOBALYR);
			
			  !COALREP_WPSULF_BTU(M4,GLOBALYR)             := COALREP_WPSULF_BTU_A(M4,GLOBALYR);
		}
	}
	Procedure EscapeVectorCheck {
		Body: {
			!If the escapevector(cyr) is ever positive we need AIMMS to save the case and stop
			
			EscapeVector(cyr) := 0;
			EscapeVector(cyr)  := Sum((SReg, Sulf, Mtyp, Rank,Subsec,DReg)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),
			EscapeRCReporting(SReg, Sulf, Mtyp, Rank,Subsec,DReg,cyr))+
			!EscapeIndReporting(Scrv,Subsec,DReg,cyr) !+
			!EscapeCokeReporting(Scrv,Subsec,DReg,cyr) +
			!EscapeLiquReporting(Scrv,Subsec,DReg,cyr)) +
			Sum((SReg, Sulf, Mtyp, Rank)|SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank),EscapeProductiveCapacity(SReg, Sulf, Mtyp, Rank,cyr));
			!+ EscapeSupplyCurveReporting(Scrv,cyr))
			!If EscapeVector(cyr) > 0 then
			!	CaseSave();
			!	MainTermination();
			!
		}
	}
	Procedure Initialize_Global {
		Body: {
			
			coalout_cqdbft(mnumcr,'1',globalyr) 		:= 0;
			coalout_cqdbft(mnumcr,'2',globalyr) 		:= 0;
			coalout_cqdbft(mnumcr,'3',globalyr) 		:= 0;
			coalout_cqdbft(mnumcr,'4',globalyr)		:= 0;
			coalout_cqdbft(mnumcr,'5',globalyr)		:= 0;
			coalout_cqdbft(mnumcr,'6',globalyr)		:= 0;
			coalout_cqdbft(mnumcr,'7',globalyr)             := 0;
			
			coalout_cpdbft(mnumcr,clsect,globalyr) 		:= 0;
			coalout_cqsbb(m3,globalyr) 			:= 0;
			coalout_cqsbb('3',globalyr) 			:= 0;
			coalout_cqsbt(m3,globalyr) 			:= 0;
			coalout_cqsbt('3',globalyr) 			:= 0;
			
			! only need sectors 5 (exports) and 7 Imports)
			coalout_cqdbfb(mnumcr,clsect,globalyr) := 0;
			coalout_liqucarb(mnumcr,globalyr) := 0;
			
			
			coalout_l_so2p(mnumpr,globalyr) := 0;
			
			
			coalout_lcvbtu(mnumpr,globalyr) := 0;
			
			
			coalout_LTRNTON(mnumpr,globalyr) := 0;
			
			
			coalout_PCLRFPD(mnumpr,globalyr) := 0;
			
			
			coalout_TOTMINERS(globalyr) := 0;
			coalout_indcokebal(globalyr) :=0;
			coalout_indsteambal(globalyr) :=0;
			coalout_eleccoalbal(globalyr) :=0;
			COALOUT_APPSTOCKS(GLOBALYR)	              :=0;  !stocks for steo years
			COALOUT_INTSTOCKS(GLOBALYR)	              :=0; !stocks for steo years
			COALOUT_WESTSTOCKS(GLOBALYR)	              :=0; !stocks for steo years
			
			
			
			
			!coalout_TTONMILE(globalyr) := 0;
			
			  COALEMM_SCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := 0;
			  COALEMM_CCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := 0;
			  COALEMM_BCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := 0;
			  COALEMM_GCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := 0;
			  COALEMM_PSLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := 0;
			  COALEMM_PHGCLNR(NDRGGN,GLOBALYR,NUTSEC)  := 0;
			  COALEMM_PCACLNR(NDRGGN,GLOBALYR,NUTSEC)  := 0;
			  COALEMM_HCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := 0;
			  COALEMM_NUM_SC(M1)                       := 0;
			  COALEMM_CMM_CL_BTUS(MX_NCI,MX_UNT)       := 0;
			  COALEMM_CMM_CONT_INDX(MX_NCI,MX_UNT)     := 0;
			  COALEMM_CMM_TRANS_INDX(MX_NCI,MX_UNT)    := 0;
			  COALEMM_CMM_SDV_INDX(MX_UNT)             := 0;
			  COALEMM_CMM_LDV_INDX(MX_UNT)             := 0;
			  COALEMM_NEW_SDV_INDX(NDRGGN)             := 0;
			  COALEMM_NEW_LDV_INDX(NDRGGN)             := 0;
			  COALEMM_CMM_CONT_PRF(MX_PRF,globalyr)    := 0;
			  COALEMM_CMM_TRANS_PRF(MX_PRF,globalyr) := 0;
			  COALEMM_CMM_SDV_PRF(MX_PRF,globalyr)   := 0;
			  COALEMM_CMM_LDV_PRF(MX_PRF,globalyr) := 0;
			
			
			
			! sum us anything with mnumcr
			  COALREP_COALPROD(MNUMCR,MNUMLR,GLOBALYR)    := 0;
			  COALREP_COALPROD2(MNUMCR,MNUMLR,GLOBALYR)   := 0;
			
			  COALREP_WC_DIST_ST(MNUMCR,MNUMLR,GLOBALYR)  := 0;
			  COALREP_WC_DIST_ST(    11,MNUMLR,GLOBALYR)  := 0;
			  COALREP_WC_PROD_ST(MNUMCR,MNUMLR,GLOBALYR)  := 0;
			  COALREP_WC_PROD_ST(    11,MNUMLR,GLOBALYR)  := 0;
			  COALREP_WC_PROD_BTU(MNUMCR,MNUMLR,GLOBALYR) := 0;
			  COALREP_WC_PROD_BTU(    11,MNUMLR,GLOBALYR) := 0;
			
			  COALREP_COALPRICE(MNUMLR,GLOBALYR)          := 0;
			
			  COALREP_ABSULF(M4,GLOBALYR)                 := 0;
			  COALREP_ALSULF(M4,GLOBALYR)                 := 0;
			  COALREP_IBSULF(M4,GLOBALYR)                 := 0;
			  COALREP_ILSULF(M4,GLOBALYR)                 := 0;
			  COALREP_WBSULF(M4,GLOBALYR)                 := 0;
			  COALREP_WSSULF(M4,GLOBALYR)                 := 0;
			  COALREP_WLSULF(M4,GLOBALYR)                 := 0;
			  COALREP_CLSULF(M14,M4,M3,GLOBALYR)          := 0;
			  COALREP_PCLSULF(M14,M4,M3,GLOBALYR)         := 0;
			  COALREP_PABSULF(M4,GLOBALYR)                := 0;
			  COALREP_PALSULF(M4,GLOBALYR)                := 0;
			  COALREP_PIBSULF(M4,GLOBALYR)                := 0;
			  COALREP_PILSULF(M4,GLOBALYR)                := 0;
			  COALREP_PWBSULF(M4,GLOBALYR)                := 0;
			  COALREP_PWSSULF(M4,GLOBALYR)                := 0;
			  COALREP_PWLSULF(M4,GLOBALYR)                := 0;
			  COALREP_APSULF_BTU(M4,GLOBALYR)             := 0;
			  COALREP_ABSULF_BTU(M4,GLOBALYR)             := 0;
			  COALREP_ALSULF_BTU(M4,GLOBALYR)             := 0;
			  COALREP_IBSULF_BTU(M4,GLOBALYR)             := 0;
			  COALREP_ILSULF_BTU(M4,GLOBALYR)             := 0;
			  COALREP_WBSULF_BTU(M4,GLOBALYR)             := 0;
			  COALREP_WSSULF_BTU(M4,GLOBALYR)             := 0;
			  COALREP_WLSULF_BTU(M4,GLOBALYR)             := 0;
			  COALREP_CLSULF_BTU(M14,M4,M3,GLOBALYR)      := 0;
			  COALREP_PMTD(NSREGN,GLOBALYR)               := 0;
			  COALREP_PMTS(NSREGN,GLOBALYR)               := 0;
			  COALREP_PMTD_BTU(NSREGN,GLOBALYR)           := 0;
			  COALREP_PMTS_BTU(NSREGN,GLOBALYR)           := 0;
			  COALREP_PMTDP(NSREGN,GLOBALYR)              := 0;
			  COALREP_PMTSP(NSREGN,GLOBALYR)              := 0;
			  COALREP_APSULF(M4,GLOBALYR)             := 0;
			  COALREP_PAPSULF(M4,GLOBALYR)            := 0;
			  COALREP_UTCONS(NUTSEC,GLOBALYR) 		:=0;
			  COALREP_UTTSO2(NUTSEC,GLOBALYR)             	:= 0;
			  COALREP_UCSO2(NUTSEC,GLOBALYR)             	:= 0;
			  EMISSION_EMELPSO2(globalyr,MX_SO2)  		:= 0;
			  COALREP_ACMERC(GLOBALYR)                   	 := 0;
			  COALREP_WPSULF(M4,GLOBALYR)                 	:= 0;
			  COALREP_PWPSULF(M4,GLOBALYR)                	:= 0;
			  COALREP_WPSULF_BTU(M4,GLOBALYR)             	:= 0;
			  COALREP_CLIMPRANK(M5,MNUMYR)			:= 0;
			  COALREP_CLEXPRANK(M5,MNUMYR)			:= 0;
			  USO2GRP_XCL_QECP(MX_NCL,ECPFPH,GLOBALYR)         := 0;
			  USO2GRP_XCL_PECP(MX_NCL,M11,ECPFPH,GLOBALYR)     := 0;
			  USO2GRP_XCL_STEPS(M11)                           := 0;
			  USO2GRP_XCL_OTHER(MX_NCI,GLOBALYR)               := 0;
			  USO2GRP_XCL_TRATE(MX_NCL,GLOBALYR)               := 0;
			  USO2GRP_XCL_IMPORT(NDREGN,GLOBALYR)              := 0;
			  !USO2GRP_XCL_STOCK(GLOBALYR)                      := USO2GRP_XCL_STOCK_A(GLOBALYR);
			  USO2GRP_XCL_SO2(MX_NCI)                          := 0;
			  USO2GRP_XCL_HG(MX_NCI)                           := 0;
			  USO2GRP_XCL_CAR(MX_NCI)                          := 0;
			  USO2GRP_XCL_TYPE(MX_NCI)                         := 0;
			  USO2GRP_XCL_CAR_YR(MX_NCI,GLOBALYR)		:= 0;
			  USO2GRP_XCL_HG_YR(MX_NCI,GLOBALYR)		:= 0;
			  USO2GRP_XCL_SO2_YR(MX_NCI,GLOBALYR)		:= 0;
			  USO2GRP_ECP_PECP(MX_NCL,ECPXPH,GLOBALYR)         := 0;
			  USO2GRP_XCL_TRAT1(MX_NCL,NDREGN)                 := 0;
			  USO2GRP_XCL_TR_T1(MX_NCL,NDREGN,GLOBALYR)        := 0;
			  USO2GRP_XCL_TR_T2(MX_NCL,NDREGN,GLOBALYR)        := 0;
			  USO2GRP_XCL_PCAP(MX_NCL,GLOBALYR)                := 0;
			  USO2GRP_XCL_PCAP_LIMIT(MX_NCL,GLOBALYR)          := 0;
			  USO2GRP_XCL_MAX_INCR(MX_NCL,GLOBALYR)          := 0;
			  USO2GRP_XCL_MX_PCAP(MX_NCL)                      := 0;
			  USO2GRP_XCL_BTU(MX_NCI)                          := 0;
			  USO2GRP_XCL_PLIM(MX_NCL,GLOBALYR)                := 0;
			  USO2GRP_XCL_1TESC(MX_NCL,ECPFPH,GLOBALYR,NDREGN) := 0;
			  USO2GRP_XCL_2TESC(MX_NCL,ECPFPH,GLOBALYR,NDREGN) := 0;
			  USO2GRP_EFD_PROD(MX_NCL)                         := 0;
			  USO2GRP_EFD_TIER1(MX_NCL,NDREGN,NUTSEC)          := 0;
			  USO2GRP_EFD_TIER1_LIM(MX_NCL,NDREGN,NUTSEC,MNUMYR)   := 0;
			  USO2GRP_EFD_CONT(MX_NCI,NDREGN,M2,GLOBALYR)      := 0;
			  USO2GRP_EFD_DVSB(NDREGN,NUTSEC)                  := 0;
			  USO2GRP_EFD_SB_DVLIM(NDREGN,NUTSEC,MNUMYR)	   := 0;  
			  USO2GRP_EFD_DVLG(NDREGN,NUTSEC)                  := 0;
			  USO2GRP_EFD_LG_DVLIM(NDREGN,NUTSEC,MNUMYR)	   := 0;
			  USO2GRP_EFD_SC_DR_PT(MX_NCI,NDREGN,NUTSEC)       := 0;
			  USO2GRP_EFD_RANK(MX_NCI)                         := 0;
			  USO2GRP_CTLBTU(MX_NCL,NDREGN,GLOBALYR)           := 0;
			  USO2GRP_XCL_PIMP(MX_ISC,MX_IST,GLOBALYR)         := 0;
			  USO2GRP_XCL_QIMP(MX_ISC,MX_IST,GLOBALYR)         := 0;
			  USO2GRP_XCL_TR_IN(M4,MX_ISC,NDREGN,globalyr)	:=0;
			  USO2GRP_XCL_TRATI2(M4,MX_ISC,NDREGN)		:=0;
			  USO2GRP_XCL_TESCI(M4,globalyr,NDREGN)		:=0;
			  COALREP_WSCF(M4,M11,globalyr)	                   := 0;
			  COALREP_WSCF(M4,'11',globalyr)	           := 0;
			  COALREP_WMCF(M4,M11,globalyr)	                   := 0;
			  COALREP_WMCF(M4,'11',globalyr)	           := 0;
			  COALREP_WTCF(M4,M11,globalyr)	                   := 0;
			  COALREP_WTCF(M4,'11',globalyr)	           := 0;
			  Coalrep_pclex(mnumcr,globalyr)	 	   := 0;
			  Coalrep_pclex('11',globalyr)	 	           := 0;
			  emission_tot_merc(globalyr)			   := 0;
			  COALPRC_PCLELCDR(M2,NDRGGN,globalyr)		   := 0;
		}
	}
	Procedure Copy_Global {
		Body: {
			
			COALOUT_CQDBFT(mnumcr,'1',globalyr) 		:= Sum(cyr|Map_globalyr_cyr(globalyr,cyr),
									(QBLK_QCLRS(MNUMCR,globalyr) + QBLK_QCLCM(MNUMCR,globalyr))/$ResidTranspTonsCR(MNUMCR,cyr));
			cqdbft_a(mnumcr,'2',globalyr) 			:= Sum (cyr|Map_globalyr_cyr(globalyr,cyr),
									(IndTranspTrillsCR(MNUMCR,cyr)+ImportsIndustrialCR(MNUMCR,cyr))
									/$(IndTranspTonsCR(MNUMCR,cyr)+ImportsIndustrialTonsCR(MNUMCR,cyr)));
			!IndustHeatAdjust(globalyr)			:= Sum(steoyr|Map_globalyr_steoyr(globalyr,steoyr) and SteoFlagI(steoyr),IndustrialTonsResult(steoyr)/$IndustrialTonsSTEO(steoyr));
			COALOUT_CQDBFT(mnumcr,'2',globalyr) 			:= if  IndustHeatAdjust(globalyr) then
										cqdbft_a(mnumcr,'2',globalyr)*IndustHeatAdjust(globalyr)
										else
										cqdbft_a(mnumcr,'2',globalyr)
										endif;
			COALOUT_INDSTEAMBAL(globalyr)			:=Sum(steoyr|Map_globalyr_steoyr(globalyr,steoyr)and SteoFlagI(steoyr),
								CokeStocksTons(steoyr)*coalout_cqdbft('11','2',globalyr));
			
			cqdbft_a(mnumcr,'3',globalyr) 		:= Sum (cyr|Map_globalyr_cyr(globalyr,cyr),
									qblk_qmcin(mnumcr,globalyr)/$(CokeTranspTonsCR(MNUMCR,cyr) + ImportsCokingTonsCR(MNUMCR,cyr)));
			
			!CokeHeatAdjust(globalyr)			:= Sum(steoyr|Map_globalyr_steoyr(globalyr,steoyr) and SteoFlagC(steoyr),CokeTonsResult(steoyr)/$CokeTonsSTEO(steoyr));
			COALOUT_CQDBFT(mnumcr,'3',globalyr) 			:= if  CokeHeatAdjust(globalyr) then
										cqdbft_a(mnumcr,'3',globalyr)*CokeHeatAdjust(globalyr)
										else
										cqdbft_a(mnumcr,'3',globalyr)
										endif;
			COALOUT_INDCOKEBAL(globalyr)			:=Sum(steoyr|Map_globalyr_steoyr(globalyr,steoyr)and SteoFlagC(steoyr),
								CokeStocksTons(steoyr)*coalout_cqdbft('11','3',globalyr));
			COALOUT_eleccoalbal(globalyr) 			:=0;  !not currently using
			COALOUT_CQDBFT(mnumcr,'4',globalyr)		:= Sum (cyr|Map_globalyr_cyr(globalyr,cyr), ! exports, only populating w/ history
									LiquidsTranspTrillsCR(MNUMCR,cyr)/$LiquidsTranspTonsCR(MNUMCR,cyr));
			COALOUT_CQDBFT(mnumcr,'5',globalyr)		:= Sum (cyr|Map_globalyr_cyr(globalyr,cyr),
									ExportsTranspTrillsCR3(mnumcr,cyr)/$ExportsTranspTonsCR3(mnumcr,cyr));
			COALOUT_CQDBFT(mnumcr,'6',globalyr)		:= Sum (cyr|Map_globalyr_cyr(globalyr,cyr),   !need to revisit this
									ElectrTranspTrillsCR(MNUMCR,cyr)/$(ElectrTranspTonsCR(MNUMCR,cyr) + ImportsElectricityTonsCR(MNUMCR,cyr)));
			COALOUT_CQDBFT(mnumcr,'7',globalyr)             := Sum (cyr|Map_globalyr_cyr(globalyr,cyr),
			                                                (ImportsElectricityCR(mnumcr,cyr)+
			 						 ImportsIndustrialCR(mnumcr,cyr)+
									 ImportsCokingCR(mnumcr,cyr)) /$
			  						(ImportsElectricityTonsCR(mnumcr,cyr)+
									 ImportsIndustrialTonsCR(mnumcr,cyr)+
			   						 ImportsCokingTonsCR(mnumcr,cyr)));
			
			COALOUT_CPDBFT(mnumcr,clsect,globalyr) 		:= COALOUT_CQDBFT(mnumcr,clsect,globalyr);
			COALOUT_CQSBB(m3,globalyr) 			:=COALOUT_CQSBB_A(m3,globalyr);
			COALOUT_CQSBB('3',globalyr) 			:=COALOUT_CQSBB_B(globalyr);
			COALOUT_CQSBT(m3,globalyr) 			:=COALOUT_CQSBT_A(m3,globalyr);
			COALOUT_CQSBT('3',globalyr) 			:=COALOUT_CQSBT_B(globalyr);
			COALOUT_CPSB(M3,globalyr)	                :=if m3 < 3 then
									  COALOUT_CPSB_A(M3,globalyr)
									  else
									  COALOUT_CPSB_B(globalyr)
									  endif;
			COALOUT_CPSBT(M3,globalyr)			:= COALOUT_CPSBT_A(M3,globalyr);
			
			! only need sectors 5 (exports) and 7 Imports)
			COALOUT_CQDBFB(mnumcr,clsect,globalyr) := Sum(cyr,
								!if clsect = 1 and cyr=globalyr+1989 then
								!(QBLK_QCLRS(MNUMCR,globalyr) + QBLK_QCLCM(MNUMCR,globalyr))/$ResidTranspTonsCR(MNUMCR,cyr)
								if clsect = 2 and Map_globalyr_cyr(globalyr,cyr) then
								ImportsIndustrialCR(mnumcr,cyr)
								elseif clsect = 3 and Map_globalyr_cyr(globalyr,cyr) then
								ImportsCokingCR(mnumcr,cyr)
								!elseif clsect = 4 and cyr=globalyr+1989 then ! exports, only populating w/ history
								!LiquidsTranspTrillsCR(MNUMCR,cyr)/$LiquidsTranspTonsCR(MNUMCR,cyr)
								elseif clsect = 5 and Map_globalyr_cyr(globalyr,cyr) then
								ExportsTranspTrillsCR3(mnumcr,cyr)
								elseif clsect = 6 and Map_globalyr_cyr(globalyr,cyr) then  !need to revisit this
								ImportsElectricityCR(mnumcr,cyr) + AnnualStocks(mnumcr,cyr)
								!dAN SAYS NEED TO PUT SOME VALUES TO SECT 6 DENOMINATOR
								elseif clsect = 7 then !imports
			                                        ImportsElectricityCR(mnumcr,cyr)+ImportsIndustrialCR(mnumcr,cyr)+ImportsCokingCR(mnumcr,cyr)
								else
								0
								endif);
			COALOUT_LIQUCARB(mnumcr,globalyr) :=  COALOUT_LIQUCARB_A(mnumcr,globalyr);
			
			
			COALOUT_L_SO2P(mnumpr,globalyr)   :=  COALOUT_L_SO2P_A(mnumpr,globalyr);
			
			
			COALOUT_LCVBTU(mnumpr,globalyr)   :=  COALOUT_LCVBTU_A(mnumpr,globalyr);
			
			
			COALOUT_LTRNTON(mnumpr,globalyr)  :=  COALOUT_LTRNTON_A(mnumpr,globalyr);
			
			
			COALOUT_PCLRFPD(mnumpr,globalyr)  :=  COALOUT_PCLRFPD_A(mnumpr,globalyr);
			
			
			COALOUT_TOTMINERS(globalyr) := COALOUT_TOTMINERS_A(globalyr);
			COALOUT_TTONMILE(globalyr)  := COALOUT_TTONMILE_A(globalyr);
			
			  COALEMM_SCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := COALEMM_SCLCLNR_A(NDRGGN,GLOBALYR,NUTSEC);
			  COALEMM_CCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := COALEMM_CCLCLNR_A(NDRGGN,GLOBALYR,NUTSEC)*12.0/44.0/2.204623;
			  COALEMM_BCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := COALEMM_BCLCLNR_A(NDRGGN,GLOBALYR,NUTSEC);
			  COALEMM_GCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := COALEMM_GCLCLNR_A(NDRGGN,GLOBALYR,NUTSEC);
			  COALEMM_PSLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := COALEMM_PSLCLNR_A(NDRGGN,GLOBALYR,NUTSEC);
			  COALEMM_PHGCLNR(NDRGGN,GLOBALYR,NUTSEC)  := COALEMM_PHGCLNR_A(NDRGGN,GLOBALYR,NUTSEC);
			  COALEMM_PCACLNR(NDRGGN,GLOBALYR,NUTSEC)  := COALEMM_PCACLNR_A(NDRGGN,GLOBALYR,NUTSEC);
			  COALEMM_HCLCLNR(NDRGGN,GLOBALYR,NUTSEC)  := COALEMM_HCLCLNR_A(NDRGGN,GLOBALYR,NUTSEC);
			  COALEMM_NUM_SC(M1)                       := COALEMM_NUM_SC_A(M1) ;
			  COALEMM_CMM_CL_BTUS(MX_NCI,MX_UNT)       := SUM((GLOBALYR), COALEMM_CMM_CL_BTUS_Alt2(MX_NCI,MX_UNT,GLOBALYR));  ! new logic contracts May 2022
			  COALEMM_CMM_CONT_INDX(MX_NCI,MX_UNT)     := COALEMM_CMM_CONT_INDX_Alt(MX_NCI,MX_UNT);  ! new logic contracts May 2022
			  COALEMM_CMM_TRANS_INDX(MX_NCI,MX_UNT)    := COALEMM_CMM_TRANS_INDX_Alt(MX_NCI,MX_UNT);
			  COALEMM_CMM_SDV_INDX(MX_UNT)             := COALEMM_CMM_SDV_INDX_A(MX_UNT);
			  COALEMM_CMM_LDV_INDX(MX_UNT)             := COALEMM_CMM_LDV_INDX_A(MX_UNT);
			  COALEMM_NEW_SDV_INDX(NDRGGN)             := COALEMM_NEW_SDV_INDX_A(NDRGGN);
			  COALEMM_NEW_LDV_INDX(NDRGGN)             := COALEMM_NEW_LDV_INDX_A(NDRGGN);
			  COALEMM_CMM_CONT_PRF(MX_PRF,globalyr)    := COALEMM_CMM_CONT_PRF_A(MX_PRF,globalyr);
			  COALEMM_CMM_TRANS_PRF(MX_PRF,globalyr) := COALEMM_CMM_TRANS_PRF_A(MX_PRF,globalyr);
			  COALEMM_CMM_SDV_PRF(MX_PRF,globalyr)   := COALEMM_CMM_SDV_PRF_A(MX_PRF,globalyr);
			  COALEMM_CMM_LDV_PRF(MX_PRF,globalyr) := COALEMM_CMM_LDV_PRF_A(MX_PRF,globalyr);
			
			
			
			! sum us anything with mnumcr
			  COALREP_COALPROD(MNUMCR,MNUMLR,GLOBALYR)    :=COALREP_COALPROD_B(MNUMCR,MNUMLR,GLOBALYR);    !exclude exports and waste coal
			  COALREP_COALPROD(      11,MNUMLR,GLOBALYR)  :=sum[mnumcr|mnumcr<10,COALREP_COALPROD(MNUMCR,MNUMLR,GLOBALYR)];
			  COALOUT_APPSTOCKS(GLOBALYR)	              :=AppalachiaStocksGlobalyr(globalyr);  !stocks for steo years
			  COALOUT_INTSTOCKS(GLOBALYR)	              :=InteriorStocksGlobalyr(globalyr); !stocks for steo years
			  COALOUT_WESTSTOCKS(GLOBALYR)	              :=WestStocksGlobalyr(globalyr); !stocks for steo years
			  COALREP_COALPROD2(MNUMCR,MNUMLR,GLOBALYR)   := COALREP_COALPROD2_B(MNUMCR,MNUMLR,GLOBALYR);  !include exports and excludes waste coal
			  COALREP_COALPROD2(     11,MNUMLR,GLOBALYR)  :=sum[mnumcr|mnumcr<10,COALREP_COALPROD2(MNUMCR,MNUMLR,GLOBALYR)];
			  COALREP_WC_DIST_ST(MNUMCR,MNUMLR,GLOBALYR)  :=                      COALREP_WC_DIST_ST_A(MNUMCR,MNUMLR,GLOBALYR);
			  COALREP_WC_DIST_ST(    11,MNUMLR,GLOBALYR)  := sum[mnumcr|mnumcr<10,COALREP_WC_DIST_ST_A(MNUMCR,MNUMLR,GLOBALYR)];
			  COALREP_WC_PROD_ST(MNUMCR,MNUMLR,GLOBALYR)  :=                      COALREP_WC_PROD_ST_A(MNUMCR,MNUMLR,GLOBALYR);
			  COALREP_WC_PROD_ST(    11,MNUMLR,GLOBALYR)  := sum[mnumcr|mnumcr<10,COALREP_WC_PROD_ST_A(MNUMCR,MNUMLR,GLOBALYR)];
			  COALREP_WC_PROD_BTU(MNUMCR,MNUMLR,GLOBALYR) :=                      COALREP_WC_PROD_BTU_A(MNUMCR,MNUMLR,GLOBALYR);
			  COALREP_WC_PROD_BTU(    11,MNUMLR,GLOBALYR) := sum[mnumcr|mnumcr<10,COALREP_WC_PROD_BTU_A(MNUMCR,MNUMLR,GLOBALYR)];
			
			  COALREP_COALPRICE(MNUMLR,GLOBALYR)          := COALREP_COALPRICE_A(MNUMLR,GLOBALYR) ;
			  COALREP_CLEXPRANK(M4,GLOBALYR)		:= COALREP_CLEXPRANK_A(M4,GLOBALYR);
			  COALREP_CLIMPRANK(M4,GLOBALYR)		:= COALREP_CLIMPRANK_A(M4,GLOBALYR);
			  COALREP_ABSULF(M4,GLOBALYR)                 := COALREP_ABSULF_A(M4,GLOBALYR);
			  COALREP_ALSULF(M4,GLOBALYR)                 := COALREP_ALSULF_A(M4,GLOBALYR);
			  COALREP_IBSULF(M4,GLOBALYR)                 := COALREP_IBSULF_A(M4,GLOBALYR);
			  COALREP_ILSULF(M4,GLOBALYR)                 := COALREP_ILSULF_A(M4,GLOBALYR);
			  COALREP_WBSULF(M4,GLOBALYR)                 := COALREP_WBSULF_A(M4,GLOBALYR);
			  COALREP_WSSULF(M4,GLOBALYR)                 := COALREP_WSSULF_A(M4,GLOBALYR);
			  COALREP_WLSULF(M4,GLOBALYR)                 := COALREP_WLSULF_A(M4,GLOBALYR);
			  COALREP_CLSULF(M14,M4,M3,GLOBALYR)          :=  COALREP_CLSULF_A(M14,M4,M3,GLOBALYR);
			  COALREP_PCLSULF(M14,M4,M3,GLOBALYR)         := COALREP_PCLSULF_A(M14,M4,M3,GLOBALYR);
			
			  COALREP_PALSULF(M4,GLOBALYR)                := COALREP_PALSULF_A(M4,GLOBALYR);
			
			  COALREP_PABSULF(M4,GLOBALYR)                := ProductionDollars_ABSULF_A(M4,globalyr);
			  COALREP_PIBSULF(M4,GLOBALYR)                := ProductionDollars_IBSULF_A(M4,globalyr);
			  COALREP_PILSULF(M4,GLOBALYR)                := ProductionDollars_ILSULF_A(M4,globalyr);
			  COALREP_PWBSULF(M4,GLOBALYR)                := ProductionDollars_WBSULF(M4,globalyr);
			  COALREP_PWSSULF(M4,GLOBALYR)                := ProductionDollars_WSSULF_A(M4,globalyr);
			  COALREP_PWLSULF(M4,GLOBALYR)                := ProductionDollars_WLSULF_A(M4,globalyr);
			  COALREP_PWPSULF(M4,GLOBALYR)                := ProductionDollars_WPSULF_A(M4,globalyr);
			  COALREP_PAPSULF(M4,GLOBALYR)                := ProductionDollars_PAPSULF_A(M4,GLOBALYR);
			  COALREP_PMTDP(NSREGN,GLOBALYR)              := ProductionDollars_PMTDP(NSREGN,globalyr);
			  COALREP_PMTSP(NSREGN,GLOBALYR)              := ProductionDollars_PMTDS(NSREGN,globalyr);
			
			
			
			  COALREP_APSULF_BTU(M4,GLOBALYR)             := COALREP_APSULF_BTU_A(M4,GLOBALYR);
			  COALREP_ABSULF_BTU(M4,GLOBALYR)             := COALREP_ABSULF_BTU_A(M4,GLOBALYR);
			  COALREP_ALSULF_BTU(M4,GLOBALYR)             := COALREP_ALSULF_BTU_A(M4,GLOBALYR);
			  COALREP_IBSULF_BTU(M4,GLOBALYR)             := COALREP_IBSULF_BTU_A(M4,GLOBALYR);
			  COALREP_ILSULF_BTU(M4,GLOBALYR)             := COALREP_ILSULF_BTU_A(M4,GLOBALYR);
			  COALREP_WBSULF_BTU(M4,GLOBALYR)             := COALREP_WBSULF_BTU_A(M4,GLOBALYR);
			  COALREP_WSSULF_BTU(M4,GLOBALYR)             := COALREP_WSSULF_BTU_A(M4,GLOBALYR);
			  COALREP_WLSULF_BTU(M4,GLOBALYR)             := COALREP_WLSULF_BTU_A(M4,GLOBALYR);
			  COALREP_CLSULF_BTU(M14,M4,M3,GLOBALYR)      := COALREP_CLSULF_BTU_A(M14,M4,M3,GLOBALYR);
			  COALREP_PMTD(NSREGN,GLOBALYR)               := COALREP_PMTD_A(NSREGN,GLOBALYR);
			  COALREP_PMTS(NSREGN,GLOBALYR)               := COALREP_PMTS_A(NSREGN,GLOBALYR);
			  COALREP_PMTD_BTU(NSREGN,GLOBALYR)           := COALREP_PMTD_BTU_A(NSREGN,GLOBALYR);
			  COALREP_PMTS_BTU(NSREGN,GLOBALYR)           := COALREP_PMTS_BTU_A(NSREGN,GLOBALYR);
			
			  COALREP_APSULF(M4,GLOBALYR)                 := COALREP_APSULF_A(M4,GLOBALYR);
			
			  COALREP_UTCONS(NUTSEC,GLOBALYR)             :=COALREP_UTCONS_A(NUTSEC,GLOBALYR);
			  COALREP_UTTSO2(NUTSEC,GLOBALYR)             := COALREP_UTTSO2_A(NUTSEC,GLOBALYR);
			  COALREP_UCSO2(NUTSEC,GLOBALYR)              := COALREP_UCSO2_A(NUTSEC,GLOBALYR);
			  COALREP_UCMERC(NUTSEC,GLOBALYR)             := COALREP_UCMERC_A(NUTSEC,GLOBALYR);
			  !Sum((nUS,pt2,usi,DReg,nsteps)|USDRegImportMapping(USi,DReg)=-1 and nsteps <3,
			  !InternationalSO2unit(nUS,'1')*Ashsulf('1B')*(1-rclclnr(pt2))*so2_shr_by_clreg(DReg,mx_so2)*
			  !ImportsElectricity(nsteps,NUS,usi,DReg,pt2,cyr))
			
			  COALREP_TSPMBTU(GLOBALYR)                    := COALREP_TSPMBTU_A(GLOBALYR);
			  COALREP_ACMERC(GLOBALYR)                    := COALREP_ACMERC_A(GLOBALYR);
			  EMISSION_EMELPSO2(globalyr,MX_SO2)  	      := EMISSION_EMELPSO2_A(globalyr,MX_SO2);
			  COALREP_WPSULF(M4,GLOBALYR)                 := COALREP_WPSULF_A(M4,GLOBALYR);
			
			  COALREP_WPSULF_BTU(M4,GLOBALYR)             := COALREP_WPSULF_BTU_A(M4,GLOBALYR);
			  USO2GRP_XCL_QECP(MX_NCL,ECPFPH,GLOBALYR)    := USO2GRP_XCL_QECP_A(MX_NCL,ECPFPH,GLOBALYR)           ;
			  USO2GRP_XCL_PECP(MX_NCL,M11,ECPFPH,GLOBALYR)     := USO2GRP_XCL_PECP_A(globalyr,MX_NCL,M11,ECPFPH);
			  USO2GRP_CTL_OTHER(MX_NCL,GLOBALYR)		   := USO2GRP_CTL_OTHER_A(MX_NCL,globalyr);
			  USO2GRP_XCL_STEPS(M11)                           := USO2GRP_XCL_STEPS_A(M11);
			  USO2GRP_XCL_OTHER(MX_NCI,GLOBALYR)               := USO2GRP_XCL_OTHER_A(MX_NCI,GLOBALYR);
			  USO2GRP_XCL_TRATE(MX_NCL,NDREGN)               :=  USO2GRP_XCL_TRATE_B(MX_NCL,NDREGN);
			  USO2GRP_XCL_IMPORT(NDREGN,GLOBALYR)              := USO2GRP_XCL_IMPORT_A(NDREGN,GLOBALYR);
			  USO2GRP_XCL_STOCK(GLOBALYR)                      := USO2GRP_XCL_STOCK_A(GLOBALYR);
			  USO2GRP_XCL_SO2(MX_NCI)                          := USO2GRP_XCL_SO2_A(MX_NCI);
			  USO2GRP_XCL_SO2_YR(MX_NCI,GLOBALYR)              := USO2GRP_XCL_SO2_YR_A(MX_NCI,GLOBALYR);
			  USO2GRP_XCL_HG(MX_NCI)                           := USO2GRP_XCL_HG_A(MX_NCI);
			  USO2GRP_XCL_HG_YR(MX_NCI,GLOBALYR)              := USO2GRP_XCL_HG_YR_A(MX_NCI,GLOBALYR);
			  USO2GRP_XCL_CAR(MX_NCI)                          := USO2GRP_XCL_CAR_A(MX_NCI);
			  USO2GRP_XCL_CAR_YR(MX_NCI,GLOBALYR)              := USO2GRP_XCL_CAR_YR_A(MX_NCI,GLOBALYR);
			  USO2GRP_XCL_TYPE(MX_NCI)                         := USO2GRP_XCL_TYPE_A(MX_NCI);
			  USO2GRP_ECP_PECP(MX_NCL,ECPXPH,GLOBALYR)         := if USO2GRP_ECP_PECP_A(MX_NCL,ECPXPH,GLOBALYR) < 900 then
			                                                      USO2GRP_ECP_PECP_A(MX_NCL,ECPXPH,GLOBALYR)
			                                                      else
			                                                      BY_MMP_ecp_pecp_fallback(MX_NCL,ECPXPH)
			                                                      endif;
			  USO2GRP_XCL_TRAT1(MX_NCL,NDREGN)                 := USO2GRP_XCL_TRAT1_B(MX_NCL,NDREGN);
			  USO2GRP_XCL_TR_T1(MX_NCL,NDREGN,GLOBALYR)        := USO2GRP_XCL_TR_T1_B(MX_NCL,NDREGN,GLOBALYR);
			  USO2GRP_XCL_TR_T2(MX_NCL,NDREGN,GLOBALYR)        := USO2GRP_XCL_TR_T2_B(MX_NCL,NDREGN,GLOBALYR);
			  USO2GRP_XCL_PCAP(MX_NCL,GLOBALYR)                := USO2GRP_XCL_PCAP_A(MX_NCL,GLOBALYR);
			  USO2GRP_XCL_PCAP_LIMIT(MX_NCL,GLOBALYR)          := USO2GRP_XCL_PCAP_LIMIT_A(MX_NCL,GLOBALYR);
			  USO2GRP_XCL_MAX_INCR(MX_NCL,GLOBALYR)            := USO2GRP_XCL_MAX_INCR_A(MX_NCL,GLOBALYR);
			  USO2GRP_XCL_MX_PCAP(MX_NCL)                      := USO2GRP_XCL_MX_PCAP_A(MX_NCL);
			  USO2GRP_XCL_BTU(MX_NCI)                          := USO2GRP_XCL_BTU_A(MX_NCI);
			  USO2GRP_XCL_PLIM(MX_NCL,GLOBALYR)                := USO2GRP_XCL_PLIM_A(MX_NCL,GLOBALYR);
			  !AIMMS only copies the ecpfph =1 and the main.f does the rest of the work copying it to the other time slots
			  USO2GRP_XCL_1TESC(MX_NCL,'1',GLOBALYR,NDREGN) := USO2GRP_XCL_1TESC_A(MX_NCL,'1',GLOBALYR,NDREGN);
			  USO2GRP_XCL_2TESC(MX_NCL,'1',GLOBALYR,NDREGN) := USO2GRP_XCL_2TESC_A(MX_NCL,'1',GLOBALYR,NDREGN);
			  !USO2GRP_XCL_1TESC(MX_NCL,ECPFPH,MNUMYR,NDREGN) := Sum(yr|mnumyr=yr-1989 and yr > Cpsbaseyr - 1 and (globalyr-mnumyr+1) > 0 and (globalyr-mnumyr+1)=ecpfph and USO2GRP_XCL_1TESC_A1(MX_NCL,ECPFPH,YR,NDREGN),USO2GRP_XCL_1TESC_A1(MX_NCL,ECPFPH,YR,NDREGN));
			  !USO2GRP_XCL_2TESC(MX_NCL,ECPFPH,MNUMYR,NDREGN) := Sum(yr|mnumyr=yr-1989 and USO2GRP_XCL_2TESC_A1(MX_NCL,ECPFPH,YR,NDREGN),USO2GRP_XCL_2TESC_A1(MX_NCL,ECPFPH,YR,NDREGN));
			
			  USO2GRP_EFD_PROD(MX_NCL)                         := USO2GRP_EFD_PROD_A(MX_NCL);
			  USO2GRP_CL_CRV_PROD(MX_NCL,GLOBALYR)		   := USO2GRP_XCL_PCAP_A(MX_NCL,GLOBALYR);  !new variable for EFD by year
			  USO2GRP_EFD_TIER1(MX_NCL,NDREGN,NUTSEC)          := USO2GRP_EFD_TIER1_A(MX_NCL,NDREGN,NUTSEC);
			  USO2GRP_EFD_TIER1_LIM(MX_NCL,NDREGN,NUTSEC,GLOBALYR)  := USO2GRP_EFD_TIER1_LIM_A(MX_NCL,NDREGN,NUTSEC,GLOBALYR);
			  USO2GRP_EFD_CONT(MX_NCI,NDREGN,M2,GLOBALYR)      := USO2GRP_EFD_CONT_A(MX_NCI,NDREGN,M2,GLOBALYR);
			 ! Changed  diversity logic April 2022 DAF
			 ! USO2GRP_EFD_DVSB(NDREGN,NUTSEC)                  := USO2GRP_EFD_DVSB_A(NDREGN,NUTSEC);
			 ! USO2GRP_EFD_SB_DVLIM(NDREGN,NUTSEC,GLOBALYR)	   := USO2GRP_EFD_DVSB_YR_A(NDREGN,NUTSEC,GLOBALYR);
			  USO2GRP_EFD_SB_DVLIM(NDREGN,NUTSEC,GLOBALYR)	   := EMM_max_SubBitBtus(NDREGN,NUTSEC,GLOBALYR);
			 ! USO2GRP_EFD_DVLG(NDREGN,NUTSEC)                  := USO2GRP_EFD_DVLG_A(NDREGN,NUTSEC);
			 ! USO2GRP_EFD_LG_DVLIM(NDREGN,NUTSEC,GLOBALYR)	   := USO2GRP_EFD_DVLG_YR_A(NDREGN,NUTSEC,GLOBALYR);
			  USO2GRP_EFD_LG_DVLIM(NDREGN,NUTSEC,GLOBALYR)	   := EMM_max_LigBtus(NDREGN,NUTSEC,GLOBALYR);
			  USO2GRP_EFD_SC_DR_PT(MX_NCI,NDREGN,NUTSEC)       := USO2GRP_EFD_SC_DR_PT_A(MX_NCI,NDREGN,NUTSEC);
			  USO2GRP_EFD_RANK(MX_NCI)                         := USO2GRP_EFD_RANK_A(MX_NCI);
			  USO2GRP_CTLBTU(MX_NCL,NDREGN,GLOBALYR)           := USO2GRP_CTLBTU_A(MX_NCL,NDREGN,GLOBALYR);
			  USO2GRP_CTL_CLDR(NDREGN)                         := USO2GRP_CTL_CLDR_A(NDREGN);
			  USO2GRP_CTL_TRATE(MX_NCL,NDREGN)                 := USO2GRP_CTL_TRATE_A(MX_NCL,NDREGN);
			  USO2GRP_XCL_PIMP(MX_ISC,MX_IST,GLOBALYR)         := USO2GRP_XCL_PIMP_A(MX_ISC,MX_IST,GLOBALYR);
			  USO2GRP_XCL_QIMP(MX_ISC,MX_IST,GLOBALYR)         := USO2GRP_XCL_QIMP_A(MX_ISC,MX_IST,GLOBALYR);
			! Add some additional parameters to pass to restart file  April 2022 DAF
			  USO2GRP_XCL_TR_IN_A(M4,MX_ISC,NDREGN,globalyr)    := USO2GRP_XCL_TR_IN_C(M4,MX_ISC,NDREGN);
			  USO2GRP_XCL_TR_IN(M4,MX_ISC,NDREGN,globalyr)	   := USO2GRP_XCL_TR_IN_A(M4,MX_ISC,NDREGN,globalyr);
			  USO2GRP_XCL_TESCI(M4,globalyr,NDREGN) 	   := USO2GRP_XCL_TESCI_A(M4,globalyr,NDREGN);	   
			  USO2GRP_XCL_TRATI2(M4,MX_ISC,NDREGN)		   := sum((globalyr),USO2GRP_XCL_TRATI2_A(M4,MX_ISC,NDREGN,globalyr));
			
			  COALREP_WSCF(M4,M11,globalyr)	                   := COALREP_WSCF_A(M4,M11,globalyr);
			  COALREP_WSCF(M4,'11',globalyr)	           := Sum(M11|M11<11,COALREP_WSCF_A(M4,M11,globalyr));
			  COALREP_WSCF('4',M11,globalyr)	           := COALREP_WSCF_A('1',M11,globalyr) + COALREP_WSCF_A('2',M11,globalyr)
										+COALREP_WSCF_A('3',M11,globalyr);
			  COALREP_WSCF('4','11',globalyr)	           := Sum(M11|M11<11,COALREP_WSCF('4',M11,globalyr));
			  COALREP_WMCF(M4,M11,globalyr)	                   := COALREP_WMCF_A(M4,M11,globalyr);
			  COALREP_WMCF(M4,'11',globalyr)	           := Sum(M11|M11<11,COALREP_WMCF_A(M4,M11,globalyr));
			  COALREP_WMCF('4',M11,globalyr)	           := COALREP_WMCF_A('1',M11,globalyr) + COALREP_WMCF_A('2',M11,globalyr)
			  							+COALREP_WMCF_A('3',M11,globalyr);
			  COALREP_WMCF('4','11',globalyr)	           := Sum(M11|M11<11,COALREP_WMCF('4',M11,globalyr));
			
			  COALREP_WTCF(M4,M11,globalyr)	                   := COALREP_WTCF_A(M4,M11,globalyr);
			  COALREP_WTCF(M4,'11',globalyr)	           := Sum(M11|M11<11,COALREP_WTCF_A(M4,M11,globalyr));
			  COALREP_WTCF('4',M11,globalyr)	           := COALREP_WTCF_A('1',M11,globalyr) + COALREP_WTCF_A('2',M11,globalyr)
			  							+COALREP_WTCF_A('3',M11,globalyr);
			  COALREP_WTCF('4','11',globalyr)	           := Sum(M11|M11<11,COALREP_WTCF('4',M11,globalyr));
			  MPBLK_PCLIN_A(MNUMCR,globalyr)			:=if mnumcr < 11 then
										Sum(cyr|mpblk_pclin_d1(mnumcr,cyr) and map_globalyr_cyr(globalyr,cyr),
										mpblk_pclin_c1(mnumcr,cyr)/mpblk_pclin_d1(mnumcr,cyr))
										else
										Sum (cyr|map_globalyr_cyr(globalyr,cyr) and mpblk_pclin_d2(cyr),
										mpblk_pclin_c2(cyr)/mpblk_pclin_d2(cyr))
										endif;
			  MPBLK_PCLIN(MNUMCR,globalyr)			   :=if  Sum(cyr|map_globalyr_cyr(globalyr,cyr) = 1 ,mpblk_pclintemp(11,cyr)) then
			  							Sum(cyr,mpblk_pclintemp(mnumcr,cyr))else
			  							MPBLK_PCLIN_A(MNUMCR,globalyr)
			  							endif;
			
			  MPBLK_PCLCM_A(MNUMCR,globalyr)		   :=if mnumcr < 11 then
									Sum(cyr|mpblk_pclcm_d1(mnumcr,cyr) and map_globalyr_cyr(globalyr,cyr),
									mpblk_pclcm_c1(mnumcr,cyr)/mpblk_pclcm_d1(mnumcr,cyr))
									else
									Sum (cyr|map_globalyr_cyr(globalyr,cyr) and mpblk_pclcm_d2(cyr),
									mpblk_pclcm_c2(cyr)/mpblk_pclcm_d2(cyr))
									endif;
			  MPBLK_PCLCM(MNUMCR,globalyr)			   :=if  Sum(cyr|map_globalyr_cyr(globalyr,cyr) = 1 ,mpblk_pclcmtemp(11,cyr)) then
			  							Sum(cyr,mpblk_pclcmtemp(mnumcr,cyr))else
			  							MPBLK_PCLcm_A(MNUMCR,globalyr)
			  							endif;
			 MPBLK_PCLEL_A(MNUMCR,globalyr) 		 :=if mnumcr < 11 then
									Sum(cyr|mpblk_pclel_d1(mnumcr,cyr) and map_globalyr_cyr(globalyr,cyr),
									mpblk_pclel_c1(mnumcr,cyr)/mpblk_pclel_d1(mnumcr,cyr))
									else
									Sum (cyr|map_globalyr_cyr(globalyr,cyr) and mpblk_pclel_d2(cyr),
									mpblk_pclel_c2(cyr)/mpblk_pclel_d2(cyr))
									endif;
			
			  MPBLK_PCLEL(MNUMCR,globalyr)			   :=if  Sum(cyr|map_globalyr_cyr(globalyr,cyr) = 1 ,mpblk_pcleltemp(11,cyr)) then
			  							Sum(cyr,mpblk_pcleltemp(mnumcr,cyr))else
			  							MPBLK_PCLel_A(MNUMCR,globalyr)
			  							endif;
			  MPBLK_PMCIN(MNUMCR,globalyr)			   :=if  Sum(cyr|map_globalyr_cyr(globalyr,cyr) = 1 ,mpblk_pmcintemp(11,cyr)) then
			  							Sum(cyr,mpblk_pmcintemp(mnumcr,cyr))else
			  							MPBLK_PmcIN_A(MNUMCR,globalyr)
			  							endif;
			  MPBLK_PCLSN(MNUMCR,globalyr)			   :=MPBLK_PCLSN_A(MNUMCR,globalyr);
			  MPBLK_PCLAS(MNUMCR,globalyr)			   :=MPBLK_PCLAS_A(MNUMCR,globalyr);
			  COALPRC_PCLELCDR(M2,NDRGGN,globalyr)		   :=COALPRC_PCLELCDR_A(M2,NDRGGN,globalyr);
			  COALREP_PCLEX(mnumcr,globalyr)			   :=Coalrep_PCLEX_A(MNUMCR,globalyr);
			
			  COALREP_PCLEX('11',globalyr)			   :=Sum((mnumcr,cyr)|map_globalyr_cyr(globalyr,cyr)and ExportsTranspTrillsCR2(cyr)>0 and mnumcr<11,
									(ExportProductionDollarsCR2(MNUMCR,cyr) + ExportTransportationDollarsCR2(MNUMCR,cyr)))/$
									(Sum(cyr|map_globalyr_cyr(globalyr,cyr) and ExportsTranspTrillsCR2(cyr)>0,ExportsTranspTrillsCR2(cyr)));
			  emission_tot_merc(globalyr)			   := emission_tot_merc_a(globalyr);
			!Benchmarking changes
			COALOUT_indcokebal(globalyr)			:=sum(steoyr|Map_globalyr_steoyr(globalyr,steoyr),CokeStocksTons(steoyr));
			COALOUT_indsteambal(globalyr)			:=sum(steoyr|Map_globalyr_steoyr(globalyr,steoyr),IndustrialStocksTons(steoyr));
		}
	}
	Procedure InfeasibleProcedure {
		Body: {
				  !  IF (IX .EQ. 1) PMN(IREG,ITYP) = MMP
				  PMN(SReg, Sulf, Mtyp, Rank,cyr) := SC_2_PRICE87(SReg, Sulf, Mtyp, Rank,'1',cyr);
			           ! IF (IX .EQ. 1) PM1(IREG,ITYP) = MMP
			           PM1(SReg, Sulf, Mtyp, Rank,cyr) := SC_2_PRICE87(SReg, Sulf, Mtyp, Rank,'1',cyr);
			           ! IF (MCNT_STEP(IX) .EQ. 0.0) PM5(IREG,ITYP) = MMP
			           PM1(SReg, Sulf, Mtyp, Rank,cyr) := SC_2_PRICE87(SReg, Sulf, Mtyp, Rank,'6',cyr);  	!middle step price
			           ! IF (IX .EQ. SC_STEPS) PM8(IREG,ITYP) = MMP
			           PM8(SReg, Sulf, Mtyp, Rank,cyr) := SC_2_PRICE87(SReg, Sulf, Mtyp, Rank,'11',cyr);  	!last step price
			           ! IF (MCNT_STEP(IX) .EQ. 0.0) QM5(IREG,ITYP) = SCAPY
			           QM5(SReg, Sulf, Mtyp, Rank,cyr) := SC_QUAN1(SReg, Sulf, Mtyp, Rank, '6', cyr); 		!middle step quantity
			           ! IF (IX .EQ. SC_STEPS) QM8(IREG,ITYP) = SCAPY
			           QM8(SReg, Sulf, Mtyp, Rank,cyr) := SC_QUAN1(SReg, Sulf, Mtyp, Rank, '11', cyr); 		!last step quantity
			           ! IF (IRETOPT .GT. 0 .AND. CURIYR .GT. 1) THEN
			           !    IF (SOLVAL(5) .LT. 0) UP_PRICE(I,J)=1
			           !    write(iunitdb,*)iretopt,rownm1,i,j,up_price(i,j)
			           !END IF
				   DiffLastSTepVsSolve(SReg, Sulf, Mtyp, Rank,cyr) := QM8(SReg, Sulf, Mtyp, Rank,cyr) - ProductionVolumeSteps(SReg, Sulf, Mtyp, Rank,'11',cyr); !if it equals zero add additional capacity
			!	   for cyr do
			
			
				   		SC_QUAN1(SReg, Sulf, Mtyp, Rank, '11', cyr)|DiffLastStepVsSolve(SReg, Sulf, Mtyp, Rank,cyr):= SC_QUAN1(SReg, Sulf, Mtyp, Rank, '11', cyr) + 6;
				   		Redoflag(cyr) := 1;
				   		solve PartialLeastCostDomesticCoal;
				     		if (PartialLeastCostDomesticCoal.ProgramStatus <> 'Optimal' ) then
				     			block option Save_Data_Update_Definitions := 'off';
			                 	   		SaveAll( FormatString("cases\\debug%e_%i", CurrentStudyYear, ncntrl_curitr(1)));
			                 	   	endblock;
			        		coalout_coalcode(1) := 1;  !flag is infeasible
			             		empty ObjTotalCost;
				   		endif;
			
			!	   endfor;
			
			
			
			
			
			           !Sum( SupplyCurveStepBalShadow(SReg,Sulf,Mtyp,Rank,cyr).LT. 0
			
			!           *** The following code adjusts the target price for those instances where *******
			!           *** SOLVAL(5) is greater than or less than the prices on the CPS supply curves **
			
			            !IF (((PM8(I,J)*SBTU(I,J)) .LT. (SOLVAL(5)*(-1.0)*SBTU(I,J))) &
			             !  .AND. (SMCURVE_LIMIT(I,J) .NE. SCURVE_LIMIT_MAX) &
			              ! .AND. (QM5(I,J) .EQ. 0.0)) THEN
			               !PMN(I,J) = (PM5(I,J)*SBTU(I,J))*MMP_ADJ_1
			               !IF (curiyr .GE. 1) THEN
			                !  write(iunitdb,'(A27,5(2X,I2),2(2X,F8.2))') 'WARNING!!! SOLVAL(5) > PM8', &
			                 !    curiyr,CURITR,CLITR,I,J,PM8(I,J)*SBTU(I,J),(SOLVAL(5)*(-1.0)*SBTU(I,J))
			               !ENDIF
			            !ELSEIF (((PM8(I,J)*SBTU(I,J)) .LT. (SOLVAL(5)*(-1.0)*SBTU(I,J))) &
			             !  .AND. (SMCURVE_LIMIT(I,J) .NE. SCURVE_LIMIT_MAX) &
			              ! .AND. (QM5(I,J) .GT. 0.0)) THEN
			               !PMN(I,J) = (PM5(I,J)*SBTU(I,J))*MMP_ADJ_2
			               !IF (curiyr .GE. 1) THEN
			                !  write(iunitdb,'(A27,5(2X,I2),2(2X,F8.2))') 'WARNING!!! SOLVAL(5) > PM8', &
			                 !    curiyr,CURITR,CLITR,I,J,PM8(I,J)*SBTU(I,J),(SOLVAL(5)*(-1.0)*SBTU(I,J))
			               !ENDIF
			            !ELSEIF (((PM8(I,J)*SBTU(I,J)) .LT. (SOLVAL(5)*(-1.0)*SBTU(I,J))) &
			             !  .AND. (CAP_SMCURVE_LIMIT(I,J) .NE. SCURVE_LIMIT_MAX) &
			              ! .AND. (SMAX_UTIL_LIMIT(I,J) .LT. SCURVE_UTIL_CHECK)) THEN
			              ! PMN(I,J) = (PM5(I,J)*SBTU(I,J))*MMP_ADJ_3
			               !IF (curiyr .GE. 1) THEN
			               !   write(iunitdb,'(A27,5(2X,I2),2(2X,F8.2),2X,F8.3)') 'WARNING!!! SOLVAL(5) > PM8', &
			               !      curiyr,CURITR,CLITR,I,J,PM8(I,J)*SBTU(I,J),(SOLVAL(5)*(-1.0)*SBTU(I,J)), &
			               !      smax_util_limit(i,j)
			               !ENDIF
			            !ELSEIF (((PM8(I,J)*SBTU(I,J)) .LT. (SOLVAL(5)*(-1.0)*SBTU(I,J))) &
			             !  .AND. (CAP_SMCURVE_LIMIT(I,J) .NE. SCURVE_LIMIT_MAX) &
			              ! .AND. (QM8(I,J) .EQ. 0.0)) THEN
			               !PMN(I,J) = (PM5(I,J)*SBTU(I,J))*MMP_ADJ_3
			               !CAP_FLAG(I,J)=0
			               !IF (curiyr .GE. 1) THEN
			               !   write(iunitdb,'(A27,5(2X,I2),2(2X,F8.2),2X,F8.3)') 'WARNING!!! SOLVAL(5) > PM8', &
			                !     curiyr,CURITR,CLITR,I,J,PM8(I,J)*SBTU(I,J),(SOLVAL(5)*(-1.0)*SBTU(I,J)), &
			                 !    smax_util_limit(i,j)
			               !ENDIF
			           ! ELSEIF (((PM8(I,J)*SBTU(I,J)) .LT. (SOLVAL(5)*(-1.0)*SBTU(I,J))) &
			            !   .AND. (CAP_SMCURVE_LIMIT(I,J) .NE. SCURVE_LIMIT_MAX) &
			             !  .AND. (QM8(I,J) .GT. 0.0)) THEN
			              ! PMN(I,J) = (PM8(I,J)*SBTU(I,J))
			               !CAP_FLAG(I,J)=1
			               !IF (curiyr .GE. 1) THEN
			                !  write(iunitdb,'(A27,5(2X,I2),2(2X,F8.2),2X,F8.3)') 'WARNING!!! SOLVAL(5) > PM8', &
			                !     curiyr,CURITR,CLITR,I,J,PM8(I,J)*SBTU(I,J),(SOLVAL(5)*(-1.0)*SBTU(I,J)), &
			                !     smax_util_limit(i,j)
			               !ENDIF
			            !ELSEIF (((PM8(I,J)*SBTU(I,J)) .LT. (SOLVAL(5)*(-1.0)*SBTU(I,J))) &
			            !   .AND. (SMCURVE_LIMIT(I,J) .EQ. SCURVE_LIMIT_MAX)) THEN
			             !  PMN(I,J) = (PM5(I,J)*SBTU(I,J))*MMP_ADJ_3
			              ! IF (curiyr .GE. 1) THEN
			               !   write(iunitdb,'(A27,5(2X,I2),2(2X,F8.2))') 'WARNING!!! SOLVAL(5) > PM8', &
			                !     curiyr,CURITR,CLITR,I,J,PM8(I,J)*SBTU(I,J),(SOLVAL(5)*(-1.0)*SBTU(I,J))
			               !ENDIF
			           ! ELSEIF ((PM1(I,J)*SBTU(I,J)) .GT. (SOLVAL(5)*(-1.0)*SBTU(I,J))) THEN
			            !   PMN(I,J) = PM1(I,J)*SBTU(I,J)
			             !  IF (curiyr .GE. 1) THEN
			              !    write(iunitdb,'(A27,5(2X,I2),2(2X,F8.2))') 'WARNING!!! SOLVAL(5) < PM1', &
			               !      curiyr,CURITR,CLITR,I,J,PM1(I,J)*SBTU(I,J),(SOLVAL(5)*(-1.0)*SBTU(I,J))
			               !ENDIF
			            !ELSE
			            !   PMN(I,J) = SOLVAL(5)*(-1.0)*SBTU(I,J)
			           ! ENDIF
		}
	}
	Procedure RedoProcedure {
		Body: {
			!   	for cyr | (val(cyr) = CurrentStudyYear) do
			   !	  redoflg(cyr) := 1;
			   !	  for redoflg(cyr) = 1 then
			      		RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) :=SupplyCurveStepBalShadow2(Scrv1,SReg, Sulf, Mtyp, Rank,cyr)/$mcnt_prev(Scrv1,SReg, Sulf, Mtyp, Rank);
			      		InterimRedoflg(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) := 1|(RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) > 1.015 or RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) < 0.985) and Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
			      		if Sum ((Scrv1,SReg, Sulf, Mtyp, Rank),InterimRedoflg(Scrv1,SReg, Sulf, Mtyp, Rank,CurrentStudyYear)) > 0 then
			      			Redoflg(cyr) := 1;
			      			CalculationOfCoalPricingEquation;
			      			solve PartialLeastCostDomesticCoal;
			
			      			RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) :=SupplyCurveStepBalShadow2(Scrv1,SReg, Sulf, Mtyp, Rank,cyr)/$mcnt_prev(Scrv1,SReg, Sulf, Mtyp, Rank);
			      			qprods(SReg, Sulf, Mtyp, Rank) := ProductionVolumeTons(SReg, Sulf, Mtyp, Rank,CurrentStudyYear);
			      			mcnt_prev(Scrv1,SReg, Sulf, Mtyp, Rank) := SupplyCurveStepBalShadow2(Scrv1,SReg, Sulf, Mtyp, Rank,CurrentStudyYear);
			
			      		        InterimRedoflg(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) := 1|(RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,CurrentStudyYear) > 1.015 or RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,CurrentStudyYear) < 0.985) and Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
			      			if Sum ((Scrv1,SReg, Sulf, Mtyp, Rank),InterimRedoflg(Scrv1,SReg, Sulf, Mtyp, Rank,CurrentStudyYear)) > 0 then
			      				Redoflg(cyr) := 2;
			      				CalculationOfCoalPricingEquation;
			      				solve PartialLeastCostDomesticCoal;
			
			      				RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) :=SupplyCurveStepBalShadow2(Scrv1,SReg, Sulf, Mtyp, Rank,cyr)/$mcnt_prev(Scrv1,SReg, Sulf, Mtyp, Rank);
			      				qprods(SReg, Sulf, Mtyp, Rank) := ProductionVolumeTons(SReg, Sulf, Mtyp, Rank,CurrentStudyYear);
			      				mcnt_prev(Scrv1,SReg, Sulf, Mtyp, Rank) := SupplyCurveStepBalShadow2(Scrv1,SReg, Sulf, Mtyp, Rank,CurrentStudyYear);
			
			
			      		        	InterimRedoflg(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) := 1|(RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) > 1.015 or RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) < 0.985) and Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
			      				if Sum ((Scrv1,SReg, Sulf, Mtyp, Rank),InterimRedoflg(Scrv1,SReg, Sulf, Mtyp, Rank,CurrentStudyYear)) > 0 then
			      					Redoflg(cyr) := 3;
			      					CalculationOfCoalPricingEquation;
			      					solve PartialLeastCostDomesticCoal;
			
			 					RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) :=SupplyCurveStepBalShadow2(Scrv1,SReg, Sulf, Mtyp, Rank,cyr)/$mcnt_prev(Scrv1,SReg, Sulf, Mtyp, Rank);
			 					qprods(SReg, Sulf, Mtyp, Rank) := ProductionVolumeTons(SReg, Sulf, Mtyp, Rank,CurrentStudyYear);
			      					mcnt_prev(Scrv1,SReg, Sulf, Mtyp, Rank) := SupplyCurveStepBalShadow2(Scrv1,SReg, Sulf, Mtyp, Rank,CurrentStudyYear);
			
			      		        		InterimRedoflg(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) := 1|(RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) > 1.015 or RedoTest(Scrv1,SReg, Sulf, Mtyp, Rank,cyr) < 0.985) and Btu(Scrv1,SReg, Sulf, Mtyp, Rank);
			      				endif;
			      			endif;
			      		endif;
			!      	endfor;
		}
		Comment: {
			"Not sure the puprose of this procedure!  It does not appear tob be called  redoflg  is set to 0 in MainExecution    DAF 12-28-17"
		}
	}
	Procedure WriteDataLagged {
		Body: {
			!write to table OutputLaggedProduction;
			!write to table OutputLaggedPrice;
		}
	}
	Procedure PriceAdjustment {
		Body: {
			
			!for yr | (val(yr) >= CurrentStudyYear) do
			
				   PMN((SReg, Sulf, Mtyp, Rank,fyr)|fyr>=CurrentStudyYear) := SC_2_PRICE87(SReg, Sulf, Mtyp, Rank,'1',fyr);
			           PM1((SReg, Sulf, Mtyp, Rank,fyr)|fyr>=CurrentStudyYear) := SC_2_PRICE87(SReg, Sulf, Mtyp, Rank,'1',fyr);
			           PM5((SReg, Sulf, Mtyp, Rank,fyr)|fyr>=CurrentStudyYear) := SC_2_PRICE87(SReg, Sulf, Mtyp, Rank,'6',fyr);  	!middle step price
			           PM8((SReg, Sulf, Mtyp, Rank,fyr)|fyr>=CurrentStudyYear) := SC_2_PRICE87(SReg, Sulf, Mtyp, Rank,'11',fyr);  	!last step price
			           QM5((SReg, Sulf, Mtyp, Rank,fyr)|fyr>=CurrentStudyYear) := SC_QUAN1(SReg, Sulf, Mtyp, Rank, '6', fyr); 		!middle step quantity
			           QM8((SReg, Sulf, Mtyp, Rank,fyr)|fyr>=CurrentStudyYear) := SC_QUAN1(SReg, Sulf, Mtyp, Rank, '11', fyr); 		!last step quantity
			  	   PMN((SReg, Sulf, Mtyp, Rank,fyr)|fyr>=CurrentStudyYear) := if PM8(SReg, Sulf, Mtyp, Rank,fyr) < SupplyCurveStepBalShadow(SReg, Sulf, Mtyp, Rank,fyr) and QM5(SReg, Sulf, Mtyp, Rank,fyr) = 0.0 then
			    				PM5(SReg, Sulf, Mtyp, Rank,fyr)*.98
			
			   			 elseif PM8(SReg, Sulf, Mtyp, Rank,fyr) < SupplyCurveStepBalShadow(SReg, Sulf, Mtyp, Rank,fyr) and QM5(SReg, Sulf, Mtyp, Rank,fyr) > 0.0 then
			
							PM5(SReg, Sulf, Mtyp, Rank,fyr)*.995
			 			 elseif PM8(SReg, Sulf, Mtyp, Rank,fyr) < SupplyCurveStepBalShadow(SReg, Sulf, Mtyp, Rank,fyr) and Util_Max2(SReg, Sulf, Mtyp, Rank) < .98  then
							PM5(SReg, Sulf, Mtyp, Rank,fyr)*1.0697
						 elseif PM8(SReg, Sulf, Mtyp, Rank,fyr) < SupplyCurveStepBalShadow(SReg, Sulf, Mtyp, Rank,fyr) and QM8(SReg, Sulf, Mtyp, Rank,fyr) = 0.0 then
							PM5(SReg, Sulf, Mtyp, Rank,fyr)*1.0697
			    			elseif PM8(SReg, Sulf, Mtyp, Rank,fyr )< SupplyCurveStepBalShadow(SReg, Sulf, Mtyp, Rank,fyr) and QM8(SReg, Sulf, Mtyp, Rank,fyr) > 0.0 then
							PM8(SReg, Sulf, Mtyp, Rank,fyr)
						elseif PM8(SReg, Sulf, Mtyp, Rank,fyr) < SupplyCurveStepBalShadow(SReg, Sulf, Mtyp, Rank,fyr) then
							PM5(SReg, Sulf, Mtyp, Rank,fyr)*1.0697
						elseif PM1(SReg, Sulf, Mtyp, Rank,fyr) > SupplyCurveStepBalShadow(SReg, Sulf, Mtyp, Rank,fyr) then
							PM1(SReg, Sulf, Mtyp, Rank,fyr)
						else
						        SupplyCurveStepBalShadow(SReg, Sulf, Mtyp, Rank,fyr)
						endif;
			!endfor;
		}
	}
	Procedure create_case {
		Body: {
			casesave(0);
		}
	}
	Procedure EmptyVariablesWhenInfeasible {
		Body: {
			CrashYear := ncntrl_curcalyr('1');
			empty qprods;
			empty ImportsElectricity(NSTEPS,nUS,USi,DReg,pt2,CrashYear) ;
			empty ProductionVolume(SReg, Sulf, Mtyp, Rank,CrashYear);
			empty ExportsTransport2(SReg, Sulf, Mtyp, Rank,ExpSec,USe,DReg,CrashYear);
			!solve PartialLeastCostDomesticCoal;
		}
	}
	DeclarationSection TempDebuggingVariables {
		Parameter ptarg_disect1 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			Definition: CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank)^RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank);
		}
		Parameter ptarg_disect2 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			Definition: {
				!Sum(cyr,(((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,cyr) *
				!	(1.0 + StepSize(SCrv1Step)))/
				!	Ecp_prod_cap(cyr,Scrv1,SReg,Sulf,Mtyp,Rank))*100.0))
			}
		}
		Parameter ptarg_disect3 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			Definition: {
				!Sum(cyr,((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,cyr) * (1.0 + StepSize(SCrv1Step))) /
				!	Ecp_prod_cap(cyr,Scrv1,SReg,Sulf,Mtyp,Rank)))*100.0))
			}
		}
		Parameter ptarg_disect4 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			Definition: {
				!Sum(cyr,((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,cyr) * (1.0 + StepSize(SCrv1Step))) /
				!	Ecp_prod_cap(cyr,Scrv1,SReg,Sulf,Mtyp,Rank)))*100.0))
			}
		}
		Parameter ptarg_disect5 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
			Definition: {
				!Sum(cyr,(RC_Util_T(SCrv1,SReg,Sulf,MTyp,Rank)*((((((T_qtarg_ecp(Scrv1,SReg,Sulf,Mtyp,Rank,cyr) *
				!	(1.0 + StepSize(SCrv1Step))) / Ecp_prod_cap(cyr,Scrv1,SReg,Sulf,Mtyp,Rank)))*100.0)/
				!	CAP_UTIL_HIST(Scrv1,SReg,Sulf,Mtyp,Rank))**UtilExpTop)))
			}
		}
		Parameter sc_price1 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
		}
		Parameter sc_price2 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
		}
		Parameter sc_price3 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
		}
		Parameter sc_price4 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
		}
		Parameter sc_price5 {
			IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr);
		}
		Parameter FY_PROD_CAP1 {
			IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			Definition: {
				
				        	FY_PROD_CAP(Yr-1,SCrv1,SReg,Sulf,MTyp,Rank) * (1-util_min_adj(SCrv1,SReg,Sulf,MTyp,Rank))
			}
		}
		Parameter FY_PROD_CAP4 {
			IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			Definition: {
				
				        	FY_PROD_CAP(Yr-1,SCrv1,SReg,Sulf,MTyp,Rank) * (1+util_max_adj(SCrv1,SReg,Sulf,MTyp,Rank))
			}
		}
		Parameter FY_PROD_CAP5 {
			IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			Definition: {
				
				        	FY_PROD_CAP(Yr-1,SCrv1,SReg,Sulf,MTyp,Rank) * (1+util_mid_adj(SCrv1,SReg,Sulf,MTyp,Rank))
			}
		}
		Parameter FY_PROD_CAP6 {
			IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			Definition: {
				
				        	FY_PROD_CAP(Yr-1,SCrv1,SReg,Sulf,MTyp,Rank)
			}
		}
		Parameter FY_PROD_CAP7 {
			IndexDomain: (Yr,SCrv1,SReg,Sulf,MTyp,Rank) | BY_PROD_CAP(Scrv1, SReg, Sulf, Mtyp, Rank);
			Definition: {
				
				        	FY_PROD_CAP(Yr-1,SCrv1,SReg,Sulf,MTyp,Rank)
			}
		}
	}
	Section Data_Export {
		Procedure ExportClientSupplyData {
			Body: {
				 put ClientSupplyFile;
				
				 display {LaggedProductionTonsforCPS1} where decimals = 5;
				
				 putclose ClientSupplyFile;
			}
			File ClientSupplyFile {
				Name: "NewClientSupply.txt";
				Device: Disk;
				Mode: replace;
			}
		}
	}
	Set ImportantIdentifiers {
		SubsetOf: AllIdentifiers;
		Index: import_idn;
		Definition: {
			{ IndexIdentifiers | PerformanceIdentifiers(IndexIdentifiers) >= 0.1}
		}
	}
	Parameter PerformanceIdentifiers {
		IndexDomain: IndexIdentifiers;
		Definition: ProfilerData(IndexIdentifiers, 'net time');
	}
	Parameter PerformanceParameter {
		IndexDomain: (IndexParameters);
		Definition: ProfilerData(IndexParameters, 'net time');
	}
	Parameter PerformanceVariables {
		IndexDomain: IndexVariables;
		Definition: ProfilerData(IndexVariables, 'net time');
	}
	Parameter PerformanceConstraints {
		IndexDomain: IndexConstraints;
		Definition: ProfilerData(IndexConstraints, 'net time');
	}
	StringParameter DefinitionOf {
		IndexDomain: import_idn;
		Definition: AttributeToString(import_idn,'Definition');
	}
	Section Standalone_Reports {
		DeclarationSection Display_Declarations {
			Parameter Switch_MMst {
				Range: binary;
				Comment: {
					"1 = tons
					0 = trill btus"
				}
			}
			Parameter Switch_TBTU {
				Range: binary;
				Comment: {
					"0 = tons
					1 = trill btus"
				}
			}
			Parameter Switch_Total {
				Range: binary;
				Comment: {
					"1 = tons
					0 = trill btus"
				}
			}
			ElementParameter Display_SRegAgg {
				Range: GreaterSupRegions;
			}
			ElementParameter Display_SReg {
				Range: SupReg_Name2;
			}
			ElementParameter Display_Sulf {
				Range: SulfurGradeName;
			}
			ElementParameter Display_MineType {
				Range: MineTypeName;
			}
			ElementParameter Display_Rank {
				Range: CoalTypeName;
			}
			Set Display_Sregion_Agg {
				SubsetOf: SupReg_Aggregated;
				Index: disp_sragg;
			}
			Set SupReg_Aggregated {
				Index: sreg_agg;
			}
			ElementParameter SelSupRegAgg {
				Range: SupReg_Aggregated;
			}
			Set GreaterSupRegions {
				SubsetOf: SupReg_Aggregated;
				Index: gr_supreg;
			}
			Set E_W_MississippiRegs {
				SubsetOf: SupReg_Aggregated;
				Index: ew_mreg;
			}
			Set US_Total {
				SubsetOf: SupReg_Aggregated;
				Index: ustot;
			}
			Set SupReg_Name2 {
				SubsetOf: SupReg_NameTot;
				Index: sreg_name;
			}
			Set SupReg_NameTot {
				Index: allreg;
			}
			ElementParameter SelSReg {
				Range: SupReg_Name2;
			}
			Set CoalTypeName {
				Index: rank_name;
			}
			Set SulfurGradeName {
				Index: sulf_name;
			}
			Set MineTypeName {
				Index: mtyp_name;
			}
			Set SelectedRegs {
				SubsetOf: SupReg_NameTot;
				Index: dispreg;
			}
			Set Displayed_RegsTotal {
				SubsetOf: SupReg_NameTot;
				Index: dispregt;
				Definition: SelectedRegs+SelectedUS;
			}
			Set SelectedUS {
				SubsetOf: SupReg_NameTot;
				Index: sus;
			}
			Set SelectAggReg {
				Index: selaggreg;
				Definition: {
					{'Greater Supply Regions', 'Mississipi River Regions', 'US Total'}
				}
			}
			Set SelectAggReg1 {
				SubsetOf: SelectAggReg;
				Index: selaggreg1;
			}
			Set DisplayAggRegs {
				SubsetOf: SupReg_Aggregated;
				Index: dispaggreg;
			}
			Set CenDiv_Name {
				Index: cd_name;
			}
			ElementParameter CD_US {
				Range: CenDiv_Name;
			}
			Set DmdReg_name {
				Index: Dreg_name;
			}
			Set SelectedDregions {
				SubsetOf: DmdReg_name;
				Index: dispDReg;
			}
			Set SubSector_Name {
				Index: subsec_name;
			}
			Set Sector_name {
				SubsetOf: TotSector_Name;
				Index: sec_name;
				Definition: TotSector_Name-AllSectors;
			}
			Set TotSector_Name {
				Index: allsec;
				Definition: {
					{'Residential/Commercial','Industrial Steam','Industrial Coking','Export','Liquids','Electricity','All Sectors'}
				}
			}
			Set SectorNEMS_name {
				SubsetOf: TotSectorNEMS_name;
				Index: nemSec;
				Definition: TotSectorNEMS_name;
			}
			Set TotSectorNEMS_name {
				Index: allnemssec;
				Definition: {
					{'Residential/Commercial','Industrial Steam','Industrial Coking','Export','Liquids','Electricity','All Sectors'}
				}
			}
			ElementParameter USTotal {
				Range: SupReg_NameTot;
			}
			Set Price_Qty {
				Index: pq;
				Definition: {
					{'Quantity','Price'}
				}
			}
			Set SelectedDRegs {
				SubsetOf: DmdReg_name;
				Index: dr1;
			}
			ElementParameter SelectedMajSector {
				Range: Sector_name;
			}
			Set Imp_Sector_name {
				SubsetOf: Sector_name;
				Index: impsecname;
				Definition: {
					{sec_name| sum((nonUSExp_name, Dreg_name, subsec_name, yr)| map_SectorNames(sec_name, subsec_name), ImportDetailsTrill(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr))}
				}
			}
			ElementParameter SelectedSector {
				Range: Imp_Sector_name;
			}
			Set SelectSubSector {
				SubsetOf: SubSector_Name;
				Index: selsubsec;
				Definition: {
					{subsec_name|map_SectorNames(SelectedMajSector, subsec_name) and sum(yr, Display_Sect_AllSectorTransport(SelectedMajSector, subsec_name, yr))}
				}
			}
			Set SelectSubSector1 {
				SubsetOf: SubSector_Name;
				Index: selsubsec1;
				Definition: {
					{subsec_name|map_SectorNames(SelectedSector, subsec_name) and sum((nonUSExp_name, Dreg_name,yr), ImportDetailsTrill(nonUSExp_name, Dreg_name, SelectedSector, subsec_name, yr))}
				}
			}
			Set SelectedCDregions {
				SubsetOf: CenDiv_Name;
				Index: rcd;
			}
			Set SelectedDmdRegions {
				SubsetOf: DmdReg_name;
				Index: rd2;
			}
			Set SelectedNEMSSectors {
				SubsetOf: TotSector_Name;
				Index: selnemssec;
			}
			ElementParameter SelectNEMSSector {
				Range: TotSector_Name;
			}
			ElementParameter SelectedNEMSSector {
				Range: Sector_name;
			}
			ElementParameter SelectCDReg {
				Range: CenDiv_Name;
			}
			ElementParameter SelectDReg {
				Range: DmdReg_name;
			}
			ElementParameter AllSectors {
				Range: TotSector_Name;
				Definition: 'All Sectors';
			}
			ElementParameter ResName {
				Range: Sector_name;
			}
			ElementParameter IndName {
				Range: Sector_name;
			}
			ElementParameter CokName {
				Range: Sector_name;
			}
			ElementParameter ExpName {
				Range: Sector_name;
			}
			ElementParameter ElecName {
				Range: Sector_name;
			}
			ElementParameter LiquName {
				Range: Sector_name;
			}
			Set ExportRegion_Name {
				Index: EReg_name;
			}
			Set ImportRegion_Name {
				Index: IReg_name;
			}
			Set NonUSExpReg_Name {
				SubsetOf: ExportRegion_Name;
				Index: nonUSExp_name;
				Definition: {
					{EReg_name | Exists(nUS | map_ExportRegionNames(nUS, EReg_name))}
				}
			}
			Set NonUSExpReg_Name1 {
				SubsetOf: NonUSExpReg_Name;
				Definition: {
					{nonUSExp_name | sum(( Dreg_name, sec_name, subsec_name, yr), ImportDetailsTrill(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr))}
				}
			}
			Set NonUSImpReg_Name {
				SubsetOf: ImportRegion_Name;
				Index: nonUSimp_name;
				Definition: {
					{IReg_name | Exists(NonUSi | map_ImportRegionNames(nonUSi, IReg_name))}
				}
			}
			Set USExpReg_Name {
				SubsetOf: ExportRegion_Name;
				Index: USexp_name;
				Definition: ExportRegion_Name-NonUSExpReg_Name;
			}
			Set USImpReg_Name {
				SubsetOf: ImportRegion_Name;
				Index: USimp_name;
				Definition: ImportRegion_Name-NonUSImpReg_Name;
			}
			Set IntlCoalType {
				Index: tc_name;
			}
			ElementParameter CokingName {
				Range: IntlCoalType;
			}
			ElementParameter ThermalName {
				Range: IntlCoalType;
			}
			ElementParameter Display_ExpReg {
				Range: ExportRegion_Name;
			}
			ElementParameter Display_ExpReg1 {
				Range: NonUSExpReg_Name1;
			}
			ElementParameter Display_ImpReg {
				Range: ImportRegion_Name;
			}
			Set SelectImpRegs {
				SubsetOf: ImportRegion_Name;
				Index: selimpreg;
				Definition: {
					{IReg_name | sum(yr,InternationalTransportTrill(Display_ExpReg, IReg_name, Display_TC, yr))}
				}
			}
			Set SelectExpRegs {
				SubsetOf: ExportRegion_Name;
				Index: selexpreg;
				Definition: {
					{EReg_name | sum(yr,InternationalTransportTrill(EReg_name, Display_ImpReg, Display_TC, yr))}
				}
			}
			Set SelectDmdRegs {
				SubsetOf: DmdReg_name;
				Index: seldmdreg;
				Definition: {
					{Dreg_name | sum((yr,subsec_name),ImportDetailsTrill(Display_ExpReg1, Dreg_name, SelectedSector, subsec_name, yr))}
				}
			}
			ElementParameter Display_TC {
				Range: IntlCoalType;
			}
			StringParameter TooltipDreg {
				IndexDomain: (Dreg_name,yr);
				Definition: Formatstring("(%e, %e)",Dreg_name,yr);
			}
			StringParameter TootipSec {
				IndexDomain: (sec_name,yr);
				Definition: Formatstring("(%e, %e)",sec_name,yr);
			}
			StringParameter TooltipSubsec {
				IndexDomain: (subsec_name,yr);
				Definition: Formatstring("(%e, %e)",subsec_name,yr);
			}
			StringParameter TooltipCDDmd {
				IndexDomain: (allsec,cd_name,yr);
				Definition: Formatstring("(%e, %e, %e)",allsec,cd_name,yr);
			}
			StringParameter TooltipDmdPrc {
				IndexDomain: (allsec,Dreg_name,yr);
				Definition: Formatstring("(%e, %e, %e)",allsec,Dreg_name,yr);
			}
			StringParameter TooltipInt {
				IndexDomain: (EReg_name,IReg_name,yr);
				Definition: Formatstring("(%e to %e, %e)",EReg_name,IReg_name,yr);
			}
			StringParameter TooltipImp {
				IndexDomain: (nonUSExp_name,Dreg_name,yr);
				Definition: Formatstring("(%e to %e, %e)",nonUSExp_name,Dreg_name,yr);
			}
		}
		DeclarationSection Display_Supply_Curves_Declaration {
			Set Selected_Regions {
				SubsetOf: SupReg_Name2;
				Index: r1;
			}
			Set Selected_Sulf {
				SubsetOf: SulfurGradeName;
				Index: sulf1;
			}
			Set Selected_Mine {
				SubsetOf: MineTypeName;
				Index: mine1;
			}
			Set Selected_Rank {
				SubsetOf: CoalTypeName;
				Index: rank1;
			}
			ElementParameter MineType_Scrv {
				IndexDomain: Scrv1;
				Range: MineTypeName;
				Definition: first(mtyp_name | sum((sreg_name, sulf_name, rank_name), map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name)));
			}
			ElementParameter SRegion_Scrv {
				IndexDomain: Scrv1;
				Range: SupReg_Name2;
				Definition: first(sreg_name | sum((sulf_name, mtyp_name, rank_name), map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name)));
			}
			ElementParameter SulfName_Scrv {
				IndexDomain: Scrv1;
				Range: SulfurGradeName;
				Definition: first(sulf_name | sum((sreg_name, mtyp_name, rank_name), map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name)));
			}
			ElementParameter RankName_Scrv {
				IndexDomain: Scrv1;
				Range: CoalTypeName;
				Definition: first(rank_name | sum((sreg_name ,sulf_name, mtyp_name ), map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name)));
			}
			StringParameter Scrv_RegName {
				IndexDomain: Scrv1;
				Definition: Formatstring("%<e  \t %<8e  \t %>10e  \t %>e", SRegion_Scrv(Scrv1),SulfName_Scrv(Scrv1),MineType_Scrv(Scrv1),RankName_Scrv(Scrv1));
			}
			StringParameter Scrv_Label {
				IndexDomain: Scrv1;
				Definition: Formatstring("%e ", Scrv1)+ Scrv_RegName(Scrv1);
			}
			StringParameter Scrv_SulfName {
				IndexDomain: Scrv1;
				Definition: Formatstring("%<e", SulfName_Scrv(Scrv1));
			}
			ElementParameter FirstScrvStep {
				Range: SupplyCurveSteps;
				Definition: first(Scrv1Step);
			}
			Set SelectedCrvs {
				SubsetOf: SupplyCurveNumber2;
				Index: selcrv;
			}
			Set SelectedCrvs2 {
				SubsetOf: SupplyCurveNumber2;
				Index: selcrv1;
			}
			ElementParameter Selected_Crv {
				Range: SupplyCurveNumber2;
			}
			ElementParameter Display_Scrv1 {
				Range: SupplyCurveNumber2;
			}
			StringParameter CurveYearName {
				IndexDomain: jNth;
				Definition: FormatString("Supply Curve %e in Year %e", Display_Scrv1,SelectYear(jNth));
			}
			StringParameter CurveYearName1 {
				Definition: FormatString("Supply Curve %e Year %e",Display_Scrv1,SelectYear1);
			}
			StringParameter CurveYearName2 {
				IndexDomain: (Scrv1,runyr);
				Definition: FormatString("Supply Curve %e Year %e",Scrv1,runyr);
			}
			StringParameter YearDollarPrice {
				Definition: Formatstring("Step Price \n%e$/ton", DisplayDollarYear);
			}
			StringParameter Price1 {
				Definition: FormatString("Step Price \n%s", "87$/ton");
			}
			ElementParameter DisplayDollarYear {
				Range: AllYears;
			}
			StringParameter ClProd {
				IndexDomain: (sreg_agg,yr);
				Definition: Formatstring("(%e, %e)",sreg_agg,yr);
			}
			StringParameter ClProd1 {
				IndexDomain: (allreg,yr);
				Definition: Formatstring("(%e, %e)",allreg,yr);
			}
			StringParameter CurveStep {
				IndexDomain: Scrv1Step;
				Definition: Formatstring("Step %e",Scrv1Step);
			}
		}
		DeclarationSection Time_Declarations {
			ElementParameter Start_iyr {
				Range: Run_Years;
				InitialData: '2021';
				Comment: "First year for year loop";
			}
			ElementParameter End_iyr {
				Range: Run_Years;
				InitialData: '2050';
				Comment: "Last year for year loop";
			}
			ElementParameter Cur_iyr {
				Text: "Current year for year loop";
				Range: Run_Years;
			}
			Parameter MaxIter {
				Definition: {
					7
					!NCNTRL_MAXITR(M1)
				}
			}
			Set Run_Years {
				SubsetOf: AllYears;
				Index: runyr;
				Property: ElementsAreNumerical;
				Definition: {
					{CPSBaseYr..CPSEndYr}
				}
			}
			Set Display_Years {
				SubsetOf: AllYears;
				Index: disp_yr;
				Definition: {
					{Start_iyr..End_iyr}
				}
			}
			Set SelectedYears {
				SubsetOf: Run_Years;
				Index: selectyr;
			}
			Set IntlSelectedYears {
				SubsetOf: Run_Years;
				Index: intyr;
			}
			ElementParameter SelectYear {
				IndexDomain: jNth;
				Range: SelectedYears;
				Definition: Element(SelectedYears,val(jNth));
			}
			ElementParameter SelectYear1 {
				Range: Run_Years;
			}
			Set NCount {
				SubsetOf: NCnt;
				Index: iNth;
				Definition: ElementRange(0,card(selectyr));
			}
			ElementParameter CntNth {
				Range: NCount;
			}
			Set NCnt {
				Index: jNth;
				Definition: ElementRange(0,9);
			}
			Set SelectIterations {
				Index: seliter;
				Definition: ElementRange(1,MaxIter);
			}
			Parameter IterationFlag {
				IndexDomain: seliter;
			}
			Parameter SelectAll_switch {
				Range: binary;
			}
		}
		DeclarationSection Mapping_Declarations {
			Parameter map_SupRegions_Aggregated {
				IndexDomain: (sreg_agg,SReg);
			}
			Parameter map_E_W_MississippiRegs {
				IndexDomain: (ew_mreg,SReg);
			}
			Parameter map_SupRegions {
				IndexDomain: (sreg_name,SReg);
			}
			Parameter map_rank_CoalRankName {
				IndexDomain: (Rank,rank_name);
			}
			Parameter map_Sulf_SulfName {
				IndexDomain: (Sulf,sulf_name);
			}
			Parameter map_MTyp_MTypName {
				IndexDomain: (Mtyp,mtyp_name);
			}
			Parameter map_scrv1_types {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank);
			}
			Parameter map_scrv1_names {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name);
			}
			Parameter map_SupplyCurve_names {
				IndexDomain: (sreg_name,sulf_name,mtyp_name,rank_name);
				Definition: {
					sum((SReg, Sulf, Mtyp, Rank) |map_SupRegions(sreg_name, SReg) and map_Sulf_SulfName(Sulf, sulf_name) and map_MTyp_MTypName(Mtyp, mtyp_name)
					    and map_rank_CoalRankName(Rank, rank_name), SupplyCurveNumber_Map(SReg, Sulf, Mtyp, Rank))
				}
			}
			Parameter map_DmdRegs {
				IndexDomain: (Dreg_name,DReg);
			}
			Parameter map_CensDivNames {
				IndexDomain: (cd_name,CensDiv);
			}
			Parameter map_CDname_DRegname {
				IndexDomain: (cd_name,Dreg_name);
			}
			Parameter map_SubSectorNames {
				IndexDomain: (subsec_name,Subsec);
			}
			Parameter map_SectorNames {
				IndexDomain: (sec_name,subsec_name);
			}
			Parameter map_pt2SubsecNames {
				IndexDomain: (subsec_name,pt3);
			}
			Parameter map_MajorSectorNames {
				IndexDomain: (sec_name,Sec);
			}
			Parameter map_ExportRegionNames {
				IndexDomain: (e,EReg_name);
			}
			Parameter map_ImportRegionNames {
				IndexDomain: (i,IReg_name);
			}
			Parameter map_ThermalorCoking {
				IndexDomain: (tc,tc_name);
			}
		}
		DeclarationSection Supply_Declarations {
			Parameter AnnualCoalProduction_Total {
				IndexDomain: yr;
			}
			Parameter AnnualCoalProduction {
				IndexDomain: (sreg_agg,yr);
			}
			Parameter AnnualCoalProduction_reg {
				IndexDomain: (sreg_name,yr);
			}
			Parameter AnnualCoalProduction_rank {
				IndexDomain: (rank_name,yr);
			}
			Parameter AnnualCoalProduction_sulf {
				IndexDomain: (sulf_name,yr);
			}
			Parameter AnnualCoalProduction_mtyp {
				IndexDomain: (mtyp_name,yr);
			}
			Parameter AnnualCoalProduction_supcrv {
				IndexDomain: (sreg_name,mtyp_name,rank_name,sulf_name,yr);
			}
			Parameter AnnualCoalProduction_supcrv1 {
				IndexDomain: (Scrv1,yr);
			}
			Parameter AnnualCoalProduction_supcrv2 {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
			}
			Parameter AnnualCoalProduction_Total_tons {
				IndexDomain: yr;
			}
			Parameter AnnualCoalProduction_tons {
				IndexDomain: (sreg_agg,yr);
			}
			Parameter AnnualCoalProduction_reg_tons {
				IndexDomain: (sreg_name,yr);
			}
			Parameter AnnualCoalProduction_rank_tons {
				IndexDomain: (rank_name,yr);
			}
			Parameter AnnualCoalProduction_sulf_tons {
				IndexDomain: (sulf_name,yr);
			}
			Parameter AnnualCoalProduction_mtyp_tons {
				IndexDomain: (mtyp_name,yr);
			}
			Parameter AnnualCoalProduction_supcrv_tons {
				IndexDomain: (sreg_name,mtyp_name,rank_name,sulf_name,yr);
			}
			Parameter AnnualCoalProduction_supcrv1_tons {
				IndexDomain: (Scrv1,yr);
			}
			Parameter AnnualCoalProduction_supcrv2_tons {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Range: free;
			}
			Parameter AnnualSupplyCurveQty_tons {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,Scrv1Step,yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name);
				Definition: sum((SReg, Sulf, Mtyp, Rank,Scrv1Step_x)| Scrv1Step_x<=Scrv1Step, SC_QUAN(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step_x,yr) );
			}
			Parameter AnnualSupplyCurvePrc_87USDtons {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,Scrv1Step,yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name);
				Definition: sum((SReg, Sulf, Mtyp, Rank), SC_PRICE87(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr));
			}
			Parameter AnnualSupplyCurvePrc_BYUSDtons {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,Scrv1Step,yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name);
				Definition: sum((SReg, Sulf, Mtyp, Rank), SC_PRICE_BYDollars(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr));
			}
			Parameter AnnualSupplyCurveQty_tons1 {
				IndexDomain: (Scrv1,Scrv1Step,yr);
			}
			Parameter AnnualSupplyCurvePrc_87USDtons1 {
				IndexDomain: (Scrv1,Scrv1Step,yr);
			}
			Parameter AnnualSupplyCurvePrc_BYUSDtons1 {
				IndexDomain: (Scrv1,Scrv1Step,yr);
			}
			Parameter Display_AnnualCoalProduction_Total {
				IndexDomain: yr;
				Definition: {
					if Switch_MMst then
					  AnnualCoalProduction_Total_tons(yr)
					elseif Switch_TBTU then
					  AnnualCoalProduction_Total(yr)
					endif
				}
			}
			Parameter Select_AnnualCoalProduction_Total {
				IndexDomain: yr;
			}
			Parameter Display_AnnualCoalProduction {
				IndexDomain: (sreg_agg,yr);
				Text: "Coal Production";
				Definition: {
					if Switch_MMst then
					  AnnualCoalProduction_tons(sreg_agg, yr)
					elseif Switch_TBTU then
					  AnnualCoalProduction(sreg_agg, yr)
					endif
				}
			}
			Parameter Display_AnnualCoalProduction_reg {
				IndexDomain: (sreg_name,yr);
				Definition: {
					if Switch_MMst then
					  AnnualCoalProduction_reg_tons(sreg_name, yr)
					elseif Switch_TBTU then
					  AnnualCoalProduction_reg(sreg_name, yr)
					endif
				}
			}
			Parameter Select_AnnualCoalProduction_reg {
				IndexDomain: (allreg,yr);
				Definition: {
					if allreg=USTotal then
					  sum(sreg_name, Display_AnnualCoalProduction_reg(sreg_name, yr))
					else
					  Display_AnnualCoalProduction_reg(allreg, yr)
					endif
				}
			}
			Parameter Select_AnnualCoalProduction_supcrv {
				IndexDomain: (Scrv1,yr);
			}
			Parameter Select_AnnualCoalProduction {
				IndexDomain: (sreg_agg,yr);
			}
			Parameter Display_AnnualCoalProduction_rank {
				IndexDomain: (rank_name,yr);
				Definition: {
					if Switch_MMst then
					  AnnualCoalProduction_rank_tons(rank_name, yr)
					elseif Switch_TBTU then
					  AnnualCoalProduction_rank(rank_name, yr)
					endif
				}
			}
			Parameter Display_AnnualCoalProduction_sulf {
				IndexDomain: (sulf_name,yr);
				Definition: {
					if Switch_MMst then
					  AnnualCoalProduction_sulf_tons(sulf_name, yr)
					elseif Switch_TBTU then
					  AnnualCoalProduction_sulf(sulf_name, yr)
					endif
				}
			}
			Parameter Display_AnnualCoalProduction_mtyp {
				IndexDomain: (mtyp_name,yr);
				Definition: {
					if Switch_MMst then
					  AnnualCoalProduction_mtyp_tons(mtyp_name, yr)
					elseif Switch_TBTU then
					  AnnualCoalProduction_mtyp(mtyp_name, yr)
					endif
				}
			}
			Parameter Display_AnnualCoalProduction_supcrv {
				IndexDomain: (sreg_name,mtyp_name,rank_name,sulf_name,yr);
				Definition: {
					if Switch_MMst then
					  AnnualCoalProduction_supcrv_tons(sreg_name, mtyp_name, rank_name, sulf_name, yr)
					elseif Switch_TBTU then
					  AnnualCoalProduction_supcrv(sreg_name, mtyp_name, rank_name, sulf_name, yr)
					endif
				}
			}
			Parameter Display_AnnualCoalProduction_supcrv1 {
				IndexDomain: (Scrv1,yr);
				Definition: {
					if Switch_MMst then
					  AnnualCoalProduction_supcrv1_tons(Scrv1, yr)
					elseif Switch_TBTU then
					  AnnualCoalProduction_supcrv1(Scrv1, yr)
					endif
				}
			}
			Parameter Display_AnnualCoalProduction_supcrv2 {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Definition: {
					if Switch_MMst then
					  AnnualCoalProduction_supcrv2_tons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)
					elseif Switch_TBTU then
					  AnnualCoalProduction_supcrv2(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)
					endif
				}
			}
			Parameter Display_AnnualSupplyCurveQty {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,Scrv1Step,yr);
				Definition: AnnualSupplyCurveQty_tons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr);
			}
			Parameter Display_AnnualSupplyCurvePrc_87USD {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,Scrv1Step,yr);
				Definition: AnnualSupplyCurvePrc_87USDtons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr);
			}
			Parameter Display_AnnualSupplyCurvePrc_BYUSD {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,Scrv1Step,yr);
				Definition: Display_AnnualSupplyCurvePrc_87USD(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
			}
			Parameter Display_AnnualSupplyCurvePQ_BYUSD {
				IndexDomain: (pq,Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,Scrv1Step,yr);
			}
			Parameter Display_AnnualSupplyCurveQty1 {
				IndexDomain: (Scrv1,Scrv1Step,yr);
				Definition: {
					sum((sreg_name, sulf_name, mtyp_name, rank_name), AnnualSupplyCurveQty_tons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr));
				}
			}
			Parameter Display_AnnualSupplyCurvePrc_87USD1 {
				IndexDomain: (Scrv1,Scrv1Step,yr);
				Definition: sum((sreg_name, sulf_name, mtyp_name, rank_name), AnnualSupplyCurvePrc_87USDtons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr));
			}
			Parameter Display_AnnualSupplyCurvePrc_BYUSD1 {
				IndexDomain: (Scrv1,Scrv1Step,yr);
				Definition: sum((sreg_name, sulf_name, mtyp_name, rank_name), AnnualSupplyCurvePrc_87USDtons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear)));
			}
			Parameter SelectUSTotal {
				Range: binary;
			}
		}
		DeclarationSection Demand_Declarations {
			Parameter AnnualAllSectorTransportTrill {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter AnnualAllSectorTransportTons {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Dmd_AllSectorTransportTrill {
				IndexDomain: (sec_name, subsec_name, Dreg_name, yr);
			}
			Parameter Dmd_AllSectorTransportTons {
				IndexDomain: (sec_name, subsec_name, Dreg_name, yr);
			}
			Parameter Dreg_AllSectorTransportTrill {
				IndexDomain: (Dreg_name, yr);
			}
			Parameter Dreg_AllSectorTransportTons {
				IndexDomain: (Dreg_name, yr);
			}
			Parameter Sect_AllSectorTransportTrill {
				IndexDomain: (sec_name, subsec_name, yr);
			}
			Parameter Sect_AllSectorTransportTons {
				IndexDomain: (sec_name, subsec_name, yr);
			}
			Parameter NEMSSectorDemand {
				IndexDomain: (allsec,cd_name,yr);
			}
			Parameter RegDemand {
				IndexDomain: (subsec_name,Dreg_name,yr);
			}
			Parameter NEMSSectorDemandTons {
				IndexDomain: (allsec,cd_name,yr);
			}
			Parameter RegDemandTons {
				IndexDomain: (subsec_name,Dreg_name,yr);
			}
			Parameter Display_AnnualAllSectorTransport {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: {
					if Switch_MMst then
					  AnnualAllSectorTransportTons(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)
					elseif Switch_TBTU then
					  AnnualAllSectorTransportTrill(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)
					endif
				}
			}
			Parameter Display_Dmd_AllSectorTransport {
				IndexDomain: (sec_name, subsec_name, Dreg_name, yr);
				Definition: {
					if Switch_MMst then
					  Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr)
					elseif Switch_TBTU then
					  Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr)
					endif
				}
			}
			Parameter Display_Dreg_AllSectorTransport {
				IndexDomain: (Dreg_name, yr);
				Definition: {
					if Switch_MMst then
					  Dreg_AllSectorTransportTons(Dreg_name, yr)
					elseif Switch_TBTU then
					  Dreg_AllSectorTransportTrill(Dreg_name, yr)
					endif
				}
			}
			Parameter Display_Sect_AllSectorTransport {
				IndexDomain: (sec_name, subsec_name, yr);
				Definition: {
					if Switch_MMst then
					  Sect_AllSectorTransportTons(sec_name, subsec_name, yr)
					elseif Switch_TBTU then
					  Sect_AllSectorTransportTrill(sec_name, subsec_name, yr)
					endif
				}
			}
			Parameter Display_NEMSSectorDemand {
				IndexDomain: (allsec,cd_name,yr);
				Definition: {
					if Switch_MMst then
					  NEMSSectorDemandTons(allsec, cd_name, yr)
					elseif Switch_TBTU then
					  NEMSSectorDemand(allsec, cd_name, yr)
					endif
				}
			}
			Parameter Display_RegDemand {
				IndexDomain: (sec_name,subsec_name,Dreg_name,yr)|map_SectorNames(sec_name, subsec_name);
				Definition: {
					if Switch_MMst then
					  RegDemandTons(subsec_name, Dreg_name, yr)
					elseif Switch_TBTU then
					  RegDemand(subsec_name, Dreg_name, yr)
					endif
				}
			}
			Parameter Display_MajorSect_AllSectorTransport {
				IndexDomain: (sec_name, yr);
				Definition: sum(subsec_name, Display_Sect_AllSectorTransport(sec_name, subsec_name, yr));
			}
			Parameter Display_NEMSDemand {
				IndexDomain: (cd_name,yr);
				Definition: sum(sec_name, Display_NEMSSectorDemand(sec_name, cd_name, yr));
			}
			Parameter Display_NEMSALLSectorDemand {
				IndexDomain: (allsec,cd_name,yr);
				Definition: Display_NEMSSectorDemand(allsec, cd_name, yr);
			}
			Parameter Display_TotalDemand {
				IndexDomain: yr;
				Definition: {
					sum((sec_name,cd_name) | sec_name<>ExpName and cd_name<>CD_US, Display_NEMSSectorDemand(sec_name, cd_name, yr))
					!sum(sec_name | sec_name<>ExpName, Display_NEMSSectorDemand(sec_name, CD_US, yr))
				}
			}
			Parameter Display_TotalExports {
				IndexDomain: yr;
				Definition: {
					sum((sec_name,cd_name) | sec_name=ExpName and cd_name<>CD_US, Display_NEMSSectorDemand(sec_name, cd_name, yr))
					!sum(sec_name | sec_name<>ExpName, Display_NEMSSectorDemand(sec_name, CD_US, yr))
				}
			}
			Parameter Display_TotalImports {
				IndexDomain: yr;
				Definition: sum((nonUSExp_name, Dreg_name, sec_name, subsec_name), Display_ImportDetails(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr));
			}
			Parameter Display_Discrepancy {
				IndexDomain: yr;
				Definition: {
					Display_AnnualCoalProduction_Total(yr) + Display_TotalImports(yr) - 
					Display_TotalDemand(yr) - Display_TotalExports(yr)
				}
			}
		}
		DeclarationSection Importsand_Exports_Declarations {
			Parameter InternationalTransportTrill {
				IndexDomain: (EReg_name,IReg_name,tc_name,yr);
			}
			Parameter InternationalTransportTons {
				IndexDomain: (EReg_name,IReg_name,tc_name,yr);
			}
			Parameter Display_InternationalTransport {
				IndexDomain: (EReg_name,IReg_name,tc_name,yr);
				Text: "International Transport";
				Definition: {
					if Switch_MMst then
					  InternationalTransportTons(EReg_name, IReg_name, tc_name, yr)
					elseif Switch_TBTU then
					  InternationalTransportTrill(EReg_name, IReg_name, tc_name, yr)
					endif
				}
			}
			Parameter Display_InternationalTransportCost {
				IndexDomain: (EReg_name,IReg_name,tc_name,yr);
				Text: "International Transport Cost";
				Definition: {
					if Switch_MMst then
					  InternationalTransportCost_Ton(EReg_name, IReg_name, tc_name, yr) /(MC_JPGDP('1992') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_TBTU then
					  InternationalTransportCost_Btu(EReg_name, IReg_name, tc_name, yr) /(MC_JPGDP('1992') / MC_JPGDP(DisplayDollarYear))
					endif
				}
			}
			Parameter InternationalTransportCost_Ton {
				IndexDomain: (EReg_name,IReg_name,tc_name,yr);
				Text: "International Transport Cost";
				Definition: {
					sum((e,i,tc)| map_ExportRegionNames(e, EReg_name) and map_ImportRegionNames(i, IReg_name) and
					        map_ThermalorCoking(tc, tc_name), InternationalUnitTranportOF92D(e, i, tc, yr))
				}
				Comment: "92$/metric tons";
			}
			Parameter InternationalTransportCost_Btu {
				IndexDomain: (EReg_name,IReg_name,tc_name,yr);
				Text: "International Transport Cost";
				Definition: {
					InternationalTransportCost_Ton(EReg_name, IReg_name, tc_name, yr)*2000./2204.623!now it's in $/short ton
					/$InternationalHeatCont_reports(EReg_name, IReg_name, tc_name, yr) !now it's in $92/mmBtu
				}
				Comment: "$/metric tons";
			}
			Parameter ImportDetailsTrill {
				IndexDomain: (nonUSExp_name,Dreg_name,sec_name,subsec_name,yr);
			}
			Parameter ImportDetailsTons {
				IndexDomain: (nonUSExp_name,Dreg_name,sec_name,subsec_name,yr);
			}
			Parameter Display_ImportDetails {
				IndexDomain: (nonUSExp_name,Dreg_name,sec_name,subsec_name,yr);
				Definition: {
					if Switch_MMst then
					  ImportDetailsTons(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr)
					elseif Switch_TBTU then
					  ImportDetailsTrill(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr)
					endif
				}
			}
			Parameter Display_ImportDetailsSec {
				IndexDomain: (nonUSExp_name,Dreg_name,sec_name,yr);
				Definition: sum(subsec_name| map_SectorNames(sec_name, subsec_name),Display_ImportDetails(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr));
			}
			Parameter InternationalHeatCont_reports {
				IndexDomain: (EReg_name,IReg_name,tc_name,yr);
				Definition: InternationalTransportTrill(EReg_name, IReg_name, tc_name, yr)/$InternationalTransportTons(EReg_name, IReg_name, tc_name, yr);
			}
		}
		DeclarationSection Price_Declarations {
			Parameter MinemouthPriceMMBtu {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
			}
			Parameter MinemouthPriceTons {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
			}
			Parameter Display_MinemouthPrice {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name);
				Definition: {
					if Switch_MMst then
					  MinemouthPriceTons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_TBTU then
					  MinemouthPriceMMBtu(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					endif
				}
			}
			Parameter Display_MinemouthPrice_Scrv {
				IndexDomain: (Scrv1,yr);
				Definition: sum((sreg_name, sulf_name, mtyp_name, rank_name)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name), Display_MinemouthPrice(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr));
			}
			Parameter AllSectorsTransportCost {
				IndexDomain: (Scrv1,SReg,Sulf,Mtyp,Rank,Subsec,DReg,yr)|Btu2(SReg,Sulf,Mtyp,Rank) and Map_reportingyears(yr);
			}
			Parameter AllSectorTransportCost_DetailMMBTU {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter AllSectorTransportCost_DetailTon {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter AllSectorTransportCost_Detail {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Display_AllSectorTransportCost_Detail {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: {
					if Switch_MMst then
					  AllSectorTransportCost_DetailTon(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_TBTU then
					  AllSectorTransportCost_DetailMMBTU(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_Total then   
					  AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))  
					endif
				}
			}
			Parameter AllSectorPrice_DetailMMBTU {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter AllSectorPrice_DetailTon {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Display_AllSectorPrice_Detail {
				IndexDomain: {
					(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
					     map_SectorNames(sec_name, subsec_name)
				}
				Definition: {
					if Switch_MMst then
					  AllSectorPrice_DetailTon(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr) /
					           (MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_TBTU then
					  AllSectorPrice_DetailMMBTU(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr) /
					           (MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					endif
				}
			}
			Parameter AllSectorPrice_MMBTU {
				IndexDomain: (allsec, Dreg_name, yr);
			}
			Parameter AllSectorPrice_Ton {
				IndexDomain: (allsec, Dreg_name, yr);
			}
			Parameter Display_AllSectorPrice {
				IndexDomain: (allsec, Dreg_name, yr);
				Definition: {
					if Switch_MMst then
					  AllSectorPrice_Ton(allsec, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_TBTU then
					  AllSectorPrice_MMBTU(allsec, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					endif
				}
			}
			Parameter NEMSSectorPrice_MMBTU {
				IndexDomain: (allsec, cd_name, yr);
			}
			Parameter NEMSSectorPrice_Ton {
				IndexDomain: (allsec, cd_name, yr);
			}
			Parameter Display_NEMSSectorPrice {
				IndexDomain: (allsec, cd_name, yr);
				Definition: {
					if Switch_MMst then
					  NEMSSectorPrice_Ton(allsec, cd_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_TBTU then
					  NEMSSectorPrice_MMBTU(allsec, cd_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					endif
				}
			}
			Parameter AllSectorRevenue_Detailed {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Copy_AllSectorRevenue_Detailed {
				IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter AllSectorRevenue {
				IndexDomain: (sec_name, Dreg_name, yr);
			}
		}
		DeclarationSection Color_Declaration {
			ElementParameter ProdColor1 {
				IndexDomain: (sreg_name,yr);
				Range: AllColors;
			}
			ElementParameter ProdColorE1 {
				IndexDomain: (sreg_agg,yr);
				Range: AllColors;
			}
			ElementParameter ProdColorE12 {
				IndexDomain: (sreg_name,yr);
				Range: AllColors;
			}
			ElementParameter ProdColor2 {
				IndexDomain: (Scrv1,yr);
				Range: AllColors;
			}
			ElementParameter ProdColor5 {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Range: AllColors;
			}
			ElementParameter ProdColorE3 {
				IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Range: AllColors;
			}
			ElementParameter ProdColor3 {
				IndexDomain: (Scrv1);
				Range: AllColors;
			}
			ElementParameter ProdColor4 {
				IndexDomain: (Scrv1);
				Range: AllColors;
			}
			ElementParameter DmdColor1 {
				IndexDomain: (Dreg_name,yr);
				Range: AllColors;
			}
		}
		Procedure Calculate_report_totals {
			Body: {
				
				read from file "coalmapping.txt";
				
				if not DisplayDollarYear then
				  DisplayDollarYear:='1987';
				endif;
				
				Calculate_production; !supply related parameters
				Calculate_demands_and_transport;  !demands, transported volumes, international trade
				Calculate_prices; !minemouth and delivered prices
			}
		}
		Procedure Calculate_production {
			Body: {
				AnnualCoalProduction_Total(yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr));
				AnnualCoalProduction(sreg_agg, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_SupRegions_Aggregated(sreg_agg, SReg), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr));
				AnnualCoalProduction_reg(sreg_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_SupRegions(sreg_name, SReg), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr));
				AnnualCoalProduction_rank(rank_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_rank_CoalRankName(Rank, rank_name), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr));
				AnnualCoalProduction_sulf(sulf_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_Sulf_SulfName(Sulf, sulf_name), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr));
				AnnualCoalProduction_mtyp(mtyp_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_MTyp_MTypName(Mtyp, mtyp_name), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr));
				AnnualCoalProduction_supcrv(sreg_name, mtyp_name, rank_name, sulf_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_MTyp_MTypName(Mtyp, mtyp_name) and map_Sulf_SulfName(Sulf, sulf_name) and
				         map_rank_CoalRankName(Rank, rank_name) and map_SupRegions(sreg_name, SReg), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr));
				AnnualCoalProduction_supcrv1(Scrv1, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_scrv1_types(Scrv1, SReg, Sulf, Mtyp, Rank), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr));
				AnnualCoalProduction_supcrv2((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):= 
				     sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)| map_scrv1_types(Scrv1, SReg, Sulf, Mtyp, Rank), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr));
				
				!
				
				AnnualCoalProduction_Total_tons(yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr)/$Btu2(SReg, Sulf, Mtyp, Rank));
				AnnualCoalProduction_tons(sreg_agg, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_SupRegions_Aggregated(sreg_agg, SReg) , ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr)/$Btu2(SReg, Sulf, Mtyp, Rank));
				AnnualCoalProduction_reg_tons(sreg_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_SupRegions(sreg_name, SReg) , ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr)/$Btu2(SReg, Sulf, Mtyp, Rank));
				AnnualCoalProduction_rank_tons(rank_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_rank_CoalRankName(Rank, rank_name) , ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr)/$Btu2(SReg, Sulf, Mtyp, Rank));
				AnnualCoalProduction_sulf_tons(sulf_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_Sulf_SulfName(Sulf, sulf_name) , ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr)/$Btu2(SReg, Sulf, Mtyp, Rank));
				AnnualCoalProduction_mtyp_tons(mtyp_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_MTyp_MTypName(Mtyp, mtyp_name) , ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr)/$Btu2(SReg, Sulf, Mtyp, Rank));
				AnnualCoalProduction_supcrv_tons(sreg_name, mtyp_name, rank_name, sulf_name, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_MTyp_MTypName(Mtyp, mtyp_name) and map_Sulf_SulfName(Sulf, sulf_name) and
				         map_rank_CoalRankName(Rank, rank_name) and map_SupRegions(sreg_name, SReg) , ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr)/$Btu2(SReg, Sulf, Mtyp, Rank));
				AnnualCoalProduction_supcrv1_tons(Scrv1, yr):= sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)|map_scrv1_types(Scrv1, SReg, Sulf, Mtyp, Rank), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr)/$Btu2(SReg, Sulf, Mtyp, Rank));
				AnnualCoalProduction_supcrv2_tons((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):= 
				     sum((SReg, Sulf, Mtyp, Rank, Scrv1Step)| map_scrv1_types(Scrv1, SReg, Sulf, Mtyp, Rank), ProductionVolumeStepsDetail(SReg, Sulf, Mtyp, Rank, Scrv1Step, yr)/$Btu2(SReg, Sulf, Mtyp, Rank));
				
				
				!Construct cmulative supply curves --moved to definition
				
				!AnnualSupplyCurvePrc_87USDtons((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):=
				!         sum((SReg, Sulf, Mtyp, Rank), SC_PRICE87(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr));
				!AnnualSupplyCurvePrc_BYUSDtons((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):=
				!         sum((SReg, Sulf, Mtyp, Rank), SC_PRICE_BYDollars(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step,yr));
				!AnnualSupplyCurveQty_tons((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr) |map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):=
				!          sum((SReg, Sulf, Mtyp, Rank,Scrv1Step_x)| Scrv1Step_x<=Scrv1Step, SC_QUAN(Scrv1,SReg,Sulf,Mtyp,Rank,Scrv1Step_x,yr) );
				
				
				!Display_AnnualSupplyCurvePrc_87USD(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr):=AnnualSupplyCurvePrc_87USDtons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr);
				!Display_AnnualSupplyCurvePrc_BYUSD(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr):=AnnualSupplyCurvePrc_BYUSDtons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr);
				!Display_AnnualSupplyCurveQty(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr):=AnnualSupplyCurveQty_tons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr);
				
				Display_AnnualSupplyCurvePQ_BYUSD('Price',Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,Scrv1Step,yr):=Display_AnnualSupplyCurvePrc_BYUSD(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr);
				Display_AnnualSupplyCurvePQ_BYUSD('Quantity',Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,Scrv1Step,yr):=Display_AnnualSupplyCurveQty(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr);
				
				!Display_AnnualSupplyCurvePrc_87USD1(Scrv1, Scrv1Step, yr):=sum((sreg_name, sulf_name, mtyp_name, rank_name), AnnualSupplyCurvePrc_87USDtons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr));
				!Display_AnnualSupplyCurvePrc_BYUSD1(Scrv1, Scrv1Step, yr):=sum((sreg_name, sulf_name, mtyp_name, rank_name), AnnualSupplyCurvePrc_BYUSDtons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr));
				!Display_AnnualSupplyCurveQty1(Scrv1, Scrv1Step, yr):=sum((sreg_name, sulf_name, mtyp_name, rank_name), AnnualSupplyCurveQty_tons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, Scrv1Step, yr));
				!
			}
		}
		Procedure Calculate_demands_and_transport {
			Body: {
				
				!transport parameters
				
				AnnualAllSectorTransportTrill((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)):=
				         sum((Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) and map_SubSectorNames(subsec_name, Subsec) 
				         and map_DmdRegs(Dreg_name, DReg)and map_SectorNames(sec_name, subsec_name), AllSectorsTransportTrills(Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg, yr));
				AnnualAllSectorTransportTons(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				         sum((Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) and map_SubSectorNames(subsec_name, Subsec) 
				         and map_DmdRegs(Dreg_name, DReg) and map_SectorNames(sec_name, subsec_name), AllSectorsTransportTrills(Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg, yr)/$Btu(Scrv1, SReg, Sulf, Mtyp, Rank));
				Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr):= sum((Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg)| map_SubSectorNames(subsec_name, Subsec) 
				         and map_DmdRegs(Dreg_name, DReg) and map_SectorNames(sec_name, subsec_name), AllSectorsTransportTrills(Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg, yr)); 
				Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr):= sum((Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg)| map_SubSectorNames(subsec_name, Subsec) 
				         and map_DmdRegs(Dreg_name, DReg) and map_SectorNames(sec_name, subsec_name), AllSectorsTransportTrills(Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg, yr)/$Btu(Scrv1, SReg, Sulf, Mtyp, Rank));         
				Dreg_AllSectorTransportTrill(Dreg_name, yr):=  sum((Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg)| map_DmdRegs(Dreg_name, DReg), 
				         AllSectorsTransportTrills(Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg, yr));               
				Dreg_AllSectorTransportTons(Dreg_name, yr):=  sum((Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg)| map_DmdRegs(Dreg_name, DReg), 
				         AllSectorsTransportTrills(Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg, yr)/$Btu(Scrv1, SReg, Sulf, Mtyp, Rank));               
				Sect_AllSectorTransportTrill(sec_name, subsec_name, yr):=sum((Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg)| map_SubSectorNames(subsec_name, Subsec) 
				         and map_SectorNames(sec_name, subsec_name), AllSectorsTransportTrills(Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg, yr));  
				Sect_AllSectorTransportTons(sec_name, subsec_name, yr):=sum((Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg)| map_SubSectorNames(subsec_name, Subsec) 
				         and map_SectorNames(sec_name, subsec_name), AllSectorsTransportTrills(Scrv1, SReg, Sulf, Mtyp, Rank, Subsec, DReg, yr)/$Btu(Scrv1, SReg, Sulf, Mtyp, Rank));
				
				!demands
				RegDemand((subsec_name, Dreg_name, yr)| map_SectorNames(ElecName, subsec_name)):=sum((pt2, DReg)| map_pt2SubsecNames(subsec_name, pt2) and map_DmdRegs(Dreg_name, DReg),Qdutzr(pt2,DReg,yr));
				RegDemand((subsec_name, Dreg_name, yr)| map_SectorNames(ResName, subsec_name)):=sum((ResSec, DReg)| map_SubSectorNames(subsec_name, ResSec) and map_DmdRegs(Dreg_name, DReg), ResidCommDemand(ResSec, DReg, yr));
				RegDemand((subsec_name, Dreg_name, yr)| map_SectorNames(IndName, subsec_name)):=sum((IndSec, DReg)| map_SubSectorNames(subsec_name, IndSec) and map_DmdRegs(Dreg_name, DReg), IndustrialDemand(IndSec, DReg, yr));
				RegDemand((subsec_name, Dreg_name, yr)| map_SectorNames(CokName, subsec_name)):=sum((CokSec, DReg)| map_SubSectorNames(subsec_name, CokSec) and map_DmdRegs(Dreg_name, DReg), CokingDemand(CokSec, DReg, yr));
				RegDemand((subsec_name, Dreg_name, yr)| map_SectorNames(LiquName, subsec_name)):=sum((LiquSec, DReg)| map_SubSectorNames(subsec_name, LiquSec) and map_DmdRegs(Dreg_name, DReg), LiquidDemand(DReg, yr));
				RegDemand((subsec_name, Dreg_name, yr)| map_SectorNames(ExpName, subsec_name)):=sum(sec_name|map_SectorNames(ExpName, subsec_name), Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr));
				
				NEMSSectorDemand(ElecName, cd_name, yr):=sum(CensDiv|map_CensDivNames(cd_name, CensDiv), qclel_A(CensDiv, yr));
				NEMSSectorDemand(ResName, cd_name, yr):=sum(CensDiv|map_CensDivNames(cd_name, CensDiv), Qclrs(CensDiv, yr)+Qclcm(CensDiv, yr));
				NEMSSectorDemand(LiquName, cd_name, yr):=sum((subsec_name, Dreg_name)|map_CDname_DRegname(cd_name, Dreg_name) and map_SectorNames(LiquName, subsec_name),RegDemand(subsec_name, Dreg_name, yr) );
				NEMSSectorDemand(IndName, cd_name, yr):=sum(CensDiv|map_CensDivNames(cd_name, CensDiv), Qclin(CensDiv, yr));
				NEMSSectorDemand(CokName, cd_name, yr):=sum(CensDiv|map_CensDivNames(cd_name, CensDiv), Qmcin(CensDiv, yr));
				NEMSSectorDemand(ExpName, cd_name, yr):=sum((subsec_name, Dreg_name)|map_CDname_DRegname(cd_name, Dreg_name) and map_SectorNames(ExpName, subsec_name),RegDemand(subsec_name, Dreg_name, yr) );
				NEMSSectorDemand(ExpName, CD_US, yr):=sum((subsec_name, Dreg_name)| map_SectorNames(ExpName, subsec_name),RegDemand(subsec_name, Dreg_name, yr) );
				NEMSSectorDemand(sec_name, CD_US, yr):=sum(cd_name| cd_name<>CD_US, NEMSSectorDemand(sec_name, cd_name, yr) );
				NEMSSectorDemand(AllSectors, cd_name, yr):=sum(sec_name, NEMSSectorDemand(sec_name, cd_name, yr));
				
				RegDemandTons(subsec_name, Dreg_name, yr):=RegDemand(subsec_name, Dreg_name, yr) * 
				    sum(sec_name| map_SectorNames(sec_name, subsec_name), (Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr)/$Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr)));
				NEMSSectorDemandTons(sec_name, cd_name, yr):=NEMSSectorDemand(sec_name, cd_name, yr) *
				    sum((subsec_name, Dreg_name)|map_CDname_DRegname(cd_name, Dreg_name) and map_SectorNames(sec_name, subsec_name), Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr))/$
				    sum((subsec_name, Dreg_name)|map_CDname_DRegname(cd_name, Dreg_name) and map_SectorNames(sec_name, subsec_name), Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr));
				NEMSSectorDemandTons(sec_name, CD_US, yr):=sum(cd_name| cd_name<>CD_US, NEMSSectorDemandTons(sec_name, cd_name, yr) );
				NEMSSectorDemandTons(AllSectors, cd_name, yr):=sum(sec_name, NEMSSectorDemandTons(sec_name, cd_name, yr));
				
				!international transport
				InternationalTransportTrill(nonUSExp_name, IReg_name, tc_name, yr):=sum((nUS,i,tc)| map_ExportRegionNames(nUS, nonUSExp_name) and map_ImportRegionNames(i, IReg_name) and
				        map_ThermalorCoking(tc, tc_name), OutputTransportNonUS(nUS,i,tc,yr));
				InternationalTransportTons(nonUSExp_name, IReg_name, tc_name, yr):=sum((nUS,i,tc)| map_ExportRegionNames(nUS, nonUSExp_name) and map_ImportRegionNames(i, IReg_name) and
				        map_ThermalorCoking(tc, tc_name), OutputTransportNonUS(nUS,i,tc,yr)/$InternationalHeatContent(nUS,tc));        
				InternationalTransportTrill(USExp_name, nonUSimp_name, tc_name, yr):=sum((USe,NonUSi,tc)| map_ExportRegionNames(USe, USExp_name) and map_ImportRegionNames(NonUSi, nonUSimp_name) and
				        map_ThermalorCoking(tc, tc_name), OutputExportFromUSTrils(USe,NonUSi,tc,yr));
				InternationalTransportTons(USExp_name, nonUSimp_name, CokingName, yr):=sum((USe,NonUSi)| map_ExportRegionNames(USe, USExp_name) and map_ImportRegionNames(NonUSi, nonUSimp_name),
				        OutputTonsTransportUSbyImporterCoking(USe,NonUSi,yr) );        
				InternationalTransportTons(USExp_name, nonUSimp_name, ThermalName, yr):=sum((USe,NonUSi)| map_ExportRegionNames(USe, USExp_name) and map_ImportRegionNames(NonUSi, nonUSimp_name),
				        OutputTonsTransportUSbyImporterThermal(USe,NonUSi,yr) );
				
				!imports electric sector
				ImportDetailsTrill((nonUSExp_name, Dreg_name, ElecName, subsec_name, yr)| map_SectorNames(ElecName, subsec_name)):= sum((nUS,USi,DReg,pt2) | map_ExportRegionNames(nUS, nonUSExp_name) and
				        map_DmdRegs(Dreg_name, DReg) and map_pt2SubsecNames(subsec_name, pt2),ImportsElectricityTrillsDetail2(nUS,USi,DReg,pt2,yr));
				ImportDetailsTons((nonUSExp_name, Dreg_name, ElecName, subsec_name, yr)| map_SectorNames(ElecName, subsec_name)):= ImportDetailsTrill(nonUSExp_name, Dreg_name, ElecName, subsec_name, yr)/$
				        sum(nUS | map_ExportRegionNames(nUS, nonUSExp_name), InternationalHeatContent(nUS,'2'));  
				
				!imports industrial sector
				ImportDetailsTrill((nonUSExp_name, Dreg_name, IndName, subsec_name, yr)| map_SectorNames(IndName, subsec_name)):= sum((IndSec,DReg,nUS,USi)| map_SubSectorNames(subsec_name, IndSec) and
				        map_DmdRegs(Dreg_name, DReg) and map_ExportRegionNames(nUS, nonUSExp_name), ImportsIndustrial(IndSec,DReg,nUS,USi,yr));
				ImportDetailsTons((nonUSExp_name, Dreg_name, IndName, subsec_name, yr)| map_SectorNames(IndName, subsec_name)):= sum((IndSec,DReg,nUS,USi)| map_SubSectorNames(subsec_name, IndSec) and
				        map_DmdRegs(Dreg_name, DReg) and map_ExportRegionNames(nUS, nonUSExp_name), ImportsIndustrial(IndSec,DReg,nUS,USi,yr)/$InternationalHeatContent(nUS,'2'));  
				
				!imports metallurgical coking sector
				ImportDetailsTrill((nonUSExp_name, Dreg_name, CokName, subsec_name, yr)| map_SectorNames(CokName, subsec_name)):= sum((CokSec,DReg,nUS,USi)| map_SubSectorNames(subsec_name, CokSec) and
				        map_DmdRegs(Dreg_name, DReg) and map_ExportRegionNames(nUS, nonUSExp_name), ImportsCoking(CokSec,DReg,nUS,USi,yr));
				ImportDetailsTons((nonUSExp_name, Dreg_name, CokName, subsec_name, yr)| map_SectorNames(CokName, subsec_name)):= sum((CokSec,DReg,nUS,USi)| map_SubSectorNames(subsec_name, CokSec) and
				        map_DmdRegs(Dreg_name, DReg) and map_ExportRegionNames(nUS, nonUSExp_name), ImportsCoking(CokSec,DReg,nUS,USi,yr)/$InternationalHeatContent(nUS,'1'));
				
				!international transport cost
			}
		}
		Procedure Calculate_prices {
			Body: {
				!Minemouth prices
				MinemouthPriceMMBtu((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):= 
				     sum((SReg, Sulf, Mtyp, Rank)| map_scrv1_types(Scrv1, SReg, Sulf, Mtyp, Rank),PriceByYr(SReg, Sulf, Mtyp, Rank, yr));
				MinemouthPriceTons((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):= 
				     sum((SReg, Sulf, Mtyp, Rank)| map_scrv1_types(Scrv1, SReg, Sulf, Mtyp, Rank),PriceByYr(SReg, Sulf, Mtyp, Rank, yr)*Btu2(SReg, Sulf, Mtyp, Rank));     
				
				!Transportation Costs
				temp_AllSectorsTransportCost((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, subsec_name, Dreg_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name)):=
				     sum((SReg, Sulf, Mtyp, Rank, Subsec, DReg)| map_SubSectorNames(subsec_name, Subsec) !map_scrv1_types(Scrv1, SReg, Sulf, Mtyp, Rank) and
				         and map_DmdRegs(Dreg_name, DReg), AllSectorsTransportCost(Scrv1,SReg, Sulf, Mtyp, Rank, Subsec, DReg, yr));
				
				AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				    sum(Scrv1| map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) and map_SectorNames(sec_name, subsec_name),
				    temp_AllSectorsTransportCost(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, subsec_name, Dreg_name, yr));
				
				AllSectorTransportCost_DetailMMBTU(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				   AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/$
				   AnnualAllSectorTransportTrill(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				AllSectorTransportCost_DetailTon(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				   AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/$
				   AnnualAllSectorTransportTons(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				
				!Calculate revenues
				AllSectorRevenue_Detailed((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)| map_SectorNames(sec_name, subsec_name)  ):= 
				  sum(Scrv1| map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) and map_SectorNames(sec_name, subsec_name),
				  AnnualAllSectorTransportTrill(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)*
				  MinemouthPriceMMBtu(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)) +
				  !add transport cost
				 !        temp_AllSectorsTransportCost(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, subsec_name, Dreg_name, yr));
				         AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				
				AllSectorRevenue(sec_name, Dreg_name, yr):=sum((subsec_name, sreg_name, sulf_name, mtyp_name, rank_name)|map_SectorNames(sec_name, subsec_name) and
				  map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name), AllSectorRevenue_Detailed(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr));
				
				!Price per MMBtu
				AllSectorPrice_DetailMMBTU((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
				     map_SectorNames(sec_name, subsec_name)):= AllSectorRevenue_Detailed(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/$
				      AnnualAllSectorTransportTrill(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				
				!Price per Ton
				AllSectorPrice_DetailTon((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
				     map_SectorNames(sec_name, subsec_name)):= AllSectorRevenue_Detailed(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/$
				      AnnualAllSectorTransportTons(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				!prices by Dreg and sector
				AllSectorPrice_MMBTU(sec_name, Dreg_name, yr):= AllSectorRevenue(sec_name, Dreg_name, yr)/$
				      sum(subsec_name|map_SectorNames(sec_name, subsec_name), Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr));   
				AllSectorPrice_Ton(sec_name, Dreg_name, yr):= AllSectorRevenue(sec_name, Dreg_name, yr)/$
				      sum(subsec_name|map_SectorNames(sec_name, subsec_name), Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr));
				AllSectorPrice_MMBTU(AllSectors, Dreg_name, yr):= sum(sec_name,AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((sec_name,subsec_name)|map_SectorNames(sec_name, subsec_name),
				                                                   Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr));
				AllSectorPrice_Ton(AllSectors, Dreg_name, yr):= sum(sec_name,AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((sec_name,subsec_name)|map_SectorNames(sec_name, subsec_name),
				                                                   Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr));                                                         
				
				!prices by Census Division and sector
				NEMSSectorPrice_MMBTU(sec_name, cd_name, yr):= if cd_name=CD_US then
				                                                  sum(Dreg_name,AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((subsec_name,Dreg_name)|map_SectorNames(sec_name, subsec_name), Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr))
				                                               else
				                                                  sum(Dreg_name|map_CDname_DRegname(cd_name, Dreg_name),AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((subsec_name,Dreg_name)|map_SectorNames(sec_name, subsec_name) and map_CDname_DRegname(cd_name, Dreg_name),
				                                                   Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr))
				                                               endif;
				NEMSSectorPrice_MMBTU(AllSectors, cd_name, yr):= if cd_name=CD_US then
				                                                  sum((sec_name,Dreg_name),AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((sec_name,subsec_name,Dreg_name)|map_SectorNames(sec_name, subsec_name), Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr))
				                                               else
				                                                  sum((sec_name,Dreg_name)|map_CDname_DRegname(cd_name, Dreg_name),AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((sec_name,subsec_name,Dreg_name)|map_SectorNames(sec_name, subsec_name) and map_CDname_DRegname(cd_name, Dreg_name),
				                                                   Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr))
				                                               endif;                                                   
				NEMSSectorPrice_Ton(sec_name, cd_name, yr):= if cd_name=CD_US then
				                                                  sum(Dreg_name,AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((subsec_name,Dreg_name)|map_SectorNames(sec_name, subsec_name), Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr))
				                                               else
				                                                  sum(Dreg_name|map_CDname_DRegname(cd_name, Dreg_name),AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((subsec_name,Dreg_name)|map_SectorNames(sec_name, subsec_name) and map_CDname_DRegname(cd_name, Dreg_name),
				                                                   Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr))
				                                               endif;
				NEMSSectorPrice_Ton(AllSectors, cd_name, yr):= if cd_name=CD_US then
				                                                  sum((sec_name,Dreg_name),AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((sec_name,subsec_name,Dreg_name)|map_SectorNames(sec_name, subsec_name), Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr))
				                                               else
				                                                  sum((sec_name,Dreg_name)|map_CDname_DRegname(cd_name, Dreg_name),AllSectorRevenue(sec_name, Dreg_name, yr))/$
				                                                  sum((sec_name,subsec_name,Dreg_name)|map_SectorNames(sec_name, subsec_name) and map_CDname_DRegname(cd_name, Dreg_name),
				                                                   Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr))
				                                               endif;
			}
			DeclarationSection temp_Declaration {
				Parameter temp_AllSectorsTransportCost {
					IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,subsec_name,Dreg_name,yr);
				}
			}
		}
		Procedure ConvertTbtu2Tons {
			Body: {
				!if not DisplayDollarYear then
				!  DisplayDollarYear:='1987';
				!endif;
				if Switch_MMst then
				!  Display_AnnualCoalProduction_Total(yr):=AnnualCoalProduction_Total_tons(yr);
				!  Display_AnnualCoalProduction(sreg_agg, yr):=AnnualCoalProduction_tons(sreg_agg, yr);
				!  Display_AnnualCoalProduction_reg(sreg_name, yr):=AnnualCoalProduction_reg_tons(sreg_name, yr);
				!  Display_AnnualCoalProduction_rank(rank_name, yr):=AnnualCoalProduction_rank_tons(rank_name, yr);
				!  Display_AnnualCoalProduction_sulf(sulf_name, yr):=AnnualCoalProduction_sulf_tons(sulf_name, yr);
				!  Display_AnnualCoalProduction_mtyp(mtyp_name, yr):=AnnualCoalProduction_mtyp_tons(mtyp_name, yr);
				!  Display_AnnualCoalProduction_supcrv(sreg_name, mtyp_name, rank_name, sulf_name, yr):=AnnualCoalProduction_supcrv_tons(sreg_name, mtyp_name, rank_name, sulf_name, yr);
				!  Display_AnnualCoalProduction_supcrv1(Scrv1, yr):=AnnualCoalProduction_supcrv1_tons(Scrv1, yr);
				!  Display_AnnualCoalProduction_supcrv2(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr):=AnnualCoalProduction_supcrv2_tons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr);
				
				!  Display_AnnualAllSectorTransport(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				!        AnnualAllSectorTransportTons(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				!  Display_Dmd_AllSectorTransport(sec_name, subsec_name, Dreg_name, yr):=Dmd_AllSectorTransportTons(sec_name, subsec_name, Dreg_name, yr);
				!  Display_Dreg_AllSectorTransport(Dreg_name, yr):=Dreg_AllSectorTransportTons(Dreg_name, yr);
				!  Display_Sect_AllSectorTransport(sec_name, subsec_name, yr):=Sect_AllSectorTransportTons(sec_name, subsec_name, yr);
				!  Display_RegDemand((sec_name, subsec_name, Dreg_name, yr)|map_SectorNames(sec_name, subsec_name)):=RegDemandTons(subsec_name, Dreg_name, yr);
				!  Display_NEMSSectorDemand(allsec, cd_name, yr):=NEMSSectorDemandTons(allsec, cd_name, yr);
				!  Display_InternationalTransport(EReg_name, IReg_name, tc_name, yr):=InternationalTransportTons(EReg_name, IReg_name, tc_name, yr);
				!  Display_ImportDetails(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr):=ImportDetailsTons(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr);
				
				!  Display_MinemouthPrice((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):=
				!           MinemouthPriceTons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				
				!   Display_AllSectorPrice_Detail((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
				!     map_SectorNames(sec_name, subsec_name)):= AllSectorPrice_DetailTon(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr) /
				!           (MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				
				!   Display_AllSectorPrice(allsec, Dreg_name, yr):=AllSectorPrice_Ton(allsec, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				!   Display_NEMSSectorPrice(allsec, cd_name, yr):=NEMSSectorPrice_Ton(allsec, cd_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				
				!   Display_AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				!       AllSectorTransportCost_DetailTon(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));  
				
				!   Display_InternationalTransportCost(EReg_name, IReg_name, tc_name, yr):=InternationalTransportCost_Ton(EReg_name, IReg_name, tc_name, yr) /(MC_JPGDP('1992') / MC_JPGDP(DisplayDollarYear)); 
				
				elseif Switch_TBTU then
				!  Display_AnnualCoalProduction_Total(yr):=AnnualCoalProduction_Total(yr);
				!  Display_AnnualCoalProduction(sreg_agg, yr):=AnnualCoalProduction(sreg_agg, yr);
				!  Display_AnnualCoalProduction_reg(sreg_name, yr):=AnnualCoalProduction_reg(sreg_name, yr);
				!  Display_AnnualCoalProduction_rank(rank_name, yr):=AnnualCoalProduction_rank(rank_name, yr);
				!  Display_AnnualCoalProduction_sulf(sulf_name, yr):=AnnualCoalProduction_sulf(sulf_name, yr);
				!  Display_AnnualCoalProduction_mtyp(mtyp_name, yr):=AnnualCoalProduction_mtyp(mtyp_name, yr);
				!  Display_AnnualCoalProduction_supcrv(sreg_name, mtyp_name, rank_name, sulf_name, yr):=AnnualCoalProduction_supcrv(sreg_name, mtyp_name, rank_name, sulf_name, yr);
				!  Display_AnnualCoalProduction_supcrv1(Scrv1, yr):=AnnualCoalProduction_supcrv1(Scrv1, yr);
				!  Display_AnnualCoalProduction_supcrv2(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr):=AnnualCoalProduction_supcrv2(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr);
				
				!  Display_AnnualAllSectorTransport(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				!        AnnualAllSectorTransportTrill(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				!  Display_Dmd_AllSectorTransport(sec_name, subsec_name, Dreg_name, yr):=Dmd_AllSectorTransportTrill(sec_name, subsec_name, Dreg_name, yr);
				!  Display_Dreg_AllSectorTransport(Dreg_name, yr):=Dreg_AllSectorTransportTrill(Dreg_name, yr);
				!  Display_Sect_AllSectorTransport(sec_name, subsec_name, yr):=Sect_AllSectorTransportTrill(sec_name, subsec_name, yr);
				!  Display_RegDemand((sec_name, subsec_name, Dreg_name, yr)|map_SectorNames(sec_name, subsec_name)):=RegDemand(subsec_name, Dreg_name, yr);
				!  Display_NEMSSectorDemand(allsec, cd_name, yr):=NEMSSectorDemand(allsec, cd_name, yr);
				!  Display_InternationalTransport(EReg_name, IReg_name, tc_name, yr):=InternationalTransportTrill(EReg_name, IReg_name, tc_name, yr);
				!  Display_ImportDetails(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr):=ImportDetailsTrill(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr);
				
				!  Display_MinemouthPrice((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):=
				!           MinemouthPriceMMBtu(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				
				!   Display_AllSectorPrice_Detail((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
				!     map_SectorNames(sec_name, subsec_name)):= AllSectorPrice_DetailMMBTU(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr) /
				!           (MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				
				!   Display_AllSectorPrice(allsec, Dreg_name, yr):=AllSectorPrice_MMBTU(allsec, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				!   Display_NEMSSectorPrice(allsec, cd_name, yr):=NEMSSectorPrice_MMBTU(allsec, cd_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear)); 
				!   Display_AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				!       AllSectorTransportCost_DetailMMBTU(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear)); 
				
				!   Display_InternationalTransportCost(EReg_name, IReg_name, tc_name, yr):=InternationalTransportCost_Btu(EReg_name, IReg_name, tc_name, yr) /(MC_JPGDP('1992') / MC_JPGDP(DisplayDollarYear));      
				
				elseif Switch_Total then   
				!   Display_AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				!       AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));       
				endif;
				
				!Select_AnnualCoalProduction_reg(sreg_name, yr):=Display_AnnualCoalProduction_reg(sreg_name, yr);
				!Select_AnnualCoalProduction_reg(USTotal,  yr):=sum(sreg_name, Display_AnnualCoalProduction_reg(sreg_name, yr));
				!Display_MajorSect_AllSectorTransport(sec_name, yr):=sum(subsec_name, Display_Sect_AllSectorTransport(sec_name, subsec_name, yr));
				!Display_NEMSALLSectorDemand(sec_name, cd_name, yr):=Display_NEMSSectorDemand(sec_name, cd_name, yr);
				!Display_NEMSALLSectorDemand(AllSectors, cd_name, yr):=sum(sec_name, Display_NEMSALLSectorDemand(sec_name, cd_name, yr));
				!Display_ImportDetailsSec(nonUSExp_name, Dreg_name, sec_name, yr):=sum(subsec_name| map_SectorNames(sec_name, subsec_name),Display_ImportDetails(nonUSExp_name, Dreg_name, sec_name, subsec_name, yr));
				!Display_MinemouthPrice_Scrv(Scrv1, yr):=sum((sreg_name, sulf_name, mtyp_name, rank_name)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name), Display_MinemouthPrice(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr));
			}
		}
		Procedure ConvertYearDollars {
			Body: {
				!if not DisplayDollarYear then
				!  DisplayDollarYear:='1987';
				!endif;
				!if Switch_MMst then
				!   Display_MinemouthPrice((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):=
				!           MinemouthPriceTons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				!
				!   Display_AllSectorPrice_Detail((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
				!     map_SectorNames(sec_name, subsec_name)):= AllSectorPrice_DetailTon(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr) /
				!           (MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				!
				!   Display_AllSectorPrice(allsec, Dreg_name, yr):=AllSectorPrice_Ton(allsec, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				!   Display_NEMSSectorPrice(allsec, cd_name, yr):=NEMSSectorPrice_Ton(allsec, cd_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				!
				!   Display_AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				!       AllSectorTransportCost_DetailTon(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));  
				!
				!   Display_InternationalTransportCost(EReg_name, IReg_name, tc_name, yr):=InternationalTransportCost_Ton(EReg_name, IReg_name, tc_name, yr) /(MC_JPGDP('1992') / MC_JPGDP(DisplayDollarYear));    
				!
				!elseif Switch_TBTU then   
				!
				!   Display_MinemouthPrice((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name) ):=
				!           MinemouthPriceMMBtu(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				!
				!   Display_AllSectorPrice_Detail((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
				!     map_SectorNames(sec_name, subsec_name)):= AllSectorPrice_DetailMMBTU(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr) /
				!           (MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				!
				!   Display_AllSectorPrice(allsec, Dreg_name, yr):=AllSectorPrice_MMBTU(allsec, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));
				!   Display_NEMSSectorPrice(allsec, cd_name, yr):=NEMSSectorPrice_MMBTU(allsec, cd_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear)); 
				!   Display_AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				!       AllSectorTransportCost_DetailMMBTU(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear)); 
				!
				!   Display_InternationalTransportCost(EReg_name, IReg_name, tc_name, yr):=InternationalTransportCost_Btu(EReg_name, IReg_name, tc_name, yr) /(MC_JPGDP('1992') / MC_JPGDP(DisplayDollarYear));      
				!
				!elseif Switch_Total then   
				!   Display_AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr):=
				!       AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear));       
				!
				!endif;
				!
				!Display_MinemouthPrice_Scrv(Scrv1, yr):=sum((sreg_name, sulf_name, mtyp_name, rank_name)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name), Display_MinemouthPrice(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr));
				!
			}
		}
		Procedure SetInitialDisplayYear {
			Body: {
				if not DisplayDollarYear then
				  DisplayDollarYear:='1987';
				endif;
			}
		}
		Procedure Load_Initial_CaseFile {
			Body: {
				if (Switch_LoadCycle) then
				        CMMLagDataLoad(FormatString("cases\\cycle%i", CycleNum));
					read from file "coalmapping.txt";
					Calculate_report_totals;
				
				endif;
			}
		}
		Procedure SelectRegInTable1 {
			Arguments: (SelectedReg);
			Body: {
				SelectedRegs+=SelectedReg;
				!Select_AnnualCoalProduction_reg(SelectedReg, yr):=Display_AnnualCoalProduction_reg(SelectedReg, yr);
				ProdColor1(SelectedReg, yr):='Red';
				empty SelectedReg;
			}
			ElementParameter SelectedReg {
				Range: SupReg_Name2;
				Property: Input;
			}
		}
		Procedure SelectRegInTable2 {
			Arguments: (SelectedReg);
			Body: {
				SelectedDregions+=SelectedReg;
				DmdColor1(SelectedReg, yr):='Red';
			}
			ElementParameter SelectedReg {
				Range: DmdReg_name;
				Property: Input;
			}
		}
		Procedure SelectCrvInTable {
			Arguments: (SelectedCrv);
			Body: {
				SelectedCrvs+=SelectedCrv;
				Select_AnnualCoalProduction_supcrv(SelectedCrv, yr):=Display_AnnualCoalProduction_supcrv1(SelectedCrv, yr);
				ProdColor2(SelectedCrv, yr):='Red';
				ProdColor4(SelectedCrv):='Red';
			}
			ElementParameter SelectedCrv {
				Range: SupplyCurveNumber2;
				Property: Input;
			}
		}
		Procedure SelectRegInTableE1 {
			Arguments: (SelectedReg);
			Body: {
				SelSupRegAgg:=SelectedReg;
				ProdColorE1(sreg_agg, yr):='Black';
				ProdColorE1(SelectedReg, yr):='Red';
				empty SelectedReg;
			}
			ElementParameter SelectedReg {
				Range: SupReg_Aggregated;
				Property: Input;
			}
		}
		Procedure SelectRegInTableE12 {
			Arguments: (SelectedReg);
			Body: {
				SelSReg:=SelectedReg;
				ProdColorE12(sreg_name, yr):='Black';
				ProdColorE12(SelectedReg, yr):='Red';
				empty SelectedReg;
			}
			ElementParameter SelectedReg {
				Range: SupReg_Name2;
				Property: Input;
			}
		}
		Procedure SelectCrvInTableE3 {
			Arguments: (SelectedCrv);
			Body: {
				Selected_Crv:=SelectedCrv;
				ProdColorE3(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr):='black';
				ProdColorE3(SelectedCrv, sreg_name, sulf_name, mtyp_name, rank_name, yr):='Red';
			}
			ElementParameter SelectedCrv {
				Range: SupplyCurveNumber2;
				Property: Input;
			}
		}
		Procedure SelectSet {
			Body: {
				!empty Select_AnnualCoalProduction;
				if first(selaggreg1)='Greater Supply Regions' then
				   DisplayAggRegs:= GreaterSupRegions;
				elseif first(selaggreg1)='Mississipi River Regions' then
				   DisplayAggRegs:= E_W_MississippiRegs;
				elseif first(selaggreg1)='US Total' then
				   DisplayAggRegs:= US_Total;
				endif;
			}
		}
		Procedure SelectAll {
			Body: {
				if SelectAll_switch then
				  IntlSelectedYears:=Run_Years;
				else
				  empty IntlSelectedYears;
				endif;
			}
		}
		Procedure SetDefaultCoalTypes {
			Body: {
				if not exists(sulf1) then
				Selected_Sulf:=SulfurGradeName;
				endif;
				if not exists(mine1) then
				Selected_Mine:=MineTypeName;
				endif;
				if not exists(rank1) then
				Selected_Rank:=CoalTypeName;
				endif;
			}
		}
		Procedure Add_USTotal {
			Body: {
				if SelectUSTotal=1 then
				  SelectedUS+=USTotal;
				!  Select_AnnualCoalProduction_reg(USTotal,  yr):=Display_AnnualCoalProduction_Total(yr);
				else
				  empty SelectedUS; !, Select_AnnualCoalProduction_reg(SelectedUS, yr);
				endif;
			}
		}
		Procedure SelectSupCrv {
			Body: {
				SelectedCrvs2:={Scrv1 | Exists((r1, sulf1, mine1, rank1) | map_scrv1_names(Scrv1, r1, sulf1, mine1, rank1)) };
				
				empty ProdColor3,ProdColor5;
				ProdColor3(selcrv1):='cyan';
				ProdColor5((selcrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(selcrv1, sreg_name, sulf_name, mtyp_name, rank_name)):='cyan';
			}
		}
		Procedure ClearSelections {
			Body: {
				empty SelectedRegs;!, Select_AnnualCoalProduction_reg;!(dispreg,yr);
				ProdColor1(sreg_name, yr):='Black';
			}
		}
		Procedure ClearSelections1 {
			Body: {
				empty SelectedCrvs, Select_AnnualCoalProduction_supcrv;
				ProdColor2(Scrv1, yr):='Black';
				ProdColor4(Scrv1):='Black';
			}
		}
		Procedure ClearSelections2 {
			Body: {
				empty SelectedDregions;
				DmdColor1(Dreg_name, yr):='Black';
			}
		}
		Procedure ReloadLagData {
			Body: {
				CMMLagDataLoad("cases\\CMMLagData");
				Calculate_report_totals;
			}
		}
	}
	Section Case_Management {
		Set Report_Identifiers_ {
			SubsetOf: AllIdentifiers;
			Definition: {
				Global_Identifiers_ + CMMLagData_Identifiers + Standalone_Reports;
			}
		}
		Set Comparison_Identifiers {
			SubsetOf: AllIdentifiers;
			Definition: 'AnnualCoalProduction_supcrv2_tons';
		}
		Parameter CaseStringBegin;
		Parameter CaseStringEnd;
		StringParameter CurrentCase_Name {
			Text: "Current Case";
		}
		Parameter SelectCaseStringBegin {
			IndexDomain: IndexCurrentCaseSelection;
		}
		Parameter SelectCaseStringEnd {
			IndexDomain: IndexCurrentCaseSelection;
		}
		StringParameter SelectedCase_Names {
			IndexDomain: IndexCurrentCaseSelection;
			Text: "Selected Cases";
		}
		Parameter IdentifierDifference {
			IndexDomain: IndexParameters;
		}
		Set IdentifierDiffSet {
			SubsetOf: AllIdentifiers;
		}
		ElementParameter IdentifierDiffColor1 {
			IndexDomain: IndexParameters;
			Range: AllColors;
		}
		Parameter SelectedCaseNumber {
			Range: integer;
		}
		Parameter NextCaseNumber {
			Range: integer;
		}
		Parameter ThresholdE3;
		Parameter CaseDiffE3 {
			IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name);
			Definition: {
				max(IndexCurrentCaseSelection, Case_AnnualCoalProduction_supcrv(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr))-
				min(IndexCurrentCaseSelection, Case_AnnualCoalProduction_supcrv(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr))
			}
		}
		ElementParameter ColorDiffE3 {
			IndexDomain: (Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
			Range: AllColors;
		}
		Parameter ThresholdE2;
		Parameter CaseDiffE2 {
			IndexDomain: (sreg_name, yr);
			Definition: {
				max(IndexCurrentCaseSelection, Case_AnnualCoalProduction_reg(IndexCurrentCaseSelection, sreg_name, yr))-
				min(IndexCurrentCaseSelection, Case_AnnualCoalProduction_reg(IndexCurrentCaseSelection, sreg_name, yr))
			}
		}
		ElementParameter ColorDiffE2 {
			IndexDomain: (sreg_name, yr);
			Range: AllColors;
		}
		Parameter ThresholdE4;
		Parameter CaseDiffE4 {
			IndexDomain: (Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name);
			Definition: {
				max(IndexCurrentCaseSelection, Case_MinemouthPrice(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr))-
				min(IndexCurrentCaseSelection, Case_MinemouthPrice(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr))
			}
		}
		ElementParameter ColorDiffE4 {
			IndexDomain: (Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr);
			Range: AllColors;
		}
		Parameter ThresholdE5;
		Parameter CaseDiffE5 {
			IndexDomain: (allsec, cd_name, yr);
			Definition: {
				max(IndexCurrentCaseSelection, Case_NEMSSectorDemand(IndexCurrentCaseSelection, allsec, cd_name, yr))-
				min(IndexCurrentCaseSelection, Case_NEMSSectorDemand(IndexCurrentCaseSelection, allsec, cd_name, yr))
			}
		}
		ElementParameter ColorDiffE5 {
			IndexDomain: (allsec, cd_name, yr);
			Range: AllColors;
		}
		Parameter ThresholdE6;
		Parameter CaseDiffE6 {
			IndexDomain: (allsec, cd_name, yr);
			Definition: {
				max(IndexCurrentCaseSelection, Case_NEMSSectorPrice(IndexCurrentCaseSelection, allsec, cd_name, yr))-
				min(IndexCurrentCaseSelection, Case_NEMSSectorPrice(IndexCurrentCaseSelection, allsec, cd_name, yr))
			}
		}
		ElementParameter ColorDiffE6 {
			IndexDomain: (allsec, cd_name, yr);
			Range: AllColors;
		}
		Parameter ThresholdE7;
		Parameter CaseDiffE7 {
			IndexDomain: {
				(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
				     map_SectorNames(sec_name, subsec_name)
			}
			Definition: {
				max(IndexCurrentCaseSelection, Case_AllSectorPrice(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr))-
				min(IndexCurrentCaseSelection, Case_AllSectorPrice(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr))
			}
		}
		ElementParameter ColorDiffE7 {
			IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			Range: AllColors;
		}
		Parameter ThresholdE8;
		Parameter CaseDiffE8 {
			IndexDomain: {
				(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
				     map_SectorNames(sec_name, subsec_name)
			}
			Definition: {
				max(IndexCurrentCaseSelection, Case_AllSectorTransport(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr))-
				min(IndexCurrentCaseSelection, Case_AllSectorTransport(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr))
			}
		}
		ElementParameter ColorDiffE8 {
			IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			Range: AllColors;
		}
		Parameter ThresholdE9;
		Parameter CaseDiffE9 {
			IndexDomain: {
				(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|map_SupplyCurve_names(sreg_name, sulf_name, mtyp_name, rank_name) and
				     map_SectorNames(sec_name, subsec_name)
			}
			Definition: {
				max(IndexCurrentCaseSelection, Case_AllSectorTransportCost(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr))-
				min(IndexCurrentCaseSelection, Case_AllSectorTransportCost(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr))
			}
		}
		ElementParameter ColorDiffE9 {
			IndexDomain: (sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			Range: AllColors;
		}
		Parameter ThresholdE10;
		Parameter CaseDiffE10 {
			IndexDomain: (EReg_name, IReg_name, tc_name, yr);
			Definition: {
				max(IndexCurrentCaseSelection, Case_InternationalTransport(IndexCurrentCaseSelection, EReg_name, IReg_name, tc_name, yr))-
				min(IndexCurrentCaseSelection, Case_InternationalTransport(IndexCurrentCaseSelection, EReg_name, IReg_name, tc_name, yr))
			}
		}
		ElementParameter ColorDiffE10 {
			IndexDomain: (EReg_name, IReg_name, tc_name, yr);
			Range: AllColors;
		}
		DeclarationSection Case_Identifiers {
			Parameter Case_AnnualCoalProduction_trill {
				IndexDomain: (IndexCurrentCaseSelection,sreg_agg,yr);
				Definition: IndexCurrentCaseSelection.AnnualCoalProduction(sreg_agg, yr);
			}
			Parameter Case_AnnualCoalProduction_tons {
				IndexDomain: (IndexCurrentCaseSelection,sreg_agg,yr);
				Definition: IndexCurrentCaseSelection.AnnualCoalProduction_tons(sreg_agg, yr);
			}
			Parameter Case_AnnualCoalProduction {
				IndexDomain: (IndexCurrentCaseSelection,sreg_agg,yr);
				Text: "Annual Coal Production";
				Definition: {
					if Switch_TBTU then
					Case_AnnualCoalProduction_trill(IndexCurrentCaseSelection,sreg_agg,yr)
					elseif Switch_MMst then
					Case_AnnualCoalProduction_tons(IndexCurrentCaseSelection,sreg_agg,yr)
					endif
				}
			}
			Parameter Case_AnnualCoalProduction_reg_trill {
				IndexDomain: (IndexCurrentCaseSelection,sreg_name,yr);
				Definition: IndexCurrentCaseSelection.AnnualCoalProduction_reg(sreg_name, yr);
			}
			Parameter Case_AnnualCoalProduction_reg_tons {
				IndexDomain: (IndexCurrentCaseSelection,sreg_name,yr);
				Definition: IndexCurrentCaseSelection.AnnualCoalProduction_reg_tons(sreg_name, yr);
			}
			Parameter Case_AnnualCoalProduction_reg {
				IndexDomain: (IndexCurrentCaseSelection,sreg_name,yr);
				Definition: {
					if Switch_TBTU then
					Case_AnnualCoalProduction_reg_trill(IndexCurrentCaseSelection,sreg_name,yr)
					elseif Switch_MMst then
					Case_AnnualCoalProduction_reg_tons(IndexCurrentCaseSelection,sreg_name,yr)
					endif
				}
			}
			Parameter Case_AnnualCoalProduction_supcrv_trill {
				IndexDomain: (IndexCurrentCaseSelection,Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Definition: IndexCurrentCaseSelection.AnnualCoalProduction_supcrv2(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr);
			}
			Parameter Case_AnnualCoalProduction_supcrv_tons {
				IndexDomain: (IndexCurrentCaseSelection,Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Definition: IndexCurrentCaseSelection.AnnualCoalProduction_supcrv2_tons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr);
			}
			Parameter Case_AnnualCoalProduction_supcrv {
				IndexDomain: (IndexCurrentCaseSelection,Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Definition: {
					if Switch_TBTU then
					Case_AnnualCoalProduction_supcrv_trill(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)
					elseif Switch_MMst then
					Case_AnnualCoalProduction_supcrv_tons(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)
					endif
				}
			}
			Parameter Case_AnnualCoalProduction_supcrv1 {
				IndexDomain: (IndexCurrentCaseSelection,Scrv1,yr);
				Definition: sum((sreg_name, sulf_name, mtyp_name, rank_name)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name), Case_AnnualCoalProduction_supcrv(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr));
			}
			Parameter Case_MinemouthPrice_trill {
				IndexDomain: (IndexCurrentCaseSelection,Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Definition: IndexCurrentCaseSelection.MinemouthPriceMMBtu(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr);
			}
			Parameter Case_MinemouthPrice_tons {
				IndexDomain: (IndexCurrentCaseSelection,Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Definition: IndexCurrentCaseSelection.MinemouthPriceTons(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr);
			}
			Parameter Case_MinemouthPrice {
				IndexDomain: (IndexCurrentCaseSelection,Scrv1,sreg_name,sulf_name,mtyp_name,rank_name,yr);
				Definition: {
					if Switch_TBTU then
					Case_MinemouthPrice_trill(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_MMst then
					Case_MinemouthPrice_tons(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					endif
				}
			}
			Parameter Case_MinemouthPrice_supcrv {
				IndexDomain: (IndexCurrentCaseSelection,Scrv1,yr);
				Definition: sum((sreg_name, sulf_name, mtyp_name, rank_name)|map_scrv1_names(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name), Case_MinemouthPrice(IndexCurrentCaseSelection, Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr));
			}
			Parameter Case_NEMSSectorDemand_trill {
				IndexDomain: (IndexCurrentCaseSelection,allsec,cd_name,yr);
				Definition: IndexCurrentCaseSelection.NEMSSectorDemand(allsec, cd_name, yr);
			}
			Parameter Case_NEMSSectorDemand_tons {
				IndexDomain: (IndexCurrentCaseSelection,allsec,cd_name,yr);
				Definition: IndexCurrentCaseSelection.NEMSSectorDemandTons(allsec, cd_name, yr);
			}
			Parameter Case_NEMSSectorDemand {
				IndexDomain: (IndexCurrentCaseSelection,allsec,cd_name,yr);
				Definition: {
					if Switch_TBTU then
					  Case_NEMSSectorDemand_trill(IndexCurrentCaseSelection, allsec, cd_name, yr)
					elseif Switch_MMst then
					  Case_NEMSSectorDemand_tons(IndexCurrentCaseSelection, allsec, cd_name, yr)
					endif
				}
			}
			Parameter Case_NEMSSectorPrice_trill {
				IndexDomain: (IndexCurrentCaseSelection,allsec, cd_name, yr);
				Definition: IndexCurrentCaseSelection.NEMSSectorPrice_MMBTU(allsec, cd_name, yr);
			}
			Parameter Case_NEMSSectorPrice_tons {
				IndexDomain: (IndexCurrentCaseSelection,allsec, cd_name, yr);
				Definition: IndexCurrentCaseSelection.NEMSSectorPrice_Ton(allsec, cd_name, yr);
			}
			Parameter Case_NEMSSectorPrice {
				IndexDomain: (IndexCurrentCaseSelection,allsec, cd_name, yr);
				Definition: {
					if Switch_TBTU then
					  Case_NEMSSectorPrice_trill(IndexCurrentCaseSelection, allsec, cd_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_MMst then
					  Case_NEMSSectorPrice_tons(IndexCurrentCaseSelection, allsec, cd_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					endif
				}
			}
			Parameter Case_AllSectorTransport_trill {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: IndexCurrentCaseSelection.AnnualAllSectorTransportTrill(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Case_AllSectorTransport_tons {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: IndexCurrentCaseSelection.AnnualAllSectorTransportTons(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Case_AllSectorTransport {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: {
					if Switch_TBTU then
					  Case_AllSectorTransport_trill(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)
					elseif Switch_MMst then
					  Case_AllSectorTransport_tons(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)
					endif
				}
			}
			Parameter Case_AllSectorTransportCost_trill {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: IndexCurrentCaseSelection.AllSectorTransportCost_DetailMMBTU(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Case_AllSectorTransportCost_tons {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: IndexCurrentCaseSelection.AllSectorTransportCost_DetailTon(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Case_AllSectorTransportCost_total {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: IndexCurrentCaseSelection.AllSectorTransportCost_Detail(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Case_AllSectorTransportCost {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: {
					if Switch_TBTU then
					  Case_AllSectorTransportCost_trill(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_MMst then
					  Case_AllSectorTransportCost_tons(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_Total then  
					  Case_AllSectorTransportCost_total(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					endif
				}
			}
			Parameter Case_AllSectorPrice_trill {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: IndexCurrentCaseSelection.AllSectorPrice_DetailMMBTU(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Case_AllSectorPrice_tons {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: IndexCurrentCaseSelection.AllSectorPrice_DetailTon(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
			}
			Parameter Case_AllSectorPrice {
				IndexDomain: (IndexCurrentCaseSelection,sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr);
				Definition: {
					if Switch_TBTU then
					  Case_AllSectorPrice_trill(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					elseif Switch_MMst then
					  Case_AllSectorPrice_tons(IndexCurrentCaseSelection, sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)/(MC_JPGDP('1987') / MC_JPGDP(DisplayDollarYear))
					endif
				}
			}
			Parameter Case_InternationalTransport_tons {
				IndexDomain: (IndexCurrentCaseSelection,EReg_name,IReg_name,tc_name,yr);
				Definition: IndexCurrentCaseSelection.InternationalTransportTons(EReg_name,IReg_name,tc_name,yr);
			}
			Parameter Case_InternationalTransport_trill {
				IndexDomain: (IndexCurrentCaseSelection,EReg_name,IReg_name,tc_name,yr);
				Definition: IndexCurrentCaseSelection.InternationalTransportTrill(EReg_name,IReg_name,tc_name,yr);
			}
			Parameter Case_InternationalTransport {
				IndexDomain: (IndexCurrentCaseSelection,EReg_name,IReg_name,tc_name,yr);
				Definition: {
					if Switch_TBTU then
					  Case_InternationalTransport_trill(IndexCurrentCaseSelection, EReg_name, IReg_name, tc_name, yr)
					elseif Switch_MMst then
					  Case_InternationalTransport_tons(IndexCurrentCaseSelection, EReg_name, IReg_name, tc_name, yr)
					endif
				}
			}
		}
		Procedure GetCaseName {
			Body: {
				CaseStringBegin :=FindNthString(CaseFileURL(CurrentCase), "\\Cases\\", -1);
				CaseStringEnd:= StringLength(CaseFileURL(CurrentCase));
				CaseStringBegin+=7;
				CaseStringEnd-=5;
				CurrentCase_Name:= SubString(CaseFileURL(CurrentCase), CaseStringBegin,CaseStringEnd);
			}
		}
		Procedure GetSelectedCaseNames {
			Body: {
				
				SelectCaseStringBegin(IndexCurrentCaseSelection) :=FindNthString(CaseFileURL(IndexCurrentCaseSelection), "\\Cases\\", -1);
				SelectCaseStringEnd(IndexCurrentCaseSelection):= StringLength(CaseFileURL(IndexCurrentCaseSelection));
				SelectCaseStringBegin(IndexCurrentCaseSelection)+=7;
				SelectCaseStringEnd(IndexCurrentCaseSelection)-=5;
				SelectedCase_Names(IndexCurrentCaseSelection):= SubString(CaseFileURL(IndexCurrentCaseSelection), SelectCaseStringBegin(IndexCurrentCaseSelection),SelectCaseStringEnd(IndexCurrentCaseSelection));
			}
		}
		Procedure CompareRuns {
			Body: {
				SelectedCaseNumber:=1;  !Start with the first two selected cases
				NextCaseNumber:=2;      
				repeat
				! Find the difference between the two cases 
				IdentifierDifference(IndexParameters)
					:= CaseCompareIdentifier(
						FirstCase  :  Nth(IndexCurrentCaseSelection,SelectedCaseNumber), 		
						SecondCase :  Nth(IndexCurrentCaseSelection,NextCaseNumber), 		
						Identifier :  IndexParameters,
						Suffix     :  'level', 			! compare the level values
						Mode       :  'count');			! count the differences.
				
				! This creates a set with the identifiers that have differences in first two cases and adds 
				! the identifiers that have differences from other comparisons
				! This will be used as "Implicit Identifiers" in the pivot table on page "Compare Case"
				IdentifierDiffSet += {IndexParameters | IdentifierDifference(IndexParameters)};
				
				if NextCaseNumber=card(IndexCurrentCaseSelection) then 
				    SelectedCaseNumber+=1;
				    NextCaseNumber:= SelectedCaseNumber;
				endif;
				NextCaseNumber+=1;
				break when SelectedCaseNumber=card(IndexCurrentCaseSelection);
				endrepeat;
			}
		}
		Procedure HighlightDiffE2 {
			Body: {
				empty ColorDiffE2;
				ColorDiffE2((sreg_name, yr)|CaseDiffE2(sreg_name, yr)>ThresholdE2):='cyan';
			}
		}
		Procedure HighlightDiffE3 {
			Body: {
				empty ColorDiffE3;
				ColorDiffE3((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|CaseDiffE3(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)>ThresholdE3):='cyan';
			}
		}
		Procedure HighlightDiffE4 {
			Body: {
				empty ColorDiffE4;
				ColorDiffE4((Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)|CaseDiffE4(Scrv1, sreg_name, sulf_name, mtyp_name, rank_name, yr)>ThresholdE4):='cyan';
			}
		}
		Procedure HighlightDiffE5 {
			Body: {
				empty ColorDiffE5;
				ColorDiffE5((allsec, cd_name, yr)|CaseDiffE5(allsec, cd_name, yr)>ThresholdE5):='cyan';
			}
		}
		Procedure HighlightDiffE6 {
			Body: {
				empty ColorDiffE6;
				ColorDiffE6((allsec, cd_name, yr)|CaseDiffE6(allsec, cd_name, yr)>ThresholdE6):='cyan';
			}
		}
		Procedure HighlightDiffE7 {
			Body: {
				empty ColorDiffE7;
				ColorDiffE7((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|CaseDiffE7(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)>ThresholdE7):='cyan';
			}
		}
		Procedure HighlightDiffE8 {
			Body: {
				empty ColorDiffE8;
				ColorDiffE8((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|CaseDiffE8(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)>ThresholdE8):='cyan';
			}
		}
		Procedure HighlightDiffE9 {
			Body: {
				empty ColorDiffE9;
				ColorDiffE9((sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)|CaseDiffE9(sec_name, subsec_name, sreg_name, sulf_name, mtyp_name, rank_name, Dreg_name, yr)>ThresholdE9):='cyan';
			}
		}
		Procedure HighlightDiffE10 {
			Body: {
				empty ColorDiffE10;
				ColorDiffE10((EReg_name, IReg_name, tc_name, yr)|CaseDiffE10(EReg_name, IReg_name, tc_name, yr)>ThresholdE10):='cyan';
			}
		}
		Procedure HighlightDifferences {
			Arguments: (HighlightColor,Threshold,CaseParameter);
			Body: {
				Casediff(a):=max(IndexCurrentCaseSelection, CaseParameter(IndexCurrentCaseSelection, a))-
				min(IndexCurrentCaseSelection, CaseParameter(IndexCurrentCaseSelection, a));
				
				empty HighlightColor(a);
				HighlightColor((a)|CaseDiff(a)>Threshold):='cyan';
			}
			ElementParameter HighlightColor {
				IndexDomain: a;
				Range: AllColors;
				Property: InOut;
			}
			Parameter CaseParameter {
				IndexDomain: (IndexCurrentCaseSelection,a);
				Property: Input;
			}
			Parameter Threshold {
				Property: Input;
			}
			Parameter Casediff {
				IndexDomain: a;
			}
			Set Aset {
				Index: a;
			}
		}
	}
	Section Localization {
		Set AllLanguages {
			Index: language;
			Parameter: CurrentLanguage;
			Property: NoSave;
			OrderBy: User;
			Definition: Data { English };
			Comment: {
				"This set should contain all languages for which you want to
				localize your AIMMS end-user application. You can add new
				languages at any time. However, you should always make sure
				that your development language remains the first language
				in the set. AIMMS will use this language to create new
				localization entries during the automated localization
				procedure as well as in the localization wizards."
			}
		}
		Set LocalizedTextIndexSet {
			SubsetOf: Integers;
			Index: lti;
			Property: NoSave;
			Comment: {
				"This set is used to number all localized strings in your
				end-user interface. The localization wizards automatically
				update the definition of this set whenever new localization
				strings are added. Therefore, you should not edit the
				definition of this set by hand, unless you are sure
				what you are doing."
			}
		}
		StringParameter LocalizedText {
			IndexDomain: (lti,language);
			Property: NoSave;
			Comment: {
				"This string parameter contains the actual localized strings
				that are visible in the end-user interface. You can edit its
				contents in the `Localized Text` window, which is accessible
				through the `Tools-Localization` menu. The `Localized Text`
				window is also opened when you invoke the `Data ...` menu
				for any of the localization identifiers."
			}
		}
		StringParameter LocalizedTextDescription {
			IndexDomain: lti;
			Property: NoSave;
			Comment: {
				"This string parameter contains an (optional) description for
				each localization string. You can edit its contents in the
				`Localized Text` window, which is accessible through the
				`Tools-Localization` menu. The `Localized Text` window is
				also opened when you invoke the `Data ...` menu for any of
				the localization identifiers."
			}
		}
		Procedure LocalizationReadLanguage {
			Arguments: ThisLanguage;
			Body: {
				LanguageFileName := FormatString("<prj>:Localization\\%e.txt", ThisLanguage );
				
				if FileExists( LanguageFileName ) then
				    Read From File LanguageFileName;
				endif;
			}
			Comment: "This procedure reads the localization data for a single language.";
			ElementParameter ThisLanguage {
				Range: AllLanguages;
				Property: Input;
			}
			StringParameter LanguageFileName;
		}
		Procedure LocalizationWriteLanguage {
			Arguments: ThisLanguage;
			Body: {
				if ( ProjectDeveloperMode and
				     Count( lti | LocalizedText(lti,ThisLanguage) ) ) then
				
				    LanguageFileName := FormatString("<prj>:Localization\\%e.txt", ThisLanguage );
				    put f;
				    display LocalizedText(lti,ThisLanguage);
				    putclose;
				
				endif;
			}
			Comment: {
				"This procedure writes the localization data for a single language.
				AIMMS will only write data, if data for the language is actually
				present. This will prevent loss of localization data which is
				written without being read before."
			}
			ElementParameter ThisLanguage {
				Range: AllLanguages;
				Property: Input;
			}
			StringParameter LanguageFileName;
			File f {
				Name: LanguageFileName;
				Device: Disk;
				Mode: replace;
			}
		}
		Procedure LocalizationReadAll {
			Body: {
				for ( language ) do
				    LocalizationReadLanguage( language );
				endfor;
				
				if ( ProjectDeveloperMode and
				     FileExists("<prj>:Localization\\Descriptions.txt") ) then
				    read from file "<prj>:Localization\\Descriptions.txt";
				endif;
			}
			Comment: {
				"Execute this procedure if you intend to edit the localization
				parameters by hand (i.e. without using the localization wizards).
				In that case, do not forget to call LocalizationWriteAll before
				the end of your AIMMS session."
			}
		}
		Procedure LocalizationWriteAll {
			Body: {
				for ( language ) do
				    LocalizationWriteLanguage( language );
				endfor;
				
				if ( ProjectDeveloperMode and
				     Count( lti | LocalizedTextDescription(lti) ) ) then
				
				    write LocalizedTextDescription to file "<prj>:Localization\\Descriptions.txt";
				
				endif;
			}
			Comment: {
				"You should execute this procedure if you have edited the
				localization parameters by hand. Before editing, you can
				call LocalizationReadAll to obtain all currently present
				localization data."
			}
		}
		Procedure LocalizationInitialize {
			Body: {
				if not CurrentLanguage then
				    CurrentLanguage := first(AllLanguages);
				endif;
				
				LocalizationReadLanguage(CurrentLanguage);
			}
			Comment: {
				"This procedure initializes localization support for your application.
				It is automatically added to the end of MainInitialization during the
				localization setup. If the element parameter CurrentLanguage already
				has been assigned a value at that time, AIMMS will read the localization
				strings for that language. In all other cases, the localization data
				for the development language is read."
			}
		}
	}
}
