! $Header: m:/default/source/RCS/uaimms.f,v 1.51 2020/10/26 15:21:33 LC2 Exp $
! AIMMS interface routines for EMM's efd and ecp LPs.
! efd routines list first; then ecp

!===================================================================================================================================================
!  efd routines
!===================================================================================================================================================
! AIMMS_EFD Invokes and transfers data to/from AIMMS EFD model   
      SUBROUTINE AIMMS_EFD(OPTION)
      use efd_row_col
      use ifport,only:timef
      use ifcore, only : commitqq
      implicit none

! Steps in the Process 
! 1) Transfer EFD LP data to the the AIMMS EFD project.
! 2) Initialize the monitor.in.txt file to communicate with efd.
! 3) Invoke the AIMMS EFD project from the command line with the monitor procudure.
! 4) Write out the monitor.in.txt file to instruct the AIMMS project to run the
!    mainExecution procedure (or procedure passed as the argument "option") and write results back to NEMS.
! 5) Wait for AIMMS to finish by periodically reading monitor.out.txt file.
! 6) initialize the monitor.in.txt file with a Wait command.


! Note: aimms is invoked this way so it can be left open to send additional data and return results
! after the solution retrieval routines are called. This is needed for validation the aimms solution
! variable derivation with the oml-fortran solution variables. Once validation is finished, AIMMS could be
! invoked here in a more straightforward fashion by invoking the MainProcedure.

! argument option:  
!    'end' causes the AIMMS project to be closed down via a command sent to monitor.in.txt
!     'pass_back' is used to transmit variables derived in the solution-retrieval routines back to AIMMS and
!            retrieve the comparable version of the variables from AIMMS
!            for validation testing during the oml-to-aimms transition period.
! 

      include 'aimms_c_face'
      include 'parametr'
      INCLUDE 'ncntrl'

      character*(*) option

!---------------------------------------------------------------
! AIMMS-related variables
      integer(KIND=4) ret,procedureRet,iret
      character*80 projectName,aimmsFolder
      logical lexist,aimms_opened/.false./,no_aimms/.false./,aimms_error
!
     integer monitordbg ! unit number for monitor.debug.txt
     common/monitor_efd/monitordbg
     logical opened_yet/.false./  ! indicator if monitordbg has been opened yet.
     logical file_exists/.false./ ! indicator if file does exist or not  !added by AKN to differently handle composite file write out during pre and post solve stages
     logical lresult
     integer iPID, iPIDlist, iPID2 ! process ID from oscall_pid
     integer nmessage,nchar ! counts of lines and characters in
     integer ikill  ! set to 1 if aimms.exe has to be killed
     character curdate*8,curtime*10
     character*80 aimms64,AIMMSLOC*66
  
      real*4 timer,timer2,mtimer

      real*4 scalar_r(1)      ! single element real array to pass a scalar 
      integer*4 scalar_i(1)   ! single element integer array to pass a scalar 
      integer iyr,ipy,rs,ip,L
      integer iwait ! argument for oscall: if 0, wait indefinitly
      integer eunit,ntries,counter,ntriesmax/3/
      character cmd*200,args*200,line*150,filen*100
      logical license_issue

! first time through, get aimms foldername and open monitor debug file
      if(.not. opened_yet) then
      !  get AIMMS  foldername
          no_aimms=.false.
          call RTOSTRING('AIMMSLOC',AIMMSLOC) !  e.g., 'C:\AIMMS_Installation_Free_Releases\4.8.1.299-x64'
          aimmsFolder = trim(AIMMSLOC)//char(0)
          aimms64 = trim(AIMMSLOC)//'\bin\aimms.exe'
          inquire(file=aimms64,exist=lexist)
          if(.not. lexist) then
             write(6,'(2a)') 'AIMMS executable, "\bin\aimms.exe", not found in location specified in scedes by AIMMSLOC: ',trim(AIMMSLOC)
          endif

        opened_yet=.true.
        call unitunopened(100,999,monitordbg)
        open(monitordbg,file='efd\monitor.debug.txt',status='unknown')
        rewind monitordbg
      endif  

      if (Option(1:3) .eq. 'end') then
        if(aimms_opened) then
          call end_AIMMS
          aimms_opened=.false.
        endif
        return
      endif
      if(make_efd_aimms) return ! if this is a run to generate AIMMS LP structure, don't invoke aimms, just return
 
      timer=timef()   
     
! 1) Send the LP coefficients in bulk to AIMMS, then send a subset of EMM arrays to aimms
!   First, write out each AIMMS coefficient array as a AIMMS parameter using the composite table format
      write(filen,'(a,i4,a,i2.2,a)')  './efd/composite_',curcalyr,'_',curitr,'.txt'
      call unitunopened(100,999,iOutTxt)
      !if (AIM_Phase.eq.1) then    !added by AKN to differently handle composite file write out during pre and post solve stages
      open(iOutTxt,file=filen,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
      rewind iOutTxt

      if (SKIP_EFDOML .eq. .FALSE. ) then   !not to pass coefficient values to AIMEFD 
          do ip=1,max_aimms_param
            if(len_trim(aimparm(ip).name).gt.0) then
               call AIMMS_OutTxt_efd(aimparm(ip).name,  aimparm(ip).idxFirst, aimparm(ip).idxLast, aimparm(ip).setNames)
            endif
          enddo
      endif
      write(iOutTxt,'(a,i1,a)') 'AIMEFDBG := ',AIMEFDBG,' ;'
      write(iOutTxt,'(a,i1,a)') 'EMMBENCH := ',RTOVALUE('EMMBENCH',0),' ;'
      write(iOutTxt,'(a,i1,a)') 'AB32SW := ',  RTOVALUE('AB32SW  ',0),' ;'
      write(iOutTxt,'(a,i1,a)') 'RUN45Q := ',  RTOVALUE('RUN45Q  ',0),' ;'
      
        !   Second, write out the EMM arrays to AIMMS where they will be to derive the LP coefficient parameters in AIMMS directly, 
        !   eventually replacing the coeffient parameters passed in bulk 
      call AIMMS_Transfer_Out_efd
      lresult=commitqq(IoutTxt)  ! use ifcore: force data to be written to file immediately
      close(iOutTxt)
      !elseif (AIM_Phase.eq.2) then !added by AKN to differently handle composite file write out during pre and post solve stages
              !INQUIRE(file=filen, EXIST=file_exists)
              !if (file_exists.eq..true.) then
                 !open(iOutTxt,file=filen,status='old',access='append',BUFFERED='YES',BUFFERCOUNT=10)
                 !call AIMMS_Transfer_Out_efd
                 !lresult=commitqq(iOutTxt)  ! use ifcore: force data to be written to file immediately
                 !close(iOutTxt)
              !else
                 !write(6,'(a)') 'Composit file '//filen//' is missing. Fortran EMM arrays adjusted after LP solved cannot be passed to AIMMS.'
              !endif
      !endif
      write(6,*)'AIMMS Interface: seconds to write output for AIMMS',timef()-timer

      ntries=1
100   continue ! return to here from below if license error occurs to retry up to "ntriesmax-ntries" more times. 

      
! 2) inititalize message file used to direct actions of the aimms project monitor to wait so it doesn't start early.
      call unitunopened(100,999,EUNIT)
      open(eunit,file='efd\monitor.in.txt',status='unknown')
      rewind eunit
      write(eunit,'(a)')      'sAction             := "Wait";'
      write(eunit,'(a,i4,a)') "curcalyr('1'):=",curcalyr,';'
      write(eunit,'(a,i2,a)') "curitr('1')  :=",curitr,  ';'
      lresult=commitqq(eunit)  ! use ifcore: force data to be written to file immediately
      close(eunit)
      call date_and_time(curdate,curtime)
      write(monitordbg,'(a,t45,3a,i5,i3)') 'monitor.in.txt  : Wait', curtime(1:2),':',curtime(3:10),curcalyr,curitr


!  3) Invoke AIMMS from the command line using OSCALL_pid  
      if(.not. aimms_opened ) then
          

        l=len_trim(aimmsFolder)-1
        cmd=aimmsFolder(:l)//'\bin\aimms.exe '

        args='--hidden --license-wait-seconds 120 -RNEMS_monitor .\\efd\\efd.aimms'
!        args=' --license-wait-seconds 120 -RNEMS_monitor .\\efd\\efd.aimms'
        write(6,'(2a)') 'AIMMS Command line is ',trim(cmd)//' '//trim(args)
        write(6,'(a,i4,a)') 'AIMMS ',curcalyr,'    Opening AIMMS project, procedure NEMS_monitor'
        call date_and_time(curdate,curtime)
        write(monitordbg,'(a,t45,3a,i5,i3,i2)') '                : Opening Aimms Project', curtime(1:2),':',curtime(3:10),curcalyr,curitr

        iwait=0
        call oscall_pid(iwait,cmd,args,iret,iPID)
        
        if(iret.eq.0) then
          aimms_opened=.true.      
        else
          write(6,'(a,i4,a)') 'AIMMS error running efd/efd.aimms, return code=',iret
          aimms_opened=.false.  
        endif

        write(6,'(a,i4,a,f8.1)') 'AIMMS ',curcalyr,'    Time to open project:',timef()-timer

      endif
    

      timer=timef()

! Initialize AIMMS output message file so this routine won't see old one and think AIMMS is finished
      call unitunopened(100,999,EUNIT)
      open(eunit,file='efd\monitor.out.txt',status='unknown',SHARED)
      rewind eunit
      write(eunit,'(a)') 'executing' !  so loop below won't think it is already finished in loop below.
      lresult=commitqq(eunit)
      close(eunit)      
      
!4)  Tell AIMMS to invoke name of routine passed in argument "option" (usually set to "MainExecution") via its input message file
      call unitunopened(100,999,EUNIT)
      open(eunit,file='efd\monitor.in.txt',status='unknown',SHARED)
      rewind eunit
      write(eunit,'(a)')      'sAction             := "'//trim(option)//'";'
      write(eunit,'(a,i4,a)') "curcalyr('1'):=",curcalyr,';'
      write(eunit,'(a,i2,a)') "curitr('1')  :=",curitr,  ';'
      lresult=commitqq(eunit)  ! use ifcore: force data to be written to file immediately
      close(eunit)
      call date_and_time(curdate,curtime)
      write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.in.txt  : '//trim(option)//' ', curtime(1:2),':',curtime(3:10),curcalyr,curitr
      
      counter=0
      line=' '

! 5) when AIMMS is done, its monitor procedure writes out a keyword "Completed" to monitor.out.txt. Wait for 
! for the signal, up to a time limit of 10 minutes, or 600 seconds (1200 half seconds)
      do while (counter.lt.1200 .and. (index(line,'Completed')+index(line,'Quit')+index(line,'Exited')).eq.0)
        call sleepqq(500)
        counter=counter+1
        iret=1
        open(eunit,file='efd\monitor.out.txt',status='old',SHARED,action='READ',err=99)
        line=' '
        read(eunit,'(a)',err=99,end=99) line
!        write(6,'(a)') 'line='//trim(line)
        iret=0
        close(eunit)
99      continue 

      enddo
      call date_and_time(curdate,curtime)

      write(6,'(a,i4,a,f8.1)') 'AIMMS ',curcalyr,'    Time to run AIMMS procedure '//trim(option)//':',timef()-timer

      if(counter.ge.1200) then
 ! Wait time exceeded. Display message log in nohup.out
         write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.out.txt  : wait time exceeded', curtime(1:2),':',curtime(3:10),curcalyr,curitr
         write(6,'(a)') 'AIMMS wait time exceeded. Showing AIMMS messages.log and checking for license issue.'
         license_issue=.false.
         inquire(file='efd/log/messages.log',exist=lexist)
         nmessage=0
         nchar=0
         if(lexist) then
           open(eunit,file='efd/log/messages.log',status='old',SHARED,READONLY,err=999)
10         continue
             read(eunit,'(a)',end=998,err=999) line
             write(6,'(2a)')'AIMMS messages.log:  ',trim(line)
             nmessage=nmessage+1
             nchar=nchar+len_trim(line) ! count characters. if only 3 in file, aimms didn't start gracefully. sign of intermittant error.
             if(index(line,'license').gt.0) then
               license_issue=.true.
             endif
             goto 10 ! above
998        continue
           close(eunit)
999        continue
          write(6,'(a,i5)') 'AIMMS message log, number of lines read:',nmessage
         endif
! if an aimms.exe is still executing with the same ProcessID (iPID), kill it.
        args=' '
        iWait=-1
        ikill=0
        cmd='cmd /c tasklist -v -FI "IMAGENAME eq aimms.exe" > tasklist.txt'
        call oscall_PID(iWait,cmd,Args,iRet,iPID2) 
        inquire(exist=lexist,file='tasklist.txt')
        if(lexist) then
          open(eunit, file='tasklist.txt',status='old',READONLY)
19 continue
          read(eunit,'(a)',end=21) line
          if(index(line,'aimms.exe').gt.0) then
            line(:20)=''
            read(line,*,end=21,err=21) iPIDlist
            if(iPIDlist.eq.iPID) then
              ikill=1
              write(6,'(a,i6,a)') 'The aimms.exe is still executing.  Will kill the process ID ',iPID
              write(cmd,'(a,i6)')  'taskkill /F /PID ',iPID
              iWait=-1
              call oscall_PID(iWait,cmd,Args,iRet,iPID2) 
              goto 21
            else
              goto 19
            endif
          else
            goto 19
          endif
21        continue 
          close(eunit)
        endif        
        if(ikill.eq.0) then
          write(6,'(a)') 'AIMMS seems to have closed early. No aimms.exe process found with matching process ID.'
        endif
        if (license_issue .and. ntries.lt.ntriesmax) then
          write(6,'(a,i2)') 'AIMMS license issue.  Will retry. Number of tries so far: ',ntries
          ntries=ntries+1
          aimms_opened=.false.
          go to 100
        elseif(ntries.lt.ntriesmax.and.ikill.eq.1 .and. nchar.eq.3) then  ! when AIMMS stays open and writes only 3 non-printable characters in message.log
          write(6,'(a,i2)') 'AIMMS wait time issue. Will retry. Number of tries so far: ',ntries
          ntries=ntries+1
          aimms_opened=.false.
          go to 100  ! above at subroutine start
        else
          iret=900
                      
	  write(6,'(a)') 'AIMMS wait time exceeded. Stopping now to avoid confusion.'
	          
          stop
        endif
      else
        if(index(line,'Exited').gt.0) then
! Early exit
          write(6,'(a)') 'AIMMS Exited early. Likely an error in the AIMMS code or transfer data.  See last line of log/messages.log'
          aimms_opened=.false.
          iret=900
        elseif(index(line,'Completed').gt.0) then
! Normal Completion
          write(monitordbg,'(a,t75,3a,i5,i3,i2)') 'monitor.out.txt  : '//trim(line(5:)), curtime(1:2),':',curtime(3:10),curcalyr,curitr
          ! inititalize message file used to direct actions of the aimms project monitor to wait so it doesn't start early.

! 6) initialize the monitor.in.txt file with a Wait command.
          call unitunopened(100,999,EUNIT)
          open(eunit,file='efd\monitor.in.txt',status='unknown')
          rewind eunit
          write(eunit,'(a)')      'sAction             := "Wait";'
          write(eunit,'(a,i4,a)') "curcalyr('1'):=",curcalyr,';'
          write(eunit,'(a,i2,a)') "curitr('1')  :=",curitr,  ';'
          lresult=commitqq(eunit)  ! use ifcore: force data to be written to file immediately
          close(eunit)
          call date_and_time(curdate,curtime)
          write(monitordbg,'(a,t45,3a,i5,i3)') 'monitor.in.txt  : Wait', curtime(1:2),':',curtime(3:10),curcalyr,curitr
        endif

      endif
   return


CONTAINS

!===================================================================================================================================================
Subroutine End_AIMMS
  integer ntries,nmax/240/
! write Quit to message file to tell aimms project monitor to exit
      call unitunopened(100,999,EUNIT)
      open(eunit,file='efd\monitor.in.txt',status='unknown',SHARED)
      rewind eunit
      write(eunit,'(a)')      'sAction             := "Quit";'
      close(eunit)

      call date_and_time(curdate,curtime)
      write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.in.txt  : Quit', curtime(1:2),':',curtime(3:10),curcalyr,curitr

!   need to wait until project is closed. May take 30 seconds to close 
!   Added statement in MainTermination to write "Exited" to monitor.out.txt so that should
!   be signal to stop
      ntries=1
      do while (ntries.lt.nmax)
        open(eunit,file='efd\monitor.out.txt',status='old',SHARED,READONLY)
        flush eunit
        read(eunit,'(a)',err=99,end=99) line
        close(eunit)
        if(index(line,'Exited').gt.0) then
          exit  ! exit do while
        endif
99      ntries=ntries+1
        call sleepqq(500) ! wait 1/2 second
      enddo
      write(6,'(a,i4,a,i4)') 'AIMMS Exiting, number of monitor.out.txt checks ',ntries,', max number set to ',nmax
      call date_and_time(curdate,curtime)
      if(ntries.eq.nmax) then
        write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.out.txt : wait for Exited exceeded', curtime(1:2),':',curtime(3:10),curcalyr,curitr
      else
        write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.out.txt : '//trim(line(5:)), curtime(1:2),':',curtime(3:10),curcalyr,curitr
      endif

end subroutine end_aimms

! end of CONTAINed routines--near duplicates of ecp version of routine
End Subroutine AIMMS_EFD

!===================================================================================================================================================

subroutine efd_assign_coeff
! subroutine to assign an entry to the EFD LP coefficient storage array given efdcolnam, efdrownam, and efdcoeff
  use efd_row_col
  implicit none

  integer ic
  if(len_trim(efdcolnam).eq.0 .or. len_trim(efdrownam).eq.0) return

  if (cnt_efd_coeff .lt. max_efd_coeff) then   
    cnt_efd_coeff = cnt_efd_coeff + 1
    efd_coeff(cnt_efd_coeff).efdcolnam           = efdcolnam
    efd_coeff(cnt_efd_coeff).efdrownam           = efdrownam
    efd_coeff(cnt_efd_coeff).aimms_col_ID_num    = aimms_col_ID_num
    efd_coeff(cnt_efd_coeff).aimms_row_ID_num    = aimms_row_ID_num
    efd_coeff(cnt_efd_coeff).coeff8              = efdcoeff8
    efd_coeff(cnt_efd_coeff).efdsub              = efdsub
!    efd_coeff(cnt_efd_coeff).iset_elements      = iset_elements  ! will assign these after sorting coefficients into parameter groups

  else
    write(6,'(a, i8)')  'AIMMS Interface error: Assigning AIMMS coefficient, cnt_efd_coeff exceeds max_efd_coeff, col/row='//efdcolnam//' '//efdrownam//'  cnt_efd_coeff=',cnt_efd_coeff
    write(io,'(a, i8)') 'AIMMS Interface error: Assigning AIMMS coefficient, cnt_efd_coeff exceeds max_efd_coeff, col/row='//efdcolnam//' '//efdrownam//'  cnt_efd_coeff=',cnt_efd_coeff
    stop
  endif

  return
end subroutine efd_assign_coeff

!===================================================================================================================================================
subroutine efd_set_AIMMS_col_ID(mask_arg)
! subroutine to set aimms column ID (aimms_col_ID_num) for given mask_arg.  If not found,
! define new aimms column and store the aimms column  attributes from like-named
! variables in calling routine on first use of a unique mask_arg:
!  colnam_aimms ! AIMMS column name 
!  csetnam(max_set)    ! indexing set names
! Determine the character positions of indexing fields in the column name based on finding mask characters ("*") in colnam_mask
!  indstt(max_set)    ! position in oml colnam where each indexing field starts
!  indend(max_set)    ! position in oml colnam where each indexing field ends
!
  use efd_row_col
  implicit none
  character*(*) mask_arg
  integer ifound
  integer ic,i,j  ! do loop indices
  integer L       ! length of the mask
  integer*2 LM    ! length of the mask excluding parentheses, or the length of the oml row/col name described by the mask
  integer NL    ! number of left  parentheses in mask
  integer NR    ! number of right parentheses in mask
  integer nset  ! number of set positions in mask
  integer nset2 ! number of set identifiers in setnam
  integer iparen ! location of first parenthesis
  integer iconst ! length of colnam_mask up to first paren
  colnam_mask=mask_arg
  aimms_col_ID_num=-1
  if(colnam_mask.eq.' ') return
  ic=-1
  call usehash(colnam_mask, colmask_hash, max_col_aimms, ic, initial_store)
  aimms_col_ID_num=ic  ! aimms_col_ID_num is integer*2, ic argument is integer*4
  if(.not. initial_store) then
    csetnam(1:max_set)=' '       ! initialize so don't have to in calling routine
    cindstt=0
    cindend=0
    
    RETURN
    
  endif

  col_aimms(aimms_col_ID_num).colnam_mask  = colnam_mask

!  If "colnam_aimms" is blank (not assigned in calling program), then generate an AIMMS col identifer name and issue error message.
    if(colnam_aimms.eq.' ') then
      L=len_trim(colnam_mask)
      colnam_aimms='c'
      j=1
      do i=1,L
        if(index('()*!',colnam_mask(i:i)).eq.0) then
          j=j+1
          if(j.le.len(colnam_aimms)) then
            colnam_aimms(j:j)=colnam_mask(i:i)
           endif
         endif
      enddo
      write(io,'(3a)') 'MISSING: missing colnam_aimms for this colnam_mask: ',trim(colnam_mask),'. Initialize colnam_aimms setting for this mask in aimefd.xlsx. Will use ',trim(colnam_aimms),' for now'
      write(6,'(3a)') 'AIMMS Interface error: EFD: no colnam_aimms for this colnam_mask: ',trim(colnam_mask),'. Initialize colnam_aimms setting for this mask in aimefd.xlsx. Will use ',trim(colnam_aimms),' for now'
    endif
    col_aimms(aimms_col_ID_num).colnam_aimms = colnam_aimms
    col_aimms(aimms_col_ID_num).setnam(1:max_set) = csetnam(1:max_set)
    ic=-1
    call usehash(colnam_aimms, colname_hash, max_col_aimms, ic, initial_store)
    col_aimms_ptr(ic)=aimms_col_ID_num  ! with this, can get to the column info location (which is hash based on the mask) given the aimms identifier 
    
    cindstt=0
    cindend=0
    nset=0
! identify the character positions in the row names based on where the mask characters "*" are found

    L=len_trim(colnam_mask)
    if(index(colnam_mask,'!').gt.1) L=index(colnam_mask,'!')-1   ! strip off "!xxx" used as a mask exception string
    LM=0
    NL=0
    NR=0
    do i=1,L
      if(colnam_mask(i:i).eq.'(') then
        NL=NL+1
        nset=nset+1
        if(nset.le.max_set) cindstt(nset)=LM+1
      elseif(colnam_mask(i:i).eq.')') then
        NR=NR+1
        if(nset.le.max_set) cindend(nset)=LM
      elseif(colnam_mask(i:i).eq.'*') then
        LM=LM+1
      else
        LM=LM+1
      endif
    enddo
  
    if(LM.eq.0 .or. lm.gt.8 .or. NR.ne.NL .or. nset.gt.max_set) then   ! the mask, excluding parentheses, should be 1 to 8 characters and have balanced parentheses
      write(6,'(10a)') 'AIMMS Interface error in efd_set_AIMMS_col_ID, bad mask: ',trim(colnam_mask)
      csetnam(1:max_set)=' '       ! initialize so don't have to in calling routine
      return
    endif
    col_aimms(aimms_col_ID_num).indstt=cindstt
    col_aimms(aimms_col_ID_num).indend=cindend   
! make sure that's how many set names are defined
    nset2=0
    do i=1,max_set
      if(len_trim(csetnam(i)).gt.0) nset2=nset2+1
    enddo
    if(nset2 .ne. nset) then
      if(nset2.eq.0) then
        write(6,'(10a)') 'AIMMS Interface error, subroutine efd_set_AIMMS_col_ID, oml col name mask: ',trim(colnam_mask),' aimms set names not defined for ',trim(col_aimms(aimms_col_ID_num).colnam_aimms)
        do i=1,nset2
          csetnam(i)='Dummy'//char(47+i)
        enddo
      else
        write(6,'(10a)') 'AIMMS Interface error, subroutine efd_set_AIMMS_col_ID, oml col name mask: ',trim(colnam_mask),' aimms set names: ',((trim(csetnam(i)),' '),i=1,nset2)
      endif 
    endif    
  
  
  csetnam(1:max_set)=' '      
  colnam_AIMMS=' '
  cindstt=0
  cindend=0
  return 
end subroutine efd_set_AIMMS_col_ID

!===================================================================================================================================================
subroutine efd_set_AIMMS_row_ID(mask_arg)
! subroutine to set aimms row ID (aimms_row_ID_num) for given "mask_arg" setting and row_type (optionally set in calling routine).  If not found,
! define new aimms row and store the aimms row  attributes from like-named
! variables in calling routine on first use of unique mask_arg:
!  rownam_aimms ! AIMMS row name 
!  rsetnam(max_set)    ! indexing set names
! Determine this character positions of indexing fields in the row name based on finding mask characters ("*") in rownam_mask
!  indstt(max_set)    ! position in oml rownam where each indexing field starts
!  indend(max_set)    ! position in oml rownam where each indexing field ends
!
!subsequent calls, look up the mask
  use efd_row_col
  implicit none
  include 'omlall.fi'

  character*(*) mask_arg
  integer ifound
  integer ir,ic,i,j  ! do loop indices
  integer L     ! length of the mask
  integer*2 LM    ! length of the mask excluding parentheses, or the length of the oml row/col name described by the mask
  integer NL    ! number of left  parentheses in mask
  integer NR    ! number of right parentheses in mask
  integer nset  ! number of set positions in mask
  integer nset2 ! number of set identifiers in setnam
  integer iparen ! location of first parenthesis
  integer iconst ! length of rownam_mask up to first paren
  integer iret
  character*2  rtype_postfix,rtype*1
  integer ipostfix
  character*16 rw16

  rw16=efdrownam
  
  rownam_mask=mask_arg
  aimms_row_ID_num=-1
  if(rownam_mask.eq.' ') return

! row_type optionally may be set in calling routine during initialization of AIMMS row mask groups.  If so, use it.
! if row_type is blank, then determine row type
! from efdrownam, or if efdrownam is blank, assumed the default OML rowtype of "E" for equality.
  if(row_type.eq.' ') then  
    if (   efdrownam.eq.'EFDCOSTS') then
      row_type='N'
    elseif(efdrownam.eq.'BOUNDUP') then
      row_type='L'
    elseif(efdrownam.eq.'BOUNDLO') then
      row_type='G'
    elseif(efdrownam.ne.' ') then
      call usehash(efdrownam, efd_row_name, max_efd_row_hash, spot, initial_store)
      row_type=efd_row_sol(spot).row_type
      if(row_type.eq.' ') then
        row_type='E'
        efd_row_sol(spot).row_type='E'
      endif
      if(initial_store) then
        cnt_efd_row = cnt_efd_row + 1
      endif
    endif
  endif
  ir=-1
! Given the mask and row_type, check if there is already an AIMMS_row_ID_num   
  call usehash(rownam_mask//row_type, rowmask_hash, max_row_aimms, ir, initial_store)
  aimms_row_ID_num=ir  ! aimms_row_ID_num is integer*2, ir argument is integer*4
  if(.not. initial_store) then
    rsetnam(1:max_set)=' '   ! initialize so don't have to in calling routine
    rindstt=0
    rindend=0
    row_type=' '
    rownam_AIMMS=' '

    RETURN

  endif

! If here, then  a "row_AIMMS" record has not been created yet. So create one and assign
! "rownam_aimms" as the AIMMS row identifier for this row mask group and store the associated "rsetnam"
! domain sets.  

  row_aimms(aimms_row_ID_num).rownam_mask  = rownam_mask
  row_aimms(aimms_row_ID_num).row_type  = row_type

!  If "rownam_aimms" is blank (not assigned in calling program), then generate an AIMMS row identifer name and issue error message.
  if(rownam_aimms.eq.' ') then
  
    L=len_trim(rownam_mask)
    rownam_aimms='r'
    j=1
    do i=1,L
      if(index('()*!',rownam_mask(i:i)).eq.0) then
        j=j+1
        if(j.le.len(rownam_aimms)) then
          rownam_aimms(j:j)=rownam_mask(i:i)
        endif
      endif
    enddo
    L=index('  E  L  G  N  ',row_type)
    if(L.gt.0) then
      rtype_postfix = '  eq le ge n  '(L:)
    else
      rtype_postfix='eq'
    endif
    rownam_aimms=trim(rownam_aimms)//rtype_postfix

    write(io,'(8a)') 'MISSING: missing rownam_aimms for this rownam_mask: ',trim(rownam_mask),'row_type='//row_type//'. Initialize the rownam_aimms setting for this mask in subroutine efd_aimms_init. Will use ',trim(rownam_aimms),' for now'
    write(6,'(8a)') 'AIMMS Interface error: EFD: no rownam_aimms for this rownam_mask: ',trim(rownam_mask),'row_type='//row_type//'. Initialize the rownam_aimms setting for this mask in subroutine efd_aimms_init. Will use ',trim(rownam_aimms),' for now'
  endif 

! 
  row_aimms(aimms_row_ID_num).rownam_aimms = rownam_aimms
  row_aimms(aimms_row_ID_num).setnam(1:max_set) = rsetnam(1:max_set)
  ir=-1
  call usehash(rownam_aimms, rowname_hash, max_row_aimms, ir, initial_store)
  row_aimms_ptr(ir)=aimms_row_ID_num  ! with this, can get to the row info location (which is based on the mask) given the aimms identifier 

  rindstt=0
  rindend=0
  row_type=' '
  rownam_AIMMS= ' ' 

  nset=0
! identify the character positions in the row names based on where the mask characters "*" are found

  L=len_trim(rownam_mask)
  if(index(rownam_mask,'!').gt.1) L=index(rownam_mask,'!')-1   ! strip off "!xxx" used as a mask exception string
  LM=0
  NL=0
  NR=0
  do i=1,L
    if(rownam_mask(i:i).eq.'(') then
      NL=NL+1
      nset=nset+1
      if(nset.le.max_set) rindstt(nset)=LM+1
    elseif(rownam_mask(i:i).eq.')') then
      NR=NR+1
      if(nset.le.max_set) rindend(nset)=LM
    elseif(rownam_mask(i:i).eq.'*') then
      LM=LM+1
    else
      LM=LM+1
    endif
  enddo
  
  if(LM.eq.0 .or. lm.gt.8 .or. NR.ne.NL .or. nset.gt.max_set) then ! the mask, excluding parentheses, should be 1 to 8 characters and have balanced parentheses
    write(6,'(10a)') 'AIMMS Interface error in efd_set_AIMMS_row_ID, bad mask: ',trim(rownam_mask)
    rsetnam(1:max_set)=' '   ! initialize so don't have to in calling routine
    return
  endif

! make sure that's how many set names are defined
  nset2=0
  do i=1,max_set
    if(len_trim(rsetnam(i)).gt.0) nset2=nset2+1
  enddo
  if(nset2 .ne. nset) then
    if(nset2.eq.0) then
      write(6,'(10a)') 'AIMMS Interface error subroutine efd_set_AIMMS_row_ID, oml row name mask: ',trim(rownam_mask),' aimms set names not defined for ',trim(row_aimms(aimms_row_ID_num).rownam_aimms)
      do i=1,nset2
        rsetnam(i)='Dummy'//char(47+i)
      enddo
    else
      if(nset2.eq.nset+1 .and. rsetnam(nset2)(1:5).eq.rsetnam(nset)(1:5)) then  ! see if this will work as alias for last set
        rindstt(nset2)=rindstt(nset)
        rindend(nset2)=rindend(nset)
      else
        write(6,'(10a)') 'AIMMS Interface error subroutine efd_set_AIMMS_row_ID, oml row name mask: ',trim(rownam_mask),' aimms set names: ',(trim(rsetnam(i)),' ',i=1,nset2)
      endif
    endif
  endif    

  row_aimms(aimms_row_ID_num).indstt=rindstt
  row_aimms(aimms_row_ID_num).indend=rindend   
  
  rownam_AIMMS=' '
  rsetnam(1:max_set)=' '
  rindstt=0
  rindend=0
  row_type=' '
  return 
end subroutine efd_set_AIMMS_row_ID
!=========================================================================================
subroutine efd_aimms_deallocate
 use efd_row_col
 implicit none
  if (  allocated(efd_coeff)   ) then
    deallocate(efd_coeff)
  endif
  if (  allocated(efd_sortidx) ) then
    deallocate(efd_sortidx)
  endif
  if (  allocated(efd_sortkey) ) then
    deallocate(efd_sortkey)
  endif
  if (  allocated(efd_rowidx) ) then
    deallocate(efd_rowidx)
  endif
  if (  allocated(efd_rowkey) ) then
    deallocate(efd_rowkey)
  endif
  if (  allocated(efd_colidx) ) then
    deallocate(efd_colidx)
  endif
  if (  allocated(efd_colkey) ) then
    deallocate(efd_colkey)
  endif

  if (  allocated(efd_row_name)   ) then
    deallocate(efd_row_name)
  endif

  if (  allocated(efd_col_name)   ) then
    deallocate(efd_col_name)
  endif

  if (allocated(efd_col_sol)) then
    deallocate(efd_col_sol)
  endif
  if (allocated(efd_row_sol)) then
    deallocate(efd_row_sol)
  endif
  if (allocated(row_sol_names)) then
    deallocate(row_sol_names)
  endif
  if (allocated(row_sol_types)) then
    deallocate(row_sol_types)
  endif
  if (allocated(col_sol_names)) then
    deallocate(col_sol_names)
  endif
  
end subroutine efd_aimms_deallocate

!===================================================================================================================================================
subroutine efd_aimms_init
! initialize aimms-efd-related row, col, and coefficients and allocate arrays dynamically so space is above 2GB area.
! Read aimefd.xlsx to get AIMMS identifier names and row/column masks to decode OML row and column names
 use efd_row_col
 implicit none
 include 'parametr'
 include 'ncntrl'
 integer file,iset,i5,i
 logical lopened,not_done_yet/.true./
 
! declarations for local aimefd.xlsx inputs
  logical read_aimefd/.false./
  !integer*4 c_count,r_count,p_count                   ! number of row items for columns, rows, and parameters
  character(LEN=24), allocatable :: xcolnam(:)        ! xlsx AIMMS column    names for colnam_aimms assignments
  character(LEN=30), allocatable :: xcolsetnam(:,:)   ! xlsx AIMMS column    names for colnam_aimms assignments
  character(LEN=30), allocatable :: xcolmask(:)       ! xlsx oml column mask for an AIMMS column
!  character(LEN=150),allocatable :: xc_comment(:)     ! xlsx definition/description of AIMMS column
 
  character(LEN=24), allocatable :: xrownam(:)        ! xlsx AIMMS row       names for rownam_aimms assignments
  character(LEN=30), allocatable :: xrowsetnam(:,:)   ! xlsx AIMMS row       names for rownam_aimms assignments
  character(LEN=30), allocatable :: xrowmask(:)       ! xlsx oml row    mask for an AIMMS row
  character(LEN=1), allocatable :: xrow_type(:)      ! xlsx row type bound for AIMMS row: E =, L <=, G >=, or N nonconstrained/free
!  character(LEN=150),allocatable :: xr_comment(:)    ! xlsx definition/description of AIMMS row
  
  character(LEN=38), allocatable :: xparamname(:)     ! xlsx AIMMS parameter names 
  character(LEN=30), allocatable :: xparsetnam(:,:)   ! xlsx AIMMS parameter set names 
  
  character(LEN=16) rname
  integer ixlsx,j
! end of local xlsx data  
 
 
 character*8 year_iter,filen*25
 LOGICAL NEW,LEXIST
 INTEGER FILE_MGR
 EXTERNAL FILE_MGR
 


  call efd_aimms_deallocate 
 
  allocate( efd_coeff(max_efd_coeff) )
  efd_coeff(:).efdcolnam =' '
  efd_coeff(:).efdrownam =' ' 
  efd_coeff(:).coeff8 = 0.         
  efd_coeff(:).aimms_col_ID_num=-1
  efd_coeff(:).aimms_row_ID_num=-1
  do i=1,max_domain_sets 
    efd_coeff(:).iset_elements(i)=0
    efd_coeff(:).cset_elements(i)=' '
  enddo
  efd_coeff(:).efdsub=' '
  
  allocate( efd_sortidx(max_efd_coeff) )
  allocate( efd_sortkey(max_efd_coeff) )

  allocate( efd_rowidx(0:max_efd_row_hash) )
  allocate( efd_rowkey(0:max_efd_row_hash) )
  allocate( efd_colidx(0:max_efd_col_hash) )
  allocate( efd_colkey(0:max_efd_col_hash) )
  allocate( efd_row_name(0:max_efd_row_hash) )
  allocate( efd_col_name(0:max_efd_col_hash) )

  efd_row_name=' '
  efd_col_name=' '

  if(.not. allocated (col_aimms)) then  ! do once. do not deallocate.! do once. do not deallocate. the data may change over the model horizon
    allocate(     col_aimms(0:max_col_aimms) )
    allocate(  colmask_hash(0:max_col_aimms) )
    allocate(  colname_hash(0:max_col_aimms) )
    allocate( col_aimms_ptr(0:max_col_aimms) )
    colmask_hash=' '
    colname_hash=' '
    col_aimms_ptr=0
    col_aimms(:).colnam_mask=' '
    col_aimms(:).colnam_aimms=' '
    do iset=1,max_set
      col_aimms(:).indstt(iset)=0
      col_aimms(:).indend(iset)=0
      col_aimms(:).setnam(iset)=' '
    enddo
    col_aimms(:).needsol=0
  endif

  if(.not. allocated (row_aimms)) then
    allocate(     row_aimms(0:max_row_aimms) )
    allocate(  rowmask_hash(0:max_row_aimms) )
    allocate(  rowname_hash(0:max_row_aimms) )
    allocate( row_aimms_ptr(0:max_row_aimms) )
    rowmask_hash=' '
    rowname_hash=' '
    row_aimms_ptr=0
    row_aimms(:).rownam_mask=' '
    row_aimms(:).rownam_aimms=' '
     do iset=1,max_set
      row_aimms(:).indstt(iset)=0
      row_aimms(:).indend(iset)=0
      row_aimms(:).setnam(iset)=' '
    enddo
    row_aimms(:).needsol=0
  endif
 
  allocate( efd_col_sol(0:max_efd_col_hash) )
  allocate( efd_row_sol(0:max_efd_row_hash) )
  allocate( row_sol_names(max_efd_row) )
  allocate( row_sol_types(max_efd_row) )
  allocate( col_sol_names(max_efd_col) )
  cnt_efd_coeff=0
  cnt_efd_row=0
  cnt_efd_col=0
  
  rownam_aimms=' '
  colnam_aimms=' '
  rownam_mask=' '
  colnam_mask=' '
  csetnam(1:max_set)=' '
  rsetnam(1:max_set)=' '
  row_sol_names=' '
  row_sol_types=' '
  col_sol_names=' '
  do i5=1,5   ! 5 solution fields
    efd_col_sol(:).solval(i5)=0.
    efd_row_sol(:).solval(i5)=0.
  enddo
  efd_col_sol(:).AIMMS_col_ID_num=-1
  efd_col_sol(:).nsets=0
  efd_col_sol(:).efdcolnam=' '
  efd_col_sol(:).status=' ' 

  efd_row_sol(:).AIMMS_row_ID_num=-1
  efd_row_sol(:).nsets=0
  efd_row_sol(:).efdrownam=' '
  efd_row_sol(:).row_type=' '
  efd_row_sol(:).status=' '

  do iset=1,max_set   ! max set per aimms row/col identifier
    efd_col_sol(:).iset_elements(iset)=0
    efd_col_sol(:).cset_elements(iset)=' '
    efd_row_sol(:).iset_elements(iset)=0
    efd_row_sol(:).cset_elements(iset)=' '
  enddo
  
  num_efd_col_sol=0
  num_efd_row_sol=0

   aimparm(1:max_aimms_param).idxFirst=0
   aimparm(1:max_aimms_param).idxLast=0
     
  if(.not. read_aimefd) then  ! only need to read aimefd.xlsx once
  
     aimparm(1:max_aimms_param).name=' '
     do i=1,max_domain_sets
       aimparm(1:max_aimms_param).setnames(i)=' '
     enddo
     
     aimparm(1:max_aimms_param).numsets=0
     read_aimefd=.true.
     new=.false.
     ixlsx=file_mgr('O','AIMEFD',new)   ! aimefd.xlsx.  use upper case prefix to match name in FILELIST
     if(ixlsx.eq.-1) then
        inquire(file='aimefd.xlsx',exist=lexist)
        if(.not.lexist) then
            write(6,*)' aimefd.xlsx does not exist. put it in current folder if not running in NEMS.'
            stop
        else
          call unitunopened(100,999,ixlsx)
          open(ixlsx,file='aimefd.xlsx',status='old',READONLY)
        endif
      endif
        
         
     call readRngXLSX(ixlsx,'col_row')  ! read sheet "col_row" range names and the data in them
     close(ixlsx)
     rname='C_COUNT'
     call getrngi4(rname,c_count,1,1,1)
     rname='R_COUNT'
     call getrngi4(rname,r_count,1,1,1)
! allocate arrays to hold aimms column and row definitions
     allocate (xcolnam(       c_count))
     allocate (xcolsetnam(    c_count,max_set))
     allocate (xcolmask(      c_count))
!     allocate (xc_comment(c_count))
     allocate (xrownam(       r_count))
     allocate (xrowsetnam(    r_count,max_set))
     allocate (xrowmask(      r_count))
     allocate (xrow_type(     r_count))
!     allocate (xr_comment(r_count))
!                                           range,destination,     cols,rows,groups
     rname='COLNAM_AIMMS    '; call getrngc(rname,xcolnam,            1,c_count,1)
     rname='COLNAM_MASK     '; call getrngc(rname,xcolmask,           1,c_count,1)
     rname='CSETNAM1        '; call getrngc(rname,xcolsetnam(1,1),    1,c_count,1)
     rname='CSETNAM2        '; call getrngc(rname,xcolsetnam(1,2),    1,c_count,1)
     rname='CSETNAM3        '; call getrngc(rname,xcolsetnam(1,3),    1,c_count,1)
     rname='CSETNAM4        '; call getrngc(rname,xcolsetnam(1,4),    1,c_count,1)
     rname='CSETNAM5        '; call getrngc(rname,xcolsetnam(1,5),    1,c_count,1)

!     rname='C_COMMENT       '; call getrngc(rname,xc_comment,             1,c_count,1)

     rname='ROWNAM_AIMMS    '; call getrngc(rname,xrownam,            1,r_count,1)
     rname='ROWNAM_MASK     '; call getrngc(rname,xrowmask,           1,r_count,1)
     rname='ROW_TYPE        '; call getrngc(rname,xrow_type,          1,r_count,1)
     rname='RSETNAM1        '; call getrngc(rname,xrowsetnam(1,1),    1,r_count,1)
     rname='RSETNAM2        '; call getrngc(rname,xrowsetnam(1,2),    1,r_count,1)
     rname='RSETNAM3        '; call getrngc(rname,xrowsetnam(1,3),    1,r_count,1)
     rname='RSETNAM4        '; call getrngc(rname,xrowsetnam(1,4),    1,r_count,1)
     rname='RSETNAM5        '; call getrngc(rname,xrowsetnam(1,5),    1,r_count,1)

     !     rname='R_COMMENT       '; call getrngc(rname,xr_comment,             1,r_count,1)

     ixlsx=file_mgr('O','AIMEFD',new)     ! aimefd.xlsx.  use upper case prefix to match name in FILELIST
     if(ixlsx.eq.-1) then
        inquire(file='aimefd.xlsx',exist=lexist)
        if(.not.lexist) then
            write(6,*)' aimefd.xlsx does not exist. put it in current folder if not running in NEMS.'
        else
          call unitunopened(100,999,ixlsx)
          open(ixlsx,file='aimefd.xlsx',status='old',READONLY)
        endif
      endif
     call readRngXLSX(ixlsx,'parameter')  ! read sheet "parameter" range names and the data in them
     close(ixlsx)
     rname='P_COUNT'
     call getrngi4(rname,p_count,1,1,1)
! allocate arrays to hold aimms column and row definitions
     allocate (xparamname(p_count))
     allocate (xparsetnam(p_count,max_domain_sets))
     rname='PARAMNAME       '; call getrngc(rname,xparamname,     1,p_count,1)
     rname='PSETNAM1        '; call getrngc(rname,xparsetnam(1,1),1,p_count,1)
     rname='PSETNAM2        '; call getrngc(rname,xparsetnam(1,2),1,p_count,1)
     rname='PSETNAM3        '; call getrngc(rname,xparsetnam(1,3),1,p_count,1)
     rname='PSETNAM4        '; call getrngc(rname,xparsetnam(1,4),1,p_count,1)
     rname='PSETNAM5        '; call getrngc(rname,xparsetnam(1,5),1,p_count,1)
     rname='PSETNAM6        '; call getrngc(rname,xparsetnam(1,6),1,p_count,1)
     rname='PSETNAM7        '; call getrngc(rname,xparsetnam(1,7),1,p_count,1)
     rname='PSETNAM8        '; call getrngc(rname,xparsetnam(1,8),1,p_count,1) ! max_domain_sets is 8 in efd, 9 in ecp
     if(max_domain_sets.ge.9) then
       rname='PSETNAM9        '; call getrngc(rname,xparsetnam(1, 9),1,p_count,1) ! ecp only
       rname='PSETNAMA        '; call getrngc(rname,xparsetnam(1,10),1,p_count,1) ! ecp only
       rname='PSETNAMB        '; call getrngc(rname,xparsetnam(1,11),1,p_count,1) ! ecp only
     endif     

     ixlsx=file_mgr('O','AIMEFD',new)       ! aimefd.xlsx.  use upper case prefix to match name in FILELIST
     if(ixlsx.eq.-1) then
        inquire(file='aimefd.xlsx',exist=lexist)
        if(.not.lexist) then
            write(6,*)' aimefd.xlsx does not exist. put it in current folder if not running in NEMS.'
        else
          call unitunopened(100,999,ixlsx)
          open(ixlsx,file='aimefd.xlsx',status='old',READONLY)
        endif
      endif
     call readRngXLSX(ixlsx,'efdSetMatch')  ! read sheet "efdSetMatch" range names and the data in them
     close(ixlsx)
     rname='EFDLOOKCOUNT'
     call getrngi4(rname,EFDSetLookCount,1,1,1)
     allocate (xefdSetLook(EFDSetLookCount,5))
     rname='EFDLOOK         '; call getrngc(rname,xefdSetLook,EFDSetLookCount,5,1)
     
! establish AIMMS identifiers and set names
      rownam_AIMMS=' '
      rownam_mask=' '
      aimms_col_ID_num=-1
      aimms_row_ID_num=-1
      csetnam=' '
      rsetnam=' ' 

! On the first time efd_set_AIMMS_Col_ID is called with a unique mask argument, it adds the mask to a list
! and records the colnam_AIMMS and AIMMS set names for decoding the OML identifier with the mask.  So in the first call make
! sure colnam_AIMMS and csetnam(:) are filled.  So I'm doing that here.  Subsequent calls need just the mask argument.

    do i=1,c_count
      colnam_AIMMS=xcolnam(i)
      csetnam(1:max_set)=xcolsetnam(i,1:max_set)
      call efd_set_aimms_col_ID(xcolmask(i))
    enddo
    colnam_AIMMS=' '

! On the first time efd_set_AIMMS_Row_ID is called with a unique mask argument, it adds the mask to a list
! and records the rownam_AIMMS and AIMMS set names for decoding the OML identifier with the mask.  So in the first call make
! sure rownam_AIMMS and rsetnam(:) are filled.  So I'm doing that here.  Subsequent calls need just the mask argument.  
! Assigning row_type is necessary to separate row groups with mixed row_types or ones that depend on model options or year.

    efdrownam=' ' 
    
    do i=1,r_count
      rownam_AIMMS=xrownam(i)
      row_type=xrow_type(i)
      rsetnam(1:max_set)=xrowsetnam(i,1:max_set)
      call efd_set_aimms_row_ID(xrowmask(i))
    enddo
    rownam_AIMMS= ' ' 
    row_type=' '

    do i=1,p_count
      aimparm(i).name = xparamname(i)
      aimparm(i).setnames(1:max_domain_sets) = xparsetnam(i,1:max_domain_sets)
    enddo
   
    
! write set definitions out, then read them back into a single data structure    
    call unitunopened(100,999,io)
    open(io,file='efd\efdsetdata.dat',status='unknown',BUFFERED='YES',BUFFERCOUNT=5,err=48)
    rewind io
    goto 49
48  continue
    ! if calling this routine from readaimlis.exe or other program outside of nems, efd folder won't exist, so just write it in local
     open(io,file='efdsetdata.dat',status='unknown',BUFFERED='YES',BUFFERCOUNT=5)   
49   continue
    call write_efd_sets
    close(io)
    call read_efd_sets
    close(io)
  endif  
  
 ! open coefficient debug file 
   IF (AIMEFDBG.eq.1) THEN
   if(not_done_yet) then
    not_done_yet=.false.
    NEW=.true.
    io=file_mgr('O','EFDCOEFF',NEW)  ! get unit number for generic file efdcoeff.txt
    if(io.gt.0) then
      inquire(unit=io,opened=lopened)  ! close generic file but reuse unit number for year-specific version
      if(lopened) then
        close(io,status='DELETE')
      endif
    else
      call unitunopened(100,999,io)
    endif
  endif
  write(year_iter,'(i4,"_",i2.2)') curcalyr,curitr
  filen_efdcoeff='efdcoeff_'//trim(year_iter)//'.txt'     ! year- and iter-specific version of efdcoeff.txt 
  open(io,file=filen_efdcoeff,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
  rewind io
  ENDIF
   
  return
end subroutine efd_aimms_init

!===================================================================================================================================================
subroutine efd_list_aimms_rowcols(iopen)
  use efd_row_col
  use ifport,only:timef
! writes out the AIMMS row and column names along with their associated OML masks and the sets defining their index space
  implicit none 
  include 'parametr'
  include 'ncntrl'
  integer ir,ic,i
  integer iopen ! if 1, open file to hold it. otherwise (0) write to already open ecpcoeff_yyyy_it.txt
  logical lopened
  character*1 rowtype, file_rc*80
  
  if(iopen.eq.1)Then
    inquire(unit=io, opened=lopened)
    if(lopened) then
      close(io)
    endif
    write(file_rc,'(a,i4,a)') 'efd_rows_columns_',curcalyr,'.txt'
    open(io,file=file_rc,status='unknown',BUFFERED='YES',BUFFERCOUNT=5)
    rewind io
  endif
  write(io,'(a)') 'COLUMNS: AIMMS column names, sets, and mapping to OML Column name groups'
  do ic=0,max_col_aimms
    if(col_aimms(ic).colnam_aimms.ne.' ') then
    
      write(io,'(a,i3,1x,a,2x,a,i2,1x,<max_set>(1x,i1,":",i1),<max_set>(1x,a))')  'COLUMNS: ',  &
                     ic,col_aimms(ic).colnam_aimms, &
                        col_aimms(ic).colnam_mask , &
                        col_aimms(ic).needsol, &
                       (col_aimms(ic).indstt(i),col_aimms(ic).indend(i),i=1,max_set), &
                       (col_aimms(ic).setnam(i),i=1,max_set)
    endif
  enddo
  write(io,'(a)') 'ROWS: '
  write(io,'(a)') 'ROWS:     AIMMS row names, sets, and mapping to OML Row name groups'
  do ir=0,max_row_aimms
    if(row_aimms(ir).rownam_aimms.ne.' ') then
      rowtype=row_aimms(ir).row_type

      write(io,'(a,i3,1x,a,2x,a,i2,1x,<max_set>(1x,i1,":",i1),<max_set>(1x,a))')   'ROWS: '//rowtype//' ',  &
                     ir,row_aimms(ir).rownam_aimms, &
                        row_aimms(ir).rownam_mask , &
                        row_aimms(ir).needsol, &
                       (row_aimms(ir).indstt(i),row_aimms(ir).indend(i),i=1,max_set), &
                       (row_aimms(ir).setnam(i),i=1,max_set)
    endif
  enddo

  if(iopen.eq.1) then
    close (io)
  endif
end subroutine efd_list_aimms_rowcols
!===================================================================================================================================================
subroutine efd_fill_aimms_coeff
  use efd_row_col
  use ifport,only:timef
! fill AIMMS coefficient arrays from list generated through LP calls to DVAL and efd_assign_coeff.
! write out the coefficients to unit io (efdcoeff_year_it.txt) for debugging
  implicit none  
  
  integer ir,ic,i,L,iL,ip,oldip,ix,icolon
  integer im, ifound,nmissing
  integer,parameter :: maxmissing=400
  character*24 missc(maxmissing),missr(maxmissing)
  integer unit
  character*1 colon/':'/  

  integer inBoth ! if nonzero, indicates the set is used in both the row and col names. if so, value is set index for the column
  integer UseCol ! if >0 and inBoth>1, then triggers a set element pick from the column name. results in a swap of two elements in generating the AIMMS parameter tuple  
  character*20 colstr,rowstr  ! col, row name set elements separated by commas
  character*30 colstrA,rowstrA
  character*1 c1,c2*2,c3*3, c*1, c4*4, c5*5
  character*5 c5col
 
 integer lenset, e,i4

  integer icode,check
  integer iopt ! argument to get_efd_set; if 1, return ordinal for set element, too (for "_ALT" aliased sets)
  character*40 ParamName, ParamTemp, SortKeyOld*57, char_ic*7
  real*4 timer,timer2
  integer*2 aimms_row_ID_num_old

  timer=timef() ! time this subroutine
  set_lookup=.true.
  nmissing=0
  missc=' '
  missr=' '
  timer2=timef()
    
! Print AIMMS row and column names along with their associated OML masks and the sets defining their index space   
  if(AIMEFDBG.eq.1 .or. make_efd_aimms) then
    call efd_list_aimms_rowcols(0)

!   write coefficients for debuggging
    write(io,'(a)') 'COEFF_HEAD: '
    write(io,'(a)') 'COEFF_HEAD: Coefficients with OML column/row names, mask patterns, and OML-to-AIMMS set mappings'
  endif

! check/revise aimms_row_id_num for each coefficient, generate sort keys to sort/count coefficients 
  oldip=0
  do ic=1,cnt_efd_coeff
     efdcolnam     = efd_coeff(ic).efdcolnam    
     efdrownam     = efd_coeff(ic).efdrownam
     aimms_col_ID_num    = efd_coeff(ic).aimms_col_ID_num  
     aimms_row_ID_num    = efd_coeff(ic).aimms_row_ID_num 
!    DEBUG
     aimms_row_ID_num_old =aimms_row_ID_num
! reacquire the aimms_row_id_num based on the current row_type of efdrownam, as
! there may be more than one row_type with a given rownam_mask    
     if(aimms_row_ID_num .ge. 0) then
        row_type=' ' ! forces efd_set_aimms_row_ID to look up rowtype based on efdrownam
        rownam_mask   = row_aimms(aimms_row_ID_num).rownam_mask   
        call efd_set_aimms_row_ID(rownam_mask) 
        if(  aimms_row_ID_num_old .ne. aimms_row_ID_num ) then
!         write(io,'(a)')' aimms_row_ID_num changed for col/row: '//efdcolnam//' '//efdrownam//' '//row_type//' '// row_aimms(aimms_row_ID_num).rownam_aimms
          efd_coeff(ic).aimms_row_ID_num = aimms_row_ID_num
        endif
     else
       write(6,'(a,i5)') 'AIMMS Interface error: aimms_row_id_num<0 for coefficient ic, ic=',i
     endif
     if(aimms_row_ID_num.ge.0  .and. aimms_col_ID_num.ge.0) then
       colnam_aimms  = col_aimms(aimms_col_ID_num).colnam_aimms 
       rownam_aimms  = row_aimms(aimms_row_ID_num).rownam_aimms 
       ParamName='cpass_'//trim(colnam_aimms)//'_'//trim(rownam_aimms)
       L=index(ParamName,'!')
       if(L.gt.0) ParamName(L:L)='|'  ! change to vertical bar for sorting so primary parameter name comes first. ! is ascii 33, | is 94
      else
        paramName=' '
     endif
     write(char_ic,'(i7.7)') ic
     efd_sortkey(ic) = trim(ParamName)//':'//efdcolnam//efdrownam
     efd_sortkey(ic)(58:64)=char_ic  ! preserve order of duplicates with char_ic
     efd_sortidx(ic) = ic 
  enddo

  
  call emm_sort64(efd_sortkey, efd_sortidx, cnt_efd_coeff, max_efd_coeff)

!  SortKeyOld=' '
!DEC$ PARALLEL
  do ix=1,cnt_efd_coeff

     ic=efd_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.

     efdcolnam     = efd_coeff(ic).efdcolnam    
     efdrownam     = efd_coeff(ic).efdrownam
     
     aimms_col_ID_num    = efd_coeff(ic).aimms_col_ID_num  
     aimms_row_ID_num    = efd_coeff(ic).aimms_row_ID_num 

     ParamName='not defined'
 
     if(aimms_col_ID_num .ge. 0 .and. aimms_row_ID_num .ge. 0) then
       colnam_mask   = col_aimms(aimms_col_ID_num).colnam_mask     
       colnam_aimms  = col_aimms(aimms_col_ID_num).colnam_aimms 
       csetnam(:)  = col_aimms(aimms_col_ID_num).setnam(:)  
       cindstt(:)  = col_aimms(aimms_col_ID_num).indstt(:)  
       cindend(:)  = col_aimms(aimms_col_ID_num).indend(:)  

       rownam_mask   = row_aimms(aimms_row_ID_num).rownam_mask     
       rownam_aimms  = row_aimms(aimms_row_ID_num).rownam_aimms 
       rsetnam(:)  = row_aimms(aimms_row_ID_num).setnam(:)  
       rindstt(:)  = row_aimms(aimms_row_ID_num).indstt(:)  
       rindend(:)  = row_aimms(aimms_row_ID_num).indend(:)  

       efdcoeff8= efd_coeff(ic).coeff8    
       
       ic=efd_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.
       icolon=index(efd_sortkey(ix),':') ! first part of sortkey, up to ":", is the aimms parameter name
       ifound=0
       if(icolon.le.1) then
         ParamName='not defined'
         ifound=1
       else
         ParamName=efd_sortkey(ix)(1:icolon-1)
         L=index(ParamName,'|')
         if(L.gt.0) ParamName(L:L)='!'  ! change back to ! after sorting with |
       endif
       UseCol=index(ParamName,'!')+index(ParamName,'|') ! if either is gt.0, triggers an exception to use col set element. in case ! is in both col/row names, only first is converted to |
! If generating list of parameter arrays need to store coefficients, erase paramName temporarily
! so the list of paramname's needed will be listed int the "missing messages" below
       if(make_efd_aimms)then 
         ParamTemp=ParamName
         ParamName='nothing'
       endif

      ifound=0
       do ip=1,max_aimms_param
         if(ParamName.eq.aimparm(ip).name) then
           ifound=ip
           exit
         endif
       enddo  
! for each AIMMS parameter, record its First and Last coefficient positions from efd_sortidx
       if(ifound.gt.0) then
         if(ip.ne.oldip) then
           if(oldip.ne.0) then
             aimparm(oldip).idxLast=ix-1
           endif
           aimparm(ip).idxFirst=ix
           oldip=ip
         endif

! fill the integer set elements (efd_coeff(ic).iset_elements)  associated with this coefficient (ic), given
! the efdcolnam and efdrownam, the col and row masks, the col and row mask sets, and the AIMMS parameter's domain sets.
! This provides the information necessary to later output the coefficients by AIMMS parameter name with the appropriate set indices.

         do i=1,max_domain_sets
           lenset=len_trim(aimparm(ip).setNames(i))
           if(lenset.gt.0) then
             if(index(aimparm(ip).setNames(i),'_ALT').gt.0) then
               i4=0
               c5=' '
               call get_efd_set( 1,   aimparm(ip).setNames(i)(:lenset)    ,c5,i4,c5col,inBoth,UseCol)  ! get integers, too
               efd_coeff(ic).iset_elements(i)=i4       
               efd_coeff(ic).cset_elements(i)=c5       
                if(i4.eq.0) then
                 write(io,'(a)')  'FILLING: '//trim(ParamName)//', for set '//trim(aimparm(ip).setNames(i))//', set element number is 0, masked field is:'//trim(c5)
                 call write_efd_row_col_dbg(IO)
               endif
             else  ! For non-aliased sets, don't need ordinal value, so just get element string (faster)
               i4=0
               c5=' '
               call get_efd_set( 0,   aimparm(ip).setNames(i)(:lenset)    ,c5,i4,c5col,inBoth,UseCol)  ! just return set
               efd_coeff(ic).cset_elements(i)=c5       
               if(c5.eq.' ') then
                 write(io,'(a)')  'FILLING: '//trim(ParamName)//', for set '//trim(aimparm(ip).setNames(i))//', set element code in masked field is empty'
                 call write_efd_row_col_dbg(IO)
               endif
             endif
           else
             exit
           endif
         enddo

       else
         do im=1,nmissing
          if(missc(im).eq.colnam_aimms .and. missr(im).eq.rownam_aimms) then
            ifound=1
            exit
          endif
         enddo
         if(ifound.eq.0) then
           nmissing=nmissing+1
           im=nmissing
           if(im.le.maxmissing) then
             missc(im)=colnam_aimms
             missr(im)=rownam_aimms
             write(io,'(4a)') 'MISSING: no corresponding coefficient matrix for this pair:', trim(colnam_aimms),' ',trim(rownam_aimms)
             write(6,'(4a)') 'AIMMS Interface error: EFD: no corresponding coefficient matrix for this pair:', trim(colnam_aimms),' ',trim(rownam_aimms)
           else
             write(io,'(a)') 'MISSING: too many missing coefficient matrix names. increase maxmissing'
           endif
         endif
          
       endif
       
       if(make_efd_aimms)then  ! restore parameter name for coeffient debug output written below
         ParamName=ParamTemp
       endif

       if(AIMEFDBG.eq.0 .and. .not. make_efd_aimms) cycle ! omit rest of coefficient loop which is for writing debug efdcoeff*txt.

! for debug display column name in array format, such as B(R,P,G,F)
       colstr=' '
       colstrA=' '
       if(cindstt(1).gt.1) then
         colstrA=trim(colnam_aimms)//'('

! copy constant parts of mask to colstr and add left paren
         il=len_trim(colnam_mask)
         do i=1,il
           c=colnam_mask(i:i)
           if(c.ne.'(' .and. c.ne.')' .and. c.ne.'*' .and. c.ne.' ') then
             colstr=trim(colstr)//c
           endif
         enddo
          colstr=trim(colstr)//'('
       else
         colstr=trim(efdcolnam)//'('
         if(len_trim(colnam_aimms).gt.0) then
            colstrA=trim(colnam_aimms)//'('
         else
            colstrA=colstr
         endif
       endif
! insert set elements separate by commas
       do i=1,max_set
         if(cindstt(i).ne.0 .and. cindend(i).ne.0) then
           colstr=trim(colstr)//efdcolnam(cindstt(i):cindend(i))//','
           colstrA=trim(colstrA)//efdcolnam(cindstt(i):cindend(i))//','
         else
           exit
         endif
       enddo

       L=len_trim(colstr)
       if(colstr(L:L).eq.',') colstr(L:L)=' '
       colstr=trim(colstr)//')'

       L=len_trim(colstrA)
       if(L.gt.0) then
         if(colstrA(L:L).eq.',') colstrA(L:L)=' '
       endif
       colstrA=trim(colstrA)//')'

! for debugging, display row name in array format, such as BTU(R,P,G)
       rowstr=' '
       rowstrA=' '
       if(rindstt(1).gt.1) then
         rowstrA=trim(rownam_aimms)//'('

! copy constant parts of mask to rowstr and add left paren
         il=len_trim(rownam_mask)
         do i=1,il
           c=rownam_mask(i:i)
           if(c.ne.'(' .and. c.ne.')' .and. c.ne.'*' .and. c.ne.' ') then
             rowstr=trim(rowstr)//c
           endif
         enddo
         rowstr=trim(rowstr)//'('
       else
         rowstr=trim(efdrownam)//'('  ! for some that have not set dimension at all
         rowstrA=rownam_aimms
         if(len_trim(rownam_aimms).gt.0) then
            rowstrA=trim(rownam_aimms)//'('
         else
            rowstrA=rowstr
         endif
       endif
! add names of set elements separated by commas
       do i=1,max_set
         if(rindstt(i).ne.0 .and. rindend(i).ne.0) then
           rowstr=trim(rowstr)//efdrownam(rindstt(i):rindend(i))//','
           if(len_trim(rsetnam(i)).gt.0) then
             rowstrA=trim(rowstrA)//efdrownam(rindstt(i):rindend(i))//','
           else
             rowstrA=rowstrA//' ,'
           endif
         else
           exit
         endif
       enddo
       L=len_trim(rowstr)
       if(rowstr(L:L).eq.',') rowstr(L:L)= ' '
       rowstr=trim(rowstr)//')'

       L=len_trim(rowstrA)
       if(l.gt.0) then
         if(rowstrA(L:L).eq.',') rowstrA(L:L)= ' '
         rowstrA=trim(rowstrA)//')'
       endif
       write(io,'(a,a,1x,a,f16.6,(a,a,1x,a,1x,a),(1x,a,1x,a,1x,a,a) )') 'COEFF1:', &
       efdcolnam//colon,efdrownam//colon,efd_coeff(ic).coeff8, colon,&
       colnam_mask//colon,colstr//colon,colstrA//colon,  &      
       rownam_mask//colon,rowstr//colon,rowstrA//colon, '|'//trim(ParamName)//'|'//trim(efd_coeff(ic).efdsub)
     else
       write(io,'(a, a,1x,a,f16.6,a,2I6)') 'COEFF2: missing AIMMS masks? 0 found for AIMMS column/row ID num: ', &
       efdcolnam//colon,efdrownam//colon,efd_coeff(ic).coeff8,' col, row ID numbers: ',aimms_col_ID_num, aimms_row_ID_num
    
     endif
  enddo
  if(ip.gt.0 .and. ip.le.max_aimms_param) then
    aimparm(ip).idxLast=cnt_efd_coeff
  endif
  write(6,'(a,f9.2)') 'AIMMS Interface: seconds to assemble the EFD coefficients into AIMMS parameter groups:',timef()-timer2
  timer=timef()

  if(write_efd_mps .eq. 1)then
    call efd_mps
    write(6,'(a,f9.2)') 'AIMMS Interface: seconds to write the mps file',timef()-timer
    timer=timef()
  endif

  colnam_mask   = ' '    
  colnam_aimms  = ' '
  csetnam  = ' '  
  cindstt  = 0 
  cindend  = 0  

  rownam_mask   = ' '    
  rownam_aimms  = ' ' 
  rsetnam  = ' ' 
  rindstt  = 0  
  rindend = 0  

end subroutine efd_fill_aimms_coeff
!================================================================================================================
subroutine get_efd_set(iopt, setname, ccode, icode, c5col, inBoth , UseCol)
! returns, ccode, the part of the column or row name representing the given "setname".
! if iopt=1, also return icode, the integer set element for that character code.
! inBoth is non zero if the set is found in both the row and column names.  If so, inBoth
! holds the column set element.
! UseCol:  if >0, then use the column set element if inBoth is nonZero; expect a row-col discrepancy so omit error msg 
  use efd_row_col
  implicit none

  integer, intent(in)           :: iopt    ! option 1: also return ordinal set number: icode. 0: return ccode only (faster)
  character(LEN=*), intent(in)  :: setname ! name of the set
  character(LEN=*), intent(out) :: ccode   ! character code for the set element 
  integer, intent(out)          :: icode   ! integer code for the set element
  integer, intent(out)          :: inBoth  ! if nonzero, indicates the set is used in both the row and col names. if so, value is set index for the column
  
  character*(*) c5col   ! character code for the set element as found in the column name
  integer i
  integer iRset, iCset  ! number of the set in the mask
  integer UseCol ! if >0, then use the column set element if inBoth is nonZero; expect a row-col discrepancy so omit error msg 
  character*80 repeats(500),combo
  integer nrepeats(500),ncombo/0/,ifound
  logical bothDiff ! if true, the set is used in both the row and col names and the elements differ
  set_lookup=.true.  ! option to lookup individual set element.  if false, writes out the set to efdsetdata.dat
  inBoth=0
  iRset=0
  iCset=0
  ccode=' '
  c5col=' '

! check if the setname is found in the sets defined for the row mask
  do i=1,max_set
    if(rsetnam(i).eq.setname) then
      if(rindstt(i).gt.0 .and. rindend(i).gt.0) then
        iRset=i
        exit ! exit do loop early
      endif
    elseif(rsetnam(i).eq.' ') then
      exit
    endif
  enddo

! check if the setname is found in the sets defined for the column mask
  do i=1,max_set
    if(csetnam(i).eq.setname) then
      if(cindstt(i).gt.0 .and. cindend(i).gt.0) then
        iCset=i
        exit  ! exit do loop early
      endif
    elseif(Csetnam(i).eq.' ') then
      exit
    endif
  enddo

  if(iRset.gt.0) then
    ccode = efdrownam(rindstt(iRset):rindend(iRset))  ! get the set name from the row name based on the row mask position
    if(iopt.eq.1) call get_efd_set_element(setname,ccode,icode)
    bothDiff=.false.
    if(iCset.gt.0) then
      c5col=efdcolnam(cindstt(iCset):cindend(iCset))
      if(iopt.eq.1) then
        call get_efd_set_element(setname, efdcolnam(cindstt(iCset):cindend(iCset)), inBoth)
        if(inBoth.gt.0 .and. icode.ne.inBoth) bothDiff=.true.
      else
        if(ccode.ne.efdcolnam(cindstt(iCset):cindend(iCset))) then
          call get_efd_set_element(setname, efdcolnam(cindstt(iCset):cindend(iCset)), inBoth)
          if(inBoth.gt.0 .and. icode.ne.inBoth) bothDiff=.true.
        endif
      endif
      if (bothDiff .and. UseCol.gt.0) then ! for exceptions, parameter name tagged with "!" suffix
        ccode=c5col
        icode=inBoth
        return
      endif
      if(bothDiff) then
! count number of instances of this error so we don't write too many
        combo=trim(setname)//':'//trim(rownam_AIMMS)//':'//trim(colnam_aimms)
        ifound=0
        do i=1,ncombo
          if(trim(combo).eq.trim(repeats(i))) then
            ifound=i
            exit
          endif
        enddo
        if(ifound.eq.0) then
          ncombo=ncombo+1
          ifound=ncombo
          repeats(ncombo)=combo
        endif
        nrepeats(ifound)=nrepeats(ifound)+1
        if(nrepeats(ifound).eq.1) then  
            write(6,'(10a)') 'AIMMS Interface error: get_efd_set: row/col elements differ:'//trim(setname)// &
            ', row=',efdrownam,':',trim(ccode),':'//trim(rownam_aimms), &
            ', col=',efdcolnam,':',trim(efdcolnam(cindstt(iCset):cindend(iCset))),':'//trim(colnam_aimms)
        endif
      endif
    endif
  elseif(iCset.gt.0) then
    ccode = efdcolnam(cindstt(iCset):cindend(iCset))  ! get the set name from the col name based on the col mask position
    if(iopt.eq.1) call get_efd_set_element(setname,ccode,icode)
  elseif(setname.eq.'JustOne') then
    ccode='1'
    icode=1
  endif

  return
    
end subroutine get_efd_set


! EDT <edward.thomas@eia.gov> 10/01/2020
SUBROUTINE CRASH_NEMS(MESSAGE)
CHARACTER(LEN = *) MESSAGE

    WRITE(*,*) MESSAGE
    STOP

END SUBROUTINE 


!================================================================================================================
subroutine get_efd_set_element(setname,ccode,icode)
! returns the AIMMS set element corresponding to a given OML character code and AIMMS set
      use efd_row_col
      implicit none
      include 'parametr'
      include 'emmparm'
      include 'control'
      character*(*) setname ! name of the set
      character*(*) ccode   ! character code for the set element 
      integer icode         ! integer value for the given set and set element
      integer i  ,L

      character*2 ustname(49)  / &
        'AL', &
        'AZ', &
        'AR', &
        'CA', &
        'CO', &
        'CT', &
        'DE', &
        'DC', &
        'FL', &
        'GA', &
        'ID', &
        'IL', &
        'IN', &
        'IA', &
        'KS', &
        'KY', &
        'LA', &
        'ME', &
        'MD', &
        'MA', &
        'MI', &
        'MN', &
        'MS', &
        'MO', &
        'MT', &
        'NE', &
        'NV', &
        'NH', &
        'NJ', &
        'NM', &
        'NY', &
        'NC', &
        'ND', &
        'OH', &
        'OK', &
        'OR', &
        'PA', &
        'RI', &
        'SC', &
        'SD', &
        'TN', &
        'TX', &
        'UT', &
        'VT', &
        'VA', &
        'WA', &
        'WV', &
        'WI', &
        'WY'/
          character*1 cnIFGD(nIFGD)/'S','U'/

          character*2 cFuelType(FuelType)/ &                 ! from UFLCODE copied from emmcntl.txt 11/30/2017
        'B1', &     !    ' 1' 'Coal - B100 Unscb-BH -Any-     '   3     'B1'  'CL' 'CR' 'NR' END
        'B2', &     !    ' 2' 'Coal - B100 Unscb-BH -Any-SC   '   3     'B2'  'CL' 'CR' 'NR' END
        'B3', &     !    ' 3' 'Coal - B100 W_scb-BH -   -     '   3     'B3'  'CL' 'CR' 'NR' END
        'B4', &     !    ' 4' 'Coal - B100 W_scb-BH -   -SC   '   3     'B4'  'CL' 'CR' 'NR' END
        'B5', &     !    ' 5' 'Coal - B100 W_scb-BH -SCR-     '   3     'B5'  'CL' 'CR' 'NR' END
        'B6', &     !    ' 6' 'Coal - B100 W_scb-BH -SCR-SC   '   3     'B6'  'CL' 'CR' 'NR' END
        'B7', &     !    ' 7' 'Coal - B100 Dry  -BH -Any-     '   3     'B7'  'CL' 'CR' 'NR' END
        'B8', &     !    ' 8' 'Coal - B100 Dry  -BH -Any-SC   '   3     'B8'  'CL' 'CR' 'NR' END
        'C1', &     !    ' 9' 'Coal - B100 Unscb-CSE-Any-     '   3     'C1'  'CL' 'CR' 'NR' END
        'C2', &     !    '10' 'Coal - B100 Unscb-CSE-Any-   FF'   3     'C2'  'CL' 'CR' 'NR' END
        'C3', &     !    '11' 'Coal - B100 Unscb-CSE-Any-SC/FF'   3     'C3'  'CL' 'CR' 'NR' END
        'C4', &     !    '12' 'Coal - B100 W_scb-CSE-   -     '   3     'C4'  'CL' 'CR' 'NR' END
        'C5', &     !    '13' 'Coal - B100 W_scb-CSE-   -   FF'   3     'C5'  'CL' 'CR' 'NR' END
        'C6', &     !    '14' 'Coal - B100 W_scb-CSE-   -SC/FF'   3     'C6'  'CL' 'CR' 'NR' END
        'C7', &     !    '15' 'Coal - B100 W_scb-CSE-SCR-     '   3     'C7'  'CL' 'CR' 'NR' END
        'C8', &     !    '16' 'Coal - B100 W_scb-CSE-SCR-   FF'   3     'C8'  'CL' 'CR' 'NR' END
        'C9', &     !    '17' 'Coal - B100 W_scb-CSE-SCR-SC/FF'   3     'C9'  'CL' 'CR' 'NR' END
        'CX', &     !    '18' 'Coal - B100 D_scb-CSE-   -     '   3     'CX'  'CL' 'CR' 'NR' END
        'CY', &     !    '19' 'Coal - B100 D_scb-CSE-   -   FF'   3     'CY'  'CL' 'CR' 'NR' END
        'CZ', &     !    '20' 'Coal - B100 D_scb-CSE-SCR-SC/FF'   3     'CZ'  'CL' 'CR' 'NR' END
        'H1', &     !    '21' 'Coal - B100 Unscb-O/N-Any-     '   3     'H1'  'CL' 'CR' 'NR' END
        'H2', &     !    '22' 'Coal - B100 Unscb-O/N-Any-   FF'   3     'H2'  'CL' 'CR' 'NR' END
        'H3', &     !    '23' 'Coal - B100 Unscb-O/N-Any-SC/FF'   3     'H3'  'CL' 'CR' 'NR' END
        'H4', &     !    '24' 'Coal - B100 W_scb-O/N-   -     '   3     'H4'  'CL' 'CR' 'NR' END
        'H5', &     !    '25' 'Coal - B100 W_scb-O/N-   -   FF'   3     'H5'  'CL' 'CR' 'NR' END
        'H6', &     !    '26' 'Coal - B100 W_scb-O/N-   -SC/FF'   3     'H6'  'CL' 'CR' 'NR' END
        'H7', &     !    '27' 'Coal - B100 W_scb-O/N-SCR-     '   3     'H7'  'CL' 'CR' 'NR' END
        'H8', &     !    '28' 'Coal - B100 W_scb-O/N-SCR-   FF'   3     'H8'  'CL' 'CR' 'NR' END
        'H9', &     !    '29' 'Coal - B100 W_scb-O/N-SCR-SC/FF'   3     'H9'  'CL' 'CR' 'NR' END
        'HA', &     !    '30' 'Coal - B100 D_scb-O/N-Any-     '   3     'HA'  'CL' 'CR' 'NR' END
        'HB', &     !    '31' 'Coal - B100 D_scb-O/N-Any-   FF'   3     'HB'  'CL' 'CR' 'NR' END
        'HC', &     !    '32' 'Coal - B100 D_scb-O/N-Any-SC/FF'   3     'HC'  'CL' 'CR' 'NR' END
        'PC', &     !    '33' 'Coal - Scrubbed Coal New'          3     'PC'  'CL' 'CR' 'NR' END
        'OC', &     !    '34' 'Other New Coal'                    3     'OC'  'CL' 'CR' 'NR' END
        'IG', &     !    '35' 'Coal - Integrated Gas Comb Cycle'  3     'IG'  'CL' 'CR' 'NR' END
        'I2', &     !    '36' 'IGCC with NG-cofiring'             3     'I2'  'CL' 'CR' 'NR' END
        'PQ', &     !    '37' 'Coal w/Partial Sequestration'      3     'PQ'  'CL' 'CR' 'NR' END
        'IS', &     !    '38' 'Coal - IGCC w/Sequestration'       3     'IS'  'CL' 'CR' 'NR' END
        'DS', &     !    '39' 'Distillate'                        3     'DS'  'CR' 'CR' 'NR' END
        'RL', &     !    '40' 'Residual Low Sulfur'               3     'RL'  'CR' 'CR' 'NR' END
        'RH', &     !    '41' 'Residual High Sulfur'              3     'RH'  'CR' 'CR' 'NR' END
        'GF', &     !    '42' 'Natural Gas Firm'                  3     'GF'  'GR' 'CR' 'NR' END
        'GI', &     !    '43' 'Natural Gas Interruptible'         3     'GI'  'GR' 'CR' 'NR' END
        'GC', &     !    '44' 'Natural Gas Competitive'           3     'GC'  'GR' 'CR' 'NR' END
        'UF', &     !    '45' 'Nuclear'                           3     'UF'  'NR' 'CR' 'NR' END
        'OG', &     !    '46' 'Other Gaseous Fuels'               3     'OG'  'CR' 'CR' 'NR' END
        'WD', &     !    '47' 'Biomass / Wood'                    3     'WD'  'CL' 'CR' 'NR' END
        'SW', &     !    '48' 'Municipal Solid Waste'             3     'SW'  'NR' 'CR' 'NR' END
        'WA', &     !    '49' 'Water'                             3     'WA'  'NR' 'CR' 'NR' END
        'TI', &     !    '50' 'Tidal Hydroelectric'               3     'TI'  'NR' 'CR' 'NR' END
        'PS', &     !    '51' 'Pump Storage'                      3     'PS'  'NR' 'CR' 'NR' END
        'WN', &     !    '52' 'Wind'                              3     'WN'  'NR' 'CR' 'NR' END
        'WL', &     !    '53' 'Wind Low Wind Speed'               3     'WL'  'NR' 'CR' 'NR' END
        'WF', &     !    '54' 'Wind OffShore'                     3     'WF'  'NR' 'CR' 'NR' END
        'GT', &     !    '55' 'Geothermal'                        3     'GT'  'NR' 'CR' 'NR' END
        'SO', &     !    '56' 'Solar Thermal'                     3     'SO'  'NR' 'CR' 'NR' END
        'PV', &     !    '57' 'Solar PV - Tilt'                   3     'PV'  'NR' 'CR' 'NR' END
        'PT', &     !    '58' 'Solar PV - Fixed Axis'             3     'PT'  'NR' 'CR' 'NR' END
        'DD', &     !    '59' 'Dist. Gen.-Distillate '            3     'DD'  'CR' 'CR' 'NR' END
        'DG'/       !    '60' 'Dist. Gen.-Natural Gas '           3     'DG'  'GR' 'CR' 'NR' END

            character*1 cFuelRegion_ALT1(FuelRegion)/ &
          '1',  & !  'NE',
          '2',  & !  'YJ',
          '3',  & !  'PA',
          '4',  & !  'OH',
          '5',  & !  'EN',
          '6',  & !  'WI',
          '7',  & !  'C1',
          '8',  & !  'C2',
          '9',  & !  'C3',
          '0',  & !  'DM',
          'A',  & !  'DW',
          'B',  & !  'VA',
          'C',  & !  'CR',
          'D',  & !  'GA',
          'E',  & !  'FL',
          'F',  & !  'KT',
          'G',  & !  'AM',
          'H',  & !  'WS',
          'I',  & !  'N1',
          'J',  & !  'N2',
          'K',  & !  'ZN',
          'L',  & !  'OW',
          'M',  & !  'CA',
          'X'/  ! 'US'

          character*2 cFuelRegion(FuelRegion)/ &
         'NE',& 
         'YJ',& 
         'PA',& 
         'OH',& 
         'EN',& 
         'WI',& 
         'C1',& 
         'C2',& 
         'C3',& 
         'DM',& 
         'DW',& 
         'VA',& 
         'CR',& 
         'GA',& 
         'FL',& 
         'KT',& 
         'AM',& 
         'WS',& 
         'N1',& 
         'N2',& 
         'ZN',& 
         'OW',& 
         'CA',& 
         'US'/
 
          character*2 cFuelRegion_SUP(FuelRegion_SUP)/ &
         ' 0',&
         'NE',& 
         'YJ',& 
         'PA',& 
         'OH',& 
         'EN',& 
         'WI',& 
         'C1',& 
         'C2',& 
         'C3',& 
         'DM',& 
         'DW',& 
         'VA',& 
         'CR',& 
         'GA',& 
         'FL',& 
         'KT',& 
         'AM',& 
         'WS',& 
         'N1',& 
         'N2',& 
         'ZN',& 
         'OW',& 
         'CA',& 
         'US'/

           character*3 ccode3,cPlantType(PlantType)/ &
           'COU', &  ! 'Coal Steam pre-  1965            '
           'CSU', &  ! 'Coal Steam post- 1965            '
           'CSC', &  ! 'Coal Steam with Scrubber         '
           'CNC', &  ! 'New Coal Steam                   '
           'CN2', &  ! 'Other New Coal Steam             '
           'CAV', &  ! 'New Advanced Coal                '
           'CNG', &  ! 'IGCC with NG Cofiring            '
           'COQ', &  ! 'New Coal w/Partial Sequestration '
           'CAS', &  ! 'New Adv. Coal with Sequestration '
           'CTN', &  ! 'Coal to Gas Retrofit             '
           'STO', &  ! 'Oil Steam                        '
           'STG', &  ! 'Gas Steam                        '
           'STX', &  ! 'Oil/Gas Steam                    '
           'ICE', &  ! 'Internal Combustion Engine       '
           'CTO', &  ! 'Oil Turbine                      '
           'CTG', &  ! 'Gas Turbine                      '
           'CTX', &  ! 'Oil/Gas Turbine                  '
           'CTA', &  ! 'Aeroderivative Turbine           '
           'ACT', &  ! 'Advanced Turbine                 '
           'CCO', &  ! 'Oil Combined Cycle               '
           'CCG', &  ! 'Gas Combined Cycle               '
           'CCX', &  ! 'Oil/Gas Combined Cycle           '
           'ACC', &  ! 'Advanced Combined Cycle          '
           'AC2', &  ! 'New Advanced Combined Cycle      '
           'ACS', &  ! 'Adv. Combined Cyc w/Sequestration'
           'FCG', &  ! 'Fuel Cell                        '  ECP codes: 'FC'  'Fuel Cells'                  
           'CNU', &  ! 'Conventional Nuclear             '             'CN'  'Conventional Nuclear'        
           'ANC', &  ! 'Advanced Nuclear                 '             'AN'  'Advanced Nuclear'            
           'SMR', &  ! 'SMR Advanced Nuclear             '             'SM'  'SMR Nuclear'                 
           'GFN', &  ! 'Greenfield Nuclear               '             'GN'  'Greenfield Nuclear'          
           'BMS', &  ! 'Wood/Biomass                     '             'WD'  'Biomass (Wood)'              
           'BIG', &  ! 'Biomass IGCC                     '             'BI'  'Biomass IGCC (Wood)'         
           'GTH', &  ! 'Geothermal                       '             'GT'  'Geothermal'                  
           'AGT', &  ! 'Advanced Geothermal              '             'AG'  'Advanced Geothermal'         
           'MSW', &  ! 'Municipal Solid Waste            '             'MS'  'Mun Solid Waste'             
           'HYC', &  ! 'Conventional Hydroelectric       '             'HY'  'Hydroelectric'               
           'HYA', &  ! 'Advanced Hydroelectric           '             'HO'  'Advanced Hydroelectric'      
           'HYI', &  ! 'Hydroelectric in Stream          '             'HI'  'In Stream Hydroelectric'     
           'HYT', &  ! 'Hydroelectric Tidal              '             'TI'  'Tidal Hydroelectric'         
           'HYR', &  ! 'Reversible Hydroelectric         '             'PS'  'Pumped Storage'   And   'P2'  'Demand Response'             
           'QST', &  ! 'Quick Response Storage           '             'SQ'  'Quick Storage'               
           'DST', &  ! 'Diurnal Storage                  '             'DS'  'Diurnal Storage'             
           'OST', &  ! 'Other Storage                    '             'OS'  'Other Storage'               
           'WND', &  ! 'Conventional Wind                '             'WN'  'Conventional Wind'           
           'WNL', &  ! 'Wind Low Speed                   '             'WL'  'Wind Low Speed'              
           'WFS', &  ! 'Wind  OffShore                   '             'WF'  'Wind Off Shore'              
           'STH', &  ! 'Solar Thermal (no storage)       '             'SO'  'Solar Thermal (no storage)'  
           'STS', &  ! 'Solar Thermal w/Storage          '             'SS'  'Solar Thermal w/Storage'     
           'ST2', &  ! 'Solar Thermal w/Storage 2        '             'S2'  'Solar Thermal w/Storage 2'   
           'SPV', &  ! 'Solar Photovoltaic w/Axis Track  '             'PV'  'PV w/axis tracking'          
           'PVT', &  ! 'Solar Photovoltaic Fixed Tilt    '             'PT'  'PV fixed tilt'
           'OIN', &  ! 'Other Intermittent               '             'IN'  'Other Intermittent'          
           'DGB', &  ! 'Distributed Generation-Base      '             'DB'  'Distributed Generation--Base'
           'DGP', &  ! 'Distributed Generation-Peak      ' 54th        'DP'  'Distributed Generation--Peak'
           'B1X', &  ! 'B100 Unscb-BH -Any-     ' Start of 39 2-character ECP plant type codes with "X" added
           'B2X', &  ! 'B100 Unscb-BH -Any-SC   '     
           'B3X', &  ! 'B100 W_scb-BH -   -     '     
           'B4X', &  ! 'B100 W_scb-BH -   -SC   '     
           'B5X', &  ! 'B100 W_scb-BH -SCR-     '     
           'B6X', &  ! 'B100 W_scb-BH -SCR-SC   '     
           'B7X', &  ! 'B100 Dry  -BH -Any-     '     
           'B8X', &  ! 'B100 Dry  -BH -Any-SC   '     
           'C1X', &  ! 'B100 Unscb-CSE-Any-     '     
           'C2X', &  ! 'B100 Unscb-CSE-Any-   FF'     
           'C3X', &  ! 'B100 Unscb-CSE-Any-SC/FF'     
           'C4X', &  ! 'B100 W_scb-CSE-   -     '     
           'C5X', &  ! 'B100 W_scb-CSE-   -   FF'     
           'C6X', &  ! 'B100 W_scb-CSE-   -SC/FF'     
           'C7X', &  ! 'B100 W_scb-CSE-SCR-     '     
           'C8X', &  ! 'B100 W_scb-CSE-SCR-   FF'     
           'C9X', &  ! 'B100 W_scb-CSE-SCR-SC/FF'     
           'CXX', &  ! 'B100 D_scb-CSE-   -     '     
           'CYX', &  ! 'B100 D_scb-CSE-   -   FF'     
           'CZX', &  ! 'B100 D_scb-CSE-SCR-SC/FF'     
           'H1X', &  ! 'B100 Unscb-O/N-Any-     '     
           'H2X', &  ! 'B100 Unscb-O/N-Any-   FF'     
           'H3X', &  ! 'B100 Unscb-O/N-Any-SC/FF'     
           'H4X', &  ! 'B100 W_scb-O/N-   -     '     
           'H5X', &  ! 'B100 W_scb-O/N-   -   FF'     
           'H6X', &  ! 'B100 W_scb-O/N-   -SC/FF'     
           'H7X', &  ! 'B100 W_scb-O/N-SCR-     '     
           'H8X', &  ! 'B100 W_scb-O/N-SCR-   FF'     
           'H9X', &  ! 'B100 W_scb-O/N-SCR-SC/FF'     
           'HAX', &  ! 'B100 D_scb-O/N-Any-     '     
           'HBX', &  ! 'B100 D_scb-O/N-Any-   FF'     
           'HCX', &  ! 'B100 D_scb-O/N-Any-SC/FF'     
           'PCX', &  ! 'Scrubbed Coal New'            
           'OCX', &  ! 'Other New Coal'               
           'IGX', &  ! 'Integrated Gas Comb Cycle'
           'I2X', &  ! 'IGCC with NG-cofiring'        
           'PQX', &  ! 'Coal w/Partial Sequestration' 
           'ISX', &  ! 'IGCC w/Sequestration'
           'STX'/    !  coal to oil-gas steam retrofit possibly, duplicates 7
           Character*115 EFD_TO_ECP_CODES(2)/ &
           'FCG CNU ANC SMR GFN BMS BIG GTH AGT MSW HYC HYA HYI HYT HYR QST DST OST WND WNL WFS STH STS ST2 SPV PVT OIN DGB DGP', &
           'FC  CN  AN  SM  GN  WD  BI  GT  AG  MS  HY  HO  HI  TI  PS  SQ  DS  OS  WN  WL  WF  SO  SS  S2  PV  PT  IN  DB  DP '/
           integer iplace

         character*2 cPlantType_ECP(PlantType_ECP)/ &
             'B1',  &  !  'B100 Unscb-BH -Any-     '     
             'B2',  &  !  'B100 Unscb-BH -Any-SC   '     
             'B3',  &  !  'B100 W_scb-BH -   -     '     
             'B4',  &  !  'B100 W_scb-BH -   -SC   '     
             'B5',  &  !  'B100 W_scb-BH -SCR-     '     
             'B6',  &  !  'B100 W_scb-BH -SCR-SC   '     
             'B7',  &  !  'B100 Dry  -BH -Any-     '     
             'B8',  &  !  'B100 Dry  -BH -Any-SC   '     
             'C1',  &  !  'B100 Unscb-CSE-Any-     '     
             'C2',  &  !  'B100 Unscb-CSE-Any-   FF'     
             'C3',  &  !  'B100 Unscb-CSE-Any-SC/FF'     
             'C4',  &  !  'B100 W_scb-CSE-   -     '     
             'C5',  &  !  'B100 W_scb-CSE-   -   FF'     
             'C6',  &  !  'B100 W_scb-CSE-   -SC/FF'     
             'C7',  &  !  'B100 W_scb-CSE-SCR-     '     
             'C8',  &  !  'B100 W_scb-CSE-SCR-   FF'     
             'C9',  &  !  'B100 W_scb-CSE-SCR-SC/FF'     
             'CX',  &  !  'B100 D_scb-CSE-   -     '     
             'CY',  &  !  'B100 D_scb-CSE-   -   FF'     
             'CZ',  &  !  'B100 D_scb-CSE-SCR-SC/FF'     
             'H1',  &  !  'B100 Unscb-O/N-Any-     '     
             'H2',  &  !  'B100 Unscb-O/N-Any-   FF'     
             'H3',  &  !  'B100 Unscb-O/N-Any-SC/FF'     
             'H4',  &  !  'B100 W_scb-O/N-   -     '     
             'H5',  &  !  'B100 W_scb-O/N-   -   FF'     
             'H6',  &  !  'B100 W_scb-O/N-   -SC/FF'     
             'H7',  &  !  'B100 W_scb-O/N-SCR-     '     
             'H8',  &  !  'B100 W_scb-O/N-SCR-   FF'     
             'H9',  &  !  'B100 W_scb-O/N-SCR-SC/FF'     
             'HA',  &  !  'B100 D_scb-O/N-Any-     '     
             'HB',  &  !  'B100 D_scb-O/N-Any-   FF'     
             'HC',  &  !  'B100 D_scb-O/N-Any-SC/FF'     
             'PC',  &  !  'Scrubbed Coal New'            
             'OC',  &  !  'Other New Coal'               
             'IG',  &  !  'Integrated Gas Comb Cycle'    
             'I2',  &  !  'IGCC with NG-cofiring'        
             'PQ',  &  !  'Coal w/Partial Sequestration' 
             'IS',  &  !  'IGCC w/Sequestration'         
             'NG',  &  !  'Coal to Natural Gas Steam'    
             'ST',  &  !  'Gas/Oil Steam Turbine'        
             'ET',  &  !  'Existing Combustion Turbine'  
             'IC',  &  !  'Internal Combustion Engine'   
             'CT',  &  !  'Conv Combustion Turbine'      
             'T2',  &  !  'Aeroderivative Turbine'       
             'AT',  &  !  'Adv Combustion Turbine'       
             'EC',  &  !  'Existing Gas/Oil Comb Cycle'  
             'CC',  &  !  'Conv Gas/Oil Comb Cycle'      
             'AC',  &  !  'Adv Gas/Oil Comb Cycle'       
             'A2',  &  !  'New Advanced Comb Cycle'      
             'CS',  &  !  'Adv CC w/Sequestration'       
             'FC',  &  !  'Fuel Cells'                   
             'CN',  &  !  'Conventional Nuclear'         
             'AN',  &  !  'Advanced Nuclear'             
             'SM',  &  !  'SMR Nuclear'                  
             'GN',  &  !  'Greenfield Nuclear'           
             'WD',  &  !  'Biomass (Wood)'               
             'BI',  &  !  'Biomass IGCC (Wood)'          
             'GT',  &  !  'Geothermal'                   
             'AG',  &  !  'Advanced Geothermal'          
             'MS',  &  !  'Mun Solid Waste'              
             'HY',  &  !  'Hydroelectric'                
             'HO',  &  !  'Advanced Hydroelectric'       
             'HI',  &  !  'In Stream Hydroelectric'      
             'TI',  &  !  'Tidal Hydroelectric'          
             'PS',  &  !  'Pumped Storage'               
             'P2',  &  !  'Demand Response'              
             'SQ',  &  !  'Quick Storage'                
             'DS',  &  !  'Diurnal Storage'              
             'OS',  &  !  'Other Storage'                
             'WN',  &  !  'Conventional Wind'            
             'WL',  &  !  'Wind Low Speed'               
             'WF',  &  !  'Wind Off Shore'               
             'SO',  &  !  'Solar Thermal (no storage)'   
             'SS',  &  !  'Solar Thermal w/Storage'      
             'S2',  &  !  'Solar Thermal w/Storage 2'    
             'PV',  &  !  'PV w/axis tracking'                
             'PT',  &  !  'PV fixed tilt' 
             'IN',  &  !  'Other Intermittent'           
             'DB',  &  !  'Distributed Generation--Base' 
             'DP'/      ! 'Distributed Generation--Peak' 

             character*2 cDispatchableECP(DispatchableECP)/ &
             'B1',  &  !  'B100 Unscb-BH -Any-     '     
             'B2',  &  !  'B100 Unscb-BH -Any-SC   '     
             'B3',  &  !  'B100 W_scb-BH -   -     '     
             'B4',  &  !  'B100 W_scb-BH -   -SC   '     
             'B5',  &  !  'B100 W_scb-BH -SCR-     '     
             'B6',  &  !  'B100 W_scb-BH -SCR-SC   '     
             'B7',  &  !  'B100 Dry  -BH -Any-     '     
             'B8',  &  !  'B100 Dry  -BH -Any-SC   '     
             'C1',  &  !  'B100 Unscb-CSE-Any-     '     
             'C2',  &  !  'B100 Unscb-CSE-Any-   FF'     
             'C3',  &  !  'B100 Unscb-CSE-Any-SC/FF'     
             'C4',  &  !  'B100 W_scb-CSE-   -     '     
             'C5',  &  !  'B100 W_scb-CSE-   -   FF'     
             'C6',  &  !  'B100 W_scb-CSE-   -SC/FF'     
             'C7',  &  !  'B100 W_scb-CSE-SCR-     '     
             'C8',  &  !  'B100 W_scb-CSE-SCR-   FF'     
             'C9',  &  !  'B100 W_scb-CSE-SCR-SC/FF'     
             'CX',  &  !  'B100 D_scb-CSE-   -     '     
             'CY',  &  !  'B100 D_scb-CSE-   -   FF'     
             'CZ',  &  !  'B100 D_scb-CSE-SCR-SC/FF'     
             'H1',  &  !  'B100 Unscb-O/N-Any-     '     
             'H2',  &  !  'B100 Unscb-O/N-Any-   FF'     
             'H3',  &  !  'B100 Unscb-O/N-Any-SC/FF'     
             'H4',  &  !  'B100 W_scb-O/N-   -     '     
             'H5',  &  !  'B100 W_scb-O/N-   -   FF'     
             'H6',  &  !  'B100 W_scb-O/N-   -SC/FF'     
             'H7',  &  !  'B100 W_scb-O/N-SCR-     '     
             'H8',  &  !  'B100 W_scb-O/N-SCR-   FF'     
             'H9',  &  !  'B100 W_scb-O/N-SCR-SC/FF'     
             'HA',  &  !  'B100 D_scb-O/N-Any-     '     
             'HB',  &  !  'B100 D_scb-O/N-Any-   FF'     
             'HC',  &  !  'B100 D_scb-O/N-Any-SC/FF'     
             'PC',  &  !  'Scrubbed Coal New'            
             'OC',  &  !  'Other New Coal'               
             'IG',  &  !  'Integrated Gas Comb Cycle'    
             'I2',  &  !  'IGCC with NG-cofiring'        
             'PQ',  &  !  'Coal w/Partial Sequestration' 
             'IS',  &  !  'IGCC w/Sequestration'         
             'NG',  &  !  'Coal to Natural Gas Steam'    
             'ST',  &  !  'Gas/Oil Steam Turbine'        
             'ET',  &  !  'Existing Combustion Turbine'  
             'IC',  &  !  'Internal Combustion Engine'   
             'CT',  &  !  'Conv Combustion Turbine'      
             'T2',  &  !  'Aeroderivative Turbine'       
             'AT',  &  !  'Adv Combustion Turbine'       
             'EC',  &  !  'Existing Gas/Oil Comb Cycle'  
             'CC',  &  !  'Conv Gas/Oil Comb Cycle'      
             'AC',  &  !  'Adv Gas/Oil Comb Cycle'       
             'A2',  &  !  'New Advanced Comb Cycle'      
             'CS',  &  !  'Adv CC w/Sequestration'       
             'FC',  &  !  'Fuel Cells'                   
             'CN',  &  !  'Conventional Nuclear'         
             'AN',  &  !  'Advanced Nuclear'             
             'SM',  &  !  'SMR Nuclear'                  
             'GN'/     !  'Greenfield Nuclear'          
     
          character*1 cGenerationSeason(GenerationSeason)/'1','2','3','X'/   ! 'peak', 'offpeak', either 3 or 'X' can be total I think
          character*1 cOperatingMode(OperatingMode)/'1','2','3','4','5'/ ! may indicate base, intermediate, and peak

          character*2 cFuelShareOption(FuelShareOption)/'1X','2X','11'/  ! 'X' for plants without fuel switching, "1X"=maxgas, "2X"=maxoil, '11'= Cofiring Mode 1, Step 1

          !character*2 cNOXRegion(NOXRegion)/'SP','EA','WE','TS','TE','TW'/
        !  character*10 cScrubCode(NScrubCode)/'scrubbed  ', 'unscrubbed'/
          character*1 cGridResilienceSource(GridResilienceSource)/'1','2','3','4','5','6'/
          character*1 cSlice(nSlice)/'A','B','C','D','E'/ ! per season. *3 seasons=15 max slices
          character*1 cSliceSorted(nSliceSorted)/'1','2','3','4','5'/ ! per season. *3 seasons=15 max slices
          character*1 CHCOD(36)/'1','2','3','4','5','6','7','8','9','0','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O', &
             'P','Q','R','S','T','U','V','W','X','Y','Z'/
          character*2 C2COD(25)/'01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25'/
          character*1 cACI2(ACIOption)/'0','1','2','3','4','5','6','7'/ ! note that it starts with 0 to match aimms set {0..7}
          character*1 cACI(numACI)/'1','2','3','4','5','6','7','8'/ !

          character*4 SupplyRegion4(SupplyRegion)/ & ! ! note lower case is used in URGNME(1:4) where this was taken from
        '_tre', & !  1
        'frcc', & !  2
        'misw', & !  3
        'misc', & !  4
        'mise', & !  5
        'miss', & !  6
        'isne', & !  7
        'nycw', & !  8
        'nyup', & !  9
        'pjme', & ! 10  0
        'pjmw', & ! 11  A
        'pjmc', & ! 12  B
        'pjmd', & ! 13  C
        'srca', & ! 14  D
        'srse', & ! 15  E
        'srce', & ! 16  F
        'spps', & ! 17  G
        'sppc', & ! 18  H
        'sppn', & ! 19  I
        'srsg', & ! 20  J
        'cano', & ! 21  K
        'caso', & ! 22  L
        'nwpp', & ! 23  L
        'rmrg', & ! 24  L
        'basn', & ! 25  L
        'ascc', & ! 26  M
        'heco', & ! 27  N
        'us00'/   ! 28  O
        LOGICAL ERRORTYPE
  
          character*4 cSupplyRegion_SUB(SupplyRegion_SUB)/ & ! lower 48 subset without the hawaii, Alaska, or the US total
        '_tre', & !  1
        'frcc', & !  2
        'misw', & !  3
        'misc', & !  4
        'mise', & !  5
        'miss', & !  6
        'isne', & !  7
        'nycw', & !  8
        'nyup', & !  9
        'pjme', & ! 10  0
        'pjmw', & ! 11  A
        'pjmc', & ! 12  B
        'pjmd', & ! 13  C
        'srca', & ! 14  D
        'srse', & ! 15  E
        'srce', & ! 16  F
        'spps', & ! 17  G
        'sppc', & ! 18  H
        'sppn', & ! 19  I
        'srsg', & ! 20  J
        'cano', & ! 21  K
        'caso', & ! 22  L
        'nwpp', & ! 23  L
        'rmrg', & ! 24  L
        'basn'/   ! 25  L


          character*2 cSupplyRegion_ALT2(SupplyRegion)/ & ! note lower case is used in URGNME(6:7) where this was taken from
          'tr', & !  1
          'fr', & !  2
          'mi', & !  3
          'm2', & !  4
          'm3', & !  5
          'm4', & !  6
          'is', & !  7
          'n5', & !  8
          'ny', & !  9
          'p8', & ! 10
          'pj', & ! 11
          'p6', & ! 12
          'p7', & ! 13
          's2', & ! 14
          's4', & ! 15
          's3', & ! 16
          'sp', & ! 17
          's9', & ! 18
          's1', & ! 19
          'sr', & ! 20
          'c1', & ! 21
          'ca', & ! 22
          'nw', & ! 23
          'rm', & ! 24
          'ba', & ! 25
          'ak', & ! 26
          'hi', & ! 27
          'us'/   ! 28
  
          character*2 ccoaltype(CoalType)/'BL','BM','BH','SL','SM','LG'/  !AKA CoalType in AIMMS
          character*2 cbiomassType(BiomassType)/'UM', 'FR', 'AG', 'EC'/
          character*2 cBiomassSector(BiomassSector)/'RS','CM','IN','H2','ET','BT'/ 
          character*2 cBiomassProductionStep(BiomassProductionStep)/ &
        '01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20', &
        '21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40', &
        '41','42','43','44','45','46','47','48','49','XX'/



          character*1 cVLoadSegment(VLoadSegment)/'X','W','V','U','T','S','R','Q','P','O','N','M','L','K','J', 'I','H','G','F','E','D','C','B','A'/ ! from UPLDCD(ECP_D_VLS) LOAD SEGMENT CODE.  or possible confusion with operatingmode UPMDCD(ECP_D_VLS)








          character*2 cCarbonRegion(CarbonRegion)/'RG','OT','CA'/
          character*1 cCoalDiversityType(CoalDiversityType)/'L','S'/  ! Lignite, SubBituminous
          character*3 cCarbonEmissionType(CarbonEmissionType)/'BNK','ESC','FUE','IND','LIM','OFF','OTH','REF','RSV','UTL'/
          character*1 cCanadianSupplyRegion(8)/'S','T','U','V','W','X','Y','Z'/

  
          character*1 cRCF(nRCF)/'1'/
          character*1 cJustOne(JustOne)/'1'/
          character*1 cSeason(Season)/'1','2','3'/
          character*1 cSeason_SUP(Season_SUP)/'0','1','2','3'/
          character*1 cSeasonCCS(SeasonCCS)/'X','Y','Z'/
          character*2 cOGSMSector(OGSMSector)/'HY', 'AM', 'ET', 'NA', 'CE', 'HR', 'P1', 'P2', 'NG', 'C1', 'C2', 'S1', 'S2'/
          character*2 cOGSMRegion(OGSMRegion)/'NE', 'GC', 'MC', 'SW', 'MT', 'WC', 'GP'/
        !  character*2 cOGSMRegion_SUP(OGSMRegion_SUP)/'-1',' 0','NE', 'GC', 'MC', 'SW', 'MT', 'WC', 'GP', ' 8'/
          character*2 cOGSMRegion_SUP(OGSMRegion_SUP)/'01','00','NE', 'GC', 'MC', 'SW', 'MT', 'WC', 'GP', ' 8'/
          character*2 cOGSMRegionEX(OGSMRegionEX)/'NE', 'GC', 'MC', 'SW', 'MT', 'WC', 'GP', ' 8'/
          character*2 cCoalDemandRegion_SUP(CoalDemandRegion_SUP)/'00','NE','YP', 'S1','S2','GF','OH','EN','KT','AM','C1', 'C2','WS', 'MT','CU','ZN','PC'/
          character*2 cBiomassType_SUP(BiomassType_SUP)/'00','UM','FR', 'AG','EC'/
          character*1 cTwo0(Two0)/'0','1','2'/
          CHARACTER*2 CLRG(CoalDemandRegion)
!
      DATA CLRG/'NE',  &
                'YP',  &
                'S1',  &
                'S2',  &
                'GF',  &
                'OH',  &
                'EN',  &
                'KT',  &
                'AM',  &
                'C1',  &
                'C2',  &
                'WS',  &
                'MT',  &
                'CU',  &
                'ZN',  &
                'PC'/
 
  integer lc ! length of the SupplyRegion code (1,2, or 4)
    icode=0
    efd_setname=setname
    
    select case (setname)
    case ('SupplyRegion_ALTfrom')     
      call efd_lookup(ccode,cSupplyRegion_ALT2,SupplyRegion,icode)
    case ('SupplyRegion_ALTto')     
      call efd_lookup(ccode,cSupplyRegion_ALT2,SupplyRegion,icode)
    case ('SupplyRegion_ALT1')     
      call efd_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('SupplyRegion_ALT2')     
      call efd_lookup(ccode,cSupplyRegion_ALT2,SupplyRegion,icode)
    case ('SupplyRegion')     
      call efd_lookup(ccode,SupplyRegion4,SupplyRegion,icode)
    case ('SupplyRegion_SUB')     
      call efd_lookup(ccode,cSupplyRegion_SUB,SupplyRegion_SUB,icode)
    case ('CoalDemandRegion_ALT1') 
      call efd_lookup(ccode,CHCOD,CoalDemandRegion,icode)  
    case ('CoalDemandRegion') 
      call efd_lookup(ccode,CLRG,CoalDemandRegion,icode)  
    case ('CoalDemandRegion_SUP') 
      call efd_lookup(ccode,cCoalDemandRegion_SUP,CoalDemandRegion_SUP,icode) 
    case ('CoalDemandRegion_ALTto') 
      call efd_lookup(ccode,CLRG,CoalDemandRegion,icode)  
    case ('CoalDemandRegion_ALTfrom') 
      call efd_lookup(ccode,CLRG,CoalDemandRegion,icode)  
    case ('CoalDemandRegion_ALT2') 
      if(len(ccode).eq.1) then
        call efd_lookup(ccode,CHCOD,CoalDemandRegion,icode)
      else
        call efd_lookup(ccode,C2COD,CoalDemandRegion,icode)
      endif
    case ('FuelRegion_ALT2') 
      call efd_lookup(ccode,cFuelRegion,FuelRegion,icode)
    case ('FuelRegion_ALT1') 
      call efd_lookup(ccode,cFuelRegion_ALT1,FuelRegion,icode)
    case ('OGSMRegion') 
      call efd_lookup(ccode,cOGSMRegion,OGSMRegion,icode)
    case ('OGSMRegion_ALTTo') 
      call efd_lookup(ccode,cOGSMRegion,OGSMRegion,icode)
    case ('OGSMRegion_ALTFrom') 
      call efd_lookup(ccode,cOGSMRegion,OGSMRegion,icode)
    case ('OGSMRegionEX') 
      call efd_lookup(ccode,cOGSMRegionEX,OGSMRegionEX,icode)
    case ('OGSMRegionEX_ALTTo') 
      call efd_lookup(ccode,cOGSMRegionEX,OGSMRegionEX,icode)
    case ('OGSMRegion_SUP') 
      call efd_lookup(ccode,cOGSMRegion_SUP,OGSMRegion_SUP,icode)
    case ('FuelRegion_SUP') 
      call efd_lookup(ccode,cFuelRegion_SUP,FuelRegion_SUP,icode)
    case ('Two0') 
      call efd_lookup(ccode,cTwo0,Two0,icode)  
    case ('SO2Region') 
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,SO2Region,1)
    case ('SO2Region_ALTTo') 
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,SO2Region,1)
    case ('SO2Region_ALTFrom' ) 
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,SO2Region,1)
    case ('PlantGroup') 
      read(ccode,'(i5)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,PlantGroup,5)
    case ('PlantGroupOrd') 
      read(ccode,'(i5)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,PlantGroupOrd,5)
    case ('CoalSupplyCurve') 
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,CoalSupplyCurve,2)
    case ('CoalSupplyCurve_Dom') 
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,CoalSupplyCurve_Dom,2)
    case ('CoalSupplyCurve_Int') 
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,CoalSupplyCurve_Int,2)      
    case ('PlantType') 
      call efd_lookup(ccode,cPlantType,PlantType,icode)
    case ('PlantType_ECP') 
      call efd_lookup(ccode,cPlantType_ECP,PlantType_ECP,icode)
    case ('DispatchableECP') 
      call efd_lookup(ccode,cDispatchableECP,DispatchableECP,icode)  
    case ('CoalType')   
      call efd_lookup(ccode,cCoalType,CoalType,icode) 
    case ('Slice') 
      call efd_lookup(ccode,cSlice,nSlice,icode)
    case ('SliceSorted') 
      call efd_lookup(ccode,cSliceSorted,nSliceSorted,icode)
    case ('Season') 
      call efd_lookup(ccode,cSeason,Season,icode)
    case ('Season_SUP') 
      call efd_lookup(ccode,cSeason_SUP,Season_SUP,icode)
    case ('SeasonCCS') 
      call efd_lookup(ccode,cSeasonCCS,SeasonCCS,icode)
    case ('OperatingMode')     
      call efd_lookup(ccode,cOperatingMode,OperatingMode,icode)
    case ('LoadGroup') 
      call efd_lookup(ccode,CHCOD,LoadGroup,icode)
    case ('GenerationSeason') 
      call efd_lookup(ccode,cGenerationSeason,GenerationSeason,icode)
    case ('FuelShareOption') 
      call efd_lookup(ccode,cFuelShareOption,FuelShareOption,icode)
!    case ('ScrubCode') 
!      call efd_lookup(ccode,cScrubCode,NScrubCode,icode)
    case ('GridResilienceSource') 
      call efd_lookup(ccode,cGridResilienceSource,GridResilienceSource,icode)
!    case ('NOXRegion') 
!      call efd_lookup(ccode,cNOXRegion,NOXRegion,icode)
    case ('CarbonRegion')
      call efd_lookup(ccode,cCarbonRegion,CarbonRegion,icode)
    case ('CensusRegion')  
      call efd_lookup(ccode,C2COD,CensusRegion,icode)
    case ('GasRegion') 
      call efd_lookup(ccode,C2COD,GasRegion,icode)
    case ('GasSeason') 
      call efd_lookup(ccode,CHCOD,GasSeason,icode)
    case ('OilRegion') 
      call efd_lookup(ccode,C2COD,OilRegion,icode)
    case ('DistillateProductionStep') 
      call efd_lookup(ccode,C2COD,DistillateProductionStep,icode)
    case ('ResidProductionStep') 
      call efd_lookup(ccode,C2COD,ResidProductionStep,icode)
    case ('GasProductionStep') 
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,GasProductionStep,2)
    case ('INOXP') 
      call efd_lookup(ccode,chcod,INOXP,icode)
    case ('CoalProductionStep') 
      call efd_lookup(ccode,C2COD,CoalProductionStep,icode)
    case ('ACIOption') 
      call efd_lookup(ccode,cACI2,ACIOption,icode)
    case ('numACI') 
      call efd_lookup(ccode,cACI,numACI,icode)
    case ('BiomassType') 
      call efd_lookup(ccode,cBiomassType,BiomassType,icode)
    case ('BiomassType_SUP') 
      call efd_lookup(ccode,cBiomassType_SUP,BiomassType_SUP,icode)
    case ('BiomassSector' ) 
      call efd_lookup(ccode,cBiomassSector,BiomassSector,icode)
    case ('CoalDiversityType') 
      call efd_lookup(ccode,cCoalDiversityType,CoalDiversityType,icode)
    case ('CarbonEmissionType') 
      call efd_lookup(ccode,cCarbonEmissionType,CarbonEmissionType,icode)
    case ('RCF') 
      call efd_lookup(ccode,cRCF,nRCF,icode)
    case ('nRCF') 
      call efd_lookup(ccode,cRCF,nRCF,icode)
    case ('BiomassProductionStep') 
      call efd_lookup(ccode,cBiomassProductionStep,BiomassProductionStep,icode)
    case ('OGSMSector') 
      call efd_lookup(ccode,cOGSMSector,OGSMSector,icode)
    case ('SO2CODE') 
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,SO2Region,1)
    case ('HGCODE' ) 
      call efd_lookup(ccode,chcod,nHGCODE,icode)
    case ('nHGCODE' ) 
      call efd_lookup(ccode,chcod,nHGCODE,icode)
    case ('SupplyStates') 
      call efd_lookup(ccode,USTNME,SupplyStates,icode)
    case ('RelyStep') 
      call efd_lookup(ccode,CHCOD,RelyStep,icode)
    case ('IFGD') 
      call efd_lookup(ccode,cnIFGD,nIFGD,icode)
    case ('nIFGD') 
      call efd_lookup(ccode,cnIFGD,nIFGD,icode)
    case ('JustOne') 
      call efd_lookup(ccode,cJustOne,JustOne,icode)
    case ('CanadianSupplyRegion') 
      call efd_lookup(ccode,cCanadianSupplyRegion,CanadianSupplyRegion,icode)
    case ('CanadianSupplyStep') 
      call efd_lookup(ccode,CHCOD,CanadianSupplyStep,icode)
    case ('FuelRegion') 
      call efd_lookup(ccode,cFuelRegion,FuelRegion,icode)
    case ('MNUMYR')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,MNUMYR,2)
    case ('VLoadSegment')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,VLoadSegment,2)
    case ('SCALARSet')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,SCALARSet,1)
    case ('Segment')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Segment,1)
    case ('Group')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,GroupSet,1)
    case ('Three')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Three,1)
    case ('Months')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Months,2)
    case ('HoursADay')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,HoursADay,2)
    case ('PlantType_EFD ')      !56 Integer set for ECP plant types used in EFD
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,PlantType_EFDp2,2)
    case ('PlantType_EFDp2 ')      !56 Integer set for ECP plant types used in EFD
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,PlantType_EFDp2,2)
    case ('BiomassOption')         ! ECP_D_CFS Biomass cofiring utilization options
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,BiomassOption,1)
    case ('BiomassRetrofit')       ! ECP_D_RCF ECP BiomassCofiring retrofit categories
      read(ccode,'(i)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,BiomassRetrofit,1)
    case ('CHPFuel')               ! MNUMCGF: combined heat and power fuels
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,CHPFuel,2)
    case ('CO2CapGroup')           !  CO2_D_GRP MAXIMUM NUMBER OF CO2 CAP GROUPS
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,CO2CapGroup,1)
    case ('CPPRegion')             ! EPAREG, Regions for EPA rule 111d: 6 + Alaska + Hawaii + national
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,CPPRegion,1)
    case ('DemandSectors')         ! MAXSEC')               !4: RES')               !1,COM')               !2,IND')               !3,TRA')               !4
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,DemandSectors,1)
    case ('DispPlantGroup')       ! EFD_D_MPG Dispatchable EFD Plant Groups
      read(ccode,'(i4)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,DispPlantGroup,4)
    case ('RenewPlantGroup')       ! EFD_D_MHG Renewable EFD Plant Groups
      read(ccode,'(i4)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,RenewPlantGroup,4)
    case ('DistGenPlantGroup')         ! EFD_D_MDG Distributed generation EFD plant Groups
      read(ccode,'(i3)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,DistGenPlantGroup,3)
    case ('Eleven')                
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Eleven,2)
    case ('EmissionType')          ! MNPOLLUT: Air Pollutants (C,CO,CO2,SOx,NOx,VOC,CH4,PART)
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,EmissionType,2)
    case ('Fifteen')               
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Fifteen,2)
    case ('Four')                  
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Four,1)
    case ('Five')                  
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Five,1)
    case ('int_fuel_region')                  
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,int_fuel_region,2)
    case ('int_fuel_region_ALT1')                  
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,int_fuel_region_ALT1,2)
    case ('int_fuel_region1')                  
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,int_fuel_region1,2)
    case ('int_fuel_region1_ALT1')                  
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,int_fuel_region1_ALT1,2)
    case ('FuelType')              ! EFD_D_NFL Fuel Types, correspond to ECP plant types
      call efd_lookup(ccode,cFuelType,FuelType,icode)
    case ('BoilerType')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,BoilerType,2)
    case ('ImportStep')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,ImportStep,2)
    case ('NOXStates')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,NOXStates,2)
    case ('FuelsPerPlant')         ! ECP_D_FPP Fuels per Plant, ECP
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,FuelsPerPlant,1)
!    case ('Knots')                 ! MAX_KNOTS max of these: FLRG_HR_KNOTS(FUEL_RGN,ECPt), heat-rate-related
!      read(ccode,'(i2)') icode
!      if(.not. set_lookup) call efd_write_int_set(setname,1,Knots,2)
    case ('MercuryClass')          ! EPM_HG_CLS mercury class
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,MercuryClass,1)
!    case ('NOXStates')             ! NOX_D_MST MAXIMUM NUMBER OF STATES WITH NOX CAP
!      read(ccode,'(i2)') icode
!      if(.not. set_lookup) call efd_write_int_set(setname,1,NOXStates,2)
    case ('OGSMRegion_ALT1')       
      call efd_lookup(ccode,cOGSMRegion,OGSMRegion,icode)
    case ('Two')             
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Two,1)
    case ('OwnerShipType')             
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,OwnerShipType,1)
    case ('RegionsPerFuel')        ! EFD_D_FRG supply/reporting Regions Per Fuel
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,RegionsPerFuel,1)
    !case ('SO2ComplyGroup')        ! EFD_D_SO2  SO2 compliance groups
      !read(ccode,'(i1)') icode
      !if(.not. set_lookup) call efd_write_int_set(setname,1,SO2ComplyGroup,1)
    case ('SO2_Transport')         ! mx_so2_tran, csapr,
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,SO2_Transport,1)
    case ('SupplyRegionAll')        ! MNUMNR(25)+EFD_D_PROV(8) Superset of SupplREgion and Candian Supply REgion
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,SupplyRegionAll,2)
    case ('Thirteen')              
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Thirteen,2)
    case ('UtilitySector')         ! nutsec (38) + 3 
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,UtilitySector,2)
    case ('WindClass')             ! MNUMCL: wind classes, include 'wrenew'
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,WindClass,1)
    case ('PlantType_ECPp2')             ! MNUMCL: wind classes, include 'wrenew'
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,PlantType_ECPp2,2)
    case ('FuelRegion26')             ! MNUMCL: wind classes, include 'wrenew'
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,FuelRegion26,2)
    case ('EMMStates')             ! MNUMCL: wind classes, include 'wrenew'
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,EMMStates,2)
    case ('Ten')              
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,Ten,2)
    case ('PlanningHorizon')              
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,0,PlanningHorizon,2)
    case ('EmissionRank')              
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,EmissionRank,1)
    case ('OGSMReg')              
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call efd_write_int_set(setname,1,OGSMReg,2)
    case default
      write(6,*) 'AIMMS Interface error: efd set name not found:',setname
    end select
    
    return
  end subroutine get_efd_set_element
 ! 
  subroutine efd_lookup(code,list,nElements,icode)
    use efd_row_col
    implicit none
  !  look for a character "code" in an ordered "list" of codes to find the element number (icode)
    character*(*) code
    integer nElements
    character*(*) list(nElements)
    integer i,icode,L,LL
    if(set_lookup) then
      L=len_trim(code)
      icode=0
      do i=1,nElements
        if(code(:L).eq.list(i)(:L)) then
          icode=i
          exit
        endif
      enddo
    else
!      firstchar=' '  ! normally
!      if(index(sets(iset),'_ALT').gt.0) firstchar='!'
!  write out the name and elements of the set in AIMMS-compatible format to efdsetdata.dat
      LL=len(list(1))
      if(nElements.gt.1) then
        write(io, '(3a,<nElements-1>(a<LL>,a2),a<LL>,a)' )firstchar, &
        trim(efd_setname),     '_ := data {',         &
        ((list(i),', '),i=1,nElements-1),                    &
        list(nElements),        '};'
      else
        write(io, '(3a,a<LL>,a)' )firstchar, &
        trim(efd_setname),     '_ := data {',         &
        list(nElements),        '};'
      endif
    endif
    return
  end subroutine efd_lookup
  !================================================================================================================
  !This subroutine is to read CODEUSAGE from worksheet EFDTransfer in aimefd.xslx to indicated which aimefd post solution adjusted transfer array is ready to be used 
    SUBROUTINE READAIMEFDOPTIONS
      
      use efd_row_col
      IMPLICIT NONE
      INTEGER FILE_MGR
      EXTERNAL FILE_MGR
      
      
      include'parametr'
      include'emmparm'
      include'ecp_nuc'
      include'emm_aimms'
      
      character(LEN=16) rname     !added to read codeuse from aimefd.xslx
      integer i,ifound,j,ixlsx  !added to read codeuse from aimefd.xslx
      character(LEN=50), allocatable :: tFortranVariable(:)     ! xlsx 
      character(LEN=30), allocatable :: tCodeUsage(:)     ! xlsx 
      Character*30 tCodeUsagePtr
      integer,parameter :: max_trans=3000
      integer nuniq
      integer tUnique(max_trans)     ! index to each unique fortran variable in tFortranVariable
      
      
          ixlsx= FILE_MGR('O','AIMEFD',.false.)
          call readRngXLSX(ixlsx,'efdTransfer')  ! read sheet "EFDTransfer" range names and the data in them
          close(ixlsx)
          rname='TransferCount'
          call getrngi4(rname,TransferCount,1,1,1)
          allocate(tFortranVariable(TransferCount))  
          allocate(tCodeUsage(TransferCount)) 

    

          rname='FORTRANVARIABLE ';call getrngc(rname,  tFortranVariable       , 1,TransferCount,1)
          rname='CODEUSAGE       ';call getrngc(rname,  tCodeUsage             , 1, TransferCount , 1 )

   
    

            do j=1,TransferCount             
                    call Mreplace(tFortranVariable(j),char(0)," ")
            enddo
            nuniq=0
            tunique=0
            do j=1,TransferCount
                ifound=0
                do i=1,nuniq
                if (tFortranVariable(j).eq. EFDtransferarray(i)) then
                    ifound=i
                    exit
                endif
                enddo
                if(ifound.eq.0) then
                nuniq=nuniq+1
                EFDtransferarray(nuniq)=tFortranVariable(j)
                EFDtransfer_usage(nuniq)=0
                tCodeUsagePtr = tCodeUsage(j)
                call upper(tCodeUsagePtr)
                tCodeUsage(j) = tCodeUsagePtr
                if(tCodeUsage(j).eq.'RHS') then  ! RHS is abbreviation for RHS of fortran assignment statement. If so, it is an INPUT to LP coefficient deriviation.
                    EFDtransfer_usage(nuniq)=0
                elseif(tCodeUsage(j)(1:3).eq.'LHS' .and. len_trim(tCodeUsage(j)).eq.3) then  ! LHS means the variable is used on the LHS of an assignement statement based on the LP solution usually.
                    EFDtransfer_usage(nuniq)=1
                elseif(tCodeUsage(j)(1:3).eq.'LHS' .and. len_trim(tCodeUsage(j)).gt.3) then  ! A suffix to LHS is used to designate a variable that has been declared/coded in AIMMS and so we omit the declaration when writing the AIMMS code              
                    if(trim(tCodeUsage(j)) .eq. 'LHS_CODED') then            
                        EFDtransfer_usage(nuniq)=2
                        elseif (trim(tCodeUsage(j)) .eq. 'LHS_DONE') then
                        EFDtransfer_usage(nuniq)=3
                        else
                        EFDtransfer_usage(nuniq)=1
                        endif
                    endif
                    tUnique(nuniq)=j
                else ! variable may appear twice in list. if first had "RHS", second has "LHS". if LHS in either, treat as LHS
                if(tCodeUsage(j)(1:3).eq.'LHS' .and. len_trim(tCodeUsage(j)).eq.3) then 
                    EFDtransfer_usage(ifound)=1
                elseif(tCodeUsage(j)(1:3).eq.'LHS' .and. len_trim(tCodeUsage(j)).gt.3) then
                    if(trim(tCodeUsage(j)) .eq. 'LHS_CODED') then            
                        EFDtransfer_usage(nuniq)=2
                        elseif (trim(tCodeUsage(j)) .eq. 'LHS_DONE') then
                        EFDtransfer_usage(nuniq)=3
                        else
                        EFDtransfer_usage(nuniq)=1
                        endif
                endif
            endif
            enddo   
          deallocate(tFortranVariable)
          deallocate(tCodeUsage)
          CODEUSAGE_AIMEFD_read = 1
      RETURN
      END
      !================================================================================================================
  !This subroutine is to read CODEUSAGE from worksheet ECPTransfer in aimefd.xslx to indicated which aimefd post solution adjusted transfer array is ready to be used 
    SUBROUTINE READAIMECPOPTIONS
       
      use ecp_row_col
      IMPLICIT NONE
      INTEGER FILE_MGR
      EXTERNAL FILE_MGR
      
      include'parametr'
      include'emmparm'
      include'ecp_nuc'
      include'emm_aimms'
      
      character(LEN=16) rname     !added to read codeuse from aimefd.xslx
      integer i,ifound,j,ixlsx  !added to read codeuse from aimefd.xslx
      character(LEN=50), allocatable :: tFortranVariable(:)     ! xlsx 
      character(LEN=30), allocatable :: tCodeUsage(:)     ! xlsx 
      Character*30 tCodeUsagePtr
      integer,parameter :: max_trans=3000
      integer nuniq
      integer tUnique(max_trans)     ! index to each unique fortran variable in tFortranVariable
      
      
          ixlsx= FILE_MGR('O','AIMECP',.false.)
          call readRngXLSX(ixlsx,'ecpTransfer')  ! read sheet "EFDTransfer" range names and the data in them
          close(ixlsx)
          rname='TransferCount'
          call getrngi4(rname,TransferCount,1,1,1)
          allocate(tFortranVariable(TransferCount))  
          allocate(tCodeUsage(TransferCount)) 

    

          rname='FORTRANVARIABLE ';call getrngc(rname,  tFortranVariable       , 1,TransferCount,1)
          rname='CODEUSAGE       ';call getrngc(rname,  tCodeUsage             , 1, TransferCount , 1 )

   
    

            do j=1,TransferCount             
                    call Mreplace(tFortranVariable(j),char(0)," ")
            enddo
            nuniq=0
            tunique=0
            do j=1,TransferCount
                ifound=0
                do i=1,nuniq
                if (tFortranVariable(j).eq. ECPtransferarray(i)) then
                    ifound=i
                    exit
                endif
                enddo
                if(ifound.eq.0) then
                nuniq=nuniq+1
                ECPtransferarray(nuniq)=tFortranVariable(j)
                ECPtransfer_usage(nuniq)=0
                tCodeUsagePtr = tCodeUsage(j)
                call upper(tCodeUsagePtr)
                tCodeUsage(j) = tCodeUsagePtr
                if(tCodeUsage(j).eq.'RHS') then  ! RHS is abbreviation for RHS of fortran assignment statement. If so, it is an INPUT to LP coefficient deriviation.
                    ECPtransfer_usage(nuniq)=0
                elseif(tCodeUsage(j)(1:3).eq.'LHS' .and. len_trim(tCodeUsage(j)).eq.3) then  ! LHS means the variable is used on the LHS of an assignement statement based on the LP solution usually.
                    ECPtransfer_usage(nuniq)=1
                elseif(tCodeUsage(j)(1:3).eq.'LHS' .and. len_trim(tCodeUsage(j)).gt.3) then  ! A suffix to LHS is used to designate a variable that has been declared/coded in AIMMS and so we omit the declaration when writing the AIMMS code              
                    if(trim(tCodeUsage(j)) .eq. 'LHS_CODED') then            
                        ECPtransfer_usage(nuniq)=2
                        elseif (trim(tCodeUsage(j)) .eq. 'LHS_DONE') then
                        ECPtransfer_usage(nuniq)=3
                        else
                        ECPtransfer_usage(nuniq)=1
                        endif
                    endif
                    tUnique(nuniq)=j
                else ! variable may appear twice in list. if first had "RHS", second has "LHS". if LHS in either, treat as LHS
                if(tCodeUsage(j)(1:3).eq.'LHS' .and. len_trim(tCodeUsage(j)).eq.3) then 
                    ECPtransfer_usage(ifound)=1
                elseif(tCodeUsage(j)(1:3).eq.'LHS' .and. len_trim(tCodeUsage(j)).gt.3) then
                    if(trim(tCodeUsage(j)) .eq. 'LHS_CODED') then            
                        ECPtransfer_usage(nuniq)=2
                        elseif (trim(tCodeUsage(j)) .eq. 'LHS_DONE') then
                        ECPtransfer_usage(nuniq)=3
                        else
                        ECPtransfer_usage(nuniq)=1
                        endif
                endif
            endif
            enddo   
          deallocate(tFortranVariable)
          deallocate(tCodeUsage)
          CODEUSAGE_AIMECP_read = 1
      RETURN
      END
      !============================================================================================================
      ! convert a given string into one with all upper case letters
      subroutine upper(a)
      implicit none
      character*(*) a
      integer L,j  ,i
      L=len(a)
      do i=1,L
        j=ichar(a(i:i))
        if(j.ge.97.and.j.le.122)then
          a(i:i)=char(j-32)
        endif
      enddo
      return
      end
     !================================================================================================================
     ! function is to check if a given transfer array needs OML post-solution adjustment
      FUNCTION UseEFDADJST(TEXT)
      
      USE efd_row_col
      USE T_
      IMPLICIT NONE
      
      include'emmparm'
      include'ecp_nuc'
      include'emm_aimms'
      

      CHARACTER*(*) TEXT
      
      logical UseEFDADJST   
      integer ArrayIndex
      
      UseEFDADJST = .true.
      do ArrayIndex=1,TransferCount
        if (trim(EFDtransferarray(ArrayIndex)).eq. TEXT) then
            if(EFDtransfer_usage(Arrayindex).eq.3) then  ! if the AIMMS conversion status for the post-solve logic adjustment logic of a given EFD transfer array is complete, use EFD AIMMS post-solve adjusted values.
                UseEFDADJST = .false.
                exit
            endif
        endif
      enddo
      RETURN
      END
         !================================================================================================================
     !SUBROUTINE is to check to see if FORTRAN EFD post-solution adjustment can be entirely bypassed 
     ! if the AIMMS conversion status for all EFD LHS transfer variables are all set either 'LHS_done' or RHS,  bypass FORTRAN EFD post-solution adjustments and use passback EFD transfer variables with AIMMS post adjustments.
      SUBROUTINE SetToUseAIMSEFDPostADJST
      
      USE T_
      use efd_row_col
      IMPLICIT NONE
      
      include'emmparm'
      include'ecp_nuc'
      include'emm_aimms'
      
       
      integer ArrayIndex
      
      
      USE_AIMEFD_SLNADJ = .TRUE.
      do ArrayIndex=1,TransferCount
            if(EFDtransfer_usage(Arrayindex).eq.1 .or. EFDtransfer_usage(Arrayindex).eq.2 ) then  
                USE_AIMEFD_SLNADJ = .FALSE.
            endif
      enddo
      RETURN
      END
         !================================================================================================================
     !SUBROUTINE is to check to see if FORTRAN ECP post-solution adjustment can be entirely bypassed 
     ! if the AIMMS conversion status for all ECP LHS transfer variables are all set either 'LHS_done' or RHS,  bypass FORTRAN ECP post-solution adjustments and use passback ECP transfer variables with AIMMS post adjustments.
      SUBROUTINE SetToUseAIMSECPPostADJST
      
      USE T_
      use ecp_row_col
      IMPLICIT NONE
      
      include'emmparm'
      include'ecp_nuc'
      include'emm_aimms'
      
       
      integer ArrayIndex
      
      
      USE_AIMECP_SLNADJ = .TRUE.
      do ArrayIndex=1,TransferCount
            if(ECPtransfer_usage(Arrayindex).eq.1 .or. ECPtransfer_usage(Arrayindex).eq.2 ) then  
                USE_AIMECP_SLNADJ = .FALSE.
            endif
      enddo
      RETURN
      END
           !================================================================================================================
     ! SUBROUTINE is to check to see if FORTRAN based EFD LP generation and OML solve can be entirely skipped and also coefficients not being written into a composite input file for AIMEFD
     ! if the EFD coefficient AIMMS conversion status are all 0,  bypass all FORTRAN EFD LP coefficienct calculatiosn and let AIMEFD use its own coefficient calculation code to generate and solve EFD LP.
      SUBROUTINE CheckToDisableEFDOMLLP
      
      USE T_
      use efd_row_col
      IMPLICIT NONE
      
      include'emmparm'
      include'ecp_nuc'
      include'emm_aimms'
      
      integer narray, UNITNUM, ipass
      character*50 array    
 
     
     UNITNUM=FILE_MGR('O','EFDARRAYS_ALL',.FALSE.)
     rewind UNITNUM

     narray=0
10   continue
     read(UNITNUM,*,end=299) array
     if(array(1:1).eq.'#' ) go to 10
     backspace(UNITNUM)
     read(UNITNUM,*) array,ipass
     narray=narray+1
     if( ipass.eq.1 .or. ipass.eq.2 ) then  
        SKIP_EFDOML = .FALSE.
     endif
     if(narray.le.p_count .AND. .NOT. EOF(UNITNUM)) then
        go to 10
     else
        write(6,*)' increase maxarray' 
     endif
299  continue
     close(UNITNUM)
    RETURN
    END
               !================================================================================================================
     ! SUBROUTINE is to check to see if FORTRAN based EFD LP generation and OML solve can be entirely skipped and also coefficients not being written into a composite input file for AIMEFD
     ! if the EFD coefficient AIMMS conversion status are all 0,  bypass all FORTRAN EFD LP coefficienct calculatiosn and let AIMEFD use its own coefficient calculation code to generate and solve EFD LP.
      SUBROUTINE CheckToDisableECPOMLLP
      
      USE T_
      use ecp_row_col
      IMPLICIT NONE
      
      include'emmparm'
      include'ecp_nuc'
      include'emm_aimms'
      
      integer narray, UNITNUM, ipass
      character*50 array    
 
     
     UNITNUM=FILE_MGR('O','ECPARRAYS_ALL',.FALSE.)
     rewind UNITNUM

     narray=0
10   continue
     read(UNITNUM,*,end=299) array
     if(array(1:1).eq.'#' ) go to 10
     backspace(UNITNUM)
     read(UNITNUM,*) array,ipass
     narray=narray+1
     if( ipass.eq.1 .or. ipass.eq.2 ) then  
        SKIP_ECPOML = .FALSE.
     endif
     if(narray.le.p_count .AND. .NOT. EOF(UNITNUM)) then
        go to 10
     else
        write(6,*)' increase maxarray' 
     endif
299  continue
     close(UNITNUM)
    RETURN
    END
       !================================================================================================================
     ! function is to check if a given transfer array needs OML post-solution adjustment
      FUNCTION UseECPADJST(TEXT)
      
      USE ecp_row_col
      USE T_
      IMPLICIT NONE
      
      include'emmparm'
      include'ecp_nuc'
      include'emm_aimms'
      

      CHARACTER*(*) TEXT
      
      logical UseECPADJST   
      integer ArrayIndex
      
      UseECPADJST = .true.
      do ArrayIndex=1,TransferCount
        if (trim(ECPtransferarray(ArrayIndex)).eq. TEXT) then
            if(ECPtransfer_usage(Arrayindex).eq.3) then  ! if the AIMMS conversion status for the post-solve logic adjustment logic of a given EFD transfer array is complete, use EFD AIMMS post-solve adjusted values.
                UseECPADJST = .false.
                exit
            endif
        endif
      enddo
      RETURN
      END  
    !================================================================================================================
  subroutine efd_write_int_set(setname,first,last,nfield)
  use efd_row_col
! efd_write_int_set writes out a set declaration to an AIMMS-compatible file to transmit integer
! set definitions to the EFD project. 

  implicit none
  character*(*) setname
  character*12 form(5)/'(I1)','(I0.0)','(a)','(a,I0.0)','(a,I0.0,a)'/
  integer first,last,j,is
  integer nfield ! size of field used to provide leading zeroes for PlantGroup, CoalSupplyCurve sets
  character*256 line
  if(last.gt.first) then
    if (first .ge. 0) then
        write(io,'(3a,i<nfield>.<nfield>,a,i<nfield>.<nfield>,a)') firstchar, trim(setname),'_ := data {',first,'..',last,'};'
    else
        line = firstchar//setname//'_ := data {'
        do is = first, 0     
            if (is .ne. 0) then
              write (line(len_trim(line)+1: ), form(5)) '"', is,'",'
            else
              write ( line( len_trim(line)+1:), form(3)) '0'
            endif
        enddo 
        write(line(len_trim(line)+1:), form(5)) '..',last,'};'       
        call mreplace(line,'"',char(39))
        write(io,form(3)) trim(line)
    endif
  else
    write(io,'(3a,i<nfield>.<nfield>,a)') firstchar, trim(setname),'_ := data {',first,'};'
  endif
  return
  end subroutine efd_write_int_set
!================================================================================================================
  subroutine makmsk(mask,a,b,c,d,e,f,g,h,i)
  implicit none
! constructs a mask such as "B(*)(***)(*)(**)" based on a set of up to 8 fields sent as arguments.
! The first field, a, is assumed to be a string (like "B" in the example) and is delimited by ":" at the 
! beginning and end.  The remaining arguments can be literal strings denoted by the ":" characters or
! character variables whose passed lengths determine the number of "*" in the mask field created.


  character(LEN=*),intent(out) :: mask  ! 
  character(LEN=*) :: a
  character(LEN=*), optional :: b,c,d,e,f,g,h,i
  integer Ls
  character*8 stars/'********'/
  mask=' '
  
  ls=len_trim(a)

  if(a(1:1).eq.':' .and. a(Ls:Ls).eq.':' .and. ls.gt.2) then
    mask=a(2:ls-1)
  elseif(ls.gt.0) then
 
    if (ls .gt. 8) write(6,1011) ls, mask, a
 1011 FORMAT(1X,"makmsk_oops",":",I5,":",A30,":",A30)

    mask=trim(mask)//'('//stars(1:Ls)//')'
  endif
  
  if(present(b)) then
    ls=len(b)
    if(b(1:1).eq.':' .and. b(Ls:Ls).eq.':' .and. ls.gt.2) then
      mask=trim(mask)//b(2:ls-1)
    elseif(ls.gt.0) then
      mask=trim(mask)//'('//stars(1:Ls)//')'
    endif
  endif
  
  if(present(c)) then
    ls=len(c)
    if(c(1:1).eq.':' .and. c(Ls:Ls).eq.':' .and. ls.gt.2) then
      mask=trim(mask)//c(2:ls-1)
    elseif(ls.gt.0) then
      mask=trim(mask)//'('//stars(1:Ls)//')'
    endif
  endif
  
  if(present(d)) then
    ls=len(d)
    if(d(1:1).eq.':' .and. d(Ls:Ls).eq.':' .and. ls.gt.2) then
      mask=trim(mask)//d(2:ls-1)
    elseif(ls.gt.0) then
      mask=trim(mask)//'('//stars(1:ls)//')'
    endif
  endif
  
  if(present(e)) then
    ls=len(e)
    if(e(1:1).eq.':' .and. e(Ls:Ls).eq.':' .and. ls.gt.2) then
      mask=trim(mask)//e(2:ls-1)
    elseif(ls.gt.0) then
      mask=trim(mask)//'('//stars(1:ls)//')'
    endif
  endif
  
  if(present(f)) then
    ls=len(f)
    if(f(1:1).eq.':' .and. f(Ls:Ls).eq.':' .and. ls.gt.2) then
      mask=trim(mask)//f(2:ls-1)
    elseif(ls.gt.0) then
      mask=trim(mask)//'('//stars(1:ls)//')'
    endif
  endif
  
  if(present(g)) then
    ls=len(g)
    if(g(1:1).eq.':' .and. g(Ls:Ls).eq.':' .and. ls.gt.2) then
      mask=trim(mask)//g(2:ls-1)
    elseif(ls.gt.0) then
      mask=trim(mask)//'('//stars(1:ls)//')'
    endif
  endif
  
  if(present(h)) then
    ls=len(h)
    if(h(1:1).eq.':' .and. h(Ls:Ls).eq.':' .and. ls.gt.2) then
      mask=trim(mask)//h(2:ls-1)
    elseif(ls.gt.0) then
      mask=trim(mask)//'('//stars(1:ls)//')'
    endif
  endif

  if(present(i)) then
    ls=len(i)
    if(i(1:1).eq.':' .and. i(Ls:Ls).eq.':' .and. ls.gt.2) then
      mask=trim(mask)//i(2:ls-1)
    elseif(ls.gt.0) then
      mask=trim(mask)//'('//stars(1:ls)//')'
    endif
  endif
  
  return
  end subroutine makmsk
!================================================================================================================
  subroutine write_efd_sets
!   collect AIMMS sets used and calls get_efd_set_element for each to write out the set name and its 
!   elements to a file for AIMMS to read.  This is intended to maintain the dimensionality of the AIMMS efd
!   with the fortran/oml efd.
  use efd_row_col
  implicit none
  integer nsets,ic,is,ir,ifound,iset,i
  integer, parameter :: maxsets = 140
  character*30 sets(maxsets)
  character*30 tset(max_set) ! 6 in uecp.f, 5 in uefd.f
  character*5 ccode/'12345'/
  integer icode, inBoth

  nsets=0 
 
 do ic = 0,max_col_aimms  ! number of column mask patterns, and matched to variables in AIMMS project
    if(col_aimms(ic).colnam_aimms.ne.' ') then
      tset(1:max_set)=' '
      do is=1,max_set  !  identifiers have up to max_set sets to define their domain.
        if(len_trim(col_aimms(ic).setnam(is)).gt.0) then
          tset(is)=col_aimms(ic).setnam(is)
          ifound=0
          do iset=1,nsets   ! go through list of sets being compiled and see if this set is new. if so, add to the list.
            if(tset(is).eq.sets(iset)) then
              ifound=1
              exit
            endif
          enddo
          if(ifound.eq.0) then   ! add the set to the list
            nsets=nsets+1
            sets(nsets)=tset(is)
          endif
        endif
      enddo
    endif
  enddo

  do ir = 0,max_row_aimms  ! loop over list of row mask patterns, and matched to row/constraints in AIMMS project
    if(row_aimms(ir).rownam_aimms.ne.' ') then
      tset(1:max_set)=' '
      do is=1,max_set !  identifiers have up to max_set sets to define their domain.
         if(len_trim(row_aimms(ir).setnam(is)).gt.0) then
           tset(is)=row_aimms(ir).setnam(is)
           ifound=0
           do iset=1,nsets    ! go through list of sets being compiled and see if this set is new. if so, add to the list.
             if(tset(is).eq.sets(iset)) then
               ifound=1
               exit
             endif
           enddo
           if(ifound.eq.0) then  ! add the set to the list
             nsets=nsets+1
             sets(nsets)=tset(is)
           endif
         else
           exit
         endif
       enddo
    endif
  enddo

  is=1
  do i=1,EFDSetLookCount
     tset(is)=xefdSetLook(i,2)
     ifound=0
     do iset=1,nsets    ! go through list of sets being compiled and see if this set is new. if so, add to the list.
       if(tset(is).eq.sets(iset)) then
         ifound=1
         exit
       endif
     enddo
     if(ifound.eq.0) then  ! add the set to the list
       nsets=nsets+1
       sets(nsets)=tset(is)
     endif
  enddo
  
   set_lookup=.false.

! with set_lookup false, each call writes out the set name and its elements to a file in aimms-compatible format
   do iset=1,nsets
     firstchar=' '
     if(index(sets(iset),'_ALT').gt.0) firstchar='!'   ! first character is a comment for sets with "_ALT" in the name
     call get_efd_set_element(trim(sets(iset)),ccode,icode)

   enddo
   
   set_lookup=.true.  ! normal setting so get_efd_set_element just returns the set element associated with a masked position
   
   return
   end subroutine write_efd_sets
!================================================================================================================
   subroutine efd_mps
    use efd_row_col
    implicit none
    include 'parametr'
    include 'ncntrl'
    integer imps
    save imps
    character*50 mpsname,year_iter*7
    character*18 fname/'EFDMPS'/
    LOGICAL NEW, not_done_yet/.true./, LOPENED
    INTEGER FILE_MGR
    EXTERNAL FILE_MGR
    integer ir,ix,ic,ndup,numz,nr
    character*8 oldcol,oldrow
    real(8) oldcoeff8, coeff8

    if(not_done_yet) then
      not_done_yet=.false.
      NEW=.true.
      imps=file_mgr('O',fname,NEW)  ! get unit number for generic file efdmps.mps
      inquire(unit=imps,opened=lopened)  ! close generic file but reuse unit number for year-specific version
      if(lopened) then
        close(imps,status='DELETE')
       endif
     endif

    write(year_iter,'(i4,"_",i2.2)') curcalyr,curitr
    mpsname=trim(fname)//year_iter//'.mps'     ! year&iteration-specific version of EFDMPS.mps 

    open(imps,file=mpsname,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
    rewind imps 
100 format(a,t15,a,t25,a)
101 format(1x,a1,2x,a)
102 format(t5,a,T15,a,t25,g13.6)
103 format(t5,a,T15,a,t25,g12.5)

    do ix=0,max_efd_row_hash
      efd_rowidx(ix)=ix
      efd_rowkey(ix)=efd_row_name(ix)
    enddo

    call emm_sort16(efd_rowkey,  efd_rowidx,  cnt_efd_row, max_efd_row)  ! sort the rows

    write(imps,100) 'NAME','ACTPROB',trim(mpsname)
    write(imps,100) 'ROWS'
    do ix=0,max_efd_row_hash
      ir=efd_rowidx(ix)
      if(efd_row_name(ir).eq.efd_rowkey(ix)) then
        write(imps,101) efd_rowkey(ix)(9:9), efd_rowkey(ix)(1:8)
      endif
    enddo

    numz=0
    ndup=0
    
    oldrow=' '
    oldcol=' '
    oldcoeff8=0.
! assumed to sorted by column/row, so duplicate coefficients will appear consecutively

    write(imps,100) 'COLUMNS'
    do ix=1,cnt_efd_coeff
       ic=efd_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.
       if(efd_coeff(ic).efdrownam(1:5).ne.'BOUND' .and. efd_coeff(ic).efdcolnam(1:6).ne.'RHSEFD') then

         if(oldrow.ne.efd_coeff(ic).efdrownam .or. oldcol.ne.efd_coeff(ic).efdcolnam) then  ! eliminate duplicates
           if(efd_coeff(ic).coeff8 .ne. 0.0D0) then
             write(imps,102)   efd_coeff(ic).efdcolnam,    efd_coeff(ic).efdrownam,    efd_coeff(ic).coeff8
           else
             numz=numz+1
           endif
         else
           if(oldrow.eq.efd_coeff(ic).efdrownam .and. oldcol.eq.efd_coeff(ic).efdcolnam  .and. oldcoeff8.ne.efd_coeff(ic).coeff8) then
       ! duplicate row, col name, but coefficient is different, so write it out.
             write(imps,102)   efd_coeff(ic).efdcolnam,    efd_coeff(ic).efdrownam,    efd_coeff(ic).coeff8
           else
             ndup=ndup+1
           endif
         endif
       endif   
       oldrow=efd_coeff(ic).efdrownam
       oldcol=efd_coeff(ic).efdcolnam
       oldcoeff8=efd_coeff(ic).coeff8

    enddo

    numz=0
    ndup=0
    oldrow=' '
    oldcol=' '
    oldcoeff8=0.
    write(imps,100) 'RHS'
    do ix=1,cnt_efd_coeff
       ic=efd_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.
       if(efd_coeff(ic).efdcolnam(1:6).eq.'RHSEFD') then
         if(oldrow.ne.efd_coeff(ic).efdrownam   .or.  oldcol.ne.'RHSEFD')  then  ! eliminate duplicates
           if(efd_coeff(ic).coeff8 .ne. 0.0D0) then
             write(imps,102)   efd_coeff(ic).efdcolnam,    efd_coeff(ic).efdrownam,    efd_coeff(ic).coeff8
           else
             numz=numz+1
           endif
         else ! oldrow.eq.efd_coeff(ic).efdrownam   .and.  oldcol.eq.'RHSEFD' so is a duplicate.  but if coeff differs, write it out anyway
           if(oldcoeff8.ne.efd_coeff(ic).coeff8) then
             write(imps,102)   efd_coeff(ic).efdcolnam,    efd_coeff(ic).efdrownam,    efd_coeff(ic).coeff8
           else
             ndup=ndup+1
           endif
         endif
       endif   
       oldrow=efd_coeff(ic).efdrownam
       oldcol=efd_coeff(ic).efdcolnam
       oldcoeff8=efd_coeff(ic).coeff8
    enddo

    write(imps,100) 'BOUNDS'
    do ix=1,cnt_efd_coeff
       ic=efd_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.  lower bound comes before upper bound.
       if(efd_coeff(ic).efdrownam(1:7).eq.'BOUNDUP') then
          if(efd_coeff(ic).efdcolnam .eq. oldcol  .and. oldrow(1:7).eq.'BOUNDLO' .and. &
            (efd_coeff(ic).coeff8.eq.oldcoeff8 .or. (efd_coeff(ic).coeff8.eq.-1.0D0.and.oldcoeff8.eq.0.0D0))) then 
            
             if(efd_coeff(ic).coeff8.eq.-1.0D0) then
               efd_coeff(ic).coeff8=0.0D0
             endif

             write(imps,102)   'FX BOUND', efd_coeff(ic).efdcolnam, efd_coeff(ic).coeff8
          elseif(efd_coeff(ic).efdcolnam .eq. oldcol  .and. oldrow(1:7).eq.'BOUNDLO') then
             if(oldcoeff8.ne.0.0D0) then
               write(imps,102)   'LO BOUND', oldcol,    oldcoeff8
             endif
             if(efd_coeff(ic).coeff8.eq.-1.0D0) then
               efd_coeff(ic).coeff8=0.0D0
             endif

             write(imps,102)   'UP BOUND', efd_coeff(ic).efdcolnam,    efd_coeff(ic).coeff8
          else
             if(efd_coeff(ic).coeff8.eq.-1.0D0) then
               efd_coeff(ic).coeff8=0.0D0
             endif
             write(imps,102)   'UP BOUND', efd_coeff(ic).efdcolnam,    efd_coeff(ic).coeff8
          endif
       endif   
       oldrow=efd_coeff(ic).efdrownam
       oldcol=efd_coeff(ic).efdcolnam
       oldcoeff8=efd_coeff(ic).coeff8

    enddo
    
    write(imps,100) 'ENDATA'   
    
   return
   end subroutine efd_mps
!================================================================================================================
   subroutine read_efd_sets
! reads in the set data file (written by subroutine write_efd_sets) to obtain the list of character string elements for each AIMMS set.  

   use efd_row_col
   implicit none
   integer iUnit,retcode,min_unit/100/,ifound,nsize,i,j,ncomma,nb, maxlinefound,L,istart
   integer nfield ! size of integer fields such as plantgroup, which is 5 characters wide
   
   integer, parameter :: maxlinelength = 600
   character (LEN=maxlinelength) line, line2
!
   open(io,file='efd\efdsetdata.dat',status='unknown',err=48)
   rewind io
   goto 49
48 continue
   open(io,file='efdsetdata.dat',status='unknown') ! if running outside of nems, like from readaimlis.f90
49 continue   

   numaimsets=0
   nSetElements=0
   aimsets(:).istart =0
   aimsets(:).iend   =0
   aimsets(:).setname=' '
   setelements(:)= ' '
   maxlinefound=0
   
  10 read(io,'(a)',end=99) line
     l=len_trim(line)
     maxlinefound=max(maxlinefound,len_trim(line))
     if(maxlinefound.ge. maxlinelength-2 .or. line(l:l).ne.';') then
        write(6,*) 'AIMMS Interface error: subroutine read_efd_sets: '
        write(6,*) 'AIMMS Interface error: The length of data line in efdsetdata.dat too big, so increase MAXLINELENGTH parameter,'
        write(6,*) 'AIMMS Interface error: or else the line does not end in a semicolon;'
        stop ' '
     endif
     ifound=index(line,'_ := data {')
     if(ifound.gt.2) then
       numaimsets=numaimsets+1
       aimsets(numaimsets).setname=line(2:ifound-1)
       line(1:ifound+10)=' '
       ifound=index(line,'}')
       if(ifound.gt.0) then
         line(ifound:)= ' '
         line=adjustl(line)
         ifound=index(line,'..')  ! look for integer set based on this operator
         if(ifound.gt.0) then
           nfield=ifound-1
           read(line(1:ifound),'(i<nfield>)') istart ! read first field, start of range, usually 1 or 0
           nfield=index(line,'..') - 1  ! size of first field, separated by "--"

           read(line(ifound+2:),'(i<nfield>)') nsize  ! read second of the two range fields
           nSetElements=nSetElements+1
           aimsets(numaimsets).istart=nSetElements
           aimsets(numaimsets).iend  =nSetElements+nsize-1

           do i=istart,nsize
             write(setElements(nSetElements),'(i<nfield>.<nfield>)') i
             setElements(nSetElements)=adjustl(setElements(nSetElements))
             nSetElements=nSetElements+1
           enddo
           nSetElements=nSetElements-1
           if(aimsets(numaimsets).setname.eq.'BiomassProductionStep') then
             setElements(nSetElements)='XX'
           endif
         else
           ncomma=0
           nSetElements=nSetElements+1
           line2=' '
           nb=0
           do j=1,len_trim(line)
             if(line(j:j).eq.',') then
               ncomma=ncomma+1
               nb=nb+1
               line2(nb:nb)=line(j:J)
             elseif(line(j:j).ne.' ') then
               nb=nb+1
               line2(nb:nb)=line(j:J)
             endif
           enddo
!           write(6,'(i3,1x, a)') numaimsets,trim(line2)
           read(line2,*) (setElements(j),j=nSetElements,nSetElements+ncomma)
           aimsets(numaimsets).istart=nSetElements
           aimsets(numaimsets).iend  =nSetElements+ncomma
           nSetElements=nSetElements+ncomma
         endif
       endif
     endif
     goto 10
99 continue
   write(6,*) 'AIMMS in read_efd_sets, nSetElements=',nSetElements
   return
   end subroutine read_efd_sets
 !================================================================================================================
  subroutine AIMMS_Transfer_Out_efd
  use efd_row_col
  implicit none
  include 'parametr'
  include 'emmparm'
  include 'cdsparms'
  include 'dsmdimen'
  include 'ab32'
  include 'angtdm'
  include 'coalemm'
  include 'coalrep'
  include 'cogen'
  include 'control'
  include 'convfact'
  include 'csapr'
  include 'dispcrv'
  include 'dispett'
  include 'dispin'
  include 'dispinyr'
  include 'dispout'
  include 'dispuse'
  include 'dsmsectr' !conflicts with wwind
  include 'dsmtfecp'
  include 'dsmtoefd'
  include 'e111d'
  include 'ecpcntl'
  include 'ecp_coal'
  include 'elcntl'
  include 'elout'
  include 'emablk'
  include 'emeblk'
  include 'emoblk'
  include 'emission'
  include 'emmemis'
  include 'fuelin'
  include 'intout'
  include 'ncntrl'
  include 'ngtdmrep'
  include 'ogsmout'
  include 'plntctl'
  include 'postpr'
  include 'qblk'
  include 'tcs45q'
  include 'udatout'
  include 'uecpout'
  include 'uefdout'
  include 'uettout'
  include 'uso2grp'
  include 'wrenew'
  include 'ecp_nuc'  
  include 'emm_aimms'
!  include 'wwind' ! need CF, but that conflicts with a same-named variable in dsmsectr
  integer irg,iyr
  integer scalar/1/
  integer i,j,k
  real edmxds_efd(EFD_D_CAP,MAXNFR), edmxds_ecp(ECP_D_CAP,MAXNFR)
  real edmxgs_efd(EFD_D_CAP,MAXNFR), edmxgs_ecp(ECP_D_CAP,MAXNFR)
  real edmxrs_efd(EFD_D_CAP,MAXNFR), edmxrs_ecp(ECP_D_CAP,MAXNFR)
  real*4 FGSSH_ams(ECP_D_CAP+EFD_D_CAP,MAXNFR),FCLSH_ams(ECP_D_CAP+EFD_D_CAP,MAXNFR)
  real*4 FOLSH_ams(ECP_D_CAP+EFD_D_CAP,MAXNFR),FWDSH_ams(ECP_D_CAP+EFD_D_CAP,MAXNFR)
  iyr=curiyr
  
! split 3 arrays with two plant indexing schemes (one for ecp and one for efd) into pairs with single
! indexing schema
  do j=1,maxnfr
    do i=1,EFD_D_CAP
       edmxds_efd(i,j)=edmxds(2,i,j)
       edmxrs_efd(i,j)=edmxrs(2,i,j)
       edmxgs_efd(i,j)=edmxgs(2,i,j)
    enddo
    do i=1,ECP_D_CAP
       edmxgs_ecp(i,j)=edmxgs(1,i,j)
       edmxrs_ecp(i,j)=edmxrs(1,i,j)
       edmxds_ecp(i,j)=edmxds(1,i,j)
    enddo
  enddo
  do k=1,2
      do j=1,maxnfr
        do i=1,EFD_D_CAP
         if (k .eq. 1) then
           FGSSH_ams(i+EFD_D_CAP,j)=FGSSH(k,i,j)
           FCLSH_ams(i+EFD_D_CAP,j)=FCLSH(k,i,j)
           FOLSH_ams(i+EFD_D_CAP,j)=FOLSH(k,i,j)
           FWDSH_ams(i+EFD_D_CAP,j)=FWDSH(k,i,j)
         else
           FGSSH_ams(i,j)=FGSSH(k,i,j)
           FCLSH_ams(i,j)=FCLSH(k,i,j)
           FOLSH_ams(i,j)=FOLSH(k,i,j)
           FWDSH_ams(i,j)=FWDSH(k,i,j)
         endif
        enddo
      enddo
  enddo
       call AIMMS_TransArray_Out_efd(EDMXDS_ECP,EDMXDS_ECP,EDMXDS_ECP,EDMXDS_ECP,EDMXDS_ECP,2,"EDMXDS_ECP", &
           1,             1,             1,             1,             1,             1,             1,  &
           ECP_D_CAP,       MAXNFR,        1,             1,             1,             1,             1,  &
          "PlantType_ECP", "FuelRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_Out_efd(EDMXGS_ECP,EDMXGS_ECP,EDMXGS_ECP,EDMXGS_ECP,EDMXGS_ECP,2,"EDMXGS_ECP", &
           1,             1,             1,             1,             1,             1,             1,  &
           ECP_D_CAP,       MAXNFR,        1,             1,             1,             1,             1,  &
          "PlantType_ECP", "FuelRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_Out_efd(EDMXRS_ECP,EDMXRS_ECP,EDMXRS_ECP,EDMXRS_ECP,EDMXRS_ECP,2,"EDMXRS_ECP", &
           1,             1,             1,             1,             1,             1,             1,  &
           ECP_D_CAP,       MAXNFR,        1,             1,             1,             1,             1,  &
          "PlantType_ECP", "FuelRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_Out_efd(EDMXDS_EFD,EDMXDS_EFD,EDMXDS_EFD,EDMXDS_EFD,EDMXDS_EFD,2,"EDMXDS_EFD", &
           1,             1,             1,             1,             1,             1,             1,  &
           EFD_D_CAP,       MAXNFR,        1,             1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_Out_efd(EDMXGS_EFD,EDMXGS_EFD,EDMXGS_EFD,EDMXGS_EFD,EDMXGS_EFD,2,"EDMXGS_EFD", &
           1,             1,             1,             1,             1,             1,             1,  &
           EFD_D_CAP,       MAXNFR,        1,             1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_Out_efd(EDMXRS_EFD,EDMXRS_EFD,EDMXRS_EFD,EDMXRS_EFD,EDMXRS_EFD,2,"EDMXRS_EFD", &
           1,             1,             1,             1,             1,             1,             1,  &
           EFD_D_CAP,       MAXNFR,        1,             1,             1,             1,             1,  &
          "PlantType",    "FuelRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FGSSH_ams,FGSSH_ams,FGSSH_ams,FGSSH_ams,FGSSH_ams,2,"FGSSH_ams", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+EFD_D_CAP,  MAXNFR,        1,        1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",         "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
      call AIMMS_TransArray_out_efd(FGSSH_ams,FGSSH_ams,FGSSH_ams,FGSSH_ams,FGSSH_ams,2,"FGSSH_ams_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+EFD_D_CAP,  MAXNFR,        1,        1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",         "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
      call AIMMS_TransArray_out_efd(FCLSH_ams,FCLSH_ams,FCLSH_ams,FCLSH_ams,FCLSH_ams,2,"FCLSH_ams", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+EFD_D_CAP,  MAXNFR,        1,        1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",         "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
      call AIMMS_TransArray_out_efd(FCLSH_ams,FCLSH_ams,FCLSH_ams,FCLSH_ams,FCLSH_ams,2,"FCLSH_ams_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+EFD_D_CAP,  MAXNFR,        1,        1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",         "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
      call AIMMS_TransArray_out_efd(FOLSH_ams,FOLSH_ams,FOLSH_ams,FOLSH_ams,FOLSH_ams,2,"FOLSH_ams", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+EFD_D_CAP,  MAXNFR,        1,        1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",         "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
      call AIMMS_TransArray_out_efd(FOLSH_ams,FOLSH_ams,FOLSH_ams,FOLSH_ams,FOLSH_ams,2,"FOLSH_ams_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+EFD_D_CAP,  MAXNFR,        1,        1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",         "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
      call AIMMS_TransArray_out_efd(FWDSH_ams,FWDSH_ams,FWDSH_ams,FWDSH_ams,FWDSH_ams,2,"FWDSH_ams", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+EFD_D_CAP,  MAXNFR,        1,        1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",         "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
      call AIMMS_TransArray_out_efd(FWDSH_ams,FWDSH_ams,FWDSH_ams,FWDSH_ams,FWDSH_ams,2,"FWDSH_ams_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+EFD_D_CAP,  MAXNFR,        1,        1,             1,             1,             1,  &
          "PlantType",   "FuelRegion", "",         "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
!---------------------------------------------------------------------------------------------------------
! Start of EFD code generated by arraycode.f to transfer_code_efd.f 
!---------------------------------------------------------------------------------------------------------          
!==================================================================================================================================
!  Transfer the variables not stored in DAF files
!==================================================================================================================================
       call AIMMS_TransArray_out_efd(ab_allbank_avl,ab_allbank_avl,ab_allbank_avl,ab_allbank_avl,ab_allbank_avl,1,"ab_allbank_avl", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.TRUE.)
       call AIMMS_TransArray_out_efd(ab_auction_p,ab_auction_p,ab_auction_p,ab_auction_p,ab_auction_p,1,"ab_auction_p", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ab_cap_tot,ab_cap_tot,ab_cap_tot,ab_cap_tot,ab_cap_tot,1,"ab_cap_tot", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ab_covd_em_fue,ab_covd_em_fue,ab_covd_em_fue,ab_covd_em_fue,ab_covd_em_fue,1,"ab_covd_em_fue", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ab_covd_em_ind,ab_covd_em_ind,ab_covd_em_ind,ab_covd_em_ind,ab_covd_em_ind,1,"ab_covd_em_ind", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ab_covd_em_oth,ab_covd_em_oth,ab_covd_em_oth,ab_covd_em_oth,ab_covd_em_oth,1,"ab_covd_em_oth", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ab_covd_em_ref,ab_covd_em_ref,ab_covd_em_ref,ab_covd_em_ref,ab_covd_em_ref,1,"ab_covd_em_ref", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ab_cstcont_avl,ab_cstcont_avl,ab_cstcont_avl,ab_cstcont_avl,ab_cstcont_avl,1,"ab_cstcont_avl", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ab_cstcont_frac,ab_cstcont_frac,ab_cstcont_frac,ab_cstcont_frac,ab_cstcont_frac,1,"ab_cstcont_frac", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ab_offset_frac,ab_offset_frac,ab_offset_frac,ab_offset_frac,ab_offset_frac,1,"ab_offset_frac", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ab_reserve_p,ab_reserve_p,ab_reserve_p,ab_reserve_p,ab_reserve_p,2,"ab_reserve_p", &
          1,             1,             1,             1,             1,             1,             1,  &
          3,             mnumyr,        1,             1,             1,             1,             1,  &
          "Three",      "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32UTIL,AB32UTIL,AB32UTIL,AB32UTIL,AB32UTIL,1,"AB32UTIL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32UTIL,AB32UTIL,AB32UTIL,AB32UTIL,AB32UTIL,1,"AB32UTIL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32BAVL,AB32BAVL,AB32BAVL,AB32BAVL,AB32BAVL,1,"AB32BAVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32BAVL,AB32BAVL,AB32BAVL,AB32BAVL,AB32BAVL,1,"AB32BAVL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32BUSE,AB32BUSE,AB32BUSE,AB32BUSE,AB32BUSE,1,"AB32BUSE", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32BUSE,AB32BUSE,AB32BUSE,AB32BUSE,AB32BUSE,1,"AB32BUSE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32BBNK,AB32BBNK,AB32BBNK,AB32BBNK,AB32BBNK,1,"AB32BBNK", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32BBNK,AB32BBNK,AB32BBNK,AB32BBNK,AB32BBNK,1,"AB32BBNK_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32OAVL,AB32OAVL,AB32OAVL,AB32OAVL,AB32OAVL,1,"AB32OAVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32OAVL,AB32OAVL,AB32OAVL,AB32OAVL,AB32OAVL,1,"AB32OAVL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32OUSE,AB32OUSE,AB32OUSE,AB32OUSE,AB32OUSE,1,"AB32OUSE", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32OUSE,AB32OUSE,AB32OUSE,AB32OUSE,AB32OUSE,1,"AB32OUSE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32RAVL,AB32RAVL,AB32RAVL,AB32RAVL,AB32RAVL,1,"AB32RAVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32RAVL,AB32RAVL,AB32RAVL,AB32RAVL,AB32RAVL,1,"AB32RAVL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32RUSE,AB32RUSE,AB32RUSE,AB32RUSE,AB32RUSE,1,"AB32RUSE", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32RUSE,AB32RUSE,AB32RUSE,AB32RUSE,AB32RUSE,1,"AB32RUSE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32RBNK,AB32RBNK,AB32RBNK,AB32RBNK,AB32RBNK,1,"AB32RBNK", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32RBNK,AB32RBNK,AB32RBNK,AB32RBNK,AB32RBNK,1,"AB32RBNK_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32ESCP,AB32ESCP,AB32ESCP,AB32ESCP,AB32ESCP,1,"AB32ESCP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AB32ESCP,AB32ESCP,AB32ESCP,AB32ESCP,AB32ESCP,1,"AB32ESCP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ACICST,ACICST,ACICST,ACICST,ACICST,1,"ACICST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ACICST,ACICST,ACICST,ACICST,ACICST,1,"ACICST_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ACIOAM,ACIOAM,ACIOAM,ACIOAM,ACIOAM,1,"ACIOAM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ACIOAM,ACIOAM,ACIOAM,ACIOAM,ACIOAM,1,"ACIOAM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ACI_CST,ACI_CST,ACI_CST,ACI_CST,ACI_CST,3,"ACI_CST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ACI_OPT,ACI_OPT,ACI_OPT,ACI_OPT,ACI_OPT,4,"ACI_OPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        MNUMYR,        1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "MNUMYR",   "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ACI_STEPS,ACI_STEPS,ACI_STEPS,ACI_STEPS,ACI_STEPS,2,"ACI_STEPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ALT_UECP_CPEN_ADJ,ALT_UECP_CPEN_ADJ,ALT_UECP_CPEN_ADJ,ALT_UECP_CPEN_ADJ,ALT_UECP_CPEN_ADJ,1,"ALT_UECP_CPEN_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AIMMS_GRP,AIMMS_GRP,AIMMS_GRP,AIMMS_GRP,AIMMS_GRP,1,"AIMMS_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(AINU,AINU,AINU,AINU,AINU,1,"AINU", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BARRIER,BARRIER,BARRIER,BARRIER,BARRIER,1,"BARRIER", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BMCLCON,BMCLCON,BMCLCON,BMCLCON,BMCLCON,1,"BMCLCON", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BMCLGEN,BMCLGEN,BMCLGEN,BMCLGEN,BMCLGEN,1,"BMCLGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BMCLTOL,BMCLTOL,BMCLTOL,BMCLTOL,BMCLTOL,1,"BMCLTOL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BMNETIMP,BMNETIMP,BMNETIMP,BMNETIMP,BMNETIMP,1,"BMNETIMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BMNGCON,BMNGCON,BMNGCON,BMNGCON,BMNGCON,1,"BMNGCON", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BMNGGEN,BMNGGEN,BMNGGEN,BMNGGEN,BMNGGEN,1,"BMNGGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BMNGTOL,BMNGTOL,BMNGTOL,BMNGTOL,BMNGTOL,1,"BMNGTOL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BMOLTOL,BMOLTOL,BMOLTOL,BMOLTOL,BMOLTOL,1,"BMOLTOL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,1,"BNK_TO_CMM_HG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BTCOGEN,BTCOGEN,BTCOGEN,BTCOGEN,BTCOGEN,1,"BTCOGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CAN_CST_SCMULT,CAN_CST_SCMULT,CAN_CST_SCMULT,CAN_CST_SCMULT,CAN_CST_SCMULT,1,"CAN_CST_SCMULT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CAN_QTY_SCMULT,CAN_QTY_SCMULT,CAN_QTY_SCMULT,CAN_QTY_SCMULT,CAN_QTY_SCMULT,1,"CAN_QTY_SCMULT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CAREFD,CAREFD,CAREFD,CAREFD,CAREFD,2,"CAREFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CAREFD,CAREFD,CAREFD,CAREFD,CAREFD,2,"CAREFD_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CARGRP_CA,CARGRP_CA,CARGRP_CA,CARGRP_CA,CARGRP_CA,1,"CARGRP_CA", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CARGRP_RG,CARGRP_RG,CARGRP_RG,CARGRP_RG,CARGRP_RG,1,"CARGRP_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CARTGT,CARTGT,CARTGT,CARTGT,CARTGT,2,"CARTGT", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CARTGT,CARTGT,CARTGT,CARTGT,CARTGT,2,"CARTGT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CCS_EOR_45Q,CCS_EOR_45Q,CCS_EOR_45Q,CCS_EOR_45Q,CCS_EOR_45Q,1,"CCS_EOR_45Q", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CCS_SALINE_45Q,CCS_SALINE_45Q,CCS_SALINE_45Q,CCS_SALINE_45Q,CCS_SALINE_45Q,1,"CCS_SALINE_45Q", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CFCRDIMP,CFCRDIMP,CFCRDIMP,CFCRDIMP,CFCRDIMP,1,"CFCRDIMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CFNGC,CFNGC,CFNGC,CFNGC,CFNGC,1,"CFNGC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CFNGU,CFNGU,CFNGU,CFNGU,CFNGU,1,"CFNGU", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CGNTGEN,CGNTGEN,CGNTGEN,CGNTGEN,CGNTGEN,4,"CGNTGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        MNUMCGF,       2,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "CHPFuel",   "Two",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CHKGEN,CHKGEN,CHKGEN,CHKGEN,CHKGEN,2,"CHKGEN", &
          1,                 1,                 1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
          "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CHKGEN,CHKGEN,CHKGEN,CHKGEN,CHKGEN,2,"CHKGEN_pass", &
          1,                 1,                 1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
          "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CHK$,CHK$,CHK$,CHK$,CHK$,2,"CHK_D", &
          1,                 1,                 1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
          "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CHK$,CHK$,CHK$,CHK$,CHK$,2,"CHK_D_pass", &
          1,                 1,                 1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
          "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CNSTRNTS_EFD,CNSTRNTS_EFD,CNSTRNTS_EFD,CNSTRNTS_EFD,CNSTRNTS_EFD,4,"CNSTRNTS_EFD", &
          1,             1,             1,                 1,                 1,             1,             1,  &
          EFD_D_MSP,     MNUMYR,        MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,  &
          "Season",     "MNUMYR",      "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",          "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CLCONFC,CLCONFC,CLCONFC,CLCONFC,CLCONFC,2,"CLCONFC", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MAXNFR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "FuelRegion", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2BYGRP,CO2BYGRP,CO2BYGRP,CO2BYGRP,CO2BYGRP,2,"CO2BYGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2EPGRP,CO2EPGRP,CO2EPGRP,CO2EPGRP,CO2EPGRP,2,"CO2EPGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2EQGRP,CO2EQGRP,CO2EQGRP,CO2EQGRP,CO2EQGRP,2,"CO2EQGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2ESGRP,CO2ESGRP,CO2ESGRP,CO2ESGRP,CO2ESGRP,2,"CO2ESGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2FLGRP,CO2FLGRP,CO2FLGRP,CO2FLGRP,CO2FLGRP,2,"CO2FLGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2OPGRP,CO2OPGRP,CO2OPGRP,CO2OPGRP,CO2OPGRP,2,"CO2OPGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2OQGRP,CO2OQGRP,CO2OQGRP,CO2OQGRP,CO2OQGRP,2,"CO2OQGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2RPGRP,CO2RPGRP,CO2RPGRP,CO2RPGRP,CO2RPGRP,2,"CO2RPGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2RQGRP,CO2RQGRP,CO2RQGRP,CO2RQGRP,CO2RQGRP,2,"CO2RQGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2NJEXC,CO2NJEXC,CO2NJEXC,CO2NJEXC,CO2NJEXC,2,"CO2NJEXC", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2VAEXC,CO2VAEXC,CO2VAEXC,CO2VAEXC,CO2VAEXC,2,"CO2VAEXC", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_ADJNT,CO2_ADJNT,CO2_ADJNT,CO2_ADJNT,CO2_ADJNT,1,"CO2_ADJNT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_CL_BY_FL,CO2_CL_BY_FL,CO2_CL_BY_FL,CO2_CL_BY_FL,CO2_CL_BY_FL,2,"CO2_CL_BY_FL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "FuelRegion", "CO2CapGroup", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_DE_BY_CA,CO2_DE_BY_CA,CO2_DE_BY_CA,CO2_DE_BY_CA,CO2_DE_BY_CA,1,"CO2_DE_BY_CA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_DE_BY_RG,CO2_DE_BY_RG,CO2_DE_BY_RG,CO2_DE_BY_RG,CO2_DE_BY_RG,2,"CO2_DE_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CO2CapGroup", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_DF_BY_CA,CO2_DF_BY_CA,CO2_DF_BY_CA,CO2_DF_BY_CA,CO2_DF_BY_CA,1,"CO2_DF_BY_CA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_DF_BY_RG,CO2_DF_BY_RG,CO2_DF_BY_RG,CO2_DF_BY_RG,CO2_DF_BY_RG,2,"CO2_DF_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CO2CapGroup", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_EMSWD,CO2_EMSWD,CO2_EMSWD,CO2_EMSWD,CO2_EMSWD,1,"CO2_EMSWD", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_EORSW,CO2_EORSW,CO2_EORSW,CO2_EORSW,CO2_EORSW,1,"CO2_EORSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_GRP,CO2_GRP,CO2_GRP,CO2_GRP,CO2_GRP,1,"CO2_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_IM_BY_CA,CO2_IM_BY_CA,CO2_IM_BY_CA,CO2_IM_BY_CA,CO2_IM_BY_CA,1,"CO2_IM_BY_CA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_IM_BY_RG,CO2_IM_BY_RG,CO2_IM_BY_RG,CO2_IM_BY_RG,CO2_IM_BY_RG,2,"CO2_IM_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CO2CapGroup", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_OG_BY_FL,CO2_OG_BY_FL,CO2_OG_BY_FL,CO2_OG_BY_FL,CO2_OG_BY_FL,2,"CO2_OG_BY_FL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "FuelRegion", "CO2CapGroup", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_OS_BY_RG,CO2_OS_BY_RG,CO2_OS_BY_RG,CO2_OS_BY_RG,CO2_OS_BY_RG,2,"CO2_OS_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CO2CapGroup", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_PLTRG,CO2_PLTRG,CO2_PLTRG,CO2_PLTRG,CO2_PLTRG,2,"CO2_PLTRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType_ECP", "SupplyRegion", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_PRCSW,CO2_PRCSW,CO2_PRCSW,CO2_PRCSW,CO2_PRCSW,1,"CO2_PRCSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_STDQN,CO2_STDQN,CO2_STDQN,CO2_STDQN,CO2_STDQN,2,"CO2_STDQN", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_STDRF,CO2_STDRF,CO2_STDRF,CO2_STDRF,CO2_STDRF,2,"CO2_STDRF", &
          1,             1,                1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "int_fuel_region_ALT1", "MNUMYR", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_STDRN,CO2_STDRN,CO2_STDRN,CO2_STDRN,CO2_STDRN,2,"CO2_STDRN", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_STDSW,CO2_STDSW,CO2_STDSW,CO2_STDSW,CO2_STDSW,1,"CO2_STDSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_STDTN,CO2_STDTN,CO2_STDTN,CO2_STDTN,CO2_STDTN,1,"CO2_STDTN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_THRET,CO2_THRET,CO2_THRET,CO2_THRET,CO2_THRET,1,"CO2_THRET", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CPFLECP,CPFLECP,CPFLECP,CPFLECP,CPFLECP,4,"CPFLECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMCR,        EFD_D_MFRG,    EFD_D_MFRG,    1,             1,             1,  &
          "PlantType_ECP", "CensusRegion", "int_fuel_region_ALT1", "int_fuel_region", "", "",      "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CPFLEFD,CPFLEFD,CPFLEFD,CPFLEFD,CPFLEFD,4,"CPFLEFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     MNUMCR,        EFD_D_MFRG,    EFD_D_MFRG,    1,             1,             1,  &
          "PlantType",  "CensusRegion", "int_fuel_region_ALT1", "int_fuel_region", "", "",         "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CTLBTU,CTLBTU,CTLBTU,CTLBTU,CTLBTU,3,"CTLBTU", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     NDREG,         MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "CoalDemandRegion", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CTLHGEM,CTLHGEM,CTLHGEM,CTLHGEM,CTLHGEM,2,"CTLHGEM", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CTLHGEM,CTLHGEM,CTLHGEM,CTLHGEM,CTLHGEM,2,"CTLHGEM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CTLNOXEM,CTLNOXEM,CTLNOXEM,CTLNOXEM,CTLNOXEM,2,"CTLNOXEM", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CTLNOXEM,CTLNOXEM,CTLNOXEM,CTLNOXEM,CTLNOXEM,2,"CTLNOXEM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CTLSO2EM,CTLSO2EM,CTLSO2EM,CTLSO2EM,CTLSO2EM,2,"CTLSO2EM", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CTLSO2EM,CTLSO2EM,CTLSO2EM,CTLSO2EM,CTLSO2EM,2,"CTLSO2EM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CURIYR,CURIYR,CURIYR,CURIYR,CURIYR,1,"CURIYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(DPVDISPATCH,DPVDISPATCH,DPVDISPATCH,DPVDISPATCH,DPVDISPATCH,1,"DPVDISPATCH", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(DPVTOTCAPNR,DPVTOTCAPNR,DPVTOTCAPNR,DPVTOTCAPNR,DPVTOTCAPNR,2,"DPVTOTCAPNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(DPVTOTGENNR,DPVTOTGENNR,DPVTOTGENNR,DPVTOTGENNR,DPVTOTGENNR,2,"DPVTOTGENNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECP_SCRUB,ECP_SCRUB,ECP_SCRUB,ECP_SCRUB,ECP_SCRUB,2,"ECP_SCRUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          NUTSEC,        MNUMYR,        1,             1,             1,             1,             1,  &
          "UtilitySector", "MNUMYR",   "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECANSQZ,ECANSQZ,ECANSQZ,ECANSQZ,ECANSQZ,2,"ECANSQZ", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_PROV,    MNUMYR,        1,             1,             1,             1,             1,  &
          "CanadianSupplyRegion", "MNUMYR", "",       "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPC,ECDSPC,ECDSPC,ECDSPC,ECDSPC,2,"ECDSPC", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPC,ECDSPC,ECDSPC,ECDSPC,ECDSPC,2,"ECDSPC_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPE,ECDSPE,ECDSPE,ECDSPE,ECDSPE,2,"ECDSPE", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPE,ECDSPE,ECDSPE,ECDSPE,ECDSPE,2,"ECDSPE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPE_ALT,ECDSPE_ALT,ECDSPE_ALT,ECDSPE_ALT,ECDSPE_ALT,2,"ECDSPE_ALT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPE_ALT,ECDSPE_ALT,ECDSPE_ALT,ECDSPE_ALT,ECDSPE_ALT,2,"ECDSPE_ALT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPF,ECDSPF,ECDSPF,ECDSPF,ECDSPF,2,"ECDSPF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPF,ECDSPF,ECDSPF,ECDSPF,ECDSPF,2,"ECDSPF_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPF_ALT,ECDSPF_ALT,ECDSPF_ALT,ECDSPF_ALT,ECDSPF_ALT,2,"ECDSPF_ALT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECDSPF_ALT,ECDSPF_ALT,ECDSPF_ALT,ECDSPF_ALT,ECDSPF_ALT,2,"ECDSPF_ALT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECLEL,ECLEL,ECLEL,ECLEL,ECLEL,1,"ECLEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECMRUNCF,ECMRUNCF,ECMRUNCF,ECMRUNCF,ECMRUNCF,1,"ECMRUNCF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECP_MIN,ECP_MIN,ECP_MIN,ECP_MIN,ECP_MIN,1,"ECP_MIN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECPPRCFL,ECPPRCFL,ECPPRCFL,ECPPRCFL,ECPPRCFL,2,"ECPPRCFL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECPPRCNL,ECPPRCNL,ECPPRCNL,ECPPRCNL,ECPPRCNL,2,"ECPPRCNL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EDSEL,EDSEL,EDSEL,EDSEL,EDSEL,1,"EDSEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFDMAT,EFDMAT,EFDMAT,EFDMAT,EFDMAT,1,"EFDMAT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFDPRCFL,EFDPRCFL,EFDPRCFL,EFDPRCFL,EFDPRCFL,2,"EFDPRCFL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFDPRCNL,EFDPRCNL,EFDPRCNL,EFDPRCNL,EFDPRCNL,2,"EFDPRCNL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_CONT,EFD_CONT,EFD_CONT,EFD_CONT,EFD_CONT,4,"EFD_CONT", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, NDREG,         2,             MNUMYR,        1,             1,             1,  &
          "CoalSupplyCurve", "CoalDemandRegion", "Two", "MNUMYR",    "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_LG_DVLIM,EFD_LG_DVLIM,EFD_LG_DVLIM,EFD_LG_DVLIM,EFD_LG_DVLIM,3,"EFD_LG_DVLIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         NUTSEC,        MNUMYR,        1,             1,             1,             1,  &
          "CoalDemandRegion", "UtilitySector", "MNUMYR", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_SB_DVLIM,EFD_SB_DVLIM,EFD_SB_DVLIM,EFD_SB_DVLIM,EFD_SB_DVLIM,3,"EFD_SB_DVLIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         NUTSEC,        MNUMYR,        1,             1,             1,             1,  &
          "CoalDemandRegion", "UtilitySector", "MNUMYR", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_GRPS_F,EFD_GRPS_F,EFD_GRPS_F,EFD_GRPS_F,EFD_GRPS_F,1,"EFD_GRPS_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_GRPS_N,EFD_GRPS_N,EFD_GRPS_N,EFD_GRPS_N,EFD_GRPS_N,1,"EFD_GRPS_N", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_GW,EFD_GW,EFD_GW,EFD_GW,EFD_GW,5,"EFD_GW", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     EFD_D_CSS,     EFD_D_PROV,    MNUMYR,        1,             1,  &
          "Segment",    "Group",       "ImportStep",  "CanadianSupplyRegion", "MNUMYR", "",        "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_LCAR,EFD_LCAR,EFD_LCAR,EFD_LCAR,EFD_LCAR,1,"EFD_LCAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_LCAR,EFD_LCAR,EFD_LCAR,EFD_LCAR,EFD_LCAR,1,"EFD_LCAR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_MIN,EFD_MIN,EFD_MIN,EFD_MIN,EFD_MIN,1,"EFD_MIN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_D_DSP,EFD_D_DSP,EFD_D_DSP,EFD_D_DSP,EFD_D_DSP,1,"EFD_DSP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_D_RNW,EFD_D_RNW,EFD_D_RNW,EFD_D_RNW,EFD_D_RNW,1,"EFD_RNW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_D_DGN,EFD_D_DGN,EFD_D_DGN,EFD_D_DGN,EFD_D_DGN,1,"EFD_DGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ECP_D_RNW,ECP_D_RNW,ECP_D_RNW,ECP_D_RNW,ECP_D_RNW,1,"ECP_RNW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_PCAR,EFD_PCAR,EFD_PCAR,EFD_PCAR,EFD_PCAR,1,"EFD_PCAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_PCAR,EFD_PCAR,EFD_PCAR,EFD_PCAR,EFD_PCAR,1,"EFD_PCAR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_QCAR,EFD_QCAR,EFD_QCAR,EFD_QCAR,EFD_QCAR,1,"EFD_QCAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_QCAR,EFD_QCAR,EFD_QCAR,EFD_QCAR,EFD_QCAR,1,"EFD_QCAR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_RANK,EFD_RANK,EFD_RANK,EFD_RANK,EFD_RANK,1,"EFD_RANK", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, 1,             1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_Slice_ID,EFD_Slice_ID,EFD_Slice_ID,EFD_Slice_ID,EFD_Slice_ID,2,"EFD_Slice_ID", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXEFDSG,      MAXEFDB,       1,             1,             1,             1,             1,  &
          "Group",      "Segment",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EFD_TIER1_LIM,EFD_TIER1_LIM,EFD_TIER1_LIM,EFD_TIER1_LIM,EFD_TIER1_LIM,4,"EFD_TIER1_LIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     NDREG,         2,             MNUMYR,        1,             1,             1,  &
          "CoalSupplyCurve_Dom", "CoalDemandRegion", "Two", "MNUMYR", "",           "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EGFEL,EGFEL,EGFEL,EGFEL,EGFEL,1,"EGFEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ELEC_FLAG,ELEC_FLAG,ELEC_FLAG,ELEC_FLAG,ELEC_FLAG,1,"ELEC_FLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ELGENE,ELGENE,ELGENE,ELGENE,ELGENE,3,"ELGENE", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MVS,     EFD_D_MSP,     EMM_D_GRP,     1,             1,             1,             1,  &
          "SliceSorted", "Season",     "PlantGroup",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ELGENE,ELGENE,ELGENE,ELGENE,ELGENE,3,"ELGENE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MVS,     EFD_D_MSP,     EMM_D_GRP,     1,             1,             1,             1,  &
          "SliceSorted", "Season",     "PlantGroup",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMCMC,EMCMC,EMCMC,EMCMC,EMCMC,3,"EMCMC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMEL,EMEL,EMEL,EMEL,EMEL,3,"EMEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          4,             MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "Four",       "EmissionType", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMELBNK,EMELBNK,EMELBNK,EMELBNK,EMELBNK,2,"EMELBNK", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "MNUMYR",     "SO2Region",   "",            "",            "",            "",            "",  &
          "R4",iyr,.TRUE.)
       call AIMMS_TransArray_out_efd(EMEL_QHG,EMEL_QHG,EMEL_QHG,EMEL_QHG,EMEL_QHG,2,"EMEL_QHG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "nHGCODE",    "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMETAX,EMETAX,EMETAX,EMETAX,EMETAX,2,"EMETAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          15,            MNUMYR,        1,             1,             1,             1,             1,  &
          "Fifteen",    "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMINCC,EMINCC,EMINCC,EMINCC,EMINCC,3,"EMINCC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMISSIONS_GOAL,EMISSIONS_GOAL,EMISSIONS_GOAL,EMISSIONS_GOAL,EMISSIONS_GOAL,1,"EMISSIONS_GOAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMLIM,EMLIM,EMLIM,EMLIM,EMLIM,2,"EMLIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          4,             MNUMYR,        1,             1,             1,             1,             1,  &
          "Four",       "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMMBMDUAL,EMMBMDUAL,EMMBMDUAL,EMMBMDUAL,EMMBMDUAL,2,"EMMBMDUAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMMBMDUAL,EMMBMDUAL,EMMBMDUAL,EMMBMDUAL,EMMBMDUAL,2,"EMMBMDUAL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMNT,EMNT,EMNT,EMNT,EMNT,3,"EMNT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMRFNA,EMRFNA,EMRFNA,EMRFNA,EMRFNA,2,"EMRFNA", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "INOXP",      "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMRFSA,EMRFSA,EMRFSA,EMRFSA,EMRFSA,2,"EMRFSA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "MNUMYR",     "SO2Region",   "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMRSC,EMRSC,EMRSC,EMRSC,EMRSC,3,"EMRSC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EMTRC,EMTRC,EMTRC,EMTRC,EMTRC,3,"EMTRC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ENGEL,ENGEL,ENGEL,ENGEL,ENGEL,1,"ENGEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EPCAMP,EPCAMP,EPCAMP,EPCAMP,EPCAMP,1,"EPCAMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        1,             1,             1,             1,             1,             1,  &
          "FuelRegion", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EPCLMP,EPCLMP,EPCLMP,EPCLMP,EPCLMP,1,"EPCLMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        1,             1,             1,             1,             1,             1,  &
          "FuelRegion", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EPCSMP,EPCSMP,EPCSMP,EPCSMP,EPCSMP,1,"EPCSMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        1,             1,             1,             1,             1,             1,  &
          "FuelRegion", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EPGSMP,EPGSMP,EPGSMP,EPGSMP,EPGSMP,1,"EPGSMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        1,             1,             1,             1,             1,             1,  &
          "FuelRegion", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EPNOXPR,EPNOXPR,EPNOXPR,EPNOXPR,EPNOXPR,2,"EPNOXPR", &
          1,             1,                1,             1,             1,             1,             1,  &
          NOX_D_GRP,     MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "INOXP",      "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EPPOPM,EPPOPM,EPPOPM,EPPOPM,EPPOPM,1,"EPPOPM", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EPPOPR,EPPOPR,EPPOPR,EPPOPR,EPPOPR,1,"EPPOPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EPRPSPR,EPRPSPR,EPRPSPR,EPRPSPR,EPRPSPR,1,"EPRPSPR", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EPRPSPRR,EPRPSPRR,EPRPSPRR,EPRPSPRR,EPRPSPRR,2,"EPRPSPRR", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ERLEL,ERLEL,ERLEL,ERLEL,ERLEL,1,"ERLEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ERSEL,ERSEL,ERSEL,ERSEL,ERSEL,1,"ERSEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,1,"ETAX_FLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ETDIMERG,ETDIMERG,ETDIMERG,ETDIMERG,ETDIMERG,1,"ETDIMERG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ETDIMERG,ETDIMERG,ETDIMERG,ETDIMERG,ETDIMERG,1,"ETDIMERG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ETDMDERG,ETDMDERG,ETDMDERG,ETDMDERG,ETDMDERG,1,"ETDMDERG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ETDMDERG,ETDMDERG,ETDMDERG,ETDMDERG,ETDMDERG,1,"ETDMDERG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ETDMMERG,ETDMMERG,ETDMMERG,ETDMMERG,ETDMMERG,1,"ETDMMERG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ETDMMERG,ETDMMERG,ETDMMERG,ETDMMERG,ETDMMERG,1,"ETDMMERG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ETWDTH,ETWDTH,ETWDTH,ETWDTH,ETWDTH,3,"ETWDTH", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MVS,     EFD_D_MSP,     MNUMNR,        1,             1,             1,             1,  &
          "SliceSorted", "Season",     "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(EXPCI,EXPCI,EXPCI,EXPCI,EXPCI,2,"EXPCI", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FAC,FAC,FAC,FAC,FAC,3,"FAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MVS,     EFD_D_MSP,     MNUMNR,        1,             1,             1,             1,  &
          "SliceSorted", "Season",     "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FGD_FCTR,FGD_FCTR,FGD_FCTR,FGD_FCTR,FGD_FCTR,2,"FGD_FCTR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FLRG_HR_EFF,FLRG_HR_EFF,FLRG_HR_EFF,FLRG_HR_EFF,FLRG_HR_EFF,3,"FLRG_HR_EFF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    ECP_D_CAP,     11,            1,             1,             1,             1,  &
          "int_fuel_region_ALT1", "PlantType_ECP", "Eleven", "",     "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FLRG_HR_KNOTS,FLRG_HR_KNOTS,FLRG_HR_KNOTS,FLRG_HR_KNOTS,FLRG_HR_KNOTS,2,"FLRG_HR_KNOTS", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    ECP_D_CAP,     1,             1,             1,             1,             1,  &
          "int_fuel_region_ALT1", "PlantType_ECP", "", "",           "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FLRG_HR_LL,FLRG_HR_LL,FLRG_HR_LL,FLRG_HR_LL,FLRG_HR_LL,3,"FLRG_HR_LL", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    ECP_D_CAP,     11,            1,             1,             1,             1,  &
          "int_fuel_region_ALT1", "PlantType_ECP", "Eleven", "",     "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FLRG_VAL_45Q,FLRG_VAL_45Q,FLRG_VAL_45Q,FLRG_VAL_45Q,FLRG_VAL_45Q,2,"FLRG_VAL_45Q", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FLRG_VAL_45Q,FLRG_VAL_45Q,FLRG_VAL_45Q,FLRG_VAL_45Q,FLRG_VAL_45Q,2,"FLRG_VAL_45Q_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,2,"FLRG_VALUE", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,2,"FLRG_VALUE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FOS_CF_EFD,FOS_CF_EFD,FOS_CF_EFD,FOS_CF_EFD,FOS_CF_EFD,3,"FOS_CF_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(FR_OR_TRANCOST,FR_OR_TRANCOST,FR_OR_TRANCOST,FR_OR_TRANCOST,FR_OR_TRANCOST,3,"FR_OR_TRANCOST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        8,             MNUMYR,        1,             1,             1,             1,  &
          "FuelRegion", "OGSMRegionEX", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HG_CHOICE,HG_CHOICE,HG_CHOICE,HG_CHOICE,HG_CHOICE,1,"HG_CHOICE", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HG_CLASS,HG_CLASS,HG_CLASS,HG_CLASS,HG_CLASS,1,"HG_CLASS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HG_GRAMS_MWH,HG_GRAMS_MWH,HG_GRAMS_MWH,HG_GRAMS_MWH,HG_GRAMS_MWH,2,"HG_GRAMS_MWH", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPM_HG_CLS,    MNUMYR,        1,             1,             1,             1,             1,  &
          "MercuryClass", "MNUMYR",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HG_GRP,HG_GRP,HG_GRP,HG_GRP,HG_GRP,1,"HG_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         1,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "",      "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HG_INPUT,HG_INPUT,HG_INPUT,HG_INPUT,HG_INPUT,3,"HG_INPUT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPM_HG_CLS,    EPM_RANK,      MNUMYR,        1,             1,             1,             1,  &
          "MercuryClass", "EmissionRank", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HG_MEF,HG_MEF,HG_MEF,HG_MEF,HG_MEF,3,"HG_MEF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPM_HG_CLS,    EPM_RANK,      MNUMYR,        1,             1,             1,             1,  &
          "MercuryClass", "EmissionRank", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HG_MEFNC,HG_MEFNC,HG_MEFNC,HG_MEFNC,HG_MEFNC,2,"HG_MEFNC", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HG_OUTPUT,HG_OUTPUT,HG_OUTPUT,HG_OUTPUT,HG_OUTPUT,3,"HG_OUTPUT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPM_HG_CLS,    EPM_RANK,      MNUMYR,        1,             1,             1,             1,  &
          "MercuryClass", "EmissionRank", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HRTCLNR,HRTCLNR,HRTCLNR,HRTCLNR,HRTCLNR,3,"HRTCLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDRGG,         MNUMYR,        NCLUT1,        1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(HY_CF_EFD,HY_CF_EFD,HY_CF_EFD,HY_CF_EFD,HY_CF_EFD,3,"HY_CF_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(IT_WOP,IT_WOP,IT_WOP,IT_WOP,IT_WOP,2,"IT_WOP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        2,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "Two",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(JDSEL,JDSEL,JDSEL,JDSEL,JDSEL,1,"JDSEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(JGFELGR,JGFELGR,JGFELGR,JGFELGR,JGFELGR,1,"JGFELGR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(JRSEL,JRSEL,JRSEL,JRSEL,JRSEL,1,"JRSEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(KWH_DM_BY_RG,KWH_DM_BY_RG,KWH_DM_BY_RG,KWH_DM_BY_RG,KWH_DM_BY_RG,2,"KWH_DM_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(KWH_IM_BY_RG,KWH_IM_BY_RG,KWH_IM_BY_RG,KWH_IM_BY_RG,KWH_IM_BY_RG,2,"KWH_IM_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(LINELOSS,LINELOSS,LINELOSS,LINELOSS,LINELOSS,1,"LINELOSS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MAP_ECNTP_EFD_GRPS,MAP_ECNTP_EFD_GRPS,MAP_ECNTP_EFD_GRPS,MAP_ECNTP_EFD_GRPS,MAP_ECNTP_EFD_GRPS,2,"MAP_ECNTP_EFD_GRPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MPG,     MNUMNR,        1,             1,             1,             1,             1,  &
          "DispPlantGroup", "SupplyRegion", "",       "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MARKET_FLAG,MARKET_FLAG,MARKET_FLAG,MARKET_FLAG,MARKET_FLAG,1,"MARKET_FLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MIN_EMF,MIN_EMF,MIN_EMF,MIN_EMF,MIN_EMF,2,"MIN_EMF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MP_BM_BT,MP_BM_BT,MP_BM_BT,MP_BM_BT,MP_BM_BT,1,"MP_BM_BT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MP_BM_CM,MP_BM_CM,MP_BM_CM,MP_BM_CM,MP_BM_CM,1,"MP_BM_CM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MP_BM_ET,MP_BM_ET,MP_BM_ET,MP_BM_ET,MP_BM_ET,1,"MP_BM_ET", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MP_BM_H2,MP_BM_H2,MP_BM_H2,MP_BM_H2,MP_BM_H2,1,"MP_BM_H2", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MP_BM_IN,MP_BM_IN,MP_BM_IN,MP_BM_IN,MP_BM_IN,1,"MP_BM_IN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MP_BM_PW,MP_BM_PW,MP_BM_PW,MP_BM_PW,MP_BM_PW,1,"MP_BM_PW", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MP_BM_RS,MP_BM_RS,MP_BM_RS,MP_BM_RS,MP_BM_RS,1,"MP_BM_RS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MUST_STORE,MUST_STORE,MUST_STORE,MUST_STORE,MUST_STORE,2,"MUST_STORE", &
          1,             1,                1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYR",      "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(MX_NCOALS,MX_NCOALS,MX_NCOALS,MX_NCOALS,MX_NCOALS,1,"MX_NCOALS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NET_PT_STORAGE_SR_EFD,NET_PT_STORAGE_SR_EFD,NET_PT_STORAGE_SR_EFD,NET_PT_STORAGE_SR_EFD,NET_PT_STORAGE_SR_EFD,4,"NET_PT_STORAGE_SR_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXEFDB,       MAXEFDSG,      MNUMNR,        MNUMYR,        1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "MNUMYR", "",           "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NET_STORAGE_LOAD_EFD,NET_STORAGE_LOAD_EFD,NET_STORAGE_LOAD_EFD,NET_STORAGE_LOAD_EFD,NET_STORAGE_LOAD_EFD,4,"NET_STORAGE_LOAD_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXEFDB,       MAXEFDSG,      MNUMNR,        MNUMYR,        1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "MNUMYR", "",           "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NET_STORAGE_SR_EFD,NET_STORAGE_SR_EFD,NET_STORAGE_SR_EFD,NET_STORAGE_SR_EFD,NET_STORAGE_SR_EFD,4,"NET_STORAGE_SR_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXEFDB,       MAXEFDSG,      MNUMNR,        MNUMYR,        1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "MNUMYR", "",           "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NET_XPORT_EFD,NET_XPORT_EFD,NET_XPORT_EFD,NET_XPORT_EFD,NET_XPORT_EFD,3,"NET_XPORT_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NET_XPORT_EFD,NET_XPORT_EFD,NET_XPORT_EFD,NET_XPORT_EFD,NET_XPORT_EFD,3,"NET_XPORT_EFD_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NMARCST,NMARCST,NMARCST,NMARCST,NMARCST,4,"NMARCST", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, EFD_D_MSP,     EFD_D_MVS,     MNUMYR,        1,             1,             1,  &
          "SupplyRegionAll_ALT1", "Season", "SliceSorted", "MNUMYR", "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NMARCST,NMARCST,NMARCST,NMARCST,NMARCST,4,"NMARCST_pass", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, EFD_D_MSP,     EFD_D_MVS,     MNUMYR,        1,             1,             1,  &
          "SupplyRegionAll_ALT1", "Season", "SliceSorted", "MNUMYR", "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NM_BM_SUP_STP,NM_BM_SUP_STP,NM_BM_SUP_STP,NM_BM_SUP_STP,NM_BM_SUP_STP,1,"NM_BM_SUP_STP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NO_CCS_PLNT_NDX,NO_CCS_PLNT_NDX,NO_CCS_PLNT_NDX,NO_CCS_PLNT_NDX,NO_CCS_PLNT_NDX,1,"NO_CCS_PLNT_NDX", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NOX_EFD,NOX_EFD,NOX_EFD,NOX_EFD,NOX_EFD,2,"NOX_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     NOX_D_GRP,     1,             1,             1,             1,             1,  &
          "Season",     "INOXP",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NOX_GRP,NOX_GRP,NOX_GRP,NOX_GRP,NOX_GRP,1,"NOX_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NOX_NEW,NOX_NEW,NOX_NEW,NOX_NEW,NOX_NEW,2,"NOX_NEW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_BTP,     ECP_D_CAP,     1,             1,             1,             1,             1,  &
          "BoilerType", "PlantType_ECP", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NOX_SHR_BY_CLRG,NOX_SHR_BY_CLRG,NOX_SHR_BY_CLRG,NOX_SHR_BY_CLRG,NOX_SHR_BY_CLRG,2,"NOX_SHR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     NOX_D_GRP,     1,             1,             1,             1,             1,  &
          "nHGCODE",    "INOXP",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NUC_CF_EFD,NUC_CF_EFD,NUC_CF_EFD,NUC_CF_EFD,NUC_CF_EFD,3,"NUC_CF_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NUM_ACSS,NUM_ACSS,NUM_ACSS,NUM_ACSS,NUM_ACSS,1,"NUM_ACSS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NUM_HG_GRP,NUM_HG_GRP,NUM_HG_GRP,NUM_HG_GRP,NUM_HG_GRP,1,"NUM_HG_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NUM_SO2_GRP,NUM_SO2_GRP,NUM_SO2_GRP,NUM_SO2_GRP,NUM_SO2_GRP,1,"NUM_SO2_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NUTSEC,NUTSEC,NUTSEC,NUTSEC,NUTSEC,1,"NUTSEC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NW_COAL,NW_COAL,NW_COAL,NW_COAL,NW_COAL,1,"NW_COAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(OGCO2AVL,OGCO2AVL,OGCO2AVL,OGCO2AVL,OGCO2AVL,3,"OGCO2AVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             13,            MNUMYR,        1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "Thirteen", "MNUMYR", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(OGCO2PRC,OGCO2PRC,OGCO2PRC,OGCO2PRC,OGCO2PRC,3,"OGCO2PRC", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             13,            MNUMYR,        1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "Thirteen", "MNUMYR", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(OGCO2PUR2,OGCO2PUR2,OGCO2PUR2,OGCO2PUR2,OGCO2PUR2,3,"OGCO2PUR2", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             13,            MNUMYR,        1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "Thirteen", "MNUMYR", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(OGCO2QEM,OGCO2QEM,OGCO2QEM,OGCO2QEM,OGCO2QEM,2,"OGCO2QEM", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             MNUMYR,        1,             1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "MNUMYR", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(OGCO2QEM,OGCO2QEM,OGCO2QEM,OGCO2QEM,OGCO2QEM,2,"OGCO2QEM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             MNUMYR,        1,             1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "MNUMYR", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(OGCO2TAR,OGCO2TAR,OGCO2TAR,OGCO2TAR,OGCO2TAR,2,"OGCO2TAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             8,             1,             1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "OGSMRegionEX", "",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(OGWPRNG,OGWPRNG,OGWPRNG,OGWPRNG,OGWPRNG,2,"OGWPRNG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMOR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "OGSMReg",    "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PARM_A,PARM_A,PARM_A,PARM_A,PARM_A,2,"PARM_A", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PARM_B,PARM_B,PARM_B,PARM_B,PARM_B,2,"PARM_B", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PARM_C,PARM_C,PARM_C,PARM_C,PARM_C,2,"PARM_C", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PARM_D,PARM_D,PARM_D,PARM_D,PARM_D,2,"PARM_D", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PBMPWCL,PBMPWCL,PBMPWCL,PBMPWCL,PBMPWCL,3,"PBMPWCL", &
          0,             0,             1,             1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR,        1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PBMPWCL,PBMPWCL,PBMPWCL,PBMPWCL,PBMPWCL,3,"PBMPWCL_pass", &
          0,             0,             1,             1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR,        1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PERMIT_FLAG,PERMIT_FLAG,PERMIT_FLAG,PERMIT_FLAG,PERMIT_FLAG,1,"PERMIT_FLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PLNT_EMF,PLNT_EMF,PLNT_EMF,PLNT_EMF,PLNT_EMF,2,"PLNT_EMF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PTHRESH1,PTHRESH1,PTHRESH1,PTHRESH1,PTHRESH1,3,"PTHRESH1", &
          1,             1,                 1,                 1,             1,             1,             1,  &
          MNUMYR,        MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegionAll", "SupplyRegionAll_ALT1", "", "",          "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(PTHRESH2,PTHRESH2,PTHRESH2,PTHRESH2,PTHRESH2,3,"PTHRESH2", &
          1,             1,                 1,                 1,             1,             1,             1,  &
          MNUMYR,        MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegionAll", "SupplyRegionAll_ALT1", "", "",          "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(QBMBTCL,QBMBTCL,QBMBTCL,QBMBTCL,QBMBTCL,3,"QBMBTCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(QBMCMCL,QBMCMCL,QBMCMCL,QBMCMCL,QBMCMCL,3,"QBMCMCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(QBMETCL,QBMETCL,QBMETCL,QBMETCL,QBMETCL,3,"QBMETCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(QBMH2CL,QBMH2CL,QBMH2CL,QBMH2CL,QBMH2CL,3,"QBMH2CL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(QBMINCL,QBMINCL,QBMINCL,QBMINCL,QBMINCL,3,"QBMINCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(QBMPWCL,QBMPWCL,QBMPWCL,QBMPWCL,QBMPWCL,3,"QBMPWCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(QBMPWCL,QBMPWCL,QBMPWCL,QBMPWCL,QBMPWCL,3,"QBMPWCL_pass", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(QBMRSCL,QBMRSCL,QBMRSCL,QBMRSCL,QBMRSCL,3,"QBMRSCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RCLCLNR,RCLCLNR,RCLCLNR,RCLCLNR,RCLCLNR,3,"RCLCLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDRGG,         MNUMYR,        NCLUT1,        1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIUTIL,RGGIUTIL,RGGIUTIL,RGGIUTIL,RGGIUTIL,1,"RGGIUTIL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIUTIL,RGGIUTIL,RGGIUTIL,RGGIUTIL,RGGIUTIL,1,"RGGIUTIL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIOAVL,RGGIOAVL,RGGIOAVL,RGGIOAVL,RGGIOAVL,1,"RGGIOAVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIOAVL,RGGIOAVL,RGGIOAVL,RGGIOAVL,RGGIOAVL,1,"RGGIOAVL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIOUSE,RGGIOUSE,RGGIOUSE,RGGIOUSE,RGGIOUSE,1,"RGGIOUSE", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIOUSE,RGGIOUSE,RGGIOUSE,RGGIOUSE,RGGIOUSE,1,"RGGIOUSE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIRAVL,RGGIRAVL,RGGIRAVL,RGGIRAVL,RGGIRAVL,1,"RGGIRAVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIRAVL,RGGIRAVL,RGGIRAVL,RGGIRAVL,RGGIRAVL,1,"RGGIRAVL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIRUSE,RGGIRUSE,RGGIRUSE,RGGIRUSE,RGGIRUSE,1,"RGGIRUSE", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIRUSE,RGGIRUSE,RGGIRUSE,RGGIRUSE,RGGIRUSE,1,"RGGIRUSE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIEAVL,RGGIEAVL,RGGIEAVL,RGGIEAVL,RGGIEAVL,1,"RGGIEAVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIEAVL,RGGIEAVL,RGGIEAVL,RGGIEAVL,RGGIEAVL,1,"RGGIEAVL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIEUSE,RGGIEUSE,RGGIEUSE,RGGIEUSE,RGGIEUSE,1,"RGGIEUSE", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(RGGIEUSE,RGGIEUSE,RGGIEUSE,RGGIEUSE,RGGIEUSE,1,"RGGIEUSE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SCALPR,SCALPR,SCALPR,SCALPR,SCALPR,1,"SCALPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SCR_FCTR,SCR_FCTR,SCR_FCTR,SCR_FCTR,SCR_FCTR,2,"SCR_FCTR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SO2_SHR_ALW_GRP,SO2_SHR_ALW_GRP,SO2_SHR_ALW_GRP,SO2_SHR_ALW_GRP,SO2_SHR_ALW_GRP,2,"SO2_SHR_ALW_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "MNUMYR",     "SO2Region",   "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SO2_SHR_BY_CLRG,SO2_SHR_BY_CLRG,SO2_SHR_BY_CLRG,SO2_SHR_BY_CLRG,SO2_SHR_BY_CLRG,2,"SO2_SHR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "nHGCODE",    "SO2Region",   "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SO2_SHR_BY_OLRG,SO2_SHR_BY_OLRG,SO2_SHR_BY_OLRG,SO2_SHR_BY_OLRG,SO2_SHR_BY_OLRG,2,"SO2_SHR_BY_OLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "CensusRegion", "SO2Region", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SPNGELGR,SPNGELGR,SPNGELGR,SPNGELGR,SPNGELGR,3,"SPNGELGR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NNGEM,         MNUMYR,        3,             1,             1,             1,             1,  &
          "GasRegion",  "MNUMYR",      "Three",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SP_ACHBYECP,SP_ACHBYECP,SP_ACHBYECP,SP_ACHBYECP,SP_ACHBYECP,4,"SP_ACHBYECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        ECP_D_CAP,     1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "PlantType_ECP", "",    "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SP_ACHBYECP,SP_ACHBYECP,SP_ACHBYECP,SP_ACHBYECP,SP_ACHBYECP,4,"SP_ACHBYECP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        ECP_D_CAP,     1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "PlantType_ECP", "",    "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SP_RES_ACH,SP_RES_ACH,SP_RES_ACH,SP_RES_ACH,SP_RES_ACH,3,"SP_RES_ACH", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SP_RES_ACH,SP_RES_ACH,SP_RES_ACH,SP_RES_ACH,SP_RES_ACH,3,"SP_RES_ACH_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SP_RES_DUAL,SP_RES_DUAL,SP_RES_DUAL,SP_RES_DUAL,SP_RES_DUAL,3,"SP_RES_DUAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SP_RES_DUAL,SP_RES_DUAL,SP_RES_DUAL,SP_RES_DUAL,SP_RES_DUAL,3,"SP_RES_DUAL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SP_RES_REQ,SP_RES_REQ,SP_RES_REQ,SP_RES_REQ,SP_RES_REQ,3,"SP_RES_REQ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SP_RES_REQ,SP_RES_REQ,SP_RES_REQ,SP_RES_REQ,SP_RES_REQ,3,"SP_RES_REQ_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SRPOOL,SRPOOL,SRPOOL,SRPOOL,SRPOOL,2,"SRPOOL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SRPOOL,SRPOOL,SRPOOL,SRPOOL,SRPOOL,2,"SRPOOL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_CREDIT,SR_CREDIT,SR_CREDIT,SR_CREDIT,SR_CREDIT,1,"SR_CREDIT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_INT,SR_INT,SR_INT,SR_INT,SR_INT,2,"SR_INT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType_ECP", "SupplyRegion", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_INT_REQ,SR_INT_REQ,SR_INT_REQ,SR_INT_REQ,SR_INT_REQ,3,"SR_INT_REQ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_INT_REQ,SR_INT_REQ,SR_INT_REQ,SR_INT_REQ,SR_INT_REQ,3,"SR_INT_REQ_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
          "Group",      "SliceSorted", "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_MAX_LF,SR_MAX_LF,SR_MAX_LF,SR_MAX_LF,SR_MAX_LF,1,"SR_MAX_LF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_MIN_CF,SR_MIN_CF,SR_MIN_CF,SR_MIN_CF,SR_MIN_CF,1,"SR_MIN_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_MIN_LF,SR_MIN_LF,SR_MIN_LF,SR_MIN_LF,SR_MIN_LF,1,"SR_MIN_LF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_RQMT_DIFF,SR_RQMT_DIFF,SR_RQMT_DIFF,SR_RQMT_DIFF,SR_RQMT_DIFF,1,"SR_RQMT_DIFF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_RQMT_HGHT,SR_RQMT_HGHT,SR_RQMT_HGHT,SR_RQMT_HGHT,SR_RQMT_HGHT,1,"SR_RQMT_HGHT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(SR_TRAN_CREDIT,SR_TRAN_CREDIT,SR_TRAN_CREDIT,SR_TRAN_CREDIT,SR_TRAN_CREDIT,1,"SR_TRAN_CREDIT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ST_RNW_BND,ST_RNW_BND,ST_RNW_BND,ST_RNW_BND,ST_RNW_BND,2,"ST_RNW_BND", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ST_RNW_SHR,ST_RNW_SHR,ST_RNW_SHR,ST_RNW_SHR,ST_RNW_SHR,3,"ST_RNW_SHR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "PlantType_ECP", "SupplyRegion", "MNUMYR",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,2,"ST_RPS_EMM_P", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ST_RPS_SW,ST_RPS_SW,ST_RPS_SW,ST_RPS_SW,ST_RPS_SW,1,"ST_RPS_SW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TAX_FLAG,TAX_FLAG,TAX_FLAG,TAX_FLAG,TAX_FLAG,1,"TAX_FLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TMPMBTU,TMPMBTU,TMPMBTU,TMPMBTU,TMPMBTU,1,"TMPMBTU", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TnS_Costs,TnS_Costs,TnS_Costs,TnS_Costs,TnS_Costs,2,"TnS_Costs", &
          0,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion_SUP", "MNUMYR",  "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TRANRULE1,TRANRULE1,TRANRULE1,TRANRULE1,TRANRULE1,1,"TRANRULE1", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TRANRULE2,TRANRULE2,TRANRULE2,TRANRULE2,TRANRULE2,1,"TRANRULE2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TSO2_LIM_BY_CLRG,TSO2_LIM_BY_CLRG,TSO2_LIM_BY_CLRG,TSO2_LIM_BY_CLRG,TSO2_LIM_BY_CLRG,1,"TSO2_LIM_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         1,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TSO2_LM1_BY_CLRG,TSO2_LM1_BY_CLRG,TSO2_LM1_BY_CLRG,TSO2_LM1_BY_CLRG,TSO2_LM1_BY_CLRG,1,"TSO2_LM1_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         1,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TSO2_OSH_BY_OLCL,TSO2_OSH_BY_OLCL,TSO2_OSH_BY_OLCL,TSO2_OSH_BY_OLCL,TSO2_OSH_BY_OLCL,3,"TSO2_OSH_BY_OLCL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        NDREG,         MX_SO2_TRAN,   1,             1,             1,             1,  &
          "CensusRegion", "CoalDemandRegion", "SO2_Transport", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TSO2_SHR_BY_CLRG,TSO2_SHR_BY_CLRG,TSO2_SHR_BY_CLRG,TSO2_SHR_BY_CLRG,TSO2_SHR_BY_CLRG,2,"TSO2_SHR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MX_SO2_TRAN,   1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "SO2_Transport", "",    "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TSO2_VR1_BY_CLRG,TSO2_VR1_BY_CLRG,TSO2_VR1_BY_CLRG,TSO2_VR1_BY_CLRG,TSO2_VR1_BY_CLRG,1,"TSO2_VR1_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         1,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TSO2_VR_BY_CLRG,TSO2_VR_BY_CLRG,TSO2_VR_BY_CLRG,TSO2_VR_BY_CLRG,TSO2_VR_BY_CLRG,1,"TSO2_VR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TSO2_YR_BY_CLRG,TSO2_YR_BY_CLRG,TSO2_YR_BY_CLRG,TSO2_YR_BY_CLRG,TSO2_YR_BY_CLRG,1,"TSO2_YR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(TSPMBTU,TSPMBTU,TSPMBTU,TSPMBTU,TSPMBTU,1,"TSPMBTU", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UCARPRC,UCARPRC,UCARPRC,UCARPRC,UCARPRC,2,"UCARPRC", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UCARPRC,UCARPRC,UCARPRC,UCARPRC,UCARPRC,2,"UCARPRC_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UCL_PAC,UCL_PAC,UCL_PAC,UCL_PAC,UCL_PAC,1,"UCL_PAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ACSS,       1,             1,             1,             1,             1,             1,  &
          "numACI",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UCL_QAC,UCL_QAC,UCL_QAC,UCL_QAC,UCL_QAC,1,"UCL_QAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ACSS,       1,             1,             1,             1,             1,             1,  &
          "numACI",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UESTYR,UESTYR,UESTYR,UESTYR,UESTYR,1,"UESTYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFACP2,UFACP2,UFACP2,UFACP2,UFACP2,1,"UFACP2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFACPS,UFACPS,UFACPS,UFACPS,UFACPS,1,"UFACPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFLCLNR,UFLCLNR,UFLCLNR,UFLCLNR,UFLCLNR,3,"UFLCLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Two",        "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFLDGNR,UFLDGNR,UFLDGNR,UFLDGNR,UFLDGNR,3,"UFLDGNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Two",        "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFLGCNR,UFLGCNR,UFLGCNR,UFLGCNR,UFLGCNR,3,"UFLGCNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Two",        "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFLGFNR,UFLGFNR,UFLGFNR,UFLGFNR,UFLGFNR,3,"UFLGFNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Two",        "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFLGINR,UFLGINR,UFLGINR,UFLGINR,UFLGINR,3,"UFLGINR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Two",        "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFRCAR,UFRCAR,UFRCAR,UFRCAR,UFRCAR,2,"UFRCAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFRHG,UFRHG,UFRHG,UFRHG,UFRHG,2,"UFRHG", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFRSO2,UFRSO2,UFRSO2,UFRSO2,UFRSO2,2,"UFRSO2", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UGNCLNR,UGNCLNR,UGNCLNR,UGNCLNR,UGNCLNR,3,"UGNCLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Two",        "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UGNGCNR,UGNGCNR,UGNGCNR,UGNGCNR,UGNGCNR,3,"UGNGCNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Two",        "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UGNGFNR,UGNGFNR,UGNGFNR,UGNGFNR,UGNGFNR,3,"UGNGFNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Two",        "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UGNGINR,UGNGINR,UGNGINR,UGNGINR,UGNGINR,3,"UGNGINR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Two",        "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_45Q,UG_45Q,UG_45Q,UG_45Q,UG_45Q,1,"UG_45Q", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_ECPt,UG_ECPt,UG_ECPt,UG_ECPt,UG_ECPt,1,"UG_ECPt", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_EFDt,UG_EFDt,UG_EFDt,UG_EFDt,UG_EFDt,1,"UG_EFDt", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_EMM_RG,UG_EMM_RG,UG_EMM_RG,UG_EMM_RG,UG_EMM_RG,1,"UG_EMM_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_FL_RG,UG_FL_RG,UG_FL_RG,UG_FL_RG,UG_FL_RG,1,"UG_FL_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_FOR,UG_FOR,UG_FOR,UG_FOR,UG_FOR,1,"UG_FOR", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_GCF,UG_GCF,UG_GCF,UG_GCF,UG_GCF,3,"UG_GCF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     M_EFD_GRPS,    1,             1,             1,             1,  &
          "Segment",    "Group",       "PlantGroupOrd", "",          "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_GSUB,UG_GSUB,UG_GSUB,UG_GSUB,UG_GSUB,1,"UG_GSUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_HTRT,UG_HTRT,UG_HTRT,UG_HTRT,UG_HTRT,2,"UG_HTRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     M_EFD_GRPS,    1,             1,             1,             1,             1,  &
          "Season",     "PlantGroupOrd", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_LFR,UG_LFR,UG_LFR,UG_LFR,UG_LFR,1,"UG_LFR", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UGNOCCS,UGNOCCS,UGNOCCS,UGNOCCS,UGNOCCS,1,"UGNOCCS", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_MRUN,UG_MRUN,UG_MRUN,UG_MRUN,UG_MRUN,1,"UG_MRUN", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_NOXC,UG_NOXC,UG_NOXC,UG_NOXC,UG_NOXC,3,"UG_NOXC", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     NOX_D_GRP,     M_EFD_GRPS,    1,             1,             1,             1,  &
          "Season",     "INOXP",       "PlantGroupOrd", "",          "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_OMR,UG_OMR,UG_OMR,UG_OMR,UG_OMR,1,"UG_OMR", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_PMR,UG_PMR,UG_PMR,UG_PMR,UG_PMR,1,"UG_PMR", &
          1,             1,             1,             1,             1,             1,             1,  &
          M_EFD_GRPS,    1,             1,             1,             1,             1,             1,  &
          "PlantGroupOrd", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_SCF,UG_SCF,UG_SCF,UG_SCF,UG_SCF,2,"UG_SCF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     M_EFD_GRPS,    1,             1,             1,             1,             1,  &
          "Season",     "PlantGroupOrd", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UHBSYR,UHBSYR,UHBSYR,UHBSYR,UHBSYR,1,"UHBSYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIANC,UIANC,UIANC,UIANC,UIANC,1,"UIANC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIBMS,UIBMS,UIBMS,UIBMS,UIBMS,1,"UIBMS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UICAS,UICAS,UICAS,UICAS,UICAS,1,"UICAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UICNU,UICNU,UICNU,UICNU,UICNU,1,"UICNU", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIDGB,UIDGB,UIDGB,UIDGB,UIDGB,1,"UIDGB", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIDGP,UIDGP,UIDGP,UIDGP,UIDGP,1,"UIDGP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIDIS,UIDIS,UIDIS,UIDIS,UIDIS,1,"UIDIS", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     1,             1,             1,             1,             1,             1,  &
          "FuelType",   "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIDS,UIDS,UIDS,UIDS,UIDS,1,"UIDS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIFCG,UIFCG,UIFCG,UIFCG,UIFCG,1,"UIFCG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIGAS,UIGAS,UIGAS,UIGAS,UIGAS,1,"UIGAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     1,             1,             1,             1,             1,             1,  &
          "FuelType",   "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIGC,UIGC,UIGC,UIGC,UIGC,1,"UIGC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIGF,UIGF,UIGF,UIGF,UIGF,1,"UIGF", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIHYC,UIHYC,UIHYC,UIHYC,UIHYC,1,"UIHYC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIHYR,UIHYR,UIHYR,UIHYR,UIHYR,1,"UIHYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIRES,UIRES,UIRES,UIRES,UIRES,1,"UIRES", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     1,             1,             1,             1,             1,             1,  &
          "FuelType",   "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIRH,UIRH,UIRH,UIRH,UIRH,1,"UIRH", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIRL,UIRL,UIRL,UIRL,UIRL,1,"UIRL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UISMR,UISMR,UISMR,UISMR,UISMR,1,"UISMR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UIWD,UIWD,UIWD,UIWD,UIWD,1,"UIWD", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(USW_GRD,USW_GRD,USW_GRD,USW_GRD,USW_GRD,1,"USW_GRD", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPRNWBAS,UPRNWBAS,UPRNWBAS,UPRNWBAS,UPRNWBAS,1,"UPRNWBAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ULBMCST,ULBMCST,ULBMCST,ULBMCST,ULBMCST,1,"ULBMCST", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ULBMCST,ULBMCST,ULBMCST,ULBMCST,ULBMCST,1,"ULBMCST_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ULHTRT_EFD,ULHTRT_EFD,ULHTRT_EFD,ULHTRT_EFD,ULHTRT_EFD,2,"ULHTRT_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ULMRCST,ULMRCST,ULMRCST,ULMRCST,ULMRCST,1,"ULMRCST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ULMRCST,ULMRCST,ULMRCST,ULMRCST,ULMRCST,1,"ULMRCST_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ULTGEN,ULTGEN,ULTGEN,ULTGEN,ULTGEN,1,"ULTGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ULTGEN,ULTGEN,ULTGEN,ULTGEN,ULTGEN,1,"ULTGEN_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ULVINT,ULVINT,ULVINT,ULVINT,ULVINT,1,"ULVINT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPAVLYR,UPAVLYR,UPAVLYR,UPAVLYR,UPAVLYR,1,"UPAVLYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPCRVSIZ,UPCRVSIZ,UPCRVSIZ,UPCRVSIZ,UPCRVSIZ,1,"UPCRVSIZ", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPCRVSTP,UPCRVSTP,UPCRVSTP,UPCRVSTP,UPCRVSTP,1,"UPCRVSTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPEFDT,UPEFDT,UPEFDT,UPEFDT,UPEFDT,1,"UPEFDT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPFUEL,UPFUEL,UPFUEL,UPFUEL,UPFUEL,2,"UPFUEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPFUEL,UPFUEL,UPFUEL,UPFUEL,UPFUEL,2,"UPFUEL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPNCAR,UPNCAR,UPNCAR,UPNCAR,UPNCAR,2,"UPNCAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPPCEF,UPPCEF,UPPCEF,UPPCEF,UPPCEF,1,"UPPCEF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPPCEF_MIN,UPPCEF_MIN,UPPCEF_MIN,UPPCEF_MIN,UPPCEF_MIN,1,"UPPCEF_MIN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPPCFB,UPPCFB,UPPCFB,UPPCFB,UPPCFB,2,"UPPCFB", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     2,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "Two",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPRNWBND,UPRNWBND,UPRNWBND,UPRNWBND,UPRNWBND,1,"UPRNWBND", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPRNWBNDR,UPRNWBNDR,UPRNWBNDR,UPRNWBNDR,UPRNWBNDR,2,"UPRNWBNDR", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPRNWEXG,UPRNWEXG,UPRNWEXG,UPRNWEXG,UPRNWEXG,1,"UPRNWEXG", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPRNWEXGR,UPRNWEXGR,UPRNWEXGR,UPRNWEXGR,UPRNWEXGR,2,"UPRNWEXGR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType_ECP", "SupplyRegion", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPRNWREG,UPRNWREG,UPRNWREG,UPRNWREG,UPRNWREG,1,"UPRNWREG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPRNWSHR,UPRNWSHR,UPRNWSHR,UPRNWSHR,UPRNWSHR,1,"UPRNWSHR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPRNWSHRR,UPRNWSHRR,UPRNWSHRR,UPRNWSHRR,UPRNWSHRR,2,"UPRNWSHRR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType_ECP", "SupplyRegion", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPSTYR,UPSTYR,UPSTYR,UPSTYR,UPSTYR,1,"UPSTYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPTTYP,UPTTYP,UPTTYP,UPTTYP,UPTTYP,1,"UPTTYP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType_ECP", "",         "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPTXRT,UPTXRT,UPTXRT,UPTXRT,UPTXRT,1,"UPTXRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPWDCFR,UPWDCFR,UPWDCFR,UPWDCFR,UPWDCFR,2,"UPWDCFR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     NDREG,         1,             1,             1,             1,             1,  &
          "DispatchableECP", "CoalDemandRegion", "",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UP_GCF,UP_GCF,UP_GCF,UP_GCF,UP_GCF,3,"UP_GCF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     EMM_D_GRP,     1,             1,             1,             1,  &
          "Segment",    "Group",       "PlantGroup",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UP_SCF,UP_SCF,UP_SCF,UP_SCF,UP_SCF,2,"UP_SCF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     EMM_D_GRP,     1,             1,             1,             1,             1,  &
          "Season",     "PlantGroup",  "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(URGTCFA,URGTCFA,URGTCFA,URGTCFA,URGTCFA,1,"URGTCFA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(URHYCFA,URHYCFA,URHYCFA,URHYCFA,URHYCFA,1,"URHYCFA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(URNCCFA,URNCCFA,URNCCFA,URNCCFA,URNCCFA,1,"URNCCFA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(URSOCFA,URSOCFA,URSOCFA,URSOCFA,URSOCFA,1,"URSOCFA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(URWNCFA,URWNCFA,URWNCFA,URWNCFA,URWNCFA,1,"URWNCFA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,2,"URNCSTEX_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "Season",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,2,"URNCSTIM_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "Season",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(USW_CAMR,USW_CAMR,USW_CAMR,USW_CAMR,USW_CAMR,1,"USW_CAMR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(USW_CAR,USW_CAR,USW_CAR,USW_CAR,USW_CAR,1,"USW_CAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(USW_ECPCF,USW_ECPCF,USW_ECPCF,USW_ECPCF,USW_ECPCF,1,"USW_ECPCF", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(USW_HG,USW_HG,USW_HG,USW_HG,USW_HG,1,"USW_HG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTCNSTSL,UTCNSTSL,UTCNSTSL,UTCNSTSL,UTCNSTSL,4,"UTCNSTSL", &
          1,             1,             1,                 1,                 1,             1,             1,  &
          EFD_D_MSP,     EFD_D_MVS,     MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,  &
          "Season",     "SliceSorted", "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",          "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTCNSTSL,UTCNSTSL,UTCNSTSL,UTCNSTSL,UTCNSTSL,4,"UTCNSTSL_pass", &
          1,             1,             1,                 1,                 1,             1,             1,  &
          EFD_D_MSP,     EFD_D_MVS,     MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,  &
          "Season",     "SliceSorted", "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",          "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTCO2QEM,UTCO2QEM,UTCO2QEM,UTCO2QEM,UTCO2QEM,2,"UTCO2QEM", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             MNUMYR,        1,             1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "MNUMYR", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTCO2QEM,UTCO2QEM,UTCO2QEM,UTCO2QEM,UTCO2QEM,2,"UTCO2QEM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             MNUMYR,        1,             1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "MNUMYR", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTECON,UTECON,UTECON,UTECON,UTECON,2,"UTECON", &
          1,                 1,                 1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
          "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTECON,UTECON,UTECON,UTECON,UTECON,2,"UTECON_pass", &
          1,                 1,                 1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
          "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTECONSL,UTECONSL,UTECONSL,UTECONSL,UTECONSL,4,"UTECONSL", &
          1,             1,             1,                 1,                 1,             1,             1,  &
          EFD_D_MSP,     EFD_D_MVS,     MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,  &
          "Season",     "SliceSorted", "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",          "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTECONSL,UTECONSL,UTECONSL,UTECONSL,UTECONSL,4,"UTECONSL_pass", &
          1,             1,             1,                 1,                 1,             1,             1,  &
          EFD_D_MSP,     EFD_D_MVS,     MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,  &
          "Season",     "SliceSorted", "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",          "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTEXDE,UTEXDE,UTEXDE,UTEXDE,UTEXDE,2,"UTEXDE", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTEXDE,UTEXDE,UTEXDE,UTEXDE,UTEXDE,2,"UTEXDE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTEXME,UTEXME,UTEXME,UTEXME,UTEXME,2,"UTEXME", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTEXME,UTEXME,UTEXME,UTEXME,UTEXME,2,"UTEXME_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTHGHT,UTHGHT,UTHGHT,UTHGHT,UTHGHT,3,"UTHGHT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTHTP2,UTHTP2,UTHTP2,UTHTP2,UTHTP2,3,"UTHTP2", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTHTP2,UTHTP2,UTHTP2,UTHTP2,UTHTP2,3,"UTHTP2_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTHTS2,UTHTS2,UTHTS2,UTHTS2,UTHTS2,3,"UTHTS2", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTHTS2,UTHTS2,UTHTS2,UTHTS2,UTHTS2,3,"UTHTS2_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
          "Segment",    "Group",       "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTSALES,UTSALES,UTSALES,UTSALES,UTSALES,2,"UTSALES", &
          1,                 1,                 1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
          "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTSALES,UTSALES,UTSALES,UTSALES,UTSALES,2,"UTSALES_pass", &
          1,                 1,                 1,             1,             1,             1,             1,  &
          MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
          "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UTWDTH,UTWDTH,UTWDTH,UTWDTH,UTWDTH,2,"UTWDTH", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_SSZ,     ELD_D_DAY,     1,             1,             1,             1,             1,  &
          "Segment",    "Group",       "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UYR_CAR,UYR_CAR,UYR_CAR,UYR_CAR,UYR_CAR,1,"UYR_CAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UYR_HIST,UYR_HIST,UYR_HIST,UYR_HIST,UYR_HIST,1,"UYR_HIST", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UYR_NOCAIR,UYR_NOCAIR,UYR_NOCAIR,UYR_NOCAIR,UYR_NOCAIR,1,"UYR_NOCAIR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UYR_STEO,UYR_STEO,UYR_STEO,UYR_STEO,UYR_STEO,1,"UYR_STEO", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WDSUP_AVL,WDSUP_AVL,WDSUP_AVL,WDSUP_AVL,WDSUP_AVL,1,"WDSUP_AVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WDSUP_P,WDSUP_P,WDSUP_P,WDSUP_P,WDSUP_P,4,"WDSUP_P", &
          1,             1,             1,                1,             1,             1,             1,  &
          NWDSUPP,       NDREG,         MNUMYR+ECP_D_FPH, MNUMFS,        1,             1,             1,  &
          "BiomassProductionStep", "CoalDemandRegion", "MNUMYR", "BiomassType", "", "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WDSUP_Q,WDSUP_Q,WDSUP_Q,WDSUP_Q,WDSUP_Q,4,"WDSUP_Q", &
          1,             1,             1,                1,             1,             1,             1,  &
          NWDSUPQ,       NDREG,         MNUMYR+ECP_D_FPH, MNUMFS,        1,             1,             1,  &
          "BiomassProductionStep", "CoalDemandRegion", "MNUMYR", "BiomassType", "", "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WFLTP,WFLTP,WFLTP,WFLTP,WFLTP,2,"WFLTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     EFD_D_FPP,     1,             1,             1,             1,             1,  &
          "PlantType",  "FuelsPerPlant", "",          "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WFOR,WFOR,WFOR,WFOR,WFOR,1,"WFOR", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIA2,WIA2,WIA2,WIA2,WIA2,1,"WIA2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIAN,WIAN,WIAN,WIAN,WIAN,1,"WIAN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIAT,WIAT,WIAT,WIAT,WIAT,1,"WIAT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WICN,WICN,WICN,WICN,WICN,1,"WICN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WICS,WICS,WICS,WICS,WICS,1,"WICS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WICT,WICT,WICT,WICT,WICT,1,"WICT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIDB,WIDB,WIDB,WIDB,WIDB,1,"WIDB", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIDP,WIDP,WIDP,WIDP,WIDP,1,"WIDP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIET,WIET,WIET,WIET,WIET,1,"WIET", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIGT,WIGT,WIGT,WIGT,WIGT,1,"WIGT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIHY,WIHY,WIHY,WIHY,WIHY,1,"WIHY", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIIG,WIIG,WIIG,WIIG,WIIG,1,"WIIG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIIS,WIIS,WIIS,WIIS,WIIS,1,"WIIS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIMS,WIMS,WIMS,WIMS,WIMS,1,"WIMS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIP2,WIP2,WIP2,WIP2,WIP2,1,"WIP2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIPC,WIPC,WIPC,WIPC,WIPC,1,"WIPC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIPQ,WIPQ,WIPQ,WIPQ,WIPQ,1,"WIPQ", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIPV,WIPV,WIPV,WIPV,WIPV,1,"WIPV", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WISM,WISM,WISM,WISM,WISM,1,"WISM", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIST,WIST,WIST,WIST,WIST,1,"WIST", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIWD,WIWD,WIWD,WIWD,WIWD,1,"WIWD", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WISO,WISO,WISO,WISO,WISO,1,"WISO", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIPT,WIPT,WIPT,WIPT,WIPT,1,"WIPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIWN,WIWN,WIWN,WIWN,WIWN,1,"WIWN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WIWL,WIWL,WIWL,WIWL,WIWL,1,"WIWL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WLOWER,WLOWER,WLOWER,WLOWER,WLOWER,1,"WLOWER", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(WUPPER,WUPPER,WUPPER,WUPPER,WUPPER,1,"WUPPER", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_CAR_YR,XCL_CAR_YR,XCL_CAR_YR,XCL_CAR_YR,XCL_CAR_YR,2,"XCL_CAR_YR", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_HG_YR,XCL_HG_YR,XCL_HG_YR,XCL_HG_YR,XCL_HG_YR,2,"XCL_HG_YR", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_OTHER,XCL_OTHER,XCL_OTHER,XCL_OTHER,XCL_OTHER,2,"XCL_OTHER", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_PCAP,XCL_PCAP,XCL_PCAP,XCL_PCAP,XCL_PCAP,2,"XCL_PCAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "MNUMYR", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_PIMP,XCL_PIMP,XCL_PIMP,XCL_PIMP,XCL_PIMP,3,"XCL_PIMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ISCV,       10,            MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Int", "Ten", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_QIMP,XCL_QIMP,XCL_QIMP,XCL_QIMP,XCL_QIMP,3,"XCL_QIMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ISCV,       10,            MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Int", "Ten", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_SO2_YR,XCL_SO2_YR,XCL_SO2_YR,XCL_SO2_YR,XCL_SO2_YR,2,"XCL_SO2_YR", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_STEPS,XCL_STEPS,XCL_STEPS,XCL_STEPS,XCL_STEPS,1,"XCL_STEPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          11,            1,             1,             1,             1,             1,             1,  &
          "Eleven",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_STOCK,XCL_STOCK,XCL_STOCK,XCL_STOCK,XCL_STOCK,1,"XCL_STOCK", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_TESCI,XCL_TESCI,XCL_TESCI,XCL_TESCI,XCL_TESCI,3,"XCL_TESCI", &
          1,             1,             1,             1,             1,             1,             1,  &
          4,             MNUMYR,        NDREG,         1,             1,             1,             1,  &
          "Four",       "MNUMYR",      "CoalDemandRegion", "",       "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_TR_IN,XCL_TR_IN,XCL_TR_IN,XCL_TR_IN,XCL_TR_IN,4,"XCL_TR_IN", &
          1,             1,             1,             1,             1,             1,             1,  &
          4,             MX_ISCV,       NDREG,         MNUMYR,        1,             1,             1,  &
          "Four",       "CoalSupplyCurve_Int", "CoalDemandRegion", "MNUMYR", "",    "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_TRATI2,XCL_TRATI2,XCL_TRATI2,XCL_TRATI2,XCL_TRATI2,2,"XCL_TRATI2", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ISCV,       NDREG,         1,             1,             1,             1,             1,  &
          "CoalSupplyCurve_Int", "CoalDemandRegion", "", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_TR_T1,XCL_TR_T1,XCL_TR_T1,XCL_TR_T1,XCL_TR_T1,3,"XCL_TR_T1", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     NDREG,         MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "CoalDemandRegion", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_TR_T2,XCL_TR_T2,XCL_TR_T2,XCL_TR_T2,XCL_TR_T2,3,"XCL_TR_T2", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     NDREG,         MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "CoalDemandRegion", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_TRNINDX,XCL_TRNINDX,XCL_TRNINDX,XCL_TRNINDX,XCL_TRNINDX,3,"XCL_TRNINDX", &
          1,             1,             1,             1,             1,             1,             1,  &
          NUTSEC,        MX_NCOALS,     NDREG,         1,             1,             1,             1,  &
          "UtilitySector", "CoalSupplyCurve_Dom", "CoalDemandRegion", "", "",       "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_TYPE,XCL_TYPE,XCL_TYPE,XCL_TYPE,XCL_TYPE,1,"XCL_TYPE", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, 1,             1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ZTEXPF,ZTEXPF,ZTEXPF,ZTEXPF,ZTEXPF,1,"ZTEXPF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(ZTIMPF,ZTIMPF,ZTIMPF,ZTIMPF,ZTIMPF,1,"ZTIMPF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFRSO2Q,UFRSO2Q,UFRSO2Q,UFRSO2Q,UFRSO2Q,2,"UFRSO2Q", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFRSO2Q,UFRSO2Q,UFRSO2Q,UFRSO2Q,UFRSO2Q,2,"UFRSO2Q_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFRSO2R,UFRSO2R,UFRSO2R,UFRSO2R,UFRSO2R,2,"UFRSO2R", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UFRSO2R,UFRSO2R,UFRSO2R,UFRSO2R,UFRSO2R,2,"UFRSO2R_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelType",   "int_fuel_region", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(GRD_TGTS,GRD_TGTS,GRD_TGTS,GRD_TGTS,GRD_TGTS,2,"GRD_TGTS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(GRD_RATSA,GRD_RATSA,GRD_RATSA,GRD_RATSA,GRD_RATSA,3,"GRD_RATSA", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        MX_GRDSRC,     1,             1,             1,             1,  &
          "PlantType_ECP", "SupplyRegion", "GridResilienceSource", "", "",          "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(GRD_CASN,GRD_CASN,GRD_CASN,GRD_CASN,GRD_CASN,1,"GRD_CASN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(BMIMPTOL,BMIMPTOL,BMIMPTOL,BMIMPTOL,BMIMPTOL,1,"BMIMPTOL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NGSCRV_ELAS,NGSCRV_ELAS,NGSCRV_ELAS,NGSCRV_ELAS,NGSCRV_ELAS,1,"NGSCRV_ELAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          5,             1,             1,             1,             1,             1,             1,  &
          "Five",       "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NGSCRV_P0,NGSCRV_P0,NGSCRV_P0,NGSCRV_P0,NGSCRV_P0,1,"NGSCRV_P0", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NGSCRV_PER,NGSCRV_PER,NGSCRV_PER,NGSCRV_PER,NGSCRV_PER,1,"NGSCRV_PER", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             1,             1,             1,             1,             1,             1,  &
          "Two",        "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NGSCRV_Q,NGSCRV_Q,NGSCRV_Q,NGSCRV_Q,NGSCRV_Q,1,"NGSCRV_Q", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(NGSCRV_Q0,NGSCRV_Q0,NGSCRV_Q0,NGSCRV_Q0,NGSCRV_Q0,1,"NGSCRV_Q0", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_1TESC(:,0,:,:),XCL_1TESC(:,0,:,:),XCL_1TESC(:,0,:,:),XCL_1TESC(:,0,:,:),XCL_1TESC(:,0,:,:),3,"XCL_1TESC0", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     MNUMYR,        NDREG,         1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "MNUMYR", "CoalDemandRegion", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_2TESC(:,0,:,:),XCL_2TESC(:,0,:,:),XCL_2TESC(:,0,:,:),XCL_2TESC(:,0,:,:),XCL_2TESC(:,0,:,:),3,"XCL_2TESC0", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     MNUMYR,        NDREG,         1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "MNUMYR", "CoalDemandRegion", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_PECP(:,:,0,:),XCL_PECP(:,:,0,:),XCL_PECP(:,:,0,:),XCL_PECP(:,:,0,:),XCL_PECP(:,:,0,:),3,"XCL_PECP0", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     11,            MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "Eleven", "MNUMYR",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(XCL_QECP(:,0,:),XCL_QECP(:,0,:),XCL_QECP(:,0,:),XCL_QECP(:,0,:),XCL_QECP(:,0,:),2,"XCL_QECP0", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "MNUMYR", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_CCS,CO2_CCS,CO2_CCS,CO2_CCS,CO2_CCS,4,"CO2_CCS", &
          0,             -1,            0,             1,             1,             1,             1,  &
          MAXNFR,        MNLNP1,        2,             MNUMYR,        1,             1,             1,  &
          "FuelRegion_SUP", "OGSMRegion_SUP", "Two0", "MNUMYR",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CO2_CCS,CO2_CCS,CO2_CCS,CO2_CCS,CO2_CCS,4,"CO2_CCS_pass", &
          0,             -1,            0,             1,             1,             1,             1,  &
          MAXNFR,        MNLNP1,        2,             MNUMYR,        1,             1,             1,  &
          "FuelRegion_SUP", "OGSMRegion_SUP", "Two0", "MNUMYR",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(CAN_CST,CAN_CST,CAN_CST,CAN_CST,CAN_CST,3,"CAN_CST", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CSS,     MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "ImportStep", "CanadianSupplyRegion", "MNUMYR", "",        "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UG_CAP,UG_CAP,UG_CAP,UG_CAP,UG_CAP,2,"UG_CAP", &
          0,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     M_EFD_GRPS,    1,             1,             1,             1,             1,  &
          "Season_SUP", "PlantGroupOrd", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UP_CAP,UP_CAP,UP_CAP,UP_CAP,UP_CAP,2,"UP_CAP", &
          0,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     EMM_D_GRP,     1,             1,             1,             1,             1,  &
          "Season_SUP", "PlantGroup",  "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_efd(UPGNPD(19),UPGNPD(19),UPGNPD(19),UPGNPD(19),UPGNPD(19),1,"UPGNPD", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
!==================================================================================================================================
!  Transfer the variables stored in DAF files: read the DAF files in region, year, or plant loops
!==================================================================================================================================
   call geteij(iyr)
   do irg=1,UNRGNS
     call getin(1,irg)   ! year argument is always 1 for getin
     call getout(iyr,irg)
     
         call AIMMS_TransArray_out_efd(ECASTS,ECASTS,ECASTS,ECASTS,ECASTS,2,"ECASTS", &
            1,             irg,           1,             1,             1,             1,             1,  &
            EFD_D_MPG,     irg,           1,             1,             1,             1,             1,  &
            "DispPlantGroup", "SupplyRegion", "",       "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(ECCAP,ECCAP,ECCAP,ECCAP,ECCAP,3,"ECCAP", &
            1,             1,             irg,           1,             1,             1,             1,  &
            EFD_D_MPG,     EFD_D_MSP,     irg,           1,             1,             1,             1,  &
            "DispPlantGroup", "Season", "SupplyRegion", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(ECCOPM,ECCOPM,ECCOPM,ECCOPM,ECCOPM,3,"ECCOPM_pass", &
            1,             1,             irg,           1,             1,             1,             1,  &
            EFD_D_MPG,     EFD_D_MSP,     irg,           1,             1,             1,             1,  &
            "DispPlantGroup", "Season", "SupplyRegion", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(ECDBID,ECDBID,ECDBID,ECDBID,ECDBID,2,"ECDBID", &
            1,             irg,           1,             1,             1,             1,             1,  &
            EFD_D_MPG,     irg,           1,             1,             1,             1,             1,  &
            "DispPlantGroup", "SupplyRegion", "",       "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(ECNTP,ECNTP,ECNTP,ECNTP,ECNTP,2,"ECNTP", &
            1,             irg,           1,             1,             1,             1,             1,  &
            SCALAR,        irg,           1,             1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(EENSP,EENSP,EENSP,EENSP,EENSP,2,"EENSP", &
            1,             irg,           1,             1,             1,             1,             1,  &
            SCALAR,        irg,           1,             1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(EETIME,EETIME,EETIME,EETIME,EETIME,2,"EETIME", &
            1,             irg,           1,             1,             1,             1,             1,  &
            EFD_D_MSP,     irg,           1,             1,             1,             1,             1,  &
            "Season", "SupplyRegion",    "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(EFACTR,EFACTR,EFACTR,EFACTR,EFACTR,2,"EFACTR", &
            1,             irg,           1,             1,             1,             1,             1,  &
            SCALAR,        irg,           1,             1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(EHCAP,EHCAP,EHCAP,EHCAP,EHCAP,3,"EHCAP", &
            1,             1,             irg,           1,             1,             1,             1,  &
            EFD_D_MHG,     EFD_D_MSP,     irg,           1,             1,             1,             1,  &
            "RenewPlantGroup", "Season", "SupplyRegion", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(EHTECP,EHTECP,EHTECP,EHTECP,EHTECP,2,"EHTECP", &
            1,             irg,           1,             1,             1,             1,             1,  &
            EFD_D_MHG,     irg,           1,             1,             1,             1,             1,  &
            "RenewPlantGroup", "SupplyRegion", "",      "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(ELGRP,ELGRP,ELGRP,ELGRP,ELGRP,3,"ELGRP", &
            1,             1,             irg,           1,             1,             1,             1,  &
            EFD_D_MVS,     EFD_D_MSP,     irg,           1,             1,             1,             1,  &
            "SliceSorted", "Season", "SupplyRegion",    "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(ELNVCT,ELNVCT,ELNVCT,ELNVCT,ELNVCT,2,"ELNVCT", &
            1,             irg,           1,             1,             1,             1,             1,  &
            EFD_D_MSP,     irg,           1,             1,             1,             1,             1,  &
            "Season", "SupplyRegion",    "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(ELSEG,ELSEG,ELSEG,ELSEG,ELSEG,3,"ELSEG", &
            1,             1,             irg,           1,             1,             1,             1,  &
            EFD_D_MVS,     EFD_D_MSP,     irg,           1,             1,             1,             1,  &
            "SliceSorted", "Season", "SupplyRegion",    "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_efd(ELWDTH,ELWDTH,ELWDTH,ELWDTH,ELWDTH,3,"ELWDTH", &
            1,             1,             irg,           1,             1,             1,             1,  &
            EFD_D_MVS,     EFD_D_MSP,     irg,           1,             1,             1,             1,  &
            "SliceSorted", "Season", "SupplyRegion",    "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
   enddo
!---------------------------------------------------------------------------------------------------------
! End of EFD code generated by arraycode.f and written to transfer_code_efd.f
!---------------------------------------------------------------------------------------------------------

  return
  end subroutine AIMMS_Transfer_Out_EFD
  

!================================================================================================================
  subroutine AIMMS_TransArray_Out_efd(R4Array,R8Array,I4Array,I2Array,I1Array,numsets,arrayname, &
       s1,  s2,  s3,  s4,  s5,  s6,  s7, &   
       n1,  n2,  n3,  n4,  n5,  n6,  n7, &
     set1,set2,set3,set4,set5,set6,set7, &
     RorI,iyr,bHistoricalYears)
     use efd_row_col
   implicit none
   include 'emmparm'
! transfer EMM variables to AIMMS via composite tables with set identifiers.
   integer(2), intent(in)         ::   s1,  s2,  s3,  s4,  s5,  s6,  s7                   ! set range start; 1 for out-of-domain sets
   integer(2), intent(in)         ::   n1,  n2,  n3,  n4,  n5,  n6,  n7                   ! set range end ;  1 for out-of-domain sets
   real(4), intent(in)            :: R4Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R4'
   real(8), intent(in)            :: R8Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R8'
   integer, intent(in)            :: I4Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I4'
   integer(2), intent(in)         :: I2Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I2'
   integer(1), intent(in)         :: I1Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I1'
   integer(4),intent(in)          :: numsets                                              ! number of sets in the variable's domain
   character(LEN=*), intent(in)   :: arrayname                                            ! AIMMS parameter name for the array
   character(LEN=*), intent(in)   :: set1,set2,set3,set4,set5,set6,set7                   ! set names; ' ' for unused.
   character(LEN=2), intent(in)   :: RorI                                                 ! 'r' or 'i' depending on whether it is a real or integer
   integer(4), intent(in)         :: iyr                                                  ! year slice to use of annual array
   logical, intent(in) :: bHistoricalYears
   character*5 c(7)
   integer,parameter :: maxdims=7
   character*5 elements(maxdims)
   integer*2 i1,i2,i3,i4,i5,i6,i7
   integer*2 k(7)  ! n1, n2, etc, or max set size
   integer*2 j(7)  ! i1, i2, etc, 
   integer*2 s(7), n(7), q(7)   !
   integer*4 curiyr ! argument
   integer setIDs(7)
   character*(32)      setcopies(maxdims)
   character*(32)      setnames(maxdims)
   integer Lcolumnstart(0:max_domain_sets+1)
   integer Lcolumnend(0:max_domain_sets+1)
   integer*2 i,L,ialt,ifound
   character*256 line
   logical alt_alias ! true if set name is an "_ALT" alias. if so, output data with primary set elements
   character(LEN=35),allocatable :: carray(:,:,:,:,:,:,:)
   character*12 form(5)/'(1PG15.7E2)','(1PG24.15E3)','(I8)','(I5)','(I3)'/
   integer iform
   real*8 R8var
   

   if ((aim_phase.eq.2 .and. index(arrayname, '_pass') .gt. 0) .OR. (aim_phase.eq.1 .and. index(arrayname, '_pass') .eq. 0)) then  !added by AKN to prevent overwritting transfer arrays with passback arrays
       setnames(1)=set1
       setnames(2)=set2
       setnames(3)=set3
       setnames(4)=set4
       setnames(5)=set5
       setnames(6)=set6
       setnames(7)=set7

       if(numsets.gt.0) then
         write(IOutTXT,'(a)') 'Composite table:'
         write(IOutTXT,'(30a)') (trim(setnames(i)),' ',i=1,numsets),trim(arrayname)
       else
         select case(RorI)
         case("R4")
           R8var = dble(R4ARRAY(1,1,1,1,1,1,1))
            write(IOutTXT,'(2a,1PG24.15E3,a)') trim(arrayname),' :=',R8var,' ;'
!           write(IOutTXT,'(2a,1PG15.7E2,a)') trim(arrayname),' :=',R4ARRAY(1,1,1,1,1,1,1),' ;'
         case("R8")
           write(IOutTXT,'(2a,1PG24.15E3,a)') trim(arrayname),' :=',R8ARRAY(1,1,1,1,1,1,1),' ;'
         case("I4")
           write(IOutTXT,'(2a,I8,a)') trim(arrayname),' :=',I4ARRAY(1,1,1,1,1,1,1),' ;'
         case("I2")
           write(IOutTXT,'(2a,I5,a)') trim(arrayname),' :=',I2ARRAY(1,1,1,1,1,1,1),' ;'
         case("I1")
           write(IOutTXT,'(2a,I3,a)') trim(arrayname),' :=', -1*I1ARRAY(1,1,1,1,1,1,1),' ;'
         end select

         return
       endif
       line=' '
       setcopies=' '
       Lcolumnstart=0
       Lcolumnend=0
       do i=1,numsets
         ifound=0
 
     ! use full length set elements, not the short-element sets alternatives
          ialt=index(setnames(i),'_ALT')-1  ! get the prefix set name length that excludes the _ALT* suffix
          if(ialt.le.0) then
            alt_alias=.false.
            ialt=len_trim(setnames(i))    ! just normal length name if not an ALT alias name
          else
            alt_alias=.true.
          endif
          setcopies(i)=setnames(i)(1:ialt)  ! use setcopies for printing the elements
          LcolumnStart(i)=LcolumnEnd(i-1)+1
          LcolumnEnd(i)=LcolumnStart(i)+len_trim(setnames(i))   ! includes added blank at end to separate each field 
        enddo  ! i=1,numsets

        LcolumnStart(numsets+1) = LcolumnEnd(numsets) + 1
        LcolumnEnd(numsets+1) = LcolumnStart(numsets+1) + len_trim(arrayname)-1

        call get_setIDs_efd(setnames,numsets,setIDs) 
    ! diminensioning parameters represent a max size and the actual set size may be smaller. So
    ! when writing the array, only write elements within the actual set range.
       k(1)=1;if(numsets.ge.1) k(1)=min(n1,aimsets(setIDs(1)).iend - aimsets(setIDs(1)).istart +1)
       k(2)=1;if(numsets.ge.2) k(2)=min(n2,aimsets(setIDs(2)).iend - aimsets(setIDs(2)).istart +1)
       k(3)=1;if(numsets.ge.3) k(3)=min(n3,aimsets(setIDs(3)).iend - aimsets(setIDs(3)).istart +1)
       k(4)=1;if(numsets.ge.4) k(4)=min(n4,aimsets(setIDs(4)).iend - aimsets(setIDs(4)).istart +1)
       k(5)=1;if(numsets.ge.5) k(5)=min(n5,aimsets(setIDs(5)).iend - aimsets(setIDs(5)).istart +1)
       k(6)=1;if(numsets.ge.6) k(6)=min(n6,aimsets(setIDs(6)).iend - aimsets(setIDs(6)).istart +1)
       k(7)=1;if(numsets.ge.7) k(7)=min(n7,aimsets(setIDs(7)).iend - aimsets(setIDs(7)).istart +1)
       
       if(numsets.ge.1 .and. s1 .lt. 1) k(1)=1-s1+k(1)
       if(numsets.ge.2 .and. s2 .lt. 1) k(2)=1-s2+k(2)
       if(numsets.ge.3 .and. s3 .lt. 1) k(3)=1-s3+k(3)
       if(numsets.ge.4 .and. s4 .lt. 1) k(4)=1-s4+k(4)
       if(numsets.ge.5 .and. s5 .lt. 1) k(5)=1-s5+k(5)
       if(numsets.ge.6 .and. s6 .lt. 1) k(6)=1-s6+k(6) 
       if(numsets.ge.7 .and. s7 .lt. 1) k(7)=1-s7+k(7)
       
       j(1)=s1
       if(s1.lt.1) then
          j(1)=1 ! 0 elements are only defined for a couple of sets, like planninghorizon. so omit 0 when outputting data.
       endif
       j(2)=max(1,s2)
       if(s2.lt.1) then
          if(trim(setnames(i)).ne.'PlanningHorizon') then  
            j(2)=1
          else
            j(2)=0          ! need 0 element for PlanningHorizon; represents current year; used in uefd
          endif
       endif
       j(3)=max(1,s3)
       j(4)=max(1,s4)
       j(5)=max(1,s5)
       j(6)=max(1,s6)
       j(7)=max(1,s7)
       
       s(1) = s1
       s(2) = s2
       s(3) = s3
       s(4) = s4
       s(5) = s5
       s(6) = s6
       s(7) = s7
     
    ! write only single year slice of array if it has a year subscript
       do i=1,7
         if(setnames(i)(1:6).eq.'MNUMYR') then
           if (bHistoricalYears .eq. .TRUE.) then
                j(i) = 1
           else
               !j(i)=iyr
               !s(i)=iyr
               if (s(i) .lt. 1) then
                    j(i)=iyr-s(i)+1
                    !s(i)=iyr-so(i)+1
               else
                    j(i)=iyr
                    !s(i)=iyr
               endif
           endif
           !j(i)=iyr
           k(i)=iyr
         endif
       enddo
      

     ! write out each coefficient on a line along with the set elements for each set in its domain.
        c=' '
        do i7=j(7),k(7)
          if(numsets.ge.7) then
            c(7)=setElements(    aimsets(setIDs(7)).istart + i7 - 1 )
            line(LcolumnStart(7):LcolumnEnd(7)) = c(7)
          endif
          if (s(7) .lt. 1) then
             q(7) = i7+s(7) -1 
          else
             q(7) = i7 
          endif
          
          do i6=j(6),k(6)
            if(numsets.ge.6)then
              c(6)=setElements(    aimsets(setIDs(6)).istart + i6 - 1 )
              line(LcolumnStart(6):LcolumnEnd(6)) = c(6)
            endif
            if (s(6) .lt. 1) then
                q(6) = i6+s(6) -1 
            else
                q(6) = i6 
            endif
            
            do i5=j(5),k(5)
              if(numsets.ge.5) then
                c(5)=setElements(    aimsets(setIDs(5)).istart + i5 - 1 )
                line(LcolumnStart(5):LcolumnEnd(5)) = c(5)
              endif
              if (s(5) .lt. 1) then
                q(5) = i5+s(5) -1 
              else
                q(5) = i5 
              endif
              
              do i4=j(4),k(4)
                if(numsets.ge.4)then
                  c(4)=setElements(    aimsets(setIDs(4)).istart + i4 - 1 )
                  line(LcolumnStart(4):LcolumnEnd(4)) = c(4)
                endif
                if (s(4) .lt. 1) then
                     q(4) = i4+s(4) -1 
                else
                     q(4) = i4 
                endif
                
                do i3=j(3),k(3)
                  if(numsets.ge.3) then
                    c(3)=setElements(    aimsets(setIDs(3)).istart + i3 - 1)
                    line(LcolumnStart(3):LcolumnEnd(3)) = c(3)
                  endif
                  if (s(3) .lt. 1) then
                     q(3) = i3+s(3) -1 
                  else
                     q(3) = i3 
                  endif
                  
                  do i2=j(2),k(2)
                    if(numsets.ge.2)then
                      c(2)=setElements(    aimsets(setIDs(2)).istart + i2 - 1 )
                      line(LcolumnStart(2):LcolumnEnd(2)) = c(2)
                    endif
                    if (s(2) .lt. 1) then
                        q(2) = i2+s(2) -1 
                    else
                        q(2) = i2
                    endif
                    
                    do i1=j(1),k(1)
                      c(1)=setElements(    aimsets(setIDs(1)).istart + i1 - 1 )
                      line(LcolumnStart(1):LcolumnEnd(1)) = c(1)
                      if (s(1) .lt. 1) then
                          q(1) = i1+s(1) -1 
                      else
                           q(1) = i1
                      endif

                      select case(RorI)
                      case("R4")
                        iform=1
                        if(R4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ne.0.0 .and. .not. isnan(R4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)))) then
                        R8var = dble(R4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)))
                        write(        line(LcolumnStart(numsets+1):),form(2)) R8var
!                          write(        line(LcolumnStart(numsets+1):),form(iform)) R4ARRAY(s(1)+i1-j(1),s(2)+i2-j(2),s(3)+i3-j(3),s(4)+i4-j(4),s(5)+i5-j(5),s(6)+i6-j(6),s(7)+i7-j(7))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+23))
                          if(line(LcolumnStart(numsets+1):).eq.'Infinity') line(LcolumnStart(numsets+1):)='Inf'
                          if(line(LcolumnStart(numsets+1):).eq.'-Infinity') line(LcolumnStart(numsets+1):)='-Inf'
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      case("R8")
                        iform=2
                        if(R8ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ne.0.0 .and. .not. isnan(R8ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)))) then
                          write(        line(LcolumnStart(numsets+1):),form(iform)) R8ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+23))
                          if(line(LcolumnStart(numsets+1):).eq.'Infinity') line(LcolumnStart(numsets+1):)='Inf'
                          if(line(LcolumnStart(numsets+1):).eq.'-Infinity') line(LcolumnStart(numsets+1):)='-Inf'
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      case("I4")
                        iform=3
                        if(I4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ne.0) then
                          write(        line(LcolumnStart(numsets+1):),form(iform)) I4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+7))
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      case("I2")
                        iform=4
                        if(I2ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ne.0) then
                          write(        line(LcolumnStart(numsets+1):),form(iform)) I2ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+4))
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      case("I1")
                        iform=5
                        if ((I1ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ge.-1) .and. (I1ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)) .le. 1)) then
                          write(        line(LcolumnStart(numsets+1):),form(iform)) abs(I1ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+4))
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      end select

                    enddo    ! i1
                  enddo      ! i2
                enddo        ! i3
              enddo          ! i4
            enddo            ! i5
          enddo              ! i6
        enddo                ! i7
    
       write(IOutTXT,'(a)') ';'
   
   endif ! if(aim_phase.ne.2. .OR. index(arrayname, '_pass') .eq. 0) then
  
   return
  end subroutine AIMMS_TransArray_Out_efd

!================================================================================================================
   subroutine AIMMS_Transfer_In_efd(R4Array,R8Array,I4Array,I2Array,I1Array, &
       s1,  s2,  s3,  s4,  s5,  s6,  s7, &   
       n1,  n2,  n3,  n4,  n5,  n6,  n7, &
     RorI,LcolumnStart,LcolumnEnd,fieldname,nfields,iunit)
     use efd_row_col
   implicit none
! transfer EMM variables from AIMMS via composite tables with set identifiers.
   integer(2), intent(in)         ::   s1,  s2,  s3,  s4,  s5,  s6,  s7                   ! set range start; 1 for out-of-domain sets
   integer(2), intent(in)         ::   n1,  n2,  n3,  n4,  n5,  n6,  n7                   ! set range end ;  1 for out-of-domain sets
   real(4),    intent(out)        :: R4Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R4'
   real(8),    intent(out)        :: R8Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R8'
   integer(4), intent(out)        :: I4Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I4'
   integer(2), intent(out)        :: I2Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I2'
   integer(1), intent(out)        :: I1Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I1'

   character(LEN=2), intent(in)   :: RorI                                                 ! r4, r8, i4, or i2 depending on whether the fortran variable is a real or integer and its size
   integer(4), intent(in)         :: Lcolumnstart(0:max_domain_sets+1)                    ! starting position of each field on the record (line)
   integer(4), intent(in)         :: Lcolumnend(0:max_domain_sets+1)                      ! ending position of each filed on the record (line)
   character(LEN=*), intent(in)   :: fieldname(0:nfields)    ! names of the fields which are the set names and the AIMMS identifier/expression

   integer(4), intent(in)         :: nfields  ! number of fields in records, including the value field
   integer(4), intent(in)         :: iunit   ! input unit number for read statement

   integer,parameter :: maxdims=7
   character*5 c(maxdims),afield
   character*5 elements(maxdims)
   character*(32)      setcopies(maxdims)
   character*(32)      setnames(maxdims)
   integer*2 ifield(maxdims)
   integer setIDs(maxdims)
   
   integer*4 i,j,L,ialt,ifound,nsets
   integer*2 i1,i2,i3,i4,i5,i6,i7,icode


   integer*4 curiyr ! argument
   
   character*256 line
   logical alt_alias ! true if set name is an "_ALT" alias. if so, output data with primary set elements

   line=' '
   setcopies=' '
   nsets=nfields-1
   setnames(1:nsets)=fieldname(1:nsets)
   do i=1,nsets
     ifound=0
 
 ! use full length set elements, not the short-element sets alternatives
      ialt=index(setnames(i),'_ALT')-1  ! get the prefix set name length that excludes the _ALT* suffix
      if(ialt.le.0) then
        alt_alias=.false.
        ialt=len_trim(setnames(i))    ! just normal length name if not an ALT alias name
      else
        alt_alias=.true.
      endif
      setcopies(i)=setnames(i)(1:ialt)  ! use setcopies for interpreting the elements

   enddo  ! i=1,nsets
   call get_setIDs_efd(setcopies,nsets,setIDs)   

   backspace iunit
   
10 continue
     read(iunit,'(a)',end=99) line
     if(index(line,';')) return
   
 ! Read the set elements for each set and return their index numbers
     c=' '
     ifield(:)=1
     do i=1,nsets
       ifound=0
       icode=0
       afield=line(Lcolumnstart(i):lcolumnend(i))
       call mreplace(afield,"'","")
       do j=aimsets(setIDs(i)).istart,aimsets(setIDs(i)).iend   ! loop over the elements of the set until the set element is found
         if(afield.eq.setelements(j)) then
           ifound = 1
           icode = j - aimsets(setIDs(i)).istart + 1
           exit
         endif
       enddo
       if(icode.eq.0 .or. ifound.eq.0) then
         write(6,'(3a)') 'AIMMS Interface error EFD with '//trim(fieldname(nfields))// &
          ' solution. Could not get aliased set element for field: '//afield//' for set: '//trim(setcopies(i))
         return
       endif
       ifield(i)=icode
     enddo

     
     i1=ifield(1) - (1-s1)     
     i2=ifield(2) - (1-s2)    
     i3=ifield(3) - (1-s3)        
     i4=ifield(4) - (1-s4)        
     i5=ifield(5) - (1-s5)        
     i6=ifield(6) - (1-s6)        
     i7=ifield(7) - (1-s7)
     
     if(trim(ADJUSTL(line(LcolumnStart(nfields):))).eq.'zero') then 
        call mreplace(line(LcolumnStart(nfields):),"zero","   0")
     endif
     select case(RorI)
       case("R4")
         read(line(LcolumnStart(nfields):), *) R4ARRAY(i1,i2,i3,i4,i5,i6,i7)
       case("R8")
         read(line(LcolumnStart(nfields):), *) R8ARRAY(i1,i2,i3,i4,i5,i6,i7)
       case("I4")
         read(line(LcolumnStart(nfields):), *) I4ARRAY(i1,i2,i3,i4,i5,i6,i7)
       case("I2")
         read(line(LcolumnStart(nfields):), *) I2ARRAY(i1,i2,i3,i4,i5,i6,i7)
       case("I1")
         read(line(LcolumnStart(nfields):), *) I1ARRAY(i1,i2,i3,i4,i5,i6,i7)
     end select
     
   goto 10
99 continue  

   return
   end subroutine AIMMS_Transfer_In_efd  
!================================================================================================================
! this is a special AIMMS_Transfer_In_efd subroutine to handle special case of LHS arrays ending with '_ams' such as FGSSH_ams,FCLSH_ams,FOLSH_ams,FWDSH_ams with efd set PlantType_ covering both EFD and ECP plant types 
! but supplemented with additional first index value 1 (ECP plant type) or 2 (EFD plant type) to indicate a particular subset of planttype in their fortran counter parts
! this routine only works if the first set of such transfer variable is efd set PlantType_
   subroutine AIMMS_Transfer_In_efd2(R4Array,R8Array,I4Array,I2Array,I1Array, &
       s1,  s2,  s3,  s4,  s5,  s6,  s7, &   
       n1,  n2,  n3,  n4,  n5,  n6,  n7, &
     RorI,LcolumnStart,LcolumnEnd,fieldname,nfields,iunit)
     use efd_row_col
   implicit none
   include 'emmparm'
! transfer EMM variables from AIMMS via composite tables with set identifiers.
   integer(2), intent(in)         ::   s1,  s2,  s3,  s4,  s5,  s6,  s7                   ! set range start; 1 for out-of-domain sets
   integer(2), intent(in)         ::   n1,  n2,  n3,  n4,  n5,  n6,  n7                   ! set range end ;  1 for out-of-domain sets
   real(4),    intent(out)        :: R4Array(1:2,S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R4'
   real(8),    intent(out)        :: R8Array(1:2,S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R8'
   integer(4), intent(out)        :: I4Array(1:2,S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I4'
   integer(2), intent(out)        :: I2Array(1:2,S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I2'
   integer(1), intent(out)        :: I1Array(1:2,S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I1'

   character(LEN=2), intent(in)   :: RorI                                                 ! r4, r8, i4, or i2 depending on whether the fortran variable is a real or integer and its size
   integer(4), intent(in)         :: Lcolumnstart(0:max_domain_sets+1)                    ! starting position of each field on the record (line)
   integer(4), intent(in)         :: Lcolumnend(0:max_domain_sets+1)                      ! ending position of each filed on the record (line)
   character(LEN=*), intent(in)   :: fieldname(0:nfields)    ! names of the fields which are the set names and the AIMMS identifier/expression

   integer(4), intent(in)         :: nfields  ! number of fields in records, including the value field
   integer(4), intent(in)         :: iunit   ! input unit number for read statement

   integer,parameter :: maxdims=7
   character*5 c(maxdims),afield
   character*5 elements(maxdims)
   character*(32)      setcopies(maxdims)
   character*(32)      setnames(maxdims)
   integer*2 ifield(maxdims)
   integer setIDs(maxdims)
   
   integer*4 i,j,L,ialt,ifound,nsets
   integer*2 i1,i2,i3,i4,i5,i6,i7,icode


   integer*4 curiyr ! argument
   
   character*256 line
   logical alt_alias ! true if set name is an "_ALT" alias. if so, output data with primary set elements

   line=' '
   setcopies=' '
   nsets=nfields-1
   setnames(1:nsets)=fieldname(1:nsets)
   do i=1,nsets
     ifound=0
 
 ! use full length set elements, not the short-element sets alternatives
      ialt=index(setnames(i),'_ALT')-1  ! get the prefix set name length that excludes the _ALT* suffix
      if(ialt.le.0) then
        alt_alias=.false.
        ialt=len_trim(setnames(i))    ! just normal length name if not an ALT alias name
      else
        alt_alias=.true.
      endif
      setcopies(i)=setnames(i)(1:ialt)  ! use setcopies for interpreting the elements

   enddo  ! i=1,nsets
   call get_setIDs_efd(setcopies,nsets,setIDs)   
   
   backspace iunit

10 continue
     read(iunit,'(a)',end=99) line
     if(index(line,';')) return
   
 ! Read the set elements for each set and return their index numbers
     c=' '
     ifield(:)=1
     do i=1,nsets
       ifound=0
       icode=0
       afield=line(Lcolumnstart(i):lcolumnend(i))
       call mreplace(afield,"'","")
       do j=aimsets(setIDs(i)).istart,aimsets(setIDs(i)).iend   ! loop over the elements of the set until the set element is found
         if(afield.eq.setelements(j)) then
           ifound = 1
           icode = j - aimsets(setIDs(i)).istart + 1
           exit
         endif
       enddo
       if(icode.eq.0 .or. ifound.eq.0) then
         write(6,'(3a)') 'AIMMS Interface error EFD with '//trim(fieldname(nfields))// &
          ' solution. Could not get aliased set element for field: '//afield//' for set: '//trim(setcopies(i))
         return
       endif
       ifield(i)=icode
     enddo

     
     i1=ifield(1)      
     i2=ifield(2)      
     i3=ifield(3)      
     i4=ifield(4)      
     i5=ifield(5)      
     i6=ifield(6)      
     i7=ifield(7)  
     
     if(trim(ADJUSTL(line(LcolumnStart(nfields):))).eq.'zero') then 
        call mreplace(line(LcolumnStart(nfields):),"zero","   0")
     endif
     if (i1 .GT. 54) then
     select case(RorI)
       case("R4")
         read(line(LcolumnStart(nfields):), *) R4ARRAY(1,i1-EFD_D_CAP,i2,i3,i4,i5,i6,i7)
       case("R8")
         read(line(LcolumnStart(nfields):), *) R8ARRAY(1,i1-EFD_D_CAP,i2,i3,i4,i5,i6,i7)
       case("I4")
         read(line(LcolumnStart(nfields):), *) I4ARRAY(1,i1-EFD_D_CAP,i2,i3,i4,i5,i6,i7)
       case("I2")
         read(line(LcolumnStart(nfields):), *) I2ARRAY(1,i1-EFD_D_CAP,i2,i3,i4,i5,i6,i7)
       case("I1")
         read(line(LcolumnStart(nfields):), *) I1ARRAY(1,i1-EFD_D_CAP,i2,i3,i4,i5,i6,i7)
     end select
     else
     select case(RorI)
       case("R4")
         read(line(LcolumnStart(nfields):), *) R4ARRAY(2,i1,i2,i3,i4,i5,i6,i7)
       case("R8")
         read(line(LcolumnStart(nfields):), *) R8ARRAY(2,i1,i2,i3,i4,i5,i6,i7)
       case("I4")
         read(line(LcolumnStart(nfields):), *) I4ARRAY(2,i1,i2,i3,i4,i5,i6,i7)
       case("I2")
         read(line(LcolumnStart(nfields):), *) I2ARRAY(2,i1,i2,i3,i4,i5,i6,i7)
       case("I1")
         read(line(LcolumnStart(nfields):), *) I1ARRAY(2,i1,i2,i3,i4,i5,i6,i7)
     end select
     endif 
     
   goto 10
99 continue  

   return
   end subroutine AIMMS_Transfer_In_efd2    
  !============================================================================   
   subroutine get_setIDs_efd(setnames,numsets,setIDs)
   use efd_row_col
   implicit none
   integer numsets
   character(LEN=*),INTENT(IN) :: setnames(numsets)
   integer setIDs(7)
   integer i, ifound, ialt, j
   logical alt_alias
   do i=1,numsets
     ifound=0
 
 ! use full length set elements, not the short-element sets alternatives
     ialt=index(setnames(i),'_ALT')-1  ! get the prefix set name length that excludes the _ALT* suffix
     if(ialt.le.0) then
       alt_alias=.false.
       ialt=len_trim(setnames(i))    ! just normal length name if not an ALT alias name 
     else
       alt_alias=.true. 
     endif

     if(alt_alias) then   
       do j=1,numAimSets
         if( trim(aimsets(j).setname) .eq. setnames(i)(1:ialt)  ) then
           ifound=j
           setIDs(i)=ifound
           exit
         endif
       enddo
     else
       do j=1,numAimSets
         if( trim(aimsets(j).setname).eq. trim(setnames(i))  ) then
           ifound=j
           setIDs(i)=ifound
           exit
         endif
       enddo
     endif
     if(ifound.eq.0) then
       write(6,'(2a)')'AIMMS Interface error in get_setIDs_efd, set name not found: ',trim(setnames(i))
       write(IOutTXT,'(a)') ';'
       return
     endif
   enddo  ! i=1,numsets

   return
   end
   
   subroutine fill_elements_efd(carray, setnames,numsets, s1,s2,s3,s4,s5,s6,s7,  n1,n2,n3,n4,n5,n6,n7,   k1,k2,k3,k4,k5,k6,k7) 
! fills a character array with all the possible set elements for a multi-dimensional array using the EFD set elements
   use efd_row_col
   implicit none
   integer numsets
   integer(2),INTENT(IN) :: s1,s2,s3,s4,s5,s6,s7,  n1,n2,n3,n4,n5,n6,n7
   integer(2),INTENT(OUT) :: k1,k2,k3,k4,k5,k6,k7  ! number of elements in aimms set; 1 if no set; k_ may be < n_ since n_ is often a maximum 
   character(LEN=35),INTENT(OUT) :: carray(s1:n1,s2:n2,s3:n3,s4:n4,s5:n5,s6:n6,s7:n7)
   character(LEN=*),INTENT(IN) :: setnames(numsets)

   integer setids(7)
   character*5 c1,c2,c3,c4,c5,c6,c7
   integer i,j,ifound,ialt,i1,i2,i3,i4,i5,i6,i7
  
   call get_setIDs_efd(setnames,numsets,setids,iOutTxt) ! gets full length set names by stripping "_alt*" off the names

   c1=' '
   c2=' '
   c3=' '
   c4=' '
   c5=' '
   c6=' '
   c7=' '
   k1=1;if(numsets.ge.1) k1=min(n1,aimsets(setIDs(1)).iend - aimsets(setIDs(1)).istart +1)
   k2=1;if(numsets.ge.2) k2=min(n2,aimsets(setIDs(2)).iend - aimsets(setIDs(2)).istart +1)
   k3=1;if(numsets.ge.3) k3=min(n3,aimsets(setIDs(3)).iend - aimsets(setIDs(3)).istart +1)
   k4=1;if(numsets.ge.4) k4=min(n4,aimsets(setIDs(4)).iend - aimsets(setIDs(4)).istart +1)
   k5=1;if(numsets.ge.5) k5=min(n5,aimsets(setIDs(5)).iend - aimsets(setIDs(5)).istart +1)
   k6=1;if(numsets.ge.6) k6=min(n6,aimsets(setIDs(6)).iend - aimsets(setIDs(6)).istart +1)
   k7=1;if(numsets.ge.7) k7=min(n7,aimsets(setIDs(7)).iend - aimsets(setIDs(7)).istart +1)
   carray=' '
   do i7=s7,n7
     if(numsets.ge.7 .and. i7.le.k7) c7=setElements(    aimsets(setIDs(7)).istart + i7 - 1 ) 
     do i6=s6,n6
       if(numsets.ge.6 .and. i6.le.k6) c6=setElements(    aimsets(setIDs(6)).istart + i6 -1 ) 
       do i5=s5,n5
         if(numsets.ge.5 .and. i5.le.k5) c5=setElements(    aimsets(setIDs(5)).istart + i5 -1 ) 
         do i4=s4,n4
           if(numsets.ge.4 .and. i4.le.k4) c4=setElements(    aimsets(setIDs(4)).istart + i4 -1 ) 
           do i3=s3,n3
             if(numsets.ge.3 .and. i3.le.k3) c3=setElements(    aimsets(setIDs(3)).istart + i3 -1 ) 
             do i2=s2,n2
               if(numsets.ge.2 .and. i2.le.k2) c2=setElements(    aimsets(setIDs(2)).istart + i2 -1 ) 
               do i1=s1,n1
                 if(numsets.ge.1 .and. i1.le.k1) then
                   c1=setElements(    aimsets(setIDs(1)).istart + i1 -1 ) 
                   carray(i1,i2,i3,i4,i5,i6,i7)=c1//c2//c3//c4//c5//c6//c7
                 endif
               enddo
             enddo
           enddo
         enddo
       enddo
     enddo
   enddo
     
   return   
   end subroutine fill_elements_efd
!
   subroutine AIMMS_OutTxt_efd(ParamName,  idxFirst, idxLast, setnames)
!  write out coefficients as an AIMMS parameter using the composite table format
!  with one coefficient per line, along with the associated index set elements
   use efd_row_col
   implicit none
   include 'parametr'
   include 'ncntrl'
   
   character(LEN=*), intent(in) :: ParamName
   integer(4),       intent(in) :: idxFirst, idxLast 
   character(LEN=30),intent(in) :: setnames(max_domain_sets)   
   character*50 ParamNameNoBang
   logical bang ! true if substring in a parameter name begins with a "bang" (!). A "_" in the name delimits the end of a bang substring
   integer           numsets,num_nz,L
   character*50 filen/' '/,oldfilen/'old'/

   integer setIDs(max_domain_sets)
   character*(32)      setcopies(max_domain_sets)
   integer Lcolumnstart(0:max_domain_sets+1)
   integer Lcolumnend(0:max_domain_sets+1)
   integer retcode,min_unit/100/,ii,i,j,k,ialt,ifound,skip,ic,LastSetPos
   character*256 line
   character(len=256),allocatable :: comp_buffer(:)  ! composite table, to be dumped at end. so its code can be parallized efficiently
   integer,allocatable            :: comp_buflen(:)  ! length of each line
   logical alt_alias ! true if set name is an "_ALT" alias. if so, output data with primary set elements
   integer nline,max_nline/12000/,nlen
   
   if(.not. allocated(comp_buffer)) then
     allocate (comp_buffer(max_nline)) ! this is reallocated if lines exceed max_nline
     allocate (comp_buflen(max_nline))   
   endif
  

   nline=0

! for upper bounds, coefficients intended to be 0 are passed as -1 to be counted as nonzero.  Convert back
! to zero here so that AIMMS overrides the default value on upper bounds of infinity with zero.

   if(index(ParamName,'UBOUND').gt.0 .and. idxLast.gt.0) then
     do j=idxFirst,idxLast
       ic=efd_sortidx(j)   
       if(ic.gt.0) then 
         if(efd_coeff(ic).coeff8.eq.-1.0) then
           efd_coeff(ic).coeff8=0.
         endif
      endif
     enddo
   endif
   numsets=0
   do j=1,max_domain_sets
     if(len_trim(setnames(j)).gt.0) then
       numsets=numsets+1
     else
      exit
     endif
   enddo
  
   if(idxLast.gt.0 .and. idxFirst.gt.0) then
     num_nz=idxLast-idxFirst+1
   else
     num_nz=0
   endif

   if(idxFirst.ne.0) then
     ic=efd_sortidx(idxFirst)    
   endif
   L=len_trim(ParamName)
   bang=.false.
   j=0
   ParamNameNoBang=' '
   do i=1,L
     if(ParamName(i:i).eq.'!') then
       bang=.true.
     elseif(ParamName(i:i).eq.'_') then
       bang=.false.
     endif
     if(.not. bang) then
       j=j+1
      ParamNameNoBang(j:j)=ParamName(i:i)  ! omit "!xxx" strings from Parameter names to add data for aliased tuples to the primary AIMMS parameter
     endif
   enddo
  
   if(numsets.eq.0) then
     if(num_nz.eq.1) then
!    "1PG15.7E2"   format writes real*4 data like list-directed output "*" to prevent loss of significance
!    "1PG24.15E3"  format writes real*8 data like list-directed output "*"
!    "E30.22E3"    format is used by omlanal.f/pack_all to write coefficients for col, row, and mat.txt files
       nline=nline+1
       write(comp_buffer(nline),'(2a,F16.6,a)') trim(ParamName),' :=',efd_coeff(ic).coeff8,' ;'
       comp_buflen(nline)=len_trim(comp_buffer(nline))
     else
       nline=nline+1
       comp_buffer(nline)=trim(ParamName)//' := 0.0 ;'
       comp_buflen(nline)=len_trim(comp_buffer(nline))
     endif
     write(iOutTxt,'(a)') (comp_buffer(i)(:comp_buflen(i)) ,i=1,nline)
     return
   endif
 
   if(idxLast.eq.0) then
     return
   else
     nlen=idxLast-idxFirst+4  ! number of records for composite table
     if(nlen.gt.max_nline) then
       if(allocated(comp_buffer)) then
         deallocate(comp_buffer)
         deallocate(comp_buflen)
       endif
       allocate (comp_buffer(nlen))
       allocate (comp_buflen(nlen))   
       max_nline=nlen
     endif
     nline=nline+1
     comp_buffer(nline)= 'Composite table'
     comp_buflen(nline)=len_trim(comp_buffer(nline))
     nline=nline+1
     write(comp_buffer(nline),'(30a)') (trim(setnames(i)),'  ',i=1,numsets),'  ',trim(ParamName)
     comp_buflen(nline)=len_trim(comp_buffer(nline))
     setIDS=0  
     setcopies=' '
     Lcolumnstart=0
     Lcolumnend=0
     do i=1,numsets
       ifound=0
  
!  use full length set elements, not the short-element sets alternatives
       ialt=index(setnames(i),'_ALT')-1  ! get the prefix set name length that excludes the _ALT* suffix
       if(ialt.le.0) then
         alt_alias=.false.
         ialt=len_trim(setnames(i))    ! just normal length name if not an ALT alias name
       else
         alt_alias=.true.
       endif
       setcopies(i)=setnames(i)(1:ialt)  ! use setcopies for printing the elements (names without _ALT (alias) suffix
       LcolumnStart(i)=LcolumnEnd(i-1)+1
       LcolumnEnd(i)=LcolumnStart(i)+len_trim(setnames(i))+1    
       if(alt_alias) then
         do j=1,numAimSets
           if( trim(aimsets(j).setname).eq. trim(setcopies(i))  ) then
             ifound=j
             setIDs(i)=ifound
             exit
           endif
         enddo
         if(ifound.eq.0) then
           write(6,'(2a)')'AIMMS Interface error in AIMMS_OutTxt, set name not found: ',trim(setnames(i))
           nline=nline+1
           comp_buffer(nline)=';'
           comp_buflen(nline)=1
           write(iOutTxt,'(a)') (comp_buffer(k)(1:comp_buflen(k)),   k=1,nline) ! implied do output should be faster, if like old days
           return
         endif
       endif
     enddo  
     LcolumnStart(numsets+1) = LcolumnEnd(numsets) + 1
     LcolumnEnd(numsets+1) = LcolumnStart(numsets+1) + len_trim(ParamName) -1

     LastSetPos=LcolumnEnd(numsets)  ! save for end of set elements

 
     do i=1,numsets
       if(setIDs(i).gt.0) then
         LcolumnEnd(i)=LcolumnStart(i)+len_trim( setElements( aimsets(  setIDs(i) ).istart ) )-1
       else
         LcolumnEnd(i)=LcolumnStart(i)+len_trim(   efd_coeff( efd_sortidx(idxFirst) ).cset_elements(i)  ) -1
       endif
     enddo

! write out each coefficient on a line along with the set elements for each set in its domain. parallelize for speed.
! dump entire table to file at end to 
!DEC$ PARALLEL
   do j=idxFirst,idxLast
     nline=nline+1
     comp_buffer(nline)=' '
     comp_buflen(nline)=0
     ic=efd_sortidx(j)    
     skip=0
     if (j.le.idxLast)then
       if(efd_sortkey(j)(1:57).eq.efd_sortkey(j+1)(1:57)) then
         skip=1  ! if the coefficient appears more than once, skip all but the last one set.
       endif
     endif
     do i=1,numsets
! efdcoeff(ic).iset_elements(i) has the integer set element number.  use that to get the 
! character string set element from SetElements that AIMMS will recognize 
       if(setIDs(i).gt.0) then ! true for aliased sets
         if(efd_coeff(ic).iset_elements(i).gt.0) then      
           comp_buffer(nline)(LcolumnStart(i):LcolumnEnd(i)) = setElements(    aimsets(setIDs(i)).istart + efd_coeff(ic).iset_elements(i) -1) 
         else
           skip=1
         endif
       else ! unaliased set: use set elements directly
         if(efd_coeff(ic).cset_elements(i).ne.' ') then      
           comp_buffer(nline)(LcolumnStart(i):LcolumnEnd(i)) = efd_coeff(ic).cset_elements(i)
         else
           skip=1
         endif
       endif
     enddo
     if(skip.ne.1) then
       write(comp_buffer(nline)(LastSetPos+1:LastSetPos+15),'(1PG15.7E2)') efd_coeff(ic).coeff8
       comp_buflen(nline)=LastSetPos+15
     else
       nline=nline-1
     endif
     
100 format(a,1PG15.7E2)

   enddo
   nline=nline+1
   comp_buffer(nline)=';'
   comp_buflen(nline)=1
 endif
 if(nline.gt.max_nline) then
   max_nline=nline
   if(max_nline .gt. 1000) then
     write(6,'(a,i6)') 'AIMMS Interface error: aimms_OutTxt_efd: max_nline exceeded=',max_nline
   endif
 endif
 write(iOutTxt,'(a)') (comp_buffer(i)(:comp_buflen(i)),i=1,nline) ! implied do output should be faster, if like old days
 return
 end subroutine AIMMS_OutTxt_efd 

 subroutine AIMMS_InTxtVar_efd
 ! this reads EMM variables filled by AIMMS and output as composite tables to passback_iiii_it.txt
  use efd_row_col
  implicit none
  include 'parametr'
  include 'emmparm'
  include 'cdsparms'
  include 'dsmdimen'
  include 'ab32'
  include 'angtdm'
  include 'coalemm'
  include 'coalrep'
  include 'cogen'
  include 'control'
  include 'convfact'
  include 'csapr'
  include 'dispcrv'
  include 'dispett'
  include 'dispin'
  include 'dispinyr'
  include 'dispout'
  include 'dispuse'
  include 'dsmsectr' !conflicts with wwind
  include 'dsmtfecp'
  include 'dsmtoefd'
  include 'e111d'
  include 'ecpcntl'
  include 'ecp_coal'
  include 'elcntl'
  include 'elout'
  include 'emablk'
  include 'emeblk'
  include 'emoblk'
  include 'emission'
  include 'emmemis'
  include 'fuelin'
  include 'intout'
  include 'ncntrl'
  include 'ngtdmrep'
  include 'ogsmout'
  include 'plntctl'
  include 'postpr'
  include 'qblk'
  include 'udatout'
  include 'uecpout'
  include 'uefdout'
  include 'uettout'
  include 'uso2grp'
  include 'wrenew'
  include 'ecp_nuc'
  include 'emm_aimms'
!  include 'wwind' ! need CF, but that conflicts with a same-named variable in dsmsectr


   character*80 filen/' '/
   integer IUNIT

   integer Lcolumnstart(0:12)
   integer Lcolumnend(0:12)
   character*40 fieldname(0:12),fields(0:12) ! allocate space for 13 fields, or 12 starting at 1
   integer ifound
   character*216 line,previousline
   character*216 header
   logical backwards/.true./,scalar,first_scalar,dash,goto10,emptyTable
   character*24 identifier
   integer nline,idot,lline,ispace,iparen,nfields,nsets,ic,ir,isol,i,imatch,j,lm,la,lf,icode,fs,s,L,L2,irg
   integer iyr
   
   iyr=curiyr
   
   
   write(filen,'(a,i4,a,i2.2,a)')  './efd/PassBack_',curcalyr,'_',curitr,'.txt'

   call unitunopened(100,999,IUNIT)
   open(iunit,file=filen,FORM='FORMATTED',ACCESS = 'SEQUENTIAL',STATUS='UNKNOWN')

   call geteij(iyr)
   irg=0
 ! Return here from below until the end of file is reached. then go down to 99 continue
10 continue
! find another line. Find start of next composite table or else an assignment statement:
     previousline = line
     read(iunit,'(a)',end=99) line   
     nline=nline+1   ! keep track of file line numbers for debugging and error messages

     if(len_trim(line).eq.0) go to 10

     scalar=.false.
    
     ifound=index(line,':=')  ! indication of scalar so solution values not written as composite table
     if(ifound.gt.0) then
       nsets=0
       nfields=1
       scalar=.true.
       header=line
       row_type=' '
       first_scalar=.true.  ! indicates the the current line holds the assignment for the first of 4 scalars.
       ! get row/column name
       idot=index(header,':=')
       identifier=adjustl(header(:idot-1))
     else
       scalar=.false.  
       first_scalar=.false.
     endif
   
     ifound=index(line,'Composite table:')
     if(ifound.gt.0) then
!  Next line will have the header that identifies the variable
       previousline = header
       read(iunit,'(a)',end=99) header
       nline=nline+1

! get identifier name. It's the last character string on the line, delimited by spaces. may include domain specs in paretheses, so remove those
       idot=len_trim(header)
       if(idot.eq.0) then
         write(6,'(a)')'AIMMS Interface error EFD header with identifier not found for composite table in '//trim(filen)
         go to 10
       endif
       ispace=index(header(1:idot),' ',backwards)  ! find first blank search backwards from last nonblank on the line
       iparen=index(header(1:idot),'(',backwards)
       if(iparen.gt.0.and.iparen.gt.ispace) then
         idot=iparen-1
       endif
       identifier=header(ispace+1:idot)

 ! get the underscore line and use it to determine column positions for each field 
       previousline = line
       read(iunit,'(a)',end=99) line
       
       nline=nline+1
       if(index(line,'!').eq.0 .or. index(line,'--').eq.0) then  
       ! not an underscore comment line
         write(6,'(a)')'AIMMS Interface error EFD:  no comment or underscore line where expected in line: '//trim(line)
         goto 10
       endif   
     
       LLINE=len_trim(line)+1
       nfields=0
       lcolumnstart=0
       lcolumnend=0
       fieldname=' '
       fields=' '
     
       dash=.false.
       do i=1,LLINE
         if(.not. dash .and. line(i:i).eq.'-') then
           nfields=nfields+1
           dash=.true.
           Lcolumnstart(nfields)=i
         elseif(dash .and. line(i:i).ne.'-') then
           dash=.false.
           Lcolumnend(nfields)=i-1
           fieldname(nfields)=adjustl(header(Lcolumnstart(nfields):Lcolumnend(nfields))) ! adjustl: remove leading blanks
         endif
       enddo
       if ( nfields .le. 1 ) then  ! should be at least 1 field for the  value and 1 field for each set in the index space
           write(6,'(a,i6)') 'AIMMS Interface error EFD:  not enough fields found in this solution header '//trim(header)//' on line:',nline
           go to 10
       endif
       nsets=nfields-1  ! number of sets in the index space. 0 is for scalar

     endif ! of ... if found "composite table" 
     
!
! At this point, line can be header for a composite table or an assignment for a scalar

! return here from below until the composite table data ends with a ";" or a new composite table starts following some scalar assignment statements,
! or the end of the file is reached.  For scalars, the first scalar is in "line" read at 10 above. But then control returns here to read the next three.
20   continue
     if(.not.scalar  .or.  (.not. first_scalar)) then
       previousline = line
       read(iunit,'(a)',end=99) line
       nline=nline+1
     endif
     if(index(line,';').gt.1 .and. (.not. scalar)) then
     !**************************************************
         if(nsets.gt.0 .and. index(line,':=').gt.0 .and.index(line,'SupplyRegionNumber').gt.0 ) then
           nsets = 0
           identifier = 'SupplyRegionNumber'
           goto 15
         else
           if(index(previousline,'!').gt.0 .or. index(previousline,'--').gt.0) then 
              emptyTable = .true.
              goto 25
           else
              emptyTable = .false.
              goto 10
           endif
         !*****************************
           !goto 10  ! composite tables end with a ";" on a new line.  Go back up to search for next table.
         !************************
         !  endif
         endif
     endif
     if(index(line,'Composite').gt.0) then  ! can happen after processing assignment statements. so backspace file 1 line and go to top to re-read line and restart table processing.
       backspace iunit 
       nline=nline-1
       goto 10
     endif
     if(index(line,'!').ge.1) then 
       goto 20  ! some tables have additional header lines to indicate the default values (such as 0 or Inf) to be assumed for each blank solution entry.
     endif

     if(len_trim(line).eq.0) then
       if(.not.scalar) then
         goto 20
       else
! there is a blank line between two successive scalars.  If a blank line is encountered when the solution records for a scalar,
! return to start of read loop to start processing next scalar.       
         goto 10
       endif
     endif
15  continue    !****************
! Scalar processing:     
     if(nsets.eq.0 .and. index(line,':=').gt.0) then
       scalar=.true.
 !   need to read the scalar data from right of ":=". Only a scalar integer for SupplyRegionNumber expected
       if (identifier.eq.'SupplyRegionNumber') then
         if(irg.gt.0) then
           if(irg.lt.mnumnr) call strin(1,irg)   
           if(irg.le.unrgns) call strout(iyr,irg)
         endif
         L=index(line,':=')+2
         L2=index(line,';')-1   
         read(line(L:L2),*) irg
         if(irg.lt.mnumnr) call getin(1,irg)   
         if(irg.le.UNRGNS) call getout(iyr,irg)
       else
         write(6,'(a)') 'AIMMS error reading scalar '//trim(identifier)//' from '//trim(filen)
       endif

       first_scalar=.false.

       goto 20  ! get next record in this group of scalar assignment statements

     endif     ! of scalar processing... if(nsets.eq.0 .and. index(line,':=').gt.0) then

! if here, the lines are part of a composite table, not scalar assignments. Determine set elements .
  
     do i=1,nfields
       fields(i)=adjustl(line(Lcolumnstart(i):Lcolumnend(i))) ! adjustl: remove leading blanks
     enddo  
     emptyTable = .false. 
25   continue         
   Select case(identifier)
      CASE('FGSSH_ams')
                    call AIMMS_Transfer_in_efd2(FGSSH,FGSSH,FGSSH,FGSSH,FGSSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
      CASE('FGSSH_ams_pass')
                    call AIMMS_Transfer_in_efd2(FGSSH,FGSSH,FGSSH,FGSSH,FGSSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
      CASE('FGSSH_ams_calc')
                    FGSSH(:,:,:) = 0.0
                    if (emptyTable) goto 10
                    call AIMMS_Transfer_in_efd2(FGSSH,FGSSH,FGSSH,FGSSH,FGSSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
      CASE('FCLSH_ams')
                    call AIMMS_Transfer_in_efd2(FCLSH,FCLSH,FCLSH,FCLSH,FCLSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
      CASE('FCLSH_ams_pass')
                    call AIMMS_Transfer_in_efd2(FCLSH,FCLSH,FCLSH,FCLSH,FCLSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FCLSH_ams_calc')
                    FCLSH(:,:,:) = 0.0
                    if (emptyTable) goto 10
                    call AIMMS_Transfer_in_efd2(FCLSH,FCLSH,FCLSH,FCLSH,FCLSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FOLSH_ams')
                    call AIMMS_Transfer_in_efd2(FOLSH,FOLSH,FOLSH,FOLSH,FOLSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FOLSH_ams_pass')
                    call AIMMS_Transfer_in_efd2(FOLSH,FOLSH,FOLSH,FOLSH,FOLSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FOLSH_ams_calc')
                    FOLSH(:,:,:) = 0.0
                    if (emptyTable) goto 10
                    call AIMMS_Transfer_in_efd2(FOLSH,FOLSH,FOLSH,FOLSH,FOLSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FWDSH_ams')
                    call AIMMS_Transfer_in_efd2(FWDSH,FWDSH,FWDSH,FWDSH,FWDSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FWDSH_ams_pass')
                    call AIMMS_Transfer_in_efd2(FWDSH,FWDSH,FWDSH,FWDSH,FWDSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FWDSH_ams_calc')
                    FWDSH(:,:,:) = 0.0
                    if (emptyTable) goto 10
                    call AIMMS_Transfer_in_efd2(FWDSH,FWDSH,FWDSH,FWDSH,FWDSH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MAXNFR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
   end select
   
!---------------------------------------------------------------------------------------------------------
! Start of efd code generated by arraycode.f and written to passback_code_efd.f
!---------------------------------------------------------------------------------------------------------
!==================================================================================================================================
! Case Select Statements to read pass-back variables
!==================================================================================================================================
   Select case(identifier)
     CASE('AB32UTIL')
                    call AIMMS_Transfer_in_efd(AB32UTIL,AB32UTIL,AB32UTIL,AB32UTIL,AB32UTIL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('AB32BAVL')
                    call AIMMS_Transfer_in_efd(AB32BAVL,AB32BAVL,AB32BAVL,AB32BAVL,AB32BAVL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('AB32BUSE')
                    call AIMMS_Transfer_in_efd(AB32BUSE,AB32BUSE,AB32BUSE,AB32BUSE,AB32BUSE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('AB32BBNK')
                    call AIMMS_Transfer_in_efd(AB32BBNK,AB32BBNK,AB32BBNK,AB32BBNK,AB32BBNK, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('AB32OAVL')
                    call AIMMS_Transfer_in_efd(AB32OAVL,AB32OAVL,AB32OAVL,AB32OAVL,AB32OAVL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('AB32OUSE')
                    call AIMMS_Transfer_in_efd(AB32OUSE,AB32OUSE,AB32OUSE,AB32OUSE,AB32OUSE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('AB32RAVL')
                    call AIMMS_Transfer_in_efd(AB32RAVL,AB32RAVL,AB32RAVL,AB32RAVL,AB32RAVL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('AB32RUSE')
                    call AIMMS_Transfer_in_efd(AB32RUSE,AB32RUSE,AB32RUSE,AB32RUSE,AB32RUSE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('AB32RBNK')
                    call AIMMS_Transfer_in_efd(AB32RBNK,AB32RBNK,AB32RBNK,AB32RBNK,AB32RBNK, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('AB32ESCP')
                    call AIMMS_Transfer_in_efd(AB32ESCP,AB32ESCP,AB32ESCP,AB32ESCP,AB32ESCP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ACICST')
                    call AIMMS_Transfer_in_efd(ACICST,ACICST,ACICST,ACICST,ACICST, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ACIOAM')
                    call AIMMS_Transfer_in_efd(ACIOAM,ACIOAM,ACIOAM,ACIOAM,ACIOAM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CAREFD')
                    call AIMMS_Transfer_in_efd(CAREFD,CAREFD,CAREFD,CAREFD,CAREFD, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CARTGT')
                    call AIMMS_Transfer_in_efd(CARTGT,CARTGT,CARTGT,CARTGT,CARTGT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CHKGEN')
                    call AIMMS_Transfer_in_efd(CHKGEN,CHKGEN,CHKGEN,CHKGEN,CHKGEN, &
                    1,                 1,                 1,             1,             1,             1,             1,  &
                    MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CHK_D')
                    call AIMMS_Transfer_in_efd(CHK$,CHK$,CHK$,CHK$,CHK$, &
                    1,                 1,                 1,             1,             1,             1,             1,  &
                    MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CTLHGEM')
                    call AIMMS_Transfer_in_efd(CTLHGEM,CTLHGEM,CTLHGEM,CTLHGEM,CTLHGEM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CTLNOXEM')
                    call AIMMS_Transfer_in_efd(CTLNOXEM,CTLNOXEM,CTLNOXEM,CTLNOXEM,CTLNOXEM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CTLSO2EM')
                    call AIMMS_Transfer_in_efd(CTLSO2EM,CTLSO2EM,CTLSO2EM,CTLSO2EM,CTLSO2EM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECDSPC')
                    call AIMMS_Transfer_in_efd(ECDSPC,ECDSPC,ECDSPC,ECDSPC,ECDSPC, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECDSPE')
                    call AIMMS_Transfer_in_efd(ECDSPE,ECDSPE,ECDSPE,ECDSPE,ECDSPE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECDSPE_ALT')
                    call AIMMS_Transfer_in_efd(ECDSPE_ALT,ECDSPE_ALT,ECDSPE_ALT,ECDSPE_ALT,ECDSPE_ALT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECDSPF')
                    call AIMMS_Transfer_in_efd(ECDSPF,ECDSPF,ECDSPF,ECDSPF,ECDSPF, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECDSPF_ALT')
                    call AIMMS_Transfer_in_efd(ECDSPF_ALT,ECDSPF_ALT,ECDSPF_ALT,ECDSPF_ALT,ECDSPF_ALT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EFD_LCAR')
                    call AIMMS_Transfer_in_efd(EFD_LCAR,EFD_LCAR,EFD_LCAR,EFD_LCAR,EFD_LCAR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EFD_PCAR')
                    call AIMMS_Transfer_in_efd(EFD_PCAR,EFD_PCAR,EFD_PCAR,EFD_PCAR,EFD_PCAR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EFD_QCAR')
                    call AIMMS_Transfer_in_efd(EFD_QCAR,EFD_QCAR,EFD_QCAR,EFD_QCAR,EFD_QCAR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ELGENE')
                    call AIMMS_Transfer_in_efd(ELGENE,ELGENE,ELGENE,ELGENE,ELGENE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EFD_D_MVS,     EFD_D_MSP,     EMM_D_GRP,     1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EMMBMDUAL')
                    call AIMMS_Transfer_in_efd(EMMBMDUAL,EMMBMDUAL,EMMBMDUAL,EMMBMDUAL,EMMBMDUAL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ETDIMERG')
                    call AIMMS_Transfer_in_efd(ETDIMERG,ETDIMERG,ETDIMERG,ETDIMERG,ETDIMERG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ETDMDERG')
                    call AIMMS_Transfer_in_efd(ETDMDERG,ETDMDERG,ETDMDERG,ETDMDERG,ETDMDERG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ETDMMERG')
                    call AIMMS_Transfer_in_efd(ETDMMERG,ETDMMERG,ETDMMERG,ETDMMERG,ETDMMERG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FLRG_VAL_45Q')
                    call AIMMS_Transfer_in_efd(FLRG_VAL_45Q,FLRG_VAL_45Q,FLRG_VAL_45Q,FLRG_VAL_45Q,FLRG_VAL_45Q, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FLRG_VALUE')
                    call AIMMS_Transfer_in_efd(FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('NET_XPORT_EFD')
                    call AIMMS_Transfer_in_efd(NET_XPORT_EFD,NET_XPORT_EFD,NET_XPORT_EFD,NET_XPORT_EFD,NET_XPORT_EFD, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('NMARCST')
                    call AIMMS_Transfer_in_efd(NMARCST,NMARCST,NMARCST,NMARCST,NMARCST, &
                    1,                 1,             1,             1,             1,             1,             1,  &
                    MNUMNR+EFD_D_PROV, EFD_D_MSP,     EFD_D_MVS,     MNUMYR,        1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('OGCO2QEM')
                    call AIMMS_Transfer_in_efd(OGCO2QEM,OGCO2QEM,OGCO2QEM,OGCO2QEM,OGCO2QEM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    8,             MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('PBMPWCL')
                    call AIMMS_Transfer_in_efd(PBMPWCL,PBMPWCL,PBMPWCL,PBMPWCL,PBMPWCL, &
                    0,             0,             1,             1,             1,             1,             1,  &
                    MNUMFS,        NDREG,         MNUMYR,        1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('QBMPWCL')
                    call AIMMS_Transfer_in_efd(QBMPWCL,QBMPWCL,QBMPWCL,QBMPWCL,QBMPWCL, &
                    0,             0,             1,                1,             1,             1,             1,  &
                    MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('RGGIUTIL')
                    call AIMMS_Transfer_in_efd(RGGIUTIL,RGGIUTIL,RGGIUTIL,RGGIUTIL,RGGIUTIL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('RGGIOAVL')
                    call AIMMS_Transfer_in_efd(RGGIOAVL,RGGIOAVL,RGGIOAVL,RGGIOAVL,RGGIOAVL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('RGGIOUSE')
                    call AIMMS_Transfer_in_efd(RGGIOUSE,RGGIOUSE,RGGIOUSE,RGGIOUSE,RGGIOUSE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('RGGIRAVL')
                    call AIMMS_Transfer_in_efd(RGGIRAVL,RGGIRAVL,RGGIRAVL,RGGIRAVL,RGGIRAVL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('RGGIRUSE')
                    call AIMMS_Transfer_in_efd(RGGIRUSE,RGGIRUSE,RGGIRUSE,RGGIRUSE,RGGIRUSE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('RGGIEAVL')
                    call AIMMS_Transfer_in_efd(RGGIEAVL,RGGIEAVL,RGGIEAVL,RGGIEAVL,RGGIEAVL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('RGGIEUSE')
                    call AIMMS_Transfer_in_efd(RGGIEUSE,RGGIEUSE,RGGIEUSE,RGGIEUSE,RGGIEUSE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('SP_ACHBYECP')
                    call AIMMS_Transfer_in_efd(SP_ACHBYECP,SP_ACHBYECP,SP_ACHBYECP,SP_ACHBYECP,SP_ACHBYECP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        ECP_D_CAP,     1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('SP_RES_ACH')
                    call AIMMS_Transfer_in_efd(SP_RES_ACH,SP_RES_ACH,SP_RES_ACH,SP_RES_ACH,SP_RES_ACH, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('SP_RES_DUAL')
                    call AIMMS_Transfer_in_efd(SP_RES_DUAL,SP_RES_DUAL,SP_RES_DUAL,SP_RES_DUAL,SP_RES_DUAL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('SP_RES_REQ')
                    call AIMMS_Transfer_in_efd(SP_RES_REQ,SP_RES_REQ,SP_RES_REQ,SP_RES_REQ,SP_RES_REQ, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('SRPOOL')
                    call AIMMS_Transfer_in_efd(SRPOOL,SRPOOL,SRPOOL,SRPOOL,SRPOOL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('SR_INT_REQ')
                    call AIMMS_Transfer_in_efd(SR_INT_REQ,SR_INT_REQ,SR_INT_REQ,SR_INT_REQ,SR_INT_REQ, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ELD_D_DAY,     EFD_D_MVS,     MNUMNR,        1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UCARPRC')
                    call AIMMS_Transfer_in_efd(UCARPRC,UCARPRC,UCARPRC,UCARPRC,UCARPRC, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ULBMCST')
                    call AIMMS_Transfer_in_efd(ULBMCST,ULBMCST,ULBMCST,ULBMCST,ULBMCST, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ULMRCST')
                    call AIMMS_Transfer_in_efd(ULMRCST,ULMRCST,ULMRCST,ULMRCST,ULMRCST, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        1,             1,             1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ULTGEN')
                    call AIMMS_Transfer_in_efd(ULTGEN,ULTGEN,ULTGEN,ULTGEN,ULTGEN, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UPFUEL')
                    call AIMMS_Transfer_in_efd(UPFUEL,UPFUEL,UPFUEL,UPFUEL,UPFUEL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTCNSTSL')
                    call AIMMS_Transfer_in_efd(UTCNSTSL,UTCNSTSL,UTCNSTSL,UTCNSTSL,UTCNSTSL, &
                    1,             1,             1,                 1,                 1,             1,             1,  &
                    EFD_D_MSP,     EFD_D_MVS,     MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTCO2QEM')
                    call AIMMS_Transfer_in_efd(UTCO2QEM,UTCO2QEM,UTCO2QEM,UTCO2QEM,UTCO2QEM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    8,             MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTECON')
                    call AIMMS_Transfer_in_efd(UTECON,UTECON,UTECON,UTECON,UTECON, &
                    1,                 1,                 1,             1,             1,             1,             1,  &
                    MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTECONSL')
                    call AIMMS_Transfer_in_efd(UTECONSL,UTECONSL,UTECONSL,UTECONSL,UTECONSL, &
                    1,             1,             1,                 1,                 1,             1,             1,  &
                    EFD_D_MSP,     EFD_D_MVS,     MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTEXDE')
                    call AIMMS_Transfer_in_efd(UTEXDE,UTEXDE,UTEXDE,UTEXDE,UTEXDE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTEXME')
                    call AIMMS_Transfer_in_efd(UTEXME,UTEXME,UTEXME,UTEXME,UTEXME, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTHTP2')
                    call AIMMS_Transfer_in_efd(UTHTP2,UTHTP2,UTHTP2,UTHTP2,UTHTP2, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTHTS2')
                    call AIMMS_Transfer_in_efd(UTHTS2,UTHTS2,UTHTS2,UTHTS2,UTHTS2, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EFD_D_SSZ,     ELD_D_DAY,     MNUMNR,        1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTSALES')
                    call AIMMS_Transfer_in_efd(UTSALES,UTSALES,UTSALES,UTSALES,UTSALES, &
                    1,                 1,                 1,             1,             1,             1,             1,  &
                    MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UFRSO2Q')
                    call AIMMS_Transfer_in_efd(UFRSO2Q,UFRSO2Q,UFRSO2Q,UFRSO2Q,UFRSO2Q, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UFRSO2R')
                    call AIMMS_Transfer_in_efd(UFRSO2R,UFRSO2R,UFRSO2R,UFRSO2R,UFRSO2R, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CO2_CCS')
                    call AIMMS_Transfer_in_efd(CO2_CCS,CO2_CCS,CO2_CCS,CO2_CCS,CO2_CCS, &
                    0,             -1,            0,             1,             1,             1,             1,  &
                    MAXNFR,        MNLNP1,        2,             MNUMYR,        1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
!==================================================================================================================================
!  Read pass-back variables to be stored in DAF files: read the DAF record for the region/year; read the data; store the DAF record
!==================================================================================================================================
     CASE('ECCOPM')
                    call AIMMS_Transfer_in_efd(ECCOPM,ECCOPM,ECCOPM,ECCOPM,ECCOPM, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      EFD_D_MPG,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
   END SELECT
!---------------------------------------------------------------------------------------------------------
! end of efd code generated by arraycode.f and written to passback_code_efd.f
!---------------------------------------------------------------------------------------------------------
   go to 20  ! find next composite table

99 close(iunit)
! assume data for last region is last, so write the last regional record     
   if(irg.lt.mnumnr.and.irg.gt.0) call strin(1,irg)
   if(irg.le.UNRGNS.and.irg.gt.0) call strout(iyr,irg)
!!!ecp version:   call strbld(1,irg)
!!!ecp version:   call strbout(iyr,irg)
   call streij(iyr)

 ! read in the first region, just in case (so ECNTP will not be zero)
   call getin(1,1)   
   call getout(iyr,1)
 return  

 end subroutine AIMMS_InTxtVar_efd
!================================================================================================================
   subroutine AIMMS_InTxt_efd
! This reads column and row solutions from AIMMS Solution file as created by AIMMS WriteToNEMS procedure.
! Most of the data is in the aimms composite table format. A header line indicates the field names: set names and then 5 solution value fields for columns;4 fields for rows
! with the identifier shown as the first solution field after the set names.  The ".level" attribute is not attached to the identifier name on the first header field.
! For example:
!
! Some of the solution ddata is for scalars and these are in an assignment-statement format, indicated by lines with the assignment operator  ":=".
!
! So this routine handles both table and scalar formats by detecting when a new composite table starts or when a new assignment statement is found.
!
! It then determines whether the solution identifier is  an OML row or column and handles each separately.
!
! As such, there are 4 subroutines "contained" in this subroutine to process the 4 types of data. The sections are indicated as follows:
! 1) table, OML Column identifier :  contained subroutine store_efd_col_sol
! 2) table, OML Row    identifier :  contained subroutine store_efd_row_sol
! 3) scalar,  OML Column identifier :  contained subroutine store_efd_col_scalar
! 4) scalar,  OML Row    identifier :  contained subroutine store_efd_row_scalar

! On each composite table record, there are 4 or 5 columns of solution data (5 for variables, 4 for constraints).
!  These solution values are used to replace 5 standard OML solution items retrieved with these option strings:
!  ROWSOL='ASLUP' and COLSOL='ACLUD', as follows:
! A activity or level
! C cost , ie. objective coefficient
! L lower bound for column or lower limit for row
! U upper bound or limit
! P shawdow Price  or D reDucedCost

! a complication:  the headers showing set names are AIMMS alias for different versions of the sets (of different length) as used to construct OML names, or refer to sets used
! multiple times in an identifer, such as region_ALTfrom and region_ALTto.  The AIMMS set elements read from the file for these aliases are those for the primary set with "_ALT*" omitted,
! so often these set elements must be translated from the primary set version to the alternate set version used in the OML names.

   use efd_row_col
   implicit none
   include 'parametr'
   include 'ncntrl'
   
   character*80 filen/' '/
   real(KIND=8) rfield(5), inf/0.1797693134862315708145E+309/
   
   integer setIDs(max_domain_sets)
   character*(32)      setcopies(max_domain_sets)
   integer Lcolumnstart(0:12)
   integer Lcolumnend(0:12)
   character*40 fieldname(0:12),fields(0:12) ! allocate space for 13 fields, or 12 starting at 1
   integer iUnit/-1/,min_unit/100/,ifound
   character*216 line
   character*216 header
   logical backwards/.true./,scalar,first_scalar,dash,goto10
   character*24 identifier
   integer nline,idot,ispace,lline,nfields,nsets,ic,ir,isol,i,imatch,j,lm,la,lf,icode,fs,s,L,a
   character*5 afield,setname*32
   logical withSafety,withoutSafety,lopened
   integer iret,idbg,IX
   
   character*4 iden_type/' '/
   character*5 zeroes/'00000'/
   character*16 wfield(5)

! for AIMMS validation, check for cplex mps file. if found, copy to new file named with model year and iteration.
   write(line,'(a,i4,a,i2.2,a)') 'if exist .\efd\cpx00000.mps copy /Y .\efd\cpx00000.mps .\efd\cpx_',curcalyr,'_',curitr,'.mps'
   call callsys(iret,line)  ! calls a subroutine in main.f to send the command to the system  like a console command.
   line=' '   

! for AIMMS validation, check for efd.lis file that includes aimms-to-cplex crosswalk. if found, copy to new file named with model year and iteration.
   write(line,'(a,i4,a,i2.2,a)') 'if exist .\efd\log\efd.lis copy /Y .\efd\log\efd.lis .\efd\log\efd_',curcalyr,'_',curitr,'.lis'
   call callsys(iret,line)  ! calls a subroutine in main.f to send the command to the system  like a console command.
   line=' '   

! for AIMMS debugging, check for messages.log file that includes aimms status messages. if found, copy to new file named with model year and iteration.
   write(line,'(a,i4,a,i2.2,a)') 'if exist .\efd\log\messages.log copy /Y .\efd\log\messages.log .\efd\log\messages_',curcalyr,'_',curitr,'.log'
   call callsys(iret,line)  ! calls a subroutine in main.f to send the command to the system  like a console command.
   line=' '   

! for AIMMS debugging, check for aimms.err file that includes aimms error messages. if found, copy to new file named with model year and iteration.
   write(line,'(a,i4,a,i2.2,a)') 'if exist .\efd\log\aimms.err copy /Y .\efd\log\aimms.err .\efd\log\aimms_',curcalyr,'_',curitr,'.err'
   call callsys(iret,line)  ! calls a subroutine in main.f to send the command to the system  like a console command.
   line=' '   

   write(filen,'(a,i4,a,i2.2,a)')  './efd/OutToNEMS_',curcalyr,'_',curitr,'.txt'
   num_efd_col_sol=0
   call unitunopened(100,999,IUNIT)
   open(iunit,file=filen,FORM='FORMATTED',ACCESS = 'SEQUENTIAL',STATUS='UNKNOWN')

! open column and row solution retrieval debug files
   if(colunit.gt.0) then
     close(colunit)
   endif
   if(rowunit.gt.0) then
     close(rowunit)
   endif
  
   IF (AIMEFDBG.eq.1) THEN
   call unitunopened(100,999,colunit)
   write(filen,'(a,i4,a)') 'efd_soln_cols_',curcalyr,'.txt'
   open(colunit,file=filen,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
   rewind colunit
   
   call unitunopened(100,999,rowunit)
   write(filen,'(a,i4,a)') 'efd_soln_rows_',curcalyr,'.txt'
   open(rowunit,file=filen,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
   rewind rowunit
   ENDIF

   nline=0
   num_efd_col_sol=0
   withSafety=.false.
   withoutSafety=.false.
! read first two lines that have solution status for problems "WithoutSafety" and "WithSafety"
   read (iunit,'(a)',end=999) line
   write(6,*) 'AIMMS Interface: '//trim(line(4:))  ! first 3 characters in the file are garbage.
   if(index(line,'Optimal').gt.0) then
     withoutSafety=.true.
   endif
   read (iunit,'(a)') line
   read (iunit,'(a)') line
   if(index(line,'Optimal').gt.0) then
     withSafety=.true.   
   endif
   write(6,*) 'AIMMS Interface EFD: '//trim(line)
   if ( (.not.  withoutSafety) .and. (.not. withSafety)) then 
     write(6,*)'AIMMS Interface: Optimal EFD Solution not found.  '
     goto 99
   endif
     
   
! Return here from below until the end of file is reached. then go down to 99 continue
10 continue
! find another line. Find start of next composite table or else an assignment statement:
     read(iunit,'(a)',end=99) line   
     nline=nline+1   ! keep track of file line numbers for debugging and error messages
     if(len_trim(line).eq.0) go to 10

     scalar=.false.
     
     ifound=index(line,':=')  ! indication of scalar so solution values not written as composite table
     if(ifound.gt.0) then
       nsets=0
       nfields=1
       scalar=.true.
       header=line
       row_type=' '
       first_scalar=.true.  ! indicates the the current line holds the assignment for the first of 4 scalars.
       ! get row/column name
       idot=index(header,':=')
! determine if r or c:
       identifier=adjustl(header(:idot-1))
       if (identifier(1:1).eq.'c') then
         iden_type='col '
       elseif (identifier(1:1).eq.'r') then
         iden_type='row '
         L=len_trim(identifier)
         if(identifier(L:L).eq.'n') then
           row_type='N'
       else
           row_type=identifier(L-1:L-1)  ! ' eq, le, ge, ==> E, L, or G
           call low2up(row_type,1)
         endif
       elseif (identifier(1:8).eq.'EFDCOSTS') then
         iden_type='row '
         row_type='N'
       else
         write(6,'(a)')'AIMMS Interface error EFD  identifier type could not be determined for '//trim(identifier)//' in line: '//trim(header)
         go to 10
       endif

       
     else
       scalar=.false.  
       first_scalar=.false.
     endif
   
     ifound=index(line,'Composite table:')
     if(ifound.gt.0) then
!  Next line will have the header that identifies the column-variable (starts with c, unless a free row implemented as a variable) or row-constraint (starts with r, unless...)
       read(iunit,'(a)',end=99) header
       nline=nline+1

! get row/column name
       idot=index(header,'.',backwards)
! determine if r or c:
       if(idot.eq.0.and. scalar) then
         idot=index(header,':')
       elseif(idot.eq.0)then
         idot=len_trim(header)
         if(header(idot:idot).eq.'n') then  ! looking for free row, identifier ends in lower case n. implemented as parameter. composite table has only one value field, no dots
           idot=idot+1
           header(idot:idot)='.'  ! fake it
         else
           idot=0
         endif
       endif       
       if(idot.eq.0) then
         write(6,'(a)')'AIMMS Interface error EFD header with identifier not found for composite table in '//trim(filen)
         go to 10
       endif
       ispace=index(header(1:idot),' ',backwards)
       identifier=header(ispace+1:idot-1)
       if (identifier(1:1).eq.'c'.and.(index(header,'ReducedCost').gt.0 .or. scalar)) then
         iden_type='col '
       elseif (identifier(1:1).eq.'r'.and.(index(header,'ReducedCost').gt.0 .or. scalar)) then ! in case some free rows are implemented as columns instead of parameter
         iden_type='free'
         row_type='N'
       elseif (identifier(1:1).eq.'r') then
         L=len_trim(identifier)
         if(identifier(L:L).eq.'n') then
           iden_type='free'
           row_type='N'
         else
           row_type=identifier(L-1:L-1)  ! ' eq, le, ge, ==> E, L, or G
           call low2up(row_type,1)
           iden_type='row '
         endif
         
       elseif (identifier(1:8).eq.'EFDCOSTS') then
         iden_type='row '
         row_type='N'
         identifier(9:)= ' '
       else
         write(6,'(a)')'AIMMS Interface error EFD:  identifier type could not be determined for '//trim(identifier)//' in line: '//trim(header)
         go to 10
       endif

 ! get underscore line and use it to determine column positions for each field 
       read(iunit,'(a)',end=99) line
       nline=nline+1
       if(index(line,'!').eq.0 .or. index(line,'--').eq.0) then  
       ! not an underscore comment line
         write(6,'(a)')'AIMMS Interface error EFD:  no comment or underscore line where expected in line: '//trim(line)
         goto 10
       endif   
     
       LLINE=len_trim(line)+1
       nfields=0
       lcolumnstart=0
       lcolumnend=0
       fieldname=' '
       fields=' '
     
       dash=.false.
       do i=1,LLINE
         if(.not. dash .and. line(i:i).eq.'-') then
           nfields=nfields+1
           dash=.true.
           Lcolumnstart(nfields)=i
         elseif(dash .and. line(i:i).ne.'-') then
           dash=.false.
           Lcolumnend(nfields)=i-1
           fieldname(nfields)=adjustl(header(Lcolumnstart(nfields):Lcolumnend(nfields))) ! adjustl: remove leading blanks
         endif
       enddo
       if(iden_type.eq.'col') then  ! should be 5 fields for each column solution header record and 1 field for each set in the index space
         if(nfields.le.5 ) then  ! should be 5 fields for each column solution header record and 1 field for each set in the index space
           write(6,'(a,i6)') 'AIMMS Interface error EFD:  not enough fields found in this solution header '//trim(header)//' on line:',nline
           go to 10
         endif
         nsets=nfields-5  ! number of sets in the index space. 0 is for scalar
       elseif( iden_type.eq.'row' ) then  ! should be 4 fields for each row solution header record and 1 field for each set in the index space
         if ( nfields .le. 4 ) then  ! should be 4 fields for each row solution header record and 1 field for each set in the index space
           write(6,'(a,i6)') 'AIMMS Interface error EFD:  not enough fields found in this solution header '//trim(header)//' on line:',nline
           go to 10
         endif
         nsets=nfields-4  ! number of sets in the index space. 0 is for scalar
       elseif( iden_type.eq.'free' ) then  ! should be 1 fields in solution header record 1 for each field in the index space
         if ( nfields .le. 1 ) then  ! should be 1 field for the solution value  and 1 field for each set in the index space
           write(6,'(a,i6)') 'AIMMS Interface error EFD:  not enough fields found in this solution header '//trim(header)//' on line:',nline
           go to 10
         endif
         nsets=nfields-1  ! number of sets in the index space. 0 is for scalar
       endif
     endif ! of ... if found "composite table" 
!
! At this point, line can be header for a composite table or an assignment for a scalar
     if (iden_type .eq. 'col ') then 
       ic=-1
       call usehash(identifier, colname_hash, max_col_aimms, ic, initial_store)
       if(initial_store) then
         write(6,'(a)') 'AIMMS Interface error EFD: aimms identifier not found: '//trim(identifier)//' from this table header: '//trim(header)
         colname_hash(ic)= ' ' ! reset hash key to blank since this identifier shouldn't be added to the hash list at this point
         goto 10
       endif
       aimms_col_ID_num=col_aimms_ptr(ic)  
     elseif (iden_type .eq. 'row ' .or. iden_type .eq. 'free') then
       ir=-1
       if(index(identifier,'.').gt.0  .and. iden_type.ne.'free') then
         identifier(  index(identifier,'.')  :) = ' '
       endif
       call usehash(identifier, rowname_hash, max_row_aimms, ir, initial_store)
       if(initial_store) then
         write(6,'(a)') 'AIMMS Interface error EFD aimms identifier not found: '//trim(identifier)//' from this table header: '//trim(header)
         rowname_hash(ir)= ' ' ! reset hash key to blank since this identifier shouldn't be added to the hash list at this point
         goto 10
       endif
       aimms_row_ID_num=row_aimms_ptr(ir) 
     endif

! return here from below until the composite table data ends with a ";" or a new composite table starts following some scalar assignment statements,
! or the end of the file is reached.  For scalars, the first scalar is in "line" read at 10 above. But then control returns here to read the next three.
20   continue
     if(.not.scalar  .or.  (.not. first_scalar)) then
       read(iunit,'(a)',end=99) line
       nline=nline+1
     endif
     if(index(line,';').gt.1 .and. (.not. scalar)) then
       goto 10  ! composite tables end with a ";" on a new line.  Go back up to search for next table.
     endif
     if(index(line,'Composite').gt.0) then  ! can happen after processing assignment statements. so backspace file 1 line and go to top to re-read line and restart table processing.
       backspace iunit 
       nline=nline-1
       goto 10
     endif
     if(index(line,'!').ge.1) then 
       goto 20  ! some tables have additional header lines to indicate the default values (such as 0 or Inf) to be assumed for each blank solution entry.
     endif

     if(len_trim(line).eq.0) then
       if(.not.scalar) then
         goto 20
       else
! there is a blank line between two successive scalars.  If a blank line is encountered when the solution records for a scalar,
! return to start of read loop to start processing next scalar.       
         goto 10
       endif
     endif

! Scalar processing:     
     if(nsets.eq.0 .and. index(line,':=').gt.0) then
       scalar=.true.
     
       if (iden_type .eq. 'col ') then
! 1) read scalar solution values from multiple lines, OML Column Identifier
         call store_efd_col_scalar

       elseif (iden_type .eq. 'row ' .or. iden_type .eq.'free') then
! 2) read scalar solution values from multiple lines, OML Row Identifier
         call store_efd_row_scalar
       endif
       first_scalar=.false.

       goto 20  ! get next record in this group of scalar assignment statements

     endif     ! of scalar processing... if(nsets.eq.0 .and. index(line,':=').gt.0) then

! if here, the lines are part of a composite table, not scalar assignments. Determine set elements and construct the OML column or row name based on the column or row mask.
! Store solution values with the OML column or row name it matches    
     do i=1,nfields
       fields(i)=adjustl(line(Lcolumnstart(i):Lcolumnend(i))) ! adjustl: remove leading blanks
     enddo   

     if (iden_type .eq. 'col ') then

! 3) Process lines from composite table, OML column identifier    
        call store_efd_col_sol
        if(goto10) goto 10
     elseif (iden_type .eq. 'row ' .or. iden_type .eq. 'free') then

! 4) Process lines from composite table, OML row identifier
        call store_efd_row_sol
        if(goto10) goto 10
         
     endif     
     go to 20  ! get next record in this composite table

99 close(iunit)
   
! write AIMMS solution records to debug file
if(aimefdbg.eq.1) then
   write(filen,'(a,i4,a,i2.2,a)') 'efd_aimms_soln_debug_',curcalyr,'_',curitr,'.txt'
   call unitunopened(100,999,IUNIT)
   open(iunit,file=filen,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
   rewind iunit
endif

! column solutions
   do i=1,num_efd_col_sol
     efdcolnam=col_sol_names(i) ! sequence of oml cols names as read from AIMMS solution file
! use hash table for col names for fast lookup of solution record "s"
! based on the col name.
     call usehash(efdcolnam, efd_col_name, max_efd_col_hash, s, initial_store)

     aimms_col_ID_num=efd_col_sol(s).aimms_col_ID_num
     nsets=efd_col_sol(s).nsets
     if(aimms_col_ID_num.ge.0) then 
       do j=1,5
         if(efd_col_sol(s).solval(j).gt.999999999.) then
           wfield(j)='       inf'
         elseif(efd_col_sol(s).solval(j).le.-99999999.) then
           wfield(j)='      -inf'
         else
           write(wfield(j),'(F16.6)')  efd_col_sol(s).solval(j)
         endif
       enddo 
       efd_col_sol(s).status=' '
       if(efd_col_sol(s).solval(3) .eq. efd_col_sol(s).solval(4) .and.  &
          efd_col_sol(s).solval(1) .eq. efd_col_sol(s).solval(3)) then

                 efd_col_sol(s).status='EQ'

       elseif(efd_col_sol(s).solval(1) .eq. efd_col_sol(s).solval(4)) then

                 efd_col_sol(s).status='UL'

       elseif(efd_col_sol(s).solval(1).eq.efd_col_sol(s).solval(3)) then

                efd_col_sol(s).status='LL'

       elseif(efd_col_sol(s).solval(1) .gt. efd_col_sol(s).solval(3) .and. &
              efd_col_sol(s).solval(1) .lt. efd_col_sol(s).solval(4)) then

                efd_col_sol(s).status='BS'

       endif
       if(aimefdbg.eq.1)then
         if(aimms_col_ID_num.ge.0) then 
           write(iunit,'(i6,i4,1x,a,1x,a,1x,I1,1x,<max_set>(a5,1x),a,5a16,1x,a2)') i, &
                                 aimms_col_ID_num, &
                       col_aimms(aimms_col_ID_num).colnam_aimms, &
                       col_aimms(aimms_col_ID_num).colnam_mask,  &
                       nsets, &
                      (efd_col_sol(s).cset_elements(a),a=1,max_set), &
                       efd_col_sol(s).efdcolnam,(wfield(a),a=1,5),efd_col_sol(s).status
         else
           write(iunit,'(i6,i4,1x,a24,1x,a30,1x,I1,1x,<max_set>(a5,1x),a,5a16,1x,a2)') i, &
                                 aimms_col_ID_num, &
                       ' ', &
                       ' ',  &
                       nsets, &
                      (efd_col_sol(s).cset_elements(a),a=1,max_set), &
                       efdcolnam,(wfield(a),a=1,5),efd_col_sol(s).status
         endif
       endif
     endif
   enddo
! row solutions   
   do i=1,num_efd_row_sol
     efdrownam=row_sol_names(i) ! sequence of oml row names as read from AIMMS solution file
     row_type=row_sol_types(i)
! use hash table for row names for fast lookup of solution record "s"
! based on the row name.
     call usehash(efdrownam, efd_row_name, max_efd_row_hash, s, initial_store)
     if(efd_row_sol(s).row_type .ne. row_type) then  ! for example, aimms writes solution for two row types, but only one is used (CARBONAB)
!       write(6,'(a)') 'AIMMS Interface: skipping solution for '//efdrownam//' with row_type of '//row_type//'. Latest row type is '//efd_row_sol(s).row_type
        cycle  ! skip the rest of this i iteration and continue do loop
     endif
     aimms_row_ID_num=efd_row_sol(s).aimms_row_ID_num
     nsets=efd_row_sol(s).nsets
       do j=1,5
         if(efd_row_sol(s).solval(j).gt.999999999.) then
           wfield(j)='       inf'
         elseif(efd_row_sol(s).solval(j).le.-99999999.) then
           wfield(j)='      -inf'
         else
           write(wfield(j),'(F16.6)')  efd_row_sol(s).solval(j)
         endif
       enddo
       efd_row_sol(s).status=' '
       if(row_type.eq.'N') then
          efd_row_sol(s).status='FR'
       elseif(efd_row_sol(s).solval(3) .eq. efd_row_sol(s).solval(4) .and. &
              efd_row_sol(s).solval(1) .eq. efd_row_sol(s).solval(3)) then
              
                efd_row_sol(s).status='EQ'
                
       elseif(efd_row_sol(s).solval(1) .eq. efd_row_sol(s).solval(4)) then
       
                efd_row_sol(s).status='UL'
                
       elseif(efd_row_sol(s).solval(1) .eq. efd_row_sol(s).solval(3)) then
       
                efd_row_sol(s).status='LL'
                
       elseif(efd_row_sol(s).solval(1) .gt. efd_row_sol(s).solval(3) .and.  &
              efd_row_sol(s).solval(1) .lt. efd_row_sol(s).solval(4)) then
              
                efd_row_sol(s).status='BS'
       endif
       if(AIMEFDBG.eq.1) then
        if(aimms_row_ID_num.ge.0) then
          write(iunit,'(i6,i4,1x,a,1x,a,1x,I1,1x,<max_set>(a5,1x),a,5A16,1x,a2)') i, &
                                 aimms_row_ID_num, &
                       row_aimms(aimms_row_ID_num).rownam_aimms, &
                       row_aimms(aimms_row_ID_num).rownam_mask,  &
                       nsets, &
                      (efd_row_sol(s).cset_elements(a),a=1,max_set), &
                       efd_row_sol(s).efdrownam,(wfield(a),a=1,5),efd_row_sol(s).status
        else
          write(iunit,'(i6,i4,1x,a24,1x,a30,1x,I1,1x,<max_set>(a5,1x),a,5A16,1x,a2)') i, &
                                 aimms_row_ID_num, &
                       ' ', &
                       ' ',  &
                       nsets, &
                      (efd_row_sol(s).cset_elements(a),a=1,max_set), &
                       efdrownam,(wfield(a),a=1,5),efd_row_sol(s).status
        endif
       endif 
   enddo
   if (aimefdbg.eq.1) close(iunit)

! create sort index to access row solutions from hash list in sorted order for subroutine efd_mps and get_masked_row
    nrsort=0
    do ix=0,max_efd_row_hash
      if(efd_row_name(ix)(1:1).ne.' ') then
        nrsort=nrsort+1
        efd_rowidx(nrsort)=ix
        efd_rowkey(nrsort)=efd_row_name(ix)(1:8)//efd_row_sol(ix).row_type
      endif
    enddo
    call emm_sort16(efd_rowkey,  efd_rowidx,  nrsort, nrsort )  ! sort the rows. efd_rowidx points back to original position.

! create sort index to access column solutions from hash list in sorted order for subroutine efd_mps and get_masked_row
    ncsort=0
    do ix=0,max_efd_col_hash
      if(efd_col_name(ix)(1:1).ne.' ') then
        ncsort=ncsort+1
        efd_colidx(ncsort)=ix
        efd_colkey(ncsort)=efd_col_name(ix)(1:8)
      endif
    enddo
    call emm_sort16(efd_colkey,  efd_colidx,  ncsort, ncsort )  ! sort the cols. efd_colidx points back to original position.

999   return
   
   CONTAINS
!
!  The following four subroutines share the declarations in the subroutine above because they are within the scope its "CONTAINS" definition
!===========================================================================================================================================
       subroutine store_efd_col_sol
       implicit none
       goto10=.false.
! 3) Process lines from composite table, OML column identifier    
        if(aimms_col_ID_num.ge.0) then
          num_efd_col_sol=num_efd_col_sol+1  ! count of solution records
          if(num_efd_col_sol .gt. max_efd_col) then
            write(6,'(a)') 'AIMMS Interface error EFD:  max_efd_col exceeded in store_efd_col_sol. stopping.'
            stop
          endif
! make sure the sets identified in the composite header match those set names defined for the col_aimms column
          imatch=0
          do i=1,nsets
            if(col_aimms(aimms_col_ID_num).setnam(i).eq.fieldname(i)) then
               imatch=imatch+1
            endif
          enddo
          if(imatch.eq.nsets) then
!============================================================================================
! construct OML column name from the mask and set elements. If not an alias column, just use the elements as they are
             efdcolnam=' '
             lm=index(col_aimms(aimms_col_ID_num).colnam_mask, '!')  ! '!' is used to tag versions of the same mask, so use that as the length
             if(lm.gt.1) then
               lm=lm-1
             else
               lm=len_trim(col_aimms(aimms_col_ID_num).colnam_mask)
             endif
             j=0
             do i=1, lm
               if( index('()', col_aimms(aimms_col_ID_num).colnam_mask(i:i)) .eq.0) then  ! pass over any special masking characters in search of the constants
                 j=j+1
                 efdcolnam(j:j)=col_aimms(aimms_col_ID_num).colnam_mask(i:i)         
               endif
             enddo
             cindstt(1:max_set)=col_aimms(aimms_col_ID_num).indstt(1:max_set)
             cindend(1:max_set)=col_aimms(aimms_col_ID_num).indend(1:max_set)
             do i=1,nsets
               afield=fields(i)  ! this field is a set element. 
               if( index(fieldname(i),'_ALT').gt.1) then  ! check for alias set name. if so, need to use primary set name to decode the element, then convert to the alternate alias element
                 la=len_trim(afield)
                 setname=fieldname(i)(1: index(fieldname(i),'_ALT') -1  )  ! strip off _ALT stuff to get AIMMS primary set name used in the composite table fields
                 call get_efd_set_element(setname,afield(:la),icode)         ! get the integer (ordinal) code for the set element 
                 if(icode.gt.0) then
                    call get_efd_char_element(fieldname(i),icode,afield,ifound)
                    la=len_trim(afield)
                 endif
                 if(icode.eq.0 .or. ifound.eq.0 .or. la.ne.(cindend(i)-cindstt(i)+1)) then
                   write(6,'(3a)') 'AIMMS Interface error EFD with '//trim(identifier)// &
                    ' solution. Could not get aliased set element for field: '//trim(fields(i))//' for set: '//trim(fieldname(i))//' and '//trim(setname)
                   goto10=.true.
                   return
                 endif
               endif
               if(cindstt(i).gt.0) then
                 lf=cindend(i)-cindstt(i)+1
                 la=len_trim(afield)
                 if(len_trim(afield).lt.lf) then ! left pad integer set elements with 0
                   afield=zeroes(1:lf-la)//afield
                 endif  
                 efdcolnam(cindstt(i):cindend(i)) = afield(:lf)
               endif
             enddo
             col_sol_names(num_efd_col_sol)=efdcolnam
!===================  end construct OML column name ===============================================
! store col solution to a spot "s" from a hash table for fast lookup, based on the col name.
             call usehash(efdcolnam, efd_col_name, max_efd_col_hash, s, initial_store)

             rfield=0
 ! read each numeric field from the 5 solution fields      
             do i=nsets+1,nfields
               rfield(i-nsets)=0.
               fs=len_trim(fields(i))
               if(fs.gt.0) then
                 if(index(fields(i),'-inf').gt.0) then
                   rfield(i-nsets)=-inf  ! smallest double precision real
                 elseif (index(fields(i),'inf').gt.0) then
                   rfield(i-nsets)=inf  ! largest double precision real
                 elseif (index(fields(i),'zero').gt.0) then
                   rfield(i-nsets)=0. 
                 else
                   read(fields(i),*) rfield(i-nsets)
                 endif
               elseif(i-nsets.eq.4) then ! default upper limit is infinity
                 rfield(4)=inf
               endif
             enddo
             if(s.ge.0) then
               efd_col_sol(s).efdcolnam = efdcolnam
               efd_col_sol(s).solval(1) = rfield(1)
               efd_col_sol(s).solval(2) = rfield(2)
               efd_col_sol(s).solval(3) = rfield(3)
               efd_col_sol(s).solval(4) = rfield(4)
               efd_col_sol(s).solval(5) = rfield(5)

               efd_col_sol(s).aimms_col_ID_num = aimms_col_ID_num
! store set elements from each set field          
               efd_col_sol(s).nsets = nsets
               do i=1,nsets
                 efd_col_sol(s).cset_elements(i)=fields(i)
               enddo
             else
               write(6,'(a,i6)') 'AIMMS Interface error: EFD: bad hash index from column name: '//efdcolnam//' so may need to increase max_efd_col_hash'
             endif
          else
            write(6,'(a,i6)') 'AIMMS Interface error: EFD: index set mismatch on solution for identifier '//trim(identifier)//' line #',nline
          endif
        else
          write(6,'(3a)') 'AIMMS Interface error: EFD: aimms_col_ID_num<0 reading column solution in subroutine store_efd_col_sol'
          goto10=.true.
       endif

       return
       end subroutine store_efd_col_sol   
!=====================================================================================================================================
       subroutine store_efd_row_sol
       implicit none
       goto10=.false.
! 4) Process lines from composite table, OML row identifier
        if(aimms_row_ID_num.ge.0) then
          num_efd_row_sol=num_efd_row_sol+1   ! count of solution records
          if(num_efd_row_sol .gt. max_efd_row) then
            write(6,'(a)') 'AIMMS Interface error EFD:  max_efd_row exceeded in store_efd_row_sol. stopping.'
            stop
          endif
! make sure the sets identified in the composite header match those set names defined for the row_aimms row
          imatch=0
          do i=1,nsets
            if(row_aimms(aimms_row_ID_num).setnam(i).eq.fieldname(i)) then
               imatch=imatch+1
            endif

          enddo
          if(imatch.eq.nsets) then
!=========================================================
! construct OML row name from the mask and set elements. If not an alias rowumn, just use the elements as they are
             efdrownam=' '
             lm=index(row_aimms(aimms_row_ID_num).rownam_mask, '!')  ! '!' is used to tag versions of the same mask, so strip that out
             if(lm.gt.1) then
               lm=lm-1
             else
               lm=len_trim(row_aimms(aimms_row_ID_num).rownam_mask)
             endif
             j=0
             do i=1, lm
               if( index('()', row_aimms(aimms_row_ID_num).rownam_mask(i:i)) .eq.0) then  ! pass over any special masking characters in search of the constants
                 j=j+1
                 efdrownam(j:j)=row_aimms(aimms_row_ID_num).rownam_mask(i:i)         
               endif
             enddo
             rindstt(1:max_set)=row_aimms(aimms_row_ID_num).indstt(1:max_set)
             rindend(1:max_set)=row_aimms(aimms_row_ID_num).indend(1:max_set)
             do i=1,nsets
               afield=fields(i)
               if( index(fieldname(i),'_ALT').gt.1) then  ! check for alias set name
                 la=len_trim(afield)
                 setname=fieldname(i)(1:    index(fieldname(i),'_ALT') -1  )  ! strip off _ALT stuff to get AIMMS primary set name used in the composite table fields
                 call get_efd_set_element(setname,afield(:la),icode)         ! get the integer (ordinal) code for the set element 
                 if(icode.gt.0) then
                    call get_efd_char_element(fieldname(i),icode,afield,ifound)
                    la=len_trim(afield)
                 endif
                 if(icode.eq.0 .or. ifound.eq.0) then
                   write(6,'(3a)') 'AIMMS Interface error EFD with '//trim(identifier)// &
                    ' solution. Could not get aliased set element for field: '//trim(fields(i))//' for set: '//trim(fieldname(i))//' and '//trim(setname)
                   goto10=.true.
                   return
                 endif
               endif
               if(rindstt(i).gt.0) then
                 lf=rindend(i)-rindstt(i)+1
                 la=len_trim(afield)
                 if(len_trim(afield).lt.lf) then ! left pad integer set elements with 0
                   afield=zeroes(1:lf-la)//afield
                 endif  
                 efdrownam(rindstt(i):rindend(i)) = afield(:lf)
               endif
             enddo
             row_sol_names(num_efd_row_sol)=efdrownam
             row_sol_types(num_efd_row_sol)=row_type
!===================  end construct OML row name ====================================================================================
! store row solution to a spot "s" from a hash table for fast lookup, based on the row name.
             call usehash(efdrownam, efd_row_name, max_efd_row_hash, s, initial_store)
             if(efd_row_sol(s).row_type .eq. row_type) then  ! but do not store solution for a row if the row_type doesn't match (e.g., CARBONAB n)
             rfield=0
 ! read each numeric field from the 4 solution fields      
             do i=nsets+1,nfields
               rfield(i-nsets)=0.
               fs=len_trim(fields(i))
               if(fs.gt.0) then
                 if(index(fields(i),'-inf').gt.0) then
                    rfield(i-nsets)=-inf  ! smallest double precision real
                 elseif (index(fields(i),'inf').gt.0) then
                   rfield(i-nsets)=inf  ! largest double precision real
                 elseif (index(fields(i),'zero').gt.0) then
                   rfield(i-nsets)=0. 
                 else
                   read(fields(i),*) rfield(i-nsets)
                   if (row_type.eq.'N') then ! free rows only have activity. set range.
                     rfield(2)=-inf  ! lower limit
                     rfield(3)=inf   ! upper limit
                   endif
                 endif
               elseif((i-nsets).eq.2) then  ! lower
                 if(row_type.eq.'L') then
                   rfield(2)=-inf  ! lower limit
                 endif
               elseif((i-nsets).eq.3) then  ! upper
                 if(row_type.eq.'G') then
                   rfield(3)=inf  ! upper limit
                 endif
               endif
             enddo
             if(s.ge.0) then
               efd_row_sol(s).solval(1) = rfield(1)
               efd_row_sol(s).solval(2) = 0.
               efd_row_sol(s).solval(3) = rfield(2)
               efd_row_sol(s).solval(4) = rfield(3)
               efd_row_sol(s).solval(5) = rfield(4)
               if(row_type.eq.'L')then
                 if(rfield(3).gt.0.and.rfield(3).lt.inf) then
                   efd_row_sol(s).solval(2)=rfield(3)-rfield(1) ! slack activity for oml comparability
                 endif
               elseif(row_type.eq.'G') then
                 if(rfield(2).gt.0.and.rfield(2).lt.inf) then
                   efd_row_sol(s).solval(2)=rfield(2)-rfield(1) ! slack activity for oml comparability. slack neg for GE
                 endif
               endif
               efd_row_sol(s).efdrownam = efdrownam
               efd_row_sol(s).row_type = row_type
               efd_row_sol(s).aimms_row_ID_num = aimms_row_ID_num
! store set elements from each set field          
               efd_row_sol(s).nsets = nsets
               do i=1,nsets
                 efd_row_sol(s).cset_elements(i)=fields(i)
              enddo
             else
               write(6,'(a,i6)') 'AIMMS Interface EFD bad hash index from row name: '//efdrownam//' so may need to increase max_efd_row_hash'
             endif
          else
          !  write(6,'(a)') 'AIMMS Interface EFD skipping solution for '//efdrownam//' row_type='//row_type//': does not match '//efd_row_sol(s).row_type
          endif
          else
            write(6,'(a,i6)') 'AIMMS Interface EFD index set mismatch on solution for identifier '//trim(identifier)//' line #',nline
          endif
        else
          write(6,'(3a)') 'AIMMS Interface error EFD aimms_row_ID_num<0 reading row solution in subroutine store_efd_row_sol'
          goto10=.true.
        endif

       return
       end subroutine store_efd_row_sol  
!=====================================================================================================================================
       subroutine store_efd_col_scalar
       implicit none
          integer savespot,icolon
! 1) read scalar solution values from multiple lines, OML Column Identifier
          if(aimms_col_ID_num.ge.0) then
            if(first_scalar) then
               num_efd_col_sol=num_efd_col_sol+1
               rfield(:)=0.
               if(num_efd_col_sol .gt. max_efd_col) then
                 write(6,'(a)') 'AIMMS Interface error EFD:  max_efd_col exceeded in store_efd_col_scalar. stopping.'
                 stop
               endif
               efdcolnam=col_aimms(aimms_col_ID_num).colnam_mask  ! for scalars, the mask should have no replacement patterns and so match the oml column
               col_sol_names(num_efd_col_sol)=efdcolnam
! store col solution to a spot "s" from a hash table for fast lookup, based on the col name.
               call usehash(efdcolnam, efd_col_name, max_efd_col_hash, s, initial_store)
               savespot=s
               efd_col_sol(s).efdcolnam=efdcolnam
            else
               s=savespot 
            endif
            efd_col_sol(s).aimms_col_ID_num = aimms_col_ID_num
            efd_col_sol(s).nsets = 1

            icolon=index(line,':=')+2
            if(index(line(1:icolon),'.')+index(line(1:icolon),'BOUND').eq.0) then
              line(1:icolon)=' '
              line(index(line,';'):)=' '
              rfield(1)=0.
              if(len_trim(line).gt.0) then
                read(line,*) rfield(1)
              endif
              
              efd_col_sol(s).solval(1) = rfield(1)
            else
              isol=0
              if (index(line,'.NomCoeff').gt.0) isol=2 
              if ( (index(line,'.Lower') + index(line,'_LBOUND') ).gt.0) isol=3   ! field may be titled .Lower or _LBOUND
              if ( (index(line,'.Upper') + index(line,'_UBOUND') ).gt.0) isol=4   ! field may be titled .Uower or _UBOUND
              if (index(line,'.ReducedCost')+index(line,'.ShadowPrice').gt.0) isol=5
              if(isol.gt.0) then
                line(1:index(line,':=')+2)=' '
                line(index(line,';'):)=' '
                rfield(isol)=0.
                if(len_trim(line).gt.0) then
                  if(index(line,'-inf').gt.0) then
                     rfield(isol)=-inf  ! smallest double precision real
                  elseif (index(line,'inf').gt.0) then
                     rfield(isol)=inf  ! largest double precision real
                  elseif (index(line,'zero').gt.0) then
                     rfield(isol)=0.  ! largest single precision real
                  else
                     read(line,*) rfield(isol)
                  endif
                endif
                efd_col_sol(s).solval(isol) = rfield(isol)
              endif
            endif          

          endif
       return
       end subroutine store_efd_col_scalar  
!=====================================================================================================================================
       subroutine store_efd_row_scalar
       implicit none
       integer savespot,icolon
          if(aimms_row_ID_num.ge.0) then
            if(first_scalar) then
               num_efd_row_sol=num_efd_row_sol+1
               rfield(:)=0.
               if(num_efd_row_sol .gt. max_efd_row) then
                 write(6,'(a)') 'AIMMS Interface error EFD:  max_efd_row exceeded in store_efd_row_scalar. stopping.'
                 stop
               endif
               efdrownam=row_aimms(aimms_row_ID_num).rownam_mask  ! for scalars, the mask should have no replacement patterns and so match the oml rowumn
               row_sol_names(num_efd_row_sol)=efdrownam
               row_sol_types(num_efd_row_sol)=row_type
! store row solution to a spot "s" from a hash table for fast lookup, based on the row name.
               call usehash(efdrownam, efd_row_name, max_efd_row_hash, s, initial_store)
               savespot=s
               efd_row_sol(s).efdrownam=efdrownam
            else
               s=savespot 
            endif

            if(row_type .eq. efd_row_sol(s).row_type) then

              efd_row_sol(s).aimms_row_ID_num = aimms_row_ID_num
              efd_row_sol(s).nsets = 1
              icolon=index(line,':=')+2
              if(index(line(1:icolon),'.').eq.0) then
                line(1:icolon)=' '
                line(index(line,';'):)=' '
                rfield(1)=0.
                if(len_trim(line).gt.0) then
                  read(line,*) rfield(1)
                endif
                efd_row_sol(s).solval(1)=rfield(1)
              else
                isol=0
                if (index(line,'.Lower').gt.0) isol=3
                if (index(line,'.Upper').gt.0) isol=4
                if (index(line,'.ReducedCost')+index(line,'.ShadowPrice').gt.0) isol=5
                if(isol.gt.0) then
                  line(1:index(line,':=')+2)=' '
                  line(index(line,';'):)=' '
                    rfield(isol)=0.
                  if(len_trim(line).gt.0) then
                    if(index(line,'-inf').gt.0) then
                      rfield(isol)=-inf  ! smallest double precision real
                    elseif (index(line,'inf').gt.0) then
                      rfield(isol)=inf  ! largest double precision real
                    elseif (index(line,'zero').gt.0) then
                      rfield(isol)=0.  
                    else
                      read(line,*) rfield(isol)
                    endif
                  endif
                  if(isol.eq.4) then
                    if(rfield(4).lt.inf .and. rfield(4).gt.0) rfield(2)=rfield(4)-rfield(1)
                  endif
                  efd_row_sol(s).solval(isol) = rfield(isol)
                endif
              endif          
            else
!             write(6,'(a)') 'AIMMS Interface: skipping solution for '//efdrownam//' row_type='//row_type//': does not match '//efd_row_sol(s).row_type
            endif
          endif
       return
       end subroutine store_efd_row_scalar

   end subroutine AIMMS_InTxt_efd
!=====================================================================================================================================
   subroutine get_efd_char_element(setname,icode,ccode,ifound)
! returns the set element character code (ccode) associated with a given setname and icode (ordinal set element)  
   use efd_row_col
   implicit none
   character(LEN=*) setname
   integer icode
   character*5 ccode
   integer ifound,i,Lsn,isetnum
   
! Set names and elements for use in reading/writing composite data arrays.
! these are defined in module efd_row_col and are shown here for reference
!   type aimset
!     character*32 setname
!     integer*2 istart
!     integer*2 iend
!   end type
!   integer, parameter :: max_aimsets=75
!   type (aimset) :: aimsets(max_aimsets)
!   character*5 setElements(20000) ! need 15000 for coalgroup, plus another few hundred
!   integer numAimSets
!   integer nSetElements
   ifound=0
   isetnum=0
   Lsn=len_trim(setname)
   do i=1,numAimSets
     if(aimsets(i).setname  .eq. setname) then
       if(Lsn .eq. len_trim(aimsets(i).setname)) then
         isetnum=i
         ifound=1
         exit
       endif
     endif
   enddo
   if(ifound.eq.1) then
     ccode=setELements(  aimsets(isetnum).istart + icode -1 )
   endif
   
   end subroutine get_efd_char_element
!=====================================================================================================================================
      subroutine write_efd_row_col_dbg(iunit)
! writes a debug line to display col/row IDs and AIMMS names associated with the current efd/OML row, col names
      use efd_row_col
      implicit none
      integer iunit
      write(iunit,100) AIMMS_col_ID_num,AIMMS_row_ID_num, &
        col_aimms(aimms_col_id_num).colnam_aimms, &
        row_aimms(aimms_row_id_num).rownam_aimms, &
        efdcolnam, efdrownam,&
        trim(col_aimms(aimms_col_id_num).colnam_mask), &
        trim(row_aimms(aimms_row_id_num).rownam_mask)
       
100   format('coeff: AIMMS col, row IDS:',2I5,',  AIMMS col, row names: ',a,1x, a,',  OML col,row names: ',2a, ',  col/row masks: ',a,1x,a)
      end
!!=====================================================================================================================================
!  SUBROUTINE DWFSCOL(COLUMN,COLSOL,STAT,SOLVAL,colmask,RETCD)
!  ! invokes OML function WFSCOL to retrieve column solution.
!  ! For AIMMSEFD option, substitutes AIMMS solution for the column
!    use efd_row_col  ! declarations/storage for AIMMS interface LP coefficients
!    IMPLICIT NONE
!    include 'omlall.fi'
!    character*16 COLUMN
!    character*8  COLSOL
!    character*2  STAT,STAT2
!    real(8)      SOLVAL(5),SOLVAL2(5)
!    character*24 SOLVAL5(5)
!    character(Len=*) :: colmask
!    integer i,j,isol
!    integer RETCD,RETCD2
!    character*6  scodes/'ACLUD '/
!    
!    IF (AIMMSEFD .ne. 1 .or. make_efd_aimms) THEN  ! if running efd to generate data for arraycode_efd, will need to use OML solution
!      stat=' '
!      solval=0.
!      RETCD = WFSCOL(COLUMN,COLSOL,STAT,SOLVAL)
!    ENDIF 
!
!    efdcolnam=column
!    if(AIMMSEFD.eq.1) then
!
!      if(make_efd_aimms) return ! there is no AIMMS solution if this is a make_efd_aimms run, so return
!
!! look up OML col names in the AIMMS solution list, efd_col_sol.  
!! use hash table for col names for fast lookup of solution record "isol"
!! based on the col name.
!      call usehash(efdcolnam, efd_col_name, max_efd_col_hash, isol, initial_store)
!      solval(:)=0.    
!      colnam_aimms=' '
!      if (isol.ge.0 .and. .not. initial_store) then 
!        do i=1,len_trim(colsol)                  ! for each non-blank character in COLSOL (eg., 'A  
!          j=index(scodes,colsol(i:i))               ! get its position (1-5) in "ACLUD" to match the AIMMS solution field wanted                       
!          solval(i)=efd_col_sol(isol).solval(j) 
!        enddo
!        retcd=0
!        stat=efd_col_sol(isol).status
!        aimms_col_ID_num=efd_col_sol(isol).aimms_col_ID_num
!        if(aimms_col_ID_num.ge.0) colnam_aimms=col_aimms(aimms_col_ID_num).colnam_aimms
!      else 
!        if(isol.ge.0) then
!          efd_col_name(isol)= ' '  ! initial_store was .true. re-initialize so repeated calls to solution retrieval generate initial_store=.true.
!        endif
!        stat=' '
!        retcd=1
!      endif
!      stat2=' '
!      solval2=0.
!      solval5='       null'
!      if(AIMEFDBG.eq.1) then
!        RETCD2 = WFSCOL(COLUMN,COLSOL,STAT2,SOLVAL2)
!        do i=1,len_trim(colsol)                  ! for each non-blank character in COLSOL (eg., 'A  
!         j=index(scodes,colsol(i:i))              ! get its position (1-5) in "ACLUD" to match the 5 AIMMS solution fields              
!         write(solval5(j),'(1PG24.15E3)') solval2(i)  
!        enddo
!      endif
!  
!      if(AIMEFDBG.eq.1) then
!        if(retcd.eq.0 .or. retcd2.eq.0) then
!          write(colunit,2000) column(1:8), colnam_aimms, retcd, retcd2, colsol, &
!          stat, stat2, (efd_col_sol(isol).solval(j),j=1,5), (solval5(j),j=1,5)
!        endif
!!      else
!!        if(retcd.eq.0) then
!!          write(colunit,2001) column(1:8), colnam_aimms, retcd, &
!!          colsol, stat, (efd_col_sol(isol).solval(j),j=1,5)
!!        endif
!      endif
! 2000 format(a8,'|',a,'|',2(i2,'|'),a8,'|',a2,'|',a2,'|AIM:|',5(1PG24.15E3,'|'),'OML:|',5(a24,'|'))
! 2001 format(a8,'|',a,'|',i2,'|',a8,'|',a2,5('|',1PG24.15E3))
!  
!   endif
!!=============================================================================================================
!  END SUBROUTINE DWFSCOL
!!=====================================================================================================================================
!  SUBROUTINE DWFSROW(ROW,ROWSOL,STAT,SOLVAL,rowmask,RETCD)
!  ! invokes OML function WFSROW to retrieve row solution
!  ! For AIMMSEFD option, substitutes AIMMS solution for the row 
!    use efd_row_col  ! declarations/storage for AIMMS interface LP coefficients
!    IMPLICIT NONE
!    include 'omlall.fi'  
!    character*16 ROW
!    character*8  ROW8UPPER
!    character*8  ROWSOL
!    character*2  STAT,STAT2
!    real(8)      SOLVAL(5),SOLVAL2(5)
!    character*24 SOLVAL5(5)
!    character(Len=*) :: rowmask
!    integer i,j,isol
!    integer RETCD,RETCD2
!    character*6  scodes/'ASLUP '/
!    
!    IF (AIMMSEFD .ne. 1 .or. make_efd_aimms) THEN   ! if running efd to generate data for arraycode_efd, will need to use OML solution
!      stat=' '
!      solval=0.
!      RETCD = WFSROW(ROW,ROWSOL,STAT,SOLVAL)
!    endif
!    efdrownam=row
!    if(AIMMSEFD.eq.1) then
!
!    if(make_efd_aimms) return ! there is no AIMMS solution if this is a make_efd_aimms run. so return
!
!      ! look up OML row names in the AIMMS solution list, efd_row_sol. 
!! use hash table for row names for fast lookup of solution record "isol"
!! based on the row name.
!      call usehash(efdrownam, efd_row_name, max_efd_row_hash, isol, initial_store)
!      solval(:)=0.
!      rownam_aimms=' '
!      if(efd_row_sol(isol).efdrownam .ne. efdrownam) then
!         efd_row_sol(isol).efdrownam=' '
!         efd_row_sol(isol).row_type= ' '
!         efd_row_sol(isol).solval=0
!         efd_row_sol(isol).status=' '
!         initial_store=.true.
!      endif         
!      
!      if (isol.ge.0 .and. .not. initial_store) then                           
!        do i=1,len_trim(rowsol)                  ! for each non-blank character in ROWSOL (eg., 'A  
!          j=index(scodes,rowsol(i:i))               ! get its position (1-5) in "ACLUP" to match the AIMMS solution field wanted                       
!          solval(i)=efd_row_sol(isol).solval(j)
!          if(j.eq.5) then
!            solval(i)=-solval(i)
!          endif 
!        enddo
!        retcd=0
!        stat=efd_row_sol(isol).status
!        row_type=efd_row_sol(isol).row_type
!        aimms_row_ID_num=efd_row_sol(isol).aimms_row_ID_num 
!        if(aimms_row_ID_num.ge.0) then
!          rownam_aimms=row_aimms(aimms_row_ID_num).rownam_aimms
!          row_type=row_aimms(aimms_row_ID_num).row_type
!        endif
!      else
!        if(isol.ge.0) then
!          efd_row_name(isol)= ' '  ! initial_store true. re-initialize so repeated calls to solution retrieval generate initial_store
!          efd_row_sol(isol).row_type=' '
!          efd_row_sol(isol).efdrownam=' '          
!        endif
!        row_type=' '
!        stat=' '
!        retcd=1
!      endif
!      stat2=' '
!      solval2=0.
!      solval5='       null'
!      if(AIMEFDBG.eq.1) then   ! then get OML solution for comparison      
!        RETCD2 = WFSROW(ROW,ROWSOL,STAT2,SOLVAL2)
!        do i=1,len_trim(rowsol)                  ! for each non-blank character in COLSOL (eg., 'A  
!          j=index(scodes,rowsol(i:i))              ! get its position (1-5) in "ACLUD" to match the 5 AIMMS solution fields              
!          write(solval5(j),'(1PG24.15E3)') solval2(i)  
!        enddo
!      endif
!
!      if(AIMEFDBG.eq.1) then  ! write out comparison of AIMMS and OML solution fields
!        if(retcd.eq.0 .or. retcd2.eq.0) then
!          write(rowunit,2000) row(1:8), row_type, rownam_aimms, retcd, retcd2, rowsol, &
!           stat, stat2, (efd_row_sol(isol).solval(j),j=1,5), (solval5(j),j=1,5)
!        endif
!!      else
!!        if(retcd.eq.0) then
!!          write(rowunit,2001) row(1:8), row_type, rownam_aimms, retcd, rowsol, stat, &
!!          (efd_row_sol(isol).solval(j),j=1,5)
!!        endif
!      endif         
! 2000 format(a8,'|',a1,'|',a,'|',2(i2,'|'),a8,'|',a2,'|',a2,'|AIM:|',5(1PG24.15E3,'|'),'|OML:|',5(a24,'|'))
! 2001 format(a8,'|',a1,'|',a,'|',i2,'|',a8,'|',a2,5('|',1PG24.15E3))
!
!    ENDIF
!   END SUBROUTINE DWFSROW
   SUBROUTINE GET_MASKED_COL(maskin,col,iret)
! duplicates wfcmask. but not in sorted order.
! If mask is nonblank, 
!      initiate a search of all columns that match the mask; return the first
!      matching column. set the search position at that column. store the mask for next call.
! if mask is blank, use the most recently-passed nonblank mask. increment the current position.
!      if the current position is the last element, set retrun code to 1; return. 
!      Otherwise, increment the current position. Find next matching column.
!      
   use efd_row_col
   implicit none
   character(LEN=16),INTENT(IN)   :: maskin
   character(LEN=16), INTENT(OUT) :: col
   integer, INTENT(OUT)           :: iret    ! return code 0 if returning matching column; 1 if no more matches
   integer maskmatch ! function to see if string matches a mask with wildcard character "*"
   character(LEN=8) mask
   character(LEN=8) oldmask/' '/
   
   save oldmask
   
   integer curpos ! current search position
   save curpos
   logical needRange
   integer i,j,itop,ibot,ichk,imatch,LSrch
   integer first, last  ! positions of first and last elements matching mask prefix; determined on call when mask is first passed.
   save first, last
   logical found
   
   mask=maskin ! 8-char copy of input mask. if blank, changed to oldmask which triggers a search for next match at current position
   if(len_trim(mask).eq.0) then
     mask=oldmask
     needRange=.false.
   else
     needRange=.true.
     first=1
     last=ncsort
     LSrch=index(mask,'*')
     if(LSrch.eq.0) LSrch=9
     LSrch=LSrch-1    ! characters up to first * used to establish search range (first:last).
     if(LSrch.eq.0) lSrch=1
     
     oldmask=mask
     curpos=1
     if(oldmask.eq.' ') then
       iret=1
       return
     endif
   endif
   
   iret=0
   col=' '
   
   if(curpos .gt. ncsort) then
     iret=1
     return
   endif
 
   if(needRange) then  ! find first and last elements matching mask prefix
     ichk=ncsort/2
     itop=1
     ibot=ncsort
     first=itop
     last=ibot
     imatch=maskmatch(mask(:LSrch),efd_colkey(ichk),LSrch)
! find any matching column within the search range. Halve the range until a match is found
     do while (itop .lt. ibot .and. imatch.eq.0)   
       if(mask(:LSrch).gt.efd_colkey(ichk)(:LSrch)) then
         itop=ichk+1
       elseif(mask(:LSrch).lt.efd_colkey(ichk)(:LSrch)) then
         ibot=ichk-1
       endif
       ichk=(itop+ibot)/2
       if(ichk.lt.1)then
         ichk=1
       elseif(ichk.gt.ncsort) then
         ichk=ncsort
       endif
       imatch=maskmatch(mask(:LSrch),efd_colkey(ichk),LSrch)
     enddo
     if(imatch.eq.1) then ! match found. find first and last matching
       first=ichk
       do i=ichk-1,curpos,-1  ! find first non-match in search range, going down through the list
         if (maskmatch(mask(:LSrch),efd_colkey(i),LSrch).eq.0) then
           first=i+1  ! if i is first nonmatch, i+1 is first match in range, since ichk is a match
           exit
         endif
       enddo
       last=ncsort
       do i=ichk+1,ncsort
         if( maskmatch(mask(:LSrch),efd_colkey(i),LSrch).eq.0) then
           last=i-1
           exit
         endif 
       enddo
     endif
   endif

   do i=first,last  ! now use full mask
     if( maskmatch(mask,efd_colkey(i),8).eq.1) then
       col=efd_colkey(i)
       first=i+1
       return
     endif
   enddo      
   first=ncsort+1  ! at last position. no more found
   iret=1
   return
!*******************************************************************
   end subroutine GET_MASKED_COL
! function determines if a given string (col) matches a mask filter. returns 1 if it does, 0 otherwise
   integer function maskmatch(mask,col,nl)
   implicit none
   character(len=nl) mask, col
   integer nl
   integer j
   maskmatch=1
   do j=1,nl
     if( mask(j:j).ne.'*') then
       if( mask(j:j).ne. col(j:j)) then
         maskmatch=0
         return
       endif
     endif
   enddo
   return
   end
   !*******************************************************************
         SUBROUTINE emm_sort16(A,IDX,N,NMAX)
         IMPLICIT NONE
   ! SORTS FIRST N ELEMENTS OF CHARACTER ARRAY A.  IT ALSO SORTS AN INDEXING
   ! ARRAY, IDX, WHICH CAN BE USED TO MAP THE SORT ORDER TO OTHER ARRAYS.  IDX
   ! SHOULD BE PASSED WITH THE SERIES 1, 2, ... N.
   !  THE SORT METHODOLOGY IS CALLED QUICKSORT IS CONSIDERED AN EFFICIENT
   !  APPROACH FOR SORTING LARGE ARRAYS
   
         INTEGER NMAX,N
         CHARACTER*16 A(NMAX),X,W
         INTEGER IDX(NMAX)
         integer stacksize
         parameter(stacksize=17)
         INTEGER STACK(stacksize,2),L,R,S,J,I,II,ITEMP
         S=1
         STACK(1,1)=1
         STACK(1,2)=N
   10    CONTINUE
         L=STACK(S,1)
         R=STACK(S,2)
         S=S-1
   20    CONTINUE
           I=L
           J=R
           II=(L+R)/2
           X=A(II)
   30      CONTINUE
   40        CONTINUE
               IF(A(I).LT.X) THEN
                  I=I+1
                  GO TO 40
               ENDIF
   50        CONTINUE
               IF(X.LT.A(J)) THEN
                 J=J-1
                 GO TO 50
               ENDIF
             IF(I.LE.J) THEN
               W=A(I)
               A(I)=A(J)
               A(J)=W
               ITEMP=IDX(I)
               IDX(I)=IDX(J)
               IDX(J)=ITEMP
               I=I+1
               J=J-1
             ENDIF
             IF(I.LE.J) GO TO 30
           IF((J-L).LT.(R-I)) THEN
             IF(I.LT.R) THEN
               S=S+1
               if(s.le.stacksize) then
                 STACK(S,1)=I
                 STACK(S,2)=R
               else
                 write(6,*)' AIMMS Interface error in emm_sort16.  increase stack size.'
                 return
               endif
             ENDIF
             R=J
           ELSE
             IF(L.LT.J) THEN
               S=S+1
               STACK(S,1)=L
               STACK(S,2)=J
             ENDIF
             L=I
           ENDIF
           IF(L.LT.R) GO TO 20
         IF(S.GT.0) GO TO 10
         RETURN
         END
 
         SUBROUTINE emm_sort64(A,IDX,N,NMAX)
         IMPLICIT NONE
   ! SORTS FIRST N ELEMENTS OF CHARACTER ARRAY A.  IT ALSO SORTS AN INDEXING
   ! ARRAY, IDX, WHICH CAN BE USED TO MAP THE SORT ORDER TO OTHER ARRAYS.  IDX
   ! SHOULD BE PASSED WITH THE SERIES 1, 2, ... N.
   !  THE SORT METHODOLOGY IS CALLED QUICKSORT IS CONSIDERED AN EFFICIENT
   !  APPROACH FOR SORTING LARGE ARRAYS
   
         INTEGER NMAX,N
         CHARACTER*64 A(NMAX),X,W
         INTEGER IDX(NMAX)
         integer stacksize
         parameter(stacksize=17)
         INTEGER STACK(stacksize,2),L,R,S,J,I,II,ITEMP
         S=1
         STACK(1,1)=1
         STACK(1,2)=N
   10    CONTINUE
         L=STACK(S,1)
         R=STACK(S,2)
         S=S-1
   20    CONTINUE
           I=L
           J=R
           II=(L+R)/2
           X=A(II)
   30      CONTINUE
   40        CONTINUE
               IF(A(I).LT.X) THEN !
                  I=I+1
                  GO TO 40
               ENDIF
   50        CONTINUE
               IF(X.LT.A(J)) THEN !
                 J=J-1
                 GO TO 50
               ENDIF
             IF(I.LE.J) THEN
               W=A(I)
               A(I)=A(J)
               A(J)=W
               ITEMP=IDX(I)
               IDX(I)=IDX(J)
               IDX(J)=ITEMP
               I=I+1
               J=J-1
             ENDIF
             IF(I.LE.J) GO TO 30
           IF((J-L).LT.(R-I)) THEN
             IF(I.LT.R) THEN
               S=S+1
               if(s.le.stacksize) then
                 STACK(S,1)=I
                 STACK(S,2)=R
               else
                 write(6,*)' AIMMS Interface error in emm_sort64.  increase stack size.'
                 return
               endif
             ENDIF
             R=J
           ELSE
             IF(L.LT.J) THEN
               S=S+1
               STACK(S,1)=L
               STACK(S,2)=J
             ENDIF
             L=I
           ENDIF
           IF(L.LT.R) GO TO 20
         IF(S.GT.0) GO TO 10
         RETURN
         END
!=========================================================================================
  subroutine usehash(key,keys,arraysize,spot,initial_store)
  implicit none
! Uses a hash algorithm to assign/retrieve a spot in array "keys" based on a given "key", and stores the key in that spot if spot is blank, and returns the
! the storage spot as a result. If spot is -1, a place wasn't found, probably because it was full.
!
! note: for good performance, arraysize should be about 3 times as large as the maximum number of keys to store,
! and it should be a prime number.  Since a result of 0 is possible, the array is dimensioned from 0 to "arraysize"

    integer, intent(in)  :: arraysize
    character(len=*),intent(in) :: key
    character(len=*),intent(out) :: keys(0:arraysize)
    integer, intent(out) :: spot
    logical, intent(out) :: initial_store
    integer i
    integer ihash
    initial_store=.false.
    spot=ihash(key,arraysize)

    if(keys(spot).eq. ' ') then
       keys(spot)=key  ! add the key to the spot
       initial_store=.true.
       
       return
    elseif(keys(spot).eq.key) then
       return ! the key is already there at spot
    else  
! collision: two keys generate the same number

! so look for empty place nearby, upwards
      do i=spot+1,arraysize
        if(keys(i).eq. key) then
          spot=i
          return
        elseif(keys(i).eq. ' ') then ! if key not found, add it to first nonblank spot
          spot=i
          keys(i)=key
          initial_store=.true.
          return
        endif
      enddo
! Then look for empty place nearby, downwards
      do i=spot-1,0,-1
        if(keys(i).eq. key) then
          spot=i
          return
        elseif(keys(i).eq. ' ') then ! if key not found, add it to first nonblank spot
          spot=i
          keys(i)=key
          initial_store=.true.
          return
        endif
      enddo
    endif
! if it gets here, then the keys array is full.  
    spot=-1
    write(6,*)'AIMMS Interface error in usehash, keys array is full.  here are first and last 100 keys to verify fullness:'
    do i=0,100
      write(6,'(i6,1x,a)' ) i,trim(keys(i))
    enddo
    do i=arraysize-100,arraysize
      write(6,'(i6,1x,a)' ) i,trim(keys(i))
    enddo
    stop ' ' 
    return
    end 
!=========================================================================================
 integer function ihash(str,arraysize) 
 implicit none
 ! generates an integer hash number from a string, then generates a position where that key
 ! will be stored.  The position falls between 0 and "arraysize" which should be a prime
 ! number.
 
    character(len=*),intent(in) :: str
    integer,intent(in) :: arraysize
    integer hash

    integer :: i
    hash=5381 ! or other prime number 
    do i=1,len(str)
        hash = (ishft(hash,5) + hash) + ichar(str(i:i))
    end do
    hash=abs(hash)
    ihash=mod(hash,arraysize)

end function ihash

!===================================================================================================================================================

! AIMMS_ECP Invokes and transfers data to/from AIMMS ECP model   
      SUBROUTINE AIMMS_ECP(OPTION)
      use ecp_row_col
      use ifport,only:timef
      use ifcore, only : commitqq
      implicit none

! Steps in the Process 
! 1) Transfer ECP LP data to the the AIMMS ECP project.
! 2) Initialize the monitor.in.txt file to communicate with ecp.
! 3) Invoke the AIMMS ECP project from the command line with the monitor procudure.
! 4) Write out the monitor.in.txt file to instruct the AIMMS project to run the
!    mainExecution procedure and write results back to NEMS.
! 5) Wait for AIMMS to finish by periodically reading monitor.out.txt file.
! 6) initialize the monitor.in.txt file with a Wait command.

! argument option:  'end' causes the AIMMS project to be closed down via a
! command sent to monitor.in.txt
      
      include 'aimms_c_face'
      include 'parametr'
      INCLUDE 'ncntrl'

      character*3 option

!---------------------------------------------------------------
! AIMMS-related variables
      integer(KIND=4) ret,procedureRet,iret
      character*80 projectName,aimmsFolder
      logical lexist,aimms_opened/.false./,no_aimms/.false./,aimms_error
!
     integer monitordbg ! unit number for monitor.debug.txt
     common/monitor_ecp/monitordbg
     logical opened_yet/.false./  ! indicator if monitordbg has been opened yet.
     logical file_exists/.false./ ! indicator if file does exist or not
     logical lresult
     integer iPID, iPIDlist, iPID2 ! process ID from oscall_pid
     integer nmessage,nchar ! counts of lines and characters in
     integer ikill  ! set to 1 if aimms.exe has to be killed
     character curdate*8,curtime*10
     character*80 aimms64,AIMMSLOC*66
  
      real*4 timer,timer2,mtimer

      real*4 scalar_r(1)      ! single element real array to pass a scalar 
      integer*4 scalar_i(1)   ! single element integer array to pass a scalar 
      integer iyr,ipy,rs,ip,L
      integer iwait ! argument for oscall: if 0, wait indefinitly
      integer eunit,ntries,counter,ntriesmax/3/
      character cmd*200,args*200,line*150,filen*100
      logical license_issue

! first time through, get aimms foldername and open monitor debug file
      if(.not. opened_yet) then
      !  get AIMMS  foldername
          no_aimms=.false.
          call RTOSTRING('AIMMSLOC',AIMMSLOC) !  e.g., 'C:\AIMMS_Installation_Free_Releases\4.8.1.299-x64'
          aimmsFolder = trim(AIMMSLOC)//char(0)
          aimms64 = trim(AIMMSLOC)//'\bin\aimms.exe'
          inquire(file=aimms64,exist=lexist)
          if(.not. lexist) then
             write(6,'(2a)') 'AIMMS executable, "\bin\aimms.exe", not found in location specified in scedes by AIMMSLOC: ',trim(AIMMSLOC)
          endif

        opened_yet=.true.
        call unitunopened(100,999,monitordbg)
        open(monitordbg,file='ecp\monitor.debug.txt',status='unknown')
        rewind monitordbg
      endif  

      if (Option .eq. 'end') then
        if(aimms_opened) then
          call end_AIMMS
          aimms_opened=.false.
        endif
        return
      endif
      if(make_ecp_aimms) return ! if this is a run to generate AIMMS LP structure, don't invoke aimms, just return
 
      timer=timef()   
     
! 1) Send the LP coefficients in bulk to AIMMS, then send a subset of EMM arrays to aimms
!   First, write out each AIMMS coefficient array as a AIMMS parameter using the composite table format
     write(filen,'(a,i4,a)')  './ecp/composite_',curcalyr,'.txt'
     call unitunopened(100,999,iOutTxt)
     !if (AIM_Phase.eq.1) then 
         open(iOutTxt,file=filen,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
         rewind iOutTxt
         if (SKIP_ECPOML .eq. .FALSE. ) then   !not to pass coefficient values to AIMECP 
             do ip=1,max_aimms_param
                if(len_trim(aimparm(ip).name).gt.0) then
                  call AIMMS_OutTxt_ecp(aimparm(ip).name,  aimparm(ip).idxFirst, aimparm(ip).idxLast, aimparm(ip).setNames)
                endif
              enddo
          endif
          write(iOutTxt,'(a,i1,a)') 'AIMECPBG := ',AIMECPBG,' ;'

    !   Second, write out the EMM arrays to AIMMS where they will be used to derive the LP coefficient parameters in AIMMS directly, 
    !   eventually replacing the coeffient parameters passed in bulk 
          call AIMMS_Transfer_Out_ecp
          lresult=commitqq(IoutTxt)  ! use ifcore: force data to be written to file immediately
          close(iOutTxt)
    !elseif (AIM_Phase.eq.2) then
          !INQUIRE(file=filen, EXIST=file_exists)
          !if (file_exists.eq..true.) then
             !open(iOutTxt,file=filen,status='old',access='append',BUFFERED='YES',BUFFERCOUNT=10)
             !call AIMMS_Transfer_Out_ecp
             !lresult=commitqq(iOutTxt)  ! use ifcore: force data to be written to file immediately
             !close(iOutTxt)
          !else
             !write(6,'(a)') 'Composit file '//filen//' is missing. Fortran EMM arrays adjusted after LP solved cannot be passed to AIMMS.'
          !endif
    !endif
        
      write(6,*)'AIMMS Interface: seconds to write output for AIMMS',timef()-timer

      ntries=1
100   continue ! return to here from below if license error occurs to retry up to "ntriesmax-ntries" more times. 

      
! 2) inititalize message file used to direct actions of the aimms project monitor to wait so it doesn't start early.
      call unitunopened(100,999,EUNIT)
      open(eunit,file='ecp\monitor.in.txt',status='unknown')
      rewind eunit
      write(eunit,'(a)')      'sAction             := "Wait";'
      write(eunit,'(a,i4,a)') "curcalyr('1'):=",curcalyr,';'
      write(eunit,'(a,i2,a)') "curitr('1')  :=",curitr,  ';'
      lresult=commitqq(eunit)  ! use ifcore: force data to be written to file immediately
      close(eunit)
      call date_and_time(curdate,curtime)
      write(monitordbg,'(a,t45,3a,i5,i3)') 'monitor.in.txt  : Wait', curtime(1:2),':',curtime(3:10),curcalyr,curitr


!  3) Invoke AIMMS from the command line using OSCALL  
      if(.not. aimms_opened ) then
          

        l=len_trim(aimmsFolder)-1
        cmd=aimmsFolder(:l)//'\bin\aimms.exe '

        args='--hidden --license-wait-seconds 120 -RNEMS_monitor .\\ecp\\ecp.aimms'
!        args=' --license-wait-seconds 120 -RNEMS_monitor .\\ecp\\ecp.aimms'
        write(6,'(2a)') 'AIMMS Command line is ',trim(cmd)//' '//trim(args)
        write(6,'(a,i4,a)') 'AIMMS ',curcalyr,'    Opening AIMMS project, procedure NEMS_monitor'
        call date_and_time(curdate,curtime)
        write(monitordbg,'(a,t45,3a,i5,i3,i2)') '                : Opening Aimms Project', curtime(1:2),':',curtime(3:10),curcalyr,curitr

        iwait=0
        call oscall(iwait,cmd,args,iret)
        
        if(iret.eq.0) then
          aimms_opened=.true.      
        else
          write(6,'(a,i4,a)') 'AIMMS error running ecp/ecp.aimms, return code=',iret
          aimms_opened=.false.  
        endif

        write(6,'(a,i4,a,f8.1)') 'AIMMS ',curcalyr,'    Time to open project:',timef()-timer

      endif
    

      timer=timef()

! Initialize AIMMS output message file so this routine won't see old one and think AIMMS is finished
      call unitunopened(100,999,EUNIT)
      open(eunit,file='ecp\monitor.out.txt',status='unknown',SHARED)
      rewind eunit
      write(eunit,'(a)') 'executing' !  so loop below won't think it is already finished in loop below.
      lresult=commitqq(eunit)
      close(eunit)      
      
!4)  Tell AIMMS to invoke MainExecution via its input message file
      call unitunopened(100,999,EUNIT)
      open(eunit,file='ecp\monitor.in.txt',status='unknown',SHARED)
      rewind eunit
      write(eunit,'(a)')      'sAction             := "MainExecution";'
      write(eunit,'(a,i4,a)') "curcalyr('1'):=",curcalyr,';'
      write(eunit,'(a,i2,a)') "curitr('1')  :=",curitr,  ';'
      lresult=commitqq(eunit)  ! use ifcore: force data to be written to file immediately
      close(eunit)
      call date_and_time(curdate,curtime)
      write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.in.txt  : MainExecution', curtime(1:2),':',curtime(3:10),curcalyr,curitr
      
      counter=0
      line=' '

! 5) when AIMMS is done, its monitor procedure writes out a keyword "Completed" to monitor.out.txt. Wait for 
! for the signal, up to a time limit of 10 minutes, or 600 seconds (1200 half seconds)
      do while (counter.lt.1200 .and. (index(line,'Completed')+index(line,'Quit')+index(line,'Exited')).eq.0)
        call sleepqq(500)
        counter=counter+1
        iret=1
        open(eunit,file='ecp\monitor.out.txt',status='old',SHARED,action='READ',err=99)
        line=' '
        read(eunit,'(a)',err=99,end=99) line
!        write(6,'(a)') 'line='//trim(line)
        iret=0
        close(eunit)
99      continue 

      enddo
      call date_and_time(curdate,curtime)

      write(6,'(a,i4,a,f8.1)') 'AIMMS ',curcalyr,'    Time to run AIMMS MainExecution:',timef()-timer

      if(counter.ge.1200) then
 ! Wait time exceeded
         write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.out.txt  : wait time exceeded', curtime(1:2),':',curtime(3:10),curcalyr,curitr
         write(6,'(a)') 'AIMMS wait time exceeded. Showing AIMMS messages.log and checking for license issue.'
         license_issue=.false.
         inquire(file='ecp/log/messages.log',exist=lexist)
         if(lexist) then
           open(eunit,file='ecp/log/messages.log',status='old',SHARED,READONLY,err=999)
10         continue
             read(eunit,'(a)',end=998,err=999) line
             write(6,'(2a)')'AIMMS messages.log:  ',trim(line)
             if(index(line,'license').gt.0) then
               license_issue=.true.
             endif
             goto 10
998        continue
           close(eunit)
999        continue
         endif
! if an aimms.exe is still executing with the same ProcessID (iPID), kill it.
        args=' '
        iWait=-1
        ikill=0
        cmd='cmd /c tasklist -v -FI "IMAGENAME eq aimms.exe" > tasklist.txt'
        call oscall_PID(iWait,cmd,Args,iRet,iPID2) 
        inquire(exist=lexist,file='tasklist.txt')
        if(lexist) then
          open(eunit, file='tasklist.txt',status='old',READONLY)
19 continue
          read(eunit,'(a)',end=21) line
          if(index(line,'aimms.exe').gt.0) then
            line(:20)=''
            read(line,*,end=21,err=21) iPIDlist
            if(iPIDlist.eq.iPID) then
              ikill=1
              write(6,'(a,i6,a)') 'The aimms.exe is still executing.  Will kill the process ID ',iPID
              write(cmd,'(a,i6)')  'taskkill /F /PID ',iPID
              iWait=-1
              call oscall_PID(iWait,cmd,Args,iRet,iPID2) 
              goto 21
            else
              goto 19
            endif
          else
            goto 19
          endif
21        continue 
          close(eunit)
        endif        
        if(ikill.eq.0) then
          write(6,'(a)') 'AIMMS seems to have closed early. No aimms.exe process found with matching process ID.'
        endif
        if (license_issue .and. ntries.lt.ntriesmax) then
          write(6,'(a,i2)') 'AIMMS license issue.  Will retry. Number of tries so far: ',ntries
          ntries=ntries+1
          aimms_opened=.false.
          go to 100
        elseif(ntries.lt.ntriesmax.and.ikill.eq.1 .and. nchar.eq.3) then  ! when AIMMS stays open and writes only 3 non-printable characters in message.log
          write(6,'(a,i2)') 'AIMMS wait time issue. Will retry. Number of tries so far: ',ntries
          ntries=ntries+1
          aimms_opened=.false.
          go to 100  ! above at subroutine start
        else
          iret=900
          
          write(6,'(a)') 'AIMMS wait time exceeded. Stopping now to avoid confusion.'
          
          stop
        endif
      else
        if(index(line,'Exited').gt.0) then
! Early exit
          write(6,'(a)') 'AIMMS Exited early. Likely an error in the AIMMS code or transfer data.  See last line of log/messages.log'
          aimms_opened=.false.
          iret=900
        elseif(index(line,'Completed').gt.0) then
! Normal Completion
          write(monitordbg,'(a,t75,3a,i5,i3,i2)') 'monitor.out.txt  : '//trim(line(5:)), curtime(1:2),':',curtime(3:10),curcalyr,curitr
          ! inititalize message file used to direct actions of the aimms project monitor to wait so it doesn't start early.

! 6) initialize the monitor.in.txt file with a Wait command.
          call unitunopened(100,999,EUNIT)
          open(eunit,file='ecp\monitor.in.txt',status='unknown')
          rewind eunit
          write(eunit,'(a)')      'sAction             := "Wait";'
          write(eunit,'(a,i4,a)') "curcalyr('1'):=",curcalyr,';'
          write(eunit,'(a,i2,a)') "curitr('1')  :=",curitr,  ';'
          lresult=commitqq(eunit)  ! use ifcore: force data to be written to file immediately
          close(eunit)
          call date_and_time(curdate,curtime)
          write(monitordbg,'(a,t45,3a,i5,i3)') 'monitor.in.txt  : Wait', curtime(1:2),':',curtime(3:10),curcalyr,curitr
        endif

     endif
     
     
     
   return


CONTAINS

!===================================================================================================================================================
Subroutine End_AIMMS
  integer ntries,nmax/240/
! write Quit to message file to tell aimms project monitor to exit
      call unitunopened(100,999,EUNIT)
      open(eunit,file='ecp\monitor.in.txt',status='unknown',SHARED)
      rewind eunit
      write(eunit,'(a)')      'sAction             := "Quit";'
      close(eunit)

      call date_and_time(curdate,curtime)
      write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.in.txt  : Quit', curtime(1:2),':',curtime(3:10),curcalyr,curitr

!   need to wait until project is closed. May take 30 seconds to close 
!   Added statement in MainTermination to write "Exited" to monitor.out.txt so that should
!   be signal to stop
      ntries=1
      do while (ntries.lt.nmax)
        open(eunit,file='ecp\monitor.out.txt',status='old',SHARED,READONLY)
        flush eunit
        read(eunit,'(a)',err=99,end=99) line
        close(eunit)
        if(index(line,'Exited').gt.0) then
          exit  ! exit do while
        endif
99      ntries=ntries+1
        call sleepqq(500) ! wait 1/2 second
      enddo
      write(6,'(a,i4,a,i4)') 'AIMMS Exiting, number of monitor.out.txt checks ',ntries,', max number set to ',nmax
      call date_and_time(curdate,curtime)
      if(ntries.eq.nmax) then
        write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.out.txt : wait for Exited exceeded', curtime(1:2),':',curtime(3:10),curcalyr,curitr
      else
        write(monitordbg,'(a,t45,3a,i5,i3,i2)') 'monitor.out.txt : '//trim(line(5:)), curtime(1:2),':',curtime(3:10),curcalyr,curitr
      endif

end subroutine end_aimms

! end of CONTAINed routines--near duplicates of ecp version of routine
End Subroutine AIMMS_ECP

!===================================================================================================================================================

subroutine ecp_assign_coeff
! subroutine to assign an entry to the ecp LP coefficient storage array given ecpcolnam, ecprownam, and ecpcoeff
  use ecp_row_col
  implicit none

  integer ic
  if(len_trim(ecpcolnam).eq.0 .or. len_trim(ecprownam).eq.0) return

  if (cnt_ecp_coeff .lt. max_ecp_coeff) then   
    cnt_ecp_coeff = cnt_ecp_coeff + 1
    ecp_coeff(cnt_ecp_coeff).ecpcolnam           = ecpcolnam
    ecp_coeff(cnt_ecp_coeff).ecprownam           = ecprownam
    ecp_coeff(cnt_ecp_coeff).aimms_col_ID_num    = aimms_col_ID_num
    ecp_coeff(cnt_ecp_coeff).aimms_row_ID_num    = aimms_row_ID_num
    ecp_coeff(cnt_ecp_coeff).coeff8              = ecpcoeff8
    ecp_coeff(cnt_ecp_coeff).ecpsub              = ecpsub
!   ecp_coeff(cnt_ecp_coeff).iset_elements       = iset_elements  ! will assign these after sorting coefficients into parameter groups

  else
    write(6,'(a)')  'AIMMS Interface error: Assigning AIMMS coefficient, cnt_ecp_coeff exceeds max_ecp_coeff, col/row='//ecpcolnam//' '//ecprownam
    write(io,'(a)') 'AIMMS Interface error: Assigning AIMMS coefficient, cnt_ecp_coeff exceeds max_ecp_coeff, col/row='//ecpcolnam//' '//ecprownam
    stop
  endif

  return

end subroutine ecp_assign_coeff

!===================================================================================================================================================
subroutine ecp_set_AIMMS_col_ID(mask_arg)
! subroutine to set aimms column ID (aimms_col_ID_num) for given mask_arg.  If not found,
! define new aimms column and store the aimms column  attributes from like-named
! variables in calling routine on first use of a unique mask_arg:
!  colnam_aimms ! AIMMS column name 
!  csetnam(max_set)    ! indexing set names
! Determine the character positions of indexing fields in the column name based on finding mask characters ("*") in colnam_mask
!  indstt(max_set)    ! position in oml colnam where each indexing field starts
!  indend(max_set)    ! position in oml colnam where each indexing field ends
!
  use ecp_row_col
  implicit none
  character*(*) mask_arg
  integer ifound
  integer ic,i,j  ! do loop indices
  integer L       ! length of the mask
  integer*2 LM    ! length of the mask excluding parentheses, or the length of the oml row/col name described by the mask
  integer NL    ! number of left  parentheses in mask
  integer NR    ! number of right parentheses in mask
  integer nset  ! number of set positions in mask
  integer nset2 ! number of set identifiers in setnam
  integer iparen ! location of first parenthesis
  integer iconst ! length of colnam_mask up to first paren
  colnam_mask=mask_arg
  aimms_col_ID_num=-1
  if(colnam_mask.eq.' ') return
  ic=-1
  call usehash(colnam_mask, colmask_hash, max_col_aimms, ic, initial_store)
  aimms_col_ID_num=ic  ! aimms_col_ID_num is integer*2, ic argument is integer*4
  if(.not. initial_store) then
    csetnam(1:max_set)=' '       ! initialize so don't have to in calling routine
    cindstt=0
    cindend=0
    
    RETURN
    
  endif

  col_aimms(aimms_col_ID_num).colnam_mask  = colnam_mask

!  If "colnam_aimms" is blank (not assigned in calling program), then generate an AIMMS col identifer name and issue error message.
    if(colnam_aimms.eq.' ') then
      L=len_trim(colnam_mask)
      colnam_aimms='c'
      j=1
      do i=1,L
        if(index('()*!',colnam_mask(i:i)).eq.0) then
          j=j+1
          if(j.le.len(colnam_aimms)) then
            colnam_aimms(j:j)=colnam_mask(i:i)
           endif
         endif
      enddo
      write(io,'(3a)') 'MISSING: missing colnam_aimms for this colnam_mask: ',trim(colnam_mask),'. Initialize colnam_aimms setting for this mask in aimecp.xlsx. Will use ',trim(colnam_aimms),' for now'
      write(io,'(3a)') 'AIMMS Interface error: ECP: no colnam_aimms for this colnam_mask: ',trim(colnam_mask),'. Initialize colnam_aimms setting for this mask in aimecp.xlsx. Will use ',trim(colnam_aimms),' for now'
    endif
    col_aimms(aimms_col_ID_num).colnam_aimms = colnam_aimms
    col_aimms(aimms_col_ID_num).setnam(1:max_set) = csetnam(1:max_set)
    ic=-1
    call usehash(colnam_aimms, colname_hash, max_col_aimms, ic, initial_store)
    col_aimms_ptr(ic)=aimms_col_ID_num  ! with this, can get to the column info location (which is hash based on the mask) given the aimms identifier 
    
    cindstt=0
    cindend=0
    nset=0
! identify the character positions in the row names based on where the mask characters "*" are found

    L=len_trim(colnam_mask)
    if(index(colnam_mask,'!').gt.1) L=index(colnam_mask,'!')-1   ! strip off "!xxx" used as a mask exception string
    LM=0
    NL=0
    NR=0
    do i=1,L
      if(colnam_mask(i:i).eq.'(') then
        NL=NL+1
        nset=nset+1
        if(nset.le.max_set) cindstt(nset)=LM+1
      elseif(colnam_mask(i:i).eq.')') then
        NR=NR+1
        if(nset.le.max_set) cindend(nset)=LM
      elseif(colnam_mask(i:i).eq.'*') then
        LM=LM+1
      else
        LM=LM+1
      endif
    enddo
  
    if(LM.eq.0 .or. lm.gt.8 .or. NR.ne.NL .or. nset.gt.max_set) then   ! the mask have balanced parentheses and have 6 or few * fields
      write(6,'(10a)') 'AIMMS Interface error in ecp_set_AIMMS_col_ID, bad mask: ',trim(colnam_mask)
      csetnam(1:max_set)=' '       ! initialize so don't have to in calling routine
      return
    endif
    col_aimms(aimms_col_ID_num).indstt=cindstt
    col_aimms(aimms_col_ID_num).indend=cindend   
! make sure that's how many set names are defined
    nset2=0
    do i=1,max_set
      if(len_trim(csetnam(i)).gt.0) then
        nset2=nset2+1
      endif
    enddo
    if(nset2 .ne. nset) then
      if(nset2.eq.0) then
        write(6,'(10a)') 'AIMMS Interface error, subroutine ecp_set_AIMMS_col_ID, oml col name mask: ',trim(colnam_mask),' aimms set names not defined for ',trim(col_aimms(aimms_col_ID_num).colnam_aimms)
        do i=1,nset2
          csetnam(i)='Dummy'//char(47+i)
        enddo
      else
        write(6,'(10a)') 'AIMMS Interface error, subroutine ecp_set_AIMMS_col_ID, oml col name mask: ',trim(colnam_mask),' aimms set names: ',((trim(csetnam(i)),' '),i=1,nset2)
      endif 
    endif    
    
 
  csetnam(1:max_set)=' '      
  colnam_AIMMS=' '
  cindstt=0
  cindend=0
  return 
end subroutine ecp_set_AIMMS_col_ID

!===================================================================================================================================================
subroutine ecp_set_AIMMS_row_ID(mask_arg)
! subroutine to set aimms row ID (aimms_row_ID_num) for given "mask_arg" setting.  If not found,
! define new aimms row and store the aimms row  attributes from like-named
! variables in calling routine on first use of unique mask_arg:
!  rownam_aimms ! AIMMS row name 
!  rsetnam(max_set)    ! indexing set names
! Determine this character positions of indexing fields in the row name based on finding mask characters ("*") in rownam_mask
!  indstt(max_set)    ! position in oml rownam where each indexing field starts
!  indend(max_set)    ! position in oml rownam where each indexing field ends
!
!subsequent calls, look up the mask
  use ecp_row_col
  implicit none
  include 'omlall.fi'

  character*(*) mask_arg
  integer ifound
  integer ir,ic,i,j  ! do loop indices
  integer L     ! length of the mask
  integer*2 LM    ! length of the mask excluding parentheses, or the length of the oml row/col name described by the mask
  integer NL    ! number of left  parentheses in mask
  integer NR    ! number of right parentheses in mask
  integer nset  ! number of set positions in mask
  integer nset2 ! number of set identifiers in setnam
  integer iparen ! location of first parenthesis
  integer iconst ! length of rownam_mask up to first paren
  integer iret
  character*2  rtype_postfix,rtype*1
  integer ipostfix
  character*16 rw16
 
  rw16=ecprownam
 
  rownam_mask=mask_arg
  aimms_row_ID_num=-1
  if(rownam_mask.eq.' ') return

! row_type optionally may be set in calling routine during initialization of AIMMS row mask groups.  If so, use it.
! if row_type is blank, then determine row type
! from ecprownam, or if ecprownam is blank, assumed the default OML rowtype of "E" for equality.
  if(row_type.eq.' ') then  
    if (   ecprownam.eq.'ECPCOSTS') then
      row_type='N'
    elseif(ecprownam.eq.'BOUNDUP') then
      row_type='L'
    elseif(ecprownam.eq.'BOUNDLO') then
      row_type='G'
    elseif(ecprownam.ne.' ') then
      call usehash(ecprownam, ecp_row_name, max_ecp_row_hash, spot, initial_store)
      row_type=ecp_row_sol(spot).row_type
      if(row_type.eq.' ') then
        row_type='E'
        ecp_row_sol(spot).row_type='E'
      endif
      if(initial_store) then
        cnt_ecp_row = cnt_ecp_row + 1
      endif
    endif
  endif
  ir=-1
! Given the mask and row_type, check if there is already an AIMMS_row_ID_num   
  call usehash(rownam_mask//row_type, rowmask_hash, max_row_aimms, ir, initial_store)
  aimms_row_ID_num=ir  ! aimms_row_ID_num is integer*2, ir argument is integer*4
  if(.not. initial_store) then
    rsetnam(1:max_set)=' '   ! initialize so don't have to in calling routine
    rindstt=0
    rindend=0
    row_type=' '
    rownam_AIMMS=' '

    RETURN

  endif
  
! If here, then  a "row_AIMMS" record has not been created yet. So create one and assign
! "rownam_aimms" as the AIMMS row identifier for this row mask group and store the associated "rsetnam"
! domain sets.  

    row_aimms(aimms_row_ID_num).rownam_mask  = rownam_mask
    row_aimms(aimms_row_ID_num).row_type  = row_type
    
!  If "rownam_aimms" is blank (not assigned in calling program), then generate an AIMMS row identifer name and issue error message.
    if(rownam_aimms.eq.' ') then

      L=len_trim(rownam_mask)
      rownam_aimms='r'
      j=1
      do i=1,L
        if(index('()*!',rownam_mask(i:i)).eq.0) then
          j=j+1
          if(j.le.len(rownam_aimms)) then
            rownam_aimms(j:j)=rownam_mask(i:i)
          endif
        endif
      enddo
      L=index('  E  L  G  N  ',row_type)
      if(L.gt.0) then
        rtype_postfix = '  eq le ge n  '(L:)
         else
        rtype_postfix='eq'
         endif
      rownam_aimms=trim(rownam_aimms)//rtype_postfix

      write(io,'(8a)') 'MISSING: missing rownam_aimms for this rownam_mask: ',trim(rownam_mask),', row_type='//row_type//'. Initialize the rownam_aimms setting for this mask in aimecp.xlsx. Will use ',trim(rownam_aimms),' for now'
      write(6,'(8a)') 'AIMMS Interface error: ECP: no rownam_aimms for this rownam_mask: ',trim(rownam_mask),', row_type='//row_type//'. Initialize the rownam_aimms setting for this mask in aimecp.xlsx. Will use ',trim(rownam_aimms),' for now'
    endif

! 
    row_aimms(aimms_row_ID_num).rownam_aimms = rownam_aimms
    row_aimms(aimms_row_ID_num).setnam(1:max_set) = rsetnam(1:max_set)
    ir=-1
    call usehash(rownam_aimms, rowname_hash, max_row_aimms, ir, initial_store)
    row_aimms_ptr(ir)=aimms_row_ID_num  ! with this, can get to the row info location (which is based on the mask) given the aimms identifier 

    rindstt=0
    rindend=0
    row_type=' '
    rownam_AIMMS= ' ' 

    nset=0
! identify the character positions in the row names based on where the mask characters "*" are found

    L=len_trim(rownam_mask)
    if(index(rownam_mask,'!').gt.1) L=index(rownam_mask,'!')-1   ! strip off "!xxx" used as a mask exception string
    LM=0
    NL=0
    NR=0
    do i=1,L
      if(rownam_mask(i:i).eq.'(') then
        NL=NL+1
        nset=nset+1
      if(nset.le.max_set) rindstt(nset)=LM+1
      elseif(rownam_mask(i:i).eq.')') then
        NR=NR+1
      if(nset.le.max_set) rindend(nset)=LM
      elseif(rownam_mask(i:i).eq.'*') then
        LM=LM+1
      else
        LM=LM+1
      endif
    enddo
  
    if(LM.eq.0 .or. lm.gt.8 .or. NR.ne.NL .or. nset.gt.max_set) then ! the mask, excluding parentheses, should be 1 to 8 characters and have balanced parentheses
      write(6,'(10a)') 'AIMMS Interface error in ecp_set_AIMMS_row_ID, bad mask: ',trim(rownam_mask)
      rsetnam(1:max_set)=' '   ! initialize so don't have to in calling routine
      return
    endif

! make sure that's how many set names are defined
    nset2=0
    do i=1,max_set
      if(len_trim(rsetnam(i)).gt.0) nset2=nset2+1
    enddo
    if(nset2 .ne. nset) then
      if(nset2.eq.0) then
      write(6,'(10a)') 'AIMMS Interface error in subroutine ecp_set_AIMMS_row_ID, oml row name mask: ',trim(rownam_mask),' aimms set names not defined for ',trim(row_aimms(aimms_row_ID_num).rownam_aimms)
        do i=1,nset2
          rsetnam(i)='Dummy'//char(47+i)
        enddo
      else
      if(nset2.eq.nset+1 .and. rsetnam(nset2)(1:5).eq.rsetnam(nset)(1:5)) then  ! see if this will work as alias for last set
          rindstt(nset2)=rindstt(nset)
          rindend(nset2)=rindend(nset)
        else
        write(6,'(10a)') 'AIMMS Interface error in subroutine ecp_set_AIMMS_row_ID, oml row name mask: ',trim(rownam_mask),' aimms set names: ',(trim(rsetnam(i)),' ',i=1,nset2)
        endif
      endif
    endif    

    row_aimms(aimms_row_ID_num).indstt=rindstt
    row_aimms(aimms_row_ID_num).indend=rindend   
    
  rownam_AIMMS=' '
  rsetnam(1:max_set)=' '
  rindstt=0
  rindend=0
  row_type=' '
  return 
end subroutine ecp_set_AIMMS_row_ID
!=========================================================================================
subroutine ecp_aimms_deallocate
 use ecp_row_col
 implicit none
  if (  allocated(ecp_coeff)   ) then
    deallocate(ecp_coeff)
  endif
  if (  allocated(ecp_sortidx) ) then
    deallocate(ecp_sortidx)
  endif
  if (  allocated(ecp_sortkey) ) then
    deallocate(ecp_sortkey)
  endif
  if (  allocated(ecp_rowidx) ) then
    deallocate(ecp_rowidx)
  endif
  if (  allocated(ecp_rowkey) ) then
    deallocate(ecp_rowkey)
  endif

  if (  allocated(ecp_row_name)   ) then
    deallocate(ecp_row_name)
  endif

  if (  allocated(ecp_col_name)   ) then
    deallocate(ecp_col_name)
  endif

  if (allocated(ecp_col_sol)) then
    deallocate(ecp_col_sol)
  endif
  if (allocated(ecp_row_sol)) then
    deallocate(ecp_row_sol)
  endif
  if (allocated(row_sol_names)) then
    deallocate(row_sol_names)
  endif
  if (allocated(row_sol_types)) then
    deallocate(row_sol_types)
  endif
  if (allocated(col_sol_names)) then
    deallocate(col_sol_names)
  endif

end subroutine ecp_aimms_deallocate

subroutine ecp_aimms_init
! initialize aimms-ecp-related row, col, and coefficients and allocate arrays dynamically so space is above 2GB area.
! Read aimecp.xlsx to get AIMMS identifier names and row/column masks to decode OML row and column names
 use ecp_row_col
 implicit none
 include 'parametr'
 include 'ncntrl'
 integer file,iset,i5,i
 logical lopened,not_done_yet/.true./
 
! declarations for local aimecp.xlsx inputs
  logical read_aimecp/.false./
  !integer*4 c_count,r_count,p_count                   ! number of row items for columns, rows, and parameters
  character(LEN=24), allocatable :: xcolnam(:)        ! xlsx AIMMS column    names for colnam_aimms assignments
  character(LEN=30), allocatable :: xcolsetnam(:,:)   ! xlsx AIMMS column    names for colnam_aimms assignments
  character(LEN=30), allocatable :: xcolmask(:)       ! xlsx oml column mask for an AIMMS column
!  character(LEN=150),allocatable :: xc_comment(:)     ! xlsx definition/description of AIMMS column
 
  character(LEN=24), allocatable :: xrownam(:)        ! xlsx AIMMS row       names for rownam_aimms assignments
  character(LEN=30), allocatable :: xrowsetnam(:,:)   ! xlsx AIMMS row       names for rownam_aimms assignments
  character(LEN=30), allocatable :: xrowmask(:)       ! xlsx oml row    mask for an AIMMS row
  character(LEN=1), allocatable :: xrow_type(:)      ! xlsx row type bound for AIMMS row: E =, L <=, G >=, or N nonconstrained/free
!  character(LEN=150),allocatable :: xr_comment(:)    ! xlsx definition/description of AIMMS row
  
  character(LEN=38), allocatable :: xparamname(:)     ! xlsx AIMMS parameter names 
  character(LEN=30), allocatable :: xparsetnam(:,:)   ! xlsx AIMMS parameter set names 
  
  character(LEN=16) rname
  integer ixlsx,j
! end of local xlsx data  
 
 
 character*8 year_iter,filen*25
 LOGICAL NEW,LEXIST
 INTEGER FILE_MGR
 EXTERNAL FILE_MGR
 


  call ecp_aimms_deallocate 
 
  allocate( ecp_coeff(max_ecp_coeff) )
  ecp_coeff(:).ecpcolnam =' '
  ecp_coeff(:).ecprownam =' ' 
  ecp_coeff(:).coeff8 = 0.         
  ecp_coeff(:).aimms_col_ID_num=-1
  ecp_coeff(:).aimms_row_ID_num=-1
  do i=1,max_domain_sets 
    ecp_coeff(:).iset_elements(i)=0
    ecp_coeff(:).cset_elements(i)=' '
  enddo
  ecp_coeff(:).ecpsub=' '
  
  allocate( ecp_sortidx(max_ecp_coeff) )
  allocate( ecp_sortkey(max_ecp_coeff) )

  allocate( ecp_rowidx(0:max_ecp_row_hash) )
  allocate( ecp_rowkey(0:max_ecp_row_hash) )
 ! allocate( ecp_colidx(0:max_ecp_col_hash) )
 ! allocate( ecp_colkey(0:max_ecp_col_hash) )
  allocate( ecp_row_name(0:max_ecp_row_hash) )
  allocate( ecp_col_name(0:max_ecp_col_hash) )

  ecp_row_name=' '
  ecp_col_name=' '

  if(.not. allocated (col_aimms)) then  ! do once. do not deallocate.! do once. do not deallocate. the data may change over the model horizon
    allocate(     col_aimms(0:max_col_aimms) )
    allocate(  colmask_hash(0:max_col_aimms) )
    allocate(  colname_hash(0:max_col_aimms) )
    allocate( col_aimms_ptr(0:max_col_aimms) )
    colmask_hash=' '
    colname_hash=' '
    col_aimms_ptr=0
    col_aimms(:).colnam_mask=' '
    col_aimms(:).colnam_aimms=' '
    do iset=1,max_set
      col_aimms(:).indstt(iset)=0
      col_aimms(:).indend(iset)=0
      col_aimms(:).setnam(iset)=' '
    enddo
    col_aimms(:).needsol=0
  endif

  if(.not. allocated (row_aimms)) then
    allocate(     row_aimms(0:max_row_aimms) )
    allocate(  rowmask_hash(0:max_row_aimms) )
    allocate(  rowname_hash(0:max_row_aimms) )
    allocate( row_aimms_ptr(0:max_row_aimms) )
    rowmask_hash=' '
    rowname_hash=' '
    row_aimms_ptr=0
    row_aimms(:).rownam_mask=' '
    row_aimms(:).rownam_aimms=' '
     do iset=1,max_set
      row_aimms(:).indstt(iset)=0
      row_aimms(:).indend(iset)=0
      row_aimms(:).setnam(iset)=' '
    enddo
    row_aimms(:).needsol=0
  endif
 
  allocate( ecp_col_sol(0:max_ecp_col_hash) )
  allocate( ecp_row_sol(0:max_ecp_row_hash) )
  allocate( row_sol_names(max_ecp_row) )
  allocate( row_sol_types(max_ecp_row) )
  allocate( col_sol_names(max_ecp_col) )
  cnt_ecp_coeff=0
  cnt_ecp_row=0
  cnt_ecp_col=0
  
  rownam_aimms=' '
  colnam_aimms=' '
  rownam_mask=' '
  colnam_mask=' '
  csetnam(1:max_set)=' '
  rsetnam(1:max_set)=' '
  row_sol_names=' '
  row_sol_types=' '
  col_sol_names=' '
  do i5=1,5   ! 5 solution fields
    ecp_col_sol(:).solval(i5)=0.
    ecp_row_sol(:).solval(i5)=0.
  enddo
  ecp_col_sol(:).AIMMS_col_ID_num=-1
  ecp_col_sol(:).nsets=0
  ecp_col_sol(:).ecpcolnam=' '
  ecp_col_sol(:).status=' ' 

  ecp_row_sol(:).AIMMS_row_ID_num=-1
  ecp_row_sol(:).nsets=0
  ecp_row_sol(:).ecprownam=' '
  ecp_row_sol(:).row_type=' '
  ecp_row_sol(:).status=' '

  do iset=1,max_set   ! max set per aimms row/col identifier
    ecp_col_sol(:).iset_elements(iset)=0
    ecp_col_sol(:).cset_elements(iset)=' '
    ecp_row_sol(:).iset_elements(iset)=0
    ecp_row_sol(:).cset_elements(iset)=' '
  enddo
  
  num_ecp_col_sol=0
  num_ecp_row_sol=0

   aimparm(1:max_aimms_param).idxFirst=0
   aimparm(1:max_aimms_param).idxLast=0
     
  if(.not. read_aimecp) then  ! only need to read aimecp.xlsx once
  
     aimparm(1:max_aimms_param).name=' '
     do i=1,max_domain_sets
       aimparm(1:max_aimms_param).setnames(i)=' '
     enddo
     
     aimparm(1:max_aimms_param).numsets=0
     read_aimecp=.true.
     new=.false.
     ixlsx=file_mgr('O','AIMECP',new)   ! aimecp.xlsx.  use upper case prefix to match name in FILELIST
     if(ixlsx.eq.-1) then
        inquire(file='aimecp.xlsx',exist=lexist)
        if(.not.lexist) then
            write(6,*)' aimecp.xlsx does not exist. put it in current folder if not running in NEMS.'
            stop
        else
          call unitunopened(100,999,ixlsx)
          open(ixlsx,file='aimecp.xlsx',status='old',READONLY)
        endif
      endif
        
         
     call readRngXLSX(ixlsx,'col_row')  ! read sheet "col_row" range names and the data in them
     close(ixlsx)
     rname='C_COUNT'
     call getrngi4(rname,c_count,1,1,1)
     rname='R_COUNT'
     call getrngi4(rname,r_count,1,1,1)
! allocate arrays to hold aimms column and row definitions
     allocate (xcolnam(       c_count))
     allocate (xcolsetnam(    c_count,max_set))
     allocate (xcolmask(      c_count))
!     allocate (xc_comment(c_count))
     allocate (xrownam(       r_count))
     allocate (xrowsetnam(    r_count,max_set))
     allocate (xrowmask(      r_count))
     allocate (xrow_type(     r_count))
!     allocate (xr_comment(r_count))
!                                           range,destination,     cols,rows,groups
     rname='COLNAM_AIMMS    '; call getrngc(rname,xcolnam,            1,c_count,1)
     rname='COLNAM_MASK     '; call getrngc(rname,xcolmask,           1,c_count,1)
     rname='CSETNAM1        '; call getrngc(rname,xcolsetnam(1,1),    1,c_count,1)
     rname='CSETNAM2        '; call getrngc(rname,xcolsetnam(1,2),    1,c_count,1)
     rname='CSETNAM3        '; call getrngc(rname,xcolsetnam(1,3),    1,c_count,1)
     rname='CSETNAM4        '; call getrngc(rname,xcolsetnam(1,4),    1,c_count,1)
     rname='CSETNAM5        '; call getrngc(rname,xcolsetnam(1,5),    1,c_count,1)
     rname='CSETNAM6        '; call getrngc(rname,xcolsetnam(1,6),    1,c_count,1)

!     rname='C_COMMENT       '; call getrngc(rname,xc_comment,             1,c_count,1)

     rname='ROWNAM_AIMMS    '; call getrngc(rname,xrownam,            1,r_count,1)
     rname='ROWNAM_MASK     '; call getrngc(rname,xrowmask,           1,r_count,1)
     rname='ROW_TYPE        '; call getrngc(rname,xrow_type,          1,r_count,1)
     rname='RSETNAM1        '; call getrngc(rname,xrowsetnam(1,1),    1,r_count,1)
     rname='RSETNAM2        '; call getrngc(rname,xrowsetnam(1,2),    1,r_count,1)
     rname='RSETNAM3        '; call getrngc(rname,xrowsetnam(1,3),    1,r_count,1)
     rname='RSETNAM4        '; call getrngc(rname,xrowsetnam(1,4),    1,r_count,1)
     rname='RSETNAM5        '; call getrngc(rname,xrowsetnam(1,5),    1,r_count,1)
     rname='RSETNAM6        '; call getrngc(rname,xrowsetnam(1,6),    1,r_count,1)

     !     rname='R_COMMENT       '; call getrngc(rname,xr_comment,             1,r_count,1)

     ixlsx=file_mgr('O','AIMECP',new)     ! aimecp.xlsx.  use upper case prefix to match name in FILELIST
     if(ixlsx.eq.-1) then
        inquire(file='aimecp.xlsx',exist=lexist)
        if(.not.lexist) then
            write(6,*)' aimecp.xlsx does not exist. put it in current folder if not running in NEMS.'
        else
          call unitunopened(100,999,ixlsx)
          open(ixlsx,file='aimecp.xlsx',status='old',READONLY)
        endif
      endif
     call readRngXLSX(ixlsx,'parameter')  ! read sheet "parameter" range names and the data in them
     close(ixlsx)
     rname='P_COUNT'
     call getrngi4(rname,p_count,1,1,1)
! allocate arrays to hold aimms column and row definitions
     allocate (xparamname(p_count))
     allocate (xparsetnam(p_count,max_domain_sets))
     rname='PARAMNAME       '; call getrngc(rname,xparamname,     1,p_count,1)
     rname='PSETNAM1        '; call getrngc(rname,xparsetnam(1,1),1,p_count,1)
     rname='PSETNAM2        '; call getrngc(rname,xparsetnam(1,2),1,p_count,1)
     rname='PSETNAM3        '; call getrngc(rname,xparsetnam(1,3),1,p_count,1)
     rname='PSETNAM4        '; call getrngc(rname,xparsetnam(1,4),1,p_count,1)
     rname='PSETNAM5        '; call getrngc(rname,xparsetnam(1,5),1,p_count,1)
     rname='PSETNAM6        '; call getrngc(rname,xparsetnam(1,6),1,p_count,1)
     rname='PSETNAM7        '; call getrngc(rname,xparsetnam(1,7),1,p_count,1)
     rname='PSETNAM8        '; call getrngc(rname,xparsetnam(1,8),1,p_count,1) ! max_domain_sets is 8 in ecp, 9 in ecp
     if(max_domain_sets.ge.9) then
       rname='PSETNAM9        '; call getrngc(rname,xparsetnam(1, 9),1,p_count,1) ! ecp only
       rname='PSETNAMA        '; call getrngc(rname,xparsetnam(1,10),1,p_count,1) ! ecp only
       rname='PSETNAMB        '; call getrngc(rname,xparsetnam(1,11),1,p_count,1) ! ecp only
     endif     

     ixlsx=file_mgr('O','AIMECP',new)       ! aimecp.xlsx.  use upper case prefix to match name in FILELIST
     if(ixlsx.eq.-1) then
        inquire(file='aimecp.xlsx',exist=lexist)
        if(.not.lexist) then
            write(6,*)' aimecp.xlsx does not exist. put it in current folder if not running in NEMS.'
        else
          call unitunopened(100,999,ixlsx)
          open(ixlsx,file='aimecp.xlsx',status='old',READONLY)
        endif
      endif
     call readRngXLSX(ixlsx,'ecpSetMatch')  ! read sheet "ecpSetMatch" range names and the data in them
     close(ixlsx)
     rname='ECPLOOKCOUNT'
     call getrngi4(rname,ECPSetLookCount,1,1,1)
     allocate (xecpSetLook(ECPSetLookCount,5))
     rname='ECPLOOK         '; call getrngc(rname,xecpSetLook,ECPSetLookCount,5,1)
     
! establish AIMMS identifiers and set names
      rownam_AIMMS=' '
      rownam_mask=' '
      aimms_col_ID_num=-1
      aimms_row_ID_num=-1
      csetnam=' '
      rsetnam=' ' 

! On the first time ecp_set_AIMMS_Col_ID is called with a unique mask argument, it adds the mask to a list
! and records the colnam_AIMMS and AIMMS set names for decoding the OML identifier with the mask.  So in the first call make
! sure colnam_AIMMS and csetnam(:) are filled.  So I'm doing that here.  Subsequent calls need just the mask argument.

    do i=1,c_count
      colnam_AIMMS=xcolnam(i)
      csetnam(1:max_set)=xcolsetnam(i,1:max_set)
      call ecp_set_aimms_col_ID(xcolmask(i))
    enddo
    colnam_AIMMS=' '

! On the first time ecp_set_AIMMS_Row_ID is called with a unique mask argument, it adds the mask to a list
! and records the rownam_AIMMS and AIMMS set names for decoding the OML identifier with the mask.  So in the first call make
! sure rownam_AIMMS and rsetnam(:) are filled.  So I'm doing that here.  Subsequent calls need just the mask argument.  
! Assigning row_type is necessary to separate row groups with mixed row_types or ones that depend on model options or year.

    ecprownam=' ' 
    
    do i=1,r_count
      rownam_AIMMS=xrownam(i)
      row_type=xrow_type(i)
      rsetnam(1:max_set)=xrowsetnam(i,1:max_set)
      call ecp_set_aimms_row_ID(xrowmask(i))
    enddo
    rownam_AIMMS= ' ' 
    row_type=' '

    do i=1,p_count
      aimparm(i).name = xparamname(i)
      aimparm(i).setnames(1:max_domain_sets) = xparsetnam(i,1:max_domain_sets)
    enddo
   
    
! write set definitions out, then read them back into a single data structure    
    call unitunopened(100,999,io)
    open(io,file='ecp\ecpsetdata.dat',status='unknown',BUFFERED='YES',BUFFERCOUNT=5,err=48)
    rewind io
    goto 49
48  continue
    ! if calling this routine from readaimlis.exe or other program outside of nems, ecp folder won't exist, so just write it in local
     open(io,file='ecpsetdata.dat',status='unknown',BUFFERED='YES',BUFFERCOUNT=5)   
49   continue
    call write_ecp_sets
    close(io)
    call read_ecp_sets
    close(io)
  endif  
  
  IF (AIMECPBG .EQ. 1) THEN
  ! open coefficient debug file   
   if(not_done_yet) then
    not_done_yet=.false.
    NEW=.true.
    io=file_mgr('O','ECPCOEFF',NEW)  ! get unit number for generic file ecpcoeff.txt
    if(io.gt.0) then
      inquire(unit=io,opened=lopened)  ! close generic file but reuse unit number for year-specific version
      if(lopened) then
        close(io,status='DELETE')
      endif
    else
      call unitunopened(100,999,io)
    endif
  endif
  write(year_iter,'(i4)') curcalyr
  filen_ecpcoeff='ecpcoeff_'//trim(year_iter)//'.txt'     ! year-specific version of ecpcoeff.txt 
  open(io,file=filen_ecpcoeff,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
  rewind io
  ENDIF
   
  return
end subroutine ecp_aimms_init
  
!===================================================================================================================================================
subroutine ecp_list_aimms_rowcols(iopen)
  use ecp_row_col
  use ifport,only:timef
! writes out the AIMMS row and column names along with their associated OML masks and the sets defining their index space
  implicit none 
  include 'parametr'
  include 'ncntrl'
  integer ir,ic,i
  integer iopen ! if 1, open file to hold it. otherwise (0) write to already open ecpcoeff_yyyy.txt
  logical lopened
  character*1 rowtype, file_rc*80
  
  if(iopen.eq.1)Then
    inquire(unit=io, opened=lopened)
    if(lopened) then
      close(io)
    endif
    write(file_rc,'(a,i4,a)') 'ecp_rows_columns_',curcalyr,'.txt'
    open(io,file=file_rc,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
    rewind io
  endif
  write(io,'(a)') 'COLUMNS: AIMMS column names, sets, and mapping to OML Column name groups'
  do ic=0,max_col_aimms
    if(col_aimms(ic).colnam_aimms.ne.' ') then
  
     write(io,'(a,i3,1x,a,2x,a,i2,1x,<max_set>(1x,i1,":",i1),<max_set>(1x,a))')  'COLUMNS: ',  &
                     ic,col_aimms(ic).colnam_aimms, &
                        col_aimms(ic).colnam_mask , &
                        col_aimms(ic).needsol, &
                       (col_aimms(ic).indstt(i),col_aimms(ic).indend(i),i=1,max_set), &
                       (col_aimms(ic).setnam(i),i=1,max_set) 
    endif
  enddo
  write(io,'(a)') 'ROWS: '
  write(io,'(a)') 'ROWS:     AIMMS row names, sets, and mapping to OML Row name groups'
  do ir=0,max_row_aimms
    if(row_aimms(ir).rownam_aimms.ne.' ') then
      rowtype=row_aimms(ir).row_type

      write(io,'(a,i3,1x,a,2x,a,i2,1x,<max_set>(1x,i1,":",i1),<max_set>(1x,a))')   'ROWS: '//rowtype//' ',  &
                     ir,row_aimms(ir).rownam_aimms, &
                        row_aimms(ir).rownam_mask , &
                        row_aimms(ir).needsol, &
                       (row_aimms(ir).indstt(i),row_aimms(ir).indend(i),i=1,max_set), &
                       (col_aimms(ir).setnam(i),i=1,max_set) 
    endif
  enddo

  if(iopen.eq.1) then
    close (io)
  endif
end subroutine ecp_list_aimms_rowcols
!===================================================================================================================================================
subroutine ecp_fill_aimms_coeff
  use ecp_row_col
  use ifport,only:timef
! fill AIMMS coefficient arrays from list generated through LP calls to DVAL and ecp_assign_coeff.
! write out the coefficients to unit io (ecpcoeff_year_it.txt) for debugging
  implicit none  
  
  integer ir,ic,i,L,iL,ip,oldip,ix,icolon
  integer im, ifound,nmissing
  integer,parameter :: maxmissing=400
  character*24 missc(maxmissing),missr(maxmissing)
  integer unit
  character*1 colon/':'/  

  integer inBoth ! if nonzero, indicates the set is used in both the row and col names. if so, value is set index for the column
  integer UseCol ! if >0 and inBoth>1, then triggers a set element pick from the column name. results in a swap of two elements in generating the AIMMS parameter tuple  
  character*20 colstr,rowstr  ! col, row name set elements separated by commas
  character*30 colstrA,rowstrA
  character*1 c1,c2*2,c3*3, c*1, c4*4, c5*5
  character*5 c5col
 
 integer lenset, e,i4

  integer icode,check
  integer iopt ! argument to get_ecp_set; if 1, return ordinal for set element, too (for "_ALT" aliased sets)
  character*40 ParamName, ParamTemp, SortKeyOld*57, char_ic*7
  real*4 timer,timer2
  integer*2 aimms_row_ID_num_old

  timer=timef() ! time this subroutine
  set_lookup=.true.
  nmissing=0
  missc=' '
  missr=' '
  timer2=timef()
    
! Print AIMMS row and column names along with their associated OML masks and the sets defining their index space   
  if(AIMECPBG.eq.1 .or. make_ecp_aimms) then
    call ecp_list_aimms_rowcols(0)

!   write coefficients for debuggging
    write(io,'(a)') 'COEFF_HEAD: '
    write(io,'(a)') 'COEFF_HEAD: Coefficients with OML column/row names, mask patterns, and OML-to-AIMMS set mappings'
  endif

! check/revise aimms_row_id_num for each coefficient, generate sort keys to sort/count coefficients 
  oldip=0
  do ic=1,cnt_ecp_coeff
     ecpcolnam     = ecp_coeff(ic).ecpcolnam    
     ecprownam     = ecp_coeff(ic).ecprownam
     aimms_col_ID_num    = ecp_coeff(ic).aimms_col_ID_num  
     aimms_row_ID_num    = ecp_coeff(ic).aimms_row_ID_num 
!    DEBUG
     aimms_row_ID_num_old =aimms_row_ID_num
! reacquire the aimms_row_id_num based on the current row_type of ecprownam, as
! there may be more than one row_type with a given rownam_mask    
     if(aimms_row_ID_num .ge. 0) then
        row_type=' ' ! forces ecp_set_aimms_row_ID to look up rowtype based on ecprownam
        rownam_mask   = row_aimms(aimms_row_ID_num).rownam_mask   
        call ecp_set_aimms_row_ID(rownam_mask) 
        if(  aimms_row_ID_num_old .ne. aimms_row_ID_num ) then
!         write(io,'(a)')' aimms_row_ID_num changed for col/row: '//ecpcolnam//' '//ecprownam//' '//row_type//' '// row_aimms(aimms_row_ID_num).rownam_aimms
          ecp_coeff(ic).aimms_row_ID_num = aimms_row_ID_num
        endif
     else
       write(6,'(a,i5)') 'AIMMS Interface error: aimms_row_id_num<0 for coefficient ic, ic=',i
     endif
     if(aimms_row_ID_num.ge.0  .and. aimms_col_ID_num.ge.0) then
       colnam_aimms  = col_aimms(aimms_col_ID_num).colnam_aimms 
       rownam_aimms  = row_aimms(aimms_row_ID_num).rownam_aimms 
       ParamName='cpass_'//trim(colnam_aimms)//'_'//trim(rownam_aimms)
       L=index(ParamName,'!')
       if(L.gt.0) ParamName(L:L)='|'  ! change to vertical bar for sorting so primary parameter name comes first. ! is ascii 33, | is 94
      else
        paramName=' '
     endif
     write(char_ic,'(i7.7)') ic
     ecp_sortkey(ic) = trim(ParamName)//':'//ecpcolnam//ecprownam
     ecp_sortkey(ic)(58:64)=char_ic  ! preserve order of duplicates with char_ic
     ecp_sortidx(ic) = ic 
  enddo

  
  call emm_sort64(ecp_sortkey, ecp_sortidx, cnt_ecp_coeff, max_ecp_coeff)

!  SortKeyOld=' '
!DEC$ PARALLEL
  do ix=1,cnt_ecp_coeff

     ic=ecp_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.

     ecpcolnam     = ecp_coeff(ic).ecpcolnam    
     ecprownam     = ecp_coeff(ic).ecprownam
     
     aimms_col_ID_num    = ecp_coeff(ic).aimms_col_ID_num  
     aimms_row_ID_num    = ecp_coeff(ic).aimms_row_ID_num 

     ParamName='not defined'
 
     if(aimms_col_ID_num .ge. 0 .and. aimms_row_ID_num .ge. 0) then
       colnam_mask   = col_aimms(aimms_col_ID_num).colnam_mask     
       colnam_aimms  = col_aimms(aimms_col_ID_num).colnam_aimms 
       csetnam(:)  = col_aimms(aimms_col_ID_num).setnam(:)  
       cindstt(:)  = col_aimms(aimms_col_ID_num).indstt(:)  
       cindend(:)  = col_aimms(aimms_col_ID_num).indend(:)  

       rownam_mask   = row_aimms(aimms_row_ID_num).rownam_mask     
       rownam_aimms  = row_aimms(aimms_row_ID_num).rownam_aimms 
       rsetnam(:)  = row_aimms(aimms_row_ID_num).setnam(:)  
       rindstt(:)  = row_aimms(aimms_row_ID_num).indstt(:)  
       rindend(:)  = row_aimms(aimms_row_ID_num).indend(:)  

       ecpcoeff8= ecp_coeff(ic).coeff8    
       
       ic=ecp_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.
       icolon=index(ecp_sortkey(ix),':') ! first part of sortkey, up to ":", is the aimms parameter name
       ifound=0
       if(icolon.le.1) then
         ParamName='not defined'
         ifound=1
       else
         ParamName=ecp_sortkey(ix)(1:icolon-1)
         L=index(ParamName,'|')
         if(L.gt.0) ParamName(L:L)='!'  ! change back to ! after sorting with |
       endif
       UseCol=index(ParamName,'!')+index(ParamName,'|') ! if either is gt.0, triggers an exception to use col set element. in case ! is in both col/row names, only first is converted to |
! If generating list of parameter arrays need to store coefficients, erase paramName temporarily
! so the list of paramname's needed will be listed int the "missing messages" below
       if(make_ecp_aimms)then 
         ParamTemp=ParamName
         ParamName='nothing'
       endif

      ifound=0
       do ip=1,max_aimms_param
         if(ParamName.eq.aimparm(ip).name) then
           ifound=ip
           exit
         endif
       enddo  
! for each AIMMS parameter, record its First and Last coefficient positions from ecp_sortidx
       if(ifound.gt.0) then
         if(ip.ne.oldip) then
           if(oldip.ne.0) then
             aimparm(oldip).idxLast=ix-1
           endif
           aimparm(ip).idxFirst=ix
           oldip=ip
         endif

! fill the integer set elements (ecp_coeff(ic).iset_elements)  associated with this coefficient (ic), given
! the ecpcolnam and ecprownam, the col and row masks, the col and row mask sets, and the AIMMS parameter's domain sets.
! This provides the information necessary to later output the coefficients by AIMMS parameter name with the appropriate set indices.

         do i=1,max_domain_sets
           lenset=len_trim(aimparm(ip).setNames(i))
           if(lenset.gt.0) then
             if(index(aimparm(ip).setNames(i),'_ALT').gt.0) then
               i4=0
               c5=' '
               call get_ecp_set( 1,   aimparm(ip).setNames(i)(:lenset)    ,c5,i4,c5col,inBoth,UseCol)  ! get integers, too
               ecp_coeff(ic).iset_elements(i)=i4       
               ecp_coeff(ic).cset_elements(i)=c5       
                if(i4.eq.0) then
                 write(io,'(a)')  'FILLING: '//trim(ParamName)//', for set '//trim(aimparm(ip).setNames(i))//', set element number is 0, masked field is:'//trim(c5)
                 call write_ecp_row_col_dbg(IO)
               endif
             else  ! For non-aliased sets, don't need ordinal value, so just get element string (faster)
               i4=0
               c5=' '
               call get_ecp_set( 0,   aimparm(ip).setNames(i)(:lenset)    ,c5,i4,c5col,inBoth,UseCol)  ! just return set
               ecp_coeff(ic).cset_elements(i)=c5       
               if(c5.eq.' ') then
                 write(io,'(a)')  'FILLING: '//trim(ParamName)//', for set '//trim(aimparm(ip).setNames(i))//', set element code in masked field is empty'
                 call write_ecp_row_col_dbg(IO)
               endif
             endif
           else
             exit
           endif
         enddo

       else
         do im=1,nmissing
          if(missc(im).eq.colnam_aimms .and. missr(im).eq.rownam_aimms) then
            ifound=1
            exit
          endif
         enddo
         if(ifound.eq.0) then
           nmissing=nmissing+1
           im=nmissing
           if(im.le.maxmissing) then
             missc(im)=colnam_aimms
             missr(im)=rownam_aimms
             write(io,'(4a)') 'MISSING: no corresponding coefficient matrix for this pair:', trim(colnam_aimms),' ',trim(rownam_aimms)
             write(6,'(4a)') 'AIMMS Interface error: ECP: no corresponding coefficient matrix for this pair:', trim(colnam_aimms),' ',trim(rownam_aimms)
           else
             write(io,'(a)') 'MISSING: too many missing coefficient matrix names. increase maxmissing'
           endif
         endif
          
       endif
       
       if(make_ecp_aimms)then  ! restore parameter name for coeffient debug output written below
         ParamName=ParamTemp
       endif

       if(AIMECPBG.eq.0 .and. .not. make_ecp_aimms) cycle ! omit rest of coefficient loop which is for writing debug ecpcoeff*txt.

! for debug display column name in array format, such as B(R,P,G,F)
       colstr=' '
       colstrA=' '
       if(cindstt(1).gt.1) then
         colstrA=trim(colnam_aimms)//'('

! copy constant parts of mask to colstr and add left paren
         il=len_trim(colnam_mask)
         do i=1,il
           c=colnam_mask(i:i)
           if(c.ne.'(' .and. c.ne.')' .and. c.ne.'*' .and. c.ne.' ') then
             colstr=trim(colstr)//c
           endif
         enddo
          colstr=trim(colstr)//'('
       else
         colstr=trim(ecpcolnam)//'('
         if(len_trim(colnam_aimms).gt.0) then
            colstrA=trim(colnam_aimms)//'('
         else
            colstrA=colstr
         endif
       endif
! insert set elements separate by commas
       do i=1,max_set
         if(cindstt(i).ne.0 .and. cindend(i).ne.0) then
           colstr=trim(colstr)//ecpcolnam(cindstt(i):cindend(i))//','
           colstrA=trim(colstrA)//ecpcolnam(cindstt(i):cindend(i))//','
         else
           exit
         endif
       enddo

       L=len_trim(colstr)
       if(colstr(L:L).eq.',') colstr(L:L)=' '
       colstr=trim(colstr)//')'

       L=len_trim(colstrA)
       if(L.gt.0) then
         if(colstrA(L:L).eq.',') colstrA(L:L)=' '
       endif
       colstrA=trim(colstrA)//')'

! for debugging, display row name in array format, such as BTU(R,P,G)
       rowstr=' '
       rowstrA=' '
       if(rindstt(1).gt.1) then
         rowstrA=trim(rownam_aimms)//'('

! copy constant parts of mask to rowstr and add left paren
         il=len_trim(rownam_mask)
         do i=1,il
           c=rownam_mask(i:i)
           if(c.ne.'(' .and. c.ne.')' .and. c.ne.'*' .and. c.ne.' ') then
             rowstr=trim(rowstr)//c
           endif
         enddo
         rowstr=trim(rowstr)//'('
       else
         rowstr=trim(ecprownam)//'('  ! for some that have not set dimension at all
         rowstrA=rownam_aimms
         if(len_trim(rownam_aimms).gt.0) then
            rowstrA=trim(rownam_aimms)//'('
         else
            rowstrA=rowstr
         endif
       endif
! add names of set elements separated by commas
       do i=1,max_set
         if(rindstt(i).ne.0 .and. rindend(i).ne.0) then
           rowstr=trim(rowstr)//ecprownam(rindstt(i):rindend(i))//','
           if(len_trim(rsetnam(i)).gt.0) then
             rowstrA=trim(rowstrA)//ecprownam(rindstt(i):rindend(i))//','
           else
             rowstrA=rowstrA//' ,'
           endif
         else
           exit
         endif
       enddo
       L=len_trim(rowstr)
       if(rowstr(L:L).eq.',') rowstr(L:L)= ' '
       rowstr=trim(rowstr)//')'

       L=len_trim(rowstrA)
       if(l.gt.0) then
         if(rowstrA(L:L).eq.',') rowstrA(L:L)= ' '
         rowstrA=trim(rowstrA)//')'
       endif
       write(io,'(a,a,1x,a,f16.6,(a,a,1x,a,1x,a),(1x,a,1x,a,1x,a,a) )') 'COEFF1:', &
       ecpcolnam//colon,ecprownam//colon,ecp_coeff(ic).coeff8, colon,&
       colnam_mask//colon,colstr//colon,colstrA//colon,  &      
       rownam_mask//colon,rowstr//colon,rowstrA//colon, '|'//trim(ParamName)//'|'//trim(ecp_coeff(ic).ecpsub)
     else
       write(io,'(a, a,1x,a,f16.6,a,2I6)') 'COEFF2: missing AIMMS masks? 0 found for AIMMS column/row ID num: ', &
       ecpcolnam//colon,ecprownam//colon,ecp_coeff(ic).coeff8,' col, row ID numbers: ',aimms_col_ID_num, aimms_row_ID_num
    
     endif
  enddo
  if(ip.gt.0 .and. ip.le.max_aimms_param) then
    aimparm(ip).idxLast=cnt_ecp_coeff
  endif
  write(6,'(a,f9.2)') 'AIMMS Interface: seconds to assemble the ECP coefficients into AIMMS parameter groups:',timef()-timer2
  timer=timef()

  if(write_ecp_mps .eq. 1)then
    call ecp_mps
    write(6,'(a,f9.2)') 'AIMMS Interface: seconds to write the mps file',timef()-timer
    timer=timef()
  endif

  colnam_mask   = ' '    
  colnam_aimms  = ' '
  csetnam  = ' '  
  cindstt  = 0 
  cindend  = 0  

  rownam_mask   = ' '    
  rownam_aimms  = ' ' 
  rsetnam  = ' ' 
  rindstt  = 0  
  rindend = 0  

end subroutine ecp_fill_aimms_coeff
!================================================================================================================
subroutine get_ecp_set(iopt, setname, ccode, icode, c5col, inBoth, UseCol)
! returns, ccode, the part of the column or row name representing the given "setname".
! if iopt=1, also return icode, the integer set element for that character code.
! inBoth is non zero if the set is found in both the row and column names.  If so, inBoth
! holds the column set element.
! UseCol:  if >0, then use the column set element if inBoth is nonZero; expect a row-col discrepancy so omit error msg 
  use ecp_row_col
  implicit none
  
  integer, intent(in)           :: iopt    ! option 1: also return ordinal set number: icode. 0: return ccode only (faster)
  character(LEN=*), intent(in)  :: setname ! name of the set
  character(LEN=*), intent(out) :: ccode   ! character code for the set element 
  integer, intent(out)          :: icode   ! integer code for the set element
  integer, intent(out)          :: inBoth  ! if nonzero, indicates the set is used in both the row and col names. if so, value is set index for the column

  character*(*) c5col   ! character code for the set element as found in the column name
  integer i
  integer iRset, iCset  ! number of the set in the mask
  integer UseCol ! if >0, then use the column set element if inBoth is nonZero; expect a row-col discrepancy so omit error msg 
  character*80 repeats(500),combo
  integer nrepeats(500),ncombo/0/,ifound
  logical bothDiff ! if true, the set is used in both the row and col names and the elements differ
  set_lookup=.true.  ! option to lookup individual set element.  if false, writes out the set to ecpsetdata.dat
  inBoth=0
  iRset=0
  iCset=0
  ccode=' '
  c5col=' '

! check if the setname is found in the sets defined for the row mask
  do i=1,max_set
    if(rsetnam(i).eq.setname) then
      if(rindstt(i).gt.0 .and. rindend(i).gt.0) then
        iRset=i
        exit ! exit do loop early
      endif
    elseif(rsetnam(i).eq.' ') then
      exit
    endif
  enddo

! check if the setname is found in the sets defined for the column mask
  do i=1,max_set
    if(csetnam(i).eq.setname) then
      if(cindstt(i).gt.0 .and. cindend(i).gt.0) then
        iCset=i
        exit  ! exit do loop early
      endif
    elseif(Csetnam(i).eq.' ') then
      exit
    endif
  enddo

  if(iRset.gt.0) then
    ccode = ecprownam(rindstt(iRset):rindend(iRset))  ! get the set name from the row name based on the row mask position
    if(iopt.eq.1) call get_ecp_set_element(setname,ccode,icode)
    bothDiff=.false.
    if(iCset.gt.0) then
      c5col=ecpcolnam(cindstt(iCset):cindend(iCset))
      if(iopt.eq.1) then
        call get_ecp_set_element(setname, ecpcolnam(cindstt(iCset):cindend(iCset)), inBoth)
        if(inBoth.gt.0 .and. icode.ne.inBoth) bothDiff=.true.
      else
        if(ccode.ne.ecpcolnam(cindstt(iCset):cindend(iCset))) then
          call get_ecp_set_element(setname, ecpcolnam(cindstt(iCset):cindend(iCset)), inBoth)
          if(inBoth.gt.0 .and. icode.ne.inBoth) bothDiff=.true.
        endif
      endif
      if (bothDiff .and. UseCol.gt.0) then ! for exceptions, parameter name tagged with "!" suffix
        ccode=c5col
        icode=inBoth
        return
      endif
      if(bothDiff) then
! count number of instances of this error so we don't write too many
        combo=trim(setname)//':'//trim(rownam_AIMMS)//':'//trim(colnam_aimms)
        ifound=0
        do i=1,ncombo
          if(trim(combo).eq.trim(repeats(i))) then
            ifound=i
            exit
          endif
        enddo
        if(ifound.eq.0) then
          ncombo=ncombo+1
          ifound=ncombo
          repeats(ncombo)=combo
        endif
        nrepeats(ifound)=nrepeats(ifound)+1
        if(nrepeats(ifound).eq.1) then  
          write(6,'(30a)') 'AIMMS Interface error: get_ecp_set: row/col elements differ:'//trim(setname)// &
          ', row=',ecprownam,':',trim(ccode),':'//trim(rownam_aimms), &
          ', col=',ecpcolnam,':',trim(ecpcolnam(cindstt(iCset):cindend(iCset))),':'//trim(colnam_aimms)
        endif
      endif
    endif
  elseif(iCset.gt.0) then
    ccode = ecpcolnam(cindstt(iCset):cindend(iCset))  ! get the set name from the col name based on the col mask position
    if(iopt.eq.1) call get_ecp_set_element(setname,ccode,icode)
  elseif(setname.eq.'JustOne') then
    ccode='1'
    icode=1
  endif

  return
    
end subroutine get_ecp_set
!================================================================================================================
subroutine get_ecp_set_element(setname,ccode,icode)
! returns the AIMMS set element corresponding to a given OML character code and AIMMS set
      use ecp_row_col
      implicit none
      include 'parametr'
      include 'emmparm'
      include 'control'
      character*(*) setname ! name of the set
      character*(*) ccode   ! character code for the set element 
      integer icode         ! integer value for the given set and set element
      integer i  ,L
      character*2 ustname(SupplyState)  / &
        'AL', &
        'AZ', &
        'AR', &
        'CA', &
        'CO', &
        'CT', &
        'DE', &
        'DC', &
        'FL', &
        'GA', &
        'ID', &
        'IL', &
        'IN', &
        'IA', &
        'KS', &
        'KY', &
        'LA', &
        'ME', &
        'MD', &
        'MA', &
        'MI', &
        'MN', &
        'MS', &
        'MO', &
        'MT', &
        'NE', &
        'NV', &
        'NH', &
        'NJ', &
        'NM', &
        'NY', &
        'NC', &
        'ND', &
        'OH', &
        'OK', &
        'OR', &
        'PA', &
        'RI', &
        'SC', &
        'SD', &
        'TN', &
        'TX', &
        'UT', &
        'VT', &
        'VA', &
        'WA', &
        'WV', &
        'WI', &
        'WY'/

  ! ustnme(SupplyState) in /control/
      character*1 cFGD(nIFGD)/'S','U'/
      character*1 cFuelRegion_ALT1(FuelRegion)/ &
      '1',  & !  'NE',
      '2',  & !  'YJ',
      '3',  & !  'PA',
      '4',  & !  'OH',
      '5',  & !  'EN',
      '6',  & !  'WI',
      '7',  & !  'C1',
      '8',  & !  'C2',
      '9',  & !  'C3',
      '0',  & !  'DM',
      'A',  & !  'DW',
      'B',  & !  'VA',
      'C',  & !  'CR',
      'D',  & !  'GA',
      'E',  & !  'FL',
      'F',  & !  'KT',
      'G',  & !  'AM',
      'H',  & !  'WS',
      'I',  & !  'N1',
      'J',  & !  'N2',
      'K',  & !  'ZN',
      'L',  & !  'OW',
      'M',  & !  'CA',
      'X'/  ! 'US'

       character*2 cFuelRegion(FuelRegion)/ &
         'NE',& 
         'YJ',& 
         'PA',& 
         'OH',& 
         'EN',& 
         'WI',& 
         'C1',& 
         'C2',& 
         'C3',& 
         'DM',& 
         'DW',& 
         'VA',& 
         'CR',& 
         'GA',& 
         'FL',& 
         'KT',& 
         'AM',& 
         'WS',& 
         'N1',& 
         'N2',& 
         'ZN',& 
         'OW',& 
         'CA',& 
         'US'/

      character*2 cFuelRegion_SUP(FuelRegion_SUP)/ &
             '00',&
             'NE',& 
             'YJ',& 
             'PA',& 
             'OH',& 
             'EN',& 
             'WI',& 
             'C1',& 
             'C2',& 
             'C3',& 
             'DM',& 
             'DW',& 
             'VA',& 
             'CR',& 
             'GA',& 
             'FL',& 
             'KT',& 
             'AM',& 
             'WS',& 
             'N1',& 
             'N2',& 
             'ZN',& 
             'OW',& 
             'CA',& 
             'US'/ 
 
         character*2 cPlantType(PlantType)/ &
             'B1',  &  ! 'B100 Unscb-BH -Any-     '	  DSP
             'B2',  &  ! 'B100 Unscb-BH -Any-SC   '	  DSP
             'B3',  &  ! 'B100 W_scb-BH -   -     '	  DSP
             'B4',  &  ! 'B100 W_scb-BH -   -SC   '	  DSP
             'B5',  &  ! 'B100 W_scb-BH -SCR-     '	  DSP
             'B6',  &  ! 'B100 W_scb-BH -SCR-SC   '	  DSP
             'B7',  &  ! 'B100 Dry  -BH -Any-     '	  DSP
             'B8',  &  ! 'B100 Dry  -BH -Any-SC   '	  DSP
             'C1',  &  ! 'B100 Unscb-CSE-Any-     '	  DSP
             'C2',  &  ! 'B100 Unscb-CSE-Any-   FF'	  DSP
             'C3',  &  ! 'B100 Unscb-CSE-Any-SC/FF'	  DSP
             'C4',  &  ! 'B100 W_scb-CSE-   -     '	  DSP
             'C5',  &  ! 'B100 W_scb-CSE-   -   FF'	  DSP
             'C6',  &  ! 'B100 W_scb-CSE-   -SC/FF'	  DSP
             'C7',  &  ! 'B100 W_scb-CSE-SCR-     '	  DSP
             'C8',  &  ! 'B100 W_scb-CSE-SCR-   FF'	  DSP
             'C9',  &  ! 'B100 W_scb-CSE-SCR-SC/FF'	  DSP
             'CX',  &  ! 'B100 D_scb-CSE-   -     '	  DSP
             'CY',  &  ! 'B100 D_scb-CSE-   -   FF'	  DSP
             'CZ',  &  ! 'B100 D_scb-CSE-SCR-SC/FF'	  DSP
             'H1',  &  ! 'B100 Unscb-O/N-Any-     '	  DSP
             'H2',  &  ! 'B100 Unscb-O/N-Any-   FF'	  DSP
             'H3',  &  ! 'B100 Unscb-O/N-Any-SC/FF'	  DSP
             'H4',  &  ! 'B100 W_scb-O/N-   -     '	  DSP
             'H5',  &  ! 'B100 W_scb-O/N-   -   FF'	  DSP
             'H6',  &  ! 'B100 W_scb-O/N-   -SC/FF'	  DSP
             'H7',  &  ! 'B100 W_scb-O/N-SCR-     '	  DSP
             'H8',  &  ! 'B100 W_scb-O/N-SCR-   FF'	  DSP
             'H9',  &  ! 'B100 W_scb-O/N-SCR-SC/FF'	  DSP
             'HA',  &  ! 'B100 D_scb-O/N-Any-     '	  DSP
             'HB',  &  ! 'B100 D_scb-O/N-Any-   FF'	  DSP
             'HC',  &  ! 'B100 D_scb-O/N-Any-SC/FF'	  DSP
             'PC',  &  ! 'Scrubbed Coal New'       	  DSP
             'OC',  &  ! 'Other New Coal'          	  DSP
             'IG',  &  !  Integrated Gas Comb Cycle'      DSP
             'I2',  &  ! 'IGCC with NG-cofiring'          DSP
             'PQ',  &  ! 'Coal w/Partial Sequestration'   DSP
             'IS',  &  ! 'IGCC w/Sequestration'           DSP
             'NG',  &  ! 'Coal to Natural Gas Steam'      DSP
             'ST',  &  !  Gas/Oil Steam Turbine'          DSP
             'ET',  &  !  Existing Combustion Turbine'    DSP
             'IC',  &  ! 'Internal Combustion Engine'     DSP
             'CT',  &  ! 'Conv Combustion Turbine'        DSP
             'T2',  &  ! 'Aeroderivative Turbine'         DSP
             'AT',  &  ! 'Adv Combustion Turbine'         DSP
             'EC',  &  ! 'Existing Gas/Oil Comb Cycle'    DSP
             'CC',  &  ! 'Conv Gas/Oil Comb Cycle'        DSP
             'AC',  &  ! 'Adv Gas/Oil Comb Cycle'         DSP
             'A2',  &  ! 'New Advanced Comb Cycle'        DSP
             'CS',  &  ! 'Adv CC w/Sequestration'         DSP
             'FC',  &  ! 'Fuel Cells'                     DSP
             'CN',  &  ! 'Conventional Nuclear'           DSP
             'AN',  &  ! 'Advanced Nuclear'               DSP
             'SM',  &  ! 'SMR Nuclear'                    DSP
             'GN',  &  ! 'Greenfield Nuclear'             DSP
             'WD',  &  ! 'Biomass (Wood)'                 RNW
             'BI',  &  ! 'Biomass IGCC (Wood)'            RNW
             'GT',  &  ! 'Geothermal'                     RNW
             'AG',  &  ! 'Advanced Geothermal'            RNW
             'MS',  &  ! 'Mun Solid Waste'                RNW
             'HY',  &  ! 'Hydroelectric'                  RNW
             'HO',  &  ! 'Advanced Hydroelectric'         RNW
             'HI',  &  ! 'In Stream Hydroelectric'        RNW
             'TI',  &  ! 'Tidal Hydroelectric'            RNW
             'PS',  &  ! 'Pumped Storage'                 RNW
             'P2',  &  ! 'Demand Response'                RNW
             'SQ',  &  ! 'Quick Storage'                  STO
             'DS',  &  ! 'Diurnal Storage'                STO
             'OS',  &  ! 'Other Storage'                  STO
             'WN',  &  ! 'Conventional Wind'              INT
             'WL',  &  ! 'Wind Low Speed'                 INT
             'WF',  &  ! 'Wind Off Shore'                 INT
             'SO',  &  ! 'Solar Thermal (no storage)'     INT
             'SS',  &  ! 'Solar Thermal w/Storage'        INT
             'S2',  &  ! 'Solar Thermal w/Storage 2'      INT
             'PV',  &  ! 'PV w/axis tracking'             INT
             'PT',  &  ! 'PV fixed tilt'                  INT
             'IN',  &  ! 'Other Intermittent'             INT
             'DB',  &  ! 'Distributed Generation--Base'   DGN
             'DP' /    ! 'Distributed Generation--Peak'   DGN

      character*1 cBuildType(BuildType)/ &
         'B',  &  ! 'non - intermittent builds     '    
         'I' /    ! 'intermittent builds   '	  

      character*2 cDispatchableECP(DispatchableECP)/ &
           'B1',  &  ! 'B100 Unscb-BH -Any-     '     DSP
           'B2',  &  ! 'B100 Unscb-BH -Any-SC   '     DSP
           'B3',  &  ! 'B100 W_scb-BH -   -     '     DSP
           'B4',  &  ! 'B100 W_scb-BH -   -SC   '     DSP
           'B5',  &  ! 'B100 W_scb-BH -SCR-     '     DSP
           'B6',  &  ! 'B100 W_scb-BH -SCR-SC   '     DSP
           'B7',  &  ! 'B100 Dry  -BH -Any-     '     DSP
           'B8',  &  ! 'B100 Dry  -BH -Any-SC   '     DSP
           'C1',  &  ! 'B100 Unscb-CSE-Any-     '     DSP
           'C2',  &  ! 'B100 Unscb-CSE-Any-   FF'     DSP
           'C3',  &  ! 'B100 Unscb-CSE-Any-SC/FF'     DSP
           'C4',  &  ! 'B100 W_scb-CSE-   -     '     DSP
           'C5',  &  ! 'B100 W_scb-CSE-   -   FF'     DSP
           'C6',  &  ! 'B100 W_scb-CSE-   -SC/FF'     DSP
           'C7',  &  ! 'B100 W_scb-CSE-SCR-     '     DSP
           'C8',  &  ! 'B100 W_scb-CSE-SCR-   FF'     DSP
           'C9',  &  ! 'B100 W_scb-CSE-SCR-SC/FF'     DSP
           'CX',  &  ! 'B100 D_scb-CSE-   -     '     DSP
           'CY',  &  ! 'B100 D_scb-CSE-   -   FF'     DSP
           'CZ',  &  ! 'B100 D_scb-CSE-SCR-SC/FF'     DSP
           'H1',  &  ! 'B100 Unscb-O/N-Any-     '     DSP
           'H2',  &  ! 'B100 Unscb-O/N-Any-   FF'     DSP
           'H3',  &  ! 'B100 Unscb-O/N-Any-SC/FF'     DSP
           'H4',  &  ! 'B100 W_scb-O/N-   -     '     DSP
           'H5',  &  ! 'B100 W_scb-O/N-   -   FF'     DSP
           'H6',  &  ! 'B100 W_scb-O/N-   -SC/FF'     DSP
           'H7',  &  ! 'B100 W_scb-O/N-SCR-     '     DSP
           'H8',  &  ! 'B100 W_scb-O/N-SCR-   FF'     DSP
           'H9',  &  ! 'B100 W_scb-O/N-SCR-SC/FF'     DSP
           'HA',  &  ! 'B100 D_scb-O/N-Any-     '     DSP
           'HB',  &  ! 'B100 D_scb-O/N-Any-   FF'     DSP
           'HC',  &  ! 'B100 D_scb-O/N-Any-SC/FF'     DSP
           'PC',  &  ! 'Scrubbed Coal New'            DSP
           'OC',  &  ! 'Other New Coal'               DSP
           'IG',  &  !  Integrated Gas Comb Cycle'    DSP
           'I2',  &  ! 'IGCC with NG-cofiring'        DSP
           'PQ',  &  ! 'Coal w/Partial Sequestration' DSP
           'IS',  &  ! 'IGCC w/Sequestration'         DSP
           'NG',  &  ! 'Coal to Natural Gas Steam'    DSP
           'ST',  &  !  Gas/Oil Steam Turbine'        DSP
           'ET',  &  !  Existing Combustion Turbine'  DSP
           'IC',  &  ! 'Internal Combustion Engine'   DSP
           'CT',  &  ! 'Conv Combustion Turbine'      DSP
           'T2',  &  ! 'Aeroderivative Turbine'       DSP
           'AT',  &  ! 'Adv Combustion Turbine'       DSP
           'EC',  &  ! 'Existing Gas/Oil Comb Cycle'  DSP
           'CC',  &  ! 'Conv Gas/Oil Comb Cycle'      DSP
           'AC',  &  ! 'Adv Gas/Oil Comb Cycle'       DSP
           'A2',  &  ! 'New Advanced Comb Cycle'      DSP
           'CS',  &  ! 'Adv CC w/Sequestration'       DSP
           'FC',  &  ! 'Fuel Cells'                   DSP
           'CN',  &  ! 'Conventional Nuclear'         DSP
           'AN',  &  ! 'Advanced Nuclear'             DSP         
           'SM',  &  ! 'SMR Nuclear'                  DSP         
           'GN'/     ! 'Greenfield Nuclear'           DSP

      character*2 cOtherRenewable(OtherRenewable)/ &
           'WD',  &  ! 'Biomass (Wood)'               RNW
           'BI',  &  ! 'Biomass IGCC (Wood)'          RNW
           'GT',  &  ! 'Geothermal'                   RNW
           'AG',  &  ! 'Advanced Geothermal'          RNW
           'MS',  &  ! 'Mun Solid Waste'              RNW
           'HY',  &  ! 'Hydroelectric'                RNW
           'HO',  &  ! 'Advanced Hydroelectric'       RNW
           'HI',  &  ! 'In Stream Hydroelectric'      RNW
           'TI',  &  ! 'Tidal Hydroelectric'          RNW
           'PS',  &  ! 'Pumped Storage'               RNW
           'P2'/     ! 'Demand Response'              RNW
 
     character*2 cECPStorageType(ECPStorageType)/ &
           'SQ',  &  ! 'Quick Storage'                STO
           'DS',  &  ! 'Diurnal Storage'              STO
           'OS'/     ! 'Other Storage'                STO

      character*2 cIntermittent(Intermittent)/ &
           'WN',  &  ! 'Conventional Wind'            INT
           'WL',  &  ! 'Wind Low Speed'               INT
           'WF',  &  ! 'Wind Off Shore'               INT
           'SO',  &  ! 'Solar Thermal (no storage)'   INT
           'SS',  &  ! 'Solar Thermal w/Storage'      INT
           'S2',  &  ! 'Solar Thermal w/Storage 2'    INT
           'PV',  &  ! 'PV w/axis tracking'           INT
           'PT',  &  ! 'PV fixed tilt'                INT
           'IN'/     ! 'Other Intermittent'           INT
 
     character*2 cDistributedGenType(DistributedGenType)/ &
           'DB',  &  ! 'Distributed Generation--Base' DGN
           'DP' /    ! 'Distributed Generation--Peak' DGN

 
       character*2 cIntermittentRenStor(IntermittentRenStor)/ &
           'WD',  &  ! 'Biomass (Wood)'               RNW
           'BI',  &  ! 'Biomass IGCC (Wood)'          RNW
           'GT',  &  ! 'Geothermal'                   RNW
           'AG',  &  ! 'Advanced Geothermal'          RNW
           'MS',  &  ! 'Mun Solid Waste'              RNW
           'HY',  &  ! 'Hydroelectric'                RNW
           'HO',  &  ! 'Advanced Hydroelectric'       RNW
           'HI',  &  ! 'In Stream Hydroelectric'      RNW
           'TI',  &  ! 'Tidal Hydroelectric'          RNW
           'PS',  &  ! 'Pumped Storage'               RNW
           'P2',  &  ! 'Demand Response'              RNW
           'SQ',  &  ! 'Quick Storage'                STO
           'DS',  &  ! 'Diurnal Storage'              STO
           'OS',  &  ! 'Other Storage'                STO
           'WN',  &  ! 'Conventional Wind'            INT
           'WL',  &  ! 'Wind Low Speed'               INT
           'WF',  &  ! 'Wind Off Shore'               INT
           'SO',  &  ! 'Solar Thermal (no storage)'   INT
           'SS',  &  ! 'Solar Thermal w/Storage'      INT
           'S2',  &  ! 'Solar Thermal w/Storage 2'    INT
           'PV',  &  ! 'PV w/axis tracking'           INT
           'PT',  &  ! 'PV fixed tilt'                INT
           'IN'/     ! 'Other Intermittent'           INT

 
      character*1 cGenerationSeason(GenerationSeason)/'1','2','X'/   ! 'peak', 'offpeak', 'X'

      character*2 cFuelShareOption(FuelShareOption)/'X ','1X','2X','11'/  ! 'X' for plants without fuel switching, "1X"=maxgas, "2X"=maxoil, '11'= Cofiring Mode 1, Step 1

      character*1 cSlice(Slice)/'A','B','C'/
      character*1 cElasticityStep_ALT1(ElasticityStep)/'S','T','U'/
      character*1 CHCOD(33)/'1','2','3','4','5','6','7','8','9','0','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O', &
         'P','Q','R','S','T','U','V','W'/
      character*2 C2COD(25)/'01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25'/
      character*4 SupplyRegion4(SupplyRegion)/ & 
            '_tre', & !  1
            'frcc', & !  2
            'misw', & !  3
            'misc', & !  4
            'mise', & !  5
            'miss', & !  6
            'isne', & !  7
            'nycw', & !  8
            'nyup', & !  9
            'pjme', & ! 10  0
            'pjmw', & ! 11  A
            'pjmc', & ! 12  B
            'pjmd', & ! 13  C
            'srca', & ! 14  D
            'srse', & ! 15  E
            'srce', & ! 16  F
            'spps', & ! 17  G
            'sppc', & ! 18  H
            'sppn', & ! 19  I
            'srsg', & ! 20  J
            'cano', & ! 21  K
            'caso', & ! 22  L
            'nwpp', & ! 23  L
            'rmrg', & ! 24  L
            'basn', & ! 25  L
            'ascc', & ! 26  M
            'heco', & ! 27  N
            'us00'/   ! 28  O
  
      character*2 cSupplyRegion_ALT2(SupplyRegion)/ & 
              'tr', & !  1
              'fr', & !  2
              'mi', & !  3
              'm2', & !  4
              'm3', & !  5
              'm4', & !  6
              'is', & !  7
              'n5', & !  8
              'ny', & !  9
              'p8', & ! 10
              'pj', & ! 11
              'p6', & ! 12
              'p7', & ! 13
              's2', & ! 14
              's4', & ! 15
              's3', & ! 16
              'sp', & ! 17
              's9', & ! 18
              's1', & ! 19
              'sr', & ! 20
              'c1', & ! 21
              'ca', & ! 22
              'nw', & ! 23
              'rm', & ! 24
              'ba', & ! 25
              'ak', & ! 26
              'hi', & ! 27
              'us'/   ! 28
  
      character*2 ccoaltype(CoalType)/'BL','BM','BH','SL','SM','LG'/  !AKA CoalType in AIMMS
      character*2 cbiomassType(BiomassType)/'UM', 'FR', 'AG', 'EC'/
      character*2 cCarbonRegion(CarbonRegion)/'RG','OT','CA'/
      character*1 cCoalDiversityType(CoalDiversityType)/'L','S'/  ! Lignite, SubBituminous
      character*3 cCarbonEmissionType(CarbonEmissionType)/'BNK','ESC','FUE','IND','LIM','OFF','OTH','REF','RSV','UTL'/
      character*1 cCanadianSupplyRegion(8)/'s','t','u','v','w','x','y','z'/ ! from "char(64+mnumnr+CRG+64+22"),IRG=1,8
      character*1 cCanadianSupplyImportRegion(8)/'s','t','u','v','w','x','y','z'/ ! from "char(64+mnumnr+CRG+64+22"),IRG=1,8
      character*1 cVLoadSegment(VLoadSegment)/'X','W','V','U','T','S','R','Q','P','O','N','M','L','K','J', 'I','H','G','F','E','D','C','B','A'/ ! from UPLDCD(ECP_D_VLS) LOAD SEGMENT CODE.  or possible confusion with operatingmode UPMDCD(ECP_D_VLS)
      character*1 cSeasonmd(Seasonmd)            /'A','B','C','D','1','2','3','4' / ! combo of (1,2,3,) from scode(isp) or (A,B,C) scode_htrt(isp) based on upmdcd() 
      character*1 cSeasonx(Seasonx)            /'X','W','V','U' / ! filled by "UPLDCD(ISP)" usually, ECP_D_MSP=4
      character*1 cSeason(Season)              /'1','2','3','4'/  ! filled by scode(isp)=uprgcd(isp), ECP_D_MPS=4
      character*1 cSeason_SUP(Season_SUP)              /'0','1','2','3','4'/
      character*1 cLoadSegment(LoadSegment)/'1','2','3'/
      character*1 cNGCommitYear(NGCommitYear)/'1','2','3','4','5'/  

      character*3 cCoalSupplyStep(CoalSupplyStep)/'I01','I02','I03','I04','I05','I06','I07','I08','I09','I10','I11','OTH', &
                                                  'DN1','DN2','DN3','DN4','DN5','UP1','UP2','UP3','UP4','UP5','UP6','ZR0'/
      character*3 cRetrofitCFG(RetrofitCFG)/'COL','001','002','003','004','005','006','007','008','009','010',& 
                                            '011','012','013','014','015','016','017','018','019','020',& 
                                            '021','022','023','024','025','026','027','028','029','030',& 
                                            '031','032','033','034','035','036','037','038','039','040',& 
                                            '041','042','043','044','045','046','047','048','049','050',& 
                                            '051','052','053','054','055','056','057','058','059','060',& 
                                            '061','062','063','064','065','066','067','068','069','070',& 
                                            '071','072','073','074','075','076','077','078','079','080',& 
                                                  '081','082','083','084','085','086','087','088','089','090',& 
                                                  '091','092','093','094','095','096','097','098','099','100',& 
                                                  '101','102','103','104','105','106'/
                                              

      character*1 cScrubber(Scrubber)/'S','U','X'/
  
      character*1 cRCF(nRCF)/'1'/
      character*1 cJustOne(JustOne)/'1'/
      character*2 cOGSMSector(OGSMSector)/'HY', 'AM', 'ET', 'NA', 'CE', 'HR', 'P1', 'P2', 'NG', 'C1', 'C2', 'S1', 'S2'/
      character*2 cOGSMRegion(OGSMRegion)/'NE', 'GC', 'MC', 'SW', 'MT', 'WC', 'GP'/
      character*2 cOGSMRegionEX(OGSMRegionEX)/'NE', 'GC', 'MC', 'SW', 'MT', 'WC', 'GP', '08'/
      character*2 cCoalDemandRegion_SUP(CoalDemandRegion_SUP)/'00','NE','YP', 'S1','S2','GF','OH','EN','KT','AM','C1', 'C2','WS', 'MT','CU','ZN','PC'/
      character*2 cBiomassType_SUP(BiomassType_SUP)/'00','UM','FR', 'AG','EC'/
      CHARACTER*2 CLRG(16)
    !
          DATA CLRG/'NE',  &
                    'YP',  &
                    'S1',  &
                    'S2',  &
                    'GF',  &
                    'OH',  &
                    'EN',  &
                    'KT',  &
                    'AM',  &
                    'C1',  &
                    'C2',  &
                    'WS',  &
                    'MT',  &
                    'CU',  &
                    'ZN',  &
                    'PC'/
                
      character*2 cDispatchType(DispatchType)/'DS','IN','RN','DG','ST'/
      character*2 cDispatchType3(DispatchType)/'DSP','INT','REN','DGN','STO'/  ! usually used as a string constant in names rather than as a ECP set
  
      character*10 digits/'0123456789'/
      integer lc ! length of the SupplyRegion code (1,2, or 4)
      character*1 cFuelSupplyStep(FuelSupplyStep)/'A','B','C','D','E','F','G','H','I','1','2','3','4','5','6','7','8','9'/
      character*1 cCanProvince(CanProvince)/'W','X','Y'/
      character*1 cOperatingMode(OperatingMode)/'A','B','C','D','E','F','G','H','I','J','K','L'/ ! UPMDCD/ECP_D_VLS) ! one for each vertical load segment, ECP_D_VLS=12

      character*1 cCommitYear(CommitYear)/'A','B','C'/
      character*1 cCommitYearSR(CommitYearSR)/'X','Y','Z'/
      character*1 cHTRTYear(HTRTYear)/'A','L','N'/
      LOGICAL ERRORTYPE

      character*2 cFuelType(FuelType)
      character*2 cECPFuelType(ECPFuelType)/ &                 !  copied from emmcntl.txt 10/5/2019
            'BL', &     !    ' 1' 'Coal - Low Sulfur Bituminous     '  
            'BM', &     !    ' 2' 'Coal - Medium Sulfur Bituminous  '   
            'BH', &     !    ' 3' 'Coal - High Sulfur Bituminous    '   
            'SL', &     !    ' 4' 'Coal - Low Sulfur Subbituminous  '   
            'SM', &     !    ' 5' 'Coal - Medium Sulfur Subbituminou'   
            'LG', &     !    ' 6' 'Coal - Lignite                   '   
            'DS', &     !    ' 7' 'Distillate                       '   
            'RS', &     !    ' 8' 'Low/Hi Sulfur Resid              '  
            'GS', &     !    ' 9' 'Max Gas/Min Resid Steam          '   
            'GT', &     !    '10' 'Max Gas/Min Dist Turbines        '   
            'GC', &     !    '11' 'Max Gas/Min Dist Comb Cyc        '   
            'GF', &     !    '12' 'Gas Fuel Cells                   '  
            'UR', &     !    '13' 'Uranium                          '   
            'DD', &     !    '14' 'Distributed Gen -- Dist          '   
            'DG'/       !    '15' 'Distributed Gen -- Gas           '  


    ! from emmcntl
    ! ####                  UPOWNCD   ! ECP OWNERSHIP CODES
    ! '01' 'Utility Owned     ' 'U'
    ! '02' 'Non-Utility Owned ' 'N'
          character*1 cOwnerType(OwnerType)/'U','N'/

    !####           NOX_RG - Region ID
    !'01-SIP '           'SP'
    !'02-East'           'EA'
    !'03-West'           'WE'  under, csapr/yransport rule: 3 alternate version, ts, te, tw
          character*2 cNOXRegion(NOXRegion)/'SP','EA','WE','TS','TE','TW'/
  
          character*1 cnumACI(numACI)/'0','1','2','3','4','5','6','7'/

  
          character*1 cBioCOFCF(BioCOFCF)/     &
                     !       COF_CMB(ECP_D_COF,ECP_D_CFS) (retrofit cofiring categories by capacity factor level rolled into one set)
            'A', &   !       COF_CMB(1,1) = 'A'  
            'B', &   !       COF_CMB(1,2) = 'B'
            'C', &   !       COF_CMB(1,3) = 'C'
            'D', &   !       COF_CMB(1,4) = 'D'
            'E', &   !       COF_CMB(1,5) = 'E'
            'F', &   !       COF_CMB(1,6) = 'F'
            'G', &   !       COF_CMB(2,1) = 'G'
            'H', &   !       COF_CMB(2,2) = 'H'
            'I', &   !       COF_CMB(2,3) = 'I'
            'J', &   !       COF_CMB(2,4) = 'J'
            'K', &   !       COF_CMB(2,5) = 'K'
            'L', &   !       COF_CMB(2,6) = 'L'
            'M', &   !       COF_CMB(3,1) = 'M'
            'N', &   !       COF_CMB(3,2) = 'N'
            'O', &   !       COF_CMB(3,3) = 'O'
            'P', &   !       COF_CMB(3,4) = 'P'
            'Q', &   !       COF_CMB(3,5) = 'Q'
            'R', &   !       COF_CMB(3,6) = 'R'
            'S', &   !       COF_CMB(4,1) = 'S'
            'T', &   !       COF_CMB(4,2) = 'T'
            'U', &   !       COF_CMB(4,3) = 'U'
            'V', &   !       COF_CMB(4,4) = 'V'
            'W', &   !       COF_CMB(4,5) = 'W'
            'X', &   !       COF_CMB(4,6) = 'X'
            'Y', &   !       COF_CMB(5,1) = 'Y'
            'Z', &   !       COF_CMB(5,2) = 'Z'
            'a', &   !       COF_CMB(5,3) = 'a'
            'b', &   !       COF_CMB(5,4) = 'b'
            'c', &   !       COF_CMB(5,5) = 'c'
            'd'/  !       COF_CMB(5,6) = 'd'

          character*2 cCHPFuel(CHPFuel)/  & ! from TC_FUEL_CODES  assignments in udat.f
            'CL', &   !  1 Coal
            'OL', &   !  2 Oil
            'OG', &   !  3 Other Gaesous Fuels
            'NG', &   !  4 Natural Gas
            'HY', &   !  5 Hydro
            'GT', &   !  6 Geothermal
            'MS', &   !  7 MSW
            'WD', &   !  8 Biomass
            'SO', &   !  9 Solar Thermal
            'PV', &   ! 10 Solar PV
            'OT', &   ! 11 Other
            'WN'/     ! 12 Wind

    ! traditional cogen sectors      
    !      TC_SECTOR_CODES(1) = 'IOU '
    !      TC_SECTOR_CODES(2) = 'COOP'
    !      TC_SECTOR_CODES(3) = 'MUNI'
    !      TC_SECTOR_CODES(4) = 'FED '

    character*1 cRPSTrancheID(RPSTrancheID)/'1','2','3','4','5','6','7','8','9'/ ! based on st_rps_id from emmcntl "tranche" field. so far just '1'.


    icode=0
    ecp_setname=setname
    select case (setname)
    case ('SupplyRegion_ALT1')                      ! single character, 1,2,..0,A,B,.., most used
        call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('SupplyRegion_ALTa')                      ! single character, 1,2,..0,A,B,.., alias
        call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('SupplyRegion_ALTX')                      ! single character, 1,2,..0,A,B,.., alias
        call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('SupplyRegion_ALTY')                      ! single character, 1,2,..0,A,B,.., alias
        call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('SupplyRegion_ALTZ')                      ! single character, 1,2,..0,A,B,.., alias
        call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('NERCImport')                             ! single character, 1,2,..0,A,B,.., alias   
        call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)  
    case ('SupplyRegion_ALTfrom')                   ! single character, 1,2,..0,A,B,.., alias
        call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)   
    case ('SupplyRegion_ALTto')                     ! two character abbrev, alias
        call ecp_lookup(ccode,cSupplyRegion_ALT2,SupplyRegion,icode) 
    case ('SupplyRegion_ALT2')                      ! two character abbrev, most used
        call ecp_lookup(ccode,cSupplyRegion_ALT2,SupplyRegion,icode)
    case ('SupplyRegion_ALTtwo')                    ! two character abbrev, alias, for cpp co2 nerc-level constraints
        call ecp_lookup(ccode,cSupplyRegion_ALT2,SupplyRegion,icode)
    case ('SupplyRegion')                           ! four character abbrev. used in AIMMS
        call ecp_lookup(ccode,SupplyRegion4,SupplyRegion,icode)
    case ('PlanYear')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,PlanYear,1)
    case ('PlanYear_ALTB')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,PlanYear,1)
    case ('OGSMRegion')
        call ecp_lookup(ccode,cOGSMRegion,OGSMRegion,icode)
    case ('OGSMRegionEX')
        call ecp_lookup(ccode,cOGSMRegionEX,OGSMRegionEX,icode)   
    case ('OGSMRegionEX_ALTto')
        call ecp_lookup(ccode,cOGSMRegionEX,OGSMRegionEX,icode)
    case ('FuelRegion') 
      call ecp_lookup(ccode,cFuelRegion,FuelRegion,icode)
    case ('FuelRegion_ALT1')
      call ecp_lookup(ccode,cFuelRegion_ALT1,FuelRegion_ALT1,icode)
    case ('FuelRegion_SUP') 
      call ecp_lookup(ccode,cFuelRegion_SUP,FuelRegion_SUP,icode)
    case ('CoalDemandRegion_ALT1')
      call ecp_lookup(ccode,CHCOD,CoalDemandRegion,icode)  
    case ('CoalDemandRegion')
      call ecp_lookup(ccode,CLRG,CoalDemandRegion,icode) 
    case ('CoalDemandRegion_SUP')
      call ecp_lookup(ccode,cCoalDemandRegion_SUP,CoalDemandRegion_SUP,icode)
    case ('CoalDemandRegion_ALTto')
      call ecp_lookup(ccode,CLRG,CoalDemandRegion,icode)  
    case ('CoalDemandRegion_ALTfrom')
      call ecp_lookup(ccode,CLRG,CoalDemandRegion,icode)  
    case ('CoalDemandRegion_ALT2')
      if(len(ccode).eq.1) then
        call ecp_lookup(ccode,CHCOD,CoalDemandRegion,icode)
      else
        call ecp_lookup(ccode,C2COD,CoalDemandRegion,icode)
      endif
    case ('OGSMRegion_ALTTo')
        call ecp_lookup(ccode,cOGSMRegion,OGSMRegion,icode)
    case ('OGSMRegion_ALTFrom')
        call ecp_lookup(ccode,cOGSMRegion,OGSMRegion,icode)
    case ('SO2Region_ALTTo')
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,SO2Region_ALTTo,1)
    case ('SO2Region')
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,SO2Region,1)
    case ('SO2Region_ALTFrom' )
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,SO2Region_ALTFrom,1)
    case ('DispatchType')
        call ecp_lookup(ccode,cDispatchType,DispatchType,icode)
    case ('DispatchType_ALT3')
        call ecp_lookup(ccode,cDispatchType3,DispatchType,icode)
    case ('RPSRegion')
      call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('RPSRegion_ALT1')  ! 
      call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('RPSRegion_ALT2')  ! RPS region MRG=1,UNRGNS, where UPXRGN(NERC,MRG)=1, so use "SupplyRegion" as cardinality
      call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('RPSRegion_ALTX')  ! RPS region MRG=1,UNRGNS, where UPXRGN(NERC,MRG)=1, so use "SupplyRegion" as cardinality
      call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('RPSRegion_ALTI')  ! RPS region MRG=1,UNRGNS, where UPXRGN(NERC,MRG)=1, so use "SupplyRegion" as cardinality
      call ecp_lookup(ccode,CHCOD,SupplyRegion,icode)
    case ('OGSMSector')
        call ecp_lookup(ccode,cOGSMSector,OGSMSector,icode)
    case ('HGCODE')
        call ecp_lookup(ccode,CHCOD,nHGCODE,icode)
    case ('nHGCODE')
        call ecp_lookup(ccode,CHCOD,nHGCODE,icode)
    case ('SupplyState')
        call ecp_lookup(ccode,USTNME,SupplyState,icode)
    case ('RelyStep')
        call ecp_lookup(ccode,CHCOD,RelyStep,icode)
    case ('BiomassCOF')   ! biomass cofiring retrofit categories 5
        call ecp_lookup(ccode,CHCOD,BiomassCOF,icode)
    case ('BiomassStep')
        read(ccode,'(i2)') icode  ! i2 for 1..49
        if(.not. set_lookup) call ecp_write_int_set(setname,1,BiomassStep,2)
    case ('CanProvince')
        call ecp_lookup(ccode,cCanProvince,CanProvince,icode)
    case ('CanadaProject')
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,CanadaProject,2)
    case ('CoalSupplyStep')
        call ecp_lookup(ccode,cCoalSupplyStep,CoalSupplyStep,icode)
    case ('RetrofitCFG')
        call ecp_lookup(ccode,cRetrofitCFG,RetrofitCFG,icode)
    case ('FuelSupplyStep')
        call ecp_lookup(ccode,cFuelSupplyStep,FuelSupplyStep,icode) 
    case ('GasSupplyStep')
        read(ccode,'(i2)') icode  ! i2 for 1..41
        if(.not. set_lookup) call ecp_write_int_set(setname,1,GasSupplyStep,2)
    case ('OilSupplyStep')
        read(ccode,'(i2)') icode  ! i2 for 1..1
        if(.not. set_lookup) call ecp_write_int_set(setname,1,OilSupplyStep,2)
    case ('ImportStep')
      call ecp_lookup(ccode,CHCOD,ImportStep,icode)
    case ('LoadSegment')
      call ecp_lookup(ccode,cLoadSegment,LoadSegment,icode)
    case ('VLoadSegment')
      call ecp_lookup(ccode,cVLoadSegment,VLoadSegment,icode)
    case ('Nuclear')
        read(ccode,'(i4)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,Nuclear,4)  ! could use NUM_NUC when writing set to make it actual rather than the maximum allowed
    case ('OwnerType')
      call ecp_lookup(ccode,cOwnerType,OwnerType,icode)
    case ('SupplyStep')
      call ecp_lookup(ccode,CHCOD,SupplyStep,icode)
    case ('SStep_Subsidy')
      call ecp_lookup(ccode,CHCOD,SStep_Subsidy,icode)
    case ('SStep_NucSubsidy')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,SStep_NucSubsidy,2)  
    case ('CommitYear')
      call ecp_lookup(ccode,cCommitYear,CommitYear,icode)
    case ('NGCommitYear')
      call ecp_lookup(ccode,cNGCommitYear,NGCommitYear,icode)
    case ('CommitYearSR')
      call ecp_lookup(ccode,cCommitYearSR,CommitYearSR,icode)
    case ('HTRTYear')
      call ecp_lookup(ccode,cHTRTYear,HTRTYear,icode)
    case ('RetireGroup')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,RetireGroup,1)
    case ('CoalGroup')
      read(ccode,'(i4)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,CoalGroup,4)
    case ('NaturalGasGroup')
      read(ccode,'(i4)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,NaturalGasGroup,4)
    case ('CoalSupplyCurve')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,CoalSupplyCurve,2)
    case ('CoalSupplyCurve_Dom')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,CoalSupplyCurve_Dom,2)
    case ('CoalSupplyCurve_Int')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,CoalSupplyCurve_Int,2)
      
    case ('IFGD')
      call ecp_lookup(ccode,cFGD,nIFGD,icode)
    case ('JustOne')
      call ecp_lookup(ccode,cJustOne,JustOne,icode)
    case ('CanadianSupplyRegion')
      call ecp_lookup(ccode,cCanadianSupplyRegion,CanadianSupplyRegion,icode)
    case ('CanadianSupplyImportRegion')
      call ecp_lookup(ccode,cCanadianSupplyImportRegion,CanadianSupplyImportRegion,icode)    
    case ('CanadianSupplyStep')
      call ecp_lookup(ccode,CHCOD,CanadianSupplyStep,icode)
    case ('Slice')
      call ecp_lookup(ccode,cSlice,Slice,icode)
    case ('CoalType')  
      call ecp_lookup(ccode,cCoalType,CoalType,icode) 
    case ('PlantType')
      call ecp_lookup(ccode,cPlantType,PlantType,icode)
    case ('PlantType_ALT1')
      call ecp_lookup(ccode,cPlantType,PlantType,icode)
    case ('PlantType_ALT2')
      call ecp_lookup(ccode,cPlantType,PlantType,icode)
    case ('PlantTypeW')  ! same as PlantType but combines on/offshore wind into one wind category
      call ecp_lookup(ccode,cPlantType,PlantType,icode)
    case ('GenerationSeason')
      call ecp_lookup(ccode,cGenerationSeason,GenerationSeason,icode)

    case ('FuelShareOption')
      call ecp_lookup(ccode,cFuelShareOption,FuelShareOption,icode)
    case ('CarbonRegion')
      call ecp_lookup(ccode,cCarbonRegion,CarbonRegion,icode)
    case ('CensusRegion') 
      call ecp_lookup(ccode,C2COD,CensusRegion,icode)
    case ('GasRegion')
      call ecp_lookup(ccode,C2COD,GasRegion,icode)
 
    case ('GasSeason')
      call ecp_lookup(ccode,CHCOD,GasSeason,icode)
    case ('Season')
      call ecp_lookup(ccode,cSeason,Season,icode)
    case ('Season_SUP')
      call ecp_lookup(ccode,cSeason_SUP,Season_SUP,icode)
    case ('Seasonx')
      call ecp_lookup(ccode,cSeasonx,Seasonx,icode)
    case ('Seasonmd')
      call ecp_lookup(ccode,cSeasonmd,Seasonmd,icode)
    case ('OilRegion')
      call ecp_lookup(ccode,C2COD,OilRegion,icode)
    case ('DistillateProductionStep')
      call ecp_lookup(ccode,C2COD,DistillateProductionStep,icode)
    case ('ResidProductionStep')
      call ecp_lookup(ccode,C2COD,ResidProductionStep,icode)
    case ('Scrubber')
      call ecp_lookup(ccode,cScrubber,Scrubber,icode)
    case ('LoadGroup')
       read(ccode,'(i1)') icode
       if(.not. set_lookup) call ecp_write_int_set(setname,1,LoadGroup,1)      
    case ('GasProductionStep')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,GasProductionStep,2)
    case ('OperatingMode')    
        call ecp_lookup(ccode,cOperatingMode,OperatingMode,icode)
    case ('NOXRegion')
        call ecp_lookup(ccode,cNOXRegion,NOXRegion,icode)
    case ('CoalProductionStep')
        call ecp_lookup(ccode,C2COD,CoalProductionStep,icode)
    case ('numACI')
        call ecp_lookup(ccode,cnumACI,numACI,icode)
    case ('numACSS')  ! aci supply steps.  numacss=1
        call ecp_lookup(ccode,chcod,numACSS,icode)
    case ('BiomassType')
        call ecp_lookup(ccode,cBiomassType,BiomassType,icode)
    case ('BiomassType_SUP')
        call ecp_lookup(ccode,cBiomassType_SUP,BiomassType_SUP,icode)
    case ('BioCOFCF')
        call ecp_lookup(ccode,cBioCOFCF,BioCOFCF,icode)
    case ('CoalDiversityType')
        call ecp_lookup(ccode,cCoalDiversityType,CoalDiversityType,icode)
    case ('CarbonEmissionType')
        call ecp_lookup(ccode,cCarbonEmissionType,CarbonEmissionType,icode)
    case ('RCF')
        call ecp_lookup(ccode,cRCF,nRCF,icode)
    case ('RPSTranche') 
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,RPSTranche,2)
    case ('RPSTrancheID') 
        call ecp_lookup(ccode,cRPSTrancheID,RPSTrancheID,icode)
    case ('BuildType')
        call ecp_lookup(ccode,cBuildType,BuildType,icode)


! the following were added to transfer EMM variables and are tied to EMM dimensioning parameters, see ecp_row_col.f90 for parameter assignments
    case ('PlantGroup') 
      read(ccode,'(i5)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,PlantGroup,5)
    case ('MNUMYR')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,MNUMYR,2)
    case ('SCALARSet')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,SCALARSet,1)
    case ('DSMLoadGroup')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,DSMLoadGroup,1)
    case ('DSMSupplyRegion')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,DSMSupplyRegion,2)
    case ('StepsPerGroup')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,StepsPerGroup,1)
    case ('DayType')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,DayTypeSet,1)
    case ('Three')
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,Three,1)
    case ('Months')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,Months,2)
    case ('HoursADay')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,HoursADay,2)
    case ('BiomassOption')         ! ECP_D_CFS Biomass cofiring utilization options
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,BiomassOption,1)
    case ('BiomassRetrofit')       ! ECP_D_RCF ECP BiomassCofiring retrofit categories
      read(ccode,'(i)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,BiomassRetrofit,1)
    case ('CHPFuel')               ! MNUMCGF: combined heat and power fuels
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,CHPFuel,2)
    case ('CO2CapGroup')           !  CO2_D_GRP MAXIMUM NUMBER OF CO2 CAP GROUPS
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,CO2CapGroup,1)
    case ('CPPRegion')             ! EPAREG, Regions for EPA rule 111d: 6 + Alaska + Hawaii + national
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,CPPRegion,1)
    case ('DemandSectors')         ! MAXSEC')               !4: RES')               !1,COM')               !2,IND')               !3,TRA')               !4
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,DemandSectors,1)
    case ('DepreciationYears')               
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,DepreciationYears,2)
    case ('DepreciationOptions')               
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,DepreciationOptions,2)  
    case ('DispatchableECP')       ! ECP_D_DSP
      call ecp_lookup(ccode,cDispatchableECP,DispatchableECP,icode)
    case ('DispatchableECPplus1')       ! ECP_D_DSP+1
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,DispatchableECPplus1,2)
    case ('EmissionType')          ! MNPOLLUT: Air Pollutants (C,CO,CO2,SOx,NOx,VOC,CH4,PART)
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,EmissionType,2)
    case ('Fifteen')               
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,Fifteen,2)
    case ('Four')                  
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,Four,1)
    case ('FuelType')              ! EFD_D_NFL Fuel Types, correspond to ECP plant types
      call ecp_lookup(ccode,cFuelType,FuelType,icode)
    case ('NOXStates')
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,NOXStates,2)
    case ('FuelsPerPlant')         ! ECP_D_FPP Fuels per Plant, ECP
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,FuelsPerPlant,1)
!    case ('Knots')                 ! MAX_KNOTS max of these: FLRG_HR_KNOTS(FUEL_RGN,ECPt), heat-rate-related
!      read(ccode,'(i2)') icode
!      if(.not. set_lookup) call ecp_write_int_set(setname,1,Knots,2)
    case ('MercuryClass')          ! EPM_HG_CLS mercury class
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,MercuryClass,1)
!    case ('NOXStates')             ! NOX_D_MST MAXIMUM NUMBER OF STATES WITH NOX CAP
!      read(ccode,'(i2)') icode
!      if(.not. set_lookup) call ecp_write_int_set(setname,1,NOXStates,2)
    case ('OGSMRegion_ALT1')       
      call ecp_lookup(ccode,cOGSMRegion,OGSMRegion,icode)
    case ('RegionsPerFuel')        ! EFD_D_FRG supply/reporting Regions Per Fuel
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,RegionsPerFuel,1)
    case ('SO2ComplyGroup')        ! EFD_D_SO2  SO2 compliance groups
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,SO2ComplyGroup,1)
    case ('SO2_Transport')         ! mx_so2_tran, csapr,
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,SO2_Transport,1)
    case ('SupplyRegionAll')        ! MNUMNR(25)+EFD_D_PROV(8) Superset of SupplREgion and Candian Supply REgion
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,SupplyRegionAll,2)
    case ('Thirteen')              
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,Thirteen,2)
    case ('UtilitySector')         ! nutsec (38) + 3 
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,UtilitySector,2)
    case ('WindClass')             ! MNUMCL: wind classes, include 'wrenew'
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,WindClass,1)
    case ('FuelRegion26')             ! MNUMCL: wind classes, include 'wrenew'
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,FuelRegion26,2)
    case ('EMMStates')             ! MNUMCL: wind classes, include 'wrenew'
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,EMMStates,2)
    case ('PlanningHorizon')              
      read(ccode,'(i2)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,0,PlanningHorizon,2)
    case ('EmissionRank')              
      read(ccode,'(i1)') icode
      if(.not. set_lookup) call ecp_write_int_set(setname,1,EmissionRank,1)
      case ('BiomassProductionStep')            ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,BiomassProductionStep,2)
      case ('BiomassSector')                    ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,BiomassSector,1)
      case ('BoilerType')                       ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,BoilerType,1)
      case ('CanadianSupplyImport')             ! 3
        read(ccode,'(i3)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,CanadianSupplyImport,3)
 !     case ('CanadianSupplyImportRegion')             ! 1
 !       read(ccode,'(i1)') icode
 !       if(.not. set_lookup) call ecp_write_int_set(setname,1,CanadianSupplyImportRegion,1)
      case ('CoalConfiguration')                ! 3
        read(ccode,'(i3)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,CoalConfiguration,3)
      case ('ConstructionPeriod')               ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,ConstructionPeriod,2)
      case ('DayTimePeriod')                    ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DayTimePeriod,1)
      case ('DBColumns')                        ! 2 
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DBColumns,2)
      case ('DBRecords')                        ! 3
        read(ccode,'(i3)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DBRecords,3)
      case ('DemSideProg')                      ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DemSideProg,2)
      case ('DispPlantGroup')                   ! 4
         read(ccode,'(i4)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DispPlantGroup,4)
      case ('DistGenAvoidStep')                 ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DistGenAvoidStep,1)
      case ('DistGenPlantGroup')                ! 3
        read(ccode,'(i3)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DistGenPlantGroup,3)
      case ('DistributedGenType')               ! 1
        call ecp_lookup(ccode,cDistributedGenType,DistributedGenType,icode)
      case ('DiversityProfile')                 ! 3
        read(ccode,'(i3)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DiversityProfile,3)
      case ('DSMBlock')                         ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DSMBlock,1)
      case ('DSMSeason')                        ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DSMSeason,1)
      case ('DSMSegment')                       ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DSMSegment,2)
      case ('DSMSegmentSeason')                 ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,DSMSegmentSeason,1)
      case ('ECPLoadGroup')                     ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,ECPLoadGroup,2)
      case ('ECPStorageType')                   ! 1
        call ecp_lookup(ccode,cECPStorageType,ECPStorageType,icode)
      case ('EFDFuelType')                      ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,EFDFuelType,2)
      case ('ECPFuelType')                      ! 2
         !read(ccode,'(i2)') icode
        !if(.not. set_lookup) call ecp_write_int_set(setname,1,ECPFuelType,2)
        call ecp_lookup(ccode,cECPFuelType,ECPFuelType,icode)
      case ('EFDOwnerShipType')                 ! 1
         read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,EFDOwnerShipType,1)
      case ('EFDPlantType')                     ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,EFDPlantType,2)
      case ('ElasticityStep')                   ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,ElasticityStep,1)
      case ('ElasticityStep_ALT1')
        call ecp_lookup(ccode,cElasticityStep_ALT1,ElasticityStep,icode)
      case ('Eleven')                           ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,Eleven,2)
      case ('ExpectationYrIndex')               ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,0,ExpectationYrIndex,2)
      case ('ExplicitPlanningHorizon')          ! 2
         read(ccode,'(i2)') icode
          if(.not. set_lookup) call ecp_write_int_set(setname,1,ExplicitPlanningHorizon,2)
      case ('ExplicitPlanningHorizon_SUP')          ! 2
         read(ccode,'(i2)') icode
         if(.not. set_lookup) call ecp_write_int_set(setname,0,ExplicitPlanningHorizon,2)
      case ('FortyNine')                        ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,FortyNine,2)
      case ('Fourteen')                         ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,Fourteen,2)
      case ('FullPlanningHorizon')              ! 2
         read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,FullPlanningHorizon,2)
      case ('ImportExportReg')                  ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,ImportExportReg,1)
      case ('IntermittentRenStor')              ! 2
        call ecp_lookup(ccode,cIntermittentRenStor,IntermittentRenStor,icode)
      case ('Intermittent')                     ! 1
        call ecp_lookup(ccode,cIntermittent,Intermittent,icode)
      case ('LDCBlocks')                        ! 3
        read(ccode,'(i3)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,LDCBlocks,3)
      case ('NewPrice')                         ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,NewPrice,2)
      case ('NGBaseLoad')                       ! 4
         read(ccode,'(i4)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,NGBaseLoad,4)
      case ('NuclearUnit')                      ! 3
        read(ccode,'(i3)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,NuclearUnit,3)
      case ('OtherRenewable')                   ! 2
        call ecp_lookup(ccode,cOtherRenewable,OtherRenewable,icode)
      case ('OwnerShipType')                    ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,OwnerShipType,1)
      case ('PlantGroupOrd')                    ! 5
        read(ccode,'(i5)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,PlantGroupOrd,5)
      case ('PlantGrpReg')                      ! 4
        read(ccode,'(i4)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,PlantGrpReg,4)
      case ('PlantReg')                         ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,PlantReg,2)
      case ('PlantType_ECP')                    ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,PlantType_ECP,2)
      case ('RetrofitCombinations')             ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,RetrofitCombinations,2)
      case ('RetrofitComponent')                ! 1
        read(ccode,'(i1)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,RetrofitComponent,1)
      case ('SliceGroup')                       ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,SliceGroup,2)
      case ('StateCodes')                       ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,0,StateCodes,2)
      case ('SupplyCurves')                     ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,SupplyCurves,2)
      case ('Thousand')                         ! 4
         read(ccode,'(i4)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,Thousand,4)
      case ('TradCogenFuelType')                ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,TradCogenFuelType,2)
      case ('UtilityType')                      ! 2
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,0,UtilityType,2)
      case ('OGSMReg')              
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,OGSMReg,2)
      case ('MNUMYRF')              
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,MNUMYRF,2)
      case ('MNUMYRX')              
        read(ccode,'(i2)') icode
        if(.not. set_lookup) call ecp_write_int_set(setname,1,MNUMYRX,2)
      case ('MNUMYR_SUP')              
        read(ccode,'(i)') icode  ! -2..61
        if(.not. set_lookup) call ecp_write_int_set(setname,-2,MNUMYR,0)      
    case default
      write(6,*) 'AIMMS Interface error: ecp set name not found:',setname
    end select
    
    return
  end subroutine get_ecp_set_element
 ! 
  subroutine ecp_lookup(code,list,nElements,icode)
    use ecp_row_col
    implicit none
  !  look for a character "code" in an ordered "list" of codes to find the element number (icode)
    character*(*) code
    integer nElements
    character*(*) list(nElements)
    integer i,icode,L,LL
    if(set_lookup) then
      L=len_trim(code)
      icode=0
      do i=1,nElements
        if(code(:L).eq.list(i)(:L)) then
          icode=i
          exit
        endif
      enddo
    else
!      firstchar=' '  ! normally
!      if(index(sets(iset),'_ALT').gt.0) firstchar='!'
!  write out the name and elements of the set in AIMMS-compatible format to ecpsetdata.dat
      LL=len(list(1))
      if(nElements.gt.1) then
        write(io, '(3a,<nElements-1>(a<LL>,a2),a<LL>,a)' )firstchar, &
        trim(ecp_setname),     '_ := data {',         &
        ((list(i),', '),i=1,nElements-1),                    &
        list(nElements),        '};'
      else
        write(io, '(3a,a<LL>,a)' )firstchar, &
        trim(ecp_setname),     '_ := data {',         &
        list(nElements),        '};'
      endif
    endif
    return
  end subroutine ecp_lookup
  !================================================================================================================
  subroutine ecp_write_int_set(setname,first,last,nfield)
  use ecp_row_col
! ecp_write_int_set writes out a set declaration to an AIMMS-compatible file to transmit integer
! set definitions to the ECP project.

  implicit none
  character*(*) setname
  character*12 form(5)/'(I1)','(I0.0)','(a)','(a,I0.0)','(a,I0.0,a)'/
  integer first,last,j,is
  integer nfield ! size of field used to provide leading zeroes for PlantGroup, CoalSupplyCurve sets
  character*256 line
  
  
  if(last.gt.first) then
    if (first .ge. 0) then
       write(io,'(3a,i<nfield>.<nfield>,a,i<nfield>.<nfield>,a)') firstchar, trim(setname),'_ := data {',first,'..',last,'};'
    else
       line = firstchar//setname//'_ := data {'
        do is = first, 0     
            if (is .ne. 0) then
              write (line(len_trim(line)+1: ), form(5)) '"', is,'",'
            else
              write ( line( len_trim(line)+1:), form(3)) '0'
            endif
        enddo 
        write(line(len_trim(line)+1:), form(5)) '..',last,'};'       
        call mreplace(line,'"',char(39))
        write(io,form(3)) trim(line)
    endif
  else
    write(io,'(3a,i<nfield>.<nfield>,a)') firstchar, trim(setname),'_ := data {',first,'};'
  endif
  return
  end subroutine ecp_write_int_set
 !================================================================================================================
  subroutine write_ecp_sets
!   collect AIMMS sets used and calls get_ecp_set_element for each to write out the set name and its 
!   elements to a file for AIMMS to read.  This is intended to maintain the dimensionality of the AIMMS ecp
!   with the fortran/oml ecp.
  use ecp_row_col
  implicit none
  integer nsets,ic,is,ir,ifound,iset,i
  integer, parameter :: maxsets = 200
  character*30 sets(maxsets)
  character*30 tset(max_set) ! 6 in uecp.f, 5 in uefd.f
  character*5 ccode/'12345'/
  integer icode, inBoth

  nsets=1
  sets(1)='SupplyRegion' ! 4-character version for AIMMS, unused in ECP. All "_ALT" or alias sets for SupplyRegion in ECP OML names are 1 or 2 characters
  do ic = 0,max_col_aimms  ! number of column mask patterns, and matched to variables in AIMMS project
    if(col_aimms(ic).colnam_aimms.ne.' ') then
      tset(1:max_set)=' '
      do is=1,max_set  !  identifiers have up to max_set sets to define their domain.
         if(len_trim(col_aimms(ic).setnam(is)).gt.0) then
           tset(is)=col_aimms(ic).setnam(is)
           ifound=0
           do iset=1,nsets   ! go through list of sets being compiled and see if this set is new. if so, add to the list.
             if(tset(is).eq.sets(iset)) then
               ifound=1
               exit
             endif
           enddo
           if(ifound.eq.0) then   ! add the set to the list
             nsets=nsets+1
             sets(nsets)=tset(is)
           endif
         endif
      enddo
    endif
  enddo

  do ir = 0,max_row_aimms  ! loop over list of row mask patterns, and matched to row/constraints in AIMMS project
    if(row_aimms(ir).rownam_aimms.ne.' ') then
      tset(1:max_set)=' ' 
      do is=1,max_set !  identifiers have up to max_set sets to define their domain.
        if(len_trim(row_aimms(ir).setnam(is)).gt.0) then
          tset(is)=row_aimms(ir).setnam(is)
          ifound=0
          do iset=1,nsets    ! go through list of sets being compiled and see if this set is new. if so, add to the list.
            if(tset(is).eq.sets(iset)) then
              ifound=1
              exit
            endif
          enddo
          if(ifound.eq.0) then  ! add the set to the list
            nsets=nsets+1
            sets(nsets)=tset(is)
          endif
        else
          exit
        endif
      enddo
    endif
  enddo

  is=1
  do i=1,ECPSetLookCount
     tset(is)=xecpSetLook(i,2)
     ifound=0
     do iset=1,nsets    ! go through list of sets being compiled and see if this set is new. if so, add to the list.
       if(tset(is).eq.sets(iset)) then
         ifound=1
         exit
       endif
     enddo
     if(ifound.eq.0) then  ! add the set to the list
       nsets=nsets+1
       sets(nsets)=tset(is)
     endif
  enddo
   
   set_lookup=.false.

! with set_lookup false, each call writes out the set name and its elements to a file in aimms-compatible format
   do iset=1,nsets
     firstchar=' '
     if(index(sets(iset),'_ALT').gt.0) firstchar='!'   ! first character is a comment for sets with "_ALT in the name
     call get_ecp_set_element(trim(sets(iset)),ccode,icode)
   
   enddo
   
   set_lookup=.true.  ! normal setting so get_ecp_set_element just returns the set element associated with a masked position
   
   return
   end subroutine write_ecp_sets
!================================================================================================================
   subroutine ecp_mps
    use ecp_row_col
    implicit none
    include 'parametr'
    include 'ncntrl'
    integer imps
    save imps
    character*50 mpsname,year_iter*7
    character*18 fname/'ECPMPS'/
    LOGICAL NEW, not_done_yet/.true./, LOPENED
    INTEGER FILE_MGR
    EXTERNAL FILE_MGR
    integer ir,ix,ic,ndup,numz
    character*8 oldcol,oldrow
    real(8) oldcoeff8, coeff8

    if(not_done_yet) then
      not_done_yet=.false.
      NEW=.true.
      imps=file_mgr('O',fname,NEW)  ! get unit number for generic file ecpmps.mps
      inquire(unit=imps,opened=lopened)  ! close generic file but reuse unit number for year-specific version
      if(lopened) then
        close(imps,status='DELETE')
       endif
     endif

    write(year_iter,'(i4)') curcalyr
    mpsname=trim(fname)//trim(year_iter)//'.mps'     ! year-specific version of of ECPMPS.mps 

    open(imps,file=mpsname,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
    rewind imps 
100 format(a,t15,a,t25,a)
101 format(1x,a1,2x,a)
102 format(t5,a,T15,a,t25,g13.6)
103 format(t5,a,T15,a,t25,g12.5)

    do ix=0,max_ecp_row_hash
      ecp_rowidx(ix)=ix
      ecp_rowkey(ix)=ecp_row_name(ix)
    enddo

    call emm_sort16(ecp_rowkey,  ecp_rowidx,  cnt_ecp_row, max_ecp_row)  ! sort the rows

    write(imps,100) 'NAME','ACTPROB',trim(mpsname)
    write(imps,100) 'ROWS'
    do ix=0,max_ecp_row_hash
      ir=ecp_rowidx(ix)
      if(ecp_row_name(ir).eq.ecp_rowkey(ix)) then
        write(imps,101) ecp_row_sol(ir).row_type, ecp_row_name(ir)
      endif
    enddo

    numz=0
    ndup=0
    
    oldrow=' '
    oldcol=' '
    oldcoeff8=0.
! assumed to sorted by column/row, so duplicate coefficients will appear consecutively

    write(imps,100) 'COLUMNS'
    do ix=1,cnt_ecp_coeff
       ic=ecp_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.
       if(ecp_coeff(ic).ecprownam(1:5).ne.'BOUND' .and. ecp_coeff(ic).ecpcolnam(1:6).ne.'RHSECP') then

         if(oldrow.ne.ecp_coeff(ic).ecprownam .or. oldcol.ne.ecp_coeff(ic).ecpcolnam) then  ! eliminate duplicates
           if(ecp_coeff(ic).coeff8 .ne. 0.0D0) then
             write(imps,102)   ecp_coeff(ic).ecpcolnam,    ecp_coeff(ic).ecprownam,    ecp_coeff(ic).coeff8
           else
             numz=numz+1
           endif
         else
           if(oldrow.eq.ecp_coeff(ic).ecprownam .and. oldcol.eq.ecp_coeff(ic).ecpcolnam  .and. oldcoeff8.ne.ecp_coeff(ic).coeff8) then
       ! duplicate row, col name, but coefficient is different, so write it out.
             write(imps,102)   ecp_coeff(ic).ecpcolnam,    ecp_coeff(ic).ecprownam,    ecp_coeff(ic).coeff8
           else
             ndup=ndup+1
           endif
         endif
       endif   
       oldrow=ecp_coeff(ic).ecprownam
       oldcol=ecp_coeff(ic).ecpcolnam
       oldcoeff8=ecp_coeff(ic).coeff8

    enddo

    numz=0
    ndup=0
    oldrow=' '
    oldcol=' '
    oldcoeff8=0.
    write(imps,100) 'RHS'
    do ix=1,cnt_ecp_coeff
       ic=ecp_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.
       if(ecp_coeff(ic).ecpcolnam(1:6).eq.'RHSECP') then
         if(oldrow.ne.ecp_coeff(ic).ecprownam   .or.  oldcol.ne.'RHSECP')  then  ! eliminate duplicates
           if(ecp_coeff(ic).coeff8 .ne. 0.0D0) then
             write(imps,102)   ecp_coeff(ic).ecpcolnam,    ecp_coeff(ic).ecprownam,    ecp_coeff(ic).coeff8
           else
             numz=numz+1
           endif
         else ! oldrow.eq.ecp_coeff(ic).ecprownam   .and.  oldcol.eq.'RHSECP' so is a duplicate.  but if coeff differs, write it out anyway
           if(oldcoeff8.ne.ecp_coeff(ic).coeff8) then
             write(imps,102)   ecp_coeff(ic).ecpcolnam,    ecp_coeff(ic).ecprownam,    ecp_coeff(ic).coeff8
           else
             ndup=ndup+1
           endif
         endif
       endif   
       oldrow=ecp_coeff(ic).ecprownam
       oldcol=ecp_coeff(ic).ecpcolnam
       oldcoeff8=ecp_coeff(ic).coeff8
    enddo

    write(imps,100) 'BOUNDS'
    do ix=1,cnt_ecp_coeff
       ic=ecp_sortidx(ix)  ! process the coefficient in sorted order by columns and rows.  lower bound comes before upper bound.
       if(ecp_coeff(ic).ecprownam(1:7).eq.'BOUNDUP') then
          if(ecp_coeff(ic).ecpcolnam .eq. oldcol  .and. oldrow(1:7).eq.'BOUNDLO' .and. &
            (ecp_coeff(ic).coeff8.eq.oldcoeff8 .or. (ecp_coeff(ic).coeff8.eq.-1.0D0.and.oldcoeff8.eq.0.0D0))) then 
            
             if(ecp_coeff(ic).coeff8.eq.-1.0D0) then
               ecp_coeff(ic).coeff8=0.0D0
             endif

             write(imps,102)   'FX BOUND', ecp_coeff(ic).ecpcolnam, ecp_coeff(ic).coeff8
          elseif(ecp_coeff(ic).ecpcolnam .eq. oldcol  .and. oldrow(1:7).eq.'BOUNDLO') then
             if(oldcoeff8.ne.0.0D0) then
               write(imps,102)   'LO BOUND', oldcol,    oldcoeff8
             endif
             if(ecp_coeff(ic).coeff8.eq.-1.0D0) then
               ecp_coeff(ic).coeff8=0.0D0
             endif

             write(imps,102)   'UP BOUND', ecp_coeff(ic).ecpcolnam,    ecp_coeff(ic).coeff8
          else
             if(ecp_coeff(ic).coeff8.eq.-1.0D0) then
               ecp_coeff(ic).coeff8=0.0D0
             endif
             write(imps,102)   'UP BOUND', ecp_coeff(ic).ecpcolnam,    ecp_coeff(ic).coeff8
          endif
       endif   
       oldrow=ecp_coeff(ic).ecprownam
       oldcol=ecp_coeff(ic).ecpcolnam
       oldcoeff8=ecp_coeff(ic).coeff8

    enddo
    
    write(imps,100) 'ENDATA'   
    
   return
   end subroutine ecp_mps
!================================================================================================================
   subroutine read_ecp_sets
! reads in the set data file (written by subroutine write_ecp_sets) to obtain the list of character string elements for each AIMMS set.  

   use ecp_row_col
   implicit none
   integer iUnit,retcode,min_unit/100/,ifound,jfound,nsize,i,j,ncomma,nb, maxlinefound,L,istart
   integer nfield ! size of integer fields such as plantgroup, which is 5 characters wide
   
   integer, parameter :: maxlinelength = 600
   character (LEN=maxlinelength) line, line2
!
   open(io,file='ecp\ecpsetdata.dat',status='unknown',err=48)
   rewind io
   goto 49
48 continue
   open(io,file='ecpsetdata.dat',status='unknown') ! if running outside of nems, like from readaimlis.f90
49 continue   

   numaimsets=0
   nSetElements=0
   aimsets(:).istart =0
   aimsets(:).iend   =0
   aimsets(:).setname=' '
   setelements(:)= ' '
   maxlinefound=0
   
  10 read(io,'(a)',end=99) line
     l=len_trim(line)
     maxlinefound=max(maxlinefound,len_trim(line))
     if(maxlinefound.ge. maxlinelength-2 .or. line(l:l).ne.';') then
        write(6,*) 'AIMMS Interface error: subroutine read_ecp_sets: '
        write(6,*) 'AIMMS Interface error: The length of data line in ecpsetdata.dat too big, so increase MAXLINELENGTH parameter,'
        write(6,*) 'AIMMS Interface error: or else the line does not end in a semicolon;'
        stop ' '
     endif
     ifound=index(line,'_ := data {')
     if(ifound.gt.2) then
       numaimsets=numaimsets+1
       aimsets(numaimsets).setname=line(2:ifound-1)
       line(1:ifound+10)=' '
       ifound=index(line,'}')
       if(ifound.gt.0) then
         line(ifound:)= ' '
         line=adjustl(line)
         ifound=index(line,'..')  ! look for integer set based on this operator
         if(ifound.gt.0) then
           jfound=index(line,',')
           if (jfound.gt.0) then
             call Mreplace(line,char(39),' ')
             read(line(1:jfound-1),'(i)') istart
           else
             nfield=ifound-1
             read(line(1:ifound),'(i<nfield>)') istart ! read first field, start of range, usually 1 or 0
           endif
           
           !nfield=index(line,'..') - 1  ! size of first field, separated by "--"

           read(line(ifound+2:),'(i<nfield>)') nsize  ! read second of the two range fields
           nSetElements=nSetElements+1
           aimsets(numaimsets).istart=nSetElements
           aimsets(numaimsets).iend  =nSetElements+nsize-istart
           do i=istart,nsize  
             if (i .lt. 0 ) then   !added by AKN to handle i < 0
                write(setElements(nSetElements),'(i0.0)') i
             else
                write(setElements(nSetElements),'(i<nfield>.<nfield>)') i
             endif
             setElements(nSetElements)=adjustl(setElements(nSetElements))
             nSetElements=nSetElements+1
           enddo
           nSetElements=nSetElements-1
           if(aimsets(numaimsets).setname.eq.'BiomassProductionStep') then
             setElements(nSetElements)='XX'
           endif
         else
           ncomma=0
           nSetElements=nSetElements+1
           line2=' '
           nb=0
           do j=1,len_trim(line)
             if(line(j:j).eq.',') then
               ncomma=ncomma+1
               nb=nb+1
               line2(nb:nb)=line(j:J)
             elseif(line(j:j).ne.' ') then
               nb=nb+1
               line2(nb:nb)=line(j:J)
             endif
           enddo
!           write(6,'(i3,1x, a)') numaimsets,trim(line2)
           read(line2,*) (setElements(j),j=nSetElements,nSetElements+ncomma)
           aimsets(numaimsets).istart=nSetElements
           aimsets(numaimsets).iend  =nSetElements+ncomma
           nSetElements=nSetElements+ncomma
         endif
       endif
     endif
     goto 10
99 continue
   write(6,*) 'AIMMS in read_ecp_sets, nSetElements=',nSetElements
   return
   end subroutine read_ecp_sets
 !================================================================================================================
  subroutine AIMMS_Transfer_Out_ecp
  use ecp_row_col
  implicit none
! parameters definitions
  include 'parametr'
  include 'emmparm'
  include 'cdsparms'
  include 'dsmdimen'
  include 'entcntl'
  include 'eusprc'  
! variable definitions  
  include 'ab32'
  include 'angtdm'
  include 'bildin'
  include 'bildout'
  include 'coalemm'
  include 'coalrep'
  include 'cogen'
  include 'control'
  include 'convfact'
  include 'csapr'
  include 'dispcrv'
  include 'dispett'
  include 'dispin'
  include 'dispinyr'
  include 'dispout'
  include 'dispuse'
  include 'dsmsectr'
  include 'dsmtfecp'
  include 'dsmtoefd'
  include 'e111d'
  include 'ecp_coal'
  include 'ecpcntl'
  include 'ecp_nuc'
  
  include 'edbdef'
!  include 'edbwrt' uses same names as edbdef like colvals
  include 'efpgen'
  include 'elcntl'
  include 'elout'
  include 'emablk'
  include 'emeblk'
  include 'emission'
  include 'emmemis'
  include 'emoblk'
  include 'emshrin'
  include 'emshrout'
  include 'enewtech'
  
  include 'fuelin'
  include 'intout'
  include 'macout'
  include 'mxpblk'
  include 'ncntrl'
  include 'ngtdmrep'
  include 'ogsmout'
  include 'plntctl'
  include 'plntin'
  include 'postpr'
  include 'qblk'
  include 'udatout'
  include 'uecpout'
  include 'uefdout'
  include 'uettout'
  include 'uso2grp'
  include 'wrenew'   
  include 'wwdcomon'
  include 'emm_aimms'
  include 'taxdat'
  integer irg,iyr
  integer scalar/1/
  integer i,j
  iyr=curiyr
!---------------------------------------------------------------------------------------------------------
! Start of ECP code generated by arraycode.f to transfer_code_ecp.f
!---------------------------------------------------------------------------------------------------------
!==================================================================================================================================
!  Transfer the variables not stored in DAF files
!==================================================================================================================================
       call AIMMS_TransArray_out_ecp(ab_allbank_avl,ab_allbank_avl,ab_allbank_avl,ab_allbank_avl,ab_allbank_avl,1,"ab_allbank_avl", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.TRUE.)
       call AIMMS_TransArray_out_ecp(ab_auction_p,ab_auction_p,ab_auction_p,ab_auction_p,ab_auction_p,1,"ab_auction_p", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ab_cap_tot,ab_cap_tot,ab_cap_tot,ab_cap_tot,ab_cap_tot,1,"ab_cap_tot", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ab_covd_em_fue,ab_covd_em_fue,ab_covd_em_fue,ab_covd_em_fue,ab_covd_em_fue,1,"ab_covd_em_fue", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ab_covd_em_ind,ab_covd_em_ind,ab_covd_em_ind,ab_covd_em_ind,ab_covd_em_ind,1,"ab_covd_em_ind", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ab_covd_em_oth,ab_covd_em_oth,ab_covd_em_oth,ab_covd_em_oth,ab_covd_em_oth,1,"ab_covd_em_oth", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ab_covd_em_ref,ab_covd_em_ref,ab_covd_em_ref,ab_covd_em_ref,ab_covd_em_ref,1,"ab_covd_em_ref", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ab_cstcont_avl,ab_cstcont_avl,ab_cstcont_avl,ab_cstcont_avl,ab_cstcont_avl,1,"ab_cstcont_avl", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ab_cstcont_frac,ab_cstcont_frac,ab_cstcont_frac,ab_cstcont_frac,ab_cstcont_frac,1,"ab_cstcont_frac", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ab_offset_frac,ab_offset_frac,ab_offset_frac,ab_offset_frac,ab_offset_frac,1,"ab_offset_frac", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumyr,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ab_reserve_p,ab_reserve_p,ab_reserve_p,ab_reserve_p,ab_reserve_p,2,"ab_reserve_p", &
          1,             1,             1,             1,             1,             1,             1,  &
          3,             mnumyr,        1,             1,             1,             1,             1,  &
          "Three",      "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ACI_CST,ACI_CST,ACI_CST,ACI_CST,ACI_CST,3,"ACI_CST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ACI_CST,ACI_CST,ACI_CST,ACI_CST,ACI_CST,3,"ACI_CST_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ACI_OPT,ACI_OPT,ACI_OPT,ACI_OPT,ACI_OPT,4,"ACI_OPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        MNUMYR,        1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "MNUMYR",   "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ACI_OPT,ACI_OPT,ACI_OPT,ACI_OPT,ACI_OPT,4,"ACI_OPT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        MNUMYR,        1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "MNUMYR",   "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ACI_QAC,ACI_QAC,ACI_QAC,ACI_QAC,ACI_QAC,3,"ACI_QAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ACI_QAC,ACI_QAC,ACI_QAC,ACI_QAC,ACI_QAC,3,"ACI_QAC_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ACI_STEPS,ACI_STEPS,ACI_STEPS,ACI_STEPS,ACI_STEPS,2,"ACI_STEPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     NRANK,         1,             1,             1,             1,             1,  &
          "PlantType",  "EmissionRank", "",           "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIMMS_GRP,AIMMS_GRP,AIMMS_GRP,AIMMS_GRP,AIMMS_GRP,1,"AIMMS_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AICL,AICL,AICL,AICL,AICL,1,"AICL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIST,AIST,AIST,AIST,AIST,1,"AIST", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AICC,AICC,AICC,AICC,AICC,1,"AICC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AICT,AICT,AICT,AICT,AICT,1,"AICT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIFC,AIFC,AIFC,AIFC,AIFC,1,"AIFC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AINU,AINU,AINU,AINU,AINU,1,"AINU", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIWD,AIWD,AIWD,AIWD,AIWD,1,"AIWD", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIRN,AIRN,AIRN,AIRN,AIRN,1,"AIRN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIHY,AIHY,AIHY,AIHY,AIHY,1,"AIHY", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIPS,AIPS,AIPS,AIPS,AIPS,1,"AIPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIP2,AIP2,AIP2,AIP2,AIP2,1,"AIP2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AISG,AISG,AISG,AISG,AISG,1,"AISG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIWN,AIWN,AIWN,AIWN,AIWN,1,"AIWN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AISO,AISO,AISO,AISO,AISO,1,"AISO", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIPV,AIPV,AIPV,AIPV,AIPV,1,"AIPV", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIIN,AIIN,AIIN,AIIN,AIIN,1,"AIIN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(AIDG,AIDG,AIDG,AIDG,AIDG,1,"AIDG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(B_CCST_ADJ,B_CCST_ADJ,B_CCST_ADJ,B_CCST_ADJ,B_CCST_ADJ,1,"B_CCST_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(B_CCST_ADJ,B_CCST_ADJ,B_CCST_ADJ,B_CCST_ADJ,B_CCST_ADJ,1,"B_CCST_ADJ_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BARRIER,BARRIER,BARRIER,BARRIER,BARRIER,1,"BARRIER", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BASECAR,BASECAR,BASECAR,BASECAR,BASECAR,1,"BASECAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BASEHG,BASEHG,BASEHG,BASEHG,BASEHG,1,"BASEHG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BASENOX,BASENOX,BASENOX,BASENOX,BASENOX,1,"BASENOX", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BASESO2,BASESO2,BASESO2,BASESO2,BASESO2,2,"BASESO2", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        2,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "OwnerType", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(batteryEfficiency,batteryEfficiency,batteryEfficiency,batteryEfficiency,batteryEfficiency,1,"batteryEfficiency", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BM_FS_SW,BM_FS_SW,BM_FS_SW,BM_FS_SW,BM_FS_SW,1,"BM_FS_SW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BMEXICAN,BMEXICAN,BMEXICAN,BMEXICAN,BMEXICAN,1,"BMEXICAN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,1,"BNK_TO_CMM_HG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,1,"BNK_TO_CMM_HG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BTCOGEN,BTCOGEN,BTCOGEN,BTCOGEN,BTCOGEN,1,"BTCOGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(BUILD_AVL,BUILD_AVL,BUILD_AVL,BUILD_AVL,BUILD_AVL,4,"BUILD_AVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     ECP_D_XPH,     MNUMNR,        MNUMYR,        1,             1,             1,  &
          "PlantType",  "ExplicitPlanningHorizon", "SupplyRegion_ALT1", "MNUMYR", "", "",          "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(C_DR,C_DR,C_DR,C_DR,C_DR,1,"C_DR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(C_DR,C_DR,C_DR,C_DR,C_DR,1,"C_DR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(C_ECP_CDS,C_ECP_CDS,C_ECP_CDS,C_ECP_CDS,C_ECP_CDS,2,"C_ECP_CDS", &
          1,             1,             1,             1,             1,             1,             1,  &
          NUTSEC,        NDREG+1,       1,             1,             1,             1,             1,  &
          "UtilitySector", "CoalDemandRegion", "",    "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_SCRUB,ECP_SCRUB,ECP_SCRUB,ECP_SCRUB,ECP_SCRUB,2,"ECP_SCRUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          NUTSEC,        MNUMYR,        1,             1,             1,             1,             1,  &
          "UtilitySector", "MNUMYR",   "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(C_EMM_CDS,C_EMM_CDS,C_EMM_CDS,C_EMM_CDS,C_EMM_CDS,2,"C_EMM_CDS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        NDREG,         1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CoalDemandRegion", "", "",           "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CAN_CST_SCMULT,CAN_CST_SCMULT,CAN_CST_SCMULT,CAN_CST_SCMULT,CAN_CST_SCMULT,1,"CAN_CST_SCMULT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CAN_QTY_SCMULT,CAN_QTY_SCMULT,CAN_QTY_SCMULT,CAN_QTY_SCMULT,CAN_QTY_SCMULT,1,"CAN_QTY_SCMULT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CAPSUB,CAPSUB,CAPSUB,CAPSUB,CAPSUB,1,"CAPSUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CARECP,CARECP,CARECP,CARECP,CARECP,2,"CARECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CARECP,CARECP,CARECP,CARECP,CARECP,2,"CARECP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CARGRP_CA,CARGRP_CA,CARGRP_CA,CARGRP_CA,CARGRP_CA,1,"CARGRP_CA", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CARGRP_RG,CARGRP_RG,CARGRP_RG,CARGRP_RG,CARGRP_RG,1,"CARGRP_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CES_DCR,CES_DCR,CES_DCR,CES_DCR,CES_DCR,1,"CES_DCR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CES_DUALS,CES_DUALS,CES_DUALS,CES_DUALS,CES_DUALS,2,"CES_DUALS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "MNUMYR",     "ExplicitPlanningHorizon", "", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CES_DUALS,CES_DUALS,CES_DUALS,CES_DUALS,CES_DUALS,2,"CES_DUALS_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "MNUMYR",     "ExplicitPlanningHorizon", "", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CES_SMOOTH_DUAL,CES_SMOOTH_DUAL,CES_SMOOTH_DUAL,CES_SMOOTH_DUAL,CES_SMOOTH_DUAL,1,"CES_SMOOTH_DUAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CES_SMOOTH_TGT,CES_SMOOTH_TGT,CES_SMOOTH_TGT,CES_SMOOTH_TGT,CES_SMOOTH_TGT,1,"CES_SMOOTH_TGT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CFNGU,CFNGU,CFNGU,CFNGU,CFNGU,1,"CFNGU", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CGTOTGENNR,CGTOTGENNR,CGTOTGENNR,CGTOTGENNR,CGTOTGENNR,4,"CGTOTGENNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        MNUMCGF,       2,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "CHPFuel",   "OwnerType",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CL_SCST,CL_SCST,CL_SCST,CL_SCST,CL_SCST,1,"CL_SCST", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CMM_CL_BTUS,CMM_CL_BTUS,CMM_CL_BTUS,CMM_CL_BTUS,CMM_CL_BTUS,2,"CMM_CL_BTUS", &
          1,                               1,             1,             1,             1,             1,             1,  &
          MX_SUPPLY_CURVES+MX_INTL_CURVES, MX_UNITS,      1,             1,             1,             1,             1,  &
          "SupplyCurves", "PlantGroup", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CMM_LDV_INDX,CMM_LDV_INDX,CMM_LDV_INDX,CMM_LDV_INDX,CMM_LDV_INDX,1,"CMM_LDV_INDX", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CMM_LDV_INDX,CMM_LDV_INDX,CMM_LDV_INDX,CMM_LDV_INDX,CMM_LDV_INDX,1,"CMM_LDV_INDX_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CMM_LDV_PRF,CMM_LDV_PRF,CMM_LDV_PRF,CMM_LDV_PRF,CMM_LDV_PRF,2,"CMM_LDV_PRF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_PRF,        MNUMYR,        1,             1,             1,             1,             1,  &
          "DiversityProfile", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CMM_SDV_PRF,CMM_SDV_PRF,CMM_SDV_PRF,CMM_SDV_PRF,CMM_SDV_PRF,2,"CMM_SDV_PRF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_PRF,        MNUMYR,        1,             1,             1,             1,             1,  &
          "DiversityProfile", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CNSTRNTS_ECP,CNSTRNTS_ECP,CNSTRNTS_ECP,CNSTRNTS_ECP,CNSTRNTS_ECP,4,"CNSTRNTS_ECP", &
          1,             1,             1,                 1,                 1,             1,             1,  &
          EFD_D_MSP,     MNUMYR,        MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,  &
          "Season",     "MNUMYR",      "SupplyRegionAll_ALT1", "SupplyRegionAll", "", "",          "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_AFFYR,CO2_AFFYR,CO2_AFFYR,CO2_AFFYR,CO2_AFFYR,1,"CO2_AFFYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_CL_BY_FL,CO2_CL_BY_FL,CO2_CL_BY_FL,CO2_CL_BY_FL,CO2_CL_BY_FL,2,"CO2_CL_BY_FL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "FuelRegion", "CO2CapGroup", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_DE_BY_RG,CO2_DE_BY_RG,CO2_DE_BY_RG,CO2_DE_BY_RG,CO2_DE_BY_RG,2,"CO2_DE_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CO2CapGroup", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_DF_BY_CA,CO2_DF_BY_CA,CO2_DF_BY_CA,CO2_DF_BY_CA,CO2_DF_BY_CA,1,"CO2_DF_BY_CA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_DF_BY_RG,CO2_DF_BY_RG,CO2_DF_BY_RG,CO2_DF_BY_RG,CO2_DF_BY_RG,2,"CO2_DF_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CO2CapGroup", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_ECPSW,CO2_ECPSW,CO2_ECPSW,CO2_ECPSW,CO2_ECPSW,1,"CO2_ECPSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_EFFSW,CO2_EFFSW,CO2_EFFSW,CO2_EFFSW,CO2_EFFSW,1,"CO2_EFFSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_EMSWD,CO2_EMSWD,CO2_EMSWD,CO2_EMSWD,CO2_EMSWD,1,"CO2_EMSWD", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_ENDCG,CO2_ENDCG,CO2_ENDCG,CO2_ENDCG,CO2_ENDCG,1,"CO2_ENDCG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_ERCFR,CO2_ERCFR,CO2_ERCFR,CO2_ERCFR,CO2_ERCFR,1,"CO2_ERCFR", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    1,             1,             1,             1,             1,             1,  &
          "FuelRegion_ALT1", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_ERCNR,CO2_ERCNR,CO2_ERCNR,CO2_ERCNR,CO2_ERCNR,1,"CO2_ERCNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_ERCSW,CO2_ERCSW,CO2_ERCSW,CO2_ERCSW,CO2_ERCSW,1,"CO2_ERCSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_GRP,CO2_GRP,CO2_GRP,CO2_GRP,CO2_GRP,1,"CO2_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_IM_BY_CA,CO2_IM_BY_CA,CO2_IM_BY_CA,CO2_IM_BY_CA,CO2_IM_BY_CA,1,"CO2_IM_BY_CA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_IM_BY_RG,CO2_IM_BY_RG,CO2_IM_BY_RG,CO2_IM_BY_RG,CO2_IM_BY_RG,2,"CO2_IM_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CO2CapGroup", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_INCSW,CO2_INCSW,CO2_INCSW,CO2_INCSW,CO2_INCSW,1,"CO2_INCSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_INCSW,CO2_INCSW,CO2_INCSW,CO2_INCSW,CO2_INCSW,1,"CO2_INCSW_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_OG_BY_FL,CO2_OG_BY_FL,CO2_OG_BY_FL,CO2_OG_BY_FL,CO2_OG_BY_FL,2,"CO2_OG_BY_FL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        CO2_D_GRP,     1,             1,             1,             1,             1,  &
          "FuelRegion", "CO2CapGroup", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_PCTSA,CO2_PCTSA,CO2_PCTSA,CO2_PCTSA,CO2_PCTSA,1,"CO2_PCTSA", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_PLTRG,CO2_PLTRG,CO2_PLTRG,CO2_PLTRG,CO2_PLTRG,2,"CO2_PLTRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_PLTSA,CO2_PLTSA,CO2_PLTSA,CO2_PLTSA,CO2_PLTSA,1,"CO2_PLTSA", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_PLTSW,CO2_PLTSW,CO2_PLTSW,CO2_PLTSW,CO2_PLTSW,1,"CO2_PLTSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_PLTSW,CO2_PLTSW,CO2_PLTSW,CO2_PLTSW,CO2_PLTSW,1,"CO2_PLTSW_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDGF,CO2_STDGF,CO2_STDGF,CO2_STDGF,CO2_STDGF,2,"CO2_STDGF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "FuelRegion_ALT1", "FuelRegion", "",        "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDGN,CO2_STDGN,CO2_STDGN,CO2_STDGN,CO2_STDGN,2,"CO2_STDGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "SupplyRegion", "",    "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDQF,CO2_STDQF,CO2_STDQF,CO2_STDQF,CO2_STDQF,2,"CO2_STDQF", &
          1,             1,                1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "FuelRegion_ALT1", "MNUMYRF", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDQN,CO2_STDQN,CO2_STDQN,CO2_STDQN,CO2_STDQN,2,"CO2_STDQN", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRF", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDQT,CO2_STDQT,CO2_STDQT,CO2_STDQT,CO2_STDQT,1,"CO2_STDQT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDRF,CO2_STDRF,CO2_STDRF,CO2_STDRF,CO2_STDRF,2,"CO2_STDRF", &
          1,             1,                1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "FuelRegion_ALT1", "MNUMYRF", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDRN,CO2_STDRN,CO2_STDRN,CO2_STDRN,CO2_STDRN,2,"CO2_STDRN", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRF", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDSA,CO2_STDSA,CO2_STDSA,CO2_STDSA,CO2_STDSA,1,"CO2_STDSA", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDSW,CO2_STDSW,CO2_STDSW,CO2_STDSW,CO2_STDSW,1,"CO2_STDSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDTF,CO2_STDTF,CO2_STDTF,CO2_STDTF,CO2_STDTF,1,"CO2_STDTF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    1,             1,             1,             1,             1,             1,  &
          "FuelRegion_ALT1", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDTN,CO2_STDTN,CO2_STDTN,CO2_STDTN,CO2_STDTN,1,"CO2_STDTN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STDY1,CO2_STDY1,CO2_STDY1,CO2_STDY1,CO2_STDY1,1,"CO2_STDY1", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_STPSA,CO2_STPSA,CO2_STPSA,CO2_STPSA,CO2_STPSA,2,"CO2_STPSA", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     ECP_D_DGS,     1,             1,             1,             1,             1,  &
          "PlantType",  "DistGenAvoidStep", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_THRET,CO2_THRET,CO2_THRET,CO2_THRET,CO2_THRET,1,"CO2_THRET", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2_TRDSW,CO2_TRDSW,CO2_TRDSW,CO2_TRDSW,CO2_TRDSW,1,"CO2_TRDSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2BYGRP,CO2BYGRP,CO2BYGRP,CO2BYGRP,CO2BYGRP,2,"CO2BYGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2EPGRP,CO2EPGRP,CO2EPGRP,CO2EPGRP,CO2EPGRP,2,"CO2EPGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2EQGRP,CO2EQGRP,CO2EQGRP,CO2EQGRP,CO2EQGRP,2,"CO2EQGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2ESGRP,CO2ESGRP,CO2ESGRP,CO2ESGRP,CO2ESGRP,2,"CO2ESGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2FLGRP,CO2FLGRP,CO2FLGRP,CO2FLGRP,CO2FLGRP,2,"CO2FLGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2OQGRP,CO2OQGRP,CO2OQGRP,CO2OQGRP,CO2OQGRP,2,"CO2OQGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2RPGRP,CO2RPGRP,CO2RPGRP,CO2RPGRP,CO2RPGRP,2,"CO2RPGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CO2RQGRP,CO2RQGRP,CO2RQGRP,CO2RQGRP,CO2RQGRP,2,"CO2RQGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYR",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(COLVALS,COLVALS,COLVALS,COLVALS,COLVALS,2,"COLVALS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXCOLS,       MAXRECS,       1,             1,             1,             1,             1,  &
          "DBColumns",  "DBRecords",   "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(COLVALS,COLVALS,COLVALS,COLVALS,COLVALS,2,"COLVALS_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXCOLS,       MAXRECS,       1,             1,             1,             1,             1,  &
          "DBColumns",  "DBRecords",   "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CPPALLOW,CPPALLOW,CPPALLOW,CPPALLOW,CPPALLOW,1,"CPPALLOW", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CTLBTU,CTLBTU,CTLBTU,CTLBTU,CTLBTU,3,"CTLBTU", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     NDREG,         MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "CoalDemandRegion", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CURIYR,CURIYR,CURIYR,CURIYR,CURIYR,1,"CURIYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DIGITS_PARM,DIGITS_PARM,DIGITS_PARM,DIGITS_PARM,DIGITS_PARM,1,"DIGITS_PARM", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DSMFPH1,DSMFPH1,DSMFPH1,DSMFPH1,DSMFPH1,1,"DSMFPH1", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DSMPRCHOICE,DSMPRCHOICE,DSMPRCHOICE,DSMPRCHOICE,DSMPRCHOICE,2,"DSMPRCHOICE", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNRG,        MAXDSMP,       1,             1,             1,             1,             1,  &
          "DSMSupplyRegion", "DemSideProg", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DSMPRCHOICE,DSMPRCHOICE,DSMPRCHOICE,DSMPRCHOICE,DSMPRCHOICE,2,"DSMPRCHOICE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNRG,        MAXDSMP,       1,             1,             1,             1,             1,  &
          "DSMSupplyRegion", "DemSideProg", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DPVTOTGENNR,DPVTOTGENNR,DPVTOTGENNR,DPVTOTGENNR,DPVTOTGENNR,2,"DPVTOTGENNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DPVDISPATCH,DPVDISPATCH,DPVDISPATCH,DPVDISPATCH,DPVDISPATCH,1,"DPVDISPATCH", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DPVTOTCAPNR,DPVTOTCAPNR,DPVTOTCAPNR,DPVTOTCAPNR,DPVTOTCAPNR,2,"DPVTOTCAPNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DUCK_SYSTEM_LOAD,DUCK_SYSTEM_LOAD,DUCK_SYSTEM_LOAD,DUCK_SYSTEM_LOAD,DUCK_SYSTEM_LOAD,5,"DUCK_SYSTEM_LOAD", &
          1,             1,             1,             1,             1,             1,             1,  &
          12,            3,             24,            MNUMNR,        MNUMYR,        1,             1,  &
          "Months",     "Three",       "HoursADay",   "SupplyRegion", "MNUMYR",     "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DV_LIG,DV_LIG,DV_LIG,DV_LIG,DV_LIG,2,"DV_LIG", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         2,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "OwnerType", "",        "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(DV_SUB,DV_SUB,DV_SUB,DV_SUB,DV_SUB,2,"DV_SUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         2,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "OwnerType", "",        "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(E_IGRP,E_IGRP,E_IGRP,E_IGRP,E_IGRP,1,"E_IGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(E_IGRP,E_IGRP,E_IGRP,E_IGRP,E_IGRP,1,"E_IGRP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(E_PTP,E_PTP,E_PTP,E_PTP,E_PTP,1,"E_PTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(E_PTP,E_PTP,E_PTP,E_PTP,E_PTP,1,"E_PTP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(E_RY,E_RY,E_RY,E_RY,E_RY,1,"E_RY", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(E_RY,E_RY,E_RY,E_RY,E_RY,1,"E_RY_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECANSQZ,ECANSQZ,ECANSQZ,ECANSQZ,ECANSQZ,2,"ECANSQZ", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_PROV,    MNUMYR,        1,             1,             1,             1,             1,  &
          "CanadianSupplyRegion", "MNUMYR", "",       "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECFOR,ECFOR,ECFOR,ECFOR,ECFOR,1,"ECFOR", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CAP,ECL_CAP,ECL_CAP,ECL_CAP,ECL_CAP,2,"ECL_CAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MAX_CL,        1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "CoalGroup", "", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CCS_C,ECL_CCS_C,ECL_CCS_C,ECL_CCS_C,ECL_CCS_C,1,"ECL_CCS_C", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CCS_F,ECL_CCS_F,ECL_CCS_F,ECL_CCS_F,ECL_CCS_F,1,"ECL_CCS_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CCS_H,ECL_CCS_H,ECL_CCS_H,ECL_CCS_H,ECL_CCS_H,1,"ECL_CCS_H", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CCS_O,ECL_CCS_O,ECL_CCS_O,ECL_CCS_O,ECL_CCS_O,1,"ECL_CCS_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CCS_R,ECL_CCS_R,ECL_CCS_R,ECL_CCS_R,ECL_CCS_R,1,"ECL_CCS_R", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CCS_V,ECL_CCS_V,ECL_CCS_V,ECL_CCS_V,ECL_CCS_V,1,"ECL_CCS_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CF,ECL_CF,ECL_CF,ECL_CF,ECL_CF,2,"ECL_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MAX_CL,        1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "CoalGroup", "", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CFB_F,ECL_CFB_F,ECL_CFB_F,ECL_CFB_F,ECL_CFB_F,1,"ECL_CFB_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CFB_O,ECL_CFB_O,ECL_CFB_O,ECL_CFB_O,ECL_CFB_O,1,"ECL_CFB_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CFB_V,ECL_CFB_V,ECL_CFB_V,ECL_CFB_V,ECL_CFB_V,1,"ECL_CFB_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CL_NG_COST,ECL_CL_NG_COST,ECL_CL_NG_COST,ECL_CL_NG_COST,ECL_CL_NG_COST,1,"ECL_CL_NG_COST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CL_NG_TRAN,ECL_CL_NG_TRAN,ECL_CL_NG_TRAN,ECL_CL_NG_TRAN,ECL_CL_NG_TRAN,1,"ECL_CL_NG_TRAN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CLRG,ECL_CLRG,ECL_CLRG,ECL_CLRG,ECL_CLRG,1,"ECL_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CMB_F,ECL_CMB_F,ECL_CMB_F,ECL_CMB_F,ECL_CMB_F,1,"ECL_CMB_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CMB_O,ECL_CMB_O,ECL_CMB_O,ECL_CMB_O,ECL_CMB_O,1,"ECL_CMB_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CMB_R,ECL_CMB_R,ECL_CMB_R,ECL_CMB_R,ECL_CMB_R,1,"ECL_CMB_R", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_CMB_V,ECL_CMB_V,ECL_CMB_V,ECL_CMB_V,ECL_CMB_V,1,"ECL_CMB_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_DSI_F,ECL_DSI_F,ECL_DSI_F,ECL_DSI_F,ECL_DSI_F,1,"ECL_DSI_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_DSI_O,ECL_DSI_O,ECL_DSI_O,ECL_DSI_O,ECL_DSI_O,1,"ECL_DSI_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_DSI_R,ECL_DSI_R,ECL_DSI_R,ECL_DSI_R,ECL_DSI_R,1,"ECL_DSI_R", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_DSI_V,ECL_DSI_V,ECL_DSI_V,ECL_DSI_V,ECL_DSI_V,1,"ECL_DSI_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_ESP_O,ECL_ESP_O,ECL_ESP_O,ECL_ESP_O,ECL_ESP_O,1,"ECL_ESP_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_FF_F,ECL_FF_F,ECL_FF_F,ECL_FF_F,ECL_FF_F,1,"ECL_FF_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_FF_O,ECL_FF_O,ECL_FF_O,ECL_FF_O,ECL_FF_O,1,"ECL_FF_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_FF_V,ECL_FF_V,ECL_FF_V,ECL_FF_V,ECL_FF_V,1,"ECL_FF_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_FGD_F,ECL_FGD_F,ECL_FGD_F,ECL_FGD_F,ECL_FGD_F,1,"ECL_FGD_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_FGD_O,ECL_FGD_O,ECL_FGD_O,ECL_FGD_O,ECL_FGD_O,1,"ECL_FGD_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_FGD_V,ECL_FGD_V,ECL_FGD_V,ECL_FGD_V,ECL_FGD_V,1,"ECL_FGD_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_FOM,ECL_FOM,ECL_FOM,ECL_FOM,ECL_FOM,2,"ECL_FOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MAX_CL,        1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "CoalGroup", "", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_FREC,ECL_FREC,ECL_FREC,ECL_FREC,ECL_FREC,1,"ECL_FREC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_GRP,ECL_GRP,ECL_GRP,ECL_GRP,ECL_GRP,2,"ECL_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MAX_CL,        1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "CoalGroup", "", "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_HRI_F,ECL_HRI_F,ECL_HRI_F,ECL_HRI_F,ECL_HRI_F,1,"ECL_HRI_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_HRI_H,ECL_HRI_H,ECL_HRI_H,ECL_HRI_H,ECL_HRI_H,1,"ECL_HRI_H", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_HRI_O,ECL_HRI_O,ECL_HRI_O,ECL_HRI_O,ECL_HRI_O,1,"ECL_HRI_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_HRI_V,ECL_HRI_V,ECL_HRI_V,ECL_HRI_V,ECL_HRI_V,1,"ECL_HRI_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_ICFG,ECL_ICFG,ECL_ICFG,ECL_ICFG,ECL_ICFG,1,"ECL_ICFG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_MR,ECL_MR,ECL_MR,ECL_MR,ECL_MR,1,"ECL_MR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_NXG,ECL_NXG,ECL_NXG,ECL_NXG,ECL_NXG,3,"ECL_NXG", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     NOX_D_GRP,     MAX_CL,        1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NOXRegion", "CoalGroup", "",   "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_NXR,ECL_NXR,ECL_NXR,ECL_NXR,ECL_NXR,2,"ECL_NXR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MAX_CL,        1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "CoalGroup", "", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_QT,ECL_QT,ECL_QT,ECL_QT,ECL_QT,1,"ECL_QT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_RCFG,ECL_RCFG,ECL_RCFG,ECL_RCFG,ECL_RCFG,2,"ECL_RCFG", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MAX_CL,        1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "CoalGroup", "", "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_RG,ECL_RG,ECL_RG,ECL_RG,ECL_RG,1,"ECL_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_RG_CAP,ECL_RG_CAP,ECL_RG_CAP,ECL_RG_CAP,ECL_RG_CAP,2,"ECL_RG_CAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MAX_CL,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CoalGroup", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_RVAL,ECL_RVAL,ECL_RVAL,ECL_RVAL,ECL_RVAL,1,"ECL_RVAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_RYR,ECL_RYR,ECL_RYR,ECL_RYR,ECL_RYR,1,"ECL_RYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_RYRS,ECL_RYRS,ECL_RYRS,ECL_RYRS,ECL_RYRS,1,"ECL_RYRS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_SCR_F,ECL_SCR_F,ECL_SCR_F,ECL_SCR_F,ECL_SCR_F,1,"ECL_SCR_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_SCR_O,ECL_SCR_O,ECL_SCR_O,ECL_SCR_O,ECL_SCR_O,1,"ECL_SCR_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_SCR_R,ECL_SCR_R,ECL_SCR_R,ECL_SCR_R,ECL_SCR_R,1,"ECL_SCR_R", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_SCR_V,ECL_SCR_V,ECL_SCR_V,ECL_SCR_V,ECL_SCR_V,1,"ECL_SCR_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_SNCR_F,ECL_SNCR_F,ECL_SNCR_F,ECL_SNCR_F,ECL_SNCR_F,1,"ECL_SNCR_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_SNCR_O,ECL_SNCR_O,ECL_SNCR_O,ECL_SNCR_O,ECL_SNCR_O,1,"ECL_SNCR_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_SNCR_R,ECL_SNCR_R,ECL_SNCR_R,ECL_SNCR_R,ECL_SNCR_R,1,"ECL_SNCR_R", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_SNCR_V,ECL_SNCR_V,ECL_SNCR_V,ECL_SNCR_V,ECL_SNCR_V,1,"ECL_SNCR_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_SP_CAP_FAC,ECL_SP_CAP_FAC,ECL_SP_CAP_FAC,ECL_SP_CAP_FAC,ECL_SP_CAP_FAC,2,"ECL_SP_CAP_FAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MSP,     MAX_CL,        1,             1,             1,             1,             1,  &
          "Season",     "CoalGroup",   "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_VADJ,ECL_VADJ,ECL_VADJ,ECL_VADJ,ECL_VADJ,2,"ECL_VADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MAX_CL,        1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "CoalGroup", "", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECL_YR,ECL_YR,ECL_YR,ECL_YR,ECL_YR,1,"ECL_YR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_CL,        1,             1,             1,             1,             1,             1,  &
          "CoalGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECLEL,ECLEL,ECLEL,ECLEL,ECLEL,1,"ECLEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECO2ERPP,ECO2ERPP,ECO2ERPP,ECO2ERPP,ECO2ERPP,2,"ECO2ERPP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPAREG,        MNUMYR,        1,             1,             1,             1,             1,  &
          "CPPRegion",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECO2ERPP,ECO2ERPP,ECO2ERPP,ECO2ERPP,ECO2ERPP,2,"ECO2ERPP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPAREG,        MNUMYR,        1,             1,             1,             1,             1,  &
          "CPPRegion",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECO2FRPP,ECO2FRPP,ECO2FRPP,ECO2FRPP,ECO2FRPP,2,"ECO2FRPP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG+1,  MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion_ALT1", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECO2FRPP,ECO2FRPP,ECO2FRPP,ECO2FRPP,ECO2FRPP,2,"ECO2FRPP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG+1,  MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion_ALT1", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECO2NRPP,ECO2NRPP,ECO2NRPP,ECO2NRPP,ECO2NRPP,2,"ECO2NRPP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_D_LFHR,ECP_D_LFHR,ECP_D_LFHR,ECP_D_LFHR,ECP_D_LFHR,1,"ECP_LFHR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_D_OVHR,ECP_D_OVHR,ECP_D_OVHR,ECP_D_OVHR,ECP_D_OVHR,1,"ECP_OVHR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_FYR,ECP_FYR,ECP_FYR,ECP_FYR,ECP_FYR,1,"ECP_FYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_GW,ECP_GW,ECP_GW,ECP_GW,ECP_GW,5,"ECP_GW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_SSZ,     ECP_D_STP,     EFD_D_CSS,     EFD_D_PROV,    MNUMYR,        1,             1,  &
          "StepsPerGroup", "ECPLoadGroup", "ImportStep", "CanadianSupplyRegion", "MNUMYR", "",     "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_LCAR,ECP_LCAR,ECP_LCAR,ECP_LCAR,ECP_LCAR,1,"ECP_LCAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_LCAR,ECP_LCAR,ECP_LCAR,ECP_LCAR,ECP_LCAR,1,"ECP_LCAR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_MIN,ECP_MIN,ECP_MIN,ECP_MIN,ECP_MIN,1,"ECP_MIN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_OCAR,ECP_OCAR,ECP_OCAR,ECP_OCAR,ECP_OCAR,1,"ECP_OCAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_PCAR,ECP_PCAR,ECP_PCAR,ECP_PCAR,ECP_PCAR,2,"ECP_PCAR", &
          0,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MNUMYR,        1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon_SUP", "MNUMYR", "", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_PCAR,ECP_PCAR,ECP_PCAR,ECP_PCAR,ECP_PCAR,2,"ECP_PCAR_pass", &
          0,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MNUMYR,        1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon_SUP", "MNUMYR", "", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_PECP,ECP_PECP,ECP_PECP,ECP_PECP,ECP_PECP,3,"ECP_PECP", &
          1,             0,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     ECP_D_XPH,     MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "ExplicitPlanningHorizon_SUP", "MNUMYR", "", "",   "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_PECP,ECP_PECP,ECP_PECP,ECP_PECP,ECP_PECP,3,"ECP_PECP_pass", &
          1,             0,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     ECP_D_XPH,     MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "ExplicitPlanningHorizon_SUP", "MNUMYR", "", "",   "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_PHG,ECP_PHG,ECP_PHG,ECP_PHG,ECP_PHG,2,"ECP_PHG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_PHG,ECP_PHG,ECP_PHG,ECP_PHG,ECP_PHG,2,"ECP_PHG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_PSO2,ECP_PSO2,ECP_PSO2,ECP_PSO2,ECP_PSO2,3,"ECP_PSO2", &
          0,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,  &
          "ExplicitPlanningHorizon_SUP", "MNUMYR", "SO2ComplyGroup", "", "",        "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_PSO2,ECP_PSO2,ECP_PSO2,ECP_PSO2,ECP_PSO2,3,"ECP_PSO2_pass", &
          0,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,  &
          "ExplicitPlanningHorizon_SUP", "MNUMYR", "SO2ComplyGroup", "", "",        "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_QCAR,ECP_QCAR,ECP_QCAR,ECP_QCAR,ECP_QCAR,1,"ECP_QCAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_QCAR,ECP_QCAR,ECP_QCAR,ECP_QCAR,ECP_QCAR,1,"ECP_QCAR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_QECP,ECP_QECP,ECP_QECP,ECP_QECP,ECP_QECP,3,"ECP_QECP", &
          1,             0,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     ECP_D_XPH,     MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "ExplicitPlanningHorizon_SUP", "MNUMYR", "", "",   "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_QHG,ECP_QHG,ECP_QHG,ECP_QHG,ECP_QHG,2,"ECP_QHG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_QHG,ECP_QHG,ECP_QHG,ECP_QHG,ECP_QHG,2,"ECP_QHG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_QNOX,ECP_QNOX,ECP_QNOX,ECP_QNOX,ECP_QNOX,2,"ECP_QNOX", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "NOXRegion",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECP_QSO2,ECP_QSO2,ECP_QSO2,ECP_QSO2,ECP_QSO2,1,"ECP_QSO2", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECPMR,ECPMR,ECPMR,ECPMR,ECPMR,1,"ECPMR", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECPSEDEF(:,1),ECPSEDEF(:,1),ECPSEDEF(:,1),ECPSEDEF(:,1),ECPSEDEF(:,1),1,"ECPSEDEF_FIRST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXECPS,       1,             1,             1,             1,             1,             1,  &
          "Season",     "",            "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ECPSEDEF(:,2),ECPSEDEF(:,2),ECPSEDEF(:,2),ECPSEDEF(:,2),ECPSEDEF(:,2),1,"ECPSEDEF_LAST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXECPS,       1,             1,             1,             1,             1,             1,  &
          "Season",     "",            "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EDSEL,EDSEL,EDSEL,EDSEL,EDSEL,1,"EDSEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EFD_MIN,EFD_MIN,EFD_MIN,EFD_MIN,EFD_MIN,1,"EFD_MIN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EFD_RANK,EFD_RANK,EFD_RANK,EFD_RANK,EFD_RANK,1,"EFD_RANK", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, 1,             1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EGEN_FRST,EGEN_FRST,EGEN_FRST,EGEN_FRST,EGEN_FRST,3,"EGEN_FRST", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+2,   EFD_D_MFRG+1,  EMM_D_ST+1,    1,             1,             1,             1,  &
          "PlantType",  "FuelRegion",  "EMMStates",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EGEN_NRFR,EGEN_NRFR,EGEN_NRFR,EGEN_NRFR,EGEN_NRFR,3,"EGEN_NRFR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+2,   MNUMNR,        EFD_D_MFRG+1,  1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "FuelRegion_ALT1", "",       "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EGEN_NRST,EGEN_NRST,EGEN_NRST,EGEN_NRST,EGEN_NRST,3,"EGEN_NRST", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP+2,   MNUMNR,        EMM_D_ST+1,    1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "EMMStates",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EGENFREE,EGENFREE,EGENFREE,EGENFREE,EGENFREE,2,"EGENFREE", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG+1,  MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion_ALT1", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EGENFRQF,EGENFRQF,EGENFRQF,EGENFRQF,EGENFRQF,2,"EGENFRQF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG+1,  MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion_ALT1", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EGENNREE,EGENNREE,EGENNREE,EGENNREE,EGENNREE,2,"EGENNREE", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EGENNRQF,EGENNRQF,EGENNRQF,EGENNRQF,EGENNRQF,2,"EGENNRQF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EGFEL,EGFEL,EGFEL,EGFEL,EGFEL,1,"EGFEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EITRAN,EITRAN,EITRAN,EITRAN,EITRAN,1,"EITRAN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EL_MRKUP_BETA,EL_MRKUP_BETA,EL_MRKUP_BETA,EL_MRKUP_BETA,EL_MRKUP_BETA,1,"EL_MRKUP_BETA", &
          1,             1,             1,             1,             1,             1,             1,  &
          3,             1,             1,             1,             1,             1,             1,  &
          "Three",      "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ELEC_FLAG,ELEC_FLAG,ELEC_FLAG,ELEC_FLAG,ELEC_FLAG,1,"ELEC_FLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMCMC,EMCMC,EMCMC,EMCMC,EMCMC,3,"EMCMC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMEL_PHG,EMEL_PHG,EMEL_PHG,EMEL_PHG,EMEL_PHG,2,"EMEL_PHG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMEL_QHG,EMEL_QHG,EMEL_QHG,EMEL_QHG,EMEL_QHG,2,"EMEL_QHG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMELBNK,EMELBNK,EMELBNK,EMELBNK,EMELBNK,2,"EMELBNK", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "MNUMYR",     "SO2ComplyGroup", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMELDSI,EMELDSI,EMELDSI,EMELDSI,EMELDSI,2,"EMELDSI", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMELPSO2,EMELPSO2,EMELPSO2,EMELPSO2,EMELPSO2,2,"EMELPSO2", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "MNUMYR",     "SO2ComplyGroup", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMELRETP,EMELRETP,EMELRETP,EMELRETP,EMELRETP,2,"EMELRETP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMETAX,EMETAX,EMETAX,EMETAX,EMETAX,2,"EMETAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          15,            MNUMYR,        1,             1,             1,             1,             1,  &
          "Fifteen",    "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMINCC,EMINCC,EMINCC,EMINCC,EMINCC,3,"EMINCC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMISSIONS_GOAL,EMISSIONS_GOAL,EMISSIONS_GOAL,EMISSIONS_GOAL,EMISSIONS_GOAL,1,"EMISSIONS_GOAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMLIM,EMLIM,EMLIM,EMLIM,EMLIM,2,"EMLIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          4,             MNUMYR,        1,             1,             1,             1,             1,  &
          "Four",       "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMM_CL_BTUs,EMM_CL_BTUs,EMM_CL_BTUs,EMM_CL_BTUs,EMM_CL_BTUs,2,"EMM_CL_BTUs", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantGroup", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMM_CL_CF,EMM_CL_CF,EMM_CL_CF,EMM_CL_CF,EMM_CL_CF,2,"EMM_CL_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantGroup", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMM_CL_CLRG,EMM_CL_CLRG,EMM_CL_CLRG,EMM_CL_CLRG,EMM_CL_CLRG,1,"EMM_CL_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMM_CL_ECPT,EMM_CL_ECPT,EMM_CL_ECPT,EMM_CL_ECPT,EMM_CL_ECPT,2,"EMM_CL_ECPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantGroup", "MNUMYR",      "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMM_CL_ECPT,EMM_CL_ECPT,EMM_CL_ECPT,EMM_CL_ECPT,EMM_CL_ECPT,2,"EMM_CL_ECPT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_UNITS,      MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantGroup", "MNUMYR",      "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMM_CNXT_CST,EMM_CNXT_CST,EMM_CNXT_CST,EMM_CNXT_CST,EMM_CNXT_CST,2,"EMM_CNXT_CST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "SupplyRegion", "",    "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMM_MEF,EMM_MEF,EMM_MEF,EMM_MEF,EMM_MEF,3,"EMM_MEF", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMM_MEF,EMM_MEF,EMM_MEF,EMM_MEF,EMM_MEF,3,"EMM_MEF_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
          "numACI",     "EmissionRank", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMNT,EMNT,EMNT,EMNT,EMNT,3,"EMNT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMRFNA,EMRFNA,EMRFNA,EMRFNA,EMRFNA,2,"EMRFNA", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "NOXRegion",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMRFSA,EMRFSA,EMRFSA,EMRFSA,EMRFSA,2,"EMRFSA", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "MNUMYR",     "SO2ComplyGroup", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMRSC,EMRSC,EMRSC,EMRSC,EMRSC,3,"EMRSC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EMTRC,EMTRC,EMTRC,EMTRC,EMTRC,3,"EMTRC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNPOLLUT,      MNUMYR,        1,             1,             1,             1,  &
          "CensusRegion", "EmissionType", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_CAP,ENG_CAP,ENG_CAP,ENG_CAP,ENG_CAP,2,"ENG_CAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NaturalGasGroup", "", "",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_CCS_C,ENG_CCS_C,ENG_CCS_C,ENG_CCS_C,ENG_CCS_C,1,"ENG_CCS_C", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_CCS_F,ENG_CCS_F,ENG_CCS_F,ENG_CCS_F,ENG_CCS_F,1,"ENG_CCS_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_CCS_H,ENG_CCS_H,ENG_CCS_H,ENG_CCS_H,ENG_CCS_H,1,"ENG_CCS_H", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_CCS_O,ENG_CCS_O,ENG_CCS_O,ENG_CCS_O,ENG_CCS_O,1,"ENG_CCS_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_CCS_R,ENG_CCS_R,ENG_CCS_R,ENG_CCS_R,ENG_CCS_R,1,"ENG_CCS_R", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_CCS_V,ENG_CCS_V,ENG_CCS_V,ENG_CCS_V,ENG_CCS_V,1,"ENG_CCS_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_CF,ENG_CF,ENG_CF,ENG_CF,ENG_CF,1,"ENG_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_ECP,ENG_ECP,ENG_ECP,ENG_ECP,ENG_ECP,1,"ENG_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_FLRG,ENG_FLRG,ENG_FLRG,ENG_FLRG,ENG_FLRG,1,"ENG_FLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_FOM,ENG_FOM,ENG_FOM,ENG_FOM,ENG_FOM,2,"ENG_FOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NaturalGasGroup", "", "",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_FREC,ENG_FREC,ENG_FREC,ENG_FREC,ENG_FREC,1,"ENG_FREC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_GRP,ENG_GRP,ENG_GRP,ENG_GRP,ENG_GRP,1,"ENG_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_MR,ENG_MR,ENG_MR,ENG_MR,ENG_MR,1,"ENG_MR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_RG,ENG_RG,ENG_RG,ENG_RG,ENG_RG,1,"ENG_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_RVAL,ENG_RVAL,ENG_RVAL,ENG_RVAL,ENG_RVAL,1,"ENG_RVAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_RYR,ENG_RYR,ENG_RYR,ENG_RYR,ENG_RYR,1,"ENG_RYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_SP_CAP_FAC,ENG_SP_CAP_FAC,ENG_SP_CAP_FAC,ENG_SP_CAP_FAC,ENG_SP_CAP_FAC,2,"ENG_SP_CAP_FAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MSP,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "Season",     "NaturalGasGroup", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_SYR,ENG_SYR,ENG_SYR,ENG_SYR,ENG_SYR,1,"ENG_SYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENG_VOM,ENG_VOM,ENG_VOM,ENG_VOM,ENG_VOM,1,"ENG_VOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENGEL,ENGEL,ENGEL,ENGEL,ENGEL,1,"ENGEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_ACST,ENUC_ACST,ENUC_ACST,ENUC_ACST,ENUC_ACST,1,"ENUC_ACST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_ASYR,ENUC_ASYR,ENUC_ASYR,ENUC_ASYR,ENUC_ASYR,1,"ENUC_ASYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_CAP,ENUC_CAP,ENUC_CAP,ENUC_CAP,ENUC_CAP,2,"ENUC_CAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MAX_NUC,       1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NuclearUnit", "", "",          "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_CF,ENUC_CF,ENUC_CF,ENUC_CF,ENUC_CF,2,"ENUC_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MAX_NUC,       1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NuclearUnit", "", "",          "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_ECP,ENUC_ECP,ENUC_ECP,ENUC_ECP,ENUC_ECP,1,"ENUC_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_FOM,ENUC_FOM,ENUC_FOM,ENUC_FOM,ENUC_FOM,2,"ENUC_FOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_FPH,     MAX_NUC,       1,             1,             1,             1,             1,  &
          "FullPlanningHorizon", "NuclearUnit", "",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_FREC,ENUC_FREC,ENUC_FREC,ENUC_FREC,ENUC_FREC,1,"ENUC_FREC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_GRP,ENUC_GRP,ENUC_GRP,ENUC_GRP,ENUC_GRP,1,"ENUC_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_IGRP,ENUC_IGRP,ENUC_IGRP,ENUC_IGRP,ENUC_IGRP,1,"ENUC_IGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_RG,ENUC_RG,ENUC_RG,ENUC_RG,ENUC_RG,2,"ENUC_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MAX_NUC,       1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "NuclearUnit", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_RYRS,ENUC_RYRS,ENUC_RYRS,ENUC_RYRS,ENUC_RYRS,1,"ENUC_RYRS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_SP_CAP_FAC,ENUC_SP_CAP_FAC,ENUC_SP_CAP_FAC,ENUC_SP_CAP_FAC,ENUC_SP_CAP_FAC,2,"ENUC_SP_CAP_FAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MSP,     MAX_NUC,       1,             1,             1,             1,             1,  &
          "Season",     "NuclearUnit", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_VOM,ENUC_VOM,ENUC_VOM,ENUC_VOM,ENUC_VOM,1,"ENUC_VOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_ZECST,ENUC_ZECST,ENUC_ZECST,ENUC_ZECST,ENUC_ZECST,1,"ENUC_ZECST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_ZECYR,ENUC_ZECYR,ENUC_ZECYR,ENUC_ZECYR,ENUC_ZECYR,1,"ENUC_ZECYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ENUC_ZECY1,ENUC_ZECY1,ENUC_ZECY1,ENUC_ZECY1,ENUC_ZECY1,1,"ENUC_ZECY1", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAX_NUC,       1,             1,             1,             1,             1,             1,  &
          "NuclearUnit", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCAMP,EPCAMP,EPCAMP,EPCAMP,EPCAMP,1,"EPCAMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        1,             1,             1,             1,             1,             1,  &
          "FuelRegion", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCARPR,EPCARPR,EPCARPR,EPCARPR,EPCARPR,2,"EPCARPR", &
          1,             1,                1,             1,             1,             1,             1,  &
          CO2_D_GRP,     MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "CO2CapGroup", "MNUMYRX",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCLMP,EPCLMP,EPCLMP,EPCLMP,EPCLMP,1,"EPCLMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        1,             1,             1,             1,             1,             1,  &
          "FuelRegion", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCSMP,EPCSMP,EPCSMP,EPCSMP,EPCSMP,1,"EPCSMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        1,             1,             1,             1,             1,             1,  &
          "FuelRegion", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCURBF_WL,EPCURBF_WL,EPCURBF_WL,EPCURBF_WL,EPCURBF_WL,2,"EPCURBF_WL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCURBF_WN,EPCURBF_WN,EPCURBF_WN,EPCURBF_WN,EPCURBF_WN,2,"EPCURBF_WN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCURCL_PT,EPCURCL_PT,EPCURCL_PT,EPCURCL_PT,EPCURCL_PT,2,"EPCURCL_PT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCURCL_PV,EPCURCL_PV,EPCURCL_PV,EPCURCL_PV,EPCURCL_PV,2,"EPCURCL_PV", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCURCL_SO,EPCURCL_SO,EPCURCL_SO,EPCURCL_SO,EPCURCL_SO,2,"EPCURCL_SO", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCURCL_WL,EPCURCL_WL,EPCURCL_WL,EPCURCL_WL,EPCURCL_WL,2,"EPCURCL_WL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPCURCL_WN,EPCURCL_WN,EPCURCL_WN,EPCURCL_WN,EPCURCL_WN,2,"EPCURCL_WN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPGSMP,EPGSMP,EPGSMP,EPGSMP,EPGSMP,1,"EPGSMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        1,             1,             1,             1,             1,             1,  &
          "FuelRegion", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPKMRGN,EPKMRGN,EPKMRGN,EPKMRGN,EPKMRGN,2,"EPKMRGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_FPH,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "FullPlanningHorizon", "", "",        "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPKSHFT,EPKSHFT,EPKSHFT,EPKSHFT,EPKSHFT,2,"EPKSHFT", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRF", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPMSBLD,EPMSBLD,EPMSBLD,EPMSBLD,EPMSBLD,5,"EPMSBLD", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MXP,     ECP_D_CAP,     ECP_D_DGS,     ECP_D_OWN,     ECP_D_XPH,     1,             1,  &
          "ImportExportReg", "PlantType", "DistGenAvoidStep", "OwnerShipType", "ExplicitPlanningHorizon", "", "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPMSEXP,EPMSEXP,EPMSEXP,EPMSEXP,EPMSEXP,1,"EPMSEXP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPMSTOL,EPMSTOL,EPMSTOL,EPMSTOL,EPMSTOL,1,"EPMSTOL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPNFLRG,EPNFLRG,EPNFLRG,EPNFLRG,EPNFLRG,4,"EPNFLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        EFD_D_MFRG,    EFD_D_MFRG,    CO2_D_GRP,     1,             1,             1,  &
          "CensusRegion", "FuelRegion", "FuelRegion_ALT1", "CO2CapGroup", "",       "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPNOXPR,EPNOXPR,EPNOXPR,EPNOXPR,EPNOXPR,2,"EPNOXPR", &
          1,             1,                1,             1,             1,             1,             1,  &
          NOX_D_GRP,     MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "NOXRegion",  "MNUMYRX",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSBK,EPRPSBK,EPRPSBK,EPRPSBK,EPRPSBK,1,"EPRPSBK", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSBK,EPRPSBK,EPRPSBK,EPRPSBK,EPRPSBK,1,"EPRPSBK_pass", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSCP,EPRPSCP,EPRPSCP,EPRPSCP,EPRPSCP,1,"EPRPSCP", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSCP,EPRPSCP,EPRPSCP,EPRPSCP,EPRPSCP,1,"EPRPSCP_pass", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSCPR,EPRPSCPR,EPRPSCPR,EPRPSCPR,EPRPSCPR,2,"EPRPSCPR", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSCPR,EPRPSCPR,EPRPSCPR,EPRPSCPR,EPRPSCPR,2,"EPRPSCPR_pass", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSCR,EPRPSCR,EPRPSCR,EPRPSCR,EPRPSCR,1,"EPRPSCR", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSCR,EPRPSCR,EPRPSCR,EPRPSCR,EPRPSCR,1,"EPRPSCR_pass", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSCRR,EPRPSCRR,EPRPSCRR,EPRPSCRR,EPRPSCRR,2,"EPRPSCRR", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSLM,EPRPSLM,EPRPSLM,EPRPSLM,EPRPSLM,1,"EPRPSLM", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSLM,EPRPSLM,EPRPSLM,EPRPSLM,EPRPSLM,1,"EPRPSLM_pass", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSLMR,EPRPSLMR,EPRPSLMR,EPRPSLMR,EPRPSLMR,2,"EPRPSLMR", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSLMR,EPRPSLMR,EPRPSLMR,EPRPSLMR,EPRPSLMR,2,"EPRPSLMR_pass", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSPR,EPRPSPR,EPRPSPR,EPRPSPR,EPRPSPR,1,"EPRPSPR", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSPRR,EPRPSPRR,EPRPSPRR,EPRPSPRR,EPRPSPRR,2,"EPRPSPRR", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPRPSPRR,EPRPSPRR,EPRPSPRR,EPRPSPRR,EPRPSPRR,2,"EPRPSPRR_pass", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPZECGEN,EPZECGEN,EPZECGEN,EPZECGEN,EPZECGEN,2,"EPZECGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPZECGEN,EPZECGEN,EPZECGEN,EPZECGEN,EPZECGEN,2,"EPZECGEN_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPZECPRC,EPZECPRC,EPZECPRC,EPZECPRC,EPZECPRC,2,"EPZECPRC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPZECPRC,EPZECPRC,EPZECPRC,EPZECPRC,EPZECPRC,2,"EPZECPRC_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPZECSUB,EPZECSUB,EPZECSUB,EPZECSUB,EPZECSUB,2,"EPZECSUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPZECSUB,EPZECSUB,EPZECSUB,EPZECSUB,EPZECSUB,2,"EPZECSUB_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ERLEL,ERLEL,ERLEL,ERLEL,ERLEL,1,"ERLEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ERMRGN,ERMRGN,ERMRGN,ERMRGN,ERMRGN,2,"ERMRGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_FPH,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "FullPlanningHorizon", "", "",        "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ERMRGN,ERMRGN,ERMRGN,ERMRGN,ERMRGN,2,"ERMRGN_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_FPH,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "FullPlanningHorizon", "", "",        "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ESBKLF,ESBKLF,ESBKLF,ESBKLF,ESBKLF,2,"ESBKLF", &
          1,             1,             1,             1,             1,             1,             1,  &
          14,            2,             1,             1,             1,             1,             1,  &
          "Fourteen",   "OwnerType",   "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ESTCPCST,ESTCPCST,ESTCPCST,ESTCPCST,ESTCPCST,2,"ESTCPCST", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     ECP_D_SSTP,    1,             1,             1,             1,             1,  &
          "PlantType",  "ElasticityStep", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ESTCPLIM,ESTCPLIM,ESTCPLIM,ESTCPLIM,ESTCPLIM,2,"ESTCPLIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     ECP_D_SSTP,    1,             1,             1,             1,             1,  &
          "PlantType",  "ElasticityStep", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ESTCPSTP,ESTCPSTP,ESTCPSTP,ESTCPSTP,ESTCPSTP,2,"ESTCPSTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     ECP_D_SSTP,    1,             1,             1,             1,             1,  &
          "PlantType",  "ElasticityStep", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ESTSWTCH,ESTSWTCH,ESTSWTCH,ESTSWTCH,ESTSWTCH,1,"ESTSWTCH", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ESTYRPLN,ESTYRPLN,ESTYRPLN,ESTYRPLN,ESTYRPLN,2,"ESTYRPLN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantType",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,1,"ETAX_FLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,1,"ETAX_FLAG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ETRMRGN,ETRMRGN,ETRMRGN,ETRMRGN,ETRMRGN,2,"ETRMRGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_FPH,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "FullPlanningHorizon", "", "",        "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EX_COAL,EX_COAL,EX_COAL,EX_COAL,EX_COAL,1,"EX_COAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EX_LOAD_SHIFT,EX_LOAD_SHIFT,EX_LOAD_SHIFT,EX_LOAD_SHIFT,EX_LOAD_SHIFT,5,"EX_LOAD_SHIFT", &
          1,             1,             1,             1,             1,             1,             1,  &
          12,            3,             24,            MNUMNR,        MNUMYR,        1,             1,  &
          "Months",     "Three",       "HoursADay",   "SupplyRegion", "MNUMYR",     "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EX_LOAD_SHIFT,EX_LOAD_SHIFT,EX_LOAD_SHIFT,EX_LOAD_SHIFT,EX_LOAD_SHIFT,5,"EX_LOAD_SHIFT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          12,            3,             24,            MNUMNR,        MNUMYR,        1,             1,  &
          "Months",     "Three",       "HoursADay",   "SupplyRegion", "MNUMYR",     "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EXSGEN,EXSGEN,EXSGEN,EXSGEN,EXSGEN,2,"EXSGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EXPGEN,EXPGEN,EXPGEN,EXPGEN,EXPGEN,2,"EXPGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(F_GRP_TO_NGBS,F_GRP_TO_NGBS,F_GRP_TO_NGBS,F_GRP_TO_NGBS,F_GRP_TO_NGBS,1,"F_GRP_TO_NGBS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FGD_FCTR,FGD_FCTR,FGD_FCTR,FGD_FCTR,FGD_FCTR,2,"FGD_FCTR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FIRST_RPS_YR,FIRST_RPS_YR,FIRST_RPS_YR,FIRST_RPS_YR,FIRST_RPS_YR,1,"FIRST_RPS_YR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FIRST_RPS_YEAR,FIRST_RPS_YEAR,FIRST_RPS_YEAR,FIRST_RPS_YEAR,FIRST_RPS_YEAR,1,"FIRST_RPS_YEAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FL_CNXT_CST,FL_CNXT_CST,FL_CNXT_CST,FL_CNXT_CST,FL_CNXT_CST,2,"FL_CNXT_CST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MAXNFR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "FuelRegion", "",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,2,"FLRG_VALUE", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,2,"FLRG_VALUE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYR",      "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FNRUN,FNRUN,FNRUN,FNRUN,FNRUN,1,"FNRUN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FOS_CF_ECP,FOS_CF_ECP,FOS_CF_ECP,FOS_CF_ECP,FOS_CF_ECP,3,"FOS_CF_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_SSZ,     ECP_D_STP,     MNUMNR,        1,             1,             1,             1,  &
          "StepsPerGroup", "ECPLoadGroup", "SupplyRegion_ALT1", "",  "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FR_OR_TRANCOST,FR_OR_TRANCOST,FR_OR_TRANCOST,FR_OR_TRANCOST,FR_OR_TRANCOST,3,"FR_OR_TRANCOST", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        8,             MNUMYR,        1,             1,             1,             1,  &
          "FuelRegion", "OGSMRegionEX", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(FRG_EMM_MAP,FRG_EMM_MAP,FRG_EMM_MAP,FRG_EMM_MAP,FRG_EMM_MAP,2,"FRG_EMM_MAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MAXNFR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "FuelRegion", "",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(G_ANN,G_ANN,G_ANN,G_ANN,G_ANN,2,"G_ANN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(G_ANN,G_ANN,G_ANN,G_ANN,G_ANN,2,"G_ANN_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(G_INST_ALL,G_INST_ALL,G_INST_ALL,G_INST_ALL,G_INST_ALL,2,"G_INST_ALL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(G_INST_ALL,G_INST_ALL,G_INST_ALL,G_INST_ALL,G_INST_ALL,2,"G_INST_ALL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GPSCSW,GPSCSW,GPSCSW,GPSCSW,GPSCSW,1,"GPSCSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "EFDPlantType", "",          "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GPSHSW,GPSHSW,GPSHSW,GPSHSW,GPSHSW,1,"GPSHSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "EFDPlantType", "",          "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GPSNSW,GPSNSW,GPSNSW,GPSNSW,GPSNSW,1,"GPSNSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "EFDPlantType", "",          "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GPSSSW,GPSSSW,GPSSSW,GPSSSW,GPSSSW,1,"GPSSSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "EFDPlantType", "",          "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GPSSYR,GPSSYR,GPSSYR,GPSSYR,GPSSYR,1,"GPSSYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRD_NRYR,GRD_NRYR,GRD_NRYR,GRD_NRYR,GRD_NRYR,2,"GRD_NRYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "ExplicitPlanningHorizon", "", "",    "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRD_RATS,GRD_RATS,GRD_RATS,GRD_RATS,GRD_RATS,2,"GRD_RATS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CAP,GRP_CAP,GRP_CAP,GRP_CAP,GRP_CAP,2,"GRP_CAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NaturalGasGroup", "", "",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CCS_F,GRP_CCS_F,GRP_CCS_F,GRP_CCS_F,GRP_CCS_F,1,"GRP_CCS_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CCS_F,GRP_CCS_F,GRP_CCS_F,GRP_CCS_F,GRP_CCS_F,1,"GRP_CCS_F_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CCS_H,GRP_CCS_H,GRP_CCS_H,GRP_CCS_H,GRP_CCS_H,1,"GRP_CCS_H", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CCS_H,GRP_CCS_H,GRP_CCS_H,GRP_CCS_H,GRP_CCS_H,1,"GRP_CCS_H_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CCS_O,GRP_CCS_O,GRP_CCS_O,GRP_CCS_O,GRP_CCS_O,1,"GRP_CCS_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CCS_R,GRP_CCS_R,GRP_CCS_R,GRP_CCS_R,GRP_CCS_R,1,"GRP_CCS_R", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CCS_R,GRP_CCS_R,GRP_CCS_R,GRP_CCS_R,GRP_CCS_R,1,"GRP_CCS_R_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CCS_V,GRP_CCS_V,GRP_CCS_V,GRP_CCS_V,GRP_CCS_V,1,"GRP_CCS_V", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CCS_V,GRP_CCS_V,GRP_CCS_V,GRP_CCS_V,GRP_CCS_V,1,"GRP_CCS_V_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CF,GRP_CF,GRP_CF,GRP_CF,GRP_CF,1,"GRP_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_CF,GRP_CF,GRP_CF,GRP_CF,GRP_CF,1,"GRP_CF_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_ECP,GRP_ECP,GRP_ECP,GRP_ECP,GRP_ECP,1,"GRP_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_FLRG,GRP_FLRG,GRP_FLRG,GRP_FLRG,GRP_FLRG,1,"GRP_FLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_FOM,GRP_FOM,GRP_FOM,GRP_FOM,GRP_FOM,2,"GRP_FOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NaturalGasGroup", "", "",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_FOM,GRP_FOM,GRP_FOM,GRP_FOM,GRP_FOM,2,"GRP_FOM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NaturalGasGroup", "", "",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_HTRT,GRP_HTRT,GRP_HTRT,GRP_HTRT,GRP_HTRT,2,"GRP_HTRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NaturalGasGroup", "", "",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_HTRT,GRP_HTRT,GRP_HTRT,GRP_HTRT,GRP_HTRT,2,"GRP_HTRT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "NaturalGasGroup", "", "",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_MR,GRP_MR,GRP_MR,GRP_MR,GRP_MR,1,"GRP_MR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_MR,GRP_MR,GRP_MR,GRP_MR,GRP_MR,1,"GRP_MR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_RG,GRP_RG,GRP_RG,GRP_RG,GRP_RG,1,"GRP_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_RVAL,GRP_RVAL,GRP_RVAL,GRP_RVAL,GRP_RVAL,1,"GRP_RVAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_RVAL,GRP_RVAL,GRP_RVAL,GRP_RVAL,GRP_RVAL,1,"GRP_RVAL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_RYR,GRP_RYR,GRP_RYR,GRP_RYR,GRP_RYR,1,"GRP_RYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_RYR,GRP_RYR,GRP_RYR,GRP_RYR,GRP_RYR,1,"GRP_RYR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,2,"GRP_SP_CAP_FAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MSP,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "Season",     "NaturalGasGroup", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,2,"GRP_SP_CAP_FAC_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MSP,     MX_NGBS,       1,             1,             1,             1,             1,  &
          "Season",     "NaturalGasGroup", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_SYR,GRP_SYR,GRP_SYR,GRP_SYR,GRP_SYR,1,"GRP_SYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_SYR,GRP_SYR,GRP_SYR,GRP_SYR,GRP_SYR,1,"GRP_SYR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_VOM,GRP_VOM,GRP_VOM,GRP_VOM,GRP_VOM,1,"GRP_VOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(GRP_VOM,GRP_VOM,GRP_VOM,GRP_VOM,GRP_VOM,1,"GRP_VOM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(H_SALES,H_SALES,H_SALES,H_SALES,H_SALES,3,"H_SALES", &
          0,             0,             1,             1,             1,             1,             1,  &
          MX_ST_CODES,   MX_TYPE,       MNUMNR,        1,             1,             1,             1,  &
          "StateCodes", "UtilityType", "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_BYR,HG_BYR,HG_BYR,HG_BYR,HG_BYR,1,"HG_BYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_CHOICE,HG_CHOICE,HG_CHOICE,HG_CHOICE,HG_CHOICE,1,"HG_CHOICE", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_CLASS,HG_CLASS,HG_CLASS,HG_CLASS,HG_CLASS,1,"HG_CLASS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_FCTR,HG_FCTR,HG_FCTR,HG_FCTR,HG_FCTR,1,"HG_FCTR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_GRAMS_MWH,HG_GRAMS_MWH,HG_GRAMS_MWH,HG_GRAMS_MWH,HG_GRAMS_MWH,2,"HG_GRAMS_MWH", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPM_HG_CLS,    MNUMYR,        1,             1,             1,             1,             1,  &
          "MercuryClass", "MNUMYR",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_INPUT,HG_INPUT,HG_INPUT,HG_INPUT,HG_INPUT,3,"HG_INPUT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPM_HG_CLS,    EPM_RANK,      MNUMYR,        1,             1,             1,             1,  &
          "MercuryClass", "EmissionRank", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_MEF,HG_MEF,HG_MEF,HG_MEF,HG_MEF,3,"HG_MEF", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPM_HG_CLS,    EPM_RANK,      MNUMYR,        1,             1,             1,             1,  &
          "MercuryClass", "EmissionRank", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_MEFNC,HG_MEFNC,HG_MEFNC,HG_MEFNC,HG_MEFNC,2,"HG_MEFNC", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_OUTPUT,HG_OUTPUT,HG_OUTPUT,HG_OUTPUT,HG_OUTPUT,3,"HG_OUTPUT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EPM_HG_CLS,    EPM_RANK,      MNUMYR,        1,             1,             1,             1,  &
          "MercuryClass", "EmissionRank", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HG_SYR,HG_SYR,HG_SYR,HG_SYR,HG_SYR,1,"HG_SYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(hoursToBuy,hoursToBuy,hoursToBuy,hoursToBuy,hoursToBuy,1,"hoursToBuy", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(hoursToSell,hoursToSell,hoursToSell,hoursToSell,hoursToSell,1,"hoursToSell", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HRTCLNR,HRTCLNR,HRTCLNR,HRTCLNR,HRTCLNR,3,"HRTCLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDRGG,         MNUMYR,        NCLUT1,        1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HrToECPgrp,HrToECPgrp,HrToECPgrp,HrToECPgrp,HrToECPgrp,3,"HrToECPgrp", &
          1,             1,             1,             1,             1,             1,             1,  &
          12,            3,             24,            1,             1,             1,             1,  &
          "Months",     "Three",       "HoursADay",   "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HRTOECPSL,HRTOECPSL,HRTOECPSL,HRTOECPSL,HRTOECPSL,5,"HRTOECPSL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MAXNRG,        MAXMON,        MAXDTP,        24,            1,             1,  &
          "MNUMYR",     "DSMSupplyRegion", "Months",  "DayTimePeriod", "HoursADay", "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_CAP,HTRT_CAP,HTRT_CAP,HTRT_CAP,HTRT_CAP,3,"HTRT_CAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_DSP,     MAXNFR,        1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "DispatchableECP", "FuelRegion", "",  "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_CAP_MR,HTRT_CAP_MR,HTRT_CAP_MR,HTRT_CAP_MR,HTRT_CAP_MR,3,"HTRT_CAP_MR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_DSP,     MAXNFR,        1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "DispatchableECP", "FuelRegion", "",  "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_EPGCAP,HTRT_EPGCAP,HTRT_EPGCAP,HTRT_EPGCAP,HTRT_EPGCAP,4,"HTRT_EPGCAP", &
          0,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MFRG,    ECP_D_RET,     ECP_D_CAP,     MNUMNR,        1,             1,             1,  &
          "FuelRegion_SUP", "RetireGroup", "PlantType", "SupplyRegion", "",         "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_FLOOR,HTRT_FLOOR,HTRT_FLOOR,HTRT_FLOOR,HTRT_FLOOR,1,"HTRT_FLOOR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_FRST,HTRT_FRST,HTRT_FRST,HTRT_FRST,HTRT_FRST,3,"HTRT_FRST", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RET,     ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,  &
          "RetireGroup", "PlantType",  "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_GL,HTRT_GL,HTRT_GL,HTRT_GL,HTRT_GL,2,"HTRT_GL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        4,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "Four",        "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_OVRQ,HTRT_OVRQ,HTRT_OVRQ,HTRT_OVRQ,HTRT_OVRQ,2,"HTRT_OVRQ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     4,             1,             1,             1,             1,             1,  &
          "PlantType",  "Four",        "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_REDQ,HTRT_REDQ,HTRT_REDQ,HTRT_REDQ,HTRT_REDQ,2,"HTRT_REDQ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     4,             1,             1,             1,             1,             1,  &
          "PlantType",  "Four",        "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_REDUCTION,HTRT_REDUCTION,HTRT_REDUCTION,HTRT_REDUCTION,HTRT_REDUCTION,1,"HTRT_REDUCTION", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_RESULTS,HTRT_RESULTS,HTRT_RESULTS,HTRT_RESULTS,HTRT_RESULTS,1,"HTRT_RESULTS", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_RESULTS,HTRT_RESULTS,HTRT_RESULTS,HTRT_RESULTS,HTRT_RESULTS,1,"HTRT_RESULTS_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(HTRT_UNITS,HTRT_UNITS,HTRT_UNITS,HTRT_UNITS,HTRT_UNITS,3,"HTRT_UNITS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RET,     ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,  &
          "RetireGroup", "PlantType",  "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ICHPCESGEN,ICHPCESGEN,ICHPCESGEN,ICHPCESGEN,ICHPCESGEN,2,"ICHPCESGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "CensusRegion", "MNUMYR",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(IRNWACT,IRNWACT,IRNWACT,IRNWACT,IRNWACT,2,"IRNWACT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "ExplicitPlanningHorizon", "", "",    "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(IRNWGEN,IRNWGEN,IRNWGEN,IRNWGEN,IRNWGEN,2,"IRNWGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "ExplicitPlanningHorizon", "", "",    "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(IRNWPCT,IRNWPCT,IRNWPCT,IRNWPCT,IRNWPCT,2,"IRNWPCT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "ExplicitPlanningHorizon", "", "",    "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ITOTGEN,ITOTGEN,ITOTGEN,ITOTGEN,ITOTGEN,2,"ITOTGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "ExplicitPlanningHorizon", "", "",    "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(JCLCLNR,JCLCLNR,JCLCLNR,JCLCLNR,JCLCLNR,2,"JCLCLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        NCLPR2,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "NewPrice",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(JCLEL,JCLEL,JCLEL,JCLEL,JCLEL,1,"JCLEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(JDSEL,JDSEL,JDSEL,JDSEL,JDSEL,1,"JDSEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(JNGEL,JNGEL,JNGEL,JNGEL,JNGEL,1,"JNGEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(JRSEL,JRSEL,JRSEL,JRSEL,JRSEL,1,"JRSEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(KCHPCESGEN,KCHPCESGEN,KCHPCESGEN,KCHPCESGEN,KCHPCESGEN,2,"KCHPCESGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "CensusRegion", "MNUMYR",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(KWH_DM_BY_RG,KWH_DM_BY_RG,KWH_DM_BY_RG,KWH_DM_BY_RG,KWH_DM_BY_RG,2,"KWH_DM_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(KWH_IM_BY_RG,KWH_IM_BY_RG,KWH_IM_BY_RG,KWH_IM_BY_RG,KWH_IM_BY_RG,2,"KWH_IM_BY_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(LASTYR,LASTYR,LASTYR,LASTYR,LASTYR,1,"LASTYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(LEVRMC,LEVRMC,LEVRMC,LEVRMC,LEVRMC,2,"LEVRMC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(LEVRMD,LEVRMD,LEVRMD,LEVRMD,LEVRMD,2,"LEVRMD", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(LEVRMD2,LEVRMD2,LEVRMD2,LEVRMD2,LEVRMD2,2,"LEVRMD2", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(LEVRMD2C,LEVRMD2C,LEVRMD2C,LEVRMD2C,LEVRMD2C,2,"LEVRMD2C", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(LIMSUB,LIMSUB,LIMSUB,LIMSUB,LIMSUB,1,"LIMSUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(LINELOSS,LINELOSS,LINELOSS,LINELOSS,LINELOSS,1,"LINELOSS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MAP_ECP_SP,MAP_ECP_SP,MAP_ECP_SP,MAP_ECP_SP,MAP_ECP_SP,1,"MAP_ECP_SP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MAXECPSG,      1,             1,             1,             1,             1,             1,  &
          "LoadGroup",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,1,"MAP_NGBS_TO_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,1,"MAP_NGBS_TO_GRP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MAP_TO_COAL_ID,MAP_TO_COAL_ID,MAP_TO_COAL_ID,MAP_TO_COAL_ID,MAP_TO_COAL_ID,1,"MAP_TO_COAL_ID", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MAP_TO_COAL_ID,MAP_TO_COAL_ID,MAP_TO_COAL_ID,MAP_TO_COAL_ID,MAP_TO_COAL_ID,1,"MAP_TO_COAL_ID_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MappCtoN,MappCtoN,MappCtoN,MappCtoN,MappCtoN,3,"MappCtoN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMCR,        MAXSEC,        1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "CensusRegion", "DemandSectors", "",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MC_JPGDP,MC_JPGDP,MC_JPGDP,MC_JPGDP,MC_JPGDP,1,"MC_JPGDP", &
          -2,            1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR_SUP", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(mefac,mefac,mefac,mefac,mefac,1,"mefac", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MIN_EMF,MIN_EMF,MIN_EMF,MIN_EMF,MIN_EMF,2,"MIN_EMF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     NRANK,         1,             1,             1,             1,             1,  &
          "PlantType",  "EmissionRank", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MP_BM_BT,MP_BM_BT,MP_BM_BT,MP_BM_BT,MP_BM_BT,1,"MP_BM_BT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MP_BM_CM,MP_BM_CM,MP_BM_CM,MP_BM_CM,MP_BM_CM,1,"MP_BM_CM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MP_BM_ET,MP_BM_ET,MP_BM_ET,MP_BM_ET,MP_BM_ET,1,"MP_BM_ET", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MP_BM_H2,MP_BM_H2,MP_BM_H2,MP_BM_H2,MP_BM_H2,1,"MP_BM_H2", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MP_BM_IN,MP_BM_IN,MP_BM_IN,MP_BM_IN,MP_BM_IN,1,"MP_BM_IN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MP_BM_PW,MP_BM_PW,MP_BM_PW,MP_BM_PW,MP_BM_PW,1,"MP_BM_PW", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MP_BM_RS,MP_BM_RS,MP_BM_RS,MP_BM_RS,MP_BM_RS,1,"MP_BM_RS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MUST_STORE,MUST_STORE,MUST_STORE,MUST_STORE,MUST_STORE,2,"MUST_STORE", &
          1,             1,                1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYRF",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MUSTRUN,MUSTRUN,MUSTRUN,MUSTRUN,MUSTRUN,2,"MUSTRUN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MX_NCOALS,MX_NCOALS,MX_NCOALS,MX_NCOALS,MX_NCOALS,1,"MX_NCOALS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MX_NGBS,MX_NGBS,MX_NGBS,MX_NGBS,MX_NGBS,1,"MX_NGBS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MX_SO2_GRP,MX_SO2_GRP,MX_SO2_GRP,MX_SO2_GRP,MX_SO2_GRP,1,"MX_SO2_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MX_ST_RPS,MX_ST_RPS,MX_ST_RPS,MX_ST_RPS,MX_ST_RPS,1,"MX_ST_RPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(MX_SUPPLY_CURVES,MX_SUPPLY_CURVES,MX_SUPPLY_CURVES,MX_SUPPLY_CURVES,MX_SUPPLY_CURVES,1,"MX_SUPPLY_CURVES", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_CFR,N_CFR,N_CFR,N_CFR,N_CFR,1,"N_CFR", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_CFR,N_CFR,N_CFR,N_CFR,N_CFR,1,"N_CFR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_CPTY,N_CPTY,N_CPTY,N_CPTY,N_CPTY,1,"N_CPTY", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_CPTY,N_CPTY,N_CPTY,N_CPTY,N_CPTY,1,"N_CPTY_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_GRP_TO_NGBS,N_GRP_TO_NGBS,N_GRP_TO_NGBS,N_GRP_TO_NGBS,N_GRP_TO_NGBS,1,"N_GRP_TO_NGBS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NGBS,       1,             1,             1,             1,             1,             1,  &
          "NaturalGasGroup", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_HRAT,N_HRAT,N_HRAT,N_HRAT,N_HRAT,1,"N_HRAT", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_HRAT,N_HRAT,N_HRAT,N_HRAT,N_HRAT,1,"N_HRAT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_IGRP,N_IGRP,N_IGRP,N_IGRP,N_IGRP,1,"N_IGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_IGRP,N_IGRP,N_IGRP,N_IGRP,N_IGRP,1,"N_IGRP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_PLTS,N_PLTS,N_PLTS,N_PLTS,N_PLTS,1,"N_PLTS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_PLTS,N_PLTS,N_PLTS,N_PLTS,N_PLTS,1,"N_PLTS_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_PTP,N_PTP,N_PTP,N_PTP,N_PTP,1,"N_PTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_RG,N_RG,N_RG,N_RG,N_RG,1,"N_RG", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_RG,N_RG,N_RG,N_RG,N_RG,1,"N_RG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_RY,N_RY,N_RY,N_RY,N_RY,1,"N_RY", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(N_RY,N_RY,N_RY,N_RY,N_RY,1,"N_RY_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          1000,          1,             1,             1,             1,             1,             1,  &
          "Thousand",   "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NCLUT1,NCLUT1,NCLUT1,NCLUT1,NCLUT1,1,"NCLUT1", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NET_STORAGE_CAP_EX,NET_STORAGE_CAP_EX,NET_STORAGE_CAP_EX,NET_STORAGE_CAP_EX,NET_STORAGE_CAP_EX,3,"NET_STORAGE_CAP_EX", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MSP,     MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NET_STORAGE_LOAD_EX,NET_STORAGE_LOAD_EX,NET_STORAGE_LOAD_EX,NET_STORAGE_LOAD_EX,NET_STORAGE_LOAD_EX,4,"NET_STORAGE_LOAD_EX", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_VLS,     MAXECPB,       MNUMNR,        MNUMYR,        1,             1,             1,  &
          "SliceGroup", "DSMLoadGroup", "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NET_STORAGE_LOAD_NW,NET_STORAGE_LOAD_NW,NET_STORAGE_LOAD_NW,NET_STORAGE_LOAD_NW,NET_STORAGE_LOAD_NW,4,"NET_STORAGE_LOAD_NW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_VLS,     MAXECPB,       MNUMNR,        MNUMYR,        1,             1,             1,  &
          "SliceGroup", "DSMLoadGroup", "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NET_STORAGE_SR_EX,NET_STORAGE_SR_EX,NET_STORAGE_SR_EX,NET_STORAGE_SR_EX,NET_STORAGE_SR_EX,4,"NET_STORAGE_SR_EX", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_VLS,     MAXECPB,       MNUMNR,        MNUMYR,        1,             1,             1,  &
          "SliceGroup", "DSMLoadGroup", "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NET_STORAGE_SR_NW,NET_STORAGE_SR_NW,NET_STORAGE_SR_NW,NET_STORAGE_SR_NW,NET_STORAGE_SR_NW,4,"NET_STORAGE_SR_NW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_VLS,     MAXECPB,       MNUMNR,        MNUMYR,        1,             1,             1,  &
          "SliceGroup", "DSMLoadGroup", "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NEW_CAP_EL,NEW_CAP_EL,NEW_CAP_EL,NEW_CAP_EL,NEW_CAP_EL,2,"NEW_CAP_EL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NEW_CAP_EL,NEW_CAP_EL,NEW_CAP_EL,NEW_CAP_EL,NEW_CAP_EL,2,"NEW_CAP_EL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NEW_LDV_INDX,NEW_LDV_INDX,NEW_LDV_INDX,NEW_LDV_INDX,NEW_LDV_INDX,1,"NEW_LDV_INDX", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDRGG,         1,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "",      "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,5,"NEW_LOAD_SHIFT", &
          1,             1,             1,             1,             1,             1,             1,  &
          12,            3,             24,            MNUMNR,        MNUMYR,        1,             1,  &
          "Months",     "Three",       "HoursADay",   "SupplyRegion", "MNUMYR",     "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,5,"NEW_LOAD_SHIFT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          12,            3,             24,            MNUMNR,        MNUMYR,        1,             1,  &
          "Months",     "Three",       "HoursADay",   "SupplyRegion", "MNUMYR",     "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NEW_SDV_INDX,NEW_SDV_INDX,NEW_SDV_INDX,NEW_SDV_INDX,NEW_SDV_INDX,1,"NEW_SDV_INDX", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDRGG,         1,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "",      "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NG_CCS_SYR,NG_CCS_SYR,NG_CCS_SYR,NG_CCS_SYR,NG_CCS_SYR,1,"NG_CCS_SYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NGBS_SW,NGBS_SW,NGBS_SW,NGBS_SW,NGBS_SW,1,"NGBS_SW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NM_BM_SUP_STP,NM_BM_SUP_STP,NM_BM_SUP_STP,NM_BM_SUP_STP,NM_BM_SUP_STP,1,"NM_BM_SUP_STP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NM_ST_RPS,NM_ST_RPS,NM_ST_RPS,NM_ST_RPS,NM_ST_RPS,1,"NM_ST_RPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_BYR,NOX_BYR,NOX_BYR,NOX_BYR,NOX_BYR,1,"NOX_BYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_ECP,NOX_ECP,NOX_ECP,NOX_ECP,NOX_ECP,2,"NOX_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MSP,     NOX_D_GRP,     1,             1,             1,             1,             1,  &
          "Season",     "NOXRegion",   "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_EFD,NOX_EFD,NOX_EFD,NOX_EFD,NOX_EFD,2,"NOX_EFD", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_MSP,     NOX_D_GRP,     1,             1,             1,             1,             1,  &
          "Season",     "NOXRegion",   "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_FCTR,NOX_FCTR,NOX_FCTR,NOX_FCTR,NOX_FCTR,1,"NOX_FCTR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_GRP,NOX_GRP,NOX_GRP,NOX_GRP,NOX_GRP,1,"NOX_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_LT,NOX_LT,NOX_LT,NOX_LT,NOX_LT,1,"NOX_LT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_NEW,NOX_NEW,NOX_NEW,NOX_NEW,NOX_NEW,2,"NOX_NEW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_BTP,     ECP_D_CAP,     1,             1,             1,             1,             1,  &
          "BoilerType", "PlantType",   "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_SHR_BY_CLRG,NOX_SHR_BY_CLRG,NOX_SHR_BY_CLRG,NOX_SHR_BY_CLRG,NOX_SHR_BY_CLRG,2,"NOX_SHR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     NOX_D_GRP,     1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "NOXRegion", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_SYR,NOX_SYR,NOX_SYR,NOX_SYR,NOX_SYR,1,"NOX_SYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOX_TRDYR,NOX_TRDYR,NOX_TRDYR,NOX_TRDYR,NOX_TRDYR,1,"NOX_TRDYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NOXBYGRP,NOXBYGRP,NOXBYGRP,NOXBYGRP,NOXBYGRP,2,"NOXBYGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "NOXRegion",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NRANK,NRANK,NRANK,NRANK,NRANK,1,"NRANK", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NSTEP,NSTEP,NSTEP,NSTEP,NSTEP,1,"NSTEP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUC_CF_ECP,NUC_CF_ECP,NUC_CF_ECP,NUC_CF_ECP,NUC_CF_ECP,3,"NUC_CF_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_SSZ,     ECP_D_STP,     MNUMNR,        1,             1,             1,             1,  &
          "StepsPerGroup", "ECPLoadGroup", "SupplyRegion_ALT1", "",  "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUCGENST,NUCGENST,NUCGENST,NUCGENST,NUCGENST,3,"NUCGENST", &
          1,             1,             1,             1,             1,             1,             1,  &
          49,            MNUMNR,        ECP_D_XPH,     1,             1,             1,             1,  &
          "FortyNine",  "SupplyRegion", "ExplicitPlanningHorizon", "", "",          "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUCPLNF,NUCPLNF,NUCPLNF,NUCPLNF,NUCPLNF,2,"NUCPLNF", &
          1,             1,                1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "FuelRegion", "MNUMYRX",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUCPLNN,NUCPLNN,NUCPLNN,NUCPLNN,NUCPLNN,2,"NUCPLNN", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_ACI,NUM_ACI,NUM_ACI,NUM_ACI,NUM_ACI,1,"NUM_ACI", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_ACSS,NUM_ACSS,NUM_ACSS,NUM_ACSS,NUM_ACSS,1,"NUM_ACSS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_CL,NUM_CL,NUM_CL,NUM_CL,NUM_CL,1,"NUM_CL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_CL_UNIT,NUM_CL_UNIT,NUM_CL_UNIT,NUM_CL_UNIT,NUM_CL_UNIT,1,"NUM_CL_UNIT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_CL_UNIT,NUM_CL_UNIT,NUM_CL_UNIT,NUM_CL_UNIT,NUM_CL_UNIT,1,"NUM_CL_UNIT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_CMM_UNITS,NUM_CMM_UNITS,NUM_CMM_UNITS,NUM_CMM_UNITS,NUM_CMM_UNITS,1,"NUM_CMM_UNITS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_CNFG,NUM_CNFG,NUM_CNFG,NUM_CNFG,NUM_CNFG,1,"NUM_CNFG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_HG_GRP,NUM_HG_GRP,NUM_HG_GRP,NUM_HG_GRP,NUM_HG_GRP,1,"NUM_HG_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_NGBS,NUM_NGBS,NUM_NGBS,NUM_NGBS,NUM_NGBS,1,"NUM_NGBS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_NGBS_GRPS,NUM_NGBS_GRPS,NUM_NGBS_GRPS,NUM_NGBS_GRPS,NUM_NGBS_GRPS,1,"NUM_NGBS_GRPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_NUC,NUM_NUC,NUM_NUC,NUM_NUC,NUM_NUC,1,"NUM_NUC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_ROPT,NUM_ROPT,NUM_ROPT,NUM_ROPT,NUM_ROPT,1,"NUM_ROPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_SC,NUM_SC,NUM_SC,NUM_SC,NUM_SC,1,"NUM_SC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_SC,NUM_SC,NUM_SC,NUM_SC,NUM_SC,1,"NUM_SC_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUM_SO2_GRP,NUM_SO2_GRP,NUM_SO2_GRP,NUM_SO2_GRP,NUM_SO2_GRP,1,"NUM_SO2_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NUTSEC,NUTSEC,NUTSEC,NUTSEC,NUTSEC,1,"NUTSEC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(NW_COAL,NW_COAL,NW_COAL,NW_COAL,NW_COAL,1,"NW_COAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(OCHPCESGEN,OCHPCESGEN,OCHPCESGEN,OCHPCESGEN,OCHPCESGEN,2,"OCHPCESGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "CensusRegion", "MNUMYR",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(OGCO2AVL,OGCO2AVL,OGCO2AVL,OGCO2AVL,OGCO2AVL,3,"OGCO2AVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             13,            MNUMYR,        1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "Thirteen", "MNUMYR", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(OGCO2PRC,OGCO2PRC,OGCO2PRC,OGCO2PRC,OGCO2PRC,3,"OGCO2PRC", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             13,            MNUMYR,        1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "Thirteen", "MNUMYR", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(OGCO2PUR2,OGCO2PUR2,OGCO2PUR2,OGCO2PUR2,OGCO2PUR2,3,"OGCO2PUR2", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             13,            MNUMYR,        1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "Thirteen", "MNUMYR", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(OGCO2TAR,OGCO2TAR,OGCO2TAR,OGCO2TAR,OGCO2TAR,2,"OGCO2TAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             8,             1,             1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "OGSMRegionEX", "",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(OGPRDNG,OGPRDNG,OGPRDNG,OGPRDNG,OGPRDNG,2,"OGPRDNG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMOR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "OGSMReg",    "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(OGWPRNG,OGWPRNG,OGWPRNG,OGWPRNG,OGWPRNG,2,"OGWPRNG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMOR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "OGSMReg",    "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ORCLECP,ORCLECP,ORCLECP,ORCLECP,ORCLECP,1,"ORCLECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PARM_A,PARM_A,PARM_A,PARM_A,PARM_A,2,"PARM_A", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PARM_B,PARM_B,PARM_B,PARM_B,PARM_B,2,"PARM_B", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PARM_C,PARM_C,PARM_C,PARM_C,PARM_C,2,"PARM_C", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PARM_D,PARM_D,PARM_D,PARM_D,PARM_D,2,"PARM_D", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PCAP_CAR,PCAP_CAR,PCAP_CAR,PCAP_CAR,PCAP_CAR,1,"PCAP_CAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PCAP_HG,PCAP_HG,PCAP_HG,PCAP_HG,PCAP_HG,1,"PCAP_HG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PCAP_NOX,PCAP_NOX,PCAP_NOX,PCAP_NOX,PCAP_NOX,1,"PCAP_NOX", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PCAP_SO2,PCAP_SO2,PCAP_SO2,PCAP_SO2,PCAP_SO2,1,"PCAP_SO2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PCARCLS,PCARCLS,PCARCLS,PCARCLS,PCARCLS,2,"PCARCLS", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_ST+1,    MNUMYR,        1,             1,             1,             1,             1,  &
          "EMMStates",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PCARCLS,PCARCLS,PCARCLS,PCARCLS,PCARCLS,2,"PCARCLS_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_ST+1,    MNUMYR,        1,             1,             1,             1,             1,  &
          "EMMStates",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PCAROGS,PCAROGS,PCAROGS,PCAROGS,PCAROGS,2,"PCAROGS", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_ST+1,    MNUMYR,        1,             1,             1,             1,             1,  &
          "EMMStates",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PCAROGS,PCAROGS,PCAROGS,PCAROGS,PCAROGS,2,"PCAROGS_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_ST+1,    MNUMYR,        1,             1,             1,             1,             1,  &
          "EMMStates",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PERMIT_FLAG,PERMIT_FLAG,PERMIT_FLAG,PERMIT_FLAG,PERMIT_FLAG,1,"PERMIT_FLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PLNT_EMF,PLNT_EMF,PLNT_EMF,PLNT_EMF,PLNT_EMF,2,"PLNT_EMF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     NRANK,         1,             1,             1,             1,             1,  &
          "PlantType",  "EmissionRank", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PMDSP,PMDSP,PMDSP,PMDSP,PMDSP,3,"PMDSP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MSP,     ECP_D_DSP,     MNUMNR,        1,             1,             1,             1,  &
          "Season",     "DispatchableECP", "SupplyRegion_ALT1", "",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PMDSP,PMDSP,PMDSP,PMDSP,PMDSP,3,"PMDSP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_MSP,     ECP_D_DSP,     MNUMNR,        1,             1,             1,             1,  &
          "Season",     "DispatchableECP", "SupplyRegion_ALT1", "",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PNGELGR,PNGELGR,PNGELGR,PNGELGR,PNGELGR,2,"PNGELGR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NNGEM,         MNUMYR,        1,             1,             1,             1,             1,  &
          "GasRegion",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PT_CAP_ADJ,PT_CAP_ADJ,PT_CAP_ADJ,PT_CAP_ADJ,PT_CAP_ADJ,1,"PT_CAP_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PTHRESH1,PTHRESH1,PTHRESH1,PTHRESH1,PTHRESH1,3,"PTHRESH1", &
          1,             1,                 1,                 1,             1,             1,             1,  &
          MNUMYR,        MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegionAll", "SupplyRegionAll_ALT1", "", "",          "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PTHRESH2,PTHRESH2,PTHRESH2,PTHRESH2,PTHRESH2,3,"PTHRESH2", &
          1,             1,                 1,                 1,             1,             1,             1,  &
          MNUMYR,        MNUMNR+EFD_D_PROV, MNUMNR+EFD_D_PROV, 1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegionAll", "SupplyRegionAll_ALT1", "", "",          "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PV_CAP_ADJ,PV_CAP_ADJ,PV_CAP_ADJ,PV_CAP_ADJ,PV_CAP_ADJ,1,"PV_CAP_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(PV_NEW_ADJ,PV_NEW_ADJ,PV_NEW_ADJ,PV_NEW_ADJ,PV_NEW_ADJ,1,"PV_NEW_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(QBMBTCL,QBMBTCL,QBMBTCL,QBMBTCL,QBMBTCL,3,"QBMBTCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYRF", "",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(QBMCMCL,QBMCMCL,QBMCMCL,QBMCMCL,QBMCMCL,3,"QBMCMCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYRF", "",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(QBMETCL,QBMETCL,QBMETCL,QBMETCL,QBMETCL,3,"QBMETCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYRF", "",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(QBMH2CL,QBMH2CL,QBMH2CL,QBMH2CL,QBMH2CL,3,"QBMH2CL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYRF", "",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(QBMINCL,QBMINCL,QBMINCL,QBMINCL,QBMINCL,3,"QBMINCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYRF", "",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(QBMRSCL,QBMRSCL,QBMRSCL,QBMRSCL,QBMRSCL,3,"QBMRSCL", &
          0,             0,             1,                1,             1,             1,             1,  &
          MNUMFS,        NDREG,         MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "BiomassType_SUP", "CoalDemandRegion_SUP", "MNUMYRF", "",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(QCLCLNR,QCLCLNR,QCLCLNR,QCLCLNR,QCLCLNR,3,"QCLCLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDRGG,         MNUMYR,        NCLUT1,        1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(QELASN,QELASN,QELASN,QELASN,QELASN,2,"QELASN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.TRUE.)
       call AIMMS_TransArray_out_ecp(QNGEL,QNGEL,QNGEL,QNGEL,QNGEL,2,"QNGEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "CensusRegion", "MNUMYR",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RCHPCESGEN,RCHPCESGEN,RCHPCESGEN,RCHPCESGEN,RCHPCESGEN,2,"RCHPCESGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "CensusRegion", "MNUMYR",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RCLCLNR,RCLCLNR,RCLCLNR,RCLCLNR,RCLCLNR,3,"RCLCLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDRGG,         MNUMYR,        NCLUT1,        1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(Ret_Cst,Ret_Cst,Ret_Cst,Ret_Cst,Ret_Cst,2,"Ret_Cst", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(Ret_Cst,Ret_Cst,Ret_Cst,Ret_Cst,Ret_Cst,2,"Ret_Cst_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RET_FRST,RET_FRST,RET_FRST,RET_FRST,RET_FRST,3,"RET_FRST", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RET,     ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,  &
          "RetireGroup", "PlantType",  "SupplyRegion_ALT1", "",      "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RET_GRP,RET_GRP,RET_GRP,RET_GRP,RET_GRP,1,"RET_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RMAVG,RMAVG,RMAVG,RMAVG,RMAVG,2,"RMAVG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RMAVG,RMAVG,RMAVG,RMAVG,RMAVG,2,"RMAVG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RMPOOL,RMPOOL,RMPOOL,RMPOOL,RMPOOL,2,"RMPOOL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RMPOOL,RMPOOL,RMPOOL,RMPOOL,RMPOOL,2,"RMPOOL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RNWFAC,RNWFAC,RNWFAC,RNWFAC,RNWFAC,1,"RNWFAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(RPSCAPYR,RPSCAPYR,RPSCAPYR,RPSCAPYR,RPSCAPYR,1,"RPSCAPYR", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRF",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(S_DR,S_DR,S_DR,S_DR,S_DR,1,"S_DR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(S_DR,S_DR,S_DR,S_DR,S_DR,1,"S_DR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SCALPR,SCALPR,SCALPR,SCALPR,SCALPR,1,"SCALPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SCLCLNR,SCLCLNR,SCLCLNR,SCLCLNR,SCLCLNR,3,"SCLCLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDRGG,         MNUMYR,        NCLUT1,        1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "PlantType_ECP", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SCR_FCTR,SCR_FCTR,SCR_FCTR,SCR_FCTR,SCR_FCTR,2,"SCR_FCTR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NCLUT1,        NRANK,         1,             1,             1,             1,             1,  &
          "PlantType_ECP", "EmissionRank", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SO_CAP_ADJ,SO_CAP_ADJ,SO_CAP_ADJ,SO_CAP_ADJ,SO_CAP_ADJ,1,"SO_CAP_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SO2_SHR_ALW_GRP,SO2_SHR_ALW_GRP,SO2_SHR_ALW_GRP,SO2_SHR_ALW_GRP,SO2_SHR_ALW_GRP,2,"SO2_SHR_ALW_GRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "MNUMYR",     "SO2ComplyGroup", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SO2_SHR_BY_CLRG,SO2_SHR_BY_CLRG,SO2_SHR_BY_CLRG,SO2_SHR_BY_CLRG,SO2_SHR_BY_CLRG,2,"SO2_SHR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_HG_GRP,     MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "SO2ComplyGroup", "",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SO2_SHR_BY_OLRG,SO2_SHR_BY_OLRG,SO2_SHR_BY_OLRG,SO2_SHR_BY_OLRG,SO2_SHR_BY_OLRG,2,"SO2_SHR_BY_OLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MX_SO2_GRP,    1,             1,             1,             1,             1,  &
          "CensusRegion", "SO2ComplyGroup", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SPNGELGR,SPNGELGR,SPNGELGR,SPNGELGR,SPNGELGR,3,"SPNGELGR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NNGEM,         MNUMYR,        3,             1,             1,             1,             1,  &
          "GasRegion",  "MNUMYR",      "Three",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SQNGELGR,SQNGELGR,SQNGELGR,SQNGELGR,SQNGELGR,3,"SQNGELGR", &
          1,             1,             1,             1,             1,             1,             1,  &
          NNGEM,         MNUMYR,        3,             1,             1,             1,             1,  &
          "GasRegion",  "MNUMYR",      "Three",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SR_CREDIT,SR_CREDIT,SR_CREDIT,SR_CREDIT,SR_CREDIT,1,"SR_CREDIT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SR_INT,SR_INT,SR_INT,SR_INT,SR_INT,2,"SR_INT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SR_MAX_LF,SR_MAX_LF,SR_MAX_LF,SR_MAX_LF,SR_MAX_LF,1,"SR_MAX_LF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SR_MIN_CF,SR_MIN_CF,SR_MIN_CF,SR_MIN_CF,SR_MIN_CF,1,"SR_MIN_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SR_MIN_LF,SR_MIN_LF,SR_MIN_LF,SR_MIN_LF,SR_MIN_LF,1,"SR_MIN_LF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SR_RQMT_DIFF,SR_RQMT_DIFF,SR_RQMT_DIFF,SR_RQMT_DIFF,SR_RQMT_DIFF,1,"SR_RQMT_DIFF", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SR_RQMT_HGHT,SR_RQMT_HGHT,SR_RQMT_HGHT,SR_RQMT_HGHT,SR_RQMT_HGHT,1,"SR_RQMT_HGHT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(SR_TRAN_CREDIT,SR_TRAN_CREDIT,SR_TRAN_CREDIT,SR_TRAN_CREDIT,SR_TRAN_CREDIT,1,"SR_TRAN_CREDIT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RNW_SHR,ST_RNW_SHR,ST_RNW_SHR,ST_RNW_SHR,ST_RNW_SHR,3,"ST_RNW_SHR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_CHP,ST_RPS_CHP,ST_RPS_CHP,ST_RPS_CHP,ST_RPS_CHP,2,"ST_RPS_CHP", &
          1,             1,             1,             1,             1,             1,             1,  &
          TC_FUELS,      MX_ST_RPS,     1,             1,             1,             1,             1,  &
          "TradCogenFuelType", "RPSTranche", "",      "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_CHP_SW,ST_RPS_CHP_SW,ST_RPS_CHP_SW,ST_RPS_CHP_SW,ST_RPS_CHP_SW,1,"ST_RPS_CHP_SW", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ST_RPS,     1,             1,             1,             1,             1,             1,  &
          "RPSTranche", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_COFIRE,ST_RPS_COFIRE,ST_RPS_COFIRE,ST_RPS_COFIRE,ST_RPS_COFIRE,1,"ST_RPS_COFIRE", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ST_RPS,     1,             1,             1,             1,             1,             1,  &
          "RPSTranche", "",            "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_DG,ST_RPS_DG,ST_RPS_DG,ST_RPS_DG,ST_RPS_DG,2,"ST_RPS_DG", &
          1,             1,             1,             1,             1,             1,             1,  &
          TC_FUELS,      MX_ST_RPS,     1,             1,             1,             1,             1,  &
          "TradCogenFuelType", "RPSTranche", "",      "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_DG_SW,ST_RPS_DG_SW,ST_RPS_DG_SW,ST_RPS_DG_SW,ST_RPS_DG_SW,1,"ST_RPS_DG_SW", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ST_RPS,     1,             1,             1,             1,             1,             1,  &
          "RPSTranche", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_DUALS,ST_RPS_DUALS,ST_RPS_DUALS,ST_RPS_DUALS,ST_RPS_DUALS,3,"ST_RPS_DUALS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ST_RPS,     ECP_D_XPH+1,   MNUMYR,        1,             1,             1,             1,  &
          "RPSTranche", "ExplicitPlanningHorizon", "MNUMYR", "",     "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_DUALS,ST_RPS_DUALS,ST_RPS_DUALS,ST_RPS_DUALS,ST_RPS_DUALS,3,"ST_RPS_DUALS_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ST_RPS,     ECP_D_XPH+1,   MNUMYR,        1,             1,             1,             1,  &
          "RPSTranche", "ExplicitPlanningHorizon", "MNUMYR", "",     "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_ECP_EX,ST_RPS_ECP_EX,ST_RPS_ECP_EX,ST_RPS_ECP_EX,ST_RPS_ECP_EX,2,"ST_RPS_ECP_EX", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MX_ST_RPS,     1,             1,             1,             1,             1,  &
          "PlantType",  "RPSTranche",  "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_ECP_NW,ST_RPS_ECP_NW,ST_RPS_ECP_NW,ST_RPS_ECP_NW,ST_RPS_ECP_NW,2,"ST_RPS_ECP_NW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MX_ST_RPS,     1,             1,             1,             1,             1,  &
          "PlantType",  "RPSTranche",  "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_EMM_MAP,ST_RPS_EMM_MAP,ST_RPS_EMM_MAP,ST_RPS_EMM_MAP,ST_RPS_EMM_MAP,2,"ST_RPS_EMM_MAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MX_ST_RPS,     1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "RPSTranche", "",      "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,2,"ST_RPS_EMM_P", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,2,"ST_RPS_EMM_P_pass", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_EMM_Q,ST_RPS_EMM_Q,ST_RPS_EMM_Q,ST_RPS_EMM_Q,ST_RPS_EMM_Q,2,"ST_RPS_EMM_Q", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_EMM_Q,ST_RPS_EMM_Q,ST_RPS_EMM_Q,ST_RPS_EMM_Q,ST_RPS_EMM_Q,2,"ST_RPS_EMM_Q_pass", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_EX_GEN,ST_RPS_EX_GEN,ST_RPS_EX_GEN,ST_RPS_EX_GEN,ST_RPS_EX_GEN,3,"ST_RPS_EX_GEN", &
          1,             1,             1,                1,             1,             1,             1,  &
          MNUMNR,        ECP_D_CAP,     MNUMYR+ECP_D_XPH, 1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "PlantType", "MNUMYRX", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_IMPORTS,ST_RPS_IMPORTS,ST_RPS_IMPORTS,ST_RPS_IMPORTS,ST_RPS_IMPORTS,1,"ST_RPS_IMPORTS", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ST_RPS,     1,             1,             1,             1,             1,             1,  &
          "RPSTranche", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_NW_GEN,ST_RPS_NW_GEN,ST_RPS_NW_GEN,ST_RPS_NW_GEN,ST_RPS_NW_GEN,3,"ST_RPS_NW_GEN", &
          1,             1,             1,                1,             1,             1,             1,  &
          MNUMNR,        ECP_D_CAP,     MNUMYR+ECP_D_XPH, 1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "PlantType", "MNUMYRX", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_PCAP_87,ST_RPS_PCAP_87,ST_RPS_PCAP_87,ST_RPS_PCAP_87,ST_RPS_PCAP_87,2,"ST_RPS_PCAP_87", &
          1,             1,                1,             1,             1,             1,             1,  &
          MX_ST_RPS,     MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,  &
          "RPSTranche", "MNUMYRF",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_PCAP_TYP,ST_RPS_PCAP_TYP,ST_RPS_PCAP_TYP,ST_RPS_PCAP_TYP,ST_RPS_PCAP_TYP,1,"ST_RPS_PCAP_TYP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ST_RPS,     1,             1,             1,             1,             1,             1,  &
          "RPSTranche", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_PRC_87,ST_RPS_PRC_87,ST_RPS_PRC_87,ST_RPS_PRC_87,ST_RPS_PRC_87,2,"ST_RPS_PRC_87", &
          1,             1,                1,             1,             1,             1,             1,  &
          MX_ST_RPS,     MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "RPSTranche", "MNUMYRX",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_PRC_87,ST_RPS_PRC_87,ST_RPS_PRC_87,ST_RPS_PRC_87,ST_RPS_PRC_87,2,"ST_RPS_PRC_87_pass", &
          1,             1,                1,             1,             1,             1,             1,  &
          MX_ST_RPS,     MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "RPSTranche", "MNUMYRX",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_REQ,ST_RPS_REQ,ST_RPS_REQ,ST_RPS_REQ,ST_RPS_REQ,3,"ST_RPS_REQ", &
          1,             1,             1,                1,             1,             1,             1,  &
          MNUMNR,        MX_ST_RPS,     MNUMYR+ECP_D_FPH, 1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "RPSTranche", "MNUMYRF", "",          "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_STnm,ST_RPS_STnm,ST_RPS_STnm,ST_RPS_STnm,ST_RPS_STnm,1,"ST_RPS_STnm", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ST_RPS,     1,             1,             1,             1,             1,             1,  &
          "RPSTranche", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_SYR,ST_RPS_SYR,ST_RPS_SYR,ST_RPS_SYR,ST_RPS_SYR,1,"ST_RPS_SYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ST_RPS,     1,             1,             1,             1,             1,             1,  &
          "RPSTranche", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_TRD,ST_RPS_TRD,ST_RPS_TRD,ST_RPS_TRD,ST_RPS_TRD,3,"ST_RPS_TRD", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMNR,        ECP_D_XPH,     1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "SupplyRegion", "ExplicitPlanningHorizon", "", "",   "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ST_RPS_XP_GEN,ST_RPS_XP_GEN,ST_RPS_XP_GEN,ST_RPS_XP_GEN,ST_RPS_XP_GEN,3,"ST_RPS_XP_GEN", &
          1,             1,             1,                1,             1,             1,             1,  &
          MNUMNR,        ECP_D_CAP,     MNUMYR+ECP_D_XPH, 1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "PlantType", "MNUMYRX", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(STORAGE_CAP,STORAGE_CAP,STORAGE_CAP,STORAGE_CAP,STORAGE_CAP,2,"STORAGE_CAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(STORAGE_CST,STORAGE_CST,STORAGE_CST,STORAGE_CST,STORAGE_CST,2,"STORAGE_CST", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(STORAGE_ECPn,STORAGE_ECPn,STORAGE_ECPn,STORAGE_ECPn,STORAGE_ECPn,1,"STORAGE_ECPn", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(STORAGE_GEN,STORAGE_GEN,STORAGE_GEN,STORAGE_GEN,STORAGE_GEN,2,"STORAGE_GEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     EFD_D_MSP,     1,             1,             1,             1,             1,  &
          "PlantGroup", "Season",      "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(STORAGE_PROFIT,STORAGE_PROFIT,STORAGE_PROFIT,STORAGE_PROFIT,STORAGE_PROFIT,2,"STORAGE_PROFIT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(STORAGE_PROFIT,STORAGE_PROFIT,STORAGE_PROFIT,STORAGE_PROFIT,STORAGE_PROFIT,2,"STORAGE_PROFIT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(STORAGE_RGN,STORAGE_RGN,STORAGE_RGN,STORAGE_RGN,STORAGE_RGN,1,"STORAGE_RGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(T_ANN,T_ANN,T_ANN,T_ANN,T_ANN,2,"T_ANN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(T_ANN,T_ANN,T_ANN,T_ANN,T_ANN,2,"T_ANN_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(T_DR,T_DR,T_DR,T_DR,T_DR,1,"T_DR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(T_DR,T_DR,T_DR,T_DR,T_DR,1,"T_DR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(T_OVR,T_OVR,T_OVR,T_OVR,T_OVR,2,"T_OVR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(T_OVR,T_OVR,T_OVR,T_OVR,T_OVR,2,"T_OVR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TAXDEPR,TAXDEPR,TAXDEPR,TAXDEPR,TAXDEPR,2,"TAXDEPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          26,            6,             1,             1,             1,             1,             1,  &
          "DepreciationYears", "DepreciationOptions", "", "",        "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TAXDEPRN,TAXDEPRN,TAXDEPRN,TAXDEPRN,TAXDEPRN,3,"TAXDEPRN", &
          1,             1,             1,             1,             1,             1,             1,  &
          26,            6,             MNUMYR,        1,             1,             1,             1,  &
          "DepreciationYears", "DepreciationOptions", "MNUMYR", "",  "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TAX_FLAG,TAX_FLAG,TAX_FLAG,TAX_FLAG,TAX_FLAG,1,"TAX_FLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I1",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TBTU_SHR_BY_ST,TBTU_SHR_BY_ST,TBTU_SHR_BY_ST,TBTU_SHR_BY_ST,TBTU_SHR_BY_ST,2,"TBTU_SHR_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_MST,     ECP_D_DSP+1,   1,             1,             1,             1,             1,  &
          "NOXStates",  "DispatchableECPplus1", "",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TC_FUELS,TC_FUELS,TC_FUELS,TC_FUELS,TC_FUELS,1,"TC_FUELS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TCCF_GL,TCCF_GL,TCCF_GL,TCCF_GL,TCCF_GL,2,"TCCF_GL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        4,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "Four",        "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TCCV_GL,TCCV_GL,TCCV_GL,TCCV_GL,TCCV_GL,2,"TCCV_GL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        4,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "Four",        "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TMPMBTU,TMPMBTU,TMPMBTU,TMPMBTU,TMPMBTU,1,"TMPMBTU", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TnS_Costs,TnS_Costs,TnS_Costs,TnS_Costs,TnS_Costs,2,"TnS_Costs", &
          0,             1,             1,             1,             1,             1,             1,  &
          MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "FuelRegion_SUP", "MNUMYR",  "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TRANRULE1,TRANRULE1,TRANRULE1,TRANRULE1,TRANRULE1,1,"TRANRULE1", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TRANRULE2,TRANRULE2,TRANRULE2,TRANRULE2,TRANRULE2,1,"TRANRULE2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_CL_BY_ST,TSO2_CL_BY_ST,TSO2_CL_BY_ST,TSO2_CL_BY_ST,TSO2_CL_BY_ST,1,"TSO2_CL_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_MST,     1,             1,             1,             1,             1,             1,  &
          "NOXStates",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_LIM_BY_CLRG,TSO2_LIM_BY_CLRG,TSO2_LIM_BY_CLRG,TSO2_LIM_BY_CLRG,TSO2_LIM_BY_CLRG,1,"TSO2_LIM_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         1,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_LIM_BY_ST,TSO2_LIM_BY_ST,TSO2_LIM_BY_ST,TSO2_LIM_BY_ST,TSO2_LIM_BY_ST,1,"TSO2_LIM_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_MST,     1,             1,             1,             1,             1,             1,  &
          "NOXStates",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_LM1_BY_CLRG,TSO2_LM1_BY_CLRG,TSO2_LM1_BY_CLRG,TSO2_LM1_BY_CLRG,TSO2_LM1_BY_CLRG,1,"TSO2_LM1_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         1,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_NST,TSO2_NST,TSO2_NST,TSO2_NST,TSO2_NST,1,"TSO2_NST", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_OL_BY_ST,TSO2_OL_BY_ST,TSO2_OL_BY_ST,TSO2_OL_BY_ST,TSO2_OL_BY_ST,1,"TSO2_OL_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_MST,     1,             1,             1,             1,             1,             1,  &
          "NOXStates",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_OSH_BY_OLCL,TSO2_OSH_BY_OLCL,TSO2_OSH_BY_OLCL,TSO2_OSH_BY_OLCL,TSO2_OSH_BY_OLCL,3,"TSO2_OSH_BY_OLCL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        NDREG,         MX_SO2_TRAN,   1,             1,             1,             1,  &
          "CensusRegion", "CoalDemandRegion", "SO2_Transport", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_OSH_BY_ST,TSO2_OSH_BY_ST,TSO2_OSH_BY_ST,TSO2_OSH_BY_ST,TSO2_OSH_BY_ST,1,"TSO2_OSH_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_MST,     1,             1,             1,             1,             1,             1,  &
          "NOXStates",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_SHR_BY_CLRG,TSO2_SHR_BY_CLRG,TSO2_SHR_BY_CLRG,TSO2_SHR_BY_CLRG,TSO2_SHR_BY_CLRG,2,"TSO2_SHR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MX_SO2_TRAN,   1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "SO2_Transport", "",    "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_SHR_BY_OLRG,TSO2_SHR_BY_OLRG,TSO2_SHR_BY_OLRG,TSO2_SHR_BY_OLRG,TSO2_SHR_BY_OLRG,2,"TSO2_SHR_BY_OLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MX_SO2_TRAN,   1,             1,             1,             1,             1,  &
          "CensusRegion", "SO2_Transport", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_TR_BY_ST,TSO2_TR_BY_ST,TSO2_TR_BY_ST,TSO2_TR_BY_ST,TSO2_TR_BY_ST,1,"TSO2_TR_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_MST,     1,             1,             1,             1,             1,             1,  &
          "NOXStates",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_VR_BY_CLRG,TSO2_VR_BY_CLRG,TSO2_VR_BY_CLRG,TSO2_VR_BY_CLRG,TSO2_VR_BY_CLRG,1,"TSO2_VR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_VR_BY_ST,TSO2_VR_BY_ST,TSO2_VR_BY_ST,TSO2_VR_BY_ST,TSO2_VR_BY_ST,1,"TSO2_VR_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_VR1_BY_CLRG,TSO2_VR1_BY_CLRG,TSO2_VR1_BY_CLRG,TSO2_VR1_BY_CLRG,TSO2_VR1_BY_CLRG,1,"TSO2_VR1_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         1,             1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_VR1_BY_ST,TSO2_VR1_BY_ST,TSO2_VR1_BY_ST,TSO2_VR1_BY_ST,TSO2_VR1_BY_ST,1,"TSO2_VR1_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_MST,     1,             1,             1,             1,             1,             1,  &
          "NOXStates",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_VR3_BY_ST,TSO2_VR3_BY_ST,TSO2_VR3_BY_ST,TSO2_VR3_BY_ST,TSO2_VR3_BY_ST,1,"TSO2_VR3_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          NOX_D_MST,     1,             1,             1,             1,             1,             1,  &
          "NOXStates",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_YR_BY_CLRG,TSO2_YR_BY_CLRG,TSO2_YR_BY_CLRG,TSO2_YR_BY_CLRG,TSO2_YR_BY_CLRG,1,"TSO2_YR_BY_CLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSO2_YR_BY_ST,TSO2_YR_BY_ST,TSO2_YR_BY_ST,TSO2_YR_BY_ST,TSO2_YR_BY_ST,1,"TSO2_YR_BY_ST", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TSPMBTU,TSPMBTU,TSPMBTU,TSPMBTU,TSPMBTU,1,"TSPMBTU", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(TST_CAP_BY_CRG,TST_CAP_BY_CRG,TST_CAP_BY_CRG,TST_CAP_BY_CRG,TST_CAP_BY_CRG,3,"TST_CAP_BY_CRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     NDREG,         ECP_D_XPH,     1,             1,             1,             1,  &
          "PlantType",  "CoalDemandRegion", "ExplicitPlanningHorizon", "", "",      "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UBACT_YR,UBACT_YR,UBACT_YR,UBACT_YR,UBACT_YR,1,"UBACT_YR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCAP_HG,UCAP_HG,UCAP_HG,UCAP_HG,UCAP_HG,1,"UCAP_HG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCAPADJ,UCAPADJ,UCAPADJ,UCAPADJ,UCAPADJ,2,"UCAPADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_CGRP2,UCL_CGRP2,UCL_CGRP2,UCL_CGRP2,UCL_CGRP2,1,"UCL_CGRP2", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_CGRP2,UCL_CGRP2,UCL_CGRP2,UCL_CGRP2,UCL_CGRP2,1,"UCL_CGRP2_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_CL_NG_FOM_ADJ,UCL_CL_NG_FOM_ADJ,UCL_CL_NG_FOM_ADJ,UCL_CL_NG_FOM_ADJ,UCL_CL_NG_FOM_ADJ,1,"UCL_CL_NG_FOM_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_CL_NG_HR_PEN,UCL_CL_NG_HR_PEN,UCL_CL_NG_HR_PEN,UCL_CL_NG_HR_PEN,UCL_CL_NG_HR_PEN,1,"UCL_CL_NG_HR_PEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_CL_NG_SYR,UCL_CL_NG_SYR,UCL_CL_NG_SYR,UCL_CL_NG_SYR,UCL_CL_NG_SYR,1,"UCL_CL_NG_SYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_CL_NG_VOM_ADJ,UCL_CL_NG_VOM_ADJ,UCL_CL_NG_VOM_ADJ,UCL_CL_NG_VOM_ADJ,UCL_CL_NG_VOM_ADJ,1,"UCL_CL_NG_VOM_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_CNFG,UCL_CNFG,UCL_CNFG,UCL_CNFG,UCL_CNFG,2,"UCL_CNFG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_RCMB+2,     MX_CNFG,       1,             1,             1,             1,             1,  &
          "RetrofitComponent", "CoalConfiguration", "", "",          "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_ECP,UCL_ECP,UCL_ECP,UCL_ECP,UCL_ECP,1,"UCL_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_CNFG,       1,             1,             1,             1,             1,             1,  &
          "CoalConfiguration", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_FF_F,UCL_FF_F,UCL_FF_F,UCL_FF_F,UCL_FF_F,1,"UCL_FF_F", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_FF_O,UCL_FF_O,UCL_FF_O,UCL_FF_O,UCL_FF_O,1,"UCL_FF_O", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_MACT_CFG,UCL_MACT_CFG,UCL_MACT_CFG,UCL_MACT_CFG,UCL_MACT_CFG,1,"UCL_MACT_CFG", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_NSR_CFG,UCL_NSR_CFG,UCL_NSR_CFG,UCL_NSR_CFG,UCL_NSR_CFG,1,"UCL_NSR_CFG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_CNFG,       1,             1,             1,             1,             1,             1,  &
          "CoalConfiguration", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_PAC,UCL_PAC,UCL_PAC,UCL_PAC,UCL_PAC,1,"UCL_PAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ACSS,       1,             1,             1,             1,             1,             1,  &
          "numACI",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_QAC,UCL_QAC,UCL_QAC,UCL_QAC,UCL_QAC,1,"UCL_QAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ACSS,       1,             1,             1,             1,             1,             1,  &
          "numACI",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_RCMB,UCL_RCMB,UCL_RCMB,UCL_RCMB,UCL_RCMB,2,"UCL_RCMB", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_ROPT,       MX_CNFG,       1,             1,             1,             1,             1,  &
          "RetrofitCombinations", "CoalConfiguration", "", "",       "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_ROPT,UCL_ROPT,UCL_ROPT,UCL_ROPT,UCL_ROPT,2,"UCL_ROPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_RCMB,       MX_ROPT,       1,             1,             1,             1,             1,  &
          "RetrofitComponent", "RetrofitCombinations", "", "",       "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCL_VIN,UCL_VIN,UCL_VIN,UCL_VIN,UCL_VIN,1,"UCL_VIN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     1,             1,             1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "", "",          "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPDGNI,UCPDGNI,UCPDGNI,UCPDGNI,UCPDGNI,1,"UCPDGNI", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DGN,     1,             1,             1,             1,             1,             1,  &
          "DistributedGenType", "",    "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPDGNIS,UCPDGNIS,UCPDGNIS,UCPDGNIS,UCPDGNIS,1,"UCPDGNIS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPDSPI,UCPDSPI,UCPDSPI,UCPDSPI,UCPDSPI,1,"UCPDSPI", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     1,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPDSPIS,UCPDSPIS,UCPDSPIS,UCPDSPIS,UCPDSPIS,1,"UCPDSPIS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPINTI,UCPINTI,UCPINTI,UCPINTI,UCPINTI,1,"UCPINTI", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_INT,     1,             1,             1,             1,             1,             1,  &
          "Intermittent", "",          "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPINTIS,UCPINTIS,UCPINTIS,UCPINTIS,UCPINTIS,1,"UCPINTIS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPRNWI,UCPRNWI,UCPRNWI,UCPRNWI,UCPRNWI,1,"UCPRNWI", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RNW,     1,             1,             1,             1,             1,             1,  &
          "OtherRenewable", "",        "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPRNWIS,UCPRNWIS,UCPRNWIS,UCPRNWIS,UCPRNWIS,1,"UCPRNWIS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPSTOI,UCPSTOI,UCPSTOI,UCPSTOI,UCPSTOI,1,"UCPSTOI", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_STO,     1,             1,             1,             1,             1,             1,  &
          "ECPStorageType", "",        "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCPSTOIS,UCPSTOIS,UCPSTOIS,UCPSTOIS,UCPSTOIS,1,"UCPSTOIS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UCRBKNR,UCRBKNR,UCRBKNR,UCRBKNR,UCRBKNR,2,"UCRBKNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UDFLTP,UDFLTP,UDFLTP,UDFLTP,UDFLTP,2,"UDFLTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     ECP_D_FPP,     1,             1,             1,             1,             1,  &
          "DispatchableECP", "FuelsPerPlant", "",     "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UDSI_YR,UDSI_YR,UDSI_YR,UDSI_YR,UDSI_YR,1,"UDSI_YR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UECP_CAP,UECP_CAP,UECP_CAP,UECP_CAP,UECP_CAP,3,"UECP_CAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     ECP_D_DSP,     NDREG,         1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "DispatchableECP", "CoalDemandRegion", "", "", "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UECP_CAP,UECP_CAP,UECP_CAP,UECP_CAP,UECP_CAP,3,"UECP_CAP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     ECP_D_DSP,     NDREG,         1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "DispatchableECP", "CoalDemandRegion", "", "", "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UECP_GEN,UECP_GEN,UECP_GEN,UECP_GEN,UECP_GEN,3,"UECP_GEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     ECP_D_DSP,     NDREG,         1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "DispatchableECP", "CoalDemandRegion", "", "", "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UECP_GEN,UECP_GEN,UECP_GEN,UECP_GEN,UECP_GEN,3,"UECP_GEN_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_XPH,     ECP_D_DSP,     NDREG,         1,             1,             1,             1,  &
          "ExplicitPlanningHorizon", "DispatchableECP", "CoalDemandRegion", "", "", "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UECP_CPEN_ADJ,UECP_CPEN_ADJ,UECP_CPEN_ADJ,UECP_CPEN_ADJ,UECP_CPEN_ADJ,1,"UECP_CPEN_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UECP_HTRT_ADJ,UECP_HTRT_ADJ,UECP_HTRT_ADJ,UECP_HTRT_ADJ,UECP_HTRT_ADJ,1,"UECP_HTRT_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UESTYR,UESTYR,UESTYR,UESTYR,UESTYR,1,"UESTYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UFACP2,UFACP2,UFACP2,UFACP2,UFACP2,1,"UFACP2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UFACPS,UFACPS,UFACPS,UFACPS,UFACPS,1,"UFACPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UFRHG,UFRHG,UFRHG,UFRHG,UFRHG,2,"UFRHG", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "EFDFuelType", "FuelRegion", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UFRSO2,UFRSO2,UFRSO2,UFRSO2,UFRSO2,2,"UFRSO2", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_NFL,     EFD_D_MFRG,    1,             1,             1,             1,             1,  &
          "EFDFuelType", "FuelRegion", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UGNCFNR,UGNCFNR,UGNCFNR,UGNCFNR,UGNCFNR,3,"UGNCFNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "OwnerType",  "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UGNPTNR,UGNPTNR,UGNPTNR,UGNPTNR,UGNPTNR,3,"UGNPTNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "OwnerType",  "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UGNPVNR,UGNPVNR,UGNPVNR,UGNPVNR,UGNPVNR,3,"UGNPVNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "OwnerType",  "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UGNSONR,UGNSONR,UGNSONR,UGNSONR,UGNSONR,3,"UGNSONR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "OwnerType",  "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UGNTLNR,UGNTLNR,UGNTLNR,UGNTLNR,UGNTLNR,3,"UGNTLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "OwnerType",  "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UGNWFNR,UGNWFNR,UGNWFNR,UGNWFNR,UGNWFNR,3,"UGNWFNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "OwnerType",  "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UGNWLNR,UGNWLNR,UGNWLNR,UGNWLNR,UGNWLNR,3,"UGNWLNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "OwnerType",  "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UGNWNNR,UGNWNNR,UGNWNNR,UGNWNNR,UGNWNNR,3,"UGNWNNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "OwnerType",  "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UHBSYR,UHBSYR,UHBSYR,UHBSYR,UHBSYR,1,"UHBSYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UIAC2,UIAC2,UIAC2,UIAC2,UIAC2,1,"UIAC2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UIDS,UIDS,UIDS,UIDS,UIDS,1,"UIDS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UIFPLT,UIFPLT,UIFPLT,UIFPLT,UIFPLT,1,"UIFPLT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UIGF,UIGF,UIGF,UIGF,UIGF,1,"UIGF", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UIRINTI,UIRINTI,UIRINTI,UIRINTI,UIRINTI,1,"UIRINTI", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_INT,     1,             1,             1,             1,             1,             1,  &
          "Intermittent", "",          "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UIRL,UIRL,UIRL,UIRL,UIRL,1,"UIRL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UIRRNWI,UIRRNWI,UIRRNWI,UIRRNWI,UIRRNWI,1,"UIRRNWI", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RNW,     1,             1,             1,             1,             1,             1,  &
          "OtherRenewable", "",        "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UISTG,UISTG,UISTG,UISTG,UISTG,1,"UISTG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULAGE,ULAGE,ULAGE,ULAGE,ULAGE,1,"ULAGE", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULCAPC,ULCAPC,ULCAPC,ULCAPC,ULCAPC,1,"ULCAPC", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULECPT,ULECPT,ULECPT,ULECPT,ULECPT,1,"ULECPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULEL,ULEL,ULEL,ULEL,ULEL,2,"ULEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        ECP_D_CAP,     1,             1,             1,             1,             1,  &
          "MNUMYR",     "PlantType",   "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULEL,ULEL,ULEL,ULEL,ULEL,2,"ULEL_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        ECP_D_CAP,     1,             1,             1,             1,             1,  &
          "MNUMYR",     "PlantType",   "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULFCST,ULFCST,ULFCST,ULFCST,ULFCST,1,"ULFCST", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULFRGN,ULFRGN,ULFRGN,ULFRGN,ULFRGN,1,"ULFRGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULHGP,ULHGP,ULHGP,ULHGP,ULHGP,1,"ULHGP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULHRQ,ULHRQ,ULHRQ,ULHRQ,ULHRQ,1,"ULHRQ", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULHTRT_ECP,ULHTRT_ECP,ULHTRT_ECP,ULHTRT_ECP,ULHTRT_ECP,2,"ULHTRT_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "PlantGroup", "ExplicitPlanningHorizon", "", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULIGRP,ULIGRP,ULIGRP,ULIGRP,ULIGRP,1,"ULIGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULMRUN,ULMRUN,ULMRUN,ULMRUN,ULMRUN,1,"ULMRUN", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULNOXP,ULNOXP,ULNOXP,ULNOXP,ULNOXP,1,"ULNOXP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULORGN,ULORGN,ULORGN,ULORGN,ULORGN,1,"ULORGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULOV,ULOV,ULOV,ULOV,ULOV,1,"ULOV", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULOV,ULOV,ULOV,ULOV,ULOV,1,"ULOV_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULREVS,ULREVS,ULREVS,ULREVS,ULREVS,1,"ULREVS", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULRPSP,ULRPSP,ULRPSP,ULRPSP,ULRPSP,1,"ULRPSP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULRINDX,ULRINDX,ULRINDX,ULRINDX,ULRINDX,1,"ULRINDX", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULSCAP_ECP,ULSCAP_ECP,ULSCAP_ECP,ULSCAP_ECP,ULSCAP_ECP,2,"ULSCAP_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "PlantGroup", "ExplicitPlanningHorizon", "", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULSINDX,ULSINDX,ULSINDX,ULSINDX,ULSINDX,1,"ULSINDX", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULSO2P,ULSO2P,ULSO2P,ULSO2P,ULSO2P,1,"ULSO2P", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULSTATE,ULSTATE,ULSTATE,ULSTATE,ULSTATE,1,"ULSTATE", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULTGEN_ECP,ULTGEN_ECP,ULTGEN_ECP,ULTGEN_ECP,ULTGEN_ECP,2,"ULTGEN_ECP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     ECP_D_XPH,     1,             1,             1,             1,             1,  &
          "PlantGroup", "ExplicitPlanningHorizon", "", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(ULVCST,ULVCST,ULVCST,ULVCST,ULVCST,1,"ULVCST", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UMACT_YR,UMACT_YR,UMACT_YR,UMACT_YR,UMACT_YR,1,"UMACT_YR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UNAPH,UNAPH,UNAPH,UNAPH,UNAPH,1,"UNAPH", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UNFPH,UNFPH,UNFPH,UNFPH,UNFPH,1,"UNFPH", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UNFRGN,UNFRGN,UNFRGN,UNFRGN,UNFRGN,1,"UNFRGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UNRGNS,UNRGNS,UNRGNS,UNRGNS,UNRGNS,1,"UNRGNS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UNSTAS,UNSTAS,UNSTAS,UNSTAS,UNSTAS,1,"UNSTAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UNUC_RLT,UNUC_RLT,UNUC_RLT,UNUC_RLT,UNUC_RLT,1,"UNUC_RLT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UNUC_SYR,UNUC_SYR,UNUC_SYR,UNUC_SYR,UNUC_SYR,1,"UNUC_SYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UNXPH,UNXPH,UNXPH,UNXPH,UNXPH,1,"UNXPH", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UNYEAR,UNYEAR,UNYEAR,UNYEAR,UNYEAR,1,"UNYEAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UOUCCP,UOUCCP,UOUCCP,UOUCCP,UOUCCP,2,"UOUCCP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UOUNCP,UOUNCP,UOUNCP,UOUNCP,UOUNCP,2,"UOUNCP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPANNADJ,UPANNADJ,UPANNADJ,UPANNADJ,UPANNADJ,2,"UPANNADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantType",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.TRUE.)
       call AIMMS_TransArray_out_ecp(UPANNLMT,UPANNLMT,UPANNLMT,UPANNLMT,UPANNLMT,2,"UPANNLMT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantType",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPAVLYR,UPAVLYR,UPAVLYR,UPAVLYR,UPAVLYR,1,"UPAVLYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPBLDREG,UPBLDREG,UPBLDREG,UPBLDREG,UPBLDREG,2,"UPBLDREG", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPBLDREG,UPBLDREG,UPBLDREG,UPBLDREG,UPBLDREG,2,"UPBLDREG_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPBLDTYP,UPBLDTYP,UPBLDTYP,UPBLDTYP,UPBLDTYP,1,"UPBLDTYP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPBQMAX,UPBQMAX,UPBQMAX,UPBQMAX,UPBQMAX,1,"UPBQMAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPBRMAX,UPBRMAX,UPBRMAX,UPBRMAX,UPBRMAX,1,"UPBRMAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCALPHA,UPCALPHA,UPCALPHA,UPCALPHA,UPCALPHA,1,"UPCALPHA", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCAPBND,UPCAPBND,UPCAPBND,UPCAPBND,UPCAPBND,1,"UPCAPBND", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCAPCAS,UPCAPCAS,UPCAPCAS,UPCAPCAS,UPCAPCAS,1,"UPCAPCAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCAPD,UPCAPD,UPCAPD,UPCAPD,UPCAPD,2,"UPCAPD", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, ECP_D_CAP,     1,             1,             1,             1,             1,  &
          "MNUMYRX",    "PlantType",   "",            "",            "",            "",            "",  &
          "R4",iyr,.TRUE.)
       call AIMMS_TransArray_out_ecp(UPCAPFLR,UPCAPFLR,UPCAPFLR,UPCAPFLR,UPCAPFLR,2,"UPCAPFLR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantType",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCAPSHR,UPCAPSHR,UPCAPSHR,UPCAPSHR,UPCAPSHR,1,"UPCAPSHR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCARG,UPCARG,UPCARG,UPCARG,UPCARG,1,"UPCARG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCARGRW,UPCARGRW,UPCARGRW,UPCARGRW,UPCARGRW,1,"UPCARGRW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCCR,UPCCR,UPCCR,UPCCR,UPCCR,1,"UPCCR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCCSCAP,UPCCSCAP,UPCCSCAP,UPCCSCAP,UPCCSCAP,1,"UPCCSCAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCCSHRT,UPCCSHRT,UPCCSHRT,UPCCSHRT,UPCCSHRT,1,"UPCCSHRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCENSUS,UPCENSUS,UPCENSUS,UPCENSUS,UPCENSUS,2,"UPCENSUS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFBTU,UPCFBTU,UPCFBTU,UPCFBTU,UPCFBTU,2,"UPCFBTU", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RCF,     NDREG,         1,             1,             1,             1,             1,  &
          "BiomassRetrofit", "CoalDemandRegion", "",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFCLT,UPCFCLT,UPCFCLT,UPCFCLT,UPCFCLT,1,"UPCFCLT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFCPR,UPCFCPR,UPCFCPR,UPCFCPR,UPCFCPR,1,"UPCFCPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_LCP,     1,             1,             1,             1,             1,             1,  &
          "ConstructionPeriod", "",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFCST,UPCFCST,UPCFCST,UPCFCST,UPCFCST,1,"UPCFCST", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RCF,     1,             1,             1,             1,             1,             1,  &
          "BiomassRetrofit", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFELF,UPCFELF,UPCFELF,UPCFELF,UPCFELF,1,"UPCFELF", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFFOM,UPCFFOM,UPCFFOM,UPCFFOM,UPCFFOM,1,"UPCFFOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RCF,     1,             1,             1,             1,             1,             1,  &
          "BiomassRetrofit", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFGEN,UPCFGEN,UPCFGEN,UPCFGEN,UPCFGEN,2,"UPCFGEN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFGNN,UPCFGNN,UPCFGNN,UPCFGNN,UPCFGNN,2,"UPCFGNN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFGNN,UPCFGNN,UPCFGNN,UPCFGNN,UPCFGNN,2,"UPCFGNN_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFLEV,UPCFLEV,UPCFLEV,UPCFLEV,UPCFLEV,2,"UPCFLEV", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RCF,     ECP_D_CFS,     1,             1,             1,             1,             1,  &
          "BiomassRetrofit", "BiomassOption", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFNSTP,UPCFNSTP,UPCFNSTP,UPCFNSTP,UPCFNSTP,1,"UPCFNSTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RCF,     1,             1,             1,             1,             1,             1,  &
          "BiomassRetrofit", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFSTEP,UPCFSTEP,UPCFSTEP,UPCFSTEP,UPCFSTEP,2,"UPCFSTEP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RCF,     ECP_D_CFS,     1,             1,             1,             1,             1,  &
          "BiomassRetrofit", "BiomassOption", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCFVOM,UPCFVOM,UPCFVOM,UPCFVOM,UPCFVOM,1,"UPCFVOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_RCF,     1,             1,             1,             1,             1,             1,  &
          "BiomassRetrofit", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCIMP,UPCIMP,UPCIMP,UPCIMP,UPCIMP,1,"UPCIMP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCLRG,UPCLRG,UPCLRG,UPCLRG,UPCLRG,1,"UPCLRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCLYR,UPCLYR,UPCLYR,UPCLYR,UPCLYR,1,"UPCLYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCO2EOR,UPCO2EOR,UPCO2EOR,UPCO2EOR,UPCO2EOR,1,"UPCO2EOR", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCPRO,UPCPRO,UPCPRO,UPCPRO,UPCPRO,2,"UPCPRO", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     ECP_D_LCP,     1,             1,             1,             1,             1,  &
          "PlantType",  "ConstructionPeriod", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCQMAX,UPCQMAX,UPCQMAX,UPCQMAX,UPCQMAX,1,"UPCQMAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCRB,UPCRB,UPCRB,UPCRB,UPCRB,3,"UPCRB", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_NFL,     MAXNFR,        ECP_D_XPH,     1,             1,             1,             1,  &
          "ECPFuelType", "FuelRegion", "ExplicitPlanningHorizon", "", "",           "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCRMAX,UPCRMAX,UPCRMAX,UPCRMAX,UPCRMAX,1,"UPCRMAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCRVELA,UPCRVELA,UPCRVELA,UPCRVELA,UPCRVELA,1,"UPCRVELA", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCRVSIZ,UPCRVSIZ,UPCRVSIZ,UPCRVSIZ,UPCRVSIZ,1,"UPCRVSIZ", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCRVSTP,UPCRVSTP,UPCRVSTP,UPCRVSTP,UPCRVSTP,1,"UPCRVSTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCRVSW,UPCRVSW,UPCRVSW,UPCRVSW,UPCRVSW,1,"UPCRVSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCSB,UPCSB,UPCSB,UPCSB,UPCSB,1,"UPCSB", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPCSBYR,UPCSBYR,UPCSBYR,UPCSBYR,UPCSBYR,2,"UPCSBYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantType",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPDCEF,UPDCEF,UPDCEF,UPDCEF,UPDCEF,1,"UPDCEF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DGN,     1,             1,             1,             1,             1,             1,  &
          "DistributedGenType", "",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPDGAVR,UPDGAVR,UPDGAVR,UPDGAVR,UPDGAVR,1,"UPDGAVR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPDGFPR,UPDGFPR,UPDGFPR,UPDGFPR,UPDGFPR,1,"UPDGFPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPDHRSW,UPDHRSW,UPDHRSW,UPDHRSW,UPDHRSW,1,"UPDHRSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     1,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPDHRY0,UPDHRY0,UPDHRY0,UPDHRY0,UPDHRY0,1,"UPDHRY0", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     1,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPDHRYN,UPDHRYN,UPDHRYN,UPDHRYN,UPDHRYN,1,"UPDHRYN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     1,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPDSEF,UPDSEF,UPDSEF,UPDSEF,UPDSEF,1,"UPDSEF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DGN,     1,             1,             1,             1,             1,             1,  &
          "DistributedGenType", "",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPDSISEF,UPDSISEF,UPDSISEF,UPDSISEF,UPDSISEF,1,"UPDSISEF", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             1,             1,             1,             1,             1,             1,  &
          "OwnerType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPECLF,UPECLF,UPECLF,UPECLF,UPECLF,1,"UPECLF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPEFDT,UPEFDT,UPEFDT,UPEFDT,UPEFDT,1,"UPEFDT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPEFPT,UPEFPT,UPEFPT,UPEFPT,UPEFPT,1,"UPEFPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPETTSW,UPETTSW,UPETTSW,UPETTSW,UPETTSW,1,"UPETTSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPFDIS,UPFDIS,UPFDIS,UPFDIS,UPFDIS,1,"UPFDIS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_NFL,     1,             1,             1,             1,             1,             1,  &
          "ECPFuelType", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPFGAS,UPFGAS,UPFGAS,UPFGAS,UPFGAS,1,"UPFGAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_NFL,     1,             1,             1,             1,             1,             1,  &
          "ECPFuelType", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPFLTP,UPFLTP,UPFLTP,UPFLTP,UPFLTP,2,"UPFLTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     ECP_D_FPP,     1,             1,             1,             1,             1,  &
          "DispatchableECP", "FuelsPerPlant", "",     "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPFOM,UPFOM,UPFOM,UPFOM,UPFOM,1,"UPFOM", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPFORT,UPFORT,UPFORT,UPFORT,UPFORT,1,"UPFORT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPFRES,UPFRES,UPFRES,UPFRES,UPFRES,1,"UPFRES", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_NFL,     1,             1,             1,             1,             1,             1,  &
          "ECPFuelType", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGNPD,UPGNPD,UPGNPD,UPGNPD,UPGNPD,1,"UPGNPD", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_FPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRF",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.TRUE.)
       call AIMMS_TransArray_out_ecp(UPGSMX,UPGSMX,UPGSMX,UPGSMX,UPGSMX,1,"UPGSMX", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGSMX,UPGSMX,UPGSMX,UPGSMX,UPGSMX,1,"UPGSMX_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGSTY,UPGSTY,UPGSTY,UPGSTY,UPGSTY,1,"UPGSTY", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGSTY,UPGSTY,UPGSTY,UPGSTY,UPGSTY,1,"UPGSTY_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGSUB,UPGSUB,UPGSUB,UPGSUB,UPGSUB,1,"UPGSUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGSUBPT,UPGSUBPT,UPGSUBPT,UPGSUBPT,UPGSUBPT,1,"UPGSUBPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGSUBYR,UPGSUBYR,UPGSUBYR,UPGSUBYR,UPGSUBYR,2,"UPGSUBYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantType",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGSY1,UPGSY1,UPGSY1,UPGSY1,UPGSY1,1,"UPGSY1", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGSYL,UPGSYL,UPGSYL,UPGSYL,UPGSYL,1,"UPGSYL", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGSYR,UPGSYR,UPGSYR,UPGSYR,UPGSYR,1,"UPGSYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPGTRN,UPGTRN,UPGTRN,UPGTRN,UPGTRN,1,"UPGTRN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPHRNQRT,UPHRNQRT,UPHRNQRT,UPHRNQRT,UPHRNQRT,1,"UPHRNQRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPHTRT,UPHTRT,UPHTRT,UPHTRT,UPHTRT,1,"UPHTRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPIBND,UPIBND,UPIBND,UPIBND,UPIBND,1,"UPIBND", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_INT,     1,             1,             1,             1,             1,             1,  &
          "Intermittent", "",          "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPINTBND,UPINTBND,UPINTBND,UPINTBND,UPINTBND,1,"UPINTBND", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPINTBD0,UPINTBD0,UPINTBD0,UPINTBD0,UPINTBD0,1,"UPINTBD0", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPINTINC,UPINTINC,UPINTINC,UPINTINC,UPINTINC,1,"UPINTINC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPINTLAG,UPINTLAG,UPINTLAG,UPINTLAG,UPINTLAG,1,"UPINTLAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPINTMAX,UPINTMAX,UPINTMAX,UPINTMAX,UPINTMAX,1,"UPINTMAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPINTSW,UPINTSW,UPINTSW,UPINTSW,UPINTSW,1,"UPINTSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPLRLC,UPLRLC,UPLRLC,UPLRLC,UPLRLC,1,"UPLRLC", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPLRMIN,UPLRMIN,UPLRMIN,UPLRMIN,UPLRMIN,1,"UPLRMIN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPLROPT,UPLROPT,UPLROPT,UPLROPT,UPLROPT,1,"UPLROPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPLRPC,UPLRPC,UPLRPC,UPLRPC,UPLRPC,1,"UPLRPC", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPMAXCF,UPMAXCF,UPMAXCF,UPMAXCF,UPMAXCF,3,"UPMAXCF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "DispatchableECP", "SupplyRegion", "MNUMYR", "",           "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPMCF,UPMCF,UPMCF,UPMCF,UPMCF,1,"UPMCF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPMSSIZ,UPMSSIZ,UPMSSIZ,UPMSSIZ,UPMSSIZ,1,"UPMSSIZ", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPMXGAS,UPMXGAS,UPMXGAS,UPMXGAS,UPMXGAS,3,"UPMXGAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     MAXNFR,        MNUMYR,        1,             1,             1,             1,  &
          "DispatchableECP", "FuelRegion", "MNUMYR",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPMXGAS_MR,UPMXGAS_MR,UPMXGAS_MR,UPMXGAS_MR,UPMXGAS_MR,3,"UPMXGAS_MR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     MAXNFR,        MNUMYR,        1,             1,             1,             1,  &
          "DispatchableECP", "FuelRegion", "MNUMYR",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPMXOIL,UPMXOIL,UPMXOIL,UPMXOIL,UPMXOIL,3,"UPMXOIL", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     MAXNFR,        MNUMYR,        1,             1,             1,             1,  &
          "DispatchableECP", "FuelRegion", "MNUMYR",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPMXOIL_MR,UPMXOIL_MR,UPMXOIL_MR,UPMXOIL_MR,UPMXOIL_MR,3,"UPMXOIL_MR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     MAXNFR,        MNUMYR,        1,             1,             1,             1,  &
          "DispatchableECP", "FuelRegion", "MNUMYR",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNASW,UPNASW,UPNASW,UPNASW,UPNASW,1,"UPNASW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNAYR,UPNAYR,UPNAYR,UPNAYR,UPNAYR,1,"UPNAYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNCLF,UPNCLF,UPNCLF,UPNCLF,UPNCLF,1,"UPNCLF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNCLT,UPNCLT,UPNCLT,UPNCLT,UPNCLT,1,"UPNCLT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNCPR,UPNCPR,UPNCPR,UPNCPR,UPNCPR,1,"UPNCPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_LCP,     1,             1,             1,             1,             1,             1,  &
          "ConstructionPeriod", "",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNELF,UPNELF,UPNELF,UPNELF,UPNELF,1,"UPNELF", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNFDT,UPNFDT,UPNFDT,UPNFDT,UPNFDT,1,"UPNFDT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNFDTA,UPNFDTA,UPNFDTA,UPNFDTA,UPNFDTA,1,"UPNFDTA", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNFDTL,UPNFDTL,UPNFDTL,UPNFDTL,UPNFDTL,1,"UPNFDTL", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNFDTS,UPNFDTS,UPNFDTS,UPNFDTS,UPNFDTS,1,"UPNFDTS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNFDTY,UPNFDTY,UPNFDTY,UPNFDTY,UPNFDTY,1,"UPNFDTY", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNGGRWE,UPNGGRWE,UPNGGRWE,UPNGGRWE,UPNGGRWE,1,"UPNGGRWE", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNGGRWT,UPNGGRWT,UPNGGRWT,UPNGGRWT,UPNGGRWT,1,"UPNGGRWT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNGRG,UPNGRG,UPNGRG,UPNGRG,UPNGRG,1,"UPNGRG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNIPRM,UPNIPRM,UPNIPRM,UPNIPRM,UPNIPRM,1,"UPNIPRM", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNIRTEA,UPNIRTEA,UPNIRTEA,UPNIRTEA,UPNIRTEA,1,"UPNIRTEA", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNIRTEL,UPNIRTEL,UPNIRTEL,UPNIRTEL,UPNIRTEL,1,"UPNIRTEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNIRTES,UPNIRTES,UPNIRTES,UPNIRTES,UPNIRTES,1,"UPNIRTES", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNIRTEY,UPNIRTEY,UPNIRTEY,UPNIRTEY,UPNIRTEY,1,"UPNIRTEY", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNLLF,UPNLLF,UPNLLF,UPNLLF,UPNLLF,1,"UPNLLF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNRPRM,UPNRPRM,UPNRPRM,UPNRPRM,UPNRPRM,1,"UPNRPRM", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNRRTEA,UPNRRTEA,UPNRRTEA,UPNRRTEA,UPNRRTEA,1,"UPNRRTEA", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNRRTEL,UPNRRTEL,UPNRRTEL,UPNRRTEL,UPNRRTEL,1,"UPNRRTEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNRRTES,UPNRRTES,UPNRRTES,UPNRRTES,UPNRRTES,1,"UPNRRTES", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNRRTEY,UPNRRTEY,UPNRRTEY,UPNRRTEY,UPNRRTEY,1,"UPNRRTEY", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPNUCGRW,UPNUCGRW,UPNUCGRW,UPNUCGRW,UPNUCGRW,1,"UPNUCGRW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPOVBDRT,UPOVBDRT,UPOVBDRT,UPOVBDRT,UPOVBDRT,1,"UPOVBDRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPOVBDSW,UPOVBDSW,UPOVBDSW,UPOVBDSW,UPOVBDSW,1,"UPOVBDSW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPOVBDSY,UPOVBDSY,UPOVBDSY,UPOVBDSY,UPOVBDSY,1,"UPOVBDSY", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPOVR,UPOVR,UPOVR,UPOVR,UPOVR,1,"UPOVR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPOVHR,UPOVHR,UPOVHR,UPOVHR,UPOVHR,2,"UPOVHR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMYR,        1,             1,             1,             1,             1,  &
          "PlantType",  "MNUMYR",      "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPOVRBLD,UPOVRBLD,UPOVRBLD,UPOVRBLD,UPOVRBLD,1,"UPOVRBLD", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPOVRBLD,UPOVRBLD,UPOVRBLD,UPOVRBLD,UPOVRBLD,1,"UPOVRBLD_pass", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPP2LIM,UPP2LIM,UPP2LIM,UPP2LIM,UPP2LIM,2,"UPP2LIM", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_FPH, MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYRF",    "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPPCEF,UPPCEF,UPPCEF,UPPCEF,UPPCEF,1,"UPPCEF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     1,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPPCFB,UPPCFB,UPPCFB,UPPCFB,UPPCFB,2,"UPPCFB", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     2,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "OwnerType", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPPFL,UPPFL,UPPFL,UPPFL,UPPFL,3,"UPPFL", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_NFL,     MAXNFR,        ECP_D_XPH,     1,             1,             1,             1,  &
          "ECPFuelType", "FuelRegion", "ExplicitPlanningHorizon", "", "",           "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPPFLN,UPPFLN,UPPFLN,UPPFLN,UPPFLN,3,"UPPFLN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_NFL,     MNUMNR,        ECP_D_XPH,     1,             1,             1,             1,  &
          "ECPFuelType", "SupplyRegion", "ExplicitPlanningHorizon", "", "",         "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPPHRT0,UPPHRT0,UPPHRT0,UPPHRT0,UPPHRT0,1,"UPPHRT0", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     1,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPPHRTN,UPPHRTN,UPPHRTN,UPPHRTN,UPPHRTN,1,"UPPHRTN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     1,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPPLYR,UPPLYR,UPPLYR,UPPLYR,UPPLYR,1,"UPPLYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPPMRT,UPPMRT,UPPMRT,UPPMRT,UPPMRT,1,"UPPMRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPPSEF,UPPSEF,UPPSEF,UPPSEF,UPPSEF,1,"UPPSEF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     1,             1,             1,             1,             1,             1,  &
          "DispatchableECP", "",       "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRETCHG,UPRETCHG,UPRETCHG,UPRETCHG,UPRETCHG,1,"UPRETCHG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRETFHU,UPRETFHU,UPRETFHU,UPRETFHU,UPRETFHU,1,"UPRETFHU", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRETRAT,UPRETRAT,UPRETRAT,UPRETRAT,UPRETRAT,1,"UPRETRAT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRETNHU,UPRETNHU,UPRETNHU,UPRETNHU,UPRETNHU,1,"UPRETNHU", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRETRT0,UPRETRT0,UPRETRT0,UPRETRT0,UPRETRT0,1,"UPRETRT0", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWBAS,UPRNWBAS,UPRNWBAS,UPRNWBAS,UPRNWBAS,1,"UPRNWBAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWBND,UPRNWBND,UPRNWBND,UPRNWBND,UPRNWBND,1,"UPRNWBND", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
          "MNUMYRX",    "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWBNDR,UPRNWBNDR,UPRNWBNDR,UPRNWBNDR,UPRNWBNDR,2,"UPRNWBNDR", &
          1,                1,             1,             1,             1,             1,             1,  &
          MNUMYR+ECP_D_XPH, MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYRX",    "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWBNK,UPRNWBNK,UPRNWBNK,UPRNWBNK,UPRNWBNK,1,"UPRNWBNK", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWCAP,UPRNWCAP,UPRNWCAP,UPRNWCAP,UPRNWCAP,1,"UPRNWCAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWCAPR,UPRNWCAPR,UPRNWCAPR,UPRNWCAPR,UPRNWCAPR,1,"UPRNWCAPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWCAS,UPRNWCAS,UPRNWCAS,UPRNWCAS,UPRNWCAS,1,"UPRNWCAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWCASR,UPRNWCASR,UPRNWCASR,UPRNWCASR,UPRNWCASR,1,"UPRNWCASR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWCGR,UPRNWCGR,UPRNWCGR,UPRNWCGR,UPRNWCGR,1,"UPRNWCGR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWCOG,UPRNWCOG,UPRNWCOG,UPRNWCOG,UPRNWCOG,1,"UPRNWCOG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWEXG,UPRNWEXG,UPRNWEXG,UPRNWEXG,UPRNWEXG,1,"UPRNWEXG", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWEXGR,UPRNWEXGR,UPRNWEXGR,UPRNWEXGR,UPRNWEXGR,2,"UPRNWEXGR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWLEV,UPRNWLEV,UPRNWLEV,UPRNWLEV,UPRNWLEV,1,"UPRNWLEV", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWRGN,UPRNWRGN,UPRNWRGN,UPRNWRGN,UPRNWRGN,1,"UPRNWRGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWCOGR,UPRNWCOGR,UPRNWCOGR,UPRNWCOGR,UPRNWCOGR,1,"UPRNWCOGR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWRPS,UPRNWRPS,UPRNWRPS,UPRNWRPS,UPRNWRPS,1,"UPRNWRPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWRPSR,UPRNWRPSR,UPRNWRPSR,UPRNWRPSR,UPRNWRPSR,1,"UPRNWRPSR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWSHR,UPRNWSHR,UPRNWSHR,UPRNWSHR,UPRNWSHR,1,"UPRNWSHR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWSHRR,UPRNWSHRR,UPRNWSHRR,UPRNWSHRR,UPRNWSHRR,2,"UPRNWSHRR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWSUN,UPRNWSUN,UPRNWSUN,UPRNWSUN,UPRNWSUN,1,"UPRNWSUN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRNWSUNR,UPRNWSUNR,UPRNWSUNR,UPRNWSUNR,UPRNWSUNR,1,"UPRNWSUNR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRSK,UPRSK,UPRSK,UPRSK,UPRSK,1,"UPRSK", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPRTLT,UPRTLT,UPRTLT,UPRTLT,UPRTLT,1,"UPRTLT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSCLT,UPSCLT,UPSCLT,UPSCLT,UPSCLT,1,"UPSCLT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSCPR,UPSCPR,UPSCPR,UPSCPR,UPSCPR,1,"UPSCPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_LCP,     1,             1,             1,             1,             1,             1,  &
          "ConstructionPeriod", "",    "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSELF,UPSELF,UPSELF,UPSELF,UPSELF,1,"UPSELF", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSEQBLM,UPSEQBLM,UPSEQBLM,UPSEQBLM,UPSEQBLM,1,"UPSEQBLM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSEQBLM,UPSEQBLM,UPSEQBLM,UPSEQBLM,UPSEQBLM,1,"UPSEQBLM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSEQBYR,UPSEQBYR,UPSEQBYR,UPSEQBYR,UPSEQBYR,1,"UPSEQBYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSEQCAS,UPSEQCAS,UPSEQCAS,UPSEQCAS,UPSEQCAS,1,"UPSEQCAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSEQLIM,UPSEQLIM,UPSEQLIM,UPSEQLIM,UPSEQLIM,1,"UPSEQLIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSEQNYR,UPSEQNYR,UPSEQNYR,UPSEQNYR,UPSEQNYR,1,"UPSEQNYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSQMAX,UPSQMAX,UPSQMAX,UPSQMAX,UPSQMAX,1,"UPSQMAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSRMAX,UPSRMAX,UPSRMAX,UPSRMAX,UPSRMAX,1,"UPSRMAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSTXLF,UPSTXLF,UPSTXLF,UPSTXLF,UPSTXLF,1,"UPSTXLF", &
          1,             1,             1,             1,             1,             1,             1,  &
          2,             1,             1,             1,             1,             1,             1,  &
          "OwnerType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSTXYR,UPSTXYR,UPSTXYR,UPSTXYR,UPSTXYR,1,"UPSTXYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSTYR,UPSTYR,UPSTYR,UPSTYR,UPSTYR,1,"UPSTYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSUBCAS,UPSUBCAS,UPSUBCAS,UPSUBCAS,UPSUBCAS,1,"UPSUBCAS", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSUBLIM,UPSUBLIM,UPSUBLIM,UPSUBLIM,UPSUBLIM,1,"UPSUBLIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPSYEAR,UPSYEAR,UPSYEAR,UPSYEAR,UPSYEAR,1,"UPSYEAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPTCRT,UPTCRT,UPTCRT,UPTCRT,UPTCRT,1,"UPTCRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPTOPR,UPTOPR,UPTOPR,UPTOPR,UPTOPR,1,"UPTOPR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPTTYP,UPTTYP,UPTTYP,UPTTYP,UPTTYP,1,"UPTTYP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPTXLF,UPTXLF,UPTXLF,UPTXLF,UPTXLF,1,"UPTXLF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPTXRT,UPTXRT,UPTXRT,UPTXRT,UPTXRT,1,"UPTXRT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPUCLF,UPUCLF,UPUCLF,UPUCLF,UPUCLF,1,"UPUCLF", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPURELN,UPURELN,UPURELN,UPURELN,UPURELN,2,"UPURELN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPVTYP,UPVTYP,UPVTYP,UPVTYP,UPVTYP,1,"UPVTYP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
          "PlantType",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPWDCFN,UPWDCFN,UPWDCFN,UPWDCFN,UPWDCFN,2,"UPWDCFN", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPWDCFN,UPWDCFN,UPWDCFN,UPWDCFN,UPWDCFN,2,"UPWDCFN_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPWDCFR,UPWDCFR,UPWDCFR,UPWDCFR,UPWDCFR,2,"UPWDCFR", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     NDREG,         1,             1,             1,             1,             1,  &
          "DispatchableECP", "CoalDemandRegion", "",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPWDCFR,UPWDCFR,UPWDCFR,UPWDCFR,UPWDCFR,2,"UPWDCFR_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_DSP,     NDREG,         1,             1,             1,             1,             1,  &
          "DispatchableECP", "CoalDemandRegion", "",  "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UPXRGN,UPXRGN,UPXRGN,UPXRGN,UPXRGN,2,"UPXRGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "SupplyRegion", "",    "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UQCOAL,UQCOAL,UQCOAL,UQCOAL,UQCOAL,3,"UQCOAL", &
          1,             1,             1,             1,             1,             1,             1,  &
          NUTSEC,        NDREG,         MNUMYR,        1,             1,             1,             1,  &
          "UtilitySector", "CoalDemandRegion", "MNUMYR", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UQHYFAC,UQHYFAC,UQHYFAC,UQHYFAC,UQHYFAC,2,"UQHYFAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
          "MNUMYR",     "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URCARWT,URCARWT,URCARWT,URCARWT,URCARWT,1,"URCARWT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URCARWT,URCARWT,URCARWT,URCARWT,URCARWT,1,"URCARWT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URELPRC,URELPRC,URELPRC,URELPRC,URELPRC,2,"URELPRC", &
          1,             1,             1,             1,             1,             1,             1,  &
          3,             MNUMNR,        1,             1,             1,             1,             1,  &
          "Three",      "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URELPRC,URELPRC,URELPRC,URELPRC,URELPRC,2,"URELPRC_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          3,             MNUMNR,        1,             1,             1,             1,             1,  &
          "Three",      "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URELRSV,URELRSV,URELRSV,URELRSV,URELRSV,2,"URELRSV", &
          1,             1,             1,             1,             1,             1,             1,  &
          3,             MNUMNR,        1,             1,             1,             1,             1,  &
          "Three",      "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URELRSV,URELRSV,URELRSV,URELRSV,URELRSV,2,"URELRSV_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          3,             MNUMNR,        1,             1,             1,             1,             1,  &
          "Three",      "SupplyRegion", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URELTGT,URELTGT,URELTGT,URELTGT,URELTGT,1,"URELTGT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URELTGT,URELTGT,URELTGT,URELTGT,URELTGT,1,"URELTGT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UREV_NYR,UREV_NYR,UREV_NYR,UREV_NYR,UREV_NYR,1,"UREV_NYR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URG_ZECMAX,URG_ZECMAX,URG_ZECMAX,URG_ZECMAX,URG_ZECMAX,1,"URG_ZECMAX", &
          1,             1,             1,             1,             1,             1,             1,  &
          49,            1,             1,             1,             1,             1,             1,  &
          "FortyNine",  "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URPSCGG,URPSCGG,URPSCGG,URPSCGG,URPSCGG,2,"URPSCGG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(URPSCGO,URPSCGO,URPSCGO,URPSCGO,URPSCGO,2,"URPSCGO", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USO2_BA_CRD,USO2_BA_CRD,USO2_BA_CRD,USO2_BA_CRD,USO2_BA_CRD,1,"USO2_BA_CRD", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USO2_BA_WGT,USO2_BA_WGT,USO2_BA_WGT,USO2_BA_WGT,USO2_BA_WGT,1,"USO2_BA_WGT", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_BACT,USW_BACT,USW_BACT,USW_BACT,USW_BACT,1,"USW_BACT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_CAMR,USW_CAMR,USW_CAMR,USW_CAMR,USW_CAMR,1,"USW_CAMR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_CAR,USW_CAR,USW_CAR,USW_CAR,USW_CAR,1,"USW_CAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_CLGRP,USW_CLGRP,USW_CLGRP,USW_CLGRP,USW_CLGRP,1,"USW_CLGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_DBS,USW_DBS,USW_DBS,USW_DBS,USW_DBS,1,"USW_DBS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_DSI,USW_DSI,USW_DSI,USW_DSI,USW_DSI,1,"USW_DSI", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_ERET,USW_ERET,USW_ERET,USW_ERET,USW_ERET,1,"USW_ERET", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_HG,USW_HG,USW_HG,USW_HG,USW_HG,1,"USW_HG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_HYD,USW_HYD,USW_HYD,USW_HYD,USW_HYD,1,"USW_HYD", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_MACT,USW_MACT,USW_MACT,USW_MACT,USW_MACT,1,"USW_MACT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_RNW,USW_RNW,USW_RNW,USW_RNW,USW_RNW,1,"USW_RNW", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_RTRSK,USW_RTRSK,USW_RTRSK,USW_RTRSK,USW_RTRSK,1,"USW_RTRSK", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_WACC,USW_WACC,USW_WACC,USW_WACC,USW_WACC,1,"USW_WACC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USW_ZECSUB,USW_ZECSUB,USW_ZECSUB,USW_ZECSUB,USW_ZECSUB,1,"USW_ZECSUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(USYEAR,USYEAR,USYEAR,USYEAR,USYEAR,1,"USYEAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UTCO2PEM,UTCO2PEM,UTCO2PEM,UTCO2PEM,UTCO2PEM,2,"UTCO2PEM", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             MNUMYR,        1,             1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "MNUMYR", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UTCO2PEM,UTCO2PEM,UTCO2PEM,UTCO2PEM,UTCO2PEM,2,"UTCO2PEM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          8,             MNUMYR,        1,             1,             1,             1,             1,  &
          "OGSMRegionEX_ALTTo", "MNUMYR", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UTRELADJ,UTRELADJ,UTRELADJ,UTRELADJ,UTRELADJ,2,"UTRELADJ", &
          1,             1,                1,             1,             1,             1,             1,  &
          MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "MNUMYRX", "",         "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UYR_CAR,UYR_CAR,UYR_CAR,UYR_CAR,UYR_CAR,1,"UYR_CAR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UYR_CARWE,UYR_CARWE,UYR_CARWE,UYR_CARWE,UYR_CARWE,1,"UYR_CARWE", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UYR_CARWE,UYR_CARWE,UYR_CARWE,UYR_CARWE,UYR_CARWE,1,"UYR_CARWE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UYR_CARWS,UYR_CARWS,UYR_CARWS,UYR_CARWS,UYR_CARWS,1,"UYR_CARWS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UYR_NOCAIR,UYR_NOCAIR,UYR_NOCAIR,UYR_NOCAIR,UYR_NOCAIR,1,"UYR_NOCAIR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UYR_RSCAIR,UYR_RSCAIR,UYR_RSCAIR,UYR_RSCAIR,UYR_RSCAIR,1,"UYR_RSCAIR", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UYR_STEO,UYR_STEO,UYR_STEO,UYR_STEO,UYR_STEO,1,"UYR_STEO", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(UYR_ACE,UYR_ACE,UYR_ACE,UYR_ACE,UYR_ACE,1,"UYR_ACE", &
          1,             1,             1,             1,             1,             1,             1,  &
          49,            1,             1,             1,             1,             1,             1,  &
          "FortyNine",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(W_INT,W_INT,W_INT,W_INT,W_INT,2,"W_INT", &
          1,             1,             1,             1,             1,             1,             1,  &
          WPLT_D_RGN,    WPLT_D_GRP,    1,             1,             1,             1,             1,  &
          "PlantReg",   "PlantGrpReg", "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(W_INT,W_INT,W_INT,W_INT,W_INT,2,"W_INT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          WPLT_D_RGN,    WPLT_D_GRP,    1,             1,             1,             1,             1,  &
          "PlantReg",   "PlantGrpReg", "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WCMFSH,WCMFSH,WCMFSH,WCMFSH,WCMFSH,2,"WCMFSH", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     EFD_D_FPP,     1,             1,             1,             1,             1,  &
          "EFDPlantType", "FuelsPerPlant", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WDCFHUR,WDCFHUR,WDCFHUR,WDCFHUR,WDCFHUR,1,"WDCFHUR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WDCFSUB,WDCFSUB,WDCFSUB,WDCFSUB,WDCFSUB,1,"WDCFSUB", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WDSUP_AVL,WDSUP_AVL,WDSUP_AVL,WDSUP_AVL,WDSUP_AVL,1,"WDSUP_AVL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMFS,        1,             1,             1,             1,             1,             1,  &
          "BiomassType", "",           "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WDSUP_P,WDSUP_P,WDSUP_P,WDSUP_P,WDSUP_P,4,"WDSUP_P", &
          1,             1,             1,                1,             1,             1,             1,  &
          NWDSUPP,       NDREG,         MNUMYR+ECP_D_FPH, MNUMFS,        1,             1,             1,  &
          "BiomassProductionStep", "CoalDemandRegion", "MNUMYRF", "BiomassType", "", "",           "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WDSUP_Q,WDSUP_Q,WDSUP_Q,WDSUP_Q,WDSUP_Q,4,"WDSUP_Q", &
          1,             1,             1,                1,             1,             1,             1,  &
          NWDSUPQ,       NDREG,         MNUMYR+ECP_D_FPH, MNUMFS,        1,             1,             1,  &
          "BiomassProductionStep", "CoalDemandRegion", "MNUMYRF", "BiomassType", "", "",           "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WF_CAP_ADJ,WF_CAP_ADJ,WF_CAP_ADJ,WF_CAP_ADJ,WF_CAP_ADJ,1,"WF_CAP_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WFLTP,WFLTP,WFLTP,WFLTP,WFLTP,2,"WFLTP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CAP,     EFD_D_FPP,     1,             1,             1,             1,             1,  &
          "EFDPlantType", "FuelsPerPlant", "",        "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WGRP_NXT,WGRP_NXT,WGRP_NXT,WGRP_NXT,WGRP_NXT,1,"WGRP_NXT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WGRP_NXT,WGRP_NXT,WGRP_NXT,WGRP_NXT,WGRP_NXT,1,"WGRP_NXT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WHRIGCC,WHRIGCC,WHRIGCC,WHRIGCC,WHRIGCC,1,"WHRIGCC", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIB1,WIB1,WIB1,WIB1,WIB1,1,"WIB1", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIB2,WIB2,WIB2,WIB2,WIB2,1,"WIB2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIB3,WIB3,WIB3,WIB3,WIB3,1,"WIB3", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIB4,WIB4,WIB4,WIB4,WIB4,1,"WIB4", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIB5,WIB5,WIB5,WIB5,WIB5,1,"WIB5", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIB6,WIB6,WIB6,WIB6,WIB6,1,"WIB6", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIB7,WIB7,WIB7,WIB7,WIB7,1,"WIB7", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIB8,WIB8,WIB8,WIB8,WIB8,1,"WIB8", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIC1,WIC1,WIC1,WIC1,WIC1,1,"WIC1", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIC2,WIC2,WIC2,WIC2,WIC2,1,"WIC2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIC3,WIC3,WIC3,WIC3,WIC3,1,"WIC3", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIC4,WIC4,WIC4,WIC4,WIC4,1,"WIC4", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIC5,WIC5,WIC5,WIC5,WIC5,1,"WIC5", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIC6,WIC6,WIC6,WIC6,WIC6,1,"WIC6", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIC7,WIC7,WIC7,WIC7,WIC7,1,"WIC7", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIC8,WIC8,WIC8,WIC8,WIC8,1,"WIC8", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIC9,WIC9,WIC9,WIC9,WIC9,1,"WIC9", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WICX,WICX,WICX,WICX,WICX,1,"WICX", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WICY,WICY,WICY,WICY,WICY,1,"WICY", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WICZ,WICZ,WICZ,WICZ,WICZ,1,"WICZ", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIH1,WIH1,WIH1,WIH1,WIH1,1,"WIH1", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIH2,WIH2,WIH2,WIH2,WIH2,1,"WIH2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIH3,WIH3,WIH3,WIH3,WIH3,1,"WIH3", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIH4,WIH4,WIH4,WIH4,WIH4,1,"WIH4", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIH5,WIH5,WIH5,WIH5,WIH5,1,"WIH5", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIH6,WIH6,WIH6,WIH6,WIH6,1,"WIH6", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIH7,WIH7,WIH7,WIH7,WIH7,1,"WIH7", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIH8,WIH8,WIH8,WIH8,WIH8,1,"WIH8", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIH9,WIH9,WIH9,WIH9,WIH9,1,"WIH9", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIHA,WIHA,WIHA,WIHA,WIHA,1,"WIHA", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIHB,WIHB,WIHB,WIHB,WIHB,1,"WIHB", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIHC,WIHC,WIHC,WIHC,WIHC,1,"WIHC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIPC,WIPC,WIPC,WIPC,WIPC,1,"WIPC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIOC,WIOC,WIOC,WIOC,WIOC,1,"WIOC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIIG,WIIG,WIIG,WIIG,WIIG,1,"WIIG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WII2,WII2,WII2,WII2,WII2,1,"WII2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIPQ,WIPQ,WIPQ,WIPQ,WIPQ,1,"WIPQ", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIIS,WIIS,WIIS,WIIS,WIIS,1,"WIIS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WING,WING,WING,WING,WING,1,"WING", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIST,WIST,WIST,WIST,WIST,1,"WIST", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIET,WIET,WIET,WIET,WIET,1,"WIET", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIIC,WIIC,WIIC,WIIC,WIIC,1,"WIIC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WICT,WICT,WICT,WICT,WICT,1,"WICT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIT2,WIT2,WIT2,WIT2,WIT2,1,"WIT2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIAT,WIAT,WIAT,WIAT,WIAT,1,"WIAT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIEC,WIEC,WIEC,WIEC,WIEC,1,"WIEC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WICC,WICC,WICC,WICC,WICC,1,"WICC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIAC,WIAC,WIAC,WIAC,WIAC,1,"WIAC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIA2,WIA2,WIA2,WIA2,WIA2,1,"WIA2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WICS,WICS,WICS,WICS,WICS,1,"WICS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIFC,WIFC,WIFC,WIFC,WIFC,1,"WIFC", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WICN,WICN,WICN,WICN,WICN,1,"WICN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIAN,WIAN,WIAN,WIAN,WIAN,1,"WIAN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WISM,WISM,WISM,WISM,WISM,1,"WISM", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIGN,WIGN,WIGN,WIGN,WIGN,1,"WIGN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIWD,WIWD,WIWD,WIWD,WIWD,1,"WIWD", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIBI,WIBI,WIBI,WIBI,WIBI,1,"WIBI", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIGT,WIGT,WIGT,WIGT,WIGT,1,"WIGT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIAG,WIAG,WIAG,WIAG,WIAG,1,"WIAG", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIMS,WIMS,WIMS,WIMS,WIMS,1,"WIMS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIHY,WIHY,WIHY,WIHY,WIHY,1,"WIHY", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIHO,WIHO,WIHO,WIHO,WIHO,1,"WIHO", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIHI,WIHI,WIHI,WIHI,WIHI,1,"WIHI", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WITI,WITI,WITI,WITI,WITI,1,"WITI", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIPS,WIPS,WIPS,WIPS,WIPS,1,"WIPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIP2,WIP2,WIP2,WIP2,WIP2,1,"WIP2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WISQ,WISQ,WISQ,WISQ,WISQ,1,"WISQ", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIDS,WIDS,WIDS,WIDS,WIDS,1,"WIDS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIOS,WIOS,WIOS,WIOS,WIOS,1,"WIOS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIWN,WIWN,WIWN,WIWN,WIWN,1,"WIWN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIWL,WIWL,WIWL,WIWL,WIWL,1,"WIWL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIWF,WIWF,WIWF,WIWF,WIWF,1,"WIWF", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WISO,WISO,WISO,WISO,WISO,1,"WISO", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WISS,WISS,WISS,WISS,WISS,1,"WISS", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIS2,WIS2,WIS2,WIS2,WIS2,1,"WIS2", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIPV,WIPV,WIPV,WIPV,WIPV,1,"WIPV", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIPT,WIPT,WIPT,WIPT,WIPT,1,"WIPT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIIN,WIIN,WIIN,WIIN,WIIN,1,"WIIN", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIDB,WIDB,WIDB,WIDB,WIDB,1,"WIDB", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WIDP,WIDP,WIDP,WIDP,WIDP,1,"WIDP", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WL_CAP_ADJ,WL_CAP_ADJ,WL_CAP_ADJ,WL_CAP_ADJ,WL_CAP_ADJ,1,"WL_CAP_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WMFHYEL,WMFHYEL,WMFHYEL,WMFHYEL,WMFHYEL,4,"WMFHYEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        MSPTMX,        12,            MNUMYR,        1,             1,             1,  &
          "SupplyRegion_ALT1", "SupplyStep", "Months", "MNUMYR",     "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WN_CAP_ADJ,WN_CAP_ADJ,WN_CAP_ADJ,WN_CAP_ADJ,WN_CAP_ADJ,1,"WN_CAP_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WN_NEW_ADJ,WN_NEW_ADJ,WN_NEW_ADJ,WN_NEW_ADJ,WN_NEW_ADJ,1,"WN_NEW_ADJ", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        1,             1,             1,             1,             1,             1,  &
          "SupplyRegion_ALT1", "",     "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WNEWGRP,WNEWGRP,WNEWGRP,WNEWGRP,WNEWGRP,4,"WNEWGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          WPLT_D_RGN,    EFD_D_CAP,     EFD_D_OWN,     EFD_D_MFRG+1,  1,             1,             1,  &
          "PlantReg",   "EFDPlantType", "EFDOwnerShipType", "FuelRegion", "",       "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WNEWGRP,WNEWGRP,WNEWGRP,WNEWGRP,WNEWGRP,4,"WNEWGRP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          WPLT_D_RGN,    EFD_D_CAP,     EFD_D_OWN,     EFD_D_MFRG+1,  1,             1,             1,  &
          "PlantReg",   "EFDPlantType", "EFDOwnerShipType", "FuelRegion", "",       "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WNGRPS,WNGRPS,WNGRPS,WNGRPS,WNGRPS,1,"WNGRPS", &
          1,             1,             1,             1,             1,             1,             1,  &
          WPLT_D_RGN,    1,             1,             1,             1,             1,             1,  &
          "PlantReg",   "",            "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WNGRPS,WNGRPS,WNGRPS,WNGRPS,WNGRPS,1,"WNGRPS_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          WPLT_D_RGN,    1,             1,             1,             1,             1,             1,  &
          "PlantReg",   "",            "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WNXT_SGRP,WNXT_SGRP,WNXT_SGRP,WNXT_SGRP,WNXT_SGRP,1,"WNXT_SGRP", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WNXT_SGRP,WNXT_SGRP,WNXT_SGRP,WNXT_SGRP,WNXT_SGRP,1,"WNXT_SGRP_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WPTTYP,WPTTYP,WPTTYP,WPTTYP,WPTTYP,2,"WPTTYP", &
          1,             1,             1,             1,             1,             1,             1,  &
          ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
          "PlantType",  "SupplyRegion", "",           "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WREC_NXT,WREC_NXT,WREC_NXT,WREC_NXT,WREC_NXT,1,"WREC_NXT", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WREC_NXT,WREC_NXT,WREC_NXT,WREC_NXT,WREC_NXT,1,"WREC_NXT_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WSFWFEL_CF,WSFWFEL_CF,WSFWFEL_CF,WSFWFEL_CF,WSFWFEL_CF,5,"WSFWFEL_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumnr,        mnumyr,        3,             12,            24,            1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "Three",     "Months",      "HoursADay",   "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WSFWIEL_CF,WSFWIEL_CF,WSFWIEL_CF,WSFWIEL_CF,WSFWIEL_CF,5,"WSFWIEL_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumnr,        mnumyr,        3,             12,            24,            1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "Three",     "Months",      "HoursADay",   "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WSFWLEL_CF,WSFWLEL_CF,WSFWLEL_CF,WSFWLEL_CF,WSFWLEL_CF,5,"WSFWLEL_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumnr,        mnumyr,        3,             12,            24,            1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "Three",     "Months",      "HoursADay",   "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WSSPTEL_CF,WSSPTEL_CF,WSSPTEL_CF,WSSPTEL_CF,WSSPTEL_CF,5,"WSSPTEL_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumnr,        mnumyr,        3,             12,            24,            1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "Three",     "Months",      "HoursADay",   "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WSSPVEL_CF,WSSPVEL_CF,WSSPVEL_CF,WSSPVEL_CF,WSSPVEL_CF,5,"WSSPVEL_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumnr,        mnumyr,        3,             12,            24,            1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "Three",     "Months",      "HoursADay",   "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WSSSTEL_CF,WSSSTEL_CF,WSSSTEL_CF,WSSSTEL_CF,WSSSTEL_CF,5,"WSSSTEL_CF", &
          1,             1,             1,             1,             1,             1,             1,  &
          mnumnr,        mnumyr,        3,             12,            24,            1,             1,  &
          "SupplyRegion_ALT1", "MNUMYR", "Three",     "Months",      "HoursADay",   "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WSTBMEL,WSTBMEL,WSTBMEL,WSTBMEL,WSTBMEL,1,"WSTBMEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          SCALAR,        1,             1,             1,             1,             1,             1,  &
          "SCALARSet",  "",            "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WTYPE,WTYPE,WTYPE,WTYPE,WTYPE,1,"WTYPE", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(WTYPE,WTYPE,WTYPE,WTYPE,WTYPE,1,"WTYPE_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
          "PlantGroup", "",            "",            "",            "",            "",            "",  &
          "I2",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_CAR_YR,XCL_CAR_YR,XCL_CAR_YR,XCL_CAR_YR,XCL_CAR_YR,2,"XCL_CAR_YR", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_HG_YR,XCL_HG_YR,XCL_HG_YR,XCL_HG_YR,XCL_HG_YR,2,"XCL_HG_YR", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_IMPORT,XCL_IMPORT,XCL_IMPORT,XCL_IMPORT,XCL_IMPORT,2,"XCL_IMPORT", &
          1,             1,             1,             1,             1,             1,             1,  &
          NDREG,         MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalDemandRegion", "MNUMYR", "",           "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_MAX_INCR,XCL_MAX_INCR,XCL_MAX_INCR,XCL_MAX_INCR,XCL_MAX_INCR,2,"XCL_MAX_INCR", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "MNUMYR", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_OTHER,XCL_OTHER,XCL_OTHER,XCL_OTHER,XCL_OTHER,2,"XCL_OTHER", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_PCAP,XCL_PCAP,XCL_PCAP,XCL_PCAP,XCL_PCAP,2,"XCL_PCAP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "MNUMYR", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_PLIM,XCL_PLIM,XCL_PLIM,XCL_PLIM,XCL_PLIM,2,"XCL_PLIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "MNUMYR", "",        "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_QECP,XCL_QECP,XCL_QECP,XCL_QECP,XCL_QECP,3,"XCL_QECP", &
          1,             0,             1,             1,             1,             1,             1,  &
          MX_NCOALS,     ECP_D_FPH,     MNUMYR,        1,             1,             1,             1,  &
          "CoalSupplyCurve_Dom", "PlanningHorizon", "MNUMYR", "",    "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_SO2_YR,XCL_SO2_YR,XCL_SO2_YR,XCL_SO2_YR,XCL_SO2_YR,2,"XCL_SO2_YR", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, MNUMYR,        1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "MNUMYR", "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_STOCK,XCL_STOCK,XCL_STOCK,XCL_STOCK,XCL_STOCK,1,"XCL_STOCK", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMYR,        1,             1,             1,             1,             1,             1,  &
          "MNUMYR",     "",            "",            "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_TRNINDX,XCL_TRNINDX,XCL_TRNINDX,XCL_TRNINDX,XCL_TRNINDX,3,"XCL_TRNINDX", &
          1,             1,             1,             1,             1,             1,             1,  &
          NUTSEC,        MX_NCOALS,     NDREG,         1,             1,             1,             1,  &
          "UtilitySector", "CoalSupplyCurve_Dom", "CoalDemandRegion", "", "",       "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XCL_TYPE,XCL_TYPE,XCL_TYPE,XCL_TYPE,XCL_TYPE,1,"XCL_TYPE", &
          1,                 1,             1,             1,             1,             1,             1,  &
          MX_NCOALS+MX_ISCV, 1,             1,             1,             1,             1,             1,  &
          "CoalSupplyCurve", "",       "",            "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XIT_WOP,XIT_WOP,XIT_WOP,XIT_WOP,XIT_WOP,2,"XIT_WOP", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNXYR,         2,             1,             1,             1,             1,             1,  &
          "ExpectationYrIndex", "OwnerType", "",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XOGWPRNG,XOGWPRNG,XOGWPRNG,XOGWPRNG,XOGWPRNG,2,"XOGWPRNG", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMOR,        MNXYR,         1,             1,             1,             1,             1,  &
          "OGSMReg",    "ExpectationYrIndex", "",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XPDSEL,XPDSEL,XPDSEL,XPDSEL,XPDSEL,2,"XPDSEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNXYR,         1,             1,             1,             1,             1,  &
          "CensusRegion", "ExpectationYrIndex", "",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(XPRSEL,XPRSEL,XPRSEL,XPRSEL,XPRSEL,2,"XPRSEL", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMCR,        MNXYR,         1,             1,             1,             1,             1,  &
          "CensusRegion", "ExpectationYrIndex", "",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(CAN_CST,CAN_CST,CAN_CST,CAN_CST,CAN_CST,3,"CAN_CST", &
          1,             1,             1,             1,             1,             1,             1,  &
          EFD_D_CSS,     MNUMNR,        MNUMYR,        1,             1,             1,             1,  &
          "ImportStep", "CanadianSupplyRegion", "MNUMYR", "",        "",            "",            "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPMSLIM,EPMSLIM,EPMSLIM,EPMSLIM,EPMSLIM,6,"EPMSLIM", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_MXP,     ECP_D_CAP,     ECP_D_DGS,     ECP_D_OWN,     ECP_D_XPH,     1,  &
          "SupplyRegion_ALT1", "ImportExportReg", "PlantType", "DistGenAvoidStep", "OwnerShipType", "ExplicitPlanningHorizon", "",  &
          "R8",iyr,.FALSE.)
       call AIMMS_TransArray_out_ecp(EPMSLIM,EPMSLIM,EPMSLIM,EPMSLIM,EPMSLIM,6,"EPMSLIM_pass", &
          1,             1,             1,             1,             1,             1,             1,  &
          MNUMNR,        ECP_D_MXP,     ECP_D_CAP,     ECP_D_DGS,     ECP_D_OWN,     ECP_D_XPH,     1,  &
          "SupplyRegion_ALT1", "ImportExportReg", "PlantType", "DistGenAvoidStep", "OwnerShipType", "ExplicitPlanningHorizon", "",  &
          "R8",iyr,.FALSE.)
!==================================================================================================================================
!  Transfer the variables stored in DAF files: read the DAF files in region, year, or plant loops
!==================================================================================================================================
do iyr =curiyr,curiyr + ECP_D_XPH - 1
   call geteij(iyr)
         call AIMMS_TransArray_out_ecp(LEAD,LEAD,LEAD,LEAD,LEAD,2,"LEAD", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            ECP$CS2,       iyr,           1,             1,             1,             1,             1,  &
            "CanadianSupplyImport", "MNUMYR", "",       "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(MODYR,MODYR,MODYR,MODYR,MODYR,2,"MODYR", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            ECP$CS2,       iyr,           1,             1,             1,             1,             1,  &
            "CanadianSupplyImport", "MNUMYR", "",       "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(PROJYR,PROJYR,PROJYR,PROJYR,PROJYR,2,"PROJYR", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            ECP$CS2,       iyr,           1,             1,             1,             1,             1,  &
            "CanadianSupplyImport", "MNUMYR", "",       "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(UCI$CAP,UCI$CAP,UCI$CAP,UCI$CAP,UCI$CAP,2,"UCI_CAP", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            ECP$CS2,       iyr,           1,             1,             1,             1,             1,  &
            "CanadianSupplyImport", "MNUMYR", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(UCI$CFC,UCI$CFC,UCI$CFC,UCI$CFC,UCI$CFC,2,"UCI_CFC", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            ECP$CS2,       iyr,           1,             1,             1,             1,             1,  &
            "CanadianSupplyImport", "MNUMYR", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(UCI$MWH,UCI$MWH,UCI$MWH,UCI$MWH,UCI$MWH,2,"UCI_MWH", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            ECP$CS2,       iyr,           1,             1,             1,             1,             1,  &
            "CanadianSupplyImport", "MNUMYR", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(UCI$RGN,UCI$RGN,UCI$RGN,UCI$RGN,UCI$RGN,2,"UCI_RGN", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            ECP$CS2,       iyr,           1,             1,             1,             1,             1,  &
            "CanadianSupplyImport", "MNUMYR", "",       "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(UCI$RGS,UCI$RGS,UCI$RGS,UCI$RGS,UCI$RGS,3,"UCI_RGS", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            ECP$CS2,       ECP$CS3,       iyr,           1,             1,             1,             1,  &
            "CanadianSupplyImport", "CanadianSupplyImportRegion", "MNUMYR", "", "",   "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(UEITAJ_ECP,UEITAJ_ECP,UEITAJ_ECP,UEITAJ_ECP,UEITAJ_ECP,3,"UEITAJ_ECP", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            ECP_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(UEITAJ_EFD,UEITAJ_EFD,UEITAJ_EFD,UEITAJ_EFD,UEITAJ_EFD,3,"UEITAJ_EFD", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            EFD_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(UCANBLD,UCANBLD,UCANBLD,UCANBLD,UCANBLD,2,"UCANBLD", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            MNUMNR,        iyr,           1,             1,             1,             1,             1,  &
            "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(UCANBLD,UCANBLD,UCANBLD,UCANBLD,UCANBLD,2,"UCANBLD_pass", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            MNUMNR,        iyr,           1,             1,             1,             1,             1,  &
            "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(URNCSTEX_ECP,URNCSTEX_ECP,URNCSTEX_ECP,URNCSTEX_ECP,URNCSTEX_ECP,3,"URNCSTEX_ECP", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            ECP_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(URNCSTEX_ECP,URNCSTEX_ECP,URNCSTEX_ECP,URNCSTEX_ECP,URNCSTEX_ECP,3,"URNCSTEX_ECP_pass", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            ECP_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,3,"URNCSTEX_EFD", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            EFD_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,3,"URNCSTEX_EFD_pass", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            EFD_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(URNCSTIM_ECP,URNCSTIM_ECP,URNCSTIM_ECP,URNCSTIM_ECP,URNCSTIM_ECP,3,"URNCSTIM_ECP", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            ECP_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(URNCSTIM_ECP,URNCSTIM_ECP,URNCSTIM_ECP,URNCSTIM_ECP,URNCSTIM_ECP,3,"URNCSTIM_ECP_pass", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            ECP_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,3,"URNCSTIM_EFD", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            EFD_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,3,"URNCSTIM_EFD_pass", &
            1,             1,             iyr,           1,             1,             1,             1,  &
            EFD_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
            "Season",     "SupplyRegion", "MNUMYR",     "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(ZTIMPF,ZTIMPF,ZTIMPF,ZTIMPF,ZTIMPF,2,"ZTIMPF", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            MNUMNR,        iyr,           1,             1,             1,             1,             1,  &
            "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(ZTIMPF,ZTIMPF,ZTIMPF,ZTIMPF,ZTIMPF,2,"ZTIMPF_pass", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            MNUMNR,        iyr,           1,             1,             1,             1,             1,  &
            "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(ZTIMPD,ZTIMPD,ZTIMPD,ZTIMPD,ZTIMPD,2,"ZTIMPD", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            MNUMNR,        iyr,           1,             1,             1,             1,             1,  &
            "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(ZTIMPD,ZTIMPD,ZTIMPD,ZTIMPD,ZTIMPD,2,"ZTIMPD_pass", &
            1,             iyr,           1,             1,             1,             1,             1,  &
            MNUMNR,        iyr,           1,             1,             1,             1,             1,  &
            "SupplyRegion_ALT1", "MNUMYR", "",          "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
   enddo
   iyr = curiyr
     
   do irg=1,UNRGNS
     call getin(1,irg)   ! year argument is always 1 for getin
     call getout(iyr-1,irg)
     call getbld(1,irg)
     call getbout(iyr,irg)
     
         call AIMMS_TransArray_out_ecp(EETIME,EETIME,EETIME,EETIME,EETIME,2,"EETIME", &
            1,             irg,           1,             1,             1,             1,             1,  &
            EFD_D_MSP,     irg,           1,             1,             1,             1,             1,  &
            "Season", "SupplyRegion",    "",            "",            "",            "",            "",  &
          "R8",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EFRCO2,EFRCO2,EFRCO2,EFRCO2,EFRCO2,3,"EFRCO2", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            EFD_D_NFL,     irg,           iyr,           1,             1,             1,             1,  &
            "EFDFuelType", "SupplyRegion", "MNUMYR",    "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EFRSO2,EFRSO2,EFRSO2,EFRSO2,EFRSO2,3,"EFRSO2", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            EFD_D_NFL,     irg,           iyr,           1,             1,             1,             1,  &
            "EFDFuelType", "SupplyRegion", "MNUMYR",    "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EP_SP_CAP_FAC,EP_SP_CAP_FAC,EP_SP_CAP_FAC,EP_SP_CAP_FAC,EP_SP_CAP_FAC,5,"EP_SP_CAP_FAC", &
            1,             1,             1,             irg,           iyr,           1,             1,  &
            ECP_D_MSP,     ECP_D_CAP,     ECP_D_XPH,     irg,           iyr,           1,             1,  &
            "Season",     "PlantType",   "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPACM,EPACM,EPACM,EPACM,EPACM,3,"EPACM", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPALLNOX,EPALLNOX,EPALLNOX,EPALLNOX,EPALLNOX,4,"EPALLNOX_pass", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            NOX_D_GRP,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "NOXRegion",  "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPAVOID,EPAVOID,EPAVOID,EPAVOID,EPAVOID,4,"EPAVOID", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_VLS,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "SliceGroup", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPBANK,EPBANK,EPBANK,EPBANK,EPBANK,3,"EPBANK_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPBDSUP,EPBDSUP,EPBDSUP,EPBDSUP,EPBDSUP,4,"EPBDSUP", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_I_R,     3,             irg,           iyr,           1,             1,             1,  &
            "IntermittentRenStor", "Three", "SupplyRegion", "MNUMYR",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPBLDBND,EPBLDBND,EPBLDBND,EPBLDBND,EPBLDBND,4,"EPBLDBND", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_I_R,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "IntermittentRenStor", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "", "",      "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPCCRF,EPCCRF,EPCCRF,EPCCRF,EPCCRF,3,"EPCCRF", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPCCSUP,EPCCSUP,EPCCSUP,EPCCSUP,EPCCSUP,4,"EPCCSUP", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_I_R,     3,             irg,           iyr,           1,             1,             1,  &
            "IntermittentRenStor", "Three", "SupplyRegion", "MNUMYR",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPCFOM,EPCFOM,EPCFOM,EPCFOM,EPCFOM,3,"EPCFOM", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPCOVR,EPCOVR,EPCOVR,EPCOVR,EPCOVR,3,"EPCOVR", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPCTRM,EPCTRM,EPCTRM,EPCTRM,EPCTRM,3,"EPCTRM", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPDAVD,EPDAVD,EPDAVD,EPDAVD,EPDAVD,3,"EPDAVD", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_DGS,     irg,           iyr,           1,             1,             1,             1,  &
            "DistGenAvoidStep", "SupplyRegion", "MNUMYR", "",          "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPDPCT,EPDPCT,EPDPCT,EPDPCT,EPDPCT,3,"EPDPCT", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_DGS,     irg,           iyr,           1,             1,             1,             1,  &
            "DistGenAvoidStep", "SupplyRegion", "MNUMYR", "",          "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPDSCRT,EPDSCRT,EPDSCRT,EPDSCRT,EPDSCRT,3,"EPDSCRT", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPECAP,EPECAP,EPECAP,EPECAP,EPECAP,5,"EPECAP", &
            0,             1,             1,             irg,           iyr,           1,             1,  &
            EFD_D_MFRG,    ECP_D_CAP,     ECP_D_XPH,     irg,           iyr,           1,             1,  &
            "FuelRegion_SUP", "PlantType", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",  "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPECAP_MR,EPECAP_MR,EPECAP_MR,EPECAP_MR,EPECAP_MR,5,"EPECAP_MR", &
            0,             1,             1,             irg,           iyr,           1,             1,  &
            EFD_D_MFRG,    ECP_D_CAP,     ECP_D_XPH,     irg,           iyr,           1,             1,  &
            "FuelRegion_SUP", "PlantType", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",  "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPECFC,EPECFC,EPECFC,EPECFC,EPECFC,4,"EPECFC", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_CAP,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "PlantType",  "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPESCFC,EPESCFC,EPESCFC,EPESCFC,EPESCFC,5,"EPESCFC", &
            1,             1,             1,             irg,           iyr,           1,             1,  &
            ECP_D_MSP,     ECP_D_CAP,     ECP_D_XPH,     irg,           iyr,           1,             1,  &
            "Season",     "PlantType",   "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPEXT,EPEXT,EPEXT,EPEXT,EPEXT,4,"EPEXT", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_CAP,     MNPOLLUT+1,    irg,           iyr,           1,             1,             1,  &
            "PlantType",  "EmissionType", "SupplyRegion", "MNUMYR",    "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPFLRG,EPFLRG,EPFLRG,EPFLRG,EPFLRG,4,"EPFLRG", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            EFD_D_NFL,     EFD_D_MFRG,    irg,           iyr,           1,             1,             1,  &
            "EFDFuelType", "FuelRegion", "SupplyRegion", "MNUMYR",     "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPFOM,EPFOM,EPFOM,EPFOM,EPFOM,3,"EPFOM", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPFRST,EPFRST,EPFRST,EPFRST,EPFRST,4,"EPFRST", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_MSP,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "Season",     "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPFXSUP,EPFXSUP,EPFXSUP,EPFXSUP,EPFXSUP,4,"EPFXSUP", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_I_R,     3,             irg,           iyr,           1,             1,             1,  &
            "IntermittentRenStor", "Three", "SupplyRegion", "MNUMYR",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPGCAP,EPGCAP,EPGCAP,EPGCAP,EPGCAP,5,"EPGCAP", &
            0,             1,             1,             irg,           iyr,           1,             1,  &
            EFD_D_MFRG,    ECP_D_RET,     ECP_D_CAP,     irg,           iyr,           1,             1,  &
            "FuelRegion_SUP", "RetireGroup", "PlantType", "SupplyRegion", "MNUMYR",   "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPGECP,EPGECP,EPGECP,EPGECP,EPGECP,3,"EPGECP", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_STP,     irg,           iyr,           1,             1,             1,             1,  &
            "ECPLoadGroup", "SupplyRegion", "MNUMYR",   "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPGECPS,EPGECPS,EPGECPS,EPGECPS,EPGECPS,4,"EPGECPS", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_VLS,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "SliceGroup", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPGFOM,EPGFOM,EPGFOM,EPGFOM,EPGFOM,4,"EPGFOM", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_RET,     ECP_D_CAP,     irg,           iyr,           1,             1,             1,  &
            "RetireGroup", "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPHGHT,EPHGHT,EPHGHT,EPHGHT,EPHGHT,4,"EPHGHT", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_VLS,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "SliceGroup", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "R8",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPIACF,EPIACF,EPIACF,EPIACF,EPIACF,3,"EPIACF", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_INT,     irg,           iyr,           1,             1,             1,             1,  &
            "Intermittent", "SupplyRegion", "MNUMYR",   "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPICFC,EPICFC,EPICFC,EPICFC,EPICFC,4,"EPICFC", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_INT,     ECP_D_VLS,     irg,           iyr,           1,             1,             1,  &
            "Intermittent", "SliceGroup", "SupplyRegion", "MNUMYR",    "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPIRCCR,EPIRCCR,EPIRCCR,EPIRCCR,EPIRCCR,3,"EPIRCCR", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_I_R,     irg,           iyr,           1,             1,             1,             1,  &
            "IntermittentRenStor", "SupplyRegion", "MNUMYR", "",       "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPIRCCS,EPIRCCS,EPIRCCS,EPIRCCS,EPIRCCS,4,"EPIRCCS", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_I_R,     3,             irg,           iyr,           1,             1,             1,  &
            "IntermittentRenStor", "Three", "SupplyRegion", "MNUMYR",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPIRFOM,EPIRFOM,EPIRFOM,EPIRFOM,EPIRFOM,3,"EPIRFOM", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_I_R,     irg,           iyr,           1,             1,             1,             1,  &
            "IntermittentRenStor", "SupplyRegion", "MNUMYR", "",       "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPIROVR,EPIROVR,EPIROVR,EPIROVR,EPIROVR,3,"EPIROVR", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_I_R,     irg,           iyr,           1,             1,             1,             1,  &
            "IntermittentRenStor", "SupplyRegion", "MNUMYR", "",       "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPIRVOM,EPIRVOM,EPIRVOM,EPIRVOM,EPIRVOM,3,"EPIRVOM", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_I_R,     irg,           iyr,           1,             1,             1,             1,  &
            "IntermittentRenStor", "SupplyRegion", "MNUMYR", "",       "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLDGR,EPLDGR,EPLDGR,EPLDGR,EPLDGR,4,"EPLDGR", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_VLS,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "SliceGroup", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLDSG,EPLDSG,EPLDSG,EPLDSG,EPLDSG,4,"EPLDSG", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_VLS,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "SliceGroup", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLMAP,EPLMAP,EPLMAP,EPLMAP,EPLMAP,5,"EPLMAP", &
            1,             1,             1,             irg,           iyr,           1,             1,  &
            ECP_D_STP,     ECP_D_SSZ,     ECP_D_XPH,     irg,           iyr,           1,             1,  &
            "ECPLoadGroup", "StepsPerGroup", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "", "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLVBCK,EPLVBCK,EPLVBCK,EPLVBCK,EPLVBCK,3,"EPLVBCK_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLVCAP,EPLVCAP,EPLVCAP,EPLVCAP,EPLVCAP,4,"EPLVCAP_pass", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_CAP,     2,             irg,           iyr,           1,             1,             1,  &
            "PlantType",  "OwnerType", "SupplyRegion",  "MNUMYR",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLVEXT,EPLVEXT,EPLVEXT,EPLVEXT,EPLVEXT,3,"EPLVEXT_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLVFCF,EPLVFCF,EPLVFCF,EPLVFCF,EPLVFCF,4,"EPLVFCF_pass", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_CAP,     2,             irg,           iyr,           1,             1,             1,  &
            "PlantType",  "OwnerType", "SupplyRegion",  "MNUMYR",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLVFLC,EPLVFLC,EPLVFLC,EPLVFLC,EPLVFLC,3,"EPLVFLC_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLVFOM,EPLVFOM,EPLVFOM,EPLVFOM,EPLVFOM,3,"EPLVFOM_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLVTRN,EPLVTRN,EPLVTRN,EPLVTRN,EPLVTRN,3,"EPLVTRN_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPLVVOM,EPLVVOM,EPLVVOM,EPLVVOM,EPLVVOM,3,"EPLVVOM_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPMRM,EPMRM,EPMRM,EPMRM,EPMRM,3,"EPMRM", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPNEXT,EPNEXT,EPNEXT,EPNEXT,EPNEXT,4,"EPNEXT", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_VLS,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "SliceGroup", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPNGRP,EPNGRP,EPNGRP,EPNGRP,EPNGRP,3,"EPNGRP", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPNMSP,EPNMSP,EPNMSP,EPNMSP,EPNMSP,3,"EPNMSP", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPNOX_G,EPNOX_G,EPNOX_G,EPNOX_G,EPNOX_G,6,"EPNOX_G", &
            1,             1,             1,             1,             irg,           iyr,           1,  &
            ECP_D_MSP,     ECP_D_XPH,     ECP_D_CAP,     NOX_D_GRP,     irg,           iyr,           1,  &
            "Season",     "ExplicitPlanningHorizon", "PlantType", "NOXRegion", "SupplyRegion", "MNUMYR", "",  &
          "R8",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPNSPG,EPNSPG,EPNSPG,EPNSPG,EPNSPG,3,"EPNSPG", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ELD_D_DAY,     irg,           iyr,           1,             1,             1,             1,  &
            "DayType", "SupplyRegion",   "MNUMYR",      "",            "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPNSTP,EPNSTP,EPNSTP,EPNSTP,EPNSTP,3,"EPNSTP", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_XPH,     irg,           iyr,           1,             1,             1,             1,  &
            "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",   "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPPEAK,EPPEAK,EPPEAK,EPPEAK,EPPEAK,3,"EPPEAK", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_XPH,     irg,           iyr,           1,             1,             1,             1,  &
            "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",   "",            "",            "",  &
          "R8",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPPLNM,EPPLNM,EPPLNM,EPPLNM,EPPLNM,4,"EPPLNM_pass", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_CAP,     ECP_D_MSP,     irg,           iyr,           1,             1,             1,  &
            "PlantType",  "Season", "SupplyRegion",     "MNUMYR",      "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPRCFC,EPRCFC,EPRCFC,EPRCFC,EPRCFC,3,"EPRCFC", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_RNW,     irg,           iyr,           1,             1,             1,             1,  &
            "OtherRenewable", "SupplyRegion", "MNUMYR", "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPRENEW,EPRENEW,EPRENEW,EPRENEW,EPRENEW,3,"EPRENEW_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_XPH,     irg,           iyr,           1,             1,             1,             1,  &
            "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPRGM,EPRGM,EPRGM,EPRGM,EPRGM,3,"EPRGM", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPRMRGN,EPRMRGN,EPRMRGN,EPRMRGN,EPRMRGN,3,"EPRMRGN_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_XPH,     irg,           iyr,           1,             1,             1,             1,  &
            "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",   "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPRTBS,EPRTBS,EPRTBS,EPRTBS,EPRTBS,3,"EPRTBS", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPSPK,EPSPK,EPSPK,EPSPK,EPSPK,4,"EPSPK", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_MSP,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "Season",     "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "R8",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPSTSUP,EPSTSUP,EPSTSUP,EPSTSUP,EPSTSUP,3,"EPSTSUP", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_I_R,     irg,           iyr,           1,             1,             1,             1,  &
            "IntermittentRenStor", "SupplyRegion", "MNUMYR", "",       "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPSWSUP,EPSWSUP,EPSWSUP,EPSWSUP,EPSWSUP,3,"EPSWSUP", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_I_R,     irg,           iyr,           1,             1,             1,             1,  &
            "IntermittentRenStor", "SupplyRegion", "MNUMYR", "",       "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPTAVD,EPTAVD,EPTAVD,EPTAVD,EPTAVD,3,"EPTAVD_pass", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPTCRF,EPTCRF,EPTCRF,EPTCRF,EPTCRF,3,"EPTCRF", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            MNUMNR,        irg,           iyr,           1,             1,             1,             1,  &
            "SupplyRegion_ALT1", "SupplyRegion", "MNUMYR", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPTCST,EPTCST,EPTCST,EPTCST,EPTCST,3,"EPTCST", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            MNUMNR,        irg,           iyr,           1,             1,             1,             1,  &
            "SupplyRegion_ALT1", "SupplyRegion", "MNUMYR", "",         "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPTIRGN,EPTIRGN,EPTIRGN,EPTIRGN,EPTIRGN,3,"EPTIRGN", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            MNUMNR,        irg,           iyr,           1,             1,             1,             1,  &
            "SupplyRegion_ALT1", "SupplyRegion", "MNUMYR", "",         "",            "",            "",  &
          "I4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPUCRE,EPUCRE,EPUCRE,EPUCRE,EPUCRE,3,"EPUCRE", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPUCRER,EPUCRER,EPUCRER,EPUCRER,EPUCRER,3,"EPUCRER", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPUFDT,EPUFDT,EPUFDT,EPUFDT,EPUFDT,3,"EPUFDT", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPUFPE,EPUFPE,EPUFPE,EPUFPE,EPUFPE,3,"EPUFPE", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPUFPER,EPUFPER,EPUFPER,EPUFPER,EPUFPER,3,"EPUFPER", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPUIRT,EPUIRT,EPUIRT,EPUIRT,EPUIRT,3,"EPUIRT", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPUIRTR,EPUIRTR,EPUIRTR,EPUIRTR,EPUIRTR,3,"EPUIRTR", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPUROR,EPUROR,EPUROR,EPUROR,EPUROR,3,"EPUROR", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPURORR,EPURORR,EPURORR,EPURORR,EPURORR,3,"EPURORR", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPUTDSCRT,EPUTDSCRT,EPUTDSCRT,EPUTDSCRT,EPUTDSCRT,3,"EPUTDSCRT", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            SCALAR,        irg,           iyr,           1,             1,             1,             1,  &
            "SCALARSet", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPVOM,EPVOM,EPVOM,EPVOM,EPVOM,3,"EPVOM", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_CAP,     irg,           iyr,           1,             1,             1,             1,  &
            "PlantType", "SupplyRegion", "MNUMYR",      "",            "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPVRSUP,EPVRSUP,EPVRSUP,EPVRSUP,EPVRSUP,4,"EPVRSUP", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_I_R,     3,             irg,           iyr,           1,             1,             1,  &
            "IntermittentRenStor", "Three", "SupplyRegion", "MNUMYR",  "",            "",            "",  &
          "R4",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPWDTH,EPWDTH,EPWDTH,EPWDTH,EPWDTH,4,"EPWDTH", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_VLS,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "SliceGroup", "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "R8",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EP_NET_PEAK,EP_NET_PEAK,EP_NET_PEAK,EP_NET_PEAK,EP_NET_PEAK,3,"EP_NET_PEAK", &
            1,             irg,           iyr,           1,             1,             1,             1,  &
            ECP_D_XPH,     irg,           iyr,           1,             1,             1,             1,  &
            "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",   "",            "",            "",  &
          "R8",iyr,.FALSE.)
         call AIMMS_TransArray_out_ecp(EPECAP(0,:,:),EPECAP(0,:,:),EPECAP(0,:,:),EPECAP(0,:,:),EPECAP(0,:,:),4,"EPECAP0", &
            1,             1,             irg,           iyr,           1,             1,             1,  &
            ECP_D_CAP,     ECP_D_XPH,     irg,           iyr,           1,             1,             1,  &
            "PlantType",  "ExplicitPlanningHorizon", "SupplyRegion", "MNUMYR", "",    "",            "",  &
          "R4",iyr,.FALSE.)
   enddo
!-------------------------------------------------------------------------------------------------------
! End of ECP code generated by arraycode.f to transfer_code_ecp.f
!---------------------------------------------------------------------------------------------------------

  return
  end subroutine AIMMS_Transfer_Out_ECP
  
 
!================================================================================================================
   subroutine AIMMS_TransArray_Out_ecp(R4Array,R8Array,I4Array,I2Array,I1Array,numsets,arrayname, &
       s1,  s2,  s3,  s4,  s5,  s6,  s7, &   
       n1,  n2,  n3,  n4,  n5,  n6,  n7, &
     set1,set2,set3,set4,set5,set6,set7, &
     RorI,iyr,bHistoricalYears)
     use ecp_row_col
   implicit none
   include 'emmparm'
! transfer EMM variables to AIMMS via composite tables with set identifiers.
   integer(2), intent(in)         ::   s1,  s2,  s3,  s4,  s5,  s6,  s7                   ! set range start; 1 for out-of-domain sets
   integer(2), intent(in)         ::   n1,  n2,  n3,  n4,  n5,  n6,  n7                   ! set range end ;  1 for out-of-domain sets
   real(4), intent(in)            :: R4Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R4'
   real(8), intent(in)            :: R8Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R8'
   integer, intent(in)            :: I4Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I4'
   integer(2), intent(in)         :: I2Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I2'
   integer(1), intent(in)         :: I1Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I1'
   integer(4),intent(in)          :: numsets                                              ! number of sets in the variable's domain
   character(LEN=*), intent(in)   :: arrayname                                            ! AIMMS parameter name for the array
   character(LEN=*), intent(in)   :: set1,set2,set3,set4,set5,set6,set7                   ! set names; ' ' for unused.
   character(LEN=2), intent(in)   :: RorI                                                 ! 'r' or 'i' depending on whether it is a real or integer
   integer(4), intent(in)         :: iyr                                                  ! year slice to use of annual array
   character*5 c(7)
   integer,parameter :: maxdims=7
   character*5 elements(maxdims)
   integer*2 i1,i2,i3,i4,i5,i6,i7
   integer*2 k(7)  ! n1, n2, etc, or max set size
   integer*2 j(7)  ! i1, i2, etc,
   integer*2 s(7), n(7), q(7)
   integer*4 curiyr ! argument
   integer setIDs(7)
   character*(32)      setcopies(maxdims)
   character*(32)      setnames(maxdims)
   integer Lcolumnstart(0:max_domain_sets+1)
   integer Lcolumnend(0:max_domain_sets+1)
   integer*2 i,L,ialt,ifound
   character*256 line
   logical alt_alias ! true if set name is an "_ALT" alias. if so, output data with primary set elements
   character(LEN=35),allocatable :: carray(:,:,:,:,:,:,:)
   character*12 form(5)/'(1PG15.7E2)','(1PG24.15E3)','(I8)','(I5)','(I3)'/
   integer iform
   logical bHistoricalYears
   real*8 R8var

   
   if ((aim_phase.eq.2 .and. index(arrayname, '_pass') .gt. 0) .OR. (aim_phase.eq.1 .and. index(arrayname, '_pass') .eq. 0)) then  !added by AKN to prevent overwritting transfer arrays with passback arrays
       setnames(1)=set1
       setnames(2)=set2
       setnames(3)=set3
       setnames(4)=set4
       setnames(5)=set5
       setnames(6)=set6
       setnames(7)=set7

       if(numsets.gt.0) then
         write(IOutTXT,'(a)') 'Composite table'
         write(IOutTXT,'(30a)') (trim(setnames(i)),' ',i=1,numsets),trim(arrayname)
       else
         select case(RorI)
         case("R4")
          R8var = dble(R4ARRAY(1,1,1,1,1,1,1))
           write(IOutTXT,'(2a,1PG24.15E3,a)') trim(arrayname),' :=',R8var,' ;'
!          write(IOutTXT,'(2a,1PG15.7E2,a)') trim(arrayname),' :=',R4ARRAY(1,1,1,1,1,1,1),' ;'
         case("R8")
           write(IOutTXT,'(2a,1PG24.15E3,a)') trim(arrayname),' :=',R8ARRAY(1,1,1,1,1,1,1),' ;'
         case("I4")
           write(IOutTXT,'(2a,I8,a)') trim(arrayname),' :=',I4ARRAY(1,1,1,1,1,1,1),' ;'
         case("I2")
           write(IOutTXT,'(2a,I5,a)') trim(arrayname),' :=',I2ARRAY(1,1,1,1,1,1,1),' ;'
         case("I1")
           write(IOutTXT,'(2a,I3,a)') trim(arrayname),' :=',-1*I1ARRAY(1,1,1,1,1,1,1),' ;'          !added by AKN on 6/5/2019
         end select

         return
       endif
       line=' '
       setcopies=' '
       Lcolumnstart=0
       Lcolumnend=0
       do i=1,numsets
         ifound=0
 
     ! use full length set elements, not the short-element sets alternatives
          ialt=index(setnames(i),'_ALT')-1  ! get the prefix set name length that excludes the _ALT* suffix
          if(ialt.le.0) then
            alt_alias=.false.
            ialt=len_trim(setnames(i))    ! just normal length name if not an ALT alias name
          else
            alt_alias=.true.
          endif
          setcopies(i)=setnames(i)(1:ialt)  ! use setcopies for printing the elements
          LcolumnStart(i)=LcolumnEnd(i-1)+1
          LcolumnEnd(i)=LcolumnStart(i)+len_trim(setnames(i))   ! includes added blank at end to separate each field 
        enddo  ! i=1,numsets

        LcolumnStart(numsets+1) = LcolumnEnd(numsets) + 1
        LcolumnEnd(numsets+1) = LcolumnStart(numsets+1) + len_trim(arrayname)-1

        call get_setIDs_ecp(setnames,numsets,setIDs) 
    ! diminensioning parameters represent a max size and the actual set size may be smaller. So
    ! when writing the array, only write elements within the actual set range.
       k(1)=1;if(numsets.ge.1) k(1)=min(n1,aimsets(setIDs(1)).iend - aimsets(setIDs(1)).istart +1)
       k(2)=1;if(numsets.ge.2) k(2)=min(n2,aimsets(setIDs(2)).iend - aimsets(setIDs(2)).istart +1)
       k(3)=1;if(numsets.ge.3) k(3)=min(n3,aimsets(setIDs(3)).iend - aimsets(setIDs(3)).istart +1)
       k(4)=1;if(numsets.ge.4) k(4)=min(n4,aimsets(setIDs(4)).iend - aimsets(setIDs(4)).istart +1)
       k(5)=1;if(numsets.ge.5) k(5)=min(n5,aimsets(setIDs(5)).iend - aimsets(setIDs(5)).istart +1)
       k(6)=1;if(numsets.ge.6) k(6)=min(n6,aimsets(setIDs(6)).iend - aimsets(setIDs(6)).istart +1)
       k(7)=1;if(numsets.ge.7) k(7)=min(n7,aimsets(setIDs(7)).iend - aimsets(setIDs(7)).istart +1)
       
       if(numsets.ge.1 .and. s1 .lt. 1) k(1)=1-s1+k(1)
       if(numsets.ge.2 .and. s2 .lt. 1) k(2)=1-s2+k(2)
       if(numsets.ge.3 .and. s3 .lt. 1) k(3)=1-s3+k(3)
       if(numsets.ge.4 .and. s4 .lt. 1) k(4)=1-s4+k(4)
       if(numsets.ge.5 .and. s5 .lt. 1) k(5)=1-s5+k(5)
       if(numsets.ge.6 .and. s6 .lt. 1) k(6)=1-s6+k(6) 
       if(numsets.ge.7 .and. s7 .lt. 1) k(7)=1-s7+k(7)
       
       j(1)=s1
       if(s1.lt.1) then
          j(1)=1 ! 0 elements are only defined for a couple of sets, like planninghorizon. so omit 0 when outputting data.
       endif
       j(2)=max(1,s2)
       if(s2.lt.1) then
          if(trim(setnames(i)).ne.'PlanningHorizon') then  
            j(2)=1
          else
            j(2)=0          ! need 0 element for PlanningHorizon; represents current year; used in uecp
          endif
       endif
       
       j(3)=max(1,s3)
       j(4)=max(1,s4)
       j(5)=max(1,s5)
       j(6)=max(1,s6)
       j(7)=max(1,s7)
       
       s(1) = s1
       s(2) = s2
       s(3) = s3
       s(4) = s4
       s(5) = s5
       s(6) = s6
       s(7) = s7
       
      
       
    ! write only single year slice of array if it has a year subscript
       do i=1,7
         if(setnames(i)(1:6).eq.'MNUMYR' .OR. setnames(i)(1:6).eq.'MNUMYRX'.OR. setnames(i)(1:6).eq.'MNUMYRF') then
           if (bHistoricalYears .eq. .TRUE.) then
                j(i) = 1
           else
               if (s(i) .lt. 1) then
                j(i)=iyr-s(i)+1
                !s(i)=iyr-so(i)+1
               else
                 j(i)=iyr
                 !s(i)=iyr
               endif
           endif
           !k(i)=iyr
               if (s(i) .lt. 1) then
                  k(i)=min(iyr-s(i)+1+max(ECP_D_FPH,ECP_D_XPH), k(i))  !read necessary forward years basd on a given year dimension  either MNUMYR+ECP_D_FPH or MNUMYR+ECP_D_XPH
               else
                  k(i)=min(iyr+max(ECP_D_FPH,ECP_D_XPH), k(i))
               endif
        endif
       enddo
      

     ! write out each coefficient on a line along with the set elements for each set in its domain.
        c=' '
        do i7=j(7),k(7)
          if(numsets.ge.7) then
            c(7)=setElements(    aimsets(setIDs(7)).istart + i7 - 1 )
            line(LcolumnStart(7):LcolumnEnd(7)) = c(7)
          endif
          if (s(7) .lt. 1) then
             q(7) = i7+s(7) -1 
          else
             q(7) = i7 
          endif
          
          do i6=j(6),k(6)
            if(numsets.ge.6)then
              c(6)=setElements(    aimsets(setIDs(6)).istart + i6 - 1 )
              line(LcolumnStart(6):LcolumnEnd(6)) = c(6)
            endif
            if (s(6) .lt. 1) then
                q(6) = i6+s(6) -1 
            else
                q(6) = i6 
            endif
            
            do i5=j(5),k(5)
              if(numsets.ge.5) then
                c(5)=setElements(    aimsets(setIDs(5)).istart + i5 - 1 )
                line(LcolumnStart(5):LcolumnEnd(5)) = c(5)
              endif
              if (s(5) .lt. 1) then
                q(5) = i5+s(5) -1 
              else
                q(5) = i5 
              endif
              
              do i4=j(4),k(4)
                if(numsets.ge.4)then
                  c(4)=setElements(    aimsets(setIDs(4)).istart + i4 - 1 )
                  line(LcolumnStart(4):LcolumnEnd(4)) = c(4)
                endif
                if (s(4) .lt. 1) then
                     q(4) = i4+s(4) -1 
                else
                     q(4) = i4 
                endif
                
                do i3=j(3),k(3)
                  if(numsets.ge.3) then
                    c(3)=setElements(    aimsets(setIDs(3)).istart + i3 - 1)
                    line(LcolumnStart(3):LcolumnEnd(3)) = c(3)
                  endif
                  if (s(3) .lt. 1) then
                     q(3) = i3+s(3) -1 
                  else
                     q(3) = i3 
                  endif
                  
                  do i2=j(2),k(2)
                    if(numsets.ge.2)then
                      c(2)=setElements(    aimsets(setIDs(2)).istart + i2 - 1 )
                      line(LcolumnStart(2):LcolumnEnd(2)) = c(2)
                    endif
                    if (s(2) .lt. 1) then
                        q(2) = i2+s(2) -1 
                    else
                        q(2) = i2
                    endif
                    
                    do i1=j(1),k(1)
                      c(1)=setElements(    aimsets(setIDs(1)).istart + i1 - 1 )
                      line(LcolumnStart(1):LcolumnEnd(1)) = c(1)
                      if (s(1) .lt. 1) then
                          q(1) = i1+s(1) -1 
                      else
                           q(1) = i1
                      endif
                      
                      select case(RorI)
                      case("R4")
                        iform=1                      
                        if(R4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ne.0.0 .and. .not. isnan(R4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)))) then
                        R8var = dble(R4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)))
                        write(        line(LcolumnStart(numsets+1):),form(2)) R8var
!                        write(        line(LcolumnStart(numsets+1):),form(iform)) R4ARRAY(s(1)+i1-j(1),s(2)+i2-j(2),s(3)+i3-j(3),s(4)+i4-j(4),s(5)+i5-j(5),s(6)+i6-j(6),s(7)+i7-j(7))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+23))
                          if(line(LcolumnStart(numsets+1):).eq.'Infinity') line(LcolumnStart(numsets+1):)='Inf'
                          if(line(LcolumnStart(numsets+1):).eq.'-Infinity') line(LcolumnStart(numsets+1):)='-Inf'
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      case("R8")
                        iform=2
                        if(R8ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ne.0.0 .and. .not. isnan(R8ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)))) then
                          write(        line(LcolumnStart(numsets+1):),form(iform)) R8ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+23))
                          if(line(LcolumnStart(numsets+1):).eq.'Infinity') line(LcolumnStart(numsets+1):)='Inf'
                          if(line(LcolumnStart(numsets+1):).eq.'-Infinity') line(LcolumnStart(numsets+1):)='-Inf'
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      case("I4")
                        iform=3
                        if(I4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ne.0) then
                          write(        line(LcolumnStart(numsets+1):),form(iform)) I4ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+7))
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      case("I2")
                        iform=4
                        if(I2ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ne.0) then
                          write(        line(LcolumnStart(numsets+1):),form(iform)) I2ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+4))
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      case("I1")
                        iform=5
                        if ((I1ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)).ge.-1) .and. (I1ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)) .le. 1)) then
                          write(        line(LcolumnStart(numsets+1):),form(iform)) abs(I1ARRAY(q(1),q(2),q(3),q(4),q(5),q(6),q(7)))
                          line(LcolumnStart(numsets+1):) = adjustl(line(LcolumnStart(numsets+1):LcolumnStart(numsets+1)+4))
                          write(IOutTXT,'(a)') trim(line)
                        endif
                      end select

                    enddo    ! i1
                  enddo      ! i2
                enddo        ! i3
              enddo          ! i4
            enddo            ! i5
          enddo              ! i6
        enddo                ! i7
    
       write(IOutTXT,'(a)') ';'
   
   endif ! if(aim_phase.ne.2. .OR. index(arrayname, '_pass') .eq. 0) then
  
   return
  end subroutine AIMMS_TransArray_Out_ecp

!================================================================================================================
   subroutine AIMMS_Transfer_In_ecp(R4Array,R8Array,I4Array,I2Array,I1Array, &
       s1,  s2,  s3,  s4,  s5,  s6,  s7, &   
       n1,  n2,  n3,  n4,  n5,  n6,  n7, &
     RorI,LcolumnStart,LcolumnEnd,fieldname,nfields,iunit)
     use ecp_row_col
   implicit none
! transfer EMM variables from AIMMS via composite tables with set identifiers.
   integer(2), intent(in)         ::   s1,  s2,  s3,  s4,  s5,  s6,  s7                   ! set range start; 1 for out-of-domain sets
   integer(2), intent(in)         ::   n1,  n2,  n3,  n4,  n5,  n6,  n7                   ! set range end ;  1 for out-of-domain sets
   real(4),    intent(out)        :: R4Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R4'
   real(8),    intent(out)        :: R8Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='R8'
   integer(4), intent(out)        :: I4Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I4'
   integer(2), intent(out)        :: I2Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   ! used if RorI='I2'
   integer(1), intent(out)        :: I1Array(S1:N1,S2:N2,S3:N3,S4:N4,S5:N5,S6:N6,S7:N7)   !used if RorI = 'Logical'   --- added by AKN 6/5/2019 to handle FORTRAN logical type

  ! character(LEN=2), intent(in)   :: RorI                                              ! r4, r8, i4, or i2 logical depending on whether the fortran variable is a real or integer and its size   
   character(LEN=7), intent(in)   :: RorI                                              ! r4, r8, i4, or i2 logical depending on whether the fortran variable is a real or integer and its size   
   !modifying RorI to accomodate logical type
   integer(4), intent(in)         :: Lcolumnstart(0:max_domain_sets+1)                    ! starting position of each field on the record (line)
   integer(4), intent(in)         :: Lcolumnend(0:max_domain_sets+1)                      ! ending position of each filed on the record (line)
   character(LEN=*), intent(in)   :: fieldname(0:nfields)    ! names of the fields which are the set names and the AIMMS identifier/expression

   integer(4), intent(in)         :: nfields  ! number of fields in records, including the value field
   integer(4), intent(in)         :: iunit   ! input unit number for read statement

   integer,parameter :: maxdims=7
   character*5 c(maxdims),afield
   character*5 elements(maxdims)
   character*(32)      setcopies(maxdims)
   character*(32)      setnames(maxdims)
   integer*2 ifield(maxdims)
   integer setIDs(maxdims)
   
   integer*4 i,j,L,ialt,ifound,nsets
   integer*2 i1,i2,i3,i4,i5,i6,i7,icode


   integer*4 curiyr ! argument
   
   character*256 line
   logical alt_alias ! true if set name is an "_ALT" alias. if so, output data with primary set elements

   line=' '
   setcopies=' '
   nsets=nfields-1
   setnames(1:nsets)=fieldname(1:nsets)
   do i=1,nsets
     ifound=0
 
 ! use full length set elements, not the short-element sets alternatives
      ialt=index(setnames(i),'_ALT')-1  ! get the prefix set name length that excludes the _ALT* suffix
      if(ialt.le.0) then
        alt_alias=.false.
        ialt=len_trim(setnames(i))    ! just normal length name if not an ALT alias name
      else
        alt_alias=.true.
      endif
      setcopies(i)=setnames(i)(1:ialt)  ! use setcopies for interpreting the elements

   enddo  ! i=1,nsets
   call get_setIDs_ecp(setcopies,nsets,setIDs)   
   
   backspace iunit

10 continue
     read(iunit,'(a)',end=99) line
     if(index(line,';')) return
   
 ! Read the set elements for each set and return their index numbers
     c=' '
     ifield(:)=1
     do i=1,nsets
       ifound=0
       icode=0
       afield=line(Lcolumnstart(i):lcolumnend(i))
       call mreplace(afield,"'","")
       do j=aimsets(setIDs(i)).istart,aimsets(setIDs(i)).iend   ! loop over the elements of the set until the set element is found
         if(afield.eq.setelements(j)) then
           ifound = 1
           icode = j - aimsets(setIDs(i)).istart + 1
           exit
         endif
       enddo
       if(icode.eq.0 .or. ifound.eq.0) then
         write(6,'(3a)') 'AIMMS Interface error ECP with '//trim(fieldname(nfields))// &
          ' solution. Could not get aliased set element for field: '//afield//' for set: '//trim(setcopies(i))
         return
       endif
       ifield(i)=icode
     enddo

     
     i1=ifield(1) - (1-s1)     
     i2=ifield(2) - (1-s2)    
     i3=ifield(3) - (1-s3)        
     i4=ifield(4) - (1-s4)        
     i5=ifield(5) - (1-s5)        
     i6=ifield(6) - (1-s6)        
     i7=ifield(7) - (1-s7)     
     
     
     if(trim(ADJUSTL(line(LcolumnStart(nfields):))).eq.'zero') then 
        call mreplace(line(LcolumnStart(nfields):),"zero","   0")
     endif
     select case(trim(RorI))
       case("R4")       
         read(line(LcolumnStart(nfields):), *) R4ARRAY(i1,i2,i3,i4,i5,i6,i7)
       case("R8")
         read(line(LcolumnStart(nfields):), *) R8ARRAY(i1,i2,i3,i4,i5,i6,i7)
       case("I4")
         read(line(LcolumnStart(nfields):), *) I4ARRAY(i1,i2,i3,i4,i5,i6,i7)
       case("I2")
         read(line(LcolumnStart(nfields):), *) I2ARRAY(i1,i2,i3,i4,i5,i6,i7)
       case("I1")
         read(line(LcolumnStart(nfields):), *) I1ARRAY(i1,i2,i3,i4,i5,i6,i7)
     end select
    
   goto 10
99 continue  

   return
   end subroutine AIMMS_Transfer_In_ecp  
  
  !============================================================================   
   subroutine get_setIDs_ecp(setnames,numsets,setIDs)
   use ecp_row_col
   implicit none
   integer numsets
   character(LEN=*),INTENT(IN) :: setnames(numsets)
   integer setIDs(7)
   integer i, ifound, ialt, j
   logical alt_alias
   do i=1,numsets
     ifound=0
 
 ! use full length set elements, not the short-element sets alternatives
     ialt=index(setnames(i),'_ALT')-1  ! get the prefix set name length that excludes the _ALT* suffix
     if(ialt.le.0) then
       alt_alias=.false.
       ialt=len_trim(setnames(i))    ! just normal length name if not an ALT alias name 
     else
       alt_alias=.true. 
     endif

     if(alt_alias) then   
       do j=1,numAimSets
         if( trim(aimsets(j).setname) .eq. setnames(i)(1:ialt)  ) then
           ifound=j
           setIDs(i)=ifound
           exit
         endif
       enddo
     else
       do j=1,numAimSets
         if( trim(aimsets(j).setname).eq. trim(setnames(i))  ) then
           ifound=j
           setIDs(i)=ifound
           exit
         endif
       enddo
     endif
     if(ifound.eq.0) then
       write(6,'(2a)')'AIMMS Interface error in get_setIDs_ecp, set name not found: ',trim(setnames(i))
       write(IOutTXT,'(a)') ';'
       return
     endif
   enddo  ! i=1,numsets

   return
   end
   
   subroutine fill_elements_ecp(carray, setnames,numsets, s1,s2,s3,s4,s5,s6,s7,  n1,n2,n3,n4,n5,n6,n7,   k1,k2,k3,k4,k5,k6,k7) 
! fills a character array with all the possible set elements for a multi-dimensional array using the ECP set elements
   use ecp_row_col
   implicit none
   integer numsets
   integer(2),INTENT(IN) :: s1,s2,s3,s4,s5,s6,s7,  n1,n2,n3,n4,n5,n6,n7
   integer(2),INTENT(OUT) :: k1,k2,k3,k4,k5,k6,k7  ! number of elements in aimms set; 1 if no set; k_ may be < n_ since n_ is often a maximum 
   character(LEN=35),INTENT(OUT) :: carray(s1:n1,s2:n2,s3:n3,s4:n4,s5:n5,s6:n6,s7:n7)
   character(LEN=*),INTENT(IN) :: setnames(numsets)

   integer setids(7)
   character*5 c1,c2,c3,c4,c5,c6,c7
   integer i,j,ifound,ialt,i1,i2,i3,i4,i5,i6,i7
  
   call get_setIDs_ecp(setnames,numsets,setids,iOutTxt) ! gets full length set names by stripping "_alt*" off the names

   c1=' '
   c2=' '
   c3=' '
   c4=' '
   c5=' '
   c6=' '
   c7=' '
   k1=1;if(numsets.ge.1) k1=min(n1,aimsets(setIDs(1)).iend - aimsets(setIDs(1)).istart +1)
   k2=1;if(numsets.ge.2) k2=min(n2,aimsets(setIDs(2)).iend - aimsets(setIDs(2)).istart +1)
   k3=1;if(numsets.ge.3) k3=min(n3,aimsets(setIDs(3)).iend - aimsets(setIDs(3)).istart +1)
   k4=1;if(numsets.ge.4) k4=min(n4,aimsets(setIDs(4)).iend - aimsets(setIDs(4)).istart +1)
   k5=1;if(numsets.ge.5) k5=min(n5,aimsets(setIDs(5)).iend - aimsets(setIDs(5)).istart +1)
   k6=1;if(numsets.ge.6) k6=min(n6,aimsets(setIDs(6)).iend - aimsets(setIDs(6)).istart +1)
   k7=1;if(numsets.ge.7) k7=min(n7,aimsets(setIDs(7)).iend - aimsets(setIDs(7)).istart +1)
   carray=' '
   do i7=s7,n7
     if(numsets.ge.7 .and. i7.le.k7) c7=setElements(    aimsets(setIDs(7)).istart + i7 - 1 ) 
     do i6=s6,n6
       if(numsets.ge.6 .and. i6.le.k6) c6=setElements(    aimsets(setIDs(6)).istart + i6 -1 ) 
       do i5=s5,n5
         if(numsets.ge.5 .and. i5.le.k5) c5=setElements(    aimsets(setIDs(5)).istart + i5 -1 ) 
         do i4=s4,n4
           if(numsets.ge.4 .and. i4.le.k4) c4=setElements(    aimsets(setIDs(4)).istart + i4 -1 ) 
           do i3=s3,n3
             if(numsets.ge.3 .and. i3.le.k3) c3=setElements(    aimsets(setIDs(3)).istart + i3 -1 ) 
             do i2=s2,n2
               if(numsets.ge.2 .and. i2.le.k2) c2=setElements(    aimsets(setIDs(2)).istart + i2 -1 ) 
               do i1=s1,n1
                 if(numsets.ge.1 .and. i1.le.k1) then
                   c1=setElements(    aimsets(setIDs(1)).istart + i1 -1 ) 
                   carray(i1,i2,i3,i4,i5,i6,i7)=c1//c2//c3//c4//c5//c6//c7
                 endif
               enddo
             enddo
           enddo
         enddo
       enddo
     enddo
   enddo
     
   return   
   end subroutine fill_elements_ecp

!================================================================================================================
   subroutine AIMMS_OutTxt_ecp(ParamName,  idxFirst, idxLast, setnames)
!  write out coefficients as an AIMMS parameter using the composite table format
!  with one coefficient per line, along with the associated index set elements
   use ecp_row_col
   implicit none
   include 'parametr'
   include 'ncntrl'
   
   character(LEN=*), intent(in) :: ParamName
   integer(4),       intent(in) :: idxFirst, idxLast 
   character(LEN=30),intent(in) :: setnames(max_domain_sets)   
   character*50 ParamNameNoBang
   logical bang ! true if substring in a parameter name begins with a "bang" (!). A "_" in the name delimits the end of a bang substring
   integer           numsets,num_nz,L
   character*50 filen/' '/,oldfilen/'old'/

   integer setIDs(max_domain_sets)
   character*(32)      setcopies(max_domain_sets)
   integer Lcolumnstart(0:max_domain_sets+1)
   integer Lcolumnend(0:max_domain_sets+1)
   integer retcode,min_unit/100/,ii,i,j,k,ialt,ifound,skip,ic,LastSetPos
   character*256 line
   character(len=256),allocatable :: comp_buffer(:)  ! composite table, to be dumped at end. so its code can be parallized efficiently
   integer,allocatable            :: comp_buflen(:)  ! length of each line
   logical alt_alias ! true if set name is an "_ALT" alias. if so, output data with primary set elements
   integer nline,max_nline/12000/,nlen
   
   if(.not. allocated(comp_buffer)) then
     allocate (comp_buffer(max_nline)) ! this is reallocated if lines exceed max_nline
     allocate (comp_buflen(max_nline))   
   endif
  

   nline=0

! for upper bounds, coefficients intended to be 0 are passed as -1 to be counted as nonzero.  Convert back
! to zero here so that AIMMS overrides the default value on upper bounds of infinity with zero.

   if(index(ParamName,'UBOUND').gt.0 .and. idxLast.gt.0) then
     do j=idxFirst,idxLast
       ic=ecp_sortidx(j)   
       if(ic.gt.0) then 
         if(ecp_coeff(ic).coeff8.eq.-1.0) then
           ecp_coeff(ic).coeff8=0.
         endif
      endif
     enddo
   endif
   numsets=0
   do j=1,max_domain_sets
     if(len_trim(setnames(j)).gt.0) then
       numsets=numsets+1
     else
      exit
     endif
   enddo
  
   if(idxLast.gt.0 .and. idxFirst.gt.0) then
     num_nz=idxLast-idxFirst+1
   else
     num_nz=0
   endif

   if(idxFirst.ne.0) then
     ic=ecp_sortidx(idxFirst)    
   endif
   L=len_trim(ParamName)
   bang=.false.
   j=0
   ParamNameNoBang=' '
   do i=1,L
     if(ParamName(i:i).eq.'!') then
       bang=.true.
     elseif(ParamName(i:i).eq.'_') then
       bang=.false.
     endif
     if(.not. bang) then
       j=j+1
      ParamNameNoBang(j:j)=ParamName(i:i)  ! omit "!xxx" strings from Parameter names to add data for aliased tuples to the primary AIMMS parameter
     endif
   enddo
  
   if(numsets.eq.0) then
     if(num_nz.eq.1) then
!    "1PG15.7E2"   format writes real*4 data like list-directed output "*" to prevent loss of significance
!    "1PG24.15E3"  format writes real*8 data like list-directed output "*"
!    "E30.22E3"    format is used by omlanal.f/pack_all to write coefficients for col, row, and mat.txt files
       nline=nline+1
       write(comp_buffer(nline),'(2a,F16.6,a)') trim(ParamName),' :=',ecp_coeff(ic).coeff8,' ;'
       comp_buflen(nline)=len_trim(comp_buffer(nline))
     else
       nline=nline+1
       comp_buffer(nline)=trim(ParamName)//' := 0.0 ;'
       comp_buflen(nline)=len_trim(comp_buffer(nline))
     endif
     write(iOutTxt,'(a)') (comp_buffer(i)(:comp_buflen(i)) ,i=1,nline)
     return
   endif
 
   if(idxLast.eq.0) then
     return
   else
     nlen=idxLast-idxFirst+4  ! number of records for composite table
     if(nlen.gt.max_nline) then
       if(allocated(comp_buffer)) then
         deallocate(comp_buffer)
         deallocate(comp_buflen)
       endif
       allocate (comp_buffer(nlen))
       allocate (comp_buflen(nlen))   
       max_nline=nlen
     endif
     nline=nline+1
     comp_buffer(nline)= 'Composite table'
     comp_buflen(nline)=len_trim(comp_buffer(nline))
     nline=nline+1
     write(comp_buffer(nline),'(30a)') (trim(setnames(i)),'  ',i=1,numsets),'  ',trim(ParamName)
     comp_buflen(nline)=len_trim(comp_buffer(nline))
     setIDS=0  
     setcopies=' '
     Lcolumnstart=0
     Lcolumnend=0
     do i=1,numsets
       ifound=0
  
!  use full length set elements, not the short-element sets alternatives
       ialt=index(setnames(i),'_ALT')-1  ! get the prefix set name length that excludes the _ALT* suffix
       if(ialt.le.0) then
         alt_alias=.false.
         ialt=len_trim(setnames(i))    ! just normal length name if not an ALT alias name
       else
         alt_alias=.true.
       endif
       setcopies(i)=setnames(i)(1:ialt)  ! use setcopies for printing the elements (names without _ALT (alias) suffix
       LcolumnStart(i)=LcolumnEnd(i-1)+1
       LcolumnEnd(i)=LcolumnStart(i)+len_trim(setnames(i))+1    
       if(alt_alias) then
         do j=1,numAimSets
           if( trim(aimsets(j).setname).eq. trim(setcopies(i))  ) then
             ifound=j
             setIDs(i)=ifound
             exit
           endif
         enddo
         if(ifound.eq.0) then
           write(6,'(2a)')'AIMMS Interface error in AIMMS_OutTxt, set name not found: ',trim(setnames(i))
           nline=nline+1
           comp_buffer(nline)=';'
           comp_buflen(nline)=1
           write(iOutTxt,'(a)') (comp_buffer(k)(1:comp_buflen(k)),   k=1,nline) ! implied do output should be faster, if like old days
           return
         endif
       endif
     enddo  
     LcolumnStart(numsets+1) = LcolumnEnd(numsets) + 1
     LcolumnEnd(numsets+1) = LcolumnStart(numsets+1) + len_trim(ParamName) -1

     LastSetPos=LcolumnEnd(numsets)  ! save for end of set elements

 
     do i=1,numsets
       if(setIDs(i).gt.0) then
         LcolumnEnd(i)=LcolumnStart(i)+len_trim( setElements( aimsets(  setIDs(i) ).istart ) )-1
       else
         LcolumnEnd(i)=LcolumnStart(i)+len_trim(   ecp_coeff( ecp_sortidx(idxFirst) ).cset_elements(i)  ) -1
       endif
     enddo

! write out each coefficient on a line along with the set elements for each set in its domain. parallelize for speed.
! dump entire table to file at end to 
!DEC$ PARALLEL
   do j=idxFirst,idxLast
     nline=nline+1
     comp_buffer(nline)=' '
     comp_buflen(nline)=0
     ic=ecp_sortidx(j)    
     skip=0
     if (j.le.idxLast)then
       if(ecp_sortkey(j)(1:57).eq.ecp_sortkey(j+1)(1:57)) then
         skip=1  ! if the coefficient appears more than once, skip all but the last one set.
       endif
     endif
     do i=1,numsets
! ecpcoeff(ic).iset_elements(i) has the integer set element number.  use that to get the 
! character string set element from SetElements that AIMMS will recognize 
       if(setIDs(i).gt.0) then ! true for aliased sets
         if(ecp_coeff(ic).iset_elements(i).gt.0) then      
           comp_buffer(nline)(LcolumnStart(i):LcolumnEnd(i)) = setElements(    aimsets(setIDs(i)).istart + ecp_coeff(ic).iset_elements(i) -1) 
         else
           skip=1
         endif
       else ! unaliased set: use set elements directly
         if(ecp_coeff(ic).cset_elements(i).ne.' ') then      
           comp_buffer(nline)(LcolumnStart(i):LcolumnEnd(i)) = ecp_coeff(ic).cset_elements(i)
         else
           skip=1
         endif
       endif
     enddo
     if(skip.ne.1) then
       write(comp_buffer(nline)(LastSetPos+1:LastSetPos+15),'(1PG15.7E2)') ecp_coeff(ic).coeff8
       comp_buflen(nline)=LastSetPos+15
     else
       nline=nline-1
     endif
     
100 format(a,1PG15.7E2)

   enddo
   nline=nline+1
   comp_buffer(nline)=';'
   comp_buflen(nline)=1
 endif
 if(nline.gt.max_nline) then
   max_nline=nline
   if(max_nline .gt. 1000) then
     write(6,'(a,i6)') 'AIMMS Interface error: aimms_OutTxt_ecp: max_nline exceeded=',max_nline
   endif
 endif
 write(iOutTxt,'(a)') (comp_buffer(i)(:comp_buflen(i)),i=1,nline) ! implied do output should be faster, if like old days
 return

  end subroutine AIMMS_OutTxt_ecp

!================================================================================================================
  subroutine AIMMS_InTxtVar_ecp
 ! this reads EMM variables filled by AIMMS and output as composite tables to passback_iiii_it.txt
  use ecp_row_col
  implicit none
! mostly parameters
  include 'parametr'
  include 'emmparm'
  include 'cdsparms'
  include 'dsmdimen'
  include 'entcntl'
  include 'eusprc'  
! Mostly common block declarations  
  include 'ab32'
  include 'angtdm'
  include 'bildout'
  include 'coalemm'
  include 'coalrep'
  include 'cogen'
  include 'control'
  include 'convfact'
  include 'csapr'
  include 'dispcrv'
  include 'dispett'
  include 'dispin'
  include 'dispinyr'
  include 'dispout'
  include 'dispuse'
  include 'dsmsectr' !conflicts with wwind
  include 'dsmtfecp'
  include 'dsmtoefd'
  include 'edbdef'
  include 'e111d'
  include 'ecpcntl'
  include 'ecp_coal'
  include 'ecp_nuc'
  include 'elcntl'
  include 'elout'
  include 'emablk'
  include 'emeblk'
  include 'emoblk'
  include 'emission'
  include 'emmemis'
  include 'emshrout'
  include 'enewtech'
  include 'fuelin'
  include 'intout'
  include 'ncntrl'
  include 'ngtdmrep'
  include 'ogsmout'
  include 'plntctl'
  include 'plntin'
  include 'postpr'
  include 'qblk'
  include 'udatout'
  include 'uecpout'
  include 'uefdout'
  include 'uettout'
  include 'uso2grp'
  include 'wrenew'
  include 'emm_aimms'
  
!  include 'wwind' ! need CF, but that conflicts with a same-named variable in dsmsectr


   character*80 filen/' '/
   integer IUNIT

   integer Lcolumnstart(0:12)
   integer Lcolumnend(0:12)
   character*40 fieldname(0:12),fields(0:12) ! allocate space for 13 fields, or 12 starting at 1
   integer ifound
   character*216 line,previousline
   character*216 header
   logical backwards/.true./,scalar,first_scalar,dash,goto10,emptyTable
   character*24 identifier
   integer nline,idot,lline,ispace,iparen,nfields,nsets,ic,ir,isol,i,imatch,j,lm,la,lf,icode,fs,s,L,L2,irg
   integer iyr
   
   iyr=curiyr
   
   
   write(filen,'(a,i4,a)')  './ecp/PassBack_',curcalyr,'.txt'

   call unitunopened(100,999,IUNIT)
   open(iunit,file=filen,FORM='FORMATTED',ACCESS = 'SEQUENTIAL',STATUS='UNKNOWN')

   call geteij(iyr)
   irg=0
 ! Return here from below until the end of file is reached. then go down to 99 continue
10 continue
! find another line. Find start of next composite table or else an assignment statement:
     previousline = line
     read(iunit,'(a)',end=99) line   
     nline=nline+1   ! keep track of file line numbers for debugging and error messages
     if(len_trim(line).eq.0) go to 10

     scalar=.false.
    
     ifound=index(line,':=')  ! indication of scalar so solution values not written as composite table
     if(ifound.gt.0) then
       nsets=0
       nfields=1
       scalar=.true.
       header=line
       row_type=' '
       first_scalar=.true.  ! indicates the the current line holds the assignment for the first of 4 scalars.
       ! get row/column name
       idot=index(header,':=')
       identifier=adjustl(header(:idot-1))
     else
       scalar=.false.  
       first_scalar=.false.
     endif
   
     ifound=index(line,'Composite table:')
     if(ifound.gt.0) then
!  Next line will have the header that identifies the variable
       previousline = header
       read(iunit,'(a)',end=99) header
       nline=nline+1

! get identifier name. It's the last character string on the line, delimited by spaces. may include domain specs in paretheses, so remove those
       idot=len_trim(header)
       if(idot.eq.0) then
         write(6,'(a)')'AIMMS Interface error ECP header with identifier not found for composite table in '//trim(filen)
         go to 10
       endif
       ispace=index(header(1:idot),' ',backwards)  ! find first blank search backwards from last nonblank on the line
       iparen=index(header(1:idot),'(',backwards)
       if(iparen.gt.0.and.iparen.gt.ispace) then
         idot=iparen-1
       endif
       identifier=header(ispace+1:idot)

 ! get the underscore line and use it to determine column positions for each field 
       previousline = line
       read(iunit,'(a)',end=99) line
       nline=nline+1
       if(index(line,'!').eq.0 .or. index(line,'--').eq.0) then  
       ! not an underscore comment line
         write(6,'(a)')'AIMMS Interface error ECP:  no comment or underscore line where expected in line: '//trim(line)
         goto 10
       endif   
     
       LLINE=len_trim(line)+1
       nfields=0
       lcolumnstart=0
       lcolumnend=0
       fieldname=' '
       fields=' '
     
       dash=.false.
       do i=1,LLINE
         if(.not. dash .and. line(i:i).eq.'-') then
           nfields=nfields+1
           dash=.true.
           Lcolumnstart(nfields)=i
         elseif(dash .and. line(i:i).ne.'-') then
           dash=.false.
           Lcolumnend(nfields)=i-1
           fieldname(nfields)=adjustl(header(Lcolumnstart(nfields):Lcolumnend(nfields))) ! adjustl: remove leading blanks
         endif
       enddo
       if ( nfields .le. 1 ) then  ! should be at least 1 field for the  value and 1 field for each set in the index space
           write(6,'(a,i6)') 'AIMMS Interface error ECP:  not enough fields found in this solution header '//trim(header)//' on line:',nline
           go to 10
       endif
       nsets=nfields-1  ! number of sets in the index space. 0 is for scalar

     endif ! of ... if found "composite table" 
!
! At this point, line can be header for a composite table or an assignment for a scalar

! return here from below until the composite table data ends with a ";" or a new composite table starts following some scalar assignment statements,
! or the end of the file is reached.  For scalars, the first scalar is in "line" read at 10 above. But then control returns here to read the next three.
20   continue
     if(.not.scalar  .or.  (.not. first_scalar)) then
       previousline = line
       read(iunit,'(a)',end=99) line
       nline=nline+1
     endif
     if(index(line,';').gt.1 .and. (.not. scalar)) then
        !**************************************************
         if(nsets.gt.0 .and. index(line,':=').gt.0 .and.index(line,'SupplyRegionNumber').gt.0 ) then
           nsets = 0
           identifier = 'SupplyRegionNumber'
           goto 15
         else
          if(index(previousline,'!').gt.0 .or. index(previousline,'--').gt.0) then 
              emptyTable = .true.
              goto 25
           else
              emptyTable = .false.
              goto 10
           endif
         !*****************************
           !goto 10  ! composite tables end with a ";" on a new line.  Go back up to search for next table.
         !************************
         !  endif
         endif
     endif
     if(index(line,'Composite').gt.0) then  ! can happen after processing assignment statements. so backspace file 1 line and go to top to re-read line and restart table processing.
       backspace iunit 
       nline=nline-1
       goto 10
     endif
     if(index(line,'!').ge.1) then 
       goto 20  ! some tables have additional header lines to indicate the default values (such as 0 or Inf) to be assumed for each blank solution entry.
     endif

     if(len_trim(line).eq.0) then
       if(.not.scalar) then
         goto 20
       else
! there is a blank line between two successive scalars.  If a blank line is encountered when the solution records for a scalar,
! return to start of read loop to start processing next scalar.       
         goto 10
       endif
     endif
15  continue
! Scalar processing:     
     if(nsets.eq.0 .and. index(line,':=').gt.0) then
       scalar=.true.
 !   need to read the scalar data from right of ":=". Only a scalar integer for SupplyRegionNumber expected
       if (identifier.eq.'SupplyRegionNumber') then
         if(irg.gt.0) then
           if(irg.lt.mnumnr) call strin(1,irg)   
           if(irg.le.unrgns) call strout(iyr,irg)
           if(aim_phase.eq.2.and.irg.le.unrgns) then
             call strbld(1,irg)      ! ECP version only
             call strbout(iyr,irg)   ! ECP version only
           endif
         endif
         L=index(line,':=')+2
         L2=index(line,';')-1   
         read(line(L:L2),*) irg
         if(irg.lt.mnumnr) call getin(1,irg)   
         if(irg.le.UNRGNS) call getout(iyr,irg)
       else
         write(6,'(a)') 'AIMMS error reading scalar '//trim(identifier)//' from '//trim(filen)
       endif

       first_scalar=.false.

       goto 20  ! get next record in this group of scalar assignment statements

     endif     ! of scalar processing... if(nsets.eq.0 .and. index(line,':=').gt.0) then

! if here, the lines are part of a composite table, not scalar assignments. Determine set elements .
  
     do i=1,nfields
       fields(i)=adjustl(line(Lcolumnstart(i):Lcolumnend(i))) ! adjustl: remove leading blanks
     enddo   
     emptyTable = .false. 
25   continue         
!---------------------------------------------------------------------------------------------------------
! Start of ecp code generated by arraycode.f and written to passback_code_ecp.f
!---------------------------------------------------------------------------------------------------------
!==================================================================================================================================
! Case Select Statements to read pass-back variables
!==================================================================================================================================
   Select case(identifier)
     CASE('ACI_CST')
                    call AIMMS_Transfer_in_ecp(ACI_CST,ACI_CST,ACI_CST,ACI_CST,ACI_CST, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ACI_OPT')
                    call AIMMS_Transfer_in_ecp(ACI_OPT,ACI_OPT,ACI_OPT,ACI_OPT,ACI_OPT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    NSTEP,         NRANK,         NCLUT1,        MNUMYR,        1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ACI_QAC')
                    call AIMMS_Transfer_in_ecp(ACI_QAC,ACI_QAC,ACI_QAC,ACI_QAC,ACI_QAC, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('B_CCST_ADJ')
                    call AIMMS_Transfer_in_ecp(B_CCST_ADJ,B_CCST_ADJ,B_CCST_ADJ,B_CCST_ADJ,B_CCST_ADJ, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('BNK_TO_CMM_HG')
                    call AIMMS_Transfer_in_ecp(BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG,BNK_TO_CMM_HG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('C_DR')
                    call AIMMS_Transfer_in_ecp(C_DR,C_DR,C_DR,C_DR,C_DR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CARECP')
                    call AIMMS_Transfer_in_ecp(CARECP,CARECP,CARECP,CARECP,CARECP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    CO2_D_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CES_DUALS')
                    call AIMMS_Transfer_in_ecp(CES_DUALS,CES_DUALS,CES_DUALS,CES_DUALS,CES_DUALS, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        ECP_D_XPH,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CMM_LDV_INDX')
                    call AIMMS_Transfer_in_ecp(CMM_LDV_INDX,CMM_LDV_INDX,CMM_LDV_INDX,CMM_LDV_INDX,CMM_LDV_INDX, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_UNITS,      1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CO2_INCSW')
                    call AIMMS_Transfer_in_ecp(CO2_INCSW,CO2_INCSW,CO2_INCSW,CO2_INCSW,CO2_INCSW, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('CO2_PLTSW')
                    call AIMMS_Transfer_in_ecp(CO2_PLTSW,CO2_PLTSW,CO2_PLTSW,CO2_PLTSW,CO2_PLTSW, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('COLVALS')
                    call AIMMS_Transfer_in_ecp(COLVALS,COLVALS,COLVALS,COLVALS,COLVALS, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MAXCOLS,       MAXRECS,       1,             1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('DSMPRCHOICE')
                    call AIMMS_Transfer_in_ecp(DSMPRCHOICE,DSMPRCHOICE,DSMPRCHOICE,DSMPRCHOICE,DSMPRCHOICE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MAXNRG,        MAXDSMP,       1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('E_IGRP')
                    call AIMMS_Transfer_in_ecp(E_IGRP,E_IGRP,E_IGRP,E_IGRP,E_IGRP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_UNITS,      1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('E_PTP')
                    call AIMMS_Transfer_in_ecp(E_PTP,E_PTP,E_PTP,E_PTP,E_PTP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_UNITS,      1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('E_RY')
                    call AIMMS_Transfer_in_ecp(E_RY,E_RY,E_RY,E_RY,E_RY, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_UNITS,      1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECO2ERPP')
                    call AIMMS_Transfer_in_ecp(ECO2ERPP,ECO2ERPP,ECO2ERPP,ECO2ERPP,ECO2ERPP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EPAREG,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECO2FRPP')
                    call AIMMS_Transfer_in_ecp(ECO2FRPP,ECO2FRPP,ECO2FRPP,ECO2FRPP,ECO2FRPP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EFD_D_MFRG+1,  MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECP_LCAR')
                    call AIMMS_Transfer_in_ecp(ECP_LCAR,ECP_LCAR,ECP_LCAR,ECP_LCAR,ECP_LCAR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECP_PCAR')
                    call AIMMS_Transfer_in_ecp(ECP_PCAR,ECP_PCAR,ECP_PCAR,ECP_PCAR,ECP_PCAR, &
                    0,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_XPH,     MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECP_PECP')
                    call AIMMS_Transfer_in_ecp(ECP_PECP,ECP_PECP,ECP_PECP,ECP_PECP,ECP_PECP, &
                    1,             0,             1,             1,             1,             1,             1,  &
                    MX_NCOALS,     ECP_D_XPH,     MNUMYR,        1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECP_PHG')
                    call AIMMS_Transfer_in_ecp(ECP_PHG,ECP_PHG,ECP_PHG,ECP_PHG,ECP_PHG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_HG_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECP_PSO2')
                    call AIMMS_Transfer_in_ecp(ECP_PSO2,ECP_PSO2,ECP_PSO2,ECP_PSO2,ECP_PSO2, &
                    0,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_XPH,     MNUMYR,        MX_SO2_GRP,    1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECP_QCAR')
                    call AIMMS_Transfer_in_ecp(ECP_QCAR,ECP_QCAR,ECP_QCAR,ECP_QCAR,ECP_QCAR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ECP_QHG')
                    call AIMMS_Transfer_in_ecp(ECP_QHG,ECP_QHG,ECP_QHG,ECP_QHG,ECP_QHG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_HG_GRP,     MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EMM_CL_ECPT')
                    call AIMMS_Transfer_in_ecp(EMM_CL_ECPT,EMM_CL_ECPT,EMM_CL_ECPT,EMM_CL_ECPT,EMM_CL_ECPT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_UNITS,      MNUMYR,        1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EMM_MEF')
                    call AIMMS_Transfer_in_ecp(EMM_MEF,EMM_MEF,EMM_MEF,EMM_MEF,EMM_MEF, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    NSTEP,         NRANK,         NCLUT1,        1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPRPSBK')
                    call AIMMS_Transfer_in_ecp(EPRPSBK,EPRPSBK,EPRPSBK,EPRPSBK,EPRPSBK, &
                    1,                1,             1,             1,             1,             1,             1,  &
                    MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPRPSCP')
                    call AIMMS_Transfer_in_ecp(EPRPSCP,EPRPSCP,EPRPSCP,EPRPSCP,EPRPSCP, &
                    1,                1,             1,             1,             1,             1,             1,  &
                    MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPRPSCPR')
                    call AIMMS_Transfer_in_ecp(EPRPSCPR,EPRPSCPR,EPRPSCPR,EPRPSCPR,EPRPSCPR, &
                    1,             1,                1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPRPSCR')
                    call AIMMS_Transfer_in_ecp(EPRPSCR,EPRPSCR,EPRPSCR,EPRPSCR,EPRPSCR, &
                    1,                1,             1,             1,             1,             1,             1,  &
                    MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPRPSLM')
                    call AIMMS_Transfer_in_ecp(EPRPSLM,EPRPSLM,EPRPSLM,EPRPSLM,EPRPSLM, &
                    1,                1,             1,             1,             1,             1,             1,  &
                    MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPRPSLMR')
                    call AIMMS_Transfer_in_ecp(EPRPSLMR,EPRPSLMR,EPRPSLMR,EPRPSLMR,EPRPSLMR, &
                    1,             1,                1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPRPSPRR')
                    call AIMMS_Transfer_in_ecp(EPRPSPRR,EPRPSPRR,EPRPSPRR,EPRPSPRR,EPRPSPRR, &
                    1,             1,                1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPZECGEN')
                    call AIMMS_Transfer_in_ecp(EPZECGEN,EPZECGEN,EPZECGEN,EPZECGEN,EPZECGEN, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPZECPRC')
                    call AIMMS_Transfer_in_ecp(EPZECPRC,EPZECPRC,EPZECPRC,EPZECPRC,EPZECPRC, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPZECSUB')
                    call AIMMS_Transfer_in_ecp(EPZECSUB,EPZECSUB,EPZECSUB,EPZECSUB,EPZECSUB, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ERMRGN')
                    call AIMMS_Transfer_in_ecp(ERMRGN,ERMRGN,ERMRGN,ERMRGN,ERMRGN, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        ECP_D_FPH,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ETAX_FLAG')
                    call AIMMS_Transfer_in_ecp(ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,ETAX_FLAG,ETAX_FLAG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "I1",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EX_LOAD_SHIFT')
                    call AIMMS_Transfer_in_ecp(EX_LOAD_SHIFT,EX_LOAD_SHIFT,EX_LOAD_SHIFT,EX_LOAD_SHIFT,EX_LOAD_SHIFT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    12,            3,             24,            MNUMNR,        MNUMYR,        1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('FLRG_VALUE')
                    call AIMMS_Transfer_in_ecp(FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE,FLRG_VALUE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MAXNFR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('G_ANN')
                    call AIMMS_Transfer_in_ecp(G_ANN,G_ANN,G_ANN,G_ANN,G_ANN, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('G_INST_ALL')
                    call AIMMS_Transfer_in_ecp(G_INST_ALL,G_INST_ALL,G_INST_ALL,G_INST_ALL,G_INST_ALL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_CCS_F')
                    call AIMMS_Transfer_in_ecp(GRP_CCS_F,GRP_CCS_F,GRP_CCS_F,GRP_CCS_F,GRP_CCS_F, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_CCS_H')
                    call AIMMS_Transfer_in_ecp(GRP_CCS_H,GRP_CCS_H,GRP_CCS_H,GRP_CCS_H,GRP_CCS_H, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_CCS_R')
                    call AIMMS_Transfer_in_ecp(GRP_CCS_R,GRP_CCS_R,GRP_CCS_R,GRP_CCS_R,GRP_CCS_R, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_CCS_V')
                    call AIMMS_Transfer_in_ecp(GRP_CCS_V,GRP_CCS_V,GRP_CCS_V,GRP_CCS_V,GRP_CCS_V, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_CF')
                    call AIMMS_Transfer_in_ecp(GRP_CF,GRP_CF,GRP_CF,GRP_CF,GRP_CF, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_FOM')
                    call AIMMS_Transfer_in_ecp(GRP_FOM,GRP_FOM,GRP_FOM,GRP_FOM,GRP_FOM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_XPH,     MX_NGBS,       1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_HTRT')
                    call AIMMS_Transfer_in_ecp(GRP_HTRT,GRP_HTRT,GRP_HTRT,GRP_HTRT,GRP_HTRT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_XPH,     MX_NGBS,       1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_MR')
                    call AIMMS_Transfer_in_ecp(GRP_MR,GRP_MR,GRP_MR,GRP_MR,GRP_MR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_RVAL')
                    call AIMMS_Transfer_in_ecp(GRP_RVAL,GRP_RVAL,GRP_RVAL,GRP_RVAL,GRP_RVAL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_RYR')
                    call AIMMS_Transfer_in_ecp(GRP_RYR,GRP_RYR,GRP_RYR,GRP_RYR,GRP_RYR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_SP_CAP_FAC')
                    call AIMMS_Transfer_in_ecp(GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,GRP_SP_CAP_FAC,GRP_SP_CAP_FAC, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_MSP,     MX_NGBS,       1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_SYR')
                    call AIMMS_Transfer_in_ecp(GRP_SYR,GRP_SYR,GRP_SYR,GRP_SYR,GRP_SYR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('GRP_VOM')
                    call AIMMS_Transfer_in_ecp(GRP_VOM,GRP_VOM,GRP_VOM,GRP_VOM,GRP_VOM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('HTRT_RESULTS')
                    call AIMMS_Transfer_in_ecp(HTRT_RESULTS,HTRT_RESULTS,HTRT_RESULTS,HTRT_RESULTS,HTRT_RESULTS, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('MAP_NGBS_TO_GRP')
                    call AIMMS_Transfer_in_ecp(MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP,MAP_NGBS_TO_GRP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_NGBS,       1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('MAP_TO_COAL_ID')
                    call AIMMS_Transfer_in_ecp(MAP_TO_COAL_ID,MAP_TO_COAL_ID,MAP_TO_COAL_ID,MAP_TO_COAL_ID,MAP_TO_COAL_ID, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('N_CFR')
                    call AIMMS_Transfer_in_ecp(N_CFR,N_CFR,N_CFR,N_CFR,N_CFR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    1000,          1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('N_CPTY')
                    call AIMMS_Transfer_in_ecp(N_CPTY,N_CPTY,N_CPTY,N_CPTY,N_CPTY, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    1000,          1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('N_HRAT')
                    call AIMMS_Transfer_in_ecp(N_HRAT,N_HRAT,N_HRAT,N_HRAT,N_HRAT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    1000,          1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('N_IGRP')
                    call AIMMS_Transfer_in_ecp(N_IGRP,N_IGRP,N_IGRP,N_IGRP,N_IGRP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    1000,          1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('N_PLTS')
                    call AIMMS_Transfer_in_ecp(N_PLTS,N_PLTS,N_PLTS,N_PLTS,N_PLTS, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('N_RG')
                    call AIMMS_Transfer_in_ecp(N_RG,N_RG,N_RG,N_RG,N_RG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    1000,          1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('N_RY')
                    call AIMMS_Transfer_in_ecp(N_RY,N_RY,N_RY,N_RY,N_RY, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    1000,          1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('NEW_CAP_EL')
                    call AIMMS_Transfer_in_ecp(NEW_CAP_EL,NEW_CAP_EL,NEW_CAP_EL,NEW_CAP_EL,NEW_CAP_EL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('NEW_LOAD_SHIFT')
                    call AIMMS_Transfer_in_ecp(NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,NEW_LOAD_SHIFT,NEW_LOAD_SHIFT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    12,            3,             24,            MNUMNR,        MNUMYR,        1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('NUM_CL_UNIT')
                    call AIMMS_Transfer_in_ecp(NUM_CL_UNIT,NUM_CL_UNIT,NUM_CL_UNIT,NUM_CL_UNIT,NUM_CL_UNIT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('NUM_SC')
                    call AIMMS_Transfer_in_ecp(NUM_SC,NUM_SC,NUM_SC,NUM_SC,NUM_SC, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('PCARCLS')
                    call AIMMS_Transfer_in_ecp(PCARCLS,PCARCLS,PCARCLS,PCARCLS,PCARCLS, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_ST+1,    MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('PCAROGS')
                    call AIMMS_Transfer_in_ecp(PCAROGS,PCAROGS,PCAROGS,PCAROGS,PCAROGS, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_ST+1,    MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('PMDSP')
                    call AIMMS_Transfer_in_ecp(PMDSP,PMDSP,PMDSP,PMDSP,PMDSP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_MSP,     ECP_D_DSP,     MNUMNR,        1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('Ret_Cst')
                    call AIMMS_Transfer_in_ecp(Ret_Cst,Ret_Cst,Ret_Cst,Ret_Cst,Ret_Cst, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('RMAVG')
                    call AIMMS_Transfer_in_ecp(RMAVG,RMAVG,RMAVG,RMAVG,RMAVG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('RMPOOL')
                    call AIMMS_Transfer_in_ecp(RMPOOL,RMPOOL,RMPOOL,RMPOOL,RMPOOL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        MNUMNR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('S_DR')
                    call AIMMS_Transfer_in_ecp(S_DR,S_DR,S_DR,S_DR,S_DR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ST_RPS_DUALS')
                    call AIMMS_Transfer_in_ecp(ST_RPS_DUALS,ST_RPS_DUALS,ST_RPS_DUALS,ST_RPS_DUALS,ST_RPS_DUALS, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MX_ST_RPS,     ECP_D_XPH+1,   MNUMYR,        1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ST_RPS_EMM_P')
                    call AIMMS_Transfer_in_ecp(ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P,ST_RPS_EMM_P, &
                    1,             1,                1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ST_RPS_EMM_Q')
                    call AIMMS_Transfer_in_ecp(ST_RPS_EMM_Q,ST_RPS_EMM_Q,ST_RPS_EMM_Q,ST_RPS_EMM_Q,ST_RPS_EMM_Q, &
                    1,             1,                1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ST_RPS_PRC_87')
                    call AIMMS_Transfer_in_ecp(ST_RPS_PRC_87,ST_RPS_PRC_87,ST_RPS_PRC_87,ST_RPS_PRC_87,ST_RPS_PRC_87, &
                    1,             1,                1,             1,             1,             1,             1,  &
                    MX_ST_RPS,     MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('STORAGE_PROFIT')
                    call AIMMS_Transfer_in_ecp(STORAGE_PROFIT,STORAGE_PROFIT,STORAGE_PROFIT,STORAGE_PROFIT,STORAGE_PROFIT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('T_ANN')
                    call AIMMS_Transfer_in_ecp(T_ANN,T_ANN,T_ANN,T_ANN,T_ANN, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('T_DR')
                    call AIMMS_Transfer_in_ecp(T_DR,T_DR,T_DR,T_DR,T_DR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('T_OVR')
                    call AIMMS_Transfer_in_ecp(T_OVR,T_OVR,T_OVR,T_OVR,T_OVR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UCL_CGRP2')
                    call AIMMS_Transfer_in_ecp(UCL_CGRP2,UCL_CGRP2,UCL_CGRP2,UCL_CGRP2,UCL_CGRP2, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UECP_CAP')
                    call AIMMS_Transfer_in_ecp(UECP_CAP,UECP_CAP,UECP_CAP,UECP_CAP,UECP_CAP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_XPH,     ECP_D_DSP,     NDREG,         1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UECP_GEN')
                    call AIMMS_Transfer_in_ecp(UECP_GEN,UECP_GEN,UECP_GEN,UECP_GEN,UECP_GEN, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_XPH,     ECP_D_DSP,     NDREG,         1,             1,             1,             1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UCANBLD')
                    call AIMMS_Transfer_in_ecp(UCANBLD,UCANBLD,UCANBLD,UCANBLD,UCANBLD, &
                    1,             iyr,           1,             1,             1,             1,             1,  &
                    MNUMNR,        iyr,           1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ULEL')
                    call AIMMS_Transfer_in_ecp(ULEL,ULEL,ULEL,ULEL,ULEL, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        ECP_D_CAP,     1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ULOV')
                    call AIMMS_Transfer_in_ecp(ULOV,ULOV,ULOV,ULOV,ULOV, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UPBLDREG')
                    call AIMMS_Transfer_in_ecp(UPBLDREG,UPBLDREG,UPBLDREG,UPBLDREG,UPBLDREG, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UPCFGNN')
                    call AIMMS_Transfer_in_ecp(UPCFGNN,UPCFGNN,UPCFGNN,UPCFGNN,UPCFGNN, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UPGSMX')
                    call AIMMS_Transfer_in_ecp(UPGSMX,UPGSMX,UPGSMX,UPGSMX,UPGSMX, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UPGSTY')
                    call AIMMS_Transfer_in_ecp(UPGSTY,UPGSTY,UPGSTY,UPGSTY,UPGSTY, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UPOVRBLD')
                    call AIMMS_Transfer_in_ecp(UPOVRBLD,UPOVRBLD,UPOVRBLD,UPOVRBLD,UPOVRBLD, &
                    1,                1,             1,             1,             1,             1,             1,  &
                    MNUMYR+ECP_D_XPH, 1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UPSEQBLM')
                    call AIMMS_Transfer_in_ecp(UPSEQBLM,UPSEQBLM,UPSEQBLM,UPSEQBLM,UPSEQBLM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMYR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UPWDCFN')
                    call AIMMS_Transfer_in_ecp(UPWDCFN,UPWDCFN,UPWDCFN,UPWDCFN,UPWDCFN, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_CAP,     MNUMNR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UPWDCFR')
                    call AIMMS_Transfer_in_ecp(UPWDCFR,UPWDCFR,UPWDCFR,UPWDCFR,UPWDCFR, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    ECP_D_DSP,     NDREG,         1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('URCARWT')
                    call AIMMS_Transfer_in_ecp(URCARWT,URCARWT,URCARWT,URCARWT,URCARWT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('URELPRC')
                    call AIMMS_Transfer_in_ecp(URELPRC,URELPRC,URELPRC,URELPRC,URELPRC, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    3,             MNUMNR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('URELRSV')
                    call AIMMS_Transfer_in_ecp(URELRSV,URELRSV,URELRSV,URELRSV,URELRSV, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    3,             MNUMNR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('URELTGT')
                    call AIMMS_Transfer_in_ecp(URELTGT,URELTGT,URELTGT,URELTGT,URELTGT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('URNCSTEX_ECP')
                    call AIMMS_Transfer_in_ecp(URNCSTEX_ECP,URNCSTEX_ECP,URNCSTEX_ECP,URNCSTEX_ECP,URNCSTEX_ECP, &
                    1,             1,             iyr,           1,             1,             1,             1,  &
                    ECP_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('URNCSTEX_EFD')
                    call AIMMS_Transfer_in_ecp(URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD,URNCSTEX_EFD, &
                    1,             1,             iyr,           1,             1,             1,             1,  &
                    EFD_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('URNCSTIM_ECP')
                    call AIMMS_Transfer_in_ecp(URNCSTIM_ECP,URNCSTIM_ECP,URNCSTIM_ECP,URNCSTIM_ECP,URNCSTIM_ECP, &
                    1,             1,             iyr,           1,             1,             1,             1,  &
                    ECP_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('URNCSTIM_EFD')
                    call AIMMS_Transfer_in_ecp(URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD,URNCSTIM_EFD, &
                    1,             1,             iyr,           1,             1,             1,             1,  &
                    EFD_D_MSP,     MNUMNR,        iyr,           1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UTCO2PEM')
                    call AIMMS_Transfer_in_ecp(UTCO2PEM,UTCO2PEM,UTCO2PEM,UTCO2PEM,UTCO2PEM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    8,             MNUMYR,        1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('UYR_CARWE')
                    call AIMMS_Transfer_in_ecp(UYR_CARWE,UYR_CARWE,UYR_CARWE,UYR_CARWE,UYR_CARWE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('W_INT')
                    call AIMMS_Transfer_in_ecp(W_INT,W_INT,W_INT,W_INT,W_INT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    WPLT_D_RGN,    WPLT_D_GRP,    1,             1,             1,             1,             1,  &
                    "I2",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('WGRP_NXT')
                    call AIMMS_Transfer_in_ecp(WGRP_NXT,WGRP_NXT,WGRP_NXT,WGRP_NXT,WGRP_NXT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('WNEWGRP')
                    call AIMMS_Transfer_in_ecp(WNEWGRP,WNEWGRP,WNEWGRP,WNEWGRP,WNEWGRP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    WPLT_D_RGN,    EFD_D_CAP,     EFD_D_OWN,     EFD_D_MFRG+1,  1,             1,             1,  &
                    "I2",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('WNGRPS')
                    call AIMMS_Transfer_in_ecp(WNGRPS,WNGRPS,WNGRPS,WNGRPS,WNGRPS, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    WPLT_D_RGN,    1,             1,             1,             1,             1,             1,  &
                    "I2",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('WNXT_SGRP')
                    call AIMMS_Transfer_in_ecp(WNXT_SGRP,WNXT_SGRP,WNXT_SGRP,WNXT_SGRP,WNXT_SGRP, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
                    "I2",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('WREC_NXT')
                    call AIMMS_Transfer_in_ecp(WREC_NXT,WREC_NXT,WREC_NXT,WREC_NXT,WREC_NXT, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "I4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('WTYPE')
                    call AIMMS_Transfer_in_ecp(WTYPE,WTYPE,WTYPE,WTYPE,WTYPE, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    EMM_D_GRP,     1,             1,             1,             1,             1,             1,  &
                    "I2",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ZTIMPF')
                    call AIMMS_Transfer_in_ecp(ZTIMPF,ZTIMPF,ZTIMPF,ZTIMPF,ZTIMPF, &
                    1,             iyr,           1,             1,             1,             1,             1,  &
                    MNUMNR,        iyr,           1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('ZTIMPD')
                    call AIMMS_Transfer_in_ecp(ZTIMPD,ZTIMPD,ZTIMPD,ZTIMPD,ZTIMPD, &
                    1,             iyr,           1,             1,             1,             1,             1,  &
                    MNUMNR,        iyr,           1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPMSLIM')
                    call AIMMS_Transfer_in_ecp(EPMSLIM,EPMSLIM,EPMSLIM,EPMSLIM,EPMSLIM, &
                    1,             1,             1,             1,             1,             1,             1,  &
                    MNUMNR,        ECP_D_MXP,     ECP_D_CAP,     ECP_D_DGS,     ECP_D_OWN,     ECP_D_XPH,     1,  &
                    "R8",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
!==================================================================================================================================
!  Read pass-back variables to be stored in DAF files: read the DAF record for the region/year; read the data; store the DAF record
!==================================================================================================================================
     CASE('EPALLNOX')
                    call AIMMS_Transfer_in_ecp(EPALLNOX,EPALLNOX,EPALLNOX,EPALLNOX,EPALLNOX, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      NOX_D_GRP,     ECP_D_XPH,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPBANK')
                    call AIMMS_Transfer_in_ecp(EPBANK,EPBANK,EPBANK,EPBANK,EPBANK, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      SCALAR,        1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPLVBCK')
                    call AIMMS_Transfer_in_ecp(EPLVBCK,EPLVBCK,EPLVBCK,EPLVBCK,EPLVBCK, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPLVCAP')
                    call AIMMS_Transfer_in_ecp(EPLVCAP,EPLVCAP,EPLVCAP,EPLVCAP,EPLVCAP, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     2,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPLVEXT')
                    call AIMMS_Transfer_in_ecp(EPLVEXT,EPLVEXT,EPLVEXT,EPLVEXT,EPLVEXT, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPLVFCF')
                    call AIMMS_Transfer_in_ecp(EPLVFCF,EPLVFCF,EPLVFCF,EPLVFCF,EPLVFCF, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     2,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPLVFLC')
                    call AIMMS_Transfer_in_ecp(EPLVFLC,EPLVFLC,EPLVFLC,EPLVFLC,EPLVFLC, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPLVFOM')
                    call AIMMS_Transfer_in_ecp(EPLVFOM,EPLVFOM,EPLVFOM,EPLVFOM,EPLVFOM, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPLVTRN')
                    call AIMMS_Transfer_in_ecp(EPLVTRN,EPLVTRN,EPLVTRN,EPLVTRN,EPLVTRN, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPLVVOM')
                    call AIMMS_Transfer_in_ecp(EPLVVOM,EPLVVOM,EPLVVOM,EPLVVOM,EPLVVOM, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPPLNM')
                    call AIMMS_Transfer_in_ecp(EPPLNM,EPPLNM,EPPLNM,EPPLNM,EPPLNM, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     ECP_D_MSP,     1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPRENEW')
                    call AIMMS_Transfer_in_ecp(EPRENEW,EPRENEW,EPRENEW,EPRENEW,EPRENEW, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_XPH,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPRMRGN')
                    call AIMMS_Transfer_in_ecp(EPRMRGN,EPRMRGN,EPRMRGN,EPRMRGN,EPRMRGN, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_XPH,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
     CASE('EPTAVD')
                    call AIMMS_Transfer_in_ecp(EPTAVD,EPTAVD,EPTAVD,EPTAVD,EPTAVD, &
                      1,             1,             1,             1,             1,             1,             1,  &
                      ECP_D_CAP,     1,             1,             1,             1,             1,             1,  &
                    "R4",LcolumnStart,LcolumnEnd,FieldName,nfields,iunit)
   END SELECT
!---------------------------------------------------------------------------------------------------------
! end of ecp code generated by arraycode.f and written to passback_code_ecp.f
!---------------------------------------------------------------------------------------------------------
   go to 20  ! find next composite table

99 close(iunit)
! assume data for last region is last, so write the last regional record     
   if(irg.lt.mnumnr.and.irg.gt.0) call strin(1,irg)
   if(irg.le.UNRGNS.and.irg.gt.0) call strout(iyr,irg)
   if(aim_phase.eq.2.and.irg.le.unrgns.and.irg.ge.1) then
     call strbld(1,irg)
     call strbout(iyr,irg)
   endif
   call streij(iyr)

 ! read in the first region, just in case (so ECNTP will not be zero)
   call getin(1,1)   
   call getout(iyr,1)
 return  

 end subroutine AIMMS_InTxtVar_ecp
!================================================================================================================
   subroutine AIMMS_InTxt_ecp
! This reads column and row solutions from AIMMS Solution file as created by AIMMS WriteToNEMS procedure.
! Most of the data is in the aimms composite table format. A header line indicates the field names: set names and then 5 solution value fields for columns;4 fields for rows
! with the identifier shown as the first solution field after the set names.  The ".level" attribute is not attached to the identifier name on the first header field.
! For example:
! 
! Some of the solution ddata is for scalars and these are in an assignment-statement format, indicated by lines with the assignment operator  ":=".
!
! So this routine handles both table and scalar formats by detecting when a new composite table starts or when a new assignment statement is found.
!
! It then determines whether the solution identifier is  an OML row or column and handles each separately.
!
! As such, there are 4 subroutines "contained" in this subroutine to process the 4 types of data. The sections are indicated as follows:
! 1) scalar, OML Column identifier :  contained subroutine store_ecp_col_sol
! 2) scalar, OML Row    identifier :  contained subroutine store_ecp_row_sol
! 3) table,  OML Column identifier :  contained subroutine store_ecp_col_scalar
! 4) table,  OML Row    identifier :  contained subroutine store_ecp_row_scalar

! On each composite table record, there are 4 or 5 columns of solution data (5 for variables, 4 for constraints).
!  These solution values are used to replace 5 standard OML solution items retrieved with these option strings:
!  ROWSOL='ASLUP' and COLSOL='ACLUD', as follows:
! A activity or level
! C cost , ie. objective coefficient
! L lower bound for column or lower limit for row
! U upper bound or limit
! P shawdow Price  or D reDucedCost

! A complication:  the headers showing set names are AIMMS alias for different versions of the sets (of different length) as used to construct OML names, or refer to sets used
! multiple times in an identifer, such as region_ALTfrom and region_ALTto.  The AIMMS set elements read from the file for these aliases are those for the primary set with "_ALT*" omitted,
! so often these set elements must be translated from the primary set version to the alternate set version used in the OML names.

   use ecp_row_col
   implicit none
   include 'parametr'
   include 'ncntrl'
   
   character*80 filen/' '/
   real(KIND=8) rfield(5),inf/0.1797693134862315708145E+309/
   
   integer setIDs(max_domain_sets)
   character*(32)      setcopies(max_domain_sets)
   integer Lcolumnstart(0:12)
   integer Lcolumnend(0:12)
   character*40 fieldname(0:12),fields(0:12) ! allocate space for 13 fields, or 12 starting at 1
   integer iUnit/-1/,min_unit/100/,ifound
   character*216 line
   character*216 header
   logical backwards/.true./,scalar,first_scalar,dash,goto10
   character*24 identifier
   integer nline,idot,ispace,lline,nfields,nsets,ic,ir,isol,i,imatch,j,lm,la,lf,icode,fs,s,L
   character*5 afield,setname*32
   logical withSafety,withoutSafety,lopened
   integer iret,idbg
   
   character*4 iden_type/' '/
   character*5 zeroes/'00000'/
   character*16 wfield(5)

! for AIMMS validation, check for cplex mps file. if found, copy to new file named with model year and iteration.
   write(line,'(a,i4,a)') 'if exist .\ecp\cpx00000.mps copy /Y .\ecp\cpx00000.mps .\ecp\cpx_',curcalyr,'.mps'
   call callsys(iret,line)  ! calls a subroutine in main.f to send the command to the system  like a console command.
   line=' '   

! for AIMMS validation, check for ecp.lis file that includes aimms-to-cplex crosswalk. if found, copy to new file named with model year and iteration.
   write(line,'(a,i4,a)') 'if exist .\ecp\log\ecp.lis copy /Y .\ecp\log\ecp.lis .\ecp\log\ecp_',curcalyr,'.lis'
   call callsys(iret,line)  ! calls a subroutine in main.f to send the command to the system  like a console command.
   line=' '   

! for AIMMS debugging, check for messages.log file that includes aimms status messages. if found, copy to new file named with model year and iteration.
   write(line,'(a,i4,a)') 'if exist .\ecp\log\messages.log copy /Y .\ecp\log\messages.log .\ecp\log\messages_',curcalyr,'.log'
   call callsys(iret,line)  ! calls a subroutine in main.f to send the command to the system  like a console command.
   line=' '   

! for AIMMS debugging, check for aimms.err file that includes aimms error messages. if found, copy to new file named with model year and iteration.
   write(line,'(a,i4,a)') 'if exist .\ecp\log\aimms.err copy /Y .\ecp\log\aimms.err .\ecp\log\aimms_',curcalyr,'.err'
   call callsys(iret,line)  ! calls a subroutine in main.f to send the command to the system  like a console command.
   line=' '   

   write(filen,'(a,i4,a)')  './ecp/OutToNEMS_',curcalyr,'.txt'
   num_ecp_col_sol=0
   call unitunopened(100,999,IUNIT)
   open(iunit,file=filen,FORM='FORMATTED',ACCESS = 'SEQUENTIAL',STATUS='UNKNOWN')

! open column and row solution retrieval debug files
   if(colunit.gt.0) then
     close(colunit)
   endif
   if(rowunit.gt.0) then
     close(rowunit)
   endif

  IF (AIMECPBG.eq.1) THEN
   call unitunopened(100,999,colunit)
   write(filen,'(a,i4,a)') 'ecp_soln_cols_',curcalyr,'.txt'
   open(colunit,file=filen,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
   rewind colunit
   
   call unitunopened(100,999,rowunit)
   write(filen,'(a,i4,a)') 'ecp_soln_rows_',curcalyr,'.txt'
   open(rowunit,file=filen,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
   rewind rowunit
   ENDIF

   nline=0
   num_ecp_col_sol=0
   withSafety=.false.
   withoutSafety=.false.
! read first two lines that have solution status for problems "WithoutSafety" and "WithSafety"
   read (iunit,'(a)',end=999) line
   write(6,*) 'AIMMS Interface: '//trim(line(4:))  ! first 3 characters in the file are garbage.
   if(index(line,'Optimal').gt.0) then
     withoutSafety=.true.
   endif
   read (iunit,'(a)') line
   read (iunit,'(a)') line
   if(index(line,'Optimal').gt.0) then
     withSafety=.true.   
   endif
   write(6,*) 'AIMMS Interface ECP: '//trim(line)
   if ( (.not.  withoutSafety) .and. (.not. withSafety)) then 
     write(6,*)'AIMMS Interface: Optimal ECP Solution not found.'
     goto 99
   endif
     
   
! Return here from below until the end of file is reached. then go down to 99 continue
10 continue
! find another line. Find start of next composite table or else an assignment statement:
     read(iunit,'(a)',end=99) line   
     nline=nline+1   ! keep track of file line numbers for debugging and error messages
     if(len_trim(line).eq.0) go to 10

     scalar=.false.
     
     ifound=index(line,':=')  ! indication of scalar so solution values not written as composite table
     if(ifound.gt.0) then
       nsets=0
       nfields=1
       scalar=.true.
       header=line
       row_type=' '
       first_scalar=.true.  ! indicates the the current line holds the assignment for the first of 4 scalars.
       ! get row/column name
       idot=index(header,':=')
! determine if r or c:
       identifier=adjustl(header(:idot-1))
       if (identifier(1:1).eq.'c') then
         iden_type='col '
       elseif (identifier(1:1).eq.'r') then
         iden_type='row '
         L=len_trim(identifier)
         if(identifier(L:L).eq.'n') then
           row_type='N'
         else
           row_type=identifier(L-1:L-1)  ! ' eq, le, ge, ==> E, L, or G
           call low2up(row_type,1)
         endif
       elseif (identifier(1:8).eq.'ECPCOSTS') then
         iden_type='row '
         row_type='N'
       else
         write(6,'(a)')'AIMMS Interface error ECP: identifier type could not be determined for '//trim(identifier)//' in line: '//trim(header)
         go to 10
       endif

       
     else
       scalar=.false.  
       first_scalar=.false.
     endif
   
     ifound=index(line,'Composite table:')
     if(ifound.gt.0) then
!  Next line will have the header that identifies the column-variable (starts with c, unless a free row implemented as a variable) or row-constraint (starts with r, unless...)
       read(iunit,'(a)',end=99) header
       nline=nline+1

! get row/column name
       idot=index(header,'.',backwards)
! determine if r or c:
       if(idot.eq.0.and. scalar) then
         idot=index(header,':')
       elseif(idot.eq.0)then
         idot=len_trim(header)
         if(header(idot:idot).eq.'n') then  ! looking for free row, identifier ends in lower case n. implemented as parameter. composite table has only one value field, no dots
           idot=idot+1
           header(idot:idot)='.'  ! fake it
         else
           idot=0
         endif
       endif       
       if(idot.eq.0) then
         write(6,'(a)')'AIMMS Interface error ECP: header with identifier not found for composite table in '//trim(filen)
         go to 10
       endif
       ispace=index(header(1:idot),' ',backwards)
       identifier=header(ispace+1:idot-1)
       if (identifier(1:1).eq.'c'.and.(index(header,'ReducedCost').gt.0 .or. scalar)) then
         iden_type='col '
       elseif (identifier(1:1).eq.'r'.and.(index(header,'ReducedCost').gt.0 .or. scalar)) then ! in case some free rows are implemented as columns instead of parameter
         iden_type='free'
         row_type='N'
       elseif (identifier(1:1).eq.'r') then
         L=len_trim(identifier)
         if(identifier(L:L).eq.'n') then
           iden_type='free'
           row_type='N'
         else
           row_type=identifier(L-1:L-1)  ! ' eq, le, ge, ==> E, L, or G
           call low2up(row_type,1)
           iden_type='row '
         endif

       elseif (identifier(1:8).eq.'ECPCOSTS') then
         iden_type='row '
         row_type='N'
         identifier(9:)= ' '
       else
         write(6,'(a)')'AIMMS Interface error ECP:  identifier type could not be determined for '//trim(identifier)//' in line: '//trim(header)
         go to 10
       endif

 ! get underscore line and use it to determine column positions for each field 
       read(iunit,'(a)',end=99) line
       nline=nline+1
       if(index(line,'!').eq.0 .or. index(line,'--').eq.0) then  
       ! not an underscore comment line
         write(6,'(a)')'AIMMS Interface error ECP:  no comment or underscore line where expected in line: '//trim(line)
         goto 10
       endif   
     
       LLINE=len_trim(line)+1
       nfields=0
       lcolumnstart=0
       lcolumnend=0
       fieldname=' '
       fields=' '
     
       dash=.false.
       do i=1,LLINE
         if(.not. dash .and. line(i:i).eq.'-') then
           nfields=nfields+1
           dash=.true.
           Lcolumnstart(nfields)=i
         elseif(dash .and. line(i:i).ne.'-') then
           dash=.false.
           Lcolumnend(nfields)=i-1
           fieldname(nfields)=adjustl(header(Lcolumnstart(nfields):Lcolumnend(nfields))) ! adjustl: remove leading blanks
         endif
       enddo
       if(iden_type.eq.'col') then  ! should be 5 fields for each column solution header record and 1 field for each set in the index space
         if(nfields.le.5 ) then  ! should be 5 value fields for each column solution record and 1 field for each set in the index space
           write(6,'(a,i6)') 'AIMMS Interface error ECP:  not enough fields found in this solution header '//trim(header)//' on line:',nline
           go to 10
         endif
         nsets=nfields-5  ! number of sets in the index space. 0 is for scalar
       elseif( iden_type.eq.'row' ) then  ! should be 4 fields for each row solution header record and 1 field for each set in the index space
         if ( nfields .le. 4 ) then  ! should be 4 value fields for each row solution record and 1 field for each set in the index space
           write(6,'(a,i6)') 'AIMMS Interface error ECP:  not enough fields found in this solution header '//trim(header)//' on line:',nline
           go to 10
         endif
         nsets=nfields-4  ! number of sets in the index space. 0 is for scalar
       elseif( iden_type.eq.'free' ) then  ! should be 1 fields in solution header record 1 for each field in the index space
         if ( nfields .le. 1 ) then  ! should be 1 field for the solution value  and 1 field for each set in the index space
           write(6,'(a,i6)') 'AIMMS Interface error ECP:  not enough fields found in this solution header '//trim(header)//' on line:',nline
           go to 10
         endif
         nsets=nfields-1  ! number of sets in the index space. 0 is for scalar
       endif
     endif ! of ... if found "composite table" 
! 
! At this point, line can be header for a composite table or an assignment for a scalar
     if (iden_type .eq. 'col ') then
       ic=-1
       call usehash(identifier, colname_hash, max_col_aimms, ic, initial_store)
       if(initial_store) then
         write(6,'(a)') 'AIMMS Interface error ECP: aimms identifier not found: '//trim(identifier)//' from this table header: '//trim(header)
         colname_hash(ic)= ' ' ! reset hash key to blank since this identifier shouldn't be added to the hash list at this point
         goto 10
       endif
       aimms_col_ID_num=col_aimms_ptr(ic)  
     elseif (iden_type .eq. 'row ' .or. iden_type .eq. 'free') then
       ir=-1
       if(index(identifier,'.').gt.0  .and. iden_type.ne.'free') then
         identifier(  index(identifier,'.')  :) = ' '
       endif
       call usehash(identifier, rowname_hash, max_row_aimms, ir, initial_store)
       if(initial_store) then
         write(6,'(a)') 'AIMMS Interface error ECP: aimms identifier not found: '//trim(identifier)//' from this table header: '//trim(header)
         rowname_hash(ir)= ' ' ! reset hash key to blank since this identifier shouldn't be added to the hash list at this point
         goto 10
       endif
       aimms_row_ID_num=row_aimms_ptr(ir) 
     endif

! return here from below until the composite table data ends with a ";" or a new composite table starts following some scalar assignment statements,
! or the end of the file is reached.  For scalars, the first scalar is in "line" read at 10 above. But then control returns here to read the next three.
20   continue
     if(.not.scalar  .or.  (.not. first_scalar)) then
       read(iunit,'(a)',end=99) line
       nline=nline+1
     endif
     if(index(line,';').gt.1 .and. (.not. scalar)) then
       goto 10  ! composite tables end with a ";" on a new line.  Go back up to search for next table.
     endif
     if(index(line,'Composite').gt.0) then  ! can happen after processing assignment statements. so backspace file 1 line and go to top to re-read line and restart table processing.
       backspace iunit 
       nline=nline-1
       goto 10
     endif
     if(index(line,'!').ge.1) then 
       goto 20  ! some tables have additional header lines to indicate the default values (such as 0 or Inf) to be assumed for each blank solution entry.
     endif

     if(len_trim(line).eq.0) then
       if(.not.scalar) then
         goto 20
       else
! there is a blank line between two successive scalars.  If a blank line is encountered when the solution records for a scalar,
! return to start of read loop to start processing next scalar.       
         goto 10
       endif
     endif

! Scalar processing:     
     if(nsets.eq.0 .and. index(line,':=').gt.0) then
       scalar=.true.
     
       if (iden_type .eq. 'col ') then
! 1) read scalar solution values from multiple lines, OML Column Identifier
         call store_ecp_col_scalar

       elseif (iden_type .eq. 'row ' .or. iden_type .eq.'free') then
! 2) read scalar solution values from multiple lines, OML Row Identifier
         call store_ecp_row_scalar
       endif
       first_scalar=.false.

       goto 20  ! get next record in this group of scalar assignment statements

     endif     ! of scalar processing... if(nsets.eq.0 .and. index(line,':=').gt.0) then

! if here, the lines are part of a composite table, not scalar assignments. Determine set elements and construct the OML column or row name based on the column or row mask.
! Store solution values with the OML column or row name it matches    
     do i=1,nfields
       fields(i)=adjustl(line(Lcolumnstart(i):Lcolumnend(i))) ! adjustl: remove leading blanks
     enddo   

     if (iden_type .eq. 'col ') then

! 3) Process lines from composite table, OML column identifier    
        call store_ecp_col_sol
        if(goto10) goto 10
     elseif (iden_type .eq. 'row ' .or. iden_type .eq. 'free') then

! 4) Process lines from composite table, OML row identifier
        call store_ecp_row_sol
        if(goto10) goto 10
         
     endif     
     go to 20  ! get next record in this composite table

99 close(iunit)
   
! write AIMMS solution records to debug file
 if(aimecpbg.eq.1) then
   write(filen,'(a,i4,a)') 'ecp_aimms_soln_debug_',curcalyr,'.txt'
   call unitunopened(100,999,IUNIT)
   open(iunit,file=filen,status='unknown',BUFFERED='YES',BUFFERCOUNT=10)
   rewind iunit
 endif

! column solutions
   do i=1,num_ecp_col_sol
     ecpcolnam=col_sol_names(i) ! sequence of oml cols names as read from AIMMS solution file
! use hash table for col names for fast lookup of solution record "s"
! based on the col name.
     call usehash(ecpcolnam, ecp_col_name, max_ecp_col_hash, s, initial_store)

     aimms_col_ID_num=ecp_col_sol(s).aimms_col_ID_num
     nsets=ecp_col_sol(s).nsets
     if(aimms_col_ID_num.ge.0) then
       do j=1,5
         if(ecp_col_sol(s).solval(j).gt.999999999.) then
           wfield(j)='       inf'
         elseif(ecp_col_sol(s).solval(j).le.-99999999.) then
           wfield(j)='      -inf'
         else
           write(wfield(j),'(F16.6)')  ecp_col_sol(s).solval(j)
         endif
       enddo 
       ecp_col_sol(s).status=' '
       if(ecp_col_sol(s).solval(3) .eq. ecp_col_sol(s).solval(4) .and.  &
          ecp_col_sol(s).solval(1) .eq. ecp_col_sol(s).solval(3)) then

                 ecp_col_sol(s).status='EQ'

       elseif(ecp_col_sol(s).solval(1) .eq. ecp_col_sol(s).solval(4)) then

                 ecp_col_sol(s).status='UL'

       elseif(ecp_col_sol(s).solval(1).eq.ecp_col_sol(s).solval(3)) then

                ecp_col_sol(s).status='LL'

       elseif(ecp_col_sol(s).solval(1) .gt. ecp_col_sol(s).solval(3) .and. &
              ecp_col_sol(s).solval(1) .lt. ecp_col_sol(s).solval(4)) then

                ecp_col_sol(s).status='BS'

       endif
       if(aimecpbg.eq.1)then
         if(aimms_col_ID_num.ge.0) then 
           write(iunit,'(i6,i4,1x,a,1x,a,1x,I1,1x,<max_set>(a5,1x),a,5a16,1x,a2)') i, &
                                 aimms_col_ID_num, &
                       col_aimms(aimms_col_ID_num).colnam_aimms, &
                       col_aimms(aimms_col_ID_num).colnam_mask,  &
                       nsets, &
                       ecp_col_sol(s).cset_elements(1:max_set), &
                       ecp_col_sol(s).ecpcolnam, wfield(1:5),ecp_col_sol(s).status
         else
           write(iunit,'(i6,i4,1x,a24,1x,a30,1x,I1,1x,<max_set>(a5,1x),a,5a16,1x,a2)') i, &
                                 aimms_col_ID_num, &
                       ' ', &
                       ' ',  &
                       nsets, &
                       ecp_col_sol(s).cset_elements(1:max_set), &
                       ecpcolnam, wfield(1:5),ecp_col_sol(s).status
         endif
       endif
     endif
   enddo
! row solutions   
   do i=1,num_ecp_row_sol
     ecprownam=row_sol_names(i) ! sequence of oml row names as read from AIMMS solution file
     row_type=row_sol_types(i)
! use hash table for row names for fast lookup of solution record "s"
! based on the row name.
     call usehash(ecprownam, ecp_row_name, max_ecp_row_hash, s, initial_store)
     if(ecp_row_sol(s).row_type .ne. row_type) then  ! for example, aimms writes solution for two row types, but only one is used (CARBONAB)
!       write(6,'(a)') 'AIMMS Interface: skipping solution for '//ecprownam//' with row_type of '//row_type//'. Latest row type is '//ecp_row_sol(s).row_type
        cycle  ! skip the rest of this i iteration and continue do loop
     endif
     aimms_row_ID_num=ecp_row_sol(s).aimms_row_ID_num
       nsets=ecp_row_sol(s).nsets
       do j=1,5
         if(ecp_row_sol(s).solval(j).gt.999999999.) then
           wfield(j)='       inf'
         elseif(ecp_row_sol(s).solval(j).le.-99999999.) then
           wfield(j)='      -inf'
         else
           write(wfield(j),'(F16.6)')  ecp_row_sol(s).solval(j)
         endif
       enddo
       ecp_row_sol(s).status=' '
       if(row_type.eq.'N') then
          ecp_row_sol(s).status='FR'
       elseif(ecp_row_sol(s).solval(3) .eq. ecp_row_sol(s).solval(4) .and. &
              ecp_row_sol(s).solval(1) .eq. ecp_row_sol(s).solval(3)) then
              
                ecp_row_sol(s).status='EQ'
                
       elseif(ecp_row_sol(s).solval(1) .eq. ecp_row_sol(s).solval(4)) then
       
                ecp_row_sol(s).status='UL'
                
       elseif(ecp_row_sol(s).solval(1) .eq. ecp_row_sol(s).solval(3)) then
       
                ecp_row_sol(s).status='LL'
                
       elseif(ecp_row_sol(s).solval(1) .gt. ecp_row_sol(s).solval(3) .and.  &
              ecp_row_sol(s).solval(1) .lt. ecp_row_sol(s).solval(4)) then
              
                ecp_row_sol(s).status='BS'
       endif
       if(AIMECPBG.eq.1) then
        if(aimms_row_ID_num.ge.0) then
          write(iunit,'(i6,i4,1x,a,1x,a,1x,I1,1x,<max_set>(a5,1x),a,5A16,1x,a2)') i, &
                                 aimms_row_ID_num, &
                       row_aimms(aimms_row_ID_num).rownam_aimms, &
                       row_aimms(aimms_row_ID_num).rownam_mask,  &
                       nsets, &
                       ecp_row_sol(s).cset_elements(1:max_set), &
                       ecp_row_sol(s).ecprownam, wfield(1:5),ecp_row_sol(s).status
        else
          write(iunit,'(i6,i4,1x,a24,1x,a30,1x,I1,1x,<max_set>(a5,1x),a,5A16,1x,a2)') i, &
                                 aimms_row_ID_num, &
                       ' ', &
                       ' ',  &
                       nsets, &
                       ecp_row_sol(s).cset_elements(1:max_set), &
                       ecprownam, wfield(1:5),ecp_row_sol(s).status
        endif
       endif
   enddo
   if (aimecpbg.eq.1) close(iunit)

999   return
   
   CONTAINS
!
!  The following four subroutines share the declarations in the subroutine above because they are within the scope its "CONTAINS" definition
!===========================================================================================================================================
       subroutine store_ecp_col_sol
       implicit none
       goto10=.false.
! 3) Process lines from composite table, OML column identifier    
        if(aimms_col_ID_num.ge.0) then
          num_ecp_col_sol=num_ecp_col_sol+1  ! count of solution records
          if(num_ecp_col_sol .gt. max_ecp_col) then
            write(6,'(a)') 'AIMMS Interface error ECP:  max_ecp_col exceeded in store_ecp_col_sol. stopping.'
            stop
          endif
! make sure the sets identified in the composite header match those set names defined for the col_aimms column
          imatch=0
          do i=1,nsets
            if(col_aimms(aimms_col_ID_num).setnam(i).eq.fieldname(i)) then
               imatch=imatch+1
            endif
          enddo
          if(imatch.eq.nsets) then
!============================================================================================
! construct OML column name from the mask and set elements. If not an alias column, just use the elements as they are
             ecpcolnam=' '
             lm=index(col_aimms(aimms_col_ID_num).colnam_mask, '!')  ! '!' is used to tag versions of the same mask, so use that as the length
             if(lm.gt.1) then
               lm=lm-1
             else
               lm=len_trim(col_aimms(aimms_col_ID_num).colnam_mask)
             endif
             j=0
             do i=1, lm
               if( index('()', col_aimms(aimms_col_ID_num).colnam_mask(i:i)) .eq.0) then  ! pass over any special masking characters in search of the constants
                 j=j+1
                 ecpcolnam(j:j)=col_aimms(aimms_col_ID_num).colnam_mask(i:i)         
               endif
             enddo
             cindstt(1:max_set)=col_aimms(aimms_col_ID_num).indstt(1:max_set)
             cindend(1:max_set)=col_aimms(aimms_col_ID_num).indend(1:max_set)
             do i=1,nsets
               afield=fields(i)  ! this field is a set element. 
               if( index(fieldname(i),'_ALT').gt.1) then  ! check for alias set name. if so, need to use primary set name to decode the element, then convert to the alternate alias element
                 la=len_trim(afield)
                 setname=fieldname(i)(1: index(fieldname(i),'_ALT') -1  )  ! strip off _ALT stuff to get AIMMS primary set name used in the composite table fields
                 call get_ecp_set_element(setname,afield(:la),icode)         ! get the integer (ordinal) code for the set element 
                 if(icode.gt.0) then
                    call get_ecp_char_element(fieldname(i),icode,afield,ifound)
                    la=len_trim(afield)
                 endif
                 if(icode.eq.0 .or. ifound.eq.0 .or. la.ne.(cindend(i)-cindstt(i)+1)) then
                   write(6,'(3a)') 'AIMMS Interface error ECP with '//trim(identifier)// &
                    ' solution. Could not get aliased set element for field: '//trim(fields(i))//' for set: '//trim(fieldname(i))//' and '//trim(setname)
                   goto10=.true.
                   return
                 endif
               endif
               if(cindstt(i).gt.0) then
                 lf=cindend(i)-cindstt(i)+1
                 la=len_trim(afield)
                 if(len_trim(afield).lt.lf) then ! left pad integer set elements with 0
                   afield=zeroes(1:lf-la)//afield
                 endif  
                 ecpcolnam(cindstt(i):cindend(i)) = afield(:lf)
               endif
             enddo
             col_sol_names(num_ecp_col_sol)=ecpcolnam
!===================  end construct OML column name ===============================================
! store col solution to a spot "s" from a hash table for fast lookup, based on the col name.
             call usehash(ecpcolnam, ecp_col_name, max_ecp_col_hash, s, initial_store)

             rfield=0
 ! read each numeric field from the 5 solution fields      
             do i=nsets+1,nfields
               rfield(i-nsets)=0.
               fs=len_trim(fields(i))
               if(fs.gt.0) then
                 if(index(fields(i),'-inf').gt.0) then
                   rfield(i-nsets)=-inf  ! smallest double precision real
                 elseif (index(fields(i),'inf').gt.0) then
                   rfield(i-nsets)=inf  ! largest double precision real
                 elseif (index(fields(i),'zero').gt.0) then
                   rfield(i-nsets)=0. 
                 else
                   read(fields(i),*) rfield(i-nsets)
                 endif
               elseif(i-nsets.eq.4) then ! default upper limit is infinity
                 rfield(4)=inf
               endif
             enddo
             if(s.ge.0) then
               ecp_col_sol(s).ecpcolnam = ecpcolnam
               ecp_col_sol(s).solval(1) = rfield(1)
               ecp_col_sol(s).solval(2) = rfield(2)
               ecp_col_sol(s).solval(3) = rfield(3)
               ecp_col_sol(s).solval(4) = rfield(4)
               ecp_col_sol(s).solval(5) = rfield(5)

               ecp_col_sol(s).aimms_col_ID_num = aimms_col_ID_num
! store set elements from each set field          
               ecp_col_sol(s).nsets = nsets
               do i=1,nsets
                 ecp_col_sol(s).cset_elements(i)=fields(i)
               enddo
             else
               write(6,'(a,i6)') 'AIMMS Interface error: ECP: bad hash index from column name: '//ecpcolnam//' so may need to increase max_ecp_col_hash'
             endif
          else
            write(6,'(a,i6)') 'AIMMS Interface error: ECP: index set mismatch on solution for identifier '//trim(identifier)//' line #',nline
          endif
        else
          write(6,'(3a)') 'AIMMS Interface error ECP: aimms_col_ID_num<0 reading column solution in subroutine store_ecp_col_sol'
          goto10=.true.
       endif

       return
       end subroutine store_ecp_col_sol   
!=====================================================================================================================================
       subroutine store_ecp_row_sol
       implicit none
       goto10=.false.
! 4) Process lines from composite table, OML row identifier
        if(aimms_row_ID_num.ge.0) then
          num_ecp_row_sol=num_ecp_row_sol+1   ! count of solution records
          if(num_ecp_row_sol .gt. max_ecp_row) then
            write(6,'(a)') 'AIMMS Interface error ECP:  max_ecp_row exceeded in store_ecp_row_sol. stopping.'
            stop
          endif
! make sure the sets identified in the composite header match those set names defined for the row_aimms row
          imatch=0
          do i=1,nsets
            if(row_aimms(aimms_row_ID_num).setnam(i).eq.fieldname(i)) then
               imatch=imatch+1
            endif

          enddo
          if(imatch.eq.nsets) then
!=========================================================
! construct OML row name from the mask and set elements. If not an alias rowumn, just use the elements as they are
             ecprownam=' '
             lm=index(row_aimms(aimms_row_ID_num).rownam_mask, '!')  ! '!' is used to tag versions of the same mask, so strip that out
             if(lm.gt.1) then
               lm=lm-1
             else
               lm=len_trim(row_aimms(aimms_row_ID_num).rownam_mask)
             endif
             j=0
             do i=1, lm
               if( index('()', row_aimms(aimms_row_ID_num).rownam_mask(i:i)) .eq.0) then  ! pass over any special masking characters in search of the constants
                 j=j+1
                 ecprownam(j:j)=row_aimms(aimms_row_ID_num).rownam_mask(i:i)         
               endif
             enddo
             rindstt(1:max_set)=row_aimms(aimms_row_ID_num).indstt(1:max_set)
             rindend(1:max_set)=row_aimms(aimms_row_ID_num).indend(1:max_set)
             do i=1,nsets
               afield=fields(i)
               if( index(fieldname(i),'_ALT').gt.1) then  ! check for alias set name
                 la=len_trim(afield)
                 setname=fieldname(i)(1:    index(fieldname(i),'_ALT') -1  )  ! strip off _ALT stuff to get AIMMS primary set name used in the composite table fields
                 call get_ecp_set_element(setname,afield(:la),icode)         ! get the integer (ordinal) code for the set element 
                 if(icode.gt.0) then
                    call get_ecp_char_element(fieldname(i),icode,afield,ifound)
                    la=len_trim(afield)
                 endif
                 if(icode.eq.0 .or. ifound.eq.0) then
                   write(6,'(3a)') 'AIMMS Interface error ECP with '//trim(identifier)// &
                    ' solution. Could not get aliased set element for field: '//trim(fields(i))//' for set: '//trim(fieldname(i))//' and '//trim(setname)
                   goto10=.true.
                   return
                 endif
               endif
               if(rindstt(i).gt.0) then
                 lf=rindend(i)-rindstt(i)+1
                 la=len_trim(afield)
                 if(len_trim(afield).lt.lf) then ! left pad integer set elements with 0
                   afield=zeroes(1:lf-la)//afield
                 endif  
                 ecprownam(rindstt(i):rindend(i)) = afield(:lf)
               endif
             enddo
             row_sol_names(num_ecp_row_sol)=ecprownam
             row_sol_types(num_ecp_row_sol)=row_type
!===================  end construct OML row name ====================================================================================
! store row solution to a spot "s" from a hash table for fast lookup, based on the row name.
             call usehash(ecprownam, ecp_row_name, max_ecp_row_hash, s, initial_store)
             if(ecp_row_sol(s).row_type .eq. row_type) then  ! but do not store solution for a row if the row_type doesn't match (e.g., CARBONAB n)
             rfield=0
 ! read each numeric field from the 4 solution fields : Activity, lOwer(2), upper(3), and Shadow price (4)     
             do i=nsets+1,nfields
               rfield(i-nsets)=0.
               fs=len_trim(fields(i))
               if(fs.gt.0) then
                 if(index(fields(i),'-inf').gt.0) then ! rows
                   rfield(i-nsets)=-inf  ! smallest double precision real
                 elseif (index(fields(i),'inf').gt.0) then
                   rfield(i-nsets)=inf  ! largest double precision real
                 elseif (index(fields(i),'zero').gt.0) then
                   rfield(i-nsets)=0. 
                 else
                   read(fields(i),*) rfield(i-nsets)
                   if (row_type.eq.'N') then ! free rows only have activity. set range.
                     rfield(2)=-inf  ! lower limit
                     rfield(3)=inf   ! upper limit
                   endif
                 endif
               elseif((i-nsets).eq.2) then  ! lower
                 if(row_type.eq.'L') then
                   rfield(2)=-inf  ! lower limit
                 endif
               elseif((i-nsets).eq.3) then  ! upper
                 if(row_type.eq.'G') then
                   rfield(3)=inf  ! upper limit
                 endif
               endif
             enddo
             if(s.ge.0) then
               ecp_row_sol(s).solval(1) = rfield(1)
               ecp_row_sol(s).solval(2) = 0.
               ecp_row_sol(s).solval(3) = rfield(2)
               ecp_row_sol(s).solval(4) = rfield(3)
               ecp_row_sol(s).solval(5) = rfield(4)
               if(row_type.eq.'L')then
                 if(rfield(3).gt.0.and.rfield(3).lt.inf) then
                   ecp_row_sol(s).solval(2)=rfield(3)-rfield(1) ! slack activity for oml comparability
                 endif
               elseif(row_type.eq.'G') then
                 if(rfield(2).gt.0.and.rfield(2).lt.inf) then
                   ecp_row_sol(s).solval(2)=rfield(2)-rfield(1) ! slack activity for oml comparability. slack neg for GE
                 endif
               endif
               ecp_row_sol(s).ecprownam = ecprownam
               ecp_row_sol(s).row_type = row_type
               ecp_row_sol(s).aimms_row_ID_num = aimms_row_ID_num
! store set elements from each set field          
               ecp_row_sol(s).nsets = nsets
               do i=1,nsets
                 ecp_row_sol(s).cset_elements(i)=fields(i)
              enddo
             else
               write(6,'(a,i6)') 'AIMMS Interface ECP bad hash index from row name: '//ecprownam//' so may need to increase max_ecp_row_hash'
             endif
           else
          !  write(6,'(a)') 'AIMMS Interface ECP skipping solution for '//ecprownam//' row_type='//row_type//': does not match '//ecp_row_sol(s).row_type
           endif
          else
            write(6,'(a,i6)') 'AIMMS Interface ECP index set mismatch on solution for identifier '//trim(identifier)//' line #',nline
          endif
        else
          write(6,'(3a)') 'AIMMS Interface error ECP aimms_row_ID_num<0 reading row solution in subroutine store_ecp_row_sol'
          goto10=.true.
        endif

       return
       end subroutine store_ecp_row_sol  
!=====================================================================================================================================
       subroutine store_ecp_col_scalar
       implicit none
          integer savespot,icolon
! 1) read scalar solution values from multiple lines, OML Column Identifier
          if(aimms_col_ID_num.ge.0) then
            if(first_scalar) then
               num_ecp_col_sol=num_ecp_col_sol+1
               rfield(:)=0.
               if(num_ecp_col_sol .gt. max_ecp_col) then
                 write(6,'(a)') 'AIMMS Interface error ECP:  max_ecp_col exceeded in store_ecp_col_scalar. stopping.'
                 stop
               endif
               ecpcolnam=col_aimms(aimms_col_ID_num).colnam_mask  ! for scalars, the mask should have no replacement patterns and so match the oml column
               col_sol_names(num_ecp_col_sol)=ecpcolnam
! store col solution to a spot "s" from a hash table for fast lookup, based on the col name.
               call usehash(ecpcolnam, ecp_col_name, max_ecp_col_hash, s, initial_store)
               savespot=s
               ecp_col_sol(s).ecpcolnam=ecpcolnam
            else
               s=savespot 
            endif
            ecp_col_sol(s).aimms_col_ID_num = aimms_col_ID_num
            ecp_col_sol(s).nsets = 1

            icolon=index(line,':=')+2
            if(index(line(1:icolon),'.')+index(line(1:icolon),'BOUND').eq.0) then 
              line(1:icolon)=' '
              line(index(line,';'):)=' '
              rfield(1)=0.
              if(len_trim(line).gt.0) then
                read(line,*) rfield(1)
              endif
         
              ecp_col_sol(s).solval(1) = rfield(1)     
            else
              isol=0
              if (index(line,'.NomCoeff').gt.0) isol=2 
              if ( (index(line,'.Lower') + index(line,'_LBOUND') ).gt.0) isol=3   ! field may be titled .Lower or _LBOUND
              if ( (index(line,'.Upper') + index(line,'_UBOUND') ).gt.0) isol=4   ! field may be titled .Uower or _UBOUND
              if (index(line,'.ReducedCost')+index(line,'.ShadowPrice').gt.0) isol=5
              if(isol.gt.0) then
                line(1:index(line,':=')+2)=' '
                line(index(line,';'):)=' '
                rfield(isol)=0.
                if(len_trim(line).gt.0) then
                  if(index(line,'-inf').gt.0) then
                     rfield(isol)=-inf  ! smallest double precision real
                  elseif (index(line,'inf').gt.0) then
                     rfield(isol)=inf  ! largest double precision real
                  elseif (index(line,'zero').gt.0) then
                     rfield(isol)=0.  ! largest single precision real
                  else
                     read(line,*) rfield(isol)
                  endif
                endif
                ecp_col_sol(s).solval(isol) = rfield(isol)
              endif
            endif          

          endif
       return
       end subroutine store_ecp_col_scalar  
!=====================================================================================================================================
       subroutine store_ecp_row_scalar
       implicit none
       integer savespot,icolon
          if(aimms_row_ID_num.ge.0) then
            if(first_scalar) then
               num_ecp_row_sol=num_ecp_row_sol+1
               rfield(:)=0.
               if(num_ecp_row_sol .gt. max_ecp_row) then
                 write(6,'(a)') 'AIMMS Interface error ECP:  max_ecp_row exceeded in store_ecp_row_scalar. stopping.'
                 stop
               endif
               ecprownam=row_aimms(aimms_row_ID_num).rownam_mask  ! for scalars, the mask should have no replacement patterns and so match the oml rowumn
               row_sol_names(num_ecp_row_sol)=ecprownam
               row_sol_types(num_ecp_row_sol)=row_type
! store row solution to a spot "s" from a hash table for fast lookup, based on the row name.
               call usehash(ecprownam, ecp_row_name, max_ecp_row_hash, s, initial_store)
               savespot=s
               ecp_row_sol(s).ecprownam=ecprownam
            else
               s=savespot 
            endif

            if(row_type .eq. ecp_row_sol(s).row_type) then

              ecp_row_sol(s).aimms_row_ID_num = aimms_row_ID_num
              ecp_row_sol(s).nsets = 1
              icolon=index(line,':=')+2
              if(index(line(1:icolon),'.').eq.0) then  
                line(1:icolon)=' '
                line(index(line,';'):)=' '
                rfield(1)=0.
                if(len_trim(line).gt.0) then
                  read(line,*) rfield(1)
                endif
                ecp_row_sol(s).solval(1) = rfield(1)
              else
                isol=0
                if (index(line,'.Lower').gt.0) isol=3
                if (index(line,'.Upper').gt.0) isol=4
                if (index(line,'.ReducedCost')+index(line,'.ShadowPrice').gt.0) isol=5
                if(isol.gt.0) then
                  line(1:index(line,':=')+2)=' '
                  line(index(line,';'):)=' '
                    rfield(isol)=0.
                  if(len_trim(line).gt.0) then
                    if(index(line,'-inf').gt.0) then
                      rfield(isol)=-inf  ! smallest double precision real
                    elseif (index(line,'inf').gt.0) then
                      rfield(isol)=inf  ! largest double precision real
                    elseif (index(line,'zero').gt.0) then
                      rfield(isol)=0.  
                    else
                      read(line,*) rfield(isol)
                    endif
                  endif
                  if(isol.eq.4) then
                     if(rfield(4).lt.inf .and. rfield(4).gt.0) rfield(2)=rfield(4)-rfield(1)
                  endif
                  ecp_row_sol(s).solval(isol) = rfield(isol)
                endif
              endif          
            else
!             write(6,'(a)') 'AIMMS Interface: skipping solution for '//ecprownam//' row_type='//row_type//': does not match '//ecp_row_sol(s).row_type
            endif
          endif
       return
       end subroutine store_ecp_row_scalar

   end subroutine AIMMS_InTxt_ecp
!=====================================================================================================================================
   subroutine get_ecp_char_element(setname,icode,ccode,ifound)
! returns the set element character code (ccode) associated with a given setname and icode (ordinal set element)  
   use ecp_row_col
   implicit none
   character(LEN=*) setname
   integer icode
   character*5 ccode
   integer ifound,i,Lsn,isetnum
   
! Set names and elements for use in reading/writing composite data arrays.
! these are defined in module ecp_row_col and are shown here for reference
!   type aimset
!     character*32 setname
!     integer*2 istart
!     integer*2 iend
!   end type
!   integer, parameter :: max_aimsets=75
!   type (aimset) :: aimsets(max_aimsets)
!   character*5 setElements(5000) ! need 1800 for coalgroup, plus another few hundred
!   integer numAimSets
!   integer nSetElements
   ifound=0
   isetnum=0
   Lsn=len_trim(setname)
   do i=1,numAimSets
     if(aimsets(i).setname  .eq. setname) then
       if(Lsn .eq. len_trim(aimsets(i).setname)) then
         isetnum=i
         ifound=1
         exit
       endif
     endif
   enddo
   if(ifound.eq.1) then
     ccode=setELements(  aimsets(isetnum).istart + icode -1 )
   endif
   
   end subroutine get_ecp_char_element
!=====================================================================================================================================
      subroutine write_ecp_row_col_dbg(iunit)
! writes a debug line to display col/row IDs and AIMMS names associated with the current ECP/OML row, col names
      use ecp_row_col
      implicit none
      integer iunit
      write(iunit,100) AIMMS_col_ID_num,AIMMS_row_ID_num, &
        col_aimms(aimms_col_id_num).colnam_aimms, &
        row_aimms(aimms_row_id_num).rownam_aimms, &
        ecpcolnam, ecprownam,&
        trim(col_aimms(aimms_col_id_num).colnam_mask), &
        trim(row_aimms(aimms_row_id_num).rownam_mask)
       
100   format('coeff: AIMMS col, row IDS:',2I5,',  AIMMS col, row names: ',a,1x, a,',  OML col,row names: ',a,1x,a, ',  col/row masks: ',a,1x,a)
      end
!=====================================================================================================================================
 SUBROUTINE CWFSCOL(COLUMN,COLSOL,STAT,SOLVAL,colmask,RETCD)
  ! invokes OML function WFSCOL to retrieve column solution.
  ! For AIMMSecp option, substitutes AIMMS solution for the column
    use ecp_row_col  ! declarations/storage for AIMMS interface LP coefficients
    IMPLICIT NONE
    include 'omlall.fi'
    character*16 COLUMN
    character*8  COLSOL
    character*2  STAT,STAT2
    real(8)      SOLVAL(5),SOLVAL2(5)
    character*24 SOLVAL5(5)
    character(Len=*) :: colmask
    integer i,isol,j
    integer RETCD,RETCD2
    character*6  scodes/'ACLUD '/
   
    IF (AIMMSecp .ne. 1 .or. make_ecp_aimms) THEN  ! if running ecp to generate data for arraycode_ecp, will need to use OML solution
      stat=' '
      solval=0.
      RETCD = WFSCOL(COLUMN,COLSOL,STAT,SOLVAL)
    ENDIF 

    ecpcolnam=column 
    if(AIMMSECP.eq.1) then

      if(make_ecp_aimms) return ! there is no AIMMS solution if this is a make_ecp_aimms run, so return

! look up OML col names in the AIMMS solution list, ecp_col_sol.  
! use hash table for col names for fast lookup of solution record "isol"
! based on the col name.
      call usehash(ecpcolnam, ecp_col_name, max_ecp_col_hash, isol, initial_store)
      solval(:)=0.    
      colnam_aimms=' '
      if (isol.ge.0 .and. .not. initial_store) then 
        do i=1,len_trim(colsol)                  ! for each non-blank character in COLSOL (eg., 'A  
          j=index(scodes,colsol(i:i))               ! get its position (1-5) in "ACLUD" to match the AIMMS solution field wanted                       
          solval(i)=ecp_col_sol(isol).solval(j) 
        enddo
        retcd=0
        stat=ecp_col_sol(isol).status
        aimms_col_ID_num=ecp_col_sol(isol).aimms_col_ID_num
        if(aimms_col_ID_num.ge.0) colnam_aimms=col_aimms(aimms_col_ID_num).colnam_aimms
      else 
        if(isol.ge.0) then
          ecp_col_name(isol)= ' '  ! initial_store was .true. re-initialize so repeated calls to solution retrieval generate initial_store=.true.
        endif
        stat=' '
        retcd=1
      endif
      stat2=' '
      solval2=0.
      solval5='       null'
      if(AIMECPBG.eq.1) then
        RETCD2 = WFSCOL(COLUMN,COLSOL,STAT2,SOLVAL2)
        do i=1,len_trim(colsol)                  ! for each non-blank character in COLSOL (eg., 'A  
         j=index(scodes,colsol(i:i))              ! get its position (1-5) in "ACLUD" to match the 5 AIMMS solution fields              
 !        write(solval5(j),'(1PG24.15E3)') solval(i)  
          write(solval5(j),'(1PG24.15E3)') solval2(i)  
        enddo
      endif
                                                                                                                                                                                                          
      if(AIMECPBG.eq.1) then
        if(retcd.eq.0 .or. retcd2.eq.0) then
          write(colunit,2000) column(1:8), colnam_aimms, retcd, retcd2, colsol, &
          stat, stat2, (ecp_col_sol(isol).solval(j),j=1,5), (solval5(j),j=1,5)
        endif
!      else
!        if(retcd.eq.0) then
!          write(colunit,2001) column(1:8), colnam_aimms, retcd, &
!          colsol, stat, (ecp_col_sol(isol).solval(j),j=1,5)
!        endif
      endif
 2000 format(a8,'|',a,'|',2(i2,'|'),a8,'|',a2,'|',a2,'|AIM:|',5(1PG24.15E3,'|'),'OML:|',5(a24,'|'))
 2001 format(a8,'|',a,'|',i2,'|',a8,'|',a2,5('|',1PG24.15E3))
  
   endif
  END SUBROUTINE CWFSCOL
!=====================================================================================================================================
  SUBROUTINE CWFSROW(ROW,ROWSOL,STAT,SOLVAL,rowmask,RETCD)
  ! invokes OML function WFSROW to retrieve row solution
  ! For AIMMSECP option, substitutes AIMMS solution for the row 
    use ecp_row_col  ! declarations/storage for AIMMS interface LP coefficients
    IMPLICIT NONE
    include 'omlall.fi'  
    character*16 ROW
    character*8  ROWSOL
    character*2  STAT,STAT2
    real(8)      SOLVAL(5),SOLVAL2(5)
    character*24 SOLVAL5(5)
    character(Len=*) :: rowmask
    integer i,isol,j
    integer RETCD,RETCD2
    character*6  scodes/'ASLUP '/
    
    IF (AIMMSecp .ne. 1 .or. make_ecp_aimms) THEN   ! if running ecp to generate data for arraycode_ecp, will need to use OML solution
      stat=' '
      solval=0.
      RETCD = WFSROW(ROW,ROWSOL,STAT,SOLVAL)
    ENDIF
    ecprownam=row
    if(AIMMSECP.eq.1) then

    if(make_ecp_aimms) return ! there is no AIMMS solution if this is a make_ecp_aimms run. so return

      ! look up OML row names in the AIMMS solution list, ecp_row_sol. 
! use hash table for row names for fast lookup of solution record "isol"
! based on the row name.
      call usehash(ecprownam, ecp_row_name, max_ecp_row_hash, isol, initial_store)
      solval(:)=0.
      rownam_aimms=' '
      if(ecp_row_sol(isol).ecprownam .ne. ecprownam) then
         ecp_row_sol(isol).ecprownam=' '
         ecp_row_sol(isol).row_type= ' '
         ecp_row_sol(isol).solval=0
         ecp_row_sol(isol).status=' '
         initial_store=.true.
      endif         
      
      if (isol.ge.0 .and. .not. initial_store) then                           
        do i=1,len_trim(rowsol)                  ! for each non-blank character in ROWSOL (eg., 'A  
          j=index(scodes,rowsol(i:i))               ! get its position (1-5) in "ACLUP" to match the AIMMS solution field wanted                       
          solval(i)=ecp_row_sol(isol).solval(j)
          if(j.eq.5) then
            solval(i)=-solval(i)
          endif 
        enddo
        retcd=0
        stat=ecp_row_sol(isol).status
        row_type=ecp_row_sol(isol).row_type
        aimms_row_ID_num=ecp_row_sol(isol).aimms_row_ID_num 
        if(aimms_row_ID_num.ge.0) then
          rownam_aimms=row_aimms(aimms_row_ID_num).rownam_aimms
          row_type=row_aimms(aimms_row_ID_num).row_type
        endif
      else
        if(isol.ge.0) then
          ecp_row_name(isol)= ' '  ! initial_store true. re-initialize so repeated calls to solution retrieval generate initial_store
          ecp_row_sol(isol).row_type=' '
          ecp_row_sol(isol).ecprownam=' '          
        endif
        row_type=' '
        stat=' '
        retcd=1
      endif
      stat2=' '
      solval2=0.
      solval5='       null'
      if(AIMECPBG.eq.1) then   ! then get OML solution for comparison      
        RETCD2 = WFSROW(ROW,ROWSOL,STAT2,SOLVAL2)
        do i=1,len_trim(rowsol)                  ! for each non-blank character in COLSOL (eg., 'A  
          j=index(scodes,rowsol(i:i))              ! get its position (1-5) in "ACLUD" to match the 5 AIMMS solution fields              
          write(solval5(j),'(1PG24.15E3)') solval2(i)  
        enddo
      endif

      if(AIMECPBG.eq.1) then  ! write out comparison of AIMMS and OML solution fields
        if(retcd.eq.0 .or. retcd2.eq.0) then      
          write(rowunit,2000) row(1:8), row_type, rownam_aimms, retcd, retcd2, rowsol, &
           stat, stat2, (ecp_row_sol(isol).solval(j),j=1,5), (solval5(j),j=1,5)
        endif
!      else
!        if(retcd.eq.0 ) then      
!          write(rowunit,2001) row(1:8), row_type, rownam_aimms, retcd, rowsol, stat, &
!          (ecp_row_sol(isol).solval(j),j=1,5)
!        endif
      endif         
 2000 format(a8,'|',a1,'|',a,'|',2(i2,'|'),a8,'|',a2,'|',a2,'|AIM:|',5(1PG24.15E3,'|'),'|OML:|',5(a24,'|'))
 2001 format(a8,'|',a1,'|',a,'|',i2,'|',a8,'|',a2,5('|',1PG24.15E3))

    ENDIF
   END SUBROUTINE CWFSROW


