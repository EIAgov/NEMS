! $Header: m:/default/source/RCS/uecp.f,v 1.799 2021/04/28 12:02:36 LC2 Exp $

!===================================================================================================================================================
! Electricity Capacity Planning (ECP) module.

! the module "ecp_row_col" contains declarations and data shared throughout the subroutines in this file and uaimms.f.  The
! purpose is store LP coefficients in dynamically-declared arrays for the AIMMS ECP interface.
! See ecp_row_col.f90 for the module's code and see uaimms.f for aimms interface routines.
!
!     THIS VERSION OF THE ECP USES AIMMS TO SOLVE THE ECP MATRIX.
!
      SUBROUTINE ELECP


!     THIS SUBROUTINE IS THE MAIN CONTROLLING MODULE FOR THE
!     ELECTRICITY CAPACITY PLANNING SUBMODULE OF THE EMM.
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'bildout'
      include 'ecpcntl'
      include 'uecpout'
      include 'cdsparms'
      include 'coalemm'
!RAG
      include 'ecp_coal'
!RAG
      COMMON/BUILDS/ ECPADDS(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*8 ECPADDS
!
      INTEGER FULLYR
      INTEGER ECP_TIME_BEGIN,ECP_TIME_END

      FULLYR = USYEAR(CURIYR)
      CALL MPTIM2(ECP_TIME_BEGIN)
      
      WRITE (18,1111) '** BEGIN ELECP ** ',FLOAT(ECP_TIME_BEGIN)/100.
1111  FORMAT(10X,A,' CPU TIME (SECONDS) = ',F7.2,A,F7.2)
!
!     IF ECP SWITCH = 1 THEN CALL ECP_LP TO SOLVE ECP MATRIX.
!
      IF ( USW_ECP .EQ. 1 ) THEN
          ! leaving in initialization of old CTS variables which still exist in the restart - further clean up needed to remove code/variables
            E_PLTS = 0
            R_PLTS = 0
            N_PLTS = 0

            E_RY = 0
            E_IGRP = 0
            R_RY = 0
            R_IGRP = 0
            N_RY = 0
            N_RG = 0
            N_IGRP = 0
            N_CFR = 0
            N_HRAT = 0
            N_CPTY = 0
            N_PTP = 0

            TCCF_GL = 1.0
            TCCV_GL = 1.0
            TTCF_GL = 1.0
            TTCV_GL = 1.0
            TICF_GL = 1.0
            TICV_GL = 1.0
            HTRT_GL = 1.0

            EG_PLTS = 0
            EG_RY = 0
            EG_RG = 0
            EG_PTP = 0
         CALL ECP_LP
      ENDIF                                        ! END OML CALL YES/NO

      CALL MPTIM2(ECP_TIME_END)
      WRITE (18,2222) '** END ELECP ** ',FLOAT(ECP_TIME_END)/100., &
       FLOAT(ECP_TIME_END)/100. - FLOAT(ECP_TIME_BEGIN)/100.
2222  FORMAT(10X,A,' CPU TIME (SECONDS) = ',F9.2,', TIME USED =',F7.2)
      RETURN
      END
!
!
      SUBROUTINE ECP_LP
      use ifport, only : timef,sleepqq
      use ecp_row_col
      use ifcore, only : commitqq
!
!
      IMPLICIT NONE
!
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'dispin'
      include 'dispett'
      include 'dispinyr'
      include 'macout'
      include 'wrenew'
      include 'emission'
      include 'cdsparms'
      include 'uso2grp'
      include 'uecpout'
      include 'xprsparm'
      include 'continew'
      include 'e111d'
      include 'uefdout'
      include 'emoblk'
      include 'emm_aimms'

      INTEGER*4  FULLYR,NERC,LASYR,FIRYR,KYR
      INTEGER*4  SV_SW,JRET,ISO2, TYP

      INTEGER*4  STATS(9),I  !,ECPMAT
      INTEGER*4  CPU_TIME_BEGIN,CPU_TIME_END

!     UNTIL RUN TIME OVERWRITES SWITCHES ADDED

      CHARACTER*16   TEMPRHS,TEMPOBJ
      CHARACTER*8    TEMPACT,TEMPMINMAX,TEMPBOUND
      CHARACTER*8    BASISYR,ACTFIL,CRNAME*9,MPSFIL
      CHARACTER*12   BASISIN,BASISOUT                                   !* JCS: null-terminate *!
      CHARACTER*8    PCKDDN
      REAL*8         T_RETRO, T_RETRO_CCS
      CHARACTER*4    FYR_CHAR, FYR_CHAR_MPS
      CHARACTER*2    FRUN_CHAR
      INTEGER        IY
      INTEGER        XMAXTIME
      real*4 timer,timall
      COMMON/INVEST/ RETINV(MNUMYR+ECP_D_XPH),BLDINV(MNUMYR+ECP_D_XPH)
      REAL*8       RETINV,BLDINV
      CHARACTER*16 ECPSTRING/'ECP Infeasible  '/
      CHARACTER*16 XPRSTRING
      CHARACTER*50 PROGREPMESS
      CHARACTER*255  filen/' '/
      LOGICAL file_exists/.false./
      logical(4) lResult
      INTEGER ECPMPS,AMS_KEEPOPEN

      CHARACTER, POINTER :: NULLPC=>NULL()  ! for xfinit license path

      character*29 c_message         ! for LFOMLPRTCN

      ecpsub='ECP_LP'

      timall=timef()

      ECPMPS=RTOVALUE('ECPMPS  ',0)
      AMS_KEEPOPEN = RTOVALUE('KEEPOPEN',0)
      
        
        if (CODEUSAGE_AIMECP_read .eq. 0) then      
          CALL READAIMECPOPTIONS         
          CALL SetToUseAIMSECPPostADJST
        endif
        AIMECPBG=RTOVALUE('AIMECPBG',1)  ! if 1, more debug info included in ECPcoeff*txt files.
        AIMMKECP=RTOVALUE('AIMMKECP',0)  ! if 1, set make_ecp_aimms to .true. and set AIMECPBG to 1 for more output
        AIMECPPAR = RTOVALUE('AIMECPPAR',0)
        if(AIMMKECP.eq.1) then
          make_ecp_aimms=.true.
          AIMECPBG=1
        ENDIF
        timer=timef()
        SKIP_ECPAMS = 1       !flag to indicate if using only cpass (=1 if using all cpass => skip AIMM calcs)
        SKIP_ECPOML = .TRUE.   !added by AKN to test a new flag to disable ECPOML based LP generation
        call ecp_aimms_init  ! initialize aimms-ecp coefficient storage arrays and counters
        CALL CheckToDisableECPOMLLP   !added by AKN to test a new flag to disable ECPOML based LP generation
        write(6,'(a,f9.2)') 'AIMMS Interface: seconds to initialize ECP dynamic storage',timef()-timer

      

      LASYR = USYEAR(LASTYR)
      FIRYR = USYEAR(FIRSYR)
      ECP_MIN = 0.001
      DIGITS_PARM = 5
!
      FULLYR = USYEAR(CURIYR)
      IF (CURIRUN .LT. 9) THEN
          write(FRUN_CHAR,'("_",I1)') CURIRUN
      ELSE
          write(FRUN_CHAR,'(I2)'), CURIRUN
      ENDIF

      WRITE(FYR_CHAR_MPS,'(I2,A2)') FULLYR-2000,FRUN_CHAR
      WRITE(FYR_CHAR,'(I4)') FULLYR
!
!     REMOVE ACTFILE CHOICE, WITH IN-MEMORY ONE ACTFILE ONLY
!
      WRITE(ACTFIL,6215) FYR_CHAR
      WRITE(MPSFIL,6215) FYR_CHAR_MPS

 6215 FORMAT("EMM_",A4)
!
      IF (FULLYR .EQ. UPSTYR) THEN
       DO IY = 1, MNUMYR + UNXPH
          BLDINV(IY) = 0.0
          RETINV(IY) = 0.0
       ENDDO
      ENDIF
!
!     CREATE NEW MATRIX, DO DATABASE INITIALIZATION, REVISIONS AND CLOSES.
!
      CALL MPTIM2(CPU_TIME_BEGIN)


 1111 FORMAT(10X,A,' CPU TIME (SECONDS) = ',F7.2,A,F7.2)

 2222 FORMAT(10X,A,' CPU TIME (SECONDS) = ',F9.2, ', TIME USED = ',F7.2)

!
!     CALL SUBROUTINE TO CALL REVISE ROUTINES
!
      timer=timef()
      CALL REVECP
      write(6,'(a,f9.2)') 'Wall seconds for REVECP:',timef()-timer      
!
      WRITE(18,*) 'AFTER ACTFILE REVISIONS'
      CALL MPTIM2(CPU_TIME_BEGIN)
      WRITE (18,1111) '** BEGIN DF SUBS ** ', FLOAT(CPU_TIME_BEGIN)/100.

        IF (AIMECPBG .EQ. 1 .OR. USE_AIMECP_SLNADJ .EQ. .FALSE. .OR. SKIP_ECPOML .EQ. .FALSE. ) THEN
         CALL ecp_fill_aimms_coeff  ! fills in  LP coefficients for AIMMS ECP to read
         close(io) !ecpcoeff_yyyy.txt'
        ENDIF
         if(.not. make_ecp_aimms) then
!           write(6,*) 'AIMMS Interface: opening filen_ecpcoeff='//trim(filen_ecpcoeff)
!         open(io,file=filen_ecpcoeff,status='old',access='append',BUFFERED='YES',BUFFERCOUNT=10) ! reopen ecpcoeff_yyyy.txt so "allzero" error messages get included
           AIM_Phase=1 ! 1: if in LP set up phase, 2: if in LP solution retrieval phase. used because "Call getbout"  only applies in phase 2, AIMMS validation phase, after oml sol retrieval
           CALL AIMMS_ECP('MainExecution')      ! transfers LP coefficients and other info to AIMMS, invokes AIMMS, and transfers results back
 !        close(io)
          timer=timef()  
         IF (AMS_KEEPOPEN .EQ. 0) THEN ! close AIMMS each time
           CALL AIMMS_ECP('end')
    write(6,'(a,f9.3)') 'Wall seconds for close AIMMS ECP:',timef()-timer      
         ENDIF        !leave AIMMS open if KEEPOPEN=1 (NEMS_Monitor will loop until monitor.in.txt is updated for next solve
        endif

      CALL MPTIM2(CPU_TIME_END)
      WRITE (18,2222) '** END DF SUBS ** ',FLOAT(CPU_TIME_END)/100.0, FLOAT(CPU_TIME_END)/100.0 - FLOAT(CPU_TIME_BEGIN)/100.0
!
!     IF FIRST YEAR OF ECP RUN INITIALIZE COAL CAPACITY VALUES
!
      IF (FULLYR .EQ. UPSTYR) THEN
         UECP_CAP = 0.0
      END IF

    
      CALL MPTIM2(CPU_TIME_BEGIN)
      WRITE (18,1111) '** BEGIN SOLN RETRIEVE ** ', &
      FLOAT(CPU_TIME_BEGIN)/100.
!
!     PUT SOLUTION RETRIEVALS HERE
!
        timer=timef()
       if (.NOT. USE_AIMECP_SLNADJ) then   ! read in AIMMS solution Out_to_NEMS and use Fortran output routines 
        call AIMMS_InTxt_ecp
        write(6,'(a,i7)') 'AIMMS Interface: number of col sol entries: ', num_ecp_col_sol
        write(6,'(a,i7)') 'AIMMS Interface: number of row sol entries: ', num_ecp_row_sol
!        write(6,'(a,f9.2)') 'AIMMS Interface: seconds to read ECP solution file',timef()-timer
       endif

       if (USE_AIMECP_SLNADJ) then
        call aimms_InTxtVar_ecp
       endif
        write(6,'(a,f9.2)') 'AIMMS Interface: seconds to read ECP solution file',timef()-timer

!
!        CAPTURE ALLOWANCE COSTS AND BANKING DECISIONS
!
!        Initialize nox control summary variables for ftab
!
         DO NERC = 1, MNUMNR
            IF ((CURIYR + NOX_LT) .LE. MNUMYR)THEN
               EMELNOX(NERC,MIN(CURIYR+NOX_LT,MNUMYR)) = 0.0
               EMELSCR(NERC,MIN(CURIYR+NOX_LT,MNUMYR)) = 0.0
               EMELNCR(NERC,MIN(CURIYR+NOX_LT,MNUMYR)) = 0.0
               EMELSC(NERC,MIN(CURIYR+NOX_LT,MNUMYR)) = 0.0
               EMELFF(NERC,MIN(CURIYR+NOX_LT,MNUMYR)) = 0.0
            END IF
         END DO
!
         CALL GETBOUT(CURIYR,1)
         CALL EPO$BANK
         CALL STRBOUT(CURIYR,1)
!
!        CAPTURE ACTIVITY/DUAL OF REGIONAL CARBON ROWS, IF ANY
!
         CALL EPO$CARLM
!
!        CAPTURE ACTIVITY/DUAL OF CLEAN POWER PLAN ROWS, IF ANY
!
         CALL EPO$CPP

!        CAPTURE CO2 SHIPPED TO EOR SITES

         CALL EPO$CCAP
!
!        CAPTURE DUAL OF RENEWABLE PORTFOLIO CONSTRAINTS
!
         CALL EPO$RPS
         CALL EPO$RPSR

!        Capture state RPS constraint information

         IF (ST_RPS_SW .EQ. 1) CALL EPO$ST_RPS
!
!        CAPTURE INTERMITTENT GENERATION RESULTS
!
         CALL EPO$INT
!
!        CAPTURE CANADIAN IMPORTS
!
         CALL EPO$ETT
!
!        CAPTURE NATIONAL LIMITS ON BUILDS FOR MARKET-SHARING ALGORITHM
!
         CALL EPO$TBLD
!
!        INITIALIZE RETROFIT ARRAYS
!
         T_RETRO = 0.0
         T_RETRO_CCS = 0.0
!
!        Initialize control summary variables for ftab
!
         IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
            DO NERC = 1, MNUMNR
               DO KYR = 1 , MNUMYR
                  EMELRET(NERC,KYR) = 0.0
                  EMELDSI(NERC,KYR) = 0.0
                  EMELNOX(NERC,KYR) = 0.0
                  EMELSCR(NERC,KYR) = 0.0
                  EMELNCR(NERC,KYR) = 0.0
                  EMELSC(NERC,KYR) = 0.0
                  EMELFF(NERC,KYR) = 0.0
               END DO
            END DO
            ECAPNRHR = 0.0
            ECAPFRHR = 0.0
         END IF
!
!        INITIALIZE COAL CAPACITY VALUES
!
         UECP_CAP = 0.0
!
!        Capture Upgrade or Retire Decisions for Coal Units (UPTTYP(IECP) <=6)
!
         CALL EPO$COAL(T_RETRO,T_RETRO_CCS)
!
!        Capture NGBS Retirement and Potential Retrofit Decisions
!
         CALL EPO$NGBS
!       
!        Capture Nuclear Retire Decisions
!
         CALL EPO$NUC
!
!        Capture Results from Fuel Supply Curves
!
         CALL EPO$FLCRV
!
!        Retrieve Generation and Capacity to Compute Capacity Factors
!
         CALL EPO$CF
!
!        LOOP ON NERC REGIONS
!
         DO NERC = 1 , UNRGNS
!
!           GET NERC REGION SPECIFIC DATA FROM INPUT DAF
!
            CALL GETBLD(1,NERC)
!
!           GET NERC REGION SPECIFIC DATA FROM OUTPUT DAF
!
            CALL GETBOUT(CURIYR,NERC)
!
!           CAPTURE AVOIDED PRICES
!
            CALL EPO$AVOID(NERC)
!
            CALL EP$RELRM(NERC)           
!
!           GENERATE LEVELIZED COSTS
!
            CALL EP$LRPT(NERC)                                          ! LEV
!
!           GENERATE TABLES FOR LEVELIZED/AVOIDED COST REPORT
!
            IF (NERC .EQ. UNRGNS)CALL EP$LTABS
!
!           CALL MARKET-SHARING ALGORITHM FROM TECHNOLOGY SUBMODULE
!
            
      !LOGICAL TAX_FLAG     !  TAX ONLY
      !LOGICAL PERMIT_FLAG  ! AUCTION FOR PERMITS
      !LOGICAL MARKET_FLAG  ! FULL MARKET FOR PERMITS
      !LOGICAL OFFSET_FLAG  ! MARKET FOR PERMITS WITH OFFSETS
      !LOGICAL ETAX_FLAG    ! ENERGY TAX ONLY
      !LOGICAL TRAN_FLAG    ! Cap/Fee applies to Tran Only
      !LOGICAL ELEC_FLAG    ! Cap Applies to Elec Only
      !LOGICAL RESD_FLAG    ! Cap/fee excludes RESiDential 
      !LOGICAL COMM_FLAG    ! Cap/fee excludes COMMercial
      !LOGICAL BANK_FLAG    ! Escalated Fee with banking to meet cap over long period. (see include epmbank) 
            IF(ECP_D_MSHR .GT. 0) THEN 
				DO TYP = minval(UPMSHSW), maxval(UPMSHSW)
					CALL EPO$MSHR(NERC, TYP)
				END DO
            END IF
!
!           CAPTURE BUILDS (UTILITY, EWG'S, AND INTERREGIONAL)
!
            CALL EPO$BILD(NERC)
!
!           CAPTURE RETROFIT DECISIONS
!
!           CAPTURE PlANNED MAINTEN
!
            CALL EPO$PM(NERC)
!
!           CAPTURE reserve margin
!
            CALL EPO$CRM(NERC)
!
!           IF DSM SWITCH ON THEN CAPTURE DSM INVESTMENT DECISIONS
!
            IF (ECP_D_IDSM .EQ. 1) THEN
               CALL EPO$DSM(NERC)
            END IF
!
!           STORE NERC REGION SPECIFIC OUTPUT DATA INTO DAF
!
            CALL STRBOUT(CURIYR,NERC)

!           WRITE(6,7119) CURIRUN, CURCALYR, NERC
!7119       FORMAT(1X,"CALL_STRBOUT_UECP_713",3(":",I4))
!
!           PRINT LEVELIZED COST REPORT
         END DO
!
!        Retrieve Generation for All Fuel Types for Report
!
         CALL EPO$GENFL
!
!        Summarize Elasticities and Overbuilds
!
         CALL EPO$ELAST
!
!        CAPTURE Cofiring Decisions
!
         CALL EPO$COF
!
!        CAPTURE SEQUESTRATION BONUS ALLOWANCE DECISIONS
!
         IF (UPSEQCAS .GT. 0 .AND. UPSEQLIM .GT. 0)CALL EPO$SEQBNS
!

         CALL STRPCNTL

      IF (AIMECPBG.eq.1) THEN         
! Resolve ECP but this time the solution-derived variables will have been updated. In aimms they will be used for the 
! validation/transition process and for comparison to the corresponding aimms-derived version of the variables.
        AIM_Phase=2 ! 1: if in LP set up phase, 2: if in LP solution retrieval phase. used because "Call getbout"  only applies in phase 2, AIMMS validation phase, after oml sol retrieval
        !CALL AIMMS_ECP('MainExecution')  
        !CALL AIMMS_ECP('end')  
        !call aimms_InTxtVar_ecp
        write(filen,'(a,i4,a,i2.2,a)')  './ecp/composite_',curcalyr,'.txt'
           INQUIRE(file=filen, EXIST=file_exists)
           if (file_exists.eq..true.) then
                open(iOutTxt,file=filen,status='old',access='append',BUFFERED='YES',BUFFERCOUNT=10)
                call AIMMS_Transfer_Out_ecp
                lresult=commitqq(iOutTxt)  ! use ifcore: force data to be written to file immediately
                close(iOutTxt)
           else
                write(6,'(a)') 'Composit file '//filen//' is missing. Fortran EMM arrays adjusted after LP solved cannot be passed to AIMMS.'
           endif
        call ecp_list_aimms_rowcols(1) ! print list of rows and columns with flag "needsol" to indicate which columns and rows were named in oml solution retrieval routines
      ENDIF

!
      CALL MPTIM2(CPU_TIME_END)
      WRITE (18,2222) '** END SOLN RETREIVE ** ', &
      FLOAT(CPU_TIME_END)/100., &
      FLOAT(CPU_TIME_END)/100. - FLOAT(CPU_TIME_BEGIN)/100.

      write(6,2223) CURIYR+UHBSYR,timef()-timall
2223  FORMAT(1X,'TIME ECP_LP module ',I8,'Wall Seconds ', F12.5)

!
      IF (FULLYR .eq. LASYR) THEN
       DO IY = 1, UNYEAR
        write(18,32) IY,BLDINV(IY)/1000.0,RETINV(IY)/1000.0
       ENDDO
      ENDIF

      RETURN
   32 FORMAT(1x,'INVEST',I4,2F12.2)
      END
!
      SUBROUTINE REVECP

      use ecp_row_col
      use hourly_restore_data
!
!     THIS SUBROUTINE CALL THE REVISE ROUTINES TO REVISE THE ECP
!     MATRIX.
!
      IMPLICIT NONE
!
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'ecp_nuc'
      include 'bildin'
      include 'bildout'
      include 'dispin'
      include 'dispuse'
      include 'dispett'
      include 'macout'
      include 'wrenew'
      include 'emoblk'
      include 'emission'
      include 'cdsparms'
      include 'uso2grp'
      include 'eusprc'
      include 'edbdef'
      include 'taxdat'
      include 'coalemm'
      include 'csapr'
      include 'e111d'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'
      include 'entcntl'
      include 'enewtech'
      include 'uefdout'
	  include 'uecpout'
      include 'emm_aimms'
	  include 'postpr'
      include 'elout'



      REAL*8    NET_PEAK_LOAD(MNUMNR,ECP_D_XPH)
      INTEGER*4 NET_PEAK_MONTH(MNUMNR), NET_PEAK_DAYTYPE(MNUMNR), NET_PEAK_HOUR(MNUMNR)

      REAL*8 MAX_NET_LOAD(MNUMNR), TMP_NET_LOAD, TOT_NET_LOAD(12,3,24), MAX_TOT_NET_LOAD(12), TOP_NET_LOAD(3)
      INTEGER*4 TOP_NET_LOAD_MONTHS(3)

      REAL*8         GRW                                      !
      REAL*8         EMIS
      REAL*4         VALWTMP
      REAL*4         RETYR
      INTEGER*4      NERC,YEAR,IYR,PLT
      INTEGER*4      CPU_TIME_BEGIN,CPU_TIME_END
      CHARACTER*2    COL
      CHARACTER*16   COLUMN

      INTEGER*4 ISP, IGRP, VLS, JVLS, JVLS_CNT(MAXECPB), LVLS, M, D, H
      INTEGER*4 VLSMAP(ECP_D_VLS,ECP_D_MSP,MNUMNR,ECP_D_XPH), MAPVLS(ECP_D_VLS,MAXECPB,MNUMNR,ECP_D_XPH)
      INTEGER*4 TMPSN(12), VLS_EFD, GRP_EFD, TST(ECP_D_CAP)
	  INTEGER*4 KRG, IRG, days
      REAL*8 TEST_VAL
      REAL*8 DEM_ADJ
	  REAL*8 H2_GENERATION
	  INTEGER*4 EMM_SEASON
      
      character*60 putFileName ! name of text file output by this routine
      integer funito

      
      COMMON /MAX_LOADS/ MAX_LOAD
      REAL*8 MAX_LOAD(MNUMNR)
	  INTEGER*4 CRG, CSTP, ISTP, GRP, ISEG
      INTEGER REGIONS, SEASONS, PREVIOUS_YEAR

      ecpsub='REVECP'

      COL = ' :'
      COLUMN_mask=' '

      TST = 0

      IF (CURITR.EQ.1) THEN 
          write(putFileName,'(a,i4,a,a)') '.\rest\toAIMMS\ecpout_',curcalyr,'.txt'      

          WRITE(6,'(A)') putFileName

          call unitunopened(100,999,FUNITO)    
          open(funito,file=putFileName,status='unknown',buffered='YES')
          rewind funito
          WRITE(funito,9990) 'COMPOSITE TABLE:'   
          WRITE(funito,8991)    'm' , 'r' ,    'HydroCapFactor'
 8991    FORMAT(1X,2(" ",A4),1(" ",A20))            

         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,1310) 'IRUN ', 'CYEAR', 'MONTH', 'EMMrg', '            HYDRO_CF', '             URHYCFA'
 1310       FORMAT(1X," ECPto864_HYDRO_CF",4(",",A5),2(",",A20))
         END IF
      
         
        DO m = 1 , 12
          DO d = 1 , unrgns         
           WRITE(funito,8992)  m, d, HYCFMO_AV(d,m) * URHYCFA(CURIYR)
 8992       FORMAT(1X,2(" ",I4),1(" ",F20.3))    
           
               WRITE(UF_DBG,1311) CURIRUN, CURCALYR, m, d, HYCFMO_AV(d,m) * URHYCFA(CURIYR), URHYCFA(CURIYR)
 1311          FORMAT(1X," ECPto864_HYDRO_CF",4(",",I5),2(",",F20.3))

            ENDDO
        ENDDO 
        WRITE(funito,9990) ';' 
      ENDIF
      
      IF (CURITR .EQ. 1) THEN 
          WRITE(funito,9990) 'COMPOSITE TABLE:'   
          WRITE(funito,8991)    'm' , 'd' ,    'Idaytq'          

         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,1410) 'IRUN ', 'CYEAR', 'MONTH', 'DTYPE', '              IDAYTQ'
 1410       FORMAT(1X," ECPto864_IDAYTQ",4(",",A5),",",A20)
         END IF

      DO m = 1 , 12
        DO d = 1 , 3         
           WRITE(funito,8993)  m, d, IDAYTQ(d,m)
 8993          FORMAT(1X,2(" ",I4),1(" ",I20))             

               WRITE(UF_DBG,1411) CURIRUN, CURCALYR, m, d, IDAYTQ(d,m)
 1411          FORMAT(1X," ECPto864_IDAYTQ",4(",",I5),",",I20)

            ENDDO
        ENDDO 
        WRITE(funito,9990) ';'  
      ENDIF
	  
	  IF (CURITR .EQ. 1) THEN
		WRITE(funito,9990) 'COMPOSITE TABLE:'
		WRITE(funito,9996)   'r', 'r1'  ,'y' , 's', 'TranLimit'     

 9996    FORMAT(1X,4(" ",A4),1(" ",A22))  
		DO IRG = 1, UNRGNS !import regions
			DO KRG = 1,  MNUMNR + EFD_D_PROV - 3 !export regions (including CAN)
				DO ISP = 1 , EPNMSP
					if (CNSTRNTS_EFD(ISP,CURIYR,IRG,KRG) .GT. 0.0) THEN
					 WRITE(funito,3389) IRG, KRG, CURCALYR, ISP, CNSTRNTS_EFD(ISP,CURIYR,IRG,KRG)
 3389                FORMAT(1X,4(" ",I4),1(" ",F22.6))  
					

                     WRITE(UF_DBG,1512) CURIRUN, CURCALYR, IRG, KRG, ISP, CNSTRNTS_EFD(ISP,CURIYR,IRG,KRG)
 1512                FORMAT(1X," ECPto864_TRANS_LIMITS",5(",",I5),1(",",F22.6))
					END IF
				END DO
			ENDDO
		END DO
		WRITE(funito,9990) ';'  
	END IF
	
	IF (CURITR .EQ. 1) THEN
		WRITE(funito,9990) 'COMPOSITE TABLE:'
		WRITE(funito,9997)   'r', 'r1'  ,'y' ,'CSteps', 'TranCost'     

 9997    FORMAT(1X,3(" ",A4),1(" ",A6),1(" ",A22))   
		DO IRG = 1, UNRGNS !import regions
			DO KRG = 1,  MNUMNR + EFD_D_PROV - 3 !export regions (including CAN)
				!DO ISP = 1 , EPNMSP
					!if (CNSTRNTS_EFD(ISP,CURIYR,IRG,KRG) > 0.0) THEN
						if (PTHRESH1(CURIYR,KRG,IRG) + PTHRESH2(CURIYR,KRG,IRG) + BARRIER(CURIYR) .GT. 0.0) THEN
							if (KRG > MNUMNR) THEN
								CRG = KRG - MNUMNR
								DO CSTP = 1, EFD_D_CSS
									IF (CAN_CST(CSTP,CRG,CURIYR)*CAN_CST_SCMULT(CURIYR) .GT. 0.0) THEN
										WRITE(funito,3395) IRG, KRG, CURCALYR,  CSTP, (PTHRESH1(CURIYR,KRG,IRG) + PTHRESH2(CURIYR,KRG,IRG) + BARRIER(CURIYR))+(CAN_CST(CSTP,CRG,CURIYR)*CAN_CST_SCMULT(CURIYR))
										WRITE(UF_DBG,1513) CURIRUN, CURCALYR, IRG, KRG, CSTP, PTHRESH1(CURIYR,KRG,IRG) + PTHRESH2(CURIYR,KRG,IRG) + BARRIER(CURIYR)+(CAN_CST(CSTP,CRG,CURIYR)*CAN_CST_SCMULT(CURIYR)), &
										PTHRESH1(CURIYR,KRG,IRG), PTHRESH2(CURIYR,KRG,IRG), BARRIER(CURIYR), CAN_CST(CSTP,CRG,CURIYR), CAN_CST_SCMULT(CURIYR)
									END IF
								END DO
							else
									WRITE(funito,3395) IRG, KRG, CURCALYR,  1, PTHRESH1(CURIYR,KRG,IRG) + PTHRESH2(CURIYR,KRG,IRG) + BARRIER(CURIYR)
									WRITE(UF_DBG,1513) CURIRUN, CURCALYR, IRG, KRG,  1, PTHRESH1(CURIYR,KRG,IRG) + PTHRESH2(CURIYR,KRG,IRG) + BARRIER(CURIYR), PTHRESH1(CURIYR,KRG,IRG), PTHRESH2(CURIYR,KRG,IRG), BARRIER(CURIYR), 0.0, 0.0
							end if
						end if

					 
					
 3395                FORMAT(1X,3(" ",I4),1(" ",I6),1(" ",F22.6))  
 1513                FORMAT(1X," ECPto864_TRANS_COST",5(",",I6),6(",",F22.6))
					!END IF
				!END DO
			ENDDO
		END DO
		WRITE(funito,9990) ';'  
	END IF
	
	IF (CURITR .EQ. 1) THEN
		WRITE(funito,9990) 'COMPOSITE TABLE:'
		WRITE(funito,9998)   'r1' ,'y' , 'loadgp', 'loadseg','CSteps','TranLimitCan'   
9998    FORMAT(1X,2(" ",A4),3(" ",A7),1(" ",A22))  
		!DO IRG = 1, UNRGNS !import regions
			DO KRG = MNUMNR+1,  MNUMNR+1 + EFD_D_PROV - 3 !export regions (including CAN)
				DO ISP = 1, EENSP
					DO ISTP = 1 , ELNVCT(ISP)
					   ISEG = ELSEG(ISTP,ISP)
					   GRP = ELGRP(ISTP,ISP)
						CRG = KRG - MNUMNR
						DO CSTP = 1, EFD_D_CSS
							IF (EFD_GW(ISEG,GRP,CSTP,CRG,CURIYR) * ECANSQZ(CRG,CURIYR) * CAN_QTY_SCMULT(CURIYR) .GT. 0.0) THEN
							
								WRITE(funito,3390) KRG, CURCALYR, GRP,ISEG, CSTP, EFD_GW(ISEG,GRP,CSTP,CRG,CURIYR) * ECANSQZ(CRG,CURIYR) * CAN_QTY_SCMULT(CURIYR)
								
								WRITE(UF_DBG,1514) CURIRUN, CURCALYR,  KRG, GRP,ISEG, CSTP, EFD_GW(ISEG,GRP,CSTP,CRG,CURIYR) * ECANSQZ(CRG,CURIYR) * CAN_QTY_SCMULT(CURIYR), &
								EFD_GW(ISEG,GRP,CSTP,CRG,CURIYR), ECANSQZ(CRG,CURIYR) , CAN_QTY_SCMULT(CURIYR)
							END IF
						END DO
					END DO

					 
					
 3390                FORMAT(1X,2(" ",I4),3(" ",I7),1(" ",F22.6))  
 1514                FORMAT(1X," ECPto864_TRANS_CAN_LIMIT",6(",",I5),6(",",F22.6))
				END DO
			ENDDO
		!END DO
		WRITE(funito,9990) ';'  
	END IF
	
	  
	  


      IF (CURITR .EQ. 1) THEN 
          WRITE(funito,9990) 'COMPOSITE TABLE:'
          WRITE(funito,9991)   'r'  ,'y' , 'm' , 'd' , 'h'  , 'EMMGroup', 'EMMSegment','Group_ECP','Segment_ECP',  'Load'  , 'NetTrade'   
 9990    Format(A16)
 9991    FORMAT(1X,5(" ",A4),4(" ",A12),2(" ",A22))     

         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,1510) 'IRUN ', 'CYEAR', 'EMMrg', 'MONTH', 'DTYPE', 'HOUR ', '                 LOAD', 'NetTrade'
 1510       FORMAT(1X," ECPto864_LOAD",6(",",A5),",",A22,",",A22)
         END IF

      ENDIF

!     REVISE TRANMISSION FCF FOR NEW TAX LAW, IF APPROPRIATE

      IF ((CURIYR + UPPLYR(WICT)) .LE. MNUMYR)THEN
         IF (TAXFCFTT(CURIYR + UPPLYR(WICT)) .GT. 0.0 .OR. TAXFCFTD(CURIYR + UPPLYR(WICT)) .GT. 0.0)THEN
            DO NERC = 1 , UNRGNS
               CALL GETBLD(1,NERC)
               DO PLT = 1 , ECP_D_CAP
                  IF (CURIYR + UHBSYR .EQ. UPSTYR)THEN
                     EPCCRF(PLT) = EPCCRF(PLT) - (TAXFCFTT(CURIYR + UPPLYR(WICT)) + TAXFCFTD(CURIYR + UPPLYR(WICT)))
                  ELSE
                     EPCCRF(PLT) = EPCCRF(PLT) + (TAXFCFTT(CURIYR) + TAXFCFTD(CURIYR)) -  &
                                                 (TAXFCFTT(CURIYR + UPPLYR(WICT)) + TAXFCFTD(CURIYR + UPPLYR(WICT)))
                  END IF
               END DO
               CALL STRBLD(1,NERC)
            END DO
         END IF
      END IF

!     INITIALIZE ARRAY TO DETERMINE IF BUILDS AND SUBSIDIES AVAILABLE

      BUILD_AVL = 0

!     INITIALIZE SEASONAL PEAKS AND HOURS PER SEASON

      SHOURS_SSN = 0.0
      DO YEAR = 1 , UNXPH
         DO NERC = 1 , UNRGNS
            JVLS_CNT = 0
            CALL GETBLD(1,NERC)
            DO ISP = 1 , EPNMSP
               DO VLS = 1 , EPNSTP(YEAR)
                  VLSMAP(VLS,ISP,NERC,YEAR) = 0
               END DO
            END DO
            DO IGRP = 1 , EPNGRP
               DO VLS = 1 , EPNSTP(YEAR)
                  MAPVLS(VLS,IGRP,NERC,YEAR) = 0
                  IF (IGRP .EQ. 1)THEN
                     ISP = EPGECP(EPLDGR(VLS,YEAR))
                     SHOURS_SSN(NERC,YEAR,ISP) = SHOURS_SSN(NERC,YEAR,ISP) + EPWDTH(VLS,YEAR) * DBLE(0.001)
                  END IF
               END DO
            END DO

!           DETERMINE CAPACITY FACTOR AT EACH LOAD STEP

            DO ISP = 1 , EPNMSP
               VLS = EPFRST(ISP,YEAR)
               DO WHILE (VLS .GT. 0)
                  IGRP = EPLDGR(VLS,YEAR)
                  JVLS_CNT(IGRP) = JVLS_CNT(IGRP) + 1
                  VLSMAP(JVLS_CNT(IGRP),ISP,NERC,YEAR) = VLS
                  MAPVLS(VLS,IGRP,NERC,YEAR) = JVLS_CNT(IGRP)

!                 WRITE(18,9317) curirun, curiyr+1989, curiyr+year+1988, nerc, isp, vls, igrp, jvls_cnt(igrp)
!9317             FORMAT(1X,"VLSMAP_INFO",8(",",I6))

                  VLS = EPNEXT(VLS,YEAR)
               END DO
            END DO
         END DO
      END DO

!     Collect Info for minimum load constraint

      YEAR = 1

      MAX_LOAD = 0.0
      NET_PEAK_LOAD = 0.0
      NET_PEAK_MONTH = 0
      NET_PEAK_DAYTYPE = 0
      NET_PEAK_HOUR = 0
      MAX_NET_LOAD = 0.0
      TOT_NET_LOAD = 0.0
      MAX_TOT_NET_LOAD = 0.0
      TOP_NET_LOAD_MONTHS = 0
      TOP_NET_LOAD = 0.0

      DO NERC = 1 , UNRGNS

         CALL GETBLD(1,NERC)

         DO m = 1 , 12
            DO d = 1 , 3
               DO h = 1 , 24
                  IGRP = HRtoECPgrp(m,d,h)
                  ISP = EPGECP(IGRP)
                  VLS = HRTOECPSL(CURIYR,NERC,m,d,h)
                  JVLS = MAPVLS(VLS,IGRP,NERC,YEAR)
                  LVLS = max(VLS,1)
                  TMPSN(m) = ISP
                  VLS_EFD = HRTOEFDSL(NERC,m,d,h)
                  GRP_EFD = HRTOEFDGP(m,d,h)
                  DEM_ADJ = UEITAJ_ECP(ISP,NERC) - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76

                  TMP_NET_LOAD = DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR) - &
                     PV_CAP_ADJ(NERC) * WSSPVEL_CF(NERC,CURIYR-1,d,m,h) - &
                     PT_CAP_ADJ(NERC) * WSSPTEL_CF(NERC,CURIYR-1,d,m,h) - &
                     SO_CAP_ADJ(NERC) * WSSSTEL_CF(NERC,CURIYR-1,d,m,h) - &
                     WN_CAP_ADJ(NERC) * WSFWIEL_CF(NERC,CURIYR-1,d,m,h) - &
                     WL_CAP_ADJ(NERC) * WSFWLEL_CF(NERC,CURIYR-1,d,m,h) - &
                     WF_CAP_ADJ(NERC) * WSFWFEL_CF(NERC,CURIYR-1,d,m,h) 
                  TOT_NET_LOAD(m,d,h) = TOT_NET_LOAD(m,d,h) + TMP_NET_LOAD
                  IF (TMP_NET_LOAD .GT. MAX_NET_LOAD(NERC)) THEN
                     MAX_NET_LOAD(NERC) = TMP_NET_LOAD
                     NET_PEAK_LOAD(NERC,1) = DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR)
                     NET_PEAK_MONTH(NERC) = m
                     NET_PEAK_DAYTYPE(NERC) = d
                     NET_PEAK_HOUR(NERC) = h
                  END IF

                  IF (CURCALYR .LE. 2025 .OR.  &
                      CURCALYR .EQ. 2030 .OR. CURCALYR .EQ. 2035 .OR. CURCALYR .EQ. 2040 .OR.  &
                      CURCALYR .EQ. 2045 .OR. CURCALYR .EQ. 2050) THEN
                     WRITE(18,3391) CURIRUN, NERC, CURCALYR, m, d, h, IDAYTQ(d,m), IGRP, ISP, JVLS, HRTOEFDSL(NERC,m,d,h), GRP_EFD, VLSMAP(JVLS,ISP,NERC,2), DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), &
                        NET_XPORT_EFD(VLS_EFD,GRP_EFD,NERC), DEM_ADJ, &
                        WSSPVEL_CF(NERC,CURIYR-1,d,m,h), WSSPVEL_CF(NERC,CURIYR-1,d,m,h) * EPECFC(WIPV,1) / EPIACF(UCPINTIS(WIPV)) * EP_SP_CAP_FAC(ISP,WIPV,1), &
                        WSSPTEL_CF(NERC,CURIYR-1,d,m,h), WSSPTEL_CF(NERC,CURIYR-1,d,m,h) * EPECFC(WIPT,1) / EPIACF(UCPINTIS(WIPT)) * EP_SP_CAP_FAC(ISP,WIPT,1), &
                        WSSSTEL_CF(NERC,CURIYR-1,d,m,h), WSSSTEL_CF(NERC,CURIYR-1,d,m,h) * EPECFC(WISO,1) / EPIACF(UCPINTIS(WISO)) * EP_SP_CAP_FAC(ISP,WISO,1), & 
                        WSFWIEL_CF(NERC,CURIYR-1,d,m,h), WSFWIEL_CF(NERC,CURIYR-1,d,m,h) * EPECFC(WIWN,1) / EPIACF(UCPINTIS(WIWN)) * EP_SP_CAP_FAC(ISP,WIWN,1), & 
                        WSFWLEL_CF(NERC,CURIYR-1,d,m,h), WSFWLEL_CF(NERC,CURIYR-1,d,m,h) * EPECFC(WIWL,1) / EPIACF(UCPINTIS(WIWL)) * EP_SP_CAP_FAC(ISP,WIWL,1), & 
                        WSFWFEL_CF(NERC,CURIYR-1,d,m,h), WSFWFEL_CF(NERC,CURIYR-1,d,m,h) * EPECFC(WIWF,1) / EPIACF(UCPINTIS(WIWF)) * EP_SP_CAP_FAC(ISP,WIWF,1), &
                        EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR)
 3391                FORMAT(1X,"DUCK_INFO",13(",",I4),17(",",F16.6))
                  END IF

                  IF (CURITR.EQ.1) THEN               
					! for restart file
					 HourlyLOADTOT(NERC,m,h,CURIYR) = HourlyLOADTOT(NERC,m,h,CURIYR) + (DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR) + DEM_ADJ) * IDAYTQ(d,m)
					 
                     IF (DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR) + DEM_ADJ .GT. MAX_LOAD(NERC)) THEN
                        MAX_LOAD(NERC) = DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR) + DEM_ADJ
                     END IF

                     !WRITE(funito,3381) NERC, CURCALYR, m, d, h, GRP_EFD, VLS_EFD,IGRP, JVLS, DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR) + MAX(NET_XPORT_EFD(VLS_EFD,GRP_EFD,NERC),0.0) + DEM_ADJ
					 WRITE(funito,3381) NERC, CURCALYR, m, d, h, GRP_EFD, VLS_EFD,IGRP, JVLS, DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR) + DEM_ADJ, NET_XPORT_EFD(VLS_EFD,GRP_EFD,NERC)
 3381                FORMAT(1X,5(" ",I4),4(" ",I12),2(" ",F22.6))  


                     WRITE(UF_DBG,1511) CURIRUN, CURCALYR, NERC, m, d, h, DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR) + DEM_ADJ, DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), NET_XPORT_EFD(VLS_EFD,GRP_EFD,NERC), DEM_ADJ
 1511                FORMAT(1X," ECPto864_LOAD",6(",",I5),3(",",F22.6))

                  ENDIF
                  
               END DO
            END DO
         END DO

!         DO IYR = 2, UNXPH
!            NET_PEAK_LOAD(NERC,IYR) = NET_PEAK_LOAD(NERC,1) * (EPPEAK(IYR) / EPPEAK(1))
!         END DO


      END DO
      IF (CURITR.EQ.1) THEN
        WRITE(funito,9990) ';' 
      ENDIF
    
     DO m = 1 , 12
        DO d = 1 , 3
            DO h = 1 , 24
                IF (TOT_NET_LOAD(m,d,h) .GT. MAX_TOT_NET_LOAD(m)) THEN
                     MAX_TOT_NET_LOAD(m) = TOT_NET_LOAD(m,d,h)
!                     NET_PEAK_LOAD(NERC,1) = DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR)
!                     NET_PEAK_MONTH = m
                ENDIF
            END DO
        END DO
        
        IF (MAX_TOT_NET_LOAD(m) .GT. TOP_NET_LOAD(1)) THEN
            TOP_NET_LOAD(3) = TOP_NET_LOAD(2)
            TOP_NET_LOAD_MONTHS(3) = TOP_NET_LOAD_MONTHS(2)
            
            TOP_NET_LOAD(2) = TOP_NET_LOAD(1)
            TOP_NET_LOAD_MONTHS(2) = TOP_NET_LOAD_MONTHS(1)
            
            TOP_NET_LOAD(1) = MAX_TOT_NET_LOAD(m)
            TOP_NET_LOAD_MONTHS(1) = m

        ELSE IF (MAX_TOT_NET_LOAD(m) .GT. TOP_NET_LOAD(2)) THEN
            TOP_NET_LOAD(3) = TOP_NET_LOAD(2)
            TOP_NET_LOAD_MONTHS(3) = TOP_NET_LOAD_MONTHS(2)
            
            TOP_NET_LOAD(2) = MAX_TOT_NET_LOAD(m)
            TOP_NET_LOAD_MONTHS(2) = m
            
        ELSE IF (MAX_TOT_NET_LOAD(m) .GT. TOP_NET_LOAD(3)) THEN
            TOP_NET_LOAD(3) = MAX_TOT_NET_LOAD(m)
            TOP_NET_LOAD_MONTHS(3) = m
        ENDIF
     END DO
	  
	IF (CURITR.EQ.1) THEN 
                WRITE(funito,9990) 'COMPOSITE TABLE:'
                WRITE(funito,1997)   'm'  , 'Map_PeakMonth'
 1997    FORMAT(1X,1(" ",A4),1(" ",A13))  
 
          IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,1619) 'PEAKMONTH1', 'PEAKMONTH2','PEAKMONTH3'
 1619       FORMAT(1X," ECPto864_Map_PeakMonth",5(",",A12))
          END IF
 
!		DO m = 1 , UNRGNS
1998            FORMAT(1X,1(" ",I4),1(" ",I1))   
        DO m = 1,12
            
            !turning off for now
            ! Include peak day in top 3 net load months
            !IF (m .EQ. TOP_NET_LOAD_MONTHS(1) .OR. m .EQ. TOP_NET_LOAD_MONTHS(2) .OR. m .EQ. TOP_NET_LOAD_MONTHS(3)) THEN
		!	    WRITE(funito,1998)  m, 1
           ! ELSE
                WRITE(funito,1998)  m, 0
            !ENDIF
        END DO
        !END DO
 
			WRITE(UF_DBG,1618)  TOP_NET_LOAD_MONTHS(1), TOP_NET_LOAD_MONTHS(2), TOP_NET_LOAD_MONTHS(3)
 1618       FORMAT(1X," ECPto864_Map_PeakMonth",3(",",I5))
		!END DO
	WRITE(funito,9990) ';' 
    
    WRITE(funito,1323) LINELOSS 
1323    FORMAT(1X,'TransLoss:=',F10.6,';')
    
    END IF
    
      
     IF (CURITR.EQ.1) THEN 
                WRITE(funito,9990) 'COMPOSITE TABLE:'
                WRITE(funito,1991)   'm'  ,'s' , 'Map_ms'
 1991    FORMAT(1X,1(" ",A4),1(" ",A4),1(" ",A6))                   
      
         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,1610) 'IRUN ', 'CYEAR', 'MONTH', 'SEASN', 'MAPms'
 1610       FORMAT(1X," ECPto864_MapMS",5(",",A5))
         END IF
     Do m=1,12
         WRITE(funito,1992)   m  ,TMPSN(m)
 1992       FORMAT(1X,1(" ",I4),1(" ",I4),5x," 1")              

            WRITE(UF_DBG,1611) CURIRUN, CURCALYR, m, TMPSN(m), 1
 1611       FORMAT(1X," ECPto864_MapMS",5(",",I5))

     ENDDO
     WRITE(funito,9990) ';' 
     ENDIF  
	 
	 IF (CURITR.EQ.1) THEN 
                WRITE(funito,9990) 'COMPOSITE TABLE:'
                WRITE(funito,1993)   'm'  ,'es' , 'Map_mes'
 1993    FORMAT(1X,1(" ",A4),1(" ",A4),1(" ",A7))                   
      
     Do m=1,12
		! WINTER
		if (TMPSN(m) .EQ. 1) then
			WRITE(funito,1992)   m  , 4
		! SUMMER
		elseif (TMPSN(m) .EQ. 2) then
			WRITE(funito,1992)   m  ,TMPSN(m)
		else
			! SPRING
			if ((m .EQ. 4) .or. (m .EQ. 5)) then
				WRITE(funito,1992)   m  , 1
			! FALL
			else
				WRITE(funito,1992)   m ,  3
			endif
		endif
 !1992       FORMAT(1X,1(" ",I4),1(" ",I4),5x," 1")              

     ENDDO
     WRITE(funito,9990) ';' 
     ENDIF  
     
      IF (CURITR.EQ.1) THEN 
         WRITE(funito,9990) 'COMPOSITE TABLE:'
         WRITE(funito,2991)   'r'  ,'y' , 'm' , 'd' , 'h'  , 'tech' , 'SolWindCapFactor'
 2991    FORMAT(1X,6(" ",A4),1(" ",A22))               
    
         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,1710) 'IRUN ', 'CYEAR', 'EMMrg', 'MONTH', 'DTYPE', ' HOUR', ' TECH', '            CapFactor', '              URTPCFA'
 1710       FORMAT(1X," ECPto864_INT_CF",7(",",A5),2(",",A22))
         END IF
      
      DO NERC = 1 , UNRGNS
         CALL GETBLD(1,NERC)
            DO m = 1 , 12
               DO d = 1 , 3
                  DO h = 1 , 24
                     IGRP = HRtoECPgrp(m,d,h)
					 ISP = EPGECP(IGRP)
					 if (WSSPVEL_CF(NERC,CURIYR-1,d,m,h) > 0.0) THEN
						WRITE(funito,2381) NERC, CURCALYR, m, d, h, WIPV, WSSPVEL_CF(NERC,CURIYR-1,d,m,h) * URPVCFA(CURIYR)
                     end if
					 if (WSSPTEL_CF(NERC,CURIYR-1,d,m,h) > 0.0) THEN
						WRITE(funito,2381) NERC, CURCALYR, m, d, h, WIPT, WSSPTEL_CF(NERC,CURIYR-1,d,m,h) * URPVCFA(CURIYR)
                     end if
					 if (WSSSTEL_CF(NERC,CURIYR-1,d,m,h) > 0.0) THEN
						WRITE(funito,2381) NERC, CURCALYR, m, d, h, WISO, WSSSTEL_CF(NERC,CURIYR-1,d,m,h) * URSOCFA(CURIYR)
                     end if
					 if (WSFWIEL_CF(NERC,CURIYR-1,d,m,h) > 0.0) THEN
						WRITE(funito,2381) NERC, CURCALYR, m, d, h, WIWN, WSFWIEL_CF(NERC,CURIYR-1,d,m,h) * URWNCFA(CURIYR)
                     end if
					 if (WSFWLEL_CF(NERC,CURIYR-1,d,m,h) > 0.0) THEN
						WRITE(funito,2381) NERC, CURCALYR, m, d, h, WIWL, WSFWLEL_CF(NERC,CURIYR-1,d,m,h) * URWNCFA(CURIYR)
                     end if
					 if (WSFWFEL_CF(NERC,CURIYR-1,d,m,h) > 0.0) THEN
						WRITE(funito,2381) NERC, CURCALYR, m, d, h, WIWF, WSFWFEL_CF(NERC,CURIYR-1,d,m,h) * URWNCFA(CURIYR)
					 end if
 2381                FORMAT(1X,6(" ",I4),1(" ",F22.6)) 

                     WRITE(UF_DBG,1711) CURIRUN, CURCALYR, NERC, m, d, h, WIPV, WSSPVEL_CF(NERC,CURIYR-1,d,m,h), URPVCFA(CURIYR)
                     WRITE(UF_DBG,1711) CURIRUN, CURCALYR, NERC, m, d, h, WIPT, WSSPTEL_CF(NERC,CURIYR-1,d,m,h), URPVCFA(CURIYR)
                     WRITE(UF_DBG,1711) CURIRUN, CURCALYR, NERC, m, d, h, WISO, WSSSTEL_CF(NERC,CURIYR-1,d,m,h), URSOCFA(CURIYR)
                     WRITE(UF_DBG,1711) CURIRUN, CURCALYR, NERC, m, d, h, WIWN, WSFWIEL_CF(NERC,CURIYR-1,d,m,h), URWNCFA(CURIYR)
                     WRITE(UF_DBG,1711) CURIRUN, CURCALYR, NERC, m, d, h, WIWL, WSFWLEL_CF(NERC,CURIYR-1,d,m,h), URWNCFA(CURIYR)
                     WRITE(UF_DBG,1711) CURIRUN, CURCALYR, NERC, m, d, h, WIWF, WSFWFEL_CF(NERC,CURIYR-1,d,m,h), URWNCFA(CURIYR)
 1711                FORMAT(1X," ECPto864_INT_CF",7(",",I5),2(",",F22.6))

                  ENDDO
               ENDDO
            ENDDO
         ENDDO
         WRITE(funito,9990) ';'  
      ENDIF  
	  
	WRITE(funito,9990) 'COMPOSITE TABLE:'
    WRITE(funito,8922)   'y'  ,'r' , 'DPVcap'
8922    FORMAT(1X,2(" ",A8),1(" ",A24))     
8923    FORMAT(1X,2(" ",I8),1(" ",F22.6))  

 DO NERC = 1 , UNRGNS
	WRITE(funito,8923) CURCALYR, NERC, DPVTOTCAPNR(NERC,CURIYR)
END DO

WRITE(funito,9990) ';'

WRITE(funito,9990) 'COMPOSITE TABLE:'
WRITE(funito,8924)   'y'  ,'r' , 'DPVgen'
8924    FORMAT(1X,2(" ",A8),1(" ",A24))     
8925    FORMAT(1X,2(" ",I8),1(" ",F22.6)) 

 DO NERC = 1 , UNRGNS
	WRITE(funito,8925) CURCALYR, NERC, DPVTOTGENNR(NERC,CURIYR)
END DO

WRITE(funito,9990) ';'
      
    ! START - THIS ELECTRICTY H2 GENERATION TERM IS FOR RESTORE, BUT SINCE EFD RUNS AFTER RESTORE, WE USE THE PREVIOUS YEAR'S GENERATION TERM
      
    WRITE(funito,9990) 'COMPOSITE TABLE:'
    WRITE(funito,8914)   ' es'  ,' r' , ' h2_turbine_generation'
8914    FORMAT(1X,2(" ",A8),1(" ",A24))     
8915    FORMAT(1X,2(" ",I8),1(" ",F22.6))   

   PREVIOUS_YEAR = (CURIYR+1989) - 1

   DO SEASONS = 1, 4
	  EMM_SEASON = EPHRTS_TO_EMM_SEASONAL_MAPPING(SEASONS) ! RETURNS EMM SEASONS USING MAPPINGS, DEFINED IN DSMCALDR INCLUDE BLOCK
      DO REGIONS = 1, 25
	  
		       IF (SEASONS .EQ. 1) THEN ! SPRING
                  H2_GENERATION = H2_TURBINE_GENERATION(PREVIOUS_YEAR, EMM_SEASON, REGIONS) / 2.0
               ELSEIF (SEASONS .EQ. 3) THEN   ! AND FALL 
                  H2_GENERATION = H2_TURBINE_GENERATION(PREVIOUS_YEAR, EMM_SEASON, REGIONS) / 2.0
               ELSE IF (SEASONS .EQ. 2) THEN  ! SUMMER
                  H2_GENERATION = H2_TURBINE_GENERATION(PREVIOUS_YEAR, EMM_SEASON, REGIONS)
               ELSE IF (SEASONS .EQ. 4) THEN ! WINTER
                  H2_GENERATION = H2_TURBINE_GENERATION(PREVIOUS_YEAR, EMM_SEASON, REGIONS)
               END IF
		 WRITE(funito,8915) SEASONS, REGIONS, H2_GENERATION
         !WRITE(funito,8915) SEASONS, REGIONS, H2_TURBINE_GENERATION(PREVIOUS_YEAR, EMM_SEASON, REGIONS)
! 2381                FORMAT(1X,2(" ",I4),1(" ",F22.6)) 

       END DO
    END DO
    WRITE(funito,9990) ';'
    
    ! END - THIS ELECTRICTY H2 GENERATION TERM IS FOR RESTORE, BUT SINCE EFD RUNS AFTER RESTORE, WE USE THE PREVIOUS YEAR'S GENERATION TERM
         
	  
	  IF (CURITR.EQ.1) THEN 
         WRITE(funito,9990) 'COMPOSITE TABLE:'
         WRITE(funito,2991)   'r'  ,'y' , 'm' , 'd' , 'h'  , 'tech' , 'ClipCapFactor'
 !2991    FORMAT(1X,6(" ",A4),1(" ",A22))               
    
         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,1714) 'IRUN ', 'CYEAR', 'EMMrg', 'MONTH', 'DTYPE', ' HOUR', ' TECH', '            ClipCapFactor', '              URTPCFA'
 1714       FORMAT(1X," ECPto864_CLIP_CF",7(",",A5),2(",",A22))
         END IF

      DO NERC = 1 , UNRGNS
         CALL GETBLD(1,NERC)
            DO m = 1 , 12
               DO d = 1 , 3
                  DO h = 1 , 24
                     IGRP = HRtoECPgrp(m,d,h)
					 ISP = EPGECP(IGRP)

					 IF (WSSPTEL_CF_CLIP(NERC,CURIYR-1,d,m,h) > 0.0) THEN
						WRITE(funito,2381) NERC, CURCALYR, m, d, h, WIPT, WSSPTEL_CF_CLIP(NERC,CURIYR-1,d,m,h) * URPVCFA(CURIYR)
					 END IF


 !2381                FORMAT(1X,6(" ",I4),1(" ",F24.10)) 

                     WRITE(UF_DBG,1715) CURIRUN, CURCALYR, NERC, m, d, h, WIPT, WSSPTEL_CF_CLIP(NERC,CURIYR-1,d,m,h), URPVCFA(CURIYR)

 1715                FORMAT(1X," ECPto864_CLIP_CF",7(",",I5),2(",",F22.8))

                  ENDDO
               ENDDO
            ENDDO
         ENDDO
         WRITE(funito,9990) ';'  
      ENDIF  


!     CALCULATE BATTERY STORAGE REVENUE
      CALL CALC_STORAGE_VAL(funito)
      CALL CAP_CREDIT
      

      CALL MPTIM2(CPU_TIME_BEGIN)

      WRITE (18,39) '** BEGIN REVISES ',FLOAT(CPU_TIME_BEGIN)/100.
  39  FORMAT(10X,A,' CPU TIME (SECONDS) = ',F7.2,A,F7.2)
!
!     PUT REVISES HERE
!
!     REVISE GNP DEFLATORS
!
      DO IYR = 1 , UNYEAR
         UPGNPD(IYR) = MC_JPGDP(IYR)
         WRITE(18,*) 'YR,GNP DEFLATOR ',IYR,UPGNPD(IYR)
      END DO
      GRW = DBLE(MC_JPGDP(UNYEAR) / MC_JPGDP(1)) ** (DBLE(1.0) / DBLE(UNYEAR - 1.0))
      DO IYR = UNYEAR + 1, UNYEAR + UNFPH
         UPGNPD(IYR) = UPGNPD(IYR - 1) * GRW
         WRITE(18,*) 'YR,GNP DEFLATOR ',IYR,UPGNPD(IYR)
      END DO
!
!     WRITE OUT DEFLATOR TABLE (DEF) FOR EMM DATABASE
!
      IF (USW_DBS .GT. 0) THEN
         DO IYR = CURIYR, UNYEAR + UNFPH
            WRITE(UF_DBS,5400) COL,CURIYR,COL,IYR,COL,UPGNPD(IYR),COL,TRIM(SCEN_DATE)
 5400       FORMAT(1X,'DEF',A2,I3,A2,I3,A2,F8.3,A2,A)
         ENDDO
      ENDIF
!
!     OVERWRITE RETIREMENT INFO, IF YEAR-SPECIFIC METHOD USED
!
      IF ((CURIYR + UHBSYR) .EQ. UPSTYR)RETYR = UPRETRT0
      IF (UPRETRT0 .GT. 0.0 .AND. RETYR .GT. 0.0)THEN
         IF ((CURIYR + UHBSYR + UPRTLT - 1) .GE. (UPSTYR + 1))THEN
!           UPRETRAT = 0.0
!        ELSE
            RETYR = UPRETRT0 + UPRETCHG * FLOAT((CURIYR + UHBSYR + UPRTLT - 1) - (UPSTYR + 1))
            IF (RETYR .GT. UPRETRTL)RETYR = 0.0
            UPRETRAT = RETYR
         END IF
      END IF
!     REMOVE RETIREMENT LIMIT IF ACE YEAR
      IF (USW_ACE .GT. 0 .AND. (CURIYR + UHBSYR + UPRTLT) .EQ. UYR_ACE(1))UPRETRAT = 0.0
!
!     COMPUTE AVERAGE DISCOUNT RATE
!
      AVGDCR = 0.0
      AVGUDCR = 0.0
!
!     IN FINAL MASS-BASED EXISTING CASE, STORE ALLOWANCE PRICE FOR SET-ASIDES IF USED
!
      IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
         IF (CO2_STDSW .GT. 0 .AND. CO2_STDQT .EQ. 2 .AND. CO2_STDSA .EQ. 1)THEN
!           STORE PREVIOUS CYCLE ALLOWANCE PRICES
            DO IYR = 1 , UNYEAR
               CPPALLOW(IYR) = ECO2NRPP(MNUMNR,IYR)
            END DO
         END IF
      END IF
!
      DO NERC = 1 , UNRGNS
!
!        GET NERC REGION SPECIFIC DATA FROM DAF
!
         CALL GETBLD(1,NERC)
!
         AVGDCR = AVGDCR + EPDSCRT
         AVGUDCR = AVGUDCR + EPUTDSCRT
         IF(NERC .EQ. UNRGNS)AVGDCR = AVGDCR / FLOAT(UNRGNS)
         IF(NERC .EQ. UNRGNS)AVGUDCR = AVGUDCR / FLOAT(UNRGNS)
      END DO

      C_DR(CURIYR) = AVGUDCR
      T_DR(CURIYR) = AVGUDCR
      S_DR(CURIYR) = AVGUDCR
      Write(6,*)'real C_DR ',CURIYR,C_DR(CURIYR)



!
!     GET EFD OUTPUT DATA FOR EFRSO2 (AVERAGE SO2 BY FUEL TYPE)
!
!     SET SO2 ALLOWANCES
!
      CALL EP$ALLOW
!
!     Call Subroutine for Emissions Limits in Transport Rule, If Needed
!
      IF (TSO2_YR_BY_CLRG .LT. 9999)CALL EPA$TRANRG_ECP(0,CURIYR,NERC,1,COLUMN,COLUMN_mask,EMIS)
!
!     SET CARBON CONSTRAINT, IF ANY
!
      CALL EP$CARLM
!
!     SET CLEAN POWER PLANT STRUCTURE, IF IMPLEMENTED
!
      CALL EP$CPP
      CALL EP$CPP2
!
!     SET GRID RELIABILITY ROWS, IF IMPLEMENTED
!
      CALL EP$GRD

!     Set up state RPS constraints

      IF (ST_RPS_SW .EQ. 1) CALL EP$ST_RPS

!     SET ETT FLOW CONSTRAINTS

      CALL EP$ETT
!
!     FOR CARBON STABILIZATION CASES, IDENTIFY YEAR WHEN CARBON
!     REDUCTIONS START IN ORDER TO APPLY VALUE OF WAITING ADJUSTMENT
!
      IF ((CURIYR + UHBSYR) .EQ. UPSTYR) THEN
         IF (UYR_CARWS .GT. 0 .AND. (TAX_FLAG /= 0 .OR. PERMIT_FLAG /= 0)) THEN
            DO IYR = CURIYR , UNYEAR
               IF (EMETAX(2,IYR) .LE. 0.0) THEN
                  UYR_CARWE = UHBSYR + IYR + 1
               END IF
            END DO
         ELSE
            URCARWT = 0.0
         END IF
!
!        STORE INITIAL VALUE OF WAITING IN TEMPORARY VARIABLE
!
         VALWTMP = URCARWT
      END IF
!
!     DETERMINE VALUE OF WAITING ADJUSTMENT PRIOR TO CARBON STABILIZATION
!
      IF ((CURIYR + UHBSYR) .GE. UYR_CARWS .AND. (CURIYR + UHBSYR) .LT. UYR_CARWE) THEN
!
!        DECLINE VALUE OF WAITING LINEARLY
!
         URCARWT = VALWTMP * FLOAT(UYR_CARWE - (CURIYR + UHBSYR)) / FLOAT(UYR_CARWE - UYR_CARWS)
         URCARWT = MAX(URCARWT,0.0)
      ELSE
         URCARWT = 0.0
      END IF
!
!     SET UP ELASTICITIES FOR CAPACITY SUPPLY CURVES
!
      CALL EP$ELAST
!
!     SET UP NATIONAL AND/OR REGIONAL CAPACITY LIMITS, IF ANY
!
      CALL EP$BLDLIM
!
!     SET UP CAPACITY LIMITS ON SUBSIDIES, IF ANY
!
      CALL EP$SUBLIM
!
!     SET UP BONUS ALLOWANCE LIMITS ON CO2 SEQUESTRATION, IF ANY
!
      IF (UPSEQCAS .GT. 0)CALL EP$SEQBNS
!
!     Create Pseudo Coal Supply Curves
!
      CALL EP$CSUPPLY
!
!     Process Coal Upgrades / Retirement Records
!
      CALL EP$COAL

!     Create NGBS Unit Specific Commits

      CALL EP$NGBS
!
!     Calculate Carbon Prices by Fuel Region
!
      CALL EPFLPRC
!
!     SET UP ROWS FOR OIL AND NATURAL GAS SUPPLY CURVES
!
      CALL EP$FLCRV
!
!     SET UP FREE ROWS FOR GENERATION AND FUEL CONSUMPTION FOR CAPACITY FACTORS
!
      CALL EP$CF
!
!     IF NUMBER OF BIOMASS SUPPLY STEPS GREATER THAN ZERO THEN SET UP RENEWABLE FUEL SUPPLY CURVE FOR BIOMASS
!
      IF (WSTBMEL .NE. 0) THEN
         CALL EP$RFS
      END IF
!
!     SET UP SUBSIDIES FOR GENERATOR PERFORMANCE STANDARD, IF ANY
!
      CALL EP$GPS

!     Set up CO2 Transport to EOR Regions

      CALL EP$CCAP
!
!     LOOP ON NERC REGIONS
!
      DO NERC = 1 , UNRGNS
!
!        GET NERC REGION SPECIFIC DATA FROM DAF
!
         CALL GETBLD(1,NERC)
!
!        GET EFD OUTPUT DATA FOR EFRSO2 (AVERAGE SO2 BY FUEL TYPE)
!
         CALL GETOUT(CURIYR-1,NERC)
!
         CALL RNWRPT(NERC)
!
         CALL FOSRPT(NERC)
!
         CALL STORPT(NERC)
!
         CALL DGNRPT(NERC)
!
         CALL CAPRPT(NERC)
!
         IF ((USW_DBS .GT. 0) .OR. ((ORCLECP .EQ. 1).AND.(FNRUN.EQ.1)) ) THEN
            CALL EMMDBIN(NERC)
         ENDIF
!
!        LIMIT ECONOMIC RETIREMENTS, IF MAXIMUM RATE
!
         CALL EP$RET(NERC)
!
!        LIMIT BUILDS OF DISPATACHABLE AND RENEWABLE CAPACITY
!
         CALL EP$BLD(NERC)
!
!        PRINT DISCOUNT RATE AND RISK PREMIUMS
!
         DO PLT = 1 , ECP_D_DSP
            WRITE(18,2000) 'DSP',CURIYR+UHBSYR,CURITR,PLT,UCPDSPI(PLT),UPRSK(UCPDSPI(PLT))
         END DO
         DO PLT = 1 , ECP_D_INT
            WRITE(18,2000) 'INT',CURIYR+UHBSYR,CURITR,PLT,UCPINTI(PLT),UPRSK(UCPINTI(PLT))
         END DO
         DO PLT = 1 , ECP_D_STO
            IF (UCPSTOI(PLT) .GT. 0) THEN
               WRITE(18,2000) 'STO',CURIYR+UHBSYR,CURITR,PLT,UCPSTOI(PLT),UPRSK(UCPSTOI(PLT))
            END IF
         END DO
         DO PLT = 1 , ECP_D_RNW
            IF (UCPRNWI(PLT) .GT. 0) THEN
               WRITE(18,2000) 'RNW',CURIYR+UHBSYR,CURITR,PLT,UCPRNWI(PLT),UPRSK(UCPRNWI(PLT))
            END IF
         END DO
 2000    FORMAT(1X,"RISK(%):",A,4(":",I4),":",F6.1)
!
!        SET UP PURCHASED CAPACITY LIMIT CONSTRAINTS
!
         CALL EP$PCL(NERC)
!
!        LOOP OVER ALL YEARS IN THE EXPLICIT PLANNING HORIZON
!
         DO YEAR = 1 , UNXPH
!
            IF (YEAR .EQ. 1) THEN
              IF ((CURIYR + UHBSYR) .GT. UPSTYR) THEN
               CALL GETBOUT(CURIYR-1,NERC)
              ENDIF
            ENDIF
!
!
            IYR = CURIYR + YEAR - 1
!
!           GET FIRM INTERREGIONAL FLOWS
!
            CALL GETEIJ(IYR)
!
!           SET PLANNED MAINTENANCE CONSTRAINTS
!
            CALL EP$PM$LF(NERC,YEAR)
!
!           SET RESERVE MARGIN CONSTRAINTS
!
            CALL EP$MRM(NERC,YEAR)
!
!           SET LOAD REQUIREMENTS
!
            CALL EP$LOAD(NERC,YEAR)
!
!           SET UP RENEWABLE PORTFOLIO STANDARD (RESTRUCTURING)
!
            CALL EP$RPS(NERC,YEAR)
!
!           SET UP MINIMUM COFIRING GENERATION REQUIREMENT, IF ANY
!
            CALL EP$CFMIN(NERC,YEAR)
!
!           SET UP CAPACITY PORTFOLIO STANDARD
!
            IF (UPCAPCAS .GT. 0 .AND. NERC .EQ. 1)CALL EP$CPS(NERC,YEAR)
!
!           IF SWITCH IS SET, CREATE CONSTRAINTS GO LIMIT
!           INTERMITTENT SUPPLIES AS A PCT. OF TOTAL GENERATION
!
            IF (UPINTSW .GE. 2) THEN
              CALL EP$LINT(NERC,YEAR)
            ENDIF
!
!           SET UP DISPATCHABLE CAPACITY BUILDS BY OWNERSHIP
!
            CALL EP$BDSP(NERC,YEAR)
!
!           SET UP OTHER RENEWABLES (BUILDS BY OWNERSHIP)
!
            CALL EP$BRNW(NERC,YEAR)
!
!           SET UP DISPATCHABLE CAPACITY OPERATES
!
            CALL EP$ODSP(NERC,YEAR)
!
!           SET UP RENEWABLE CAPACITY OPERATES
!
            CALL EP$ORNW(NERC,YEAR)
!
!           SET UP INTERMITTENT CAPACITY (BUILD/OPERATES BY OWNERSHIP)
!
            CALL EP$INT(NERC,YEAR)
!
!           SET UP DISTRIBUTED GENERATION CAPACITY (BUILD/OPERATES)
!
            IF(UPDGAVR .GT. 0.0)CALL EP$BDGN(NERC,YEAR)
!
!           STORE LEVELIZED COST DATA
!
            IF (YEAR .EQ. 1) THEN
               CALL STRBOUT(CURIYR,NERC)

!              WRITE(6,7119) CURIRUN, CURCALYR, NERC
!7119          FORMAT(1X,"CALL_STRBOUT_UECP_1131",3(":",I4))
            ENDIF
!
         END DO  ! YEAR
!
!        STORE NERC REGION SPECIFIC DATA TO DAF
!
         CALL STRBLD(1,NERC)
!
      END DO  ! NERC
!
!     Process Nuclear Builds and Operates
!
      CALL EP$NUC
!
      CALL MPTIM2(CPU_TIME_END)
      WRITE (18,49) '** END REVISES ** ',FLOAT(CPU_TIME_END)/100., &
         FLOAT(CPU_TIME_END)/100. - FLOAT(CPU_TIME_BEGIN)/100.
   49 FORMAT(10X,A,' CPU TIME (SECONDS) = ',F7.2,', TIME USED = ',F7.2)
!
      RETURN
      END

!     THIS SUBROUTINE DETERMINE THE ECP RESERVE MARGINS
!     IT USES THE RESERVE MARGINS AND RELIABILITY PRICES
!     FROM THE INPUT RESTART FILE (DAD) AND ITS PREDECESSOR (GRANDDAD)

      SUBROUTINE EP$RELRM(REG)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'ecpcntl'
      include 'efpout'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'uecpout'

      REAL*4 MEFAC2(MNUMNR)

      INTEGER REG,IOWN,IY

      ecpsub='EP$RELRM'

!     DETERMINE CAPACITY PAYMENT INFO

      IOWN = UPBLDTYP(REG)
      IF(CURIYR+UHBSYR .GE. (UPSTYR + UPPLYR(WICT))) THEN 
         CALL GETBOUT(CURIYR - UPPLYR(WICT),REG)
      ENDIF
      MEFAC2(REG) = MIN(EPLVCAP(WICT,IOWN) + EPLVFOM(WICT),EPLVCAP(WIAT,IOWN) + EPLVFOM(WIAT))          


      RMAVG(CURIYR,REG) = ( CPWT1*(NETCON * MEFAC2(REG)) + (cpwt2 * LEVRMD(CURIYR,REG)) + (cpwt3 * LEVRMD2(CURIYR,REG)) + (cpwt4 * LEVRMD2C(CURIYR,REG))   )  
!     IF (CURIYR.EQ.23 .OR. CURIYR.EQ.24) RMAVG(CURIYR,REG) = MEFAC(REG)
      IF ((CURIYR+UHBSYR) .LE. (ECP_FYR + 1))  RMAVG(CURIYR,REG) = MEFAC(REG)

      RMPOOL(CURIYR,REG) = RMAVG(CURIYR,REG) * LEVRMC(CURIYR,REG)         
      WRITE(18,4024)'MEFAC in EP$RELRM',REG,CURIYR, RMPOOL(CURIYR,REG) ,RMAVG(CURIYR,REG),CPWT1,NETCON,MEFAC2(REG),cpwt2,LEVRMD(CURIYR,REG), & 
           cpwt3,LEVRMD2(CURIYR,REG),cpwt4,LEVRMD2C(CURIYR,REG),MEFAC(REG)
4024  FORMAT(A25,1x,2(I4,1x),12(F15.6,1x))

      DO IY = UESTYR - UHBSYR, ECP_FYR-UHBSYR-1

         RMPOOL(IY,REG) =RMPOOL(ECP_FYR-UHBSYR,REG) 
         RMAVG(IY,REG) =RMAVG(ECP_FYR-UHBSYR,REG)          
      ENDDO

      CALL GETBOUT(CURIYR,REG)

      RETURN
      END
!
      SUBROUTINE EP$CSUPPLY
      use ecp_row_col
!
!     THIS SUBROUTINE Creates Pseudo Coal Supply Curves
!
      IMPLICIT NONE
!
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'dispinyr'
      include 'bildin'
      include 'emission'
      include 'emoblk'
      include 'emablk'
      include 'cdsparms'
      include 'uso2grp'
      include 'ecp_coal'
      include 'coalemm'
      include 'dispin'
      include 'dispett'
      include 'dispout'
      include 'wrenew'
      include 'wwdcomon'
      include 'coalrep'       !delete cdscom2l for 2030 version
      include 'uefdout'
      include 'csapr'
      include 'emmemis'
      include 'ecp_nuc'
      include 'emm_aimms'
!
      REAL*8 RHS,DIGITS2,QFLRG(2,NDREG),VAL,VAL1,OBJVAL,PVAL,TVAL,CFBND,C_TRAN,C_ACI,VOMCST,T_TMP
      REAL*8 SIGN,STOCK_UP,STOCK_DN,VALR

      REAL*8 G_HTRT(ECP_D_DSP,NDREG,ECP_D_XPH), C_HTRT(ECP_D_DSP,NDREG,ECP_D_XPH), W_HTRT(ECP_D_DSP,NDREG,ECP_D_XPH)
      REAL*8 G_HTRT_0(ECP_D_DSP,NDREG,ECP_D_XPH), C_HTRT_0(ECP_D_DSP,NDREG,ECP_D_XPH)
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)

      REAL*8 PCL(ECP_D_FPH),SHR_CDS(ECP_D_DSP,NDREG),SHR_US(ECP_D_DSP,MAXNFR),T_US,T_CDS(NDREG),T_EMM(MNUMNR),A_CDS(NDREG),A_US
      REAL*8 PVV,PWF,DSCRT,KW(ECP_D_FPH),PV_KW,QCL(ECP_D_FPH),Q_CDS_EMM(NDREG,MNUMNR)
      REAL*8 CRF,OV_CST
      REAL*8 TXBOOK,FNBOOK,URATIO,CAPUNSTL,CAPUTIL
      REAL*8 UFPE
      REAL*8 UROR
      REAL*8 TXRT
      REAL*8 CS_SHR,QFL_SC(MX_NCOALS+MX_ISCV,NDREG),COFSUB,COFHUR,VOM(ECP_D_FPH),MIN_COF,TFOM(ECP_D_FPH),FOM,XTR_TRN,TST_LIG(NDREG),MACT_EMF
      REAL*4 SO2SHR
      INTEGER*4 I_RANK,I_HG,LYR,IY,TST_PLT(ECP_D_DSP,MX_NCOALS+MX_ISCV),CF_STP,ICL,LDV_PRF,ISO2,ICLS,MACT_SW
      INTEGER*4 NERC,YEAR,JEFD,IRG,JECP,JYR,KYR,ISCRB,ISTEP,MSTEP,CL_SC,CL_ISC,IPLT,J_ACI,I_ACI,COF_EMM,TST_ACI,XYR,I_FLRG
      INTEGER*4 TST_ECP(NCLUT1),TST_HGP(NDREG,ECP_D_CAP,ECP_D_XPH),TST_SO2P(MX_SO2_GRP,ECP_D_CAP,ECP_D_XPH)
      INTEGER*4 FRG,GRP
!
      REAL*8 OUT,HR,IN,PRCNT,LIM,GRAM,HG,EMF_P,EMF_M,F_FGD,F_SCR,A,B,C,D,EMF_T(NSTEP),ACI(NSTEP)
      INTEGER*4 Allowed(NSTEP),NMAX,N,CHOICE
!
      CHARACTER*16   COLUMN
      CHARACTER*16   ROW,ROW2,ROW_CF,ROW_FLDV,ROW_ACI,ROW_HG,ROW_SO2,ROW_RNW,ROW_SC
      CHARACTER*16   ROW_WD,ROW_F,ROW_G,ROW_CAR,ROW_CARR,ROW_COF,ROW_1st,ROW_XC
      CHARACTER*12   FROM_LABEL
      CHARACTER*3    CSS
      CHARACTER*2    SC_CD
      CHARACTER*1    SCRB_CD(2),RANK_CD,ACI_CD(MX_ACI+1),RNK_CD,COF_CD(ECP_D_CFS),COF_CMB(ECP_D_RCF,ECP_D_CFS)
      CHARACTER*1    SO2_CODE
!
      COMMON /TOT_RATES/ TOT_RATE1,TOT_RATE2,TOT_TYPE
      REAL*8 TOT_RATE1(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH),TOT_RATE2(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH)
      INTEGER*4 TOT_TYPE(MX_NCOALS+MX_ISCV)
!
      COMMON /COFSHR/ COFCAP
      REAL*4 COFCAP(ECP_D_RCF,ECP_D_DSP,MNUMNR,MAXNFR)
!
      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN

      character*30 save_row_mask
!     ROW TO LIMIT COFIRING PENETRATION

      ecpsub='EP$CSUPPLY'

      DO YEAR = 1 , UNXPH
         ROW_CF = 'LUXXCOF'//UPYRCD(YEAR); call makmsk(ROW_CF_mask,':LUXXCOF:',UPYRCD(YEAR))
         IF ((YEAR + UPCFCLT) .LT. UNXPH)THEN
            CALL CROWTYPE(ROW_CF,'L       ',ROW_CF_mask)
            VAL = DBLE(UPBQMAX * (1.0 + UPBRMAX) ** FLOAT(YEAR - 1))
            CALL CRHS(UPRHS,ROW_CF,VAL,ROW_CF_mask,'EP$CSUPPLY,1')

!           write(6,3344) curiyr+1989,year,row_cf,val
!3344       format(1h ,'!coflim',i4,i3,1x,a10,f10.3)
         ELSE IF ((YEAR + UPCFCLT) .EQ. UNXPH)THEN
            CALL CROWTYPE(ROW_CF,'N       ',ROW_CF_mask)
         END IF
      END DO

      DO RPS_RGN = 1 , MNUMNR
         MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
      END DO

      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN
         MAP_NERC_TO_RPS_RGN(8) = 9                  
      END IF

      ACI_CD(1) = '0'
      ACI_CD(2) = '1'
      ACI_CD(3) = '2'
      ACI_CD(4) = '3'
      ACI_CD(5) = '4'
      ACI_CD(6) = '5'
      ACI_CD(7) = '6'
      ACI_CD(8) = '7'
!
      COF_CD(1) = '1'
      COF_CD(2) = '2'
      COF_CD(3) = '3'
      COF_CD(4) = '4'
      COF_CD(5) = '5'
      COF_CD(6) = '6'
!
      COF_CMB(1,1) = 'A'
      COF_CMB(1,2) = 'B'
      COF_CMB(1,3) = 'C'
      COF_CMB(1,4) = 'D'
      COF_CMB(1,5) = 'E'
      COF_CMB(1,6) = 'F'
      COF_CMB(2,1) = 'G'
      COF_CMB(2,2) = 'H'
      COF_CMB(2,3) = 'I'
      COF_CMB(2,4) = 'J'
      COF_CMB(2,5) = 'K'
      COF_CMB(2,6) = 'L'
      COF_CMB(3,1) = 'M'
      COF_CMB(3,2) = 'N'
      COF_CMB(3,3) = 'O'
      COF_CMB(3,4) = 'P'
      COF_CMB(3,5) = 'Q'
      COF_CMB(3,6) = 'R'
      COF_CMB(4,1) = 'S'
      COF_CMB(4,2) = 'T'
      COF_CMB(4,3) = 'U'
      COF_CMB(4,4) = 'V'
      COF_CMB(4,5) = 'W'
      COF_CMB(4,6) = 'X'
      COF_CMB(5,1) = 'Y'
      COF_CMB(5,2) = 'Z'
      COF_CMB(5,3) = 'a'
      COF_CMB(5,4) = 'b'
      COF_CMB(5,5) = 'c'
      COF_CMB(5,6) = 'd'
!
      SCRB_CD(1) = 'S'
      SCRB_CD(2) = 'U'
!
      DO YEAR = 1 , UNFPH
         KW(YEAR) = 1.0
      END DO
      DSCRT = DBLE(AVGDCR)
      PV_KW = PVV(KW,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
!
!     Initialize Combined Domestic and International Trans rates
!
      CALL COMBINE_COAL_RATES(CURIYR)
!
!     CHECK FOR DIVERSITY CONSTRAINTS
!
      DV_SUB = 0
      DV_LIG = 0
      TST_HGP = 0
      TST_SO2P = 0
!
!     Cofiring Retrofits
!
      DO IRG = 1 , NDREG
        DO NERC = 1 , UNRGNS
         DO COF_EMM = 1 , ECP_D_RCF
            MIN_COF = 9999.9
            DO YEAR = 1 , UNXPH
              IF (UCF_TCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1) .GT. 0.0 .OR. UCF_RCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1) .GT. 0.0)THEN
               COLUMN = 'E'//UPRGCD(NERC)//EPFLCD(IRG)//COF_CD(COF_EMM)//'COF'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),EPFLCD(IRG),COF_CD(COF_EMM),':COF:',UPYRCD(YEAR))
               ROW = UPOBJ ; ROW_mask=UPOBJ
               VAL = ECP_MIN
               CALL CVAL(COLUMN,ROW,VAL,COLUMN_mask,ROW_mask,'EP$CSUPPLY,2')
               VAL = UCF_RCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1) * 0.001
               IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
               CALL CBND(UPBND,COLUMN,VAL,VAL,COLUMN_mask,'EP$CSUPPLY,3')
               ROW_COF = 'H'//UPRGCD(NERC)//EPFLCD(IRG)//COF_CD(COF_EMM)//'COF'//UPYRCD(YEAR); call makmsk(ROW_COF_mask,':H:',UPRGCD(NERC),EPFLCD(IRG),COF_CD(COF_EMM),':COF:',UPYRCD(YEAR))
               VAL = -1.0
               CALL CVAL(COLUMN,ROW_COF,VAL,COLUMN_mask,ROW_COF_mask,'EP$CSUPPLY,4')
               VAL = 0.0
               CALL CRHS(UPRHS,ROW_COF,VAL,ROW_COF_mask,'EP$CSUPPLY,5')
               CALL CROWTYPE(ROW_COF,'L       ',ROW_COF_mask)
               IF (((CURIYR + UHBSYR + YEAR - UPCFCLT - 1) .GE. UYR_STEO .AND. YEAR .GT. UPCFCLT) .OR. YEAR .EQ. UNXPH) THEN
                  COLUMN = 'B'//UPRGCD(NERC)//EPFLCD(IRG)//COF_CD(COF_EMM)//'COF'//UPYRCD(YEAR - UPCFCLT); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),EPFLCD(IRG),COF_CD(COF_EMM),':COF:',UPYRCD(YEAR - UPCFCLT))
                  VAL = MAX(0.0 , (UCF_TCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1) - UCF_RCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1)) * 0.001)
                  IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),VAL,COLUMN_mask,'EP$CSUPPLY,6')
!                 PUT IN ROW TO LIMIT PENETRAION OF RETROFITS
                  ROW_CF = 'LUXXCOF'//UPYRCD(YEAR - UPCFCLT); call makmsk(ROW_CF_mask,':LUXXCOF:',UPYRCD(YEAR - UPCFCLT))
                  CALL CVAL(COLUMN,ROW_CF,DBLE(1.0),COLUMN_mask,ROW_CF_mask,'EP$CSUPPLY,7')
                  DO IY = 1 , YEAR - 1
                     TFOM(IY) = 0.0
                  END DO
                  DO IY = YEAR , UNXPH
                     ROW_COF = 'H'//UPRGCD(NERC)//EPFLCD(IRG)//COF_CD(COF_EMM)//'COF'//UPYRCD(IY); call makmsk(ROW_COF_mask,':H:',UPRGCD(NERC),EPFLCD(IRG),COF_CD(COF_EMM),':COF:',UPYRCD(IY))
                     VAL = -1.0
                     IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                     CALL CVAL(COLUMN,ROW_COF,VAL,COLUMN_mask,ROW_COF_mask,'EP$CSUPPLY,8')
                     TFOM(IY) = UPCFFOM(COF_EMM) * UPCFLEV(COF_EMM,UPCFNSTP(COF_EMM)) * UPGNPD(CURIYR+IY-1)
                     VAL = MAX(0.0 , (UCF_TCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1) - UCF_RCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1)) * 0.001)
                     MIN_COF = MIN(MIN_COF , VAL)
                  END DO
                  DO IY = UNXPH + 1 , UNFPH
                     TFOM(IY) = UPCFFOM(COF_EMM) * UPCFLEV(COF_EMM,UPCFNSTP(COF_EMM)) * UPGNPD(CURIYR+IY-1)
                  END DO
                  FOM = PVV(TFOM,ECP_D_FPH,UNFPH,DSCRT)
!
                  ROW = UPOBJ ; ROW_mask=UPOBJ
                  TXBOOK = 0.0
                  FNBOOK = 0.0
                  CAPUTIL = 0.0
                  OV_CST = UPCFCST(COF_EMM) * UPCFLEV(COF_EMM,UPCFNSTP(COF_EMM))
                  CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCFCLT,UPCFCLT,CURIYR,YEAR,OV_CST,UPCFCPR,UPCAPD,UPGNPD,EPUIRT,EPUFDT,EPUROR,TXBOOK,FNBOOK)
                  URATIO = TXBOOK / FNBOOK
                  CAPUNSTL = FNBOOK
                  UFPE = DBLE(EPUFPE)
                  UROR = DBLE(EPUROR)
                  TXRT = DBLE(UPTXRT)
                  CALL EPNBLD(UROR,DSCRT,URATIO,UFPE,UPSELF,UPCFELF,TXRT,UPCFELF,CAPUTIL)
                  VAL = FOM + CAPUNSTL * CAPUTIL / CRF(DSCRT,UNFPH-YEAR+1) * PWF(DSCRT,YEAR)
                  IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                  CALL CVAL(COLUMN,ROW,VAL,COLUMN_mask,ROW_mask,'EP$CSUPPLY,9')
!                 IF (YEAR .EQ. UNXPH) THEN
                     ROW = 'C'//UPRGCD(NERC)//EPFLCD(IRG)//COF_CD(COF_EMM)//'COFX'; call makmsk(ROW_mask,':C:',UPRGCD(NERC),EPFLCD(IRG),COF_CD(COF_EMM),':COFX:')
                     VAL = 1.0
                     CALL CVAL(COLUMN,ROW,VAL,COLUMN_mask,ROW_mask,'EP$CSUPPLY,10')
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     VAL = MIN_COF
                     CALL CRHS(UPRHS,ROW,VAL,ROW_mask,'EP$CSUPPLY,11')
!                 END IF
                  END IF
              END IF
            END DO
            END DO
         END DO
      END DO
!
      T_US = 0.0
      A_US = 0.0
      SHR_US = 0.0
      DO IRG = 1 , NDREG
         T_CDS(IRG) = 0.0
         A_CDS(IRG) = 0.0
         DO IPLT = 1 , NUTSEC
            C_ECP_CDS(IPLT,IRG) = 0
         END DO
         DO CL_SC = 1 , MX_NCOALS + MX_ISCV
            QFL_SC(CL_SC,IRG) = 0.0
         END DO
         DO ISCRB = 1 , 2
            QFLRG(ISCRB,IRG) = 0.0
         END DO
      END DO
!
      DO NERC = 1 , UNRGNS
         DO IRG = 1 , NDREG
            Q_CDS_EMM(IRG,NERC) = 0.0
            C_EMM_CDS(NERC,IRG) = 0
         END DO
         T_EMM(NERC) = 0.0
      END DO

!     IDENTIFY PLANT TYPES IN EACH COAL REGION
!
      TST_ECP = 0
      DO I_ACI = 1 , NSTEP
         DO I_RANK = 1 , NRANK
            DO IPLT = 1 , NCLUT1
               DO IY = 1 , UNYEAR
                  IF (ACI_OPT(I_ACI,I_RANK,IPLT,IY) .GT. 0) TST_ECP(IPLT) = 1
               END DO
            END DO
         END DO
      END DO      
      
      DO FRG = 1 , UNFRGN
         IRG = EPCLMP(FRG)
         DO NERC = 1 , UNRGNS
!            IF (Q_CDS_EMM(IRG,NERC) .GT. 0 .OR. FL_CNXT_CST(NERC,FRG) .GT. 0.0) THEN
            IF (FRG_EMM_MAP(NERC,FRG) .GT. 0 .OR. FL_CNXT_CST(NERC,FRG) .GT. 0.0) THEN
               C_EMM_CDS(NERC,IRG) = 1
               DO IPLT = 1 , ECP_D_DSP
                  IF (UPTTYP(IPLT) .LE. EX_COAL .AND. WPTTYP(IPLT,NERC) .GT. 0) THEN
                     IF (TST_ECP(IPLT) .EQ. 1) THEN
                        C_ECP_CDS(IPLT,IRG) = 1
                        C_ECP_CDS(IPLT,NDREG+1) = 1
                     END IF
                  END IF
                  IF (UPTTYP(IPLT) .GT. EX_COAL .AND. UPTTYP(IPLT) .LE. NW_COAL .AND. FL_CNXT_CST(NERC,FRG) .GT. 0.0) THEN
                     C_ECP_CDS(IPLT,IRG) = 1
                     C_ECP_CDS(IPLT,NDREG+1) = 1
                  END IF
               END DO
            END IF
         END DO
      END DO

!     Average Heatrates by Coal Region

      G_HTRT = 0.0
      G_HTRT_0 = 0.0
      C_HTRT = 0.0
      C_HTRT_0 = 0.0
      W_HTRT = 0.0
      FROM_LABEL = "EP_CSUPPLY"

      DO IPLT = 1 , NUTSEC
         DO YEAR = 1 , UNXPH
            DO NERC = 1 , UNRGNS
               CALL GETBLD(1,NERC)
               DO I_FLRG = 1 , UNFRGN
                  IRG = EPCLMP(I_FLRG)
                  IF ((C_EMM_CDS(NERC,IRG) .EQ. 1 .AND. C_ECP_CDS(IPLT,IRG) .EQ. 1) .OR. (FL_CNXT_CST(NERC,I_FLRG) .GT. 0.0 .AND. C_ECP_CDS(IPLT,IRG) .EQ. 1 .AND. UPVTYP(IPLT) .EQ. 1)) THEN
                     CALL ECP_AVG_HTRT(FROM_LABEL, NERC, I_FLRG, IPLT, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
                     G_HTRT(IPLT,IRG,YEAR) = G_HTRT(IPLT,IRG,YEAR) + ECP_GEN(IPLT)
                     G_HTRT_0(IPLT,IRG,YEAR) = G_HTRT_0(IPLT,IRG,YEAR) + ECP_GEN(0)
                     C_HTRT(IPLT,IRG,YEAR) = C_HTRT(IPLT,IRG,YEAR) + ECP_GEN(IPLT) * AVG_HTRT(IPLT)
                     C_HTRT_0(IPLT,IRG,YEAR) = C_HTRT_0(IPLT,IRG,YEAR) + ECP_GEN(0) * AVG_HTRT(0)
                  END IF
               END DO
            END DO
         END DO
      END DO

      DO IPLT = 1 , NUTSEC
         DO YEAR = 1 , UNXPH
            DO IRG = 1 , NDREG
               IF (G_HTRT_0(IPLT,IRG,YEAR) .GT. 0.0) THEN
                  IF (G_HTRT(IPLT,IRG,YEAR) .GT. 0.0) THEN
                     C_HTRT(IPLT,IRG,YEAR) = C_HTRT(IPLT,IRG,YEAR) / G_HTRT(IPLT,IRG,YEAR)
                  ELSE
                     C_HTRT(IPLT,IRG,YEAR) = C_HTRT_0(IPLT,IRG,YEAR) / G_HTRT_0(IPLT,IRG,YEAR)
                  END IF
                  W_HTRT(IPLT,IRG,YEAR) = MAX(EPFLRG(IPLT,IRG) * 0.001 , 0.001)
                  C_HTRT_0(IPLT,IRG,YEAR) = C_HTRT_0(IPLT,IRG,YEAR) / G_HTRT_0(IPLT,IRG,YEAR)
               ELSE
                  C_HTRT(IPLT,IRG,YEAR) = 30000.0
                  C_HTRT_0(IPLT,IRG,YEAR) = 30000.0
                  W_HTRT(IPLT,IRG,YEAR) = 0.001
               END IF
            END DO
         END DO
      END DO

!     GET NERC REGION SPECIFIC DATA FROM DAF

      DO NERC = 1 , UNRGNS
         CALL GETBLD(1,NERC)
         DO JEFD = 1 , NUTSEC
            ISCRB = ECP_SCRUB(JEFD,CURIYR)
            DO IRG = 1 , NDREG
               T_US = T_US + EPFLRG(JEFD,IRG) * 0.001
               T_EMM(NERC) = T_EMM(NERC) + EPFLRG(JEFD,IRG) * 0.001
               T_CDS(IRG) = T_CDS(IRG) + EPFLRG(JEFD,IRG) * 0.001
               QFLRG(ISCRB,IRG) = QFLRG(ISCRB,IRG) + EPFLRG(JEFD,IRG) * 0.001
               Q_CDS_EMM(IRG,NERC) = Q_CDS_EMM(IRG,NERC) + EPFLRG(JEFD,IRG) * 0.001
               DO CL_SC = 1 , MX_NCOALS + MX_ISCV
                  IF (TOT_RATE1(CL_SC,IRG,0) .LT. 800.0 .AND. TOT_TYPE(CL_SC) .GT. 0) THEN
                     QFL_SC(CL_SC,IRG) = QFL_SC(CL_SC,IRG) + MAX(0.001 , EPFLRG(JEFD,IRG))
                  END IF
               END DO
            END DO
         END DO
      END DO
!


      DO NERC = 1 , UNRGNS

         WRITE(18,6311) CURIYR+UHBSYR,NERC,(C_EMM_CDS(NERC,IRG),IRG=1,NDREG)
 6311    FORMAT(1X,"C_EMM_CDS",16(":",I4))

      END DO
      DO IPLT = 1 , ECP_D_DSP
         IF (UPTTYP(IPLT) .LE. NW_COAL) THEN
            WRITE(18,6312) CURIYR+UHBSYR,IPLT,(C_ECP_CDS(IPLT,IRG),IRG=1,NDREG),TST_ECP(IPLT)
 6312       FORMAT(1X,"C_ECP_CDS",19(":",I4))
         END IF
      END DO
      DO NERC = 1 , UNRGNS
         WRITE(18,6333) CURIYR+UHBSYR,NERC,(FL_CNXT_CST(NERC,FRG),FRG=1,UNFRGN)
 6333    FORMAT(1X,"FL_CNXT_CST",2(":",I4),<EFD_D_MFRG>(":",F7.1))
!        Label:FL_CNXT_CST:CYEAR:NERC:C_CST1:C_CST2:C_CST3:C_CST4:C_CST5:C_CST6:C_CST7:C_CST8:C_CST9:C_CST10:C_CST11:C_CST12:C_CST13
         WRITE(18,6334) CURIYR+UHBSYR,NERC,(FRG_EMM_MAP(NERC,FRG),FRG=1,UNFRGN)
 6334    FORMAT(1X,"FRG_EMM_MAP",2(":",I4),<EFD_D_MFRG>(":",F7.3))
      END DO

      DO YEAR = 1 , UNXPH
         DO IPLT = 1 , NUTSEC
            IF (C_ECP_CDS(IPLT,NDREG+1) .EQ. 1) THEN

               WRITE(18,7311) CURIYR+UHBSYR, CURIYR+UHBSYR+YEAR-1, IPLT, (C_HTRT(IPLT,IRG,YEAR),IRG=1,NDREG)
 7311          FORMAT(1X,"C_HTRT",3(":",I4),16(":",F9.1))

               WRITE(18,7312) CURIYR+UHBSYR, CURIYR+UHBSYR+YEAR-1, IPLT, (W_HTRT(IPLT,IRG,YEAR),IRG=1,NDREG)
 7312          FORMAT(1X,"W_HTRT",3(":",I4),16(":",F9.1))

               WRITE(18,7313) CURIYR+UHBSYR, CURIYR+UHBSYR+YEAR-1, IPLT, (G_HTRT(IPLT,IRG,YEAR),IRG=1,NDREG)
 7313          FORMAT(1X,"G_HTRT",3(":",I4),22(":",F9.1))

               WRITE(18,7314) CURIYR+UHBSYR, CURIYR+UHBSYR+YEAR-1, IPLT, (G_HTRT_0(IPLT,IRG,YEAR),IRG=1,NDREG)
 7314          FORMAT(1X,"G_HTRT_0",3(":",I4),22(":",F9.1))

               WRITE(18,7315) CURIYR+UHBSYR, CURIYR+UHBSYR+YEAR-1, IPLT, (C_HTRT_0(IPLT,IRG,YEAR),IRG=1,NDREG)
 7315          FORMAT(1X,"C_HTRT_0",3(":",I4),16(":",F9.1))

            END IF
         END DO
      END DO
!
!     DETERMINE CONSTRAINT FOR SUBBITUMINOUS AND LIGNITE "DIVERSITY"
!
      TST_LIG = 0.0
      DO ICL = 1 , NUM_CMM_UNITS
         IRG = EMM_CL_CLRG(ICL)
         DO JYR = CURIYR , UNYEAR
            LDV_PRF = CMM_LDV_INDX(ICL)
            IF (LDV_PRF .GT. 0 .AND. LDV_PRF .LE. 500) THEN
               TST_LIG(IRG) = TST_LIG(IRG) + EMM_CL_BTUS(ICL,JYR) * CMM_LDV_PRF(LDV_PRF,JYR)
            ELSE
               CMM_LDV_INDX(ICL) = 0
            END IF
         END DO
      END DO
!
      DV_SUB = 1
      DV_LIG = 1
!
      DO IRG = 1 , NDREG
!         IF (TST_LIG(IRG) .GT. 0.0) THEN
!            DV_LIG(IRG,1) = 1
!            DV_LIG(IRG,2) = 1
!         END IF
!
         DO IPLT = 1 , NUTSEC
            IF (C_ECP_CDS(IPLT,IRG) .EQ. 1 .OR. UQCOAL(IPLT,IRG,CURIYR-1) .GT. 0.000001) THEN
               C_ECP_CDS(IPLT,IRG) = 1
               C_ECP_CDS(IPLT,NDREG+1) = 1
            END IF
            IF (C_ECP_CDS(IPLT,IRG) .GT. 0) THEN
               A_CDS(IRG) = A_CDS(IRG) + UQCOAL(IPLT,IRG,CURIYR-1)
            END IF
         END DO
      END DO

      DO FRG = 1 , UNFRGN
         DO IPLT = 1 , NUTSEC
            A_US = A_US + EPECAP(FRG,IPLT,1)
            IF (EPECAP(0,IPLT,1) .GT. 0.0) THEN
               SHR_US(IPLT,IRG) = EPECAP(0,IPLT,1)
            END IF
         END DO
      END DO

      DO FRG = 1 , UNFRGN
         DO IPLT = 1 , NUTSEC
            A_US = A_US + EPECAP(FRG,IPLT,1)
            IF (A_US .GT. 0.0) THEN
               SHR_US(IPLT,IRG) = A_US
            END IF
         END DO
      END DO
!
      NERC = 0
      VAL = 0.0
      DO IRG = 1 ,NDREG
         VAL = VAL + XCL_IMPORT(IRG,CURIYR)
      END DO
      WRITE(18,6310) CURCALYR,NERC,(XCL_IMPORT(IRG,CURIYR),IRG=1,NDREG),VAL
 6310 FORMAT(1X,"CL_IMPORT",2(":",I4),14(":",F10.3))
!
!     Label:CYEAR:NERC:M1:M2:M3:M4:M5:M6:M7:M8:M9:M10:M11:M12:M13:VAL
!
      DO IRG = 1 , NDREG
         DO IPLT = 1 , NUTSEC
            IF (UPTTYP(IPLT) .LE. NW_COAL .AND. C_ECP_CDS(IPLT,IRG) .GT. 0) THEN
               IF (A_CDS(IRG) .GT. 0.0) THEN
                  SHR_CDS(IPLT,IRG) = UQCOAL(IPLT,IRG,CURIYR-1) / A_CDS(IRG)
               ELSE
                  SHR_CDS(IPLT,IRG) = 0.0
               END IF
            END IF
         END DO
      END DO
!
      DO IPLT = 1 , NUTSEC
         IF (UPTTYP(IPLT) .LE. NW_COAL) THEN
            VAL = 0.0
            DO IRG = 1 ,NDREG
               VAL = VAL + UQCOAL(IPLT,IRG,CURIYR-1)
            END DO
            IF (C_ECP_CDS(IPLT,NDREG+1) .EQ. 1) THEN
               WRITE(18,6313) CURCALYR,IPLT,(UQCOAL(IPLT,IRG,CURIYR-1),IRG=1,NDREG),VAL
               WRITE(18,6314) CURCALYR,IPLT,(SHR_CDS(IPLT,IRG),IRG=1,NDREG),VAL
 6313          FORMAT(1X,"SHR_CDS_Q",2(":",I4),14(":",F10.3))
 6314          FORMAT(1X,"SHR_CDS_S",2(":",I4),14(":",F10.3))
               WRITE(18,6312) CURCALYR,IPLT,(C_ECP_CDS(IPLT,IRG),IRG=1,NDREG)
            END IF
         END IF
      END DO
!
      WRITE(18,6313) CURCALYR,NERC,(A_CDS(IRG),IRG=1,NDREG),A_US
      WRITE(18,6313) CURCALYR,NERC,(T_CDS(IRG),IRG=1,NDREG),T_US
!
      DO IRG = 1 , NDREG
         DO CL_SC = 1 , MX_NCOALS + MX_ISCV
            IF (TOT_TYPE(CL_SC) .GT. 0 .AND. QFL_SC(CL_SC,IRG) .GT. 0.1 .AND. TOT_RATE1(CL_SC,IRG,0) .LT. 800.0) THEN
               JYR = 0
               WRITE(18,7316) CURIYR+UHBSYR,CURIYR+JYR+UHBSYR,CL_SC,IRG,TOT_TYPE(CL_SC), &
                  TOT_RATE1(CL_SC,IRG,JYR),TOT_RATE2(CL_SC,IRG,JYR),QFL_SC(CL_SC,IRG)*0.001, &
                  QFLRG(1,IRG)*0.001,QFLRG(2,IRG)*0.001,XCL_SO2_YR(CL_SC,CURIYR),XCL_HG_YR(CL_SC,CURIYR),XCL_CAR_YR(CL_SC,CURIYR)
 7316          FORMAT(1X,"XCL_TRATE",2(":",I4),3(":",I2),8(":",F12.4))
!
!              :Label:XCL_TRATE:CYEAR:PYEAR:CL_SC:IRG:XCL_TYPE:TOT_RATE1:TOT_RATE2:QFL_SC:QFLRG_1:QFLRG_2:XCL_SO2:XCL_HG:XCL_CAR
!
            END IF
         END DO
      END DO
!
      DSCRT = DBLE(AVGDCR)
!
!     CREATE AND MODIFY Biomass Cofiring Vectors
!
      DO YEAR = 1 , UNXPH
         JYR = CURIYR + YEAR - 1
         IF (YEAR .LT. UNXPH) THEN
            XYR = MIN(JYR,UNYEAR)
         ELSE
            XYR = UNYEAR
         END IF
!
         DO FRG = 1 , UNFRGN
            IRG = EPCLMP(FRG)
            ROW_WD = 'F'//EPFLCD(IRG)//'WDXXX'//UPYRCD(YEAR); call makmsk(ROW_WD_mask,':F:',EPFLCD(IRG),':WDXXX:',UPYRCD(YEAR))
            DO NERC = 1 , UNRGNS

               RPS_RGN = MAP_NERC_TO_RPS_RGN(NERC)

               DO IPLT = 1 , NUTSEC
                  IF (C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                     ISCRB = ECP_SCRUB(IPLT,CURIYR)
                     ROW = 'F'//EPFLCD(FRG)//UPLNTCD(IPLT)//SCRB_CD(ISCRB)//'XX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FRG),UPLNTCD(IPLT),SCRB_CD(ISCRB),':XX:',UPYRCD(YEAR))

!                    LOOP OVER COAL PLANTS MULTIPLE TIMES FOR COFIRING AND IDENTIFY MAXIMUM SHARE

                     DO COF_EMM = 1 , ECP_D_RCF
                        CFBND = 30000.0

!                       IF (UCF_TCAP(COF_EMM,IRG,CURIYR+YEAR-1) .LE. 0.0) CFBND = 0.0

                        IF (UCF_TCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1) .LE. 0.0) CFBND = 0.0
                        TST_ACI = 0
                        DO J_ACI = 1 , NUM_ACI + 1
                           DO I_RANK = 1 , 3
                              TST_ACI = MAX(TST_ACI , ACI_OPT(J_ACI,I_RANK,IPLT,XYR))
                           END DO
                        END DO
                        IF (TST_ACI .EQ. 0) CFBND = 0.0
                        IF (UPCFBTU(COF_EMM,IRG) .LE. 0.0001) CFBND = 0.0
                        IF (COFCAP(COF_EMM,IPLT,NERC,FRG) .LE. 0.0) CFBND = 0.0

!                       IF (UCF_TCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1) .GT. 0.0 .OR. UCF_RCAP1(COF_EMM,NERC,IRG,CURIYR+YEAR-1) .GT. 0.0)THEN
!                       IF (COFCAP(COF_EMM,IPLT,NERC,FRG) .GT. 0.0 .AND. TST_ACI .GT. 0)THEN

                        IF (CFBND .GT. 0.0)THEN
                           DO CF_STP = 1 , UPCFNSTP(COF_EMM)
                              COLUMN = 'W'//UPRGCD(NERC)//EPFLCD(FRG)//COF_CMB(COF_EMM,CF_STP)//UPLNTCD(IPLT)//SCRB_CD(ISCRB)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':W:',UPRGCD(NERC),EPFLCD(FRG),COF_CMB(COF_EMM,CF_STP),UPLNTCD(IPLT),SCRB_CD(ISCRB),UPYRCD(YEAR))

!                             Turn Vector ON If There is Available Capacity to Cofire

                              CFBND = (COFCAP(COF_EMM,IPLT,NERC,FRG) / 1000.0) * UPMCF(IPLT) * 8.760 * (C_HTRT(IPLT,IRG,YEAR) / 1000.0) * UPCFLEV(COF_EMM,CF_STP)
                              VAL = CFBND
                              CALL CBND(UPBND,COLUMN,DBLE(0.0),VAL,COLUMN_mask,'EP$CSUPPLY,12')
!
!                             Add 1 Trillion BTU to Plant Fuel Row
!
                              VAL = -1.0
                              CALL CVAL(COLUMN,ROW,VAL,COLUMN_mask,ROW_mask,'EP$CSUPPLY,13')
!
!                             Use 1 Trillion BTU from Biomass Supply Row
!
                              VAL = 1.0
                              CALL CVAL(COLUMN,ROW_WD,VAL,COLUMN_mask,ROW_WD_mask,'EP$CSUPPLY,14')
!
!                             Use Cofire Retrofit Capacity (GW) and Collect Cofire Generation with Free Row
!
                              ROW_G = 'G'//EPFLCD(IRG)//UPLNTCD(IPLT)//'WDX'//UPYRCD(YEAR); call makmsk(ROW_G_mask,':G:',EPFLCD(IRG),UPLNTCD(IPLT),':WDX:',UPYRCD(YEAR))
                              VAL = 1000.0 / C_HTRT(IPLT,IRG,YEAR)
                              IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                              IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = ECP_MIN
                              CALL CVAL(COLUMN,ROW_G,VAL,COLUMN_mask,ROW_G_mask,'EP$CSUPPLY,15')
                              ROW_F = 'F'//UPRGCD(NERC)//UPLNTCD(IPLT)//'GWD'//UPYRCD(YEAR); call makmsk(ROW_F_mask,':F:',UPRGCD(NERC),UPLNTCD(IPLT),':GWD:',UPYRCD(YEAR))
                              CALL CVAL(COLUMN,ROW_F,VAL,COLUMN_mask,ROW_F_mask,'EP$CSUPPLY,16')
                              ROW_G = 'G'//UPRGCD(NERC)//'CFGEN'//UPYRCD(YEAR); call makmsk(ROW_G_mask,':G:',UPRGCD(NERC),':CFGEN:',UPYRCD(YEAR))
                              CALL CVAL(COLUMN,ROW_G,VAL,COLUMN_mask,ROW_G_mask,'EP$CSUPPLY,17')
                              ROW_F = 'F'//UPRGCD(NERC)//'CFGEN'//UPYRCD(YEAR); call makmsk(ROW_F_mask,':F:',UPRGCD(NERC),':CFGEN:',UPYRCD(YEAR))
                              CALL CVAL(COLUMN,ROW_F,VAL,COLUMN_mask,ROW_F_mask,'EP$CSUPPLY,18')
!
                              ROW_COF = 'H'//UPRGCD(NERC)//EPFLCD(IRG)//COF_CD(COF_EMM)//'COF'//UPYRCD(YEAR); call makmsk(ROW_COF_mask,':H:',UPRGCD(NERC),EPFLCD(IRG),COF_CD(COF_EMM),':COF:',UPYRCD(YEAR))
                              IF (UPCFBTU(COF_EMM,IRG) .GT. 0.0001) THEN
                                 VAL = 1.0 / (UPCFBTU(COF_EMM,IRG) * UPCFLEV(COF_EMM,UPCFNSTP(COF_EMM)))
                              ELSE
                                 VAL = 1.0 / UPCFLEV(COF_EMM,UPCFNSTP(COF_EMM))
                              END IF
                              IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                              IF (VAL .GT. 2000.0) THEN
                                 CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(0.0),COLUMN_mask,'EP$CSUPPLY,19')
                              ELSE
                                 IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = ECP_MIN
                                    CALL CVAL(COLUMN,ROW_COF,VAL,COLUMN_mask,ROW_COF_mask,'EP$CSUPPLY,20')
!
!                                   Limit Cofire Share (i.e. force minmum level of coal consumption)
!
                                    ROW_COF = 'H'//EPFLCD(IRG)//UPLNTCD(IPLT)//'CSH'//UPYRCD(YEAR); call makmsk(ROW_COF_mask,':H:',EPFLCD(IRG),UPLNTCD(IPLT),':CSH:',UPYRCD(YEAR))
                                    VAL = (1.0 - UPCFLEV(COF_EMM,CF_STP)) / UPCFLEV(COF_EMM,CF_STP)
                                    IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                    IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = ECP_MIN
                                    CALL CVAL(COLUMN,ROW_COF,VAL,COLUMN_mask,ROW_COF_mask,'EP$CSUPPLY,21')
!
!                                   include COFiring in renewable generation bound row 'portfolio standard'
!                                   if plt type counts then skip because generation vector included elsewhere
!
!                                   IF (COFCAP(IPLT,IRG,NERC) .GT. 0.0)THEN
!
!                                   FRACTION INCLUDED IN RENEWABLE GENERATION TOTAL (IF ANY)
!
                                    VAL = UPRNWSHRR(WIWD,NERC)
                                    VAL = VAL * 1000.0 / C_HTRT(IPLT,IRG,YEAR)

!                                   VAL = VAL * DBLE(COFCAP(IPLT,IRG,NERC) / COFCAP(IPLT,IRG,MNUMNR))

                                    IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                    IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = 0.0
                                    IF (VAL .NE. 0.0) THEN
                                       ROW_RNW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROW_RNW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(YEAR))
                                       CALL CVAL(COLUMN,ROW_RNW,VAL,COLUMN_mask,ROW_RNW_mask,'EP$CSUPPLY,22')
                                    END IF

!                                   END IF
!                                   If Regional and National Shares are Different, Adjust National Constraint

                                    ROW_RNW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_RNW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))

!                                   IF (COFCAP(IPLT,IRG,NERC) .GT. 0.0)THEN
!
!                                   FRACTION INCLUDED IN RENEWABLE GENERATION TOTAL (IF ANY)
!
                                    VAL = UPRNWSHR(WIWD)
                                    VAL = VAL * 1000.0 / C_HTRT(IPLT,IRG,YEAR)

!                                   VAL = VAL * DBLE(COFCAP(IPLT,IRG,NERC) / COFCAP(IPLT,IRG,MNUMNR))

                                    IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                    IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = 0.0
                                    IF (VAL .NE. 0.0) THEN
                                    CALL CVAL(COLUMN,ROW_RNW,VAL,COLUMN_mask,ROW_RNW_mask,'EP$CSUPPLY,23')
                                 END IF
                              END IF

!                             END IF
!
!                             ADD INCREMENTAL TRANSPORTATION COST DEPENDING ON COFIRING LEVEL
!
                              IF (YEAR .LT. UNXPH)THEN
                                 XTR_TRN = UPGNPD(JYR) * UPCFSTEP(COF_EMM,CF_STP)
                                 XTR_TRN = XTR_TRN * PWF(DSCRT,YEAR)
                              ELSE
                                 DO KYR = 1 , UNFPH - UNXPH + 1
                                    VOM(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * UPCFSTEP(COF_EMM,CF_STP)
                                 END DO
                                 KYR = UNFPH - UNXPH + 1
                                 XTR_TRN = PVV(VOM(1),ECP_D_FPH,KYR,DBLE(DSCRT)) * PWF(DBLE(DSCRT),UNXPH)
                              END IF
!
!                             INCREMENTAL VARIABLE O&M
!
                              IF (YEAR .LT. UNXPH)THEN
                                 VOMCST = UPGNPD(JYR) * UPCFVOM(COF_EMM) * 1000.0
                                 VOMCST = VOMCST * PWF(DSCRT,YEAR)
                              ELSE
                                 DO KYR = 1 , UNFPH - UNXPH + 1
                                    VOM(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * UPCFVOM(COF_EMM) * 1000.0
                                 END DO
                                 KYR = UNFPH - UNXPH + 1
                                 VOMCST = PVV(VOM(1),ECP_D_FPH,KYR,DBLE(DSCRT)) * PWF(DBLE(DSCRT),UNXPH)
                              END IF
!
!                             ADJUST FOR COFIRING HURDLE RATE
!
                              IF (YEAR .LT. UNXPH) THEN
                                 COFHUR = UPGNPD(JYR) * WDCFHUR(MIN(JYR,UNYEAR)) * 1000.0
                                 COFHUR = COFHUR * PWF(DSCRT,YEAR)
                              ELSE
                                 DO KYR = 1 , UNFPH - UNXPH + 1
                                    LYR = KYR + CURIYR + UNXPH - 2
                                    VOM(KYR) = UPGNPD(LYR) * WDCFHUR(MIN(LYR,UNYEAR)) * 1000.0
                                 END DO
                                 KYR = UNFPH - UNXPH + 1
                                 COFHUR = PVV(VOM(1),ECP_D_FPH,KYR,DBLE(DSCRT)) * PWF(DBLE(DSCRT),UNXPH)
                              END IF
!
!                             ADJUST FOR BIOMASS COFIRING SUBSIDY, IF APPROPRIATE
!
                              IF (YEAR .LT. UNXPH) THEN
                                 COFSUB = UPGNPD(JYR) * WDCFSUB(MIN(JYR,UNYEAR)) * 1000.0
                                 COFSUB = COFSUB * PWF(DSCRT,YEAR)
                              ELSE
                                 DO KYR = 1 , UNFPH - UNXPH + 1
                                    LYR = KYR + CURIYR + UNXPH - 2
                                    VOM(KYR) = UPGNPD(LYR) * WDCFSUB(MIN(LYR,UNYEAR)) * 1000.0
                                 END DO
                                 KYR = UNFPH - UNXPH + 1
                                 COFSUB = PVV(VOM(1),ECP_D_FPH,KYR,DBLE(DSCRT)) * PWF(DBLE(DSCRT),UNXPH)
                              END IF
                              VAL = XTR_TRN + (VOMCST + COFHUR - COFSUB) / C_HTRT(IPLT,IRG,YEAR)
                              IF (USW_DIGIT .GT. 0)THEN
                              OBJVAL = DIGITS2( VAL , DIGITS_PARM)
                              ELSE
                                 OBJVAL = VAL
                              END IF
                              CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$CSUPPLY,24')
                           END DO  ! CF_STP
                        END IF   ! CFBND
                     END DO     ! COF_EMM
                  END IF        ! TEST (C_ECO_CDS() EQ 1)
               END DO           ! IPLT
            END DO            ! NERC
         END DO              ! FRG
      END DO                 ! YEAR
!
!     CREATE AND MODIFY COAL CONTRACT CONSTRAINTS, DIVERSITY CONSTRAINTS AND SUPPLY CURVES
!
      DO YEAR = 1 , UNXPH
         JYR = CURIYR + YEAR - 1
         IF (YEAR .LT. UNXPH) THEN
            XYR = MIN(JYR,UNYEAR)
         ELSE
            XYR = UNYEAR
         END IF
!
         DO IRG = 1 , NDREG
            DO IPLT = 1 , NUTSEC
               ISCRB = ECP_SCRUB(IPLT,CURIYR)
               IF (DV_SUB(IRG,ISCRB) .EQ. 1) THEN
                  ROW2 = 'FDV'//EPFLCD(IRG)//'S'//UPLNTCD(IPLT)//UPYRCD(YEAR); call makmsk(ROW2_mask,':FDV:',EPFLCD(IRG),':S:',UPLNTCD(IPLT),UPYRCD(YEAR))
                  CALL CROWTYPE(ROW2,'L       ',ROW2_mask)
                  VAL = 0.0
                  CALL CRHS(UPRHS,ROW2,VAL,ROW2_mask,'EP$CSUPPLY,25')
               END IF
               IF (DV_LIG(IRG,ISCRB) .EQ. 1) THEN
                  ROW2 = 'FDV'//EPFLCD(IRG)//'L'//UPLNTCD(IPLT)//UPYRCD(YEAR); call makmsk(ROW2_mask,':FDV:',EPFLCD(IRG),':L:',UPLNTCD(IPLT),UPYRCD(YEAR))
                  CALL CROWTYPE(ROW2,'L       ',ROW2_mask)
                  VAL = 0.0
                  CALL CRHS(UPRHS,ROW2,VAL,ROW2_mask,'EP$CSUPPLY,26')
               END IF
            END DO
         END DO
         DO FRG = 1 , UNFRGN
            DO IPLT = 1 , NUTSEC
               IF (C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                  ISCRB = ECP_SCRUB(IPLT,CURIYR)
                  ROW = 'F'//EPFLCD(FRG)//UPLNTCD(IPLT)//SCRB_CD(ISCRB)//'XX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FRG),UPLNTCD(IPLT),SCRB_CD(ISCRB),':XX:',UPYRCD(YEAR))
                  CALL CROWTYPE(ROW,'L       ',ROW_mask)
                  RHS = 0.0
                  CALL CRHS(UPRHS,ROW,RHS,ROW_mask,'EP$CSUPPLY,27')
                  VAL = -1.0
                  CALL CVAL(ROW,ROW,VAL,ROW_mask,ROW_mask,'EP$CSUPPLY,28')
                  VAL = 999.99 * UPGNPD(CURIYR + YEAR -1)
                  CALL CVAL(ROW,UPOBJ,VAL,ROW_mask,UPOBJ,'EP$CSUPPLY,29')
               END IF
            END DO
         END DO
!
         DO CL_SC = 1 , MX_NCOALS + MX_ISCV
            IF (CL_SC .GT. MX_NCOALS) THEN
                 TOT_TYPE(CL_SC)= 1
            ENDIF
            JECP = TOT_TYPE(CL_SC)
            IF (JECP .GT. 0) THEN
               IF (CL_SC .LT. 10) THEN
                  WRITE(SC_CD,'("0",I1)') CL_SC
               ELSE
                  WRITE(SC_CD,'(I2)') CL_SC
               END IF
               ROW_SC = 'SC'//UPFLCD(JECP)//SC_CD//'X'//UPYRCD(YEAR); call makmsk(ROW_SC_mask,':SC:',UPFLCD(JECP),SC_CD,':X:',UPYRCD(YEAR))
               CALL CROWTYPE(ROW_SC,'L       ',ROW_SC_mask)
               RHS = 0.0
               CALL CRHS(UPRHS,ROW_SC,RHS,ROW_SC_mask,'EP$CSUPPLY,30')
               IF (CL_SC .LE. MX_NCOALS) THEN
                  ROW_XC = 'XC'//UPFLCD(JECP)//SC_CD//'X'//UPYRCD(YEAR); call makmsk(ROW_XC_mask,':XC:',UPFLCD(JECP),SC_CD,':X:',UPYRCD(YEAR))
                  CALL CROWTYPE(ROW_XC,'L       ',ROW_XC_mask)
               END IF
               DO IRG = 1 , NDREG
                  DO ISCRB = 1 , 2
                     ROW_CF = 'K'//UPFLCD(JECP)//SC_CD//EPFLCD(IRG)//SCRB_CD(ISCRB)//UPYRCD(YEAR); call makmsk(ROW_CF_mask,':K:',UPFLCD(JECP),SC_CD,EPFLCD(IRG),SCRB_CD(ISCRB),UPYRCD(YEAR))
                     CALL CROWTYPE(ROW_CF,'G       ',ROW_CF_mask)
                     VAL = 1.0
                     CALL CVAL(ROW_CF,ROW_CF,VAL,ROW_CF_mask,ROW_CF_mask,'EP$CSUPPLY,31')
                     IF (YEAR .LT. UNXPH) THEN
                        VAL = 9.9 * UPGNPD(CURIYR+YEAR-1)
                        VAL = VAL * PWF(DSCRT,YEAR)
                     ELSE
                        DO KYR = 1 , UNFPH - UNXPH + 1
                           VOM(KYR) = 9.9 * UPGNPD(KYR + CURIYR + UNXPH - 2)
                        END DO
                        KYR = UNFPH - UNXPH + 1
                        VAL = PVV(VOM(1),ECP_D_FPH,KYR,DBLE(DSCRT)) * PWF(DBLE(DSCRT),UNXPH)
                     END IF
                     CALL CVAL(ROW_CF,UPOBJ,VAL*10.0,ROW_CF_mask,UPOBJ,'EP$CSUPPLY,32')
                  END DO
               END DO
            END IF
         END DO
!
         DO FRG = 1 , UNFRGN
            IRG = EPCLMP(FRG)
!           GRP = EPCAMP(FRG)
!
!           SET ROWS TO LIMIT COFIRING SHARE
!
            DO IPLT = 1 , NUTSEC
               IF (C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                  ROW_COF = 'H'//EPFLCD(IRG)//UPLNTCD(IPLT)//'CSH'//UPYRCD(YEAR); call makmsk(ROW_COF_mask,':H:',EPFLCD(IRG),UPLNTCD(IPLT),':CSH:',UPYRCD(YEAR))
                  CALL CROWTYPE(ROW_COF,'L       ',ROW_COF_mask)
               END IF
            END DO
!
!           SET UP TEST FOR FIRST SCRUBBED OR UNSCRUBBED PLANT IN COAL REGION
!
            DO CL_SC = 1 , MX_NCOALS + MX_ISCV
               DO IPLT = 1 , NUTSEC
                  TST_PLT(IPLT,CL_SC) = 0
               END DO
            END DO
!
!           LOOP ON PLANT TYPES
!
            DO IPLT = 1 , NUTSEC
               IF ((TST_CAP_BY_CRG(IPLT,IRG,YEAR) .GT. 0.0 .OR. CPCTNSH(FRG,IPLT) .GT. 0.0).OR. UPTTYP(IPLT) .GT. EX_COAL) THEN !<--- added a check for NG with coal cofiring capability
               ICLS = HG_CLASS(IPLT)
               IF (C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                  ISCRB = ECP_SCRUB(IPLT,CURIYR)
!
                  ROW = 'F'//EPFLCD(FRG)//UPLNTCD(IPLT)//SCRB_CD(ISCRB)//'XX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FRG),UPLNTCD(IPLT),SCRB_CD(ISCRB),':XX:',UPYRCD(YEAR))
!
                  DO CL_SC = 1 , MX_NCOALS + MX_ISCV
                     JECP = TOT_TYPE(CL_SC)
                     IF (JECP .GT. 0 .AND. C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                        IF (TOT_RATE1(CL_SC,IRG,0) .LT. 800.0) THEN
                           IF (CL_SC .LT. 10) THEN
                              WRITE(SC_CD,'("0",I1)') CL_SC
                           ELSE
                              WRITE(SC_CD,'(I2)') CL_SC
                           END IF
                           READ(UPFLCD(JECP),'(A1)') RANK_CD
                           IF (RANK_CD .EQ. "B") THEN
                              I_RANK = 1
                           ELSE IF (RANK_CD .EQ. "S") THEN
                              I_RANK = 2
                           ELSE IF (RANK_CD .EQ. "L") THEN
                              I_RANK = 3
                           END IF
!
!                          Calculate ACI Requirements
!
                           NMAX = NSTEP
                           N = ACI_STEPS(IPLT,I_RANK)
                           CHOICE = HG_CHOICE(IPLT)
                           OUT = HG_OUTPUT(ICLS,I_RANK,XYR)
                           HR = HRTCLNR(IRG,CURIYR-1,IPLT)
                           IN = HG_INPUT(ICLS,I_RANK,XYR)
                           PRCNT = HG_MEF(ICLS,I_RANK,XYR)
                           LIM = EMLIM(4,XYR)
                           GRAM = HG_GRAMS_MWH(ICLS,XYR)
                           HG = XCL_HG_YR(CL_SC,CURIYR)
                           EMF_P = PLNT_EMF(IPLT,I_RANK)
                           EMF_M = MIN_EMF(IPLT,I_RANK)
                           F_FGD = FGD_FCTR(IPLT,I_RANK)
                           F_SCR = SCR_FCTR(IPLT,I_RANK)
                           A = PARM_A(IPLT,I_RANK)
                           B = PARM_B(IPLT,I_RANK)
                           C = PARM_C(IPLT,I_RANK)
                           D = PARM_D(IPLT,I_RANK)
                           IF (ACI_CST(1,I_RANK,IPLT) .EQ. 0.0) Allowed(1) = 1
!                          WITHOUT CAMR, SET ONLY ONE STEP TO COMPLY WITH NEW STANDARD (IF SPECIFIED)
                           IF (USW_CAMR .GT. 0)THEN
                              IF (YEAR .LT. UNXPH)THEN
                                 MACT_EMF = MIN(DBLE(HG_MEFNC(IRG,MIN(CURIYR + YEAR - 1,MNUMYR))),EMF_P)
                              ELSE
                                 MACT_EMF = EMF_P
                                 DO JYR = 1 , UNFPH - UNXPH + 1
!                                   EMF(JYR) = MIN(HG_MEFNC(IRG,MIN(CURIYR + JYR + UNXPH - 2,MNUMYR)),EMF_P)
!                                   ONE(JYR) = DBLE(1.0)
                                    IF (DBLE(HG_MEFNC(IRG,MIN(CURIYR + JYR - 1,MNUMYR))) .LT. MACT_EMF)  &
                                       MACT_EMF = DBLE(HG_MEFNC(IRG,MIN(CURIYR + JYR - 1,MNUMYR)))
                                 END DO
!                                EMFNC = PVV(EMF,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR)) *  &
!                                        PWF(DBLE(AVGDCR),UNXPH - 1)
!                                PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR)) *  &
!                                        PWF(DBLE(AVGDCR),UNXPH - 1)
!                                MACT_EMF = EMFNC / PVONE
                              END IF
                           END IF
                           CALL GET_EMF_AND_ACI(NMAX,N,CHOICE,OUT,HR,IN,PRCNT,LIM,GRAM,HG,EMF_P,F_FGD,F_SCR,A,B,C,D,EMF_M,Allowed,EMF_T,ACI,MACT_SW,MACT_EMF)
!
                           IF (HG_MEF(ICLS,I_RANK,CURIYR) .EQ. 0.0 .AND. HG_MEF(ICLS,I_RANK,XYR) .GT. 0.0 .AND. XYR .EQ. CURIYR + 1) THEN
                              WRITE(18,2342) CURIYR+UHBSYR,XYR+UHBSYR,IRG,IPLT,ICLS,CL_SC,I_RANK,JECP,NMAX,N,CHOICE,OUT,HR*0.001,IN,PRCNT,LIM,GRAM,HG, &
                                 EMF_P,F_FGD,F_SCR,A,B,C,D,EMF_M,(Allowed(I_ACI),EMF_T(I_ACI),ACI(I_ACI),I_ACI=1,5),MACT_SW,MACT_EMF
 2342                         FORMAT(1X,"ACI_OPT3",11(":",I4),15(":",F9.3),5(":",I1,":",F6.3,":",F9.1),":",I1,":",F6.3)
                           END IF
                           DO I_ACI = 1 , NSTEP
                              EMM_MEF(I_ACI,I_RANK,IPLT) = EMF_T(I_ACI)
                              ACI_QAC(I_ACI,I_RANK,IPLT) = ACI(I_ACI)
                           END DO
!
!                          Set up rows to limit coal available at 1st tier transportation rates and add delta to tran cost over 1st tier limit
!
                           ROW_1st = 'T'//SC_CD//EPFLCD(IRG)//SCRB_CD(ISCRB)//'ZZ'//UPYRCD(YEAR); call makmsk(ROW_1st_mask,':T:',SC_CD,EPFLCD(IRG),SCRB_CD(ISCRB),':ZZ:',UPYRCD(YEAR))
                           IF (TST_PLT(IPLT,CL_SC) .EQ. 0 .AND. TOT_RATE2(CL_SC,IRG,0) .GT. TOT_RATE1(CL_SC,IRG,0) .AND. TOT_RATE1(CL_SC,IRG,0) .LT. 800.0 .AND. &
                              IPLT .LT. WIPC) THEN
                              CALL CROWTYPE(ROW_1st,'L       ',ROW_1st_mask)
                              VAL = -1.0
                              CALL CVAL(ROW_1st,ROW_1st,VAL,ROW_1st_mask,ROW_1st_mask,'EP$CSUPPLY,33')
                              TST_PLT(IPLT,CL_SC) = 1
!
                              IF (YEAR .LT. UNXPH) THEN
                                 T_TMP = MAX((TOT_RATE2(CL_SC,IRG,YEAR-1) - TOT_RATE1(CL_SC,IRG,YEAR-1)) , 0.0001)
                                 C_TRAN = T_TMP * UPGNPD(CURIYR+YEAR-1) * PWF(DSCRT,YEAR)
                              ELSE
                                 DO KYR = 1 , UNFPH - UNXPH + 1
                                    T_TMP = MAX((TOT_RATE2(CL_SC,IRG,KYR+UNXPH-2) - TOT_RATE1(CL_SC,IRG,KYR+UNXPH-2)) , 0.0001)
                                    PCL(KYR) = T_TMP * UPGNPD(CURIYR+KYR+UNXPH-2)
                                 END DO
                                 C_TRAN = PVV(PCL,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
                                 IF (USW_DIGIT .GT. 0)C_TRAN = DIGITS2(C_TRAN , DIGITS_PARM)
                              END IF
                              CALL CVAL(ROW_1st,UPOBJ,C_TRAN/0.1,ROW_1st_mask,UPOBJ,'EP$CSUPPLY,34')
!
                           END IF
!
!                          LOOP OVER Activated Carbon Option
!
                           DO J_ACI = 1 , NUM_ACI + 1
                              I_ACI = J_ACI - 1
                              IF (Allowed(J_ACI) .EQ. 1) THEN
                                 CFBND = 30000.0
                              ELSE
                                 CFBND = 0.0
                              END IF
                              TST_ACI = Allowed(J_ACI)
!
                              IF (TST_ACI .GE. 1 .AND. TOT_RATE1(CL_SC,IRG,0) .LT. 800.0) THEN
!
                                 COLUMN = 'T'//SC_CD//EPFLCD(FRG)//UPLNTCD(IPLT)//ACI_CD(J_ACI)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T:',SC_CD,EPFLCD(FRG),UPLNTCD(IPLT),ACI_CD(J_ACI),UPYRCD(YEAR))
!
                                 VAL = -1.0
                                 CALL CVAL(COLUMN,ROW,VAL,COLUMN_mask,ROW_mask,'EP$CSUPPLY,35')
                                 IF (TST_PLT(IPLT,CL_SC) .EQ. 1) THEN
                                    VAL = 1.0
                                    CALL CVAL(COLUMN,ROW_1st,VAL*0.1,COLUMN_mask,ROW_1st_mask,'EP$CSUPPLY,36')
                                 END IF
                                 VAL = CFBND
                                 CALL CBND(UPBND,COLUMN,DBLE(0.0),VAL,COLUMN_mask,'EP$CSUPPLY,37')
!
!                                ACCUMULATE COAL GEN BY PLANT TYPE, WITH & W/O COFIRING
!
                                 ROW_G = 'G'//EPFLCD(IRG)//UPLNTCD(IPLT)//'CLX'//UPYRCD(YEAR); call makmsk(ROW_G_mask,':G:',EPFLCD(IRG),UPLNTCD(IPLT),':CLX:',UPYRCD(YEAR))
                                 VAL = 1000.0 / C_HTRT(IPLT,IRG,YEAR)
                                 IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                 IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = ECP_MIN
                                 CALL CVAL(COLUMN,ROW_G,VAL,COLUMN_mask,ROW_G_mask,'EP$CSUPPLY,38')
!
!                                LIMIT COFIRING SHARE
!
                                 ROW_COF = 'H'//EPFLCD(IRG)//UPLNTCD(IPLT)//'CSH'//UPYRCD(YEAR); call makmsk(ROW_COF_mask,':H:',EPFLCD(IRG),UPLNTCD(IPLT),':CSH:',UPYRCD(YEAR))
                                 VAL = -1.0
                                 CALL CVAL(COLUMN,ROW_COF,VAL,COLUMN_mask,ROW_COF_mask,'EP$CSUPPLY,39')
!
!                                Mercury EMISSIONS CONSTRAINT
!
                                 IF (USW_HG .GT. 0) THEN
                                    DO I_HG = 1, NUM_HG_GRP
                                       ROW_HG = 'EUHG'//UPLNTCD(IPLT)//UPRGCD(I_HG)//UPYRCD(YEAR); call makmsk(ROW_HG_mask,':EUHG:',UPLNTCD(IPLT),UPRGCD(I_HG),UPYRCD(YEAR))
                                       TST_HGP(I_HG,IPLT,YEAR) = 1
                                       VAL = DBLE(0.5) * XCL_HG_YR(CL_SC,CURIYR) * EMM_MEF(J_ACI,I_RANK,IPLT)
                                       VAL = MAX(VAL , 0.0)
                                       IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                       IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = 0.0
                                       IF (VAL .NE. 0.0) CALL CVAL(COLUMN,ROW_HG,VAL,COLUMN_mask,ROW_HG_mask,'EP$CSUPPLY,40')
                                    END DO
                                 END IF
!
!                                Mercury MACT EMISSIONS CONSTRAINTS
!
                                 IF (MACT_SW .EQ. 1) THEN
                                    IF (C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                                       ROW_HG = 'E'//EPFLCD(IRG)//'HGO'//UPLNTCD(IPLT)//UPYRCD(YEAR); call makmsk(ROW_HG_mask,':E:',EPFLCD(IRG),':HGO:',UPLNTCD(IPLT),UPYRCD(YEAR))
                                       VAL = DBLE(0.5) * XCL_HG_YR(CL_SC,CURIYR) * (EMM_MEF(J_ACI,I_RANK,IPLT) - MACT_EMF)
                                       IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                       IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = 0.0
                                       IF (VAL .NE. 0.0) CALL CVAL(COLUMN,ROW_HG,VAL,COLUMN_mask,ROW_HG_mask,'EP$CSUPPLY,41')
                                       CALL CROWTYPE(ROW_HG,'L       ',ROW_HG_mask)
                                    END IF
                                 END IF
!
!                                SO2 EMISSIONS CONSTRAINT
!
                                 DO ISO2 = 1 , NUM_SO2_GRP
!                                   IF ((CURIYR + UHBSYR) .EQ. (TRANRULE1 - UPSCLT) .AND. YEAR .GT. UPSCLT)THEN
!                                      SO2SHR = TSO2_SHR_BY_CLRG(IRG,ISO2)
                                    IF ((CURIYR + UHBSYR + YEAR - 1) .GE. TRANRULE1)THEN
!                                      SO2SHR = TBTU_SHR_BY_CLRG(IRG,IPLT,ISO2)
                                       SO2SHR = TSO2_SHR_BY_CLRG(IRG,ISO2)
                                    ELSE
                                       SO2SHR = SO2_SHR_BY_CLRG(IRG,ISO2)
                                    END IF
!     if (column .eq. 'T02DC101')write(6,3231) curiyr+1989,curiyr+1989+year-1,iso2,  &
!                                              so2_shr_by_clrg(irg,iso2),tso2_shr_by_clrg(irg,iso2),so2shr
!3231 format(1h ,'!so2ecpj',i4,i5,i3,6f10.4)

                                    IF (SO2SHR .GT. 0.0001)THEN
                                       WRITE(SO2_CODE,'(I1)') ISO2
                                       ROW_SO2 = 'EUSO'//UPLNTCD(IPLT)//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_SO2_mask,':EUSO:',UPLNTCD(IPLT),SO2_CODE,UPYRCD(YEAR))
                                       TST_SO2P(ISO2,IPLT,YEAR) = 1
                                       IF (ECP_SCRUB(IPLT,CURIYR) .EQ. 1) THEN
                                          VAL = 0.5 * XCL_SO2_YR(CL_SC,CURIYR) * SO2SHR * (1.0 - RCLCLNR(IRG,CURIYR-1,IPLT)) * 10.0
                                       ELSE
                                          VAL = 0.5 * XCL_SO2_YR(CL_SC,CURIYR) * SO2SHR
                                          IF (YEAR .LT. UNXPH)THEN
                                             KYR = YEAR
                                          ELSE
                                             KYR = UNFPH
                                          END IF
                                          IF ((CURIYR + UHBSYR + KYR - 1) .GE. UDSI_YR)THEN
!                                            IF (UPLNTCD(IPLT)(1:1) .EQ. 'B')THEN
                                                VAL = VAL * (1.0 - UPDSISEF(1))
!                                            ELSE
!                                               VAL = VAL * (1.0 - UPDSISEF(2))
!                                            END IF
                                          END IF
!     if (column .eq. 'T012C101')write(6,3232) curiyr+1989,curiyr+1989+year-1,iso2,  &
!         so2_shr_by_clrg(irg,iso2),tso2_shr_by_clrg(irg,iso2),so2shr,0.5*xcl_so2_yr(cl_sc,curiyr),val
!3232 format(1h ,'!so2ecps',i4,i5,i3,6f10.4)
                                       END IF
                                       IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                       CALL CVAL(COLUMN,ROW_SO2,VAL,COLUMN_mask,ROW_SO2_mask,'EP$CSUPPLY,42')
                                    END IF
                                 END DO
!                                STATE AND/OR COAL REGION LEVEL CONSTRAINTS FOR EPA TRANSPORT RULE
!                                IF (TSO2_YR_BY_ST .LT. 9999 .OR. TSO2_YR_BY_CLRG .LT. 9999)THEN
                                 IF (TSO2_YR_BY_CLRG .LT. 9999)THEN
                                    IF (ECP_SCRUB(IPLT,CURIYR) .EQ. 1) THEN
                                       VAL1 = 0.5 * XCL_SO2_YR(CL_SC,CURIYR) * (1.0 - RCLCLNR(IRG,CURIYR-1,IPLT))
                                    ELSE
                                       VAL1 = 0.5 * XCL_SO2_YR(CL_SC,CURIYR)
                                       IF (YEAR .LT. UNXPH)THEN
                                          KYR = YEAR
                                       ELSE
                                          KYR = UNFPH
                                       END IF
                                       IF ((CURIYR + UHBSYR + KYR - 1) .GE. UDSI_YR)THEN
!                                         IF (UPLNTCD(IPLT)(1:1) .EQ. 'B')THEN
                                             VAL1 = VAL1 * (1.0 - UPDSISEF(1))
!                                         ELSE
!                                            VAL1 = VAL1 * (1.0 - UPDSISEF(2))
!                                         END IF
                                       END IF
                                    END IF
                                    IF (VAL1 .GT. ECP_MIN)THEN
                                       save_row_mask=row_mask
                                       CALL EPA$TRANRG_ECP(1,YEAR,IRG,IPLT,COLUMN,COLUMN_mask,VAL1)
                                       row_mask=save_row_mask
                                    END IF
                                 END IF
!
!                                CARBON EMISSIONS CONSTRAINT
!
                                 ROW_CAR = 'EUCARXX'//UPYRCD(YEAR); call makmsk(ROW_CAR_mask,':EUCARXX:',UPYRCD(YEAR))
                                 VAL = DBLE(1.0 / 2204.) * XCL_CAR_YR(CL_SC,CURIYR) * DBLE(12.0 / 44.0) * DBLE(1.0 - UPPCEF(IPLT))
                                 VAL = MAX( VAL , ECP_MIN)
                                 IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                 IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = ECP_MIN
                                 CALL CVAL(COLUMN,ROW_CAR,VAL,COLUMN_mask,ROW_CAR_mask,'EP$CSUPPLY,43')
!                                Include in Regional CO2 Limits, If Appropriate
                                 DO GRP = 1 , CO2_GRP
                                    IF (CO2_CL_BY_FL(FRG,GRP) .GT. 0.0)THEN
                                       IF (VAL .GT. ECP_MIN)VALR = VAL * CO2_CL_BY_FL(FRG,GRP)
                                       ROW_CARR = 'EUCAR'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(ROW_CARR_mask,':EUCAR:',CO2_RG(GRP),UPYRCD(YEAR))
                                       CALL CVAL(COLUMN,ROW_CARR,VALR,COLUMN_mask,ROW_CARR_mask,'EP$CSUPPLY,44')
                                    END IF
                                 END DO
!
!                                CO2 CAPTURE CREDIT CONSTRAINT
!
                                 IF (UPPCEF(IPLT) .GT. 0.0)THEN
                                    ROW_CAR = 'EUCARCR'//UPYRCD(YEAR); call makmsk(ROW_CAR_mask,':EUCARCR:',UPYRCD(YEAR))
                                    VAL = DBLE(1.0 / 2204.) * XCL_CAR_YR(CL_SC,CURIYR) * DBLE(12.0 / 44.0) * DBLE(UPPCEF(IPLT))
                                    VAL = MAX( VAL , ECP_MIN)
                                    IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                    IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = ECP_MIN
                                    CALL CVAL(COLUMN,ROW_CAR,VAL,COLUMN_mask,ROW_CAR_mask,'EP$CSUPPLY,46')
                                 END IF
!
!                                Revise Transportation Costs from Supply Curve to EMM Region
!
                                 IF (YEAR .LT. UNXPH) THEN
                                    IF (IPLT .LT. WIPC) THEN
                                       IF (ISNAN(TOT_RATE1(CL_SC,IRG,YEAR-1)) .OR. &
                                          ABS(TOT_RATE1(CL_SC,IRG,YEAR-1)) .GT. HUGE(TOT_RATE1(CL_SC,IRG,YEAR-1))) THEN  ! check for NaNQ this way
                                          TOT_RATE1(CL_SC,IRG,YEAR-1) = 1.0
                                       END IF
                                       C_TRAN = TOT_RATE1(CL_SC,IRG,YEAR-1) * UPGNPD(CURIYR+YEAR-1) * PWF(DSCRT,YEAR)
                                    ELSE
                                       IF (ISNAN(TOT_RATE2(CL_SC,IRG,YEAR-1)) .OR. &
                                          ABS(TOT_RATE2(CL_SC,IRG,YEAR-1)) .GT. HUGE(TOT_RATE2(CL_SC,IRG,YEAR-1))) THEN  ! check for NaNQ this way
                                          TOT_RATE2(CL_SC,IRG,YEAR-1) = 1.0
                                       END IF
                                       C_TRAN = TOT_RATE2(CL_SC,IRG,YEAR-1) * UPGNPD(CURIYR+YEAR-1) * PWF(DSCRT,YEAR)
                                    END IF
                                 ELSE
                                    IF (IPLT .LT. WIPC) THEN
                                       DO KYR = 1 , UNFPH - UNXPH + 1
                                          PCL(KYR) = TOT_RATE1(CL_SC,IRG,YEAR+KYR-2) * UPGNPD(CURIYR+KYR+UNXPH-2)

                                          IF (ISNAN(PCL(KYR)) .OR. ABS(PCL(KYR)) .GT. HUGE(PCL(KYR))) THEN   ! check for NaNQ this way
                                             PCL(KYR) = 1.0
                                          END IF
                                       END DO
                                    ELSE
                                       DO KYR = 1 , UNFPH - UNXPH + 1
                                          PCL(KYR) = TOT_RATE2(CL_SC,IRG,YEAR+KYR-2) * UPGNPD(CURIYR+KYR+UNXPH-2)

                                          IF (ISNAN(PCL(KYR)).OR. ABS(PCL(KYR)) .GT. HUGE(PCL(KYR))) THEN   ! check for NaNQ this way
                                             PCL(KYR) = 1.0
                                          END IF
                                       END DO
                                    END IF
                                    C_TRAN = PVV(PCL,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
                                 END IF
!
!                                Account for cost of ACI
!
                                 IF (J_ACI .GT. 1) THEN
                                    READ(UPFLCD(JECP),"(A1)") RNK_CD
                                    IF (RANK_CD .EQ. "B") THEN
                                       I_RANK = 1
                                    ELSE IF (RANK_CD .EQ. "S") THEN
                                       I_RANK = 2
                                    ELSE IF (RANK_CD .EQ. "L") THEN
                                       I_RANK = 3
                                    END IF
                                    C_ACI = ACI_CST(J_ACI,I_RANK,IPLT)
!
!                                   Use Activated Carbon
!
                                    ROW_ACI = 'ACIXXXX'//UPYRCD(YEAR); call makmsk(ROW_ACI_mask,':ACIXXXX:',UPYRCD(YEAR))
                                    VAL = 0.000001 * ACI_QAC(J_ACI,I_RANK,IPLT)
                                    VAL = VAL * 10.0                                     ! Scale by 10.0 to hopefully help reduce numerical singularities
                                    IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                                    IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = ECP_MIN
                                    CALL CVAL(COLUMN,ROW_ACI,VAL,COLUMN_mask,ROW_ACI_mask,'EP$CSUPPLY,47')
                                 ELSE
                                    C_ACI = 0.0
                                 END IF
                                 IF (YEAR .LT. UNXPH)THEN
                                    VOMCST = UPGNPD(JYR) * C_ACI * 1000.0 * PWF(DSCRT,YEAR)
                                 ELSE
                                    DO KYR = 1 , UNFPH - UNXPH + 1
                                       VOM(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * C_ACI * 1000.0
                                    END DO
                                    KYR = UNFPH - UNXPH + 1
                                    VOMCST = PVV(VOM(1),ECP_D_FPH,KYR,DBLE(DSCRT)) * PWF(DBLE(DSCRT),UNXPH-1)
                                 END IF
!
!                                VAL = VOMCST / C_HTRT(IPLT,IRG,YEAR)

                                 VAL = VOMCST / 10000.0
                                 IF (ETAX_FLAG /= 0)VAL = VAL + JCLCLNR(MIN(CURIYR + YEAR - 1,UNYEAR),IPLT)
                                 IF (USW_DIGIT .GT. 0)THEN
                                 OBJVAL = DIGITS2( C_TRAN + VAL , DIGITS_PARM)
                                 ELSE
                                    OBJVAL = C_TRAN + VAL
                                 END IF

                                 CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$CSUPPLY,48')
!
                                 ROW_SC = 'SC'//UPFLCD(JECP)//SC_CD//'X'//UPYRCD(YEAR); call makmsk(ROW_SC_mask,':SC:',UPFLCD(JECP),SC_CD,':X:',UPYRCD(YEAR))
                                 VAL = 1.0
                                 CALL CVAL(COLUMN,ROW_SC,VAL,COLUMN_mask,ROW_SC_mask,'EP$CSUPPLY,49')
!
                                 ROW_CF = 'K'//UPFLCD(JECP)//SC_CD//EPFLCD(IRG)//SCRB_CD(ISCRB)//UPYRCD(YEAR); call makmsk(ROW_CF_mask,':K:',UPFLCD(JECP),SC_CD,EPFLCD(IRG),SCRB_CD(ISCRB),UPYRCD(YEAR))
                                 VAL = 1.0
                                 CALL CVAL(COLUMN,ROW_CF,VAL*0.1,COLUMN_mask,ROW_CF_mask,'EP$CSUPPLY,50')
!
                                 IF (DV_SUB(IRG,ISCRB) .EQ. 1) THEN
                                    IF (JECP .EQ. 4 .OR. JECP .EQ. 5) THEN
                                       ROW_FLDV = 'FDV'//EPFLCD(IRG)//'S'//UPLNTCD(IPLT)//UPYRCD(YEAR); call makmsk(ROW_FLDV_mask,':FDV:',EPFLCD(IRG),':S:',UPLNTCD(IPLT),UPYRCD(YEAR))
                                       VAL = 0.1
                                       CALL CVAL(COLUMN,ROW_FLDV,VAL,COLUMN_mask,ROW_FLDV_mask,'EP$CSUPPLY,51')
                                    END IF
                                 END IF
!
                                 IF (DV_LIG(IRG,ISCRB) .EQ. 1) THEN
                                    IF (JECP .EQ. 6) THEN
                                       ROW_FLDV = 'FDV'//EPFLCD(IRG)//'L'//UPLNTCD(IPLT)//UPYRCD(YEAR); call makmsk(ROW_FLDV_mask,':FDV:',EPFLCD(IRG),':L:',UPLNTCD(IPLT),UPYRCD(YEAR))
                                       VAL = 0.1
                                       CALL CVAL(COLUMN,ROW_FLDV,VAL,COLUMN_mask,ROW_FLDV_mask,'EP$CSUPPLY,52')
                                    END IF
                                 END IF
!
                              END IF         ! TEST (TST_ACI EQ 1)

!                             IF (CL_SC .LE. MX_NCOALS) THEN
!                                IF (CURIRUN .EQ. 1) THEN
!                                   XCL_TRNINDX(IPLT,CL_SC,IRG) = 1
!                                   IF (CURCALYR .GE. 2015) THEN
!                                      IF (IPLT .EQ. WIB1 .OR. &
!                                          IPLT .EQ. WIB2 .OR. &
!                                          IPLT .EQ. WIC1 .OR. &
!                                          IPLT .EQ. WIC2 .OR. & 
!                                          IPLT .EQ. WIC3 .OR. & 
!                                          IPLT .EQ. WIH1 .OR. & 
!                                          IPLT .EQ. WIH2 .OR. &
!                                          IPLT .EQ. WIH3) THEN
!                                         XCL_TRNINDX(IPLT,CL_SC,IRG) = 0
!                                         IF (CL_SC .EQ.  7 .OR. &
!                                             CL_SC .EQ.  9 .OR. &
!                                             CL_SC .EQ. 12 .OR. &
!                                             CL_SC .EQ. 14 .OR. &
!                                             CL_SC .EQ. 15 .OR. &
!                                             CL_SC .EQ. 26 .OR. &
!                                             CL_SC .EQ. 27 .OR. &
!                                             CL_SC .EQ. 29 .OR. &
!                                             CL_SC .EQ. 31 .OR. &
!                                             CL_SC .EQ. 32 .OR. &
!                                             CL_SC .EQ. 33 .OR. &
!                                             CL_SC .EQ. 35 .OR. &
!                                             CL_SC .EQ. 36 .OR. &
!                                             CL_SC .EQ. 37 .OR. &
!                                             CL_SC .EQ. 39 .OR. &
!                                             CL_SC .EQ. 41 )THEN
!                                            XCL_TRNINDX(IPLT,CL_SC,IRG) = 1
!                                         END IF
!                                      END IF
!                                   END IF
!                                END IF
!                             END IF

!                              IF (CL_SC .LE. MX_NCOALS) THEN
!                              IF (TST_ACI .GE. 1 .AND. TOT_RATE1(CL_SC,IRG,0) .LT. 800.0) THEN
!                                    IF (XCL_TRNINDX(IPLT,CL_SC,IRG) .EQ. 0) THEN
!                                 COLUMN = 'T'//SC_CD//EPFLCD(FRG)//UPLNTCD(IPLT)//ACI_CD(J_ACI)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T:',SC_CD,EPFLCD(FRG),UPLNTCD(IPLT),ACI_CD(J_ACI),UPYRCD(YEAR))
!
!                                 CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(0.0),COLUMN_mask,'EP$CSUPPLY,53')
!                                 ENDIF
!                              ENDIF
!                                 ENDIF
                           END DO            ! J_ACI
                        END IF               ! TEST (TOT_RATE1() LT 800.0)
                     END IF                  ! TEST (JECP GT 0 AND C_ECP_CDS() EQ 1)
                  END DO                     ! CL_SC
               END IF                        ! TEST (C_ECP_CDS() EQ 1)
               END IF                        ! TST_CAP_BY_CRG
            END DO                           ! IPLT
         END DO                              ! FRG
!
         COLUMN = 'T_STOCK'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T_STOCK:',UPYRCD(YEAR))
         IF (YEAR .LT. UNXPH) THEN
            IF (XCL_STOCK(MIN(UNYEAR,YEAR+CURIYR-1)) .GE. 0.0) THEN
               VAL = XCL_STOCK(MIN(UNYEAR,YEAR+CURIYR-1))
               CALL CBND(UPBND,COLUMN,VAL,VAL,COLUMN_mask,'EP$CSUPPLY,54')
               SIGN = 1.0
               STOCK_UP = VAL
               STOCK_DN = 0.0
            ELSE
               VAL = -1.0 * XCL_STOCK(MIN(UNYEAR,YEAR+CURIYR-1))
               CALL CBND(UPBND,COLUMN,VAL,VAL,COLUMN_mask,'EP$CSUPPLY,55')
               SIGN = -1.0
               STOCK_UP = 0.0
               STOCK_DN = VAL
            END IF
!
            IF (USW_HG .GT. 0) THEN
               ROW_HG = 'EUHGOT1'//UPYRCD(YEAR); call makmsk(ROW_HG_mask,':EUHGOT1:',UPYRCD(YEAR))
               VAL = -1.0 * SIGN * TMPMBTU(CURIYR) * 0.000001 * 1000.0
               IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
               IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = ECP_MIN
               CALL CVAL(COLUMN,ROW_HG,VAL,COLUMN_mask,ROW_HG_mask,'EP$CSUPPLY,56')
            END IF
!
            ISO2 = 1
            WRITE(SO2_CODE,'(I1)') ISO2
            ROW_SO2 = 'EUSOOT'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_SO2_mask,':EUSOOT:',SO2_CODE,UPYRCD(YEAR))
            VAL = -1.0 * SIGN * TSPMBTU(CURIYR) * 1000.0
            IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
            IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = ECP_MIN
            CALL CVAL(COLUMN,ROW_SO2,VAL,COLUMN_mask,ROW_SO2_mask,'EP$CSUPPLY,57')
            WRITE(18,1324) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,COLUMN,ROW_SO2,VAL,XCL_STOCK(MIN(UNYEAR,YEAR+CURIYR-1)),TSPMBTU(CURIYR)*1000.0,TMPMBTU(CURIYR)*0.001
 1324       FORMAT(1X,"XCL_STOCK",2(":",I4),2(":",A8),4(":",F12.3))
!           Label:XCL_STOCK:CYEAR:PYEAR:COLUMN:ROW_SO2:VAL:XCL_STOCK:TSPMBTU,TMPMBTU
!
            DO FRG = 1 , UNFRGN
               IRG = EPCLMP(FRG)
               DO IPLT = 1 , NUTSEC
                  IF (C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                     ISCRB = ECP_SCRUB(IPLT,CURIYR)
!
                     ROW = 'F'//EPFLCD(FRG)//UPLNTCD(IPLT)//SCRB_CD(ISCRB)//'XX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FRG),UPLNTCD(IPLT),SCRB_CD(ISCRB),':XX:',UPYRCD(YEAR))
!
                     IF (STOCK_UP .GT. 0.0) THEN
                        COLUMN = 'T_SU'//EPFLCD(FRG)//UPLNTCD(IPLT)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T_SU:',EPFLCD(FRG),UPLNTCD(IPLT),UPYRCD(YEAR))
                        VAL = STOCK_UP * SHR_US(IPLT,FRG)
                        IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                        IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = 0.0
                        IF (VAL .NE. 0.0) THEN
                           CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$CSUPPLY,58')
                           CALL CBND(UPBND,COLUMN,VAL,VAL,COLUMN_mask,'EP$CSUPPLY,59')
                        END IF
                     END IF
!
                     IF (STOCK_DN .GT. 0.0) THEN
                        COLUMN = 'T_SD'//EPFLCD(FRG)//UPLNTCD(IPLT)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T_SD:',EPFLCD(FRG),UPLNTCD(IPLT),UPYRCD(YEAR))
                        VAL = STOCK_DN * SHR_US(IPLT,FRG)
                        IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
                        IF (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN) VAL = 0.0
                        IF (VAL .NE. 0.0) THEN
                           CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$CSUPPLY,60')
                           CALL CBND(UPBND,COLUMN,VAL,VAL,COLUMN_mask,'EP$CSUPPLY,61')
                        END IF
                     END IF
!
                  END IF
               END DO
            END DO
         END IF
!
         DO CL_SC = 1 , MX_NCOALS
            JECP = XCL_TYPE(CL_SC)
            IF (JECP .GT. 0) THEN
               IF (CL_SC .LT. 10) THEN
                  WRITE(SC_CD,'("0",I1)') CL_SC
               ELSE
                  WRITE(SC_CD,'(I2)') CL_SC
               END IF
!
               MSTEP = 0
               DO ISTEP = 1 , 11
                  IF (XCL_STEPS(ISTEP) .EQ. 0.0) MSTEP = ISTEP
               END DO
!
               IF (MSTEP .EQ. 0) THEN
                  WRITE(6,*) "Big Trouble in ECP no zero coal supply step"
                  STOP
               END IF
!
!              LIMIT COAL PRODUCTION TO LESS THAN MAXIMUM CAPABILITY - SET ESCAPE VALVE JUST IN CASE
!
               ROW_XC = 'XC'//UPFLCD(JECP)//SC_CD//'X'//UPYRCD(YEAR); call makmsk(ROW_XC_mask,':XC:',UPFLCD(JECP),SC_CD,':X:',UPYRCD(YEAR))
               IF (CURIYR + YEAR - 1 .LE. UNYEAR) THEN
                  VAL = XCL_PCAP(CL_SC,CURIYR+YEAR-1)
               ELSE
                  VAL = XCL_PCAP(CL_SC,UNYEAR) * (1.0 + XCL_MAX_INCR(CL_SC,CURIYR)) ** DBLE(CURIYR + YEAR - UNYEAR - 1)
               END IF
               VAL = MIN(VAL , XCL_PLIM(CL_SC,MIN(CURIYR+YEAR-1,UNYEAR)))
               CALL CRHS(UPRHS,ROW_XC,VAL,ROW_XC_mask,'EP$CSUPPLY,62')
               CALL CVAL(ROW_XC,ROW_XC,DBLE(-1.0),ROW_XC_mask,ROW_XC_mask,'EP$CSUPPLY,63')
               OBJVAL = 20.0 * UPGNPD(CURIYR + YEAR -1)
               CALL CVAL(ROW_XC,UPOBJ,OBJVAL,ROW_XC_mask,UPOBJ,'EP$CSUPPLY,64')
!
               ROW = 'SC'//UPFLCD(JECP)//SC_CD//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':SC:',UPFLCD(JECP),SC_CD,':X:',UPYRCD(YEAR))
!
!              Account for other demands on supply curve
!
               COLUMN = 'MV'//SC_CD//'OTH'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':MV:',SC_CD,'OTH',UPYRCD(YEAR))  ! exception, make OTH element of coalsupplystep set
               VAL = XCL_OTHER(CL_SC,MIN(CURIYR+YEAR-1,UNYEAR))
               VAL = MIN(0.9 * XCL_QECP(cl_sc,YEAR,CURIYR-1) , VAL)
               IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
               CALL CBND(UPBND,COLUMN,VAL,VAL,COLUMN_mask,'EP$CSUPPLY,65')
               CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$CSUPPLY,66')
!
               ECP_QECP(CL_SC,YEAR,CURIYR) = 0.0
!
!              Setup Stepwise Coal Supply Curves
!
               TVAL = 0.0
               DO ISTEP = 1 , 11
                  IF (ISTEP .GT. 1) THEN
                     CS_SHR = XCL_STEPS(ISTEP) - XCL_STEPS(ISTEP-1)
                  ELSE
                     CS_SHR = 1.0 + XCL_STEPS(ISTEP)
                  END IF
                  IF (XCL_STEPS(ISTEP) .LT. 0.0) THEN
                     WRITE(CSS,'("DN",I1)') MSTEP - ISTEP
                  ELSE IF (XCL_STEPS(ISTEP) .GT. 0.0) THEN
                     WRITE(CSS,'("UP",I1)') ISTEP - MSTEP
                  ELSE
                     CSS = 'ZR0'
                  END IF
                  COLUMN = 'MV'//SC_CD//CSS//UPYRCD(YEAR); call makmsk(COLUMN_mask,':MV:',SC_CD,CSS,UPYRCD(YEAR))
                  CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$CSUPPLY,67')
                  CALL CVAL(COLUMN,ROW_XC,DBLE(1.0),COLUMN_mask,ROW_XC_mask,'EP$CSUPPLY,68')
                  IF (YEAR .LT. UNXPH) THEN
                     OBJVAL = XCL_PECP(cl_sc,ISTEP,YEAR,CURIYR-1) * UPGNPD(CURIYR+YEAR-1) * PWF(DSCRT,YEAR)
                     VAL = XCL_QECP(cl_sc,YEAR,CURIYR-1) * CS_SHR
                  ELSE
                     DO KYR = 1 , UNFPH - UNXPH + 1
                        PCL(KYR) = XCL_PECP(cl_sc,ISTEP,YEAR+KYR-1,CURIYR-1) * UPGNPD(CURIYR+KYR+UNXPH-2)
                        QCL(KYR) = XCL_QECP(cl_sc,YEAR+KYR-1,CURIYR-1) * CS_SHR
                     END DO
                     OBJVAL = PVV(PCL,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
                     VAL = PVV(QCL,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1) / PV_KW
                  END IF
                  IF (USW_DIGIT .GT. 0)OBJVAL = DIGITS2( OBJVAL , DIGITS_PARM)
                  CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$CSUPPLY,69')
                  IF (USW_DIGIT .GT. 0)THEN
                  VAL = MAX(DIGITS2( VAL , DIGITS_PARM) , ECP_MIN)
                  ELSE
                     VAL = MAX(VAL , ECP_MIN)
                  END IF
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),VAL,COLUMN_mask,'EP$CSUPPLY,70')
                  TVAL = TVAL + VAL
                  WRITE(18,1723) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,cl_sc,JECP,COLUMN,ROW,OBJVAL,VAL, &
                     XCL_PECP(cl_sc,ISTEP,YEAR,CURIYR-1),XCL_QECP(cl_sc,YEAR,CURIYR-1),XCL_STEPS(ISTEP)
 1723             FORMAT(1X,"CL_SUPPLY",4(":",I4),2(":",A8),5(":",F12.3))
!
!                 Label:CL_SUPPLY:CYEAR:PYEAR:cl_sc:JECP:COLUMN:ROW:OBJVAL:VAL:XCL_PECP:XCL_QECP:XCL_STEPS
!
               END DO
               COLUMN = 'MV'//SC_CD//'UP6'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':MV:',SC_CD,':UP6:',UPYRCD(YEAR))
               CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$CSUPPLY,71')
               CALL CVAL(COLUMN,ROW_XC,DBLE(1.0),COLUMN_mask,ROW_XC_mask,'EP$CSUPPLY,72')
               IF (YEAR .LT. UNXPH) THEN
                  OBJVAL = 10.0 * UPGNPD(CURIYR+YEAR-1) * PWF(DSCRT,YEAR)
               ELSE
                  DO KYR = 1 , UNFPH - UNXPH + 1
                     PCL(KYR) = 10.0 * UPGNPD(CURIYR+KYR+UNXPH-2)
                  END DO
                  OBJVAL = PVV(PCL,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
               END IF
               IF (USW_DIGIT .GT. 0)OBJVAL = DIGITS2( OBJVAL , DIGITS_PARM)
               OBJVAL = MAX(OBJVAL , ECP_MIN)
               CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$CSUPPLY,73')
               TVAL = TVAL * 100.0
               IF (USW_DIGIT .GT. 0)THEN
               TVAL = MAX(DIGITS2( TVAL , DIGITS_PARM) , ECP_MIN)
               ELSE
                  TVAL = MAX(TVAL , ECP_MIN)
               END IF
               CALL CBND(UPBND,COLUMN,DBLE(0.0),TVAL,COLUMN_mask,'EP$CSUPPLY,74')
            END IF
!
         END DO
!
         DO CL_ISC = 1 , MX_ISCV
            CL_SC = MX_NCOALS + CL_ISC
            JECP = TOT_TYPE(CL_SC)
            IF (JECP .GT. 0) THEN
               IF (CL_SC .LT. 10) THEN
                  WRITE(SC_CD,'("0",I1)') CL_SC
               ELSE
                  WRITE(SC_CD,'(I2)') CL_SC
               END IF
!
               ROW = 'SC'//UPFLCD(JECP)//SC_CD//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':SC:',UPFLCD(JECP),SC_CD,':X:',UPYRCD(YEAR))
!
!              Account for other demands on supply curve
!
               COLUMN = 'MV'//SC_CD//'OTH'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':MV:',SC_CD,'OTH',UPYRCD(YEAR)) ! exception, make OTH element of coalsupplystep set
               VAL = XCL_OTHER(CL_SC,MIN(CURIYR+YEAR-1,UNYEAR))
               IF (USW_DIGIT .GT. 0)VAL = DIGITS2( VAL , DIGITS_PARM)
               CALL CBND(UPBND,COLUMN,VAL,VAL,COLUMN_mask,'EP$CSUPPLY,75')
               CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$CSUPPLY,76')
!
!              Setup Stepwise Coal Supply Curves
!
               TVAL = 0.0
               PVAL = 0.0
               DO ISTEP = 1 , 10
                  IF (XCL_QIMP(CL_ISC,ISTEP,MIN(CURIYR+YEAR-1,UNYEAR)) .GT. 0.0) THEN
                     IF (ISTEP .LT. 10) THEN
                        WRITE(CSS,'("I0",I1)') ISTEP
                     ELSE
                        WRITE(CSS,'("I",I2)') ISTEP
                     END IF
                     COLUMN = 'MV'//SC_CD//CSS//UPYRCD(YEAR); call makmsk(COLUMN_mask,':MV:',SC_CD,CSS,UPYRCD(YEAR))
                     CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$CSUPPLY,77')
                     IF (YEAR .LT. UNXPH) THEN
                        OBJVAL = XCL_PIMP(CL_ISC,ISTEP,MIN(YEAR+CURIYR-1,UNYEAR)) * UPGNPD(CURIYR+YEAR-1) * PWF(DSCRT,YEAR)
                        VAL = XCL_QIMP(CL_ISC,ISTEP,MIN(YEAR+CURIYR-1,UNYEAR))
                     ELSE
                        DO KYR = 1 , UNFPH - UNXPH + 1
                           PCL(KYR) = XCL_PIMP(CL_ISC,ISTEP,MIN(YEAR+KYR+CURIYR-2,UNYEAR)) * UPGNPD(CURIYR+KYR+UNXPH-2)
                           QCL(KYR) = XCL_QIMP(CL_ISC,ISTEP,MIN(YEAR+KYR+CURIYR-2,UNYEAR))
                        END DO
                        OBJVAL = PVV(PCL,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
                        VAL = PVV(QCL,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1) / PV_KW
                     END IF
                     PVAL = MAX(OBJVAL,PVAL)
                     IF (USW_DIGIT .GT. 0)OBJVAL = DIGITS2( OBJVAL , DIGITS_PARM)
                     CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$CSUPPLY,78')
                     VAL = MAX(DIGITS2( VAL , DIGITS_PARM) , ECP_MIN)
                     CALL CBND(UPBND,COLUMN,DBLE(0.0),VAL,COLUMN_mask,'EP$CSUPPLY,79')
                     TVAL = TVAL + VAL
                     WRITE(18,1723) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,cl_sc,JECP,COLUMN,ROW,OBJVAL,VAL, &
                        XCL_PIMP(CL_ISC,ISTEP,MIN(YEAR+CURIYR-1,UNYEAR)),XCL_QIMP(CL_ISC,ISTEP,MIN(YEAR+CURIYR-1,UNYEAR))
!
!                    Label:CL_SUPPLY:CYEAR:PYEAR:cl_sc:JECP:COLUMN:ROW:OBJVAL:VAL:XCL_PECP:XCL_QECP:XCL_STEPS
!
                  END IF
               END DO
               COLUMN = 'MV'//SC_CD//'I11'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':MV:',SC_CD,'I11',UPYRCD(YEAR)) !exception, make I11 a set element of CoalSupplyStep(I01, I02, ..., I10, I11, OTH)
               CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$CSUPPLY,80')
               OBJVAL = 5.0 * PVAL
               IF (USW_DIGIT .GT. 0)OBJVAL = DIGITS2( OBJVAL , DIGITS_PARM)
               OBJVAL = MAX(OBJVAL , ECP_MIN)
               CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$CSUPPLY,81')
               TVAL = TVAL * 100.0
               IF (USW_DIGIT .GT. 0)THEN
               TVAL = MAX(DIGITS2( TVAL , DIGITS_PARM) , ECP_MIN)
               ELSE
                  TVAL = MAX(TVAL , ECP_MIN)
               END IF
               CALL CBND(UPBND,COLUMN,DBLE(0.0),TVAL,COLUMN_mask,'EP$CSUPPLY,82')
            END IF
!
         END DO
!
!
!        SET UP STRUCTURE TO MOVE SO2 FROM PLANT TYPE SPECIFIC ROWS TO REGIONAL CONSTRAINT
!
         ISO2 = 1
         WRITE(SO2_CODE,'(I1)') ISO2
         ROW_SO2 = 'EUSO2X'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_SO2_mask,':EUSO2X:',SO2_CODE,UPYRCD(YEAR))
         ROW = 'EUSOOT'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUSOOT:',SO2_CODE,UPYRCD(YEAR))
         CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$CSUPPLY,83')
         CALL CVAL(ROW,ROW_SO2,DBLE(1.0),ROW_mask,ROW_SO2_mask,'EP$CSUPPLY,84')
         CALL CROWTYPE(ROW,'L       ',ROW_mask)
         CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$CSUPPLY,85')
!
         DO ISO2 = 1, NUM_SO2_GRP
            WRITE(SO2_CODE,'(I1)') ISO2
            ROW_SO2 = 'EUSO2X'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_SO2_mask,':EUSO2X:',SO2_CODE,UPYRCD(YEAR))
            DO IPLT = 1 , ECP_D_CAP
               IF (TST_SO2P(ISO2,IPLT,YEAR) .GT. 0) THEN
                  ROW= 'EUSO'//UPLNTCD(IPLT)//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUSO:',UPLNTCD(IPLT),SO2_CODE,UPYRCD(YEAR))
                  IF (UPTTYP(IPLT) .LE. NW_COAL .AND. ECP_SCRUB(IPLT,CURIYR) .EQ. 1) THEN
                     CALL CVAL(ROW,ROW,DBLE(-10.0),ROW_mask,ROW_mask,'EP$CSUPPLY,86')
                  ELSE
                     CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$CSUPPLY,87')
                  END IF
                  CALL CVAL(ROW,ROW_SO2,DBLE(1.0),ROW_mask,ROW_SO2_mask,'EP$CSUPPLY,88')
                  CALL CVAL(ROW,UPOBJ,ECP_MIN,ROW_mask,UPOBJ,'EP$CSUPPLY,89')
                  CALL CROWTYPE(ROW,'L       ',ROW_mask)
                  CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$CSUPPLY,90')
               END IF
            END DO
         END DO
!
!        SET UP STRUCTURE TO MOVE MERCURY FROM PLANT TYPE SPECIFIC ROWS TO NATIONAL CONSTRAINT
!
         IF (USW_HG .GT. 0) THEN
            ROW_HG = 'EUHGXX1'//UPYRCD(YEAR); ROW_HG_mask='EUHGXX(*)(*)' ; ! call makmsk(ROW_HG_mask,':EUHGXX:','1',UPYRCD(YEAR))
            ROW = 'EUHGOT1'//UPYRCD(YEAR); call makmsk(ROW_mask,':EUHGOT1:',UPYRCD(YEAR))
            CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$CSUPPLY,91')
            CALL CVAL(ROW,ROW_HG,DBLE(1.0),ROW_mask,ROW_HG_mask,'EP$CSUPPLY,92')
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
            CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$CSUPPLY,93')
!
            DO I_HG = 1, NUM_HG_GRP
               ROW_HG = 'EUHGXX'//UPRGCD(I_HG)//UPYRCD(YEAR); call makmsk(ROW_HG_mask,':EUHGXX:',UPRGCD(I_HG),UPYRCD(YEAR))
               DO IPLT = 1 , ECP_D_CAP
                  IF (TST_HGP(I_HG,IPLT,YEAR) .GT. 0) THEN
                     ROW= 'EUHG'//UPLNTCD(IPLT)//UPRGCD(I_HG)//UPYRCD(YEAR); call makmsk(ROW_mask,':EUHG:',UPLNTCD(IPLT),UPRGCD(I_HG),UPYRCD(YEAR))
                     CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$CSUPPLY,94')
                     CALL CVAL(ROW,ROW_HG,DBLE(1.0),ROW_mask,ROW_HG_mask,'EP$CSUPPLY,95')
                     CALL CVAL(ROW,UPOBJ,ECP_MIN,ROW_mask,UPOBJ,'EP$CSUPPLY,96')
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$CSUPPLY,97')
                  END IF
               END DO
            END DO
         END IF
      END DO
!
      RETURN
      END
!
      SUBROUTINE COMBINE_COAL_RATES(TYR)
!
!     THIS SUBROUTINE Combines Domestic and International Coal Transportation Rates into a Single Data Structure
!
      IMPLICIT NONE
!
      include 'parametr'
      include 'ncntrl'
      include 'cdsparms'
      include 'emmparm'
      include 'uso2grp'
!
      REAL*8 TMP_RATE,TVAL
      INTEGER*4 IRG,CL_SC,CL_ISC,JYR,MYR,IPORT,TPORT,TYR,ISTEP
!
      COMMON /TOT_RATES/ TOT_RATE1,TOT_RATE2,TOT_TYPE
      REAL*8 TOT_RATE1(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH),TOT_RATE2(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH)
      INTEGER*4 TOT_TYPE(MX_NCOALS+MX_ISCV)
!
      TOT_RATE1 = 0.0
      TOT_RATE2 = 0.0
      TOT_TYPE = 0
      DO CL_ISC = 1 , MX_ISCV
         CL_SC = CL_ISC + MX_NCOALS
         DO JYR = 1 , MNUMYR
            TVAL = 0.0
            DO ISTEP = 1 , 10
               TVAL = TVAL + XCL_QIMP(CL_ISC,ISTEP,JYR)
            END DO
            IF (XCL_OTHER(CL_SC,JYR) .GT. TVAL - 0.1) THEN
               XCL_OTHER(CL_SC,JYR) = MAX(TVAL - 0.1 , 0.0)
            END IF
         END DO
      END DO
!
      DO CL_SC = MX_NCOALS + 1, MX_NCOALS + MX_ISCV
            TOT_TYPE(CL_SC) = 1               !for now, all int'l coal imports are bituminous
      END DO
      DO IRG = 1 , NDREG
         DO CL_SC = 1 , MX_NCOALS
            TOT_TYPE(CL_SC) = XCL_TYPE(CL_SC)
            DO JYR = 0 , ECP_D_FPH
               MYR = MIN(MNUMYR,TYR + JYR)
               TOT_RATE1(CL_SC,IRG,JYR) = XCL_TR_T1(CL_SC,IRG,CURIYR) * XCL_1TESC(CL_SC,0,MYR,IRG)
               TOT_RATE2(CL_SC,IRG,JYR) = XCL_TR_T2(CL_SC,IRG,CURIYR) * XCL_2TESC(CL_SC,0,MYR,IRG)
            END DO
         END DO
         DO CL_ISC = 1 , MX_ISCV
            CL_SC = CL_ISC + MX_NCOALS
            DO JYR = 1 , ECP_D_FPH
               MYR = MIN(IJUMPYR , CURIYR + JYR - 1)
               TMP_RATE = 999.999
               TPORT = 0
               DO IPORT = 1 , 4
                 IF (XCL_TRATI2(CL_ISC,IPORT) .GT. 0.0 .AND. XCL_TR_IN(IPORT,CL_ISC,IRG,CURIYR) .LT. 900.0 .AND. XCL_TR_IN(IPORT,CL_ISC,IRG,CURIYR) .GT. 0.0) THEN
                     IF ((XCL_TR_IN(IPORT,CL_ISC,IRG,CURIYR) * XCL_TESCI(IPORT,MYR,IRG) + XCL_TRATI2(CL_ISC,IPORT)) .LE. TMP_RATE) THEN
                        TPORT = IPORT
                        TMP_RATE = XCL_TR_IN(IPORT,CL_ISC,IRG,CURIYR) * XCL_TESCI(IPORT,MYR,IRG) + XCL_TRATI2(CL_ISC,IPORT)
                        TOT_RATE1(CL_SC,IRG,JYR) = XCL_TR_IN(IPORT,CL_ISC,IRG,CURIYR) * XCL_TESCI(IPORT,MYR,IRG) + XCL_TRATI2(CL_ISC,IPORT)
                        TOT_RATE2(CL_SC,IRG,JYR) = XCL_TR_IN(IPORT,CL_ISC,IRG,CURIYR) * XCL_TESCI(IPORT,MYR,IRG) + XCL_TRATI2(CL_ISC,IPORT)
                     END IF
                  END IF
               END DO
               IF (TPORT .GT. 0) THEN
                  TOT_TYPE(CL_SC) = 1
                  XCL_TYPE(CL_SC) = 1
                  EFD_RANK(CL_SC) = 1
               ELSE
                  TOT_RATE1(CL_SC,IRG,JYR) = 999.9
                  TOT_RATE2(CL_SC,IRG,JYR) = 999.9
               END IF
            END DO
            TOT_RATE1(CL_SC,IRG,0) = TOT_RATE1(CL_SC,IRG,1)
            TOT_RATE2(CL_SC,IRG,0) = TOT_RATE2(CL_SC,IRG,1)
!           IF (CURIYR .EQ. 16 .AND. CURITR .EQ. 1) THEN
!              WRITE(6,2361) CURCALYR,TYR+1989,CURITR,IRG,CL_ISC,Cl_SC,TOT_TYPE(CL_SC),TOT_RATE1(CL_SC,IRG,1),(XCL_TRATI2(CL_ISC,IPORT),XCL_TESCI(IPORT,CURIYR,IRG), &
!                 XCL_TR_IN(IPORT,CL_ISC,IRG,CURIYR),IPORT=1,4)
 2361          FORMAT(1X,"XCL_TRATI",7(":",I5),13(":",F9.3))
!           END IF
         END DO
      END DO
!
      RETURN
      END
!
!     SUBROUTINES FOR REVISING MATRIX AND RETRIEVING SOLUTION VALUES
!
!     EP$ALLOW REVISES RHS OF SO2 EMISSIONS CONSTRAINT
!
      SUBROUTINE EP$ALLOW
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'emission'
      include 'cdsparms'
      include 'uso2grp'
      include 'ecpcntl'
      include 'bildin'
      include 'ecp_coal'
      include 'coalemm'
      include 'dispin'
      include 'csapr'
      include 'emm_aimms'
!
      REAL*8 VALUE,OBJVAL,DFAC
      REAL*8 DIGITS2
      REAL*8 PWF,PVV
      REAL*8 PV$NOX,NOX(ECP_D_FPH),PV_KW,KW(ECP_D_FPH),DSCRT,PV$SO2,SO2(ECP_D_FPH),PV$HG,HG(ECP_D_FPH),HGCAP(ECP_D_FPH),PV_GNP,GNP(ECP_D_FPH)
      REAL*8 BA(ECP_D_FPH),PV_BA,BA_BASE,PV_CAP,CAP(ECP_D_FPH),PV_CAP_SO2(MX_SO2_GRP)
      REAL*8 MVSO2,CTLSUM(NDREG,ECP_D_FPH),CTLNXRT,NOXEM
      REAL*8 SO2_REV(ECP_D_FPH), PV_SO2_REV, AVG_SO2_PRC(MX_SO2_GRP), SO2_REV_FAC(MX_SO2_GRP)
      REAL*4 SO2SHR
      INTEGER*4 YEAR,MYR,MYR0,MYR1,JYR,INOX,NYR,PYR,LYR,ISO2,JSO2,KSO2,XYR,ZYR,BYR
      INTEGER*4 I_HG,I_ACI,CRV,CRG,CTLPLT,RANK,IS
      CHARACTER*16 ROW,ROW_BA,ROW_MV,ROW_FR,ROW_TO,COL,COLUMN
      CHARACTER*2 ANOX
      CHARACTER*1 SO2_CODE,OTH_CODE

      REAL*8 ECP_SO2_FAC(MX_SO2_GRP,ECP_D_XPH)
      COMMON /ECP_SO2_FACTORS/ ECP_SO2_FAC
!
!      REAL*8 BANK_HG(NDREG),BANK_NOX(3)  !moved to emm_aimms
!      COMMON /BANKS/ BANK_HG,BANK_NOX
!
      COMMON /TOT_RATES/ TOT_RATE1,TOT_RATE2,TOT_TYPE
      REAL*8 TOT_RATE1(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH),TOT_RATE2(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH)
      INTEGER*4 TOT_TYPE(MX_NCOALS+MX_ISCV)
      character*30 save_row_mask
      CHARACTER*2 CLRG(NDREG)
!
      DATA CLRG/'NE',  &
                'YP',  &
                'S1',  &
                'S2',  &
                'GF',  &
                'OH',  &
                'EN',  &
                'KT',  &
                'AM',  &
                'C1',  &
                'C2',  &
                'WS',  &
                'MT',  &
                'CU',  &
                'ZN',  &
                'PC'/

      ecpsub='EP$ALLOW'


      ECP_SO2_FAC = 1.0
!
      IF (CURIYR + UHBSYR .EQ. UPSTYR) THEN
         BANK_HG = 0.0
         BANK_NOX = 0.0
         BNK_TO_CMM_HG = 0.0
      END IF
!
      ZYR = 0
      DO MYR = 2 , UNYEAR
         IF (USO2_BA_CRD(MYR) .GT. USO2_BA_CRD(MYR-1)) THEN
            ZYR = 1
            EXIT
         END IF
      END DO
!
      XYR = 0
      DO MYR = CURIYR , MIN(UNYEAR , CURIYR + UNFPH - 1)
         IF (USO2_BA_CRD(MYR) .GT. USO2_BA_CRD(MYR-1)) THEN
            XYR = MIN(UNXPH , MYR - CURIYR + 1)
            EXIT
         END IF
      END DO
!
      LYR = MIN(CURIYR + UNXPH - 2, UNYEAR)
      BA_BASE = USO2_BA_WGT(LYR)
      DO YEAR = 1 , UNFPH-UNXPH+1
         MYR = CURIYR + UNXPH + YEAR - 2
         MYR = MIN(MYR , UNYEAR)
         KW(YEAR) = 1.0
         BA(YEAR) = USO2_BA_WGT(MYR) / BA_BASE
         GNP(YEAR) = UPGNPD(CURIYR+UNXPH+YEAR-2) / UPGNPD(CURIYR+UNXPH-1)
      END DO
      DSCRT = DBLE(EPDSCRT)
      PV_KW = PVV(KW,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
      PV_GNP = PVV(GNP,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
!
      WRITE(18,1733) CURIYR+UHBSYR,CURIYR+UHBSYR+UNXPH-1,CURIYR+UHBSYR+UNFPH-1,UPGNPD(CURIYR+UNXPH-1),DSCRT,PV_KW,PV_GNP,(GNP(YEAR),YEAR=1,UNFPH-UNXPH+1)
 1733 FORMAT(1X,"PV_GNP",3(":",I4),<UNFPH-UNXPH+1+4>(":",F8.4))
!
!     REVISE RHS OF SO2 EMISSION CONSTRAINT
!
      DO 100 YEAR = 1 , UNXPH
         MYR = CURIYR + YEAR - 1
         MYR = MIN(MYR , UNYEAR)
         IF(YEAR .EQ. UNXPH) MYR = UNYEAR
         DO ISO2 = 1 , NUM_SO2_GRP
            WRITE(SO2_CODE,'(I1)') ISO2
            ROW = 'EUSO2X'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUSO2X:',SO2_CODE,UPYRCD(YEAR))
            IF ((CURIYR + UHBSYR + YEAR - 1) .LT. TRANRULE1 .OR. ISO2 .EQ. NUM_SO2_GRP)THEN
               IF (YEAR .LT. UNXPH) THEN
                  VALUE = EMRFSA(MYR,ISO2) * DBLE(0.001)
               ELSE
                  DO JYR = 1 , UNFPH - UNXPH + 1
                     PYR = MIN(JYR + CURIYR + UNXPH - 2 , UNYEAR)
                     SO2(JYR) = EMRFSA(PYR,ISO2) * DBLE(0.001)
                     SO2_REV(JYR) = SO2(JYR) * ECP_PSO2(0,PYR,ISO2) * UPGNPD(PYR) * 0.001
                  END DO
                  PV$SO2 = PVV(SO2,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                  VALUE = PV$SO2 / PV_KW

                  PV_SO2_REV = PVV(SO2_REV,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                  AVG_SO2_PRC(ISO2) = PV_SO2_REV / PV$SO2

                  PYR = MIN(CURIYR + (UNFPH / 2) - 1 , UNYEAR)
                  IF ((CURIYR + UHBSYR) .EQ. UPSTYR) THEN
                     IF (ECP_PSO2(0,PYR,ISO2) * UPGNPD(PYR) .NE. 0.0) &
                     SO2_REV_FAC(ISO2) = (AVG_SO2_PRC(ISO2) / (ECP_PSO2(0,PYR,ISO2) * UPGNPD(PYR) * 0.001))
                  ELSE
                     IF (MAX(ECP_MIN,ECP_PSO2(0,PYR,ISO2)) * UPGNPD(PYR) .NE. 0.0) &
                     SO2_REV_FAC(ISO2) = 0.5 * SO2_REV_FAC(ISO2) + &
                       0.5 * (AVG_SO2_PRC(ISO2) / (MAX(ECP_MIN,ECP_PSO2(0,PYR,ISO2)) * UPGNPD(PYR) * 0.001))
                  END IF

                  DO JYR = 1 , UNFPH - UNXPH + 1
                     CAP(JYR) = MAX((VALUE - SO2(JYR) + 0.0001) / (VALUE - SO2(UNFPH-UNXPH+1) + 0.0001 ) , 0.0)
                  END DO
                  PV_CAP_SO2(ISO2) = PVV(CAP,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) / PV_KW
!
                  WRITE(18,1734) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,ISO2,VALUE,DSCRT,PV_CAP_SO2(ISO2),PV_KW,PV_GNP,(CAP(JYR),JYR=1,UNFPH-UNXPH+1)
 1734             FORMAT(1X,"PV_CAP_SO2",3(":",I4),":",F9.3,<UNFPH-UNXPH+1+4>(":",F7.4))

                  PYR = MIN(CURIYR + UNXPH - 1 , UNYEAR)

                  PV_BA = PVV(BA,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)

                  WRITE(18,1934) CURIYR+UHBSYR, PYR+UHBSYR, ISO2, SO2_REV_FAC(ISO2), AVG_SO2_PRC(ISO2), &
                     ECP_PSO2(0,PYR,ISO2) * UPGNPD(PYR) * 0.001, EMELPSO2(PYR,ISO2) * UPGNPD(PYR) * 0.001, PV_SO2_REV, PV$SO2, &
                     PV_BA, UPGNPD(PYR), (SO2_REV(JYR),JYR=1,UNFPH-UNXPH+1)
 1934             FORMAT(1X,"SO2_REV_FAC",3(":",I4),":",F9.3,<UNFPH-UNXPH+1+7>(":",F10.4))
!
               END IF
!
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ALLOW,1')
               CALL CROWTYPE(ROW,'L       ',ROW_mask)
            ELSE
               CALL CROWTYPE(ROW,'N       ',ROW_mask)
            END IF
            IF ((CURIYR + UHBSYR + YEAR - 1) .LT. TRANRULE1 .AND. NUM_SO2_GRP .GT. 1) THEN
               DO JSO2 = 1 , NUM_SO2_GRP
                  WRITE(OTH_CODE,'(I1)') JSO2
                  IF (ISO2 .NE. JSO2) THEN
                     COL = 'MVSO2'//SO2_CODE//OTH_CODE//UPYRCD(YEAR); call makmsk(COL_mask,':MVSO2:',SO2_CODE,OTH_CODE,UPYRCD(YEAR))
                     IF (JSO2 .NE. 1) THEN
                        VALUE = 2.0 * ECP_MIN + 0.0001
                        CALL CVAL(COL,UPOBJ,VALUE,COL_mask,UPOBJ,'EP$ALLOW,2')
                     END IF
                     VALUE = 1.0
                     CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$ALLOW,3')
                     COL = 'MVSO2'//OTH_CODE//SO2_CODE//UPYRCD(YEAR); call makmsk(COL_mask,':MVSO2:',SO2_CODE,OTH_CODE,UPYRCD(YEAR),':!rev:') ! reverses so2 regions' order so won't match columns
                     IF (JSO2 .NE. 1) THEN
                        VALUE = 2.0 * ECP_MIN
                        CALL CVAL(COL,UPOBJ,VALUE,COL_mask,UPOBJ,'EP$ALLOW,4')
                     END IF
                     IF (SO2_SHR_ALW_GRP(MYR,JSO2) .GT. 0.0)THEN
                        IF (YEAR .LT. UNXPH) THEN
                           VALUE = DBLE(-SO2_SHR_ALW_GRP(MYR,ISO2) / SO2_SHR_ALW_GRP(MYR,JSO2))
                        ELSE
                           IF (ISO2 .EQ. 1)THEN
                              DO JYR = 1 , UNFPH - UNXPH + 1
                                 PYR = MIN(JYR + CURIYR + UNXPH - 2 , UNYEAR)
                                 SO2(JYR) = DBLE(-SO2_SHR_ALW_GRP(PYR,ISO2) / SO2_SHR_ALW_GRP(PYR,JSO2))
                              END DO
                              PV$SO2 = PVV(SO2,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                              VALUE = PV$SO2 / PV_KW
                              MVSO2 = VALUE
                           ELSE
                              VALUE = DBLE(1.0) / MVSO2
                           END IF
                        END IF
                        CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$ALLOW,5')
                        CALL CBND(UPBND,COL,DBLE(0.0),DBLE(30000.0),COL_mask,'EP$ALLOW,6')
                     ELSE
                        VALUE = -1.0
                        CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$ALLOW,7')
                        CALL CBND(UPBND,COL,DBLE(0.0),DBLE(0.0),COL_mask,'EP$ALLOW,8')
                     END IF
                  END IF
               END DO
            END IF
!
!           ACCOUNT FOR VARIABILITY LIMITS IN TRANSPORT RULE, IF APPROPRIATE
!
            IF ((CURIYR + UHBSYR + YEAR - 1) .GE. TRANRULE1 .AND. ISO2 .EQ. 1)THEN
               DO JSO2 = 1 , NDREG
                  IF (TSO2_SHR_BY_CLRG(JSO2,1) .GT. 0.0)THEN
                     IF ((CURIYR + UHBSYR + YEAR - 1) .GE. TSO2_VR_BY_CLRG)THEN
                     IF (YEAR .LT. UNXPH)THEN
!                          IF ((CURIYR + UHBSYR + YEAR  - 1) .GE. TRANRULE2)THEN
!                             VALUE = DBLE(TSO2_VR3_BY_CLRG(JSO2))
!                          ELSE IF ((CURIYR + UHBSYR + YEAR - 1) .GE. TRANRULE1)THEN
                           VALUE = DBLE(TSO2_VR1_BY_CLRG(JSO2))
!                          ELSE
!                             VALUE = DBLE(0.0)
!                          END IF
                     ELSE
                       DO JYR = 1 , UNFPH - UNXPH + 1
                          PYR = MIN(JYR + CURIYR + UNXPH - 2 , UNYEAR)
!                             IF ((CURIYR + UHBSYR + PYR) .GE. TRANRULE2)THEN
!                                SO2(JYR) = DBLE(TSO2_VR3_BY_CLRG(JSO2))
!                             ELSE IF ((CURIYR + UHBSYR + PYR) .GE. TRANRULE1)THEN
                             SO2(JYR) = DBLE(TSO2_VR1_BY_CLRG(JSO2))
!                             ELSE
!                                SO2(JYR) = DBLE(0.0)
!                             END IF
                       END DO
                       PV$SO2 = PVV(SO2,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                       VALUE = PV$SO2 / PV_KW
                     END IF
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     ROW_MV = 'MVSO2'//CLRG(JSO2)//UPYRCD(YEAR); call makmsk(ROW_MV_mask,':MVSO2:',CLRG(JSO2),UPYRCD(YEAR))
                     CALL CROWTYPE(ROW_MV,'L       ',ROW_MV_mask)
                     CALL CRHS(UPRHS,ROW_MV,VALUE,ROW_MV_mask,'EP$ALLOW,9')
                     END IF
                     DO KSO2 = 1 , NDREG
                        IF (JSO2 .NE. KSO2)THEN
                           IF (TSO2_SHR_BY_CLRG(KSO2,1) .GT. 0.0)THEN
                              COL = 'MVS'//CLRG(KSO2)//CLRG(JSO2)//UPYRCD(YEAR); call makmsk(COL_mask,':MVS:',CLRG(KSO2),CLRG(JSO2),UPYRCD(YEAR))
                              CALL CVAL(COL,UPOBJ,ECP_MIN,COL_mask,UPOBJ,'EP$ALLOW,10')
                              IF ((CURIYR + UHBSYR + YEAR - 1) .GE. TSO2_VR_BY_CLRG)THEN
                                 ROW_MV = 'MVSO2'//CLRG(JSO2)//UPYRCD(YEAR); call makmsk(ROW_MV_mask,':MVSO2:',CLRG(JSO2),UPYRCD(YEAR))
                              CALL CVAL(COL,ROW_MV,DBLE(1.0),COL_mask,ROW_MV_mask,'EP$ALLOW,11')
                              END IF
                              ROW_TO = 'EUSO2'//CLRG(JSO2)//UPYRCD(YEAR); call makmsk(ROW_TO_mask,':EUSO2:',CLRG(JSO2),UPYRCD(YEAR))
                              CALL CVAL(COL,ROW_TO,DBLE(-1.0),COL_mask,ROW_TO_mask,'EP$ALLOW,12')
                              ROW_FR = 'EUSO2'//CLRG(KSO2)//UPYRCD(YEAR); call makmsk(ROW_FR_mask,':EUSO2:',CLRG(KSO2),UPYRCD(YEAR)) !   ,':!rev:')
                              CALL CVAL(COL,ROW_FR,DBLE(1.0),COL_mask,ROW_FR_mask,'EP$ALLOW,13')
                           END IF
                        END IF
                     END DO
                  END IF
               END DO
            END IF
!
!           ADD CTL SO2 EMISSIONS
!
            VALUE = 0.0
            SO2 = 0.0
            COL = 'CTLSO2'//SO2_CODE//UPYRCD(YEAR); call makmsk(COL_mask,':CTLSO2:',SO2_CODE,UPYRCD(YEAR))
            DO CRG = 1 , NDREG
!              IF ((CURIYR + UHBSYR) .EQ. (TRANRULE1 - UPSCLT) .AND. YEAR .GT. UPSCLT)THEN
               IF ((CURIYR + UHBSYR + YEAR - 1) .GE. TRANRULE1)THEN
                  SO2SHR = TSO2_SHR_BY_CLRG(CRG,ISO2)
               ELSE
                  SO2SHR = SO2_SHR_BY_CLRG(CRG,ISO2)
               END IF
!              IF (SO2_SHR_BY_CLRG(CRG,ISO2) .GT. 0.0)THEN
               IF (SO2SHR .GT. 0.0001)THEN
                  DO CRV = 1 , MX_NCOALS
                     IF (TOT_TYPE(CRV) .GT. 0 .AND. CTLBTU(CRV,CRG,MYR) .GT. 0.0) THEN
                        CTLPLT = WIIG   !IGCC plt characteristics
                        IF (YEAR .LT. UNXPH) THEN
!                          VALUE = VALUE + CTLBTU(CRV,CRG,MYR) * DBLE(XCL_SO2_YR(CRV,CURIYR) * (1.0 - RCLCLNR(CRG,MYR,CTLPLT)) * SO2_SHR_BY_CLRG(CRG,ISO2) * 0.5)
                           VALUE = VALUE + CTLBTU(CRV,CRG,MYR) * DBLE(XCL_SO2_YR(CRV,CURIYR) * (1.0 - RCLCLNR(CRG,MYR,CTLPLT)) * SO2SHR * 0.5)
                        ELSE
                           DO JYR = 1 , UNFPH - UNXPH + 1
                              PYR = MIN(JYR + CURIYR + UNXPH - 2 , UNYEAR)
!                             SO2(JYR) = SO2(JYR) + CTLBTU(CRV,CRG,PYR) * DBLE(XCL_SO2_YR(CRV,CURIYR) * (1.0 - RCLCLNR(CRG,PYR,CTLPLT)) * SO2_SHR_BY_CLRG(CRG,ISO2) * 0.5)
                              SO2(JYR) = SO2(JYR) + CTLBTU(CRV,CRG,PYR) * DBLE(XCL_SO2_YR(CRV,CURIYR) * (1.0 - RCLCLNR(CRG,PYR,CTLPLT)) * SO2SHR * 0.5)
                           END DO
                        END IF
                     END IF
                  END DO
!        write(6,2345) curiyr+1989,curiyr+1989+year-1,clrg(crg),col,row,value,so2_shr_by_clrg(crg,iso2)
!2345 format(1h ,'!ctlrg',i4,i5,1x,a3,1x,a10,1x,a10,2f10.3)
               END IF
            END DO
            IF (YEAR .EQ. UNXPH) THEN
               PV$SO2 = PVV(SO2,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
               VALUE = PV$SO2 / PV_KW
            END IF
            IF (VALUE .GT. 0.0) THEN
               CALL CVAL(COL,ROW,DBLE(1.0),COL_mask,ROW_mask,'EP$ALLOW,14')
               CALL CBND(UPBND,COL,VALUE,VALUE,COL_mask,'EP$ALLOW,15')
            END IF
!
         END DO
!        COAL REGION LEVEL CONSTRAINTS FOR EPA TRANSPORT RULE
         IF (TSO2_YR_BY_CLRG .LT. 9999)THEN
            CTLPLT = WIIG   !IGCC plt characteristics
            DO CRG = 1 , NDREG
               VALUE = 0.0
               SO2 = 0.0
               DO CRV = 1 , MX_NCOALS
                  IF (TOT_TYPE(CRV) .GT. 0 .AND. CTLBTU(CRV,CRG,MYR) .GT. 0.0) THEN
                     IF (YEAR .LT. UNXPH)THEN
                        VALUE = VALUE + CTLBTU(CRV,CRG,MYR) * DBLE(XCL_SO2_YR(CRV,CURIYR) * (1.0 - RCLCLNR(CRG,MYR,CTLPLT)) * 0.5)
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           PYR = MIN(JYR + CURIYR + UNXPH - 2 , UNYEAR)
                           SO2(JYR) = SO2(JYR) + CTLBTU(CRV,CRG,PYR) * DBLE(XCL_SO2_YR(CRV,CURIYR) * (1.0 - RCLCLNR(CRG,PYR,CTLPLT)) * 0.5)
                        END DO
                     END IF
                  END IF
               END DO
               IF (YEAR .EQ. UNXPH)THEN
                  PV$SO2 = PVV(SO2,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                  VALUE = PV$SO2 / PV_KW
               END IF
               COL = 'CTLSO'//CLRG(CRG)//UPYRCD(YEAR); call makmsk(COL_mask,':CTLSO:',CLRG(CRG),UPYRCD(YEAR))
               IF (VALUE .GT. ECP_MIN)THEN
                  save_row_mask=row_mask

                  CALL EPA$TRANRG_ECP(1,YEAR,CRG,CTLPLT,COL,COL_mask,DBLE(1.0)) ! row_mask is reasssigned in this routine so save it just in case
                  save_row_mask=row_mask

                  IF (DBLE(TSO2_SHR_BY_CLRG(CRG,1)) .GT. ECP_MIN)CALL CBND(UPBND,COL,VALUE,VALUE,COL_mask,'EP$ALLOW,16')
               END IF
!        write(6,2346) curiyr+1989,curiyr+1989+year-1,col,row,value,so2_shr_by_clrg(crg,1),so2_shr_by_clrg(crg,2)
!2346 format(1h ,'!ctlcl',i4,i5,1x,a10,1x,a10,3f10.3)
            END DO
         END IF
!
!        MERCURY
!
         IF (USW_HG .GT. 0) THEN
            MYR = CURIYR + YEAR - 1
            MYR = MIN(MYR , UNYEAR)
            DO I_HG = 1 , NUM_HG_GRP
               ROW = 'EUHGXX'//UPRGCD(I_HG)//UPYRCD(YEAR); call makmsk(ROW_mask,':EUHGXX:',UPRGCD(I_HG),UPYRCD(YEAR))
               IF (EMEL_QHG(I_HG,MYR) .GT. 0.0) THEN
                  IF (YEAR .LT. UNXPH) THEN
                     VALUE = EMEL_QHG(I_HG,MYR)
                  ELSE
                     DO JYR = 1 , UNFPH - UNXPH + 1
                        PYR = MIN(JYR + CURIYR + UNXPH - 2 , UNYEAR)
                        HG(JYR) = EMEL_QHG(I_HG,PYR)
                     END DO
                     PV$HG = PVV(HG,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                     VALUE = PV$HG / PV_KW
                     DO JYR = 1 , UNFPH - UNXPH + 1
                        CAP(JYR) = MAX((VALUE - HG(JYR) + 0.0001) / (VALUE - HG(UNFPH-UNXPH+1) + 0.0001) , 0.0)
                     END DO
                     PV_CAP = PVV(CAP,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) / PV_KW
!
                     WRITE(18,1735) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,I_HG,VALUE,DSCRT,PV_CAP,PV_KW,PV_GNP,(CAP(JYR),JYR=1,UNFPH-UNXPH+1)
 1735                FORMAT(1X,"PV_CAP_HG",3(":",I4),":",F9.3,21(":",F7.4))
!
                  END IF
               ELSE
                  VALUE = 100.0
               END IF
               VALUE = VALUE * 1000.0
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ALLOW,17')
               CALL CROWTYPE(ROW,'L       ',ROW_mask)
!
               IF (MYR .GE. HG_BYR - UHBSYR) THEN
                  IF (MYR .EQ. HG_SYR - UHBSYR .OR. (YEAR .EQ. UNXPH .AND. MYR .LT. HG_SYR - UHBSYR)) THEN
                     BYR = MAX(HG_BYR - CURIYR - UHBSYR + 2 , 1)
                     DO JYR = BYR , YEAR
                        COLUMN = 'BNK_HG'//UPRGCD(I_HG)//UPYRCD(JYR); call makmsk(COLUMN_mask,':BNK_HG:',UPRGCD(I_HG),UPYRCD(JYR))
                        IF (YEAR .LT. UNXPH) THEN
                           IF (JYR .EQ. 1) THEN
                              VALUE = BANK_HG(I_HG)
                              CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ALLOW,18')
                              VALUE = -1.000
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,19')
                              OBJVAL = 0.0001
                              CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,20')
                           ELSE
                              VALUE = - 1.000
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,21')
                              OBJVAL = 0.0001
                              CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,22')
                           END IF
                        ELSE
                           IF (JYR .EQ. 1) THEN
                              VALUE = BANK_HG(I_HG) * PV_CAP / PV_GNP
                              CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ALLOW,23')
                              VALUE = -1.000
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,24')
                              OBJVAL = 0.0001
                              CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,25')
                           ELSE
                              VALUE = - PV_CAP / PV_GNP
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,26')
                              OBJVAL = 0.0001
                              CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,27')
                           END IF
                        END IF
                     END DO
                  END IF
!
                  IF (MYR .EQ. HG_SYR - UHBSYR + 1) THEN
                     BYR = MAX(HG_BYR - CURIYR - UHBSYR + 2 , 1)
                     DO JYR = BYR , YEAR - 1
                        COLUMN = 'BNK_HG'//UPRGCD(I_HG)//UPYRCD(JYR); call makmsk(COLUMN_mask,'BNK_HG',UPRGCD(I_HG),UPYRCD(JYR))
                        VALUE = 0.000
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,28')
                     END DO
                  END IF
!
                  IF (MYR .GT. HG_SYR - UHBSYR) THEN
                     COLUMN = 'BNK_HG'//UPRGCD(I_HG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':BNK_HG:',UPRGCD(I_HG),UPYRCD(YEAR))
                     IF (YEAR .EQ. 1) THEN
                        VALUE = -1.000
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,29')
                        VALUE = BANK_HG(I_HG)
                        CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ALLOW,30')
                        OBJVAL = 0.0001
                        CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,31')
                     ELSE IF (YEAR .LT. UNXPH) THEN
                        VALUE = - 1.000
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,32')
                        OBJVAL = 0.0001
                        CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,33')
                     ELSE
                        VALUE = - PV_CAP / PV_GNP
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,34')
                        OBJVAL = 0.0001
                        CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,35')
                     END IF
                  END IF
!
                  IF (YEAR .LT. UNXPH) THEN
                     COLUMN = 'BNK_HG'//UPRGCD(I_HG)//UPYRCD(YEAR + 1); call makmsk(COLUMN_mask,':BNK_HG:',UPRGCD(I_HG),UPYRCD(YEAR + 1))
                     IF (MYR .GE. HG_SYR - UHBSYR) THEN
                        VALUE = 1.0
                     ELSE
                        VALUE = 1.0 / HG_FCTR
                     END IF
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,36')
                  END IF
               END IF
!
!              CREATE VECTOR TO CAP HG CREDIT PRICE, IF APPROPRIATE
!
               IF (UCAP_HG .GT. 0.000) THEN
                  COLUMN = 'GCHGXX'//UPRGCD(I_HG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':GCHGXX:',UPRGCD(I_HG),UPYRCD(YEAR))
!
!                 BOUND VECTOR WITH ARBITRARILY HIGH VALUE
!
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(100000.0),COLUMN_mask,'EP$ALLOW,37')
!
!                 MERCURY ROW
!
                  ROW = 'EUHGXX'//UPRGCD(I_HG)//UPYRCD(YEAR); call makmsk(ROW_mask,':EUHGXX:',UPRGCD(I_HG),UPYRCD(YEAR))
                  VALUE = DBLE(-1.0)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,38')
!
!                 OBJECTIVE FUNCTION (PUT IN CREDIT PRICE CAP)
!
                  ROW = UPOBJ ; ROW_mask=UPOBJ
                  IF (YEAR .LT. UNXPH) THEN
                     VALUE = DBLE(UCAP_HG * 0.001 * UPGNPD(CURIYR + YEAR - 1)) * PWF(DBLE(EPDSCRT),YEAR)
                  ELSE
                     DO JYR = 1 , UNFPH - UNXPH + 1
                        HGCAP(JYR) = DBLE(UCAP_HG * 0.001 * UPGNPD(CURIYR + UNXPH + JYR - 2))
                     END DO
                     VALUE = PVV(HGCAP(1),ECP_D_FPH,JYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                  END IF
                  VALUE = MAX(VALUE,ECP_MIN)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,39')
               END IF

!              ADD CTL TO HG ROW

               IF (I_HG .EQ. 1) THEN
                  VALUE = 0.0
                  HG = 0.0
                  COL = 'CTLHGXX'//UPYRCD(YEAR); call makmsk(COL_mask,':CTLHGXX:',UPYRCD(YEAR))
                  ROW = 'EUHGXX'//UPRGCD(I_HG)//UPYRCD(YEAR); call makmsk(ROW_mask,':EUHGXX:',UPRGCD(I_HG),UPYRCD(YEAR))
                  DO CRG = 1 , NDREG
                     DO CRV = 1 , MX_NCOALS
                        RANK = EFD_RANK(CRV)
                        IF (TOT_TYPE(CRV) .GT. 0 .AND. CTLBTU(CRV,CRG,MYR) .GT. 0.0) THEN
                           CTLPLT = WIIG   !IGCC plt characteristics
                           IF (YEAR .LT. UNXPH) THEN
                              VALUE = VALUE + CTLBTU(CRV,CRG,MYR) * DBLE(XCL_HG_YR(CRV,CURIYR) * PLNT_EMF(CTLPLT,RANK) * 0.5)
                           ELSE
                              DO JYR = 1 , UNFPH - UNXPH + 1
                                 PYR = MIN(JYR + CURIYR + UNXPH - 2 , UNYEAR)
                                 HG(JYR) = HG(JYR) + CTLBTU(CRV,CRG,PYR) * DBLE(XCL_HG_YR(CRV,CURIYR) * PLNT_EMF(CTLPLT,RANK) * 0.5)
                              END DO
                           END IF
                        END IF
                     END DO
                  END DO
                  IF (YEAR .EQ. UNXPH) THEN
                     PV$HG = PVV(HG,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                     VALUE = PV$HG / PV_KW
                  END IF
                  IF (VALUE .GT. 0.0) THEN
                     CALL CVAL(COL,ROW,DBLE(1.0),COL_mask,ROW_mask,'EP$ALLOW,40')
                     CALL CBND(UPBND,COL,VALUE,VALUE,COL_mask,'EP$ALLOW,41')
                  END IF
               END IF
            END DO
!
!           ACTIVATED CARBON SUPPLY CURVE
!
            ROW = 'ACIXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':ACIXXXX:',UPYRCD(YEAR))
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
            VALUE = 0.0
            CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ALLOW,42')
            DO I_ACI = 1 , NUM_ACSS
               COLUMN = 'ACIXSS'//UPRGCD(I_ACI)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':ACIXSS:',UPRGCD(I_ACI),UPYRCD(YEAR))
               VALUE = -1.0
               VALUE = VALUE * 10.0                       ! Scale by 10.0 to hopefully help reduce numerical singularities
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,43')
            END DO
            DO I_ACI = 1 , NUM_ACSS
               COLUMN = 'ACIXSS'//UPRGCD(I_ACI)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':ACIXSS:',UPRGCD(I_ACI),UPYRCD(YEAR))
               IF (YEAR .LT. UNXPH) THEN
                  VALUE = UCL_PAC(I_ACI) * UPGNPD(CURIYR+YEAR-1) * PWF(DSCRT,YEAR-1)
               ELSE
                  DO JYR = 1 , UNFPH - UNXPH + 1
                     NOX(JYR) = UCL_PAC(I_ACI) * UPGNPD(CURIYR+UNXPH+JYR-2)
                  END DO
                  VALUE = PVV(NOX,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
               END IF
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$ALLOW,44')
               IF (I_ACI .LT. NUM_ACSS) THEN
                  VALUE = UCL_QAC(I_ACI)
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ALLOW,45')
               END IF
            END DO
         END IF
!
!        IF CREATING MATRIX AND FIRST ECP YEAR THEN CREATE BANKING
!        COEFFICIENTS THAT AREN'T REVISED AND DECLARE ROW TYPE.
!
         DO ISO2 = 1 , NUM_SO2_GRP
            WRITE(SO2_CODE,'(I1)') ISO2
!
!         IF CAIR IS RESUMED AFTER CSAPR
          IF (UYR_RSCAIR .GT. 0 .AND. (CURIYR + UHBSYR) .GE. UYR_RSCAIR .AND. UDSI_YR .LT. 9990)THEN
           IF (EMELBNK(CURIYR - 1,ISO2) .GT. 0.0)THEN
             COLUMN = 'BNK'//SO2_CODE//'SO2'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':BNK:',SO2_CODE,':SO2:',UPYRCD(YEAR))
             ROW = 'EUSO2X'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUSO2X:',SO2_CODE,UPYRCD(YEAR))
             ROW_BA = 'EUSO2B'//SO2_CODE//'X'; call makmsk(ROW_BA_mask,':EUSO2B:',SO2_CODE,':X:')
             IF (YEAR .LT. UNXPH)THEN
!               VALUE = DBLE(-SO2_SHR_ALW_GRP(MIN(UNYEAR,CURIYR + YEAR - 1),ISO2))
             VALUE = DBLE(1.0)
             ELSE
!               DO JYR = 1 , UNFPH - UNXPH + 1
!                  PYR = MIN(JYR + CURIYR + UNXPH - 2 , UNYEAR)
!                  SO2(JYR) = DBLE(-SO2_SHR_ALW_GRP(PYR,ISO2))
!               END DO
!               PV$SO2 = PVV(SO2,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
!               VALUE = PV$SO2 / PV_KW
                VALUE = PV_KW
             END IF
             CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$ALLOW,46')
             CALL CVAL(COLUMN,ROW_BA,VALUE,COLUMN_mask,ROW_BA_mask,'EP$ALLOW,47')
             ROW = UPOBJ ; ROW_mask=UPOBJ
             IF (ISO2 .EQ. 1) THEN
                VALUE = ECP_MIN
             ELSE
                VALUE = ECP_MIN + 0.0001
             END IF
             CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,48')
             IF (YEAR .EQ. 1)THEN
!               VALUE = (EMELBNK(CURIYR-1,ISO2) * (USO2_BA_CRD(CURIYR-1) / USO2_BA_CRD(CURIYR))) * 0.001
                VALUE = EMELBNK(CURIYR-1,ISO2) * 0.001
                CALL CROWTYPE(ROW_BA,'L       ',ROW_BA_mask)
                CALL CRHS(UPRHS,ROW_BA,VALUE,ROW_BA_mask,'EP$ALLOW,49')
             END IF
           END IF
          ELSE
            IF (YEAR .LT. UNXPH) THEN
              IF ((CURIYR + UHBSYR) .NE. (TRANRULE1 - UPSCLT))THEN
               COLUMN = 'BNK'//SO2_CODE//'SO2'//UPYRCD(YEAR + 1); call makmsk(COLUMN_mask,':BNK:',SO2_CODE,':SO2:',UPYRCD(YEAR + 1))
               ROW = 'EUSO2X'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUSO2X:',SO2_CODE,UPYRCD(YEAR))
               VALUE = DBLE(1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,50')
               WRITE(18,3753) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,ISO2,COLUMN,ROW,VALUE
 3753          FORMAT(1X,"BANKSO2",3(":",I4),2(":",A8),":",F15.3)
!
               ROW = UPOBJ ; ROW_mask=UPOBJ
               IF (ISO2 .EQ. 1) THEN
                  VALUE = ECP_MIN
               ELSE
                  VALUE = ECP_MIN + 0.0001
               END IF
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,51')
               WRITE(18,3753) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,ISO2,COLUMN,ROW,VALUE
              ENDIF
            ENDIF
!
            IF (YEAR .EQ. 1) THEN
               COLUMN = 'BNK'//SO2_CODE//'SO2'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':BNK:',SO2_CODE,':SO2:',UPYRCD(YEAR))
               ROW = 'EUSO2X'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUSO2X:',SO2_CODE,UPYRCD(YEAR))
               VALUE = DBLE(-1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,52')
               WRITE(18,3753) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,ISO2,COLUMN,ROW,VALUE
            END IF
!
!           GIVE MODEL BANKED ALLOWANCES -- IF NO CAIR, THEN ZERO OUT FUTURE BANKS
!
            IF ((UYR_NOCAIR .LE. 0 .OR. (CURIYR + UHBSYR) .LT. UYR_NOCAIR) .AND.  &
                (CURIYR + UHBSYR) .LT. TRANRULE1)THEN
               IF (YEAR .EQ. 1) THEN
                  COLUMN = 'BNK'//SO2_CODE//'SO2'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':BNK:',SO2_CODE,':SO2:',UPYRCD(YEAR))
                  VALUE = ((EMELBNK(CURIYR-1,ISO2) - EMELBNK(1,ISO2)) * (USO2_BA_CRD(CURIYR-1) / USO2_BA_CRD(CURIYR)) + EMELBNK(1,ISO2)) * 0.001
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$ALLOW,53')
                  WRITE(18,3753) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,ISO2,COLUMN,UPBND,VALUE
               END IF
               IF (YEAR .LT. UNXPH) THEN
                  IF (EMELBNK(MIN(UNYEAR,CURIYR+YEAR-1),ISO2) .GT. 0.0) THEN
                     COLUMN = 'BNK'//SO2_CODE//'SO2'//UPYRCD(YEAR+1); call makmsk(COLUMN_mask,':BNK:',SO2_CODE,':SO2:',UPYRCD(YEAR+1))
                     VALUE = ((EMELBNK(MIN(UNYEAR,CURIYR+YEAR-1),ISO2) - EMELBNK(1,ISO2)) *  &
                        (USO2_BA_CRD(MIN(UNYEAR,CURIYR+YEAR-2)) / USO2_BA_CRD(MIN(UNYEAR,CURIYR+YEAR-1))) + EMELBNK(1,ISO2)) * 0.001
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$ALLOW,54')
                     WRITE(18,3753) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,ISO2,COLUMN,UPBND,VALUE
                  END IF
               END IF
            ELSE
               COLUMN = 'BNK'//SO2_CODE//'SO2'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':BNK:',SO2_CODE,':SO2:',UPYRCD(YEAR))
               VALUE = DBLE(0.0)
               CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$ALLOW,55')
               WRITE(18,3753) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,ISO2,COLUMN,UPBND,VALUE
            END IF
!
!           ASSIGN FACTOR TO MODIFY CURRENT DISCOUNT RATE FOR BANKING DECISIONS
!
            DFAC = CL_SCST
!
!           Allow Banks Created by Retrofits to Bypass Devaluing Logic
!
            IF (ZYR .GT. 0) THEN
               IF (YEAR .EQ. 1) THEN
                  COLUMN = 'BNK'//SO2_CODE//'RET0'; call makmsk(COLUMN_mask,':BNK:',SO2_CODE,':RET0:')
                  VALUE = EMELBNK(1,ISO2) * 0.001
                  VALUE = MAX(VALUE , 0.0)
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ALLOW,56')
                  ROW = 'EXSO2X'//SO2_CODE//'0'; call makmsk(ROW_mask,':EXSO2X:',SO2_CODE,':0:')
                  VALUE = DBLE(-1.0)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,57')
                  CALL CROWTYPE(ROW,'L       ',ROW_mask)
                  WRITE(18,3753) CURIYR+UHBSYR,CURIYR+UHBSYR+XYR-1,ISO2,COLUMN,UPBND,VALUE
               END IF
!
               IF (YEAR .GT. 1) THEN
                  COLUMN = 'BNK'//SO2_CODE//'XTR'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':BNK:',SO2_CODE,':XTR:',UPYRCD(YEAR))
                  IF (YEAR .EQ. XYR) THEN
                     VALUE = 90000.0
                  ELSE
                     VALUE = 0.0
                  END IF
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ALLOW,58')
!
                  ROW = 'EXSO2X'//SO2_CODE//'0'; call makmsk(ROW_mask,':EXSO2X:',SO2_CODE,':0:')
                  VALUE = 1.0
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,59')
!
                  ROW = 'EUSO2X'//SO2_CODE//UPYRCD(YEAR-1); call makmsk(ROW_mask,':EUSO2X:',SO2_CODE,UPYRCD(YEAR-1))
                  VALUE = DBLE(1.0)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,60')
!
                  ROW = 'EUSO2X'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUSO2X:',SO2_CODE,UPYRCD(YEAR))
                  IF (YEAR .LT. UNXPH) THEN
                     VALUE =  - 1.000
                  ELSE
                     VALUE = - PV_CAP_SO2(ISO2) / PV_GNP
                  END IF
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,61')
               END IF
            END IF
!
!           Allow Banks to Held to the Next Year
!
            IF (YEAR .GT. 1) THEN
!
!              If there are existing banks create banking vectors
!
               IF ((EMELBNK(CURIYR-1,ISO2) * 0.000001) .GE. 0.005 .OR. NUM_SO2_GRP .GT. 1) THEN
                 IF ((CURIYR + UHBSYR) .NE. (TRANRULE1 - UPSCLT))THEN
                  COLUMN = 'BNK'//SO2_CODE//'SO2'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':BNK:',SO2_CODE,':SO2:',UPYRCD(YEAR))
                  ROW = 'EUSO2X'//SO2_CODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUSO2X:',SO2_CODE,UPYRCD(YEAR))
                  MYR1 = MIN(CURIYR + YEAR , UNYEAR)
                  MYR0 = MIN(CURIYR + YEAR - 1 , MYR1 - 1)
                  LYR = MIN(CURIYR + YEAR - 2 , UNYEAR)
                  IF (YEAR .LT. UNXPH) THEN
                     VALUE = -1.000 * (USO2_BA_WGT(LYR) / USO2_BA_WGT(MYR0))
                  ELSE
                     PV_BA = PVV(BA,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                     VALUE = - SO2_REV_FAC(ISO2) * (1.000 / PV_BA)
                  END IF

                  IF (VALUE .EQ. DBLE(0.0) .OR. ISNAN(VALUE).OR. ABS(VALUE) .GT. HUGE(VALUE)) VALUE = -0.1
                  ECP_SO2_FAC(ISO2,YEAR) = ABS(VALUE)

                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,62')
                  WRITE(18,3753) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,ISO2,COLUMN,ROW,VALUE
                 END IF
               END IF
            END IF
          END IF  !UYR_RSCAIR
         END DO ! ISO2
!
!        SET NOX SUMMER CAPS
!
         IF (YEAR .GT. NOX_LT) THEN
            NYR = MIN(UNYEAR , CURIYR + YEAR - 1)
            IF (YEAR .EQ. UNXPH) NYR = MIN(UNYEAR , CURIYR + UNFPH - 1)
            IF (NOX_GRP .GT. 1 .AND. NOX_TRDYR .GT. 0)THEN
               OBJVAL = ECP_MIN
               COLUMN = 'TUNOXEW'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':TUNOXEW:',UPYRCD(YEAR))
               CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,63')
               ROW    = 'EUNOX'//NOX_RG(2)//UPYRCD(YEAR); call makmsk(ROW_mask,':EUNOX:',NOX_RG(2),UPYRCD(YEAR))
               VALUE = DBLE(1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,64')
               ROW    = 'EUNOX'//NOX_RG(3)//UPYRCD(YEAR); call makmsk(ROW_mask,':EUNOX:',NOX_RG(3),UPYRCD(YEAR))
               VALUE = DBLE(-1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,65')
!
               COLUMN = 'TUNOXWE'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':TUNOXWE:',UPYRCD(YEAR))
               CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,66')
               ROW    = 'EUNOX'//NOX_RG(2)//UPYRCD(YEAR); call makmsk(ROW_mask,':EUNOX:',NOX_RG(2),UPYRCD(YEAR))
               VALUE = DBLE(-1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,67')
               ROW    = 'EUNOX'//NOX_RG(3)//UPYRCD(YEAR); call makmsk(ROW_mask,':EUNOX:',NOX_RG(3),UPYRCD(YEAR))
               VALUE = DBLE(1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,68')
               IF ((UHBSYR + CURIYR + YEAR - 1) .LT. NOX_TRDYR)THEN
                  COLUMN = 'TUNOXEW'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':TUNOXEW:',UPYRCD(YEAR))
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(0.0),COLUMN_mask,'EP$ALLOW,69')
                  COLUMN = 'TUNOXWE'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':TUNOXWE:',UPYRCD(YEAR))
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(0.0),COLUMN_mask,'EP$ALLOW,70')
               ELSE
                  COLUMN = 'TUNOXEW'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':TUNOXEW:',UPYRCD(YEAR))
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(1000.0),COLUMN_mask,'EP$ALLOW,71')
                  COLUMN = 'TUNOXWE'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':TUNOXWE:',UPYRCD(YEAR))
                  CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(1000.0),COLUMN_mask,'EP$ALLOW,72')
               END IF
            END IF
!
            DO INOX = 1 , NOX_GRP
               ANOX = NOX_RG(INOX)
               ROW = 'EUNOX'//ANOX//UPYRCD(YEAR); call makmsk(ROW_mask,':EUNOX:',ANOX,UPYRCD(YEAR))
               IF (NOXBYGRP(INOX,NYR) .GT. 0.0 .AND. NOXBYGRP(INOX,NYR) .LT. 9990.0) THEN
                  MYR = CURIYR + YEAR - 1
                  MYR = MIN(MYR , UNYEAR)
                  IF (YEAR .LT. UNXPH) THEN
                     VALUE = NOXBYGRP(INOX,NYR)
                  ELSE
                     DO JYR = 1 , UNFPH - UNXPH + 1
!                       PYR = MIN(JYR + CURIYR - 1 , UNYEAR)
                        PYR = MIN(JYR + CURIYR + UNXPH - 2 , UNYEAR)
                        NOX(JYR) = NOXBYGRP(INOX,PYR)
                     END DO
                     PV$NOX = PVV(NOX,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                     VALUE = PV$NOX / PV_KW
                     DO JYR = 1 , UNFPH - UNXPH + 1
                        IF (NOX(JYR) .EQ. 0.0) NOX(JYR) = VALUE + 0.0001
                        CAP(JYR) = MAX((VALUE - NOX(JYR) + 0.0001) / (VALUE - NOX(UNFPH-UNXPH+1) + 0.0001) , 0.0)
                     END DO
                     PV_CAP = PVV(CAP,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) / PV_KW
!
                     WRITE(18,1736) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,INOX,VALUE,DSCRT,PV_CAP,PV_KW,PV_GNP,(CAP(JYR),JYR=1,UNFPH-UNXPH+1)
 1736                FORMAT(1X,"PV_CAP_NOX",3(":",I4),":",F9.3,21(":",F7.4))
!
                  END IF
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ALLOW,73')
               END IF
!
               IF (MYR .GE. NOX_BYR - UHBSYR .AND. INOX .GT. 1) THEN
                  IF (MYR .EQ. NOX_SYR - UHBSYR .OR. (YEAR .EQ. UNXPH .AND. MYR .LT. NOX_SYR - UHBSYR)) THEN
                     BYR = MAX(NOX_BYR - CURIYR - UHBSYR + 2 , 2)
                     DO JYR = BYR , YEAR
                        COLUMN = 'BNK_NX'//UPRGCD(INOX)//UPYRCD(JYR); call makmsk(COLUMN_mask,':BNK_NX:',UPRGCD(INOX),UPYRCD(JYR))
                        IF (YEAR .LT. UNXPH) THEN
                           IF (JYR .EQ. 2) THEN
                              VALUE = BANK_NOX(INOX)
                              CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ALLOW,74')
                              VALUE = -1.000
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,75')
                              OBJVAL = 0.0001
                              CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,76')
                           ELSE
                              VALUE = - 1.000
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,77')
                              OBJVAL = 0.0001
                              CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,78')
                           END IF
                        ELSE
                           IF (JYR .EQ. 2) THEN
                              VALUE = BANK_NOX(INOX) * PV_CAP / PV_GNP
                              CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ALLOW,79')
                              VALUE = -1.000
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,80')
                              OBJVAL = 0.0001
                              CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,81')
                           ELSE
                              VALUE = - PV_CAP / PV_GNP
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,82')
                              OBJVAL = 0.0001
                              CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,83')
                           END IF
                        END IF
                     END DO
                  END IF
!
                  IF (MYR .EQ. NOX_SYR - UHBSYR + 1) THEN
                     BYR = MAX(NOX_BYR - CURIYR - UHBSYR + 2 , 2)
                     DO JYR = BYR , YEAR - 1
                        COLUMN = 'BNK_NX'//UPRGCD(INOX)//UPYRCD(JYR); call makmsk(COLUMN_mask,':BNK_NX:',UPRGCD(INOX),UPYRCD(JYR))
                        VALUE = 0.000
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,84')
                        OBJVAL = 0.0001
                        CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,85')
                     END DO
                  END IF
!
                  IF (MYR .GT. NOX_SYR - UHBSYR) THEN
                     COLUMN = 'BNK_NX'//UPRGCD(INOX)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':BNK_NX:',UPRGCD(INOX),UPYRCD(YEAR))
                     IF (YEAR .EQ. 2) THEN
                        VALUE = -1.000
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,86')
                        OBJVAL = 0.0001
                        CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,87')
                        VALUE = BANK_NOX(INOX)
                        CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ALLOW,88')
                     ELSE IF (YEAR .LT. UNXPH) THEN
                        VALUE = - 1.000
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,89')
                        OBJVAL = 0.0001
                        CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,90')
                     ELSE
                        VALUE = - PV_CAP / PV_GNP
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,91')
                        OBJVAL = 0.0001
                        CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'EP$ALLOW,92')
                     END IF
                  END IF
!
                  IF (YEAR .LT. UNXPH) THEN
                     COLUMN = 'BNK_NX'//UPRGCD(INOX)//UPYRCD(YEAR + 1); call makmsk(COLUMN_mask,':BNK_NX:',UPRGCD(INOX),UPYRCD(YEAR + 1))
                     IF (MYR .GE. NOX_SYR - UHBSYR) THEN
                        VALUE = 1.0
                     ELSE
                        VALUE = 1.0 / NOX_FCTR
                     END IF
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,93')
                  END IF
               END IF
!
!              CREATE SAFETY VALVE AND DECLARE ROW TYPE.
!
               IF (NOXBYGRP(INOX,NYR) .GT. 0.0 .AND. NOXBYGRP(INOX,NYR) .LT. 9990.0) THEN
                  CALL CROWTYPE(ROW,'L       ',ROW_mask)
               ELSE
                  CALL CROWTYPE(ROW,'N       ',ROW_mask)
               END IF
!
               COLUMN = 'SVNOX'//ANOX//UPYRCD(YEAR); call makmsk(COLUMN_mask,':SVNOX:',ANOX,UPYRCD(YEAR))
               ROW = 'EUNOX'//ANOX//UPYRCD(YEAR); call makmsk(ROW_mask,':EUNOX:',ANOX,UPYRCD(YEAR))
               VALUE = DBLE(-1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,94')
!
!              OBJECTIVE FUNCTION
!
               ROW = UPOBJ ; ROW_mask=UPOBJ
               VALUE = DBLE(2000.0) * UPGNPD(CURIYR + YEAR -1)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ALLOW,95')

!              Add NOX Emissions from CTL - aggregate BTUs by coal region

               CTLSUM = 0.0
               DO CRV = 1, MX_NCOALS
                  DO CRG = 1, NDREG
                     DO JYR = 1 , ECP_D_FPH
                        PYR = MIN(UNYEAR , CURIYR + JYR - 1)
                        CTLSUM(CRG,JYR) = CTLSUM(CRG,JYR) + CTLBTU(CRV,CRG,PYR)
                     END DO
                  END DO
               END DO

               ROW = 'EUNOX'//ANOX//UPYRCD(YEAR); call makmsk(ROW_mask,':EUNOX:',ANOX,UPYRCD(YEAR))
               COL = 'CTLNX'//ANOX//UPYRCD(YEAR); call makmsk(COL_mask,':CTLNX:',ANOX,UPYRCD(YEAR))
               VALUE = 0.0
               NOX = 0.0
               CTLPLT = WIIG   ! IGCC characteristics

               DO CRG = 1, NDREG
                  DO IS = 1, EFD_D_MSP
                     CTLNXRT = NOX_NEW(1,CTLPLT) * (NOX_EFD(IS,INOX) / EETIME(IS)) * NOX_SHR_BY_CLRG(CRG,INOX)
                     NOXEM =  CTLNXRT * 0.0005 * 1000.0
                     IF (YEAR .LT. UNXPH) THEN
                        VALUE = VALUE + NOXEM * CTLSUM(CRG,YEAR) * EETIME(IS) / 8760.0
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           PYR = MIN(UNYEAR , CURIYR + UNXPH + JYR - 2)
                           NOX(JYR) = NOX(JYR) + NOXEM * CTLSUM(CRG,JYR+UNXPH-1) * EETIME(IS) / 8760.0
                        END DO
                     END IF
                  END DO
               END DO
               IF (YEAR .EQ. UNXPH) THEN
                  PV$NOX = PVV(NOX,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                  VALUE = PV$NOX / PV_KW
               END IF
               IF (VALUE .GT. 0.0) THEN
                  CALL CVAL(COL,ROW,DBLE(1.0),COL_mask,ROW_mask,'EP$ALLOW,96')
                  CALL CBND(UPBND,COL,VALUE,VALUE,COL_mask,'EP$ALLOW,97')
               END IF
!
            END DO
         END IF
!
  100 CONTINUE
!
      RETURN
      END
!
!     EP$CARLM REVISES RHS OF CARBON EMISSIONS CONSTRAINT, IF ANY
!
      SUBROUTINE EP$CARLM
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'emission'
      include 'emoblk'
      include 'cdsparms'
      include 'uso2grp'
      include 'ab32'
      include 'e111d'
      include 'eusprc'
      include 'edbdef'
      include 'uefdout'
!
!
      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)

      REAL*8 VALUE,VALEM,OBJVAL,BNDVAL,P2025ADJ
      REAL*8 DIGITS2,PWF,CRBFEE(ECP_D_FPH)
      REAL*8 CRL(ECP_D_FPH),KW(ECP_D_FPH),CRD(ECP_D_FPH),EMS(ECP_D_FPH),PV_KW,PVV,DSCRT,PV_CRL,PV_CRD,PV_EMS
      REAL*8 ESC(ECP_D_FPH),PV_ESC
      REAL*8 AUC(ECP_D_FPH),PV_AUC
      REAL*8 CON(ECP_D_FPH),PV_CON,RSV(ECP_D_FPH),PV_RSV,AV_RSV,AV_BNK,LIM(ECP_D_FPH),PV_LIM
      REAL*8 ECR(ECP_D_FPH),PV_ECR
      INTEGER*4 YEAR,MYR,LTYR,IYR,M2YR,KYR,XYR,GRP,REG
      CHARACTER*16 ROW,ROW_RS,ROW_BK,COL,COLUMN

      ecpsub='EP$CARLM'

!     REVISE RHS OF CARBON EMISSION CONSTRAINT

      DO YEAR = 1 , UNXPH
         ROW = 'EUCARXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':EUCARXX:',UPYRCD(YEAR))
         COLUMN = 'CARBONX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARBONX:',UPYRCD(YEAR))
         IF (YEAR .LT. UNXPH) THEN
            MYR = CURIYR + YEAR - 1
         ELSE
            MYR = CURIYR + UNFPH - 1
         END IF
         MYR = MIN(MYR,UNYEAR)
!
!        ACCOUNT FOR OTHER UTILITY EMISSION (GEOTHERMAL/MSW)
!
         COL    = 'CAROTHX'//UPYRCD(YEAR); call makmsk(COL_mask,':CAROTHX:',UPYRCD(YEAR))
         VALUE = 1.0
         CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$CARLM,1')
         CALL CVAL(COL,UPOBJ,ECP_MIN,COL_mask,UPOBJ,'EP$CARLM,2')
         VALUE = DBLE(ECP_OCAR(MYR))
         CALL CBND(UPBND,COL,VALUE,VALUE,COL_mask,'EP$CARLM,3')
!
         IF ((USW_CAR .EQ. 1 .OR. USW_CAR .EQ. 3) .AND. (MYR + UHBSYR) .GE. UYR_CAR) THEN
!
!           IN FIRST YEAR, DECLARE ROW TY
!
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
            VALUE = -1.0
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,4')
!
!           CHECK FOR CARBON LIMIT IN GIVEN YEAR(I.E. NONZERO TAX)
!
            LTYR = CURIYR + YEAR - 1
            VALUE = ECP_MIN
            IF (ELEC_FLAG /= 0) THEN
               IF (YEAR .LT. UNXPH) THEN
                  VALUE = EMISSIONS_GOAL(MYR)
                  OBJVAL = 1000.0
                  BNDVAL = 0.0001
                  WRITE(18,1322) ROW,CURIYR+UHBSYR,LTYR+UHBSYR, &
                     MYR+UHBSYR,MYR+UHBSYR,EMETAX(2,MYR), &
                     VALUE,EMISSIONS_GOAL(MYR),EMRSC(11,1,MYR), &
                     EMCMC(11,1,MYR),EMINCC(11,1,MYR), &
                     EMTRC(11,1,MYR),EMNT(11,1,MYR) * 0.001,VALUE
 1322             FORMAT(1X,A8,":E",4(":",I4),9(":",F9.3))
               ELSE
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = EMISSIONS_GOAL(M2YR)
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
                  OBJVAL = 1000.0
                  BNDVAL = 0.0001
                  WRITE(18,1322) ROW,CURIYR+UHBSYR,LTYR+UHBSYR, &
                     MYR+UHBSYR,MYR+UHBSYR,EMETAX(2,MYR), &
                     VALUE,EMISSIONS_GOAL(MYR),EMRSC(11,1,MYR), &
                     EMCMC(11,1,MYR),EMINCC(11,1,MYR), &
                     EMTRC(11,1,MYR),EMNT(11,1,MYR) * 0.001,VALUE
               END IF
            ELSE IF ((PERMIT_FLAG /= 0) .OR. (MARKET_FLAG /= 0)) THEN
               IF (YEAR .LT. UNXPH) THEN
                  VALUE = EMISSIONS_GOAL(MYR) - EMRSC(11,1,MYR) - EMCMC(11,1,MYR) - EMINCC(11,1,MYR) - EMTRC(11,1,MYR) - EMNT(11,1,MYR) * 0.001
!                 VALUE = EMISSIONS_GOAL(MYR) - ECP_SCAR(MYR)
               ELSE
                  DO IYR = 1 , UNXPH - 1
                     KW(IYR) = 0.0
                     CRL(IYR) = 0.0
                  END DO
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = EMISSIONS_GOAL(M2YR) - EMRSC(11,1,M2YR) - EMCMC(11,1,M2YR) - EMINCC(11,1,M2YR) - EMTRC(11,1,M2YR) - EMNT(11,1,M2YR) * 0.001
!                    CRL(IYR) = EMISSIONS_GOAL(M2YR) - ECP_SCAR(M2YR)
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
               END IF
               OBJVAL = 1000.0
               BNDVAL = 0.0001
               WRITE(18,1321) ROW,CURIYR+UHBSYR,LTYR+UHBSYR, &
                  MYR+UHBSYR,MYR+UHBSYR,EMETAX(2,MYR), &
                  VALUE,EMISSIONS_GOAL(MYR),EMRSC(11,1,MYR), &
                  EMCMC(11,1,MYR),EMINCC(11,1,MYR), &
                  EMTRC(11,1,MYR),EMNT(11,1,MYR) * 0.001
 1321          FORMAT(1X,A8,":C",4(":",I4),8(":",F9.3))
            ELSE IF (ETAX_FLAG /= 0) THEN
               OBJVAL = EMETAX(2,MYR) * 1000.0 * &
               UPGNPD(YEAR + CURIYR - 1) * &
               PWF(DBLE(EPDSCRT),YEAR)
               BNDVAL = 1000.0
               WRITE(18,1323) ROW,CURIYR+UHBSYR,LTYR+UHBSYR, &
                  MYR+UHBSYR,MYR+UHBSYR,EMETAX(2,MYR), &
                  VALUE,EMISSIONS_GOAL(MYR),EMRSC(11,1,MYR), &
                  EMCMC(11,1,MYR),EMINCC(11,1,MYR), &
                  EMTRC(11,1,MYR),EMNT(11,1,MYR) * 0.001
 1323          FORMAT(1X,A8,":T",4(":",I4),8(":",F9.3))
            ELSE
               OBJVAL = 0.0001
               BNDVAL = 1000.0
            END IF
            VALUE = MAX(VALUE , ECP_MIN)
            IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
            CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$CARLM,5')
            ROW = UPOBJ ; ROW_mask=UPOBJ
            IF (USW_DIGIT .GT. 0)OBJVAL = DIGITS2( OBJVAL , DIGITS_PARM)
            CALL CVAL(COLUMN,ROW,OBJVAL,COLUMN_mask,ROW_mask,'EP$CARLM,6')
            VALUE = 0.0
            CALL CBND(UPBND,COLUMN,VALUE,BNDVAL,COLUMN_mask,'EP$CARLM,7')

         ELSEIF ((USW_CAR .EQ. 0 .OR. USW_CAR .EQ. 2) .AND. EMETAX(2,MYR) .GT. 0.0 .AND. ((TAX_FLAG /= 0) .OR. (PERMIT_FLAG /= 0))) THEN

            CALL CROWTYPE(ROW,'L       ',ROW_mask)
            VALUE = -1.0
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,8')

            IF (YEAR .LT. UNXPH) THEN
              KYR = YEAR + CURIYR - 1
              IF (KYR .LE. UNYEAR) THEN
                P2025ADJ = 1.0
              ELSE
                P2025ADJ = UPCARGRW ** (KYR - UNYEAR)
              ENDIF
              OBJVAL = EMETAX(2,MYR) * 1000.0 * P2025ADJ * &
              UPGNPD(YEAR + CURIYR - 1) * &
              PWF(DBLE(EPDSCRT),YEAR)
            ELSE
              DO IYR = 1, UNFPH - UNXPH + 1
                KYR = IYR + CURIYR + UNXPH - 2
                IF (KYR .LE. UNYEAR) THEN
                   XYR = KYR
                   P2025ADJ = 1.0
                ELSE
                   XYR = UNYEAR
                   P2025ADJ = UPCARGRW ** (KYR - UNYEAR)
                ENDIF
                CRBFEE(IYR) = UPGNPD(KYR) * EMETAX(2,XYR) * 1000.0 * P2025ADJ
              ENDDO
              IYR = UNFPH - UNXPH + 1
              OBJVAL = PVV(CRBFEE,ECP_D_FPH,IYR,DBLE(EPDSCRT))*PWF(DBLE(EPDSCRT),UNXPH-1)
            ENDIF

            BNDVAL = 1000.0
            ROW = UPOBJ ; ROW_mask=UPOBJ
            IF (USW_DIGIT .GT. 0)OBJVAL = DIGITS2( OBJVAL , DIGITS_PARM)
            CALL CVAL(COLUMN,ROW,OBJVAL,COLUMN_mask,ROW_mask,'EP$CARLM,9')
            VALUE = 0.0
            CALL CBND(UPBND,COLUMN,VALUE,BNDVAL,COLUMN_mask,'EP$CARLM,10')

         ELSE

!           IF NO LIMIT THEN MAKE A FREE ROW

            CALL CROWTYPE(ROW,'N       ',ROW_mask)
         END IF
!
!        ROW FOR CO2 CAPTURE CREDIT
         DSCRT = AVGDCR
         IF (YEAR .LT. UNXPH)THEN
           IF (UPCO2EOR(CURIYR + YEAR - 1) .GT. 0.0)THEN
              COLUMN = 'EUCARCP'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':EUCARCP:',UPYRCD(YEAR))
              ROW = UPOBJ ; ROW_mask=UPOBJ
              OBJVAL = - DBLE(UPCO2EOR(CURIYR + YEAR - 1)) * DBLE(44. / 12.) * UPGNPD(CURIYR + YEAR - 1) *  &
              PWF(DSCRT,YEAR)
              CALL CVAL(COLUMN,ROW,OBJVAL,COLUMN_mask,ROW_mask,'EP$CARLM,11')
              ROW = 'EUCARCR'//UPYRCD(YEAR); call makmsk(ROW_mask,':EUCARCR:',UPYRCD(YEAR))
              CALL CROWTYPE(ROW,'G       ',ROW_mask)
              VALUE = -DBLE(1.0)
              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,12')
           ELSE
              ROW = 'EUCARCR'//UPYRCD(YEAR); call makmsk(ROW_mask,':EUCARCR:',UPYRCD(YEAR))
              CALL CROWTYPE(ROW,'N       ',ROW_mask)
           END IF
         ELSE
           DO IYR = 1 , UNFPH - UNXPH +  1
              M2YR = MIN(CURIYR + UNXPH + IYR - 2 , MNUMYR)
              CRD(IYR) = UPCO2EOR(M2YR) * UPGNPD(M2YR)
           END DO
           PV_CRD = PVV(CRD,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)*PWF(DSCRT,UNXPH-1)
           IF (PV_CRD .GT. 0.0)THEN
              COLUMN = 'EUCARCP'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':EUCARCP:',UPYRCD(YEAR))
              ROW = UPOBJ ; ROW_mask=UPOBJ
              OBJVAL = - DBLE(PV_CRD) * DBLE(44. / 12.)
              CALL CVAL(COLUMN,ROW,OBJVAL,COLUMN_mask,ROW_mask,'EP$CARLM,13')
              ROW = 'EUCARCR'//UPYRCD(YEAR); call makmsk(ROW_mask,':EUCARCR:',UPYRCD(YEAR))
              CALL CROWTYPE(ROW,'G       ',ROW_mask)
              VALUE = -DBLE(1.0)
              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,14')
           ELSE
              ROW = 'EUCARCR'//UPYRCD(YEAR); call makmsk(ROW_mask,':EUCARCR:',UPYRCD(YEAR))
              CALL CROWTYPE(ROW,'N       ',ROW_mask)
           END IF
         END IF
!
!        SET UP REGIONAL CO2 LIMITS, IF ANY
!
         DO GRP = 1 , CO2_GRP
            PV_RSV = DBLE(0.0)
            PV_AUC = DBLE(0.0)
            PV_ECR = DBLE(0.0)
            IF (YEAR .LT. UNXPH) THEN
               MYR = MIN(CURIYR + YEAR - 1,MNUMYR)
               PV_LIM = CO2BYGRP(GRP,MYR)
!              FOR AB32, USE ALL SECTOR CAP INSTEAD OF POWER SECTOR ONLY
               IF (GRP .EQ. CARGRP_CA)THEN
                  PV_LIM = DBLE(AB_CAP_TOT(MYR))
                  PV_AUC = DBLE(AB_AUCTION_P(MYR) * 1000.0) * UPGNPD(CURIYR + YEAR - 1) * PWF(DSCRT,YEAR)
                  PV_CON = DBLE(AB_RESERVE_P(2,MYR) * 1000.0) * UPGNPD(CURIYR + YEAR - 1) * PWF(DSCRT,YEAR)
                  PV_RSV = DBLE(AB_CAP_TOT(MYR) * AB_CSTCONT_FRAC(MYR))
               ELSE IF (CO2FLGRP(GRP,MYR) .GT. DBLE(0.0))THEN
                  PV_AUC = DBLE(CO2FLGRP(GRP,MYR)) * UPGNPD(CURIYR + YEAR - 1) * PWF(DSCRT,YEAR)
               END IF
               IF (GRP .EQ. CARGRP_CA)THEN
                  PV_ESC = DBLE(AB_RESERVE_P(3,MYR) * 1000.0) * UPGNPD(CURIYR + YEAR - 1) * PWF(DSCRT,YEAR) + ECP_MIN
               ELSE
                  PV_ESC = DBLE(CO2ESGRP(GRP,MYR) * (44. / 12.)) * UPGNPD(CURIYR + YEAR - 1) * PWF(DSCRT,YEAR)
               END IF
!              FOR RGGI, USE SPECIFIED RESERVE COSTS AND QUANTITES
               IF (GRP .EQ. CARGRP_RG)THEN
                  PV_LIM = PV_LIM - CO2EQGRP(GRP,MYR)
                  PV_CON = DBLE(CO2RPGRP(GRP,MYR)) * UPGNPD(CURIYR + YEAR - 1) * PWF(DSCRT,YEAR)
                  PV_ECR = DBLE(CO2EPGRP(GRP,MYR)) * UPGNPD(CURIYR + YEAR - 1) * PWF(DSCRT,YEAR)
               END IF
            ELSE
               DO IYR = 1 , UNXPH - 1
                  KW(IYR) = 0.0
                  LIM(IYR) = 0.0
                  ESC(IYR) = 0.0
                  AUC(IYR) = 0.0
                  CON(IYR) = 0.0
                  RSV(IYR) = 0.0
                  ECR(IYR) = 0.0
               END DO
               DO IYR = 1 , UNFPH - UNXPH +  1
                  M2YR = MIN(CURIYR + UNXPH + IYR - 2 , MNUMYR)
                  KW(IYR) = 1.0
                  LIM(IYR) = CO2BYGRP(GRP,M2YR)
!              FOR AB32, USE ALL SECTOR CAP INSTEAD OF POWER SECTOR ONLY
                  IF (GRP .EQ. CARGRP_CA)THEN
                     LIM(IYR) = DBLE(AB_CAP_TOT(M2YR))
                     AUC(IYR) = DBLE(AB_AUCTION_P(M2YR) * 1000.0) * UPGNPD(M2YR)
                     CON(IYR) = DBLE(AB_RESERVE_P(2,M2YR) * 1000.0) * UPGNPD(M2YR)
                     RSV(IYR) = DBLE(AB_CAP_TOT(M2YR) * AB_CSTCONT_FRAC(M2YR))
                  ELSE IF (CO2FLGRP(GRP,MYR) .GT. DBLE(0.0))THEN
                     AUC(IYR) = DBLE(CO2FLGRP(GRP,M2YR)) * UPGNPD(M2YR) 
                  END IF
                  IF (GRP .EQ. CARGRP_CA)THEN
                     ESC(IYR) = DBLE(AB_RESERVE_P(3,M2YR) * 1000.0) * UPGNPD(M2YR) + ECP_MIN
                  ELSE
                     ESC(IYR) = DBLE(CO2ESGRP(GRP,M2YR) * (44. / 12.)) * UPGNPD(M2YR)
                  END IF
!              FOR RGGI, USE SPECIFIED RESERVE COSTS AND QUANTITES
                  IF (GRP .EQ. CARGRP_RG)THEN
                     LIM(IYR) = LIM(IYR) - DBLE(CO2EQGRP(GRP,M2YR))
                     CON(IYR) = DBLE(CO2RPGRP(GRP,M2YR)) * UPGNPD(M2YR)
                     ECR(IYR) = DBLE(CO2EPGRP(GRP,M2YR)) * UPGNPD(M2YR)
                  END IF
               END DO
               DSCRT = AVGDCR
               PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
               PV_LIM = PVV(LIM,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
               PV_ESC = PVV(ESC,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
               PV_AUC = PVV(AUC,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
               PV_CON = PVV(CON,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
               PV_RSV = PVV(RSV,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
               PV_ECR = PVV(ECR,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
               PV_LIM = PV_LIM / PV_KW
!              PV_ESC = PV_ESC / PV_KW
               PV_RSV = PV_RSV / PV_KW
               PV_ECR = PV_ECR / PV_KW
            END IF
            ROW = 'EUCAR'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(ROW_mask,':EUCAR:',CO2_RG(GRP),UPYRCD(YEAR))

!           write(6,2222) curiyr+1989,curiyr+1989+year-1,row,pv_lim
!2222       format(1h ,'!co2lim',i4,i5,a10,f10.1)

            IF (PV_LIM .GT. 0.0 .AND. PV_LIM .LT. 9000.0)THEN
               CALL CROWTYPE(ROW,'L       ',ROW_mask)
               CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$CARLM,15')
!              SET CAP VECTOR
               COLUMN = 'CARLM'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARLM:',CO2_RG(GRP),UPYRCD(YEAR))
               CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$CARLM,16')
               IF (GRP .EQ. CARGRP_CA)THEN
                  CALL CVAL(COLUMN,UPOBJ,PV_AUC,COLUMN_mask,UPOBJ,'EP$CARLM,17')
                  PV_LIM = PV_LIM - PV_RSV
               ELSE
                  CALL CVAL(COLUMN,UPOBJ,MAX(ECP_MIN,PV_AUC),COLUMN_mask,UPOBJ,'EP$CARLM,18')
               END IF
!              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               CALL CBND(UPBND,COLUMN,DBLE(0.0),PV_LIM,COLUMN_mask,'EP$CARLM,19')
!              SET AB32 BANK VECTOR
               IF (GRP .EQ. CARGRP_CA)THEN
                  IF (AB_ALLBANK_AVL(CURIYR - 1) .GT. 0.0)THEN
                     IF (YEAR .EQ. 1)THEN
                        ROW_BK = 'EUBNK'//CO2_RG(GRP)//'X'; call makmsk(ROW_BK_mask,':EUBNK:',CO2_RG(GRP),':X:')
                        CALL CROWTYPE(ROW_BK,'L       ',ROW_BK_mask)
                        AV_BNK = DBLE(AB_ALLBANK_AVL(CURIYR - 1))
                        CALL CRHS(UPRHS,ROW_BK,AV_BNK,ROW_BK_mask,'EP$CARLM,20')
                     END IF
                     COLUMN = 'CARBK'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARBK:',CO2_RG(GRP),UPYRCD(YEAR))
                     CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$CARLM,21')
                     VALUE = PV_AUC + DBLE(2.0) * ECP_MIN
                     CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$CARLM,22')
                     CALL CVAL(COLUMN,ROW_BK,DBLE(1.0),COLUMN_mask,ROW_BK_mask,'EP$CARLM,23')
                  END IF
!              SET AB32 RESERVE VECTOR
                  IF (AB_CSTCONT_AVL(CURIYR) .GT. 0.0)THEN
                  IF (YEAR .EQ. 1)THEN
                        ROW_RS = 'EURSV'//CO2_RG(GRP)//'X'; call makmsk(ROW_RS_mask,':EURSV:',CO2_RG(GRP),':X:')
                        CALL CROWTYPE(ROW_RS,'L       ',ROW_RS_mask)
                        AV_RSV = DBLE(AB_CSTCONT_AVL(CURIYR))
                        CALL CRHS(UPRHS,ROW_RS,AV_RSV,ROW_RS_mask,'EP$CARLM,24')
                     END IF
                     COLUMN = 'CARRS'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARRS:',CO2_RG(GRP),UPYRCD(YEAR))
                     CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$CARLM,25')
                     CALL CVAL(COLUMN,UPOBJ,PV_CON,COLUMN_mask,UPOBJ,'EP$CARLM,26')
                           CALL CVAL(COLUMN,ROW_RS,DBLE(1.0),COLUMN_mask,ROW_RS_mask,'EP$CARLM,27')
                        END IF
               END IF
!              SET ESCAPE VECTOR OF $300/METRIC TON
               IF ((CO2ESGRP(GRP,CURIYR) * SCALPR) .LT. 9000.0)THEN
                  COLUMN = 'CARES'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARES:',CO2_RG(GRP),UPYRCD(YEAR))
                  CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$CARLM,28')
                  CALL CVAL(COLUMN,UPOBJ,PV_ESC,COLUMN_mask,UPOBJ,'EP$CARLM,29')
               END IF
            ELSE
               CALL CROWTYPE(ROW,'N       ',ROW_mask)
            END IF
!           ACCOUNT FOR IMPORTS AND/OR OUT-OF-STATE CO2, IF APPROPRIATE (AB32)
            DO REG = 1 , UNRGNS
               IF (CO2_IM_BY_RG(REG,GRP) .GT. 0.0)THEN
                  IF (YEAR .LT. UNXPH) THEN
                     MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                     VALUE = DBLE(KWH_IM_BY_RG(REG,MYR))
                     VALEM = CO2_IM_BY_CA(MYR)
                  ELSE
                     DO IYR = 1 , UNXPH - 1
                        KW(IYR) = 0.0
                        CRL(IYR) = 0.0
                        EMS(IYR) = 0.0
                     END DO
                     DO IYR = 1 , UNFPH - UNXPH +  1
                        M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                        KW(IYR) = 1.0
                        CRL(IYR) = KWH_IM_BY_RG(REG,M2YR)
                        EMS(IYR) = CO2_IM_BY_CA(M2YR)
                     END DO
                     DSCRT = AVGDCR
                     PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     VALUE = PV_CRL / PV_KW
                     PV_EMS = PVV(EMS,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     VALEM = PV_EMS / PV_KW
                  END IF
                  COLUMN = 'CARI'//UPRGCD(REG)//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARI:',UPRGCD(REG),CO2_RG(GRP),UPYRCD(YEAR))
                  CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CARLM,30')
                  IF (GRP .EQ. CARGRP_CA)THEN
                     VALUE = VALEM
                  ELSE
                     VALUE = DBLE(CO2_IM_BY_RG(REG,GRP))
                  END IF
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,31')
               END IF
!              IF (CO2_OS_BY_RG(REG,GRP) .GT. 0.0)THEN
!                 COLUMN = 'CARO'//UPRGCD(REG)//CO2_RG(GRP)//UPYRCD(YEAR)
!                 VALUE = DBLE(CO2_OS_BY_RG(REG,GRP))
!                 CALL CBND(UPBND,COLUMN,VALUE,VALUE,'EP$CARLM,32')
!                 VALUE = DBLE(1.0)
!                 CALL CVAL(COLUMN,ROW,VALUE,'EP$CARLM,33')
!              END IF
            END DO
            DO REG = 1 , UNRGNS
               IF (CO2_DF_BY_RG(REG,GRP) .GT. 0.0)THEN
                  IF (YEAR .LT. UNXPH) THEN
                     MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                     VALUE = DBLE(KWH_DM_BY_RG(REG,MYR))
                     VALEM = CO2_DF_BY_CA(MYR)
                  ELSE
                     DO IYR = 1 , UNXPH - 1
                        KW(IYR) = 0.0
                        CRL(IYR) = 0.0
                     END DO
                     DO IYR = 1 , UNFPH - UNXPH +  1
                        M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                        KW(IYR) = 1.0
                        CRL(IYR) = KWH_DM_BY_RG(REG,M2YR)
                        EMS(IYR) = CO2_DF_BY_CA(M2YR)
                     END DO
                     DSCRT = AVGDCR
                     PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     VALUE = PV_CRL / PV_KW
                     PV_EMS = PVV(EMS,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     VALEM = PV_EMS / PV_KW
                  END IF
                  COLUMN = 'CARD'//UPRGCD(REG)//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARD:',UPRGCD(REG),CO2_RG(GRP),UPYRCD(YEAR))
                  CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CARLM,34')
                  IF (GRP .EQ. CARGRP_CA)THEN
                     VALUE = VALEM
                  ELSE
                     VALUE = DBLE(CO2_DF_BY_RG(REG,GRP))
                  END IF
                  IF (VALUE .GT. ECP_MIN)CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,35')
               END IF
            END DO
!           CA AB32
            IF (GRP .EQ. CARGRP_CA)THEN
!           ACCOUNT FOR INDUSTRIAL CO2
               IF (YEAR .LT. UNXPH) THEN
                  MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                  VALUE = DBLE(AB_COVD_EM_IND(MYR))
               ELSE
                  DO IYR = 1 , UNXPH - 1
                     KW(IYR) = 0.0
                     CRL(IYR) = 0.0
                  END DO
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = DBLE(AB_COVD_EM_IND(M2YR))
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
               END IF
               COLUMN = 'CARIN'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARIN:',CO2_RG(GRP),UPYRCD(YEAR))
               CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CARLM,36')
               VALUE = DBLE(1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,37')
!           ACCOUNT FOR REFINERY CO2
               IF (YEAR .LT. UNXPH) THEN
                  MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                  VALUE = DBLE(AB_COVD_EM_REF(MYR))
               ELSE
                  DO IYR = 1 , UNXPH - 1
                     KW(IYR) = 0.0
                     CRL(IYR) = 0.0
                  END DO
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = DBLE(AB_COVD_EM_REF(M2YR))
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
               END IF
               COLUMN = 'CARRF'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARRF:',CO2_RG(GRP),UPYRCD(YEAR))
               CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CARLM,38')
               VALUE = DBLE(1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,39')
!           ACCOUNT FOR FUEL PROVIDER CO2
               IF (YEAR .LT. UNXPH) THEN
                  MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                  VALUE = DBLE(AB_COVD_EM_FUE(MYR))
               ELSE
                  DO IYR = 1 , UNXPH - 1
                     KW(IYR) = 0.0
                     CRL(IYR) = 0.0
                  END DO
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = DBLE(AB_COVD_EM_FUE(M2YR))
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
               END IF
               COLUMN = 'CARFL'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARFL:',CO2_RG(GRP),UPYRCD(YEAR))
               CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CARLM,40')
               VALUE = DBLE(1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,41')
!           ACCOUNT FOR OTHER CO2
               IF (YEAR .LT. UNXPH) THEN
                  MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                  VALUE = DBLE(AB_COVD_EM_OTH(MYR))
               ELSE
                  DO IYR = 1 , UNXPH - 1
                     KW(IYR) = 0.0
                     CRL(IYR) = 0.0
                  END DO
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = DBLE(AB_COVD_EM_OTH(M2YR))
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
               END IF
               COLUMN = 'CAROT'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CAROT:',CO2_RG(GRP),UPYRCD(YEAR))
               CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CARLM,42')
               VALUE = DBLE(1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,43')
!           ACCOUNT FOR OFFSETS
               IF (YEAR .LT. UNXPH) THEN
                  MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                  VALUE = DBLE(AB_CAP_TOT(MYR) * AB_OFFSET_FRAC(MYR))
               ELSE
                  DO IYR = 1 , UNXPH - 1
                     KW(IYR) = 0.0
                     CRL(IYR) = 0.0
                  END DO
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = DBLE(AB_CAP_TOT(M2YR) * AB_OFFSET_FRAC(M2YR))
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
               END IF
               COLUMN = 'CAROF'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CAROF:',CO2_RG(GRP),UPYRCD(YEAR))
               CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$CARLM,44')
               VALUE = DBLE(- 1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,45')
               VALUE = PV_AUC + ECP_MIN
               CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$CARLM,46')
            END IF
!           RGGI
            IF (GRP .EQ. CARGRP_RG)THEN
!           ACCOUNT FOR OFFSETS
               IF (YEAR .LT. UNXPH) THEN
                  MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                  VALUE = DBLE(CO2OQGRP(GRP,MYR))
               ELSE
                  DO IYR = 1 , UNXPH - 1
                     KW(IYR) = 0.0
                     CRL(IYR) = 0.0
                  END DO
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = DBLE(CO2OQGRP(GRP,M2YR))
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
               END IF
               COLUMN = 'CAROF'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CAROF:',CO2_RG(GRP),UPYRCD(YEAR))
               CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$CARLM,47')
               VALUE = DBLE(- 1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,48')
               VALUE = PV_AUC + ECP_MIN
               CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$CARLM,49')
!           ACCOUNT FOR COST CONTAINMENT RESERVES
               IF (YEAR .LT. UNXPH) THEN
                  MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                  VALUE = DBLE(CO2RQGRP(GRP,MYR))
               ELSE
                  DO IYR = 1 , UNXPH - 1
                     KW(IYR) = 0.0
                     CRL(IYR) = 0.0
                  END DO
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = DBLE(CO2RQGRP(GRP,M2YR))
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
               END IF
               COLUMN = 'CARRS'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CARRS:',CO2_RG(GRP),UPYRCD(YEAR))
               CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$CARLM,50')
               VALUE = DBLE(- 1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,51')
               VALUE = PV_CON
               CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$CARLM,52')
!           ACCOUNT FOR EMISSIONS CONTAINMENT RESERVES
               IF (YEAR .LT. UNXPH) THEN
                  MYR = MIN(CURIYR + YEAR - 1,UNYEAR)
                  VALUE = DBLE(CO2EQGRP(GRP,MYR))
               ELSE
                  DO IYR = 1 , UNXPH - 1
                     KW(IYR) = 0.0
                     CRL(IYR) = 0.0
                  END DO
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CRL(IYR) = DBLE(CO2EQGRP(GRP,M2YR))
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  VALUE = PV_CRL / PV_KW
               END IF
               COLUMN = 'CAREC'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':CAREC:',CO2_RG(GRP),UPYRCD(YEAR))
               CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$CARLM,53')
               VALUE = DBLE(- 1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CARLM,54')
               VALUE = PV_ECR
               CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$CARLM,55')
            END IF
         END DO
      END DO

      RETURN
      END
!
!     EP$CPP SETS UP THE PERFORMANCE STANDARDS OF THE CLEAN POWER PLAN
!
      SUBROUTINE EP$CPP
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
!     include 'emission'
!     include 'emoblk'
      include 'cdsparms'
      include 'uso2grp'
!     include 'ab32'
      include 'e111d'
      include 'eusprc'
      include 'edbdef'
      include 'uefdout'
!
      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)
!
      REAL*8 CRL(ECP_D_FPH),KW(ECP_D_FPH),PV_KW,PVV,DSCRT,PV_CRL
      INTEGER*4 YEAR,IYR,M2YR,GRP
      CHARACTER*16 ROW

      ecpsub='EP$CPP'


      DO YEAR = 1 , UNXPH
!
!        SET UP EMM  REGION CO2 ROWS
!
         IF (CO2_STDSW .GT. 0)THEN
            DO GRP = 1 , UNRGNS
!              DETERMINE GPS STANDARD
!              IF (GRP .EQ. 1)write(6,3421) curiyr+1989,year,curiyr+year+1,CO2_STDRN(GRP,CURIYR + UNXPH - 1) 
!3421 format(1h ,'!co2nr',i4,i5,i5,f10.1)
!              RATE-BASED  
               IF (CO2_STDTN(GRP) .LT. 2)THEN
               IF (CO2_STDRN(GRP,CURIYR + UNXPH - 1) .GT. 0.0)THEN
                  IF (YEAR .LT. UNXPH)THEN
                     CO2_NRYR(GRP,YEAR) = CO2_STDRN(GRP,MIN(CURIYR + YEAR - 1,UNYEAR))
                  ELSE
                     DO IYR = 1 , UNFPH - UNXPH +  1
                        M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                        KW(IYR) = 1.0
                        CRL(IYR) = CO2_STDRN(GRP,M2YR)
!              IF (GRP .EQ. 1)write(6,3421) curiyr+1989,year,curiyr+year+1,m2yr,CO2_STDRN(GRP,M2YR) 
!3422 format(1h ,'!co2yr',i4,i5,i5,i5,2f10.1)
                     END DO
                     DSCRT = AVGDCR
                     PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     CO2_NRYR(GRP,YEAR) = PV_CRL / PV_KW
!              IF (GRP .EQ. 1)write(6,3423) curiyr+1989,year,curiyr+year+1,m2yr,pv_crl,pv_kw
!3423 format(1h ,'!co2yr',i4,i5,i5,i5,2f10.1)
                  END IF
               ELSE
                  CO2_NRYR(GRP,YEAR) = DBLE(0.0)
               END IF
               IF (CO2_NRYR(GRP,YEAR) .GT. DBLE(0.0))THEN
                  ROW = 'ERCO2'//URGNME(GRP)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(GRP)(6:7),UPYRCD(YEAR),':!NERC:')
                  CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     ROW = 'EQCO2'//URGNME(GRP)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':EQCO2:',URGNME(GRP)(6:7),UPYRCD(YEAR),':!NERC:')
                     CALL CROWTYPE(ROW,'N       ',ROW_mask)
                  END IF
!              MASS-BASED  
               ELSE IF (CO2_STDTN(GRP) .EQ. 2)THEN
                  IF (CO2_STDQN(GRP,CURIYR + UNXPH - 1) .GT. 0.0)THEN
                     IF (YEAR .LT. UNXPH)THEN
                        CO2_NRYR(GRP,YEAR) = CO2_STDQN(GRP,MIN(CURIYR + YEAR - 1,UNYEAR))
                     ELSE
                        DO IYR = 1 , UNFPH - UNXPH +  1
                           M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                           KW(IYR) = 1.0
                           CRL(IYR) = CO2_STDQN(GRP,M2YR)
                        END DO
                        DSCRT = AVGDCR
                        PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                        PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                        CO2_NRYR(GRP,YEAR) = PV_CRL / PV_KW
                     END IF
                  ELSE
                     CO2_NRYR(GRP,YEAR) = DBLE(0.0)
                  END IF
                  IF (CO2_NRYR(GRP,YEAR) .GT. DBLE(0.0))THEN
                     ROW = 'ERCO2'//URGNME(GRP)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(GRP)(6:7),UPYRCD(YEAR),':!NERC:')
                     CALL CROWTYPE(ROW,'N       ',ROW_mask)
                     ROW = 'EQCO2'//URGNME(GRP)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':EQCO2:',URGNME(GRP)(6:7),UPYRCD(YEAR),':!NERC:')
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     CALL CRHS(UPRHS,ROW,DBLE(CO2_NRYR(GRP,YEAR) * 2.204),ROW_mask,'EP$CPP,2')
                  END IF
               END IF
!     if (year .eq. unxph)write(6,3233) curiyr+1989,grp,urgnme(grp),(co2_stdrn(grp,min(curiyr+iyr-1,unyear)),iyr = 1 , 3),(co2_nryr(grp,iyr),iyr = 1 , 3)
!3233 format(1h ,'!co2ecpnr',i4,i3,a5,6f10.1)
            END DO
         END IF
      END DO

      RETURN
      END
!
!     EP$CPP2 SETS UP OTHER COMPONENTS OF THE CLEAN POWER PLAN
!
      SUBROUTINE EP$CPP2
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'emission'
!     include 'emoblk'
      include 'cdsparms'
      include 'uso2grp'
!     include 'ab32'
      include 'cogen'
      include 'e111d'
      include 'eusprc'
      include 'edbdef'
      include 'uefdout'
      include 'csapr'
      include 'emmemis'
!
      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)

      COMMON /MR111D/ MRGENF,MRCO2F,MRGENN,MRCO2N
      REAL*4 MRGENF(MAXNFR,MNUMYR + ECP_D_XPH)
      REAL*4 MRCO2F(MAXNFR,MNUMYR + ECP_D_XPH)
      REAL*4 MRGENN(MNUMNR,MNUMYR + ECP_D_XPH)
      REAL*4 MRCO2N(MNUMNR,MNUMYR + ECP_D_XPH)
!
      REAL*8 VALUE,VALEM
      REAL*8 CRL(ECP_D_FPH),KW(ECP_D_FPH),EMS(ECP_D_FPH),PV_KW,PVV,DSCRT,PV_CRL,PV_EMS
      REAL*8 VALSA
      INTEGER*4 YEAR,IYR,M2YR,GRP,REG,FRG,IRG
      CHARACTER*16 ROW,ROW_ERC,COLUMN

      ecpsub='EP$CPP2'

!     CONNECT EMM REGIONS OR SET UP ERC TRADING, IF SPECIFIED
      IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,UNXPH) .GT. 0.0)THEN
         DO IRG = 1 , UNRGNS
            DO YEAR = 1 , UNXPH
               IF (CO2_ERCNR(IRG) .GT. 0 .AND. CO2_NRYR(IRG,YEAR) .GT. 0.0)THEN
!              IN FINAL RULE, CREATE CONSTRAINT TO LIMIT CREDIT TRANSFERS BY QUALIFYING INCREMENTAL GENERATION
                  IF (CO2_ERCSW .EQ. 1 .AND. CO2_STDTN(IRG) .LT. 2 .AND. CO2_ERCNR(IRG) .EQ. 2)THEN
                     ROW_ERC = 'L' // URGNME(IRG)(6:7) // 'ERCN' // UPYRCD(YEAR); call makmsk(ROW_ERC_mask,':L:',URGNME(IRG)(6:7),':ERCF:',UPYRCD(YEAR))
                     CALL CROWTYPE(ROW_ERC,'L       ',ROW_ERC_mask)
                     COLUMN = 'INC'//URGNME(IRG)(6:7)//'NR'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':INC:',URGNME(IRG)(6:7),':NR:',UPYRCD(YEAR))
!                    PUT INCREMENTAL GENERATION COLUMN IN SUPPLY CURVE ROW
                     CALL CVAL(COLUMN,ROW_ERC,DBLE(1.0),COLUMN_mask,ROW_ERC_mask,'EP$CPP2,7')
                     ROW = 'ERCO2'//URGNME(IRG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(IRG)(6:7),UPYRCD(YEAR),':!NERC:')
                     VALUE = DBLE(0.0 - CO2_NRYR(IRG,YEAR))
                     VALUE = VALUE * DBLE(0.001)
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CPP2,8')
                  END IF
                  DO REG = 1 , UNRGNS
                     IF (IRG .NE. REG .AND. CO2_STDGN(IRG,REG) .GT. 0)THEN
                        IF (CO2_STDGN(IRG,REG) .EQ. 1)THEN
!                       COLUMN TO LINK EMM  REGIONS TO A SINGLE STATE (I.E., NY)
                           COLUMN = 'MCN'//URGNME(IRG)(6:7)//URGNME(REG)(6:7)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':MCN:',URGNME(IRG)(6:7),URGNME(REG)(6:7),UPYRCD(YEAR))
                        ELSE
!                       COLUMN TO LINK EMM  REGIONS FOR TRADING ERCS
                           COLUMN = 'MEN'//URGNME(IRG)(6:7)//URGNME(REG)(6:7)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':MEN:',URGNME(IRG)(6:7),URGNME(REG)(6:7),UPYRCD(YEAR))
                        END IF
                        CALL CVAL(COLUMN,UPOBJ,DBLE(0.0001),COLUMN_mask,UPOBJ,'EP$CPP2,9')
!                       DEBIT FROM SENDING REGION
                        IF (CO2_STDTN(IRG) .LT. 2)THEN
                           ROW = 'ERCO2'//URGNME(IRG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(IRG)(6:7),UPYRCD(YEAR),':!NERC:')
                        ELSE
                           ROW = 'EQCO2'//URGNME(IRG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':EQCO2:',URGNME(IRG)(6:7),UPYRCD(YEAR),':!NERC:')
                        END IF
                        IF (CO2_ERCSW .LE. 0)THEN
                           VALUE = DBLE(1.0)
                        ELSE
                           IF (CO2_STDTN(IRG) .LT. 2 .AND. CO2_STDGN(IRG,REG) .EQ. 2)THEN
!                             PUT TRANSFER COLUMN IN SUPPLY CURVE ROW
                              CALL CVAL(COLUMN,ROW_ERC,DBLE(1.0),COLUMN_mask,ROW_ERC_mask,'EP$CPP2,10')
                              VALUE = DBLE((0.0 - CO2_NRYR(IRG,YEAR)) * -1.0)
                              VALUE = VALUE * DBLE(0.001)
                           ELSE
                              VALUE = DBLE(1.0)
                           END IF
                        END IF   
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CPP2,11')
!                       CREDIT FOR RECEIVING REGION
                        IF (CO2_STDTN(REG) .LT. 2)THEN
                           ROW = 'ERCO2'//URGNME(REG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(REG)(6:7),UPYRCD(YEAR),':!NERC:')
                        ELSE
                           ROW = 'EQCO2'//URGNME(REG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':EQCO2:',URGNME(REG)(6:7),UPYRCD(YEAR),':!NERC:')
                        END IF
                        IF (CO2_ERCSW .LE. 0)THEN
                           VALUE = DBLE(-1.0)
                        ELSE
                           IF (CO2_STDTN(REG) .LT. 2 .AND. CO2_STDGN(IRG,REG) .EQ. 2)THEN
                              VALUE = DBLE((0.0 - CO2_NRYR(REG,YEAR)) *  1.0)
                              VALUE = VALUE * DBLE(0.001)
                           ELSE
                              VALUE = DBLE(-1.0)
                           END IF
                        END IF   
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CPP2,12')
                     END IF
                  END DO
               END IF
            END DO
         END DO
      END IF

!     CREATE COLUMN FOR INCREMENTAL NEW GENERATION, IF APPROPRIATE
!     EMM  REGIONS
      IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,UNXPH) .GT. 0.0)THEN
         DO GRP = 1 , ECP_D_CAP
            IF (CO2_INCSW(GRP) .GT. 0.0)THEN
               DO REG = 1 , UNRGNS
                  IF (CO2_STDTN(REG) .LT. 2)THEN
                     VALUE = DBLE(0.0)
                     DO IYR = 1 , CURIYR
                        VALUE = VALUE + DBLE(EPBLDGEN(GRP,REG,IYR))
                     END DO
                     IF (VALUE .GT. DBLE(0.0)) THEN
                        COLUMN = 'I'//UPRGCD(REG)//UPLNTCD(GRP)//'GEN0'; call makmsk(COLUMN_mask,':I:',UPRGCD(REG),UPLNTCD(GRP),':GEN0:')
                        CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CPP2,16')
!     write(6,3232) curiyr+1989,column,value
!3232 format(1h ,'!inccol',i4,a10,f10.1)
                        DO YEAR = 1 , UNXPH
                           IF (CO2_NRYR(1,YEAR) .GT. DBLE(0.0))THEN
!                             IF ERC TRADING, PUT INTO SUPPLY CURVE ROW
                              IF (CO2_ERCSW .EQ. 1 .AND. CO2_ERCNR(REG) .EQ. 2)THEN
                                 ROW_ERC = 'L' // URGNME(REG)(6:7) // 'ERCN' // UPYRCD(YEAR); call makmsk(ROW_ERC_mask,':L:',URGNME(REG)(6:7),':ERCN:',UPYRCD(YEAR))
                                 CALL CVAL(COLUMN,ROW_ERC,DBLE(-1.0),COLUMN_mask,ROW_ERC_mask,'EP$CPP2,17')
                              ELSE
                                 VALUE = DBLE(0.0 - CO2_NRYR(REG,YEAR)) * DBLE(CO2_INCSW(GRP))
                                 VALUE = VALUE * DBLE(0.001)
                                 ROW = 'ERCO2'//URGNME(REG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(REG)(6:7),UPYRCD(YEAR),':!NERC:')
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CPP2,18')
                              END IF
                           END IF
                        END DO
                     END IF
                  END IF
               END DO
            END IF
         END DO
      END IF

!     ACCOUNT FOR INCREMENTAL END-USE RENEWABLE GENERATION, IF APPROPRIATE
!     EMM  REGION
      IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,UNXPH) .GT. 0.0 .AND. CO2_ENDCG .GT. 0)THEN
         DO REG = 1 , UNRGNS
!       YEAR = 1
!     write(6,4445) curiyr+1989,reg,CO2_NRYR(reg,year),  &
!                                   ((CGTOTGENNR(REG,CURIYR + YEAR - 1,5,1) + CGTOTGENNR(REG,CURIYR + YEAR - 1,5,2)) -  &
!                                   (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,5,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,5,2))),  &
!                                   ((CGTOTGENNR(REG,CURIYR + YEAR - 1,6,1) + CGTOTGENNR(REG,CURIYR + YEAR - 1,6,2)) -  &
!                                   (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,6,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,6,2))),  &
!                                   ((CGTOTGENNR(REG,CURIYR + YEAR - 1,10,1) + CGTOTGENNR(REG,CURIYR + YEAR - 1,10,2)) -  &
!                                   (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,10,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,10,2))),  &
!                                   ((CGTOTGENNR(REG,CURIYR + YEAR - 1,12,1) + CGTOTGENNR(REG,CURIYR + YEAR - 1,12,2)) -  &
!                                   (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,12,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,12,2)))
!4445 format(1h ,'!endecp',i4,i3,f10.1,4f10.1)
            DO YEAR = 1 , UNXPH
               IF (CO2_NRYR(REG,YEAR) .GT. 0.0)THEN
                  VALUE = DBLE(0.0)
                  IF (YEAR .LT. UNXPH)THEN
!                    HYDRO
                     IF (CO2_INCSW(WIHY) .GT. 0.0)VALUE = VALUE + MAX(0.0,DBLE((CGTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR),5,1) + CGTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR),5,2)) -  &
                                                  (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,5,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,5,2))))
!                    GEOTHERMAL
                     IF (CO2_INCSW(WIGT) .GT. 0.0)VALUE = VALUE + MAX(0.0,DBLE((CGTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR),6,1) + CGTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR),6,2)) -  &
                                                  (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,6,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,6,2))))
!                    SOLAR
                     IF (CO2_INCSW(WIPV) .GT. 0.0)VALUE = VALUE + MAX(0.0,DBLE((CGTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR),10,1) + CGTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR),10,2)) -  &
                                                  (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,10,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,10,2))))
!                    WIND
                     IF (CO2_INCSW(WIWN) .GT. 0.0)VALUE = VALUE + MAX(0.0,DBLE((CGTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR),12,1) + CGTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR),12,2)) -  &
                                                  (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,12,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,12,2))))
                  ELSE
                     DO IYR = 1 , UNFPH - UNXPH +  1
                        M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                        KW(IYR) = 1.0
                        CRL(IYR) = 0.0
!                       HYDRO
                        IF (CO2_INCSW(WIHY) .GT. 0.0)CRL(IYR) = CRL(IYR) + MAX(0.0,DBLE((CGTOTGENNR(REG,M2YR,5,1) + CGTOTGENNR(REG,M2YR,5,2)) -  &
                                                     (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,5,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,5,2))))
!                       GEOTHERMAL
                        IF (CO2_INCSW(WIGT) .GT. 0.0)CRL(IYR) = CRL(IYR) + MAX(0.0,DBLE((CGTOTGENNR(REG,M2YR,6,1) + CGTOTGENNR(REG,M2YR,6,2)) -  &
                                                     (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,6,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,6,2))))
!                       SOLAR
                        IF (CO2_INCSW(WIPV) .GT. 0.0)CRL(IYR) = CRL(IYR) + MAX(0.0,DBLE((CGTOTGENNR(REG,M2YR,10,1) + CGTOTGENNR(REG,M2YR,10,2)) -  &
                                                     (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,10,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,10,2))))
!                       WIND
                        IF (CO2_INCSW(WIWN) .GT. 0.0)CRL(IYR) = CRL(IYR) + MAX(0.0,DBLE((CGTOTGENNR(REG,M2YR,12,1) + CGTOTGENNR(REG,M2YR,12,2)) -  &
                                                     (CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,12,1) + CGTOTGENNR(REG,CO2_AFFYR - UHBSYR,12,2))))
                     END DO
                     DSCRT = AVGDCR
                     PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                     VALUE = PV_CRL / PV_KW
                  END IF
                  VALUE = VALUE * 0.001
!     if (curitr .gt. 1)write(6,3333) curiyr+1989,reg,value
!3333 format(1h ,'!eucog',i4,i3,f12.3)
                  IF (VALUE .GT. DBLE(0.0)) THEN
                     COLUMN = 'I' // UPRGCD(REG) // 'EU' // 'COG' // UPYRCD(YEAR); call makmsk(COLUMN_mask,':I:' , UPRGCD(REG) , 'EU', ':COG:', UPYRCD(YEAR)) 
                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CPP2,19')
!                    IF ERC TRADING, PUT INTO SUPPLY CURVE ROW
!                    IF (CO2_ERCSW .EQ. 1 .AND. CO2_ERCNR(REG) .EQ. 2 .AND. CO2_STDTN(REG) .EQ. 1)THEN
!                       ROW_ERC = 'L' // URGNME(REG)(6:7) // 'ERCN' // UPYRCD(YEAR); call makmsk(ROW_ERC_mask,':L:',URGNME(REG)(6:7),':ERCN:',UPYRCD(YEAR))
!                       CALL CVAL(COLUMN,ROW_ERC,DBLE(-1.0),COLUMN_mask,ROW_ERC_mask,'EP$CPP2,20')
!                    ELSE
                        VALUE = DBLE(0.0 - CO2_NRYR(REG,YEAR))
                        VALUE = VALUE * DBLE(0.001)
                        ROW = 'ERCO2'//URGNME(REG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(REG)(6:7),UPYRCD(YEAR),':!NERC:')
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CPP2,21')
!                    END IF
                  END IF
               END IF
            END DO
         END DO
      END IF

!     CREATE COLUMN FOR PLANNED NUC GENERATION
!     EMM  REGIONS
      IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,UNXPH) .GT. 0.0)THEN
         DO YEAR = 1 , UNXPH
            IF (CO2_NRYR(1,YEAR) .GT. DBLE(0.0))THEN
               DO REG = 1 , UNRGNS
                  IF (CO2_STDTN(REG) .LT. 2 .AND. NUCPLNN(REG,CURIYR + YEAR - 1) .GT. 0.0)THEN
                     COLUMN = 'G'//UPRGCD(REG)//'NU'//'PLN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(REG),':NUPLN:',UPYRCD(YEAR))
                     VALUE = DBLE(0.0 - CO2_NRYR(REG,YEAR))
                     VALUE = VALUE * DBLE(0.001)
                     ROW = 'ERCO2'//URGNME(REG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(REG)(6:7),UPYRCD(YEAR),':!NERC:')
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CPP2,24')
                     IF (YEAR .LT. UNXPH)THEN
                        VALUE = DBLE(NUCPLNN(REG,MIN(CURIYR + YEAR - 1,UNYEAR)))
                     ELSE
                        DO IYR = 1 , UNFPH - UNXPH +  1
                           M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                           KW(IYR) = 1.0
                           CRL(IYR) = NUCPLNN(REG,M2YR)
                        END DO
                        DSCRT = AVGDCR
                        PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                        PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                        VALUE = PV_CRL / PV_KW
                     END IF
                     VALUE = MAX(VALUE,DBLE(0.0))
                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CPP2,25')
!     write(6,3233) curiyr+1989,column,value
!3233 format(1h ,'!effecp',i4,a10,f10.1)
                  END IF
               END DO
            END IF
         END DO
      END IF

!     CREATE COLUMN FOR EE SAVINGS, IF APPROPRIATE
!     EMM  REGIONS
      IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,UNXPH) .GT. 0.0)THEN
         IF (CO2_EFFSW .GT. 0)THEN
            DO YEAR = 1 , UNXPH
               IF (CO2_NRYR(1,YEAR) .GT. DBLE(0.0))THEN
                  DO REG = 1 , UNRGNS
                     IF (CO2_STDTN(REG) .LT. 2)THEN
                        COLUMN = 'G'//UPRGCD(REG)//'EE'//'SNR'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(REG),':EESNR:',UPYRCD(YEAR))
!                       IF ERC TRADING, PUT INTO SUPPLY CURVE ROW
                        IF (CO2_ERCSW .EQ. 1 .AND. CO2_ERCNR(REG) .EQ. 2)THEN
                           ROW_ERC = 'L' // URGNME(REG)(6:7) // 'ERCN' // UPYRCD(YEAR); call makmsk(ROW_ERC_mask,':L:',URGNME(REG)(6:7),':ERCN:',UPYRCD(YEAR))
                           CALL CVAL(COLUMN,ROW_ERC,DBLE(-1.0),COLUMN_mask,ROW_ERC_mask,'EP$CPP2,29')
                        ELSE
                           VALUE = DBLE(0.0 - CO2_NRYR(REG,YEAR))
                           VALUE = VALUE * DBLE(0.001)
                           ROW = 'ERCO2'//URGNME(REG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(REG)(6:7),UPYRCD(YEAR),':!NERC:')
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CPP2,30')
                        END IF
                        IF (YEAR .LT. UNXPH)THEN
                           VALUE = DBLE(EGENNREE(REG,MIN(CURIYR + YEAR - 1,UNYEAR)))
                        ELSE
                           DO IYR = 1 , UNFPH - UNXPH +  1
                              M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                              KW(IYR) = 1.0
                              CRL(IYR) = EGENNREE(REG,M2YR)
                           END DO
                           DSCRT = AVGDCR
                           PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                           PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                           VALUE = PV_CRL / PV_KW
                        END IF
                        VALUE = MAX(VALUE,DBLE(0.0))
                        CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CPP2,31')
!     write(6,3233) curiyr+1989,column,value
!3233 format(1h ,'!effecp',i4,a10,f10.1)
                     END IF
                  END DO
               END IF
            END DO
         END IF
      END IF

!     CREATE COLUMN TO ACCOUNT FOR CO2 FROM MUST-RUNS
!     EMM  REGIONS
      IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,UNXPH) .GT. 0.0)THEN
         DO YEAR = 1 , UNXPH
            IF (CO2_NRYR(1,YEAR) .GT. DBLE(0.0))THEN
               DO FRG = 1 , UNRGNS
                  IF (MRGENN(FRG,CURIYR + YEAR - 1) .GT. 0.0)THEN
                     COLUMN = 'G'//UPRGCD(FRG)//'MR'//'CO2'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(FRG),':MRCO2:',UPYRCD(YEAR))
                     IF (CO2_STDTN(FRG) .LT. 2)THEN
                        ROW = 'ERCO2'//URGNME(FRG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(FRG)(6:7),UPYRCD(YEAR),':!NERC:')
                     ELSE
                        ROW = 'EQCO2'//URGNME(FRG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':EQCO2:',URGNME(FRG)(6:7),UPYRCD(YEAR),':!NERC:')
                     END IF
                     IF (YEAR .LT. UNXPH)THEN
                        VALUE = DBLE(MRGENN(FRG,CURIYR + YEAR - 1))
                        IF (CO2_STDTN(FRG) .LT. 2)THEN
                           VALEM = DBLE(MRCO2N(FRG,CURIYR + YEAR - 1) - CO2_NRYR(FRG,YEAR))
                        ELSE
                           VALEM = DBLE(MRCO2N(FRG,CURIYR + YEAR - 1))
                        END IF
                     ELSE
                        DO IYR = 1 , UNFPH - UNXPH +  1
                           M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                           KW(IYR) = 1.0
                           CRL(IYR) = DBLE(MRGENN(FRG,M2YR))
                           IF (CO2_STDTN(FRG) .LT. 2)THEN
                              EMS(IYR) = DBLE(MRCO2N(FRG,M2YR) - CO2_NRYR(FRG,YEAR))
                           ELSE
                              EMS(IYR) = DBLE(MRCO2N(FRG,M2YR))
                           END IF
                        END DO
                        DSCRT = AVGDCR
                        PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                        PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                        VALUE = PV_CRL / PV_KW
                        PV_EMS = PVV(EMS,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                        VALEM = PV_EMS / PV_KW
                     END IF
                     VALEM = VALEM * DBLE(0.001)
                     CALL CVAL(COLUMN,ROW,VALEM,COLUMN_mask,ROW_mask,'EP$CPP2,34')
                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$CPP2,35')
!     write(6,3233) curiyr+1989,curiyr+1989+year-1,column,row,value,valem,mrgenn(frg,curiyr+year-1),mrco2n(frg,curiyr+year-1),co2_nryr(frg,year)
!3233 format(1h ,'!mrco2e',i4,i5,2a10,5f10.3)
                  END IF
               END DO
            END IF
         END DO
      END IF

!     CREATE ROW/COLUMN FOR SET-ASIDES FOR MASS-BASED EXISTING STANDARD, IF IMPLEMENTED
      IF (CO2_STDSW .GT. 0 .AND. CO2_STDQT .EQ. 2 .AND. CO2_STDSA .GT. 0)THEN
         DO IRG = 1 , UNRGNS
            IF (CO2_STDTN(IRG) .EQ. 2)THEN
               DO YEAR = UPPLYR(WIWN) + 1 , UNXPH
                  IF ((CURIYR + UHBSYR + YEAR - 1) .GE. CO2_STDY1)THEN
                     IF (YEAR .LT. UNXPH)THEN
                        VALUE = DBLE(CPPALLOW(MIN(CURIYR + YEAR - 1,MNUMYR)))
                        VALSA= DBLE(CO2_PCTSA * CO2_STDQN(IRG,CURIYR + YEAR - 1))
!                       if (irg .eq. 1)write(6,3344) curiyr+1989,curiyr+1989+year-1,CO2_PCTSA , CO2_STDQN(IRG,CURIYR + YEAR - 1) , CPPALLOW(MIN(CURIYR + YEAR - 1,MNUMYR)),value,valsa
!3344                   format(1h ,'!111sa',i4,i5,6f10.2)
                     ELSE
                        DO IYR = 1 , UNFPH - UNXPH +  1
                           M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                           KW(IYR) = 1.0
                           CRL(IYR) = DBLE(CPPALLOW(M2YR))
                           EMS(IYR) = DBLE(CO2_STDQN(IRG,M2YR))
                        END DO
                        DSCRT = AVGDCR
                        PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                        PV_CRL = PVV(CRL,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT) / PV_KW
                        PV_EMS = PVV(EMS,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT) / PV_KW
                        VALUE = PV_CRL 
                        VALSA = DBLE(CO2_PCTSA) * PV_EMS
                     END IF
                     IF (VALUE .GT. DBLE(0.0) .AND. VALSA .GT. DBLE(0.0))THEN
                        ROW = 'L' // UPRGCD(IRG) // 'SA' // 'XXX' // UPYRCD(YEAR); call makmsk(ROW_mask,':L:' , UPRGCD(IRG) , 'SA', ':XXX:', UPYRCD(YEAR)) 
                        CALL CROWTYPE(ROW,'L       ',ROW_mask)
                        CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$CPP2,36')
                        COLUMN = 'Q' // UPRGCD(IRG) // 'SA' // 'XXX' // UPYRCD(YEAR); call makmsk(COLUMN_mask,':Q:' , UPRGCD(IRG) , 'SA', ':XXX:', UPYRCD(YEAR)) 
                        CALL CVAL(COLUMN,UPOBJ,DBLE(0.0001),COLUMN_mask,UPOBJ,'EP$CPP2,37')
                        CALL CVAL(COLUMN,ROW,-VALUE,COLUMN_mask,ROW_mask,'EP$CPP2,38')
                        CALL CBND(UPBND,COLUMN,DBLE(0.0),VALSA,COLUMN_mask,'EP$CPP2,39')
!                    END IF
                     END IF
                  END IF
               END DO
            END IF
         END DO
      END IF

      RETURN
      END
!
!     EP$GRD SETS UP THE GRID RESILIENCE ROWS
!
      SUBROUTINE EP$GRD
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'uefdout'
!
      REAL*8 GRD(ECP_D_FPH),KW(ECP_D_FPH),PV_KW,PVV,DSCRT,PV_GRD,VALUE
      REAL*8 CAP(ECP_D_FPH),GEN(ECP_D_FPH),PV_CAP,PV_GEN
      INTEGER*4 YEAR,IYR,M2YR,REG
      CHARACTER*16 ROW,COLUMN

      ecpsub='EP$GRD'

      DO YEAR = 1 , UNXPH
!
!        GRID RESILIENCE TARGETS
!
         DO REG = 1 , UNRGNS
            GRD_NRYR(REG,YEAR) = 0.0
            ROW = 'GRGRD'//URGNME(REG)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':GRGRD:',URGNME(REG)(6:7),UPYRCD(YEAR))
            CALL CROWTYPE(ROW,'G       ',ROW_mask)
            IF (USW_GRD .GT. 0 .AND. (GRD_TGTS(MIN(CURIYR + YEAR - 1,UNYEAR),REG) .GT. 0.0))THEN
               IF (YEAR .LT. UNXPH)THEN
                  GRD_NRYR(REG,YEAR) = GRD_TGTS(MIN(CURIYR + YEAR - 1,UNYEAR),REG)
!                    IF (REG .EQ. 1)write(6,3422) curiyr+1989,curiyr+1989+year-1,year,GRD_NRYR(REG,YEAR)
               ELSE
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     GRD(IYR) = GRD_TGTS(M2YR,REG)
!                    IF (REG .EQ. 1)write(6,3422) curiyr+1989,curiyr+1989+unxph+iyr-1,m2yr,GRD(IYR)
!3422 format(1h ,'!grdyr',i4,i5,i5,2f10.1)
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_GRD = PVV(GRD,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  GRD_NRYR(REG,YEAR) = PV_GRD / PV_KW
!                 IF (REG .EQ. 1)write(6,3423) curiyr+1989,curiyr+1989+year-1,year,pv_grd,pv_kw,GRD_NRYR(REG,YEAR)
!3423 format(1h ,'!grdyr',i4,i5,i5,5x,5f10.1)
               END IF
            END IF
!
!           SUBTRACT OUT END-USE PV
!
            IF (DPVDISPATCH .EQ. .TRUE. ) THEN
               IF (YEAR .LT. UNXPH)THEN
                  PV_CAP = DBLE(DPVTOTCAPNR(REG,MIN(CURIYR + YEAR - 1,UNYEAR)) * 0.001)
                  PV_GEN = DBLE(DPVTOTGENNR(REG,MIN(CURIYR + YEAR - 1,UNYEAR)) * 0.001)
               ELSE
                  DO IYR = 1 , UNFPH - UNXPH +  1
                     M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
                     KW(IYR) = 1.0
                     CAP(IYR) = DBLE(DPVTOTCAPNR(REG,M2YR) * 0.001)
                     GEN(IYR) = DBLE(DPVTOTGENNR(REG,M2YR) * 0.001)
!                    IF (REG .EQ. 1)write(6,3422) curiyr+1989,curiyr+1989+unxph+iyr-1,m2yr,GRD(IYR)
!3422 format(1h ,'!grdyr',i4,i5,i5,2f10.1)
                  END DO
                  DSCRT = AVGDCR
                  PV_KW = PVV(KW,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT)
                  PV_CAP = PVV(CAP,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT) / PV_KW
                  PV_GEN = PVV(GEN,ECP_D_FPH,UNFPH-UNXPH+1,DSCRT) / PV_KW
!     write(6,4444) curiyr+1989,curiyr+1989+2,reg,pv_cap,pv_gen
!4444 format(1h ,'!dgpv3',i4,i5,i3,2f10.3)
               END IF
               IF (GRD_RATS(WIPV,REG) .GE. 0.0)THEN
                  COLUMN = 'DPVCP' // URGNME(REG)(6:7) // UPYRCD(YEAR); call makmsk(COLUMN_mask,':DPVCP:' , URGNME(REG)(6:7) , UPYRCD(YEAR))
                  CALL CBND(UPBND,COLUMN,PV_CAP,PV_CAP,COLUMN_mask,'EP$GRD,1')
                  IF (PV_CAP .GT. DBLE(0.0))THEN
                     VALUE = -1.0 * (PV_GEN / PV_CAP) * (GRD_RATS(WIPV,REG) - GRD_NRYR(REG,YEAR))
                  ELSE
                     VALUE = DBLE(-1.0)
                  END IF
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$GRD,2')
               END IF
            END IF
         END DO
      END DO

      RETURN
      END

!     EP$ETT REVISES RHS OF INTER-REGIONAL TRANSMISSION CONSTRAINTS
!
      SUBROUTINE EP$ETT
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'dispett'
      include 'postpr'
      include 'wrenew'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'
      include 'uefdout'
!
      INTEGER JSP
      REAL*8 VALUE,GW(ECP_D_FPH),XVALUE(ECP_D_MSP),MVALUE(ECP_D_MSP),TST
      REAL*8 LVALUE,UVALUE,PVALUE(MNUMNR,ECP_D_MSP)
      INTEGER*4 PROVNDX(ECP$CS2),UNQPAT(ECP$CS2,ECP$CS3),CRG
      INTEGER*4 NUMBER,PRJ,IRG,JYR,FRST,NEXT,LAST,OLYRF
      INTEGER*4 YEAR,NERC,IYR,VLS,MORE,OLYR,IFPH2
      INTEGER*4 MRG,CAR
      INTEGER*4 IGRP,ISEG,X,IRGN,nercrg,KYR,STEP,EXRG,MYR,XYR,TRAN_LEAD_TIME
      REAL*8 DIGITS2,CRF,TRUNC,OBJVAL,PWF,PVV,XIR,VOM(ECP_D_FPH),VOMCST,BLDCST
      REAL*8 CAPACITY_DERATE
      CHARACTER*16 ROW,COLUMN, ROW_T, COLUMN_BLD, ROWCAR, ROW_SR, COLUMN_MIN_SR
      CHARACTER*2 PRJCD(ECP$CS2)
      CHARACTER*1 CISCD(ECP$CS2)

      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN, RPS_RGN_X
!
      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)

!     USE SEPARATE CO2 FACTORS FOR TRADE WITH AZNM (1) AND NWPP (2)

      ecpsub='EP$ETT'

      DO RPS_RGN = 1 , MNUMNR
         MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
      END DO

      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN          
         MAP_NERC_TO_RPS_RGN(8) = 9                 
      END IF

!     ASSIGN PROJECT CODES
!
      PRJCD(1)  = '01'
      PRJCD(2)  = '02'
      PRJCD(3)  = '03'
      PRJCD(4)  = '04'
      PRJCD(5)  = '05'
      PRJCD(6)  = '06'
      PRJCD(7)  = '07'
      PRJCD(8)  = '08'
      PRJCD(9)  = '09'
      PRJCD(10) = '10'
      PRJCD(11) = '11'
      PRJCD(12) = '12'
      PRJCD(13) = '13'
      PRJCD(14) = '14'
      PRJCD(15) = '15'
      PRJCD(16) = '16'
      PRJCD(17) = '17'
      PRJCD(18) = '18'
      PRJCD(19) = '19'
      PRJCD(20) = '20'
      PRJCD(21) = '21'
      PRJCD(22) = '22'
      PRJCD(23) = '23'
      PRJCD(24) = '24'
      PRJCD(25) = '25'
      PRJCD(26) = '26'
      PRJCD(27) = '27'
      PRJCD(28) = '28'
      PRJCD(29) = '29'
      PRJCD(30) = '30'
      PRJCD(31) = '31'
      PRJCD(32) = '32'
      PRJCD(33) = '33'
      PRJCD(34) = '34'
      PRJCD(35) = '35'
      PRJCD(36) = '36'
      PRJCD(37) = '37'
      PRJCD(38) = '38'
      PRJCD(39) = '39'
      PRJCD(40) = '40'
      PRJCD(41) = '41'
      PRJCD(42) = '42'
      PRJCD(43) = '43'
      PRJCD(44) = '44'
      PRJCD(45) = '45'
      PRJCD(46) = '46'
      PRJCD(47) = '47'
      PRJCD(48) = '48'
      PRJCD(49) = '49'
      PRJCD(50) = '50'
      PRJCD(51) = '51'
      PRJCD(52) = '52'
      PRJCD(53) = '53'
      PRJCD(54) = '54'
      PRJCD(55) = '55'
      PRJCD(56) = '56'
      PRJCD(57) = '57'
      PRJCD(58) = '58'
      PRJCD(59) = '59'
      PRJCD(60) = '60'
      PRJCD(61) = '61'
      PRJCD(62) = '62'
      PRJCD(63) = '63'
      PRJCD(64) = '64'
      PRJCD(65) = '65'
      PRJCD(66) = '66'
      PRJCD(67) = '67'
      PRJCD(68) = '68'
      PRJCD(69) = '69'
      PRJCD(70) = '70'
      PRJCD(71) = '71'
      PRJCD(72) = '72'
      PRJCD(73) = '73'
      PRJCD(74) = '74'
      PRJCD(75) = '75'
      PRJCD(76) = '76'
      PRJCD(77) = '77'
      PRJCD(78) = '78'
      PRJCD(79) = '79'
      PRJCD(80) = '80'
      PRJCD(81) = '81'
      PRJCD(82) = '82'
      PRJCD(83) = '83'
      PRJCD(84) = '84'
      PRJCD(85) = '85'
      PRJCD(86) = '86'
      PRJCD(87) = '87'
      PRJCD(88) = '88'
      PRJCD(89) = '89'
      PRJCD(90) = '90'
      PRJCD(91) = '91'
      PRJCD(92) = '92'
      PRJCD(93) = '93'
      PRJCD(94) = '94'
      PRJCD(95) = '95'
      PRJCD(96) = '96'
      PRJCD(97) = '97'
      PRJCD(98) = '98'
      PRJCD(99) = '99'
      PRJCD(100) = 'AA'
!
!     ASSIGN PROVINCE CODES
!
!     CISCD(1)  = 'D'
!     CISCD(2)  = 'E'
!     CISCD(3)  = 'F'
!     CISCD(4)  = 'G'
!     CISCD(5)  = 'H'
!     CISCD(6)  = 'I'
!     CISCD(7)  = 'J'
!     CISCD(8)  = 'K'
!     CISCD(9)  = 'L'
!     CISCD(10) = 'M'
!     CISCD(11) = 'N'
!     CISCD(12) = 'O'
!     CISCD(13) = 'P'
!     CISCD(14) = 'Q'
!     CISCD(15) = 'R'
!     CISCD(16) = 'S'
!     CISCD(17) = 'T'
!
!     FILL GW ARRAY
!
      IF ( USW_CANACC .GT. 0 ) THEN                          ! if allowing acceleration of canadian projects

      DO YEAR = 1 , UNFPH
         GW(YEAR) = DBLE(1.0)
      END DO
!
!     NEW CANADIAN PROJECT INFO STORED IN FIRST YEAR EIJ DAF
!
      CALL GETEIJ(1)
!
!     FIND UNIQUE IMPORT REGION PAIRS (I.E. PROVINCES)
!
      DO IRG = 1, ECP$CS3
         DO PRJ = 1 , ECP$CS2
            UNQPAT(PRJ,IRG) = 0
         END DO
      END DO
      NUMBER = 1
      PRJ = 1
      DO IRG = 1 , UCI$RGN(PRJ)
         UNQPAT(1,IRG) = UCI$RGS(PRJ,IRG)
      END DO
      PROVNDX(PRJ) = 1
      PRJ = 2
      DO WHILE (UCI$CAP(PRJ) .GT. 0.0 .AND. PRJ .LT. ECP$CS2)
         LAST = 0
         NEXT = 1
         DO WHILE (LAST .EQ. 0 .AND. NEXT .LE. NUMBER)
            VLS = 0
            DO FRST = 1, ECP$CS3
               IF (FRST .LE. UCI$RGN(PRJ)) THEN
                  IRG = UCI$RGS(PRJ,FRST)
               ELSE
                  IRG = 0
               END IF
               IF (IRG .EQ. UNQPAT(NEXT,FRST)) VLS = VLS + 1
            END DO
            IF (VLS .EQ. ECP$CS3) LAST = NEXT
            NEXT = NEXT + 1
         END DO
         IF (LAST .EQ. 0) THEN
            NUMBER = NUMBER + 1
            LAST = NUMBER
            DO IRG = 1 , UCI$RGN(PRJ)
               UNQPAT(NUMBER,IRG) = UCI$RGS(PRJ,IRG)
            END DO
         END IF
         PROVNDX(PRJ) = LAST
         PRJ = PRJ + 1
      END DO
      WRITE(18,*) ' NUMBER OF CANADIAN PROVINCES ',NUMBER
!
!     FIRST TIME THROUGH SET UP CANADIAN IMPORT STRUCTURE
!
      PRJ = 1
      DO WHILE (UCI$CAP(PRJ) .GT. 0.0 .AND. PRJ .LT. ECP$CS2)
!
!        DUMP THE DATA
!
         WRITE(18,9371) PRJ,PROVNDX(PRJ),LEAD(PRJ),MODYR(PRJ),PROJYR(PRJ),UCI$CAP(PRJ),UCI$MWH(PRJ),UCI$CFC(PRJ),UCI$RGN(PRJ)
 9371    FORMAT(1X,'IMPORT DATA ',5I5,3F9.3,I5)
!
!        MAKE SURE THAT THE MODEL YEAR IS INITIALLY EQUAL TO THE
!        PROJECT YEAR
!
         MODYR(PRJ) = PROJYR(PRJ)
!
!        CREATE VECTORS FOR COMMITTED CANADIAN PROJECTS
!
         DO YEAR = 1 , UNXPH
            IRG = PROVNDX(PRJ)
            CISCD(IRG) = CHAR(IRG+64+MNUMNR-10)
            OLYRF = YEAR + CURIYR - 1 + UHBSYR
            OLYR = YEAR + CURIYR - 1
            COLUMN = 'E'//CISCD(IRG)//'IMU'//PRJCD(PRJ)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',CISCD(IRG),':IMU:',PRJCD(PRJ),UPYRCD(YEAR))
!
            ROW = UPOBJ ; ROW_mask=UPOBJ
            VALUE = DBLE(0.001)
              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,1')
!
            IF ( OLYRF .GE. MODYR(PRJ) .AND. OLYRF .LT. PROJYR(PRJ)) THEN
               UVALUE = DBLE(UCI$CAP(PRJ) * 0.001)
               IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
               IF (UVALUE .GT. -ECP_MIN .AND. UVALUE .LT. ECP_MIN) UVALUE = ECP_MIN
            ELSE
               UVALUE = ECP_MIN
            END IF
            LVALUE = UVALUE
              CALL CBND(UPBND,COLUMN,LVALUE,UVALUE,COLUMN_mask,'EP$ETT,2')
!
            ROW = 'C'//CISCD(IRG)//'IMDDD'//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',CISCD(IRG),':IMDDD:',UPYRCD(YEAR))
            VALUE = DBLE(0.0) - DBLE( UCI$CFC(PRJ) )
            IF (YEAR .EQ. UNXPH) THEN
               MORE = PROJYR(PRJ) - UHBSYR - CURIYR + UNXPH - 1
               MORE = MIN ( MORE , UNFPH )
               XIR = DBLE(EPDSCRT)
               IF (MORE .GT. 0) THEN
                  VALUE = PVV(GW,ECP_D_FPH,MORE,XIR) / PVV(GW,ECP_D_FPH,UNFPH,XIR) * VALUE
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
               ELSE
                  VALUE = ECP_MIN
               END IF
            END IF
            VALUE = TRUNC( VALUE , 2)
              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,3')
         END DO                                                      ! YEAR
!
!        CREATE BOUND ROW TO LIMIT CANADIAN PROJECTS ACCELERATION
!
         IRG = PROVNDX(PRJ)
         OLYRF = LEAD(PRJ) + CURIYR - 1 + UHBSYR
         ROW = 'L'//CISCD(IRG)//'IMX'//PRJCD(PRJ)//'1'; call makmsk(ROW_mask,':L:',CISCD(IRG),':IMX:',PRJCD(PRJ),':1:')
         IF ( OLYRF .LT. MODYR(PRJ)) THEN
            UVALUE = DBLE(UCI$CAP(PRJ) * 0.001)
            IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
            IF (UVALUE .GT. -ECP_MIN .AND. UVALUE .LT. ECP_MIN) UVALUE = ECP_MIN
         ELSE
            UVALUE = ECP_MIN
         END IF
         CALL CROWTYPE(ROW,'L       ',ROW_mask)
           CALL CRHS(UPRHS,ROW,UVALUE,ROW_mask,'EP$ETT,4')
!
!        CREATE VECTORS TO ACCELERATE CANADIAN PROJECTS
!
         DO YEAR = 1 , UNXPH - LEAD(PRJ) + 1
            IRG = PROVNDX(PRJ)
            OLYRF = YEAR + LEAD(PRJ) + CURIYR - 2 + UHBSYR
            OLYR = YEAR + LEAD(PRJ) + CURIYR - 2
            COLUMN = 'B'//CISCD(IRG)//'IMU'//PRJCD(PRJ)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',CISCD(IRG),':IMU:',PRJCD(PRJ),UPYRCD(YEAR))
!
            ROW = UPOBJ ; ROW_mask=UPOBJ
            VALUE = DBLE(UCI$MWH(PRJ)) * UCI$CFC(PRJ) * &
                UPGNPD(OLYR) * DBLE(8.760)
            MORE = MIN( (PROJYR(PRJ) - OLYRF) , UNFPH)
            IF (MORE .GT. 0 .AND. (OLYRF - LEAD(PRJ)) .GE. ECP_FYR) THEN
               UVALUE = DBLE(UCI$CAP(PRJ)) * DBLE(0.001)
               LVALUE = DBLE(0.0)
                 CALL CBND(UPBND,COLUMN,LVALUE,UVALUE,COLUMN_mask,'EP$ETT,5')
               JYR = YEAR + LEAD(PRJ) - 1
               VALUE = VALUE / CRF(DBLE(EPDSCRT) , MORE)
               VALUE = VALUE * PWF(DBLE(EPDSCRT) , JYR)
               IF (USW_DIGIT .GT. 0)THEN
               OBJVAL = DIGITS2( VALUE , DIGITS_PARM)
               ELSE
                  OBJVAL = VALUE
               END IF
                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,6')
            ELSE
               UVALUE = DBLE(0.0)
               LVALUE = UVALUE
                 CALL CBND(UPBND,COLUMN,LVALUE,UVALUE,COLUMN_mask,'EP$ETT,7')
               VALUE = DBLE(0.001)
               IF (USW_DIGIT .GT. 0)THEN
               OBJVAL = DIGITS2( VALUE , DIGITS_PARM)
               ELSE
                  OBJVAL = VALUE
               END IF
                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,8')
            END IF
!
!           put in overbuild constraint
!
            do IRGN = 1, UCI$RGN(PRJ)
               nercrg = UNQPAT(PROVNDX(PRJ),IRGN)
               IF (UPOVBDSW .GT. 0 .AND. UPOVBDSW .LE. 2)THEN
                  ROW = 'R'//UPRGCD(nercrg)//'YYYYY'//UPYRCD(OLYR-CURIYR); call makmsk(ROW_mask,':R:',UPRGCD(nercrg),':YYYYY:',UPYRCD(OLYR-CURIYR))
               ELSE
                  ROW = 'R'//'U'//'YYYYY'//UPYRCD(OLYR-CURIYR); call makmsk(ROW_mask,':R:',':U:',':YYYYY:',UPYRCD(OLYR-CURIYR))
               END IF
               VALUE = DBLE(1.00)
                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,9')
            enddo
!
            ROW = 'L'//CISCD(IRG)//'IMX'//PRJCD(PRJ)//'1'; call makmsk(ROW_mask,':L:',CISCD(IRG),':IMX:',PRJCD(PRJ),':1:')
            VALUE = DBLE(1.0)
              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,10')
!
            DO JYR = LEAD(PRJ) + YEAR - 1 , UNXPH
               ROW = 'C'//CISCD(IRG)//'IMDDD'//UPYRCD(JYR); call makmsk(ROW_mask,':C:',CISCD(IRG),':IMDDD:',UPYRCD(JYR))
               VALUE = DBLE(0.0) - DBLE( UCI$CFC(PRJ) )
               VALUE = TRUNC( VALUE , 2)
               IF (JYR .EQ. UNXPH) THEN
                  MORE = (PROJYR(PRJ) - UHBSYR) - (CURIYR + UNXPH - 1)
                  MORE = MIN ( MORE , UNFPH )
                  XIR = DBLE(EPDSCRT)
                  IF (MORE .GT. 0) THEN
                     VALUE = PVV(GW,ECP_D_FPH,MORE,XIR) / PVV(GW,ECP_D_FPH,UNFPH,XIR) * VALUE
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                  ELSE
                     VALUE = ECP_MIN
                  END IF
               ELSE
                  MORE = CURIYR + JYR - 1 + UHBSYR
                  IF (MORE .GE. PROJYR(PRJ)) THEN
                     VALUE = ECP_MIN
                  END IF
               END IF
                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,11')
            END DO                                                    ! JYR
         END DO                                                      ! YEAR
         PRJ = PRJ + 1
      END DO                                            ! PRJ (DO WHILE)
!
!     CANADIAN IMPORT OPERATE VECTORS
!
      DO PRJ = 1 , NUMBER
         CISCD(PRJ) = CHAR(PRJ+64+MNUMNR-10)
         DO YEAR = 1 , UNXPH
            ROW = 'C'//CISCD(PRJ)//'IMDDD'//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',CISCD(PRJ),':IMDDD:',UPYRCD(YEAR))
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
              CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$ETT,12')
            IRG = 1
            NERC = UNQPAT(PRJ,IRG)
            DO WHILE (NERC .GT. 0 .AND. IRG .LE. ECP$CS3)
               COLUMN = 'O'//UPRGCD(NERC)//'IM'//CISCD(PRJ)//'X1'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':O:',UPRGCD(NERC),':IM:',CISCD(PRJ),':X1:',UPYRCD(YEAR))

               IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                  COLUMN_MIN_SR = 'O'//UPRGCD(NERC)//'IM'//CISCD(PRJ)//'X2'//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_mask,':O:',UPRGCD(NERC),':IM:',CISCD(PRJ),':X2:',UPYRCD(YEAR))
               END IF

               ROW = 'C'//CISCD(PRJ)//'IMDDD'//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',CISCD(PRJ),':IMDDD:',UPYRCD(YEAR))
               VALUE = DBLE(1.0)
                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,13')

               IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                    CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,14')
               END IF

               ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
               VALUE = DBLE(1.0)
                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,15')

               IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                    CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,16')
               END IF

               DO IGRP = 1 , EPNGRP
                  DO ISEG = 1 , EPNSPG(IGRP)
                     VLS = EPLMAP(IGRP,ISEG,YEAR)
                     JSP = EPGECP(IGRP)
                     ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2
                     VALUE = DBLE(1.0)
                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,17')

                     IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                        VALUE = DBLE(1.0 - SR_TRAN_CREDIT)
                          CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,18')
                        ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                        VALUE = DBLE(SR_TRAN_CREDIT)
                          CALL CVAL(COLUMN_MIN_SR,ROW_SR,VALUE,COLUMN_MIN_SR_mask,ROW_SR_mask,'EP$ETT,19')
                     END IF

                  END DO                                              ! ISEG
               END DO                                                 ! IGRP
               IRG = IRG + 1
               NERC = UNQPAT(PRJ,IRG)
            END DO                                                    ! IRG
         END DO                                                      ! YEAR
      END DO                                                       ! PRJ
      ENDIF                                 ! end if allowing acceleration of canadian projects
!
!     REVISE RHS OF ELECTRICITY IMPORT, EXPORT AND PIPELINE CONSTRAINTS
!
      DO YEAR = UNXPH , 1 , - 1
         IYR = CURIYR + YEAR - 1
         JYR = MIN(IYR , UNYEAR)
         CALL GETEIJ(IYR)
         DO NERC = 1 , UNRGNS
            RPS_RGN_X = MAP_NERC_TO_RPS_RGN(NERC)
            CALL GETBLD(1,NERC)
!
!           CREATE IMPORT, EXPORT AND PIPELINE TRANSMISSION CONSTRAINTS
!
            DO JSP = 1 , EPNMSP
               XVALUE(JSP) = DBLE(URNCSTEX_ECP(JSP,NERC))
               MVALUE(JSP) = DBLE(URNCSTIM_ECP(JSP,NERC))
               DO MRG = 1 , UNRGNS
                  PVALUE(MRG,JSP) = DBLE(CNSTRNTS_ECP(JSP,JYR,MRG,NERC))
               END DO
            END DO
!
            DO IGRP = 1 , EPNGRP
               DO ISEG = 1 , EPNSPG(IGRP)
                  VLS = EPLMAP(IGRP,ISEG,YEAR)
                  JSP = EPGECP(IGRP)
                  WRITE(18,2314) CURIYR+UHBSYR,YEAR,NERC,IGRP,ISEG, &
                     VLS,JSP,UPGTRN(NERC),UPCIMP(NERC),MVALUE(JSP), &
                     XVALUE(JSP),(PVALUE(MRG,JSP),MRG=1,UNRGNS)
 2314             FORMAT(1X,"ECP_TRADE",9(":",I4),20(":",F7.3))
                  WRITE(18,2315) CURIYR+UHBSYR,YEAR,NERC,IGRP,ISEG, &
                     VLS,JSP,UPGTRN(NERC),UPCIMP(NERC), &
                     EPWDTH(VLS,YEAR),BARRIER(JYR), &
                     (PTHRESH1(JYR,NERC,MRG)+PTHRESH2(JYR,NERC,MRG), &
                     MRG=1,UNRGNS)
 2315             FORMAT(1X,"ECP_TRAD2",9(":",I4),":",F7.1,19(":",F7.3))
!
!                 EXPORT CONSTRAINT
!
                  IF (UPGTRN(NERC) .GT. 0) THEN
                     ROW = 'X'//UPRGCD(NERC)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':X:',UPRGCD(NERC),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                     VALUE = XVALUE(JSP)
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ETT,22')
!
!                    IF CREATING MATRIX AND FIRST ECP YEAR DECLARE ROW TYPE
!
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                  END IF
!
!                 IMPORT CONSTRAINT
!
                  IF (UPCIMP(NERC) .GT. 0) THEN
                     ROW = 'M'//UPRGCD(NERC)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                     VALUE = MVALUE(JSP)
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ETT,23')
!
!                    IF CREATING MATRIX AND FIRST ECP YEAR DECLARE ROW TYPE
!
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                  END IF
!
!                 TRANSMISSION VECTORS
!
                  X = 0
                  DO MRG = 1 , UNRGNS
                     IF (UPXRGN(NERC,MRG) .EQ. 1) THEN
                        RPS_RGN = MAP_NERC_TO_RPS_RGN(MRG)
                        X = X + 1
                        COLUMN = 'T'//UPRGCD(NERC)// UPRGCD(MRG)//'EL'//UPRGCD(IGRP)// UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T:',UPRGCD(NERC), UPRGCD(MRG),':EL:',UPRGCD(IGRP), UPRGCD(ISEG),UPYRCD(YEAR))
                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           COLUMN_MIN_SR = 'T'//UPRGCD(NERC)// UPRGCD(MRG)//'SR'//UPRGCD(IGRP)// UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_mask,':T:',UPRGCD(NERC), UPRGCD(MRG),':SR:',UPRGCD(IGRP), UPRGCD(ISEG),UPYRCD(YEAR))
                        END IF

                        ROW_T = 'L'//UPRGCD(NERC)// UPRGCD(MRG)//'EL'//UPRGCD(IGRP)// UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_T_mask,':L:',UPRGCD(NERC), UPRGCD(MRG),':EL:',UPRGCD(IGRP), UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL
                        CALL CROWTYPE(ROW_T,'L       ',ROW_T_mask)

                        IF (YEAR .EQ. 2) THEN
                           WRITE(18,2397) CURIRUN, CURCALYR, YEAR, NERC, MRG, JSP, IGRP, ISEG, COLUMN, ROW_T, PVALUE(MRG,JSP)
 2397                      FORMAT(1X,"ECP_Transmission_Vectors",8(":",I4),2(":",A16),":",F12.3)
                        END IF

!                       LIMIT PIPELINE CAPACITY

                        VALUE = PVALUE(MRG,JSP)
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                        TST = VALUE
                        CALL CRHS(UPRHS,ROW_T,VALUE,ROW_T_mask,'EP$ETT,24')

                        VALUE = 1.0
                        CALL CVAL(COLUMN,ROW_T,VALUE,COLUMN_mask,ROW_T_mask,'EP$ETT,25')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           CALL CVAL(COLUMN_MIN_SR,ROW_T,VALUE,COLUMN_MIN_SR_mask,ROW_T_mask,'EP$ETT,26')
                        END IF

!                       SET TRANSMISSION COST

                        VALUE = 0.001 * EPWDTH(VLS,YEAR) * (BARRIER(JYR) + PTHRESH1(JYR,NERC,MRG) + PTHRESH2(JYR,NERC,MRG))
                        IF (YEAR .LT. UNXPH)THEN
                           VOMCST = UPGNPD(JYR) * PWF(DBLE(EPDSCRT),YEAR) * 0.001 * EPWDTH(VLS,YEAR) * &
                              (BARRIER(JYR) + PTHRESH1(JYR,NERC,MRG) + PTHRESH2(JYR,NERC,MRG))
                        ELSE
                           DO KYR = 1 , UNFPH - UNXPH + 1
                              MYR = MIN(JYR , UNYEAR)
                              VOM(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * 0.001 * EPWDTH(VLS,YEAR) *  &
                                 (BARRIER(MYR) + PTHRESH1(MYR,NERC,MRG) + PTHRESH2(MYR,NERC,MRG))
                           END DO
                           KYR = UNFPH - UNXPH + 1
                           VOMCST = PVV(VOM,ECP_D_FPH,KYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                        END IF
                        VALUE = VOMCST
                        ROW = UPOBJ ; ROW_mask=UPOBJ
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,27')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,28')
                        END IF

!                       CONNECT LOAD ROWS

                        ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2
                        VALUE = -1.0
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,29')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           VALUE = -1.0 * (1.0 - SR_TRAN_CREDIT)
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,32')
                           ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                           VALUE = -1.0 * SR_TRAN_CREDIT
                           CALL CVAL(COLUMN_MIN_SR,ROW_SR,VALUE,COLUMN_MIN_SR_mask,ROW_SR_mask,'EP$ETT,33')

                        END IF
!
                        ROW = 'L'//UPRGCD(MRG)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(MRG),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR),':!rev:') ! aimms rLEL2, move region

                        VALUE =  1.0 - LINELOSS
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,36')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           VALUE = (1.0 -LINELOSS) * (1.0 - SR_TRAN_CREDIT)
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,39')
                           ROW_SR = 'R'//UPRGCD(MRG)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(MRG),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                           VALUE = (1.0 - LINELOSS) * SR_TRAN_CREDIT
                           CALL CVAL(COLUMN_MIN_SR,ROW_SR,VALUE,COLUMN_MIN_SR_mask,ROW_SR_mask,'EP$ETT,40')


                        END IF

!                       ELECTRICITY EXPORT CONSTRAINT

                        ROW = 'X'//UPRGCD(NERC)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':X:',UPRGCD(NERC),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                        CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$ETT,43')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           CALL CVAL(COLUMN_MIN_SR,ROW,DBLE(1.0),COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,44')
                        END IF

!                       ELECTRICITY IMPORT CONSTRAINT

                        ROW = 'M'//UPRGCD(MRG)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(MRG),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                        CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$ETT,45')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           CALL CVAL(COLUMN_MIN_SR,ROW,DBLE(1.0),COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,46')
                        END IF

!                       Require Equavilent Flow of Electricity after losses from Export Region - If import region has an RPS Constraint

                        IF (UPRNWCASR(RPS_RGN) .GT. 0) THEN
                           IF (RPS_RGN_X .NE. RPS_RGN) THEN
                              ROW = 'E'//UPRGCD(RPS_RGN_X)//UPRGCD(RPS_RGN)//'TRPS'//UPYRCD(YEAR); call makmsk(ROW_mask,':E:',UPRGCD(RPS_RGN_X),UPRGCD(RPS_RGN),':TRPS:',UPYRCD(YEAR))

                              VALUE = -0.001 * EPWDTH(VLS,YEAR)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,47')

                              IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                                 VALUE = VALUE * (1.0 - SR_TRAN_CREDIT)
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,48')
                              END IF
                           END IF
                        END IF

!                       For State RPS Tranches - Require Equavilent Flow of Electricity after losses from Export Region

                        IF (ST_RPS_TRD(NERC,MRG,YEAR) .EQ. 1) THEN
                           ROW = 'L'//UPRGCD(NERC)//UPRGCD(MRG)//'TRPS'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPRGCD(MRG),':TRPS:',UPYRCD(YEAR))
                           VALUE = -0.001 * EPWDTH(VLS,YEAR)
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,49')
                        END IF

!                       put imports/exports in carbon constraint, if appropriate

                        DO CAR = 1 , CO2_GRP
                           IF (CO2_IM_BY_RG(MRG,CAR) .GT. 0.0 .AND. CO2_DE_BY_RG(NERC,CAR) .GT. 0.0)THEN

!                             if (curitr .eq. 1)write(6,1234) curiyr+1989,column,epwdth(vls,year),co2_im_by_rg(mrg,car),  &
!                                                                             0.001*epwdth(vls,year)*co2_im_by_rg(mrg,car)
!1234 format(1h ,'!catr',i4,1x,a8,5f10.3)

                              ROWCAR = 'EUCAR'//CO2_RG(CAR)//UPYRCD(YEAR); call makmsk(ROWCAR_mask,':EUCAR:',CO2_RG(CAR),UPYRCD(YEAR))
                              VALUE = DBLE(0.001 * EPWDTH(VLS,YEAR) * CO2_DE_BY_RG(NERC,CAR))

                              CALL CVAL(COLUMN,ROWCAR,VALUE,COLUMN_mask,ROWCAR_mask,'EP$ETT,50')

                              IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                                 VALUE = VALUE * (1.0 - SR_TRAN_CREDIT)
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,51')
                              END IF
                           END IF

!                          IF (CO2_IM_BY_RG(NERC,CAR) .GT. 0.0)THEN
!                             ROWCAR = 'EUCAR'//CO2_RG(CAR)//UPYRCD(YEAR)
!                             VALUE = DBLE(0.001 * EPWDTH(VLS,YEAR) * CO2_IM_BY_RG(NERC,CAR))
!                             CALL CVAL(COLUMN,ROWCAR,VALUE,'EP$ETT,52')
!                          END IF

                        END DO

!                       put imports/exports in 111d, if appropriate

                        IF (CO2_STDSW .GT. 0 .AND. CO2_TRDSW .GT. 0)THEN
                           IF (CO2_NRYR(MRG,YEAR) .GT. 0.0 .AND. CO2_NRYR(NERC,YEAR) .GT. 0.0)THEN
                              VALUE = DBLE(0.001 * EPWDTH(VLS,YEAR)) * (CO2_NRYR(NERC,YEAR) - CO2_NRYR(MRG,YEAR))
                              VALUE = VALUE * DBLE(0.001)
                              ROWCAR = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROWCAR_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
                              CALL CVAL(COLUMN,ROWCAR,-VALUE,COLUMN_mask,ROWCAR_mask,'EP$ETT,53')
                              ROWCAR = 'ERCO2'//URGNME(MRG)(6:7)//UPYRCD(YEAR); call makmsk(ROWCAR_mask,':ERCO2:',URGNME(MRG)(6:7),UPYRCD(YEAR),':!NERC:')
                              CALL CVAL(COLUMN,ROWCAR,VALUE,COLUMN_mask,ROWCAR_mask,'EP$ETT,54')
                           END IF
                        END IF

                     END IF
                  END DO           ! MRG
               END DO              ! ISEG
            END DO                 ! IGRP
         END DO                    ! NERC
      END DO                       ! YEAR

!     Create New Transmission Build Vectors

      TRAN_LEAD_TIME = 1
      CAPACITY_DERATE = 0.75

      DO YEAR = 1 + TRAN_LEAD_TIME, UNXPH
         IYR = CURIYR + YEAR - 1
         JYR = MIN(IYR , UNYEAR)
         CALL GETEIJ(IYR)
         IFPH2 = UNFPH - YEAR + 1
         DO NERC = 1 , UNRGNS
            CALL GETBLD(1,NERC)

            DO MRG = 1 , UNRGNS
               IF (UPXRGN(NERC,MRG) .EQ. 1) THEN

                  COLUMN_BLD = 'B'//UPRGCD(NERC)// UPRGCD(MRG)//'ELXX'//UPYRCD(YEAR); call makmsk(COLUMN_BLD_mask,':B:',UPRGCD(NERC), UPRGCD(MRG),':ELXX:',UPYRCD(YEAR))

!                 SET TRANSMISSION COST

!                 BLDCST = (EMM_CNXT_CST(NERC,MRG) * 0.12 * UPGNPD(IYR) / CRF(DBLE(EPDSCRT),IFPH2) ) * &
                  BLDCST = (EMM_CNXT_CST(NERC,MRG) * EPCCRF(WICT) * UPGNPD(IYR) / CRF(DBLE(EPDSCRT),IFPH2) ) * &        !use same FCF as for transmission builds (use CT as plt type, all same)
                     PWF(DBLE(EPDSCRT),YEAR)
                  VALUE = BLDCST
                  ROW = UPOBJ ; ROW_mask=UPOBJ
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                  IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                  CALL CVAL(COLUMN_BLD,ROW,VALUE,COLUMN_BLD_mask,ROW_mask,'EP$ETT,55')

!                 ADD TRANSMISSION CAPACITY TO ANNUAL TRANSMISSION CONSTRAINTS BOTH DIRECTIONS AND TRANSFER CAPACITY RIGHTS FROM EXPORTER TO IMPORTER

                  DO XYR = YEAR , UNXPH
                     ROW_T = 'L'//UPRGCD(NERC)// UPRGCD(MRG)//'ELXX'//UPYRCD(XYR); call makmsk(ROW_T_mask,':L:',UPRGCD(NERC), UPRGCD(MRG),':ELXX:',UPYRCD(XYR))
                     IF (YEAR .EQ. TRAN_LEAD_TIME + 1) call crowtype(ROW_T,'L       ',ROW_T_mask)
                     VALUE = -1.0
                     CALL CVAL(COLUMN_BLD,ROW_T,VALUE,COLUMN_BLD_mask,ROW_T_mask,'EP$ETT,56')

                     ROW_T = 'L'//UPRGCD(MRG)// UPRGCD(NERC)//'ELXX'//UPYRCD(XYR); call makmsk(ROW_T_mask,':L:',UPRGCD(MRG), UPRGCD(NERC),':ELXX:',UPYRCD(XYR),':!rev:')  ! reverses regions "!rev" flags as alternative
                     IF (YEAR .EQ. TRAN_LEAD_TIME + 1) CALL CROWTYPE(ROW_T,'L       ',ROW_T_mask)
                     VALUE = -1.0
                     CALL CVAL(COLUMN_BLD,ROW_T,VALUE,COLUMN_BLD_mask,ROW_T_mask,'EP$ETT,57')

                     ROW_T = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(XYR); call makmsk(ROW_T_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(XYR))
                     VALUE = -CAPACITY_DERATE
                     CALL CVAL(COLUMN_BLD,ROW_T,VALUE,COLUMN_BLD_mask,ROW_T_mask,'EP$ETT,58')

                     ROW_T = 'R'//UPRGCD(MRG)//'XXXXX'//UPYRCD(XYR); call makmsk(ROW_T_mask,':R:',UPRGCD(MRG),':XXXXX:',UPYRCD(XYR))
                     VALUE = CAPACITY_DERATE
                     CALL CVAL(COLUMN_BLD,ROW_T,VALUE,COLUMN_BLD_mask,ROW_T_mask,'EP$ETT,59')
                  END DO

!                 IN EACH YEAR TRANSFER CAPACITY FROM ANNUAL CONSTRAINT TO DETAILED CONSTRAINTS

                  COLUMN_BLD = 'B'//UPRGCD(NERC)// UPRGCD(MRG)//'ELYY'//UPYRCD(YEAR); call makmsk(COLUMN_BLD_mask,':B:',UPRGCD(NERC), UPRGCD(MRG),':ELYY:',UPYRCD(YEAR))

                  VALUE = ECP_MIN
                  ROW = UPOBJ ; ROW_mask=UPOBJ
                  CALL CVAL(COLUMN_BLD,ROW,VALUE,COLUMN_BLD_mask,ROW_mask,'EP$ETT,60')

                  DO IGRP = 1 , EPNGRP
                     DO ISEG = 1 , EPNSPG(IGRP)
                        VLS = EPLMAP(IGRP,ISEG,YEAR)
                        JSP = EPGECP(IGRP)

                        ROW_T = 'L'//UPRGCD(NERC)// UPRGCD(MRG)//'ELXX'//UPYRCD(YEAR); call makmsk(ROW_T_mask,':L:',UPRGCD(NERC), UPRGCD(MRG),':ELXX:',UPYRCD(YEAR))
                        VALUE = 1.0
                        CALL CVAL(COLUMN_BLD,ROW_T,VALUE,COLUMN_BLD_mask,ROW_T_mask,'EP$ETT,61')

                        ROW_T = 'L'//UPRGCD(NERC)// UPRGCD(MRG)//'EL'//UPRGCD(IGRP)// UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_T_mask,':L:',UPRGCD(NERC), UPRGCD(MRG),':EL:',UPRGCD(IGRP), UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL

!                       ADD TRANSMISSION CAPACITY TO DETAILED TRANSMISSION CONSTRAINT IN EACH YEAR

                        VALUE = -1.0
                        CALL CVAL(COLUMN_BLD,ROW_T,VALUE,COLUMN_BLD_mask,ROW_T_mask,'EP$ETT,62')

!                       ADD TRANSMISSION CAPACITY TO EXPORT CONSTRAINT

                        ROW = 'X'//UPRGCD(NERC)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':X:',UPRGCD(NERC),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

                        VALUE = -0.75
                        CALL CVAL(COLUMN_BLD,ROW,VALUE,COLUMN_BLD_mask,ROW_mask,'EP$ETT,63')

!                       ADD TRANSMISSION CAPACITY TO IMPORT CONSTRAINT

                        ROW = 'M'//UPRGCD(MRG)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(MRG),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

                        VALUE = -0.75
                        CALL CVAL(COLUMN_BLD,ROW,VALUE,COLUMN_BLD_mask,ROW_mask,'EP$ETT,64')
                     END DO              ! ISEG
                  END DO                 ! IGRP
               END IF                    ! UPXRGN(NERC,MRG) .EQ. 1
            END DO                       ! MRG
         END DO                          ! NERC
      END DO                             ! YEAR
!
!
!     REVISE RHS OF ELECTRICITY IMPORT, EXPORT AND PIPELINE CONSTRAINTS FOR CANADIAN IMPORTS
!
      DO YEAR = UNXPH , 1 , - 1
         IYR = CURIYR + YEAR - 1
         JYR = MIN(IYR , UNYEAR)
         CALL GETEIJ(IYR)
         DO CRG = 1, EFD_D_PROV - 3
            EXRG = MNUMNR + CRG
            CISCD(CRG) = CHAR(EXRG+64-10)
!
!           CREATE IMPORT, EXPORT AND PIPELINE TRANSMISSION CONSTRAINTS
!
            DO JSP = 1 , EPNMSP
               XVALUE(JSP) = 0.0
               MVALUE(JSP) = 0.0
               DO MRG = 1 , UNRGNS
                  PVALUE(MRG,JSP) = DBLE(CNSTRNTS_ECP(JSP,JYR,MRG,EXRG))
               END DO
            END DO
!
            DO IGRP = 1 , EPNGRP
               DO ISEG = 1 , EPNSPG(IGRP)
                  VLS = EPLMAP(IGRP,ISEG,YEAR)
                  JSP = EPGECP(IGRP)
                  WRITE(18,3314) CURIYR+UHBSYR,YEAR,EXRG,IGRP,ISEG,VLS,JSP,(PVALUE(MRG,JSP),MRG=1,UNRGNS)
 3314             FORMAT(1X,"CAN_IMPORTS",7(":",I4),20(":",F7.3))
                  WRITE(18,3315) CURIYR+UHBSYR,YEAR,EXRG,IGRP,ISEG,VLS,JSP,EPWDTH(VLS,YEAR),BARRIER(JYR), &
                     (PTHRESH1(JYR,EXRG,MRG)+PTHRESH2(JYR,EXRG,MRG),MRG=1,UNRGNS)
 3315             FORMAT(1X,"CAN_TRAD2",7(":",I4),3(":",F7.1),19(":",F7.3))
!
!                 SET UP LOAD ROW IN CANDIAN PROVINCE AND ESTABLISH AVAILABLE CAPACITY
!
                  ROW = 'L'//CISCD(CRG)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',CISCD(CRG),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR),':!can:') ! region field is Canadian Supply Region p-to-t. "!can" flags it as exception
                  CALL CROWTYPE(ROW,'G       ',ROW_mask)
                  TST = 0.0
                  DO STEP = 1 , EFD_D_CSS
                     IF (ECP_GW(ISEG,IGRP,STEP,CRG,JYR) .GT. ECP_MIN) THEN
                        TST = TST + ECP_GW(ISEG,IGRP,STEP,CRG,JYR)
                        VALUE = ECP_GW(ISEG,IGRP,STEP,CRG,JYR) * ECANSQZ(CRG,JYR) * CAN_QTY_SCMULT(JYR)
                        COLUMN = 'V'//CISCD(CRG)// 'EL'//UPRGCD(IGRP)// UPRGCD(ISEG)//UPRGCD(STEP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':V:',CISCD(CRG), ':EL:',UPRGCD(IGRP), UPRGCD(ISEG),UPRGCD(STEP),UPYRCD(YEAR))
                        WRITE(18,9331) CURIYR+UHBSYR,IYR+UHBSYR,JYR+UHBSYR,CRG,EXRG,JSP,VLS,IGRP,ISEG,STEP,COLUMN,VALUE, &
                     ECP_GW(ISEG,IGRP,STEP,CRG,JYR), ECANSQZ(CRG,JYR), can_cst_scmult(jyr),can_qty_scmult(jyr)
 9331                   FORMAT(1X,"ECP_GW_IN_UECP",10(":",I4),":",A8,5(":",F12.3))
                        CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ETT,65')
                        VALUE = 1.0
                        ROW = 'L'//CISCD(CRG)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',CISCD(CRG),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR),':!can:') ! region field is Canadian Supply Region p-to-t. "!can" flags it as exception
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,66')
                        IF (YEAR .LT. UNXPH)THEN
                           VOMCST = UPGNPD(JYR) * PWF(DBLE(EPDSCRT),YEAR) * 0.001 * EPWDTH(VLS,YEAR) *    &
                                     ( CAN_CST(STEP,CRG,JYR) * CAN_CST_SCMULT(JYR) )
                        ELSE
                           DO KYR = 1 , UNFPH - UNXPH + 1
                              VOM(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * 0.001 * EPWDTH(VLS,YEAR) *    &
                                     ( CAN_CST(STEP,CRG,JYR) * CAN_CST_SCMULT(JYR) )
                           END DO
                           KYR = UNFPH - UNXPH + 1
                           VOMCST = PVV(VOM,ECP_D_FPH,KYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                        END IF
                        VALUE = VOMCST
                        ROW = UPOBJ ; ROW_mask=UPOBJ
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,67')
                     END IF
                  END DO
!
!                 TRANSMISSION VECTORS
!
                  X = 0
                  DO MRG = 1 , UNRGNS
                     IF (PVALUE(MRG,JSP) .GT. ECP_MIN .AND. TST .GT. ECP_MIN) THEN
                        X = X + 1
                        COLUMN = 'T'//CISCD(CRG)// UPRGCD(MRG)//'EL'//UPRGCD(IGRP)// UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T:',CISCD(CRG), UPRGCD(MRG),':EL:',UPRGCD(IGRP), UPRGCD(ISEG),UPYRCD(YEAR),':!CAN:') ! region field is Canadian Supply Region p-to-t. "!can" flags it as exception
                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           COLUMN_MIN_SR = 'T'//CISCD(CRG)// UPRGCD(MRG)//'SR'//UPRGCD(IGRP)// UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_mask,':T:',CISCD(CRG), UPRGCD(MRG),':SR:',UPRGCD(IGRP), UPRGCD(ISEG),UPYRCD(YEAR))
                        END IF

!                       BOUND VECTOR BY PIPELINE CONSTAINT

                        VALUE = PVALUE(MRG,JSP)
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ETT,68')

!                       SET TRANSMISSION COST

                        IF (YEAR .LT. UNXPH)THEN
                           VOMCST = UPGNPD(JYR) * PWF(DBLE(EPDSCRT),YEAR) * 0.001 * EPWDTH(VLS,YEAR) * (BARRIER(JYR) + PTHRESH1(JYR,EXRG,MRG) + PTHRESH2(JYR,EXRG,MRG))
                        ELSE
                           DO KYR = 1 , UNFPH - UNXPH + 1
                              VOM(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * 0.001 * EPWDTH(VLS,YEAR) * (BARRIER(JYR) + PTHRESH1(JYR,EXRG,MRG) + PTHRESH2(JYR,EXRG,MRG))
                           END DO
                           KYR = UNFPH - UNXPH + 1
                           VOMCST = PVV(VOM,ECP_D_FPH,KYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                        END IF
                        VALUE = VOMCST
                        ROW = UPOBJ ; ROW_mask=UPOBJ
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,69')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,70')
                        END IF
!
!                       CONNECT LOAD ROWS
!
                        ROW = 'L'//CISCD(CRG)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',CISCD(CRG),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR),':!can:') ! region field is Canadian Supply Region p-to-t. "!can" flags it as exception
                        VALUE = -1.0
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,71')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,72')
                        END IF
!
                        ROW = 'L'//UPRGCD(MRG)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(MRG),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR),':!rev:') ! aimms rLEL2
                        VALUE =  1.0 - LINELOSS
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ETT,73')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           VALUE =  (1.0 - LINELOSS) * (1.0 - SR_TRAN_CREDIT)
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,74')
                           ROW_SR = 'R'//UPRGCD(MRG)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(MRG),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                           VALUE =  (1.0 - LINELOSS) * SR_TRAN_CREDIT
                           CALL CVAL(COLUMN_MIN_SR,ROW_SR,VALUE,COLUMN_MIN_SR_mask,ROW_SR_mask,'EP$ETT,75')
                        END IF
!
!                       ELECTRICITY IMPORT CONSTRAINT
!
                        ROW = 'M'//UPRGCD(MRG)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(MRG),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                        CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$ETT,76')

                        IF (SR_TRAN_CREDIT .GT. 0.0) THEN
                           CALL CVAL(COLUMN_MIN_SR,ROW,DBLE(1.0),COLUMN_MIN_SR_mask,ROW_mask,'EP$ETT,77')
                        END IF
                     END IF
                  END DO           ! MRG
               END DO              ! ISEG
            END DO                 ! IGRP
         END DO                    ! EXRG
      END DO                       ! YEAR
!
!
      RETURN
      END

      
      SUBROUTINE EP$FLCRV_HYDROGEN
      ! EDT <EDWARD.THOMAS@EIA.GOV> 05/13/2021
      !
      !THE PURPOSE OF THIS SUBROUTINE IS TO ADD HYDROGEN SUPPLY CURVES INTO THE ECP MODULE. TO IMPLEMENT THIS, WE READ IN DATA FROM A CSV FILE
      !WHICH IS THE OUTPUT OF THE HYDROGEN MODULE. FROM THERE, THE READS AND HELPER ROUTINES ARE HANDLED IN THE HYDROGEN_DATA FORTRAN MODULE. 
      !THE DECLARATION OF THIS MODULE IS IN UDAT.F, WHERE IT IS THEN CALLED ONCE TO POPULATE THE VARIABLES IN THE MODULE. 
      !
      !FROM THERE IT'S USED IN THIS SUBROUTINE. THIS SUBROUTINE, LOOPS OVER ALL THE NATURAL GAS REGIONS (SINCE HYDROGEN WILL BE INTERFACING) WITH 
      !THOSE FUEL TYPES IN THE FUTURE. AND FETCHES AND HYDROGEN TYPE OBJECT FOR THAT REIGON CONTAINING ALL THE DATA. tHEN THERE ARE SUBSEQUENT LOOPS 
      !OVER THE STEPS. WHERE THE COEFFIENTS (CRHS), THE VALUES (CVAL), AND THE BOUNDS (CBND) ARE ADDED. 
      !
      !NOTE THAT THE CVAL, CBND, AND CRHS ARE INTERFACE FUNCTIONS DEFINDED IN ECP_ROW_COL MODULE. 
      
      ! LOOP OVER NATURAL GAS REGIONS (WE'RE ASSUMING HYDROGEN IS BEING PRODUCING IN THE SAME FUEL TYPE REGIONS AS NATURAL GAS)
      
      USE EPHRTS_SWTICHES
      USE EPHRTS_FILE_UNIT_NUMBERS 
      USE ECP_ROW_COL

      IMPLICIT NONE

      include 'parametr'
      include 'ncntrl'
      include 'qblk'
      include 'mxpblk'
      include 'emablk'
      include 'emeblk'
      include 'ngtdmrep'
      include 'convfact'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'ngtdmout'
      include 'cdsparms'
      include 'coalemm'
      include 'uefdout'
      include 'emission'
      include 'fuelin'
      include 'entcntl'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'csapr'
      include 'hmmblk'
      
      INTEGER MODEL_YEAR, INDEX, PRICE_INDEX, STEP_H2
      CHARACTER*2 ST,CR
      CHARACTER*1 C_SP_NG
      CHARACTER*16 ROW_G,ROW_S,COLUMN
      REAL*8 H2_PRICE
      
      INTEGER KYR,FLRG,CS_RG,STEP,JYR,MYR,T_MYR, ISP_NG,YEAR
      REAL*8 PVV,PWF,DSCRT,DIGITS2
      REAL*8 VALUE,VALCAR,VALCO2,PDELX(ECP_D_FPH),QUANITYPERSTEP
      LOGICAL E_DEBUG_EXIST
     
      !CHARACTER*8 UPBND                       ! BOUND ROW NAME
      !CHARACTER*8 UPNAME(ECP$CAP,3)           ! ECP Technology Name For Reports
      !CHARACTER*16 UPOBJ                      ! OBJECTIVE FUNCTION NAME
      !CHARACTER*16 UPRHS                      ! RIGHT HAND SIDE NAME
      DSCRT = DBLE(AVGDCR)
      
      IF (TURN_ON_DEBUGGING .EQ. .TRUE.) THEN
         INQUIRE(FILE="EPHRTS_DEBUG_FILE.TXT", EXIST=E_DEBUG_EXIST)
         IF (E_DEBUG_EXIST) THEN
            OPEN(unit_num_ephrts_debug_file, FILE="EPHRTS_DEBUG_FILE.TXT", STATUS="OLD", POSITION="APPEND", ACTION="WRITE")
         ELSE
            OPEN(unit_num_ephrts_debug_file, FILE="EPHRTS_DEBUG_FILE.TXT", STATUS="NEW", ACTION="WRITE")
         END IF
         WRITE(unit_num_ephrts_debug_file, *) "ADDING ECP HYDROGEN SUPPLY CURVE"
      END IF
      
      DO YEAR = 1 , UNXPH 
         KYR = CURIYR + YEAR - 1
         
         DO ISP_NG = 1 , EPNMSP        
            DO CS_RG = 1 , MNUMCR - 2 ! loop over all emm fuel regions - census regions - skip last two - unused and national total
               
               ! GET HYDROGEN_REGION OBJECT FROM REGION INDEX. THIS IS FETCHED WITH THE HELPER ROUTINE DECLEARED IN THE MODULE HYDROGEN_DATA, CALLED IN UDAT.F
               MODEL_YEAR = KYR + 1989
                   
                IF (TURN_ON_DEBUGGING .EQ. .TRUE.) THEN
                    WRITE(unit_num_ephrts_debug_file, *) "... FOUND FUEL REGION ", CS_RG
                END IF
                ! THIS ACTS UPON EACH REGION, THIS IS BECAUSE THE PLANTS ARE ASSIGNED FUEL PER REGION  (NOT FUEL PER REGION PER STEP)
                WRITE(C_SP_NG,'(I1)') ISP_NG
                WRITE(CR,'(I2.2)') CS_RG
               
                ROW_S = 'FL_H2'//C_SP_NG//EPFLCD(CS_RG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FL_H2:',C_SP_NG,EPFLCD(CS_RG),UPYRCD(YEAR))
                CALL CROWTYPE(ROW_S,'L       ',ROW_mask)  ! ADDING RIGHT HAND SIDE FOR ROW
                CALL CRHS(UPRHS,ROW_S,DBLE(0.0),ROW_mask, 'EP$FLCRV_H2,1')
               
                DO STEP_H2 = 1, H2STEP
                    WRITE(ST,'(I2.2)') STEP_H2 ! CAST THE INTEGER STEP_H2 TO ST
                  
                    COLUMN = 'SUH2'//EPFLCD(CS_RG)//EPFLCD(STEP_H2)//C_SP_NG//UPYRCD(YEAR); call makmsk(COLUMN_mask,':SUH2:', EPFLCD(CS_RG), EPFLCD(STEP_H2),C_SP_NG,UPYRCD(YEAR))
                
                    CALL CVAL(COLUMN,ROW_S,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$FLCRV_H2,2') ! COEFFIENT ON THE COLUMN IS NEGATIVE 1
                     
                    H2_PRICE = H2SCRV_P(CS_RG,STEP_H2,ISP_NG,CURIYR) ! current year price
                           
                    IF (YEAR .LT. UNXPH) THEN ! USE PRSENT WORTH VALUE IF LESS THAN THE EXPLICIT PLANNING HORIZON
                        KYR = CURIYR + YEAR - 1
                        VALUE = H2_PRICE * PWF(DSCRT,YEAR) * UPGNPD(KYR) ! value is value * present worth factor (where DSCRT is discounted rate for that year)
                    ELSE  
                        DO JYR = 1 , UNFPH - UNXPH + 1
                            KYR = JYR + CURIYR + UNXPH - 2
                            MYR = MIN(KYR, UNYEAR)
                            T_MYR = MYR + 1989
                            PDELX(JYR + UNXPH - 1) = H2_PRICE * UPGNPD(KYR) ! UPGNPD is a deflator
                        END DO
                        VALUE = PVV(PDELX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1 , DSCRT) * PWF(DSCRT,UNXPH - 1) ! Value here is Present Value* Present Worth Factor,
                    END IF

                    CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$FLCRV_H2,3')
                    IF (TURN_ON_DEBUGGING .EQ. .TRUE.) THEN
                        WRITE(unit_num_ephrts_debug_file, *) "... ADDED VALUE FOR COLUMN  ", COLUMN, ", ROW : ", ROW_S, ", VALUE : ", VALUE, " STEP : ", STEP_H2
                    END IF
                     
                    QUANITYPERSTEP = H2SCRV_Q(CS_RG,STEP_H2,ISP_NG,CURIYR)
                    ! ADD IN THE BOUNDS PER STEP
                    CALL CBND(UPBND,COLUMN,DBLE(0.0),QUANITYPERSTEP,COLUMN_mask,'EP$FLCRV_H2,4')

                    IF (TURN_ON_DEBUGGING .EQ. .TRUE.) THEN
                    WRITE(unit_num_ephrts_debug_file, *) "... ADDED BOUNDS FOR ecp COLUMN  ", COLUMN, " MIN : 0.0, MAX : ", H2SCRV_Q(CS_RG,STEP_H2,ISP_NG,CURIYR)
                    END IF
               
                ENDDO
            ENDDO !SEASONS
        ENDDO
      ENDDO
      IF (TURN_ON_DEBUGGING .EQ. .TRUE.) THEN
        CLOSE(unit_num_ephrts_debug_file) ! CLOSE DEBUG FILE
      END IF
      RETURN 
      END
      
      
!
!     EP$FLCRV SETS UP THE FUEL SUPPLY CURVES
!
      SUBROUTINE EP$FLCRV
      use ecp_row_col
      !USE EPHRTS_DATA
      USE EPHRTS_SWTICHES
      USE EPHRTS_FILE_UNIT_NUMBERS 
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'qblk'
      include 'mxpblk'
      include 'emablk'
      include 'emeblk'
      include 'ngtdmrep'
      include 'convfact'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'ngtdmout'
      include 'cdsparms'
      include 'coalemm'
      include 'uefdout'
      include 'emission'
      include 'fuelin'
      include 'entcntl'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'csapr'
!
      COMMON /OGUSE/WHDEX,WOPEX,NGCON,OLCON,NGLEV,OLLEV,XPNGELGR
      REAL*8 WHDEX(ECP_D_FPH)
      REAL*8 WOPEX(ECP_D_FPH)
      REAL*8 NGCON(ECP_D_XPH)
      REAL*8 OLCON(ECP_D_XPH)
      REAL*8 NGLEV(ECP_D_XPH)
      REAL*8 OLLEV(ECP_D_XPH)
      REAL*8 XPNGELGR(NNGEM,MNUMYR,3)      ! EXPECTED E UTIL NG PRICE (87$/MMBTU) FROM NGTDMOUT
!
      INTEGER YEAR,FUEL,JYR,KYR,STP,FLRG,NG_RG,OL_RG,MYR,CL_RG,IP,ICLS,IECP,FPP,ISP_NG,HG,SO2,NERC,MR_TST(MAXNFR,ECP_D_DSP,ECP_D_XPH),ISP,ISTEP,GRP
      INTEGER*4 TST_HGP(NDREG,ECP_D_XPH),TST_SO2P(MX_SO2_GRP,ECP_D_XPH),VLS
      REAL*8 PV_WOPEX(ECP_D_XPH)
      REAL*8 QLAGE,QBASE,QBAST,QSIZE,QSTEP,PBASE,EFAC
      REAL*4 ELNGSCRV,QSIZE_R4
      REAL*8 PDELX(ECP_D_FPH),M_SIZE,NG_SP_HRS(0:3),Qzero,Qremaining,Pzero,QDELX(ECP_D_FPH),QGWX(ECP_D_FPH),QDEL,QGW,PDEL,N_SIZE
      REAL*8 PVV,PWF,DSCRT,DIGITS2
      REAL*8 VALUE,VALCAR,VALCO2
      REAL*8 VAL1
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*4 SO2SHR
      CHARACTER*16 ROW,COLUMN,ROW_NG,ROW_OL,ROW_HG,ROW_SO2,ROW_CAR,ROW_CO2,ROW_CARR
      CHARACTER*12 FROM_LABEL
      CHARACTER*2 STEP
      CHARACTER*1 C_SP_NG,C_STEP
      CHARACTER*1 HGCODE,SO2CODE
      character*30 save_row_mask
!
!     ANNUAL RATE AND CUMULATIVE INCREASE IN CARBON FEE AFTER 2025
!
      REAL P2025ADJ
!
!     variables for carbon tax expectations adjustment
!
      REAL PJCLEL(MNUMYR),PJDSEL(MNUMYR),PJRSEL(MNUMYR),PJNGEL(MNUMYR)
!
      LOGICAL FIRST/.TRUE./ ! true only first time through
      LOGICAL FIRSTY(MNUMYR)
      LOGICAL E_DEBUG_EXIST
!     uses UPCALPHA (read from ECPDAT)--relax parameter for carb tax expectations adjustment
!
      SAVE PJCLEL,PJDSEL,PJRSEL,PJNGEL,FIRST,FIRSTY

      ecpsub='EP$FLCRV'
      IF (TURN_ON_DEBUGGING .EQ. .TRUE.) THEN
         INQUIRE(FILE="EPHRTS_DEBUG_FILE.TXT", EXIST=E_DEBUG_EXIST)
         IF (E_DEBUG_EXIST) THEN
            OPEN(unit_num_ephrts_debug_file, FILE="EPHRTS_DEBUG_FILE.TXT", STATUS="OLD", POSITION="APPEND", ACTION="WRITE")
         ELSE
            OPEN(unit_num_ephrts_debug_file, FILE="EPHRTS_DEBUG_FILE.TXT", STATUS="NEW", ACTION="WRITE")
         END IF
      END IF
!
!     First time through, store a copy of the carbon taxes from the prior run.
!     They are used to adjust future expectations of carbon taxes when doing carbon cap runs.
!     Each year,  adjust tax expectations to reflect differences between the
!        "actual" and "estimated" for CURIYR-1.
!     To help convergence, adjust future taxes by a fraction (ALPHA) of the difference between
!        this run's taxes and the expected taxes for the prior year.
!
      IF (FIRST) THEN
         FIRST = .FALSE.
         DO JYR = 1 , UNYEAR
            FIRSTY(JYR) = .TRUE.
            PJCLEL(JYR) = JCLEL(JYR)
            PJRSEL(JYR) = JRSEL(JYR)
            PJDSEL(JYR) = JDSEL(JYR)
            PJNGEL(JYR) = JNGEL(JYR)
         END DO ! JYR
      END IF
      IF (FIRSTY(CURIYR)) THEN

         FIRSTY(CURIYR)=.FALSE.

         DO JYR = CURIYR, UNYEAR
            PJCLEL(JYR) = MAX( 0.0 , PJCLEL(JYR) + UPCALPHA*(JCLEL(CURIYR-1)-PJCLEL(CURIYR-1)))
            PJRSEL(JYR) = MAX( 0.0 , PJRSEL(JYR) + UPCALPHA*(JRSEL(CURIYR-1)-PJRSEL(CURIYR-1)))
            PJDSEL(JYR) = MAX( 0.0 , PJDSEL(JYR) + UPCALPHA*(JDSEL(CURIYR-1)-PJDSEL(CURIYR-1)))
            PJNGEL(JYR) = MAX( 0.0 , PJNGEL(JYR) + UPCALPHA*(JNGEL(CURIYR-1)-PJNGEL(CURIYR-1)))
            WRITE(18,3719) CURIYR+UHBSYR,JYR+UHBSYR,UPCALPHA,JCLEL(CURIYR-1),PJCLEL(CURIYR-1),PJCLEL(JYR),JRSEL(CURIYR-1),PJRSEL(CURIYR-1),PJRSEL(JYR),JDSEL(CURIYR-1),PJDSEL(CURIYR-1),PJDSEL(JYR), &
               JNGEL(CURIYR-1),PJNGEL(CURIYR-1),PJNGEL(JYR)
 3719       FORMAT(1X,"CARBON_P_ADJ",2(":",I4),13(":",F12.6))
         END DO
      END IF
!
      TST_SO2P = 0
      TST_HGP = 0
!
!     SET EXPECTATION ARRAYS EQUAL TO GAS ARRAYS FROM NGTDMOUT I.E. RELAXED AND WITHOUT CARBON TAX
!
      XPNGELGR = DBLE(SPNGELGR)
!
!     DECLARE ROW TYPE NATIONAL OIL AND GAS SUPPLY CURVES
!
      DO YEAR = 1 , UNXPH
         ROW = 'FUELNG'//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELNG:',':X:',UPYRCD(YEAR))
         CALL CROWTYPE(ROW,'L       ',ROW_mask)
         VALUE = DBLE(0.0)
         CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$FLCRV,1')
         ROW = 'FUELOL'//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELOL:',':X:',UPYRCD(YEAR))
         CALL CROWTYPE(ROW,'L       ',ROW_mask)
         VALUE = DBLE(0.0)
         CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$FLCRV,2')
      END DO
!
!     SET UP OIL SUPPLY CURVE
!
      DO YEAR = 1 , UNXPH
         DO STP = 1 , 1
            WRITE (STEP,'("0",I1)') STP
            COLUMN = 'SUOLX'//STEP//UPYRCD(YEAR); call makmsk(COLUMN_mask,':SUOLX:',STEP,UPYRCD(YEAR))
            ROW = 'FUELOL'//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELOL:',':X:',UPYRCD(YEAR))
            VALUE = DBLE(-1.0)
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,3')
            CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(10000.0),COLUMN_mask,'EP$FLCRV,4')
!
!           OBJECTIVE FUNCTION VALUE (EXPECTED WORLD OIL PRICE)
!
            IF (YEAR .LT. UNXPH) THEN
               KYR = CURIYR + YEAR - 1
               WOPEX(YEAR) = XIT_WOP(KYR,2) * UPGNPD(KYR)
               VALUE = WOPEX(YEAR) * PWF(DBLE(AVGDCR),YEAR)
               PV_WOPEX(YEAR) = VALUE
            ELSE
               DO JYR = 1 , UNFPH - UNXPH + 1
                  KYR = JYR + CURIYR + UNXPH - 2
                  WOPEX(JYR + UNXPH - 1) = XIT_WOP(KYR,2) * UPGNPD(KYR)
               END DO
               VALUE = PVV(WOPEX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(AVGDCR)) * PWF(DBLE(AVGDCR),UNXPH - 1)
               PV_WOPEX(YEAR) = VALUE
            END IF
            ROW = UPOBJ ; ROW_mask=UPOBJ
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,5')
         END DO                          !STP
      END DO                           !YEAR
!
!     GET PREVIOUS GAS CONSUMPTION TO USE FOR STEP SIZE
!
!     IF (USYEAR(CURIYR) .EQ. UPSTYR) THEN
         QLAGE = QNGEL(MNUMCR,CURIYR - 1)
!     ELSE
!        QLAGE = MAX(NGCON(1) , 0.9 * QNGEL(MNUMCR,CURIYR - 1 ))
!     END IF
!
        IF (CURIYR+1989 .GE. UPSTYR) THEN 
        !      SET UP HYDROGEN SUPPLY CURVE
           CALL EP$FLCRV_HYDROGEN
        END IF

         
!     SET UP GAS SUPPLY CURVE
!
      DO YEAR = 1 , UNXPH
         KYR = CURIYR + YEAR - 1
!
!        GET MIDPOINT (EXPECTED GROWTH) AND STEP SIZE FOR SUPPLY CURVES
!
!        QBASE = QLAGE * UPNGGRWE ** YEAR
         IF (KYR .LE. UNYEAR)THEN
            QBASE = QNGEL(MNUMCR,KYR)
         ELSE
            QBASE = QNGEL(MNUMCR,UNYEAR) * UPNGGRWE ** FLOAT(KYR - UNYEAR)
         END IF
         QSIZE = QBASE * UPCRVSIZ
         QSIZE_R4 = QSIZE
         QBAST = OGPRDNG(MNUMOR,CURIYR-1) * UPNGGRWT ** YEAR

!        if (year .lt. unxph)write (6,1212) curiyr+1989,curiyr+1989+year-1,QBASE,QLAGE,UPNGGRWE,  &
!           QBAST,OGPRDNG(MNUMOR,CURIYR-1),UPNGGRWT
!1212    format(1h ,'!ngqlag',i4,i5,6f11.4)

         DO STP = 1 , 2 * UPCRVSTP + 1
            IF (STP .LT. 10) THEN
               WRITE (STEP,'("0",I1)') STP
            ELSE
               WRITE (STEP,'(I2)') STP
            END IF
            COLUMN = 'SUNGX'//STEP//UPYRCD(YEAR); call makmsk(COLUMN_mask,':SUNGX:',STEP,UPYRCD(YEAR))
            ROW = 'FUELNG'//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELNG:',':X:',UPYRCD(YEAR))
            VALUE = DBLE(-1.0)
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,6')
            IF (STP .EQ. 1) THEN
               VALUE = DBLE(QBASE - FLOAT(UPCRVSTP) * QSIZE)
            ELSE
               VALUE = DBLE(QSIZE)
            END IF
            CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$FLCRV,7')
!
!           IF USING ELASTICITY METHOD, GET DELTA FROM MIDPOINT AND APPLY ELASTICITY TO EXPECTED WELLHEAD PRICE
!
            IF (UPCRVSW .LE. 1)THEN
!
!              OBJECTIVE FUNCTION VALUE (EXPECTED WELLHEAD PRICE ADJUSTED BY ELASTICITY)
!
               IF (STP .LE. UPCRVSTP) THEN
                  QSTEP = QBAST - QSIZE * FLOAT(UPCRVSTP - STP + 1) / CFNGU(MIN(CURIYR+YEAR-1,UNYEAR))
                  QDEL = QSTEP / QBAST
                  EFAC = 0.5
                  PDEL = 1.0 + (QDEL - 1.0) * UPCRVELA * EFAC
               ELSE
                  QSTEP = QBAST + QSIZE * FLOAT(STP - (UPCRVSTP + 1)) / CFNGU(MIN(CURIYR+YEAR-1,UNYEAR))
                  QDEL = QSTEP / QBAST
                  IF (QDEL .LE. 1.025) THEN
                     EFAC = 1.0 + 0.25 * (QDEL - 1.000) / (1.025 - 1.000)
                     PDEL = 1.0 + (QDEL - 1.0) * UPCRVELA * EFAC
                  ELSEIF (QDEL .LE. 1.05)THEN
                     EFAC = 1.25 + 0.25 * (QDEL - 1.025) / (1.050 - 1.025)
                     PDEL = 1.0 + (QDEL - 1.0) * UPCRVELA * EFAC
                  ELSEIF (QDEL .LE. 1.10)THEN
                     EFAC = 1.5 + 0.75 * (QDEL - 1.050) / (1.100 - 1.050)
                     PDEL = 1.0 + (QDEL - 1.0) * UPCRVELA * EFAC
                  ELSE
                     EFAC = 2.25 + 0.75 * (QDEL - 1.100) / (1.150 - 1.100)
                     PDEL = 1.0 + (QDEL - 1.0) * UPCRVELA * EFAC
                  END IF
               END IF

!              if (year .lt. unxph)write(6,2323) curiyr+1989,curiyr+1989+year-1,stp,qdel,efac,pdel,qbase+float(stp-upcrvstp-1)*qsize,xogwprng(mnumor,curiyr+year-1)*pdel*scalpr
!2323          format(1h ,'!ngelas',i4,i5,i3,1x,6f10.4)

               IF (YEAR .LT. UNXPH) THEN
                  WHDEX(YEAR) = (XOGWPRNG(MNUMOR,KYR) / CFNGU(MIN(KYR,UNYEAR))) * UPGNPD(KYR)
                  VALUE = WHDEX(YEAR) * PWF(DBLE(AVGDCR),YEAR)
!
!                 APPLY ELASTICITY ADJUSTMENT TO STEP PRICE
!
                  VALUE = VALUE * DBLE(PDEL)
               ELSE
                  DO JYR = 1 , UNFPH - UNXPH + 1
                     KYR = JYR + CURIYR + UNXPH - 2
                     WHDEX(JYR + UNXPH - 1) = (XOGWPRNG(MNUMOR,KYR) / CFNGU(MIN(KYR,UNYEAR))) * UPGNPD(KYR)
                  END DO
                  VALUE = PVV(WHDEX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(AVGDCR)) * PWF(DBLE(AVGDCR),UNXPH - 1)
                  VALUE = VALUE * DBLE(PDEL)
               END IF
            ELSE IF (UPCRVSW .EQ. 2)THEN
!
!           USE NATURAL GAS SUPPLY CURVE FUNCTION TO GET DELTA FROM MIDPOINT AND APPLY TO EXPECTED WELLHEAD PRICE
!
            IF (YEAR .LT. UNXPH) THEN

!              if (stp .eq. 1 .or. stp .eq. 6 .or. stp .eq. 11 .or. stp .eq. 16 .or. stp .eq. 21) write(6,8888) curiyr+1989,kyr+1989,stp,pdel/pbase,xogwprng(mnumor,kyr),xogwprng(mnumor,kyr)*pdel/pbase
!8888          format(1h ,'!ngcrv',i4,i5,i3,6f10.3)

               WHDEX(YEAR) = (XOGWPRNG(MNUMOR,KYR) / CFNGU(MIN(KYR,UNYEAR))) * UPGNPD(KYR)
               VALUE = WHDEX(YEAR) * PWF(DBLE(AVGDCR),YEAR)
               PBASE = ELNGSCRV(MIN(UNYEAR,KYR),0.0)
               PDEL  = ELNGSCRV(MIN(UNYEAR,KYR),FLOAT((STP - 1) - UPCRVSTP) * QSIZE_R4)
               VALUE = VALUE * DBLE(PDEL/PBASE)
            ELSE
               DO JYR = 1 , UNFPH - UNXPH + 1
                  KYR = JYR + CURIYR + UNXPH - 2
                  WHDEX(JYR + UNXPH - 1) = (XOGWPRNG(MNUMOR,KYR) / CFNGU(MIN(KYR,UNYEAR))) * UPGNPD(KYR)
                  PBASE = ELNGSCRV(MIN(UNYEAR,KYR),0.0)
                  PDEL  = ELNGSCRV(MIN(UNYEAR,KYR),FLOAT((STP - 1) - UPCRVSTP) * QSIZE_R4)
                  PDELX(JYR + UNXPH - 1) = WHDEX(JYR + UNXPH - 1) * DBLE(PDEL / PBASE)

!                 if (stp .eq. 1 .or. stp .eq. 6 .or. stp .eq. 11 .or. stp .eq. 16 .or. stp .eq. 21) write(6,9999) curiyr+1989,kyr+1989,stp,xogwprng(mnumor,kyr),pdel/pbase,xogwprng(mnumor,kyr)*pdel/pbase
!9999             format(1h ,'!ngxph',i4,i5,i3,6f10.3)

               END DO
               VALUE = PVV(PDELX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(AVGDCR)) * PWF(DBLE(AVGDCR),UNXPH - 1)
            END IF
         END IF                                          !UPCRVSW
         ROW = UPOBJ ; ROW_mask=UPOBJ
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,8')
         END DO                                            !STP
      END DO                                              !YEAR

      DSCRT = AVGDCR

!     DECLARE ROW TYPE AND CREATE TRANSFER VECTORS FROM NATIONAL SUPPLY CURVES TO FUEL REGIONS - Residual and Distillate

      DO YEAR = 1 , UNXPH
         KYR = YEAR + CURIYR - 1
         IF (KYR .LE. UNYEAR) THEN
            P2025ADJ = 1.0
         ELSE
            P2025ADJ = UPCARGRW ** (KYR - UNYEAR)
         END IF

         ROW_OL = 'FUELOL'//'X'//UPYRCD(YEAR); call makmsk(ROW_OL_mask,':FUELOL:',':X:',UPYRCD(YEAR))

         DO FLRG = 1 , UNFRGN
            OL_RG = EPCSMP(FLRG)
            CL_RG = EPCLMP(FLRG)

            ROW = 'FUELRS'//EPFLCD(FLRG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELRS:',EPFLCD(FLRG),UPYRCD(YEAR))
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
            VALUE = DBLE(0.0)
            CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$FLCRV,9')
            COLUMN = 'T'//EPFLCD(FLRG)//'RSXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T:',EPFLCD(FLRG),':RSXX:',UPYRCD(YEAR))
            VALUE = 1.0
            CALL CVAL(COLUMN,ROW_OL,VALUE,COLUMN_mask,ROW_OL_mask,'EP$FLCRV,10')
            VALUE = -1.0
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,11')
            IF (YEAR .LT. UNXPH) THEN
               KYR = CURIYR + YEAR - 1
               MYR = MIN(KYR, UNYEAR)
               VALUE = (XPRSEL(OL_RG,KYR) - PJRSEL(MYR) * P2025ADJ) * UPGNPD(KYR) - WOPEX(YEAR)
               VALUE = VALUE * PWF(DSCRT,YEAR)
!              WRITE(6,2353) CURIYR+UHBSYR,CURIYR+YEAR+UHBSYR-1,KYR+UHBSYR,MYR+UHBSYR,FLRG,OL_RG,XPRSEL(OL_RG,KYR),PJRSEL(MYR),P2025ADJ,UPGNPD(KYR),WOPEX(YEAR)
 2353          FORMAT(1X,"XPRSEL",6(":",I4),5(":",F12.6))
            ELSE
               DO JYR = 1 , UNFPH - UNXPH + 1
                  KYR = JYR + CURIYR + UNXPH - 2
                  MYR = MIN(KYR, UNYEAR)
                  PDELX(JYR + UNXPH - 1) = (XPRSEL(OL_RG,KYR) - PJRSEL(MYR) * P2025ADJ) * UPGNPD(KYR) - WOPEX(JYR + UNXPH - 1)
               END DO
               VALUE = PVV(PDELX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1 , DSCRT) * PWF(DSCRT,UNXPH - 1)
            END IF

            VALUE = MAX(-(PV_WOPEX(YEAR) - 0.001) , VALUE)

            CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$FLCRV,12')

!           Create Structure to Add Sulfur and Mercury from Resid

!           SO2 EMISSIONS CONSTRAINT

            DO SO2 = 1 , NUM_SO2_GRP
!              IF ((CURIYR + UHBSYR) .EQ. (TRANRULE1 - UPSCLT) .AND. YEAR .GT. UPSCLT)THEN
               IF ((CURIYR + UHBSYR + YEAR - 1) .GE. TRANRULE1)THEN
                  SO2SHR = TSO2_SHR_BY_OLRG(OL_RG,SO2)
               ELSE
                  SO2SHR = SO2_SHR_BY_OLRG(OL_RG,SO2)
               END IF
               IF (SO2SHR .GT. 0.0001)THEN
                  WRITE(SO2CODE,'(I1)') SO2
                  ROW_SO2 = 'EUSO'//'RS'//SO2CODE//UPYRCD(YEAR); call makmsk(ROW_SO2_mask,':EUSORS:',SO2CODE,UPYRCD(YEAR))
                  VALUE = DBLE(UFRSO2(UIRL,OL_RG) * SO2SHR * 0.5)
                  IF (VALUE .GT. ECP_MIN) THEN
                     CALL CVAL(COLUMN,ROW_SO2,VALUE,COLUMN_mask,ROW_SO2_mask,'EP$FLCRV,13')
                     TST_SO2P(SO2,YEAR) = 1
                  END IF
               END IF
            END DO
!           COAL REGION LEVEL CONSTRAINTS FOR EPA TRANSPORT RULE
            IF (TSO2_YR_BY_CLRG .LT. 9999)THEN
               VAL1 = DBLE(UFRSO2(UIRL,OL_RG) * 0.5)
               IF (VAL1 .GT. ECP_MIN)THEN
                  save_row_mask=row_mask

                  CALL EPA$TRANRG_ECP(2,YEAR,OL_RG,1,COLUMN,COLUMN_mask,VAL1)
                  row_mask=save_row_mask
               END IF
            END IF
!
!           Mercury MACT EMISSIONS CONSTRAINTS
!
            IF (USW_HG .GT. 0) THEN
               DO HG = 1 , NUM_HG_GRP
                  WRITE(HGCODE,'(I1)') HG
                  VALUE = DBLE(UFRHG(UIRL,OL_RG) * 0.5)
                  IF (VALUE .GT. ECP_MIN) THEN
                     ROW_HG = 'EUHG'//'RS'//HGCODE//UPYRCD(YEAR); call makmsk(ROW_HG_mask,':EUHGRS:',HGCODE,UPYRCD(YEAR))
                     CALL CVAL(COLUMN,ROW_HG,VALUE,COLUMN_mask,ROW_HG_mask,'EP$FLCRV,14')
                     TST_HGP(HG,YEAR) = 1
                  END IF
               END DO
            END IF

            ROW = 'FUELDS'//EPFLCD(FLRG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELDS:',EPFLCD(FLRG),UPYRCD(YEAR))
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
            VALUE = DBLE(0.0)
            CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$FLCRV,15')
            COLUMN = 'T'//EPFLCD(FLRG)//'DSXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T:',EPFLCD(FLRG),':DSXX:',UPYRCD(YEAR))
            VALUE = 1.0
            CALL CVAL(COLUMN,ROW_OL,VALUE,COLUMN_mask,ROW_OL_mask,'EP$FLCRV,16')
            VALUE = -1.0
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,17')
            IF (YEAR .LT. UNXPH) THEN
               KYR = CURIYR + YEAR - 1
               MYR = MIN(KYR, UNYEAR)
               VALUE = (XPDSEL(OL_RG,KYR) - PJDSEL(MYR) * P2025ADJ) * UPGNPD(KYR) - WOPEX(YEAR)
               VALUE = VALUE * PWF(DSCRT,YEAR)
            ELSE
               DO JYR = 1 , UNFPH - UNXPH + 1
                  KYR = JYR + CURIYR + UNXPH - 2
                  MYR = MIN(KYR, UNYEAR)
                  PDELX(JYR + UNXPH - 1) = (XPDSEL(OL_RG,KYR) - PJDSEL(MYR) * P2025ADJ) * UPGNPD(KYR) - WOPEX(JYR + UNXPH - 1)
               END DO
               VALUE = PVV(PDELX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1 , DSCRT) * PWF(DSCRT,UNXPH - 1)
            END IF
            CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$FLCRV,18')
         END DO
      END DO

!     DECLARE ROW TYPE AND CREATE TRANSFER VECTORS FROM NATIONAL SUPPLY CURVES TO FUEL REGIONS - Natural Gas

      DO YEAR = 1 , UNXPH
         KYR = YEAR + CURIYR - 1
         IF (KYR .LE. UNYEAR) THEN
            P2025ADJ = 1.0
         ELSE
            P2025ADJ = UPCARGRW ** (KYR - UNYEAR)
         END IF

!        Calculate Hours per NG Season 0=>Total

         NG_SP_HRS = 0.0
         DO ISP = 1 , EPNMSP
!           ISP_NG = UNGSSN_ECP(ISP)
            VLS = EPFRST(ISP,YEAR)
            DO WHILE (VLS .GT. 0)
               NG_SP_HRS(0) = NG_SP_HRS(0) + EPWDTH(VLS,YEAR) * 0.001
               NG_SP_HRS(ISP) = NG_SP_HRS(ISP) + EPWDTH(VLS,YEAR) * 0.001
               VLS = EPNEXT(VLS,YEAR)
            END DO
         END DO

         FROM_LABEL = "EP_FLCRV"
         CALL ECP_AVG_HTRT(FROM_LABEL, 1, 0, WIAC, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

         DO ISP_NG = 1 , EPNMSP
            WRITE(C_SP_NG,'(I1)') ISP_NG
            ROW_NG = 'FUELNG'//'X'//UPYRCD(YEAR); call makmsk(ROW_NG_mask,':FUELNGX:',UPYRCD(YEAR))

!           Calculate Minimum Markup Step Size as Function of Standard Size of Advanced Combined Cycle

            M_SIZE = 0.001 * AVG_HTRT(WIAC) * UPMCF(WIAC) * NG_SP_HRS(ISP_NG) * UPLRMIN(WIAC) * 0.001 * UPMSSIZ(WIAC)

            DO FLRG = 1 , UNFRGN
               NG_RG = EPGSMP(FLRG)
               ROW = 'FL_NG'//C_SP_NG//EPFLCD(FLRG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FL_NG:',C_SP_NG,EPFLCD(FLRG),UPYRCD(YEAR))
               CALL CROWTYPE(ROW,'L       ',ROW_mask)
               VALUE = DBLE(0.0)
               CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$FLCRV,19')

!              Create Center Markup Step

               COLUMN = 'T'//EPFLCD(FLRG)//'NG0'//C_SP_NG//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T:',EPFLCD(FLRG),':NG0:',C_SP_NG,UPYRCD(YEAR))

               VALUE = 1.0
               CALL CVAL(COLUMN,ROW_NG,VALUE,COLUMN_mask,ROW_NG_mask,'EP$FLCRV,20')

               VALUE = -1.0
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,21')

               IF (YEAR .LT. UNXPH) THEN
                  KYR = CURIYR + YEAR - 1
                  MYR = MIN(KYR, UNYEAR)
                  VALUE = (XPNGELGR(NG_RG,MYR,ISP_NG) * UPGNPD(MYR) - WHDEX(MYR - (CURIYR-1))) * (UPGNPD(KYR) / UPGNPD(MYR))
                  VALUE = VALUE * PWF(DSCRT,YEAR)
                  QDEL = SQNGELGR(NG_RG,MYR,ISP_NG)
                  Qzero = QDEL
               ELSE
                  DO JYR = 1 , UNFPH - UNXPH + 1
                     KYR = JYR + CURIYR + UNXPH - 2
                     MYR = MIN(KYR, UNYEAR)
                     PDELX(JYR + UNXPH - 1) = (XPNGELGR(NG_RG,MYR,ISP_NG) * UPGNPD(MYR) - WHDEX(MYR - (CURIYR - 1))) * (UPGNPD(KYR) / UPGNPD(MYR))
                     QDELX(JYR + UNXPH - 1) = SQNGELGR(NG_RG,MYR,ISP_NG)
                     QGWX(JYR + UNXPH - 1) = 1.0
                  END DO
                  VALUE = PVV(PDELX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1 , DSCRT) * PWF(DSCRT,UNXPH - 1)
                  QDEL = PVV(QDELX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1 , DSCRT) * PWF(DSCRT,UNXPH - 1)
                  QGW = PVV(QGWX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1 , DSCRT) * PWF(DSCRT,UNXPH - 1)
                  Qzero = QDEL / QGW
               END IF
               Pzero = VALUE

               CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$FLCRV,22')

               ISTEP = 0
               Qremaining = Qzero
               WRITE(18,3378) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,CURIYR,YEAR,MYR,KYR,FLRG,NG_RG,ISP_NG,ISTEP,COLUMN,Pzero,Qzero,M_SIZE,EL_MRKUP_BETA(ISP_NG),CFNGU(MYR),UPGNPD(KYR), &
                  XPNGELGR(NG_RG,MYR,ISP_NG),Qremaining,WHDEX(MYR - (CURIYR-1)),VALUE

               CALL CBND(UPBND,COLUMN,DBLE(0.0),M_SIZE,COLUMN_mask,'EP$FLCRV,23')
               Qzero = MAX( Qzero , M_SIZE)
               Qremaining = Qzero - M_SIZE

!              Create Lower Priced Steps

               ISTEP = 1
               DO WHILE (ISTEP .LE. 9 .AND. Qremaining .GT. 0.0)
                  WRITE(C_STEP,'(I1)') ISTEP

                  COLUMN = 'T'//EPFLCD(FLRG)//'NG'//C_STEP//C_SP_NG//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T:',EPFLCD(FLRG),':NG:',C_STEP,C_SP_NG,UPYRCD(YEAR))

                  IF (ISTEP .LT. 9) THEN
                     N_SIZE = M_SIZE * (3.0 ** (ISTEP - 1))
                     N_SIZE = MIN( N_SIZE , Qremaining)
                  ELSE
                     N_SIZE = Qremaining
                  END IF

                  CALL CBND(UPBND,COLUMN,DBLE(0.0),N_SIZE,COLUMN_mask,'EP$FLCRV,24')

                  VALUE = 1.0
                  CALL CVAL(COLUMN,ROW_NG,VALUE,COLUMN_mask,ROW_NG_mask,'EP$FLCRV,25')

                  VALUE = -1.0
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,26')

                  IF (YEAR .LT. UNXPH) THEN
                     KYR = CURIYR + YEAR - 1
                     MYR = MIN(KYR, UNYEAR)
                     VALUE = ((XPNGELGR(NG_RG,MYR,ISP_NG) - (EL_MRKUP_BETA(ISP_NG) * (Qzero - Qremaining) / CFNGU(MYR)) / CFNGU(MYR)) * UPGNPD(MYR) - WHDEX(MYR - (CURIYR-1))) * (UPGNPD(KYR) / UPGNPD(MYR))
                     VALUE = VALUE * PWF(DSCRT,YEAR)
                  ELSE
                     DO JYR = 1 , UNFPH - UNXPH + 1
                        KYR = JYR + CURIYR + UNXPH - 2
                        MYR = MIN(KYR, UNYEAR)
                        PDELX(JYR + UNXPH - 1) = ((XPNGELGR(NG_RG,MYR,ISP_NG) - (EL_MRKUP_BETA(ISP_NG) * (Qzero - Qremaining) / CFNGU(MYR)) / CFNGU(MYR)) * UPGNPD(MYR) - WHDEX(MYR - (CURIYR-1))) * &
                           (UPGNPD(KYR) / UPGNPD(MYR))
                     END DO
                     VALUE = PVV(PDELX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1 , DSCRT) * PWF(DSCRT,UNXPH - 1)
                  END IF

                  WRITE(18,3378) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,CURIYR,YEAR,MYR,KYR,FLRG,NG_RG,ISP_NG,ISTEP,COLUMN,Pzero,Qzero,M_SIZE,EL_MRKUP_BETA(ISP_NG),CFNGU(MYR),UPGNPD(KYR), &
                     XPNGELGR(NG_RG,MYR,ISP_NG),Qremaining,WHDEX(MYR - (CURIYR-1)),VALUE

                  Qremaining = Qremaining - N_SIZE
                  CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$FLCRV,27')
                  ISTEP = ISTEP + 1
               END DO

!              Create Upper Priced Steps

               ISTEP = 1
               Qremaining = Qzero
               DO WHILE (ISTEP .LE. 5)
                  C_STEP = CHAR(64 + ISTEP)

                  COLUMN = 'T'//EPFLCD(FLRG)//'NG'//C_STEP//C_SP_NG//UPYRCD(YEAR); call makmsk(COLUMN_mask,':T:',EPFLCD(FLRG),':NG:',C_STEP,C_SP_NG,UPYRCD(YEAR))

                  N_SIZE = M_SIZE * (3.0 ** (ISTEP - 1))
                  IF (ISTEP .LT. 5) THEN
                     CALL CBND(UPBND,COLUMN,DBLE(0.0),N_SIZE,COLUMN_mask,'EP$FLCRV,28')
                  END IF
                  Qremaining = Qremaining + N_SIZE

                  VALUE = 1.0
                  CALL CVAL(COLUMN,ROW_NG,VALUE,COLUMN_mask,ROW_NG_mask,'EP$FLCRV,29')

                  VALUE = -1.0
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,30')

                  IF (YEAR .LT. UNXPH) THEN
                     KYR = CURIYR + YEAR - 1
                     MYR = MIN(KYR, UNYEAR)
                     VALUE = ((XPNGELGR(NG_RG,MYR,ISP_NG) + (EL_MRKUP_BETA(ISP_NG) * (Qremaining - Qzero) / CFNGU(MYR)) / CFNGU(MYR)) * UPGNPD(MYR) - WHDEX(MYR - (CURIYR-1))) * (UPGNPD(KYR) / UPGNPD(MYR))
                     VALUE = VALUE * PWF(DSCRT,YEAR)
                  ELSE
                     DO JYR = 1 , UNFPH - UNXPH + 1
                        KYR = JYR + CURIYR + UNXPH - 2
                        MYR = MIN(KYR, UNYEAR)
                        PDELX(JYR + UNXPH - 1) = ((XPNGELGR(NG_RG,MYR,ISP_NG) + (EL_MRKUP_BETA(ISP_NG) * (Qremaining -Qzero) / CFNGU(MYR)) / CFNGU(MYR)) * UPGNPD(MYR) - WHDEX(MYR - (CURIYR-1))) * &
                           (UPGNPD(KYR) / UPGNPD(MYR))
                     END DO
                     VALUE = PVV(PDELX(UNXPH),ECP_D_FPH,UNFPH - UNXPH + 1 , DSCRT) * PWF(DSCRT,UNXPH - 1)
                  END IF
                  CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$FLCRV,31')
                  WRITE(18,3378) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,CURIYR,YEAR,MYR,KYR,FLRG,NG_RG,ISP_NG,ISTEP,COLUMN,Pzero,Qzero,M_SIZE,EL_MRKUP_BETA(ISP_NG),CFNGU(MYR),UPGNPD(KYR), &
                     XPNGELGR(NG_RG,MYR,ISP_NG),Qremaining,WHDEX(MYR - (CURIYR-1)),VALUE
 3378             FORMAT(1X,"EL_MRKUP_BETA",10(":",I4),":",A8,10(":",E15.6))
                  ISTEP = ISTEP + 1
               END DO
            END DO
         END DO
      END DO
      WRITE(18,2000) CURIYR+UHBSYR,(EL_MRKUP_BETA(ISP_NG),ISP_NG=1,3),0.001*AVG_HTRT(WIAC)*UPMCF(WIAC)*8.76*UPLRMIN(WIAC)*0.001*UPMSSIZ(WIAC),AVGDCR,AVGUDCR,(UPGNPD(JYR+CURIYR-1),JYR=1,UNFPH)
 2000 FORMAT(1X,"UNGNPD:",I4,36(":",F7.3))
      WRITE(18,2001) CURIYR+UHBSYR,(WHDEX(JYR)/UPGNPD(JYR+CURIYR-1),JYR=1,UNFPH)
 2001 FORMAT(1X,"WHDEX:",I4,30(":",F7.3))
      WRITE(18,2002) CURIYR+UHBSYR,(WOPEX(JYR)/UPGNPD(JYR+CURIYR-1),JYR=1,UNFPH)
 2002 FORMAT(1X,"WOPEX:",I4,30(":",F7.3))
      DO FLRG = 1 , UNFRGN
         NG_RG = EPGSMP(FLRG)
         OL_RG = EPCSMP(FLRG)
         CL_RG = EPCLMP(FLRG)
         DO ISP_NG = 1 , EPNMSP
            WRITE(18,3003) CURIYR+UHBSYR,FLRG,CL_RG,NG_RG,OL_RG,ISP_NG,(SPNGELGR(NG_RG,MIN(UNYEAR,JYR+CURIYR-1),ISP_NG),JYR=1,UNFPH)
 3003       FORMAT(1X,"SPNGELGR",6(":",I4),30(":",F7.3))
         END DO
         WRITE(18,2006) CURIYR+UHBSYR,FLRG,CL_RG,NG_RG,OL_RG,(XPRLEL(OL_RG,JYR+CURIYR-1),JYR=1,UNFPH)
 2006    FORMAT(1X,"XPRLEL",5(":",I4),30(":",F7.3))
         WRITE(18,2007) CURIYR+UHBSYR,FLRG,CL_RG,NG_RG,OL_RG,(XPRHEL(OL_RG,JYR+CURIYR-1),JYR=1,UNFPH)
 2007    FORMAT(1X,"XPRHEL",5(":",I4),30(":",F7.3))
         WRITE(18,2008) CURIYR+UHBSYR,FLRG,CL_RG,NG_RG,OL_RG,(XPRSEL(OL_RG,JYR+CURIYR-1),JYR=1,UNFPH)
 2008    FORMAT(1X,"XPRSEL",5(":",I4),30(":",F7.3))
         WRITE(18,2009) CURIYR+UHBSYR,FLRG,CL_RG,NG_RG,OL_RG,(XPDSEL(OL_RG,JYR+CURIYR-1),JYR=1,UNFPH)
 2009    FORMAT(1X,"XPDSEL",5(":",I4),30(":",F7.3))
      END DO

!     Test for Must run in each fuel region by capacity type

      MR_TST = 0
      DO NERC = 1 , UNRGNS
         CALL GETBLD(1,NERC)
         DO YEAR = 1 , UNXPH
            DO IP = 1 , ECP_D_DSP
               DO FLRG = 1 , UNFRGN
                  IF (IP .NE. WIA2) THEN
                     IF (EPECAP_MR(FLRG,IP,YEAR) .GT. 0.0) THEN
                        MR_TST(FLRG,IP,YEAR) = 1
                     END IF
                  ELSE
                     IF (EPECAP_MR(FLRG,WIEC,YEAR) .GT. 0.0 .OR. EPECAP_MR(FLRG,IP,YEAR) .GT. 0.0) THEN
                        MR_TST(FLRG,IP,YEAR) = 1
                     END IF
                  END IF
               END DO
               IF (EPECAP_MR(FLRG,IP,YEAR) .GT. 0.0) THEN
                  WRITE(18,2616) CURIRUN,CURIYR+UHBSYR,NERC,YEAR,IP,(EPECAP_MR(FLRG,IP,YEAR),FLRG=0,UNFRGN)
 2616          FORMAT(1X,"EPECAP_MR_IN_ECP",5(":",I4),20(":",F9.1))
               END IF
            END DO
         END DO
      END DO

!     Create Vectors to Blend Oil and Gas in Appropriate Plant Types

      DO IP = 1 , ECP_D_DSP
         ICLS = HG_CLASS(IP)
         IECP = UCPDSPI(IP)
         IF (UPTTYP(IP) .GT. NW_COAL .AND. (IECP .NE. WICN) .AND. (IECP .NE. WIAN) .AND. (IECP .NE. WISM)) THEN
            DO FPP = 1 , ECP_D_FPP
               FUEL = UPFLTP(IP,FPP)
               IF (FUEL .GT. 0) THEN
                  IF (UPFGAS(FUEL) .GT. 0 .OR. UPFRES(FUEL) .GT. 0 .OR. UPFDIS(FUEL) .GT. 0.0 .OR. UPFHYT(FUEL) .GT. 0.0) THEN
                     DO FLRG = 1 , UNFRGN
!                       GRP = EPCAMP(FLRG)
                        DO YEAR = 1 , UNXPH
                           ROW_CAR = 'EUCARXX'//UPYRCD(YEAR); call makmsk(ROW_CAR_mask,':EUCARXX:',UPYRCD(YEAR))
                           ROW_CO2 = 'EUCARCR'//UPYRCD(YEAR); call makmsk(ROW_CO2_mask,':EUCARCR:',UPYRCD(YEAR))
                           MYR = MIN(CURIYR+YEAR-1,UNYEAR)
                           DO ISP_NG = 1 , EPNMSP
                              WRITE(C_SP_NG,'(I1)') ISP_NG

!                             Create Vectors to Blend Oil and Natural Gas to Feed Appropriate Plant Types - Non - Must Run

                              COLUMN = 'F'//EPFLCD(FLRG)//UPLNTCD(IP)//UPFLCD(FUEL)//C_SP_NG//UPYRCD(YEAR); call makmsk(COLUMN_mask,':F:',EPFLCD(FLRG),UPLNTCD(IP),UPFLCD(FUEL),C_SP_NG,UPYRCD(YEAR))

!                             Fill BTU Balance Rows By Plant Type

                              ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IP)//'XX'//C_SP_NG//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IP),':XX:',C_SP_NG,UPYRCD(YEAR))
                              CALL CROWTYPE(ROW,'L       ',ROW_mask)
                              VALUE = -1.0
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,32')

                              VALCAR = DBLE(0.0)

!                             Use Natural Gas
                              IF (IECP .NE. WIIC) THEN
                                 IF (UPFGAS(FUEL) .GT. 0) THEN
                                    IF (UPFGAS(FUEL) .EQ. 1) THEN
                                       VALUE = UPMXGAS(IP,FLRG,MYR)
                                    ELSE
                                       VALUE = 1.0 - UPMXOIL(IP,FLRG,MYR)
                                    END IF
                                    IF (VALUE .GT. ECP_MIN) THEN
                                       ROW = 'FL_NG'//C_SP_NG//EPFLCD(FLRG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FL_NG:',C_SP_NG,EPFLCD(FLRG),UPYRCD(YEAR))
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,33')
                                       VALCAR = VALCAR + VALUE * ENGEL(MYR) * 0.001 * (1.0 - UPPCEF(IECP))

!                                   WRITE(6,6713) CURIRUN, CURCALYR, CURIYR+YEAR+1988, FLRG, IP, ISP_NG, FPP, FUEL, UPFGAS(FUEL), COLUMN, ROW, VALUE, UPMXGAS(IP,FLRG,MYR), UPMXOIL(IP,FLRG,MYR)
!6713                               FORMAT(1X,"GAS_SHARES_ECP",9(":",I4),2(":",A16),3(":",F21.6))

                                    END IF
                                 END IF
                              ELSE IF (IECP .EQ. WIIC) THEN ! Use Hydrogen Gas
                                  IF (CURIYR+1989 .GE. UPSTYR) THEN 
                                 !IF (TURN_OFF .EQ. .FALSE.) THEN
                                      ! IF (UPFHYT(FUEL) .EQ. 1) THEN
                                          !VALUE = UPMXGAS(IP,FLRG,MYR) ! TODO: If blending figure out percentage of ngas/ h2gas here
                                       VALUE = 1.0
                                       !END IF
                                       IF (VALUE .GT. ECP_MIN) THEN
                                       
                                          ROW = 'FL_H2'//C_SP_NG//EPFLCD(EPCSMP(FLRG))//UPYRCD(YEAR); call makmsk(ROW_mask,':FL_H2:',C_SP_NG,EPFLCD(FLRG),UPYRCD(YEAR))
                                          !write(*,*) "Added FL_H2 row", ROW
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,33_1')
                                          !VALCAR = 0.0
                                       END IF
                                    END IF
                              END IF

!                             Use Residual Fuel Oil

                              IF (UPFRES(FUEL) .GT. 0) THEN
                                 IF (UPFRES(FUEL) .EQ. 1) THEN
                                    VALUE = UPMXOIL(IP,FLRG,MYR)
                                 ELSE
                                    VALUE = 1.0 - UPMXGAS(IP,FLRG,MYR)
                                 END IF
                                 IF (VALUE .GT. ECP_MIN) THEN
                                    ROW = 'FUELRS'//EPFLCD(FLRG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELRS:',EPFLCD(FLRG),UPYRCD(YEAR))
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,34')
                                    VALCAR = VALCAR + VALUE * ERLEL(MYR) * 0.001 * (1.0 - UPPCEF(IECP))
                                 END IF
                              END IF

!                             Use Distillate Fuel Oil

                              IF (UPFDIS(FUEL) .GT. 0) THEN
                                 IF (UPFDIS(FUEL) .EQ. 1) THEN
                                    VALUE = UPMXOIL(IP,FLRG,MYR)
                                 ELSE
                                    VALUE = 1.0 - UPMXGAS(IP,FLRG,MYR)
                                 END IF
                                 IF (VALUE .GT. ECP_MIN) THEN
                                    ROW = 'FUELDS'//EPFLCD(FLRG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELDS:',EPFLCD(FLRG),UPYRCD(YEAR))
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,35')
                                    VALCAR = VALCAR + VALUE * EDSEL(MYR) * 0.001 * (1.0 - UPPCEF(IECP))
                                 END IF
                              END IF

!                             PUT INTO CARBON ROWS

                              IF (VALCAR .GT. ECP_MIN) THEN
                              CALL CVAL(COLUMN,ROW_CAR,VALCAR,COLUMN_mask,ROW_CAR_mask,'EP$FLCRV,36')
!                             Include in Regional CO2 Limits, If Appropriate
                                 DO GRP = 1 , CO2_GRP
                                    IF (CO2_OG_BY_FL(FLRG,GRP) .GT. 0.0)THEN
                                       VALCO2 = VALCAR * CO2_OG_BY_FL(FLRG,GRP)
                                       ROW_CARR = 'EUCAR'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(ROW_CARR_mask,':EUCAR:',CO2_RG(GRP),UPYRCD(YEAR))
                                       CALL CVAL(COLUMN,ROW_CARR,VALCO2,COLUMN_mask,ROW_CARR_mask,'EP$FLCRV,37')
                                       IF (UPPCEF(IECP) .GT. 0.0)THEN
                                          VALCO2 = VALCO2 * UPPCEF(IECP)
                                          CALL CVAL(COLUMN,ROW_CO2,VALCO2,COLUMN_mask,ROW_CO2_mask,'EP$FLCRV,38')
                                       END IF
                                    END IF
                                 END DO
                              END IF

!                             Create Vectors to Blend Oil and Natural Gas to Feed Appropriate Plant Types - Must Run Only

                              IF (MR_TST(FLRG,IP,YEAR) .GT. 0) THEN
                                 COLUMN = 'Y'//EPFLCD(FLRG)//UPLNTCD(IP)//UPFLCD(FUEL)//C_SP_NG//UPYRCD(YEAR); call makmsk(COLUMN_mask,':Y:',EPFLCD(FLRG),UPLNTCD(IP),UPFLCD(FUEL),C_SP_NG,UPYRCD(YEAR))

!                                Fill BTU Balance Rows By Plant Type

                                 ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IP)//'MR'//C_SP_NG//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IP),':MR:',C_SP_NG,UPYRCD(YEAR))
                                 CALL CROWTYPE(ROW,'L       ',ROW_mask)
                                 VALUE = -1.0
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,40')

                                 VALCAR = DBLE(0.0)

!                                Use Natural Gas

                                 IF (UPFGAS(FUEL) .GT. 0) THEN
                                    IF (UPFGAS(FUEL) .EQ. 1) THEN
                                       VALUE = UPMXGAS_MR(IP,FLRG,MYR)
                                    ELSE
                                       VALUE = 1.0 - UPMXOIL_MR(IP,FLRG,MYR)
                                    END IF
                                    IF (VALUE .GT. ECP_MIN) THEN
                                       ROW = 'FL_NG'//C_SP_NG//EPFLCD(FLRG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FL_NG:',C_SP_NG,EPFLCD(FLRG),UPYRCD(YEAR))
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,41')
                                       VALCAR = VALCAR + VALUE * EGFEL(MYR) * 0.001 * (1.0 - UPPCEF(IECP))
                                    END IF
                                 END IF

!                                Use Residual Fuel Oil

                                 IF (UPFRES(FUEL) .GT. 0) THEN
                                    IF (UPFRES(FUEL) .EQ. 1) THEN
                                       VALUE = UPMXOIL_MR(IP,FLRG,MYR)
                                    ELSE
                                       VALUE = 1.0 - UPMXGAS_MR(IP,FLRG,MYR)
                                    END IF
                                    IF (VALUE .GT. ECP_MIN) THEN
                                       ROW = 'FUELRS'//EPFLCD(FLRG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELRS:',EPFLCD(FLRG),UPYRCD(YEAR))
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,42')
                                       VALCAR = VALCAR + VALUE * ERLEL(MYR) * 0.001 * (1.0 - UPPCEF(IECP))
                                    END IF
                                 END IF

!                                Use Distillate Fuel Oil

                                 IF (UPFDIS(FUEL) .GT. 0) THEN
                                    IF (UPFDIS(FUEL) .EQ. 1) THEN
                                       VALUE = UPMXOIL_MR(IP,FLRG,MYR)
                                    ELSE
                                       VALUE = 1.0 - UPMXGAS_MR(IP,FLRG,MYR)
                                    END IF
                                    IF (VALUE .GT. ECP_MIN) THEN
                                       ROW = 'FUELDS'//EPFLCD(FLRG)//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELDS:',EPFLCD(FLRG),UPYRCD(YEAR))
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$FLCRV,43')
                                       VALCAR = VALCAR + VALUE * EDSEL(MYR) * 0.001 * (1.0 - UPPCEF(IECP))
                                    END IF
                                 END IF

!                                PUT INTO CARBON ROWS

                                 IF (VALCAR .GT. ECP_MIN) THEN
                                 CALL CVAL(COLUMN,ROW_CAR,VALCAR,COLUMN_mask,ROW_CAR_mask,'EP$FLCRV,44')
!                                Include in Regional CO2 Limits, If Appropriate
                                    DO GRP = 1 , CO2_GRP
                                       IF (CO2_OG_BY_FL(FLRG,GRP) .GT. 0.0)THEN
                                          VALCO2 = VALCAR * CO2_OG_BY_FL(FLRG,GRP)
                                          ROW_CARR = 'EUCAR'//CO2_RG(GRP)//UPYRCD(YEAR); call makmsk(ROW_CARR_mask,':EUCAR:',CO2_RG(GRP),UPYRCD(YEAR))
                                          CALL CVAL(COLUMN,ROW_CARR,VALCO2,COLUMN_mask,ROW_CARR_mask,'EP$FLCRV,45')
                                          IF (UPPCEF(IECP) .GT. 0.0)THEN
                                             VALCO2 = VALCO2 * UPPCEF(IECP)
                                             CALL CVAL(COLUMN,ROW_CO2,VALCO2,COLUMN_mask,ROW_CO2_mask,'EP$FLCRV,46')
                                          END IF
                                       END IF
                                    END DO
                                 END IF

                              END IF
                           END DO         ! ISP_NG
                        END DO            ! YEAR
                     END DO               ! FLRG
                  END IF                  ! GAS or OIL
               END IF                     ! Some Fuel
            END DO                        ! FPP
         END IF                           ! Not Coal or Nuclear
      END DO                              ! IP

!
      DO YEAR = 1 , UNXPH
         DO SO2 = 1, NUM_SO2_GRP
            WRITE(SO2CODE,'(I1)') SO2
            ROW_SO2 = 'EUSO2X'//SO2CODE//UPYRCD(YEAR); call makmsk(ROW_SO2_mask,':EUSO2X:',SO2CODE,UPYRCD(YEAR))
            IF (TST_SO2P(SO2,YEAR) .GT. 0) THEN
               ROW= 'EUSO'//'RS'//SO2CODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUSORS:',SO2CODE,UPYRCD(YEAR))
               CALL CVAL(ROW,UPOBJ,ECP_MIN,ROW_mask,UPOBJ,'EP$FLCRV,48')
               CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$FLCRV,49')
               CALL CVAL(ROW,ROW_SO2,DBLE(1.0),ROW_mask,ROW_SO2_mask,'EP$FLCRV,50')
               CALL CROWTYPE(ROW,'L       ',ROW_mask)
               CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$FLCRV,51')
            END IF
         END DO

!        SET UP STRUCTURE TO MOVE MERCURY FROM RESID ROWS TO NATIONAL CONSTRAINT

         IF (USW_HG .GT. 0) THEN
            DO HG = 1, NUM_HG_GRP
               WRITE(HGCODE,'(I1)') HG
               ROW_HG = 'EUHGXX'//UPRGCD(HG)//UPYRCD(YEAR); call makmsk(ROW_HG_mask,':EUHGXX:',UPRGCD(HG),UPYRCD(YEAR))
               IF (TST_HGP(HG,YEAR) .GT. 0) THEN
                  ROW = 'EUHG'//'RS'//HGCODE//UPYRCD(YEAR); call makmsk(ROW_mask,':EUHGRS:',HGCODE,UPYRCD(YEAR))
                  CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$FLCRV,52')
                  CALL CVAL(ROW,ROW_HG,DBLE(1.0),ROW_mask,ROW_HG_mask,'EP$FLCRV,53')
                  CALL CVAL(ROW,UPOBJ,ECP_MIN,ROW_mask,UPOBJ,'EP$FLCRV,54')
                  CALL CROWTYPE(ROW,'L       ',ROW_mask)
                  CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$FLCRV,55')
               END IF
            END DO
         END IF
      END DO
!
      IF (TURN_ON_DEBUGGING .EQ. .TRUE.) THEN
         CLOSE(unit_num_ephrts_debug_file)
      END IF
      RETURN
      END
!
!     EP$CF  SETS UP FREE ROWS FOR CAPACITY AND GENERATION FOR CAPACITY FACTORS
!
      SUBROUTINE EP$CF
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'uefdout'

      REAL*8 VALUE
      INTEGER YEAR,NERC,PLT
      CHARACTER*16 ROW, COLUMN

      ecpsub='EP$CF'

!     DECLARE FREE ROWS
!
      DO YEAR = 1 , UNXPH
        DO PLT = 1 , ECP_D_CAP
!         IF (UPVTYP(PLT) .EQ. 1)THEN
            DO NERC = 1 , UNRGNS
!     GENERATION
              ROW = 'F'//UPRGCD(NERC)//UPLNTCD(PLT)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(PLT),':GEN:',UPYRCD(YEAR))
              CALL CROWTYPE(ROW,'G       ',ROW_mask)
              VALUE = 0.0
              CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$CF,1')
              COLUMN = 'H'//UPRGCD(NERC)//UPLNTCD(PLT)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':H:',UPRGCD(NERC),UPLNTCD(PLT),':GEN:',UPYRCD(YEAR))
              VALUE = -1.0
              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CF,2')
              VALUE = -0.0001
              CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$CF,3')

              COLUMN = 'H'//UPRGCD(NERC)//UPLNTCD(PLT)//'SAF'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':H:',UPRGCD(NERC),UPLNTCD(PLT),':SAF:',UPYRCD(YEAR))
              VALUE = 1.0
              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CF,4')
              IF (YEAR .LT. UNXPH) THEN
                 VALUE = 1000.0 * UPGNPD(CURIYR + YEAR - 1)
              ELSE
                 VALUE = 2000.0 * UPGNPD(CURIYR + YEAR - 1)
              END IF
              CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$CF,5')


!     COFIRING BY NERC REGION AND PLANT
             IF (PLT .LE. WIIS)THEN
              ROW = 'F'//UPRGCD(NERC)//UPLNTCD(PLT)//'GWD'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(PLT),':GWD:',UPYRCD(YEAR))
              CALL CROWTYPE(ROW,'N       ',ROW_mask)
             END IF
!     SEPARATE OIL AND GAS FUEL USE - ! no intersections with these rows - drop
!             IF (PLT .GT. WIIS .AND. PLT .LE. WIFC)THEN
!              ROW = 'F'//UPRGCD(NERC)//UPLNTCD(PLT)//'GNG'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(PLT),':GNG:',UPYRCD(YEAR))
!              CALL CROWTYPE(ROW,'N       ',ROW_mask)
!              ROW = 'F'//UPRGCD(NERC)//UPLNTCD(PLT)//'GOL'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(PLT),':GOL:',UPYRCD(YEAR))
!              CALL CROWTYPE(ROW,'N       ',ROW_mask)
!             END IF
!     CAPACITY
              ROW = 'F'//UPRGCD(NERC)//UPLNTCD(PLT)//'CAP'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(PLT),':CAP:',UPYRCD(YEAR))
              CALL CROWTYPE(ROW,'N       ',ROW_mask)
            END DO
!         END IF
        END DO                                       !PLT
      END DO                                         !YEAR
!
      RETURN
      END
!
!     EP$ELAST SETS UP THE CAPACITY SUPPLY CURVES
!
      SUBROUTINE EP$ELAST
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'uefdout'
!
      REAL*8 VALUE,DIGITS2,KW(ECP_D_FPH),PV_KW,LIM(0:ECP_D_FPH),PV_LIM
      REAL*8 PVV,DSCRT
      INTEGER*4 PLANT,IECP,ICAP,YEAR,OLYR,FULLYR,STEPS,JYR
      CHARACTER*1 STEP,BLD_TYP
      CHARACTER*2 PLNT_CD,PLNT_TP
      CHARACTER*16 ROW,COL
!
      ecpsub='EP$ELAST'

      DSCRT = DBLE(AVGDCR)
      DO YEAR = 1 , UNFPH - UNXPH + 1
        KW(YEAR) = 1.0
      END DO
        PV_KW = PVV(KW,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
      DO PLANT = 1 , ECP_D_CAP
         IF (PLANT .NE. WIWL .AND. PLANT .NE. WIPT) THEN
            IF (UCPDSPIS(PLANT) .GT. 0) THEN                ! DISPATCHABLE
               IECP = UCPDSPIS(PLANT)
               ICAP = UCPDSPI(IECP)
               PLNT_CD = UPLNTCD(UCPDSPI(IECP))
               PLNT_TP = 'DS'
               BLD_TYP = 'B'
            ELSE IF (UCPINTIS(PLANT) .GT. 0) THEN           ! INTERMITTENT
               IECP = UCPINTIS(PLANT)
               ICAP = UCPINTI(IECP)
               PLNT_CD = UPLNTCD(UCPINTI(IECP))
               PLNT_TP = 'IN'
               BLD_TYP = 'I'
            ELSE IF (UCPSTOIS(PLANT) .GT. 0) THEN           ! STORAGE
               IECP = UCPSTOIS(PLANT)
               ICAP = UCPSTOI(IECP)
               PLNT_CD = UPLNTCD(UCPSTOI(IECP))
               PLNT_TP = 'ST'
               BLD_TYP = 'I'
            ELSE IF (UCPRNWIS(PLANT) .GT. 0) THEN           ! RENEWABLE
               IECP = UCPRNWIS(PLANT)
               ICAP = UCPRNWI(IECP)
               PLNT_CD = UPLNTCD(UCPRNWI(IECP))
               PLNT_TP = 'RN'
               BLD_TYP = 'B'
            ELSE IF (UCPDGNIS(PLANT) .GT. 0) THEN           ! DISTRIBUTED
               IECP = UCPDGNIS(PLANT)
               ICAP = UCPDGNI(IECP)
               PLNT_CD = UPLNTCD(UCPDGNI(IECP))
               PLNT_TP = 'DG'
               BLD_TYP = 'B'
            END IF

            IF (ESTSWTCH(ICAP) .GT. 0)THEN
               DO YEAR = 1 , UNXPH
                  IF ((YEAR + UPPLYR(ICAP)) .LE. UNXPH)THEN
                     OLYR = YEAR + UPPLYR(ICAP)
                     IF (OLYR .LT. UNXPH) THEN
                        FULLYR = OLYR + CURIYR + UHBSYR - 1
                     ELSE
                        FULLYR = UNFPH + CURIYR + UHBSYR - 1
                     END IF
                     IF (UPOVR(ICAP) .LT. 9999.0 .AND. UPAVLYR(ICAP) .LE. FULLYR)THEN
                        DO STEPS = 1 , ESTSWTCH(ICAP)
                           WRITE (STEP,'(I1)') STEPS
                           ROW = 'LU'//PLNT_CD//PLNT_TP //STEP//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',PLNT_CD,PLNT_TP ,STEP,UPYRCD(YEAR)) ! PLNT_TP is for  DispatchType set
                           CALL CROWTYPE(ROW,'L       ',ROW_mask)
                           IF (UPAVLYR(ICAP) .LE. FULLYR) THEN
                              IF (OLYR .LT. UNXPH) THEN
                                 VALUE = DBLE(ESTCPLIM(ICAP,STEPS) * 0.001) * DBLE((1.0 + ESTCPSTP(ICAP,1)) ** FLOAT(YEAR - 1))
                              ELSE
                                 LIM(0) = ESTCPLIM(ICAP,STEPS)
                                 DO JYR = 1 , UNFPH - UNXPH + 1
                                    IF (UPAVLYR(ICAP) .GT. JYR + UNXPH + CURIYR + UHBSYR - 2) THEN
                                       LIM(JYR) = 0.0
                                    ELSE IF (UPAVLYR(ICAP) .EQ. JYR + UNXPH + CURIYR + UHBSYR - 2) THEN
!                                      LIM(JYR) = ESTMNADD(ICAP)
                                       LIM(JYR) = ESTCPLIM(ICAP,STEPS)
                                    ELSE
!                                      LIM(JYR) = MAX(LIM(JYR-1) , ESTCPLIM(ICAP,STEPS)) * (1.0 + ESTCPSTP(ICAP,1))
                                       LIM(JYR) = MAX(LIM(JYR-1) * (1.0 + ESTCPSTP(ICAP,1)), ESTCPLIM(ICAP,STEPS))
                                    END IF
                                 END DO
!                                PV_LIM = 0.001 * PVV(LIM(1),ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
                                 PV_LIM = 0.001 * PVV(LIM(1),ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
                                 PV_LIM = PV_LIM / PV_KW
!                                IF (OLYR .EQ. UNXPH)VALUE = DBLE(ESTCPLIM(ICAP,STEPS) * 0.001) * DBLE((1.0 + ESTCPSTP(ICAP,1)) ** 5.0)
!                                LET YEAR 3 ELASTICITY BE UNBOUNDED
                                 IF (OLYR .EQ. UNXPH)PV_LIM = DBLE(999.99)
                                 IF (USW_DIGIT .GT. 0)THEN
                                 VALUE = DIGITS2(PV_LIM , 4)
                                 ELSE
                                    VALUE = PV_LIM
                                 END IF
                              END IF
!                             IF ((CURIYR + OLYR - 1) .LE. MNUMYR .AND. STEPS .EQ. 1)THEN
!                                VALUE = VALUE - DBLE(UPCAPFLR(ICAP , CURIYR + OLYR - 1))
!                                VALUE = MAX(VALUE,DBLE(0.0))
!                             END IF
                           ELSE
                              VALUE = DBLE(0.0)
                           END IF
                           CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ELAST,1')
!
!                          ACCOUNT FOR PLANNED ADDITIONS IN FIRST STEP
!
                           IF ((CURIYR + OLYR - 1) .LE. MNUMYR .AND. STEPS .EQ. 1)THEN
                              IF(ESTYRPLN(ICAP , CURIYR + OLYR - 1) .GT. 0.0 .OR. UPCAPFLR(ICAP , CURIYR + OLYR - 1) .GT. 0.0)THEN
                                 COL = BLD_TYP//'U'//PLNT_CD//'NP'//STEP//UPYRCD(YEAR); call makmsk(COL_mask,BLD_TYP,':U:',PLNT_CD,':NP:',STEP,UPYRCD(YEAR))
                                 VALUE = DBLE(MIN(ESTCPLIM(ICAP,STEPS),(ESTYRPLN(ICAP , CURIYR + OLYR - 1) + UPCAPFLR(ICAP, CURIYR + OLYR - 1))) * 0.001)
                                 CALL CVAL(COL,ROW,DBLE(1.0),COL_mask,ROW_mask,'EP$ELAST,2')
                                 CALL CBND(UPBND,COL,VALUE,VALUE,COL_mask,'EP$ELAST,3')
                              END IF
                           END IF

                           IF (ICAP .EQ. WIDS) THEN
                              WRITE(18,4181) CURIRUN, CURCALYR, CURIYR+YEAR+1988, FULLYR, STEPS, PLANT, IECP, ICAP, ESTSWTCH(PLANT), UPAVLYR(ICAP), &
                                 PLNT_CD, PLNT_TP, ROW, &
                                 UPOVR(ICAP), ESTCPLIM(PLANT,STEPS), ESTCPSTP(ICAP,1), ESTMNADD(ICAP), UPCAPFLR(ICAP,CURIYR), VALUE
 4181                         FORMAT(1X,"ESTSWTCH_DS",10(",",I5),2(",",A2),",",A16,6(",",F21.6))
                           END IF

                        END DO
                     END IF                     ! UPOVR(ICAP)
                  END IF
               END DO
            END IF
         END IF
      END DO
      RETURN
      END
!
!     EP$BLDLIM ENFORCES NATIONAL AND/OR REGIONAL CAPACITY LIMITS, IF APPROPRIATE
!
      SUBROUTINE EP$BLDLIM
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'entcntl'
      include 'uefdout'
!
      REAL*8 VALUE
      INTEGER*4 PLANT,IECP,ICAP,REG
      CHARACTER*2 PLNT_CD
      CHARACTER*16 ROW

      ecpsub='EP$BLDLIM'

!
      DO PLANT = 1 , ECP_D_CAP
         IF (UCPDSPIS(PLANT) .GT. 0) THEN                ! DISPATCHABLE
            IECP = UCPDSPIS(PLANT)
            ICAP = UCPDSPI(IECP)
            PLNT_CD = UPLNTCD(UCPDSPI(IECP))
         ELSE IF (UCPINTIS(PLANT) .GT. 0) THEN           ! INTERMITTENT
            IECP = UCPINTIS(PLANT)
            ICAP = UCPINTI(IECP)
            PLNT_CD = UPLNTCD(UCPINTI(IECP))
         ELSE IF (UCPSTOIS(PLANT) .GT. 0) THEN           ! STORAGE
            IECP = UCPSTOIS(PLANT)
            ICAP = UCPSTOI(IECP)
            PLNT_CD = UPLNTCD(UCPSTOI(IECP))
         ELSE IF (UCPRNWIS(PLANT) .GT. 0) THEN           ! RENEWABLE
            IECP = UCPRNWIS(PLANT)
            ICAP = UCPRNWI(IECP)
            PLNT_CD = UPLNTCD(UCPRNWI(IECP))
         ELSE IF (UCPDGNIS(PLANT) .GT. 0) THEN           ! DISTRIBUTED
            IECP = UCPDGNIS(PLANT)
            ICAP = UCPDGNI(IECP)
            PLNT_CD = UPLNTCD(UCPDGNI(IECP))
         END IF

!        IF NATIONAL LEVEL LIMIT EXISTS FOR THIS CAPACITY TYPE, SET RHS

         IF (UPBLDREG(PLANT,MNUMNR) .GT. 0.0 .AND. UPBLDREG(PLANT,MNUMNR) .LT. 999.0)THEN
            ROW = 'LU'//PLNT_CD//'BLDX'; call makmsk(ROW_mask,':LU:',PLNT_CD,':BLDX:')
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
            VALUE = DBLE(UPBLDREG(PLANT,MNUMNR))
            CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$BLDLIM,1')
         END IF

!        IF REGIONAL LEVEL LIMIT EXISTS FOR THIS CAPACITY TYPE, SET RHS

         DO REG = 1 , UNRGNS
         IF (UPBLDREG(PLANT,REG) .GT. 0.0 .AND. UPBLDREG(PLANT,REG) .LT. 999.0)THEN
               ROW = 'L'//UPRGCD(REG)//PLNT_CD//'BLDX'; call makmsk(ROW_mask,':L:',UPRGCD(REG),PLNT_CD,':BLDX:')
               CALL CROWTYPE(ROW,'L       ',ROW_mask)
               VALUE = DBLE(UPBLDREG(PLANT,REG))
               CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$BLDLIM,2')
            END IF
         END DO

      END DO

      RETURN
      END
!
!     EP$SUBLIM ENFORCES CAPACITY LIMITS ON SUBSIDIES, IF APPROPRIATE
!
      SUBROUTINE EP$SUBLIM
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'cdsparms'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'entcntl'
      include 'uefdout'
      include 'ecp_nuc'
      include 'emm_aimms'
!
      REAL*8 VALUE,BND_VAL,OBJ_VAL,LIM_STP,PVV,PV$SOM,SOM(ECP_D_FPH),TMP_CAP
      REAL*8 DSCRT,PWF
      INTEGER*4 PLANT,IECP,ICAP,REG,STP,GSYR1,GSYRL,OLYR,JYR
      CHARACTER*2 PLNT_CD,C_STP
      CHARACTER*16 ROW,COL
!
      COMMON/NUC_SUBSIDY/ NUC_PTC
      REAL*8 NUC_PTC(ECP_D_XPH)

      ecpsub='EP$SUBLIM'

!
      DO PLANT = 1 , ECP_D_CAP
         IF (UCPDSPIS(PLANT) .GT. 0) THEN                ! DISPATCHABLE
            IECP = UCPDSPIS(PLANT)
            ICAP = UCPDSPI(IECP)
            PLNT_CD = UPLNTCD(UCPDSPI(IECP))
         ELSE IF (UCPINTIS(PLANT) .GT. 0) THEN           ! INTERMITTENT
            IECP = UCPINTIS(PLANT)
            ICAP = UCPINTI(IECP)
            PLNT_CD = UPLNTCD(UCPINTI(IECP))
         ELSE IF (UCPSTOIS(PLANT) .GT. 0) THEN           ! STORAGE
            IECP = UCPSTOIS(PLANT)
            ICAP = UCPSTOI(IECP)
            PLNT_CD = UPLNTCD(UCPSTOI(IECP))
         ELSE IF (UCPRNWIS(PLANT) .GT. 0) THEN           ! RENEWABLE
            IECP = UCPRNWIS(PLANT)
            ICAP = UCPRNWI(IECP)
            PLNT_CD = UPLNTCD(UCPRNWI(IECP))
         ELSE IF (UCPDGNIS(PLANT) .GT. 0) THEN           ! DISTRIBUTED
            IECP = UCPDGNIS(PLANT)
            ICAP = UCPDGNI(IECP)
            PLNT_CD = UPLNTCD(UCPDGNI(IECP))
         END IF

!        CHECK TO SEE IF ANY SUBSIDY FOR THIS CAPACITY TYPE

         IF (UPSUBCAS(PLANT) .GT. 0)THEN

!           IDENTIFY CAPACITY TYPES WITH LIMITS ON SUBSIDIES

            IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
               IF (UPSUBLIM(PLANT) .GT. 0.0)THEN
                  IF ((PLANT .NE. WIAN .AND. PLANT .NE. WISM .AND. PLANT .NE. WIGN) .OR. UPSUBFCF(PLANT) .LE. 0) THEN
                     LIMSUB(PLANT) = 1.0
                     CAPSUB(PLANT) = UPSUBLIM(PLANT)
                  ELSE
                     LIMSUB(PLANT) = UPSUBLIM(PLANT)
                     CAPSUB(PLANT) = 0.0
                  END IF
               ELSE
                  LIMSUB(PLANT) = 0.0
               END IF
            END IF

!           DECLARE ROW TYPE AND RHS FOR LIMIT ON SUBSIDIZED CAPACITY, IF APPROPRIATE

            IF (LIMSUB(PLANT) .GT. 0.0)THEN

               IF ((PLANT .NE. WIAN .AND. PLANT .NE. WISM .AND. PLANT .NE. WIGN) .OR. UPSUBFCF(PLANT) .LE. 0) THEN

!                 PTC (ZERO OUT SUBSIDIZED CAPACITY IF IT HAS EXPIRED)

                  IF (UPSUBCAS(PLANT) .EQ. 1)THEN
                    IF (UPGSUBPT(PLANT) .LE. 0)THEN
                     IF (UHBSYR + CURIYR + UPPLYR(PLANT)  .GT. UPGSYL(PLANT)) THEN
                        CAPSUB(PLANT) = 0.0
                     END IF
                    ELSE
                     IF (UPGSUBYR(PLANT,MIN(MNUMYR,CURIYR + UPPLYR(PLANT))) .LE. 0.0) THEN
                        CAPSUB(PLANT) = 0.0
                     END IF
                    END IF
                  END IF
!
                  IF (CAPSUB(PLANT) .GE. UPMSSIZ(PLANT) * UPLRMIN(PLANT) * 0.001)THEN
                   IF (UPSUBLIM(PLANT) .GT. 0.0 .AND. UPSUBLIM(PLANT) .LT. 999.0)THEN
                     ROW = 'LU'//PLNT_CD//'SUBX'; call makmsk(ROW_mask,':LU:',PLNT_CD,':SUBX:')
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     VALUE = DBLE(CAPSUB(PLANT))
                     CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$SUBLIM,1')
                   END IF
                  ELSE

!                    IF SUBSIDIZED CAPACITY ALREADY BUILT, TURN OFF SUBSIDY

                     LIMSUB(PLANT) = 0.0

!                    PTC (RESET LAST YEAR OF SUBSITY BECAUSE IT'S NO LONGER AVAILABLE)

                     IF (UPSUBCAS(PLANT) .EQ. 1) THEN

                        UPGSYL(PLANT) = MIN(UPGSYL(PLANT),UHBSYR + CURIYR + UPPLYR(PLANT) - 1)

!                       ITC

                     ELSE IF (UPSUBCAS(PLANT) .EQ. 2)THEN
                        UPOVR(PLANT) = UPOVR(PLANT) / (1.0 - UPCSB(PLANT))
                        UPCSB(PLANT) = 0.0

!                       LOAN GUARANTEE (DEBT FRACTION)

                     ELSE IF (UPSUBCAS(PLANT) .EQ. 3)THEN
                        UPNFDTA(PLANT) = 0.0

!                       LOAN GUARANTEE (COST OF DEBT)

                     ELSE IF (UPSUBCAS(PLANT) .EQ. 4)THEN
                        UPNIRTEA(PLANT) = 0.0
                     END IF

!                    IF REGIONS LIMITED WHILE SUBSIDIZED, THEN ALLOW UNSUBSIZED IN OTHER REGIONS

                     DO REG = 1 , UNRGNS
                        IF (UPBLDREG(PLANT,MNUMNR) .GT. 999.0 .AND. UPBLDREG(PLANT,REG) .EQ. 0.0) UPBLDREG(PLANT,REG) = 999.9
                     END DO
                  END IF
               ELSE

!                 NUCLEAR PTC (IF SHARED NOT FIRST COME, FIRST SERVED)

                  IF (UPSUBCAS(PLANT) .EQ. 1) THEN
                     IF (UHBSYR + CURIYR + UPPLYR(PLANT) .LE. UPGSYL(PLANT)) THEN
                        ROW = 'LU'//PLNT_CD//'SUBX'; call makmsk(ROW_mask,':LU:',PLNT_CD,':SUBX:')
                        CALL CROWTYPE(ROW,'G       ',ROW_mask)
                        VALUE = 0.0
                        CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$SUBLIM,2')

!                       DETERMINE PRESENT VALUE OF PRODUCTION TAX CREDIT SUBSIDIES

                        GSYR1 = UPGSY1(PLANT) - UHBSYR
                        GSYRL = UPGSYL(PLANT) - UHBSYR
                        NUC_PTC = 0.0
                        OLYR = UPPLYR(PLANT) + 1
                        IF (CURIYR + OLYR - 1 .LT. GSYR1) THEN
                           OLYR = GSYR1 - CURIYR + 1
                        END IF

                        IF ((UPGSUB(PLANT) .GT. 0.0 .AND. (CURIYR + OLYR - 1) .GE. GSYR1 .AND. (CURIYR + OLYR - 1) .LE. GSYRL) .OR.  &
                             UPGSUBPT(PLANT) .GT. 0) THEN
                           CALL GETBLD(1,1)
                           DSCRT = EPDSCRT
                           DO JYR = 1 , UPGSYR(PLANT)
                            IF (UPGSUBPT(PLANT) .LE. 0)THEN
                              SOM(JYR) = (UPGSUB(PLANT) * 8.76 * UPMCF(PLANT))
                            ELSE
                              SOM(JYR) = (UPGSUBYR(PLANT,min(MNUMYR , CURIYR + OLYR + JYR - 2)) * 8.76 * UPMCF(PLANT))
                            END IF

                              IF (UPGSMX(PLANT) .GT. 0) SOM(JYR) = MIN(SOM(JYR),UPGSMX(PLANT))

!                             IF PTC IS REAL, THEN APPLY DEFLATOR

                              IF (UPGSTY(PLANT) .LE. 0) SOM(JYR) = SOM(JYR) * UPGNPD(JYR + CURIYR + OLYR - 2)

!                             ADJUST FOR TAX BENEFIT

                              SOM(JYR) = SOM(JYR) / (1.0 - UPTXRT)
                           END DO
                           PV$SOM = PVV(SOM,ECP_D_FPH,UPGSYR(PLANT),DBLE(DSCRT)) * PWF(DBLE(DSCRT),OLYR - 1)
                        ELSE
                           PV$SOM = 0.0
                        END IF
                        NUC_PTC(1) = PV$SOM

!                       CREATE SUBSIDY SUPPLY STEPS

                        DO STP = 1 , 25
                           LIM_STP = UPSUBLIM(PLANT) + DBLE(STP) - 1.0
                           IF (LIM_STP .GT. CAPSUB(PLANT)) THEN

                              IF (STP .LT. 10) THEN
                                 WRITE(C_STP,'("0",I1)') STP
                              ELSE
                                 WRITE(C_STP,'(I2)') STP
                              END IF

                              COL = 'LU'//PLNT_CD//'SB'//C_STP; call makmsk(COL_mask,':LU:',PLNT_CD,':SB:',C_STP)

                              IF (STP .EQ. 1) THEN
                                 BND_VAL = LIM_STP - CAPSUB(PLANT)
                              ELSE
                                 BND_VAL = MIN(1.0 , LIM_STP - CAPSUB(PLANT))
                              END IF
                              CALL CBND(UPBND,COL,DBLE(0.0),BND_VAL,COL_mask,'EP$SUBLIM,3')

                              OBJ_VAL = -1.0 * NUC_PTC(1) * UPSUBLIM(PLANT) / LIM_STP
                              CALL CVAL(COL,UPOBJ,OBJ_VAL,COL_mask,UPOBJ,'EP$SUBLIM,4')

                              CALL CVAL(COL,ROW,DBLE(-1.0),COL_mask,ROW_mask,'EP$SUBLIM,5')
                           END IF
                        END DO
                     ELSE
                        LIMSUB(PLANT) = 0.0
                     END IF

!                    ITC

                  ELSE IF (UPSUBCAS(PLANT) .EQ. 2) THEN
                     UPOVR(PLANT) = UPOVR(PLANT) / (1.0 - UPCSB(PLANT))
                     UPCSB(PLANT) = 0.0

!                    LOAN GUARANTEE (DEBT FRACTION)

                  ELSE IF (UPSUBCAS(PLANT) .EQ. 3)THEN
                     UPNFDTA(PLANT) = 0.0

!                    LOAN GUARANTEE (COST OF DEBT)

                  ELSE IF (UPSUBCAS(PLANT) .EQ. 4)THEN
                     UPNIRTEA(PLANT) = 0.0
                  END IF

!                 NUCLEAR LIMIT ON OUT YEAR SUBSIDY BUILDS

                  IF (UPSUBCAS(PLANT) .EQ. 1)THEN
                     IF (UHBSYR + CURIYR + UPPLYR(PLANT)  .LT. UPGSYL(PLANT)) THEN
                        DO STP = 1 , ECP_D_SSTP
                           WRITE(C_STP,'(I1)') STP
                           ROW = 'LU'//PLNT_CD//'STP'//C_STP(1:1); call makmsk(ROW_mask,':LU:',PLNT_CD,':STP:',C_STP(1:1))
                           CALL CROWTYPE(ROW,'L       ',ROW_mask)
                           IF (CURIYR + UHBSYR + UPPLYR(PLANT) .LT. UPAVLYR(PLANT)) THEN
                              TMP_CAP = 0.001 * ESTCPLIM(PLANT,STP) / (1.0 + ESTCPSTP(PLANT,STP))
                           ELSE
                              TMP_CAP = 0.001 * ESTCPLIM(PLANT,STP)
                           END IF
                           VALUE = 0.0
                           DO JYR = 1 , UPGSYL(PLANT) - MAX(CURIYR + UHBSYR + UPPLYR(PLANT) , UPAVLYR(PLANT))
                              VALUE = VALUE + TMP_CAP
                              TMP_CAP = TMP_CAP * (1.0 + ESTCPSTP(PLANT,STP))
                           END DO
                           CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$SUBLIM,6')
                        END DO
                     END IF
                  END IF

!                 IF REGIONS LIMITED WHILE SUBSIDIZED, THEN ALLOW UNSUBSIZED IN OTHER REGIONS

                  IF (LIMSUB(PLANT) .EQ. 0.0) THEN
                     DO REG = 1 , UNRGNS
                        IF (UPBLDREG(PLANT,MNUMNR) .GT. 999.0 .AND. UPBLDREG(PLANT,REG) .EQ. 0.0) UPBLDREG(PLANT,REG) = 999.9
                     END DO
                  END IF
               END IF
            END IF

            write(18,2000) curiyr+1989,uplntcd(plant),limsub(plant),capsub(plant),upgsub(plant),upcsb(plant),upnfdta(plant),upnirtea(plant)
 2000       format(1x,"!sublim",":",i4,a3,6(":",f10.3))
         END IF                            ! UPSUBCAS
      END DO
      RETURN
      END
!
!     SUBROUTINE EP$SUBFIN CHECKS FOR TIME-DEPENDENT SUBSIDIES ON
!     COST OF DEBT, COST OF EQUITY, AND DEBT FRACTION
!
      SUBROUTINE EP$SUBFIN(IECP,OLYR,CSTDTADJ,CSTEQADJ,SHRDTADJ)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'emmparm'
      include 'ncntrl'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
!
      INTEGER JYR,IECP,OLYR
      REAL*8 PVV,PWF

      REAL*8 CSTDTADJ,CSTEQADJ,SHRDTADJ,ADJ(ECP_D_FPH),ONE(ECP_D_FPH),PVONE

      ecpsub='EP$SUBFIN'

!     CHECK FOR TIME-DEPENDENT DEBT/EQUITY SUBSIDIES

!     COST OF DEBT
      CSTDTADJ = DBLE(0.0)
      IF (UPNIRTEY(IECP) .NE. 0.0)THEN
         IF (OLYR .LT. UNXPH)THEN
            IF ((CURIYR + UHBSYR + OLYR - 1) .GE. UPNIRTES(IECP) .AND.  &
                (CURIYR + UHBSYR + OLYR - 1) .LE. UPNIRTEL(IECP))CSTDTADJ = DBLE(UPNIRTEY(IECP))
         ELSE
            DO JYR = 1 , UNFPH - UNXPH + 1
               IF ((CURIYR + UHBSYR + UNXPH + JYR - 2) .GE. UPNIRTES(IECP) .AND.  &
                   (CURIYR + UHBSYR + UNXPH + JYR - 2) .LE. UPNIRTEL(IECP))THEN
                  ADJ(JYR) = DBLE(UPNIRTEY(IECP))
               ELSE
                  ADJ(JYR) = DBLE(0.0)
               END IF
               ONE(JYR) = DBLE(1.0)
            END DO
            PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
            CSTDTADJ = PVV(ADJ,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1) / PVONE
         END IF
      END IF
2002  FORMAT(1x,A20,3I6,2F12.6,2I6)
!     COST OF EQUITY
      CSTEQADJ = DBLE(0.0)
      IF (UPNRRTEY(IECP) .NE. 0.0)THEN
         IF (OLYR .LT. UNXPH)THEN
            IF ((CURIYR + UHBSYR + OLYR - 1) .GE. UPNRRTES(IECP) .AND.  &
                (CURIYR + UHBSYR + OLYR - 1) .LE. UPNRRTEL(IECP))CSTEQADJ = DBLE(UPNRRTEY(IECP))
         ELSE
            DO JYR = 1 , UNFPH - UNXPH + 1
               IF ((CURIYR + UHBSYR + UNXPH + JYR - 2) .GE. UPNRRTES(IECP) .AND.  &
                   (CURIYR + UHBSYR + UNXPH + JYR - 2) .LE. UPNRRTEL(IECP))THEN
                  ADJ(JYR) = DBLE(UPNRRTEY(IECP))
               ELSE
                  ADJ(JYR) = DBLE(0.0)
               END IF
               ONE(JYR) = DBLE(1.0)
            END DO
            PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
            CSTEQADJ = PVV(ADJ,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1) / PVONE
         END IF
      END IF
!     DEBT FRACTION
      SHRDTADJ = DBLE(0.0)
      IF (UPNFDTY(IECP) .NE. 0.0)THEN
         IF (OLYR .LT. UNXPH)THEN
            IF ((CURIYR + UHBSYR + OLYR - 1) .GE. UPNFDTS(IECP) .AND.  &
                (CURIYR + UHBSYR + OLYR - 1) .LE. UPNFDTL(IECP))SHRDTADJ = DBLE(UPNFDTY(IECP))
         ELSE
            DO JYR = 1 , UNFPH - UNXPH + 1
               IF ((CURIYR + UHBSYR + UNXPH + JYR - 2) .GE. UPNFDTS(IECP) .AND.  &
                   (CURIYR + UHBSYR + UNXPH + JYR - 2) .LE. UPNFDTL(IECP))THEN
                  ADJ(JYR) = DBLE(UPNFDTY(IECP))
               ELSE
                  ADJ(JYR) = DBLE(0.0)
               END IF
               ONE(JYR) = DBLE(1.0)
            END DO
            PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
            SHRDTADJ = PVV(ADJ,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1) / PVONE
         END IF
      END IF
!
      RETURN
      END
!
!     EP$SEQBNS ENFORCES LIMITS ON BONUS ALLOWANCES FOR CO2 SEQUESTRATION, IF APPROPRIATE
!
      SUBROUTINE EP$SEQBNS
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'uefdout'
      include 'emission'
      include 'emeblk'
!
      INTEGER*4 JYR,NYR,OLYR
      CHARACTER*16 ROW,ROW0,ROW1,ROWX,COLUMN
      REAL*8 TOTBNS,TOTBNS0,TOTBNS1,TOTBNSA

      ecpsub='EP$SEQBNS'

!     IF (CURIYR .GT. 100)THEN
      ROW0 = 'L'//'SEQBNS0'; call makmsk(ROW0_mask,':L:',':SEQBNS0:')
      ROW1 = 'L'//'SEQBNS1'; call makmsk(ROW1_mask,':L:',':SEQBNS1:')
      ROWX = 'L'//'SEQBNSX'; call makmsk(ROWX_mask,':L:',':SEQBNSX:')
      DO JYR = 1 , UPSEQNYR
        ROW = 'SEQBNSX'//UPRGCD(JYR); call makmsk(ROW_mask,':SEQBNSX:',UPRGCD(JYR))
        CALL CROWTYPE(ROW,'N       ',ROW_mask)
      END DO
!
!     IF BONUS ALLOWANCES ARE UNLIMITED, MAKE FREE ROWS
!
      IF (UPSEQLIM .LE. 0)THEN
        CALL CROWTYPE(ROW0,'N       ',ROW0_mask)
        CALL CROWTYPE(ROW1,'N       ',ROW1_mask)
        CALL CROWTYPE(ROWX,'N       ',ROWX_mask)
      ELSE
!
!     SUM UP ANNUAL ALLOWANCES TO DETERMINE LIMIT, IF APPROPRIATE
!
        TOTBNS = DBLE(0.0)
        TOTBNS0 = DBLE(0.0)
        TOTBNS1 = DBLE(0.0)
        TOTBNSA = DBLE(0.0)
        DO NYR = 1 , MIN(MNUMYR,(CURIYR + UNFPH - 1) + UPSEQNYR - 1)
          TOTBNS = TOTBNS + DBLE(UPSEQBLM(NYR))
        END DO
!     IF RUN LIMITS CCS BONUS ALLOWANCES BUT LIMITS NOT IN ECPDAT THEN STOP RUN
        IF ((CURIYR + UHBSYR) .EQ. UPSTYR .AND. TOTBNS .LE. 0.0)THEN
          PRINT *,'CCS BONUS ALLOWANCES INTENDED TO HAVE LIMITS BUT NONE IN ECPDAT'
          STOP
        END IF
        OLYR = CURIYR + UPPLYR(WIIS)
!     ALLOCATE UNUSED PRIOR ALLOWANCES TO 1ST ONLINE YEAR
        DO JYR = 1 , OLYR - 1
          UPSEQBLM(OLYR) = UPSEQBLM(OLYR) + UPSEQBLM(JYR)
          UPSEQBLM(JYR) = 0.0
        END DO
!     DETERMINE ALLOWANCES AVAILABLE FOR 1ST ONLINE YEAR
        DO JYR = OLYR , OLYR + UPSEQNYR - 1
          IF (JYR .EQ. OLYR)TOTBNS0 = DBLE(UPSEQBLM(MIN(MNUMYR,JYR)))
          TOTBNS1 = TOTBNS1 + DBLE(UPSEQBLM(MIN(MNUMYR,JYR)))
!         write(6,2323) curiyr+1989,jyr+1989,  &
!         UPSEQBLM(MIN(MNUMYR,JYR)),totbns1
!2323 format(1h ,'!totbns1',i4,i5,2f10.1)
        END DO
!     DETERMINE ADDITIONAL ALLOWANCES AVAILABLE FOR LAST (MULTIPERIOD) ECP YEAR
        DO JYR = OLYR , CURIYR + UNXPH + UPSEQNYR - 2
          TOTBNSA = TOTBNSA + DBLE(UPSEQBLM(MIN(MNUMYR,JYR)))
!         write(6,2324) curiyr+1989,jyr+1989,  &
!         UPSEQBLM(MIN(MNUMYR,JYR)),totbnsa
!2324 format(1h ,'!totbnsa',i4,i5,2f10.1)
        END DO
!     DETERMINE "LEVELIZED" ALLOWANCES AVAILABLE IN OUT YEARS
!       DO JYR = 1 , UNFPH - UNXPH + 1
!         BON(JYR) = DBLE(0.0)
!         DCR(JYR) = DBLE(1.0)
!         DO NYR = 1 , UPSEQNYR
!           BON(JYR) = BON(JYR) + DBLE(UPSEQBLM(MIN(MNUMYR,IYR + JYR + NYR - 1)))
!         END DO
!       write(6,1234) curiyr + 1989,curiyr + 1989 + unxph + jyr - 2,bon(jyr)
!1234 format(1h ,'!seqbon1',i4,i5,f10.1)
!       END DO
!       PV$BON = PVV(BON,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR)) *  &
!                PWF(DBLE(AVGDCR),UNXPH - 1)
!       PV$DCR = PVV(DCR,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR)) *  &
!                PWF(DBLE(AVGDCR),UNXPH - 1)
!       TOTBNSA = TOTBNS1 + PV$BON / PV$DCR
!       write(6,1235) curiyr + 1989,curiyr + 1989 + unxph - 1,totbns1,totbnsa-totbns1,totbnsa
!1235 format(1h ,'!seqbon',i4,i5,5f10.1,f10.4)
!
!     PUT LIMITS ON BONUS ALLOWANCES IN RHS
!
        CALL CROWTYPE(ROW0,'L       ',ROW0_mask)
        CALL CRHS(UPRHS,ROW0,DBLE(0.0),ROW0_mask,'EP$SEQBNS,1')
        CALL CROWTYPE(ROW1,'L       ',ROW1_mask)
        CALL CRHS(UPRHS,ROW1,TOTBNS1,ROW1_mask,'EP$SEQBNS,2')
        CALL CROWTYPE(ROWX,'L       ',ROWX_mask)
        CALL CRHS(UPRHS,ROWX,TOTBNSA,ROWX_mask,'EP$SEQBNS,3')
!
!     CREATE COLUMN FOR YEAR 1 ALLOWANCES SO UNUSED CAN BE PASSED FORWARD
!
      COLUMN = 'BNSSEQU0'
      CALL CBND(UPBND,COLUMN,DBLE(0.0),TOTBNS0,COLUMN_mask,'EP$SEQBNS,4')
      CALL CVAL(COLUMN,UPOBJ,ECP_MIN,COLUMN_mask,UPOBJ,'EP$SEQBNS,5')
      CALL CVAL(COLUMN,ROW0,DBLE(-1.0),COLUMN_mask,ROW0_mask,'EP$SEQBNS,6')
      CALL CVAL(COLUMN,ROWX,DBLE(1.0),COLUMN_mask,ROWX_mask,'EP$SEQBNS,7')
      END IF
!
      RETURN
      END
!
!     SUBROUTINES FOR REVISING MATRIX VALUES
!
!
!     EP$GPS SETS UP SUBSIDIES FOR A GENERATOR PERFORMANCE STANDARD, IF ANY
!
      SUBROUTINE EP$GPS
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'emission'
      include 'emoblk'
      include 'uecpout'
!
      COMMON /GPSECP/ GPSSUB
      REAL*8 GPSSUB(ECP_D_CAP,ECP_D_FPH)
!
      REAL*8 CARPRC(MNUMYR),SO2PRC(MNUMYR,EFD_D_SO2),NOXPRC(NOX_D_GRP,MNUMYR),HGPRC(MNUMYR)
      REAL*8 GPSPLT
      INTEGER ICAP,IEFD,INOX,YEAR,PYR,DYR,ISO2

      ecpsub='EP$GPS'

!
!     INITIALIZE
!
      DO ICAP = 1 , ECP_D_CAP
        DO YEAR = 1 , UNFPH
         GPSSUB(ICAP,YEAR) = DBLE(0.0)
        END DO
      END DO
!
!     CHECK IF GPS CASE
!
      IF (GPSSYR .GT. 0)THEN
!
!     STORE ALLOWANCE PRICES FROM RESTART FILE TO USE AS EXPECTATIONS
!
       IF (USYEAR(CURIYR) .EQ. UPSTYR) THEN
        DO YEAR = CURIYR , UNYEAR
          IF ((TAX_FLAG /= 0) .OR. (PERMIT_FLAG /= 0))THEN
            CARPRC(YEAR) = EMETAX(2,YEAR)
          ELSE
            CARPRC(YEAR) = 0.0
          END IF
          DO ISO2 = 1 , NUM_SO2_GRP
             SO2PRC(YEAR,ISO2) = EMELPSO2(YEAR,ISO2)
          END DO
         DO INOX = 1 , NOX_D_GRP
          NOXPRC(INOX,YEAR) = EPNOXPR(INOX,YEAR)
         END DO
           HGPRC(YEAR) = EMEL_PHG(1,YEAR)
        END DO
       END IF
!
!     IF ((CURIYR + UHBSYR) .GT. (YEARPR + 1)) THEN
!      write(6,1111) curiyr+1989,basecar,baseso2,basenox,basehg
!1111 format(1h ,'!gpsgen',i4,4f12.2)
        DO YEAR = 1 , UNFPH
             PYR = MIN(CURIYR + YEAR - 1, UNYEAR)
         IF ((PYR + UHBSYR) .GE. GPSSYR) THEN
          DO ICAP = 1 , ECP_D_CAP
             IEFD = UPEFDT(ICAP)
             GPSPLT = DBLE(0.0)
!     CARBON
            IF (PCAP_CAR .EQ. 2 .AND. GPSCSW(IEFD) .EQ. 1 .AND. basecar(MNUMNR) .GT. 0.0) THEN
             GPSPLT = GPSPLT +  &
                                 EMLIM(1,PYR) / basecar(MNUMNR) * CARPRC(PYR) * 1000000.0
!          if (year .eq. 1 .and. uplntcd(icap) .eq. 'PC')write(6,2222) curiyr+1989,uplntcd(icap),iefd,  &
!                                EMLIM(1,PYR) , basecar , CARPRC(PYR) ,  &
!                                EMLIM(1,PYR) / basecar * CARPRC(PYR) * 1000000.0
!2222 format(1h ,'!gpscar',i4,a3,i3,4f12.2)
            END IF
!     SO2
            DO ISO2 = 1 , NUM_SO2_GRP
               IF (PCAP_SO2 .EQ. 2 .AND. GPSSSW(IEFD) .EQ. 1 .AND. baseso2(MNUMNR,ISO2) .GT. 0.0) THEN
                  GPSPLT = GPSPLT +  EMRFSA(PYR,ISO2) / baseso2(MNUMNR,ISO2) * SO2PRC(PYR,ISO2) * 0.001
!
!                 if (year .eq. 1 .and. uplntcd(icap) .eq. 'PC')write(6,3333) curiyr+1989,uplntcd(icap),iefd,  &
!                    EMRFSA(PYR,ISO2) , baseso2(PYR,ISO2) , SO2PRC(PYR,ISO2) , EMRFSA(PYR,ISO2) / baseso2(PYR,ISO2) * SO2PRC(PYR,ISO2) * 0.001
!3333             format(1h ,'!gpsso2',i4,a3,i3,4f12.2)
!
               END IF
            END DO
!
!     NOX
!
            IF (PCAP_NOX .EQ. 2 .AND. GPSNSW(IEFD) .EQ. 1 .AND. basenox(MNUMNR) .GT. 0.0) THEN
             GPSPLT = GPSPLT +  &
                                 EMRFNA(2,PYR) / basenox(MNUMNR) * NOXPRC(2,PYR) +  &
                                 EMRFNA(3,PYR) / basenox(MNUMNR) * NOXPRC(3,PYR)
!          if (year .eq. 1 .and. uplntcd(icap) .eq. 'PC')write(6,4444) curiyr+1989,uplntcd(icap),iefd,  &
!                                EMRFNA(2,PYR) , basenox , NOXPRC(2,PYR) , &
!                                EMRFNA(3,PYR) , basenox , NOXPRC(3,PYR) , &
!                                EMRFNA(2,PYR) / basenox * NOXPRC(2,PYR) +  &
!                                EMRFNA(3,PYR) / basenox * NOXPRC(3,PYR)
!4444 format(1h ,'!gpsnox',i4,a3,i3,7f12.2)
            END IF
!     MERCURY
            IF (PCAP_HG  .EQ. 2 .AND. GPSHSW(IEFD) .EQ. 1 .AND. basehg(MNUMNR) .GT. 0.0) THEN
             GPSPLT = GPSPLT +  &
                                 EMLIM(4,PYR) / basehg(MNUMNR) * HGPRC(PYR) * 1000.0
!          if (year .eq. 1 .and. uplntcd(icap) .eq. 'PC')write(6,5555) curiyr+1989,uplntcd(icap),iefd,  &
!                                EMLIM(4,PYR) , basehg , HGPRC(PYR) ,  &
!                                EMLIM(4,PYR) / basehg * HGPRC(PYR) * 1000.0
!5555 format(1h ,'!gpshg ',i4,a3,i3,4f12.2)
            END IF
!          if (year .eq. 1 .and. uplntcd(icap) .eq. 'PC')write(6,6666) curiyr+1989,uplntcd(icap),iefd,  &
!                                GPSSUB(ICAP,YEAR)
!6666 format(1h ,'!gpstot',i4,a3,i3,4f12.2)
!     GPS SUBSIDY IS BASED ON GENERATION FROM THE PREVIOUS 3 YEARS SO IT IS DISCOUNTED
!     OVER THE NEXT 3 YEARS (1 YEAR OF DISCOUNTING WILL BE APPLIED LATER)
             DO DYR = 1 , 3
               GPSSUB(ICAP,YEAR) = GPSSUB(ICAP,YEAR) + GPSPLT / (1.0 + AVGDCR) ** (DYR - 1)
             END DO
!     if (UPLNTCD(ICAP) .eq. 'PC')write(6,7777) curiyr+1989,YEAR,avgdcr,gpsplt,gpssub(icap,year)
!7777 format(1h ,'!gpspv',i4,i4,3f10.3)
          END DO
         END IF
        END DO
      END IF
!
      RETURN
      END

!     SUBROUTINES FOR REVISING MATRIX VALUES

!     EP$PM$LF REVISES THE PLANNED MAINTENANCE VECTORS AND RHS
!     DETERMINES LOAD FOLLOWING FACTORS AND RESORTS VLS

      SUBROUTINE EP$PM$LF(NERC,YEAR)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'dispett'
      include 'cdsparms'
      include 'uso2grp'
      include 'uefdout'
!
      REAL*8 VALUE,MCF,ONE
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      INTEGER*4 YEAR,NERC,IVLS,IP,MYR
      REAL*8 DIGITS2,SHOURS(ECP_D_MSP),RATIO(ECP_D_MSP)
      REAL*8 ABOVE(ECP_D_MSP),TLF(ECP_D_MSP),CUMCAP,PMR,FOR,LF
      CHARACTER*16 ROW,COLUMN
      CHARACTER*12 FROM_LABEL
      INTEGER ISP
      INTEGER*4 CLRG,CRG,IECP,FULLYR
      INTEGER*4 FLRG,FRG,NXT_FLRG(MNUMNR),N_FLRG
      CHARACTER*1 SCODE(ECP_D_MSP)
      REAL*4 HRIOVR
      INTEGER IQ

!     Variables needed for heatrate and forced outage rate improvement
      INTEGER*4 HTRT_TEST         ! 0 => Option is available; 1 => Option not available

      ecpsub='EP$PM$LF'

!
      ONE = 1.0
      IF (YEAR .LT. UNXPH) THEN
         MYR = MIN(UNYEAR , CURIYR + UNFPH - 1)
      ELSE
         MYR = MIN(UNYEAR , CURIYR + YEAR - 1)
      END IF
!
!     INITIALIZE HOURS PER SEASON
!
      CUMCAP = DBLE(0.0)
      DO ISP = 1 , EPNMSP
         SHOURS(ISP) = DBLE(0.0)
         SCODE(ISP) = UPRGCD(ISP)
         ABOVE(ISP) = DBLE(0.0)
         TLF(ISP) = DBLE(0.0)
      END DO
!
      DO IVLS = 1 , EPNSTP(YEAR)
         ISP = EPGECP(EPLDGR(IVLS,YEAR))
         SHOURS(ISP) = SHOURS(ISP) + EPWDTH(IVLS,YEAR) * DBLE(0.001)
         ABOVE(ISP) = ABOVE(ISP) + &
          (EPSPK(ISP,YEAR) - EPHGHT(IVLS,YEAR)) * &
          EPWDTH(IVLS,YEAR) * DBLE(0.001)
      END DO
!
!     DETERMINE TOTAL PM AND LF FROM EXISTING CAPACITY
!
      DO IP = 1 ,ECP_D_DSP
       IECP = UCPDSPI(IP)
         IF (WPTTYP(IP,NERC) .GT. 0) THEN
            PMR = DBLE(UPPMRT(IECP))
            FOR = DBLE(UPFORT(IECP))
            IF (UPVTYP(IECP) .EQ. 0) THEN
               IF (UPMAXCF(IECP,NERC,MYR) .GT. 0.0) THEN
                  IF (UP_XFOR(IECP,NERC,MYR) .GT. 0.0) FOR = DBLE(UP_XFOR(IECP,NERC,MYR))
                  IF (UP_XPMR(IECP,NERC,MYR) .GT. 0.0) PMR = DBLE(UP_XPMR(IECP,NERC,MYR))
                  MCF = DBLE(UPMAXCF(IECP,NERC,MYR))
               ELSE
                  MCF = DBLE(EPECFC(IECP,YEAR))
               END IF
            ELSE
               MCF = DBLE(UPMCF(IP))
            END IF
            FOR = DBLE(1.0 - FOR)
            PMR = DBLE(1.0 - PMR)
            LF = DBLE(1.0) - MCF / (PMR * FOR)
            CUMCAP = CUMCAP + FOR * EPECAP(0,UCPDSPI(IP),YEAR) * DBLE(0.001)
            DO ISP = 1 , EPNMSP
               TLF(ISP) = TLF(ISP) + &
                LF * FOR * EPECAP(0,UCPDSPI(IP),YEAR) * DBLE(0.001)
            END DO
         END IF
      END DO
!
!     SCALE LOAD FOLLOWING REQUIREMENT TO FIT LOAD AND
!     ADJUST REQUIREMENT DOWN TO FIT UNDER LOAD CURVE
!
      DO ISP = 1 , EPNMSP
         TLF(ISP) = TLF(ISP) * SHOURS(ISP) * &
          (EPSPK(ISP,YEAR) / CUMCAP)
         RATIO(ISP) = MIN( DBLE(1.0) , ABOVE(ISP) / TLF(ISP))
      END DO
!
!     DETERMINE LOAD SEGMENT SPECIFIC LF FACTORS AND LF REQUIREMENTS
!
      DO IVLS = 1 , EPNSTP(YEAR)
         ISP = EPGECP(EPLDGR(IVLS,YEAR))
         EP$LF(IVLS,YEAR) = RATIO(ISP) * &
          ((EPSPK(ISP,YEAR) - EPHGHT(IVLS,YEAR)) * &
          (EPWDTH(IVLS,YEAR) * DBLE(0.001))) / ABOVE(ISP)
      END DO
!
!     CREATE PLANNED MAINTENANCE STRUCTURE
!
      FROM_LABEL = "EP_PM_LF"

      DO IP = 1 , ECP_D_DSP

       IF (YEAR .LT. UNXPH) THEN
         FULLYR = YEAR + CURIYR + UHBSYR - 1
       ELSE                 ! different checks for retrofits versus new builds in terms of when they are first allowed and the capacity balance row is created
          IF (IP .EQ. WING) THEN   
           FULLYR = YEAR + CURIYR + UHBSYR - 1
          ELSEIF (IP .EQ. WIA2) THEN
           FULLYR = YEAR + CURIYR + UHBSYR - 2
          ELSE 
           FULLYR = UNFPH + CURIYR + UHBSYR - 1
          ENDIF
       ENDIF

         IF (WPTTYP(IP,NERC) .GT. 0 .AND. WICN .NE. IP .AND. WIAN .NE. IP .AND. WISM .NE. IP) THEN
            HRIOVR = 0.0
            DO IQ = 1 , UPHRNQRT
               IF (HTRT_OVRQ(IP,IQ) .LT. 900.0 .AND. HTRT_OVRQ(IP,IQ) .GT. HRIOVR)HRIOVR = HTRT_OVRQ(IP,IQ)
            END DO
                  !
            IF (UPTTYP(IP) .LE. NW_COAL) THEN
               N_FLRG = 0
               DO FRG = 1 , UNFRGN
                  CRG = EPCLMP(FRG)
                  IF ((C_EMM_CDS(NERC,CRG) .EQ. 1 .AND. C_ECP_CDS(IP,CRG) .EQ. 1) .OR. &
                     (FL_CNXT_CST(NERC,FRG) .GT. 0.0 .AND. C_ECP_CDS(IP,CRG) .EQ. 1 .AND. UPVTYP(IP) .EQ. 1)) THEN
                     N_FLRG = N_FLRG + 1
                     NXT_FLRG(N_FLRG) = FRG
                  END IF
               END DO
            ELSE
               N_FLRG = 0
               DO FRG = 1 , UNFRGN
                  IF ((FRG_EMM_MAP(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IP) .EQ. 0) .OR. (FL_CNXT_CST(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IP) .EQ. 1)) THEN
                     N_FLRG = N_FLRG + 1
                     NXT_FLRG(N_FLRG) = FRG
                  END IF
               END DO
            END IF
!
            DO FRG = 1 , N_FLRG
               FLRG = NXT_FLRG(FRG)
               CLRG = EPCLMP(FLRG)

               CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

               HTRT_TEST = 0
               IF (HRIOVR .EQ. 0) HTRT_TEST = 1
               IF (CURIYR+UHBSYR+YEAR-1 .LT. HTRT_YEAR) HTRT_TEST = 1
!
               IF (AVG_HTRT(IP) .GT. 0.0 .OR. AVG_HTRT_MR(IP) .GT. 0.0 .OR. AVG_HTRT_MOD(IP) .GT. 0.0 .OR. AVG_HTRT_MR_MOD(IP) .GT. 0.0) THEN
                  ROW = 'M'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'X'//EPFLCD(FLRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':X:',EPFLCD(FLRG),':X:',UPYRCD(YEAR))
                  VALUE = DBLE( 0.0 )
                  CALL CROWTYPE(ROW,'G       ',ROW_mask)
                  CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$PM$LF,1')
               END IF
!
               DO ISP = 1 , EPNMSP
                  
                  IF ( ( (EPECAP(FLRG,IP,YEAR)-EPECAP_MR(FLRG,IP,YEAR)) .GT. 0.0 .OR. UPVTYP(IP) .EQ. 1)   &           !if there is existing non-mrun capacity, or new build type (forced capacity)
                         .OR. (YEAR .GT. 1 .AND. AVG_HTRT(IP) .GT. 0.0 .AND. FULLYR .GE. UPAVLYR(IP)) ) THEN               !or in future years, if new build/retrofit type is possible
                     COLUMN = 'P'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'X'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':P:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':X:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
!
                     ROW = UPOBJ ; ROW_mask=UPOBJ
                     VALUE = DBLE(0.001)
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,2')
!
                     ROW = 'M'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'X'//EPFLCD(FLRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':X:',EPFLCD(FLRG),':X:',UPYRCD(YEAR))
                     IF (USW_DIGIT .GT. 0)THEN
                     VALUE = DIGITS2(SHOURS(ISP),5)
                     ELSE
                        VALUE = SHOURS(ISP)
                     END IF
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,3')
!
                     ROW = 'C'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'X'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':X:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                     VALUE = DBLE( 1.0 )
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,4')
                  END IF
				  
				  WRITE(18,2914) CURCALYR,YEAR, NERC, FRG,FLRG,ISP,IP,SHOURS(ISP), &
                                 EPECAP(FLRG,IP,YEAR), AVG_HTRT(IP), EPECAP_MR(FLRG,IP,YEAR), AVG_HTRT_MR(IP), &
								 HTRT_TEST, HTRT_CAP(NERC,UPTTYP(IP),FLRG,YEAR), AVG_HTRT_MOD(IP), &
								 HTRT_CAP_MR(NERC,UPTTYP(IP),FLRG,YEAR), AVG_HTRT_MR_MOD(IP), &
								 UPVTYP(IP), FRG_EMM_MAP(NERC,FRG), FL_CNXT_CST(NERC,FRG)
 2914             FORMAT(1X,"PMLF_HTRT",7(":",I5),13(":",F20.6))
!
                  IF ( (EPECAP_MR(FLRG,IP,YEAR) .GT. 0.0)  .OR. (YEAR .GT. 1 .AND. AVG_HTRT_MR(IP) .GT. 0.0 .AND. FULLYR .GE. UPAVLYR(IP)) ) THEN     ! if existing must-run or future must-run for retrofit/new build is possible          
                     COLUMN = 'P'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'M'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':P:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':M:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
!
                     ROW = UPOBJ ; ROW_mask=UPOBJ
                     VALUE = DBLE(0.001)
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,5')
!
                     ROW = 'M'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'X'//EPFLCD(FLRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':X:',EPFLCD(FLRG),':X:',UPYRCD(YEAR))
                     IF (USW_DIGIT .GT. 0)THEN
                     VALUE = DIGITS2(SHOURS(ISP),5)
                     ELSE
                        VALUE = SHOURS(ISP)
                     END IF
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,6')
!
                     ROW = 'C'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'M'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':M:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                     VALUE = DBLE( 1.0 )
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,7')
                  END IF

                  IF (HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IP),FLRG,YEAR) .GT. 0.0 .AND. AVG_HTRT_MOD(IP) .GT. 0.0 .AND. YEAR .GT. 1) THEN     !if HRI option possible
                     COLUMN = 'P'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'H'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':P:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':H:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
!
                     ROW = UPOBJ ; ROW_mask=UPOBJ
                     VALUE = DBLE(0.001)
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,8')
!
                     ROW = 'M'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'X'//EPFLCD(FLRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':X:',EPFLCD(FLRG),':X:',UPYRCD(YEAR))
                     IF (USW_DIGIT .GT. 0)THEN
                     VALUE = DIGITS2(SHOURS(ISP),5)
                     ELSE
                        VALUE = SHOURS(ISP)
                     END IF
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,9')
!
                     ROW = 'C'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'H'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':H:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                     VALUE = DBLE( 1.0 )
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,10')
                  END IF

                  IF (HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IP),FLRG,YEAR) .GT. 0.0 .AND. AVG_HTRT_MR_MOD(IP) .GT. 0.0 .AND. YEAR .GT. 1) THEN  !if HRI option possible for a must-run
                     COLUMN = 'P'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'Y'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':P:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':Y:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
!
                     ROW = UPOBJ ; ROW_mask=UPOBJ
                     VALUE = DBLE(0.001)
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,11')
!
                     ROW = 'M'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'X'//EPFLCD(FLRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':X:',EPFLCD(FLRG),':X:',UPYRCD(YEAR))
                     IF (USW_DIGIT .GT. 0)THEN
                     VALUE = DIGITS2(SHOURS(ISP),5)
                     ELSE
                        VALUE = SHOURS(ISP)
                     END IF
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,12')
!
                     ROW = 'C'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'Y'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':Y:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                     VALUE = DBLE( 1.0 )
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$PM$LF,13')
                  END IF

               END DO
            END DO
         END IF
      END DO
!
      RETURN
      END
!
!     Heapsort - Sorts an array RA of length N into descending numerical
!     order using the Heapsort Algorithm. N is input; RA is
!     REPLACED ON OUTPUT BY ITS SORTED REARRANGEMENT AND RB
!     IS REARRANGED CORRESPONDINGLY.
!
      SUBROUTINE HSORT2(N,RA,RB)
!
      IMPLICIT NONE

      include'emmparm'
      REAL*8 RA(ECP_D_VLS),RRA
      INTEGER RB(ECP_D_VLS),RRB
      INTEGER N,L,IR,I,J
!
      L = N / 2 + 1
      IR = N
!
!     The index L will be decremented from its initial value down to 1 durin
!     the "hiring" (heap creation) phase. Once it reaches 1, the index IR
!     will be decremented from its initial value down to 1 during the
!     "retirement-and-promotion" (heap selection) phase.
!
   10 CONTINUE
      IF (L .GT. 1) THEN                       ! Still in hiring phase ?
         L = L - 1
         RRA = RA(L)
         RRB = RB(L)
      ELSE                           !  In retirement-and-promotion phase.
         RRA = RA(IR)                  !  Clear a space at end of array.
         RRB = RB(IR)
         RA(IR) = RA(1)              !  Retire the top of the heap into it.
         RB(IR) = RB(1)
         IR = IR - 1                 !  Decrease the size of the corporation
         IF (IR .EQ. 1) THEN            !  Done with the last promotion.
            RA(1) = RRA              !  The least competent worker of all !
            RB(1) = RRB
            RETURN
         ENDIF
      ENDIF
!
!     Whether we are in the hiring phase or promotion phase, we here set
!     up to sift down element RRA to its proper level.
!
      I = L
      J = L + L
   20 IF (J .LE. IR) THEN                             ! Do while J <= IR
         IF (J .LT. IR) THEN
            IF (RA(J) .GT. RA(J + 1)) J = J + 1   ! Comp to the better under
            ENDIF
         IF (RRA .GT. RA(J)) THEN                           ! Demote RRA
            RA(I) = RA(J)
            RB(I) = RB(J)
            I = J
            J = J + J
         ELSE         ! This is RRA's level. Set J to terminate the sift-dow
            J = IR + 1
         END IF
         GO TO 20
      ENDIF
      RA(I) = RRA                                  ! Put RRA into its slot.
      RB(I) = RRB
      GO TO 10
      END
      
!     EP$COAL For Each Coal Unit Determine Retire / Retrofit Options

      SUBROUTINE EP$COAL
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'bildout'
      include 'ecp_nuc'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'ecp_coal'
      include 'cdsparms'
      include 'uso2grp'
      include 'emission'
      include 'dispett'
      include 'dispuse'
      include 'plntin'
      include 'plntctl'
      include 'coalemm'
      include 'uefdout'
      include 'uecpout'
      include 'acoalprc'
      include 'entcntl'
      include 'csapr'
      include 'dsmtfecp'
      include 'elout'
      include 'emm_aimms'
!
      !COMMON /TMP_COAL/ ECL_SYR
      !REAL ECL_SYR(MAX_CL)
!
      COMMON /TMP_CNTL/ UPCCSSYR
      REAL UPCCSSYR
!
      REAL*8 VALUE,XFOR,XPMR, VALUE_CCS, VAL_COL, VAL_CL_NG, VAL_CL_CL
      REAL*8 UVALUE,TST
      REAL*8 DSCRT
      REAL*8 CRF,PWF,PVV,OV_CST, OV_CST_CTS, CTS_INV_Annuity, OV_CST_CTS_B4
      REAL*8 TXBOOK,FNBOOK,URATIO,CAPUNSTL,CAPUTIL
      REAL*8 TFOM(ECP_D_FPH),FOM,VADJ,VOM,TFOM_P(ECP_D_FPH)
      REAL*8 TFOM_CLtNG(ECP_D_FPH),FOM_CLtNG
      REAL*8 TVOM_CLtNG(ECP_D_FPH),VOM_CLtNG
      REAL*8 OV_CLtNG, CLtNG_Annuity, OBJ_CLtNG
      REAL*8 PV$CF,TCF(ECP_D_FPH),CF, CF_FL
!RAG start of CCS mods for EP$COAL - variables for CCS retrofit
      REAL*8 Z,OHR,CCS_R,CLOSS
      REAL*8 oUCL_SC_O,oUCL_SC_F,oUCL_SC_V
      REAL*8 CP_PEN(ECP_D_DSP), HRCPEN(ECP_D_DSP) ,HRCPEN_ORG(ECP_D_DSP)               ! CPENJJ
      REAL*8 CTS_C, CTS_F, CTS_V, CTS_C_B4, CTS_F_B4, CTS_V_B4
      REAL*8 HRT
!RAG end of variables for CCS retrofit
      REAL*8 PV_ECP,TECP(ECP_D_FPH),TECP2,ECP_SHR(ECP_D_DSP),TECP3
      REAL*8 PV_KW,KW(ECP_D_FPH)
      REAL*8 DIGITS2
      REAL*8 SO2_PERMITS,BA_CRD_FRAC(ECP_D_FPH),PV_BA_CRD
      REAL*8 HRS(NOX_D_GRP)
      REAL*8 NOX_RMV,P_RET_TOT,RG_SHR, P_RET_CCS_TOT
      REAL*8 ECP_CF_FROM,ECP_CF_TO,EFD_CF_FROM,EFD_CF_TO,CNFG_CF_FROM,CNFG_CF_TO,NOX_FROM,NOX_TO,NOX_RMV2
      REAL*8 T_BND,TBTU,CFLOW,CFLOW_TYPE(2,MX_SUPPLY_CURVES+MX_ISCV),ORIG_CONT_FLOWS(MX_SUPPLY_CURVES,NDREG,2,ECP_D_XPH),CFLOW_INIT(2,MX_SUPPLY_CURVES)
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*8 HTRT_FROM, HTRT_FROM_MR, HTRT_FROM_MOD, HTRT_FROM_MR_MOD
      REAL*8 HTRT_TO, HTRT_TO_MR, HTRT_TO_MOD, HTRT_TO_MR_MOD
      REAL*8 UNIT_HTRT, NOX_FROM_HTRT, NOX_TO_HTRT, NOX_RMV2_HTRT
      REAL*4 CPR(ECP_D_LCP)
      REAL*4 RETIRT,RETROR,RETFPE,RETCRE
      REAL*4 RETIRT_CCS,RETROR_CCS,RETFPE_CCS,RETCRE_CCS
      REAL*8 AVG_SCB_SO2(NDREG),AVG_SCB_RMV(NDREG)
      REAL*8 HR_PEN,R_INV
      REAL*8 TCAP, SV_FOM
      REAL*8 HRMAX
      REAL*8 DOV_CST,DFOM,TFOMD(ECP_D_FPH),DVOM
      REAL*8 ANNRTE,ANNADJ,ANN(ECP_D_FPH),AN1(ECP_D_FPH)
      REAL*8 SO2_PERMITS_HTRT
!
      INTEGER*4 HTRT_TEST
      INTEGER*4 IQ
      REAL*4 HRIOVR

      INTEGER*4 ECPt_FROM,ECPt_TO,CNFG_FROM,CNFG_TO,LYR,TRG,SC,ISCRB,JSCRB,TRAN_PRF,LDV_PRF,SDV_PRF,IFL,CONT_PRF,ISO2,J_ACI,I_RANK,TST_ACI,ICLS
      INTEGER*4 KYR,IY,INOX,IGRP,IRG,ORG,IYR,I_CNFG,CGRP,J_CNFG,I_ROPT,IFRST,AGE,CNFG_TST,XYR,SV_YEAR,TYR,BYR,BYR2,J_ROPT
      INTEGER*4 CNFG_MAP(MX_CNFG),N_CNFG
      INTEGER*4 VLS,ISP,IP,ROPT_MAP(MX_CNFG),NYR,JNOX,ZYR
      INTEGER*4 IECP,TEST_CTS
      INTEGER*4 YEAR,NERC,JYR,ITST,CLRG,ITST1,ITST2,ITST3,J_FGD,J_SNCR,K_FGD,K_COMB,K_SNCR,K_SCR,K_FF
      INTEGER*4 RFRSTYR,AYR,I_FGD,R_FGD,N_FGD,I_PWR,F_YR,L_YR,INOX_GRP(NOX_D_GRP),CNT_FGD,CNT_COMB,CNT_SNCR,CNT_SCR,CNT_FF
      INTEGER*4 N_CCS, R_CCS
      INTEGER*4 TST_NOX(NOX_D_GRP,ECP_D_CAP,ECP_D_XPH)
      INTEGER*4 T_FFX,T_SCR,T_NCR,T_CMB,T_FGD,T_HRI,ITYP
      INTEGER*4 STXLF,HG_TST
      INTEGER*4 FLRG
      INTEGER*4 CNT_CTS, K_CTS, J_CTS, T_CTS, PLAN_TEST, IPGRP, JPGRP
      CHARACTER*16 ROW,COLUMN,ROW_1st,ROW_FLDV,ROW_CF,ROW_NOX,ROW_CCS,ROW_gcf
      CHARACTER*16 COLUMN_HTRT, COL_CL_NG, COL_CL_CL
      CHARACTER*12 FROM_LABEL
      CHARACTER*4 COAL
      CHARACTER*3 CFG
      CHARACTER*2 ANOX,SC_CD
      CHARACTER*1 SCODE(ECP_D_MSP),GRP_CD(ECP_D_XPH)
      CHARACTER*1 GRP_CD_HTRT(ECP_D_XPH)
      CHARACTER*1 SCRB_CD(2),SO2_CODE
      CHARACTER*1 C_SP_NG
      INTEGER*4 MX_NG_SP, NG_SP
      REAL*8 SHOURS(ECP_D_MSP)
!
      COMMON /COAL_SUPER_GROUP/ CLSG_F,CLSG_N,CLSG_QT,NUM_CLSG
      INTEGER*4 CLSG_F(MAX_CL),CLSG_N(MAX_CL),CLSG_QT(MAX_CL),NUM_CLSG
!
      COMMON /CCS_CNTL/ SYR_CCS,SYR_REFURB
      INTEGER*4 SYR_CCS, SYR_REFURB
!
      INTEGER*4 CLSG_T(MAX_CL),I_CLSG,JGRP,CLSG_COUNT(MAX_CL)
      REAL*8 TBTU_IGRP,TBTU_JGRP
      REAL*8 CLSG_CMM_CL_BTUS(MX_SUPPLY_CURVES,MAX_CL)
      REAL*8 CLSG_FOR(ECP_D_XPH,MAX_CL)
      REAL*8 CLSG_PMR(ECP_D_XPH,MAX_CL)
      REAL*8 CLSG_CAP(ECP_D_XPH,MAX_CL)
      REAL*8 CLSG_CCS(ECP_D_XPH,MAX_CL)
      REAL*8 CLSG_NXR(ECP_D_XPH,MAX_CL)
      REAL*8 CLSG_HTRT(ECP_D_XPH,MAX_CL)
      REAL*8 CLSG_FOM(ECP_D_XPH,MAX_CL)
      REAL*8 CLSG_VADJ(ECP_D_XPH,MAX_CL)
      REAL*8 CLSG_CMB_F(MAX_CL)
      REAL*8 CLSG_CMB_O(MAX_CL)
      REAL*8 CLSG_CMB_V(MAX_CL)
      REAL*8 CLSG_CMB_R(MAX_CL)
      REAL*8 CLSG_SNCR_F(MAX_CL)
      REAL*8 CLSG_SNCR_O(MAX_CL)
      REAL*8 CLSG_SNCR_V(MAX_CL)
      REAL*8 CLSG_SNCR_R(MAX_CL)
      REAL*8 CLSG_SCR_F(MAX_CL)
      REAL*8 CLSG_SCR_O(MAX_CL)
      REAL*8 CLSG_SCR_V(MAX_CL)
      REAL*8 CLSG_SCR_R(MAX_CL)
      REAL*8 CLSG_FGD_F(MAX_CL)
      REAL*8 CLSG_FGD_O(MAX_CL)
      REAL*8 CLSG_FGD_V(MAX_CL)
      REAL*8 CLSG_DSI_F(MAX_CL)
      REAL*8 CLSG_DSI_O(MAX_CL)
      REAL*8 CLSG_DSI_V(MAX_CL)
      REAL*8 CLSG_DSI_R(MAX_CL)
      REAL*8 CLSG_FF_F(MAX_CL)
      REAL*8 CLSG_FF_O(MAX_CL)
      REAL*8 CLSG_FF_V(MAX_CL)
      REAL*8 CLSG_ESP_O(MAX_CL)
      REAL*8 CLSG_CFB_F(MAX_CL)
      REAL*8 CLSG_CFB_O(MAX_CL)
      REAL*8 CLSG_CFB_V(MAX_CL)
      REAL*8 CLSG_CCS_O(MAX_CL)                     ! CO2 CCS - Overnight Cost
      REAL*8 CLSG_CCS_F(MAX_CL)                     ! CO2 CCS - Fixed OM Cost
      REAL*8 CLSG_CCS_V(MAX_CL)                     ! CO2 CCS - Variable O&M
      REAL*8 CLSG_CCS_R(MAX_CL)                     ! CO2 CCS - Removal Rate
      REAL*8 CLSG_CCS_H(MAX_CL)                     ! CO2 CCS - Heat Rate (after)
      REAL*8 CLSG_CCS_C(MAX_CL)                     ! CO2 CCS - Capacity Penalty
      REAL*8 CLSG_HRI_O(MAX_CL)                     ! CO2 HRI - Overnight Cost
      REAL*8 CLSG_HRI_F(MAX_CL)                     ! CO2 HRI - Fixed OM Cost - not used currently
      REAL*8 CLSG_HRI_V(MAX_CL)                     ! CO2 HRI - Variable O&M - not used currently
      REAL*8 CLSG_HRI_H(MAX_CL)                     ! CO2 HRI - Heat Rate Reduction (fraction)
      REAL*8 CLSG_CL_NG_COST(MAX_CL)                ! CL to NG Conversion Cost
      REAL*8 CLSG_CL_NG_TRAN(MAX_CL)                ! CL to NG Hook-up Cost
      REAL*8 CLSG_SP_CAP_FAC(ECP_D_MSP,MAX_CL)
      REAL*8 CLSG_RG_CAP(MNUMNR,MAX_CL)
      REAL*8 CLSG_EMM_CL_BTUs(MAX_CL,MNUMYR)
      REAL*8 CLSG_EMM_CL_CF(MAX_CL,MNUMYR)
!
      COMMON /TOT_RATES/ TOT_RATE1,TOT_RATE2,TOT_TYPE
      REAL*8 TOT_RATE1(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH),TOT_RATE2(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH)
      INTEGER*4 TOT_TYPE(MX_NCOALS+MX_ISCV)

      REAL*8 HTRT_CST_87, HTRT_INV_CST, VALUE_HTRT

      ecpsub='EP$COAL'

!
      HRCPEN_ORG = 1.0
      CP_PEN = 1.0
       
      CALL COMBINE_COAL_RATES(CURIYR)

!     DETERMINE HOURS IN EACH NG SEASON

      SHOURS = 0.0
      MX_NG_SP = 0
      YEAR = 2

      DO ISP = 1 , EPNMSP
!        NG_SP = UNGSSN_ECP(ISP)
         MX_NG_SP = MAX(MX_NG_SP , ISP)
         VLS = EPFRST(ISP,YEAR)
         DO WHILE (VLS .GT. 0)
            SHOURS(ISP) = SHOURS(ISP) + EPWDTH(VLS,YEAR) * DBLE(0.001)
            VLS = EPNEXT(VLS,YEAR)
         END DO
      END DO

      UPCCSSYR = 0
!
      TST_NOX = 0
!
      CLSG_F = 0
      CLSG_N = 0
      CLSG_T = 0
      CLSG_COUNT = 0
      CLSG_QT = 0
      I_CLSG = 0
      DO IGRP = 1 , NUM_CL
         IF (CLSG_T(IGRP) .EQ. 0 .AND. ECL_RG(IGRP) .GT. 0) THEN
            I_CLSG = I_CLSG + 1
            CLSG_COUNT(I_CLSG) = 1
            CLSG_N(IGRP) = CLSG_F(I_CLSG)
            CLSG_F(I_CLSG) = IGRP
            CLSG_T(IGRP) = 1
            CLSG_QT(I_CLSG) = MAX(1,ECL_QT(IGRP))
            WRITE(18,4908) CURIYR+UHBSYR,I_CLSG,CLSG_F(I_CLSG),IGRP,CLSG_N(IGRP),CLSG_T(IGRP),ECL_RG(IGRP),ECL_GRP(1,IGRP),ECL_ECP(1,IGRP)
 4908       FORMAT(1X,"CLSG_INFO",9(":",I5))

            XYR = 2

            IPGRP = ECL_GRP(XYR,IGRP)

            ISP = 2
            TRG = MNUMNR
            TYR = MIN(CURIYR + 1,UNYEAR)

            IF (ECL_ECP(1,IGRP) .EQ. WIIS) &
               WRITE(18,2337) CURIYR+UHBSYR, I_CLSG, IGRP, IGRP, ECL_IGRP(IGRP), ECL_GRP(XYR,IGRP), ECL_RG(IGRP), ECL_CLRG(IGRP), &
               TBTU_IGRP, ECFOR(ECL_GRP(XYR,IGRP)), ECPMR(ECL_GRP(XYR,IGRP)), ECL_CAP(XYR,IGRP), ECL_NXR(XYR,IGRP), ULHTRT_ECP(IPGRP,XYR), &
               ECL_FOM(XYR,IGRP), ECL_VADJ(XYR,IGRP), ECL_CMB_F(IGRP), ECL_CMB_O(IGRP), ECL_CMB_V(IGRP), ECL_CMB_R(IGRP), ECL_SNCR_F(IGRP), &
               ECL_SNCR_O(IGRP), ECL_SNCR_V(IGRP), ECL_SNCR_R(IGRP), ECL_SCR_F(IGRP), ECL_SCR_O(IGRP), ECL_SCR_V(IGRP), ECL_SCR_R(IGRP), &
               ECL_FGD_F(IGRP), ECL_FGD_O(IGRP), ECL_SP_CAP_FAC(ISP,IGRP), ECL_RG_CAP(TRG,IGRP), EMM_CL_BTUs(IGRP,TYR), EMM_CL_CF(IGRP,TYR)

            WRITE(18,5337) CURIRUN, CURIYR+UHBSYR, XYR, I_CLSG, IGRP, ECL_IGRP(IGRP), ECL_GRP(XYR,IGRP), ECL_RG(IGRP), ECL_CLRG(IGRP), ECL_ECP(1,IGRP), &
               ECL_CAP(XYR,IGRP), ULHTRT_ECP(IPGRP,XYR), ECL_CL_NG_COST(IGRP), ECL_CL_NG_TRAN(IGRP)
 5337       FORMAT(1X,"CL_TO_NG_Info",10(":",I5),4(":",F21.6))

            IF (USW_CLGRP .GT. 0)THEN
               ITST = 1
            ELSE
               DO JGRP = IGRP + 1 , NUM_CL
                  IF (CLSG_T(JGRP) .EQ. 0 .AND. ECL_RG(JGRP) .GT. 0) THEN
                     ITST = 0

                     IF (ECL_IGRP(IGRP) .EQ. 0 .OR. ECL_IGRP(JGRP) .EQ. 0) WRITE(6,8372) CURIRUN, &
                        CURCALYR, CURITR, I_CLSG, IGRP, JGRP, ECL_IGRP(IGRP), ECL_IGRP(JGRP)
 8372                FORMAT(1X,"EP_COAL_ITST",8(":",I5))

                     IF ((HTRT_RESULTS(ECL_IGRP(IGRP)) .GT. 0 .AND. HTRT_RESULTS(ECL_IGRP(JGRP)) .EQ. 0) .OR. &
                         (HTRT_RESULTS(ECL_IGRP(IGRP)) .EQ. 0 .AND. HTRT_RESULTS(ECL_IGRP(JGRP)) .GT. 0)) ITST = 1
                     IF (ECL_CLRG(IGRP) .NE. ECL_CLRG(JGRP)) ITST = 1
                     IF (ECL_RG(IGRP) .NE. ECL_RG(JGRP)) ITST = 1
                     IF (ECL_RYR(IGRP) .NE. ECL_RYR(JGRP)) ITST = 1
                     DO XYR = 1 , UNXPH
                        IF (ECL_RCFG(XYR,IGRP) .NE. ECL_RCFG(XYR,JGRP)) ITST = 1
                        IF (UPCCSCAP .GT. 0.0 .AND. (ECL_CAP(XYR,IGRP) .GE. UPCCSCAP .OR. ECL_CAP(XYR,JGRP) .GE. UPCCSCAP))ITST = 1
                     END DO

                     IF (ECL_YR(IGRP) .NE. ECL_YR(JGRP) .AND. USW_BACT .GT. 0) ITST = 1
                     IF (ECL_YR(IGRP) .NE. ECL_YR(JGRP) .AND. USW_DSI  .GT. 0) ITST = 1

                     IF (ECL_MR(IGRP) .NE. ECL_MR(JGRP)) ITST = 1
                     IF (ECL_QT(IGRP) .NE. ECL_QT(JGRP)) ITST = 1
                     DO XYR = 1 , UNFPH
                        IF (EMM_CL_ECPt(IGRP,MIN(UNYEAR,CURIYR+XYR-1)) .NE.  EMM_CL_ECPt(JGRP,MIN(UNYEAR,CURIYR+XYR-1))) ITST = 1
                     END DO
                     DO INOX = 1 , NOX_GRP
                        DO XYR = 1 , UNXPH
                           IF (ECL_NXG(XYR,INOX,IGRP) .NE. ECL_NXG(XYR,INOX,JGRP)) ITST = 1
                        END DO
                     END DO
                     DO SC = 1 , NUM_SC
                        IF (CMM_CONT_INDX(SC,IGRP) .NE. CMM_CONT_INDX(SC,JGRP)) ITST = 1
                     END DO
                     IF (CMM_LDV_INDX(IGRP) .NE. CMM_LDV_INDX(JGRP)) ITST = 1
                     IF (CMM_SDV_INDX(IGRP) .NE. CMM_SDV_INDX(JGRP)) ITST = 1
                     DO SC = 1 , NUM_SC
                        IF (CMM_TRANS_INDX(SC,IGRP) .NE. CMM_TRANS_INDX(SC,JGRP)) ITST = 1
                     END DO
                     DO TRG = 1 , UNRGNS
                        IF (ECL_RG_CAP(TRG,JGRP) / ECL_RG_CAP(MNUMNR,JGRP) .GT. ECL_RG_CAP(TRG,IGRP) / ECL_RG_CAP(MNUMNR,IGRP) + 0.0002)  ITST = 1
                        IF (ECL_RG_CAP(TRG,JGRP) / ECL_RG_CAP(MNUMNR,JGRP) .LT. ECL_RG_CAP(TRG,IGRP) / ECL_RG_CAP(MNUMNR,IGRP) - 0.0002)  ITST = 1
                     END DO
                     TBTU_IGRP = 0.0
                     TBTU_JGRP = 0.0
                     DO SC = 1 , NUM_SC
                        TBTU_IGRP = TBTU_IGRP + CMM_CL_BTUS(SC,IGRP)
                        TBTU_JGRP = TBTU_JGRP + CMM_CL_BTUS(SC,JGRP)
                     END DO
                     IF (TBTU_IGRP .GT. 0.0 .AND. TBTU_JGRP .GT. 0.0) THEN
                        DO SC = 1 , NUM_SC
                           IF (CMM_CL_BTUS(SC,JGRP) / TBTU_JGRP .GT. CMM_CL_BTUS(SC,IGRP) / TBTU_IGRP + 0.10) ITST = 1
                           IF (CMM_CL_BTUS(SC,JGRP) / TBTU_JGRP .LT. CMM_CL_BTUS(SC,IGRP) / TBTU_IGRP - 0.10) ITST = 1
                        END DO
                     ELSE IF (TBTU_IGRP .GT. 0.0 .OR. TBTU_JGRP .GT. 0.0) THEN
                        ITST = 1
                     END IF
                     DO XYR = 1 , UNXPH
                        IF (ECL_GRP(XYR,JGRP) .GT. 0 .AND. ECL_GRP(XYR,IGRP) .GT. 0) THEN
                           IPGRP = ECL_GRP(XYR,IGRP)
                           JPGRP = ECL_GRP(XYR,JGRP)

                           IF (ECL_GRP(XYR,IGRP) .GT. EMM_D_GRP .OR. ECL_GRP(XYR,JGRP) .GT. EMM_D_GRP) &
                              WRITE(6,4909) CURIYR+UHBSYR,XYR,IGRP,JGRP,ECL_GRP(XYR,IGRP),ECL_GRP(XYR,JGRP)
 4909                      FORMAT(1X,"ERROR_ECL_GRP1",6(":",I5))

                           IF (ECFOR(ECL_GRP(XYR,JGRP)) .GT. ECFOR(ECL_GRP(XYR,IGRP)) + 0.20) ITST = 1
                           IF (ECFOR(ECL_GRP(XYR,JGRP)) .LT. ECFOR(ECL_GRP(XYR,IGRP)) - 0.20) ITST = 1
!
                           IF (ECPMR(ECL_GRP(XYR,JGRP)) .GT. ECPMR(ECL_GRP(XYR,IGRP)) + 0.20) ITST = 1
                           IF (ECPMR(ECL_GRP(XYR,JGRP)) .LT. ECPMR(ECL_GRP(XYR,IGRP)) - 0.20) ITST = 1
!
                           IF (ULHTRT_ECP(JPGRP,XYR) .GT. ULHTRT_ECP(IPGRP,XYR) + 500.00) ITST = 1
                           IF (ULHTRT_ECP(JPGRP,XYR) .LT. ULHTRT_ECP(IPGRP,XYR) - 500.00) ITST = 1
                        ELSE
                           ITST = 1
                           WRITE(6,4910) CURIYR+UHBSYR,XYR,IGRP,JGRP,ECL_GRP(XYR,IGRP),ECL_GRP(XYR,JGRP)
 4910                      FORMAT(1X,"ERROR_ECL_GRP2",6(":",I5))
                        END IF
!
                        IF (ECL_FOM(XYR,JGRP) .GT. ECL_FOM(XYR,IGRP) + 10.00) ITST = 1
                        IF (ECL_FOM(XYR,JGRP) .LT. ECL_FOM(XYR,IGRP) - 10.00) ITST = 1
!
                        IF (ECL_VADJ(XYR,JGRP) .GT. ECL_VADJ(XYR,IGRP) + 10.00) ITST = 1
                        IF (ECL_VADJ(XYR,JGRP) .LT. ECL_VADJ(XYR,IGRP) - 10.00) ITST = 1
!
                        IF (ECL_NXR(XYR,JGRP) .GT. ECL_NXR(XYR,IGRP) + 0.10) ITST = 1
                        IF (ECL_NXR(XYR,JGRP) .LT. ECL_NXR(XYR,IGRP) - 0.10) ITST = 1
                     END DO
!
                     IF (ECL_FGD_O(JGRP) .GT. ECL_FGD_O(IGRP) + 25.0) ITST = 1
                     IF (ECL_FGD_O(JGRP) .LT. ECL_FGD_O(IGRP) - 25.0) ITST = 1
!
                     IF (ECL_SCR_O(JGRP) .GT. ECL_SCR_O(IGRP) + 10.0) ITST = 1
                     IF (ECL_SCR_O(JGRP) .LT. ECL_SCR_O(IGRP) - 10.0) ITST = 1
!
                     IF (ECL_SNCR_O(JGRP) .GT. ECL_SNCR_O(IGRP) + 5.0) ITST = 1
                     IF (ECL_SNCR_O(JGRP) .LT. ECL_SNCR_O(IGRP) - 5.0) ITST = 1
!
                     IF (ECL_CMB_O(JGRP) .GT. ECL_CMB_O(IGRP) + 5.0) ITST = 1
                     IF (ECL_CMB_O(JGRP) .LT. ECL_CMB_O(IGRP) - 5.0) ITST = 1
!
                     IF (ECL_DSI_O(JGRP) .GT. ECL_DSI_O(IGRP) + 5.0) ITST = 1
                     IF (ECL_DSI_O(JGRP) .LT. ECL_DSI_O(IGRP) - 5.0) ITST = 1
!
                     IF (ECL_CCS_O(JGRP) .GT. ECL_CCS_O(IGRP) + 10.0) ITST = 1
                     IF (ECL_CCS_O(JGRP) .LT. ECL_CCS_O(IGRP) - 10.0) ITST = 1
!
                     IF (ECL_FF_O(JGRP) .GT. ECL_FF_O(IGRP) + 5.0) ITST = 1
                     IF (ECL_FF_O(JGRP) .LT. ECL_FF_O(IGRP) - 5.0) ITST = 1
!
                     IF (ECL_ESP_O(JGRP) .GT. ECL_ESP_O(IGRP) + 5.0) ITST = 1
                     IF (ECL_ESP_O(JGRP) .LT. ECL_ESP_O(IGRP) - 5.0) ITST = 1
!
                     IF (ECL_CFB_O(JGRP) .GT. ECL_CFB_O(IGRP) + 5.0) ITST = 1
                     IF (ECL_CFB_O(JGRP) .LT. ECL_CFB_O(IGRP) - 5.0) ITST = 1
!
                     IF (ECL_HRI_O(JGRP) .GT. ECL_HRI_O(IGRP) + 5.0) ITST = 1
                     IF (ECL_HRI_O(JGRP) .LT. ECL_HRI_O(IGRP) - 5.0) ITST = 1
!
                     IF (ECL_CL_NG_COST(JGRP) .GT. ECL_CL_NG_COST(IGRP) + 25.0) ITST = 1
                     IF (ECL_CL_NG_COST(JGRP) .LT. ECL_CL_NG_COST(IGRP) - 25.0) ITST = 1
!
                     IF (ECL_CL_NG_TRAN(JGRP) .GT. ECL_CL_NG_TRAN(IGRP) + 25.0) ITST = 1
                     IF (ECL_CL_NG_TRAN(JGRP) .LT. ECL_CL_NG_TRAN(IGRP) - 25.0) ITST = 1
!
                     DO ISP = 1 , EPNMSP
                        IF (ECL_SP_CAP_FAC(ISP,JGRP) .GT. ECL_SP_CAP_FAC(ISP,IGRP) + 0.10) ITST = 1
                        IF (ECL_SP_CAP_FAC(ISP,JGRP) .LT. ECL_SP_CAP_FAC(ISP,IGRP) - 0.10) ITST = 1
                     END DO
                  ELSE
                     ITST = 1
                     CLSG_T(JGRP) = 1
                  END IF
!   
                  IF (ITST .EQ. 0) THEN
                     CLSG_N(JGRP) = CLSG_F(I_CLSG)
                     CLSG_F(I_CLSG) = JGRP

                     CLSG_T(JGRP) = 1
                     CLSG_COUNT(I_CLSG) = CLSG_COUNT(I_CLSG) + 1

                     WRITE(18,4908) CURIYR+UHBSYR,I_CLSG,CLSG_F(I_CLSG),JGRP,CLSG_N(JGRP),CLSG_T(JGRP),ECL_RG(JGRP),ECL_GRP(1,JGRP),ECL_ECP(1,JGRP)

                     XYR = 2

                     JPGRP = ECL_GRP(XYR,JGRP)

                     ISP = 2
                     TRG = MNUMNR
                     TYR = MIN(CURIYR + 1,UNYEAR)
                     IF (ECL_ECP(1,JGRP) .EQ. WIIS) &
                        WRITE(18,2337) CURIYR+UHBSYR,I_CLSG,IGRP,JGRP,ECL_IGRP(JGRP),ECL_GRP(XYR,JGRP),ECL_RG(JGRP),ECL_CLRG(JGRP), &
                        TBTU_JGRP,ECFOR(ECL_GRP(XYR,JGRP)),ECPMR(ECL_GRP(XYR,JGRP)),ECL_CAP(XYR,JGRP),ECL_NXR(XYR,JGRP), ULHTRT_ECP(JPGRP,XYR), &
                        ECL_FOM(XYR,JGRP),ECL_VADJ(XYR,JGRP),ECL_CMB_F(JGRP),ECL_CMB_O(JGRP),ECL_CMB_V(JGRP),ECL_CMB_R(JGRP),ECL_SNCR_F(JGRP), &
                        ECL_SNCR_O(JGRP),ECL_SNCR_V(JGRP),ECL_SNCR_R(JGRP),ECL_SCR_F(JGRP),ECL_SCR_O(JGRP),ECL_SCR_V(JGRP),ECL_SCR_R(JGRP), &
                        ECL_FGD_F(JGRP),ECL_FGD_O(JGRP),ECL_SP_CAP_FAC(ISP,JGRP),ECL_RG_CAP(TRG,JGRP),EMM_CL_BTUs(JGRP,TYR),EMM_CL_CF(JGRP,TYR)
 2337                FORMAT(1X,"CLSG_IS",8(":",I5),26(":",E12.5))
                  END IF
               END DO
            END IF
         END IF
      END DO
      NUM_CLSG = I_CLSG
!
      CLSG_CMM_CL_BTUS = 0.0
      CLSG_FOR = 0.0
      CLSG_PMR = 0.0
      CLSG_CAP = 0.0
      CLSG_CCS = 0.0
      CLSG_NXR = 0.0
      CLSG_HTRT = 0.0
      CLSG_FOM = 0.0
      CLSG_VADJ = 0.0
      CLSG_CMB_F = 0.0
      CLSG_CMB_O = 0.0
      CLSG_CMB_V = 0.0
      CLSG_CMB_R = 0.0
      CLSG_SNCR_F = 0.0
      CLSG_SNCR_O = 0.0
      CLSG_SNCR_V = 0.0
      CLSG_SNCR_R = 0.0
      CLSG_SCR_F = 0.0
      CLSG_SCR_O = 0.0
      CLSG_SCR_V = 0.0
      CLSG_SCR_R = 0.0
      CLSG_FGD_F = 0.0
      CLSG_FGD_O = 0.0
      CLSG_FGD_V = 0.0
      CLSG_DSI_F = 0.0
      CLSG_DSI_O = 0.0
      CLSG_DSI_V = 0.0
      CLSG_DSI_R = 0.0
      CLSG_CCS_F = 0.0
      CLSG_CCS_O = 0.0
      CLSG_CCS_V = 0.0
      CLSG_CCS_R = 0.0
      CLSG_CCS_H = 0.0
      CLSG_CCS_C = 0.0
      CLSG_FF_F = 0.0
      CLSG_FF_O = 0.0
      CLSG_FF_V = 0.0
      CLSG_ESP_O = 0.0
      CLSG_CFB_F = 0.0
      CLSG_CFB_O = 0.0
      CLSG_CFB_V = 0.0
      CLSG_HRI_F = 0.0
      CLSG_HRI_O = 0.0
      CLSG_HRI_V = 0.0
      CLSG_HRI_H = 0.0
      CLSG_CL_NG_COST = 0.0
      CLSG_CL_NG_TRAN = 0.0
      CLSG_SP_CAP_FAC = 0.0
      CLSG_RG_CAP = 0.0
      CLSG_EMM_CL_BTUs = 0.0
      CLSG_EMM_CL_CF = 0.0

      IF (NUM_SC .GT. MX_SUPPLY_CURVES) THEN

        WRITE(6,4413) CURIRUN, CURCALYR, NUM_SC, MX_SUPPLY_CURVES
 4413   FORMAT(1X,"NUM_SC_ERROR",4(":",I30))

        NUM_SC = MX_SUPPLY_CURVES
      END IF
!
      DO I_CLSG = 1 , NUM_CLSG
         IGRP = CLSG_F(I_CLSG)
         TBTU = 0.0

         DO WHILE (IGRP .NE. 0)
            TBTU_IGRP = 0
            DO SC = 1 , NUM_SC
               CLSG_CMM_CL_BTUS(SC,I_CLSG) = CLSG_CMM_CL_BTUS(SC,I_CLSG) + CMM_CL_BTUS(SC,IGRP)
               TBTU_IGRP = TBTU_IGRP + CMM_CL_BTUS(SC,IGRP)
               TBTU = TBTU + CMM_CL_BTUS(SC,IGRP)
            END DO
            DO XYR = 1 , UNXPH
               IF (ECL_GRP(XYR,IGRP) .GT. 0) THEN
                  IPGRP = ECL_GRP(XYR,IGRP)
                  IF (ECL_GRP(XYR,IGRP) .GT. EMM_D_GRP) &
                     WRITE(6,4909) CURIYR+UHBSYR,XYR,IGRP,IGRP,ECL_GRP(XYR,IGRP),ECL_GRP(XYR,IGRP)
                  CLSG_FOR(XYR,I_CLSG) = CLSG_FOR(XYR,I_CLSG) + ECFOR(ECL_GRP(XYR,IGRP)) * ECL_CAP(XYR,IGRP)
                  CLSG_PMR(XYR,I_CLSG) = CLSG_PMR(XYR,I_CLSG) + ECPMR(ECL_GRP(XYR,IGRP)) * ECL_CAP(XYR,IGRP)

                  IF (ECL_CAP(XYR,IGRP) .GE. UPCCSCAP .AND. ULHTRT_ECP(IPGRP,XYR) .LT. UPCCSHRT .AND. ECL_SYR(IGRP) .GT. UPCCSSYR)  &
                     CLSG_CCS(XYR,I_CLSG) = CLSG_CCS(XYR,I_CLSG) + ECL_CAP(XYR,IGRP)

                  CLSG_HTRT(XYR,I_CLSG) = CLSG_HTRT(XYR,I_CLSG) +  ULHTRT_ECP(IPGRP,XYR) * ECL_CAP(XYR,IGRP)

               ELSE
                  WRITE(6,4910) CURIYR+UHBSYR,XYR,IGRP,IGRP,ECL_GRP(XYR,IGRP),ECL_GRP(XYR,IGRP)
               END IF
               CLSG_CAP(XYR,I_CLSG) = CLSG_CAP(XYR,I_CLSG) + ECL_CAP(XYR,IGRP)
               CLSG_NXR(XYR,I_CLSG) = CLSG_NXR(XYR,I_CLSG) + ECL_NXR(XYR,IGRP) * ECL_CAP(XYR,IGRP)
               CLSG_FOM(XYR,I_CLSG) = CLSG_FOM(XYR,I_CLSG) + ECL_FOM(XYR,IGRP) * ECL_CAP(XYR,IGRP)
               CLSG_VADJ(XYR,I_CLSG) = CLSG_VADJ(XYR,I_CLSG) +  ECL_VADJ(XYR,IGRP) * ECL_CAP(XYR,IGRP)
            END DO
            CLSG_CMB_F(I_CLSG) = CLSG_CMB_F(I_CLSG) + ECL_CMB_F(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CMB_O(I_CLSG) = CLSG_CMB_O(I_CLSG) + ECL_CMB_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CMB_V(I_CLSG) = CLSG_CMB_V(I_CLSG) + ECL_CMB_V(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CMB_R(I_CLSG) = CLSG_CMB_R(I_CLSG) + ECL_CMB_R(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_SNCR_F(I_CLSG) = CLSG_SNCR_F(I_CLSG) + ECL_SNCR_F(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_SNCR_O(I_CLSG) = CLSG_SNCR_O(I_CLSG) + ECL_SNCR_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_SNCR_V(I_CLSG) = CLSG_SNCR_V(I_CLSG) + ECL_SNCR_V(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_SNCR_R(I_CLSG) = CLSG_SNCR_R(I_CLSG) + ECL_SNCR_R(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_SCR_F(I_CLSG) = CLSG_SCR_F(I_CLSG) + ECL_SCR_F(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_SCR_O(I_CLSG) = CLSG_SCR_O(I_CLSG) + ECL_SCR_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_SCR_V(I_CLSG) = CLSG_SCR_V(I_CLSG) + ECL_SCR_V(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_SCR_R(I_CLSG) = CLSG_SCR_R(I_CLSG) + ECL_SCR_R(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_FGD_F(I_CLSG) = CLSG_FGD_F(I_CLSG) + ECL_FGD_F(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_FGD_O(I_CLSG) = CLSG_FGD_O(I_CLSG) + ECL_FGD_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_FGD_V(I_CLSG) = CLSG_FGD_V(I_CLSG) + ECL_FGD_V(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_DSI_F(I_CLSG) = CLSG_DSI_F(I_CLSG) + ECL_DSI_F(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_DSI_O(I_CLSG) = CLSG_DSI_O(I_CLSG) + ECL_DSI_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_DSI_V(I_CLSG) = CLSG_DSI_V(I_CLSG) + ECL_DSI_V(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_DSI_R(I_CLSG) = CLSG_DSI_R(I_CLSG) + ECL_DSI_R(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CCS_O(I_CLSG) = CLSG_CCS_O(I_CLSG) + ECL_CCS_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CCS_F(I_CLSG) = CLSG_CCS_F(I_CLSG) + ECL_CCS_F(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CCS_V(I_CLSG) = CLSG_CCS_V(I_CLSG) + ECL_CCS_V(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CCS_R(I_CLSG) = CLSG_CCS_R(I_CLSG) + ECL_CCS_R(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CCS_H(I_CLSG) = CLSG_CCS_H(I_CLSG) + ECL_CCS_H(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CCS_C(I_CLSG) = CLSG_CCS_C(I_CLSG) + ECL_CCS_C(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_FF_F(I_CLSG) = CLSG_FF_F(I_CLSG) + ECL_FF_F(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_FF_O(I_CLSG) = CLSG_FF_O(I_CLSG) + ECL_FF_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_FF_V(I_CLSG) = CLSG_FF_V(I_CLSG) + ECL_FF_V(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_ESP_O(I_CLSG) = CLSG_ESP_O(I_CLSG) + ECL_ESP_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CFB_F(I_CLSG) = CLSG_CFB_F(I_CLSG) + ECL_CFB_F(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CFB_O(I_CLSG) = CLSG_CFB_O(I_CLSG) + ECL_CFB_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CFB_V(I_CLSG) = CLSG_CFB_V(I_CLSG) + ECL_CFB_V(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_HRI_O(I_CLSG) = CLSG_HRI_O(I_CLSG) + ECL_HRI_O(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_HRI_F(I_CLSG) = CLSG_HRI_F(I_CLSG) + ECL_HRI_F(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_HRI_V(I_CLSG) = CLSG_HRI_V(I_CLSG) + ECL_HRI_V(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_HRI_H(I_CLSG) = CLSG_HRI_H(I_CLSG) + ECL_HRI_H(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CL_NG_COST(I_CLSG) = CLSG_CL_NG_COST(I_CLSG) + ECL_CL_NG_COST(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            CLSG_CL_NG_TRAN(I_CLSG) = CLSG_CL_NG_TRAN(I_CLSG) + ECL_CL_NG_TRAN(IGRP) * ECL_RG_CAP(MNUMNR,IGRP)

!           write(6,4545) curiyr+1989,i_clsg,uplntcd(ecl_ecp(1,igrp)),ecl_rg_cap(mnumnr,igrp),  &
!                         ecl_ccs_o(igrp),clsg_ccs_o(i_clsg),  &
!                         ecl_ccs_f(igrp),clsg_ccs_f(i_clsg),  &
!                         ecl_ccs_v(igrp),clsg_ccs_v(i_clsg),  &
!                         ecl_ccs_h(igrp),clsg_ccs_h(i_clsg),  &
!                         ecl_ccs_r(igrp),clsg_ccs_r(i_clsg),  &
!                         ecl_ccs_c(igrp),clsg_ccs_c(i_clsg)
!4545 format(1h ,'!eclov',i4,i5,a4,f10.1,8f10.1,2(f6.3,f7.1))

!     if (igrp .lt. 20)write(6,6789) curiyr+1989,i_clsg,igrp,uplntcd(ecl_ecp(1,igrp)),ecl_rg_cap(mnumnr,igrp),  &
!           ecl_fgd_o(i_clsg),ecl_dsi_o(i_clsg),ecl_ccs_o(i_clsg)
!6789 format(1h ,'!clsg',i4,i6,i6,a4,5f10.3)

            DO ISP = 1 , ECP_D_MSP
               CLSG_SP_CAP_FAC(ISP,I_CLSG) = CLSG_SP_CAP_FAC(ISP,I_CLSG) + ECL_SP_CAP_FAC(ISP,IGRP) * ECL_RG_CAP(MNUMNR,IGRP)
            END DO
            DO TRG = 1 , MNUMNR
               CLSG_RG_CAP(TRG,I_CLSG) = CLSG_RG_CAP(TRG,I_CLSG) + ECL_RG_CAP(TRG,IGRP)
            END DO
            DO TYR = 1 , MNUMYR
               CLSG_EMM_CL_BTUs(I_CLSG,TYR) = CLSG_EMM_CL_BTUs(I_CLSG,TYR) + EMM_CL_BTUs(IGRP,TYR)
               CLSG_EMM_CL_CF(I_CLSG,TYR) = CLSG_EMM_CL_CF(I_CLSG,TYR) + EMM_CL_CF(IGRP,TYR) * ECL_RG_CAP(MNUMNR,IGRP)
            END DO
!
            XYR = 2
            IPGRP = ECL_GRP(XYR,IGRP)
            ISP = 2
            TRG = MNUMNR
            TYR = MIN(CURIYR + 1,UNYEAR)
            IF (CURIYR .GE. 36) WRITE(18,2331) CURIYR+UHBSYR,I_CLSG,IGRP,ECL_IGRP(IGRP),ECL_GRP(XYR,IGRP),ECL_RG(IGRP),ECL_CLRG(IGRP), &
               TBTU_IGRP,ECFOR(ECL_GRP(XYR,IGRP)),ECPMR(ECL_GRP(XYR,IGRP)),ECL_CAP(XYR,IGRP),ECL_NXR(XYR,IGRP), ULHTRT_ECP(IPGRP,XYR), &
               ECL_FOM(XYR,IGRP),ECL_VADJ(XYR,IGRP),ECL_CMB_F(IGRP),ECL_CMB_O(IGRP),ECL_CMB_V(IGRP),ECL_CMB_R(IGRP),ECL_SNCR_F(IGRP), &
               ECL_SNCR_O(IGRP),ECL_SNCR_V(IGRP),ECL_SNCR_R(IGRP),ECL_SCR_F(IGRP),ECL_SCR_O(IGRP),ECL_SCR_V(IGRP),ECL_SCR_R(IGRP), &
               ECL_FGD_F(IGRP),ECL_FGD_O(IGRP),ECL_SP_CAP_FAC(ISP,IGRP),ECL_RG_CAP(TRG,IGRP),EMM_CL_BTUs(IGRP,TYR),EMM_CL_CF(IGRP,TYR),&
               ECL_CL_NG_COST(IGRP), ECL_CL_NG_TRAN(IGRP)
 2331       FORMAT(1X,"CLSG",7(":",I5),28(":",E12.5))
!
            IGRP = CLSG_N(IGRP)
         END DO
!
         IGRP = CLSG_F(I_CLSG)
         DO XYR = 1 , UNXPH
            IPGRP = ECL_GRP(XYR,IGRP)
            IF (CLSG_CAP(XYR,I_CLSG) .GT. 0.0) THEN
               CLSG_CCS(XYR,I_CLSG) = CLSG_CCS(XYR,I_CLSG) / CLSG_CAP(XYR,I_CLSG)
               CLSG_FOR(XYR,I_CLSG) = CLSG_FOR(XYR,I_CLSG) / CLSG_CAP(XYR,I_CLSG)
               CLSG_PMR(XYR,I_CLSG) = CLSG_PMR(XYR,I_CLSG) / CLSG_CAP(XYR,I_CLSG)
               CLSG_NXR(XYR,I_CLSG) = CLSG_NXR(XYR,I_CLSG) / CLSG_CAP(XYR,I_CLSG)
               CLSG_HTRT(XYR,I_CLSG) = CLSG_HTRT(XYR,I_CLSG) / CLSG_CAP(XYR,I_CLSG)
               CLSG_FOM(XYR,I_CLSG) = CLSG_FOM(XYR,I_CLSG) / CLSG_CAP(XYR,I_CLSG)
               CLSG_VADJ(XYR,I_CLSG) = CLSG_VADJ(XYR,I_CLSG) / CLSG_CAP(XYR,I_CLSG)
            ELSE
               IF (ECL_GRP(XYR,IGRP) .GT. 0) THEN
                  CLSG_FOR(XYR,I_CLSG) = ECFOR(ECL_GRP(XYR,IGRP))
                  CLSG_PMR(XYR,I_CLSG) = ECPMR(ECL_GRP(XYR,IGRP))
               END IF
               CLSG_CCS(XYR,I_CLSG) = 0.0
               CLSG_NXR(XYR,I_CLSG) = ECL_NXR(XYR,IGRP)
               CLSG_HTRT(XYR,I_CLSG) = ULHTRT_ECP(IPGRP,XYR)
               CLSG_FOM(XYR,I_CLSG) = ECL_FOM(XYR,IGRP)
               CLSG_VADJ(XYR,I_CLSG) = ECL_VADJ(XYR,IGRP)
            END IF
         END DO
         CLSG_CMB_F(I_CLSG) = CLSG_CMB_F(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CMB_O(I_CLSG) = CLSG_CMB_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CMB_V(I_CLSG) = CLSG_CMB_V(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CMB_R(I_CLSG) = CLSG_CMB_R(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_SNCR_F(I_CLSG) = CLSG_SNCR_F(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_SNCR_O(I_CLSG) = CLSG_SNCR_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_SNCR_V(I_CLSG) = CLSG_SNCR_V(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_SNCR_R(I_CLSG) = CLSG_SNCR_R(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_SCR_F(I_CLSG) = CLSG_SCR_F(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_SCR_O(I_CLSG) = CLSG_SCR_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_SCR_V(I_CLSG) = CLSG_SCR_V(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_SCR_R(I_CLSG) = CLSG_SCR_R(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_FGD_F(I_CLSG) = CLSG_FGD_F(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_FGD_O(I_CLSG) = CLSG_FGD_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_FGD_V(I_CLSG) = CLSG_FGD_V(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_DSI_F(I_CLSG) = CLSG_DSI_F(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_DSI_O(I_CLSG) = CLSG_DSI_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_DSI_V(I_CLSG) = CLSG_DSI_V(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_DSI_R(I_CLSG) = CLSG_DSI_R(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CCS_F(I_CLSG) = CLSG_CCS_F(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CCS_O(I_CLSG) = CLSG_CCS_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CCS_V(I_CLSG) = CLSG_CCS_V(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CCS_R(I_CLSG) = CLSG_CCS_R(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CCS_H(I_CLSG) = CLSG_CCS_H(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CCS_C(I_CLSG) = CLSG_CCS_C(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_FF_F(I_CLSG) = CLSG_FF_F(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_FF_O(I_CLSG) = CLSG_FF_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_FF_V(I_CLSG) = CLSG_FF_V(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_ESP_O(I_CLSG) = CLSG_ESP_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CFB_F(I_CLSG) = CLSG_CFB_F(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CFB_O(I_CLSG) = CLSG_CFB_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CFB_V(I_CLSG) = CLSG_CFB_V(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_HRI_O(I_CLSG) = CLSG_HRI_O(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_HRI_F(I_CLSG) = CLSG_HRI_F(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_HRI_V(I_CLSG) = CLSG_HRI_V(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_HRI_H(I_CLSG) = CLSG_HRI_H(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CL_NG_COST(I_CLSG) = CLSG_CL_NG_COST(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         CLSG_CL_NG_TRAN(I_CLSG) = CLSG_CL_NG_TRAN(I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         DO ISP = 1 , ECP_D_MSP
            CLSG_SP_CAP_FAC(ISP,I_CLSG) = CLSG_SP_CAP_FAC(ISP,I_CLSG) / CLSG_RG_CAP(TRG,I_CLSG)
         END DO
         DO TYR = 1 , MNUMYR
            CLSG_EMM_CL_CF(I_CLSG,TYR) = CLSG_EMM_CL_CF(I_CLSG,TYR) / CLSG_RG_CAP(TRG,I_CLSG)
         END DO
!
         XYR = 2
         ISP = 2
         TRG = MNUMNR
         TYR = MIN(CURIYR + 1 , UNYEAR)
         IGRP = CLSG_F(I_CLSG)
         IF (CURIYR .GE. 36) WRITE(18,2331) CURIYR+UHBSYR,I_CLSG,0,0,0,ECL_RG(IGRP),ECL_CLRG(IGRP), &
            TBTU,CLSG_FOR(XYR,I_CLSG),CLSG_PMR(XYR,I_CLSG),CLSG_CAP(XYR,I_CLSG),CLSG_NXR(XYR,I_CLSG),CLSG_HTRT(XYR,I_CLSG), &
            CLSG_FOM(XYR,I_CLSG),CLSG_VADJ(XYR,I_CLSG),CLSG_CMB_F(I_CLSG),CLSG_CMB_O(I_CLSG),CLSG_CMB_V(I_CLSG),CLSG_CMB_R(I_CLSG),CLSG_SNCR_F(I_CLSG), &
            CLSG_SNCR_O(I_CLSG),CLSG_SNCR_V(I_CLSG),CLSG_SNCR_R(I_CLSG),CLSG_SCR_F(I_CLSG),CLSG_SCR_O(I_CLSG),CLSG_SCR_V(I_CLSG),CLSG_SCR_R(I_CLSG), &
            CLSG_FGD_F(I_CLSG),CLSG_FGD_O(I_CLSG),CLSG_SP_CAP_FAC(ISP,I_CLSG),CLSG_RG_CAP(TRG,I_CLSG),CLSG_EMM_CL_BTUs(I_CLSG,TYR),CLSG_EMM_CL_CF(I_CLSG,TYR), &
            CLSG_CL_NG_COST(I_CLSG), CLSG_CL_NG_TRAN(I_CLSG)
!
      END DO

!     INITIALIZE GRP_CD

      GRP_CD(1)  = 'A'
      GRP_CD(2)  = 'B'
      GRP_CD(3)  = 'C'
      GRP_CD(4)  = 'D'
      GRP_CD(5)  = 'E'
      GRP_CD(6)  = 'F'
      GRP_CD(7)  = 'G'
      GRP_CD(8)  = 'H'
      GRP_CD(9)  = 'I'
      GRP_CD(10) = 'J'

!     INITIALIZE GRP_CD_HTRT

      GRP_CD_HTRT(1)  = 'A'
      GRP_CD_HTRT(2)  = 'L'
      GRP_CD_HTRT(3)  = 'N'
      GRP_CD_HTRT(4)  = 'D'
      GRP_CD_HTRT(5)  = 'E'
      GRP_CD_HTRT(6)  = 'F'
      GRP_CD_HTRT(7)  = 'G'
      GRP_CD_HTRT(8)  = 'H'
      GRP_CD_HTRT(9)  = 'I'
      GRP_CD_HTRT(10) = 'J'
!
      RFRSTYR = ECP_FYR + 1
      AYR = RFRSTYR - UHBSYR
!
!     INITIALIZE SEASON CODE
!
      DO ISP = 1 , EPNMSP
         SCODE(ISP) = UPRGCD(ISP)
      END DO
!
      SCRB_CD(1) = 'S'
      SCRB_CD(2) = 'U'
!
      DO JNOX = 1 , NOX_GRP
         HRS(JNOX) = 0.0
         DO ISP = 1 , EPNMSP
            HRS(JNOX) = HRS(JNOX) + NOX_ECP(ISP,JNOX)
         END DO
      END DO
!
!     Calculate Average Sulfur Content and Removal Rate for Scrubbed Units
!
      AVG_SCB_SO2 = 0.0
      AVG_SCB_RMV = 0.0
      DO CLRG = 1 , NDREG
         VALUE = 0.0
         DO IP = 1 , WIIS
            IF (ECP_SCRUB(IP,CURIYR) .EQ. 1) THEN
               VALUE = VALUE + QCLCLNR(CLRG,CURIYR-1,IP)
               AVG_SCB_SO2(CLRG) = AVG_SCB_SO2(CLRG) + QCLCLNR(CLRG,CURIYR-1,IP) * SCLCLNR(CLRG,CURIYR-1,IP)
               AVG_SCB_RMV(CLRG) = AVG_SCB_RMV(CLRG) + QCLCLNR(CLRG,CURIYR-1,IP) * RCLCLNR(CLRG,CURIYR-1,IP)
            END IF
         END DO
         IF (VALUE .GT. 0.0) THEN
            AVG_SCB_SO2(CLRG) = AVG_SCB_SO2(CLRG) / VALUE
            AVG_SCB_RMV(CLRG) = AVG_SCB_RMV(CLRG) / VALUE
         ELSE
            AVG_SCB_SO2(CLRG) = 3.0
            AVG_SCB_RMV(CLRG) = 0.92
         END IF
      END DO
!
!     Determine Year in Which Bank Devalue will take place
!
      SV_YEAR = 0
      DO YEAR = UNYEAR, CURIYR, -1
         IF (USO2_BA_CRD(YEAR) .GT. USO2_BA_CRD(YEAR-1)) THEN
            SV_YEAR = YEAR
            EXIT
         END IF
      END DO
!
      CPR(1) = 1.0
      DO IY = 2 , ECP_D_LCP
         CPR(IY) = 0.0
      END DO
!
!     REVISE C_EMM_CDS TO MAKE SURE ALL EXISTING OR PLANNED UNITS CAN OPERATE
!
      DO IGRP = 1 , NUM_CL
         FLRG = ECL_CLRG(IGRP)
         IF (FLRG .GT. 0) THEN
            CLRG = EPCLMP(FLRG)
            DO TRG = 1 , UNRGNS
               IF (ECL_RG_CAP(TRG,IGRP) .GT. 0.0) THEN
                 IF (C_EMM_CDS(TRG,CLRG) .EQ. 0)  write(18,321) 'C_EMM_CDS updated in EP$COAL',CURIYR,TRG,CLRG,FLRG,IGRP,C_EMM_CDS(TRG,CLRG),FRG_EMM_MAP(TRG,FLRG)
                   IF (TRG .GT. 0 .AND. CLRG .GT. 0) C_EMM_CDS(TRG,CLRG) = 1
321   FORMAT(1x,A30,6I6,2F8.2)
               END IF
            END DO
         END IF
      END DO
!
!     CAPACITY BALANCE ROW
!
      FROM_LABEL = "EP_COAL"

      DO NERC = 1 , UNRGNS
         CALL GETBLD(1,NERC)
         DO IECP = 1 , ECP_D_DSP
            HRIOVR = 0.0
            DO IQ = 1 , UPHRNQRT
!hro           IF (HTRT_OVRQ(IECP,IQ) .GT. HRIOVR)HRIOVR = HTRT_OVRQ(IECP,IQ)
               IF (HTRT_OVRQ(IECP,IQ) .LT. 900.0 .AND. HTRT_OVRQ(IECP,IQ) .GT. HRIOVR)HRIOVR = HTRT_OVRQ(IECP,IQ)
            END DO
            IF (WPTTYP(IECP,NERC) .GT. 0 .AND. UPTTYP(IECP) .LE. NW_COAL) THEN
               DO YEAR = 1 , UNXPH
                  DO ISP = 1 , EPNMSP
                     DO FLRG = 1 , UNFRGN
                        CLRG = EPCLMP(FLRG)
                        IF ((C_EMM_CDS(NERC,CLRG) .EQ. 1 .AND. C_ECP_CDS(IECP,CLRG) .EQ. 1) .OR. &
                           (FL_CNXT_CST(NERC,FLRG) .GT. 0.0 .AND. C_ECP_CDS(IECP,CLRG) .EQ. 1 .AND. UPVTYP(IECP) .EQ. 1)) THEN

                           CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                           IF (AVG_HTRT(IECP) .GT. 0.0) THEN
                              ROW = 'C'//UPRGCD(NERC)//UPLNTCD (IECP)//'X'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD (IECP),':X:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              CALL CROWTYPE(ROW,'L       ',ROW_mask)
                              CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$COAL,1')
                              COLUMN = 'Z'//UPRGCD(NERC)//UPLNTCD (IECP)//'X'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':Z:',UPRGCD(NERC),UPLNTCD (IECP),':X:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              VALUE = DBLE(-1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,2')
                              IF (YEAR .LT. UNXPH) THEN
                                 VALUE = 1000.0 * UPGNPD(CURIYR + YEAR - 1)
                              ELSE
                                 VALUE = 2000.0 * UPGNPD(CURIYR + YEAR - 1)
                              END IF
                              CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$COAL,3')
                           END IF

!                           IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0 .AND. AVG_HTRT_MR(IECP) .GT. 0.0) THEN
                           IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0 .OR. (YEAR .GT. 1 .AND. AVG_HTRT_MR(IECP) .GT. 0.0)) THEN
                              ROW = 'C'//UPRGCD(NERC)//UPLNTCD (IECP)//'M'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD (IECP),':M:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              CALL CROWTYPE(ROW,'L       ',ROW_mask)
                              CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$COAL,4')
                              COLUMN = 'Z'//UPRGCD(NERC)//UPLNTCD (IECP)//'M'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':Z:',UPRGCD(NERC),UPLNTCD (IECP),':M:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              VALUE = DBLE(-1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,5')
                              IF (YEAR .LT. UNXPH) THEN
                                 VALUE = 200.0 * UPGNPD(CURIYR + YEAR - 1)
                              ELSE
                                 VALUE = 2000.0 * UPGNPD(CURIYR + YEAR - 1)
                              END IF
                              CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$COAL,6')
                           END IF

                           ITYP = UPTTYP(IECP)

!hro                       IF (HTRT_CAP(NERC,ITYP,FLRG) .GT. 0.0 .AND. HTRT_OVR_CST(IECP) .GT. 0.0) THEN

                           IF (YEAR .GT. 1 .AND. HTRT_CAP(NERC,ITYP,FLRG,YEAR) .GT. 0.0 .AND. HRIOVR .GT. 0.0 .AND. AVG_HTRT_MOD(IECP) .GT. 0.0) THEN
                              ROW = 'C'//UPRGCD(NERC)//UPLNTCD (IECP)//'H'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD (IECP),':H:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              CALL CROWTYPE(ROW,'L       ',ROW_mask)
                              CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$COAL,7')
                              COLUMN = 'Z'//UPRGCD(NERC)//UPLNTCD (IECP)//'H'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':Z:',UPRGCD(NERC),UPLNTCD (IECP),':H:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              VALUE = DBLE(-1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,8')
                              IF (YEAR .LT. UNXPH) THEN
                                 VALUE = 200.0 * UPGNPD(CURIYR + YEAR - 1)
                              ELSE
                                 VALUE = 2000.0 * UPGNPD(CURIYR + YEAR - 1)
                              END IF
                              CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$COAL,9')
                           END IF

!hro                       IF (HTRT_CAP_MR(NERC,ITYP,FLRG) .GT. 0.0 .AND. HTRT_OVR_CST(IECP) .GT. 0.0) THEN

                           IF (YEAR .GT. 1 .AND. HTRT_CAP_MR(NERC,ITYP,FLRG,YEAR) .GT. 0.0 .AND. HRIOVR .GT. 0.0 .AND. AVG_HTRT_MR_MOD(IECP) .GT. 0.0) THEN
                              ROW = 'C'//UPRGCD(NERC)//UPLNTCD (IECP)//'Y'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD (IECP),':Y:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              CALL CROWTYPE(ROW,'L       ',ROW_mask)
                              CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$COAL,10')
                              COLUMN = 'Z'//UPRGCD(NERC)//UPLNTCD (IECP)//'Y'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':Z:',UPRGCD(NERC),UPLNTCD (IECP),':Y:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              VALUE = DBLE(-1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,11')
                              IF (YEAR .LT. UNXPH) THEN
                                 VALUE = 200.0 * UPGNPD(CURIYR + YEAR - 1)
                              ELSE
                                 VALUE = 2000.0 * UPGNPD(CURIYR + YEAR - 1)
                              END IF
                              CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$COAL,12')
                           END IF

                        END IF
                     END DO
                  END DO
               END DO
            END IF
         END DO
      END DO
!
!     ESTABLISH NATIONAL LIMIT ON NATIONAL SCRUBBER RETROFITS
!
      P_RET_TOT = 0.0
      P_RET_CCS_TOT = 0.0
      DO IRG = 1 , UNRGNS
         DO IYR = MIN(UNYEAR , CURIYR + UNXPH) , MIN(UNYEAR , CURIYR + UNFPH - 1)
            P_RET_TOT = P_RET_TOT + EMELRETP(IRG,IYR)
         END DO
      END DO
!
      I_PWR = 0
      F_YR = 0
      L_YR = 0
      ICLS = 1
      DO IYR = 1 , UNXPH
         IFRST = 0
         IF (UCL_VIN(IYR) .EQ. 0 .OR. IYR .EQ. 1) THEN
            IFRST = 1
         ELSE IF (UCL_VIN(IYR) .GT. UCL_VIN(IYR-1)) THEN
            IFRST = 1
         END IF
!
         IF (UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) THEN
            BYR = CURIYR + IYR - 1
         ELSE
            BYR = CURIYR + UNFPH - 1
         END IF
         BYR2 = MIN(BYR,UNYEAR)
!
         IF (UCL_VIN(IYR) .GT. 0) THEN
            I_PWR = I_PWR + 1
            IF (UCL_VIN(IYR) .EQ. 1) F_YR = IYR
            IF (UCL_VIN(IYR) .EQ. UCL_VIN(UNXPH) .AND. L_YR .EQ. 0) L_YR = IYR
            IF (IFRST .EQ. 1) THEN
               ROW =  'LUXXRET'//UPYRCD(IYR); call makmsk(ROW_mask,':LUXXRET:',UPYRCD(IYR))
               ROW_CCS =  'LUXXCCS'//UPYRCD(IYR); call makmsk(ROW_CCS_mask,':LUXXCCS:',UPYRCD(IYR))
               ITST = 1
               IF (IYR .EQ. L_YR) ITST = 0
               IF (USW_BACT .GT. 0 .AND. BYR + UHBSYR .GE. UBACT_YR) ITST = 0
               IF (USW_DSI  .GT. 0 .AND. BYR + UHBSYR .GE. UDSI_YR) ITST = 0
               IF (HG_GRAMS_MWH(ICLS,BYR2) .GT. 0.0) ITST = 0
               IF (HG_MEF(ICLS,1,BYR2) .GT. 0.0) ITST = 0
               IF (HG_MEF(ICLS,2,BYR2) .GT. 0.0) ITST = 0
               IF (HG_MEF(ICLS,3,BYR2) .GT. 0.0) ITST = 0
               IF (HG_OUTPUT(ICLS,1,BYR2) .GT. 0.0) ITST = 0
               IF (HG_OUTPUT(ICLS,2,BYR2) .GT. 0.0) ITST = 0
               IF (HG_OUTPUT(ICLS,3,BYR2) .GT. 0.0) ITST = 0
               IF (HG_INPUT(ICLS,1,BYR2) .GT. 0.0) ITST = 0
               IF (HG_INPUT(ICLS,2,BYR2) .GT. 0.0) ITST = 0
               IF (HG_INPUT(ICLS,3,BYR2) .GT. 0.0) ITST = 0
               WRITE(18,3743) CURIYR+UHBSYR,IYR,F_YR,L_YR,UCL_VIN(IYR),UCL_VIN(UNXPH),HG_MEF(ICLS,1,UNYEAR)
 3743          FORMAT(1X,"UCL_VIN",6(":",I4),":",F6.2)
!
!              DECLARE FGD ROW TYPE
!
               IF (ITST .EQ. 1) THEN
                  CALL CROWTYPE(ROW,'L       ',ROW_mask)
!
               IF (CURIYR + IYR - 1 .LT. AYR)THEN
                  VALUE = DBLE(0.0)
               ELSE

!                UNBOUND SCRUBBER RETROFIT LIMIT FOR EPA TRANSPORT RULE
                 IF ((CURIYR + UHBSYR + IYR - 1) .LT. TRANRULE1)THEN
                  VALUE = DBLE(UPSQMAX * (1.0 + UPSRMAX) ** FLOAT(I_PWR))
                 ELSE
                  VALUE = 999.99
                 END IF

!                 VALUE = DBLE(UPSQMAX * (1.0 + UPSRMAX))

                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               END IF
               IF (IYR .GE. L_YR .AND. L_YR .GT. 0) VALUE = MAX(VALUE , P_RET_TOT + 0.1)
               WRITE(18,1213) CURIYR+UHBSYR,UPSQMAX,UPSRMAX,VALUE
 1213          FORMAT(1X,"T_RETRO3",":",I4,3(":",F15.3))
               CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$COAL,13')
               ELSE
                  CALL CROWTYPE(ROW,'N       ',ROW_mask)
               END IF

!              RAG Provisional input for deployment rate model for CCS/Refurbishment using parameters SYR_CCS, UPCQMAX, and UPCRMAX:

               HRMAX = 99999.
!
!              DECLARE CCS ROW TYPE
!
               IF (IYR .LT. UNXPH)THEN
                  CALL CROWTYPE(ROW_CCS,'L       ',ROW_CCS_mask)

                  IF ((CURIYR + UHBSYR + IYR - 1) .LT. UPAVLYR(WIIS)) THEN
                     VALUE_CCS = DBLE(0.0)
                  ELSE
                     VALUE_CCS = DBLE(UPCQMAX * (1.0 + UPCRMAX) ** FLOAT(I_PWR))
                  ENDIF
                  IF (USW_DIGIT .GT. 0)VALUE_CCS = DIGITS2( VALUE_CCS , DIGITS_PARM)
!                 IF (IYR .GE. L_YR .AND. L_YR .GT. 0) VALUE_CCS = MAX(VALUE_CCS , P_RET_CCS_TOT + 0.1)
!     print *,'!ccslim',curiyr+1989,row_ccs,upcqmax,upcrmax,value_ccs
                  CALL CRHS(UPRHS,ROW_CCS,VALUE_CCS,ROW_CCS_mask,'EP$COAL,14')
               ELSE
                  CALL CROWTYPE(ROW_CCS,'N       ',ROW_CCS_mask)
               END IF
            END IF
         END IF
      END DO
!
!     FORCE PLANNED RETROFITS FOR LAST PLANNING YEAR(S)
!
      DO IRG = 1 , UNRGNS
         ROW = 'L'//UPRGCD(IRG)//'P_RET'//UPYRCD(L_YR); call makmsk(ROW_mask,':L:',UPRGCD(IRG),':P_RET:',UPYRCD(L_YR))
!
!        DECLARE ROW TYPE
!
         CALL CROWTYPE(ROW,'G       ',ROW_mask)
!
!        CREATE ESCAPE VECTOR
!
         VALUE = DBLE(1.0)
         CALL CVAL(ROW,ROW,VALUE,ROW_mask,ROW_mask,'EP$COAL,15')
         VALUE = 2000.0 * UPGNPD(CURIYR + L_YR - 1)
         CALL CVAL(ROW,UPOBJ,VALUE,ROW_mask,UPOBJ,'EP$COAL,16')
!
         VALUE = 0.0
         DO IYR = MIN(UNYEAR , CURIYR + UNXPH) , MIN(UNYEAR , CURIYR + UNFPH - 1)
            VALUE = VALUE + EMELRETP(IRG,IYR)
         END DO
 1214    FORMAT(1X,"EMELRETP",3(":",I4),2(":",A8),":",F15.3)
         WRITE(18,1214) CURIYR+UHBSYR,CURIYR+UHBSYR+L_YR-1,IRG,UPRHS,ROW,VALUE
         CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$COAL,17')
      END DO
!
!     Loop over each Coal group
!
      ORG = 0
      ORIG_CONT_FLOWS = 0.0
      DO I_CLSG = 1 , NUM_CLSG
         IGRP = CLSG_F(I_CLSG)
!
         PLAN_TEST = 0
         ITST = 0
         TBTU = 0.0
         T_FFX = 0
         T_SCR = 0
         T_NCR = 0
         T_CMB = 0
         T_FGD = 0
         T_CTS = 0
         T_HRI = 0
         DO SC = 1 , NUM_SC
            TBTU = TBTU + CLSG_CMM_CL_BTUS(SC,I_CLSG)
         END DO
!
         IF (ECL_RG(IGRP) .GT. 0) THEN
            IF (ECL_RCFG(1,IGRP) .EQ. 0) THEN
               I_CNFG = ECL_ICFG(IGRP)
            ELSE
               I_CNFG = ECL_RCFG(1,IGRP)
            END IF
            IF (I_CNFG .EQ. 0 .OR. I_CNFG .GT. 144) WRITE(18,2113) CURIYR+UHBSYR,IGRP,I_CNFG,ECL_RG(IGRP),ECL_CLRG(IGRP),ECL_GRP(1,IGRP),    &
               ECL_ECP(1,IGRP),ECL_IGRP(IGRP),ECL_NXG(1,1,IGRP),ECL_ICFG(IGRP),ECL_RCFG(1,IGRP),I_FGD, &
               CLSG_CAP(1,I_CLSG),CLSG_NXR(1,I_CLSG),CLSG_FOM(1,I_CLSG),CLSG_VADJ(1,I_CLSG),CLSG_HTRT(1,I_CLSG),(ECL_CF(IYR,IGRP),IYR=1,UNXPH)
 2113       FORMAT(1X,"COAL_HUH",12(":"I5),5(":",F10.3),4(":",F5.3))
            I_FGD = UCL_CNFG(3,I_CNFG)
            CNT_FGD = UCL_CNFG(3,I_CNFG)
            CNT_COMB = UCL_CNFG(4,I_CNFG)
            CNT_SNCR = UCL_CNFG(5,I_CNFG)
            CNT_SCR = UCL_CNFG(6,I_CNFG)
            CNT_CTS = UCL_CNFG(7,I_CNFG)
            CNT_FF = UCL_CNFG(8,I_CNFG)
            DO IRG = 1 , UNRGNS
               IF (CLSG_RG_CAP(IRG,I_CLSG) .GT. 0.0) THEN
                  WRITE(18,2112) CURIYR+UHBSYR, IGRP, UCL_CGRP2(ECL_GRP(1,IGRP)), ECL_RG(IGRP), ECL_CLRG(IGRP), ECL_GRP(1,IGRP),    &
                     ECL_ECP(1,IGRP), ECL_IGRP(IGRP), ECL_NXG(1,1,IGRP), ECL_ICFG(IGRP), ECL_RCFG(1,IGRP), I_FGD, &
                     CLSG_CAP(1,I_CLSG), CLSG_NXR(1,I_CLSG), CLSG_FOM(1,I_CLSG), CLSG_VADJ(1,I_CLSG), CLSG_HTRT(1,I_CLSG), (ECL_CF(IYR,IGRP),IYR=1,UNXPH), &
                     IRG, CLSG_RG_CAP(IRG,I_CLSG), CLSG_RG_CAP(MNUMNR,I_CLSG), (CLSG_SP_CAP_FAC(ISP,I_CLSG),ISP=1,3)
               END IF
            END DO
 2112       FORMAT(1X,"COAL_IN",12(":"I5),5(":",F10.3),3(":",F5.3),":",I3,2(":",F10.3),3(":",F6.3))
!
!           Label:COAL_IN:CYEAR:CGRP:UCL_CGRP2:RG:CLRG:GRP_1:ECP_1:IGRP:NXG_1:ICFG:RCFG_1:I_FGD:CAP_1:NXR_1:FOM_1:VADJ_1:HTRT_1:HGF_1:CF1:CF2:CF3:CF4:ORG:RCAP:TCAP:SP_FAC1:SP_FAC2:SP_FAC3
!
            IRG = ECL_RG(IGRP)
            FLRG = ECL_CLRG(IGRP)

            IF (FLRG .EQ. 0) THEN
               WRITE(6,2117) CURIYR+UHBSYR,IGRP,I_CNFG,ECL_RG(IGRP),ECL_CLRG(IGRP),ECL_GRP(1,IGRP),    &
               ECL_ECP(1,IGRP),ECL_IGRP(IGRP),ECL_NXG(1,1,IGRP),ECL_ICFG(IGRP),ECL_RCFG(1,IGRP),I_FGD, &
               CLSG_CAP(1,I_CLSG),CLSG_NXR(1,I_CLSG),CLSG_FOM(1,I_CLSG),CLSG_VADJ(1,I_CLSG),CLSG_HTRT(1,I_CLSG),(ECL_CF(IYR,IGRP),IYR=1,UNXPH)
 2117          FORMAT(1X,"FLRG_HUH",12(":"I5),5(":",F10.3),4(":",F5.3))
               FLRG = 1
            END IF
            CLRG = EPCLMP(FLRG)
            IF (ORG .NE. IRG) THEN
               CALL GETBLD(1,IRG)
               ORG = IRG

!              USE RETROFIT RISK PREMIUM, IF SWITCH IS ON

               IF (USW_RTRSK .LE. 0)THEN
                  RETIRT = EPUIRT
                  RETROR = EPUROR
                  RETFPE = EPUFPE
                  RETCRE = EPUCRE
               ELSE
                  RETIRT = EPUIRTR
                  RETROR = EPURORR
                  RETFPE = EPUFPER
                  RETCRE = EPUCRER
               END IF

!              Always ignore risk premium for CCS Retrofits

               RETIRT_CCS = EPUIRT
               RETROR_CCS = EPUROR
               RETFPE_CCS = EPUFPE
               RETCRE_CCS = EPUCRE

            END IF
            IF (IGRP .LT. 10) THEN
               WRITE(COAL,'("000",I1)') IGRP
            ELSE IF (IGRP .LT. 100) THEN
               WRITE(COAL,'("00",I2)') IGRP
            ELSE IF (IGRP .LT. 1000) THEN
               WRITE(COAL,'("0",I3)') IGRP
            ELSE
               WRITE(COAL,'(I4)') IGRP
            END IF
!
            DO INOX = 1 , NOX_GRP
               INOX_GRP(INOX) = 0
               DO IYR = 1 , UNXPH
                  INOX_GRP(INOX) = INOX_GRP(INOX) + ECL_NXG(IYR,INOX,IGRP)
               END DO
            END DO
!
            CGRP = 0
            TCAP = 0.0
            DO IYR = 1 , UNXPH
               TCAP = TCAP + CLSG_CAP(IYR,I_CLSG)
            END DO
            DO IYR = 1 , UNXPH
               LYR = MIN(IYR+1 , UNXPH)
               IF (UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) THEN
                  TYR = MIN(CURIYR + IYR - 1 , UNYEAR)
                  XYR = IYR
               ELSE
                  TYR = UNYEAR
                  XYR = UNXPH
               END IF
!
               IF (UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) THEN
                  BYR = CURIYR + IYR - 1
               ELSE
                  BYR = CURIYR + UNFPH - 1
               END IF
               AGE = BYR + UHBSYR - ECL_YR(IGRP)
!
               IF (IYR .EQ. 1) THEN
                  IFRST = 0
               ELSE
                  IF (CLSG_CAP(IYR-1,I_CLSG) .GT. 0.0) THEN
                     IFRST = 0
                  END IF
               END IF
!
               IF (UCL_VIN(IYR) .EQ. 0 .OR. IYR .EQ. 1) THEN
                  CGRP = CGRP + 1
                  IFRST = 1
               ELSE IF (UCL_VIN(IYR) .GT. UCL_VIN(IYR-1)) THEN
                  CGRP = CGRP + 1
                  IFRST = 1
               END IF

!              IF (TCAP .GT. 0.0 .AND. IFRST .EQ. 1)THEN
!                 ROW = 'O'//COAL//'XX'//UPYRCD(CGRP)
!                 IRET = DFMCRTP(ROW,'L       ')
!              END IF

               IF (CLSG_CAP(IYR,I_CLSG) .GT. 0.0) THEN

!                 SET CONSTRAINT ROWS

                  IF (UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1) THEN
                     ROW = 'O'//COAL//'XX'//UPYRCD(CGRP); call makmsk(ROW_mask,':O:',COAL,':XX:',UPYRCD(CGRP))
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     KYR = MAX(IYR - 1 , 1)
                     IF (CLSG_CAP(KYR,I_CLSG) .GT. 0.0) THEN
                        UVALUE = 0.0
                     ELSE
                        UVALUE = CLSG_CAP(IYR,I_CLSG) * 0.001
                     END IF
                     IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2(UVALUE , DIGITS_PARM)
                     CALL CRHS(UPRHS,ROW,UVALUE,ROW_mask,'EP$COAL,18')
                  END IF

!                 Set Vectors Which Can Operate

                  IF (IYR .GT. 0) THEN
                     CNFG_MAP(1) =  ECL_RCFG(XYR,IGRP)
                     ROPT_MAP(1) =  0
                     I_CNFG =  ECL_RCFG(XYR,IGRP)

                     IF (I_CNFG .EQ. 0 .OR. I_CNFG .GT. MX_CNFG .OR. NUM_ROPT .GT. MX_ROPT) &
                        WRITE(18,2933) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IGRP,ECL_IGRP(IGRP),ECL_FREC(IGRP), &
                        ECL_RCFG(XYR,IGRP),ECL_ICFG(IGRP),EMM_CL_ECPt(IGRP,MIN(UNYEAR,CURIYR+IYR-1)),ECL_ECP(IYR,IGRP),NUM_ROPT,CLSG_CAP(IYR,I_CLSG)
 2933                FORMAT(1X,"ECL_RCFG",10(":",I5),":",F12.3)

                     R_FGD = UCL_CNFG(3,I_CNFG)
                     R_CCS = UCL_CNFG(7,I_CNFG) !RGCAP
                     N_CNFG = 1
                     DO I_ROPT = 1 , NUM_ROPT
                        IF (UCL_RCMB(I_ROPT,I_CNFG) .GT. 0) THEN
                           HG_TST = 0
                           IF (HG_BYR .LE. BYR + UHBSYR) HG_TST = 1
                           IF (EMLIM(4,MIN(UNYEAR,BYR)) .LT. 100.0) HG_TST = 1
                           IF (UCL_CNFG(8,UCL_RCMB(I_ROPT,I_CNFG)) .EQ. 0) HG_TST = 1
                           IF (HG_TST .EQ. 1) THEN
                              N_CNFG = N_CNFG + 1
                              CNFG_MAP(N_CNFG) = UCL_RCMB(I_ROPT,I_CNFG)
                              ROPT_MAP(N_CNFG) = I_ROPT

                              WRITE(18,3933) CURIYR+UHBSYR, IYR, XYR, IGRP, ECL_IGRP(IGRP), ECL_FREC(IGRP), N_CNFG, I_ROPT, I_CNFG, &
                                 HG_BYR, BYR+UHBSYR, BYR, UNYEAR, UCL_RCMB(I_ROPT,I_CNFG), UCL_CNFG(7,UCL_RCMB(I_ROPT,I_CNFG)), &
                                 UCL_CNFG(8,UCL_RCMB(I_ROPT,I_CNFG)), EMLIM(4,MIN(UNYEAR,BYR))
 3933                         FORMAT(1X,"ROPT_MAP", 16(":",I5), ":",F15.3)

                           END IF
                        END IF
                     END DO
!
                     K_FGD = 0
                     K_COMB = 0
                     K_SNCR = 0
                     K_SCR = 0
                     K_CTS = 0
                     K_FF = 0
                     DO I_CNFG = 1 , N_CNFG
                        J_CNFG = CNFG_MAP(I_CNFG)
                        K_FGD = K_FGD + UCL_CNFG(3,J_CNFG)
                        K_COMB = K_COMB + UCL_CNFG(4,J_CNFG)
                        K_SNCR = K_SNCR + UCL_CNFG(5,J_CNFG)
                        K_SCR = K_SCR + UCL_CNFG(6,J_CNFG)
                        K_CTS = K_CTS + UCL_CNFG(7,J_CNFG)
                        K_FF = K_FF + UCL_CNFG(8,J_CNFG)
                     END DO
!
                  ELSE
                     WRITE(18,3113) CURIYR+UHBSYR,IGRP,N_CNFG,IYR
 3113                FORMAT(1X,"N_CNFG",4(":",I6))
                  END IF
!
                  CNFG_FROM = CNFG_MAP(1)
                  ECPt_FROM = UCL_ECP(CNFG_FROM)
                  CFLOW_INIT = 0.0
                  IF (UPTTYP(ECPt_FROM) .GT. EX_COAL) N_CNFG = 1

!                 IF PLANNED RETROFIT, PREVENT OTHER RETROFITS UNTIL IT IS COMPLETED

                  DO I_CNFG = 2 , UNXPH
                     IF (ECL_RCFG(1,IGRP) .NE. ECL_RCFG(I_CNFG,IGRP)) THEN
                        N_CNFG = 1
                        PLAN_TEST = 1
                        J_CNFG = ECL_RCFG(I_CNFG,IGRP)
                        IF (UCL_NSR_CFG(J_CNFG) .EQ. 0) THEN
                           WRITE(18,3713) CURIRUN, CURCALYR, CURIYR+I_CNFG+1988, IGRP, I_CLSG, ECL_RCFG(1,IGRP), ECL_RCFG(I_CNFG,IGRP), ECL_IGRP(IGRP), CNFG_MAP(1), UCL_NSR_CFG(J_CNFG), ECL_CAP(I_CNFG,IGRP)
 3713                      FORMAT(1X,"Planned_Retrofits_Not_Enough",10(":",I5),":",F20.6)
                        END IF
                     END IF
                  END DO

                  HTRT_TEST = 0

!hro              IF (HTRT_OVR_CST(ECL_ECP(IYR,IGRP)) .LE. 0.0) HTRT_TEST = 1

                  IF (HTRT_OVRQ(ECL_ECP(IYR,IGRP),CLSG_QT(I_CLSG)) .LE. 0.0 .OR. HTRT_OVRQ(ECL_ECP(IYR,IGRP),CLSG_QT(I_CLSG)) .GT. 900.0) HTRT_TEST = 1

!hrp              IF (ECL_HRI_O(I_CLSG) .LE. 0.0 .OR. ECL_HRI_O(I_CLSG) .GT. 900.0) HTRT_TEST = 1

                  IF (ECL_IGRP(IGRP) .EQ. 0) WRITE(6,9372) CURIRUN, CURCALYR, CURITR, I_CLSG, IGRP, CNFG_FROM, &
                     ECL_IGRP(IGRP), ECPt_FROM
 9372             FORMAT(1X,"EP_COAL_HTRT_TEST",8(":",I5))

                  IF (HTRT_RESULTS(ECL_IGRP(IGRP)) .GT. 0) HTRT_TEST = 1
                  IF (UCL_VIN(IYR) .EQ. 0) HTRT_TEST = 1
                  IF (CURIYR+UHBSYR+IYR-1 .LT. HTRT_YEAR .AND. UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) HTRT_TEST = 1

!                 IF (ECL_MR(IGRP) .GT. 0) HTRT_TEST = 1

!                 Create Coal to Natural Gas Conversion Vectors - Note: unlike other retrofit options these vectors convert capacity for the rest of the planning horizon

                  OV_CLtNG = CLSG_CL_NG_COST(I_CLSG) + CLSG_CL_NG_TRAN(I_CLSG)

!                 IF (CURIYR + IYR + UHBSYR .GE. UCL_CL_NG_SYR .AND. OV_CLtNG .GT. 0.0 .AND. PLAN_TEST .EQ. 0) THEN

                  IF (CURIYR + IYR + UHBSYR - 1 .GE. UCL_CL_NG_SYR .AND. OV_CLtNG .GT. 0.0) THEN

!                    Only create conversion vectors for periods where retrofits and builds are allowed

                     IF (UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1) THEN

                        IECP = WING
                        ECPt_TO = WING

                        COL_CL_NG = 'N'//COAL//'NG'//UPYRCD(CGRP); call makmsk(COL_CL_NG_mask,':N:',COAL,':NG:',UPYRCD(CGRP))
                        !Following line was added to introduce a new build decision variable to keep track of coal part of converted coal&NG cofiring capacity   - AKN
                        COL_CL_CL = 'GCL'//GRP_CD(CGRP)//COAL;  call makmsk(COL_CL_CL_mask,':GCL:',GRP_CD(CGRP),COAL)   

                        UVALUE = CLSG_CAP(IYR,I_CLSG) * 0.001
                        IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
                        CALL CBND(UPBND,COL_CL_NG,DBLE(0.0),UVALUE,COL_CL_NG_mask,'EP$COAL,19')

!                       Unit capacity rows requires that unit can only choose one option

                        ROW = 'O'//COAL//'XX'//UPYRCD(CGRP); call makmsk(ROW_mask,':O:',COAL,':XX:',UPYRCD(CGRP))
                        VAL_CL_NG = 1.0
                        CALL CVAL(COL_CL_NG,ROW,VAL_CL_NG,COL_CL_NG_mask,ROW_mask,'EP$COAL,20')
                        IF ((UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1)  .AND. (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)))  THEN
                            CALL CVAL(COL_CL_CL,ROW,VALUE,COL_CL_CL_mask,ROW_mask,'EP$COAL,20a')
                        endif

!                       Add converted capacity to gas steam capacity row, ECP type = WING, Capacity Code 'NG'

                        DO JYR = CGRP , UNXPH
                           IF (CLSG_CAP(JYR,I_CLSG) .GE. 0.001) THEN
                              DO TRG = 1 , UNRGNS
                                 IF (CLSG_RG_CAP(TRG,I_CLSG) .GT. 0.0) THEN
                                    RG_SHR = CLSG_RG_CAP(TRG,I_CLSG) / CLSG_RG_CAP(MNUMNR,I_CLSG)

!                                   INTERSECT APPROPRIATE CAPACITY ROWS

                                    DO ISP = 1 , EPNMSP
                                       IF (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + JYR - 1)) THEN ! (ECL_MR(IGRP) .EQ. 0) THEN
                                          ROW = 'C'//UPRGCD(TRG)//UPLNTCD(WING)//'X'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(JYR); call makmsk(ROW_mask,':C:',UPRGCD(TRG),UPLNTCD(WING),':X:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(JYR))
                                            CALL CROWTYPE(ROW,'L       ',ROW_mask)     !row types weren't set up for NG above
                                            CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$COAL,97')
                                          ELSE
                                          ROW = 'C'//UPRGCD(TRG)//UPLNTCD(WING)//'M'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(JYR); call makmsk(ROW_mask,':C:',UPRGCD(TRG),UPLNTCD(WING),':M:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(JYR))
                                            CALL CROWTYPE(ROW,'L       ',ROW_mask)     !row types weren't set up for NG above
                                            CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$COAL,98')                                      
                                          END IF
                                       VAL_CL_NG = DBLE(-RG_SHR) * DBLE(CLSG_SP_CAP_FAC(ISP,I_CLSG))
                                       IF (USW_DIGIT .GT. 0)VAL_CL_NG = DIGITS2( VAL_CL_NG , DIGITS_PARM)

                                       IF (ISNAN(VAL_CL_NG).OR. ABS(VAL_CL_NG) .GT. HUGE(VAL_CL_NG)) THEN   ! check for NaNQ this way

                                          WRITE(6,4371) CURIRUN, CURCALYR, TRG, I_CLSG, IECP, ISP, VAL_CL_NG, RG_SHR, &
                                             CLSG_SP_CAP_FAC(ISP,I_CLSG), CLSG_RG_CAP(TRG,I_CLSG), CLSG_RG_CAP(MNUMNR,I_CLSG) 
 4371                                     FORMAT(1X,"EP_CL_NG_RG_NaN",6(":",I6),5(":",F20.6))

                                          RG_SHR = 1.0
                                          CLSG_RG_CAP(MNUMNR,I_CLSG) = CLSG_RG_CAP(TRG,I_CLSG) 
                                          CLSG_SP_CAP_FAC(ISP,I_CLSG) = 1.0
                                          VAL_CL_NG = DBLE(-RG_SHR) * DBLE(CLSG_SP_CAP_FAC(ISP,I_CLSG))
                                          IF (USW_DIGIT .GT. 0)VAL_CL_NG = DIGITS2( VAL_CL_NG , DIGITS_PARM)
                                       END IF

                                       CALL CVAL(COL_CL_NG,ROW,VAL_CL_NG,COL_CL_NG_mask,ROW_mask,'EP$COAL,21')
                                    END DO

!                                   TOTAL CAPACITY ROW BY REGION AND PLANT TYPE

                                    ROW = 'F'//UPRGCD(TRG)//UPLNTCD(WING)//'CAP'//UPYRCD(JYR); call makmsk(ROW_mask,':F:',UPRGCD(TRG),UPLNTCD(WING),':CAP:',UPYRCD(JYR))

                                    VAL_CL_NG = DBLE(RG_SHR)
                                    CALL CVAL(COL_CL_NG,ROW,VAL_CL_NG,COL_CL_NG_mask,ROW_mask,'EP$COAL,22')

!                                   RESERVE MARGIN ROW

                                    ROW = 'R'//UPRGCD(TRG)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(TRG),':XXXXX:',UPYRCD(JYR))

                                    VAL_CL_NG = RG_SHR
                                    CALL CVAL(COL_CL_NG,ROW,VAL_CL_NG,COL_CL_NG_mask,ROW_mask,'EP$COAL,23')

!                                   MAXIMUM RETIREMENTS ROW

!                                   IF (UPRETRAT .GT. 0.0 .AND. JYR .EQ. UPRTLT+1 .AND. IFRST .EQ. 1) THEN
!                                      ROW = 'R'//UPRGCD(TRG)//'MXRET0'
!                                      VAL_CL_NG = RG_SHR
!                                      CALL CVAL(COL_CL_NG,ROW,VAL_CL_NG,COL_CL_NG_mask,ROW_mask,'EP$COAL,24')
!                                   END IF

!                                   TOTAL CAPACITY ROW

                                    ROW = 'TOTCAP'//UPRGCD(TRG)//UPYRCD(JYR); call makmsk(ROW_mask,':TOTCAP:',UPRGCD(TRG),UPYRCD(JYR))
                                    VAL_CL_NG = RG_SHR
                                    CALL CVAL(COL_CL_NG,ROW,VAL_CL_NG,COL_CL_NG_mask,ROW_mask,'EP$COAL,25')

!                                   Planned Maintenance Requirement

                                    IF (CLSG_FOR(JYR,I_CLSG) .GT. 0.0) THEN
                                       XFOR = CLSG_FOR(JYR,I_CLSG)
                                    ELSE
                                       XFOR = UPFORT(WING)
                                    END IF

                                    IF (CLSG_PMR(JYR,I_CLSG) .GT. 0.0) THEN
                                       XPMR = CLSG_PMR(JYR,I_CLSG)
                                    ELSE
                                       XPMR = UPPMRT(WING)
                                    END IF

                                    VAL_CL_NG = - 8.760 * XPMR * RG_SHR
                                    IF (USW_DIGIT .GT. 0)VAL_CL_NG = DIGITS2( VAL_CL_NG , DIGITS_PARM)
                                    ROW = 'M'//UPRGCD(TRG)//UPLNTCD(WING)//'X'//EPFLCD(FLRG)//'X'//UPYRCD(JYR); call makmsk(ROW_mask,':M:',UPRGCD(TRG),UPLNTCD(WING),':X:',EPFLCD(FLRG),':X:',UPYRCD(JYR))
                                    IF (VAL_CL_NG .GT. -ECP_MIN .AND. VAL_CL_NG .LT. ECP_MIN) VAL_CL_NG = 0.0
                                    IF (VAL_CL_NG .NE. 0.0) CALL CVAL(COL_CL_NG,ROW,VAL_CL_NG,COL_CL_NG_mask,ROW_mask,'EP$COAL,26')
                                 END IF ! CLSG_RG_CAP > 0
                              END DO ! DO TRG

!                             Adjust Fuel Consumption for New ECP Type

                              ITYP = UPTTYP(ECPt_FROM)
                              IF (UECP_CAP(LYR,ITYP,CLRG) .GT. 0.001) THEN
                                 CF = UECP_GEN(LYR,ITYP,CLRG) / (8.76 * UECP_CAP(LYR,ITYP,CLRG))
                                 CF = MIN(UPMCF(ECPt_FROM) , CF)
                              ELSE
                                 CF = 0.10
                              END IF
                              CF = MAX(CF , 0.10)

                              CF = MAX(CLSG_EMM_CL_CF(I_CLSG,min(CURIYR+JYR-1, UNYEAR)) , CF)

                              CF_FL = 0.01

                              CALL ECP_AVG_HTRT(FROM_LABEL, IRG, FLRG, WING, JYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                              DO NG_SP = 1 , MX_NG_SP
                                 WRITE(C_SP_NG,'(I1)') NG_SP
                                 ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(WING)//'XX'//C_SP_NG//UPYRCD(JYR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(WING),':XX:',C_SP_NG,UPYRCD(JYR))
                                 IF (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + JYR - 1)) THEN  !(ECL_MR(IGRP) .EQ. 0) THEN
                                    VAL_CL_NG = SHOURS(NG_SP) * CF_FL * 0.001 * (CLSG_HTRT(IYR,I_CLSG) * (1.0 + UCL_CL_NG_HR_PEN) - AVG_HTRT(WING))
                                 ELSE
                                    VAL_CL_NG = SHOURS(NG_SP) * CF_FL * 0.001 * (CLSG_HTRT(IYR,I_CLSG) * (1.0 + UCL_CL_NG_HR_PEN) - AVG_HTRT_MR(WING))
                                 END IF
                                 IF (USW_DIGIT .GT. 0)VAL_CL_NG = DIGITS2( VAL_CL_NG , DIGITS_PARM)

                                 CALL CVAL(COL_CL_NG,ROW,VAL_CL_NG,COL_CL_NG_mask,ROW_mask,'EP$COAL,27')
                              END DO

                              IF (JYR .EQ. CGRP) THEN


                                 ANNRTE = (UPANNADJ(ECPt_TO,UNYEAR) / UPANNADJ(ECPt_TO,UNYEAR - 10)) ** (1.0 / 10.0)
                                 IF (JYR .LT. UNXPH)THEN 
                                    IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                       ANNADJ = UPANNADJ(ECPt_TO,CURIYR+JYR-1)
                                    ELSE
                                       ANNADJ = UPANNADJ(ECPt_TO,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                    END IF
                                 ELSE
                                    DO ZYR = UNXPH , UNAPH
                                       KYR = ZYR - UNXPH + 1
                                       AN1(KYR) = 1.0
                                       IF ((CURIYR+ZYR-1) .LE. UNYEAR)THEN
                                          ANN(KYR) = UPANNADJ(ECPt_TO,CURIYR + ZYR - 1)
                                       ELSE
                                          ANN(KYR) = UPANNADJ(ECPt_TO,UNYEAR) * ANNRTE ** FLOAT((CURIYR + ZYR - 1) - UNYEAR)
                                       END IF
                                    END DO
                                    ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                             PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                                 END IF

                                 OV_CLtNG = OV_CLtNG * ANNADJ
                                 CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,JYR,OV_CLtNG,UPSCPR, &
                                    UPCAPD(1,IECP),UPGNPD,RETIRT_CCS,EPUFDT,RETROR_CCS,TXBOOK,FNBOOK)

!                          SUBROUTINE EPINCST(NYR,   XPH,    FPH,    LCP,    CLT,   PLT,   CYR,   FYR,OVRCST,  PROFILE,i
!                                   CAPESC,        GNPF,  INTR,      DEBT_F,ROR,       TXBOOK,BVBOOK)

                                 URATIO = TXBOOK / FNBOOK
                                 CAPUNSTL = FNBOOK

!                                Check Vintage for Retrofit Tax Life

                                 IF (ECL_YR(IGRP) .LT. UPSTXYR)THEN
                                    STXLF = UPSTXLF(1)
                                 ELSE
                                    STXLF = UPSTXLF(2)
                                 END IF
                                 CALL EPNBLD(DBLE(RETROR_CCS),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE_CCS),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)
                                 CLtNG_Annuity = CAPUNSTL * CAPUTIL
                                 OBJ_CLtNG = CAPUNSTL * CAPUTIL / CRF(DBLE(EPUTDSCRT),UNFPH-JYR+1) * PWF(DBLE(EPUTDSCRT),JYR-1)

                                 TFOM_CLtNG = 0.0
                                 FOM_CLtNG = 0.0

                                 DO KYR = JYR , UNFPH
                                    XYR = MIN(KYR , UNXPH)
                                    TFOM_CLtNG(KYR) = CLSG_FOM(XYR,I_CLSG) * UCL_CL_NG_FOM_ADJ * UPGNPD(CURIYR + KYR - 1)
                                 END DO
                                 FOM_CLtNG = PVV(TFOM_CLtNG,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))

                                 TVOM_CLtNG = 0.0
                                 VOM_CLtNG = 0.0

                                 DO KYR = JYR , UNFPH
                                    XYR = MIN(KYR , UNXPH)
                                    TVOM_CLtNG(KYR) = ((CLSG_VADJ(XYR,I_CLSG) * UCL_CL_NG_VOM_ADJ) - EPVOM(WING)) * CF * 8.760 * UPGNPD(CURIYR + KYR - 1)
                                 END DO
                                 VOM_CLtNG = PVV(TVOM_CLtNG,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))
                                      
                                 VAL_CL_NG = OBJ_CLtNG + FOM_CLtNG + VOM_CLtNG
                                 IF (USW_DIGIT .GT. 0)VAL_CL_NG = DIGITS2( VAL_CL_NG , DIGITS_PARM)

                                 CALL CVAL(COL_CL_NG,UPOBJ,VAL_CL_NG,COL_CL_NG_mask,UPOBJ,'EP$COAL,28')
                                 !Following line was added to allocate OBJ cost to coal part of converted coal&NG cofiring capacity  - AKN
                                 CALL CVAL(COL_CL_CL,UPOBJ,VAL_CL_NG,COL_CL_CL_mask,UPOBJ,'EP$COAL,28b') 
                                 !Following lines to create Coal and NG cofiring capacity balance constraint to enforce 
                                 !coal part of co-firing has to be at least 40% of total cofiring capacity if the model chooses do cofiring retrofit over 100% natural gas conversion -AKN
                                 ROW_gcf = 'GCF'//COAL//UPYRCD(JYR); call makmsk(ROW_mask_gcf,':GCF:',COAL,UPYRCD(JYR))
                                 CALL CROWTYPE(ROW_gcf,'G       ',ROW_mask_gcf)
                                 VAL_CL_CL = -0.4
                                 CALL CVAL(COL_CL_CL,ROW_gcf,VAL_CL_CL,COL_CL_CL_mask,ROW_mask_gcf,'EP$COAL,28c') 
                                 VAL_CL_NG = 0.6
                                 CALL CVAL(COL_CL_NG,ROW_gcf,VAL_CL_NG,COL_CL_NG_mask,ROW_mask_gcf,'EP$COAL,28d') 

                              END IF
                           END IF ! CLSG_CAP(JYR) > 0

                        END DO ! DO JYR

                     END IF ! UCL_VIN and IFRST
                  END IF ! UCL_CL_NG_SYR

                  DO I_CNFG = 1 , N_CNFG

                     J_CNFG = CNFG_MAP(I_CNFG)
!
!                    After 40th Birthday or Required Year, only allow BACT approved configurations
!
                     CNFG_TST = UCL_NSR_CFG(J_CNFG)
                     IF ((USW_DSI  .GT. 0 .AND. (BYR + UHBSYR .NE. UDSI_YR)) .OR.  &
                        (USW_BACT .GT. 0 .AND. (BYR + UHBSYR .LT. UBACT_YR .OR. AGE .LE. 40))) CNFG_TST = 1
                     IF (USW_BACT .EQ. 0 .AND. USW_DSI .EQ. 0) CNFG_TST = 1
                     IF ((USW_EPA111 .GT. 0) .AND. (BYR + UHBSYR .GT. UEPA_CLYR) .AND. (UCL_CNFG(7,J_CNFG) .NE. 1) ) CNFG_TST = 0 !only allow configs with CCS for 111d (2024)
!                    EXCLUDE SMALL UNITS FROM MATS (also excluded from 111d so keep this)
                     IF (USW_DSI  .GT. 0)THEN
                        IF (CLSG_CAP(IYR,I_CLSG) .LE. 25.0) CNFG_TST = 1
                     END IF

!                    EXCLUDE UNITS WITH PLANNED RETROFITS 

                     CNFG_TST = MAX(CNFG_TST , PLAN_TEST)
!
                     IF (CNFG_TST .EQ. 1) THEN
                        IECP = UCL_ECP(J_CNFG)
                        IF (I_CNFG .EQ. 1) THEN
                           CFG = "COL"
                        ELSE IF (J_CNFG .LT. 10) THEN
                           WRITE(CFG,'("00",I1)') J_CNFG
                        ELSE IF (J_CNFG .LT. 100) THEN
                           WRITE(CFG,'("0",I2)') J_CNFG
                        ELSE
                           WRITE(CFG,'(I3)') J_CNFG
                        END IF
                        COLUMN      = GRP_CD(CGRP)     //COAL//CFG; call makmsk(COLUMN_mask,GRP_CD(CGRP),COAL,CFG)
                        COLUMN_HTRT = GRP_CD_HTRT(CGRP)//COAL//CFG; call makmsk(COLUMN_HTRT_mask,GRP_CD_HTRT(CGRP),COAL,CFG,':!HTRT:')
                        
                        CNFG_TO = J_CNFG
                        ECPt_TO = UCL_ECP(CNFG_TO)

!                       CPENJJ Start

                        DO IECP = 1 , WIIS
                           CP_PEN(IECP) = DBLE(1.0)
                           HRCPEN(IECP) = UECP_HTRT_ADJ(IECP)
                        END DO

                        IF (I_CNFG .GT. 1 .AND. UPSCPEN(ECPt_TO,1) .LT. 0.999)THEN
                           CP_PEN(ECPt_TO) = DBLE(1.0 - UPSCPEN(ECPt_TO,1))
                           HRCPEN(ECPt_TO) = UECP_HTRT_ADJ(ECPt_TO)
                        END IF

                        IF (UCL_CNFG(7,J_CNFG) .EQ. 1 .AND. I_CNFG .GT. 1) THEN
                           OHR = CLSG_HTRT(IYR,I_CLSG)
                           IF (OHR .GT. HRMAX) THEN

                              CLOSS = UCL_CF1 * UCL_CF2 * UCL_CF3 * UCL_CF4 * HRMAX * CCS_R    
                              CLOSS = 1.00D00 * CLOSS
                              CP_PEN(ECPt_TO) = 1. - CLOSS
                              HRCPEN(ECPt_TO) = (HRMAX/OHR) * (1. / (1. - CLOSS))
                              HRCPEN_ORG(ECPt_TO) = HRCPEN(ECPt_TO) 
                              HRCPEN(ECPt_TO) = UECP_HTRT_ADJ(ECPt_TO)

                              CP_PEN(ECPt_TO) = (CLSG_CCS_C(I_CLSG) * HRCPEN_ORG(ECPt_TO)) / HRCPEN(ECPt_TO)
                           ELSE

                              CLOSS = CLSG_CCS_C(I_CLSG)
 
                              CP_PEN(ECPt_TO) = 1. - CLOSS

                              HRCPEN(ECPt_TO) = CLSG_CCS_H(I_CLSG) / OHR

                              HRCPEN_ORG(ECPt_TO) = HRCPEN(ECPt_TO)      

                           ENDIF

                        END IF

                        ITST1 = 0
                        ITST2 = 0
                        ITST3 = 0
                        TST_ACI = 0
                        UVALUE = DBLE(0.0)
!
                        DO J_ACI = 1 , NUM_ACI + 1
                           DO I_RANK = 1 , 3
                              TST_ACI = MAX(ACI_OPT(J_ACI,I_RANK,ECPt_TO,TYR) , TST_ACI)
                           END DO
                        END DO
!
                        IF (TST_ACI .GT. 0) THEN
                           IF (I_CNFG .EQ. 1 .AND. (CURIYR + IYR - 1 .LT. AYR .OR. UCL_VIN(IYR) .EQ. 0)) THEN
                              UVALUE = CLSG_CAP(IYR,I_CLSG) * 0.001
                              IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2(UVALUE , DIGITS_PARM)
                              ITST1 = 1
                           END IF
                           !IF (CURIYR + IYR - 1 .GE. AYR .AND. UCL_VIN(IYR) .GT. 0 .AND. (ECL_MR(IGRP) .LT. 2 .OR. I_CNFG .EQ. 1)) THEN
                           IF (CURIYR + IYR - 1 .GE. AYR .AND. UCL_VIN(IYR) .GT. 0 ) THEN
                              UVALUE = CLSG_CAP(IYR,I_CLSG) * 0.001
                              IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
                              ITST2 = 1
                           END IF
                           IF (IYR .GE. L_YR) THEN
                              UVALUE = CLSG_CAP(IYR,I_CLSG) * 0.001
                              IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
                              ITST3 = 1
                           END IF
                           IF (I_CNFG .GT. 1 .AND. UCL_CNFG(7,J_CNFG) .EQ. 1)UVALUE = UVALUE * CLSG_CCS(IYR,I_CLSG)
                        END IF
                        TST = UVALUE

                        IF (IFRST .EQ. 1 .AND. TST .GT. 0.0) THEN
!                          IF ((CURIYR + UHBSYR + UPRTLT) .EQ. ECL_ACEYR(IGRP) .AND. HTRT_TEST .EQ. 0)THEN
!                          IF ((CURIYR + UHBSYR + IYR - 1) .EQ. ECL_ACEYR(IGRP) .AND. IYR .GT. 1 .AND. HTRT_TEST .EQ. 0)THEN
                           IF ((CURIYR + UHBSYR + UPRTLT) .EQ. ECL_ACEYR(IGRP) .AND. IYR .GT. 1 .AND. HTRT_TEST .EQ. 0)THEN
                              CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(0.0),COLUMN_mask,'EP$COAL,29-1')
!     if (i_cnfg .eq. 1)write(13,2344) curiyr+1989,i_clsg,column,uplntcd(ecpt_to)
!2344 format(1h ,'!colret',i4,i5,a10,a3)
                           ELSE
                           CALL CBND(UPBND,COLUMN,DBLE(0.0),UVALUE,COLUMN_mask,'EP$COAL,29')
!     if (i_cnfg .eq. 1)write(13,2345) curiyr+1989,i_clsg,column,uplntcd(ecpt_to),uvalue
!2345 format(1h ,'!colopr',i4,i5,a10,a3,f10.3)
                           END IF
                           IF (HTRT_TEST .EQ. 0) CALL CBND(UPBND,COLUMN_HTRT,DBLE(0.0),UVALUE,COLUMN_HTRT_mask,'EP$COAL,30')
!     if (i_cnfg .eq. 1 .and. htrt_test .eq. 0)write(13,2346) curiyr+1989,i_clsg,column_htrt,uplntcd(ecpt_to),uvalue,clsg_qt(i_clsg),HTRT_OVRQ(ECPt_TO,CLSG_QT(I_CLSG))
!2346 format(1h ,'!colhri',i4,i5,a10,a3,f10.3,i3,f10.3)
                        END IF
!
                        IF (TST .GT. 0.0) THEN
!
                           IF (UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1) THEN
                              ROW = 'O'//COAL//'XX'//UPYRCD(CGRP); call makmsk(ROW_mask,':O:',COAL,':XX:',UPYRCD(CGRP))
                              VALUE = DBLE(1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,31')
                              IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,32')
                           END IF
!
!                          Pass Capacity Forward once Fix Costs Are Paid but Only if capacity is still available in the next period
!
                           IF (IFRST .EQ. 1) THEN
                              IF (UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) THEN
                                 IF (CLSG_CAP(CGRP+1,I_CLSG) .GT. 0.0001) THEN
                                 ROW = 'O'//COAL//'XX'//UPYRCD(CGRP+1); call makmsk(ROW_mask,':O:',COAL,':XX:',UPYRCD(CGRP+1))
                                 VALUE = DBLE(-1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,33')
                                 IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,34')
                              END IF
                           END IF
                           END IF
!
!                          ASSIGN WEIGHT TO EACH ECP TYPE
!
                           ECP_SHR = 0.0
                           IF (I_CNFG .EQ. 1 .AND. IYR .EQ. UNXPH) THEN
                              TECP3 = 0.0
                              DO IECP = 1 , WIIS
                                 TECP = 0.0
                                 TECP2 = 0.0
                                 KW = 0.0
                                 DO IY = 1 , UNFPH - IYR + 1
                                    IF (IECP .EQ. EMM_CL_ECPt(IGRP,MIN(UNYEAR,CURIYR+IYR+IY-2))) THEN
                                       TECP(IY) = 1.0
                                       TECP2 = 1.0
                                    END IF
                                    KW(IY) = 1.0
                                 END DO
                                 IF (TECP2 .EQ. 1.0) THEN
                                    PV_ECP = PVV(TECP,ECP_D_FPH,UNFPH-IYR+1,DBLE(EPUTDSCRT))
                                    PV_KW = PVV(KW,ECP_D_FPH,UNFPH-IYR+1,DBLE(EPUTDSCRT))
                                    ECP_SHR(IECP) = PV_ECP / PV_KW
                                 END IF
                                 TECP3 = TECP3 + ECP_SHR(IECP)
                              END DO
                              IF (TECP3 .NE. 1.0) THEN
                                 DO IECP = 1 , WIIS
                                    IF (ECP_SHR(IECP) .GT. 0.0) THEN
                                       WRITE(18,6732) CURIYR+UHBSYR,CURIYR+IYR+UHBSYR-1,IGRP,IECP,ECP_SHR(IECP)
 6732                                  FORMAT(1X,"ECP_SHR",4(":",I5),":",F9.3)
                                    END IF
                                 END DO
                                 WRITE(18,6733) CURIYR+UHBSYR,CURIYR+IYR+UHBSYR-1,IGRP,(EMM_CL_ECPt(IGRP,MIN(UNYEAR,CURIYR+IY-1)),IY=1,UNFPH)
 6733                            FORMAT(1X,"EMM_CL_ECPt",3(":",I5),20(":",I2))
                              END IF
                           ELSE
                              IECP = UCL_ECP(J_CNFG)
                              IF (IECP .NE. EMM_CL_ECPt(IGRP,MIN(UNYEAR,CURIYR+IYR-1)) .AND. I_CNFG .EQ. 1) THEN
                                 WRITE(18,6734) CURIYR+UHBSYR,CURIYR+IYR+UHBSYR-1,IGRP,EMM_CL_ECPt(IGRP,MIN(UNYEAR,CURIYR+IYR-1)),IECP,I_CNFG,J_CNFG, &
                                    CLSG_CAP(IYR,I_CLSG)
 6734                            FORMAT(1X,"ECP_TYPE_MISMATCH",7(":",I5),":",F9.3)
                                 IECP = EMM_CL_ECPt(IGRP,MIN(UNYEAR,CURIYR+IYR-1))
                              END IF
                              ECP_SHR(IECP) = 1.0
                           END IF
!
                           DO TRG = 1 , UNRGNS
                              IF (CLSG_RG_CAP(TRG,I_CLSG) .GT. 0.0) THEN
                                 RG_SHR = CLSG_RG_CAP(TRG,I_CLSG) / CLSG_RG_CAP(MNUMNR,I_CLSG)
!
!                                INTERSECT APPROPRIATE CAPACITY ROWS
!
                                 DO ISP = 1 , EPNMSP
                                    DO IECP = 1 , WIIS
                                       IF (ECP_SHR(IECP) .GT. 0.0) THEN
                                          IF (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)) THEN !ECL_MR(IGRP) .EQ. 0
                                             ROW = 'C'//UPRGCD(TRG)//UPLNTCD(IECP)//'X'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(IYR); call makmsk(ROW_mask,':C:',UPRGCD(TRG),UPLNTCD(IECP),':X:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(IYR))
                                          ELSE
                                             ROW = 'C'//UPRGCD(TRG)//UPLNTCD(IECP)//'M'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(IYR); call makmsk(ROW_mask,':C:',UPRGCD(TRG),UPLNTCD(IECP),':M:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(IYR))
                                          END IF
                                          VALUE = DBLE(-RG_SHR) * DBLE(CLSG_SP_CAP_FAC(ISP,I_CLSG)) * ECP_SHR(IECP) * CP_PEN(IECP)    !CPENJJ
                        
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                                          IF (ISNAN(VALUE).OR. ABS(VALUE) .GT. HUGE(VALUE)) THEN   ! check for NaNQ this way

                                             WRITE(6,9371) CURIRUN, CURCALYR, TRG, I_CLSG, IECP, ISP, VALUE, RG_SHR, &
                                                CLSG_SP_CAP_FAC(ISP,I_CLSG), ECP_SHR(IECP), CP_PEN(IECP), &
                                                CLSG_RG_CAP(TRG,I_CLSG), CLSG_RG_CAP(MNUMNR,I_CLSG) 
 9371                                        FORMAT(1X,"EP_COAL_CP_PEN",6(":",I6),7(":",F20.6))

                                             RG_SHR = 1.0
                                             CLSG_RG_CAP(MNUMNR,I_CLSG) = CLSG_RG_CAP(TRG,I_CLSG) 
                                             CP_PEN(IECP) = 1.0
                                             CLSG_SP_CAP_FAC(ISP,I_CLSG) = 0.0
                                             VALUE = DBLE(-RG_SHR) * DBLE(CLSG_SP_CAP_FAC(ISP,I_CLSG)) * ECP_SHR(IECP) * CP_PEN(IECP)    !CPENJJ
                                             IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          END IF
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,35')
                                          !Following if statement added to handle coal part of coal NG cofiring conversion retrofit decision
                                          IF ((UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1)  .AND. (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)))  THEN
                                              COL_CL_CL = 'GCL'//GRP_CD(CGRP)//COAL;  call makmsk(COL_CL_CL_mask,':GCL:',GRP_CD(CGRP),COAL)   
                                              CALL CVAL(COL_CL_CL,ROW,VALUE,COL_CL_CL_mask,ROW_mask,'EP$COAL,35a')
                                          endif

                                          IF (HTRT_TEST .EQ. 0) THEN
                                             IF (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)) THEN
                                                ROW = 'C'//UPRGCD(TRG)//UPLNTCD(IECP)//'H'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(IYR); call makmsk(ROW_mask,':C:',UPRGCD(TRG),UPLNTCD(IECP),':H:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(IYR))
                                             ELSE
                                                ROW = 'C'//UPRGCD(TRG)//UPLNTCD(IECP)//'Y'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(IYR); call makmsk(ROW_mask,':C:',UPRGCD(TRG),UPLNTCD(IECP),':Y:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(IYR))
                                             END IF
                                             VALUE = DBLE(-RG_SHR) * DBLE(CLSG_SP_CAP_FAC(ISP,I_CLSG)) * ECP_SHR(IECP) * CP_PEN(IECP)    !CPENJJ
                                             IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                             CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,36')
                                          END IF
                                       END IF
                                    END DO
                                 END DO
!
!                                TOTAL CAPACITY ROW BY REGION AND PLANT TYPE
!
                                 DO IECP = 1 , WIIS
                                    IF (ECP_SHR(IECP) .GT. 0.0) THEN
                                       ROW = 'F'//UPRGCD(TRG)//UPLNTCD(IECP)//'CAP'//UPYRCD(IYR); call makmsk(ROW_mask,':F:',UPRGCD(TRG),UPLNTCD(IECP),':CAP:',UPYRCD(IYR))
                                       VALUE = DBLE(RG_SHR) * ECP_SHR(IECP) * CP_PEN(IECP)     !CPENJJ
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,37')
                                       IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,38')
                                    END IF
                                 END DO
!
!                                RESERVE MARGIN ROW
!
                                 ROW = 'R'//UPRGCD(TRG)//'XXXXX'//UPYRCD(IYR); call makmsk(ROW_mask,':R:',UPRGCD(TRG),':XXXXX:',UPYRCD(IYR))

!                                RAG start of capacity derating sections
!                                need to multiply RG_SHR by (1 - CLOSS) when I_CNFG indicates leads to (UCL_ROPT(5,I_ROPT) .GT. 0), right?
!                                need to apply the (1 - CLOSS) factor to any of the following capacity related rows?
!                                btw, could use CLOSS = UCL_SC_F*(0.0031)*UCL_SC_O throughout simpler coding (negligible heat rate effect)

                                 IECP = UCL_ECP(J_CNFG)            !CPENJJ
                                 VALUE = RG_SHR * CP_PEN(IECP)     !CPENJJ
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,39')
                                 IF (HTRT_TEST .EQ. 0) THEN
                                     CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,40')
                                 ENDIF
!
!                                MAXIMUM RETIREMENTS ROW
!
                                 IF (IECP .GE. WIPC .OR. ((USW_BACT .LE. 0 .OR. (UHBSYR + CURIYR + UPRTLT) .LT. UBACT_YR) .AND.  &
                                     (UHBSYR + CURIYR + UPRTLT) .NE. UDSI_YR)) THEN
                                    IF (UPRETRAT .GT. 0.0 .AND. IYR .EQ. UPRTLT+1 .AND. IFRST .EQ. 1 .AND. USW_ERET .EQ. 1) THEN
                                       ROW = 'R'//UPRGCD(TRG)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(TRG),':MXRET0:')
                                       VALUE = RG_SHR
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,41')
                                       IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,42')
                                    END IF
                                 END IF
!
!                                TOTAL CAPACITY ROW
!
                                 ROW = 'TOTCAP'//UPRGCD(TRG)//UPYRCD(IYR); call makmsk(ROW_mask,':TOTCAP:',UPRGCD(TRG),UPYRCD(IYR))
                                 VALUE = RG_SHR * CP_PEN(IECP)      !CPENJJ
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,43')
                                 IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,44')
                              END IF ! CLSG_RG_CAP > 0
                           END DO ! DO TRG
!
!                          Increase Amount of Coal Delivered from Each Supply Curve at Lower Transportation Rate
!
                           CFLOW_TYPE = 0.0
                           DO ECPt_TO = 1 , WIIS
                              IF (ECP_SHR(ECPt_TO) .GT. 0.0) THEN
                                 ISCRB = ECP_SCRUB(ECPt_TO,CURIYR)
                                 IF (TBTU .GT. 0.0) THEN
                                    SDV_PRF = CMM_SDV_INDX(IGRP)
                                    LDV_PRF = CMM_LDV_INDX(IGRP)
                                    DO SC = 1 , NUM_SC
                                       CONT_PRF = CMM_CONT_INDX(SC,IGRP)
                                       IF (CLSG_CMM_CL_BTUS(SC,I_CLSG) .GT. 0.0) THEN
                                          TRAN_PRF = CMM_TRANS_INDX(SC,IGRP)
                                          IF (SC .LT. 10) THEN
                                             WRITE(SC_CD,'("0",I1)') SC
                                          ELSE
                                             WRITE(SC_CD,'(I2)') SC
                                          END IF
                                          ROW_1st = 'T'//SC_CD//EPFLCD(CLRG)//SCRB_CD(ISCRB)//'ZZ'//UPYRCD(IYR); call makmsk(ROW_1st_mask,':T:',SC_CD,EPFLCD(CLRG),SCRB_CD(ISCRB),':ZZ:',UPYRCD(IYR))
                                          IF (XCL_TR_T2(SC,CLRG,CURIYR) .GT. XCL_TR_T1(SC,CLRG,CURIYR) .AND. XCL_TR_T1(SC,CLRG,CURIYR) .LT. 900.0 .AND. ECPt_TO .LT. WIPC) THEN
                                             T_BND = ECP_SHR(ECPt_TO) * CLSG_EMM_CL_BTUs(I_CLSG,TYR) * CMM_TRANS_PRF(TRAN_PRF,TYR) * CP_PEN(ECPt_TO) * HRCPEN(ECPt_TO)  !CPENJJ
!
!                                            Restricts 1st Tier Price to Historical share only * CLSG_CMM_CL_BTUS(SC,I_CLSG) / TBTU
!
                                             IF (T_BND .GT. ECP_MIN .AND. CLSG_CAP(IYR,I_CLSG) .GT. ECP_MIN) THEN
                                                T_BND = T_BND / (CLSG_CAP(IYR,I_CLSG) * 0.001)
                                                CALL CVAL(COLUMN,ROW_1st,-T_BND*0.1,COLUMN_mask,ROW_1st_mask,'EP$COAL,45')
                                                IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW_1st,-T_BND*0.1,COLUMN_HTRT_mask,ROW_1st_mask,'EP$COAL,46')
                                                IF (ITST .EQ. 0) THEN
                                                   WRITE(18,3917) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IGRP,TRAN_PRF,CLRG,SC,ECPt_TO,CNFG_TO,ISCRB, &
                                                      XCL_TR_T2(SC,CLRG,CURIYR),XCL_TR_T1(SC,CLRG,CURIYR),XCL_1TESC(SC,IYR,CURIYR-1,CLRG),XCL_2TESC(SC,IYR,CURIYR-1,CLRG),CLSG_EMM_CL_BTUs(I_CLSG,TYR), &
                                                      CMM_TRANS_PRF(TRAN_PRF,TYR),CLSG_CMM_CL_BTUS(SC,I_CLSG),TBTU,COLUMN,ROW_1st,CLSG_CAP(IYR,I_CLSG),T_BND
 3917                                              FORMAT(1X,"First_Tier_ECP",9(":",I4),8(":",F9.3),2(":",A8),2(":",F9.3))
                                                   ITST = 1
                                                END IF
                                             END IF
                                          END IF
!                                          IF (XCL_TR_T2(SC,CLRG,CURIYR) .GT. XCL_TR_T1(SC,CLRG,CURIYR) .AND. XCL_TR_T1(SC,CLRG,CURIYR) .LT. 900.0 .AND. ECPt_TO .LT. WIPC) THEN
!                                             IF(SC .LE. MX_NCOALS)THEN
!                                                IF(XCL_TRNINDX(ECPt_TO,SC,CLRG) .EQ. 0)THEN
!                                                   CALL CVAL(COLUMN,ROW_1st,DBLE(0.0),COLUMN_mask,ROW_1st_mask,'EP$COAL,47')
!                                                   IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW_1st,DBLE(0.0),COLUMN_HTRT_mask,ROW_1st_mask,'EP$COAL,48')
!                                                ENDIF
!                                             ENDIF
!                                                ENDIF

                                          CFLOW = ECP_SHR(ECPt_TO) * CLSG_EMM_CL_BTUs(I_CLSG,TYR) * CMM_CONT_PRF(CONT_PRF,TYR) * CLSG_CMM_CL_BTUS(SC,I_CLSG) / TBTU
                                          IFL = XCL_TYPE(SC)
                                          CFLOW_TYPE(ISCRB,SC) = CFLOW_TYPE(ISCRB,SC) + CFLOW
                                          IF (I_CNFG .EQ. 1) THEN
                                             CFLOW_INIT(ISCRB,SC) = CFLOW_INIT(ISCRB,SC) + CFLOW
                                             ORIG_CONT_FLOWS(SC,CLRG,ISCRB,IYR) = ORIG_CONT_FLOWS(SC,CLRG,ISCRB,IYR) + CFLOW
                                          END IF
                                       END IF
                                    END DO
                                 ELSE
                                    SDV_PRF = NEW_SDV_INDX(CLRG)
                                    LDV_PRF = NEW_LDV_INDX(CLRG)
                                 END IF

                                 IF (SDV_PRF .GT. MX_PRF.OR. SDV_PRF .LT. 1) THEN
                                    WRITE(6,7713) CURIRUN, CURCALYR, SDV_PRF, MX_PRF
 7713                               FORMAT(1X,"SDV_PRF_ERROR",4(":",I30))
                                    SDV_PRF = MX_PRF
                                 END IF

                                 IF (LDV_PRF .GT. MX_PRF .OR. LDV_PRF .LT. 1) THEN
                                    WRITE(6,7714) CURIRUN, CURCALYR, LDV_PRF, MX_PRF
 7714                               FORMAT(1X,"LDV_PRF_ERROR",4(":",I30))
                                    LDV_PRF = MX_PRF
                                 END IF
!
                                 IF (DV_SUB(CLRG,ISCRB) .EQ. 1) THEN
                                    ROW_FLDV = 'FDV'//EPFLCD(CLRG)//'S'//UPLNTCD(ECPt_to)//UPYRCD(IYR); call makmsk(ROW_FLDV_mask,':FDV:',EPFLCD(CLRG),':S:',UPLNTCD(ECPt_to),UPYRCD(IYR))
                                    T_BND = ECP_SHR(ECPt_TO) * CLSG_EMM_CL_BTUs(I_CLSG,TYR) * CMM_SDV_PRF(SDV_PRF,TYR) * CP_PEN(ECPt_TO) * HRCPEN(ECPt_TO)  !CPENJJ
                                    IF (T_BND .GT. ECP_MIN .AND. CLSG_CAP(IYR,I_CLSG) .GT. ECP_MIN) THEN
                                       T_BND = T_BND / (CLSG_CAP(IYR,I_CLSG) * 0.001)
                                       CALL CVAL(COLUMN,ROW_FLDV,-T_BND * 0.1,COLUMN_mask,ROW_FLDV_mask,'EP$COAL,49')
                                       !Following if statement added to handle coal part of coal NG cofiring conversion retrofit decision
                                       IF ((UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1)  .AND. (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)))  THEN
                                            COL_CL_CL = 'GCL'//GRP_CD(CGRP)//COAL;  call makmsk(COL_CL_CL_mask,':GCL:',GRP_CD(CGRP),COAL)   
                                            CALL CVAL(COL_CL_CL,ROW_FLDV,-T_BND * 0.1,COL_CL_CL_mask,ROW_FLDV_mask,'EP$COAL,49a')
                                       endif
                                       IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW_FLDV,-T_BND * 0.1,COLUMN_HTRT_mask,ROW_FLDV_mask,'EP$COAL,50')
                                    END IF
                                 END IF
!
                                 IF (DV_LIG(CLRG,ISCRB) .EQ. 1) THEN
                                    ROW_FLDV = 'FDV'//EPFLCD(CLRG)//'L'//UPLNTCD(ECPt_to)//UPYRCD(IYR); call makmsk(ROW_FLDV_mask,':FDV:',EPFLCD(CLRG),':L:',UPLNTCD(ECPt_to),UPYRCD(IYR))
                                    T_BND = ECP_SHR(ECPt_TO) * CLSG_EMM_CL_BTUs(I_CLSG,TYR) * CMM_LDV_PRF(LDV_PRF,TYR) * CP_PEN(ECPt_TO) * HRCPEN(ECPt_TO)  !CPENJJ
                                    IF (T_BND .GT. ECP_MIN .AND. CLSG_CAP(IYR,I_CLSG) .GT. ECP_MIN) THEN
                                       T_BND = T_BND / (CLSG_CAP(IYR,I_CLSG) * 0.001)
                                       CALL CVAL(COLUMN,ROW_FLDV,-T_BND * 0.1,COLUMN_mask,ROW_FLDV_mask,'EP$COAL,51')
                                       !Following if statement added to handle coal part of coal NG cofiring conversion retrofit decision EC PAIMMS: cpass_cNNGCL_rFDVLle
                                       IF ((UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1)  .AND. (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)))  THEN
                                            COL_CL_CL = 'GCL'//GRP_CD(CGRP)//COAL;  call makmsk(COL_CL_CL_mask,':GCL:',GRP_CD(CGRP),COAL)   
                                            CALL CVAL(COL_CL_CL,ROW_FLDV,-T_BND * 0.1,COL_CL_CL_mask,ROW_FLDV_mask,'EP$COAL,51a')
                                       ENDIF
                                       IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW_FLDV,-T_BND * 0.1,COLUMN_HTRT_mask,ROW_FLDV_mask,'EP$COAL,52')
                                    END IF
                                 END IF
                              END IF  ! ECP_SHR > 0
                           END DO  ! DO ECPt
!
                           IF (CLSG_CAP(IYR,I_CLSG) .GT. ECP_MIN .AND. I_CNFG .GT. 1) THEN
                              DO SC = 1 , NUM_SC
                                 IF (SC .LT. 10) THEN
                                    WRITE(SC_CD,'("0",I1)') SC
                                 ELSE
                                    WRITE(SC_CD,'(I2)') SC
                                 END IF
                                 DO ISCRB = 1 , 2
                                    IF (ISCRB .EQ. 1) THEN
                                       JSCRB = 2
                                    ELSE
                                       JSCRB = 1
                                    END IF
                                    VALUE = MIN(CFLOW_TYPE(ISCRB,SC) , CFLOW_INIT(JSCRB,SC))
                                    IF (VALUE .GT. ECP_MIN) THEN
                                       IFL = XCL_TYPE(SC)
                                       ROW_CF = 'K'//UPFLCD(IFL)//SC_CD//EPFLCD(CLRG)// SCRB_CD(ISCRB)//UPYRCD(IYR); call makmsk(ROW_CF_mask,':K:',UPFLCD(IFL),SC_CD,EPFLCD(CLRG), SCRB_CD(ISCRB),UPYRCD(IYR))
                                       CALL CVAL(COLUMN,ROW_CF,-VALUE*0.1,COLUMN_mask,ROW_CF_mask,'EP$COAL,53')
                                       IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW_CF,-VALUE*0.1,COLUMN_HTRT_mask,ROW_CF_mask,'EP$COAL,54')
                                       ROW_CF = 'K'//UPFLCD(IFL)//SC_CD//EPFLCD(CLRG)// SCRB_CD(JSCRB)//UPYRCD(IYR); call makmsk(ROW_CF_mask,':K:',UPFLCD(IFL),SC_CD,EPFLCD(CLRG), SCRB_CD(JSCRB),UPYRCD(IYR))
                                       CALL CVAL(COLUMN,ROW_CF,VALUE*0.1,COLUMN_mask,ROW_CF_mask,'EP$COAL,55')
                                       IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW_CF,VALUE*0.1,COLUMN_HTRT_mask,ROW_CF_mask,'EP$COAL,56')
                                    END IF
                                 END DO
                              END DO
                           END IF
                           ECPt_TO = UCL_ECP(CNFG_TO)
!
!                          Require Retrofit in Last Year if the Same Retrofit is Selected in First Year
!
                           IF (IFRST .EQ. 1) THEN
!
!                             FGD - SO2 Emission Controls
!
                              IF (CNT_FGD .EQ. 0 .AND. K_FGD .GT. 0) THEN
                                 J_FGD = UCL_CNFG(3,J_CNFG)
                                 IF ((IYR .EQ. F_YR .AND. J_FGD .GT. 0) .OR. (IYR .EQ. L_YR .AND. J_FGD .EQ. 0)) THEN
                                    ROW = 'Y'//COAL//'FGD'; call makmsk(ROW_mask,':Y:',COAL,':FGD:')
                                    CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$COAL,57')
                                    IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,DBLE(1.0),COLUMN_HTRT_mask,ROW_mask,'EP$COAL,58')
                                    IF (T_FGD .EQ. 0) THEN
                                       CALL CROWTYPE(ROW,'L       ',ROW_mask)
                                       UVALUE = MAX(CLSG_CAP(F_YR,I_CLSG) , CLSG_CAP(L_YR,I_CLSG)) * 0.001
                                       IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
                                       CALL CRHS(UPRHS,ROW,UVALUE,ROW_mask,'EP$COAL,59')
                                       T_FGD = 1
                                    END IF
                                 END IF
                              END IF
!
!                             COMB - NOX Combustion Controls
!
!                             IF (CNT_COMB .EQ. 0 .AND. K_COMB .GT. 0) THEN
!                                J_COMB = UCL_CNFG(4,J_CNFG)
!                                IF ((IYR .EQ. F_YR .AND. J_COMB .GT. 0) .OR. (IYR .EQ. L_YR .AND. J_COMB .EQ. 0)) THEN
!                                   ROW = 'Y'//COAL//'CMB'
!                                   CALL CVAL(COLUMN,ROW,DBLE(1.0),'EP$COAL,60')
!                                   IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,DBLE(1.0),'EP$COAL,61')
!                                   IF (T_CMB .EQ. 0) THEN
!                                      IRET = DFMCRTP(ROW,'L       ')
!                                      UVALUE = MAX(CLSG_CAP(F_YR,I_CLSG) , CLSG_CAP(L_YR,I_CLSG)) * 0.001
!                                      IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
!                                      CALL CRHS(UPRHS,ROW,UVALUE,'EP$COAL,62')
!                                      T_CMB = 1
!                                   END IF
!                                END IF
!                             END IF
!
!                             SNCR - NOX Post Combustion Emission Controls
!
                              IF (CNT_SNCR .EQ. 0 .AND. K_SNCR .GT. 0) THEN
                                 J_SNCR = UCL_CNFG(5,J_CNFG)
                                 IF ((IYR .EQ. F_YR .AND. J_SNCR .GT. 0) .OR. (IYR .EQ. L_YR .AND. J_SNCR .EQ. 0)) THEN
                                    ROW = 'Y'//COAL//'NCR'; call makmsk(ROW_mask,':Y:',COAL,':NCR:')
                                    CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$COAL,63')
                                    IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,DBLE(1.0),COLUMN_HTRT_mask,ROW_mask,'EP$COAL,64')
                                    IF (T_NCR .EQ. 0) THEN
                                       CALL CROWTYPE(ROW,'L       ',ROW_mask)
                                       UVALUE = MAX(CLSG_CAP(F_YR,I_CLSG) , CLSG_CAP(L_YR,I_CLSG)) * 0.001
                                       IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
                                       CALL CRHS(UPRHS,ROW,UVALUE,ROW_mask,'EP$COAL,65')
                                       T_NCR = 1
                                    END IF
                                 END IF
                              END IF
!
!                             SCR - NOX Post Combustion Emission Controls
!
!                             IF (CNT_SCR .EQ. 0 .AND. K_SCR .GT. 0) THEN
!                                J_SCR = UCL_CNFG(6,J_CNFG)
!                                IF ((IYR .EQ. F_YR .AND. J_SCR .GT. 0) .OR. (IYR .EQ. L_YR .AND. J_SCR .EQ. 0)) THEN
!                                   ROW = 'Y'//COAL//'SCR'
!                                   CALL CVAL(COLUMN,ROW,DBLE(1.0),'EP$COAL,66')
!                                   IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,DBLE(1.0),'EP$COAL,67')
!                                   IF (T_SCR .EQ. 0) THEN
!                                      IRET = DFMCRTP(ROW,'L       ')
!                                      UVALUE = MAX(CLSG_CAP(F_YR,I_CLSG) , CLSG_CAP(L_YR,I_CLSG)) * 0.001
!                                      IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
!                                      CALL CRHS(UPRHS,ROW,UVALUE,'EP$COAL,68')
!                                      T_SCR = 1
!                                   END IF
!                                END IF
!                             END IF

!                             CTS - Carbon Capture, Transport and Storage

                              IF (CNT_CTS .EQ. 0 .AND. K_CTS .GT. 0) THEN
                                 J_CTS = UCL_CNFG(7,J_CNFG)
                                    ROW = 'Y'//COAL//'CTS'; call makmsk(ROW_mask,':Y:',COAL,':CTS:')
                                 IF (IYR .EQ. F_YR .AND. J_CTS .GT. 0) THEN !.OR. (IYR .EQ. L_YR .AND. J_CTS .EQ. 0)) THEN
                                    CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$COAL,69')
                                    IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,DBLE(1.0),COLUMN_HTRT_mask,ROW_mask,'EP$COAL,70')
                                    IF (T_CTS .EQ. 0) THEN
                                       CALL CROWTYPE(ROW,'L       ',ROW_mask)
                                    !   UVALUE = MAX(CLSG_CAP(F_YR,I_CLSG) , CLSG_CAP(L_YR,I_CLSG)) * 0.001
                                     !  IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
                                       CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$COAL,71')
                                       T_CTS = 1
                                    END IF
                                 ELSE IF (IYR .EQ. L_YR .AND. J_CTS .GT. 0) then
                                    CALL CVAL(COLUMN,ROW,DBLE(-1.0),COLUMN_mask,ROW_mask,'EP$COAL,69')
                                    IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,DBLE(-1.0),COLUMN_HTRT_mask,ROW_mask,'EP$COAL,70')
                                 END IF
                              END IF

!                             Fabric Filter
!
!                             IF (CNT_FF .EQ. 0 .AND. K_FF .GT. 0) THEN
!                                J_FF = UCL_CNFG(8,J_CNFG)
!                                IF ((IYR .EQ. F_YR .AND. J_FF .GT. 0) .OR. (IYR .EQ. L_YR .AND. J_FF .EQ. 0)) THEN
!                                   ROW = 'Y'//COAL//'FFX'
!                                   CALL CVAL(COLUMN,ROW,DBLE(1.0),'EP$COAL,72')
!                                   IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,DBLE(1.0),'EP$COAL,73')
!                                   IF (T_FFX .EQ. 0) THEN
!                                      IRET = DFMCRTP(ROW,'L       ')
!                                      UVALUE = MAX(CLSG_CAP(F_YR,I_CLSG) , CLSG_CAP(L_YR,I_CLSG)) * 0.001
!                                      IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
!                                      CALL CRHS(UPRHS,ROW,UVALUE,'EP$COAL,74')
!                                      T_FFX = 1
!                                   END IF
!                                END IF
!                             END IF
!
!                             HRI _ HEAT RATE IMPROVEMENT
!
                              IF (UCL_VIN(IYR) .GT. 0 .AND. HTRT_TEST .EQ. 0) THEN
                                 ROW = 'O'//COAL//'HRI'; call makmsk(ROW_mask,':O:',COAL,':HRI:')
                                 IF (T_HRI .EQ. 0)THEN
                                    CALL CROWTYPE(ROW,'L       ',ROW_mask)
                                    CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$COAL,95')
                                 END IF
                                 IF (UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) THEN
                                    VALUE = DBLE(1.0)
                                 ELSE
                                    VALUE = DBLE(-1.0)
                                 END IF
                                 CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,96')
                                 T_HRI = 1
                              END IF
                           END IF ! IF IFRST = 1
!
!                          SO2 Retrofit Constraint
!
                           IF (UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1) THEN !RGCAP
                              N_CCS = UCL_CNFG(7,J_CNFG) !RGCAP
                              N_FGD = UCL_CNFG(3,J_CNFG)
                              VALUE = 0.0 !RGCAP
                              VALUE_CCS = 0.0
                              ROW =  'LUXXRET'//UPYRCD(IYR); call makmsk(ROW_mask,':LUXXRET:',UPYRCD(IYR))
                              ROW_CCS =  'LUXXCCS'//UPYRCD(IYR); call makmsk(ROW_CCS_mask,':LUXXCCS:',UPYRCD(IYR))
                              IF (R_FGD .EQ. 0 .AND. N_FGD .EQ. 1) VALUE = 1.0 !RGCAP
                              IF (R_CCS .EQ. 0 .AND. N_CCS .EQ. 1) THEN
!                                VALUE = 1.0
                                 VALUE_CCS = 1.0 !RGCAP
                              ENDIF
                              IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,75')
                              IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,76')
                              IF (VALUE_CCS .NE. 0.0) CALL CVAL(COLUMN,ROW_CCS,VALUE_CCS,COLUMN_mask,ROW_CCS_mask,'EP$COAL,77')
                              IF (VALUE_CCS .NE. 0.0 .AND. HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW_CCS,VALUE_CCS,COLUMN_HTRT_mask,ROW_CCS_mask,'EP$COAL,78')
                              IF (CURIYR .EQ. 14) WRITE(18,4313) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,COLUMN,ROW,VALUE,I_FGD,R_FGD,N_FGD, &
                                 UCL_VIN(IYR),ECL_ICFG(IGRP),ECL_RCFG(XYR,IGRP),J_CNFG
 4313                         FORMAT(1X,"LUXXRET",2(":",I4),2(":",A8),":",F12.9,7(":",I3))
                           END IF
!
                           IF (IYR .EQ. L_YR) THEN
                              VALUE = 0.0
                              ROW = 'L'//UPRGCD(IRG)//'P_RET'//UPYRCD(L_YR); call makmsk(ROW_mask,':L:',UPRGCD(IRG),':P_RET:',UPYRCD(L_YR))
                              IF (I_FGD .EQ. 0 .AND. UCL_VIN(IYR) .GT. 0) THEN
                                 IF (R_FGD .EQ. 0) THEN
                                    IF (N_FGD .EQ. 1) THEN
                                       VALUE = 1.0
                                    ELSE
                                       VALUE = 0.0
                                    END IF
                                    IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,79')
                                    IF (VALUE .NE. 0.0 .AND. HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,80')
                                 END IF
                                 IF (CURIYR .EQ. 11) WRITE(18,4314) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,COLUMN,ROW,VALUE,I_FGD,R_FGD,N_FGD, &
                                    UCL_VIN(IYR),ECL_ICFG(IGRP),ECL_RCFG(XYR,IGRP),J_CNFG
 4314                            FORMAT(1X,"P_RET",2(":",I4),2(":",A8),":",F12.9,7(":",I3))
                              END IF
                           END IF
!
!                          REVISE PLANNED MAINTENANCE ROW
!
                           DO IECP = 1 , WIIS
                              IF (ECP_SHR(IECP) .GT. 0.0) THEN
                                 IF (CLSG_FOR(IYR,I_CLSG) .GT. 0.0) THEN
                                    XFOR = CLSG_FOR(IYR,I_CLSG)
                                 ELSE
                                    XFOR = UPFORT(IECP)
                                 END IF
!
                                 IF (CLSG_PMR(IYR,I_CLSG) .GT. 0.0) THEN
                                    XPMR = CLSG_PMR(IYR,I_CLSG)
                                 ELSE
                                    XPMR = UPPMRT(IECP)
                                 END IF
!
                                 VALUE = - 8.760 * XPMR * ECP_SHR(IECP) * CP_PEN(IECP)      !CPENJJ
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 ROW = 'M'//UPRGCD(IRG)//UPLNTCD(IECP)//'X'//EPFLCD(FLRG)//'X'//UPYRCD(IYR); call makmsk(ROW_mask,':M:',UPRGCD(IRG),UPLNTCD(IECP),':X:',EPFLCD(FLRG),':X:',UPYRCD(IYR))
                                 IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .NE. 0.0) THEN
                                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,81')
                                     !Following if statement added to handle coal part of coal NG cofiring conversion retrofit decision
                                     IF ((UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1)  .AND. (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)))  THEN
                                        COL_CL_CL = 'GCL'//GRP_CD(CGRP)//COAL;  call makmsk(COL_CL_CL_mask,':GCL:',GRP_CD(CGRP),COAL)   
                                        CALL CVAL(COL_CL_CL,ROW,VALUE,COL_CL_CL_mask,ROW_mask,'EP$COAL,81a')
                                     ENDIF
                                 ENDIF
                                 IF (VALUE .NE. 0.0 .AND. HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,82')
                                 IF (IGRP .EQ. 68) THEN
                                    WRITE(18,3114) CURIYR+UHBSYR,IRG,IECP,IYR,COLUMN,ROW,VALUE
 3114                               FORMAT(1X,"PM_COAL",4(":",I5),2(":",A8),":",F15.6)
                                 END IF
                              END IF
                           END DO
!
                           IECP = UCL_ECP(CNFG_TO)
 
!                          Determine Cost
!
                           IF (IFRST .EQ. 1) THEN

                              ANNRTE = (UPANNADJ(ECPt_TO,UNYEAR) / UPANNADJ(ECPt_TO,UNYEAR - 10)) ** (1.0 / 10.0)
                              IF (IYR .LT. UNXPH)THEN 
                                 IF ((CURIYR+IYR-1) .LE. UNYEAR)THEN
                                    ANNADJ = UPANNADJ(ECPt_TO,CURIYR+IYR-1)
                                 ELSE
                                    ANNADJ = UPANNADJ(ECPt_TO,UNYEAR) * ANNRTE ** FLOAT((CURIYR + IYR - 1) - UNYEAR)
                                 END IF
                              ELSE
                                 DO JYR = UNXPH , UNAPH
                                    KYR = JYR - UNXPH + 1
                                    AN1(KYR) = 1.0
                                    IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                       ANN(KYR) = UPANNADJ(ECPt_TO,CURIYR + JYR - 1)
                                    ELSE
                                       ANN(KYR) = UPANNADJ(ECPt_TO,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                    END IF
                                 END DO
                                 ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                          PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                              END IF


                              TEST_CTS = 0
!
!                             USE Weighted Capacity Factor for All Periods in the Explicit Planning Horizon
!
                              DO IY = 1 , UNFPH - IYR + 1
                                 TCF(IY) = max(0.75 , CLSG_EMM_CL_CF(I_CLSG,MIN(UNYEAR,CURIYR+IYR+IY-2)))
                                 KW(IY) = 1.0
                              END DO
                              PV$CF = PVV(TCF,ECP_D_FPH,UNFPH-IYR+1,DBLE(EPUTDSCRT))
                              PV_KW = PVV(KW,ECP_D_FPH,UNFPH-IYR+1,DBLE(EPUTDSCRT))
                              CF = PV$CF / PV_KW
                              OV_CST = 0.0
                              OV_CST_CTS = 0.0
                              CTS_INV_Annuity = 0.0
                              CTS_C = 0.0
                              CTS_F = 0.0
                              CTS_V = 0.0
                              CTS_C_B4 = 0.0
                              CTS_F_B4 = 0.0
                              CTS_V_B4 = 0.0

                              VADJ = CLSG_VADJ(IYR,I_CLSG)

!                             CHECK BAD FOM VALUES

                              IF (ISNAN(CLSG_FOM(IYR,I_CLSG))) THEN
                                 WRITE(6,7371) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_CLSG, IGRP, ECL_IGRP(IGRP), COLUMN, CLSG_CAP(IYR,I_CLSG)
 7371                            FORMAT(1X,"ISNAN_CLSG_FOM",6(":",I5),":",A16,":",F15.3)
                                 CLSG_FOM(IYR,I_CLSG) = 999.999
                              END IF

                              FOM = CLSG_FOM(IYR,I_CLSG)

                              IF ((CURIYR + UHBSYR + UPRTLT) .LE. UNUC_SYR) FOM = MIN(FOM,CLSG_FOM(IYR,I_CLSG))
                              FOM = MAX(FOM,DBLE(0.0))
                              I_ROPT = ROPT_MAP(I_CNFG)
                              HR_PEN = 0.0

!                             if (iyr .eq. 2)write(6,2345) curiyr+1989,i_clsg,column,i_cnfg,i_ropt,j_cnfg,cnfg_map(i_cnfg),  &
!                                ucl_cnfg(3,cnfg_map(i_cnfg)),  &
!                                ucl_cnfg(4,cnfg_map(i_cnfg)),  &
!                                ucl_cnfg(5,cnfg_map(i_cnfg)),  &
!                                ucl_cnfg(6,cnfg_map(i_cnfg)),  &
!                                ucl_cnfg(7,cnfg_map(i_cnfg)),  &
!                                ucl_cnfg(8,cnfg_map(i_cnfg)),  &
!                                clsg_dsi_o(i_clsg),clsg_fgd_o(i_clsg),clsg_scr_o(i_clsg)
!
!2345                         format(1h ,'!cnfg',i4,i6,1x,a8,10i3,3f8.3)

                              IF (ROPT_MAP(I_CNFG) .GT. 0) THEN
                                 IF (UCL_ROPT(1,I_ROPT) .GT. 0) THEN        ! ADD FGD
!                                   DON'T ALLOW FGD IF DSI INSTALLED
                                    IF ((CURIYR + UHBSYR + UPSCLT) .LE. UDSI_YR)THEN
                                       OV_CST = OV_CST + CLSG_FGD_O(I_CLSG)
                                    ELSE
                                       OV_CST = OV_CST + DBLE(9999.9)
                                    END IF
!                                   FOM = FOM + CLSG_FGD_F(I_CLSG)

!                                   CHECK BAD FOM VALUES

                                    IF (ISNAN( UPFOM(WIB3) - UPFOM(WIB1) )) THEN
                                       WRITE(6,7372) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_CLSG, IGRP, ECL_IGRP(IGRP), COLUMN, &
                                          UPFOM(WIB3), UPFOM(WIB1)
 7372                                  FORMAT(1X,"ISNAN_CLSG_FGD",6(":",I5),":",A16,2(":",F15.3))
                                       UPFOM(WIB3) = 999.999
                                       UPFOM(WIB1) = 0.0
                                    END IF

                                    FOM = FOM + (UPFOM(WIB3) - UPFOM(WIB1))
                                    VADJ = VADJ + CLSG_FGD_V(I_CLSG)
                                    HR_PEN = UPSHPEN(1,1) ! Heatrate Penalty
                                    HR_PEN = UECP_HTRT_ADJ(IECP) - 1.0 ! Heatrate Penalty
                                 END IF
                                 IF (UCL_ROPT(2,I_ROPT) .GT. 0) THEN        ! ADD COMB
                                    OV_CST = OV_CST + CLSG_CMB_O(I_CLSG)

!                                   CHECK BAD FOM VALUES

                                    IF (ISNAN(CLSG_CMB_F(I_CLSG))) THEN
                                       WRITE(6,7373) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_CLSG, IGRP, ECL_IGRP(IGRP), COLUMN, CLSG_CAP(IYR,I_CLSG)
 7373                                  FORMAT(1X,"ISNAN_CLSG_CMB",6(":",I5),":",A16,":",F15.3)
                                       CLSG_CMB_F(I_CLSG) = 999.999
                                    END IF

                                    FOM = FOM + CLSG_CMB_F(I_CLSG)
                                    VADJ = VADJ + CLSG_CMB_V(I_CLSG)
                                 END IF
                                 IF (UCL_ROPT(3,I_ROPT) .GT. 0) THEN        ! ADD SNCR
                                    OV_CST = OV_CST + CLSG_SNCR_O(I_CLSG)

!                                   CHECK BAD FOM VALUES

                                    IF (ISNAN(CLSG_SNCR_F(I_CLSG))) THEN
                                       WRITE(6,7374) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_CLSG, IGRP, ECL_IGRP(IGRP), COLUMN, CLSG_CAP(IYR,I_CLSG)
 7374                                  FORMAT(1X,"ISNAN_CLSG_SNCR",6(":",I5),":",A16,":",F15.3)
                                       CLSG_SNCR_F(I_CLSG) = 999.999
                                    END IF

                                    FOM = FOM + CLSG_SNCR_F(I_CLSG)
                                    VADJ = VADJ + CLSG_SNCR_V(I_CLSG)
                                 END IF
                                 IF (UCL_ROPT(4,I_ROPT) .GT. 0) THEN        ! ADD SCR
                                    OV_CST = OV_CST + CLSG_SCR_O(I_CLSG)

!                                   CHECK BAD FOM VALUES

                                    IF (ISNAN(CLSG_SCR_F(I_CLSG))) THEN
                                       WRITE(6,7375) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_CLSG, IGRP, ECL_IGRP(IGRP), COLUMN, CLSG_CAP(IYR,I_CLSG)
 7375                                  FORMAT(1X,"ISNAN_CLSG_SCR",6(":",I5),":",A16,":",F15.3)
                                       CLSG_SCR_F(I_CLSG) = 999.999
                                    END IF

                                    FOM = FOM + CLSG_SCR_F(I_CLSG)
                                    VADJ = VADJ + CLSG_SCR_V(I_CLSG)
                                 END IF
                                 IF (UCL_ROPT(5,I_ROPT) .GT. 0) THEN        ! ADD CCS

                                    TEST_CTS = 1

                                    Z = 0.102                                  !ton CO2/MMbtu
                                    OHR = CLSG_HTRT(IYR,I_CLSG)                !original heat rate, btu/kWh
                                    CCS_R = CLSG_CCS_R(I_CLSG) 
                                    HRT = MIN (HRMAX, OHR)

                                    CLOSS = 1.0 - CLSG_CCS_C(I_CLSG)

!                                   DUTY = HRT * Z * CCS_R * 1E-08             !CCS tons/kWh 
!                                   REVISED BY NETL MARCH 2013                              CLOSS = (0.0031 + 0.025E-06 * OHR) * CCS_R
!                                   CLOSS = UCL_CF1 * UCL_CF2 * UCL_CF3 * UCL_CF4 * OHR * CCS_R 
!                                   CLOSS = 1.00D00*CLOSS

!                                   if(curiyr.eq.20)write(6,2327)sfact,ohr,duty,cf,closs
! 2327                              format('SFACT,OHR:DUTY:CF,CLOSS:',1F5.1,1x,1F8.1,1x,1F7.5,1x,1F5.2,1x,1F5.2)
!                                   if(curiyr.eq.20 .or.curiyr.eq.30 .or.curiyr .eq. 40)then
!                                      write(6,2320)iyr,curiyr,i_clsg,cnfg_map(1),j_cnfg,i_ropt,clsg_cap(iyr,i_clsg)
!                                      write(6,23201)ohr,hrt,duty,cf
!2320                                  format('iyr:curiyr:i_clsg:cnfg_map(1):j_cnfg:i_ropt:clsg_cap(iyr,i_clsg):',1I3,1x,1I3,1x,1I4,1x,1I4,1x,1I4,1x,1I4,1x,1F7.1)
!23201                                 format('OHR:HRT,DUTY:CF:',1F8.1,1x,1F8.1,1x,1F7.3,1x,1F5.2)
!                                   endif

!                                   RAG end of CCS data correlations

!                                   Create OBJ ready variable for Investment in CTS from RAG formulas

                                    oUCL_SC_O = CLSG_CCS_O(I_CLSG)                                           !CCS 1987$/kWh

                                    OV_CST_CTS_B4 = oUCL_SC_O

                                    TXBOOK = 0.0
                                    FNBOOK = 0.0
                                    CAPUTIL = 0.0

                                    IF (UCL_VIN(IYR) .GT. 0) THEN
                                       NYR = 0
                                       DO IY = IYR , UNXPH
                                          IF (UCL_VIN(IY) .EQ. UCL_VIN(IYR)) THEN
                                             NYR = NYR + 1
                                             IF (IY .EQ. UNXPH) THEN
                                                NYR = NYR + UNFPH - UNXPH
                                             END IF
                                          END IF
                                       END DO
                                    ELSE
                                       NYR = 1
                                    END IF

                                    IF (OV_CST_CTS_B4 .GT. 0.0001) THEN

                                       OV_CST_CTS_B4 = OV_CST_CTS_B4 * ANNADJ
                                       CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,IYR,OV_CST_CTS_B4,UPSCPR, &
                                          UPCAPD(1,IECP),UPGNPD,RETIRT_CCS,EPUFDT,RETROR_CCS,TXBOOK,FNBOOK)
                                       URATIO = TXBOOK / FNBOOK
                                       CAPUNSTL = FNBOOK

!                                      Check Vintage for Retrofit Tax Life

                                       IF (ECL_YR(IGRP) .LT. UPSTXYR)THEN
                                          STXLF = UPSTXLF(1)
                                       ELSE
                                          STXLF = UPSTXLF(2)
                                       END IF
                                       CALL EPNBLD(DBLE(RETROR_CCS),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE_CCS),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)
                                       CTS_INV_Annuity = CAPUNSTL * CAPUTIL
                                       CTS_C_B4 = CAPUNSTL * CAPUTIL / CRF(DBLE(EPUTDSCRT),NYR) * PWF(DBLE(EPUTDSCRT),IYR-1)
                                    ELSE
                                       CTS_C_B4 = 0.0
                                    END IF

!                                   CHECK BAD FOM VALUES

                                    CTS_C_B4 = CTS_C_B4 * TCCF_GL(MIN(CURIYR+IYR-1,MNUMYR),1)
                                    CTS_INV_Annuity = CTS_INV_Annuity * TCCF_GL(MIN(CURIYR+IYR-1,MNUMYR),1)

                                    IF (ISNAN(CTS_INV_Annuity)) THEN

                                       WRITE(6,5397) CURIRUN, CURCALYR, CURIYR+IYR+1988, &
                                          CTS_INV_Annuity
 5397                                  FORMAT(1X,"UECP_IN_CTS_NAN",3(":",I5),1(":",F20.6))

                                       CTS_INV_Annuity = 1000.0
                                    END IF

                                    CTS_INV_Annuity = CTS_INV_Annuity * UPGNPD(CURIYR+IYR-1) 
                                    CTS_C = (CTS_INV_Annuity * ANNADJ) / CRF(DBLE(EPUTDSCRT),NYR) * PWF(DBLE(EPUTDSCRT),IYR-1)

!                                   Assign FOM from RAG Formula - 1987$/KW

!                                   oUCL_SC_F = 1.00D00*GDPFAC*(1.647*CCS_R**2-291.5*CCS_R+17500)*DUTY !CCS 1987$/y/kW

                                    oUCL_SC_F = CLSG_CCS_F(I_CLSG)                                     !CCS 1987$/y/kW

                                    CTS_F_B4 = oUCL_SC_F

!                                   Assign FOM from CTS Model - Currently all O&M is Variable - 1987$/KW

                                    CTS_F = 0.0

!                                   Assign VOM from RAG Formula - 1987 Mills/KWH - Adjust to Pre-Capacity Derate Value

                                    oUCL_SC_V = CLSG_CCS_V(I_CLSG) / 1000.0                                        !CCS 1987$/kWh
                                    CTS_V_B4 = oUCL_SC_V * 1000.0

!                                   write(6,2313) curiyr+1989,i_clsg,column,oUCL_SC_O,clsg_ccs_o(i_clsg),  &
!                                             oUCL_SC_F,clsg_ccs_f(i_clsg),  &
!                                             oUCL_SC_V,clsg_ccs_v(i_clsg),  &
!                                             ohr,clsg_ccs_h(i_clsg),  &
!                                             ccs_r,clsg_ccs_r(i_clsg),  &
!                                             uecp_cpen_adj(ECPt_to),clsg_ccs_c(i_clsg)
!2313                               format(1h ,'!ccscomp',i4,i6,a10,8f7.1,4f6.3)

                                    IF (ISNAN(UCL_FF_F)) THEN
                                       WRITE(6,7377) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_CLSG, IGRP, ECL_IGRP(IGRP), COLUMN, CLSG_CAP(IYR,I_CLSG)
 7377                                  FORMAT(1X,"ISNAN_UCL_FF",6(":",I5),":",A16,":",F15.3)
                                       UCL_FF_F = 999.999
                                    END IF
                                 END IF  ! UCL_ROPT(5 > 0

                                 IF (UCL_ROPT(6,I_ROPT) .GT. 0) THEN        ! ADD FF

!                                   OV_CST = OV_CST + UCL_FF_O * UPANNADJ(UIPC,MIN(MNUMYR,CURIYR+IYR-1+UPSCLT))

                                    OV_CST = OV_CST + UCL_FF_O
                                    FOM = FOM + UCL_FF_F
                                 END IF
                              END IF   ! ROPT_MAP > 0
!
!                             FOR DSI CASE, ADD DSI COSTS IF NO FGD -- ALSO ESP AND CFB UPGRADES IF NEEDED
!
                              DOV_CST = 0.0
                              DFOM = 0.0
                              DVOM = 0.0
                              IF (UDSI_YR .LT. 9999)THEN
!                                IF (IYR .LT. UNXPH)THEN
!                                   IY = IYR
!                                ELSE
!                                   IY = UNFPH
!                                END IF

                                 IF  ((CURIYR + UHBSYR + UPSCLT) .EQ. UDSI_YR .AND. IYR .GT. UPSCLT)THEN
                                    IF  (IYR .EQ. (UPSCLT + 1))DOV_CST = DOV_CST + CLSG_ESP_O(I_CLSG) + CLSG_CFB_O(I_CLSG)
                                    DFOM = DFOM + CLSG_CFB_F(I_CLSG)
                                    DVOM = DVOM + CLSG_CFB_V(I_CLSG)
                                    IF (UCL_CNFG(3,J_CNFG) .LE. 0 .AND. CLSG_CAP(IYR,I_CLSG) .GT. 25.0)THEN
                                    IF  (IYR .EQ. (UPSCLT + 1))DOV_CST = DOV_CST + CLSG_DSI_O(I_CLSG)
                                       DFOM = DFOM + CLSG_DSI_F(I_CLSG)
                                       DVOM = DVOM + CLSG_DSI_V(I_CLSG)
                                    END IF
                                 END IF

!                                END IF

                              END IF

!                             write(6,2424) curiyr+1989,curiyr+1989+iyr-1,column,i_cnfg,i_ropt,j_cnfg,ecpt_to,cnfg_to,ecpt_from,cnfg_from,  &
!                                ucl_cnfg(3,j_cnfg),clsg_cap(iyr,i_clsg),clsg_fgd_o(i_clsg),  &
!                                clsg_dsi_o(i_clsg),clsg_dsi_f(i_clsg),clsg_dsi_v(i_clsg),clsg_dsi_r(i_clsg),dov_cst,dfom,dvom
!2424                         format(1h ,'!dsi',i4,i5,1x,a8,i4,i4,i4,i4,4i4,15f8.1)

                              OV_CST = OV_CST + DOV_CST
                              
!                             ADJUST FOR DIFFERENCE IN VARIABLE OPERATING COST - CONVERTED TO FIX COST

                              VOM = CTS_V_B4 + (VADJ / UECP_CPEN_ADJ(ECPt_TO))
                              VADJ = (VOM - EPVOM(ECPt_TO)) * CF * 8.760
                              DVOM = DVOM * CF * 8.76

!                             CHECK BAD FOM VALUES

                              IF (ISNAN(VADJ)) THEN
                                 WRITE(6,7378) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_CLSG, IGRP, ECL_IGRP(IGRP), COLUMN, CLSG_CAP(IYR,I_CLSG), &
                                    CTS_V, UECP_CPEN_ADJ(ECPt_TO), VOM, EPVOM(ECPt_TO), CF, &
                                    CLSG_VADJ(IYR,I_CLSG), CLSG_FGD_V(I_CLSG), CLSG_CMB_V(I_CLSG), CLSG_SNCR_V(I_CLSG), CLSG_SNCR_V(I_CLSG), &
                                    CLSG_SCR_V(I_CLSG), CLSG_CCS_V(I_CLSG)
 7378                            FORMAT(1X,"ISNaN_CLSG_VADJ",6(":",I5),":",A16,13(":",F15.3))
                                 VADJ = 999.999
                              END IF

!                             YEAR 1 FOM IS A SUNK COST SO SET TO 0
                              IF (IYR .EQ. 1)FOM = 0.0
                              FOM = FOM + CTS_F_B4 + VADJ

                              SV_FOM = FOM

                              IF (UCL_VIN(IYR) .GT. 0) THEN
                                 NYR = 0
                                 DO IY = IYR , UNXPH
                                    IF (UCL_VIN(IY) .EQ. UCL_VIN(IYR)) THEN
                                       NYR = NYR + 1
                                       IF (IY .EQ. UNXPH) THEN
                                          NYR = NYR + UNFPH - UNXPH
                                       END IF
                                    END IF
                                 END DO
                              ELSE
                                 NYR = 1
                              END IF
                              DO IY = 1 , UNXPH
                                 IF (IY .LT. IYR .OR. IY .GE. IYR + NYR) THEN
                                    TFOM(IY) = 0.0
                                    TFOM_P(IY) = 0.0
                                    TFOMD(IY) = 0.0
                                 ELSE
                                    TFOM(IY) = FOM * UPGNPD(CURIYR + IYR - 1)
                                    TFOM_P(IY) = CLSG_FOM(IYR,I_CLSG) * UPGNPD(CURIYR + IYR - 1)
                                    TFOMD(IY) = (DFOM + DVOM) * UPGNPD(CURIYR + IYR - 1)
                                 END IF
                              END DO
                              DO IY = UNXPH + 1 , UNFPH
                                 IF (IYR + NYR .LE. UNXPH) THEN
                                    TFOM(IY) = 0.0
                                    TFOM_P(IY) = 0.0
                                    TFOMD(IY) = 0.0
                                 ELSE
                                    TFOM(IY) = FOM * UPGNPD(CURIYR + IY - 1)
                                    TFOM_P(IY) = CLSG_FOM(IYR,I_CLSG) * UPGNPD(CURIYR + IY - 1)
                                    TFOMD(IY) = (DFOM + DVOM) * UPGNPD(CURIYR + IY - 1)
                                 END IF
                              END DO

                              FOM = PVV(TFOM,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))

                              DFOM = PVV(TFOMD,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))

                              IF (ISNAN(FOM)) THEN

                                 WRITE(6,7379) CURIRUN, CURCALYR, CURIYR+IYR+1988, NYR, I_CLSG, CGRP, IGRP, ECL_IGRP(IGRP), ECPt_TO, &
                                    CLSG_CAP(IYR,I_CLSG), FOM, DFOM, (TFOM(IY), IY = 1 , UNFPH)
 7379                            FORMAT(1X,"EP_COAL_FOM_NaN",9(":",I5),3(":",F15.3),<UNFPH>(":",F10.6))

                                 FOM = 0.0
                              END IF
                                     
                              ROW = UPOBJ ; ROW_mask=UPOBJ
                              TXBOOK = 0.0
                              FNBOOK = 0.0
                              CAPUTIL = 0.0
                              IF (OV_CST .GT. 0.0001) THEN

                                 OV_CST = OV_CST * ANNADJ

                                 CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,IYR,OV_CST,UPSCPR,UPCAPD(1,IECP),UPGNPD,RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)
                                 URATIO = TXBOOK / FNBOOK
                                 CAPUNSTL = FNBOOK

!                                Check Vintage for Retrofit Tax Life

                                 IF (ECL_YR(IGRP) .LT. UPSTXYR)THEN
                                    STXLF = UPSTXLF(1)
                                 ELSE
                                    STXLF = UPSTXLF(2)
                                 END IF
                                 CALL EPNBLD(DBLE(RETROR),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)
                                 R_INV = CAPUNSTL * CAPUTIL / CRF(DBLE(EPUTDSCRT),NYR) * PWF(DBLE(EPUTDSCRT),IYR-1)
                              ELSE
                                 R_INV = 0.0
                              END IF
                              VALUE = CTS_C_B4 + FOM + R_INV
                              IF (I_CNFG .EQ. 1) THEN
                                 VAL_COL = VALUE
                              ELSE
                                 VALUE = MAX(VAL_COL + 1.0 , VALUE)
                              END IF
                              
!                             ADD DSI COSTS, IF APPROPRIATE

                              VALUE = VALUE + DFOM ! + DVOM  already added above to DFOM before calculating PVV

                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                              VALUE = MAX(VALUE,ECP_MIN)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,83')

                              IF (HTRT_TEST .EQ. 0) THEN
                                 IF (UCL_VIN(IYR) .GT. 0) THEN
                                    NYR = 0
                                    DO IY = IYR , UNXPH
                                       IF (UCL_VIN(IY) .EQ. UCL_VIN(IYR)) THEN
                                          NYR = NYR + 1
                                          IF (IY .EQ. UNXPH) THEN
                                             NYR = NYR + UNFPH - UNXPH
                                          END IF
                                       END IF
                                    END DO
                                 ELSE
                                    NYR = 1
                                 END IF

                                 TXBOOK = 0.0
                                 FNBOOK = 0.0
                                 CAPUTIL = 0.0
!hro                             HTRT_CST_87 = (DBLE(CLSG_COUNT(I_CLSG)) * HTRT_OVR_CST(ECPt_TO)) / (CLSG_CAP(IYR,I_CLSG) * 0.001) / &
!hro                                UPGNPD(HTRT_DOLLAR_YEAR-UHBSYR)
!                                HTRT_CST_87 = (DBLE(CLSG_COUNT(I_CLSG)) * HTRT_OVRQ(ECPt_TO,CLSG_QT(I_CLSG))) / (CLSG_CAP(IYR,I_CLSG) * 0.001)
                                 HTRT_CST_87 = HTRT_OVRQ(ECPt_TO,CLSG_QT(I_CLSG))
!hrp                             HTRT_CST_87 = (DBLE(CLSG_COUNT(I_CLSG)) * ECL_HRI_O(I_CLSG))) / (CLSG_CAP(IYR,I_CLSG) * 0.001)

                                 CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,IYR,HTRT_CST_87,UPSCPR,&
                                    UPCAPD(1,IECP),UPGNPD,RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)

                                 URATIO = TXBOOK / FNBOOK
                                 CAPUNSTL = FNBOOK

!                                Check Vintage for Retrofit Tax Life

                                 IF (ECL_YR(IGRP) .LT. UPSTXYR)THEN
                                    STXLF = UPSTXLF(1)
                                 ELSE
                                    STXLF = UPSTXLF(2)
                                 END IF
                                 CALL EPNBLD(DBLE(RETROR),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)
                                 HTRT_INV_CST = CAPUNSTL * CAPUTIL / CRF(DBLE(EPUTDSCRT),NYR) * PWF(DBLE(EPUTDSCRT),IYR-1)

                                 VALUE_HTRT = VALUE + HTRT_INV_CST
                                 VALUE_HTRT = MAX(VALUE_HTRT,ECP_MIN)
                                 CALL CVAL(COLUMN_HTRT,ROW,VALUE_HTRT,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,84')

!                                WRITE(6,3913) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_CLSG, CLSG_COUNT(I_CLSG), CGRP, NYR, IGRP, ECL_IGRP(IGRP), &
!                                   HTRT_RESULTS(ECL_IGRP(IGRP)), ECPt_TO, COLUMN_HTRT, CLSG_CAP(IYR,I_CLSG), &
!                                   HTRT_CST_87, VALUE, FOM, HTRT_INV_CST, VALUE_HTRT
!3913                            FORMAT(1X,"EP_COAL_HTRT_OUT",11(":",I5),":",A16,6(":",F15.3))

                              END IF

                           END IF   ! IFIRST = 1
!
!                          Create NOX Emission Reductions
!
                           NOX_RMV = 1.0
                           I_ROPT = ROPT_MAP(I_CNFG)
                           IF (ROPT_MAP(I_CNFG) .GT. 0) THEN
                              IF (UCL_ROPT(2,I_ROPT) .GT. 0) THEN        ! ADD COMB
                                 NOX_RMV = NOX_RMV * (1.0 - CLSG_CMB_R(I_CLSG))
                              END IF
                              IF (UCL_ROPT(3,I_ROPT) .GT. 0) THEN        ! ADD SNCR
                                 NOX_RMV = NOX_RMV * (1.0 - CLSG_SNCR_R(I_CLSG))
                              END IF
                              IF (UCL_ROPT(4,I_ROPT) .GT. 0) THEN        ! ADD SCR
                                 NOX_RMV = NOX_RMV * (1.0 - CLSG_SCR_R(I_CLSG))
                              END IF
                           END IF
                           NOX_RMV = 1.0 - NOX_RMV
!
                           IF (UEFD_CAP(ECPt_FROM,CLRG,CURIYR) .GT. 0.001) THEN
                              EFD_CF_FROM = UEFD_GEN(ECPt_FROM,CLRG,CURIYR) / (8.76 * UEFD_CAP(ECPt_FROM,CLRG,CURIYR))
                              EFD_CF_FROM = MIN(UPMCF(ECPt_FROM) , EFD_CF_FROM)
                           ELSE
                              EFD_CF_FROM = 0.001
                           END IF
!
                           IF (UEFD_CAP(ECPt_TO,CLRG,CURIYR) .GT. 0.001) THEN
                              EFD_CF_TO = UEFD_GEN(ECPt_TO,CLRG,CURIYR) / (8.76 * UEFD_CAP(ECPt_TO,CLRG,CURIYR))
                              EFD_CF_TO = MIN(UPMCF(ECPt_TO) , EFD_CF_TO)
                           ELSE
                              EFD_CF_TO = EFD_CF_FROM
                           END IF
!
                           IF (CNFG_CAP(CNFG_FROM,CLRG) .GT. 0.001) THEN
                              CNFG_CF_FROM = CNFG_GEN(CNFG_FROM,CLRG) / (8.76 * CNFG_CAP(CNFG_FROM,CLRG))
                              CNFG_CF_FROM = MIN(UPMCF(ECPt_FROM) , CNFG_CF_FROM)
                           ELSE
                              CNFG_CF_FROM = EFD_CF_FROM
                           END IF
!
                           IF (CNFG_CAP(CNFG_TO,CLRG) .GT. 0.001) THEN
                              CNFG_CF_TO = CNFG_GEN(CNFG_TO,CLRG) / (8.76 * CNFG_CAP(CNFG_TO,CLRG))
                              CNFG_CF_TO = MIN(UPMCF(ECPt_TO) , CNFG_CF_TO)
                           ELSE
                              CNFG_CF_TO = CNFG_CF_FROM
                           END IF
!
                           ITYP = UPTTYP(ECPt_FROM)
                           IF (UECP_CAP(LYR,ITYP,CLRG) .GT. 0.001) THEN
                              ECP_CF_FROM = UECP_GEN(LYR,ITYP,CLRG) / (8.76 * UECP_CAP(LYR,ITYP,CLRG))
                              ECP_CF_FROM = MIN(UPMCF(ECPt_FROM) , ECP_CF_FROM)
                           ELSE
                              ECP_CF_FROM = CNFG_CF_FROM
                           END IF
!
                           ITYP = UPTTYP(ECPt_TO)
                           IF (UECP_CAP(LYR,ITYP,CLRG) .GT. 0.001) THEN
                              ECP_CF_TO = UECP_GEN(LYR,ITYP,CLRG) / (8.76 * UECP_CAP(LYR,ITYP,CLRG))
                              ECP_CF_TO = MIN(UPMCF(ECPt_TO) , ECP_CF_TO)
                           ELSE
                              ECP_CF_TO = ECP_CF_FROM
                           END IF
!
                           ECP_CF_TO = MAX(ECP_CF_TO , ECP_CF_FROM)
                           ECP_CF_TO = MAX(ECP_CF_TO , 0.75)
                           ECP_CF_FROM = MAX(ECP_CF_FROM , 0.75)

                           CALL ECP_AVG_HTRT(FROM_LABEL, IRG, FLRG, ECPt_FROM, IYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
                           HTRT_FROM = AVG_HTRT(ECPt_FROM)
                           HTRT_FROM_MR = AVG_HTRT_MR(ECPt_FROM)
                           HTRT_FROM_MOD = AVG_HTRT_MOD(ECPt_FROM)
                           HTRT_FROM_MR_MOD = AVG_HTRT_MR_MOD(ECPt_FROM)

                           CALL ECP_AVG_HTRT(FROM_LABEL, IRG, FLRG, ECPt_TO, IYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
                           HTRT_TO = AVG_HTRT(ECPt_TO)
                           HTRT_TO_MR = AVG_HTRT_MR(ECPt_TO)
                           HTRT_TO_MOD = AVG_HTRT_MOD(ECPt_TO)
                           HTRT_TO_MR_MOD = AVG_HTRT_MR_MOD(ECPt_TO)

                           DO JNOX = 1 , NOX_GRP
                              IF (INOX_GRP(JNOX) .GT. 0 .AND. IYR .GT. NOX_LT) THEN
                                 ANOX = NOX_RG(JNOX)
!
                                 NOX_FROM = 0.0
                                 NOX_TO = 0.0
                                 NOX_RMV2 = 0.0

                                 NOX_FROM_HTRT = 0.0
                                 NOX_TO_HTRT = 0.0
                                 NOX_RMV2_HTRT = 0.0

                                 DO ISP = 1 , EPNMSP
                                    IF (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)) THEN
                                       NOX_FROM = NOX_FROM + 0.0000005 * NOX_ECP(ISP,JNOX) * ECP_CF_FROM * AVG_HTRT(ECPt_FROM) * EPNOX_G(ISP,IYR,ECPt_FROM,JNOX)
                                       NOX_TO = NOX_TO + 0.0000005 * NOX_ECP(ISP,JNOX) * ECP_CF_TO *  AVG_HTRT(ECPt_TO) * EPNOX_G(ISP,IYR,ECPt_TO,JNOX)
                                    ELSE
                                       NOX_FROM = NOX_FROM + 0.0000005 * NOX_ECP(ISP,JNOX) * ECP_CF_FROM * AVG_HTRT_MR(ECPt_FROM) * EPNOX_G(ISP,IYR,ECPt_FROM,JNOX)
                                       NOX_TO = NOX_TO + 0.0000005 * NOX_ECP(ISP,JNOX) * ECP_CF_TO *  AVG_HTRT_MR(ECPt_TO) * EPNOX_G(ISP,IYR,ECPt_TO,JNOX)
                                    END IF
                                    IF (HTRT_TEST .EQ. 0) THEN
                                       IF (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)) THEN
                                          NOX_FROM_HTRT = NOX_FROM_HTRT + 0.0000005 * NOX_ECP(ISP,JNOX) * ECP_CF_FROM * AVG_HTRT_MOD(ECPt_FROM) * EPNOX_G(ISP,IYR,ECPt_FROM,JNOX)
                                          NOX_TO_HTRT = NOX_TO_HTRT + 0.0000005 * NOX_ECP(ISP,JNOX) * ECP_CF_TO *  AVG_HTRT_MOD(ECPt_TO) * EPNOX_G(ISP,IYR,ECPt_TO,JNOX)
                                       ELSE
                                          NOX_FROM_HTRT = NOX_FROM_HTRT + 0.0000005 * NOX_ECP(ISP,JNOX) * ECP_CF_FROM * AVG_HTRT_MR_MOD(ECPt_FROM) * EPNOX_G(ISP,IYR,ECPt_FROM,JNOX)
                                          NOX_TO_HTRT = NOX_TO_HTRT + 0.0000005 * NOX_ECP(ISP,JNOX) * ECP_CF_TO *  AVG_HTRT_MR_MOD(ECPt_TO) * EPNOX_G(ISP,IYR,ECPt_TO,JNOX)
                                       END IF
                                    END IF

                                    NOX_RMV2 = NOX_RMV2 + NOX_ECP(ISP,JNOX)
                                    NOX_RMV2_HTRT = NOX_RMV2_HTRT + NOX_ECP(ISP,JNOX)
                                 END DO
!
!                                USE Weighted Capacity Factor for Last Period in the Explicit Planning Horizon
!
                                 IF (IYR .LT. UNXPH) THEN
                                    CF = max(0.75 , CLSG_EMM_CL_CF(I_CLSG,TYR))
                                 ELSE
                                    DO IY = 1 , UNFPH - IYR + 1
                                       TCF(IY) = max(0.75 , CLSG_EMM_CL_CF(I_CLSG,MIN(UNYEAR,CURIYR+IYR+IY-2)))
                                       KW(IY) = 1.0
                                    END DO
                                    PV$CF = PVV(TCF,ECP_D_FPH,UNFPH-IYR+1,DBLE(EPUTDSCRT))
                                    PV_KW = PVV(KW,ECP_D_FPH,UNFPH-IYR+1,DBLE(EPUTDSCRT))
                                    CF = PV$CF / PV_KW
                                 END IF

!                                IF (CF .GT. 0.0) THEN
!                                   NOX_RMV2 = 0.0000005 * NOX_RMV2 * CF * CLSG_HTRT(IYR,I_CLSG) * CLSG_NXR(IYR,I_CLSG) * NOX_RMV
!                                ELSE

                                 NOX_RMV2 = 0.0000005 * NOX_RMV2 * ECP_CF_TO * CLSG_HTRT(IYR,I_CLSG) * CLSG_NXR(IYR,I_CLSG) * NOX_RMV
                                 NOX_RMV2_HTRT = 0.0000005 * NOX_RMV2_HTRT * ECP_CF_TO * CLSG_HTRT(IYR,I_CLSG) * CLSG_NXR(IYR,I_CLSG) * NOX_RMV

!                                END IF

                                 VALUE = - NOX_RMV2 - NOX_FROM + NOX_TO
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                                 IF (HTRT_TEST .EQ. 0) THEN
                                    VALUE_HTRT = - NOX_RMV2_HTRT - NOX_FROM_HTRT + NOX_TO_HTRT
                                    IF (USW_DIGIT .GT. 0)VALUE_HTRT = DIGITS2( VALUE_HTRT , DIGITS_PARM)
                                 END IF

                                 IF (VALUE .LT. 0.0) THEN
                                    ROW = 'EVN'//UPLNTCD(ECPt_TO)//ANOX//UPYRCD(IYR); call makmsk(ROW_mask,':EVN:',UPLNTCD(ECPt_TO),ANOX,UPYRCD(IYR))
                                    TST_NOX(JNOX,ECPt_TO,IYR) = 1
                                 ELSE
                                    ROW = 'EUN'//UPLNTCD(ECPt_TO)//ANOX//UPYRCD(IYR); call makmsk(ROW_mask,':EUN:',UPLNTCD(ECPt_TO),ANOX,UPYRCD(IYR))
                                 END IF
!
                                 IF (UCL_CNFG(4,CNFG_FROM) + UCL_CNFG(5,CNFG_FROM) + UCL_CNFG(6,CNFG_FROM) .GE. 2 .OR. CNFG_FROM .EQ. CNFG_TO) THEN
                                    IF (NOX_RMV .NE. 0.0) WRITE(6,2221) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IRG,CLRG,IGRP,ECPt_FROM,ECPt_TO,CNFG_FROM,CNFG_TO,JNOX, &
                                       VALUE,NOX_RMV2,NOX_RMV
 2221                               FORMAT(1X,"NOX_OOPS",10(":",I4),3(":",F7.3))
!
                                 ELSE
                                    IF (VALUE .LT. -ECP_MIN .OR. VALUE .GT. ECP_MIN) THEN
                                       VALUE = VALUE * CP_PEN(ECPt_TO) * HRCPEN(ECPt_TO)      !CPENJJ
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,85')
                                    END IF
                                    IF (HTRT_TEST .EQ. 0) THEN
                                       IF (VALUE_HTRT .LT. -ECP_MIN .OR. VALUE_HTRT .GT. ECP_MIN) THEN
                                          VALUE_HTRT = VALUE_HTRT * CP_PEN(ECPt_TO) * HRCPEN(ECPt_TO)      !CPENJJ
                                          CALL CVAL(COLUMN_HTRT,ROW,VALUE_HTRT,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,86')
                                       END IF
                                    END IF
                                 END IF
                              END IF ! INOX_GRP > 0 and IYR > NOXLT
                           END DO  ! JNOX
!
!                          Adjust Fuel Consumption for New ECP Type

                           CF = MAX(CLSG_EMM_CL_CF(I_CLSG,TYR) , ECP_CF_TO)

                           IF (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)) THEN
                              VALUE = 8.760 * CF * 0.001 * CP_PEN(ECPt_TO) * (CLSG_HTRT(IYR,I_CLSG) * HRCPEN(ECPt_TO) - AVG_HTRT(ECPt_TO))
                           ELSE
                              VALUE = 8.760 * CF * 0.001 * CP_PEN(ECPt_TO) * (CLSG_HTRT(IYR,I_CLSG) * HRCPEN(ECPt_TO) - AVG_HTRT_MR(ECPt_TO))
                           END IF

                           IF (HTRT_TEST .EQ. 0) THEN
                              UNIT_HTRT = CLSG_HTRT(IYR,I_CLSG) * HRCPEN(ECPt_TO)
!hro                          UNIT_HTRT = MAX(HTRT_FLOOR(ECPt_TO) , UNIT_HTRT * (1.0 - HTRT_REDUCTION(ECPt_TO)))
                              UNIT_HTRT = MAX(HTRT_FLOOR(ECPt_TO) , UNIT_HTRT * (1.0 - HTRT_REDQ(ECPt_TO,CLSG_QT(I_CLSG))))
                              IF (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)) THEN
                                 VALUE_HTRT = 8.760 * CF * 0.001 * CP_PEN(ECPt_TO) * (UNIT_HTRT - AVG_HTRT_MOD(ECPt_TO))
                              ELSE
                                 VALUE_HTRT = 8.760 * CF * 0.001 * CP_PEN(ECPt_TO) * (UNIT_HTRT - AVG_HTRT_MR_MOD(ECPt_TO))
                              END IF
                           END IF

!                          IF (UPPSEF(ECPt_TO) .GT. 0.0) THEN

                           IF (ECP_SCRUB(ECPt_TO,CURIYR) .EQ. 1) THEN
                              ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(ECPt_TO)//'SXX'//UPYRCD(IYR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(ECPt_TO),'S',':XX:',UPYRCD(IYR)) ! exception: S/U/X as scrubber set element
                           ELSE
                              ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(ECPt_TO)//'UXX'//UPYRCD(IYR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(ECPt_TO),'U',':XX:',UPYRCD(IYR)) ! exception: S/U/X as scrubber set element
                           END IF

                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                           IF (VALUE .GT. ECP_MIN .OR. VALUE .LT. -ECP_MIN) Then
                               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,87')
                               !Following if statement added to handle coal part of coal NG cofiring conversion retrofit decision
                               IF ((UCL_VIN(IYR) .GT. 0 .AND. IFRST .EQ. 1)  .AND. (ECL_MR(IGRP) .LT. (CURIYR + UHBSYR + IYR - 1)) .AND. (ECP_SCRUB(ECPt_TO,CURIYR) .EQ. 1))  THEN
                                    COL_CL_CL = 'GCL'//GRP_CD(CGRP)//COAL;  call makmsk(COL_CL_CL_mask,':GCL:',GRP_CD(CGRP),COAL)   
                                    CALL CVAL(COL_CL_CL,ROW,VALUE,COL_CL_CL_mask,ROW_mask,'EP$COAL,87a')
                               ENDIF
                           ENDIF

                           IF (HTRT_TEST .EQ. 0) THEN
                              IF (USW_DIGIT .GT. 0)VALUE_HTRT = DIGITS2( VALUE_HTRT , DIGITS_PARM)
                              IF (VALUE_HTRT .GT. ECP_MIN .OR. VALUE_HTRT .LT. -ECP_MIN) CALL CVAL(COLUMN_HTRT,ROW,VALUE_HTRT,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,88')
                           END IF

                           J_ROPT = MAX(1 , I_ROPT)

!                          IF (IYR .EQ. 2 .AND. CURCALYR .GT. 2020) &

!                          WRITE(6,2031) CURIRUN, CURCALYR, IYR, TYR, ECL_IGRP(IGRP), IGRP, I_CLSG, IRG, CLRG, ECPt_FROM, ECPt_TO, I_ROPT, &
!                             COLUMN, ROW, VALUE, &
!                             CF, CLSG_EMM_CL_CF(I_CLSG,TYR), &
!                             CLSG_RG_CAP(MNUMNR,I_CLSG), &
!                             HRCPEN(ECPt_TO), CP_PEN(ECPt_TO), ECP_CF_TO, ECP_CF_FROM, &
!                             CLSG_HTRT(IYR,I_CLSG), AVG_HTRT(ECPt_FROM), AVG_HTRT(ECPt_TO), &
!                             UECP_HTRT_ADJ(ECPt_FROM), UECP_HTRT_ADJ(ECPt_TO), &
!                             UPPSEF(ECPt_FROM), UPPSEF(ECPt_TO), UPSHPEN(1,1), UPPCEF(ECPt_FROM), UPPCEF(ECPt_TO), UCL_ROPT(5,J_ROPT), AVG_HTRT_MOD(ECPt_TO), &
!                             AVG_HTRT_MR(ECPt_TO), AVG_HTRT_MR_MOD(ECPt_TO)
!2031                      FORMAT(1X,"ECP_HTRT_ADJ", 12(":",I5), 2(":", A8), 22(":",F15.3))

!                          Estimate SO2 Permits Created By FGD Retrofit

                           IF (IFRST .EQ. 1) THEN
                              N_FGD = UCL_CNFG(3,J_CNFG)
                              IF (N_FGD .EQ. 1 .AND. IFRST .EQ. 1) THEN

!                                ISO2 = SO2_GRP_BY_CLRG(CLRG)

                                 DO ISO2 = 1 , NUM_SO2_GRP
                                    IF (SO2_SHR_BY_CLRG(CLRG,ISO2) .GT. 0.0)THEN
                                       WRITE(SO2_CODE,'(I1)') ISO2
                                       ROW = 'EXSO2X'//SO2_CODE//'0'; call makmsk(ROW_mask,':EXSO2X:',SO2_CODE,':0:')
                                       IF (I_FGD .EQ. 0 .AND. N_FGD .EQ. 1 .AND. SV_YEAR .GT. CURIYR + IYR - 1) THEN
!
!                                         USE Weighted Capacity Factor for Last Period in the Explicit Planning Horizon
!
                                          IF (UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) THEN
                                             CF = max(0.75 , CLSG_EMM_CL_CF(I_CLSG,TYR))
                                          ELSE
                                             DO IY = 1 , SV_YEAR - CURIYR - IYR + 1
                                                TCF(IY) = max(0.75 , CLSG_EMM_CL_CF(I_CLSG,MIN(UNYEAR,CURIYR+IYR+IY-2)))
                                                KW(IY) = 1.0
                                             END DO
                                             PV$CF = PVV(TCF,ECP_D_FPH,UNFPH-IYR+1,DBLE(EPUTDSCRT))
                                             PV_KW = PVV(KW,ECP_D_FPH,SV_YEAR-CURIYR-IYR+1,DBLE(EPUTDSCRT))
                                             CF = PV$CF / PV_KW
                                          END IF
                                          SO2_PERMITS = 0.5 * (1.2 - AVG_SCB_SO2(CLRG) * (1.0 - AVG_SCB_RMV(CLRG))) * CF * 0.00876 * CLSG_HTRT(IYR,I_CLSG)
!
                                          BA_CRD_FRAC = 0.0
                                          DO XYR = 1 , SV_YEAR - CURIYR - IYR + 1
                                             BA_CRD_FRAC(XYR) = 1.0
                                          END DO
                                          IF (SV_YEAR .EQ. CURIYR + IYR) THEN
                                             PV_BA_CRD = 1.0
                                          ELSE
                                             DSCRT = DBLE(EPDSCRT)
                                             PV_BA_CRD = 1.0 + PVV(BA_CRD_FRAC,ECP_D_FPH,UNFPH-IYR,DSCRT)
                                          END IF
!
                                          VALUE = -1 * PV_BA_CRD * SO2_PERMITS * SO2_SHR_BY_CLRG(CLRG,ISO2)
                                          VALUE = MIN( VALUE , -ECP_MIN)

                                          IF (HTRT_TEST .EQ. 0) THEN
                                             UNIT_HTRT = CLSG_HTRT(IYR,I_CLSG) * HRCPEN(ECPt_TO)
!hro                                         UNIT_HTRT = MAX(HTRT_FLOOR(ECPt_TO) , UNIT_HTRT * (1.0 - HTRT_REDUCTION(ECPt_TO)))
                                             UNIT_HTRT = MAX(HTRT_FLOOR(ECPt_TO) , UNIT_HTRT * (1.0 - HTRT_REDQ(ECPt_TO,CLSG_QT(I_CLSG))))
                                             SO2_PERMITS_HTRT = 0.5 * (1.2 - AVG_SCB_SO2(CLRG) * (1.0 - AVG_SCB_RMV(CLRG))) * CF * 0.00876 * UNIT_HTRT
                                             VALUE_HTRT = -1 * PV_BA_CRD * SO2_PERMITS * SO2_SHR_BY_CLRG(CLRG,ISO2)
                                             VALUE_HTRT = MIN( VALUE_HTRT , -ECP_MIN)
                                          END IF

                                          IF (I_CNFG .EQ. 2 .AND. IYR .EQ. 2) THEN
                                             WRITE(18,3218) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,SV_YEAR,IGRP,IRG,CLRG,ECPt_FROM,ECPt_TO, &
                                                ECL_RCFG(XYR,IGRP),J_CNFG,COLUMN, &
                                                AVG_SCB_SO2(CLRG),AVG_SCB_RMV(CLRG),ECL_CF(IYR,IGRP),ECP_CF_TO,CLSG_HTRT(IYR,I_CLSG), &
                                                SO2_PERMITS,CLSG_CAP(IYR,I_CLSG),SO2_PERMITS*CLSG_CAP(IYR,I_CLSG),PV_BA_CRD
 3218                                        FORMAT(1X,"SO2_PERMITS",10(":",I5),":",A8,9(":",F10.3))
                                          END IF
                                       ELSE
                                          VALUE = 0.0
                                          VALUE_HTRT = 0.0
                                       END IF
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$COAL,89')
                                       IF (HTRT_TEST .EQ. 0) CALL CVAL(COLUMN_HTRT,ROW,VALUE_HTRT,COLUMN_HTRT_mask,ROW_mask,'EP$COAL,90')
                                    END IF
                                 END DO
                              END IF
                           END IF
                        END IF  ! TST > 0
                     END IF ! CNFG_TST
                  END DO  ! I_CNFG
               END IF ! CLSG_CAP(IYR,I_CLSG) > 0.0
            END DO   ! IYR
         END IF ! ECL_RG greater than zero
      END DO    ! I_CLSG
!
!     Create Structure to Transfer NOX Savings from Retrofits to Regional and/or Seasonal Constraints
!
      DO IYR = 1 , UNXPH
         DO JNOX = 1 , NOX_GRP
            IF (IYR .GT. NOX_LT) THEN
               ANOX = NOX_RG(JNOX)
               ROW_NOX = 'EUNOX'//ANOX//UPYRCD(IYR); call makmsk(ROW_NOX_mask,':EUNOX:',ANOX,UPYRCD(IYR))
               DO ECPt_TO = 1 , ECP_D_CAP
                  IF (TST_NOX(JNOX,ECPt_TO,IYR) .GT. 0) THEN
                     ROW = 'EVN'//UPLNTCD(ECPt_TO)//ANOX//UPYRCD(IYR); call makmsk(ROW_mask,':EVN:',UPLNTCD(ECPt_TO),ANOX,UPYRCD(IYR))
                     CALL CVAL(ROW,ROW,DBLE(1.0),ROW_mask,ROW_mask,'EP$COAL,91')
                     CALL CVAL(ROW,ROW_NOX,DBLE(-1.0),ROW_mask,ROW_NOX_mask,'EP$COAL,92')
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$COAL,93')
                  END IF
               END DO
            END IF
         END DO
      END DO
!
!     SET RHS of Contract FLow Constraints
!
      DO IYR = 1 , UNXPH
         IF (IYR .LT. UNXPH) THEN
            TYR = MIN(CURIYR + IYR - 1 , UNYEAR)
         ELSE
            TYR = UNYEAR
         END IF
         DO ISCRB = 1 , 2
            DO CLRG = 1 , NDREG
               DO SC = 1 , MX_NCOALS + MX_ISCV
                     IF (SC .LT. 10) THEN
                        WRITE(SC_CD,'("0",I1)') SC
                     ELSE
                        WRITE(SC_CD,'(I2)') SC
                     END IF
                     IF (SC .GT. MX_NCOALS)THEN
                          TOT_TYPE(SC)= 1
                     ENDIF
                     IF (EFD_CONT(SC,CLRG,ISCRB,TYR) .GT. ECP_MIN .AND. TOT_TYPE(SC) .GT. 0) THEN
                        IFL = TOT_TYPE(SC)
                        ROW_CF = 'K'//UPFLCD(IFL)//SC_CD//EPFLCD(CLRG)// SCRB_CD(ISCRB)//UPYRCD(IYR); call makmsk(ROW_CF_mask,':K:',UPFLCD(IFL),SC_CD,EPFLCD(CLRG), SCRB_CD(ISCRB),UPYRCD(IYR))
                        VALUE = EFD_CONT(SC,CLRG,ISCRB,TYR) * 0.1
                        CALL CRHS(UPRHS,ROW_CF,VALUE,ROW_CF_mask,'EP$COAL,94')
                     END IF
               END DO
            END DO
         END DO
      END DO
!
      RETURN
      END

!     EP$NUC For Each NUC Unit Determine Retire / Retrofit Options

      SUBROUTINE EP$NUC
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'cdsparms'
      include 'emmparm'
      include 'control'
      include 'elcntl'
      include 'ecpcntl'
      include 'dispin'
      include 'bildin'
      include 'bildout'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'entcntl'
      include 'enewtech'
      include 'ecp_nuc'
      include 'ecp_coal'
      include 'dispett'
      include 'taxdat'
      include 'uefdout'
      include 'eusprc'
      include 'edbdef'
      include 'elout'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'
      include 'emm_aimms'

      COMMON /GPSECP/ GPSSUB
      REAL*8 GPSSUB(ECP_D_CAP,ECP_D_FPH)
!
      INTEGER*4 IOWN
!
      COMMON /DERATE/PLTDER
      REAL*4 PLTDER(MNUMNR,ECP_D_DSP,ECP_D_VLS,ECP_D_XPH)
!
      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)
!
!     Variables Used in call to EPINTCST
!
      INTEGER*4 NYR,ZYR             ! NUMBER OF MODEL YEARS
      INTEGER*4 XPH                 ! # OF YEARS IN EXPLICIT PLANNING HORIZON
      INTEGER*4 FPH                 ! # OF YEARS IN FULL PLANNING HORIZON
      INTEGER*4 LCP,ICP             ! # OF YEARS IN CONSTR PROFILE
      INTEGER*4 CLT                 ! CONSTRUCTION LEAD TIME -- ACTUAL
      INTEGER*4 PLT                 ! CONSTRUCTION LEAD TIME -- PLANNING
      INTEGER*4 CYR                 ! CURRENT MODEL YEAR
      INTEGER*4 FYR                 ! FIRST YEAR IN CONSTRUCTION CYCLE
      REAL*8 OVRCST                 ! OVERNIGHT COSTS
      REAL*8 URATIO,CAPUNSTL,CAPUTIL
      REAL*4 PROFILE(ECP_D_LCP)       ! ANNUAL EXPENDITURE PERCENTAGE
      REAL*4 CAPESC(MNUMYR+ECP_D_XPH) ! CAPITAL ESCALATION/REAL
      REAL*4 GNPF(MNUMYR+ECP_D_FPH)   ! GENERAL INFLATION
      REAL*4 INTR                   ! INTEREST COSTS
      REAL*4 DEBT_F                 ! CONSTRUCTION DEBT FINANCING
      REAL*4 ROR                    ! RATE OF RETURN
!
!     RESULTS:
!
      REAL*8 TXBOOK                 ! TAX BASIS INSTALLED COSTS
      REAL*8 BVBOOK                 ! BOOK VALUE INSTALLED COSTS
!
!     Variables for call to EPCNBLD
!
      REAL*8 DF2        ! EWG DEBT FRACTION
      REAL*8 RATIO      ! TX TO BV RATIO
      REAL*8 ROEPRM     ! EWG EQUITY ROR PREMIUM
      REAL*8 INTPRM     ! EWG INTEREST RATE PREMIUM
      REAL*8 UTROE      ! UTILITY ROE
      REAL*8 UTINT      ! UTILITY INTEREST RATE
      REAL*4 ETINT      ! UTILITY INTEREST RATE
      REAL*8 TR         ! MARGINAL FEDERAL INCOME TAX RATE
      INTEGER TL        ! TAX LIFE ASSOCIATED WITH TECHNOLOGY
      INTEGER CL        ! EWG CONTRACT LIFE
      INTEGER DL2       ! EWG DEBT LOAN LIFE <= CONTRACT LIFE
      INTEGER UCLF      ! UTILITY DEBT LOAN LIFE <= ECONOMIC LIFE
      REAL*8 CAPNUG     ! RESULTING FIXED CHARGE FACTOR
!
      REAL*8 PVCAP,PVTRN,PVGNP
      REAL*8 VALUE,OBJVAL,GEN(ECP_D_XPH),FLCST,VALUE_SR,GEN_SR(ECP_D_XPH),FLCST_SR
      REAL*8 ADJ_HGHT, MIN_HGHT, MAX_HGHT
      REAL*8 UVALUE
      REAL*8 DSCRT,DSCRT_WRSK
      REAL*8 CRF,PWF,PVV
      REAL*8 CAP,CAPLEV
      REAL*8 PRATIO,TRANS,CAPNNSTL
      REAL*8 PVFOM,TFOM(ECP_D_FPH),FOM
      REAL*8 PVVOM,TVOM(ECP_D_FPH),VOM
      REAL*8 PVGPS,TGPS(ECP_D_FPH),GPS
      REAL*8 TFOM_SR(ECP_D_FPH),FOM_SR
      REAL*8 TVOM_SR(ECP_D_FPH),VOM_SR
      REAL*8 TGPS_SR(ECP_D_FPH),GPS_SR
      REAL*8 PVFOML,FOML(ECP_D_FPH)
      REAL*8 PVVOML,VOML(ECP_D_FPH)
      REAL*8 PV$SOM,SOM(ECP_D_FPH)
      REAL*8 PV$SOML,SOML(ECP_D_FPH)
      REAL*8 FLCSTL
      REAL*8 DIGITS2
      REAL*8 PVEXT,T_CRF,T_PWF
      REAL*8 SHOURS(ECP_D_MSP),DERATE,FOR,PMR,NUC_AVL
      REAL*8 ONE(ECP_D_FPH),CPS(ECP_D_FPH)
      REAL*8 PVONE,PVCPS
      REAL*8 UTROR,UFPE
      REAL*4 EWGROE,ETROR
      REAL*8 CSTDTADJ,CSTEQADJ,SHRDTADJ
      REAL*8 ANNRTE,ANNADJ,ANN(ECP_D_FPH),AN1(ECP_D_FPH)
      REAL*8 CO2_LBMWH,VAL_STD_CO2
      REAL*8 VAL_STD_GRD
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*8 ROV_CST,R_INV
      REAL*8 EXPTC
!
      INTEGER*4 IY,IGRP,ISEG,IRG,ORG,IYR,JGRP, IPGRP
      INTEGER*4 JVLS,NSTP(ECP_D_MSP),VLSMAP(ECP_D_VLS,ECP_D_MSP)
      INTEGER*4 VLS,IVLS,ISP,IP
      INTEGER*4 FUEL,IECP,SUBECP
      INTEGER*4 IFPH2,OLYR,JYR,KYR,FULLYR
      INTEGER*4 F_RG,YEAR
      INTEGER*4 STEPS,NUMLOOP,LOOPS,GSYR1,GSYRL
      CHARACTER*1 STEP
      CHARACTER*16 ROW,ROW_ERC,COLUMN,COLUMN_L,ROW_SR,COLUMN_MIN_SR,COLUMN_MIN_SR_L
      CHARACTER*12 FROM_LABEL
      CHARACTER*4 NUC
      CHARACTER*1 GRP_CD(ECP_D_XPH), GRP_CD_SR(ECP_D_XPH)

!     Store Nuclear Subsidies by build vintage

      COMMON/NUC_SUBSIDY/ NUC_PTC
      REAL*8 NUC_PTC(ECP_D_XPH)

      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN

      ecpsub='EP$NUC'

      DO RPS_RGN = 1 , MNUMNR
         MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
      END DO

      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN
         MAP_NERC_TO_RPS_RGN(8) = 9                  
      END IF
      NUC_PTC = 0.0
      NUCGENST = 0.0
!
!     INITIALIZE GRP_CD
!
      GRP_CD(1)  = "A"
      GRP_CD(2)  = "B"
      GRP_CD(3)  = "C"
      GRP_CD(4)  = "D"
      GRP_CD(5)  = "E"
      GRP_CD(6)  = "F"
      GRP_CD(7)  = "G"
      GRP_CD(8)  = "H"
      GRP_CD(9)  = "I"
      GRP_CD(10) = "J"
!
!     INITIALIZE GRP_CD_SR
!
      GRP_CD_SR(1)  = "X"
      GRP_CD_SR(2)  = "Y"
      GRP_CD_SR(3)  = "Z"
      GRP_CD_SR(4)  = "W"
      GRP_CD_SR(5)  = "V"
      GRP_CD_SR(6)  = "U"
      GRP_CD_SR(7)  = "T"
      GRP_CD_SR(8)  = "S"
      GRP_CD_SR(9)  = "R"
      GRP_CD_SR(10) = "Q"
!
!     Loop over each NUC group
!
      ORG = 0
      DO IGRP = 1 , NUM_NUC
         IPGRP = ENUC_GRP(IGRP)
         F_RG = 0
         DO IRG = 1 , UNRGNS

            RPS_RGN = MAP_NERC_TO_RPS_RGN(IRG)

            IF (ENUC_RG(IRG,IGRP) .GT. 0.0) THEN
               CAP = 0.0
               DO JYR = 1 , UNXPH
                  CAP = MAX(CAP , ENUC_CAP(JYR,IGRP))
               END DO
               IECP = ENUC_ECP(IGRP)
               IF (ORG .NE. IRG) THEN
!
!              STORE 111d SWITCH FOR MASS OR RATE STANDARDS FOR REGION
!
               CO2_PLTSW(IECP) = CO2_PLTRG(IECP,IRG)
                  CALL GETBLD(1,IRG)
                  ORG = IRG
               END IF
               FUEL = UPFLTP(IECP,1)
               WRITE(18,2112) CURIYR+UHBSYR, IGRP, IRG, ENUC_FREC(IGRP), ENUC_GRP(IGRP), ENUC_ECP(IGRP), FUEL, F_RG+1, ENUC_RG(IRG,IGRP), &
                  CAP, ENUC_CAP(1,IGRP), ENUC_FOM(1,IGRP), ENUC_VOM(IGRP), ENUC_HTRT(IGRP), ULHTRT_ECP(IPGRP,1), ENUC_CF(1,IGRP), UPPFL(FUEL,IRG,1), UPPFL(FUEL,IRG,UNXPH)
 2112          FORMAT(1X,"NUC_IN",8(":",I5),10(":",F12.3))
               IF (IGRP .LT. 10) THEN
                  WRITE(NUC,'("000",I1)') IGRP
               ELSE IF (IGRP .LT. 100) THEN
                  WRITE(NUC,'("00",I2)') IGRP
               ELSE IF (IGRP .LT. 1000) THEN
                  WRITE(NUC,'("0",I3)') IGRP
               ELSE
                  WRITE(NUC,'(I4)') IGRP
               END IF
!
               DO IYR = 1 , UNXPH
                  IF (ENUC_CAP(IYR,IGRP) .GT. 0.0) THEN
                     COLUMN = GRP_CD(IYR)//NUC//'NUC'; call makmsk(COLUMN_mask,GRP_CD(IYR),NUC,':NUC:')
                     IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                        COLUMN_MIN_SR = GRP_CD_SR(IYR)//NUC//'NUC'; call makmsk(COLUMN_MIN_SR_mask,GRP_CD_SR(IYR),NUC,':NUC:',':!SR:')
                     END IF

!                    BOUND THE COMMIT / OPERATE VECTOR AND REQUIRE PRIOR YEAR OPERATION FOR CURRENT YEAR USAGE

                     IF (F_RG .EQ. 0) THEN
                        IF (IYR .GT. 1) THEN
                           IF (ENUC_CAP(IYR-1,IGRP) .GT. 0.0) THEN
                              ROW = 'NUC'//NUC//UPYRCD(IYR); call makmsk(ROW_mask,':NUC:',NUC,UPYRCD(IYR))
!                             IF MUST-RUN THEN FORCE OPERATION
                              IF ((CURIYR + UHBSYR + IYR - 1) .LE. ULMRUN(ENUC_GRP(IGRP)))THEN
                                 CALL CROWTYPE(ROW,'E       ',ROW_mask)
                              ELSE
                                 CALL CROWTYPE(ROW,'L       ',ROW_mask)
                              END IF
                              VALUE = DBLE(1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,1')

                              COLUMN_L = GRP_CD(IYR-1)//NUC//'NUC'; call makmsk(COLUMN_L_mask,GRP_CD(IYR-1),NUC,':NUC:')
                              VALUE = - ENUC_CAP(IYR,IGRP) / ENUC_CAP(IYR-1,IGRP)
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              CALL CVAL(COLUMN_L,ROW,VALUE,COLUMN_L_mask,ROW_mask,'EP$NUC,2')

                              IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                 COLUMN_MIN_SR_L = GRP_CD_SR(IYR-1)//NUC//'NUC'; call makmsk(COLUMN_MIN_SR_L_mask,GRP_CD_SR(IYR-1),NUC,':NUC:',':!SR:')
                                 CALL CVAL(COLUMN_MIN_SR_L,ROW,VALUE,COLUMN_MIN_SR_L_mask,ROW_mask,'EP$NUC,3')

                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,4')
                              END IF

                           ELSE
                              IF (ENUC_CAP(IYR,IGRP) .GT. 0.0) THEN
                                 ROW = 'NUC'//NUC//UPYRCD(IYR); call makmsk(ROW_mask,':NUC:',NUC,UPYRCD(IYR))
!                                IF MUST-RUN THEN FORCE OPERATION
                                 IF ((CURIYR + UHBSYR + IYR - 1) .LE. ULMRUN(ENUC_GRP(IGRP)))THEN
                                    CALL CROWTYPE(ROW,'E       ',ROW_mask)
                                 ELSE
                                    CALL CROWTYPE(ROW,'L       ',ROW_mask)
                                 END IF
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,5')

                                 IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,6')
                                 END IF

                                 VALUE = ENUC_CAP(IYR,IGRP) * 0.001
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$NUC,7')
                              END IF
                           END IF
                        ELSE
                           IF (ENUC_CAP(IYR,IGRP) .GT. 0.0) THEN
                              ROW = 'NUC'//NUC//UPYRCD(IYR); call makmsk(ROW_mask,':NUC:',NUC,UPYRCD(IYR))
!                             IF MUST-RUN THEN FORCE OPERATION
                              IF ((CURIYR + UHBSYR + IYR - 1) .LE. ULMRUN(ENUC_GRP(IGRP)))THEN
                                 CALL CROWTYPE(ROW,'E       ',ROW_mask)
                              ELSE
                                 CALL CROWTYPE(ROW,'L       ',ROW_mask)
                              END IF
                              VALUE = DBLE(1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,8')

                              IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,9')
                              END IF

                              VALUE = ENUC_CAP(IYR,IGRP) * 0.001
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$NUC,10')
                           END IF
                        END IF
                        UVALUE = ENUC_CAP(IYR,IGRP) * 0.001
                        IF (USW_DIGIT .GT. 0)UVALUE = DIGITS2( UVALUE , DIGITS_PARM)
                        CALL CBND(UPBND,COLUMN,DBLE(0.0),UVALUE,COLUMN_mask,'EP$NUC,11')

                        IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                           CALL CBND(UPBND,COLUMN_MIN_SR,DBLE(0.0),UVALUE,COLUMN_MIN_SR_mask,'EP$NUC,12')
                        END IF

                     END IF
!
                     IF (F_RG .EQ. 0) THEN

!                       TOTAL CAPACITY ROW BY REGION

                        ROW = 'TOTCAP'//UPRGCD(IRG)//UPYRCD(IYR); call makmsk(ROW_mask,':TOTCAP:',UPRGCD(IRG),UPYRCD(IYR))
                        VALUE = DBLE(1.0)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,13')

                        IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,14')
                        END IF

!                       TOTAL CAPACITY ROW BY REGION AND PLANT TYPE

                        ROW = 'F'//UPRGCD(IRG)//UPLNTCD(IECP)//'CAP'//UPYRCD(IYR); call makmsk(ROW_mask,':F:',UPRGCD(IRG),UPLNTCD(IECP),':CAP:',UPYRCD(IYR))
                        VALUE = DBLE(1.0)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,15')

                        IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,16')
                     END IF

                     END IF

!                    RESERVE MARGIN ROW

                     ROW = 'R'//UPRGCD(IRG)//'XXXXX'//UPYRCD(IYR); call makmsk(ROW_mask,':R:',UPRGCD(IRG),':XXXXX:',UPYRCD(IYR))
                     VALUE = ENUC_RG(IRG,IGRP)
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,17')

                     IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                        IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,18')
                     END IF

!                    MAXIMUM RETIREMENTS ROW

                     IF (UPRETRAT .GT. 0.0 .AND. IYR .EQ. UNUC_RLT .AND. USW_ERET .EQ. 1) THEN
                        ROW = 'R'//UPRGCD(IRG)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(IRG),':MXRET0:')
                        VALUE = ENUC_RG(IRG,IGRP)
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,19')

                        IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,20')
                     END IF

                     END IF

!                    Contribute to Load Requirements

                     GEN(IYR) = 0.0
                     FLCST = 0.0

                     GEN_SR(IYR) = 0.0
                     FLCST_SR = 0.0

!                    INITIALIZE SEASONAL PEAKS AND HOURS PER SEASON

                     DO ISP = 1 , EPNMSP
                        NSTP(ISP) = 0
                        DO VLS = 1 , EPNSTP(IYR)
                           VLSMAP(VLS,ISP) = 0
                        END DO
                     END DO

!                    DETERMINE CAPACITY FACTOR AT EACH LOAD STEP

                     DO ISP = 1 , EPNMSP
                        VLS = EPFRST(ISP,IYR)
                        JVLS = 0
                        DO WHILE (VLS .GT. 0)
                           JVLS = JVLS + 1
                           VLSMAP(JVLS,ISP) = VLS
                           VLS = EPNEXT(VLS,IYR)
                        END DO
                        NSTP(ISP) = JVLS
                     END DO

!                    INITIALIZE HOURS PER SEASON

                     DO ISP = 1 , EPNMSP
                        SHOURS(ISP) = DBLE(0.0)
                     END DO

                     DO IVLS = 1 , EPNSTP(IYR)
                        ISP = EPGECP(EPLDGR(IVLS,IYR))
                        SHOURS(ISP) = SHOURS(ISP) + EPWDTH(IVLS,IYR) * 0.001
                     END DO
                     DO ISP = 1 , EPNMSP

                        MIN_HGHT = 999999.9
                        MAX_HGHT = 0.0
                        ADJ_HGHT = UOUNCP(IRG,MIN(UNYEAR,CURIYR+IYR-1)) + UOUCCP(IRG,MIN(UNYEAR,CURIYR+IYR-1))
                        DO JVLS = 1 , NSTP(ISP)
                           VLS = VLSMAP(JVLS,ISP)
                           MIN_HGHT = MIN(MIN_HGHT , EPHGHT(VLS,IYR) + ADJ_HGHT)
                           MAX_HGHT = MAX(MAX_HGHT , EPHGHT(VLS,IYR) + ADJ_HGHT)
                        END DO

                        DO JVLS = 1 , NSTP(ISP)
                           VLS = VLSMAP(JVLS,ISP)
                           DERATE = 0.0

!                          For now do all planned maitenance in offpeak season

                           NUC_AVL = (1.0 - UPFORT(IECP)) * (1.0 - UPPMRT(IECP))
                           PMR = 1.0 - SQRT(ENUC_CF(IYR,IGRP) / NUC_AVL) * (1.0 - UPPMRT(IECP))
                           FOR = 1.0 - SQRT(ENUC_CF(IYR,IGRP) / NUC_AVL) * (1.0 - UPFORT(IECP))
                           IF (ISP .EQ. 3) THEN
                              DERATE = (1.0 - FOR) * (1.0 - (PMR * 8.760 / SHOURS(ISP)))
                           ELSE
                              DERATE = (1.0 - FOR)
                           END IF
                           JGRP = EPLDGR(VLS,IYR)
                           ISEG = EPLDSG(VLS,IYR)
                           ROW = 'L'//UPRGCD(IRG)//'EL'//UPLDCD(ISP)//UPRGCD(JGRP)//UPRGCD(ISEG)//UPYRCD(IYR); call makmsk(ROW_mask,':L:',UPRGCD(IRG),':EL:',UPLDCD(ISP),UPRGCD(JGRP),UPRGCD(ISEG),UPYRCD(IYR))
                           VALUE = DERATE * ENUC_RG(IRG,IGRP) * ENUC_SP_CAP_FAC(ISP,IGRP)
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                           VALUE = MAX( 0.0 , MIN( 1.0 , VALUE))
                           IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,21')
                           GEN(IYR) = GEN(IYR) + VALUE * EPWDTH(VLS,IYR)
                           FLCST = FLCST + VALUE * EPWDTH(VLS,IYR) * ULHTRT_ECP(IPGRP,IYR) * UPPFL(FUEL,IRG,IYR)

                           IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                              ROW_SR = 'R'//UPRGCD(IRG)//'SR'//UPLDCD(ISP)//UPRGCD(JGRP)//UPRGCD(ISEG)//UPYRCD(IYR); call makmsk(ROW_SR_mask,':R:',UPRGCD(IRG),':SR:',UPLDCD(ISP),UPRGCD(JGRP),UPRGCD(ISEG),UPYRCD(IYR))
                              VALUE_SR = SR_CREDIT(IECP) * FOR * ENUC_RG(IRG,IGRP) * ENUC_SP_CAP_FAC(ISP,IGRP)
                              IF (USW_DIGIT .GT. 0)VALUE_SR = DIGITS2( VALUE_SR , DIGITS_PARM)
                              VALUE_SR = MAX( 0.0 , MIN( 1.0 , VALUE_SR))
                              IF (VALUE_SR .NE. 0.0) CALL CVAL(COLUMN,ROW_SR,VALUE_SR,COLUMN_mask,ROW_SR_mask,'EP$NUC,24')

 !                             VALUE_SR = SR_MIN_LF(IECP)         * SR_MIN_CF(IECP) + &
                                         !(1.0 - SR_MIN_LF(IECP)) * SR_MIN_CF(IECP) * ((EPHGHT(VLS,IYR) + ADJ_HGHT) / MIN_HGHT)
                              VALUE_SR = MAX((1.0 - FOR) * NUC_CF_ECP(ISEG,JGRP,IRG),SR_MIN_CF(IECP))
                              
                              IF (ISP .EQ. 3) THEN
                                 VALUE_SR = VALUE_SR * (1.0 - (PMR * 8.760 / SHOURS(ISP)))
                              END IF
                              VALUE_SR = VALUE_SR * ENUC_RG(IRG,IGRP) * ENUC_SP_CAP_FAC(ISP,IGRP)
                              IF (USW_DIGIT .GT. 0)VALUE_SR = DIGITS2( VALUE_SR , DIGITS_PARM)
                              VALUE_SR = MAX( 0.0 , MIN( 1.0 , VALUE_SR))
                              IF (VALUE_SR .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,25')
                              GEN_SR(IYR) = GEN_SR(IYR) + VALUE_SR * EPWDTH(VLS,IYR)
                              FLCST_SR = FLCST_SR + VALUE_SR * EPWDTH(VLS,IYR) * ULHTRT_ECP(IPGRP,IYR) * UPPFL(FUEL,IRG,IYR)


!                              VALUE_SR = SR_MIN_LF(IECP)         * SR_MIN_CF(IECP) + &
!                                         (1.0 - SR_MIN_LF(IECP)) * SR_MIN_CF(IECP) * ((EPHGHT(VLS,IYR) + ADJ_HGHT) / MIN_HGHT)
                              VALUE_SR = MAX((1.0 - FOR) * NUC_CF_ECP(ISEG,JGRP,IRG),SR_MIN_CF(IECP))
                                         
                              VALUE_SR = SR_CREDIT(IECP) * (1.0 - VALUE_SR) * ENUC_RG(IRG,IGRP) * ENUC_SP_CAP_FAC(ISP,IGRP)
                              IF (USW_DIGIT .GT. 0)VALUE_SR = DIGITS2( VALUE_SR , DIGITS_PARM)
                              VALUE_SR = MAX( 0.0 , MIN( 1.0 , VALUE_SR))
                              IF (VALUE_SR .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW_SR,VALUE_SR,COLUMN_MIN_SR_mask,ROW_SR_mask,'EP$NUC,28')
                           END IF

                        END DO
                     END DO

!                    FRACTION INCLUDED IN RENEWABLE GENERATION TOTAL (IF ANY)

                     IF (UPRNWSHRR(IECP,IRG) .GT. 0.00 .AND. UPRNWEXGR(IECP,IRG) .LE. 0.0) THEN
                        ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(IYR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(IYR))
                        VALUE = DBLE(UPRNWSHRR(IECP,IRG))
                        VALUE = VALUE * GEN(IYR) / 1000.0
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,29')

                        IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                           VALUE_SR = DBLE(UPRNWSHRR(IECP,IRG))
                           VALUE_SR = VALUE_SR * GEN_SR(IYR) / 1000.0
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,30')
                        END IF

!                    ELSE IF (UPRNWBNDR(CURIYR + IYR - 1,RPS_RGN) .GT. 0.005 .AND. UPRNWEXG(IECP,RPS_RGN) .GT. 0.00) THEN
!
!                       row to exclude existing generation
!
!                       ROW = 'G'//UPRGCD(IRG)//UPLNTCD(IECP)//'EX'//UPRGCD(IRG)//UPYRCD(YEAR)
!                       VALUE = GEN(IYR) / 1000.0
!                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
!                       CALL CVAL(COLUMN,ROW,VALUE,'EP$NUC,31')

                     END IF

!                    If National RPS and Regional and National Contributions Differ

                     IF (UPRNWBND(CURIYR + IYR - 1) .GT. 0.005 .AND. UPRNWSHR(IECP) .GT. 0.0) THEN
                      IF (UPRNWEXG(IECP) .LE. 0.0) THEN
                        ROW = 'GURNWX'//UPRGCD(IRG)//UPYRCD(IYR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(IRG),UPYRCD(IYR))
                        VALUE = DBLE(UPRNWSHR(IECP))
                        VALUE = VALUE * GEN(IYR) / 1000.0
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,32')

                           IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                              VALUE_SR = DBLE(UPRNWSHR(IECP))
                              VALUE_SR = VALUE_SR * GEN_SR(IYR) / 1000.0
                              CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,33')
                           END IF

                      END IF
                     END IF

!                    row to include incremental existing generation

                     IF (UPRNWBND(CURIYR + IYR - 1) .GT. 0.005 .AND. UPRNWEXG(IECP) .GT. 0.00) THEN
                        ROW = 'G'//UPRGCD(IRG)//UPLNTCD(IECP)//'INC'//UPYRCD(IYR); call makmsk(ROW_mask,':G:',UPRGCD(IRG),UPLNTCD(IECP),':INC:',UPYRCD(IYR))
                        VALUE = GEN(IYR) / 1000.0
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,34')

                        IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                           VALUE_SR = GEN_SR(IYR) / 1000.0
                           IF (USW_DIGIT .GT. 0)VALUE_SR = DIGITS2( VALUE_SR , DIGITS_PARM)
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,35')
                        END IF

                     END IF

!                    row to exclude existing generation from baseline

                     IF (UPRNWBND(CURIYR + IYR - 1) .GT. 0.005 .AND. UPRNWBAS(IECP) .GT. 0.00) THEN
                        ROW = 'G'//UPRGCD(IRG)//UPLNTCD(IECP)//'BAS'//UPYRCD(IYR); call makmsk(ROW_mask,':G:',UPRGCD(IRG),UPLNTCD(IECP),':BAS:',UPYRCD(IYR))
                        VALUE = GEN(IYR) / 1000.0
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,36')

                        IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                           VALUE_SR = GEN_SR(IYR) / 1000.0
                           IF (USW_DIGIT .GT. 0)VALUE_SR = DIGITS2( VALUE_SR , DIGITS_PARM)
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,37')
                     END IF

                     END IF

!                    Accumulate Generation

                     ROW = 'F'//UPRGCD(IRG)//UPLNTCD(IECP)//'GEN'//UPYRCD(IYR); call makmsk(ROW_mask,':F:',UPRGCD(IRG),UPLNTCD(IECP),':GEN:',UPYRCD(IYR))
                     VALUE = GEN(IYR) / 1000.0
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,38')

                     IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                        VALUE_SR = GEN_SR(IYR) / 1000.0
                        CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,39')
                     END IF

!                    Put in Generation Row if Zero-Subsidy Credit Applicable

                     IF (USW_ZECSUB .NE. 4 .AND. ((CURIYR + UHBSYR + IYR - 1) .GE. ENUC_ZECY1(IGRP) .AND. (CURIYR + UHBSYR + IYR - 1) .LE. ENUC_ZECYR(IGRP)))THEN
                        ROW = 'GN'//USTNME(ENUC_ZECST(IGRP))//'NUC'//UPYRCD(IYR); call makmsk(ROW_mask,':GN:',USTNME(ENUC_ZECST(IGRP)),':NUC:',UPYRCD(IYR))
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,40')
                        NUCGENST(ENUC_ZECST(IGRP),IRG,IYR) = NUCGENST(ENUC_ZECST(IGRP),IRG,IYR) + DBLE(ENUC_CAP(IYR,IGRP) / 1000.0) * VALUE
                        NUCGENST(ENUC_ZECST(IGRP),MNUMNR,IYR) = NUCGENST(ENUC_ZECST(IGRP),MNUMNR,IYR) + DBLE(ENUC_CAP(IYR,IGRP) / 1000.0) * VALUE

!                       if (iyr .eq. unuc_rlt)write(13,3344) curiyr+uhbsyr,curiyr+uhbsyr+iyr-1,column,enuc_igrp(igrp),enuc_grp(igrp),  &
!                           ustnme(enuc_zecst(igrp)),enuc_cap(iyr,igrp)/1000.0,gen(iyr) / 1000.0,enuc_rval(igrp)
!3344 format(1h ,'!zecrev',i4,i5,1x,a8,i6,i6,1x,a2,3f10.3)
                     END IF
!
!                    CO2 OUTPUT STANDARD
!
                     IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,IYR) .GT. 0.0 .AND. CO2_PLTSW(IECP) .GT. 0.0)THEN
                        CO2_LBMWH = DBLE(0.0)
                        VAL_STD_CO2 = GEN(IYR) * 0.001 * (CO2_LBMWH - CO2_NRYR(IRG,IYR)) * DBLE(CO2_PLTSW(IECP))
                        VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                        ROW = 'ERCO2'//URGNME(IRG)(6:7)//UPYRCD(IYR); call makmsk(ROW_mask,':ERCO2:',URGNME(IRG)(6:7),UPYRCD(IYR),':!NERC:')
                        CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$NUC,43')

                        IF (SR_CREDIT(IECP) .GT. 0.0)THEN
                           VAL_STD_CO2 = GEN_SR(IYR) * 0.001 * (CO2_LBMWH - CO2_NRYR(IRG,IYR)) * DBLE(CO2_PLTSW(IECP))
                           VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                           CALL CVAL(COLUMN_MIN_SR,ROW,VAL_STD_CO2,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,44')
                        END IF
                     END IF
!
!                    GRID RESILIENCE ROW, IF APPROPRIATE
!
                     IF (GRD_RATS(IECP,IRG) .GE. 0.0)THEN
                        ROW = 'GRGRD'//URGNME(IRG)(6:7)//UPYRCD(IYR); call makmsk(ROW_mask,':GRGRD:',URGNME(IRG)(6:7),UPYRCD(IYR))
                        VAL_STD_GRD = GEN(IYR) * 0.001 * (GRD_RATS(IECP,IRG) - GRD_NRYR(IRG,IYR))
!                       VAL_STD_GRD = VAL_STD_GRD * 0.001
                        CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$NUC,45')

                        IF (SR_CREDIT(IECP) .GT. 0.0)THEN
                           VAL_STD_GRD = GEN_SR(IYR) * 0.001 * (GRD_RATS(IECP,IRG) - GRD_NRYR(IRG,IYR))
!                          VAL_STD_GRD = VAL_STD_GRD * 0.001
                           CALL CVAL(COLUMN_MIN_SR,ROW,VAL_STD_GRD,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,46')
                        END IF
                     END IF

!                    Determine Cost

                     IF (F_RG .EQ. 0) THEN
                        ROW = UPOBJ ; ROW_mask=UPOBJ

!                       Nuclear Aging Investment Cost, If Any

                        R_INV = 0.0
                        IF (UPNASW .GT. 0 .AND. IYR .GE. UNUC_RLT .AND. (CURIYR + UHBSYR + UNUC_RLT - 1) .EQ. ENUC_ASYR(IGRP))THEN
                           ROV_CST = ENUC_ACST(IGRP)
   
                           IF (ROV_CST .GT. DBLE(0.0001)) THEN

                              IF (UPNASW .EQ. 1)THEN
!                             LOAD SLR COST ON YEAR 2 COLUMN ONLY
                                 IF (IYR .EQ. UNUC_RLT)THEN
                                    CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPNCLT,UPPLYR(WICN),CURIYR,IYR,ROV_CST,UPNCPR,UPCAPD(1,WICN),UPGNPD,EPUIRT,EPUFDT,EPUROR,TXBOOK,BVBOOK)
                                    URATIO = TXBOOK / BVBOOK
                                    CAPUNSTL = BVBOOK

                                    CALL EPNBLD(DBLE(EPUROR),DBLE(EPUTDSCRT),URATIO,DBLE(EPUFPE),UPNELF,UPTXLF(WICN),DBLE(UPTXRT),UPNELF,CAPUTIL)
                              R_INV = CAPUNSTL * CAPUTIL / CRF(DBLE(EPUTDSCRT),UNFPH-IYR+1) * PWF(DBLE(EPUTDSCRT),IYR - 1)
!                    write(6,4545) curiyr+1989,column,unfph-iyr+1,iyr,rov_cst,  &
!                                        CAPUNSTL , CAPUTIL , CRF(DBLE(EPUTDSCRT),UNFPH - IYR + 1) , PWF(DBLE(EPUTDSCRT),IYR - 1) , R_INV
!4545 format(1h ,'!nucslr',i4,1x,a8,i3,i3,6f10.3)
                                 END IF
                              ELSE IF (UPNASW .EQ. 2)THEN
!                             LOAD SLR COST ON YEAR 2 AND YEAR 3 COLUMNS

                                 IF (UCL_VIN(IYR) .GT. 0) THEN
                                    NYR = 0
                                    DO IY = IYR , UNXPH
                                       IF (UCL_VIN(IY) .EQ. UCL_VIN(IYR)) THEN
                                          NYR = NYR + 1
                                          IF (IY .EQ. UNXPH) THEN
                                             NYR = NYR + UNFPH - UNXPH
                                          END IF
                                       END IF
                                    END DO
                                 ELSE
                                     NYR = 1
                                 END IF

                                 CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPNCLT,UPPLYR(WICN),CURIYR,IYR,ROV_CST,UPNCPR,UPCAPD(1,WICN),UPGNPD,EPUIRT,EPUFDT,EPUROR,TXBOOK,BVBOOK)
                                 URATIO = TXBOOK / BVBOOK
                                 CAPUNSTL = BVBOOK

                                 CALL EPNBLD(DBLE(EPUROR),DBLE(EPUTDSCRT),URATIO,DBLE(EPUFPE),UPNELF,UPTXLF(WICN),DBLE(UPTXRT),UPNELF,CAPUTIL)

                                 R_INV = CAPUNSTL * CAPUTIL / CRF(DBLE(EPUTDSCRT),NYR) * PWF(DBLE(EPUTDSCRT),IYR-1)
!                    write(6,4545) curiyr+1989,column,nyr,iyr,rov_cst,  &
!                                        CAPUNSTL , CAPUTIL , CRF(DBLE(EPUTDSCRT),NYR) , PWF(DBLE(EPUTDSCRT),IYR-1) , R_INV

                              END IF
                           END IF
                        END IF

                        TFOM = 0.0
                        TVOM = 0.0
                        TGPS = 0.0
                        IF (IYR .LT. UNXPH) THEN
                           IF (IYR+CURIYR-1+UHBSYR .GE. UPGSY1(IECP) .AND. IYR+CURIYR-1+UHBSYR .LE. UPGSYL(IECP)) THEN
                               EXPTC = ENUC_PTC(IGRP)
                           ELSE
                               EXPTC = 0.0
                           ENDIF
!                          YEAR 1 FOM IS A SUNK COST SO SET = 0
                           IF (IYR .GT. 1)TFOM(IYR) = ENUC_FOM(IYR,IGRP) * UPGNPD(IYR+CURIYR-1)
                           TVOM(IYR) = GEN(IYR) * 0.001 * (ENUC_VOM(IGRP) - EXPTC) * UPGNPD(IYR+CURIYR-1)
                           TGPS(IYR) = GEN(IYR) * 0.001 * GPSSUB(IECP,IYR) * UPGNPD(IYR+CURIYR-1)
                        ELSE
                           DO IY = IYR , UNFPH
                             IF (IY+CURIYR-1+UHBSYR .GE. UPGSY1(IECP) .AND. IY+CURIYR-1+UHBSYR .LE. UPGSYL(IECP)) THEN
                               EXPTC = ENUC_PTC(IGRP)
                             ELSE
                               EXPTC = 0.0
                             ENDIF
                              TFOM(IY) = ENUC_FOM(IY,IGRP) * UPGNPD(IY+CURIYR-1)
                              TVOM(IY) = GEN(IYR) * 0.001 * (ENUC_VOM(IGRP) - EXPTC) * UPGNPD(IY+CURIYR-1)
                              TGPS(IY) = GEN(IYR) * 0.001 * GPSSUB(IECP,IY) * UPGNPD(IY+CURIYR-1)
                           END DO
                        END IF

                        FOM = PVV(TFOM,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))
                        VOM = PVV(TVOM,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))
                        GPS = PVV(TGPS,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))

                        VALUE = FOM + VOM + 0.000001 * FLCST - GPS + R_INV
                        VALUE = VALUE * DBLE(1.0 - UPRETNHU)
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,47')

                        IF (SR_CREDIT(IECP) .GT. 0.0) THEN

                           TFOM_SR = 0.0
                           TVOM_SR = 0.0
                           TGPS_SR = 0.0
                           IF (IYR .LT. UNXPH) THEN
!                             YEAR 1 FOM IS A SUNK COST SO SET = 0
                             IF (IYR+CURIYR-1+UHBSYR .GE. UPGSY1(IECP) .AND. IYR+CURIYR-1+UHBSYR .LE. UPGSYL(IECP)) THEN
                               EXPTC = ENUC_PTC(IGRP)
                             ELSE
                               EXPTC = 0.0
                             ENDIF                        
                              IF (IYR .GT. 1)TFOM_SR(IYR) = ENUC_FOM(IYR,IGRP) * UPGNPD(IYR+CURIYR-1)
                              TVOM_SR(IYR) = GEN_SR(IYR) * 0.001 * (ENUC_VOM(IGRP) - EXPTC) * UPGNPD(IYR+CURIYR-1)
                              TGPS_SR(IYR) = GEN_SR(IYR) * 0.001 * GPSSUB(IECP,IYR) * UPGNPD(IYR+CURIYR-1)
                           ELSE
                              DO IY = IYR , UNFPH
                               IF (IY+CURIYR-1+UHBSYR .GE. UPGSY1(IECP) .AND. IY+CURIYR-1+UHBSYR .LE. UPGSYL(IECP)) THEN
                                 EXPTC = ENUC_PTC(IGRP)
                               ELSE
                                 EXPTC = 0.0
                               ENDIF
                                 TFOM_SR(IY) = ENUC_FOM(IY,IGRP) * UPGNPD(IY+CURIYR-1)
                                 TVOM_SR(IY) = GEN_SR(IYR) * 0.001 * (ENUC_VOM(IGRP) - EXPTC) * UPGNPD(IY+CURIYR-1)
                                 TGPS_SR(IY) = GEN_SR(IYR) * 0.001 * GPSSUB(IECP,IY) * UPGNPD(IY+CURIYR-1)
                              END DO
                           END IF

                           FOM_SR = PVV(TFOM_SR,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))
                           VOM_SR = PVV(TVOM_SR,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))
                           GPS_SR = PVV(TGPS_SR,ECP_D_FPH,UNFPH,DBLE(EPDSCRT))

                           VALUE_SR = FOM_SR + VOM_SR + 0.000001 * FLCST_SR - GPS_SR + R_INV
                           VALUE_SR = VALUE_SR * DBLE(1.0 - UPRETNHU)
                           IF (USW_DIGIT .GT. 0)VALUE_SR = DIGITS2( VALUE_SR , DIGITS_PARM)
                           CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$NUC,48')
                        END IF

                        IF (IYR .EQ. UNXPH) THEN
                           WRITE(18,2831) CURIYR+UHBSYR,IRG,IGRP,ENUC_GRP(IGRP),COLUMN,ROW,VALUE,FOM,VOM, 0.000001 * FLCST,GEN(1), &
                              ENUC_CAP(IYR,IGRP),ENUC_RG(IRG,IGRP)
 2831                      FORMAT(1X,"NUC_CST",4(":",I5),2(":",A8),7(":",F15.3))
                        END IF

                     END IF
                  END IF  ! IF (ENUC_CAP(IYR,IGRP) .GT. 0.0) THEN
               END DO     ! IYR
               F_RG = F_RG + 1
            END IF        ! ENUC_RG > 0
         END DO           ! IRG
      END DO              ! IGRP

!     Create RHS for Row to Force Nuclear Generation Due to Zero-Subsidy Policy, If Appropriate

      DO IRG = 1 , 49
         DO IYR = 1 , UNXPH
            IF (NUCGENST(IRG,MNUMNR,IYR) .GT. DBLE(0.0))THEN
               ROW = 'GN'//USTNME(IRG)//'NUC'//UPYRCD(IYR); call makmsk(ROW_mask,':GN:',USTNME(IRG),':NUC:',UPYRCD(IYR))
               CALL CROWTYPE(ROW,'G       ',ROW_mask)
               VALUE = DBLE(0.999) * NUCGENST(IRG,MNUMNR,IYR)
               CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$NUC,49')
            END IF
         END DO
      END DO

!     Create Non-Utility Build / Operate Vectors

      DO IRG = 1 , UNRGNS

         RPS_RGN = MAP_NERC_TO_RPS_RGN(IRG)

         CALL GETBLD(1,IRG)
         DSCRT = EPDSCRT
         DO IP = 1 , ECP_D_DSP
            IECP = UCPDSPI(IP)
            SUBECP = WIAN           !capacity type for subsidized limit is AN, all nuc together
            DSCRT_WRSK = DSCRT - UPRSK(IECP)
            FUEL = UPFLTP(IECP,1)
            GSYR1 = UPGSY1(IECP) - UHBSYR
            GSYRL = UPGSYL(IECP) - UHBSYR
            DO YEAR = 1 , UNXPH
               OLYR = YEAR + UPPLYR(IECP)
               IF (OLYR .LE. UNXPH .AND. UPVTYP(IP) .EQ. 1 .AND. &
                  (IECP .EQ. WICN .OR. IECP .EQ. WIAN .OR. IECP .EQ. WISM) .AND. &
                  (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,IRG) .GT. 0.0)) THEN

!                 DETERMINE CPS REQUIREMENT (LEVELIZED FOR LAST YEAR)

                  IF (UPCAPCAS .GT. 0)THEN
                     IF (OLYR .LT. UNXPH)THEN
                        PVCPS = DBLE(UPCAPBND(MIN(CURIYR + OLYR - 1,UNYEAR)))
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           CPS(JYR) = UPCAPBND(MIN(CURIYR + JYR + UNXPH - 2,UNYEAR))
                           ONE(JYR) = DBLE(1.0)
                        END DO
                        PVCPS = PVV(CPS,ECP_D_FPH,UNFPH - UNXPH + 1,DSCRT) *  &
                           PWF(DBLE(EPDSCRT),UNXPH - 1)
                        PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,DSCRT) *  &
                           PWF(DSCRT,UNXPH - 1)
                        PVCPS = PVCPS / PVONE
                     END IF
                     PVCPS = MAX(PVCPS,ECP_MIN)
                     IF (UPCAPSHR(IP) .LE. 0.0)THEN
                        PVCPS = PVCPS
                     ELSE
                        PVCPS = PVCPS - DBLE(1.0)
                     END IF
                  END IF
!
!                 Open Direct Access File for Levelized Cost Information
!
                  IF (YEAR .EQ. 1)CALL GETBOUT(CURIYR,IRG)
                  IF (OLYR .LT. UNXPH) THEN
                     FULLYR = OLYR + CURIYR + UHBSYR - 1
                  ELSE
                     FULLYR = MIN(UNYEAR + UHBSYR , UNFPH + CURIYR + UHBSYR - 1)
                  END IF
!
                  IFPH2 = UNFPH - OLYR + 1
!
!                 CREATE EXTRA LOOP FOR SUBSIDY LIMITS, IF APPROPRIATE
!
                  IF (UPSUBCAS(IP) .GT. 0 .AND. LIMSUB(IP) .GT. 0.0)THEN
                     NUMLOOP = 2

!                    IF PTC SUBSIDY, CHECK IF VALID ONLINE YEAR

                     IF (UPSUBCAS(IP) .EQ. 1)THEN
                        IF (OLYR .LT. UNXPH)THEN
                           IF ((CURIYR + OLYR - 1) .LT. GSYR1 .OR. (CURIYR + OLYR - 1) .GT. GSYRL) NUMLOOP = 1
                        ELSE
                           IF ((CURIYR + UNFPH - 1) .LT. GSYR1) NUMLOOP = 1
                           IF ((CURIYR + UNXPH - 1) .GT. GSYRL) NUMLOOP = 1
                        END IF
                     END IF
                  ELSE
                     NUMLOOP = 1
                  END IF

!                 CHECK FOR TIME-DEPENDENT DEBT/EQUITY SUBSIDIES

                  CALL EP$SUBFIN(IECP,OLYR,CSTDTADJ,CSTEQADJ,SHRDTADJ)

!                 SET UP ANNUAL NATIONAL LIMIT ROWS

                  IF ( (UPAVLYR(IECP) .LE. FULLYR ) ) THEN

                    ROW = 'L'//'U'//UPLNTCD(IECP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',':U:',UPLNTCD(IECP),':ANN:',UPYRCD(YEAR))

!                   SET ROW TYPE
!
                    IF ( UPANNLMT(IECP,MIN(MNUMYR , OLYR+CURIYR)) .GT. 999.0 ) THEN
!                      make free row
                       CALL CROWTYPE(ROW,'N       ',ROW_mask)
                    ELSE
                       CALL CROWTYPE(ROW,'L       ',ROW_mask)
                       VALUE = UPANNLMT(IECP,MIN(MNUMYR , CURIYR+OLYR-1))
!                      REVISE RHS OF ROW
!
                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                       CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$NUC,50')
                    ENDIF

                  ENDIF

!                 if (iecp .eq. wian)print *,'!ptcan',curiyr+1989,curiyr+1989+olyr-1,upsubcas,limsub(ip),numloop,gsyr1,gsyrl

                  DO LOOPS = 1 , NUMLOOP
                     DO STEPS = 1 , MAX(1,ESTSWTCH(IP))
                        WRITE (STEP,'(I1)') STEPS
                        IOWN = UPBLDTYP(IRG)
                        IF (LOOPS .EQ. 1)THEN
                           COLUMN = 'B'//UPRGCD(IRG)//UPLNTCD(IECP)//UPOWNCD(IOWN)//'X'//STEP//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(IRG),UPLNTCD(IECP),UPOWNCD(IOWN),':X:',STEP,UPYRCD(YEAR),':!NUC:')
                        ELSE
                           COLUMN = 'B'//UPRGCD(IRG)//UPLNTCD(IECP)//UPOWNCD(IOWN)//'S'//STEP//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(IRG),UPLNTCD(IECP),UPOWNCD(IOWN),':S:',STEP,UPYRCD(YEAR),':!NUC:')
                        END IF
!
!                       IF TECHNOLOGY IS AVAILABLE CREATE VECTORS
!
                        IF (UPAVLYR(IECP) .LE. FULLYR .AND. UPOVR(IECP) .LT. 9000.0 .AND.  &
                           (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,IRG) .GT. 0.0)) THEN

!                       STORE INDEX FOR AVAILABILITY OF TECHNOLOGY AND SUBSIDY

                        IF (LOOPS .EQ. 1 .AND. STEPS .EQ. 1 .AND. UPBLDREG(IECP,IRG) .GT. 0.0)BUILD_AVL(IECP,YEAR,IRG,CURIYR) = NUMLOOP

!                 PUT INTO NATIONAL ANNUAL BUILD LIMIT ROW
!
                           ROW = 'LU'//UPLNTCD(IECP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':ANN:',UPYRCD(YEAR))
                           VALUE = DBLE(1.0)
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,51')
!
!                          REVISE OBJECTIVE FUNCTION COEFFICIENT
!
                           ROW = UPOBJ ; ROW_mask=UPOBJ
!
!                          Calculate Future Value of Investment and Debt during Construction
!
                           NYR = UNYEAR
                           XPH = ECP_D_XPH
                           FPH = ECP_D_FPH
                           LCP = ECP_D_LCP
                           CLT = UPCLYR(IECP)
                           PLT = UPPLYR(IECP)
                           CYR = CURIYR
                           FYR = YEAR

                           ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                           IF (OLYR .LT. UNXPH)THEN
                              IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                                 ANNADJ = UPANNADJ(IECP,CURIYR+OLYR-1)
                              ELSE
                                 ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                              END IF
                           ELSE
                              DO JYR = UNXPH , UNAPH
                                 KYR = JYR - UNXPH + 1
                                 AN1(KYR) = 1.0
                                 IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                    ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                                 ELSE
                                    ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                 END IF
                              END DO
                              ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                       PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                           END IF

!                          OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ESTCPCST(IP,STEPS) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                           OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ESTCPCST(IP,STEPS) * ANNADJ

                           if (STEPS.eq.1)  &
                              WRITE(18,3210) CURIYR+UHBSYR,YEAR,IRG,IECP, OVRCST, UPOVR(IECP), UPLRPC(IECP), UPLROPT(IECP), UPLRLC(IECP), EPRGM(IECP), EPACM(IECP), ESTCPCST(IP,STEPS), ANNADJ
 3210                      FORMAT(1X,"OVRCST-N",4(":",I4),9(":",F21.4))

!                          IF SUBSIDY LIMIT FOR INVESTMENT TAX CREDIT, REMOVE IT FOR ADDITIONS WITHOUT SUBSIDY

                           IF (UPSUBCAS(IECP) .EQ. 2 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                              OVRCST = OVRCST / DBLE(1.0 - UPCSB(IECP))
                           END IF
!
                           DO ICP = 1 , ECP_D_LCP
                              PROFILE(ICP) = UPCPRO(IECP,ICP)
                           END DO
                           DO ZYR = 1 , UNYEAR + ECP_D_XPH
                              CAPESC(ZYR) = UPCAPD(ZYR,IECP)
                           END DO
                           DO ZYR = 1 , UNYEAR + ECP_D_FPH
                              GNPF(ZYR) =  UPGNPD(ZYR)
                           END DO

!                          CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                           IF (UPSUBCAS(IECP) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                              INTR =  EPUIRT + UPNIPRM
                              UTINT = DBLE(EPUIRT)                     ! UTILITY INTEREST RATE
                              ETINT = EPUIRT                           ! UTILITY INTEREST RATE
                           ELSE
                              INTR =  EPUIRT + UPNIPRM + UPNIRTEA(IECP)
                              UTINT = EPUIRT + UPNIRTEA(IECP)      ! UTILITY INTEREST RATE
                              ETINT = EPUIRT + UPNIRTEA(IECP)      ! UTILITY INTEREST RATE
                           END IF
                              INTR =  INTR  + CSTDTADJ
                              UTINT = UTINT + CSTDTADJ             ! UTILITY INTEREST RATE
                              ETINT = ETINT + CSTDTADJ             ! UTILITY INTEREST RATE

                           IF (UPBLDTYP(IRG) .EQ. 1) THEN

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                              IF (UPSUBCAS(IECP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                 DEBT_F = EPUFDT
                              ELSE
                                 DEBT_F = EPUFDT + UPNFDTA(IECP)
                              END IF
                                 DEBT_F = DEBT_F + SHRDTADJ

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                              IF (UPSUBCAS(IECP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 EWGROE = EPUCRE + UPNRPRM
                                 UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT)
                              ELSE
                                 EWGROE = EPUCRE + UPNRPRM + UPNRRTEA(IECP)
                                 UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT) + UPNRRTEA(IECP)
                              END IF
                                 EWGROE = EWGROE + CSTEQADJ
                                 UTROE  = UTROE + CSTEQADJ

                              ETROR = UTROE * (1.0 - DEBT_F) + UTINT * DEBT_F
                              UTROR = DBLE(ETROR)

                              CALL EPINCST(NYR,XPH,FPH,LCP,CLT,PLT,CYR,FYR,OVRCST,PROFILE,CAPESC,GNPF,ETINT,DEBT_F,ETROR,TXBOOK,BVBOOK)

                              if (STEPS.eq.1)  &
                                 WRITE(18,4211) CURIYR+UHBSYR,IRG,IECP,IOWN,NYR,XPH,FPH,LCP,CLT,CYR,FYR,OVRCST, &
                                 UTINT,UTROE,DEBT_F,UTROR,TXBOOK,BVBOOK, &
                                 (PROFILE(ICP),ICP=1,LCP),  &
                                 IP,STEPS,ESTCPCST(IP,STEPS),YEAR,0,  &
                                 (CAPESC(ZYR),GNPF(ZYR),ZYR=CYR+FYR-1,CYR+FYR+CLT-2)
 4211                         FORMAT(1X,"EPINCST-N",11(":",I4),":",F7.2,4(":",F7.4),2(":",F15.1),10(":",F5.3),  &
                                 2(":",I4),":",F15.3,2(":",I4),  &
                                 8(":",F5.3))

                              URATIO = TXBOOK / BVBOOK
                              CAPUNSTL = BVBOOK

                              UFPE = DBLE(EPUFPE)
                              TR = DBLE(UPTXRT)         ! MARGINAL FEDERAL INCOME TAX RATE

                              TL = UPTXLF(IECP)         ! TAX LIFE ASSOCIATED WITH TECHNOLOGY
                              CL = UPECLF(IECP)         ! UTILITY ECONOMIC LIFE
                              UCLF = UPUCLF(IECP)       ! UTILITY DEBT LOAN LIFE <= ECONOMIC LIFE

                              CALL EPNBLD(UTROR,DSCRT,URATIO,UFPE,CL,TL,TR,UCLF,CAPUTIL)

                              PVCAP = CAPUNSTL * CAPUTIL / CRF(DSCRT,IFPH2) * PWF(DSCRT,OLYR)

                              if (STEPS.eq.1)  &
                                 WRITE(18,4212) CURIYR+UHBSYR,YEAR,IRG,IECP,UTROR,DSCRT,URATIO,UFPE,CL,TL,TR,UCLF,CAPUTIL
 4212                         FORMAT(1X,"EPNBLD-N",4(":",I4),4(":",F7.4),2(":",I2),":",F7.4,":",I4,":",F8.4)

!                             COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR -- UTILITIES

                              IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP .AND. STEPS .EQ. 1) THEN
                                 CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
                                 CAPLEV = (( CAPUNSTL * CAPUTIL ) / CRF(DSCRT_WRSK , IFPH2) ) * PWF(DSCRT_WRSK , OLYR)
                                 CAPLEV = CAPLEV / PVGNP
                                 EPLVCAP(IECP,IOWN) = CAPLEV
                                 EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                                 EPLVTRN(IECP) = (TRANS / CRF(DSCRT_WRSK , IFPH2) * PWF(DSCRT_WRSK , OLYR)) / PVGNP
                                 EPLVBCK(IECP) = 1.0
                              END IF

                           ELSE

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                              IF (UPSUBCAS(IECP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                 DEBT_F = UPNFDT
                              ELSE
                                 DEBT_F = UPNFDT + UPNFDTA(IECP)
                              END IF
                                 DEBT_F = DEBT_F + SHRDTADJ

!                             CHECK FOR SUBSIDY LIMIT FOR RETURN ON EQUITY

                              IF (UPSUBCAS(IECP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 EWGROE = EPUCRE + UPNRPRM
                                 UTROE  = EPUCRE
                              ELSE
                                 EWGROE = EPUCRE + UPNRPRM + UPNRRTEA(IECP)
                                 UTROE  = EPUCRE + UPNRRTEA(IECP)
                              END IF
                                 EWGROE = EWGROE + CSTEQADJ
                                 UTROE  = UTROE + CSTEQADJ

                              ROR = EWGROE * (1.0 - DEBT_F) + INTR * DEBT_F
                              CALL EPINCST(NYR,XPH,FPH,LCP,CLT,PLT,CYR,FYR,OVRCST,PROFILE,CAPESC,GNPF,INTR,DEBT_F,ROR,TXBOOK,BVBOOK)

                              if (STEPS.eq.1)  &
                                 WRITE(18,3211) CURIYR+UHBSYR,IRG,IECP,IOWN,NYR,XPH,FPH,LCP,CLT,CYR,FYR,OVRCST, &
                                 INTR,EWGROE,DEBT_F,ROR,TXBOOK,BVBOOK, &
                                 (PROFILE(ICP),ICP=1,LCP),  &
                                 IP,STEPS,ESTCPCST(IP,STEPS),YEAR,0,  &
                                 (CAPESC(ZYR),GNPF(ZYR),ZYR=CYR+FYR-1,CYR+FYR+CLT-2)
 3211                         FORMAT(1X,"EPINCST-N",11(":",I4),":",F7.2,4(":",F7.4),2(":",F15.1),10(":",F5.3),  &
                                 2(":",I4),":",F15.3,2(":",I4),  &
                                 8(":",F5.3))

                              PRATIO = TXBOOK / BVBOOK
                              CAPNNSTL = BVBOOK

!                             Calculate EWG Fix Charge Factor (CAPNUG)

                              DF2 = DBLE(DEBT_F)                       ! EWG DEBT FRACTION
                              RATIO = PRATIO            ! TX TO BV RATIO
                              ROEPRM = DBLE(UPNRPRM)    ! EWG EQUITY ROR PREMIUM
                              INTPRM = DBLE(UPNIPRM)    ! EWG INTEREST RATE PREMIUM

                              TR = DBLE(UPTXRT)         ! MARGINAL FEDERAL INCOME TAX RATE
                              TL = UPTXLF(IECP)         ! TAX LIFE ASSOCIATED WITH TECHNOLOGY
                              CL = UPNCLF(IECP)         ! EWG CONTRACT LIFE
                              DL2 = UPNLLF(IECP)        ! EWG DEBT LOAN LIFE <= CONTRACT LIFE

                              CALL EPCNBLD(DF2,RATIO,ROEPRM,INTPRM,UTROE,UTINT,TR,TL,CL,DL2,CAPNUG)

                              if (STEPS.eq.1)  &
                                 WRITE(18,3212) CURIYR+UHBSYR,YEAR,IRG,IECP,DF2,RATIO,ROEPRM,INTPRM,UTROE,UTINT,TR,TL,CL,DL2,CAPNUG
 3212                         FORMAT(1X,"EPCNBLD-N",4(":",I4),7(":",F7.4),3(":",I2),":",F8.4)

                              PVCAP = CAPNNSTL * CAPNUG / CRF(DSCRT,IFPH2) * PWF(DSCRT,OLYR)
!
!                             COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR--NUGS
!
                              IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP .AND. STEPS .EQ. 1)THEN
                                 CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
                                 CAPLEV = (( CAPNNSTL * CAPNUG ) / CRF(DSCRT,IFPH2) ) * PWF(DSCRT,OLYR)
                                 CAPLEV = CAPLEV / PVGNP
                                 EPLVCAP(IECP,IOWN) = CAPLEV
                                 EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                              END IF

                           END IF ! (UPBLDTYP(IRG) .EQ. 1)

                           TRANS = (DBLE(EPCOVR(IP) + EPCTRM(IP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IP))
                           PVTRN = TRANS / CRF(DSCRT,IFPH2) * PWF(DSCRT,OLYR)
                           PVEXT = 0.0
                           FLCST = 0.0
                           FLCSTL = 0.0
                           EPLVEXT(IECP) = 0.0
                           DO JYR = OLYR , UNXPH

                              FROM_LABEL = "EP_NUC"
                              CALL ECP_AVG_HTRT(FROM_LABEL, IRG, 0, IECP, JYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                              FLCST = FLCST + UPMCF(IECP) * 8.760 * AVG_HTRT(IECP) * UPPFL(FUEL,IRG,JYR)
                              IF (YEAR .EQ. 1) FLCSTL = FLCSTL + AVG_HTRT(IECP) * UPPFL(FUEL,IRG,JYR) * 0.001
                           END DO
                           FLCST = FLCST * 0.001

!                          DETERMINE PRESENT VALUE OF PRODUCTION TAX CREDIT SUBSIDIES

                           IF ((UPGSUB(IECP) .GT. 0.0 .AND. (CURIYR + OLYR - 1) .GE. GSYR1 .AND. (CURIYR + OLYR - 1) .LE. GSYRL) .OR.  &
                               (UPGSUBPT(IECP) .GT. 0 .AND. UPGSUBYR(IECP,min(MNUMYR , CURIYR + OLYR -1)) .GT. 0.0)) THEN
                              DO JYR = 1 , UPGSYR(IECP)
                                IF (UPGSUBPT(IECP) .LE. 0) THEN
                                 SOM(JYR) =(UPGSUB(IECP) * 8.76 * UPMCF(IECP))
                                ELSE
!                                IF (OLYR .LT. UNXPH)THEN
                                   SOM(JYR) =(UPGSUBYR(IECP,min(MNUMYR , CURIYR + OLYR - 1)) * 8.76 * UPMCF(IECP))
!                                ELSE
!                                  SOM(JYR) =(UPGSUBYR(IECP,min(MNUMYR , JYR + CURIYR + OLYR - 2)) * 8.76 * UPMCF(IECP))
!                                END IF
                                END IF

                                 IF (UPGSMX(IECP) .GT. 0)SOM(JYR) = MIN(SOM(JYR),UPGSMX(IECP))

!                                IF PTC IS REAL, THEN APPLY DEFLATOR

                                 IF (UPGSTY(IECP) .LE. 0) SOM(JYR) = SOM(JYR) * UPGNPD(JYR + CURIYR + OLYR - 2)

!                                ADJUST FOR TAX BENEFIT

                                 SOM(JYR) = SOM(JYR) / (1.0 - UPTXRT)
                                 IF (YEAR .EQ. 1) SOML(JYR) = SOM(JYR) / (8.76 * UPMCF(IECP))
!                                IF (YEAR .EQ. 1 .and. irg .eq. 1) write(6,1212) curiyr+1989,curiyr+1989+jyr,SOML(JYR)
!1212 format(1h ,'!nucptc',i4,i5,f10.2)
                              END DO
                              PV$SOM = PVV(SOM,ECP_D_FPH,UPGSYR(IECP),DBLE(DSCRT)) * PWF(DBLE(DSCRT),OLYR - 1)
                              IF (YEAR .EQ. 1)THEN
                                 CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
                                 PV$SOML = PVV(SOML,ECP_D_FPH,UPGSYR(IECP),DBLE(DSCRT)) * PWF(DBLE(DSCRT),OLYR - 1)
                                 EPLVEXT(IECP) = EPLVEXT(IECP) - PV$SOML / PVGNP
!                                IF (YEAR .EQ. 1 .and. irg .eq. 1) write(6,1213) curiyr+1989,curiyr+1989+olyr-1,pv$soml,pvgnp,eplvext(iecp)
!1213 format(1h ,'!nucptc',i4,i5,3f10.2)
                              END IF
                           ELSE
                              PV$SOM = 0.0
                              IF (YEAR .EQ. 1) PV$SOML = 0.0
                           END IF

                           NUC_PTC(YEAR) = PV$SOM

                           DO JYR = 1 , UNFPH
                              IF (JYR .GE. OLYR) THEN
                                 TFOM(JYR) = EPFOM(IECP) * UPGNPD(JYR+CURIYR-1)
                                 TVOM(JYR) = UPMCF(IECP) * 8.760 * EPVOM(IECP) * UPGNPD(JYR+CURIYR-1)
                                 TGPS(JYR) = UPMCF(IECP) * 8.760 * GPSSUB(IECP,JYR) * UPGNPD(JYR+CURIYR-1)
                                 IF (YEAR .EQ. 1 .AND. STEPS .EQ. 1) THEN
                                    FOML(JYR - OLYR + 1) = EPFOM(IECP) * UPGNPD(JYR+CURIYR-1)
                                    VOML(JYR - OLYR + 1) = EPVOM(IECP) * UPGNPD(JYR+CURIYR-1)
                                 END IF
                              ELSE
                                 TFOM(JYR) = 0.0
                                 TVOM(JYR) = 0.0
                                 TGPS(JYR) = 0.0
                              END IF
                           END DO
                           PVFOM = PVV(TFOM,ECP_D_FPH,UNFPH,DSCRT)
                           PVVOM = PVV(TVOM,ECP_D_FPH,UNFPH,DSCRT)
                           PVGPS = PVV(TGPS,ECP_D_FPH,UNFPH,DSCRT)
                           IF (YEAR .EQ. 1 .AND. STEPS .EQ. 1) THEN
                              PVFOML = PVV(FOML,ECP_D_FPH,IFPH2,DSCRT) * PWF(DBLE(DSCRT),OLYR-1)
                              PVVOML = PVV(VOML,ECP_D_FPH,IFPH2,DSCRT) * PWF(DBLE(DSCRT),OLYR-1)
                           END IF
                           IF (UPSUBFCF(IECP) .GT. 0) THEN     !PTC shared out and PTC value is on the subsidy step vector 
                              VALUE = PVCAP + PVTRN + PVFOM + FLCST + PVVOM - PVGPS ! - PV$SOM
                           ELSE
                              VALUE = PVCAP + PVTRN + PVFOM + FLCST + PVVOM - PVGPS  - PV$SOM
                           ENDIF

!                          CHECK FOR SUBSIDY LIMIT FOR PTC -- EXCLUDE IF UNSUBSIDIZED

                           IF (UPSUBCAS(IECP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                            IF (UPSUBFCF(IECP) .GT. 0) THEN     !PTC shared out and PTC value is on the subsidy step vector 
                              VALUE = VALUE ! + PV$SOM
                            ELSE
                              VALUE = VALUE  + PV$SOM
                            ENDIF
                           END IF
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                           if (STEPS.eq.1)  &
                              WRITE(18,3299)CURIRUN,CURIYR+UHBSYR,YEAR,IRG,IECP,PVCAP,TRANS,VALUE,(TAXDEPR(1,JYR),JYR=1,5)
 3299                      FORMAT(1x,"EPCNBLD2-N",5(":",I4),3(":",F8.2),5(":",F7.4),2(":",i5),2(":",F15.3))

                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,52')

                           WRITE(18,3213) CURIYR+UHBSYR,YEAR,IRG,IECP,IP,COLUMN,VALUE,PVCAP,PVTRN,PVFOM,FLCST,PVVOM,PV$SOM
 3213                      FORMAT(1X,"NUC_BCST",5(":",I4),":",A8,7(":",F15.6))
                           OBJVAL = PVCAP
!
                           T_CRF = CRF(DSCRT,IFPH2)
                           T_PWF = PWF(DSCRT,OLYR)
                           IF (YEAR .EQ. 1) THEN
                              IF (UPBLDTYP(IRG) .EQ. 1) THEN
                                 WRITE(18,36) CURIYR+UHBSYR,OLYR+CURIYR+UHBSYR-1,IRG,UPBLDTYP(IRG),IECP,IP,UPLNTCD(IECP),COLUMN, &
                                    OVRCST,BVBOOK,CAPUTIL,CAPUNSTL*CAPUTIL,UTROR,EPDSCRT,UPRSK(IECP),        &
                                    EPFOM(IECP),EPEXT(IECP,MNPOLLUT+1),EPCOVR(IP),EPCCRF(IP),EPCFOM(IP),    &
                                    TRANS,OBJVAL,PVFOM,PVEXT,PV$SOM,VALUE,UPGNPD(YEAR),UPGNPD(OLYR+CURIYR-1),    &
                                    UPGNPD(1999-UHBSYR),OLYR,IFPH2,T_CRF,T_PWF,UTROE,UTINT,DEBT_F,PVGPS,0.0
                              ELSE
                                 WRITE(18,36) CURIYR+UHBSYR,OLYR+CURIYR+UHBSYR-1,IRG,UPBLDTYP(IRG),IECP,IP,UPLNTCD(IECP),COLUMN, &
                                    OVRCST,BVBOOK,CAPNUG,CAPNNSTL*CAPNUG,ROR,EPDSCRT,UPRSK(IECP),        &
                                    EPFOM(IECP),EPEXT(IECP,MNPOLLUT+1),EPCOVR(IP),EPCCRF(IP),EPCFOM(IP),    &
                                    TRANS,OBJVAL,PVFOM,PVEXT,PV$SOM,VALUE,UPGNPD(YEAR),UPGNPD(OLYR+CURIYR-1),    &
                                    UPGNPD(1999-UHBSYR),OLYR,IFPH2,T_CRF,T_PWF,EWGROE,INTR,DEBT_F,PVGPS,0.0
                              END IF
   36                         FORMAT(1x,"BUILD_IN",6(":",I4),":",A2,":",A8,21(":",E10.3),2(":",I2),7(":",F21.3))
                           END IF
!
!                          COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR--NUGS
!
                           IF (YEAR .EQ. 1 .AND. STEPS .EQ. 1)THEN
                              CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
                              EPLVFOM(IECP) = PVFOML / PVGNP
                              EPLVVOM(IECP) = PVVOML / PVGNP
                              EPLVFLC(IECP) = FLCSTL / PVGNP
                              EPLVTRN(IECP) = PVTRN / PVGNP
                              EPLVBCK(IECP) = 1.0
                           END IF
!
!                          LOOP OVER REMAINING YEARS IN THE EXPLICIT PLANNING HORIZON
!
                           DO JYR = OLYR , UNXPH
!
!                             IF CREATING MATRIX AND FIRST ECP YEAR THEN CREATE COEFFICIFOR UTILITY BUILD COLUMNS THAT ARE NOT REVISED.
!
!                             BUILD LIMIT ROW
!
                              IF (JYR .EQ. OLYR) THEN
                                 IF (UPOVBDSW .GT. 0 .AND. UPOVBDSW .LE. 2)THEN
                                    ROW = 'R'//UPRGCD(IRG)//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(IRG),':YYYYY:',UPYRCD(JYR))
                                 ELSE
                                    ROW = 'R'//'U'//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',':U:',':YYYYY:',UPYRCD(JYR))
                                 END IF
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,53')
                              END IF
!
!                             TOTAL CAPACITY ROW BY REGION AND PLANT TYPE
!
                              ROW = 'F'//UPRGCD(IRG)//UPLNTCD(IECP)//'CAP'//UPYRCD(JYR); call makmsk(ROW_mask,':F:',UPRGCD(IRG),UPLNTCD(IECP),':CAP:',UPYRCD(JYR))
                              VALUE = DBLE(1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,54')
!
!                             CAPACITY SUPPLY CURVE
!
                              IF (ESTSWTCH(IP) .GT. 0)THEN
                                 ROW = 'LU'//UPLNTCD(IECP)//'DS'//STEP//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),'DS',STEP,UPYRCD(YEAR)) ! DispatchType coded as element DS
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,55')
                              END IF
!
!                             RESERVE MARGIN ROW
!
                              ROW = 'R'//UPRGCD(IRG)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(IRG),':XXXXX:',UPYRCD(JYR))
                              VALUE = DBLE(1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,56')
!
!                             TOTAL BUILDS FREE ROW
!
                              IF (JYR .EQ. OLYR) THEN
                                 ROW = 'TOTBLD'//UPRGCD(IRG)//UPYRCD(JYR); call makmsk(ROW_mask,':TOTBLD:',UPRGCD(IRG),UPYRCD(JYR))
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,57')
                              END IF
!
!                             PUT INTO CAPACITY PORTFOLIO REQUIREMENT ROW, IF INCLUDED
!
                              IF (UPCAPCAS .GT. 0 .AND. JYR .EQ. OLYR) THEN
                                 ROW = 'GCPSXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':GCPSXXX:',UPYRCD(JYR))
                                 VALUE = PVCPS
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,58')
                              END IF
!
!                             PUT INTO NATIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY
!
                              IF (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,MNUMNR) .LT. 999.0)THEN
                                 ROW = 'LU'//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':BLDX:')
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,59')
                              END IF
!
!                             PUT INTO REGIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY
!
                              IF (UPBLDREG(IECP,IRG) .GT. 0.0 .AND. UPBLDREG(IECP,IRG) .LT. 999.0)THEN
                                 ROW = 'L'//UPRGCD(IRG)//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':L:',UPRGCD(IRG),UPLNTCD(IECP),':BLDX:')
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,60')
                              END IF
!
!                             PUT INTO CONSTRAINT TO LIMIT SUBSIDIZED CAPACITY ADDITIONS, IF ANY
!
                              IF (UPSUBCAS(IECP) .GT. 0 .AND. LOOPS .EQ. 2 .AND. JYR .EQ. OLYR) THEN
                                IF (LIMSUB(SUBECP) .GT. 0.0 .AND. UPSUBLIM(SUBECP) .LT. 999.0) THEN
                                 ROW = 'LU'//UPLNTCD(SUBECP)//'SUBX'; call makmsk(ROW_mask,':LU:',UPLNTCD(SUBECP),':SUBX:')   ! all nuclear types in the same subsidy constraint
                                 IF (YEAR .EQ. 1) THEN
                                 VALUE = DBLE(1.0)
                                 ELSE
                                    IF (NUC_PTC(1) .GT. 0.0) THEN
!                                      VALUE = NUC_PTC(YEAR) / NUC_PTC(1)
                                       VALUE = 1.0
                                    ELSE
                                       VALUE = 1.0
                                    END IF
                                 END IF
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,61')
                                ENDIF
                              END IF

!                             LIMIT OUT YEAR SUBSIDIZED BUILDS TO WHAT CAN GET BUILT BEFORE THE CUT OFF YEAR

                              IF (UPSUBCAS(IECP) .EQ. 1 .AND. UPSUBFCF(IECP) .GT. 0 .AND. LOOPS .EQ. 2 .AND. JYR .EQ. OLYR .AND. YEAR .GT. 1) THEN
                                 ROW = 'LU'//UPLNTCD(IECP)//'STP'//STEP; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':STP:',STEP)
                                 VALUE = 1.0
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,62')
                              END IF
!
!
!                             Contribute to Load Requirements
!
!                             INITIALIZE SEASONAL PEAKS AND HOURS PER SEASON
!
                              DO ISP = 1 , EPNMSP
                                 NSTP(ISP) = 0
                                 DO VLS = 1 , EPNSTP(JYR)
                                    VLSMAP(VLS,ISP) = 0
                                 END DO
                              END DO
!
!                             DETERMINE CAPACITY FACTOR AT EACH LOAD STEP
!
                              DO ISP = 1 , EPNMSP
                                 VLS = EPFRST(ISP,JYR)
                                 JVLS = 0
                                 DO WHILE (VLS .GT. 0)
                                    JVLS = JVLS + 1
                                    VLSMAP(JVLS,ISP) = VLS
                                    VLS = EPNEXT(VLS,JYR)
                                 END DO
                                 NSTP(ISP) = JVLS
                              END DO
!
!                             INITIALIZE HOURS PER SEASON
!
                              DO ISP = 1 , EPNMSP
                                 SHOURS(ISP) = DBLE(0.0)
                              END DO
!
                              DO IVLS = 1 , EPNSTP(JYR)
                                 ISP = EPGECP(EPLDGR(IVLS,JYR))
                                 SHOURS(ISP) = SHOURS(ISP) + EPWDTH(IVLS,JYR) * 0.001
                              END DO
                              DO ISP = 1 , EPNMSP
                                 DO JVLS = 1 , NSTP(ISP)
                                    VLS = VLSMAP(JVLS,ISP)
                                    DERATE = 0.0
!
!                                   For now do all planned maitenance in offpeak season
!
                                    NUC_AVL = (1.0 - UPFORT(IECP)) * (1.0 - UPPMRT(IECP))
                                    PMR = 1.0 - SQRT(UPMCF(IECP) / NUC_AVL) * (1.0 - UPPMRT(IECP))
                                    FOR = 1.0 - SQRT(UPMCF(IECP) / NUC_AVL) * (1.0 - UPFORT(IECP))
                                    IF (ISP .EQ. 3) THEN
                                       DERATE = (1.0 - FOR) * (1.0 - (PMR * 8.760 / SHOURS(ISP)))
                                    ELSE
                                       DERATE = (1.0 - FOR)
                                    END IF
                                    JGRP = EPLDGR(VLS,JYR)
                                    ISEG = EPLDSG(VLS,JYR)
                                    ROW = 'L'//UPRGCD(IRG)//'EL'//UPLDCD(ISP)//UPRGCD(JGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(IRG),':EL:',UPLDCD(ISP),UPRGCD(JGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                    VALUE = DERATE
!                                   IF (YEAR .EQ. 1 .AND. LOOPS .EQ. 1 .AND. STEPS .EQ. 1 .AND. JYR .EQ. OLYR)THEN
                                    IF (LOOPS .EQ. 1 .AND. STEPS .EQ. 1 .AND. JYR .EQ. OLYR)THEN
                                       PLTDER(IRG,IECP,VLS,JYR) = DERATE
!                      write(6,3333) curiyr+1989,irg,uplntcd(iecp),  &
!                       isp,jvls,vls,derate,pltder(irg,iecp,vls),epwdth(vls,year),pmr,shours(isp)
!3333 format(1h ,'!derate',i4,i3,a3,i3,i3,i3,5f10.4)
                                    END IF
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    VALUE = MAX( 0.0 , MIN( 1.0 , VALUE))
                                    IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,63')


                                    IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                       ROW_SR = 'R'//UPRGCD(IRG)//'SR'//UPLDCD(ISP)//UPRGCD(JGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_SR_mask,':R:',UPRGCD(IRG),':SR:',UPLDCD(ISP),UPRGCD(JGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                       VALUE = SR_CREDIT(IECP) * (1.0 - DERATE)
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       VALUE = MAX( 0.0 , MIN( 1.0 , VALUE))
                                       IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW_SR,VALUE,COLUMN_mask,ROW_SR_mask,'EP$NUC,66')
                                    END IF

                                 END DO
                              END DO
!
!                             include in renewable generation bound row 'portfolio standard'
!
                              IF (UPRNWSHRR(IECP,IRG) .GT. 0.00) THEN
                                 ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(JYR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(JYR))
                                 VALUE = DBLE(UPRNWSHRR(IECP,IRG))
                                 VALUE = VALUE * UPMCF(IECP) * 8.760
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,67')
                              END IF
!                             If National RPS and Regional and National Contributions Differ
                              IF (UPRNWBND(CURIYR + JYR - 1) .GT. 0.005 .AND. UPRNWSHR(IECP) .GT. 0.0) THEN
                                 ROW = 'GURNWX'//UPRGCD(IRG)//UPYRCD(JYR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(IRG),UPYRCD(JYR))
                                 VALUE = DBLE(UPRNWSHR(IECP))
                                 VALUE = VALUE * UPMCF(IECP) * 8.760
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,68')
                              END IF
!
!                             Accumulate Generation
!
                              ROW = 'F'//UPRGCD(IRG)//UPLNTCD(IECP)//'GEN'//UPYRCD(JYR); call makmsk(ROW_mask,':F:',UPRGCD(IRG),UPLNTCD(IECP),':GEN:',UPYRCD(JYR))
                              VALUE = UPMCF(IECP) * 8.760
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$NUC,69')
!
!                             CO2 OUTPUT STANDARD
!
                              IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,JYR) .GT. 0.0 .AND. (CO2_PLTSW(IECP) .GT. 0.0 .OR. CO2_INCSW(IECP) .GT. 0.0))THEN
!                                INCLUDE IN ERC SUPPLY CURVE ROW, IF APPROPRIATE
                                 IF (CO2_ERCSW .EQ. 1 .AND. CO2_ERCNR(IRG) .EQ. 2 .AND. CO2_INCSW(IECP) .GT. 0.0 .AND. CO2_STDTN(IRG) .LT. 2)THEN
                                    ROW_ERC = 'L'//URGNME(IRG)(6:7)//'ERCN'//UPYRCD(JYR); call makmsk(ROW_ERC_mask,':L:',URGNME(IRG)(6:7),':ERCN:',UPYRCD(JYR))
                                    CALL CVAL(COLUMN,ROW_ERC,-DBLE(UPMCF(IECP)*8.760),COLUMN_mask,ROW_ERC_mask,'EP$NUC,72')
                                 ELSE
                                    CO2_LBMWH = DBLE(0.0)
                                    VAL_STD_CO2 = UPMCF(IECP) * 8.760 * (CO2_LBMWH - CO2_NRYR(IRG,JYR))
                                    IF (CO2_PLTSW(IECP) .GT. 0.0)THEN
                                       VAL_STD_CO2 = VAL_STD_CO2 * DBLE(CO2_PLTSW(IECP)) * 0.001
                                    END IF   
                                    IF (CO2_INCSW(IECP) .GT. 0.0)THEN
                                       VAL_STD_CO2 = VAL_STD_CO2 * DBLE(CO2_INCSW(IECP)) * 0.001
                                    END IF   
                                    ROW = 'ERCO2'//URGNME(IRG)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':ERCO2:',URGNME(IRG)(6:7),UPYRCD(JYR),':!NERC:')
                                    CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$NUC,73')
                                 END IF
                              END IF
!
!                             GRID RESILIENCE ROW, IF APPROPRIATE
!
                              IF (GRD_RATS(IECP,IRG) .GE. 0.0)THEN
                                 ROW = 'GRGRD'//URGNME(IRG)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':GRGRD:',URGNME(IRG)(6:7),UPYRCD(JYR))
                                 VAL_STD_GRD = UPMCF(IECP) * 8.760 * (GRD_RATS(IECP,IRG) - GRD_NRYR(IRG,JYR))
!                                VAL_STD_GRD = VAL_STD_GRD * 0.001
                                 CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$NUC,74')
                              END IF
                           END DO  ! JYR
                        END IF
                     END DO  ! STEPS
                  END DO  ! LOOPS
                  IF (YEAR .EQ. 1)CALL STRBOUT(CURIYR,IRG)
               END IF  ! OLYR < UNXPH
            END DO ! YEAR
         END DO ! IP
      END DO ! IRG
!
      RETURN
      END

!     EP$MRM REVISES RHS OF RESERVE MARGIN CONSTRAINTS
!
      SUBROUTINE EP$MRM(NERC,YEAR)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'dispett'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'dsmtfecp'
      include 'eusprc'
      include 'efpint'
      include 'macout'
      include 'dispuse'
      include 'wrenew'
      include 'uecpout'
      include 'uettout'
      include 'uefdout'
!
      REAL*8 VALUE
      REAL*8 DIGITS2
      REAL*8 T_VAL
      REAL*8 PKADJ
      INTEGER*4 YEAR,NERC
      INTEGER*4 ISP,IP
      INTEGER*4 IGRP,IYR
      INTEGEr*4 JSP,ISEG,VLS
      CHARACTER*16 ROW,ROW1,COLUMN
      CHARACTER*16 ROW_SR, COLUMN_MIN_SR
      CHARACTER*16 ROW_NSR

      REAL*8 SP_RES_RQMT(ECP_D_VLS,ECP_D_XPH), MAX_HGHT(ECP_D_MSP), ADJ_HGHT(ECP_D_MSP)

      ecpsub='EP$MRM'

      CALL CROWTYPE(UPOBJ,'N       ',UPOBJ)      

!     REVISE RHS FOR RESERVE MARGIN ROW

      ROW1 = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW1_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
!
      IGRP = EPLDGR(1,YEAR)                      ! IGRP is the ECP Group which contains the Peak Slice (i.e. 1)
      ISP = MAP_ECP_SP(IGRP)                     ! ISP is the ECP Season which contains the Peak Slice

      T_VAL = UEITAJ_ECP(ISP,NERC) + UTRELADJ(NERC,MIN(UNYEAR,CURIYR+YEAR-1))

!     STORE TRADE AND COGEN ADJUSTMENTS TO USE FOR FUTURE CYCLES -- USE CURRENT FIRST TIME OUT

      IF (UCAPADJ(NERC,MIN(UNYEAR,CURIYR + YEAR - 1)) .EQ. 0.0 .OR. YEAR .EQ. 1)THEN
         PKADJ = T_VAL - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76
      ELSE
         PKADJ = T_VAL + UCAPADJ(NERC,MIN(UNYEAR,CURIYR + YEAR - 1))
      END IF
      IF (YEAR .EQ. 1) UCAPADJ(NERC,CURIYR) = - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76

      IF (YEAR .GT. UPPLYR(WICT)) THEN
         VALUE = EPPEAK(YEAR) * DBLE( EPMRM) + EP_NET_PEAK(YEAR) + PKADJ
         IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
         CALL CROWTYPE(ROW1,'G       ',ROW1_mask)         
      ELSE
         VALUE = DBLE(0.0)
         CALL CROWTYPE(ROW1,'N       ',ROW1_mask)      
      END IF

      WRITE(18,2013) CURIRUN, CURIYR+UHBSYR, CURIYR+YEAR+UHBSYR-1, NERC, IGRP, ISP, UPRHS, ROW1, VALUE, T_VAL, BTCOGEN(NERC)/8.76, BMEXICAN(NERC)/8.76, &
         UCAPADJ(NERC,MIN(UNYEAR,CURIYR+YEAR-1)), EPPEAK(YEAR), EP_NET_PEAK(YEAR), EPMRM, PKADJ, UEITAJ_ECP(ISP,NERC), UEITAJ_EFD(1,NERC), UTRELADJ(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
 2013 FORMAT(1X,"EP_MRM",6(",",I4),2(",",A8),13(",",F12.3))

      CALL CRHS(UPRHS,ROW1,VALUE,ROW1_mask,'EP$MRM,1')
!
!     IF reserve margin is used in this way, need both pieces to recover reserve margin
!
      IYR = CURIYR + YEAR - 1
      if (EPKSHFT(NERC,IYR) .gt. 0.0) then
         EPKMRGN(NERC,YEAR) = EPKSHFT(NERC,IYR)
      else
         EPKMRGN(NERC,YEAR) = EP_NET_PEAK(YEAR)
      endif
!     ETRMRGN(NERC,YEAR) = T_VAL - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76
      ETRMRGN(NERC,YEAR) = PKADJ
!
!     For competitive run
!

      IP = 1
  
!     IF CREATING MATRIX AND FIRST ECP YEAR DECLARE ROW TYPE
!     AND CREATE ROW/COLUMN INTERSECTIONS FOR RESERVE MARGIN
!     ROW ESCAPE VALVE COLUMN
!

      COLUMN = 'RDBLDX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':RDBLDX:',UPRGCD(NERC),UPYRCD(YEAR))
      CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(100),COLUMN_mask,'EP$MRM,2')
!
!     RESERVE MARGIN ROW
!
      VALUE = DBLE(1.0)
      CALL CVAL(COLUMN,ROW1,VALUE,COLUMN_mask,ROW1_mask,'EP$MRM,3')
!
!     OBJECTIVE FUNCTION
!
      ROW = UPOBJ ; ROW_mask=UPOBJ
      VALUE = DBLE(1500.0) * UPGNPD(CURIYR + YEAR -1)
      CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$MRM,4')

!
!     IF LIMITS ON FRACTION OF PEAK ALLOWED FOR P2 CAPACITY, CREATE ROW AND RHS
!
      IF (UPP2LIM(CURIYR + YEAR - 1,NERC) .LT. 1.00)THEN
         ROW1 = 'L'//UPRGCD(NERC)//'P2XXX'//UPYRCD(YEAR); call makmsk(ROW1_mask,':L:',UPRGCD(NERC),':P2XXX:',UPYRCD(YEAR))
         CALL CROWTYPE(ROW1,'L       ',ROW1_mask)
         VALUE = EPPEAK(YEAR) + PKADJ
         VALUE = VALUE * UPP2LIM(CURIYR + YEAR - 1,NERC)
         IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
         CALL CRHS(UPRHS,ROW1,VALUE,ROW1_mask,'EP$MRM,5')
!     SET ESCAPE VECTOR
         COLUMN = 'X'//UPRGCD(NERC)//'P2XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':X:',UPRGCD(NERC),':P2XXX:',UPYRCD(YEAR))
         VALUE = DBLE(-1.0)
         CALL CVAL(COLUMN,ROW1,VALUE,COLUMN_mask,ROW1_mask,'EP$MRM,6')
         ROW = UPOBJ ; ROW_mask=UPOBJ
         VALUE = DBLE(2000.0)
         CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$MRM,7')
      END IF

      DO JSP = 1 , EPNMSP
         MAX_HGHT(JSP) = 0.0
         ADJ_HGHT(JSP) = UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)) + UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)) + UEITAJ_ECP(JSP,NERC)
      END DO

      DO IGRP = 1 , EPNGRP

         JSP = EPGECP(IGRP)

         DO ISEG = 1 , EPNSPG(IGRP)
            VLS = EPLMAP(IGRP,ISEG,YEAR)
!           JSP = EPGECP(IGRP)
            MAX_HGHT(JSP) = MAX(MAX_HGHT(JSP) , EPHGHT(VLS,YEAR) + ADJ_HGHT(JSP))
         END DO
         END DO

      DO IGRP = 1 , EPNGRP
         DO ISEG = 1 , EPNSPG(IGRP)
            VLS = EPLMAP(IGRP,ISEG,YEAR)
            JSP = EPGECP(IGRP)

!           CALCULATE SPINNING RESERVE REQUIREMENT

            SP_RES_RQMT(VLS,YEAR) = SR_RQMT_HGHT(NERC) * (EPHGHT(VLS,YEAR) + ADJ_HGHT(JSP)) + SR_RQMT_DIFF(NERC) * (MAX_HGHT(JSP) - (EPHGHT(VLS,YEAR) + ADJ_HGHT(JSP)))

!           REVISE RHS OF SPINNING RESERVE REQUIREMENT ROW

            ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
            VALUE = DBLE(0.0)
            CALL CROWTYPE(ROW_SR,'G       ',ROW_SR_mask)      
            CALL CRHS(UPRHS,ROW_SR,VALUE,ROW_SR_mask,'EP$MRM,8')

!           CREATE NON-BINDING ROW TO COLLECT AMOUNT OF TOTAL OPERATING RESERVES ; OPERATING RESERVES = SPINNING RESERVES + NON-SPINNING RESERVES

            ROW_NSR = 'N'//UPRGCD(NERC)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_NSR_mask,':N:',UPRGCD(NERC),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
            VALUE = DBLE(0.0)
            CALL CROWTYPE(ROW_NSR,'N       ',ROW_NSR_mask)      
            CALL CRHS(UPRHS,ROW_NSR,VALUE,ROW_NSR_mask,'EP$MRM,9')

            COLUMN_MIN_SR = 'C'//UPRGCD(NERC)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_mask,':C:',UPRGCD(NERC),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

            VALUE = SP_RES_RQMT(VLS,YEAR)
            CALL CBND(UPBND,COLUMN_MIN_SR,VALUE,DBLE(30000.0),COLUMN_MIN_SR_mask,'EP$MRM,10')

            VALUE = DBLE(-1.0)
            CALL CVAL(COLUMN_MIN_SR,ROW_SR,VALUE,COLUMN_MIN_SR_mask,ROW_SR_mask,'EP$MRM,11')

            VALUE = DBLE(1.0)
            CALL CVAL(COLUMN_MIN_SR,ROW_NSR,VALUE,COLUMN_MIN_SR_mask,ROW_NSR_mask,'EP$MRM,12')

            ROW = UPOBJ ; ROW_mask=UPOBJ
            VALUE = DBLE(-0.001)
            CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$MRM,13')

         END DO
      END DO

      RETURN
      END

!     EP$RET LIMIT RETIREMENTS IF MAXIMUM RATE

      SUBROUTINE EP$RET(NERC)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'

      REAL*8 VALUE
      INTEGER*4 NERC,IP
      CHARACTER*16 ROW,COL

      ecpsub='EP$RET'

!
      IF (USW_ERET .EQ. 1 .AND. UPRETRAT .GT. 0.0) THEN
!
!        IF CREATING MATRIX AND FIRST ECP YEAR DECLARE ROW TYPE
!
         ROW = 'R'//UPRGCD(NERC)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(NERC),':MXRET0:')
!
         CALL CROWTYPE(ROW,'G       ',ROW_mask)
!
!        ESCAPE VECTOR
!
         COL = 'E'//UPRGCD(NERC)//'MXRET0'; call makmsk(COL_mask,':E:',UPRGCD(NERC),':MXRET0:')
         CALL CVAL(COL,ROW,DBLE(1.0),COL_mask,ROW_mask,'EP$RET,1')
         VALUE = DBLE(2000.0)
         CALL CVAL(COL,UPOBJ,VALUE,COL_mask,UPOBJ,'EP$RET,2')
!
!        REVISE RHS FOR RETIREMENT LIMIT ROWS
!
            VALUE = 0.0
         DO IP = 1 , WIPC - 1
!         Exclude Existing Coal if Retrofit/Retirement Decision Forced
          IF ((USW_BACT .LE. 0 .OR. (UHBSYR + CURIYR + UPRTLT) .LT. UBACT_YR) .AND.  &
              (UHBSYR + CURIYR + UPRTLT) .NE. UDSI_YR .AND.  &
              (UHBSYR + CURIYR + UPRTLT) .NE. UYR_ACE(1)) THEN
            VALUE = VALUE + DBLE(EPECAP(0,UCPDSPI(IP),UPRTLT + 1) * 0.001)
          END IF
         END DO
         DO IP = WIPC , ECP_D_DSP
            VALUE = VALUE + DBLE(EPECAP(0,UCPDSPI(IP),UPRTLT + 1) * 0.001)
         END DO
         DO IP = 1 , ECP_D_INT
            VALUE = VALUE + DBLE(EPECAP(0,UCPINTI(IP),UPRTLT + 1) * 0.001)
         END DO
         DO IP = 1 , ECP_D_STO
            IF (UCPSTOI(IP) .GT. 0) THEN
               VALUE = VALUE + DBLE(EPECAP(0,UCPSTOI(IP),UPRTLT + 1) * 0.001)
            END IF
         END DO
         DO IP = 1 , ECP_D_RNW
            IF (UCPRNWI(IP) .GT. 0) THEN
               VALUE = VALUE + DBLE(EPECAP(0,UCPRNWI(IP),UPRTLT + 1) * 0.001)
            END IF
         END DO
!         IF ((USW_BACT .LE. 0 .OR. (UHBSYR + CURIYR + UPRTLT) .LT. UBACT_YR) .AND.  &
!             (UHBSYR + CURIYR + UPRTLT) .NE. UDSI_YR) THEN
             VALUE = VALUE * DBLE(1.0 - UPRETRAT)
!         ELSE
!            VALUE = VALUE * DBLE(MIN(0.75,(1.0 - UPRETRAT)))
!         END IF
         VALUE = MAX ( VALUE , DBLE(0.0) )
!        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
         CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$RET,3')
      END IF
!
      RETURN
      END

!     EP$BLD LIMIT BUILDS OF DISPATACHABLE AND RENEWABLE CAPACITY
!     ALSO, CREATE FREE ROW TO ACCUMULATE TOTAL BUILDS
!
      SUBROUTINE EP$BLD(NERC)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'dispett'
      include 'eusprc'
      include 'efpint'
      include 'dispuse'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'dsmtfecp'
      include 'wrenew'
      include 'uettout'
      include 'uefdout'

      COMMON/BUILDS/ ECPADDS(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*8 ECPADDS

      REAL*8 PKMAX,CPMAX,OVPCT,VALUE,VALUE1,TOTCAP2,RESCAP
      REAL*8 TBLDUS(ECP_D_XPH)
      REAL*8 DIGITS2
      REAL*8 T_VAL
      INTEGER*4 IGRP
      INTEGER*4 YEAR,NERC,IP,IYR
      INTEGER*4 OVBSYR,NOVYRS,IS
      CHARACTER*16 ROW
      CHARACTER*1 STEP(ECP_D_DGS)

      ecpsub='EP$BLD'

!
!     ASSIGN CHARACTER FOR DISTRIBUTED GENERATION STEPS
!
      DO IS = 1 , ECP_D_DGS
        STEP(IS) = UPRGCD(IS)
      END DO
!
!     LOOP OVER YEARS IN THE PLANNING HORIZON
!
      DO YEAR = 1 , UNXPH
!
!        REVISE RHS FOR BUILD LIMIT ROWS
!
!        GET INTERREGIONAL TRANSFER VALUES FOR CURRENT YEAR
!
         IYR = CURIYR + YEAR - 1
         CALL GETEIJ(IYR)
!
!      IN SELECTED CARBON SCENARIOS, DETERMINE ALLOWABLE OVERBUILDS
!
      IF(UPOVBDSY.GT.0)THEN
       IF((1989+CURIYR+UNXPH-2).GE.UPOVBDSY)THEN
         OVBSYR = 3
        IF(YEAR.EQ.OVBSYR)THEN
            NOVYRS = UNXPH - YEAR - 1
            TOTCAP2 = 0.0
         DO IP = 1 , ECP_D_DSP
            TOTCAP2 = TOTCAP2 + DBLE(EPECAP(0,UCPDSPI(IP),YEAR) * 0.001)
         END DO
         DO IP = 1 , ECP_D_STO
            IF (UCPSTOI(IP) .GT. 0) THEN
               TOTCAP2 = TOTCAP2 + DBLE(EPECAP(0,UCPSTOI(IP),YEAR) * 0.001)
            END IF
         END DO
         DO IP = 1 , ECP_D_RNW
            IF (UCPRNWI(IP) .GT. 0) THEN
               TOTCAP2 = TOTCAP2 + DBLE(EPECAP(0,UCPRNWI(IP),YEAR) * 0.001)
            END IF
         END DO
         IS = MAP_ECP_SP(IGRP)
         RESCAP = EPPEAK(YEAR) * DBLE( EPMRM) + EP_NET_PEAK(YEAR) + &
            UEITAJ_ECP(IS,NERC) + UTRELADJ(NERC,MIN(UNYEAR,CURIYR+YEAR-1)) - BTCOGEN(NERC) / 8.76 +  &
            BMEXICAN(NERC) / 8.76
         UPOVRBLD(IYR) = (TOTCAP2 - RESCAP) / EP_NET_PEAK(YEAR)
         UPOVRBLD(IYR) = MAX(0.0,UPOVRBLD(IYR))
        END IF
        IF(YEAR.GT.OVBSYR)THEN
          UPOVRBLD(IYR) = UPOVRBLD(IYR - 1) + UPOVBDRT / FLOAT(NOVYRS)
          WRITE(18,*) 'UPOVR',NERC,CURCALYR,1989+IYR,TOTCAP2,RESCAP,EPPEAK(YEAR),UPOVRBLD(IYR)
        END IF
       END IF
      END IF
!
      IF (UPOVBDSW .GT. 0 .AND. UPOVBDSW .LE. 2)THEN
         ROW = 'R'//UPRGCD(NERC)//'YYYYY'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':YYYYY:',UPYRCD(YEAR))
      ELSE
         ROW = 'R'//'U'//'YYYYY'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',':U:',':YYYYY:',UPYRCD(YEAR))
      END IF

!     BUILD LIMIT AS A FRACTION OF PEAK DEMAND

      IGRP = EPLDGR(1,YEAR)                      ! IGRP is the ECP Group which contains the Peak Slice (i.e. 1)
      IS = MAP_ECP_SP(IGRP)

      T_VAL = UEITAJ_ECP(IS,NERC) + UTRELADJ(NERC,MIN(UNYEAR,CURIYR+YEAR-1))

      write(18,9317) CURIYR+UHBSYR,YEAR,NERC,IGRP,IS,T_VAL
 9317 format(1x,"EPGETT",5(":",I4),":",F6.3)

      IF(UPOVBDSW .LE. 0)THEN
         CALL CROWTYPE(ROW,'N       ',ROW_mask)
      ELSE
      IF(UPOVBDSW .EQ. 1)THEN
         VALUE = EP_NET_PEAK(YEAR) * DBLE(1.0 + UPOVRBLD(IYR) + EPMRM) + T_VAL - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76
         DO IP = 1 , ECP_D_DSP
            VALUE = VALUE - DBLE(EPECAP(0,UCPDSPI(IP),YEAR) * 0.001)
         END DO
         DO IP = 1 , ECP_D_STO
            IF (UCPSTOI(IP) .GT. 0) THEN
               VALUE = VALUE - DBLE(EPECAP(0,UCPSTOI(IP),YEAR) * 0.001)
            END IF
         END DO
         DO IP = 1 , ECP_D_RNW
            IF (UCPRNWI(IP) .GT. 0) THEN
               VALUE = VALUE - DBLE(EPECAP(0,UCPRNWI(IP),YEAR) * 0.001)
            END IF
         END DO
         VALUE = MAX ( VALUE , DBLE(0.0) )
      END IF                  ! UPOVBDSW = 1

!  UPOVBDSW = 1 IS REGIONAL CAPACITY BOUND AND = 2 IS NATIONAL CAPACITY BOUND
        IF(UPOVBDSW .EQ. 2 .OR. UPOVBDSW .EQ.3)THEN
!  SUM UP EXISTING CAPACITY IN YEAR 1
!         DO IP = 1 , ECP_D_DSP
!            EXCAP = EXCAP + DBLE(EPECAP(0,UCPDSPI(IP),YEAR) * 0.001)
!         END DO
!         DO IP = 1 , ECP_D_RNW
!            EXCAP = EXCAP + DBLE(EPECAP(0,UCPRNWI(IP),YEAR) * 0.001)
!         END DO
!  ONLY INCLUDE PORTION OF INTERMITTENTS THAT COUNTS TOWARD RESERVE MARGIN
!         DO IP = 1 , ECP_D_INT
!            EXCAP = EXCAP + DBLE(EPECAP(0,UCPINTI(IP),YEAR) * 0.001)
!         END DO
         IF (NERC .EQ. 1)THEN
            TBLDUS(YEAR) = DBLE(0.0)
         END IF
         IF(YEAR .EQ. 1)THEN
            VALUE = DBLE(0.0)
            PKMAX = EPPEAK(YEAR)
!            EXCAP = DBLE(0.0)
         ELSE
!  ACCUMULATE GROWTH IN PEAK DEMAND (AND MINIMUM CAPACITY) OVER HORIZON
            PKMAX = MAX(PKMAX,EPPEAK(YEAR-1))
            CPMAX = PKMAX * DBLE(1.0 + EPMRM + UPOVRBLD(IYR-1))
!  LIMIT OVERBUILDS TO MAXIMUM OF OVERBUILD PCT OF GROWTH IN PEAK
!  DETERMINE ADDITIONS AS PCT OVERBUILDS ABOVE MIN CAPACITY REQUIREMENT
            OVPCT = MAX(EPPEAK(YEAR)/EPPEAK(YEAR - 1) - 1.0, &
                        DBLE(UPOVRBLD(IYR)))
!  NET OUT PREVIOUS CAPACITY DECISIONS
            VALUE = CPMAX * OVPCT - &
                    ECPADDS(NERC,CURIYR + YEAR - 1)
            VALUE = MAX(VALUE,DBLE(0.0))
            TBLDUS(YEAR) = TBLDUS(YEAR) + VALUE
         END IF
        END IF                  ! UPOVBDSW = 2
        IF (UPOVBDSW .LE. 2)THEN
         IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
         WRITE(18,*) 'RG,YR,BLIMIT ',NERC,YEAR,VALUE,ROW
         CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$BLD,1')
        ELSE
         IF (NERC .EQ. UNRGNS)THEN
          IF (USW_DIGIT .GT. 0)THEN
          VALUE = DIGITS2( TBLDUS(YEAR), DIGITS_PARM)
          ELSE
             VALUE = TBLDUS(YEAR)
          END IF
          WRITE(18,*) 'RG,YR,BLIMIT ',MNUMNR,YEAR,VALUE,ROW
          CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$BLD,2')
         END IF
        END IF
!
!        DECLARE ROW TYPE AND CREATE SAFETY VALVE COLUMN COEFFICIENTS
!
         CALL CROWTYPE(ROW,'L       ',ROW_mask)
      END IF
!
!        COLUMN = 'R'//UPRGCD(NERC)//'YCOLY'//UPYRCD(YEAR)
!        CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(100.),'EP$BLD,3')
!
!        RESERVE MARGIN ROW
!
!        VALUE = DBLE( - 1.0)
!        CALL CVAL(COLUMN,ROW,VALUE,'EP$BLD,4')
!
!        OBJECTIVE FUNCTION
!
!        ROW = UPOBJ ; ROW_mask=UPOBJ
!        VALUE = DBLE(10000.0) * UPGNPD(CURIYR + YEAR -1)
!        CALL CVAL(COLUMN,ROW,VALUE,'EP$BLD,5')
!
!        CREATE FREE ROW TO TOTAL BUILDS BY REGION AND ONLINE YEAR
!
         ROW = 'TOTBLD'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':TOTBLD:',UPRGCD(NERC),UPYRCD(YEAR))
         CALL CROWTYPE(ROW,'N       ',ROW_mask)
!
!        CREATE ROW TO LIMIT DISTRIBUTED GENERATION BUILDS BY REGION AND ONLINE YEAR
!
         DO IS = 1 , ECP_D_DGS
            ROW = 'L'//UPRGCD(NERC)//'DGXX'//STEP(IS)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':DGXX:',STEP(IS),UPYRCD(YEAR))
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
         END DO
!
!        LIMIT DISTRIBUTED GENERATION BUILDS TO NEW DEMAND GROWTH
!
         IF (YEAR .EQ. 1)THEN
             VALUE = DBLE(0.0)
         ELSE
             VALUE = (EPPEAK(YEAR) - EPPEAK(YEAR - 1))
             VALUE = MAX(VALUE,DBLE(0.0))
         END IF
           DO IS = 1 , ECP_D_DGS
             ROW = 'L'//UPRGCD(NERC)//'DGXX'//STEP(IS)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':DGXX:',STEP(IS),UPYRCD(YEAR))
             VALUE1 = VALUE * DBLE(EPDPCT(IS))
             CALL CRHS(UPRHS,ROW,VALUE1,ROW_mask,'EP$BLD,6')
           END DO

      END DO
!
      RETURN
      END
!
!
!     EP$PCL REVISES RHS OF PURCHASED CAPACITY LIMIT CONSTRAINTS
!
      SUBROUTINE EP$PCL(NERC)
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'eusprc'
      include 'edbdef'
!
      INTEGER NUMTABS
      PARAMETER (NUMTABS = 1)        ! total number of database tables
      INTEGER*4 YEAR,NERC
      REAL*8 VALUE,B,D,COEFCR,TCRT
      REAL*8 DIGITS2
      CHARACTER*16 ROW
      CHARACTER*2 COL

      ecpsub='EP$PCL'

!
      LOOPING = 0
      NUMCOLS = 0
      DYNSTM = ' '
      WRTSTM = ' '
      COLVALS = 0.0
      COLV = 0.0
      CHCOLVALS = ' '
      CHCOLV = ' '
!
      COL = ' :'

!     REVISE RHS FOR PURCHASED CAPACITY LIMIT

!     FIRST YEAR OF PLANNING HORIZON

      ROW = 'P'//UPRGCD(NERC) //'XXXXX' //UPYRCD(1); call makmsk(ROW_mask,':P:',UPRGCD(NERC) ,':XXXXX:' ,UPYRCD(1))

      B = DBLE( EPUROR * EPUFPE) / ( 1.0 - UPTXRT)    ! EQUITY COMPONENT
      D = DBLE( EPUFDT * EPUIRT )                       ! DEBT COMPONENT

      TCRT = DBLE(UPTCRT)
      VALUE = 0.001 * EPRTBS * COEFCR(B,D,TCRT)
      IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
      WRITE(18,*) 'COVERAGE RATIO,YR,ROR,FPE,FDT,IRT,TCRT,RTBS,VAL ', &
       ROW,CURIYR,EPUROR,EPUFPE,EPUFDT,EPUIRT,UPTCRT,EPRTBS,VALUE
      VALUE = MAX ( DBLE(0.0) , VALUE)
      CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$PCL,1')
!                                                                        !//EMMDB//
!       WRITE OUT PURCHASED CAPACITY TABLE FOR EMM DATABASE              !//EMMDB//
!                                                                        !//EMMDB//
       IF (USW_DBS .GT. 0) THEN
        WRITE(UF_DBS,3000) COL,CURIYR,COL,NERC,COL,EPUROR,COL,EPUFDT,     & !//EMMDB//
                  COL,EPUIRT,COL,UPTCRT,COL,EPRTBS,COL,VALUE,COL,TRIM(SCEN_DATE)   !//EMMDB//
3000    FORMAT(1X,'ECPURCH',A2,I4,A2,I4,4(A2,F10.4),2(A2,F10.3),A2,A)   !//EMMDB//
       END IF
!
!        Load database table for ecp purchased capacity constraint
!
        TNUM = 1
        IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
          IF (LOOPING(TNUM) .EQ. 0) THEN
            NUMCOLS(TNUM) = 8
            DYNSTM(TNUM) =  'INSERT INTO ECP_PURCHASED_CAPACITY VALUES(?,?,?,?,?,?,?,?,?)'
            WRTSTM(TNUM) =  'ECP_PURCHASED_CAPACITY'
          ENDIF
          LOOPING(TNUM) = LOOPING(TNUM) + 1
          COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                  !//EMMDB//
          COLV(TNUM,2,LOOPING(TNUM)) = NERC                                    !//EMMDB//
          COLV(TNUM,3,LOOPING(TNUM)) = EPUROR                                  !//EMMDB//
          COLV(TNUM,4,LOOPING(TNUM)) = EPUFDT                          !//EMMDB//
          COLV(TNUM,5,LOOPING(TNUM)) = EPUIRT                          !//EMMDB//
          COLV(TNUM,6,LOOPING(TNUM)) = UPTCRT                          !//EMMDB//
          COLV(TNUM,7,LOOPING(TNUM)) = EPRTBS                          !//EMMDB//
          COLV(TNUM,8,LOOPING(TNUM)) = VALUE                         !//EMMDB//
          IF (LOOPING(TNUM) .NE. 0) THEN
            COLVALS(:,:) = COLV(TNUM,:,:)
!           CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
            CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
            LOOPING(TNUM) = 0
      ENDIF
        END IF
!
!     IF CREATING MATRIX AND FIRST ECP YEAR DECLARE ROW TYPE
!
      IF (UPTCRT .GT. DBLE(1.0)) THEN
         CALL CROWTYPE(ROW,'L       ',ROW_mask)
      ELSE
         CALL CROWTYPE(ROW,'N       ',ROW_mask)
      END IF
!
!     SECOND THROUGH LAST YEAR OF PLANNING HORIZON
!
      DO 100 YEAR = 2 , UNXPH
         ROW = 'P'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':P:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
         VALUE = 0.001 * VALUE * DBLE(1.0 - 0.03)
         IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
         CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$PCL,2')
!
!        IF CREATING MATRIX AND FIRST ECP YEAR DECLARE ROW TYPE
!
         IF (UPTCRT .GT. DBLE(1.0)) THEN
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
         ELSE
            CALL CROWTYPE(ROW,'N       ',ROW_mask)
         END IF
!
  100 CONTINUE
      RETURN
      END
!
!
      FUNCTION CRCONST(UPTCRT,EPUFPE,EPUROR,EPUFDT,EPUIRT,EPUTXRT,TL,EL,URATIO,PYR)

      IMPLICIT NONE
!
!     CRCONST CALCULATES A SCALOR THAT REPRESENTS THE EXCESS
!     EARNINGS AVAILABLE TO UTILITY TO SUPPORT ITS FIXED COMMITMENTS
!     TO PURCHASED POWER CONTRACTS PER DOLLAR INVESTED IN RATE BASE
!
      include 'parametr'
      include 'taxdat'
      REAL*8 CRCONST
      REAL*8 UPTCRT               ! POLICY VARIABLE RE TARGET COV. RATIO
      REAL*8 EPUFPE                            ! (CE*CF+PE*PF)/ROR RATIO
      REAL*8 EPUROR                  ! UTILITY SIMPLE AVERAGE COC IE ROR
      REAL*8 EPUFDT                              ! UTILITY DEBT FRACTION
      REAL*8 EPUIRT                              ! UTILITY INTEREST RATE
      REAL*8 EPUTXRT                               ! NET INCOME TAX RATE
      REAL*8 URATIO                   ! RATIO OF TAX BASIS TO BOOK BASIS
      INTEGER TL                                              ! TAX LIFE
      INTEGER EL                        ! ECONOMIC LIFE (FINANCIAL LIFE)
      INTEGER PYR                  ! YEAR IN PLANNING PERIOD (IE 1 TO 7)
      INTEGER I
!
      REAL*8 CUMDEPR                            ! ACCUMULATED FIN. DEPR.
      REAL*8 OUTRB,B,D
!
      REAL*8 COEFCR,SUMVEC                                   ! FUNCTIONS
!
!
!
      B = (EPUROR * EPUFPE)/(1 - EPUTXRT)             ! EQUITY COMPONENT
      D = EPUFDT * EPUIRT                               ! DEBT COMPONENT
!
!     SELECT CORRECT TAX TABLE
!
      IF (TL .EQ. 5) I = 1
      IF (TL .EQ. 7) I = 2
      IF (TL .EQ. 10) I = 3
      IF (TL .EQ. 15) I = 4
      IF (TL .EQ. 20) I = 5
!
      IF (PYR .EQ. 1) THEN
         OUTRB = 1.0
      ELSE
         CUMDEPR=REAL(PYR-1)/REAL(EL)
         OUTRB = 1 - CUMDEPR - (SUMVEC(TAXDEPR(1,I),21,PYR - 1) - &
           CUMDEPR) &
           * URATIO * EPUTXRT
      ENDIF
      CRCONST = DBLE( - 1.0) * COEFCR(B,D,UPTCRT) * OUTRB       ! RESULT
!
!     WRITE(*,1)B,D,UPTCRT,OUTRB,CUMDEPR,CRCONST,COEFCR(B,D,UPTCRT),
!     +   PYR
!1     FORMAT(7F15.5,I10)
!
      END
!
!
!
!     COEFCR CALCULATES THE EXCESS DOLLARS AVAILABLE
!     TO 'COVER' PURCHASED POWER PAYMENTS AS THOUGH THEY
!     WERE DEBT PAYMENTS
!
      FUNCTION COEFCR(B,D,RT)
      REAL*8 COEFCR,B,D,RT
!
      IF (RT .GT. DBLE(1.0)) THEN
         COEFCR = (B + D * (1 - RT))/(RT - 1)
         COEFCR = MAX ( COEFCR , 0.0001 )
      ELSE
         COEFCR = DBLE(0.0)
      END IF
      END
!
!
!     SUMVEC CALCULATES SUM OF TAX DEPRECIATION
!
      FUNCTION SUMVEC(D,N,YRS)
      IMPLICIT NONE
      INTEGER N,YRS,I
      REAL*8 SUMVEC,D(N)
!
      SUMVEC = 0.0
      DO 100 I = 1,YRS
         SUMVEC = SUMVEC + D(I)
100   CONTINUE
      END
!
!
!
!     TRUNC SETS NUMBER OF DECIMAL PLACES FOR REAL*8 NUMBERS.
!
      FUNCTION TRUNC(VALUE,DEC)
      IMPLICIT NONE
      REAL*8 TRUNC,FACTOR,VALUE
      INTEGER*4 IVALUE,DEC
!
      FACTOR = DBLE(10.0) ** DEC
!
      TRUNC = DBLE( ANINT( VALUE * FACTOR )) / FACTOR
!
      END
!
!
!     DIGITS2 SETS SIGNIFICANT DIGITS OF REAL*8 NUMBER
!
      FUNCTION DIGITS2(VALUE,SGNDGT)
      IMPLICIT NONE
!
      REAL*8 DIGITS2,VALUE,FACTOR
      INTEGER*4 SGNDGT
      INTEGER*4 DEC
      INTEGER*4 IPOWER
!
!  test to omit these conversions: remove lines with !!! 
!  this is normally called with sgndgt=5 from ecp, =6 from efd:
!!!     if (sgndgt .lt. 7) then
!!!       digits2=value
!!!     else
    
      FACTOR = DBLE(0.0)
      IF (VALUE .EQ. FACTOR) THEN
         DIGITS2 = VALUE
      ELSE
         IF (ABS(VALUE) .GT. 1) THEN
            IPOWER = LOG10( ABS( VALUE ))
            DEC = MAX( 0 , SGNDGT - IPOWER - 1 )
         ELSE
            DEC = SGNDGT
         END IF
         FACTOR = DBLE(10) ** DEC
         DIGITS2 = DBLE( ANINT( VALUE * FACTOR )) / FACTOR
      END IF
!
!!!    end if
      END
!
!
!     EP$LOAD REVISES RHS OF VERTICAL LOAD REQUIREMENT ROWS
!
      SUBROUTINE EP$LOAD(NERC,YEAR)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'dispett'
      include 'dispuse'
      include 'uefdout'
      include 'wrenew'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'uettout'
!
      REAL*8 VALUE,TST
      REAL*8 DIGITS2
      REAL*8 T_VAL
      INTEGER*4 YEAR,NERC,VLS,IGRP,ISEG,JSP
      INTEGER ICHK
      CHARACTER*16 ROW, COLUMN
      ecpsub='EP$LOAD'


      ICHK = 0
      TST = 0.0
!
      DO IGRP = 1 , EPNGRP

         JSP = MAP_ECP_SP(IGRP)

!        T_VAL = UEITAJ_ECP(JSP,NERC) + UTRELADJ(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
         T_VAL = UEITAJ_ECP(JSP,NERC)

         DO ISEG = 1 , EPNSPG(IGRP)
            VLS = EPLMAP(IGRP,ISEG,YEAR)
            JSP = EPGECP(IGRP)
!
!           REVISE RHS OF VERTICAL LOAD REQUIREMENT ROWS
!
            ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
!
            VALUE = EPHGHT(VLS,YEAR) + UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)) + UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
            IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
            CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$LOAD,1')
!
!           IF CREATING MATRIX AND FIRST ECP YEAR DECLARE ROW TYPE SET UP SAFETY VALVE COLUMN FOR LOAD REQUIREMENTS ROW
!
            CALL CROWTYPE(ROW,'G       ',ROW_mask)
!
!           REVISE NET EXPORTS VECTOR'S CONTRIBUTION TO LOAD
!
            COLUMN = 'X'//UPRGCD(NERC)//'EXPRT'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':X:',UPRGCD(NERC),':EXPRT:',UPYRCD(YEAR))
!
            VALUE = DBLE(0.0) - T_VAL +  BTCOGEN(NERC) / 8.76 - BMEXICAN(NERC) / 8.76
!           VALUE = MAX(DBLE(0.0) , DBLE(0.0) - T_VAL +  BTCOGEN(NERC) / 8.76 - BMEXICAN(NERC) / 8.76)
!           VALUE = DBLE(0.0) +  BTCOGEN(NERC) / 8.76 - BMEXICAN(NERC) / 8.76
            IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
            IF (VALUE .LE. -ECP_MIN .OR. VALUE .GE. ECP_MIN) THEN
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$LOAD,2')
               TST = TST + VALUE
               ICHK = ICHK + 1
            END IF

!
!           LOAD REQUIREMENTS ROW Safety Valve
!
            COLUMN = 'LDBLD'//UPRGCD(NERC)//UPLDCD(VLS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':LDBLD:',UPRGCD(NERC),UPLDCD(VLS),UPYRCD(YEAR))
            VALUE = DBLE(1.0)
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$LOAD,5')
!
            ROW = UPOBJ ; ROW_mask=UPOBJ
            IF (YEAR .LT. UNXPH) THEN
               VALUE = DBLE(100.0) * UPGNPD(CURIYR + YEAR -1)
            ELSE
               VALUE = DBLE(1000.0) * UPGNPD(CURIYR + YEAR -1)
            END IF
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$LOAD,6')
         END DO
      END DO
!
!     FIX EXPORT VECTOR TO 1.0 (IE. 100%)
!
      IF (ICHK .GT. 0) THEN
         COLUMN = 'X'//UPRGCD(NERC)//'EXPRT'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':X:',UPRGCD(NERC),':EXPRT:',UPYRCD(YEAR))
         VALUE = DBLE(1.0)
         IF (USW_DIGIT .GT. 0)VALUE = DIGITS2(VALUE,5)
         CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$LOAD,7')
      END IF
!
      RETURN
      END
!
!
!     EP$RPS SETS UP RENEWABLE PORTFOLIO CONSTRAINTS
!
      SUBROUTINE EP$RPS(NERC,YEAR)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'dispett'
      include 'postpr'
      include 'dispin'
      include 'ecpcntl'
      include 'udatout'
      include 'uefdout'
      include 'uecpout'
      include 'bildin'
      include 'cogen'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'emission'
      include 'cdsparms'
      include 'csapr'
      include 'emmemis'
!
      REAL*8 VALUE,VALUEU,GEN,CRDPRN(ECP_D_FPH),SV_VALUE, VALUE_PRC, VALUE_CAP
      REAL*8 DEM,GRW
      REAL*8 ONE(ECP_D_FPH),RPSR(ECP_D_FPH),RPSN(ECP_D_FPH),RPSRL,RPSRN,RPSRL_US
      REAL*8 DYR(ECP_D_FPH),PVDEM
      REAL*8 COG(ECP_D_FPH)
      REAL*8 BNK(ECP_D_FPH)
      REAL*8 PWF,PVV,PVONE,PVGNP,TST_VAL1,TST_VAL2,TST_VAL3
      REAL*8 DIGITS2
      REAL*8 CES_PRICE_INITIAL, CES_PRICE_FINAL, CES_PRICE_TARGET, CES_MIN_STEP
      INTEGER*4 YEAR,NERC,REG,VLS,IY,JYR,KYR,PLT,MAXLT,IP,TST_YR,XYR
      INTEGER*4 MAX_BNK_YR, MIN_BNK_YR, MAX_BNK_YEAR, MIN_BNK_YEAR, TST_BANK
      REAL*8 CRDPRC(MNUMYR + ECP_D_FPH)
      REAL*8 RPSNAT(ECP_D_XPH),RPSREG(MNUMNR,ECP_D_XPH)
!     REAL*4 CHPN(MNUMNR,MNUMYR)
      CHARACTER*16 ROW,ROWU,ROWR,COLUMN,ROWX
      CHARACTER*16 COLUMN_USE_BNK, COLUMN_CREATE_BNK

      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN, XRG, RPS_RGN_X

      ecpsub='EP$RPS'

      IF ((CURIYR + UHBSYR) .EQ. UPSTYR .AND. NERC .EQ. 1 .AND. YEAR .EQ. 1) THEN

         MAX_BNK_YR = 0
         MAX_BNK_YEAR = 0
         MIN_BNK_YR = 0
         MIN_BNK_YEAR = 0
         SV_VALUE = ECP_MIN

         DO RPS_RGN = 1 , MNUMNR
            MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
         END DO
         
      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN
         MAP_NERC_TO_RPS_RGN(8) = 9                  
      END IF

         RPS_RGN = MAP_NERC_TO_RPS_RGN(NERC)

!        DETERMINE MAXIMUM LEADTIME FOR RENEWABLE PLANTS

         MAXLT = 0
         DO IP = 1 , ECP_D_RNW
            IF (UCPRNWI(IP) .GT. 0) THEN
               IF (UPCLYR(UCPRNWI(IP)) .GT. MAXLT) MAXLT = UPPLYR(UCPRNWI(IP))
            END IF
         END DO
         DO IP = 1 , ECP_D_INT
            IF (UPCLYR(UCPINTI(IP)) .GT. MAXLT) MAXLT = UPPLYR(UCPINTI(IP))

!           USE WIND LEAD TIME TO CALCULATE RENEWABLE CREDIT PRICE

            IF (UPLNTCD(UCPINTI(IP)) .EQ. 'WN'  .or.  &
                UPLNTCD(UCPINTI(IP)) .EQ. 'WF') MAXLT = UPPLYR(UCPINTI(IP))
         END DO

         FIRST_RPS_YR = 0
         FIRST_RPS_YEAR = 0
         DO KYR = UNYEAR , UPSTYR-UHBSYR, -1
            IF (UPRNWBND(KYR) .GT. 0.001) THEN
               FIRST_RPS_YEAR = KYR + UHBSYR
               FIRST_RPS_YR = KYR
            END IF
         END DO

!        APPLY ANNUAL GROWTH RATE TO CREDIT PRICE CAP, IF APPROPRIATE

         DO KYR = 1 , MNUMYR + ECP_D_FPH
            RPSCAPYR(KYR) = 0.0
            IF (UPRNWCAP .GT. 0.0)THEN
               IF (KYR .GE. FIRST_RPS_YR)THEN
                  RPSCAPYR(KYR) = UPRNWCAP * (1.0 + UPRNWCGR) ** FLOAT(KYR - FIRST_RPS_YR)
               END IF
            END IF
         END DO

         IF (UPRNWCAS .GT. 0 .AND. UPRNWBNK .GT. 0)THEN

            DO XYR = 1 , UNXPH
               DO KYR = 2 , FIRST_RPS_YR - XYR
                  CES_DUALS(KYR,XYR) = 0.0
                  IF (XYR .EQ. 1) THEN
                     UCRBKNR(MNUMNR,KYR) = 0.0
                     EPRPSBK(KYR) = 0.0
                  END IF
               END DO    
            END DO    

            TST_YR = UNYEAR

            CES_PRICE_INITIAL = CES_DUALS(FIRST_RPS_YR-MAXLT,MAXLT+1) * ((1.0 + AVGDCR) ** (MAXLT+1)) / UPGNPD(FIRST_RPS_YR)
            CES_PRICE_FINAL = CES_DUALS(TST_YR-MAXLT,MAXLT+1) * ((1.0 + AVGDCR) ** (MAXLT+1)) / UPGNPD(TST_YR)
            CES_PRICE_FINAL = CES_PRICE_FINAL * ((1.0 + CES_DCR) ** (FIRST_RPS_YR - TST_YR))
            CES_MIN_STEP = CES_SMOOTH_TGT

            IF (UCRBKNR(MNUMNR,TST_YR) .GT. 0.0) THEN
               IF (CES_DUALS(1,2) .GE. CES_DUALS(1,1) .AND. CES_DUALS(1,2) .GT. 0.0) THEN
                  IF ((CES_DUALS(1,2) - CES_DUALS(1,1)) * 0.5 .GE. CES_MIN_STEP) THEN
                     CES_PRICE_TARGET = 0.5 * (CES_DUALS(1,1) + CES_DUALS(1,2))
                     CES_DUALS(1,3) = CES_DUALS(1,2)
                     CES_DUALS(1,2) = CES_PRICE_TARGET
                  ELSE
                     CES_PRICE_TARGET = MAX(CES_DUALS(1,2) - CES_MIN_STEP , 0.0)
                     CES_DUALS(1,3) = CES_DUALS(1,2)
                     CES_DUALS(1,2) = CES_PRICE_TARGET
                     CES_DUALS(1,1) = CES_PRICE_TARGET
                  END IF
               ELSE
                  IF (CES_DUALS(1,2) .GT. 0.0) THEN
                     CES_PRICE_TARGET = 0.5 * CES_DUALS(1,2)
                     CES_DUALS(1,3) = CES_DUALS(1,2)
                     CES_DUALS(1,2) = CES_PRICE_TARGET
                  ELSE
                     CES_PRICE_TARGET = 2.0
                     CES_DUALS(1,3) = 0.0
                     CES_DUALS(1,2) = CES_PRICE_TARGET
                  END IF
               END IF
            ELSE IF (UCRBKNR(MNUMNR,TST_YR) .LT. 0.0) THEN
               IF (CES_DUALS(1,2) .LE. CES_DUALS(1,3) .AND. CES_DUALS(1,3) .GT. 0.0) THEN
                  IF ((CES_DUALS(1,3) - CES_DUALS(1,2)) * 0.5 .GE. CES_MIN_STEP) THEN
                     CES_PRICE_TARGET = 0.5 * (CES_DUALS(1,2) + CES_DUALS(1,3))
                     CES_DUALS(1,1) = CES_DUALS(1,2)
                     CES_DUALS(1,2) = CES_PRICE_TARGET
                  ELSE
                     CES_PRICE_TARGET = CES_DUALS(1,2) + CES_MIN_STEP
                     CES_DUALS(1,1) = CES_DUALS(1,2)
                     CES_DUALS(1,2) = CES_PRICE_TARGET
                     CES_DUALS(1,3) = CES_PRICE_TARGET
                  END IF
               ELSE
                  IF (CES_DUALS(1,2) .GT. 0.0) THEN
                     CES_PRICE_TARGET = 2.0 * CES_DUALS(1,2)
                     CES_DUALS(1,1) = CES_DUALS(1,2)
                     CES_DUALS(1,2) = CES_PRICE_TARGET
                  ELSE
                     CES_PRICE_TARGET = 2.0
                     CES_DUALS(1,3) = 0.0
                     CES_DUALS(1,2) = CES_PRICE_TARGET
                  END IF
               END IF
            ELSE
               IF (CES_DUALS(1,2) .EQ. 0.0) THEN
                  CES_PRICE_TARGET = 2.0
                  CES_DUALS(1,1) = 0.0
                  CES_DUALS(1,2) = CES_PRICE_TARGET
                  CES_DUALS(1,3) = 0.0
               ELSE
                  CES_PRICE_TARGET = CES_DUALS(1,2)
               END IF
            END IF

            WRITE(6,3479) CURIRUN, CURCALYR, MAXLT, FIRST_RPS_YR, FIRST_RPS_YEAR, UNYEAR, TST_YR, UCRBKNR(MNUMNR,TST_YR), &
               CES_DUALS(1,1), CES_PRICE_TARGET, CES_DUALS(1,3), CES_SMOOTH_TGT, &
               CES_DUALS(FIRST_RPS_YR-MAXLT,MAXLT+1), CES_DUALS(UNYEAR-MAXLT,MAXLT+1), &
               AVGDCR, CES_DCR, UPGNPD(FIRST_RPS_YR), UPGNPD(UNYEAR), CES_MIN_STEP
 3479       FORMAT(1X,"FIRST_RPS_YEAR",7(":",I4),12(":",F15.6))

         ELSE
            CES_DUALS = 0.0
            UCRBKNR = 0.0
            EPRPSBK = 0.0
         END IF
      END IF

      IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
         EPRPSBK = 0.0
         DO IY = 1 , MNUMYR + ECP_D_FPH
            IF (IY .LE. UNYEAR)THEN
               CRDPRC(IY) = EPRPSPR(IY) * UPGNPD(IY)
            ELSE
!              CRDPRC(IY) = EPRPSPR(UNYEAR) * UPGNPD(IY)
               CRDPRC(IY) = CRDPRC(UNYEAR) * (1.0 + AVGDCR) ** FLOAT(IY - UNYEAR)
            END IF
         END DO
      END IF
!
      ROWU = 'GURNWXX'//UPYRCD(YEAR); call makmsk(ROWU_mask,':GURNWXX:',UPYRCD(YEAR))

      RPS_RGN = MAP_NERC_TO_RPS_RGN(NERC)

      ROWR = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROWR_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(YEAR))
!
!     DECLARE ROW TYPE & SET UP RHS & SAFETY VALVE COLUMN FOR NATIONAL RPS ROW
!
      IF (NERC .EQ. 1) THEN
!
         IF (UPRNWCAS .GT. 0)THEN
            VALUE = DBLE(0.0)
            CALL CRHS(UPRHS,ROWU,VALUE,ROWU_mask,'EP$RPS,1')
!
!           DECLARE ROW TYPE
!
            CALL CROWTYPE(ROWU,'G       ',ROWU_mask)

            IF (UPRNWBNK .LE. 0) THEN

!              CREATE SAFETY VALVE IN CASE RENEWABLES CANNOT BE BUILT BY A GIVEN YEAR
 
               COLUMN = 'RNWGENU'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':RNWGENU:',UPYRCD(YEAR))
               VALUE = DBLE(1.0)
               CALL CVAL(COLUMN,ROWU,VALUE,COLUMN_mask,ROWU_mask,'EP$RPS,2')
 
!              OBJECTIVE FUNCTION (GIVE HIGH COEFFICIENT SO ONLY ACTIVATED TO PREVENT INFEASIBILITIES
 
               ROW = UPOBJ ; ROW_mask=UPOBJ
               VALUE = DBLE(2000.0) * UPGNPD(CURIYR + YEAR - 1)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,3')
            END IF
         ELSE
            CALL CROWTYPE(ROWU,'N       ',ROWU_mask)
         END IF
!
!        SET UP ROWS TO ACCUMULATE REGIONAL CONTRIBUTIONS TOWARDS NATIONAL COMPLIANCE
!
         DO REG = 1 , UNRGNS
            ROW = 'GURNWX'//UPRGCD(REG)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(REG),UPYRCD(YEAR))
            IF (UPRNWCAS .GT. 0)THEN
               VALUE = DBLE(0.0)
               CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$RPS,4')
!
!              DECLARE ROW TYPE
!
               CALL CROWTYPE(ROW,'G       ',ROW_mask)
!
!              CREATE COLUMN TO ACCUMULATE REGIONAL QUALIFYING GENERATION
!
               COLUMN = 'GURNXX'//UPRGCD(REG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':GURNXX:',UPRGCD(REG),UPYRCD(YEAR))
               VALUE = DBLE(-1.0)
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,5')
               VALUE = DBLE(1.0)
               CALL CVAL(COLUMN,ROWU,VALUE,COLUMN_mask,ROWU_mask,'EP$RPS,6')
!
!      SUBTRACT OUT DG PV IF INCLUDED TO AVOID DOUBLE-COUNTING
!
               IF (DPVDISPATCH .EQ. .TRUE. .AND. UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWSHR(WIPV) .GT. 0.0) THEN
                  COLUMN = 'GUDGPV'//UPRGCD(REG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':GUDGPV:',UPRGCD(REG),UPYRCD(YEAR))
                  VALUE = DBLE(-1.0)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,7')
                  IF (YEAR .LT. UNXPH) THEN
                     VALUE = DBLE(DPVTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR)) * 0.001)
                  ELSE
                     DO JYR = UNXPH , UNFPH
                        KYR = JYR - UNXPH + 1
                        RPSR(KYR) = DBLE(DPVTOTGENNR(REG,MIN(CURIYR + JYR - 1,MNUMYR)) * 0.001)
                        ONE(KYR) = DBLE(1.0)
                     END DO
                     RPSRL = PVV(RPSR,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
                     PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
                     VALUE = RPSRL / PVONE
                  END IF

!     write(6,3210) curiyr+1989,curiyr+1989+year-1,column,value,DPVTOTGENNR(REG,MIN(CURIYR + YEAR - 1,MNUMYR))
!3210 format(1h ,'!dgpv1',i4,i5,a10,5f10.3)

                  CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RPS,8')
               END IF
            ELSE
               CALL CROWTYPE(ROW,'N       ',ROW_mask)
            END IF
         END DO
      END IF
!
!     DECLARE ROW TYPE & SET UP RHS & SAFETY VALVE COLUMN FOR REGIONAL RPS ROW
!
       IF (UPRNWCASR(RPS_RGN) .GT. 0 .OR. UPRNWCAS .GT. 0)THEN
         VALUE = DBLE(0.0)
         CALL CRHS(UPRHS,ROWR,VALUE,ROWR_mask,'EP$RPS,9')

!        DECLARE ROW TYPE

         CALL CROWTYPE(ROWR,'G       ',ROWR_mask)

!      CREATE SAFETY VALVE IN CASE RENEWABLES CANNOT BE BUILT BY A GIVEN YEAR

         COLUMN = 'RNWGEN'//UPRGCD(RPS_RGN)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':RNWGEN:',UPRGCD(RPS_RGN),UPYRCD(YEAR))
         VALUE = DBLE(1.0)
         CALL CVAL(COLUMN,ROWR,VALUE,COLUMN_mask,ROWR_mask,'EP$RPS,10')

!        OBJECTIVE FUNCTION (GIVE HIGH COEFFICIENT SO ONLY ACTIVATED TO PREVENT INFEASIBILITIES

         ROW = UPOBJ ; ROW_mask=UPOBJ
         VALUE = DBLE(2000.0) * UPGNPD(CURIYR + YEAR - 1)
         CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,11')

!        Allow transfer of RNW RPS Credit between Regions that have interreggional Transmission Links - If import region has RPS requirement

         IF (UPRNWCASR(RPS_RGN) .GT. 0) THEN
            DO XRG = 1 , UNRGNS
               RPS_RGN_X = MAP_NERC_TO_RPS_RGN(XRG)
               IF (RPS_RGN .NE. RPS_RGN_X .AND. UPXRGN(XRG,NERC) .EQ. 1) THEN
                  COLUMN = 'G'//UPRGCD(RPS_RGN_X)//UPRGCD(RPS_RGN)//'TRPS'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(RPS_RGN_X),UPRGCD(RPS_RGN),':TRPS:',UPYRCD(YEAR))
                    
!                 OBJECTIVE FUNCTION A NUISANCE COST

                  ROW = UPOBJ ; ROW_mask=UPOBJ
                  VALUE = ECP_MIN
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,12')

!                 Give RPS Credits to Import Region

                  VALUE = 1.0 - LINELOSS
                  CALL CVAL(COLUMN,ROWR,VALUE,COLUMN_mask,ROWR_mask,'EP$RPS,13')

!                 TAKE RPS Credits from Export Region

                  ROWX = 'G'//UPRGCD(RPS_RGN_X)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROWX_mask,':G:',UPRGCD(RPS_RGN_X),':RNWXX:',UPYRCD(YEAR))  ! ,':!exp:')

                  VALUE = -1.0
                  CALL CVAL(COLUMN,ROWX,VALUE,COLUMN_mask,ROWX_mask,'EP$RPS,14')

!                 Require Equavilent Flow of Electricity after losses from Export Region

                  ROWX = 'E'//UPRGCD(RPS_RGN_X)//UPRGCD(RPS_RGN)//'TRPS'//UPYRCD(YEAR); call makmsk(ROWX_mask,':E:',UPRGCD(RPS_RGN_X),UPRGCD(RPS_RGN),':TRPS:',UPYRCD(YEAR))

                  VALUE = DBLE(0.0)
                  CALL CRHS(UPRHS,ROWX,VALUE,ROWX_mask,'EP$RPS,15')

!                 DECLARE ROW TYPE

                  CALL CROWTYPE(ROWX,'L       ',ROWX_mask)

                  VALUE = 1.0 / (1.0 - LINELOSS)
                  CALL CVAL(COLUMN,ROWX,VALUE,COLUMN_mask,ROWX_mask,'EP$RPS,16')

               END IF
            END DO
         END IF
       ELSE
         CALL CROWTYPE(ROWR,'G       ',ROWR_mask)
       END IF

!     CREATE VECTORS TO REPRESENT TOTAL GENERATION (PRODUCT OF HEIGHT AND
!     WIDTH FOR LOAD SEGMENTS).  COEFFICIENTS OF PLANT TYPES INCLUDED IN
!     REQUIREMENT (I.E., RENEWABLES) AND EXCLUDED (I.E., HYDRO) FROM TOTAL
!     GENERATION REQUIREMENT ARE GENERATED IN SUBROUTINES THAT CREATE
!     OPERATE VECTORS

      COLUMN = 'G'//UPRGCD(NERC)//'EL'//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(NERC),':EL:',':XXX:',UPYRCD(YEAR))

!     BOUND VECTOR USING TOTAL GENERATION (OR SALES IN DOE CASE)

      VALUE = 0.0
      DO VLS = 1 , EPNSTP(YEAR)
         VALUE = VALUE + EPHGHT(VLS,YEAR) * EPWDTH(VLS,YEAR) / 1000.0
      END DO
      GEN = VALUE
      IF (YEAR .EQ. 1)GRW = MAX(1.0,(QELASN(NERC,UNYEAR) / QELASN(NERC,UNYEAR - 20)) ** (1.0 / 20.0))
      IF (ISNAN(GRW)) THEN
          GRW = 1.0
          Do VLS = 1,UNYear
            QELASN(NERC,VLS)=QELASN(NERC,CURIYR) 
          Enddo
           Write(6,*)'problem with historical data for qelasn GRW',CURIYR,YEAR,UNYEAR,NERC,QELASN(NERC,UNYEAR)
      ENDIF
      IF (YEAR .LT. UNXPH)THEN
         IF ((CURIYR + YEAR - 1) .LE. UNYEAR)THEN
           DEM = QELASN(NERC,CURIYR + YEAR - 1) * 0.001
         ELSE
           DEM = QELASN(NERC,UNYEAR) * 0.001 * GRW ** FLOAT((CURIYR + YEAR - 1) - UNYEAR)
         END IF
      ELSE
         DO JYR = UNXPH , UNFPH
            KYR = JYR - UNXPH + 1
            IF ((CURIYR + JYR - 1) .LE. UNYEAR)THEN
               DYR(KYR) = QELASN(NERC,CURIYR + JYR - 1) * 0.001
            ELSE
               DYR(KYR) = QELASN(NERC,UNYEAR) * 0.001 * GRW ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
            END IF
            ONE(KYR) = DBLE(1.0)
         END DO
            PVDEM = PVV(DYR,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            DEM = PVDEM / PVONE

!     write(6,4455) curiyr+1989,column,pvdem,pvone,dem,gen
!4455 format(1h ,'!qel',i4,1x,a8,4f10.4)

      END IF

      ITOTGEN(NERC,YEAR) = GEN

      CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RPS,17')

!     IMPOSE NATIONAL BOUND ON GENERATION

!     IF (YEAR .LT. UNXPH .OR. (UHBSYR + CURIYR + YEAR -1) .LE. (ECP_FYR + UPCLYR(WIWN))) THEN

      IF (YEAR .LT. UNXPH) THEN
         VALUE = DBLE(-UPRNWBND(MIN(CURIYR + YEAR - 1,MNUMYR)))
      ELSE

!        DETERMINE LEVELIZED RPS REQUIREMENT FOR LAST YEAR

         IF (NERC .EQ. 1)THEN
            DO JYR = UNXPH , UNFPH
               KYR = JYR - UNXPH + 1

!              RPSR(KYR) = UPRNWBND(MIN(CURIYR + JYR - 1,2020 - UHBSYR))

               RPSR(KYR) = UPRNWBND(MIN(CURIYR + JYR - 1,MNUMYR))
               RPSN(KYR) = UPRNWBND(MIN(CURIYR + JYR - 1,MNUMYR)) * UPGNPD(CURIYR + JYR - 1)
               ONE(KYR) = DBLE(1.0)
            END DO
            RPSRL = PVV(RPSR,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            RPSRL_US = RPSRL / PVONE
            RPSRN = PVV(RPSN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            CALL EP$LGNP(UNXPH,UNFPH - UNXPH + 1,AVGDCR,PVGNP)
            RPSRN = RPSRN / PVGNP
         END IF
         VALUE = DBLE(-RPSRL_US)
      END IF
      RPSNAT(YEAR) = -VALUE
      IF (UPRNWCAS.EQ.3) THEN
         CALL GETIN(1,NERC)

!        WRITE(6,3979) CURIRUN, CURCALYR, CURITR, NERC, EEITAJ(1), EEITAJ(2), EEITAJ(3)
!3979    FORMAT(1X,"UECP_10232_EEITAJ_GET",4(":",I4),3(":",F12.3))

         IY = MIN(CURIYR + YEAR - 1,UNYEAR)

!        VALUE = VALUE / DBLE(1.0 + EQTDLS * ULOSSADJ(IY))

         VALUE = VALUE * DEM / GEN
      END IF
      IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
      IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN

      IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROWU,VALUE,COLUMN_mask,ROWU_mask,'EP$RPS,18')

!     IMPOSE REGIONAL BOUND ON GENERATION, IF ANY

      COLUMN = 'G'//UPRGCD(NERC)//'RNXXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(NERC),':RNXXX:',UPYRCD(YEAR))
      IF (UPRNWCASR(NERC) .GT. 0)THEN

!      IF (YEAR .LT. UNXPH .OR. (UHBSYR + CURIYR + YEAR -1) .LE. (ECP_FYR + UPCLYR(WIWD))) THEN

       IF (YEAR .LT. UNXPH) THEN
         VALUE = DBLE(UPRNWBNDR(MIN(CURIYR + YEAR - 1,MNUMYR),NERC))
       ELSE

!        DETERMINE LEVELIZED RPS REQUIREMENT FOR LAST YEAR

            DO JYR = UNXPH , UNFPH
               KYR = JYR - UNXPH + 1
               RPSR(KYR) = UPRNWBNDR(MIN(CURIYR + JYR - 1,2020 - UHBSYR),NERC)
               RPSR(KYR) = UPRNWBNDR(MIN(CURIYR + JYR - 1,MNUMYR),NERC)
               RPSN(KYR) = UPRNWBNDR(MIN(CURIYR + JYR - 1,MNUMYR),NERC) * UPGNPD(CURIYR + JYR - 1)
               ONE(KYR) = DBLE(1.0)
            END DO
            RPSRL = PVV(RPSR,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            RPSRL = RPSRL / PVONE
            RPSRN = PVV(RPSN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            CALL EP$LGNP(UNXPH,UNFPH - UNXPH + 1,AVGDCR,PVGNP)
            RPSRN = RPSRN / PVGNP
         VALUE = DBLE(RPSRL)
       END IF
       RPSREG(NERC,YEAR) = VALUE

       IF (UPRNWCASR(NERC).EQ.3) THEN
         CALL GETIN(1,NERC)

!        WRITE(6,3977) CURIRUN, CURCALYR, CURITR, NERC, EEITAJ(1), EEITAJ(2), EEITAJ(3)
!3977    FORMAT(1X,"UECP_10275_EEITAJ_GET",4(":",I4),3(":",F12.3))

         IY = MIN(CURIYR + YEAR - 1,UNYEAR)

!        VALUE = VALUE / DBLE(1.0 + EQTDLS * ULOSSADJ(IY))

         VALUE = VALUE * DEM / GEN
       END IF
       VALUE = VALUE * GEN
       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
       IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
       CALL CBND(UPBND,COLUMN,VALUE,DBLE(9999.9),COLUMN_mask,'EP$RPS,19')
      END IF

!     PUT REGIONAL RENEWABLE GENERATION VECTOR IN REGIONAL AND NATIONAL ROWS
!      CALL CVAL(COLUMN,ROWU,DBLE(1.0),'EP$RPS,20')

       CALL CVAL(COLUMN,ROWR,DBLE(-1.0),COLUMN_mask,ROWR_mask,'EP$RPS,21')

!      IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROWR,VALUE,'EP$RPS,22')

!      SUBTRACT OUT DG PV IF INCLUDED TO AVOID DOUBLE-COUNTING

      IF (UPRNWCASR(NERC) .GT. 0)THEN
      IF (DPVDISPATCH .EQ. .TRUE. .AND. UPRNWSHRR(WIPV,NERC) .GT. 0.0) THEN
         COLUMN = 'GUDGPV'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':GUDGPV:',UPRGCD(NERC),UPYRCD(YEAR))
         VALUE = DBLE(-1.0)
         CALL CVAL(COLUMN,ROWR,VALUE,COLUMN_mask,ROWR_mask,'EP$RPS,23')
         IF (YEAR .LT. UNXPH) THEN
            VALUE = DBLE(DPVTOTGENNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR)) * 0.001)
         ELSE
            DO JYR = UNXPH , UNFPH
               KYR = JYR - UNXPH + 1
               RPSR(KYR) = DBLE(DPVTOTGENNR(NERC,MIN(CURIYR + JYR - 1,MNUMYR)) * 0.001)
               ONE(KYR) = DBLE(1.0)
            END DO
            RPSRL = PVV(RPSR,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR))
            VALUE = RPSRL / PVONE
         END IF

!           write(6,3211) curiyr+1989,curiyr+1989+year-1,column,value,DPVTOTGENNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR)), DPVTOTGENNR(NERC,MNUMYR)
!3211 format(1h ,'!dgpv2',i4,i5,a10,5f10.3)

         CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RPS,24')
      END IF
      END IF

!     ACCOUNT FOR RENEWABLES FROM TRADITIONAL COGEN

      COLUMN = 'G'//UPRGCD(NERC)//'CG'//'RNW'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(NERC),':CG:',':RNW:',UPYRCD(YEAR))

!     BOUND VECTOR USING RENEWABLE SALES TO GRID (INCLUDE OWN USE IN DOE CASE)

!     IF (UPRNWCASR(RPS_RGN) .GT. 0) THEN

         IF (UPRNWCOGR(NERC) .GT. 0) THEN
            IF (YEAR .LT. UNXPH) THEN
               KYR = MIN(CURIYR + YEAR - 1,UNYEAR)
               IF (UPRNWCOGR(NERC) .EQ. 1)THEN
                  VALUE = DBLE(URPSCGG(NERC,KYR))
               ELSEIF (UPRNWCOGR(NERC) .EQ. 2)THEN
                  VALUE = DBLE(URPSCGG(NERC,KYR) + URPSCGO(NERC,KYR))
               END IF
            ELSE
               DO JYR = 1 , UNFPH - UNXPH + 1
                  KYR = MIN(CURIYR + JYR + UNXPH - 2,UNYEAR)
                  ONE(JYR) = DBLE(1.0)
                  IF (UPRNWCOGR(NERC) .EQ. 1)THEN
                     COG(JYR) = DBLE(URPSCGG(NERC,KYR))
                  ELSEIF (UPRNWCOGR(NERC) .EQ. 2)THEN
                     COG(JYR) = DBLE(URPSCGG(NERC,KYR) + URPSCGO(NERC,KYR))
                  END IF
               END DO
               PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
               VALUE = PVV(COG,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
               VALUE = VALUE / PVONE
            END IF
         ELSE
            VALUE = 0.0
         END IF

!     ELSE
!        VALUE = 0.0
!     END IF
!
      CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RPS,25')

!     RENEWABLE PORTFOLIO ROW

      VALUE = DBLE(1.0)
!     IF (UPRNWCAS .EQ. 0)CALL CVAL(COLUMN,ROWU,VALUE,COLUMN_mask,ROWU_mask,'EP$RPS,28')
      CALL CVAL(COLUMN,ROWR,VALUE,COLUMN_mask,ROWR_mask,'EP$RPS,29')

!     OBJECTIVE FUNCTION (PUT IN DUMMY COST)

      ROW = UPOBJ ; ROW_mask=UPOBJ
!     COLUMN = 'G'//UPRGCD(NERC)//'CG'//'RNW'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(NERC),':CG:',':RNW:',UPYRCD(YEAR))
      VALUE = ECP_MIN
      CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,26')

      COLUMN = 'G'//UPRGCD(NERC)//'EL'//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(NERC),':EL:',':XXX:',UPYRCD(YEAR))
      VALUE = ECP_MIN
      CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,27')

!     CREATE VECTOR TO ACCOUNT FOR END-USE CREDITS IN NATIONAL RPS, IF ANY

      COLUMN = 'G'//'U'//'CG'//'RN'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',':U:',':CG:',':RN:',UPRGCD(NERC),UPYRCD(YEAR))
      IF (UPRNWCOG .GT. 0)THEN
         IF (YEAR .LT. UNXPH) THEN
            KYR = MIN(CURIYR + YEAR - 1,UNYEAR)
            IF (UPRNWCOG .EQ. 1)THEN
               VALUE = DBLE(URPSCGG(NERC,KYR))
            ELSE IF (UPRNWCOG .EQ. 2)THEN
               VALUE = DBLE(URPSCGG(NERC,KYR) + URPSCGO(NERC,KYR))
            END IF
         ELSE
            DO JYR = 1 , UNFPH - UNXPH + 1
               KYR = MIN(CURIYR + JYR + UNXPH - 2,UNYEAR)
               ONE(JYR) = DBLE(1.0)
               IF (UPRNWCOG .EQ. 1)THEN
                  COG(JYR) = DBLE(URPSCGG(NERC,KYR))
               ELSE IF (UPRNWCOG .EQ. 2)THEN
                  COG(JYR) = DBLE(URPSCGG(NERC,KYR) + URPSCGO(NERC,KYR))
               END IF
            END DO
            PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
            VALUE = PVV(COG,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
            VALUE = VALUE / PVONE
         END IF
      ELSE
         VALUE = DBLE(0.0)
      END IF

!       COLUMN = 'G'//'U'//'CG'//'RN'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',':U:',':CG:',':RN:',UPRGCD(NERC),UPYRCD(YEAR))

      CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RPS,30')

      ROW = UPOBJ ; ROW_mask=UPOBJ
      VALUE = ECP_MIN
      CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,31')

      VALUE = DBLE(1.0)
      CALL CVAL(COLUMN,ROWU,VALUE,COLUMN_mask,ROWU_mask,'EP$RPS,32')


!     CREATE VECTOR TO CAP NATIONAL RPS CREDIT PRICE IN DOE BILL

      IF (NERC .EQ. 1)THEN
         COLUMN = 'G'//'U'//'CR'//'RNW'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',':U:',':CR:',':RNW:',UPYRCD(YEAR))

!        BOUND VECTOR TO ZERO IF NO CAP

         IF (UPRNWCAP .GT. 0.000 .AND. UPRNWBND(CURIYR + YEAR - 1) .GT. 0.001) THEN

!           RENEWABLE PORTFOLIO ROW

            VALUE = DBLE(1.0)
            CALL CVAL(COLUMN,ROWU,VALUE,COLUMN_mask,ROWU_mask,'EP$RPS,33')

!           OBJECTIVE FUNCTION (PUT IN CREDIT PRICE CAP)

            ROW = UPOBJ ; ROW_mask=UPOBJ
            IF (YEAR .LT. UNXPH) THEN
               VALUE = DBLE(RPSCAPYR(CURIYR + YEAR - 1) * UPGNPD(CURIYR + YEAR - 1)) * PWF(DBLE(EPDSCRT),YEAR)
            ELSE
               JYR = UNFPH - UNXPH + 1
               DO IY = 1 , JYR
                  KYR = IY + CURIYR + UNXPH - 2
                  IF (UPRNWBND(MIN(UNYEAR,KYR)) .GE.0.005) THEN
                     CRDPRN(IY) = DBLE(RPSCAPYR(KYR) * UPGNPD(KYR))
                  ELSE
                     CRDPRN(IY) = DBLE(0.000)
                  END IF

!                 SET 0 CREDIT PRICE IF SUNSET

                  IF (UPRNWSUN .GT. 0 .AND. (UHBSYR + KYR) .GE. UPRNWSUN)CRDPRN(IY) = DBLE(0.000)
               END DO
               VALUE = PVV(CRDPRN(1),ECP_D_FPH,JYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
            END IF
            IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
            VALUE = MAX(VALUE,0.0)
            IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,34')
         END IF
      END IF

!     CREATE VECTOR TO CAP REGIONAL RPS CREDIT PRICE IN DOE BILL

         COLUMN = 'G'//UPRGCD(NERC)//'CR'//'RNW'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(NERC),':CR:',':RNW:',UPYRCD(YEAR))

!     BOUND VECTOR TO ZERO IF NO CAP

       IF (UPRNWCAPR(NERC) .GT. 0.000 .AND. UPRNWBNDR(CURIYR + YEAR - 1,NERC) .GT. 0.001) THEN

!     RENEWABLE PORTFOLIO ROW (DON'T COUNT REGIONAL CREDIT PURCHASE TOWARDS NATIONAL REQUIREMENT)

         VALUE = DBLE(1.0)
         CALL CVAL(COLUMN,ROWR,VALUE,COLUMN_mask,ROWR_mask,'EP$RPS,35')
         VALUE = DBLE(-1.0)
         CALL CVAL(COLUMN,ROWU,VALUE,COLUMN_mask,ROWU_mask,'EP$RPS,36')

!     OBJECTIVE FUNCTION (PUT IN CREDIT PRICE CAP)

            ROW = UPOBJ ; ROW_mask=UPOBJ
         IF (YEAR .LT. UNXPH) THEN
            VALUE = DBLE(UPRNWCAPR(NERC) * UPGNPD(CURIYR + YEAR - 1)) * PWF(DBLE(EPDSCRT),YEAR)
         ELSE
            JYR = UNFPH - UNXPH + 1
            DO IY = 1 , JYR
               KYR = IY + CURIYR + UNXPH - 2
               IF (UPRNWBNDR(MIN(UNYEAR,KYR),NERC) .GT.0.001) THEN
                  CRDPRN(IY) = DBLE(UPRNWCAPR(NERC) * UPGNPD(KYR))
               ELSE
                  CRDPRN(IY) = DBLE(0.000)
               END IF

!     SET 0 CREDIT PRICE IF SUNSET

               IF (UPRNWSUNR(NERC) .GT. 0 .AND. (UHBSYR + KYR) .GE. UPRNWSUNR(NERC))CRDPRN(IY) = DBLE(0.000)
            END DO
            VALUE = PVV(CRDPRN(1),ECP_D_FPH,JYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
         END IF
            IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
            VALUE = MAX(VALUE,0.0)
         IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,37')
       END IF

!     SET UP RPS CREDIT BANKS, IF ALLOWED

      IF (UPRNWBNK .GT. 0 .AND. NERC .EQ. 1) THEN

         IF (CURIYR .EQ. FIRST_RPS_YR) THEN
            TST_BANK = 0
         END IF

         IF (UCRBKNR(MNUMNR,CURIYR) .LE. 0.0 .AND. CURIYR+1 .GT. FIRST_RPS_YR) THEN
            TST_BANK = 1
         END IF

         IF (MAX_BNK_YR .EQ. 0 .AND. EPRPSBK(CURIYR - 1) .LT. EPRPSBK(CURIYR - 2)) THEN
            MAX_BNK_YR = CURIYR - 2
            MAX_BNK_YEAR = MAX_BNK_YR + UHBSYR
         ELSE IF (MAX_BNK_YR .GT. 0 .AND. MIN_BNK_YR .EQ. 0 .AND. EPRPSBK(CURIYR - 1) .GT. EPRPSBK(CURIYR - 2)) THEN
            MIN_BNK_YR = CURIYR - 2
            MIN_BNK_YEAR = MIN_BNK_YR + UHBSYR
         END IF

         COLUMN_USE_BNK = 'BNKRPSU'//UPYRCD(YEAR); call makmsk(COLUMN_USE_BNK_mask,':BNKRPSU:',UPYRCD(YEAR))
         COLUMN_CREATE_BNK = 'BNKRPSC'//UPYRCD(YEAR); call makmsk(COLUMN_CREATE_BNK_mask,':BNKRPSC:',UPYRCD(YEAR))
         ROW = UPOBJ ; ROW_mask=UPOBJ
         IF (YEAR .LT. UNXPH) THEN
            IF (CURIYR+YEAR-1 .LT. FIRST_RPS_YR) THEN
               CALL CBND(UPBND,COLUMN_USE_BNK,DBLE(0.0),DBLE(0.0),COLUMN_USE_BNK_mask,'EP$RPS,38')
               CALL CBND(UPBND,COLUMN_CREATE_BNK,DBLE(0.0),DBLE(0.0),COLUMN_CREATE_BNK_mask,'EP$RPS,39')
            END IF

            PVONE = 1.0
            TST_VAL1 = 1.0
            TST_VAL2 = 1.0
            TST_VAL3 = 1.0

            VALUE = DBLE(1.0)
            CALL CVAL(COLUMN_USE_BNK,ROWU,VALUE,COLUMN_USE_BNK_mask,ROWU_mask,'EP$RPS,40')
            VALUE = DBLE(-1.0)
            CALL CVAL(COLUMN_CREATE_BNK,ROWU,VALUE,COLUMN_CREATE_BNK_mask,ROWU_mask,'EP$RPS,41')

            IF (CURIYR+YEAR-1 .GE. FIRST_RPS_YR) THEN
               VALUE_PRC = (CES_PRICE_TARGET * ((1.0 + CES_DCR) ** (CURIYR+YEAR-1 - FIRST_RPS_YR))) * UPGNPD(CURIYR+YEAR-1) * PWF(DBLE(AVGDCR),YEAR)
               VALUE_CAP = DBLE(RPSCAPYR(CURIYR + YEAR - 1) * UPGNPD(CURIYR + YEAR - 1)) * PWF(DBLE(EPDSCRT),YEAR)
               IF (UPRNWCAP .GT. 0.0) THEN
               VALUE = MIN(VALUE_PRC , VALUE_CAP + ECP_MIN * 0.5)
               ELSE
                  VALUE = VALUE_PRC
               END IF
               CALL CVAL(COLUMN_USE_BNK,ROW,VALUE,COLUMN_USE_BNK_mask,ROW_mask,'EP$RPS,42')
               IF (TST_BANK .EQ. 1) THEN
                  CALL CVAL(COLUMN_CREATE_BNK,ROW,DBLE(-ECP_MIN),COLUMN_CREATE_BNK_mask,ROW_mask,'EP$RPS,43')
               ELSE
                  CALL CVAL(COLUMN_CREATE_BNK,ROW,DBLE(-(VALUE-ECP_MIN)),COLUMN_CREATE_BNK_mask,ROW_mask,'EP$RPS,44')
               END IF
            END IF

            WRITE(6,1234) CURIRUN, CURIYR + 1989,curiyr+1989+YEAR-1, TST_BANK, FIRST_RPS_YEAR, MAXLT, MAX_BNK_YEAR, MIN_BNK_YEAR, COLUMN_USE_BNK, ROWU, &
               AVGDCR, VALUE , PVONE,  (VALUE / PVONE) / PVONE, TST_VAL1, TST_VAL2, TST_VAL3, UPGNPD(CURIYR+YEAR-1), UPGNPD(CURIYR+MAXLT), &
               CES_PRICE_TARGET, CES_DCR, CES_DUALS(CURIYR,UNXPH), EPRPSBK(CURIYR-2), EPRPSBK(CURIYR-1), UCRBKNR(MNUMNR,CURIYR), VALUE_PRC, VALUE_CAP

         ELSE
            IF (CURIYR+YEAR-1 .LE. FIRST_RPS_YR) THEN
               CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(0.0),COLUMN_mask,'EP$RPS,45')
            END IF

            VALUE = DBLE(1.0)
            CALL CVAL(COLUMN_USE_BNK,ROWU,VALUE,COLUMN_USE_BNK_mask,ROWU_mask,'EP$RPS,46')
            VALUE = DBLE(-1.0)
            CALL CVAL(COLUMN_CREATE_BNK,ROWU,VALUE,COLUMN_CREATE_BNK_mask,ROWU_mask,'EP$RPS,47')

            BNK = 0.0
            DO JYR = UNXPH , UNFPH
               KYR = JYR - UNXPH + 1
               IF (CURIYR+JYR-1 .GE. FIRST_RPS_YR) THEN
                  BNK(KYR) = (CES_PRICE_TARGET * ((1.0 + CES_DCR) ** (CURIYR+JYR-1 - FIRST_RPS_YR))) * UPGNPD(CURIYR+JYR-1)
                  CRDPRN(KYR) = DBLE(RPSCAPYR(CURIYR+JYR-1) * UPGNPD(CURIYR+JYR-1))
               END IF
            END DO
            VALUE_PRC = PVV(BNK,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGDCR)) * PWF(DBLE(AVGDCR),UNXPH - 1)
            VALUE_CAP = PVV(CRDPRN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
            IF (UPRNWCAP .GT. 0.0) THEN
            VALUE = MIN(VALUE_PRC , VALUE_CAP + ECP_MIN * 0.5)
            ELSE
               VALUE = VALUE_PRC
            END IF

            CALL CVAL(COLUMN_USE_BNK,ROW,VALUE,COLUMN_USE_BNK_mask,ROW_mask,'EP$RPS,48')
            CALL CVAL(COLUMN_CREATE_BNK,ROW,DBLE(-ECP_MIN),COLUMN_CREATE_BNK_mask,ROW_mask,'EP$RPS,49')

            WRITE(18,1234) CURIRUN, CURIYR + 1989,curiyr+1989+YEAR-1, TST_BANK, FIRST_RPS_YEAR, MAXLT, MAX_BNK_YEAR, MIN_BNK_YEAR, COLUMN_USE_BNK, ROWU, &
               AVGDCR, VALUE , PVONE,  (VALUE / PVONE) / PVONE, TST_VAL1, TST_VAL2, TST_VAL3, UPGNPD(CURIYR+YEAR-1), UPGNPD(CURIYR+MAXLT), &
               CES_PRICE_TARGET, CES_DCR, CES_DUALS(CURIYR,UNXPH), EPRPSBK(CURIYR-2), EPRPSBK(CURIYR-1), UCRBKNR(MNUMNR,CURIYR), VALUE_PRC, VALUE_CAP
 1234       format( 1x ,'RPSBNK_IN',8(":",i4),2(":",A16),17(":",f24.6))

         END IF
      END IF

!     TREATMENT OF EXISTING GENERATION, IF APPROPRIATE

       IF (UPRNWCAS .GT. 0 .OR. UPRNWCASR(RPS_RGN) .GT. 0)THEN
          DO PLT = 1 , ECP_D_CAP
             IF (PLT .LE. ECP_D_DSP)THEN

!               SET UP STRUCTURE TO INCLUDE INCREMENTAL GENERATION

                IF (UPRNWEXG(PLT) .GT. 0.0)THEN
!                  ROW TO DETERMINE INCREMENTAL GENERATION
                   ROW = 'G'//UPRGCD(NERC)//UPLNTCD(PLT)//'INC'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(NERC),UPLNTCD(PLT),':INC:',UPYRCD(YEAR))
                   CALL CROWTYPE(ROW,'G       ',ROW_mask)
                   VALUE = DBLE(0.0)
                   CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$RPS,50')
!                  ROWU = 'G'//'U'//UPLNTCD(PLT)//'INC'//UPYRCD(YEAR)
!                  IRET = DFMCRTP(ROWU,'N       ')
!                  EXISTING GENERATION VECTOR
                   COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(PLT)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(PLT),':GEN:',UPYRCD(YEAR))
                   CALL CBND(UPBND,COLUMN,DBLE(EXPGEN(PLT,NERC)),DBLE(EXPGEN(PLT,NERC)),COLUMN_mask,'EP$RPS,51')
                   VALUE = DBLE(-UPRNWEXG(PLT))
!                  IF(year .eq. 1 .and. nerc .eq. 1)write(6,3355) curiyr+1989,COLUMN,ROW,VALUE
!3355 format(1h ,'!eccof',i4,1x,a10,1x,a10,f10.3)
                   CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,52')
                   VALUE = ECP_MIN
                   CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$RPS,53')
!                  ESCAPE VECTOR
                   COLUMN = 'X'//UPRGCD(NERC)//UPLNTCD(PLT)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':X:',UPRGCD(NERC),UPLNTCD(PLT),':GEN:',UPYRCD(YEAR))
                   VALUE = DBLE(1.0)
!                  IF(year .eq. 1 .and. nerc .eq. 1)write(6,3355) curiyr+1989,COLUMN,ROW,VALUE
                   CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,54')
                   VALUE = DBLE(2000.0)
                   CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$RPS,55')
!                  INCREMENTAL EXISTING GENERATION VECTOR
                   COLUMN = 'I'//UPRGCD(NERC)//UPLNTCD(PLT)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':I:',UPRGCD(NERC),UPLNTCD(PLT),':GEN:',UPYRCD(YEAR))
                   VALUE = DBLE(-1.0)
!                  IF(year .eq. 1 .and. nerc .eq. 1)write(6,3355) curiyr+1989,COLUMN,ROW,VALUE
                   CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,56')
                   ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))
                   VALUE = UPRNWSHR(PLT)
!                  IF(year .eq. 1 .and. nerc .eq. 1)write(6,3355) curiyr+1989,COLUMN,ROWU,VALUE
                   CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,57')
                   VALUE = ECP_MIN
                   CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$RPS,58')
                END IF
             ELSE
!     if (year .eq. 2 .and. uplntcd(plt) .eq. 'HY')write(6,2233) curiyr+1989,nerc,rps_rgn,  &
!                       UPRNWEXGR(PLT,RPS_RGN) , UPRNWSHRR(PLT,RPS_RGN),  &
!                       UPRNWEXG(PLT) , UPRNWSHR(PLT),EXSGEN(PLT,NERC)
!2233 format(1h ,'!hyd',i4,i3,i4,6f10.3)
                VALUE = UPRNWEXGR(PLT,RPS_RGN) * UPRNWSHRR(PLT,RPS_RGN)
                VALUEU = UPRNWEXG(PLT) * UPRNWSHR(PLT)
!               IF (UPRNWSHRR(PLT,RPS_RGN) .GT. 0.0 .AND. VALUE .GT. DBLE(0.0))THEN
!               IF (EXPGEN(PLT,NERC) .GT. 0.0)THEN
                IF (EXSGEN(PLT,NERC) .GT. 0.0 .AND. (VALUE .GT. DBLE(0.0) .OR. VALUEU .GT. DBLE(0.0)))THEN
                   COLUMN = 'G'//UPRGCD(NERC)//UPLNTCD(PLT)//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(NERC),UPLNTCD(PLT),':XXX:',UPYRCD(YEAR))
                   CALL CBND(UPBND,COLUMN,DBLE(EXSGEN(PLT,NERC)),DBLE(EXSGEN(PLT,NERC)),COLUMN_mask,'EP$RPS,59')
                   IF (VALUE .GT. 0.0)THEN
!                     VALUE = DBLE(-1.0)
                      CALL CVAL(COLUMN,ROWR,-VALUE,COLUMN_mask,ROWR_mask,'EP$RPS,60')
                   END IF
                   IF (VALUEU .GT. 0.0 .AND. UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005)THEN
                      ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))
                      CALL CVAL(COLUMN,ROW,-VALUEU,COLUMN_mask,ROW_mask,'EP$RPS,61')
                      VALUE = ECP_MIN
                      CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$RPS,62')
                   END IF
                END IF
             END IF
!            IF EXISTING GENERATION INCLUDED FROM BASELINE AMOUNT
             IF (UPRNWBAS(PLT) .GT. 0.0)THEN
                ROW = 'G'//UPRGCD(NERC)//UPLNTCD(PLT)//'BAS'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(NERC),UPLNTCD(PLT),':BAS:',UPYRCD(YEAR))
                CALL CROWTYPE(ROW,'G       ',ROW_mask)
                VALUE = DBLE(0.0)
                CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$RPS,63')
!               EXISTING GENERATION VECTOR
                COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(PLT)//'BAS'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(PLT),':BAS:',UPYRCD(YEAR))
                CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(UPRNWBAS(PLT) * EXPGEN(PLT,NERC)),COLUMN_mask,'EP$RPS,64')
                VALUE = DBLE(-1.0)
                CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,65')
                VALUE = RPSNAT(YEAR)
                CALL CVAL(COLUMN,ROWU,VALUE,COLUMN_mask,ROWU_mask,'EP$RPS,66')
                ROW = UPOBJ ; ROW_mask=UPOBJ
                VALUE = ECP_MIN
                CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RPS,67')
             END IF
          END DO
       END IF
!
      RETURN
      END
!
!
!     EP$CFMIN SETS UP MINIMUM COFIRING GENERATION, IF ANY
!
      SUBROUTINE EP$CFMIN(NERC,YEAR)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'dispinyr'
      include 'uefdout'
!
      REAL*8 VALUE,GEN(ECP_D_FPH)
      REAL*8 PWF,PVV,PVONE,ONE(ECP_D_FPH)
      REAL*4 CFHIST
      INTEGER*4 IRET,YEAR,NERC,JYR,KYR
      CHARACTER*16 ROW,COLUMN,ROW_F

      ecpsub='EP$CFMIN'

!     IMPOSE MINIMUM GENERATION FROM "HISTORY" IF MORE THAN MINIMUM
!     AMOUNT SPECIFIED IN ECPDAT (UPCFGEN)
!
      IF ((CURIYR + UHBSYR) .EQ. UYR_STEO .AND. YEAR .EQ. 1)THEN
          CFHIST = UGNCFNR(1,NERC,CURIYR - 1) + UGNCFNR(2,NERC,CURIYR - 1)
        DO JYR = CURIYR + UPCFCLT , MNUMYR
          IF (CFHIST .GE. 0.05)UPCFGEN(JYR,NERC) = MAX(UPCFGEN(JYR,NERC),CFHIST)
        END DO
!       write(6,2222) curiyr+1989,curiyr+1989+upcfclt,nerc,cfhist,UPCFGEN(curiyr+1,nerc)
!2222 format(1h ,'!cfhist',i4,i5,i3,2f10.3)
      END IF
!
      ROW = 'G'//UPRGCD(NERC)//'CFGEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(NERC),':CFGEN:',UPYRCD(YEAR))
!
      IF (YEAR .LT. UNXPH) THEN
         VALUE = DBLE(UPCFGEN(MIN(CURIYR + YEAR - 1,MNUMYR),NERC))
      ELSE
!
!        DETERMINE LEVELIZED COFIRING GENERATION FOR LAST YEAR
!
         DO JYR = 1 , UNFPH - UNXPH + 1
            KYR = MIN(CURIYR + JYR + UNXPH - 2,MNUMYR)
!           GEN(JYR) = UPCFGEN(MIN(CURIYR + JYR - 1,MNUMYR),NERC)
            GEN(JYR) = UPCFGEN(KYR,NERC)
            ONE(JYR) = DBLE(1.0)
         END DO
         PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
         VALUE = PVV(GEN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) *  &
                    PWF(DBLE(EPDSCRT),UNXPH - 1) / PVONE
      END IF
!
!     DECLARE ROW TYPE & SET UP RHS & SAFETY VALVE COLUMN FOR NATIONAL RPS ROW
!
      IF (VALUE .GT. 0.0) THEN
         CALL CROWTYPE(ROW,'G       ',ROW_mask)
         CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$CFMIN,1')
!
!        CREATE ESCAPE VECTOR TO PREVENT INFEASIBILITIES
!
         COLUMN = 'R'//UPRGCD(NERC)//'CFGEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':R:',UPRGCD(NERC),':CFGEN:',UPYRCD(YEAR))
         VALUE = DBLE(1.0)
         CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CFMIN,2')
         VALUE = DBLE(2000.0)
         CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$CFMIN,3')
      ELSE
         CALL CROWTYPE(ROW,'N       ',ROW_mask)
      END IF

!     CREATE ROW TO COLLECT COFIRE GENERATION FOR STATE RPS

      ROW_F = 'F'//UPRGCD(NERC)//'CFGEN'//UPYRCD(YEAR); call makmsk(ROW_F_mask,':F:',UPRGCD(NERC),':CFGEN:',UPYRCD(YEAR))
      CALL CROWTYPE(ROW_F,'G       ',ROW_F_mask)
      VALUE = 0.0
      CALL CRHS(UPRHS,ROW_F,VALUE,ROW_mask,'EP$CFMIN,4')

      COLUMN = 'S'//UPRGCD(NERC)//'CFGEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':S:',UPRGCD(NERC),':CFGEN:',UPYRCD(YEAR))
      VALUE = DBLE(-1.0)
      CALL CVAL(COLUMN,ROW_F,VALUE,COLUMN_mask,ROW_F_mask,'EP$CFMIN,5')
      VALUE = DBLE(-0.0001)
      CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$CFMIN,6')
!
      RETURN
      END
!
!
!     EP$CPS SETS UP CAPACITY PORTFOLIO CONSTRAINTS
!
      SUBROUTINE EP$CPS(NERC,YEAR)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'dispett'
      include 'dispin'
      include 'ecpcntl'
      include 'bildin'
!
      REAL*8 VALUE
      INTEGER*4 IRET,NERC,YEAR,LTMIN,PLT,OLYR
      CHARACTER*16 ROW,COLUMN

      ecpsub='EP$CPS'

!
!      DETERMINE MINIMUM LEAD TIME FOR QUALIFIED CAPACITY TYPES
!
         LTMIN = 999
      DO PLT = 1 , ECP_D_CAP
         IF (UPCAPSHR(PLT) .GT. 0.0 .AND. UPPLYR(PLT) .LT. LTMIN)LTMIN = UPPLYR(PLT)
!     print *,'!cpso1',plt,uplntcd(plt),upcapshr(plt),ltmin
      END DO
         OLYR = YEAR + LTMIN
!     print *,'!cpso1',curiyr+uhbsyr,curiyr+uhbsyr+olyr-1,upcapcas,upcapbnd(curiyr+olyr-1)
      IF (OLYR .LE. UNXPH)THEN
!
!      DECLARE ROW TYPE & SET UP RHS & SAFETY VALVE COLUMN FOR LOAD REQUIREMENTS ROW
!
         ROW = 'GCPSXXX'//UPYRCD(OLYR); call makmsk(ROW_mask,':GCPSXXX:',UPYRCD(OLYR))
!
       IF (UPCAPBND(CURIYR + OLYR - 1) .GT. 0.0001)THEN
         VALUE = DBLE(0.0)
         CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$CPS,1')
!
!        DECLARE ROW TYPE
!
         CALL CROWTYPE(ROW,'L       ',ROW_mask)
!
!        CREATE SAFETY VALVE IN CASE RENEWABLES CANNOT BE BUILT BY A GIVEN YEAR
!
         COLUMN = 'CPSCAPX'//UPYRCD(OLYR); call makmsk(COLUMN_mask,':CPSCAPX:',UPYRCD(OLYR))
         VALUE = DBLE(1.0)
         CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CPS,2')
!
!        OBJECTIVE FUNCTION (GIVE HIGH COEFFICIENT SO ONLY ACTIVATED TO PREVENT INFEASIBILITIES
!
         ROW = UPOBJ ; ROW_mask=UPOBJ
         VALUE = DBLE(2000.0) * UPGNPD(CURIYR + OLYR -1)
         CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$CPS,3')
       ELSE
!
!        MAKE FREE ROW IF NO CPS REQUIREMENT
!
         CALL CROWTYPE(ROW,'N       ',ROW_mask)
       END IF
      END IF

      RETURN
      END
!
!
!     EP$LINT SETS UP CONSTRAINTS TO LIMIT INTERMITTENT GENERATION
!     AS A PERCENTAGE OF TOTAL GENERATION
!
      SUBROUTINE EP$LINT(NERC,YEAR)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'dispett'
      include 'dispin'
      include 'ecpcntl'
      include 'bildin'
      include 'uefdout'
!
      REAL*8 VALUE
      INTEGER*4 YEAR,NERC
      CHARACTER*16 ROW,COLUMN

      ecpsub='EP$LINT'

!
!        INITIALIZE MAX HISTORICAL INTERMITTENT GENERATION
!
      IF (USYEAR(CURIYR) .EQ. UPSTYR)THEN
        UPINTMAX(NERC) = 0.0
!
!     GET PREVIOUS INTERMITTENT GENERATION AND COMPARE TO MAX
!
        UPINTLAG = (UGNWNNR(1,NERC,CURIYR-1) + UGNWLNR(1,NERC,CURIYR-1) + UGNPVNR(1,NERC,CURIYR-1) + UGNPTNR(1,NERC,CURIYR-1) + UGNSONR(1,NERC,CURIYR-1) + UGNWFNR(1,NERC,CURIYR-1) +  &
                   UGNWNNR(2,NERC,CURIYR-1) + UGNWLNR(2,NERC,CURIYR-1) + UGNPVNR(2,NERC,CURIYR-1) + UGNPTNR(2,NERC,CURIYR-1) + UGNSONR(2,NERC,CURIYR-1) + UGNWFNR(2,NERC,CURIYR-1) ) /  &
                  (UGNTLNR(1,NERC,CURIYR-1) + UGNTLNR(2,NERC,CURIYR-1))
      ELSE
        UPINTLAG = IRNWACT(NERC,UPPLYR(WIWN) + 1)
      ENDIF
      UPINTMAX(NERC) = MAX(UPINTMAX(NERC),UPINTLAG)
!
!     IF CREATING MATRIX AND FIRST ECP YEAR DECLARE ROW TYPE & SET
!     UP RHS & SAFETY VALVE COLUMN FOR LOAD REQUIREMENTS ROW
!
      ROW = 'L'//UPRGCD(NERC)//'XXINT'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':XXINT:',UPYRCD(YEAR))
!
      VALUE = DBLE(0.0)
      CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$LINT,1')
!
!     DECLARE ROW TYPE
!
      CALL CROWTYPE(ROW,'L       ',ROW_mask)
!
!     INCLUDE VECTORS THAT REPRESENT TOTAL GENERATION (PRODUCT OF HEIGHT AND
!     WIDTH FOR LOAD SEGMENTS).  THIS COLUMN WAS CREATED IN SUBROUTINE EP$RPS.
!     ITS COEFFICIENT IS THE MAXIMUM INTERMITTENT GENERATION FRACTION.
!     THE COEFFICIENTS FOR INTERMITTENT GENERATION ARE SPECIFIED IN
!     SUBROUTINE EP$INT.
!
      COLUMN = 'G'//UPRGCD(NERC)//'EL'//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(NERC),':ELXXX:',UPYRCD(YEAR))
      IF (YEAR .LT. UNXPH)THEN
         VALUE = DBLE(MIN(UPINTBND,UPINTMAX(NERC) + UPINTINC * FLOAT(YEAR - 1)))
      ELSE
         VALUE = DBLE(UPINTBND)
      END IF
      VALUE = MAX(VALUE,DBLE(UPINTBD0))
      CALL CVAL(COLUMN,ROW,-VALUE,COLUMN_mask,ROW_mask,'EP$LINT,2')
      IRNWPCT(NERC,YEAR) = VALUE
!
!     CREATE SAFETY VALVE IN CASE CONSTRAINT CANNOT BE MET IN A GIVEN YEAR
!
      COLUMN = 'R'//UPRGCD(NERC)//'INTXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':R:',UPRGCD(NERC),':INTXX:',UPYRCD(YEAR))
      VALUE = DBLE(-1.0)
      CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$LINT,3')
!
!     OBJECTIVE FUNCTION (GIVE HIGH COEFFICIENT SO ONLY ACTIVATED
!     TO PREVENT INFEASIBILITIES
!
      ROW = UPOBJ ; ROW_mask=UPOBJ
      VALUE = DBLE(2000.0) * UPGNPD(CURIYR + YEAR -1)
      CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$LINT,4')
      RETURN
      END

!     EP$RFS SETS UP RENEWABLE FUEL SUPPLY CURVES FOR BIOMASS

      SUBROUTINE EP$RFS
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'wrenew'
      include 'wwdcomon'

      REAL*8 VALUE,DIGITS2
      REAL*8 PWF,PVV,T_BM(ECP_D_FPH),T_WT(ECP_D_FPH)
      INTEGER*4 YEAR, FS, IP, JYR, IFPH, PYR, CRG, I_SUPt
      CHARACTER*16 ROW,COLUMN,ROW_ALL
      CHARACTER*2 FSTEP(NWDSUPQ+1)

      ecpsub='EP$RFS'


      DO YEAR = 1 , UNXPH
         DO CRG = 1 , NDREG

!           Combine all BIOMASS Supply Types into One Biomass Row

            ROW_ALL = 'F'//EPFLCD(CRG)//'WDXXX'//UPYRCD(YEAR); call makmsk(ROW_ALL_mask,':F:',EPFLCD(CRG),':WDXXX:',UPYRCD(YEAR))

            VALUE = DBLE(0.0)
            CALL CRHS(UPRHS,ROW_ALL,VALUE,ROW_ALL_mask,'EP$RFS,1')
            CALL CROWTYPE(ROW_ALL,'L       ',ROW_ALL_mask)

!           FREE ROWS FOR BIOMASS COFIRING BY COAL PLANT TYPE

            DO IP = 1 , ECP_D_CAP
               IF (UPTTYP(IP) .LE. NW_COAL) THEN
                  ROW = 'G'//EPFLCD(CRG)//UPLNTCD(IP)//'WDX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',EPFLCD(CRG),UPLNTCD(IP),':WDX:',UPYRCD(YEAR))
                  CALL CROWTYPE(ROW,'N       ',ROW_mask)
                  ROW = 'G'//EPFLCD(CRG)//UPLNTCD(IP)//'CLX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',EPFLCD(CRG),UPLNTCD(IP),':CLX:',UPYRCD(YEAR))
                  CALL CROWTYPE(ROW,'N       ',ROW_mask)
               END IF
            END DO
         END DO
      END DO

      DO I_SUPt = 1 , MNUMFS
         IF (WDSUP_AVL(I_SUPt) .EQ. 1 .AND. MP_BM_PW(I_SUPt) .GT. 0.0) THEN
            DO FS = 1 , NM_BM_SUP_STP + 1
               IF (FS .LT. 10) THEN
                  WRITE(FSTEP(FS),'("0",I1)') FS
               ELSE
                  WRITE(FSTEP(FS),'(I2)') FS
               END IF
            END DO

            DO YEAR = 1 , UNXPH
               DO CRG = 1 , NDREG

!                 ROW FOR BIOMASS SUPPLY CURVE

                  ROW = 'F'//EPFLCD(CRG)//'WD'//BM_TYP_CD(I_SUPt)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(CRG),':WD:',BM_TYP_CD(I_SUPt),':X:',UPYRCD(YEAR))

                  VALUE = DBLE(0.0)
                  CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$RFS,2')
                  CALL CROWTYPE(ROW,'L       ',ROW_mask)

!                 Combine all BIOMASS Supply Types into One Biomass Row

                  ROW_ALL = 'F'//EPFLCD(CRG)//'WDXXX'//UPYRCD(YEAR); call makmsk(ROW_ALL_mask,':F:',EPFLCD(CRG),':WDXXX:',UPYRCD(YEAR))

                  COLUMN = 'S'//EPFLCD(CRG)//'WD'//BM_TYP_CD(I_SUPt)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':S:',EPFLCD(CRG),':WD:',BM_TYP_CD(I_SUPt),UPYRCD(YEAR))

                  VALUE = DBLE(-1.0)
                  CALL CVAL(COLUMN,ROW_ALL,VALUE,COLUMN_mask,ROW_ALL_mask,'EP$RFS,3')

                  VALUE = DBLE(1.0)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,4')

!                 Create Fuel Supply Vectors

                  DO FS = 1 , NM_BM_SUP_STP

                     COLUMN = 'S'//EPFLCD(CRG)//BM_TYP_CD(I_SUPt)//'X'//FSTEP(FS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':S:',EPFLCD(CRG),BM_TYP_CD(I_SUPt),':X:',FSTEP(FS),UPYRCD(YEAR))

!                    Bound Each Biomass Fuel Supply Vector

                     IF (YEAR .LT. UNXPH) THEN
                        IF (BM_FS_SW .EQ. 0) THEN
                           PYR = CURIYR + YEAR - 1
                        ELSE
                           PYR = CURIYR - 1
                        END IF
                        IF (FS .GT. 1) THEN
                           VALUE = WDSUP_Q(FS,CRG,PYR,I_SUPt) - WDSUP_Q(FS-1,CRG,PYR,I_SUPt)
                        ELSE
                           VALUE = WDSUP_Q(FS,CRG,PYR,I_SUPt)
                        END IF
                        VALUE = MAX(DBLE(0.0) , VALUE)
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           IF (BM_FS_SW .EQ. 0) THEN
                              PYR = CURIYR + UNXPH + JYR - 2
                           ELSE
                              PYR = CURIYR - 1
                           END IF
                           IF (FS .GT. 1) THEN
                              T_BM(JYR) = WDSUP_Q(FS,CRG,PYR,I_SUPt) - WDSUP_Q(FS-1,CRG,PYR,I_SUPt)
                           ELSE
                              T_BM(JYR) = WDSUP_Q(FS,CRG,PYR,I_SUPt)
                           END IF
                           T_BM(JYR) = MAX(DBLE(0.0) , T_BM(JYR))
                           T_WT(JYR) = 1.0
                        END DO
                        IFPH = UNFPH - UNXPH + 1
                        VALUE = PVV(T_BM,ECP_D_FPH,IFPH,DBLE(AVGDCR)) / PVV(T_WT,ECP_D_FPH,IFPH,DBLE(AVGDCR))
                     END IF

                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2(VALUE,5)

                     IF (VALUE .GT. 0.0) THEN

                        CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$RFS,5')

!                       Put Vector in Fuel Supply Row

                        ROW = 'F'//EPFLCD(CRG)//'WD'//BM_TYP_CD(I_SUPt)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(CRG),':WD:',BM_TYP_CD(I_SUPt),':X:',UPYRCD(YEAR))
                        VALUE = DBLE(-1.0)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,6')

!                       Put BTU Costs for Biomass Fuel Supply Curve in OBJ

                        ROW = UPOBJ ; ROW_mask=UPOBJ
                        IF (YEAR .LT. UNXPH) THEN
                           IF (BM_FS_SW .EQ. 0) THEN
                              PYR = CURIYR + YEAR - 1
                           ELSE
                              PYR = CURIYR - 1
                           END IF
                           VALUE = UPGNPD(CURIYR + YEAR - 1) * WDSUP_P(FS,CRG,PYR,I_SUPt) * PWF(DBLE(AVGDCR),YEAR)
                           VALUE = MAX(DBLE(0.0) , VALUE)
                        ELSE
                           DO JYR = 1 , UNFPH - UNXPH + 1
                              IF (BM_FS_SW .EQ. 0) THEN
                                 PYR = CURIYR + UNXPH + JYR - 2
                              ELSE
                                 PYR = CURIYR - 1
                              END IF
                              T_BM(JYR) = UPGNPD(JYR + CURIYR + UNXPH - 2) * WDSUP_P(FS,CRG,PYR,I_SUPt)
                              T_BM(JYR) = MAX(DBLE(0.0) , T_BM(JYR))
                           END DO
                           IFPH = UNFPH - UNXPH + 1
                           VALUE = PVV(T_BM,ECP_D_FPH,IFPH,DBLE(AVGDCR)) * PWF(DBLE(AVGDCR),UNXPH-1)
                        END IF
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0

                        IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,7')
                     END IF
                  END DO ! FS

!                 Create Safety Supply Vector - Unlimited Supply at Very High Price

                  COLUMN = 'S'//EPFLCD(CRG)//'WDX'//FSTEP(NM_BM_SUP_STP+1)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':S:',EPFLCD(CRG),':WDX:',FSTEP(NM_BM_SUP_STP+1),UPYRCD(YEAR))

                  ROW = UPOBJ ; ROW_mask=UPOBJ
                  VALUE = 9999.9
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,8')

                  ROW = 'F'//EPFLCD(CRG)//'WD'//BM_TYP_CD(I_SUPt)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(CRG),':WD:',BM_TYP_CD(I_SUPt),':X:',UPYRCD(YEAR))
                  VALUE = DBLE(-1.0)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,9')

!                 Create Residential Biomass Demand Vectors - If Appropriate - BM_FS_SW Determines Which Years Data to Use

                  IF (MP_BM_RS(I_SUPt) .GT. 0.0) THEN
                     COLUMN = 'D'//EPFLCD(CRG)//'RS'//BM_TYP_CD(I_SUPt)//'X' //UPYRCD(YEAR); COLUMN_mask='D(*)(**)(**)X(*)'
                     VALUE = DBLE(1.0)

                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,10')

                     IF (YEAR .LT. UNXPH) THEN
                        IF (BM_FS_SW .EQ. 0) THEN
                           PYR = CURIYR + YEAR - 1
                        ELSE
                           PYR = CURIYR - 1
                        END IF
                        VALUE = QBMRSCL(I_SUPt,CRG,PYR)
                        VALUE = MAX(DBLE(0.0) , VALUE)
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           IF (BM_FS_SW .EQ. 0) THEN
                              PYR = CURIYR + UNXPH +JYR - 2
                           ELSE
                              PYR = CURIYR - 1
                           END IF
                           T_BM(JYR) = QBMRSCL(I_SUPt,CRG,PYR)
                           T_BM(JYR) = MAX(DBLE(0.0) , T_BM(JYR))
                           T_WT(JYR) = 1.0
                        END DO
                        IFPH = UNFPH - UNXPH + 1
                        VALUE = PVV(T_BM,ECP_D_FPH,IFPH,DBLE(AVGDCR)) / PVV(T_WT,ECP_D_FPH,IFPH,DBLE(AVGDCR))
                     END IF
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2(VALUE,5)

                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RFS,11')
                  END IF

!                 Create Commercial Biomass Demand Vectors - If Appropriate - BM_FS_SW Determines Which Years Data to Use

                  IF (MP_BM_CM(I_SUPt) .GT. 0.0) THEN
                     COLUMN = 'D'//EPFLCD(CRG)//'CM'//BM_TYP_CD(I_SUPt)//'X' //UPYRCD(YEAR); COLUMN_mask='D(*)(**)(**)X(*)'
                     VALUE = DBLE(1.0)

                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,12')

                     IF (YEAR .LT. UNXPH) THEN
                        IF (BM_FS_SW .EQ. 0) THEN
                           PYR = CURIYR + YEAR - 1
                        ELSE
                           PYR = CURIYR - 1
                        END IF
                        VALUE = QBMCMCL(I_SUPt,CRG,PYR)
                        VALUE = MAX(DBLE(0.0) , VALUE)
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           IF (BM_FS_SW .EQ. 0) THEN
                              PYR = CURIYR + UNXPH +JYR - 2
                           ELSE
                              PYR = CURIYR - 1
                           END IF
                           T_BM(JYR) = QBMCMCL(I_SUPt,CRG,PYR)
                           T_BM(JYR) = MAX(DBLE(0.0) , T_BM(JYR))
                           T_WT(JYR) = 1.0
                        END DO
                        IFPH = UNFPH - UNXPH + 1
                        VALUE = PVV(T_BM,ECP_D_FPH,IFPH,DBLE(AVGDCR)) / PVV(T_WT,ECP_D_FPH,IFPH,DBLE(AVGDCR))
                     END IF
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2(VALUE,5)

                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RFS,13')
                  END IF

!                 Create Industrial Biomass Demand Vectors - If Appropriate - BM_FS_SW Determines Which Years Data to Use

                  IF (MP_BM_IN(I_SUPt) .GT. 0.0) THEN
                     COLUMN = 'D'//EPFLCD(CRG)//'IN'//BM_TYP_CD(I_SUPt)//'X' //UPYRCD(YEAR); COLUMN_mask='D(*)(**)(**)X(*)'
                     VALUE = DBLE(1.0)

                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,14')

                     IF (YEAR .LT. UNXPH) THEN
                        IF (BM_FS_SW .EQ. 0) THEN
                           PYR = CURIYR + YEAR - 1
                        ELSE
                           PYR = CURIYR - 1
                        END IF
                        VALUE = QBMINCL(I_SUPt,CRG,PYR)
                        VALUE = MAX(DBLE(0.0) , VALUE)
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           IF (BM_FS_SW .EQ. 0) THEN
                              PYR = CURIYR + UNXPH +JYR - 2
                           ELSE
                              PYR = CURIYR - 1
                           END IF
                           T_BM(JYR) = QBMINCL(I_SUPt,CRG,PYR)
                           T_BM(JYR) = MAX(DBLE(0.0) , T_BM(JYR))
                           T_WT(JYR) = 1.0
                        END DO
                        IFPH = UNFPH - UNXPH + 1
                        VALUE = PVV(T_BM,ECP_D_FPH,IFPH,DBLE(AVGDCR)) / PVV(T_WT,ECP_D_FPH,IFPH,DBLE(AVGDCR))
                     END IF
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2(VALUE,5)

                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RFS,15')
                  END IF

!                 Create Hydrogen Production Biomass Demand Vectors - If Appropriate - BM_FS_SW Determines Which Years Data to Use

                  IF (MP_BM_H2(I_SUPt) .GT. 0.0) THEN
                     COLUMN = 'D'//EPFLCD(CRG)//'H2'//BM_TYP_CD(I_SUPt)//'X' //UPYRCD(YEAR); COLUMN_mask='D(*)(**)(**)X(*)'
                     VALUE = DBLE(1.0)

                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,16')

                     IF (YEAR .LT. UNXPH) THEN
                        IF (BM_FS_SW .EQ. 0) THEN
                           PYR = CURIYR + YEAR - 1
                        ELSE
                           PYR = CURIYR - 1
                        END IF
                        VALUE = QBMH2CL(I_SUPt,CRG,PYR)
                        VALUE = MAX(DBLE(0.0) , VALUE)
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           IF (BM_FS_SW .EQ. 0) THEN
                              PYR = CURIYR + UNXPH +JYR - 2
                           ELSE
                              PYR = CURIYR - 1
                           END IF
                           T_BM(JYR) = QBMH2CL(I_SUPt,CRG,PYR)
                           T_BM(JYR) = MAX(DBLE(0.0) , T_BM(JYR))
                           T_WT(JYR) = 1.0
                        END DO
                        IFPH = UNFPH - UNXPH + 1
                        VALUE = PVV(T_BM,ECP_D_FPH,IFPH,DBLE(AVGDCR)) / PVV(T_WT,ECP_D_FPH,IFPH,DBLE(AVGDCR))
                     END IF
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2(VALUE,5)

                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RFS,17')
                  END IF

!                 Create Cellulosic Ethanol Biomass Demand Vectors - If Appropriate - BM_FS_SW Determines Which Years Data to Use

                  IF (MP_BM_ET(I_SUPt) .GT. 0.0) THEN
                     COLUMN = 'D'//EPFLCD(CRG)//'ET'//BM_TYP_CD(I_SUPt)//'X' //UPYRCD(YEAR); COLUMN_mask='D(*)(**)(**)X(*)'
                     VALUE = DBLE(1.0)

                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,18')

                     IF (YEAR .LT. UNXPH) THEN
                        IF (BM_FS_SW .EQ. 0) THEN
                           PYR = CURIYR + YEAR - 1
                        ELSE
                           PYR = CURIYR - 1
                        END IF
                        VALUE = QBMETCL(I_SUPt,CRG,PYR)
                        VALUE = MAX(DBLE(0.0) , VALUE)
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           IF (BM_FS_SW .EQ. 0) THEN
                              PYR = CURIYR + UNXPH +JYR - 2
                           ELSE
                              PYR = CURIYR - 1
                           END IF
                           T_BM(JYR) = QBMETCL(I_SUPt,CRG,PYR)
                           T_BM(JYR) = MAX(DBLE(0.0) , T_BM(JYR))
                           T_WT(JYR) = 1.0
                        END DO
                        IFPH = UNFPH - UNXPH + 1
                        VALUE = PVV(T_BM,ECP_D_FPH,IFPH,DBLE(AVGDCR)) / PVV(T_WT,ECP_D_FPH,IFPH,DBLE(AVGDCR))
                     END IF
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2(VALUE,5)

                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RFS,19')
                  END IF

!                 Create Biomass to Liquids Biomass Demand Vectors - If Appropriate - BM_FS_SW Determines Which Years Data to Use

                  IF (MP_BM_BT(I_SUPt) .GT. 0.0) THEN
                     COLUMN = 'D'//EPFLCD(CRG)//'BT'//BM_TYP_CD(I_SUPt)//'X' //UPYRCD(YEAR); COLUMN_mask='D(*)(**)(**)X(*)'
                     VALUE = DBLE(1.0)

                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$RFS,20')

                     IF (YEAR .LT. UNXPH) THEN
                        IF (BM_FS_SW .EQ. 0) THEN
                           PYR = CURIYR + YEAR - 1
                        ELSE
                           PYR = CURIYR - 1
                        END IF
                        VALUE = QBMBTCL(I_SUPt,CRG,PYR)
                        VALUE = MAX(DBLE(0.0) , VALUE)
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH + 1
                           IF (BM_FS_SW .EQ. 0) THEN
                              PYR = CURIYR + UNXPH +JYR - 2
                           ELSE
                              PYR = CURIYR - 1
                           END IF
                           T_BM(JYR) = QBMBTCL(I_SUPt,CRG,PYR)
                           T_BM(JYR) = MAX(DBLE(0.0) , T_BM(JYR))
                           T_WT(JYR) = 1.0
                        END DO
                        IFPH = UNFPH - UNXPH + 1
                        VALUE = PVV(T_BM,ECP_D_FPH,IFPH,DBLE(AVGDCR)) / PVV(T_WT,ECP_D_FPH,IFPH,DBLE(AVGDCR))
                     END IF
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2(VALUE,5)

                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$RFS,21')
                  END IF
               END DO ! CRG
            END DO ! YEAR
         END IF  ! If Supply Curve Exists and Is Appropriate for Power Sector Demand
      END DO ! I_SUPt

      RETURN
      END

!     EP$BDSP REVISES BUILD STRUCTURE FOR DISPATCHABLE CAPACITY TYPES.

      SUBROUTINE EP$BDSP(NERC,YEAR)
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'entcntl'
      include 'enewtech'
      include 'bildin'
      include 'bildout'
      include 'dispout'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'postpr'
      include 'dispett'
      include 'dispin'
      include 'wrenew'
      include 'wwdcomon'
      include 'dispuse'
      include 'eusprc'
      include 'edbdef'
      include 'cdsparms'
      include 'uso2grp'
      include 'emission'
      include 'emoblk'
      include 'emablk'
      include 'fuelin'
      include 'ecp_coal'
      include 'coalemm.'
      include 'taxdat'
      include 'uefdout'
      include 'uecpout'
      include 'emeblk'
      include 'ecp_nuc'
      include 'emm_aimms'

      COMMON /OGUSE/WHDEX,WOPEX,NGCON,OLCON,NGLEV,OLLEV,XPNGELGR
      REAL*8 WHDEX(ECP_D_FPH)
      REAL*8 WOPEX(ECP_D_FPH)
      REAL*8 NGCON(ECP_D_XPH)
      REAL*8 OLCON(ECP_D_XPH)
      REAL*8 NGLEV(ECP_D_XPH)
      REAL*8 OLLEV(ECP_D_XPH)
      REAL*8 XPNGELGR(NNGEM,MNUMYR,3)      ! EXPECTED E UTIL NG PRICE (87$/MMBTU) FROM NGTDMOUT

      COMMON /DSP_LEV/DSP_LFLC,DSP_LCAP,DSP_LFCF,DSP_LTRN
      REAL*8 DSP_LFLC(MAXNFR,ECP_D_XPH)
      REAL*4 DSP_LCAP(MNUMNR,MAXNFR,ECP_D_DSP,2)
      REAL*4 DSP_LFCF(MNUMNR,MAXNFR,ECP_D_DSP,2)
      REAL*4 DSP_LTRN(MNUMNR,MAXNFR,ECP_D_DSP)

      COMMON /GPSECP/ GPSSUB
      REAL*8 GPSSUB(ECP_D_CAP,ECP_D_FPH)

!      COMMON /VARCOST/ VARCOL,VAROTH,CFCPLT
!      REAL*4 VARCOL(MAXNFR,ECP_D_CAP)
!      REAL*4 VAROTH(MNUMNR,ECP_D_CAP)
!      REAL*4 CFCPLT(MNUMNR,ECP_D_CAP)

      REAL*8 VALUE,OBJVAL

      REAL*8 CRF,PWF,PVV
      REAL*8 OVRCST,TXBOOK,FNBOOK,URATIO,CAPUNSTL,CAPUTIL,CAPNUG
      REAL*8 PRATIO,TRANS,CAPNNSTL
      REAL*8 PV$FOM,FOM(ECP_D_FPH)
      REAL*8 PV$FOML,FOML(ECP_D_FPH)
      REAL*8 PV$EXT,EXTR(ECP_D_FPH)
      REAL*8 PV$EXTL,EXTL(ECP_D_FPH)
      REAL*8 PV$SOM,SOM(ECP_D_FPH)
      REAL*8 PV$SOML,SOML(ECP_D_FPH)
      REAL*8 PV$CRD,CRD(ECP_D_FPH + UPSEQNYR)
      REAL*8 PV$CRDL,CRDL(ECP_D_FPH + UPSEQNYR)
      REAL*8 PV$DCR,DCR(ECP_D_FPH + UPSEQNYR)
      REAL*8 PV$BNS,BNS(ECP_D_FPH + UPSEQNYR)
      REAL*8 PVGNP,PVGNPR,CAPLEV
      REAL*4 BNDROW,TMP_CAP(0:MAXNFR)
      REAL*4 BNDROW_MR,TMP_CAP_MR(0:MAXNFR)
      REAL*8 SHOURS(ECP_D_MSP)
      REAL*8 ONE,ZERO
      REAL*8 T_CRF,T_PWF
      REAL*4 SHR_FLRG(MAXNFR),TOT_FLRG
      REAL*4 SHR_FLRG_MR(MAXNFR),TOT_FLRG_MR
      REAL*8 DIGITS2
      REAL*4 DEBT_F,UTINT,UTROE,EWGROE,EWGINT,EWGROR,UTROR
      REAL*4 CPR(ECP_D_LCP)
      REAL*8 ONE1(ECP_D_FPH+UPSEQNYR),CPS(ECP_D_FPH)
      REAL*8 PVONE,PVCPS
      REAL*8 SEQBNS,SEQBNS1,CARFEE
      REAL*8 CSTDTADJ,CSTEQADJ,SHRDTADJ
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*8 HTRT_IG, HTRT_AC

      REAL*8 ANNRTE,ANNADJ,ANN(ECP_D_FPH),AN1(ECP_D_FPH)
!
      REAL*4 CRBCNT

!     REAL*8 CTS_INV_Annuity, CTS_C, B_HTRT_ADJ, B_CPEN_ADJ, B_CCST_ADJ, B_CAP_CST_O, B_CAP_CST_N

      REAL*8 CTS_INV_Annuity, CTS_C, B_HTRT_ADJ, B_CPEN_ADJ,  B_CAP_CST_O, B_CAP_CST_N
      INTEGER*4 CTS_YR, B_YR

      INTEGER*4 KYR,IGRP,IOWN,FLRG
      INTEGER*4 JVLS,NSTP(ECP_D_MSP,ECP_D_XPH),VLSMAP(ECP_D_VLS,ECP_D_MSP,ECP_D_XPH)
      INTEGER*4 VLS,AVLS,ISP,ICP,ZYR,TYR,TYR2
      INTEGER*4 PYR,IECP,CLRG,CRG,FRG,NXT_FLRG(MNUMNR),N_FLRG
      INTEGER*4 YEAR,NERC,IP,IFPH2,OLYR,IMPORT,JYR,FULLYR
      INTEGER*4 STEPS,NUMLOOP,LOOPS,SDV_PRF,LDV_PRF,GSYR1,GSYRL,ITST
      CHARACTER*16 ROW,COLUMN,COLUMN_MR
      CHARACTER*12 FROM_LABEL
      CHARACTER*1 SCODE(ECP_D_MSP)
      CHARACTER*1 STEP
      CHARACTER*1 SUB_CODE(ECP_D_DGS)

      COMMON/COAL_AVAIL/ AVAIL
      INTEGER*4 AVAIL(6,MNUMNR)

!     Varibales needed for heatrate and forced outage rate improvement

      REAL*4 RETIRT,RETROR,RETFPE,RETCRE
      REAL*4 SHR_FLRG_HTRT(MAXNFR),TOT_FLRG_HTRT
      REAL*4 SHR_FLRG_FREE(MAXNFR),TOT_FLRG_FREE
      INTEGER*4 STXLF, ITST_HTRT

      REAL*8 VALUE_HTRT
      REAL*8 HTRT_CST_87, HTRT_INV_CST
      INTEGER*4 HTRT_TEST         ! 0 => Option is available; 1 => Option not available
      REAL*4 BNDROW_HTRT, BNDROW_FREE
      CHARACTER*16 COLUMN_HTRT, ROW_HTRT, COLUMN_FREE

      ecpsub='EP$BDSP'


      SUB_CODE(1) = 'S'
      SUB_CODE(2) = 'T'
      SUB_CODE(3) = 'U'
      SUB_CODE(4) = 'V'
      SUB_CODE(5) = 'W'
      SUB_CODE(6) = 'X'

      ZERO = DBLE(0.0)
      ONE = DBLE(1.0)
      JYR = YEAR + CURIYR - 1

!     INITIALIZE SEASONAL PEAKS AND HOURS PER SEASON

      DO JYR = YEAR , UNXPH
         DO ISP = 1 , EPNMSP
            NSTP(ISP,JYR) = 0
            DO VLS = 1 , EPNSTP(YEAR)
               VLSMAP(VLS,ISP,JYR) = 0
            END DO
         END DO
      END DO

!     DETERMINE CAPACITY FACTOR AT EACH LOAD STEP

      DO JYR = YEAR , UNXPH
         DO ISP = 1 , EPNMSP
            VLS = EPFRST(ISP,JYR)
            JVLS = 0
            DO WHILE (VLS .GT. 0)
               JVLS = JVLS + 1
               VLSMAP(JVLS,ISP,JYR) = VLS
               VLS = EPNEXT(VLS,JYR)
            END DO
            NSTP(ISP,JYR) = JVLS
         END DO
      END DO

!     INITIALIZE HOURS PER SEASON

      DO ISP = 1 , EPNMSP
         SHOURS(ISP) = DBLE(0.0)
         SCODE(ISP) = UPRGCD(ISP)
      END DO

      DO AVLS = 1 , EPNSTP(YEAR)
         ISP = EPGECP(EPLDGR(AVLS,YEAR))
         SHOURS(ISP) = SHOURS(ISP) + EPWDTH(AVLS,YEAR) * DBLE(0.001)
      END DO

      IF (YEAR .LT. UNXPH) THEN
         TYR = MIN(CURIYR + YEAR - 1 , UNYEAR)
      ELSE
         TYR = UNYEAR
      END IF
 
      FROM_LABEL = "EP_BDSP"

      DO IP = 1 , ECP_D_DSP
         IECP = UCPDSPI(IP)

!        New and Existing Nuclear Modeled in EP$NUC

         IF (IECP .NE. WICN .AND. IECP .NE. WIAN .AND. IECP .NE. WISM) THEN
            GSYR1 = UPGSY1(IECP) - UHBSYR
            GSYRL = UPGSYL(IECP) - UHBSYR
            ITST = 0
            ITST_HTRT = 0
            OLYR = YEAR + UPPLYR(IECP)
            IF (OLYR .LT. UNXPH) THEN
               FULLYR = OLYR + CURIYR + UHBSYR - 1
            ELSE
               FULLYR = MIN(UNYEAR + UHBSYR , UNFPH + CURIYR + UHBSYR - 1)
            END IF

            DO JYR = 1, ECP_D_LCP
               CPR(JYR) = UPCPRO(IECP,JYR)
            END DO

!           Create Existing Capacity Vectors but Exclude Existing Coal Because Existing Coal is Modeled in EP$COAL
!           Existing NGBS (Natural Gas and Oil Fired Base Load Capacity) now Modeled in EP$NGBS

            IF ((EPECAP(0,IECP,YEAR) .GT. DBLE(0.0) .OR. WPTTYP(IP,NERC) .GT. 0) .AND. (UPTTYP(IECP) .GT. EX_COAL) .AND. &
!            IF ((EPECAP(0,IECP,YEAR) .GT. DBLE(0.0) .OR. WPTTYP(IP,NERC) .GT. 0) .AND. (UPTTYP(IECP) .GT. NW_COAL) .AND. &
               IECP .NE. WIEC .AND. IECP .NE. WIST) THEN

!              REVISE BOUND ON EXISTING CAPACITY VECTORS

               IF (USW_ERET .EQ. 1 .AND. YEAR .GT. UPRTLT .AND. UPTTYP(IECP) .GT. NW_COAL) THEN
                  DO IGRP = 1 , ECP_D_RET

                     HTRT_TEST = 0
                     IF (HTRT_EPGCAP(0,IGRP,IECP,NERC) .LT. EPGCAP(0,IGRP,IECP) - 0.0001) HTRT_TEST = 1
!hro                 IF (HTRT_OVR_CST(IECP) .EQ. 0.0) HTRT_TEST = 2
                     IF (HTRT_OVRQ(IECP,1) .EQ. 0.0) HTRT_TEST = 2

!                    IF (HTRT_EPGCAP(0,IGRP,IECP,NERC) .LE. 0.0001) HTRT_TEST = 2

                     IF (CURIYR+UHBSYR+UPRTLT .LT. HTRT_YEAR) HTRT_TEST = 2
                     IF (EPGCAP(0,IGRP,IECP) .LE. 0.0001) HTRT_TEST = 2

                     IF (CURCALYR .EQ. 2012 .OR. HTRT_TEST .LE. 1) &
                        WRITE(6,1773) CURIRUN, CURCALYR, CURCALYR+YEAR-1, NERC, UPTTYP(IECP), IECP, IGRP, HTRT_TEST, &
                        HTRT_UNITS(IGRP,IECP,NERC), &
                        EPGCAP(0,IGRP,IECP), HTRT_EPGCAP(0,IGRP,IECP,NERC)
 1773                FORMAT(1X,"EP_BDSP_HTRT",9(":",I5),2(":",F20.3))

                     BNDROW = 0.0
                     DO FRG = 1 , UNFRGN
                        BNDROW = BNDROW + EPGCAP(FRG,IGRP,IECP) * 0.001
                     END DO

                     IF (HTRT_TEST .LE. 1) THEN
                        BNDROW_HTRT = 0.0
                        BNDROW_FREE = 0.0
                        DO FRG = 1 , UNFRGN
                           BNDROW_HTRT = BNDROW_HTRT + HTRT_EPGCAP(FRG,IGRP,IECP,NERC) * 0.001
                           IF (HTRT_TEST .EQ. 1) THEN
                              BNDROW_FREE = BNDROW_FREE + (EPGCAP(FRG,IGRP,IECP) - HTRT_EPGCAP(FRG,IGRP,IECP,NERC)) * 0.001
                           END IF
                        END DO
                     END IF

!                     IF (BNDROW .GT. ECP_MIN) THEN
                      IF (BNDROW .GT. 0.0) THEN                     
                        COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'XX'//UPYRCD(IGRP)//'0'; call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XX:',UPYRCD(IGRP),':0:')

                        IF (HTRT_TEST .LE. 1) THEN
                           COLUMN_HTRT = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'HH'//UPYRCD(IGRP)//'0'; call makmsk(COLUMN_HTRT_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':HH:',UPYRCD(IGRP),':0:')

                           ROW_HTRT = 'O'//UPRGCD(NERC)//UPLNTCD(IECP)//'HH'//UPYRCD(IGRP)//'0'; call makmsk(ROW_HTRT_mask,':O:',UPRGCD(NERC),UPLNTCD(IECP),':HH:',UPYRCD(IGRP),':0:')
                           CALL CROWTYPE(ROW_HTRT,'E       ',ROW_HTRT_mask)
                           IF (USW_DIGIT .GT. 0)THEN
                           VALUE_HTRT = DIGITS2(BNDROW, DIGITS_PARM)
                           ELSE
                              VALUE_HTRT = BNDROW
                           END IF
                           CALL CRHS(UPRHS,ROW_HTRT,VALUE_HTRT,ROW_HTRT_mask,'EP$BDSP,1')

                           VALUE = DBLE(1.0)
                           CALL CVAL(COLUMN,ROW_HTRT,VALUE,COLUMN_mask,ROW_HTRT_mask,'EP$BDSP,2')
                           CALL CVAL(COLUMN_HTRT,ROW_HTRT,VALUE,COLUMN_HTRT_mask,ROW_HTRT_mask,'EP$BDSP,3')

                           IF (HTRT_TEST .EQ. 1) THEN
                              COLUMN_FREE = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'FF'//UPYRCD(IGRP)//'0'; call makmsk(COLUMN_FREE_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':FF:',UPYRCD(IGRP),':0:')
                              CALL CVAL(COLUMN_FREE,ROW_HTRT,VALUE,COLUMN_FREE_mask,ROW_HTRT_mask,'EP$BDSP,4')
                           END IF
                        END IF
                          
                        IF (YEAR .EQ. UPRTLT + 1) THEN
                           IF (USW_DIGIT .GT. 0)THEN
                           VALUE = DIGITS2( BNDROW , DIGITS_PARM)
                           ELSE
                              VALUE = BNDROW
                           END IF
                           CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$BDSP,5')

                           IF (HTRT_TEST .LE. 1) THEN
                              IF (USW_DIGIT .GT. 0)THEN
                              VALUE_HTRT = DIGITS2( BNDROW_HTRT , DIGITS_PARM)
                              ELSE
                                 VALUE_HTRT = BNDROW_HTRT
                              END IF
                              CALL CBND(UPBND,COLUMN_HTRT,DBLE(0.0),VALUE_HTRT,COLUMN_HTRT_mask,'EP$BDSP,6')
 
                              IF (HTRT_TEST .EQ. 1) THEN
                                 IF (USW_DIGIT .GT. 0)THEN
                                 VALUE_HTRT = DIGITS2( BNDROW_FREE , DIGITS_PARM)
                                 ELSE
                                    VALUE_HTRT = BNDROW_FREE
                                 END IF
                                 CALL CBND(UPBND,COLUMN_FREE,DBLE(0.0),VALUE_HTRT,COLUMN_FREE_mask,'EP$BDSP,7')
                              END IF
                           END IF

!                          OBJECTIVE FUNCTION

                           ROW = UPOBJ ; ROW_mask=UPOBJ
                           IFPH2 = UNFPH
                           DO JYR = 1 , IFPH2
                              FOM(JYR) = EPGFOM(IGRP,IECP) * UPGNPD(CURIYR + JYR - 1)
!                             YEAR 1 FOM IS A SUNK COST SO SET = 0
                              IF (JYR .EQ. 1)FOM(JYR) = 0.0
                           END DO
                           VALUE = PVV(FOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))* PWF(DBLE(EPDSCRT),YEAR-1) - DBLE(IGRP - 1)

!                          REDUCE BY HURDLE RATE

                           VALUE = VALUE * DBLE(1.0 - UPRETFHU)
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                           VALUE = MAX( VALUE , ECP_MIN)
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,8')

                           IF (HTRT_TEST .LE. 1) THEN

!                             USE RETROFIT RISK PREMIUM, IF SWITCH IS ON

                              IF (USW_RTRSK .LE. 0)THEN
                                 RETIRT = EPUIRT
                                 RETROR = EPUROR
                                 RETFPE = EPUFPE
                                 RETCRE = EPUCRE
                              ELSE
                                 RETIRT = EPUIRTR
                                 RETROR = EPURORR
                                 RETFPE = EPUFPER
                                 RETCRE = EPUCRER
                              END IF

                              TXBOOK = 0.0
                              FNBOOK = 0.0
                              CAPUTIL = 0.0
!hro                          HTRT_CST_87 = ((DBLE(HTRT_UNITS(IGRP,IECP,NERC)) * HTRT_OVR_CST(IECP)) / (HTRT_EPGCAP(0,IGRP,IECP,NERC) * 0.001)) / &
!hro                             UPGNPD(HTRT_DOLLAR_YEAR-UHBSYR)
                              HTRT_CST_87 = ((DBLE(HTRT_UNITS(IGRP,IECP,NERC)) * HTRT_OVRQ(IECP,1)) / (HTRT_EPGCAP(0,IGRP,IECP,NERC) * 0.001))

                              CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,YEAR,HTRT_CST_87,UPSCPR,&
                                 UPCAPD(1,IECP),UPGNPD,RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)

                              URATIO = TXBOOK / FNBOOK
                              CAPUNSTL = FNBOOK

!                             Assume New Units for Retrofit Tax Life

                              STXLF = UPSTXLF(2)

                              IFPH2 = UNFPH
                              ROW = UPOBJ ; ROW_mask=UPOBJ

                              CALL EPNBLD(DBLE(RETROR),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)
                              HTRT_INV_CST = CAPUNSTL * CAPUTIL / CRF(DBLE(EPUTDSCRT),IFPH2) * PWF(DBLE(EPUTDSCRT),YEAR-1)

                              VALUE_HTRT = VALUE + HTRT_INV_CST
                              VALUE_HTRT = MAX(VALUE_HTRT,ECP_MIN)
                              CALL CVAL(COLUMN_HTRT,ROW,VALUE_HTRT,COLUMN_HTRT_mask,ROW_mask,'EP$BDSP,9')

                              WRITE(6,2913) CURIRUN, CURCALYR, CURCALYR+YEAR-1, NERC, IECP, IGRP, &
                                 VALUE_HTRT, VALUE, HTRT_INV_CST
 2913                         FORMAT(1X,"EP_BDSP_OBJ",6(":",I5),3(":",F20.6))

                           END IF

                           IF (HTRT_TEST .EQ. 1) THEN
                              VALUE = MIN(VALUE, VALUE_HTRT)
                              VALUE = MAX( VALUE - 0.5 * ECP_MIN , 0.5 * ECP_MIN)
                              CALL CVAL(COLUMN_FREE,ROW,VALUE,COLUMN_FREE_mask,ROW_mask,'EP$BDSP,10')
                           END IF

                        END IF

!                       CAPACITY BALANCE ROW

                        TOT_FLRG = 0.0
                        SHR_FLRG = 0.0
                        IF (EPGCAP(0,IGRP,IECP) .GT. 0.0) THEN
                           DO FRG = 1, UNFRGN
                              IF ((FRG_EMM_MAP(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 0) .OR. (FL_CNXT_CST(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 1) .OR. EPGCAP(FRG,IGRP,IECP) .GT. 0.0) THEN
                                 SHR_FLRG(FRG) = EPGCAP(FRG,IGRP,IECP)
                                 IF (UPVTYP(IECP) .EQ. 1) THEN
                                    SHR_FLRG(FRG) = MAX(SHR_FLRG(FRG) , 1.0)
                                 END IF
                                 TOT_FLRG = TOT_FLRG + SHR_FLRG(FRG)
								 
								 WRITE(18,2918) CURIRUN, CURCALYR,YEAR, NERC, FRG,IECP, IGRP, &
                                 EPGCAP(FRG,IGRP,IECP), SHR_FLRG(FRG), TOT_FLRG
 2918                            FORMAT(1X,"SHR_EPG",7(":",I5),3(":",F20.6))
                              END IF
                           END DO
                        END IF
!
                        DO FRG = 1 , UNFRGN
                           IF (SHR_FLRG(FRG) .GT. 0.0) THEN
                              DO ISP = 1 , EPNMSP
                                 ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'X' //EPFLCD(FRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':X:' ,EPFLCD(FRG),SCODE(ISP),UPYRCD(YEAR))
!                                 IF (ITST .EQ. 0) THEN
                                    CALL CROWTYPE(ROW,'L       ',ROW_mask)
                                    CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BDSP,11')
                                    IF (ISP .EQ. EPNMSP) ITST = 1
!                                 END IF
                                 VALUE = EP_SP_CAP_FAC(ISP,IECP,YEAR) * SHR_FLRG(FRG) / TOT_FLRG
                                 VALUE = -MAX(DIGITS2( VALUE , DIGITS_PARM) , 0.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,12')
                              END DO

                              IF (IECP .EQ. WIPC .OR. IECP .EQ. WIIG .OR. IECP .EQ. WIIS .OR.IECP .EQ. WIOC .OR. IECP .EQ. WII2 .OR. IECP .EQ. WIPQ ) THEN
                                 CRG = EPCLMP(FRG)

                                 CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FRG, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

!                                SUBITUMINOUS

                                 ROW = 'FDV'//EPFLCD(CRG)//'S'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_mask,':FDV:',EPFLCD(CRG),':S:',UPLNTCD(IECP),UPYRCD(YEAR))
                                 SDV_PRF = NEW_SDV_INDX(CRG)
                                 VALUE = -8.760 * 0.001 * AVG_HTRT(IECP) * UPMCF(IECP) * CMM_SDV_PRF(SDV_PRF,TYR)
                                 CALL CVAL(COLUMN,ROW,VALUE*0.1,COLUMN_mask,ROW_mask,'EP$BDSP,13')

!                                LIGNITE

                                 ROW = 'FDV'//EPFLCD(CRG)//'L'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_mask,':FDV:',EPFLCD(CRG),':L:',UPLNTCD(IECP),UPYRCD(YEAR))
                                 LDV_PRF = NEW_LDV_INDX(CRG)
                                 VALUE = -8.760 * 0.001 * AVG_HTRT(IECP) * UPMCF(IECP) * CMM_LDV_PRF(LDV_PRF,TYR)
                                 CALL CVAL(COLUMN,ROW,VALUE*0.1,COLUMN_mask,ROW_mask,'EP$BDSP,14')

                              END IF

!                             REVISE PLANNED MAINTENANCE ROW

                              IF (MUSTRUN(IECP,NERC) .GT. 0.0) THEN
                                 VALUE = - 8.760 * DBLE(UPPMRT(IECP)) * DBLE(1.0 - UPFORT(IECP)) * SHR_FLRG(FRG) / TOT_FLRG
                              ELSE
                                 VALUE = - 8.760 * DBLE(UPPMRT(IECP)) * SHR_FLRG(FRG) / TOT_FLRG
                              END IF
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              ROW = 'M'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FRG),':X:',UPYRCD(YEAR))
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,15')
                           END IF
                        END DO

                        IF (HTRT_TEST .LE. 1) THEN

                           TOT_FLRG_HTRT = 0.0
                           SHR_FLRG_HTRT = 0.0
                           IF (HTRT_EPGCAP(0,IGRP,IECP,NERC) .GT. 0.0) THEN
                              DO FRG = 1, UNFRGN
                                 IF ((FRG_EMM_MAP(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 0) .OR. (FL_CNXT_CST(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 1) .OR. HTRT_EPGCAP(FRG,IGRP,IECP,NERC) .GT. 0.0) THEN
                                    SHR_FLRG_HTRT(FRG) = HTRT_EPGCAP(FRG,IGRP,IECP,NERC)
                                    IF (UPVTYP(IECP) .EQ. 1) THEN
                                       SHR_FLRG_HTRT(FRG) = MAX(SHR_FLRG_HTRT(FRG) , 1.0)
                                    END IF
                                    TOT_FLRG_HTRT = TOT_FLRG_HTRT + SHR_FLRG_HTRT(FRG)
                                 END IF
                              END DO
                           END IF
!
                           DO FRG = 1 , UNFRGN
                              IF (SHR_FLRG_HTRT(FRG) .GT. 0.0) THEN
                                 DO ISP = 1 , EPNMSP
                                    ROW_HTRT = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'H' //EPFLCD(FRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':H:' ,EPFLCD(FRG),SCODE(ISP),UPYRCD(YEAR))
!                                    IF (ITST_HTRT .EQ. 0) THEN
                                       CALL CROWTYPE(ROW_HTRT,'L       ',ROW_HTRT_mask)
                                       CALL CRHS(UPRHS,ROW_HTRT,DBLE(0.0),ROW_HTRT_mask,'EP$BDSP,16')
                                       IF (ISP .EQ. EPNMSP) ITST_HTRT = 1
!                                    END IF
                                    VALUE_HTRT = EP_SP_CAP_FAC(ISP,IECP,YEAR) * SHR_FLRG_HTRT(FRG) / TOT_FLRG_HTRT
                                    IF (USW_DIGIT .GT. 0)THEN
                                    VALUE_HTRT = -MAX(DIGITS2( VALUE_HTRT , DIGITS_PARM) , 0.0)
                                    ELSE
                                       VALUE_HTRT = -MAX(VALUE_HTRT , 0.0)
                                    END IF
                                    CALL CVAL(COLUMN_HTRT,ROW_HTRT,VALUE_HTRT,COLUMN_HTRT_mask,ROW_HTRT_mask,'EP$BDSP,17')
                                 END DO

                                 IF (IECP .EQ. WIPC .OR. IECP .EQ. WIIG .OR. IECP .EQ. WIIS .OR. IECP .EQ. WIOC .OR. IECP .EQ. WII2 .OR. IECP .EQ. WIPQ) THEN
                                    CRG = EPCLMP(FRG)

                                    CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FRG, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

!                                   SUBITUMINOUS

                                    ROW_HTRT = 'FDV'//EPFLCD(CRG)//'S'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':FDV:',EPFLCD(CRG),':S:',UPLNTCD(IECP),UPYRCD(YEAR))
                                    SDV_PRF = NEW_SDV_INDX(CRG)
                                    VALUE_HTRT = -8.760 * 0.001 * AVG_HTRT(IECP) * UPMCF(IECP) * CMM_SDV_PRF(SDV_PRF,TYR)
                                    CALL CVAL(COLUMN_HTRT,ROW_HTRT,VALUE_HTRT*0.1,COLUMN_HTRT_mask,ROW_HTRT_mask,'EP$BDSP,18')

!                                   LIGNITE

                                    ROW_HTRT = 'FDV'//EPFLCD(CRG)//'L'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':FDV:',EPFLCD(CRG),':L:',UPLNTCD(IECP),UPYRCD(YEAR))
                                    LDV_PRF = NEW_LDV_INDX(CRG)
                                    VALUE_HTRT = -8.760 * 0.001 * AVG_HTRT(IECP) * UPMCF(IECP) * CMM_LDV_PRF(LDV_PRF,TYR)
                                    CALL CVAL(COLUMN_HTRT,ROW_HTRT,VALUE_HTRT*0.1,COLUMN_HTRT_mask,ROW_HTRT_mask,'EP$BDSP,19')

                                 END IF

!                                REVISE PLANNED MAINTENANCE ROW_HTRT

                                 VALUE_HTRT = - 8.760 * DBLE(UPPMRT(IECP)) * SHR_FLRG_HTRT(FRG) / TOT_FLRG_HTRT
                                 IF (USW_DIGIT .GT. 0)VALUE_HTRT = DIGITS2( VALUE_HTRT , DIGITS_PARM)
                                 ROW_HTRT = 'M'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':M:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FRG),':X:',UPYRCD(YEAR))
                                 CALL CVAL(COLUMN_HTRT,ROW_HTRT,VALUE_HTRT,COLUMN_HTRT_mask,ROW_HTRT_mask,'EP$BDSP,20')
                              END IF
                           END DO
                        END IF

                        IF (HTRT_TEST .EQ. 1) THEN

                           TOT_FLRG_FREE = 0.0
                           SHR_FLRG_FREE = 0.0
                           IF ((EPGCAP(0,IGRP,IECP) - HTRT_EPGCAP(0,IGRP,IECP,NERC)) .GT. 0.0) THEN
                              DO FRG = 1, UNFRGN
                                 IF ((FRG_EMM_MAP(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 0) .OR. (FL_CNXT_CST(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 1) .OR. &
                                    (EPGCAP(FRG,IGRP,IECP) - HTRT_EPGCAP(FRG,IGRP,IECP,NERC)) .GT. 0.0) THEN
                                    SHR_FLRG_FREE(FRG) = (EPGCAP(FRG,IGRP,IECP) - HTRT_EPGCAP(FRG,IGRP,IECP,NERC))
                                    IF (UPVTYP(IECP) .EQ. 1) THEN
                                       SHR_FLRG_FREE(FRG) = MAX(SHR_FLRG_FREE(FRG) , 1.0)
                                    END IF
                                    TOT_FLRG_FREE = TOT_FLRG_FREE + SHR_FLRG_FREE(FRG)
                                 END IF
                              END DO
                           END IF
!
                           DO FRG = 1 , UNFRGN
                              IF (SHR_FLRG_FREE(FRG) .GT. 0.0) THEN
                                 DO ISP = 1 , EPNMSP
                                    ROW_HTRT = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'H' //EPFLCD(FRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':H:' ,EPFLCD(FRG),SCODE(ISP),UPYRCD(YEAR))
                                    VALUE_HTRT = EP_SP_CAP_FAC(ISP,IECP,YEAR) * SHR_FLRG_FREE(FRG) / TOT_FLRG_FREE
                                    IF (USW_DIGIT .GT. 0)THEN
                                    VALUE_HTRT = -MAX(DIGITS2( VALUE_HTRT , DIGITS_PARM) , 0.0)
                                    ELSE
                                       VALUE_HTRT = -MAX(VALUE_HTRT , 0.0)
                                    END IF
                                    CALL CVAL(COLUMN_FREE,ROW_HTRT,VALUE_HTRT,COLUMN_FREE_mask,ROW_HTRT_mask,'EP$BDSP,21')
                                 END DO

                                 IF (IECP .EQ. WIPC .OR. IECP .EQ. WIIG .OR. IECP .EQ. WIIS .OR. IECP .EQ. WIOC .OR. IECP .EQ. WII2 .OR. IECP .EQ. WIPQ ) THEN
                                    CRG = EPCLMP(FRG)

                                    CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FRG, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

!                                   SUBITUMINOUS

                                    ROW_HTRT = 'FDV'//EPFLCD(CRG)//'S'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':FDV:',EPFLCD(CRG),':S:',UPLNTCD(IECP),UPYRCD(YEAR))
                                    SDV_PRF = NEW_SDV_INDX(CRG)
                                    VALUE_HTRT = -8.760 * 0.001 * AVG_HTRT_MOD(IECP) * UPMCF(IECP) * CMM_SDV_PRF(SDV_PRF,TYR)
                                    CALL CVAL(COLUMN_FREE,ROW_HTRT,VALUE_HTRT*0.1,COLUMN_FREE_mask,ROW_HTRT_mask,'EP$BDSP,22')

!                                   LIGNITE

                                    ROW_HTRT = 'FDV'//EPFLCD(CRG)//'L'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':FDV:',EPFLCD(CRG),':L:',UPLNTCD(IECP),UPYRCD(YEAR))
                                    LDV_PRF = NEW_LDV_INDX(CRG)
                                    VALUE_HTRT = -8.760 * 0.001 * AVG_HTRT_MOD(IECP) * UPMCF(IECP) * CMM_LDV_PRF(LDV_PRF,TYR)
                                    CALL CVAL(COLUMN_FREE,ROW_HTRT,VALUE_HTRT*0.1,COLUMN_FREE_mask,ROW_HTRT_mask,'EP$BDSP,23')

                                 END IF

!                                REVISE PLANNED MAINTENANCE ROW_HTRT

                                 VALUE_HTRT = - 8.760 * DBLE(UPPMRT(IECP)) * SHR_FLRG_FREE(FRG) / TOT_FLRG_FREE
                                 IF (USW_DIGIT .GT. 0)VALUE_HTRT = DIGITS2( VALUE_HTRT , DIGITS_PARM)
                                 ROW_HTRT = 'M'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':M:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FRG),':X:',UPYRCD(YEAR))
                                 CALL CVAL(COLUMN_FREE,ROW_HTRT,VALUE_HTRT,COLUMN_FREE_mask,ROW_HTRT_mask,'EP$BDSP,24')
                              END IF
                           END DO
                        END IF

!                       CREATE ROW/COLUMN INTERSECTIONS FOR EXISTING DISPATCHABLE CAPACITY COLUMN_HTRTS

!                       RESERVE MARGIN ROW

                        ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
                        VALUE = DBLE(1.0)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,25')
                        IF (HTRT_TEST .LE. 1) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$BDSP,26')
                        IF (HTRT_TEST .EQ. 1) CALL CVAL(COLUMN_FREE,ROW,VALUE,COLUMN_FREE_mask,ROW_mask,'EP$BDSP,27')

!                       MAXIMUM RETIREMENTS ROW

                        IF (UPRETRAT .GT. 0.0 .AND. YEAR .EQ. UPRTLT+1 .AND. USW_ERET .EQ. 1) THEN
                           ROW = 'R'//UPRGCD(NERC)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(NERC),':MXRET0:')
                           VALUE = DBLE(1.0)
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,28')
                           IF (HTRT_TEST .LE. 1) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$BDSP,29')
                           IF (HTRT_TEST .EQ. 1) CALL CVAL(COLUMN_FREE,ROW,VALUE,COLUMN_FREE_mask,ROW_mask,'EP$BDSP,30')
                        END IF

!                       TOTAL CAPACITY ROW BY REGION

                        ROW = 'TOTCAP'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':TOTCAP:',UPRGCD(NERC),UPYRCD(YEAR))
                        CALL CROWTYPE(ROW,'N       ',ROW_mask)
                        VALUE = DBLE(1.0)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,31')
                        IF (HTRT_TEST .LE. 1) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$BDSP,32')
                        IF (HTRT_TEST .EQ. 1) CALL CVAL(COLUMN_FREE,ROW,VALUE,COLUMN_FREE_mask,ROW_mask,'EP$BDSP,33')

!                       TOTAL CAPACITY ROW BY REGION AND PLANT TYPE

                        ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'CAP'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':CAP:',UPYRCD(YEAR))
                        VALUE = DBLE(1.0)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,34')
                        IF (HTRT_TEST .LE. 1) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$BDSP,35')
                        IF (HTRT_TEST .EQ. 1) CALL CVAL(COLUMN_FREE,ROW,VALUE,COLUMN_FREE_mask,ROW_mask,'EP$BDSP,36')
                     END IF
                  END DO
               END IF

!              EPECAP is all capacity EPGCAP is all retirable capacity EPECAP_MR is Must Run Capacity

               BNDROW = 0.0
               TMP_CAP = 0.0
               DO FRG = 1 , UNFRGN
                  IF (UPTTYP(IECP) .GT. NW_COAL) THEN
                     BNDROW = BNDROW + (EPECAP(FRG,IECP,YEAR)* DBLE(0.001) - EPECAP_MR(FRG,IECP,YEAR) * DBLE(0.001))
                     TMP_CAP(FRG) = TMP_CAP(FRG) + (EPECAP(FRG,IECP,YEAR)* DBLE(0.001) - EPECAP_MR(FRG,IECP,YEAR) * DBLE(0.001))
                     TMP_CAP(0) = TMP_CAP(0) + (EPECAP(0,IECP,YEAR) - EPECAP_MR(0,IECP,YEAR)) * DBLE(0.001)
                     IF (YEAR .GT. UPRTLT) THEN
                        DO IGRP = 1 , RET_GRP(IECP)
                           BNDROW = BNDROW - EPGCAP(FRG,IGRP,IECP) * DBLE(0.001)
                           TMP_CAP(FRG) = TMP_CAP(FRG) - EPGCAP(FRG,IGRP,IECP) * DBLE(0.001)
                           TMP_CAP(0) = TMP_CAP(0) - EPGCAP(0,IGRP,IECP) * DBLE(0.001)
                        END DO
                     END IF
                  END IF
               END DO
               IF (BNDROW .LT. ECP_MIN * 0.01) BNDROW = 0
               IF (UPVTYP(IECP) .EQ. 1)  BNDROW = MAX(BNDROW , ECP_MIN)
                
               BNDROW_MR = 0.0
               TMP_CAP_MR = 0.0
               DO FRG = 1 , UNFRGN
                  IF (UPTTYP(IECP) .GT. NW_COAL) THEN
                     BNDROW_MR = BNDROW_MR + EPECAP_MR(FRG,IECP,YEAR) * 0.001
                     TMP_CAP_MR(FRG) = EPECAP_MR(FRG,IECP,YEAR) * 0.001
                     TMP_CAP_MR(0) = EPECAP_MR(0,IECP,YEAR) * 0.001
                  END IF
               END DO

!              NEXT REVISE BOUND ON EXISTING CAPACITY VECTORS NOT IN A REIREMENT GROUP

               IF (BNDROW .GT. 0.0) THEN
                  COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XXX:',UPYRCD(YEAR))
                  IF (USW_DIGIT .GT. 0)THEN
                  VALUE = DIGITS2( BNDROW , DIGITS_PARM)
                  ELSE
                     VALUE = BNDROW
                  END IF
                  CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$BDSP,37')
               END IF

               IF (BNDROW_MR .GT. 0.0) THEN
                  COLUMN_MR = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'_MR'//UPYRCD(YEAR); call makmsk(COLUMN_MR_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':_MR:',UPYRCD(YEAR))
                  IF (USW_DIGIT .GT. 0)THEN
                  VALUE = DIGITS2( BNDROW_MR , DIGITS_PARM)
                  ELSE
                     VALUE = BNDROW_MR
                  END IF
                  CALL CBND(UPBND,COLUMN_MR,VALUE,VALUE,COLUMN_MR_mask,'EP$BDSP,38')
               END IF


!              OBJECTIVE FUNCTION

               ROW = UPOBJ ; ROW_mask=UPOBJ
               IF (YEAR .LT. UNXPH) THEN
                  VALUE = EPFOM(IECP) * UPGNPD(YEAR + CURIYR - 1) * PWF(DBLE(EPDSCRT),YEAR)
!                 YEAR 1 FOM IS A SUNK COST SO SET = 0
                  IF (YEAR .EQ. 1)VALUE = DBLE(0.0)
               ELSE
                  IFPH2 = UNFPH - YEAR + 1
                  DO JYR = 1 , IFPH2
                     FOM(JYR) = EPFOM(IECP) * UPGNPD(CURIYR + JYR + YEAR - 2)
                  END DO
                  VALUE = PVV(FOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),YEAR-1)
               END IF
               VALUE = MAX( VALUE , ECP_MIN)
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               IF (BNDROW .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,39')
               IF (BNDROW_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BDSP,40')

!              CAPACITY BALANCE ROW

               TOT_FLRG = 0.0
               SHR_FLRG = 0.0
               IF (BNDROW .GT. ECP_MIN .OR. (BNDROW .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 0)) THEN
                  DO FRG = 1 , UNFRGN
                     IF ((FRG_EMM_MAP(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 0) .OR. (FL_CNXT_CST(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 1) .OR. TMP_CAP(FRG) .GT. 0.0) THEN
                        SHR_FLRG(FRG) = TMP_CAP(FRG)
                        IF (UPVTYP(IECP) .EQ. 1) THEN
                           SHR_FLRG(FRG) = MAX(SHR_FLRG(FRG) , 1.0)
                        END IF
                        TOT_FLRG = TOT_FLRG + SHR_FLRG(FRG)
						
						WRITE(18,2920) CURIRUN, CURCALYR,YEAR, NERC, FRG,IECP, 1, &
                        EPGCAP(FRG,1,IECP), SHR_FLRG(FRG), TOT_FLRG, TMP_CAP(FRG),BNDROW, EPECAP(FRG,IECP,YEAR),EPECAP_MR(FRG,IECP,YEAR)
2920				    FORMAT(1X,"SHR_EP1",7(":",I5),7(":",F20.6))
                     END IF
                  END DO
               ELSE IF (BNDROW .EQ. ECP_MIN) THEN             !set when UPVTYP=1 and no existing capacity
                  DO FRG = 1 , UNFRGN
!                     IF ((FRG_EMM_MAP(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 0) .OR. (FL_CNXT_CST(NERC,FRG) .GT. 0.0 .AND. UPVTYP(IECP) .EQ. 1) .OR. TMP_CAP(FRG) .GT. 0.0) THEN
!                        SHR_FLRG(FRG) = TMP_CAP(FRG)
!						IF (UPVTYP(IECP) .EQ. 1) THEN
!                           SHR_FLRG(FRG) = MAX(SHR_FLRG(FRG) , 1.0)
!                        END IF
				  
				  		WRITE(18,2915) CURIRUN, CURCALYR,YEAR, NERC, FRG,IECP, 1, &
                        EPGCAP(FRG,1,IECP), ECP_MIN, TOT_FLRG+ECP_MIN, TMP_CAP(FRG),BNDROW, EPECAP(FRG,IECP,YEAR),EPECAP_MR(FRG,IECP,YEAR), FL_CNXT_CST(NERC,FRG), FRG_EMM_MAP(NERC,FRG), UPVTYP(IECP)
2915				    FORMAT(1X,"SHR_EP3",7(":",I5),10(":",F22.10))
				      IF ((FL_CNXT_CST(NERC,FRG) .GT. 0.0) .AND. (TMP_CAP(FRG) .LT. 0.001*EPECAP(FRG,IECP,YEAR) .OR. BNDROW .EQ. ECP_MIN .OR. BNDROW .LE. 0.00001)) THEN
                        SHR_FLRG(FRG) = ECP_MIN
                        TOT_FLRG = TOT_FLRG + SHR_FLRG(FRG)
						
						WRITE(18,2919) CURIRUN, CURCALYR,YEAR, NERC, FRG,IECP, 1, &
                        EPGCAP(FRG,1,IECP), SHR_FLRG(FRG), TOT_FLRG, TMP_CAP(FRG),BNDROW, EPECAP(FRG,IECP,YEAR),EPECAP_MR(FRG,IECP,YEAR), FL_CNXT_CST(NERC,FRG), FRG_EMM_MAP(NERC,FRG), UPVTYP(IECP)
2919				    FORMAT(1X,"SHR_EP2",7(":",I5),10(":",F22.10))
                     END IF
                  END DO
               END IF
!
               DO FRG = 1 , UNFRGN
                  IF (SHR_FLRG(FRG) .GT. 0.0) THEN
                     DO ISP = 1 , EPNMSP
                        ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'X' //EPFLCD(FRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':X:' ,EPFLCD(FRG),SCODE(ISP),UPYRCD(YEAR))
                        CALL CROWTYPE(ROW,'L       ',ROW_mask)
                        CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BDSP,41')
                        VALUE = EP_SP_CAP_FAC(ISP,IECP,YEAR) * SHR_FLRG(FRG) / TOT_FLRG
                        IF (USW_DIGIT .GT. 0)THEN
                        VALUE = -MAX(DIGITS2( VALUE , DIGITS_PARM) , 0.0)
                        ELSE
                           VALUE = -MAX(VALUE , 0.0)
                        END IF
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,42')
                     END DO

                     IF (IECP .EQ. WIPC .OR. IECP .EQ. WIIG .OR. IECP .EQ. WIIS .OR. IECP .EQ. WIOC .OR. IECP .EQ. WII2 .OR. IECP .EQ. WIPQ ) THEN
                        CRG = EPCLMP(FRG)

                        CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FRG, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

!                       SUBITUMINOUS DIVERSITY

                        ROW = 'FDV'//EPFLCD(CRG)//'S'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_mask,':FDV:',EPFLCD(CRG),':S:',UPLNTCD(IECP),UPYRCD(YEAR))
                        SDV_PRF = NEW_SDV_INDX(CRG)
                        VALUE = -8.760 * 0.001 * AVG_HTRT(IECP) * UPMCF(IECP) * CMM_SDV_PRF(SDV_PRF,TYR)
                        CALL CVAL(COLUMN,ROW,VALUE*0.1,COLUMN_mask,ROW_mask,'EP$BDSP,43')

!                       LIGNITE DIVERSITY

                        ROW = 'FDV'//EPFLCD(CRG)//'L'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_mask,':FDV:',EPFLCD(CRG),':L:',UPLNTCD(IECP),UPYRCD(YEAR))
                        LDV_PRF = NEW_LDV_INDX(CRG)
                        VALUE = -8.760 * 0.001 * AVG_HTRT(IECP) * UPMCF(IECP) * CMM_LDV_PRF(LDV_PRF,TYR)
                        CALL CVAL(COLUMN,ROW,VALUE*0.1,COLUMN_mask,ROW_mask,'EP$BDSP,44')
                     END IF

!                    REVISE PLANNED MAINTENANCE ROW

                     VALUE = - 8.760 * DBLE(UPPMRT(IECP)) * SHR_FLRG(FRG) / TOT_FLRG
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     ROW = 'M'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FRG),':X:',UPYRCD(YEAR))
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,45')
                  END IF
               END DO

               IF (BNDROW_MR .GT. 0.0) THEN
                  TOT_FLRG_MR = 0.0
                  DO FRG = 1 , UNFRGN
                     IF (TMP_CAP_MR(FRG) .GT. 0.0) THEN
                        SHR_FLRG_MR(FRG) = TMP_CAP_MR(FRG)
                        SHR_FLRG_MR(FRG) = MAX(SHR_FLRG_MR(FRG) , 0.0001)
                        TOT_FLRG_MR = TOT_FLRG_MR + SHR_FLRG_MR(FRG)
                     ELSE
                        SHR_FLRG_MR(FRG) = 0.0
                     END IF
                  END DO
!
                  DO FRG = 1 , UNFRGN
                     IF (TMP_CAP_MR(FRG) .GT. 0.0) THEN
                        DO ISP = 1 , EPNMSP
                           ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'M' //EPFLCD(FRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':M:' ,EPFLCD(FRG),SCODE(ISP),UPYRCD(YEAR))
                           CALL CROWTYPE(ROW,'L       ',ROW_mask)
                           CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BDSP,46')
                           VALUE = EP_SP_CAP_FAC(ISP,IECP,YEAR) * SHR_FLRG_MR(FRG) / TOT_FLRG_MR
                           IF (USW_DIGIT .GT. 0)THEN
                           VALUE = -MAX(DIGITS2( VALUE , DIGITS_PARM) , 0.0)
                           ELSE
                              VALUE = -MAX(VALUE , 0.0)
                           END IF
                           CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BDSP,47')
                        END DO

                        IF (IECP .EQ. WIPC .OR. IECP .EQ. WIIG .OR. IECP .EQ. WIIS .OR. IECP .EQ. WIOC .OR. IECP .EQ. WII2 .OR. IECP .EQ. WIPQ) THEN
                           CRG = EPCLMP(FRG)

                           CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FRG, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

!                          SUBITUMINOUS DIVERSITY

                           ROW = 'FDV'//EPFLCD(CRG)//'S'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_mask,':FDV:',EPFLCD(CRG),':S:',UPLNTCD(IECP),UPYRCD(YEAR))
                           SDV_PRF = NEW_SDV_INDX(CRG)
                           VALUE = -8.760 * 0.001 * AVG_HTRT_MR(IECP) * UPMCF(IECP) * CMM_SDV_PRF(SDV_PRF,TYR)
                           CALL CVAL(COLUMN_MR,ROW,VALUE*0.1,COLUMN_MR_mask,ROW_mask,'EP$BDSP,48')

!                          LIGNITE DIVERSITY

                           ROW = 'FDV'//EPFLCD(CRG)//'L'//UPLNTCD(IECP)//UPYRCD(YEAR); call makmsk(ROW_mask,':FDV:',EPFLCD(CRG),':L:',UPLNTCD(IECP),UPYRCD(YEAR))
                           LDV_PRF = NEW_LDV_INDX(CRG)
                           VALUE = -8.760 * 0.001 * AVG_HTRT_MR(IECP) * UPMCF(IECP) * CMM_LDV_PRF(LDV_PRF,TYR)
                           CALL CVAL(COLUMN_MR,ROW,VALUE*0.1,COLUMN_MR_mask,ROW_mask,'EP$BDSP,49')
                        END IF

!                       REVISE PLANNED MAINTENANCE ROW

                        VALUE = - 8.760 * DBLE(UPPMRT(IECP)) * SHR_FLRG_MR(FRG) / TOT_FLRG_MR
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        ROW = 'M'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FRG),':X:',UPYRCD(YEAR))
                        CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BDSP,50')
                     END IF
                  END DO
               END IF

!              CREATE ROW/COLUMN INTERSECTIONS FOR EXISTING DISPATCHABLE CAPACITY COLUMNS

!              RESERVE MARGIN ROW

               ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
               VALUE = DBLE(1.0)
               IF (BNDROW .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,51')
               IF (BNDROW_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BDSP,52')

!              TOTAL CAPACITY ROW BY REGION

               ROW = 'TOTCAP'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':TOTCAP:',UPRGCD(NERC),UPYRCD(YEAR))
               CALL CROWTYPE(ROW,'N       ',ROW_mask)
               VALUE = DBLE(1.0)
               IF (BNDROW .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,53')
               IF (BNDROW_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BDSP,54')

!              TOTAL CAPACITY ROW BY REGION AND PLANT TYPE

               ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'CAP'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':CAP:',UPYRCD(YEAR))
               VALUE = DBLE(1.0)
               IF (BNDROW .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,55')
               IF (BNDROW_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BDSP,56')

!              MAXIMUM RETIREMENTS ROW

               IF (USW_ERET .EQ. 1 .AND. UPRETRAT .GT. 0.0 .AND. YEAR .EQ. UPRTLT + 1) THEN
                  ROW = 'R'//UPRGCD(NERC)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(NERC),':MXRET0:')
                  VALUE = DBLE(1.0)
                  IF (BNDROW .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,57')
                  IF (BNDROW_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BDSP,58')
               END IF
            END IF

!           DETERMINE PRESENT VALUE OF PRODUCTION TAX CREDIT SUBSIDIES

            IF ((UPGSUB(IECP) .GT. 0.0 .AND. (CURIYR + OLYR - 1) .GE. GSYR1 .AND. (CURIYR + OLYR - 1) .LE. GSYRL) .OR.  &
                (UPGSUBPT(IECP) .GT. 0 .AND. UPGSUBYR(IECP,min(MNUMYR , CURIYR + OLYR -1)) .GT. 0.0)) THEN
               DO JYR = 1 , UPGSYR(IECP)
                  IF (UPGSUBPT(IECP) .LE. 0) THEN
                     SOM(JYR) = (UPGSUB(IECP) * 8.76 * CFCPLT(NERC,IP))
                  ELSE
!                    IF (OLYR .LT. UNXPH)THEN
                        SOM(JYR) = (UPGSUBYR(IECP,min(MNUMYR , CURIYR + OLYR - 1)) * 8.76 * CFCPLT(NERC,IP))
!                    ELSE
!                       SOM(JYR) = (UPGSUBYR(IECP,min(MNUMYR , JYR + CURIYR + OLYR - 2)) * 8.76 * CFCPLT(NERC,IP))
!                    END IF
                  END IF

!                 CHECK IF PTC IS CAPPED

                  IF (UPGSMX(IECP) .GT. 0) SOM(JYR) = MIN(SOM(JYR),UPGSMX(IECP))

!                 IF PTC IS REAL, THEN APPLY DEFLATOR

                  IF (UPGSTY(IECP) .LE. 0) SOM(JYR) = SOM(JYR) * UPGNPD(JYR + CURIYR + OLYR - 2)

!                 ADJUST FOR TAX BENEFIT

                  SOM(JYR) = SOM(JYR) / (1.0 - UPTXRT)
                  IF (YEAR .EQ. 1) SOML(JYR) = SOM(JYR) / (8.76 * CFCPLT(NERC,IP))
               END DO
!
               PV$SOM = PVV(SOM,ECP_D_FPH,UPGSYR(IECP), DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR - 1)
               IF (YEAR .EQ. 1) PV$SOML = PVV(SOML,ECP_D_FPH,UPGSYR(IECP), DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR - 1)
            ELSE
               PV$SOM = 0.0
               IF (YEAR .EQ. 1) PV$SOML = 0.0
            END IF

!           CHECK FOR TIME-DEPENDENT DEBT/EQUITY SUBSIDIES

            CALL EP$SUBFIN(IECP,OLYR,CSTDTADJ,CSTEQADJ,SHRDTADJ)

!           DETERMINE PRESENT VALUE OF CO2 SEQUESTRATION CREDIT

            IF (UPSEQCAS .GT. 0 .AND. UPPCEF(IECP) .GT. 0.0 .AND. OLYR .LE. UNXPH) THEN
               SEQBNS = 0.0
               IF (OLYR .LE. UNXPH)THEN
                  DO JYR = 1 , UPSEQNYR
                     KYR = CURIYR + OLYR + JYR - 2

                     CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, IECP, MIN(OLYR+JYR-1,UNXPH), AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                     IF (IECP .EQ. WIIS .OR. IECP .EQ. WIPQ)THEN
                        CRBCNT = ECLEL(MIN(UNYEAR,KYR))
                     ELSE
                        CRBCNT = ENGEL(MIN(UNYEAR,KYR))
                     END IF
                     IF ((TAX_FLAG /= 0) .OR. (PERMIT_FLAG /= 0))THEN
                        IF (KYR .LE. UNYEAR)THEN
                           CARFEE = (EMETAX(2,KYR) * 1000.0) * UPGNPD(KYR)
                        ELSE
                           CARFEE = (EMETAX(2,UNYEAR) * 1000.0) * UPCARGRW ** (KYR - UNYEAR) * UPGNPD(KYR)
                        END IF
                     ELSE
                        CARFEE = 0.0
                     END IF
                     CRD(JYR) = CFCPLT(NERC,IP) * 8.76 * (AVG_HTRT(IECP) / 1000000.0) * CRBCNT *  UPPCEF(IECP) * UPSEQBYR(MIN(MNUMYR,KYR)) * CARFEE
                     BNS(JYR) = CFCPLT(NERC,IP) * 8.76 * (AVG_HTRT(IECP) / 1000000.0) * CRBCNT *  UPPCEF(IECP) * UPSEQBYR(MIN(MNUMYR,KYR))
                     SEQBNS = SEQBNS + BNS(JYR)
                     IF (YEAR .EQ. 1)THEN
                        IF (JYR .EQ. 1)THEN
                           SEQBNS1 = SEQBNS
                           SEQBNS = SEQBNS - SEQBNS1
                        END IF
                     END IF

!                    if (nerc .eq. 9 .and. iecp .eq. wiis)write(6,1234) curiyr+1989,1989+ JYR + CURIYR + OLYR - 2,nerc,uplntcd(iecp),  &
!                            CFCPLT(NERC,IP) , AVG_HTRT(IECP) , CRBCNT ,  &
!                            UPPCEF(IECP) , UPSEQBYR(JYR + CURIYR + OLYR - 2) ,  &
!                            (EMETAX(2,MIN(UNYEAR,JYR + CURIYR + OLYR - 2)) * 1000.0) , UPGNPD(JYR + CURIYR + OLYR - 2),crd(jyr),seqbns
!1234                format(1h ,'!seqcrd',i4,i5,i3,a3,9f10.3)

                     IF (YEAR .EQ. 1) CRDL(JYR) = CRD(JYR) / (8.76 * UPMCF(IP))
                  END DO
                  PV$CRD = PVV(CRD,ECP_D_FPH,UPSEQNYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR - 1)

!                 if (nerc .eq. 9 .and. iecp .eq. wiis)write(6,1234) curiyr+1989,1989 + CURIYR + OLYR - 1,nerc,uplntcd(iecp),  &
!                    PV$CRD , PVV(CRD,ECP_D_FPH,UPSEQNYR,DBLE(EPDSCRT)) , PWF(DBLE(EPDSCRT),OLYR - 1)

               ELSE

!                 IN LAST ECP PERIOD, GET "LEVELIZED" CREDIT AND LIMIT (IF ANY) FOR BONUS ALLOWANCES

                  DO JYR = 1 , UNFPH - UNXPH + 1 + UPSEQNYR
                     CRD(JYR) = DBLE(0.0)
                     BNS(JYR) = DBLE(0.0)
                     DCR(JYR) = DBLE(1.0)
                  END DO
                  DO PYR = UNXPH , UNFPH
                     DO JYR = 1 , UPSEQNYR
                        KYR = CURIYR + PYR + JYR - 2

                        CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, IECP, UNXPH, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                        IF (IECP .EQ. WIIS .OR. IECP .EQ. WIPQ)THEN
                           CRBCNT = ECLEL(MIN(UNYEAR,KYR))
                        ELSE
                           CRBCNT = ENGEL(MIN(UNYEAR,KYR))
                        END IF
                        IF ((TAX_FLAG /= 0) .OR. (PERMIT_FLAG /= 0)) THEN
                           IF (KYR .LE. UNYEAR)THEN
                              CARFEE = (EMETAX(2,KYR) * 1000.0) * UPGNPD(KYR)
                           ELSE
                              CARFEE = (EMETAX(2,UNYEAR) * 1000.0) * UPCARGRW ** (KYR - UNYEAR) * UPGNPD(KYR)
                           END IF
                        ELSE
                           CARFEE = 0.0
                        END IF
                        CRD(PYR - UNXPH + JYR) = CRD(PYR - UNXPH + JYR) + CFCPLT(NERC,IP) * 8.76 * (AVG_HTRT(IECP) / 1000000.0) * CRBCNT * UPPCEF(IECP) * UPSEQBYR(MIN(MNUMYR,KYR)) * CARFEE
                        BNS(PYR - UNXPH + JYR) = BNS(PYR - UNXPH + JYR) + CFCPLT(NERC,IP) * 8.76 * (AVG_HTRT(IECP) / 1000000.0) * CRBCNT * UPPCEF(IECP) * UPSEQBYR(MIN(MNUMYR,KYR))

!                       if (nerc .eq. 1 .and. iecp .eq. wiis)write(6,3333) curiyr+1989,kyr+1989, CFCPLT(NERC,IP), AVG_HTRT(IECP), CRBCNT, UPPCEF(IECP), &
!                          UPSEQBYR(MIN(MNUMYR,KYR)), CARFEE, CRD(PYR - UNXPH + JYR), BNS(PYR - UNXPH + JYR)
                     END DO
                  END DO
                  PV$DCR = PVV(DCR,ECP_D_FPH+UPSEQNYR,UNFPH - UNXPH + 1 + UPSEQNYR, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH- 1)
                  PV$CRD = PVV(CRD,ECP_D_FPH+UPSEQNYR,UNFPH - UNXPH + 1 + UPSEQNYR, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH- 1) / PV$DCR
                  SEQBNS = PVV(BNS,ECP_D_FPH+UPSEQNYR,UNFPH - UNXPH + 1 + UPSEQNYR, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH- 1) / PV$DCR

!                 if (nerc .eq. 1 .and. iecp .eq. wiis)write(6,3333) curiyr+1989,curiyr+1989+olyr-1,PV$DCR,PV$CRD*PV$DCR,PV$CRD,SEQBNS*PV$DCR,SEQBNS
!3333             format(1h ,'!seqbnsa',i4,i5,9f10.3)

               END IF

            ELSE
               PV$CRD = 0.0
               IF (YEAR .EQ. 1) PV$CRDL = 0.0
            END IF

!           DETERMINE PRESENT VALUE OF FIXED O&M AND EXTERNALITY COSTS BEGINNING IN OLYR

            IFPH2 = UNFPH - OLYR + 1
            DO JYR = 1 , IFPH2
               FOM(JYR) = ( EPFOM(IECP) + EPCFOM(IP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               IF (YEAR .EQ. 1) THEN
                  FOML(JYR) = ( EPFOM(IECP) + EPCFOM(IP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               END IF
               EXTR(JYR) = DBLE(EPEXT(IECP,MNPOLLUT + 1) * 8.76 * UPMCF(IP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               IF (YEAR .EQ. 1) EXTL(JYR) = DBLE(EPEXT(IECP,MNPOLLUT + 1)) * UPGNPD(JYR + CURIYR + OLYR - 2)
            END DO
            PV$FOM = PVV(FOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
            PV$EXT = PVV(EXTR,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)

!           COMPUTE LEVELIZED GENERATION FIXED O&M AND EXTERNALITY COSTS

            IF (YEAR .EQ. 1) THEN
               PV$FOML = PVV(FOML,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$EXTL = PVV(EXTL,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               CALL EP$LGNP(OLYR,IFPH2,EPDSCRT - UPRSK(IECP),PVGNPR)
               CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
               EPLVFOM(IECP) = PV$FOML / PVGNP
               EPLVEXT(IECP) = (PV$EXTL - PV$SOML - PV$CRDL) / PVGNP                     ! LEV
!              if (nerc .eq. 1 .and. year .eq. 1 .and. UPPCEF(IECP) .GT. 0.0)write(6,1234) curiyr+1989,1989 + CURIYR + OLYR - 1,nerc,uplntcd(iecp),  &
!                            PV$CRD,PVGNP,PV$CRD/PVGNP*SCALPR/upmcf(iecp)/8.76,SEQBNS
!1234          format(1h ,'!seqcrd',i4,i5,i3,a3,9f10.3)
            END IF

!           DETERMINE CPS REQUIREMENT, IF APPROPRIATE (LEVELIZED FOR LAST YEAR)

            IF (UPCAPCAS .GT. 0 .AND. UPVTYP(IP) .EQ. 1) THEN
               IF (OLYR .LT. UNXPH) THEN
                  PVCPS = DBLE(UPCAPBND(MIN(CURIYR + OLYR - 1,UNYEAR)))
               ELSE
                  DO JYR = 1 , UNFPH - UNXPH + 1
                     CPS(JYR) = UPCAPBND(MIN(CURIYR + JYR + UNXPH - 2,UNYEAR))
                     ONE1(JYR) = DBLE(1.0)
                  END DO
                  PVCPS = PVV(CPS,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                  PVONE = PVV(ONE1,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                  PVCPS = PVCPS / PVONE
               END IF
               PVCPS = MAX(PVCPS,ECP_MIN)
               IF (UPCAPSHR(IP) .LE. 0.0) THEN
                  PVCPS = PVCPS
               ELSE
                  PVCPS = PVCPS - DBLE(1.0)
               END IF
            END IF

!           Create Dispatchable Build Vectors

            IF (OLYR .LE. UNXPH .AND. UPVTYP(IP) .EQ. 1) THEN
               DO IOWN = 1 , 2
                  IF (IOWN .EQ. UPBLDTYP(NERC)) THEN
                     IFPH2 = UNFPH - OLYR + 1
                     N_FLRG = 0
                     DO FRG = 1 , UNFRGN
                        IF (FL_CNXT_CST(NERC,FRG) .GT. 0.0) THEN
                           N_FLRG = N_FLRG + 1
                           NXT_FLRG(N_FLRG) = FRG
                        END IF
                     END DO

!                    CREATE EXTRA LOOP FOR SUBSIDY LIMITS, IF APPROPRIATE

                     IF (UPSUBCAS(IECP) .GT. 0 .AND. LIMSUB(IP) .GT. 0.0)THEN
                        NUMLOOP = 2

!                       IF PTC SUBSIDY, CHECK IF VALID ONLINE YEAR

                        IF (UPSUBCAS(IECP) .EQ. 1)THEN
                           IF (UPGSUBPT(IECP) .LE. 0) THEN
                              IF (OLYR .LT. UNXPH) THEN
                                 IF ((CURIYR + OLYR - 1) .LT. GSYR1 .OR. (CURIYR + OLYR - 1) .GT. GSYRL) NUMLOOP = 1
                              ELSE
                                 IF ((CURIYR + UNFPH - 1) .LT. GSYR1) NUMLOOP = 1
                                 IF ((CURIYR + UNXPH - 1) .GT. GSYRL) NUMLOOP = 1
                              END IF
                           ELSE
                              IF (OLYR .LT. UNXPH) THEN
                                 IF (UPGSUBYR(IECP,MIN(MNUMYR,CURIYR + OLYR - 1)) .LE. 0.0) NUMLOOP = 1
                              ELSE
!                                IF (UPGSUBYR(IECP,MIN(MNUMYR,CURIYR + UNFPH - 1) .LE. 0.0) NUMLOOP = 1
                                 IF (UPGSUBYR(IECP,MIN(MNUMYR,CURIYR + UNXPH - 1)) .LE. 0.0) NUMLOOP = 1
                              END IF
                           END IF
                        END IF
                     ELSE
                        NUMLOOP = 1
                     END IF
!                    IF BONUS CREDITS FOR SEQUESTRATION
                     IF (UPSEQCAS .GT. 0 .AND. UPPCEF(IECP) .GT. 0.0)THEN
                        NUMLOOP = 2
                     END IF

!                    SET UP ANNUAL NATIONAL LIMIT ROWS

                     IF ( (UPAVLYR(IECP) .LE. FULLYR ) ) THEN

                        ROW = 'L'//'U'//UPLNTCD(IECP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',':U:',UPLNTCD(IECP),':ANN:',UPYRCD(YEAR))

!                       SET ROW TYPE
!
                        IF ( UPANNLMT(IECP,MIN(MNUMYR , OLYR+CURIYR)) .GT. 999.0 ) THEN
!                          make free row
                           CALL CROWTYPE(ROW,'N       ',ROW_mask)
                        ELSE
                           CALL CROWTYPE(ROW,'L       ',ROW_mask)
                           VALUE = UPANNLMT(IECP,MIN(MNUMYR , CURIYR+OLYR-1))

!                          REVISE RHS OF ROW
!
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                           CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$BDSP,59')
                        ENDIF

                     ENDIF
!

                     DO LOOPS = 1 , NUMLOOP
                        DO STEPS = 1 , MAX(1,ESTSWTCH(IP))
                           WRITE (STEP,'(I1)') STEPS
                           DO FRG = 1 , N_FLRG
                              FLRG = NXT_FLRG(FRG)
                              IF (LOOPS .EQ. 1)THEN
                                 COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//EPFLCD(FLRG)//STEP//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),EPFLCD(FLRG),STEP,UPYRCD(YEAR),':!DSP:')
                              ELSE
                                 COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//EPFLCD(FLRG)//SUB_CODE(STEPS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),EPFLCD(FLRG),SUB_CODE(STEPS),UPYRCD(YEAR),':!DSPSUB:')
                              END IF

!                             IF TECHNOLOGY IS AVAILABLE THEN CREATE COEFFICIENTS

                              IF (UPAVLYR(IECP) .LE. FULLYR .AND. (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,NERC) .GT. 0.0)) THEN


!                             STORE INDEX FOR AVAILABILITY OF TECHNOLOGY AND SUBSIDY

                              IF (LOOPS .EQ. 1 .AND. STEPS .EQ. 1 .AND. UPBLDREG(IECP,NERC) .GT. 0.0)BUILD_AVL(IECP,YEAR,NERC,CURIYR) = NUMLOOP
!                                PUT INTO NATIONAL ANNUAL BUILD LIMIT ROW
!
                                 ROW = 'LU'//UPLNTCD(IECP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':ANN:',UPYRCD(YEAR))
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,60')
!
!
!                                ROW = 'LU'//UPLNTCD(IECP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':ANN:',UPYRCD(YEAR))
!                                VALUE = DBLE(1.0)
!                                CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,61')

!                                Revise Capital Costs and Heatrates for Plants with Capture to reflect NETL Program Goals if any

                                 B_HTRT_ADJ = 1.0
                                 B_CPEN_ADJ = 1.0
                                 B_CCST_ADJ(IECP) = 1.0

                                 IF (IECP .EQ. WIPQ) THEN

                                    CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, WIIG, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
                                    HTRT_IG = AVG_HTRT(WIIG)
                                    CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IECP, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                                    B_YR  = MIN(OLYR + CURIYR - 1 , MNUMYR)
                                    B_HTRT_ADJ = (HTRT_IG / AVG_HTRT(IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                                    B_CPEN_ADJ = (B_HTRT_ADJ * AVG_HTRT(IECP)) / HTRT_IG
                                    B_CAP_CST_O = UPOVR(IECP) - (UPOVR(WIIG) * (AVG_HTRT(IECP) / HTRT_IG))
                                    B_CAP_CST_N = B_CAP_CST_O * TCCF_GL(B_YR,2) * B_HTRT_ADJ
                                    B_CCST_ADJ(IECP) = (UPOVR(WIIG) * B_CPEN_ADJ + B_CAP_CST_N) / UPOVR(WIPQ)

!                                   WRITE(6,3919) CURIRUN, CURCALYR, B_YR+1989, NERC, IECP, IP, STEPS, COLUMN, B_HTRT_ADJ, B_CPEN_ADJ, B_CCST_ADJ(IECP), B_CAP_CST_O, &
!                                      B_CAP_CST_N, UPOVR(WIIG), UPOVR(IECP), HTRT_IG, AVG_HTRT(IECP), HTRT_GL(B_YR,2), TCCF_GL(B_YR,2), &
!                                      UPLRPC(IECP), UPLROPT(IECP), UPLRLC(IECP), EPRGM(IECP), EPACM(IECP), ESTCPCST(IP,STEPS), UPANNADJ(IECP,B_YR)
!3919                               FORMAT(1X,"B_GOALS",7(":",I4),":",A16,18(":",F12.6))

                                 END IF

                                 IF (IECP .EQ. WIIS) THEN

                                    CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, WIIG, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
                                    HTRT_IG = AVG_HTRT(WIIG)
                                    CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IECP, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                                    B_YR  = MIN(OLYR + CURIYR - 1 , MNUMYR)
                                    B_HTRT_ADJ = (HTRT_IG / AVG_HTRT(IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                                    B_CPEN_ADJ = (B_HTRT_ADJ * AVG_HTRT(IECP)) / HTRT_IG
                                    B_CAP_CST_O = UPOVR(IECP) - (UPOVR(WIIG) * (AVG_HTRT(IECP) / HTRT_IG))
                                    B_CAP_CST_N = B_CAP_CST_O * TCCF_GL(B_YR,2) * B_HTRT_ADJ
                                    B_CCST_ADJ(IECP) = (UPOVR(WIIG) * B_CPEN_ADJ + B_CAP_CST_N) / UPOVR(WIIS)

!                                   WRITE(6,3919) CURIRUN, CURCALYR, B_YR+1989, NERC, IECP, IP, STEPS, COLUMN, B_HTRT_ADJ, B_CPEN_ADJ, B_CCST_ADJ(IECP), B_CAP_CST_O, &
!                                      B_CAP_CST_N, UPOVR(WIIG), UPOVR(IECP), HTRT_IG, AVG_HTRT(IECP), HTRT_GL(B_YR,2), TCCF_GL(B_YR,2), &
!                                      UPLRPC(IECP), UPLROPT(IECP), UPLRLC(IECP), EPRGM(IECP), EPACM(IECP), ESTCPCST(IP,STEPS), UPANNADJ(IECP,B_YR)

                                 END IF

                                IF (IECP .EQ. WICS) THEN

                                    CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, WIAC, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
                                    HTRT_AC = AVG_HTRT(WIAC)
                                    CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IECP, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                                    B_YR  = MIN(OLYR + CURIYR - 1 , MNUMYR)
                                    B_HTRT_ADJ = (HTRT_AC / AVG_HTRT(IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                                    B_CPEN_ADJ = (B_HTRT_ADJ * AVG_HTRT(IECP)) / HTRT_AC
                                    B_CAP_CST_O = UPOVR(IECP) - (UPOVR(WIAC) * (AVG_HTRT(IECP) / HTRT_AC))
                                    B_CAP_CST_N = B_CAP_CST_O * TCCF_GL(B_YR,4) * B_HTRT_ADJ
                                    B_CCST_ADJ(IECP) = (UPOVR(WIAC) * B_CPEN_ADJ + B_CAP_CST_N) / UPOVR(WICS)

!                                   WRITE(6,3919) CURIRUN, CURCALYR, B_YR+1989, NERC, IECP, IP, STEPS, COLUMN, B_HTRT_ADJ, B_CPEN_ADJ, B_CCST_ADJ(IECP), B_CAP_CST_O, &
!                                      B_CAP_CST_N, UPOVR(WIAC), UPOVR(IECP), HTRT_AC, AVG_HTRT(IECP), HTRT_GL(B_YR,2), TCCF_GL(B_YR,2), &
!                                      UPLRPC(IECP), UPLROPT(IECP), UPLRLC(IECP), EPRGM(IECP), EPACM(IECP), ESTCPCST(IP,STEPS), UPANNADJ(IECP,B_YR)

                                 END IF

!                                REVISE OBJECTIVE FUNCTION COEFFICIENT

                                 IF (IOWN .EQ. 1) THEN
                                    ROW = UPOBJ ; ROW_mask=UPOBJ

!                                   CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                                    IF (UPSUBCAS(IECP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       DEBT_F = EPUFDT
                                    ELSE
                                       DEBT_F = EPUFDT + UPNFDTA(IECP)
                                    END IF
                                    DEBT_F = DEBT_F + SHRDTADJ

!                                   CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                                    IF (UPSUBCAS(IECP) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       UTINT  =  EPUIRT
                                    ELSE
                                       UTINT  =  EPUIRT + UPNIRTEA(IECP)
                                    END IF
                                    UTINT = UTINT + CSTDTADJ

!                                   CHECK FOR SUBSIDY LIMIT FOR RETURN ON EQUITY

                                    IF (UPSUBCAS(IECP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT)
                                    ELSE
                                       UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT) + UPNRRTEA(IECP)
                                    END IF
                                    UTROE = UTROE + CSTEQADJ

                                    UTROR = UTROE * (1.0 - DEBT_F) + UTINT * DEBT_F

                                    ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                                    IF (OLYR .LT. UNXPH)THEN
                                       IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                                          ANNADJ = UPANNADJ(IECP,CURIYR+OLYR-1)
                                       ELSE
                                          ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                                       END IF
                                    ELSE
                                       DO JYR = UNXPH , UNAPH
                                          KYR = JYR - UNXPH + 1
                                          AN1(KYR) = 1.0
                                          IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                             ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                                          ELSE
                                             ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                          END IF
                                       END DO
                                       ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                          PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                                    END IF

!                                   OVRCST = UPOVR(IECP) * B_CCST_ADJ(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ESTCPCST(IP,STEPS) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                                    OVRCST = UPOVR(IECP) * B_CCST_ADJ(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ESTCPCST(IP,STEPS) * ANNADJ

!                                   IF SUBSIDY LIMIT FOR INVESTMENT TAX CREDIT, REMOVE IT FOR ADDITIONS WITHOUT SUBSIDY

                                    IF (UPSUBCAS(IECP) .EQ. 2 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                       OVRCST = OVRCST / DBLE(1.0 - UPCSB(IECP))
                                    END IF

                                    CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),CURIYR,YEAR,OVRCST,CPR,UPCAPD(1,IECP),UPGNPD,UTINT,DEBT_F,UTROR,TXBOOK,FNBOOK)

                                    if (STEPS.eq.1)  &
                                       WRITE(18,3211) CURIYR+UHBSYR,NERC,IECP,IOWN,UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),YEAR,  &
                                       OVRCST,UTINT,UTROE,DEBT_F,UTROR,TXBOOK,FNBOOK,(CPR(ICP),ICP=1,ECP_D_LCP),IP,STEPS,ESTCPCST(IP,STEPS),FRG,FLRG,  &
                                       (UPCAPD(ZYR,IECP),UPGNPD(ZYR),ZYR=UPPLYR(IECP)+YEAR-1,UPPLYR(IECP)+YEAR+UPCLYR(IECP)-2)

                                    URATIO = TXBOOK / FNBOOK
                                    CAPUNSTL = FNBOOK

                                    CALL EPNBLD(DBLE(UTROR),DBLE(EPDSCRT - UPRSK(IECP)),URATIO,DBLE(EPUFPE),UPECLF(IECP),UPTXLF(IECP),DBLE(UPTXRT),UPUCLF(IECP),CAPUTIL)

                                    if (STEPS.eq.1)  &
                                       WRITE(18,4212) CURIYR+UHBSYR,YEAR,NERC,IECP,UTROR,EPDSCRT - UPRSK(IECP),URATIO,EPUFPE,UPECLF(IECP),UPTXLF(IECP),UPTXRT,UPUCLF(IECP),CAPUTIL
 4212                               FORMAT(1X,"EPNBLD-B",4(":",I4),4(":",F7.4),2(":",I2),":",F7.4,":",I4,":",F8.4)

                                    TRANS = (DBLE(FL_CNXT_CST(NERC,FLRG) + EPCTRM(IP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IP))
                                    OBJVAL = (( CAPUNSTL * CAPUTIL + TRANS ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)

!                                   ADD Transport and Storage Cost for Sequestered Carbon if any

                                    CTS_C = 0.0
                                    CTS_YR = MIN(UNYEAR,CURIYR+OLYR-1)

                                    VALUE = OBJVAL + PV$FOM + PV$EXT - PV$SOM + CTS_C
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    if (STEPS.eq.1)  &
                                       WRITE(18,3299) CURIRUN, CURIYR+UHBSYR, YEAR, NERC, IECP, OBJVAL, TRANS, VALUE, (TAXDEPR(1,JYR),JYR=1,5), &
                                       FLRG, OLYR, UPPCEF(IECP), CTS_INV_Annuity, C_AVGTF(FLRG,CTS_YR), C_AVGIF(FLRG,CTS_YR), &
                                       UPGNPD(CURIYR+OLYR-1), UPGNPD(18), CTS_C, CRF(DBLE(EPDSCRT),IFPH2), PWF(DBLE(EPDSCRT),OLYR)

                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,62')

                                    T_CRF = CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2)
                                    T_PWF = PWF(DBLE(EPDSCRT) - UPRSK(IECP),OLYR)
                                    IF (YEAR .EQ. 1) THEN
                                       WRITE(18,36) CURIYR+UHBSYR,OLYR+CURIYR+UHBSYR-1,NERC,UPBLDTYP(NERC),IECP,IP,UPLNTCD(IECP),COLUMN, &
                                          OVRCST,FNBOOK,CAPUTIL,CAPUNSTL*CAPUTIL,UTROR,EPDSCRT,UPRSK(IECP),        &
                                          EPFOM(IECP),EPEXT(IECP,MNPOLLUT+1),EPCOVR(IP),EPCCRF(IP),EPCFOM(IP),    &
                                          TRANS,OBJVAL,PV$FOM,PV$EXT,PV$SOM, VALUE,UPGNPD(YEAR),UPGNPD(OLYR+CURIYR-1),    &
                                          UPGNPD(1999-UHBSYR),OLYR,IFPH2,T_CRF,T_PWF,UTROE,UTINT,0.0,0.0,0.0
                                    END IF

!                                   COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR -- UTILITIES

                                    IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP .AND. STEPS .EQ. 1) THEN
                                       CAPLEV = (( CAPUNSTL * CAPUTIL ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)
                                       CAPLEV = CAPLEV / PVGNP
                                       EPLVCAP(IECP,IOWN) = CAPLEV
                                       EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                                       EPLVTRN(IECP) = (TRANS / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)) / PVGNP
                                       EPLVBCK(IECP) = 1.0
                                    END IF
                                 ELSE
                                    ROW = UPOBJ ; ROW_mask=UPOBJ

!                                   CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                                    IF (UPSUBCAS(IECP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       DEBT_F = UPNFDT
                                    ELSE
                                       DEBT_F = UPNFDT + UPNFDTA(IECP)
                                    END IF
                                    DEBT_F = DEBT_F + SHRDTADJ

!                                   CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                                    IF (UPSUBCAS(IECP) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       EWGINT = EPUIRT + UPNIPRM
                                       UTINT  =  EPUIRT
                                    ELSE
                                       EWGINT =  EPUIRT + UPNIPRM + UPNIRTEA(IECP)
                                       UTINT  =  EPUIRT + UPNIRTEA(IECP)
                                    END IF
                                    EWGINT = EWGINT + CSTDTADJ
                                    UTINT = UTINT + CSTDTADJ

!                                   CHECK FOR SUBSIDY LIMIT FOR RETURN ON EQUITY

                                    IF (UPSUBCAS(IECP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       EWGROE = EPUCRE + UPNRPRM
                                       UTROE  = EPUCRE
                                    ELSE
                                       EWGROE = EPUCRE + UPNRPRM + UPNRRTEA(IECP)
                                       UTROE  = EPUCRE + UPNRRTEA(IECP)
                                    END IF
                                    EWGROE = EWGROE + CSTEQADJ
                                    UTROE = UTROE + CSTEQADJ

                                    EWGROR = EWGROE * (1.0 - DEBT_F) + EWGINT * DEBT_F

                                    ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                                    IF (OLYR .LT. UNXPH)THEN
                                       IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                                          ANNADJ = UPANNADJ(IECP,CURIYR+OLYR-1)
                                       ELSE
                                          ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                                       END IF
                                    ELSE
                                       DO JYR = UNXPH , UNAPH
                                          KYR = JYR - UNXPH + 1
                                          AN1(KYR) = 1.0
                                          IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                             ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                                          ELSE
                                             ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                          END IF
                                       END DO
                                       ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                          PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                                    END IF

!                                   OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ESTCPCST(IP,STEPS) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                                    OVRCST = UPOVR(IECP) * B_CCST_ADJ(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ESTCPCST(IP,STEPS) * ANNADJ

!                                   IF SUBSIDY LIMIT FOR INVESTMENT TAX CREDIT, REMOVE IT FOR ADDITIONS WITHOUT SUBSIDY

                                    IF (UPSUBCAS(IECP) .EQ. 2 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                       OVRCST = OVRCST / DBLE(1.0 - UPCSB(IECP))
                                    END IF
                                    CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),CURIYR,YEAR,OVRCST,CPR,UPCAPD(1,IECP),UPGNPD,EWGINT,DEBT_F,EWGROR,TXBOOK,FNBOOK)
                                    PRATIO = TXBOOK / FNBOOK

!                                   if (STEPS.eq.1)  &
                                       WRITE(18,3211) CURIYR+UHBSYR,NERC,IECP,IOWN,UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),YEAR,  &
                                       OVRCST,EWGINT,EWGROE,DEBT_F,EWGROR,TXBOOK,FNBOOK,(CPR(ICP),ICP=1,ECP_D_LCP),IP,STEPS,ESTCPCST(IP,STEPS),FRG,FLRG,  &
                                       (UPCAPD(ZYR,IECP),UPGNPD(ZYR),ZYR=UPPLYR(IECP)+YEAR-1,UPPLYR(IECP)+YEAR+UPCLYR(IECP)-2)
 3211                               FORMAT(1X,"EPINCST-B",11(":",I4),":",F9.2,4(":",F7.4),2(":",F15.1),10(":",F5.3),2(":",I4),":",F15.3,2(":",I4),8(":",F5.3))

                                    CAPNNSTL = FNBOOK
                                    CALL EPCNBLD(DBLE(DEBT_F),PRATIO,DBLE(UPNRPRM),DBLE(UPNIPRM),DBLE(UTROE),DBLE(UTINT),DBLE(UPTXRT),UPTXLF(IECP),UPNCLF(IECP),UPNLLF(IECP),CAPNUG)

!                                   if (STEPS.eq.1)  &
                                       WRITE(18,3212) CURIYR+UHBSYR,YEAR,NERC,IECP,DEBT_F,PRATIO,UPNRPRM,UPNIPRM,UTROE,UTINT,UPTXRT,UPTXLF(IECP),UPNCLF(IECP),UPNLLF(IECP),CAPNUG
 3212                               FORMAT(1X,"EPCNBLD-B",4(":",I4),7(":",F7.4),3(":",I2),":",F8.4)

                                    TRANS = (DBLE(FL_CNXT_CST(NERC,FLRG) + EPCTRM(IP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IP))
                                    OBJVAL = ( ( CAPNNSTL * CAPNUG + TRANS ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT) - UPRSK(IECP),OLYR)

!                                   ADD Transport and Storage Cost for Sequestered Carbon if any

                                    CTS_C = 0.0
                                    CTS_YR = MIN(UNYEAR,CURIYR+OLYR-1)

!                                   CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                                    IF (UPSUBCAS(IECP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       VALUE = OBJVAL + PV$FOM + PV$EXT + CTS_C
                                    ELSE
                                       VALUE = OBJVAL + PV$FOM + PV$EXT - PV$SOM + CTS_C
                                    END IF
                                    IF (UPSEQCAS .GT. 0 .AND. UPPCEF(IECP) .GT. 0.0 .AND. LOOPS .EQ. 2) THEN
                                        VALUE = VALUE - PV$CRD + CTS_C
                                    END IF
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)


!                                   if (STEPS.eq.1)  &
                                       WRITE(18,3299) CURIRUN, CURIYR+UHBSYR, YEAR, NERC, IECP, OBJVAL, TRANS, VALUE, (TAXDEPR(1,JYR),JYR=1,5), &
                                       FLRG, OLYR, UPPCEF(IECP), CTS_INV_Annuity, C_AVGTF(FLRG,CTS_YR), C_AVGIF(FLRG,CTS_YR), &
                                       UPGNPD(CURIYR+OLYR-1), UPGNPD(18), CTS_C, CRF(DBLE(EPDSCRT),IFPH2), PWF(DBLE(EPDSCRT),OLYR)
 3299                               FORMAT(1x,"EPCNBLD2-B",5(":",I4),3(":",F12.3),5(":",F8.4),2(":",i5),10(":",F15.3))


                                    T_CRF = CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2)
                                    T_PWF = PWF(DBLE(EPDSCRT) - UPRSK(IECP),OLYR)
                                    IF (YEAR .EQ. 1) THEN
                                       WRITE(18,36) CURIYR+UHBSYR, OLYR+CURIYR+UHBSYR-1, NERC, UPBLDTYP(NERC), IECP, IP, UPLNTCD(IECP), COLUMN, &
                                          OVRCST, FNBOOK, CAPNUG, CAPNNSTL*CAPNUG, EWGROR, EPDSCRT, UPRSK(IECP),                                &
                                          EPFOM(IECP), EPEXT(IECP,MNPOLLUT+1), EPCOVR(IP), EPCCRF(IP), EPCFOM(IP),                              &
                                          TRANS, OBJVAL, PV$FOM, PV$EXT, PV$SOM, VALUE, UPGNPD(YEAR), UPGNPD(OLYR+CURIYR-1),                            &
                                          UPGNPD(1999-UHBSYR), OLYR, IFPH2, T_CRF, T_PWF, EWGROE, EWGINT,                               &
                                          UPSUBCAS(IECP) , NUMLOOP, LOOPS, EPUIRT, UPNIPRM, UPNIRTEA(IECP), CSTDTADJ
   36                                  FORMAT(1x,"BUILD_IN",6(":",I4),":",A2,":",A8,21(":",E10.3),2(":",I2),4(":",F8.3),3(":",I2),4(":",F8.3))
                                    END IF

                                    IF (UF_DBG .GT. 0 .AND. (MOD(YEAR,5) .EQ. 1))  &
                                       WRITE(18,'(A,A,2I4,2(2x,A),3F14.6,F9.4,3F8.4)') ' EP$BDSP2:YEAR,IP,COL,ROW,VAL,OBJVAL,TRANS,', &
                                       'EPCOVR,EPCTRM,UPGNPD,EPCCRF:',YEAR,IP,COLUMN,ROW,VALUE,OBJVAL,TRANS,EPCOVR(IP),EPCTRM(IP),UPGNPD(YEAR),EPCCRF(IP)

                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,63')

!                                   COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR--NUGS

                                    IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP .AND. STEPS .EQ. 1) THEN
                                       CAPLEV = (( CAPNNSTL * CAPNUG ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)
                                       CAPLEV = CAPLEV / PVGNP
                                       EPLVCAP(IECP,IOWN) = CAPLEV
                                       EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                                       EPLVTRN(IECP) = (TRANS / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)) / PVGNP
                                       EPLVBCK(IECP) = 1.0
                                    END IF
                                 END IF

                                 IF (YEAR .EQ. 1 .AND. STEPS .EQ. 1) THEN

!                                   STORE EMM/COAL REGION COSTS FOR COAL PLANTS

                                    IF (IP .NE. WICN .AND. IP .NE. WIAN  .AND. IP .NE. WISM) THEN
                                       FLLCAP(NERC,FLRG,IECP,IOWN) = EPLVCAP(IECP,IOWN)
                                       FLLFCF(NERC,FLRG,IECP,IOWN) = EPLVFCF(IECP,IOWN)
                                       FLLTRN(NERC,FLRG,IECP) = EPLVTRN(IECP)
                                    END IF

!                                   STORE FUEL REGION COSTS FOR DISPATCAHBLE PLANTS

                                    DSP_LCAP(NERC,FLRG,IECP,IOWN) = EPLVCAP(IECP,IOWN)
                                    DSP_LFCF(NERC,FLRG,IECP,IOWN) = EPLVFCF(IECP,IOWN)
                                    DSP_LTRN(NERC,FLRG,IECP) = EPLVTRN(IECP)
                                 END IF

!                                LOOP OVER REMAINING YEARS IN THE EXPLICIT PLANNING HORIZON

                                 DO JYR = OLYR , UNXPH

                                    IF (JYR .LT. UNXPH) THEN
                                       TYR2 = MIN(CURIYR + JYR - 1 , UNYEAR)
                                    ELSE
                                       TYR2 = UNYEAR
                                    END IF

!                                   REVISE PLANNED MAINTENANCE ROW

                                    VALUE = - 8.760 * DBLE(UPPMRT(IECP))
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    ROW = 'M'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FLRG)//'X'//UPYRCD(JYR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FLRG),':X:',UPYRCD(JYR))
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,64')

!                                   PURCHASED CAPACITY ROW

                                    ROW = 'P'//UPRGCD(NERC)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':P:',UPRGCD(NERC),':XXXXX:',UPYRCD(JYR))
                                    VALUE = 0.001 * OBJVAL
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,65')

!                                   CREATE COEFFICIENT FOR UTILITY BUILD COLUMNS THAT ARE NOT REVISED.

!                                   BUILD LIMIT ROW

                                    IF (JYR .EQ. OLYR) THEN
                                       IF (UPOVBDSW .GT. 0 .AND. UPOVBDSW .LE. 2)THEN
                                          ROW = 'R'//UPRGCD(IMPORT)//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(IMPORT),':YYYYY:',UPYRCD(JYR))
                                       ELSE
                                          ROW = 'R'//'U'//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',':U:',':YYYYY:',UPYRCD(JYR))
                                       END IF
                                       VALUE = DBLE(1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,66')
                                    END IF

!                                   CAPACITY SUPPLY CURVE

                                    IF (ESTSWTCH(IP) .GT. 0)THEN
                                       ROW = 'LU'//UPLNTCD(IECP)//'DS'//STEP//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),'DS',STEP,UPYRCD(YEAR)) ! DispatchType coded as element DS
                                       VALUE = DBLE(1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,67')
                                    END IF

!                                   RESERVE MARGIN ROW

                                    ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(JYR))
                                    VALUE = DBLE(1.0)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,68')

!                                   TOTAL BUILDS FREE ROW

                                    IF (JYR .EQ. OLYR) THEN
                                       ROW = 'TOTBLD'//UPRGCD(NERC)//UPYRCD(JYR); call makmsk(ROW_mask,':TOTBLD:',UPRGCD(NERC),UPYRCD(JYR))
                                       VALUE = DBLE(1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,69')
                                    END IF

!                                   PUT INTO CAPACITY PORTFOLIO REQUIREMENT ROW, IF INCLUDED

                                    IF (UPCAPCAS .GT. 0 .AND. JYR .EQ. OLYR) THEN
                                       ROW = 'GCPSXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':GCPSXXX:',UPYRCD(JYR))
                                       VALUE = PVCPS
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,70')
                                    END IF
!
!                                   PUT INTO NATIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY
!
                                    IF (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,MNUMNR) .LT. 999.0)THEN
                                       ROW = 'LU'//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':BLDX:')
                                       VALUE = DBLE(1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,71')
                                    END IF
!
!                                   PUT INTO REGIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY
!
                                    IF (UPBLDREG(IECP,NERC) .GT. 0.0 .AND. UPBLDREG(IECP,NERC) .LT. 999.0)THEN
                                       ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':BLDX:')
                                       VALUE = DBLE(1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,72')
                                    END IF

!                                   PUT INTO CONSTRAINT TO LIMIT SUBSIDIZED CAPACITY ADDITIONS, IF ANY

                                    IF (UPSUBCAS(IECP) .GT. 0 .AND. LOOPS .EQ. 2 .AND. JYR .EQ. OLYR) THEN
                                     IF (LIMSUB(IECP) .GT. 0.0 .AND. UPSUBLIM(IECP) .LT. 999.0) THEN
                                       ROW = 'LU'//UPLNTCD(IECP)//'SUBX'; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':SUBX:')
                                       VALUE = DBLE(1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,73')
                                    END IF
                                    END IF

!                                   PUT INTO CONSTRAINT TO LIMIT BONUS SEQUESTRATION ALLOWANCES, IF ANY

                                    IF (UPSEQCAS .GT. 0 .AND. UPPCEF(IECP) .GT. 0.0 .AND. LOOPS .EQ. 2 .AND. JYR .EQ. OLYR) THEN
                                       ROW = 'L'//'SEQBNSX'; call makmsk(ROW_mask,':L:',':SEQBNSX:')
                                       VALUE = SEQBNS
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,74')
                                     IF (YEAR .EQ. 1)THEN
                                          VALUE = SEQBNS + SEQBNS1
                                       ROW = 'L'//'SEQBNS1'; call makmsk(ROW_mask,':L:',':SEQBNS1:')
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,75')
                                          ROW = 'L'//'SEQBNS0'; call makmsk(ROW_mask,':L:',':SEQBNS0:')
                                          VALUE = SEQBNS1
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,76')
                                          DO KYR = 1 , UPSEQNYR
                                             ROW = 'SEQBNSX'//UPRGCD(KYR); call makmsk(ROW_mask,':SEQBNSX:',UPRGCD(KYR))
                                             VALUE = BNS(KYR)
                                             CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,77')
                                          END DO
                                     END IF
                                    END IF

!                                   TOTAL CAPACITY ROW BY REGION AND PLANT TYPE

                                    ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'CAP'//UPYRCD(JYR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':CAP:',UPYRCD(JYR))
                                    VALUE = DBLE(1.0)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,78')

!                                   CAPACITY BALANCE ROW

                                    DO ISP = 1 , EPNMSP
                                       ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'X' //EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(JYR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':X:' ,EPFLCD(FLRG),SCODE(ISP),UPYRCD(JYR))
                                       VALUE = DBLE( - 1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDSP,79')
                                    END DO

!                                   COAL DIVERSITY CONSTRAINTS

                                    IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                          CLRG = EPCLMP(FLRG)

                                          CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IECP, JYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

!                                         SUBBITUMINOUS

                                          ROW = 'FDV'//EPFLCD(CLRG)//'S'//UPLNTCD(IECP)//UPYRCD(JYR); call makmsk(ROW_mask,':FDV:',EPFLCD(CLRG),':S:',UPLNTCD(IECP),UPYRCD(JYR))
                                          SDV_PRF = NEW_SDV_INDX(CLRG)
                                          VALUE = -8.760 * 0.001 * AVG_HTRT(IECP) * B_HTRT_ADJ * UPMCF(IECP) * CMM_SDV_PRF(SDV_PRF,TYR2)
                                          CALL CVAL(COLUMN,ROW,VALUE*0.1,COLUMN_mask,ROW_mask,'EP$BDSP,80')

!                                         LIGNITE

                                          ROW = 'FDV'//EPFLCD(CLRG)//'L'//UPLNTCD(IECP)//UPYRCD(JYR); call makmsk(ROW_mask,':FDV:',EPFLCD(CLRG),':L:',UPLNTCD(IECP),UPYRCD(JYR))
                                          LDV_PRF = NEW_LDV_INDX(CLRG)

                                          VALUE = -8.760 * 0.001 * AVG_HTRT(IECP) * B_HTRT_ADJ * UPMCF(IECP) * CMM_LDV_PRF(LDV_PRF,TYR2)                    
                                          CALL CVAL(COLUMN,ROW,VALUE*0.1,COLUMN_mask,ROW_mask,'EP$BDSP,81')
                                    END IF
!

                                 END DO                                                   ! JYR
                              END IF                                                   ! UPAVLYR > OLYR
                           END DO                                                      ! FRG
                        END DO                                                         ! STEPS
                     END DO                                                            ! LOOPS
                  END IF                                                               ! UPBLDTYP
               END DO                                                                  ! IOWN
            END IF                                                                     ! Valid OLYR Value and Valid Build Switch
         END IF                                                                        ! Exclude Nuclear Capacity
      END DO                                                                           ! IP

      RETURN
      END
!
!     EPFLPRC CREATES NOMINAL, PRESENT VALUE, CARBON PRICES BY FUEL REGION
!
      SUBROUTINE EPFLPRC
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'intout'
      include 'emmparm'
      include 'emission'
      include 'emoblk'
      include 'emablk'
      include 'cdsparms'
      include 'uso2grp'
      include 'angtdm'
      include 'control'
      include 'ecpcntl'
      include 'dispinyr'
      include 'bildin'
      include 'bildout'
      include 'fuelin'
      include 'dispout'
      include 'eusprc'
      include 'edbdef'
      include 'elcntl'
      include 'elout'
      include 'ngtdmrep'
      include 'convfact'
      include 'uefdout'
!
      COMMON /OGUSE/WHDEX,WOPEX,NGCON,OLCON,NGLEV,OLLEV,XPNGELGR
      REAL*8 WHDEX(ECP_D_FPH)
      REAL*8 WOPEX(ECP_D_FPH)
      REAL*8 NGCON(ECP_D_XPH)
      REAL*8 OLCON(ECP_D_XPH)
      REAL*8 NGLEV(ECP_D_XPH)
      REAL*8 OLLEV(ECP_D_XPH)
      REAL*8 XPNGELGR(NNGEM,MNUMYR,3)      ! EXPECTED E UTIL NG PRICE (87$/MMBTU) FROM NGTDMOUT

      INTEGER NUMTABS
      PARAMETER (NUMTABS = 2)        ! total number of database tables
      INTEGER*4 IFLRG,IRG,JYR,KYR,IECP,LYR,BYR,XYR,CL_CHK
      INTEGER*4 ISTEP,MSTEP
      REAL*8 PWF,PVV
      REAL*8 ECPPRC1(ECP_D_XPH - 1 , ECP_D_NFL)
      REAL*8 ECPPRC2(ECP_D_FPH, ECP_D_NFL)
      REAL*8 ECPPRCN1(ECP_D_XPH - 1 , ECP_D_NFL)
      REAL*8 ECPPRCN2(ECP_D_FPH , ECP_D_NFL)
      REAL*8 ECPCRB1(ECP_D_XPH - 1 , ECP_D_NFL)
      REAL*8 ECPCRB2(ECP_D_FPH , ECP_D_NFL)
      REAL*8 ECPCRBN1(ECP_D_XPH - 1 , ECP_D_NFL)
      REAL*8 ECPCRBN2(ECP_D_FPH , ECP_D_NFL)
      REAL*8 NG_BASE(ECP_D_XPH),OL_BASE(ECP_D_XPH),MX_FLSHR
      REAL*4 NUCPRC(MNUMNR,MNUMYR+ECP_D_FPH)
!
!     ANNUAL RATE AND CUMULATIVE INCREASE IN CARBON FEE AFTER 2025
!
      REAL P2025ADJ
!
!     variables for carbon tax expectations adjustment
!
      REAL PJCLEL(MNUMYR),PJDSEL(MNUMYR),PJRSEL(MNUMYR),PJNGEL(MNUMYR)
!
      LOGICAL FIRST/.TRUE./ ! true only first time through
      LOGICAL FIRSTY(MNUMYR)
!
!     uses UPCALPHA (read from ECPDAT)--relax parameter for carb tax expectations adjustment
!
      SAVE PJCLEL,PJDSEL,PJRSEL,PJNGEL,FIRST,FIRSTY
!
!     SET UP EMMDB INFO
!
      LOOPING = 0

      NUMCOLS = 0
      DYNSTM = ' '
      WRTSTM = ' '
      COLVALS = 0.0
      COLV = 0.0
      CHCOLVALS = ' '
      CHCOLV = ' '
!
!     IDENTIFY MIDDLE STEP OF COAL SUPPLY CURVES
!
      MSTEP = 0
      DO ISTEP = 1 , 11
         IF (XCL_STEPS(ISTEP) .EQ. 0.0) MSTEP = ISTEP
      END DO
!
      IF (MSTEP .EQ. 0) THEN
         WRITE(6,*) "Big Trouble in ECP no zero coal supply step"
         STOP
      END IF
!
!     First time through, store a copy of the carbon taxes from the prior run.
!     They are used to adjust future expectations of carbon taxes when doing carbon cap runs.
!     Each year,  adjust tax expectations to reflect differences between the
!        "actual" and "estimated" for CURIYR-1.
!     To help convergence, adjust future taxes by a fraction (ALPHA) of the difference between
!        this run's taxes and the expected taxes for the prior year.
!
      IF ((TAX_FLAG /= 0) .OR. (PERMIT_FLAG /= 0) .OR. (ETAX_FLAG /= 0)) THEN
         IF (FIRST) THEN
            FIRST = .FALSE.
            DO JYR = 1 , UNYEAR
               FIRSTY(JYR) = .TRUE.
               PJCLEL(JYR) = JCLEL(JYR)
               PJRSEL(JYR) = JRSEL(JYR)
               PJDSEL(JYR) = JDSEL(JYR)
               PJNGEL(JYR) = JNGEL(JYR)
            END DO ! JYR
         END IF
         IF (FIRSTY(CURIYR)) THEN

            FIRSTY(CURIYR)=.FALSE.

            WRITE(18,*) 'Carbon Tax Expectation Adjustment ',BASEYR+CURIYR-1
            WRITE(18,'(a,F10.4)') '   JCLEL(CURIYR-1)' ,JCLEL(CURIYR-1)
            WRITE(18,'(a,F10.4)') '  PJCLEL(CURIYR-1)',PJCLEL(CURIYR-1)
            WRITE(18,'(a,F10.4)') ' Alpha Adjustment:', UPCALPHA*(JCLEL(CURIYR-1)-PJCLEL(CURIYR-1))
            WRITE(18,*)
            WRITE(18,'(18x,15I8/18x,16I8)') (BASEYR+JYR-1,JYR=CURIYR,UNYEAR)
            WRITE(18,'(a18,15F8.4/18x,16F8.4)' ) '  JCLEL (RESTART):', (JCLEL(JYR),JYR=CURIYR,UNYEAR)
            WRITE(18,'(a18,15F8.4/18x,16F8.4)' ) ' PJCLEL (BEFORE) :', (PJCLEL(JYR),JYR=CURIYR,UNYEAR)

            DO JYR = CURIYR, UNYEAR
               PJCLEL(JYR) = MAX( 0.0 , PJCLEL(JYR) + UPCALPHA*(JCLEL(CURIYR-1)-PJCLEL(CURIYR-1)))
               PJRSEL(JYR) = MAX( 0.0 , PJRSEL(JYR) + UPCALPHA*(JRSEL(CURIYR-1)-PJRSEL(CURIYR-1)))
               PJDSEL(JYR) = MAX( 0.0 , PJDSEL(JYR) + UPCALPHA*(JDSEL(CURIYR-1)-PJDSEL(CURIYR-1)))
               PJNGEL(JYR) = MAX( 0.0 , PJNGEL(JYR) + UPCALPHA*(JNGEL(CURIYR-1)-PJNGEL(CURIYR-1)))
            END DO
            WRITE(18,'(a18,15F8.4/18x,16F8.4)' ) ' PJCLEL (AFTER)  :', (PJCLEL(JYR),JYR=CURIYR,UNYEAR)
         END IF
      ELSE
         PJCLEL(CURIYR:UNYEAR) = 0.0
         PJRSEL(CURIYR:UNYEAR) = 0.0
         PJDSEL(CURIYR:UNYEAR) = 0.0
         PJNGEL(CURIYR:UNYEAR) = 0.0
      ENDIF
!
!     STORE NUCLEAR FUEL PRICE EXPECTATIONS
!
      IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
         DO IRG = 1 , UNRGNS
            DO JYR = 1 , MNUMYR + UNFPH
               IF (JYR .LT. UNYEAR)THEN
                  NUCPRC(IRG,JYR) = UPURELN(IRG,JYR)
               ELSE
                  NUCPRC(IRG,JYR) = UPURELN(IRG,UNYEAR) * UPNUCGRW ** FLOAT(JYR - UNYEAR)
               END IF
            END DO
         END DO
      END IF
!
!
!     BASE YEAR FOR INDEX IS CURIYR-1 (LAST YEAR) EXCEPT WHEN CURIYR = 1 (1990)
!
      IF (CURIYR .GT. 1) THEN
         BYR = 1
      ELSE
         BYR = 0
      END IF
!
!     DETERMINE NOMINAL PRESENT VALUE PRICE STREAM OVER ALL BUT LAST YEAR
!     OF THE EXPLICIT PLANNING HORIZON BY ECP FUEL TYPES
!
      DO IFLRG = 1 , UNFRGN
         DO JYR = 1 , UNXPH - 1
            KYR = JYR + CURIYR - 1
            IF(KYR.LE.(UNYEAR))THEN
               XYR = KYR
               P2025ADJ = 1.0
            ELSE
               XYR = UNYEAR
               P2025ADJ = UPCARGRW ** (KYR - UNYEAR)
            END IF
            CL_CHK = 0
            DO IECP = 1 , ECP_D_NFL
               IF (UPFCOL(IECP) .EQ. 1) THEN
!
!                 COAL
!
                  ECPPRC1(JYR,IECP) = 0.0
                  ECPPRCN1(JYR,IECP) = 0.0
                  IF ((CURIYR + UHBSYR) .GE. UYR_CARWS) THEN
                     ECPCRB1(JYR,IECP) = PJCLEL(XYR) * P2025ADJ
                     ECPCRBN1(JYR,IECP) = PJCLEL(XYR) * P2025ADJ
                  ELSE
                     ECPCRB1(JYR,IECP) = 0.0
                     ECPCRBN1(JYR,IECP) = 0.0
                  END IF
                  ECPCRB1(JYR,IECP) = ECPCRB1(JYR,IECP) * UPGNPD(KYR)
                  ECPCRBN1(JYR,IECP) = ECPCRBN1(JYR,IECP) * UPGNPD(KYR)
                  CL_CHK = IECP
               ELSE IF (UPFNUC(IECP) .EQ. 1) THEN

!                 NUCLEAR

                  IF (IFLRG .LE. UNRGNS) THEN
                     ECPPRC1(JYR,IECP) = DBLE(NUCPRC(IFLRG,KYR) * UPGNPD(KYR))
                     ECPPRCN1(JYR,IECP) = DBLE(NUCPRC(IFLRG,KYR) * UPGNPD(KYR))
                     ECPCRB1(JYR,IECP) = DBLE(0.0)
                     ECPCRBN1(JYR,IECP) = DBLE(0.0)
                  ELSE
                     ECPPRC1(JYR,IECP) = DBLE(0.0)
                     ECPPRCN1(JYR,IECP) = DBLE(0.0)
                     ECPCRB1(JYR,IECP) = DBLE(0.0)
                     ECPCRBN1(JYR,IECP) = DBLE(0.0)
                  END IF
               ELSE IF (UPFGAS(IECP) .EQ. 1) THEN

!                 Natural Gas As Primary Fuel


                  IF (UPFLCD(IECP) .EQ. "GS") THEN
                     IF (UPMXGAS(WIST,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXGAS(WIST,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSEIF (UPFLCD(IECP) .EQ. "GT") THEN
                     IF (UPMXGAS(WICT,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXGAS(WICT,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSEIF (UPFLCD(IECP) .EQ. "GC") THEN
                     IF (UPMXGAS(WICC,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXGAS(WICC,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSE
                     MX_FLSHR = 1.0
                  END IF

                  ECPPRC1(JYR,IECP) = 0.0
                  ECPCRB1(JYR,IECP) = DBLE(PJNGEL(XYR) * P2025ADJ * MX_FLSHR) * UPGNPD(KYR)
                  ECPPRCN1(JYR,IECP) = 0.0
                  ECPCRBN1(JYR,IECP) = DBLE(PJNGEL(XYR) * P2025ADJ) * UPGNPD(KYR)

!                 Add Secondary Oil if appropriate

                  IF (UPFDIS(IECP) .GT. 1) THEN
                     ECPPRC1(JYR,IECP) = 0.0
                     ECPCRB1(JYR,IECP) = ECPCRB1(JYR,IECP) + DBLE(PJDSEL(XYR) * P2025ADJ * (1.0 - MX_FLSHR)) * UPGNPD(KYR)
                  ELSEIF (UPFRES(IECP) .GT. 1) THEN
                     ECPPRC1(JYR,IECP) = 0.0
                     ECPCRB1(JYR,IECP) = ECPCRB1(JYR,IECP) + DBLE(PJRSEL(XYR) * P2025ADJ * (1.0 - MX_FLSHR)) * UPGNPD(KYR)
                  END IF
               ELSE IF (UPFRES(IECP) .EQ. 1) THEN

!                 Resid As Primary Fuel

                  IF (UPFLCD(IECP) .EQ. "RS") THEN
                     IF (UPMXOIL(WIST,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXOIL(WIST,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSE
                     MX_FLSHR = 1.0
                  END IF

                  ECPPRC1(JYR,IECP) = 0.0
                  ECPCRB1(JYR,IECP) = DBLE(PJRSEL(XYR) * P2025ADJ * MX_FLSHR) * UPGNPD(KYR)
                  ECPPRCN1(JYR,IECP) = 0.0
                  ECPCRBN1(JYR,IECP) = DBLE(PJRSEL(XYR) * P2025ADJ) * UPGNPD(KYR)

!                 Add Secondary Natural Gas if appropriate

                  IF (UPFGAS(IECP) .GT. 1) THEN
                     ECPPRC1(JYR,IECP) = 0.0
                     ECPCRB1(JYR,IECP) = ECPCRB1(JYR,IECP) + DBLE(PJNGEL(XYR) * P2025ADJ * (1.0 - MX_FLSHR)) * UPGNPD(KYR)
                  END IF
               ELSE IF (UPFDIS(IECP) .EQ. 1) THEN

!                 Distilate As Primary Fuel

                  IF (UPFLCD(IECP) .EQ. "DS") THEN
                     IF (UPMXOIL(WICC,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXOIL(WIET,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSE
                     MX_FLSHR = 1.0
                  END IF

                  ECPPRC1(JYR,IECP) = 0.0
                  ECPCRB1(JYR,IECP) = DBLE(PJDSEL(XYR) * P2025ADJ * MX_FLSHR) * UPGNPD(KYR)
                  ECPPRCN1(JYR,IECP) = 0.0
                  ECPCRBN1(JYR,IECP) = DBLE(PJDSEL(XYR) * P2025ADJ) * UPGNPD(KYR)

!                 Add Secondary Natural Gas if appropriate

                  IF (UPFGAS(IECP) .GT. 1) THEN
                     ECPPRC1(JYR,IECP) = 0.0
                     ECPCRB1(JYR,IECP) = ECPCRB1(JYR,IECP) + DBLE(PJNGEL(XYR) * P2025ADJ * (1.0 - MX_FLSHR)) * UPGNPD(KYR)
                  END IF
               END IF
!
!              Fill ECP Fuel Price Arrays
!
               UPPFL(IECP,IFLRG,JYR) = ECPPRC1(JYR,IECP) * PWF(DBLE(EPDSCRT),JYR)
               UPPFLN(IECP,IFLRG,JYR) = ECPPRCN1(JYR,IECP) * PWF(DBLE(EPDSCRT),JYR)
               UPCRB(IECP,IFLRG,JYR) = ECPCRB1(JYR,IECP) * PWF(DBLE(EPDSCRT + URCARWT),JYR)
               UPCRBN(IECP,IFLRG,JYR) = ECPCRBN1(JYR,IECP) * PWF(DBLE(EPDSCRT + URCARWT),JYR)
!
!              Zero Out Carbon Price if there is an explicit carbon constraint in the ecp
!
               IF (USW_CAR .EQ. 1 .OR. USW_CAR .EQ. 3) THEN
                  UPCRB(IECP,IFLRG,JYR) = 0.00
                  UPCRBN(IECP,IFLRG,JYR) = 0.00
               END IF
!
            END DO   ! IECP
!
            WRITE(UF_DBS,200) CURIYR,IFLRG,KYR+UHBSYR,(ECPPRC1(JYR,IECP),IECP=1,15),WOPEX(JYR),WHDEX(JYR),UPGNPD(KYR),PWF(DBLE(EPDSCRT),JYR),TRIM(SCEN_DATE) !//EMMDB//
            WRITE(UF_DBS,201) CURIYR,IFLRG,KYR+UHBSYR,(ECPPRCN1(JYR,IECP),IECP=1,15),WOPEX(JYR),WHDEX(JYR),UPGNPD(KYR),PWF(DBLE(EPDSCRT),JYR),TRIM(SCEN_DATE) !//EMMDB//
            WRITE(UF_DBS,202) CURIYR,IFLRG,KYR+UHBSYR,(ECPCRB1(JYR,IECP),IECP=1,15),UPGNPD(KYR),PWF(DBLE(EPDSCRT),JYR),TRIM(SCEN_DATE) !//EMMDB//
            WRITE(UF_DBS,203) CURIYR,IFLRG,KYR+UHBSYR,(ECPCRBN1(JYR,IECP),IECP=1,15),UPGNPD(KYR),PWF(DBLE(EPDSCRT),JYR),TRIM(SCEN_DATE) !//EMMDB//
!
!           WRITE ECP_NOM_FUEL_COST TABLE TO DATABASE
!
            TNUM = 1
            IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
              IF (LOOPING(TNUM) .EQ. 0) THEN
                NUMCOLS(TNUM) = 5
                DYNSTM(TNUM) =  'INSERT INTO ECP_NOM_FUEL_COST VALUES(?,?,?,?,?,?)'
                WRTSTM(TNUM) =  'ECP_NOM_FUEL_COST'
              ENDIF
               DO IECP = 1 , 15
                LOOPING(TNUM) = LOOPING(TNUM) + 1
                COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                !//EMMDB//
                COLV(TNUM,2,LOOPING(TNUM)) = IFLRG                                  !//EMMDB//
                COLV(TNUM,3,LOOPING(TNUM)) = KYR+UHBSYR                            !//EMMDB//
                COLV(TNUM,4,LOOPING(TNUM)) = IECP                                  !//EMMDB//
                COLV(TNUM,5,LOOPING(TNUM)) = ECPPRC1(JYR,IECP)                     !//EMMDB//
                IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                  COLVALS(:,:) = COLV(TNUM,:,:)
!                 CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  LOOPING(TNUM) = 0
                ENDIF
               END DO
            END IF
!
         END DO   ! JYR
!
  200    FORMAT(1X,"ECP_PRC1 :",I5,":",I3,":",I5,":",19(F7.3,":"),A)       !//EMMDB//
  201    FORMAT(1X,"ECP_PRCN1 :",I5,":",I3,":",I5,":",19(F7.3,":"),A)       !//EMMDB//
  202    FORMAT(1X,"ECP_CRB1 :",I5,":",I3,":",I5,":",17(F7.3,":"),A)       !//EMMDB//
  203    FORMAT(1X,"ECP_CRBN1 :",I5,":",I3,":",I5,":",17(F7.3,":"),A)       !//EMMDB//
!
!        Label:ECP_PRC1:CURIYR:IFLRG:PYEAR:BL:BM:BH:SL:SM:LG:DS:RS:GS:GT:GC:GF:UR:DP:DB:WOPEX:WHDEX:UPGNPD_PYR:PWF:TRIM(SCEN_DATE)
!        Label:ECP_PRCN1:CURIYR:IFLRG:PYEAR:BL:BM:BH:SL:SM:LG:DS:RS:GS:GT:GC:GF:UR:DP:DB:WOPEX:WHDEX:UPGNPD_PYR:PWF:TRIM(SCEN_DATE)
!        Label:ECP_CRB1:CURIYR:IFLRG:PYEAR:BL:BM:BH:SL:SM:LG:DS:RS:GS:GT:GC:GF:UR:DP:DB:UPGNPD_PYR:PWF:TRIM(SCEN_DATE)
!        Label:ECP_CRBN1:CURIYR:IFLRG:PYEAR:BL:BM:BH:SL:SM:LG:DS:RS:GS:GT:GC:GF:UR:DP:DB:UPGNPD_PYR:PWF:TRIM(SCEN_DATE)
!
         CL_CHK = 0
         DO JYR = 1 , UNFPH - UNXPH + 1
            KYR = JYR + CURIYR + UNXPH - 2
            LYR = JYR + UNXPH - 1
            IF (KYR .LE. UNYEAR) THEN
               XYR = KYR
               P2025ADJ = 1.0
            ELSE
               XYR = UNYEAR
               P2025ADJ = UPCARGRW ** (KYR - UNYEAR)
            END IF
            LYR = JYR + UNXPH - 1
            DO IECP = 1 , ECP_D_NFL
               IF (UPFCOL(IECP) .EQ. 1) THEN
!
!                 COAL
!
                  ECPPRC2(JYR,IECP) = 0.0
                  ECPPRCN2(JYR,IECP) = 0.0
                  IF ((CURIYR + UHBSYR) .GE. UYR_CARWS) THEN
                     ECPCRB2(JYR,IECP) = PJCLEL(XYR) * P2025ADJ
                     ECPCRBN2(JYR,IECP) = PJCLEL(XYR) * P2025ADJ
                  ELSE
                     ECPCRB2(JYR,IECP) = 0.0
                     ECPCRBN2(JYR,IECP) = 0.0
                  END IF
                  ECPCRB2(JYR,IECP) = ECPCRB2(JYR,IECP) * UPGNPD(KYR)
                  ECPCRBN2(JYR,IECP) = ECPCRBN2(JYR,IECP) * UPGNPD(KYR)
                  CL_CHK = IECP
               ELSE IF (UPFNUC(IECP) .EQ. 1) THEN

!                 NUCLEAR

                  ECPPRC2(JYR,IECP) = DBLE(NUCPRC(IFLRG,KYR) * UPGNPD(KYR))
                  ECPPRCN2(JYR,IECP) = DBLE(NUCPRC(IFLRG,KYR) * UPGNPD(KYR))
                  ECPCRB2(JYR,IECP) = DBLE(0.0)
                  ECPCRBN2(JYR,IECP) = DBLE(0.0)
               ELSE IF (UPFGAS(IECP) .EQ. 1) THEN

!                 Natural Gas As Primary Fuel

                  IF (UPFLCD(IECP) .EQ. "GS") THEN
                     IF (UPMXGAS(WIST,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXGAS(WIST,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSEIF (UPFLCD(IECP) .EQ. "GT") THEN
                     IF (UPMXGAS(WICT,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXGAS(WICT,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSEIF (UPFLCD(IECP) .EQ. "GC") THEN
                     IF (UPMXGAS(WICC,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXGAS(WICC,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSE
                     MX_FLSHR = 1.0
                  END IF

                  ECPPRC2(JYR,IECP) = 0.0
                  ECPCRB2(JYR,IECP) = DBLE(PJNGEL(XYR) * P2025ADJ * MX_FLSHR) * UPGNPD(KYR)
                  ECPPRCN2(JYR,IECP) = 0.0
                  ECPCRBN2(JYR,IECP) = DBLE(PJNGEL(XYR) * P2025ADJ) * UPGNPD(KYR)

!                 Add Secondary Oil if appropriate

                  IF (UPFDIS(IECP) .GT. 1) THEN
                     ECPPRC2(JYR,IECP) = 0.0
                     ECPCRB2(JYR,IECP) = ECPCRB2(JYR,IECP) + DBLE(PJDSEL(XYR) * P2025ADJ * (1.0 - MX_FLSHR)) * UPGNPD(KYR)
                  ELSEIF (UPFRES(IECP) .GT. 1) THEN
                     ECPPRC2(JYR,IECP) = 0.0
                     ECPCRB2(JYR,IECP) = ECPCRB2(JYR,IECP) + DBLE(PJRSEL(XYR) * P2025ADJ * (1.0 - MX_FLSHR)) * UPGNPD(KYR)
                  END IF
               ELSE IF (UPFRES(IECP) .EQ. 1) THEN

!                 Resid As Primary Fuel

                  IF (UPFLCD(IECP) .EQ. "RS") THEN
                     IF (UPMXOIL(WIST,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXOIL(WIST,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSE
                     MX_FLSHR = 1.0
                  END IF

                  ECPPRC2(JYR,IECP) = 0.0
                  ECPCRB2(JYR,IECP) = DBLE(PJRSEL(XYR) * P2025ADJ * MX_FLSHR) * UPGNPD(KYR)
                  ECPPRCN2(JYR,IECP) = 0.0
                  ECPCRBN2(JYR,IECP) = DBLE(PJRSEL(XYR) * P2025ADJ) * UPGNPD(KYR)

!                 Add Secondary Natural Gas if appropriate

                  IF (UPFGAS(IECP) .GT. 1) THEN
                     ECPPRC2(JYR,IECP) = 0.0
                     ECPCRB2(JYR,IECP) = ECPCRB2(JYR,IECP) + DBLE(PJNGEL(XYR) * P2025ADJ * (1.0 - MX_FLSHR)) * UPGNPD(KYR)
                  END IF
               ELSE IF (UPFDIS(IECP) .EQ. 1) THEN

!                 Distilate As Primary Fuel

                  IF (UPFLCD(IECP) .EQ. "DS") THEN
                     IF (UPMXOIL(WICC,IFLRG,XYR) .GT. 0.0) THEN
                        MX_FLSHR = UPMXOIL(WICC,IFLRG,XYR)
                     ELSE
                        MX_FLSHR = 1.0
                     END IF
                  ELSE
                     MX_FLSHR = 1.0
                  END IF

                  ECPPRC2(JYR,IECP) = 0.0
                  ECPCRB2(JYR,IECP) = DBLE(PJDSEL(XYR) * P2025ADJ * MX_FLSHR) * UPGNPD(KYR)
                  ECPPRCN2(JYR,IECP) = 0.0
                  ECPCRBN2(JYR,IECP) = DBLE(PJDSEL(XYR) * P2025ADJ) * UPGNPD(KYR)

!                 Add Secondary Natural Gas if appropriate

                  IF (UPFGAS(IECP) .GT. 1) THEN
                     ECPPRC2(JYR,IECP) = 0.0
                     ECPCRB2(JYR,IECP) = ECPCRB2(JYR,IECP) + DBLE(PJNGEL(XYR) * P2025ADJ * (1.0 - MX_FLSHR)) * UPGNPD(KYR)
                  END IF
               END IF
            END DO  ! IECP
!
            WRITE(UF_DBS,200) CURIYR,IFLRG,KYR+UHBSYR,(ECPPRC2(JYR,IECP),IECP=1,15),WOPEX(LYR),WHDEX(LYR),UPGNPD(KYR),PWF(DBLE(EPDSCRT),JYR),TRIM(SCEN_DATE) !//EMMDB//
            WRITE(UF_DBS,201) CURIYR,IFLRG,KYR+UHBSYR,(ECPPRCN2(JYR,IECP),IECP=1,15),WOPEX(LYR),WHDEX(LYR),UPGNPD(KYR),PWF(DBLE(EPDSCRT),JYR),TRIM(SCEN_DATE) !//EMMDB//
            WRITE(UF_DBS,202) CURIYR,IFLRG,KYR+UHBSYR,(ECPCRB2(JYR,IECP),IECP=1,15),UPGNPD(KYR),PWF(DBLE(EPDSCRT),JYR),TRIM(SCEN_DATE) !//EMMDB//
            WRITE(UF_DBS,203) CURIYR,IFLRG,KYR+UHBSYR,(ECPCRBN2(JYR,IECP),IECP=1,15),UPGNPD(KYR),PWF(DBLE(EPDSCRT),JYR),TRIM(SCEN_DATE) !//EMMDB//
!
            TNUM = 1
            IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
              DO IECP = 1 , 15
                LOOPING(TNUM) = LOOPING(TNUM) + 1                                     !//EMMDB//
                COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                !//EMMDB//
                COLV(TNUM,2,LOOPING(TNUM)) = IFLRG                                  !//EMMDB//
                COLV(TNUM,3,LOOPING(TNUM)) = KYR+UHBSYR                            !//EMMDB//
                COLV(TNUM,4,LOOPING(TNUM)) = IECP                                  !//EMMDB//
                COLV(TNUM,5,LOOPING(TNUM)) = ECPPRC2(JYR,IECP)                     !//EMMDB//
                IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                  COLVALS(:,:) = COLV(TNUM,:,:)
!                 CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  LOOPING(TNUM) = 0
                ENDIF
               END DO
            ENDIF
         END DO   ! JYR
!
!        Fill ECP Fuel Price Arrays
!
         JYR = UNFPH - UNXPH + 1
         NG_BASE(UNXPH) = PVV(WHDEX(UNXPH),ECP_D_FPH,JYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT) , UNXPH - 1)
         OL_BASE(UNXPH) = PVV(WOPEX(UNXPH),ECP_D_FPH,JYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT) , UNXPH - 1)
         DO IECP = 1 , ECP_D_NFL
            UPPFL(IECP ,IFLRG, UNXPH) = PVV(ECPPRC2(1,IECP),ECP_D_FPH,JYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT) , UNXPH - 1)
            UPPFLN(IECP ,IFLRG, UNXPH) = PVV(ECPPRCN2(1,IECP),ECP_D_FPH,JYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT) , UNXPH - 1)
            UPCRB(IECP ,IFLRG, UNXPH) = PVV(ECPCRB2(1,IECP),ECP_D_FPH,JYR,DBLE(EPDSCRT + URCARWT)) * PWF(DBLE(EPDSCRT + URCARWT) , UNXPH - 1)
            UPCRBN(IECP ,IFLRG, UNXPH) = PVV(ECPCRBN2(1,IECP),ECP_D_FPH,JYR,DBLE(EPDSCRT + URCARWT)) * PWF(DBLE(EPDSCRT + URCARWT) , UNXPH - 1)
!
!           Zero Out Carbon Price if there is an explicit carbon constraint in the ecp
!
            IF (USW_CAR .EQ. 1 .OR. USW_CAR .EQ. 3) THEN
               UPCRB(IECP,IFLRG,UNXPH) = 0.00
               UPCRBN(IECP,IFLRG,UNXPH) = 0.00
            END IF
         END DO   ! IECP
!
!        APPLY MULTIPLIER FOR FUEL PRICE EXPECTATIONS SENSITIVITIES
!
         DO IECP = 1 , ECP_D_NFL
            IF(UPXPFL(IECP).NE.0.0)THEN
               DO JYR = 1 , UNXPH
                 UPPFL(IECP,IFLRG,JYR) = UPPFL(IECP,IFLRG,JYR) * (1.0 + UPXPFL(IECP))
                 UPPFLN(IECP,IFLRG,JYR) = UPPFLN(IECP,IFLRG,JYR) * (1.0 + UPXPFL(IECP))
               END DO
            END IF
         END DO
!
         IF ((USW_DBS .GT. 0) .OR. (ORCLECP .EQ. 1)) THEN
            DO JYR = 1 , UNXPH
               KYR = JYR + CURIYR - 1
!              IF (USW_DBS .GT. 0) THEN
                  WRITE(UF_DBS,300) CURIYR,IFLRG,KYR+UHBSYR,(UPPFL(IECP,IFLRG,JYR),IECP=1,15),OL_BASE(JYR),NG_BASE(JYR),TRIM(SCEN_DATE) !//EMMDB//
                  WRITE(UF_DBS,301) CURIYR,IFLRG,KYR+UHBSYR,(UPPFLN(IECP,IFLRG,JYR),IECP=1,15),OL_BASE(JYR),NG_BASE(JYR),TRIM(SCEN_DATE) !//EMMDB//
                  WRITE(UF_DBS,302) CURIYR,IFLRG,KYR+UHBSYR,(UPCRB(IECP,IFLRG,JYR),IECP=1,15),TRIM(SCEN_DATE) !//EMMDB//
                  WRITE(UF_DBS,303) CURIYR,IFLRG,KYR+UHBSYR,(UPCRBN(IECP,IFLRG,JYR),IECP=1,15),TRIM(SCEN_DATE) !//EMMDB//
!              END IF
!
!              --- Write database table ECP_Fuel_Costs_Lump ---
!
               TNUM = 2
               IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                 IF (LOOPING(TNUM) .EQ. 0) THEN
                   NUMCOLS(TNUM) = 5
                   DYNSTM(TNUM) =  'INSERT INTO ECP_FUEL_COSTS_LUMP VALUES(?,?,?,?,?,?)'
                   WRTSTM(TNUM) =  'ECP_FUEL_COSTS_LUMP'
                 ENDIF
                 DO IECP = 1 , 15
                   LOOPING(TNUM) = LOOPING(TNUM) + 1
                   COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                !//EMMDB//
                   COLV(TNUM,2,LOOPING(TNUM)) = IFLRG                                  !//EMMDB//
                   COLV(TNUM,3,LOOPING(TNUM)) = KYR+UHBSYR                            !//EMMDB//
                   COLV(TNUM,4,LOOPING(TNUM)) = IECP                                  !//EMMDB//
                   COLV(TNUM,5,LOOPING(TNUM)) = UPPFL( IECP,IFLRG,JYR)                      !//EMMDB//
                   IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                     COLVALS(:,:) = COLV(TNUM,:,:)
!                    CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     LOOPING(TNUM) = 0
                   ENDIF
                  END DO   !  IECP
               END IF   !  IECP
!
            END DO   ! JYR
!
         END IF
!
  300    FORMAT(1X,"ECP_PRC2 :",I5,":",I3,":",I5,":",17(F9.3,":"),A)           !//EMMDB//
  301    FORMAT(1X,"ECP_PRCN2 :",I5,":",I3,":",I5,":",17(F9.3,":"),A)           !//EMMDB//
  302    FORMAT(1X,"ECP_CRB2 :",I5,":",I3,":",I5,":",15(F9.3,":"),A)           !//EMMDB//
  303    FORMAT(1X,"ECP_CRBN2 :",I5,":",I3,":",I5,":",15(F9.3,":"),A)           !//EMMDB//
!
!        Label:ECP_PRC2:CURIYR:IFLRG:PYEAR:BL:BM:BH:SL:SM:LG:DS:RS:GS:GT:GC:GF:UR:DP:DB:OL_BASE:NG_BASE:TRIM(SCEN_DATE)
!        Label:ECP_PRCN2:CURIYR:IFLRG:PYEAR:BL:BM:BH:SL:SM:LG:DS:RS:GS:GT:GC:GF:UR:DP:DB:OL_BASE:NG_BASE:TRIM(SCEN_DATE)
!        Label:ECP_CRB2:CURIYR:IFLRG:PYEAR:BL:BM:BH:SL:SM:LG:DS:RS:GS:GT:GC:GF:UR:DP:DB:TRIM(SCEN_DATE)
!        Label:ECP_CRBN2:CURIYR:IFLRG:PYEAR:BL:BM:BH:SL:SM:LG:DS:RS:GS:GT:GC:GF:UR:DP:DB:TRIM(SCEN_DATE)
!
      END DO  ! IFLRG

      IF (UNRGNS .GT. UNFRGN) THEN  ! fill in nuclear costs for all EMM regions - same for all regions
      DO IRG = UNFRGN + 1, UNRGNS
        DO IECP = 1, ECP_D_NFL
          IF (UPFNUC(IECP) .EQ. 1) THEN
             DO JYR = 1, UNXPH
                UPPFL(IECP,IRG,JYR) = UPPFL(IECP,UNFRGN,JYR)
                UPPFLN(IECP,IRG,JYR) = UPPFLN(IECP,UNFRGN,JYR)
             ENDDO
          END IF
        ENDDO
      ENDDO
      ENDIF

      IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
         DO TNUM = 1 , NUMTABS
            IF (LOOPING(TNUM) .NE. 0) THEN
               COLVALS(:,:) = COLV(TNUM,:,:)
!              CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               LOOPING(TNUM) = 0
            ENDIF
         ENDDO
      ENDIF
!
      RETURN
      END

!     EP$ODSP REVISES OPERATE STRUCTURE FOR DISPATCHABLE CAPACITY TYPES.

      SUBROUTINE EP$ODSP(NERC,YEAR)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'dispett'
      include 'dispin'
      include 'ecpcntl'
      include 'bildin'
      include 'bildout'
      include 'dispout'
      include 'wrenew'
      include 'wwdcomon'
      include 'dispuse'
      include 'eusprc'
      include 'edbdef'
      include 'cdsparms'
      include 'uso2grp'
      include 'fuelin'
      include 'ecp_coal'
      include 'emission'
      include 'coalemm'
      include 'uefdout'
      include 'emeblk'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'

      COMMON /GPSECP/ GPSSUB
      REAL*8 GPSSUB(ECP_D_CAP,ECP_D_FPH)
!
      COMMON /DERATE/PLTDER
      REAL*4 PLTDER(MNUMNR,ECP_D_DSP,ECP_D_VLS,ECP_D_XPH)
!
      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)
!
      INTEGER NUMTABS
      PARAMETER (NUMTABS = 2)        ! total number of database tables in this subroutine
      REAL*8 VALUE,CF(ECP_D_VLS+1,ECP_D_MSP),VOMCST,GEN,PWF,GEN_MIN_SR,VALUE_MIN_SR,GEN_MAX_SR,VALUE_MAX_SR
      REAL*8 VALUE_HR, VALUE_MIN_SR_HR, VALUE_MAX_SR_HR
      REAL*8 DSCRT
      REAL*8 WDTH(ECP_D_VLS),HGHT(ECP_D_VLS),MCF,FOR,PMR,ONE$PMR,ACF
      REAL*8 ONE,ZERO,DERATE(ECP_D_VLS), ADJ_HGHT, MIN_HGHT, MAX_HGHT, DERATE_ORIG(ECP_D_VLS)
      REAL*8 DIGITS2,MAXS(ECP_D_MSP),SHOURS(ECP_D_MSP),LFR
      REAL*8 PV$VOML,VOM(ECP_D_FPH),VOML(ECP_D_FPH),PVGNP
      REAL*8 GPS(ECP_D_FPH),GPSCST
      REAL*8 PVV
      REAL*8 LEVFUEL
      REAL*8 MX_MRUN
      REAL*8 THOURS
      REAL*8 VAL_CAP_CO2,VAL_STD_CO2,VAL_QTY_CO2,CO2_LBMWH
      REAL*8 VAL_STD_GRD
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*8 DSP_HTRT_NMR(MAXNFR,ECP_D_DSP), DSP_HTRT_MR(MAXNFR,ECP_D_DSP), DSP_HTRT_MOD_NMR(MAXNFR,ECP_D_DSP), DSP_HTRT_MOD_MR(MAXNFR,ECP_D_DSP)
      REAL*8 HTRT_WIIG, HTRT_WIAC
      INTEGER*4 YEAR,FULLYR,NERC,VLS,LVLS,IP,MODE,JYR,MYR,IVLS,ICLS,IFOSBS
      INTEGER*4 OLYR,OPYRS,KYR,INOX,JP,IGRP,ISEG,JNOX,ECPt_TO
      INTEGER*4 LOAD,VLS1,LINDEX(ECP_D_VLS),ISP,IECP
      INTEGER*4 JVLS,NSTP(ECP_D_MSP),VLSMAP(ECP_D_VLS,ECP_D_MSP),MAPVLS(ECP_D_VLS,ECP_D_MSP)
      INTEGER*4 CLRG,CRG,IYR,TST_NOX(NOX_D_GRP,ECP_D_CAP,ECP_D_XPH)
      INTEGER*4 FLRG,FRG,NXT_FLRG(MNUMNR),N_FLRG,CAR,CSRG
      INTEGER*4 CO2_PLTET
      CHARACTER*16 ROW,COLUMN,ROW_NOX,COLUMN_MR,ROWCAR,ROW_SR,COLUMN_MIN_SR,COLUMN_MAX_SR,ROW_NSR
      CHARACTER*16 ROWQ,ROW_HTRT,COLUMN_HTRT,COLUMN_MR_HTRT,COLUMN_MIN_SR_HTRT,COLUMN_MAX_SR_HTRT
      CHARACTER*12 FROM_LABEL
      CHARACTER*2 COL,CNSCOD
      CHARACTER*2 ANOX
      CHARACTER*1 SCODE(ECP_D_MSP), SCODE_HTRT(ECP_D_MSP)
      CHARACTER*1 C_SP_NG
      LOGICAL HR_NMR(MAXNFR,ECP_D_DSP), HR_MR(MAXNFR,ECP_D_DSP), HR_MOD_NMR(MAXNFR,ECP_D_DSP), HR_MOD_MR(MAXNFR,ECP_D_DSP)

      REAL*8 B_HTRT_ADJ
      INTEGER*4 B_YR

      INTEGER*4  FUEL_RGN, ECPt
      REAL*8 Load_Level, HTRT_ADJ, HTRT_ADJ_MIN, HTRT_ADJ_MAX, Target_EFF, Max_EFF

      COMMON/COAL_AVAIL/ AVAIL
      INTEGER*4 AVAIL(6,MNUMNR)

      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN

      REAL*8 VALUE_HTRT
      INTEGER*4 HTRT_TEST         ! 0 => Option is available; 1 => Option not available
      REAL*4 HRIOVR
      INTEGER IQ
      
      ecpsub='EP$ODSP'

!
!     STORE 111d SWITCH FOR MASS OR RATE STANDARDS FOR REGION
!
      DO IECP = 1 , ECP_D_CAP
         CO2_PLTSW(IECP) = CO2_PLTRG(IECP,NERC)
      END DO

      DO RPS_RGN = 1 , MNUMNR
         MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
      END DO

      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN
         MAP_NERC_TO_RPS_RGN(8) = 9                  
      END IF

      RPS_RGN = MAP_NERC_TO_RPS_RGN(NERC)

      LOOPING = 0
      NUMCOLS = 0
      DYNSTM = ' '
      WRTSTM = ' '
      COLVALS = 0.0
      COLV = 0.0
      CHCOLVALS = ' '
      CHCOLV = ' '

      COL = ' :'

      IF (NERC .EQ. 1 .AND. YEAR .EQ. 1) THEN
         TST_NOX = 0
      END IF

!     INITIALIZE HOURS PER SEASON

      DO ISP = 1 , EPNMSP
         SCODE(ISP) = UPRGCD(ISP)
         SCODE_HTRT(ISP) = UPMDCD(ISP)
      END DO

      ZERO = DBLE(0.0)
      ONE = DBLE(1.0)
      IF (YEAR .LT. UNXPH) THEN
      FULLYR = YEAR + CURIYR + UHBSYR - 1
      ELSE
         FULLYR = MIN(UNYEAR + UHBSYR , UNFPH + CURIYR + UHBSYR - 1)
      END IF
      JYR = YEAR + CURIYR - 1
      IF (YEAR .LT. UNXPH)THEN
      MYR = MIN(JYR , UNYEAR)
      ELSE
         MYR = MIN(UNFPH + CURIYR - 1, UNYEAR)
      END IF

!     INITIALIZE SEASONAL PEAKS AND HOURS PER SEASON

      DO ISP = 1 , EPNMSP
         MAXS(ISP) = EPSPK(ISP,YEAR)
         SHOURS(ISP) = DBLE(0.0)
         NSTP(ISP) = 0
         DO VLS = 1 , EPNSTP(YEAR)
            VLSMAP(VLS,ISP) = 0
            MAPVLS(VLS,ISP) = 0
         END DO
      END DO

!     DETERMINE CAPACITY FACTOR AT EACH LOAD STEP

      DO ISP = 1 , EPNMSP
         CF(1,ISP) = ZERO
         VLS = EPFRST(ISP,YEAR)
         JVLS = 0
         DO WHILE (VLS .GT. 0)
            JVLS = JVLS + 1
            VLSMAP(JVLS,ISP) = VLS
            MAPVLS(VLS,ISP) = JVLS
            HGHT(VLS) = EPHGHT(VLS,YEAR) + UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)) + UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
            WDTH(VLS) = EPWDTH(VLS,YEAR)
            LINDEX(VLS) = EPLDGR(VLS,YEAR)
            SHOURS(ISP) = SHOURS(ISP) + EPWDTH(VLS,YEAR) * DBLE(0.001)
            VLS1 = JVLS + 1
            CF(VLS1,ISP) = CF(JVLS,ISP) + EPWDTH(VLS,YEAR)
            VLS = EPNEXT(VLS,YEAR)
         END DO
         NSTP(ISP) = JVLS
      END DO

      DO ISP = 1 , EPNMSP
         MAXS(ISP) = EPSPK(ISP,YEAR)
      END DO

      DO ISP = 1 , EPNMSP
         LVLS = NSTP(ISP) + 1
         IF (CF(LVLS,ISP) .GT. 0.0) THEN
            DO VLS = 1 , NSTP(ISP) + 1
               CF(VLS,ISP) = CF(VLS,ISP) / CF(LVLS,ISP)
            END DO
         END IF
      END DO

!     Calculate Average Heatrates

      DSP_HTRT_NMR = 0.0
      HR_NMR = .FALSE.
      DSP_HTRT_MR = 0.0
      HR_MR = .FALSE.
      DSP_HTRT_MOD_NMR = 0.0
      HR_MOD_NMR = .FALSE.
      DSP_HTRT_MOD_MR = 0.0
      HR_MOD_MR = .FALSE.
      FROM_LABEL = "EP_ODSP"

      DO IP = 1 , ECP_D_DSP
         IECP = UCPDSPI(IP)
         DO FLRG = 1 , UNFRGN

            IF ((FRG_EMM_MAP(NERC,FLRG) .GT. 0.0 .AND. UPVTYP(IP) .EQ. 0) .OR. (FL_CNXT_CST(NERC,FLRG) .GT. 0.0 .AND. UPVTYP(IP) .EQ. 1)) THEN

               CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

               IF (AVG_HTRT(IECP) .GT. 0.0) THEN
                  DSP_HTRT_NMR(FLRG,IECP) = AVG_HTRT(IECP)
                  HR_NMR(FLRG,IECP) = .TRUE.
               END IF

               IF (AVG_HTRT_MR(IECP) .GT. 0.0) THEN
                  DSP_HTRT_MR(FLRG,IECP) = AVG_HTRT_MR(IECP)
                  HR_MR(FLRG,IECP) = .TRUE.
               END IF

               IF (AVG_HTRT_MOD(IECP) .GT. 0.0) THEN
                  DSP_HTRT_MOD_NMR(FLRG,IECP) = AVG_HTRT_MOD(IECP)
                  HR_MOD_NMR(FLRG,IECP) = .TRUE.
               END IF

               IF (AVG_HTRT_MR_MOD(IECP) .GT. 0.0) THEN
                  DSP_HTRT_MOD_MR(FLRG,IECP) = AVG_HTRT_MR_MOD(IECP)
                  HR_MOD_MR(FLRG,IECP) = .TRUE.
               END IF
            END IF
         END DO
      END DO

!     LOOP ON CAPACITY TYPE AND REVISE THE OPERATE VECTOR FOR EACH MODE FUEL TYPE
      
      DO IP = 1 , ECP_D_DSP
         ICLS = HG_CLASS(IP)
         IECP = UCPDSPI(IP)
         DSCRT = EPDSCRT
       
         IFOSBS = 0
         IF (UPPCFB(IECP,1) .GT. 0.001 .AND. UPAVLYR(IECP) .LT. 9000) THEN   !set flag for baseload fossil types which will use RESTORE CF mode
            IFOSBS = 1
          ENDIF
!
!        STORE 111d SWITCH FOR ET
!
         IF (IECP .EQ. WIET .OR. IECP .EQ. WICT .OR. IECP .EQ. WIAT) CO2_PLTET = CO2_PLTSW(IECP)

         IF ((EPECAP(0,IECP,YEAR) .GT. DBLE(0.0) .OR. (UPVTYP(IP) .EQ. 1 .AND. UPAVLYR(IECP) .LE. CURIYR + UHBSYR + UNFPH) .OR. WPTTYP(IP,NERC) .GT. 0 ) .AND. &  !.OR. WPTTYP(IP,NERC) .GT. 0
             (IECP .NE. WICN) .AND. (IECP .NE. WIAN) .AND. (IECP .NE. WISM)) THEN

            HRIOVR = 0.0
            DO IQ = 1 , UPHRNQRT
               IF (HTRT_OVRQ(IECP,IQ) .LT. 900.0 .AND. HTRT_OVRQ(IECP,IQ) .GT. HRIOVR)  HRIOVR = HTRT_OVRQ(IECP,IQ)
            END DO            
             
            HTRT_TEST = 0
            IF (HRIOVR .EQ. 0.0) HTRT_TEST = 1
            IF (CURIYR+UHBSYR+YEAR-1 .LT. HTRT_YEAR .AND. YEAR .LT. UNXPH) HTRT_TEST = 1

!           COMPUTE LEVELIZED VARIABLE O&M AND FUEL COSTS

            OLYR = UPPLYR(IECP) + 1
            IF (YEAR .EQ. 1) THEN
               IF (UPAVLYR(IECP) .LE. (FULLYR+UPPLYR(IECP))) THEN
                  OPYRS = UNFPH - OLYR + 1
                  DO KYR = 1 , OPYRS
                     VOML(KYR) = EPVOM(IECP) * UPGNPD(KYR + CURIYR + OLYR - 2)
                  END DO
                  PV$VOML = PVV(VOML,ECP_D_FPH,OPYRS,DSCRT) * PWF(DSCRT,OLYR - 1)
                  CALL EP$LGNP(OLYR,OPYRS,EPDSCRT, &
                     PVGNP)
                  EPLVVOM(IECP) = PV$VOML / PVGNP
                  EPLVFLC(IECP) = 0.0
               END IF
            END IF
            IF ((UPAVLYR(IECP) .LE. FULLYR) .OR. (EPECAP(0,IECP,YEAR) .GT. ZERO) .OR. (WPTTYP(IECP,NERC) .GT. 0))  THEN !.OR. (WPTTYP(IECP,NERC) .GT. 0

               PMR = DBLE(UPPMRT(IECP))
               FOR = DBLE(UPFORT(IECP))
               IF (UPVTYP(IECP) .EQ. 0) THEN
                  IF (UPMAXCF(IECP,NERC,MYR) .GT. 0.0) THEN
                     IF (UP_XFOR(IECP,NERC,MYR) .GT. 0.0) FOR = DBLE(UP_XFOR(IECP,NERC,MYR))
                     IF (UP_XPMR(IECP,NERC,MYR) .GT. 0.0) PMR = DBLE(UP_XPMR(IECP,NERC,MYR))
                     LFR = ONE - (DBLE(UPMAXCF(IECP,NERC,MYR)) / ((ONE - PMR) * (ONE - FOR)))
                     MCF = DBLE(UPMAXCF(IECP,NERC,MYR))

!                    IF (HTRT_TEST .EQ. 0) THEN
!                       WRITE(6,7331) CURIRUN, CURCALYR, MYR+1989, NERC, IECP, MCF, FOR, PMR, LFR
!7331                   FORMAT(1X,"EP_ODSP_UPMAXCF",5(":",I4),4(":",F12.6))
!                    END IF

                  ELSE
                     LFR = ONE - (DBLE(EPECFC(IECP,YEAR)) / ((ONE - PMR) * (ONE - FOR)))
                     MCF = DBLE(EPECFC(IECP,YEAR))

                     WRITE(18,7113) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,MYR+UHBSYR,NERC,IECP,UPMAXCF(IECP,NERC,MYR), &
                        EPECFC(IECP,YEAR),MCF,FOR,PMR,LFR,EPECAP(0,IECP,YEAR)
 7113                FORMAT(1X,"ZERO_UPMAXCF",5(":",I4),6(":",F7.3),":",F12.3)

                  END IF
               ELSE
                  MCF = UPMCF(IP)
                  LFR = ONE - (MCF / ((ONE - PMR) * (ONE - FOR)))
               END IF

!              CREATE ROW TO FORCE MUSTRUN REQUIREMENTS

               IF (MUSTRUN(IECP,NERC) .GT. 0.0) THEN
                  ROW = 'Q'//UPRGCD(NERC)//UPLNTCD(IECP)//'MRX'//UPYRCD(YEAR); call makmsk(ROW_mask,':Q:',UPRGCD(NERC),UPLNTCD(IECP),':MRX:',UPYRCD(YEAR))
                  CALL CROWTYPE(ROW,'G       ',ROW_mask)
                  MX_MRUN = MCF * EPECAP_MR(0,IECP,YEAR) * 8.760
                  VALUE = MIN(MX_MRUN , MUSTRUN(IECP,NERC)) * 0.001

                  WRITE(18,6113) CURIYR+UHBSYR,YEAR,MYR,NERC,IECP,UPMAXCF(IECP,NERC,CURIYR),UPMAXCF(IECP,NERC,MYR),EPECAP(0,IECP,YEAR), &
                        MCF,FOR,PMR,LFR,MX_MRUN,MUSTRUN(IECP,NERC),0.0
 6113                FORMAT(1X,"UPMAXCF_ECP",5(":",I4),10(":",E13.6))

                  CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ODSP,1')

!                 Create an escape vector for mustruns

                  COLUMN = 'Q'//UPRGCD(NERC)//UPLNTCD(IECP)//'XMR'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':Q:',UPRGCD(NERC),UPLNTCD(IECP),':XMR:',UPYRCD(YEAR))
                  CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$ODSP,2')
                  CALL CVAL(COLUMN,UPOBJ,DBLE(2000.0),COLUMN_mask,UPOBJ,'EP$ODSP,3')
               END IF
!
               DO ISP = 1 , EPNMSP
                  WRITE(C_SP_NG,'(I1)') ISP

                  MIN_HGHT = 999999.9
                  MAX_HGHT = 0.0
                  ADJ_HGHT = UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)) + UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
                  DO JVLS = 1 , NSTP(ISP)
                     VLS = VLSMAP(JVLS,ISP)
                     MIN_HGHT = MIN(MIN_HGHT , EPHGHT(VLS,YEAR) + ADJ_HGHT)
                     MAX_HGHT = MAX(MAX_HGHT , EPHGHT(VLS,YEAR) + ADJ_HGHT)
                  END DO

                  DO JVLS = 1 , NSTP(ISP)
                     VLS = VLSMAP(JVLS,ISP)
                     IGRP = EPLDGR(VLS,YEAR)
                     ISEG = EPLDSG(VLS,YEAR)

                     DERATE_ORIG(VLS) = (ONE - FOR) * (EPHGHT(VLS,YEAR) + ADJ_HGHT) / MAX_HGHT
                     
                     IF (IFOSBS .EQ. 1) THEN
                         DERATE(VLS) = MAX((ONE - FOR) * FOS_CF_ECP(ISEG,IGRP,NERC),SR_MIN_CF(IECP))
                     ELSE
                         DERATE(VLS) = DERATE_ORIG(VLS)
                     ENDIF

!                    DERATE(VLS) = (ONE - FOR) * (ONE - (LFR * SHOURS(ISP) * EP$LF(VLS,YEAR)) / (EPWDTH(VLS,YEAR) * DBLE(0.001)) )

!                    IF (CURIYR+UHBSYR .EQ. UPSTYR .AND. NERC .EQ. 1) THEN

                     IF (CURIYR+UHBSYR .EQ. UPSTYR) THEN
                        WRITE(18,7114) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,NERC,IECP,JVLS,VLS,ISP, &
                           EPHGHT(VLS,YEAR),EPWDTH(VLS,YEAR),EP$LF(VLS,YEAR),MCF,PMR,FOR,LFR,DERATE(VLS),  &
                           UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)),UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
 7114                   FORMAT(1X,'LFR ',7(":",I4),3(":",F12.3),7(":",F7.3))
                     END IF
 
!                    IF (UPVTYP(IECP) .EQ. 1 .AND. YEAR .EQ. 2)THEN
                     IF (UPVTYP(IECP) .EQ. 1 ) THEN
                        IF (UPLNTCD(IECP) .NE. 'CT' .AND. UPLNTCD(IECP) .NE. 'AT' .AND. UPLNTCD(IECP) .NE. 'IC')THEN
                           IF (JVLS .EQ. 1)THEN
                              PLTDER(NERC,IECP,VLS,YEAR) = DERATE_ORIG(VLS)
                              ACF = DERATE_ORIG(VLS) * EPWDTH(VLS,YEAR)
                           ELSE
                              IF (JVLS .NE. NSTP(ISP))THEN
                                 PLTDER(NERC,IECP,VLS,YEAR) = MCF
                                 ACF = ACF + MCF * EPWDTH(VLS,YEAR)
                              ELSE
                                 PLTDER(NERC,IECP,VLS,YEAR) = (MCF * SHOURS(ISP) * 1000.0 - ACF) / EPWDTH(VLS,YEAR)
                              END IF
                           END IF
                        ELSE
                           IF (JVLS .EQ. 1)THEN
                              PLTDER(NERC,IECP,VLS,YEAR) = DERATE_ORIG(VLS)
                              ACF = DERATE_ORIG(VLS) * EPWDTH(VLS,YEAR)
                           ELSE IF (JVLS .EQ. 2)THEN
                              PLTDER(NERC,IECP,VLS,YEAR) = (0.1 * SHOURS(ISP) * 1000.0 - ACF) / EPWDTH(VLS,YEAR)

!                                                    PLTDER(NERC,IECP,1,YEAR) * EPWDTH(VLSMAP(1,ISP),YEAR)) /  &
!                                                    EPWDTH(VLS,YEAR)

                           ELSE
                              PLTDER(NERC,IECP,VLS,YEAR) = 0.0
                           END IF
                        END IF

!                      IF (ISP .EQ. 1)PLTDER(NERC,IECP,VLS) = PLTDER(NERC,IECP,VLS) * (1.0 - (8760.0 / 2904.0) * UPPMRT(IECP))
!                      write(6,3333) curiyr+1989,nerc,uplntcd(iecp),  &
!                       isp,jvls,vls,derate(vls),pltder(nerc,iecp,vls),epwdth(vls,year)
!3333 format(1h ,'!derate',i4,i3,a3,i3,i3,i3,3f10.4)

                     END IF

                  END DO

!                 If capacity can provide non-spinning reserves then add to operating reserve for all load slices in a season as an option to other operate modes

                  IF (IECP .EQ. WIET .OR. IECP .EQ. WICT .OR. IECP .EQ. WIAT) THEN

                     N_FLRG = 0
                     DO FRG = 1 , UNFRGN
                        IF (HR_NMR(FRG,IECP) .OR. HR_MR(FRG,IECP) .OR. HR_MOD_NMR(FRG,IECP) .OR. HR_MOD_MR(FRG,IECP) ) THEN
                            N_FLRG = N_FLRG + 1
                            NXT_FLRG(N_FLRG) = FRG
                        END IF
                     END DO
                     DO FRG = 1 , N_FLRG
                        FLRG = NXT_FLRG(FRG)

                        COLUMN = 'O'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//'N'//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':O:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),':N:',SCODE(ISP),UPYRCD(YEAR))

!                       CAPACITY BALANCE ROW

                        ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                        VALUE = ONE
                        IF (HR_NMR(FLRG,IECP) .OR. HR_MOD_NMR(FLRG,IECP) ) &    !only if non-must run capacity available
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,4')

                        IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN

                           COLUMN_MR = 'M'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//'N'//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MR_mask,':M:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),':N:',SCODE(ISP),UPYRCD(YEAR))

!                          CAPACITY BALANCE ROW

                           ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'M'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':M:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                           VALUE = ONE
                           CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,5')
                        END IF

                        DO JVLS = 1 , NSTP(ISP)
                           VLS = VLSMAP(JVLS,ISP)
                           IGRP = EPLDGR(VLS,YEAR)
                           ISEG = EPLDSG(VLS,YEAR)
                           ROW_NSR = 'N'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_NSR_mask,':N:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                           VALUE = ONE - FOR
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                           IF (HR_NMR(FLRG,IECP) .OR. HR_MOD_NMR(FLRG,IECP) ) &    !only if non-must run capacity available
                           CALL CVAL(COLUMN,ROW_NSR,VALUE,COLUMN_mask,ROW_NSR_mask,'EP$ODSP,6')

                           IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                              CALL CVAL(COLUMN_MR,ROW_NSR,VALUE,COLUMN_MR_mask,ROW_NSR_mask,'EP$ODSP,7')
                           END IF

                           VALUE = -0.0001
                           IF (HR_NMR(FLRG,IECP) .OR. HR_MOD_NMR(FLRG,IECP) ) &    !only if non-must run capacity available                           
                           CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$ODSP,8')

                           IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                              CALL CVAL(COLUMN_MR,UPOBJ,VALUE,COLUMN_MR_mask,UPOBJ,'EP$ODSP,9')
                           END IF
                        END DO
                     END DO
                  END IF

!                 Create Operate Vectors

                  IVLS = 0
                  DO MODE = 1 , NSTP(ISP)
                     IVLS = IVLS + 1
                     LOAD = NSTP(ISP) - MODE + 1
                     IF ((UPPCFB(IP,2) .GE. CF(LOAD,ISP)) .AND. (UPPCFB(IP,1) .LE. CF(LOAD + 1,ISP))) THEN
                        IF (UPTTYP(IP) .LE. NW_COAL) THEN
                           N_FLRG = 0
                           DO FRG = 1 , UNFRGN
                              CRG = EPCLMP(FRG)
                              IF ((C_EMM_CDS(NERC,CRG) .EQ. 1 .AND. C_ECP_CDS(IP,CRG) .EQ. 1) .OR. &
                                  (FL_CNXT_CST(NERC,FRG) .GT. 0.0 .AND. C_ECP_CDS(IP,CRG) .EQ. 1 .AND. UPVTYP(IP) .EQ. 1)) THEN
                                  N_FLRG = N_FLRG + 1
                                  NXT_FLRG(N_FLRG) = FRG
                              END IF
                           END DO
                        ELSE
                           N_FLRG = 0
                           DO FRG = 1 , UNFRGN
                              IF (HR_NMR(FRG,IECP) .OR. HR_MR(FRG,IECP) .OR. HR_MOD_NMR(FRG,IECP) .OR. HR_MOD_MR(FRG,IECP) ) THEN
                                  N_FLRG = N_FLRG + 1
                                  NXT_FLRG(N_FLRG) = FRG
                              END IF
                           END DO
                        END IF

                        DO FRG = 1 , N_FLRG
                           FLRG = NXT_FLRG(FRG)
                          IF ( (YEAR .EQ. 1 .AND. EPECAP(FLRG,IECP,YEAR) .GT. 0.0) .OR. (YEAR .GT. 1)) THEN !only create operates if capacity exists in year 1
!                          Revise Heatrates for Plants with Capture to reflect NETL Program Goals if any

                           B_HTRT_ADJ = 1.0

                           IF (IECP .EQ. WIPQ) THEN
                              B_YR  = MIN(YEAR + CURIYR - 1 , MNUMYR)
                              B_HTRT_ADJ = (DSP_HTRT_NMR(FLRG,WIIG) / DSP_HTRT_NMR(FLRG,IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                           END IF

                           IF (IECP .EQ. WIIS) THEN
                              B_YR  = MIN(YEAR + CURIYR - 1 , MNUMYR)
                              B_HTRT_ADJ = (HTRT_WIIG / DSP_HTRT_NMR(FLRG,IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                              B_HTRT_ADJ = (DSP_HTRT_NMR(FLRG,WIIG) / DSP_HTRT_NMR(FLRG,IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                           END IF

                           IF (IECP .EQ. WICS) THEN
                              B_YR  = MIN(YEAR + CURIYR - 1 , MNUMYR)
                              B_HTRT_ADJ = (HTRT_WIAC / DSP_HTRT_NMR(FLRG,IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                              B_HTRT_ADJ = (DSP_HTRT_NMR(FLRG,WIAC) / DSP_HTRT_NMR(FLRG,IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                           END IF

                           CLRG = EPCLMP(FLRG)
                           CSRG = EPCSMP(FLRG)
                           COLUMN = 'O'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//UPMDCD(IVLS)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':O:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),UPMDCD(IVLS),SCODE(ISP),UPYRCD(YEAR))
                           IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                              COLUMN_HTRT = 'O'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//UPMDCD(IVLS)//SCODE_HTRT(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_HTRT_mask,':O:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),UPMDCD(IVLS),SCODE_HTRT(ISP),UPYRCD(YEAR))
                           END IF
                           IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                              COLUMN_MIN_SR = 'J'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//UPMDCD(IVLS)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_mask,':J:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),UPMDCD(IVLS),SCODE(ISP),UPYRCD(YEAR))
                              COLUMN_MAX_SR = 'U'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//UPMDCD(IVLS)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MAX_SR_mask,':U:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),UPMDCD(IVLS),SCODE(ISP),UPYRCD(YEAR))
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 COLUMN_MIN_SR_HTRT = 'J'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//UPMDCD(IVLS)//SCODE_HTRT(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_HTRT_mask,':J:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),UPMDCD(IVLS),SCODE_HTRT(ISP),UPYRCD(YEAR))
                                 COLUMN_MAX_SR_HTRT = 'U'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//UPMDCD(IVLS)//SCODE_HTRT(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MAX_SR_HTRT_mask,':U:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),UPMDCD(IVLS),SCODE_HTRT(ISP),UPYRCD(YEAR))
                              END IF
                           END IF

                           IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                              COLUMN_MR = 'M'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//UPMDCD(IVLS)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MR_mask,':M:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),UPMDCD(IVLS),SCODE(ISP),UPYRCD(YEAR))
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 COLUMN_MR_HTRT = 'M'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(IECP)//UPMDCD(IVLS)//SCODE_HTRT(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MR_HTRT_mask,':M:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(IECP),UPMDCD(IVLS),SCODE_HTRT(ISP),UPYRCD(YEAR))
                              END IF
                           END IF
!
                           GEN = ZERO
                           GEN_MIN_SR = ZERO
                           GEN_MAX_SR = ZERO

                           THOURS = ZERO

!                          IF CREATING MATRIX AND FIRST ECP YEAR PUT OPERATES IN CAPACITY BALANCE ROW.

!                          CAPACITY BALANCE ROW

                           ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                           VALUE = ONE
                           IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,10')

                           IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                              ROW_HTRT = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'H'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':H:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              VALUE = ONE
                              IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW_HTRT,VALUE,COLUMN_HTRT_mask,ROW_HTRT_mask,'EP$ODSP,11')
                           END IF

                           IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                              IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,12')
                              IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VALUE,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,13')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW_HTRT,VALUE,COLUMN_MIN_SR_HTRT_mask,ROW_HTRT_mask,'EP$ODSP,14')
                                 IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW_HTRT,VALUE,COLUMN_MAX_SR_HTRT_mask,ROW_HTRT_mask,'EP$ODSP,15')
                              END IF
                           END IF

                           IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                              ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'M'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':M:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                              VALUE = ONE
                              IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,16')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 ROW_HTRT = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'Y'//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(YEAR); call makmsk(ROW_HTRT_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':Y:',EPFLCD(FLRG),SCODE(ISP),UPYRCD(YEAR))
                                 VALUE = ONE
                                 IF (HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW_HTRT,VALUE,COLUMN_MR_HTRT_mask,ROW_HTRT_mask,'EP$ODSP,17')
                              END IF
                           END IF

!                          If capacity can provide non-spinning reserves then add to operating reserve for all load slice that it is not being used

                           IF (IECP .EQ. WIET .OR. IECP .EQ. WICT .OR. IECP .EQ. WIAT) THEN
                              DO JVLS = LOAD + 1 , NSTP(ISP)
                                 VLS = VLSMAP(JVLS,ISP)
                                 IGRP = EPLDGR(VLS,YEAR)
                                 ISEG = EPLDSG(VLS,YEAR)
                                 ROW_NSR = 'N'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_NSR_mask,':N:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                                 VALUE = ONE - FOR
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW_NSR,VALUE,COLUMN_mask,ROW_NSR_mask,'EP$ODSP,18')

                                 IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                    IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW_NSR,VALUE,COLUMN_MIN_SR_mask,ROW_NSR_mask,'EP$ODSP,19')
                                    IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW_NSR,VALUE,COLUMN_MAX_SR_mask,ROW_NSR_mask,'EP$ODSP,20')
                                 END IF

                                 IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                    IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW_NSR,VALUE,COLUMN_MR_mask,ROW_NSR_mask,'EP$ODSP,21')
                                 END IF
                              END DO
                           END IF

!                          Create Derates

                           DO JVLS = 1 , LOAD
                              VLS = VLSMAP(JVLS,ISP)
                              IGRP = EPLDGR(VLS,YEAR)
                              ISEG = EPLDSG(VLS,YEAR)
                              ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                              VALUE = DERATE(VLS)
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                              IF (HR_NMR(FLRG,IECP)) THEN
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,22')
                              END IF

                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_NMR(FLRG,IECP)) THEN
                                    CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,25')

                                 END IF
                              END IF

                              IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                 IF (HR_MR(FLRG,IECP)) THEN
                                    CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,28')
                                 END IF

                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_MR(FLRG,IECP)) THEN
                                       CALL CVAL(COLUMN_MR_HTRT,ROW,VALUE,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,31')
                                    END IF
                                 END IF
                              END IF

                              ONE$PMR = ONE - PMR
                              GEN = GEN + DERATE(VLS) * EPWDTH(VLS,YEAR)
                              THOURS = THOURS + EPWDTH(VLS,YEAR)

                              IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                 ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

                                 VALUE = SR_CREDIT(IECP) * (1.0 - DERATE(VLS))
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW_SR,VALUE,COLUMN_mask,ROW_SR_mask,'EP$ODSP,34')

                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW_SR,VALUE,COLUMN_HTRT_mask,ROW_SR_mask,'EP$ODSP,35')
                                 END IF

                                 IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                    IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW_SR,VALUE,COLUMN_MR_mask,ROW_SR_mask,'EP$ODSP,36')
                                    IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                       IF (HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW_SR,VALUE,COLUMN_MR_HTRT_mask,ROW_SR_mask,'EP$ODSP,37')
                                    END IF
                                 END IF

!                                Derate for min el and max sr mode = (1 - sr_min_lf) * sr_min_cf * (ld / min_ld) + sr_min_lf * sr_min_cf

                                 VALUE_MIN_SR = SR_MIN_LF(IECP)         * SR_MIN_CF(IECP) + &
                                                (1.0 - SR_MIN_LF(IECP)) * SR_MIN_CF(IECP) * ((EPHGHT(VLS,YEAR) + ADJ_HGHT) / MIN_HGHT)
                                 GEN_MIN_SR = GEN_MIN_SR + VALUE_MIN_SR * EPWDTH(VLS,YEAR)

                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)

                                 IF (HR_NMR(FLRG,IECP)) THEN
                                    CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,38')
                                 END IF

                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) THEN
                                       CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,41')
                                    END IF
                                 END IF

                                 VALUE_MIN_SR = SR_CREDIT(IECP) * (1.0 - VALUE_MIN_SR)
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)

                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW_SR,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_SR_mask,'EP$ODSP,44')
                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW_SR,VALUE_MIN_SR,COLUMN_MIN_SR_HTRT_mask,ROW_SR_mask,'EP$ODSP,45')
                                 END IF

!                                Derate for max el and min sr mode = (1 - sr_max_lf) * (1 - for) * (ld / max_ld) + sr_min_lf * (1 - for)

                                 VALUE_MAX_SR = SR_MAX_LF(IECP)         * (ONE - FOR) + &
                                                (1.0 - SR_MAX_LF(IECP)) * (ONE - FOR) * ((EPHGHT(VLS,YEAR) + ADJ_HGHT) / MAX_HGHT)
                                 GEN_MAX_SR = GEN_MAX_SR + VALUE_MAX_SR * EPWDTH(VLS,YEAR)

                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)

                                 IF (HR_NMR(FLRG,IECP)) THEN
                                    CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,46')
                                 END IF

                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) THEN
                                       CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,49')
                                    END IF
                                 END IF

                                 VALUE_MAX_SR = SR_CREDIT(IECP) * (1.0 - VALUE_MAX_SR)
                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)

                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW_SR,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_SR_mask,'EP$ODSP,52')
                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW_SR,VALUE_MAX_SR,COLUMN_MAX_SR_HTRT_mask,ROW_SR_mask,'EP$ODSP,53')
                                 END IF
                              END IF

!                             if (year .eq. 1 .and. iecp .eq. wiet .and. year .eq. 1)write(6,3456) curiyr+1989, &
!                                isp,load,jvls,igrp,iseg,eetime(isp),gen,upmcf(iecp)
!3456                         format('!ctcfecp',i4,i3,i3,i3,i3,i3,4f10.3)

                           END DO

!                          Calculate Heatrate Adjustments

                           HTRT_ADJ = 1.0
                           HTRT_ADJ_MIN = 1.0
                           HTRT_ADJ_MAX = 1.0

                           Load_Level = (GEN / (SHOURS(ISP) * 1000.0))
                           ECPt = IECP
                           FUEL_RGN = FLRG
                           FROM_LABEL = "ECP_" // COLUMN

                           CALL HTRT_ADJUSTMENT(FROM_LABEL, FUEL_RGN, ECPt, Load_Level, HTRT_ADJ, Target_EFF, Max_EFF)

                           IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                              Load_Level = (GEN_MIN_SR / (SHOURS(ISP) * 1000.0))
                              FROM_LABEL = "ECP_" // COLUMN_MIN_SR

                              CALL HTRT_ADJUSTMENT(FROM_LABEL, FUEL_RGN, ECPt, Load_Level, HTRT_ADJ_MIN, Target_EFF, Max_EFF)

                              Load_Level = (GEN_MAX_SR / (SHOURS(ISP) * 1000.0))
                              FROM_LABEL = "ECP_" // COLUMN_MAX_SR

                              CALL HTRT_ADJUSTMENT(FROM_LABEL, FUEL_RGN, ECPt, Load_Level, HTRT_ADJ_MAX, Target_EFF, Max_EFF)
                           END IF

                           FROM_LABEL = "EP_ODSP"

                           IF (GEN .LE. 0.0) THEN
                              WRITE(18,9114) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,ISP,NERC,IECP,UPLNTCD(IECP), &
                                 UPMCF(IP),MCF,FOR,PMR,LFR,GEN,(DERATE(VLSMAP(JVLS,ISP)),JVLS=1,LOAD)
 9114                         FORMAT(1X,"BAD_GEN",4(":",I4),1(":",I2,":",A2),19(":",F9.6))
                           END IF

!                          OBJECTIVE FUNCTION

                           ROW = UPOBJ ; ROW_mask=UPOBJ

                           B_YR = CURIYR + YEAR - 1
                           IF (YEAR .LT. UNXPH)THEN
                              VOMCST = UPGNPD(JYR) * EPVOM(IECP) * 1000.0 * PWF(DSCRT,YEAR)
                              GPSCST = UPGNPD(JYR) * GPSSUB(IECP,YEAR) * 1000.0 * PWF(DSCRT,YEAR)
                           ELSE
                              DO KYR = 1 , UNFPH - UNXPH + 1
                                 VOM(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * EPVOM(IECP) * 1000.0
                                 GPS(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * GPSSUB(IECP,KYR + UNXPH - 1) * 1000.0
                              END DO
                              KYR = UNFPH - UNXPH + 1
                              VOMCST = PVV(VOM(1),ECP_D_FPH,KYR,DBLE(DSCRT)) * PWF(DBLE(DSCRT),UNXPH - 1)
                              GPSCST = PVV(GPS(1),ECP_D_FPH,KYR,DBLE(DSCRT)) * PWF(DBLE(DSCRT),UNXPH - 1)
                           END IF

                           VALUE = 0.000001 * GEN * (VOMCST - GPSCST)

                           IF (ISNAN(VALUE)) THEN
                              WRITE(6,2317) CURIRUN, CURCALYR, CURIYR+YEAR+1988, IECP, NERC, COLUMN, &
                                 GEN, VOMCST, GPSCST, EPVOM(IECP), GPSSUB(IECP,YEAR)
 2317                         FORMAT(1X,"ISNAN_EP_ODSP_OBJ",5(":",I4),":",A16,5(":",F21.6))

                              VALUE = 1999.99
                           END IF

                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                           IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,54')

                           IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                              IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,55')
                           END IF

                           IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                              IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,56')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VALUE,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,57')
                              END IF
                           END IF

                           IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                              VALUE_MIN_SR = 0.000001 * GEN_MIN_SR * (VOMCST - GPSCST)
                              IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                              IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,58')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,59')
                              END IF

                              VALUE_MAX_SR = 0.000001 * GEN_MAX_SR * (VOMCST - GPSCST)
                              IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                              IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,60')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,61')
                              END IF
                           END IF
                       
                           IF (CURIYR+UHBSYR .EQ. UPSTYR .AND. NERC .EQ. 1) THEN
                              WRITE(18,2319) CURIRUN,CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,B_YR,NERC,IP,FLRG,COLUMN,VALUE,GEN*0.001,VOMCST*0.001, &
                                 DSP_HTRT_NMR(FLRG,IECP)*0.001, UPPCEF(IP), UPPSEF(IP), UPPSRT(IP), DSP_HTRT_MR(FLRG,IECP)*0.001, &
                                 UECP_HTRT_ADJ(IECP), B_HTRT_ADJ, 0.001, EPVOM(IECP), GPSCST * 0.001, HTRT_ADJ, HTRT_ADJ_MIN, HTRT_ADJ_MAX
 2319                         FORMAT(1X,"EP_ODSP",7(":",I4),":",A8,16(":",F9.3))
                           END IF
                       
!                          MUSTRUN CONSTRAINT

                           IF (MUSTRUN(IECP,NERC) .GT. 0.0 .AND. EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                              ROW = 'Q'//UPRGCD(NERC)//UPLNTCD(IECP)//'MRX'//UPYRCD(YEAR); call makmsk(ROW_mask,':Q:',UPRGCD(NERC),UPLNTCD(IECP),':MRX:',UPYRCD(YEAR))
                              VALUE =  0.001 * GEN
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,62')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VALUE,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,63')
                              END IF
                           END IF

!                          NOX EMISSIONS CONSTRAINT

                           IF (YEAR .GT. NOX_LT) THEN
                              JP = IECP
                              DO INOX = 1 , NOX_GRP
                                 ANOX = NOX_RG(INOX)
                                 ROW = 'EUN'//UPLNTCD(IECP)//ANOX//UPYRCD(YEAR); call makmsk(ROW_mask,':EUN:',UPLNTCD(IECP),ANOX,UPYRCD(YEAR))
                                 TST_NOX(INOX,IECP,YEAR) = 1
                                 VALUE = DBLE(0.0000005) * GEN * DSP_HTRT_NMR(FLRG,IECP) * B_HTRT_ADJ * EPNOX_G(ISP,YEAR,JP,INOX) * HTRT_ADJ
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                                 IF (VALUE .GT. ECP_MIN) THEN
                                    IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,64')
                                 END IF

                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    VALUE = DBLE(0.0000005) * GEN * DSP_HTRT_MOD_NMR(FLRG,IECP) * B_HTRT_ADJ * EPNOX_G(ISP,YEAR,JP,INOX) * HTRT_ADJ
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    IF (VALUE .GT. ECP_MIN) THEN
                                       IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,65')
                                    END IF
                                 END IF

                                 IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                    VALUE = DBLE(0.0000005) * GEN * DSP_HTRT_MR(FLRG,IECP) * B_HTRT_ADJ * EPNOX_G(ISP,YEAR,JP,INOX) * HTRT_ADJ
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    IF (VALUE .GT. ECP_MIN) THEN
                                       IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,66')
                                    END IF

                                    IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                       VALUE = DBLE(0.0000005) * GEN * DSP_HTRT_MOD_MR(FLRG,IECP) * B_HTRT_ADJ * EPNOX_G(ISP,YEAR,JP,INOX) * HTRT_ADJ
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       IF (VALUE .GT. ECP_MIN) THEN
                                          IF (HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VALUE,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,67')
                                       END IF
                                    END IF
                                 END IF

                                 IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                    VALUE_MIN_SR = DBLE(0.0000005) * GEN_MIN_SR * DSP_HTRT_NMR(FLRG,IECP) * B_HTRT_ADJ * EPNOX_G(ISP,YEAR,JP,INOX) * HTRT_ADJ_MIN
                                    IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                    IF (VALUE_MIN_SR .GT. ECP_MIN) THEN
                                       IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,68')
                                    END IF

                                    IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                       VALUE_MIN_SR = DBLE(0.0000005) * GEN_MIN_SR * DSP_HTRT_MOD_NMR(FLRG,IECP) * B_HTRT_ADJ * EPNOX_G(ISP,YEAR,JP,INOX) * HTRT_ADJ_MIN
                                       IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                       IF (VALUE_MIN_SR .GT. ECP_MIN) THEN
                                          IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,69')
                                       END IF
                                    END IF

                                    VALUE_MAX_SR = DBLE(0.0000005) * GEN_MAX_SR * DSP_HTRT_NMR(FLRG,IECP) * B_HTRT_ADJ * EPNOX_G(ISP,YEAR,JP,INOX) * HTRT_ADJ_MAX
                                    IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                    IF (VALUE_MAX_SR .GT. ECP_MIN) THEN
                                       IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,70')
                                    END IF
                                    IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                       VALUE_MAX_SR = DBLE(0.0000005) * GEN_MAX_SR * DSP_HTRT_MOD_NMR(FLRG,IECP) * B_HTRT_ADJ * EPNOX_G(ISP,YEAR,JP,INOX) * HTRT_ADJ_MAX
                                       IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                       IF (VALUE_MAX_SR .GT. ECP_MIN) THEN
                                          IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,71')
                                       END IF
                                    END IF
                                 END IF

                              END DO
                           END IF

!                          CO2 OUTPUT STANDARD
!
!                          INCLUDE CT IF CF > THRESHHOLD
!
                           IF (IECP .EQ. WIET .OR. IECP .EQ. WICT .OR. IECP .EQ. WIAT)THEN
                              IF (CO2_STDTN(NERC) .EQ. 2 .AND. (GEN / EETIME(ISP)) .GT. CO2_THRET)THEN
                                 CO2_PLTSW(IECP) = 1.0
                              ELSE
                                 CO2_PLTSW(IECP) = CO2_PLTET
                              END IF
!                          ELSE IF ((IECP .EQ. WICT .OR. IECP .EQ. WIAT) .AND. CO2_PLTSW(IECP) .GT. 0.0)THEN
!                             IF ((GEN / EETIME(ISP)) .GT. CO2_TRHET)THEN
!                                CO2_PLTSW(IECP) = 1.0
!                             ELSE
!                                CO2_PLTSW(IECP) = 0.0
!                             END IF
                           END IF

                           IF (CO2_PLTSW(IECP) .GT. 0.0 .AND.  &
                              (CO2_STDSW .GT. 0 .AND. CO2_NRYR(NERC,YEAR) .GT. 0.0))THEN
                              ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
                              ROWQ = 'EQCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROWQ_mask,':EQCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')

                              VALUE = DSP_HTRT_NMR(FLRG,IECP) * B_HTRT_ADJ * DBLE(0.001) * HTRT_ADJ
                              VALUE_MIN_SR = DSP_HTRT_NMR(FLRG,IECP) * B_HTRT_ADJ * DBLE(0.001) * HTRT_ADJ_MIN
                              VALUE_MAX_SR = DSP_HTRT_NMR(FLRG,IECP) * B_HTRT_ADJ * DBLE(0.001) * HTRT_ADJ_MAX

                              IF (VALUE .GT. ECP_MIN)THEN
                                 IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                    CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                 ELSE
                                    CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                 END IF

!                                IF (IECP .EQ. WIC1 .OR. IECP .EQ. WIEC)write(6,3232)curiyr+1989,year,row,value,eclel(curiyr),  &
!                                   CO2_LBMWH, CO2_FRYR(FLRG,YEAR),  &
!                                   column,gen*0.001,(CO2_LBMWH - CO2_FRYR(FLRG,YEAR)) * GEN * DBLE(0.001),  &
!                                   column_min_sr,gen_min_sr*0.001,(CO2_LBMWH - CO2_FRYR(FLRG,YEAR)) * GEN_MIN_SR * DBLE(0.001),  &
!                                   column_max_sr,gen_max_sr*0.001,(CO2_LBMWH - CO2_FRYR(FLRG,YEAR)) * GEN_MAX_SR * DBLE(0.001)
!3232                            format(1h ,'!co2ecp',i4,i3,a10,4f10.1,3(a10,2f10.1))

                                 VAL_STD_CO2 = (CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                 VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                 IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
                                 IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                 IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$ODSP,72')

                                 VAL_QTY_CO2 = CO2_LBMWH * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                 VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                 IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
                                 IF (VAL_QTY_CO2 .GT. ECP_MIN)CALL CVAL(COLUMN,ROWQ,VAL_QTY_CO2,COLUMN_mask,ROWQ_mask,'EP$ODSP,73')


                                 IF (SR_CREDIT(IECP) .GT. 0.0) THEN

                                    IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                       CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_MIN_SR * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                    ELSE
                                       CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_MIN_SR * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                    END IF

                                    VAL_STD_CO2 = (CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * GEN_MIN_SR * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                    VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
                                    IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                    IF (VAL_STD_CO2 .NE. 0.0) THEN
                                       IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VAL_STD_CO2,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,74')
                                    END IF

                                    VAL_QTY_CO2 = CO2_LBMWH * GEN_MIN_SR * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                    VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
                                    IF (VAL_QTY_CO2 .GT. ECP_MIN)CALL CVAL(COLUMN_MIN_SR,ROWQ,VAL_QTY_CO2,COLUMN_MIN_SR_mask,ROWQ_mask,'EP$ODSP,75')

                                    IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                       CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_MAX_SR * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                    ELSE
                                       CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_MAX_SR * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                    END IF

                                    VAL_STD_CO2 = (CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * GEN_MAX_SR * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                    IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
                                    VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                    IF (VAL_STD_CO2 .GT. ECP_MIN) THEN
                                       IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VAL_STD_CO2,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,76')
                                    END IF

                                    VAL_QTY_CO2 = CO2_LBMWH * GEN_MAX_SR * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                    VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
                                    IF (VAL_QTY_CO2 .GT. ECP_MIN)CALL CVAL(COLUMN_MAX_SR,ROWQ,VAL_QTY_CO2,COLUMN_MAX_SR_mask,ROWQ_mask,'EP$ODSP,77')
                                 END IF

!                                if (flrg .eq. 2 .and. year .eq. 1)write(6,4567) curiyr+1989,nerc,iecp,uplntcd(iecp),co2_pltsw(iecp),co2_lbmwh,co2_fryr(flrg,year),value,  &
!                                   column,gen*0.001, GEN * 0.001 * (CO2_LBMWH - CO2_STDRF(FLRG,YEAR)) * CO2_PLTSW(IECP),  &
!                                   column_min_sr,gen_min_sr*0.001, GEN_MIN_SR * 0.001 * (CO2_LBMWH - CO2_STDRF(FLRG,YEAR)) * CO2_PLTSW(IECP),  &
!                                   column_max_sr,gen_max_sr*0.001, GEN_MAX_SR * 0.001 * (CO2_LBMWH - CO2_STDRF(FLRG,YEAR)) * CO2_PLTSW(IECP)
!4567                            format(1h ,'!co2foe',i4,i3,i3,a3,f4.1,f6.0,f6.0,f7.0,3(a10,2f10.1))

!mr                              IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
!mr                                 VALUE = DSP_HTRT_MR(FLRG,IECP) * B_HTRT_ADJ * DBLE(0.001)
!mr                                 IF (UPTTYP(IP) .LE. NW_COAL) THEN
!mr                                    CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
!mr                                 ELSE
!mr                                    CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
!mr                                 END IF
!                                   APPLY COGEN ADJUSTMENT TO MUST-RUNS (NT COGEN)
!mr                                 CO2_LBMWH = CO2_LBMWH / CO2_ADJNT
!mr                                 VAL_STD_CO2 = (CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
!mr                                 VAL_STD_CO2 = VAL_STD_CO2 * 0.001
!mr                                 IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
!mr                                 IF (VAL_STD_CO2 .GT. ECP_MIN .AND. HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VAL_STD_CO2,'EP$ODSP,78')
!mr                                 VAL_QTY_CO2 = CO2_LBMWH * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
!mr                                 VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
!mr                                 IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
!mr                                 IF (VAL_QTY_CO2 .GT. ECP_MIN .AND. HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROWQ,VAL_QTY_CO2,'EP$ODSP,79')
!mr                              END IF

                              END IF

                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 VALUE_HTRT = DSP_HTRT_MOD_NMR(FLRG,IECP) * B_HTRT_ADJ * DBLE(0.001)
                                 VALUE_MIN_SR = DSP_HTRT_MOD_NMR(FLRG,IECP) * B_HTRT_ADJ * DBLE(0.001) * HTRT_ADJ_MIN
                                 VALUE_MAX_SR = DSP_HTRT_MOD_NMR(FLRG,IECP) * B_HTRT_ADJ * DBLE(0.001) * HTRT_ADJ_MAX
                                 IF (VALUE_HTRT .GT. ECP_MIN)THEN
                                    IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                       CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_HTRT * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                    ELSE
                                       CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_HTRT * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                    END IF

                                    VAL_STD_CO2 = (CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                    VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
                                    IF (VAL_STD_CO2 .GT. ECP_MIN .AND. HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VAL_STD_CO2,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,80')

                                    VAL_QTY_CO2 = CO2_LBMWH * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                    VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
                                    IF (VAL_QTY_CO2 .GT. ECP_MIN .AND. HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROWQ,VAL_QTY_CO2,COLUMN_HTRT_mask,ROWQ_mask,'EP$ODSP,81')

                                    IF (SR_CREDIT(IECP) .GT. 0.0) THEN

                                       IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                          CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_MIN_SR * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                       ELSE
                                          CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_MIN_SR * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                       END IF

                                       VAL_STD_CO2 = (CO2_LBMWH - CO2_FRYR(FLRG,YEAR)) * GEN_MIN_SR * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                       VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                       IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
                                       IF (VAL_STD_CO2 .GT. ECP_MIN) THEN
                                          IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VAL_STD_CO2,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,82')
                                       END IF

                                       VAL_QTY_CO2 = CO2_LBMWH * GEN_MIN_SR * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                       VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                       IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
                                       IF (VAL_QTY_CO2 .GT. ECP_MIN .AND. HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROWQ,VAL_QTY_CO2,COLUMN_MIN_SR_HTRT_mask,ROWQ_mask,'EP$ODSP,83')

                                       IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                          CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_MAX_SR * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                       ELSE
                                          CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_MAX_SR * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
                                       END IF

                                       VAL_STD_CO2 = (CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * GEN_MAX_SR * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                       VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                       IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
                                       IF (VAL_STD_CO2 .GT. ECP_MIN) THEN
                                          IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VAL_STD_CO2,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,84')
                                       END IF

                                       VAL_QTY_CO2 = CO2_LBMWH * GEN_MAX_SR * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                       VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                       IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
                                       IF (VAL_QTY_CO2 .GT. ECP_MIN .AND. HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROWQ,VAL_QTY_CO2,COLUMN_MAX_SR_HTRT_mask,ROWQ_mask,'EP$ODSP,85')
                                    END IF

!mr                                 IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
!mr                                    VALUE_HTRT = DSP_HTRT_MOD_MR(FLRG,IECP) * B_HTRT_ADJ * DBLE(0.001) * HTRT_ADJ
!mr                                    IF (UPTTYP(IP) .LE. NW_COAL) THEN
!mr                                       CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_HTRT * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
!mr                                    ELSE
!mr                                       CO2_LBMWH = (1.0 - UPPCEF(IECP)) * VALUE_HTRT * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0
!mr                                    END IF
!mr                                    VAL_STD_CO2 = (CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
!mr                                    VAL_STD_CO2 = VAL_STD_CO2 * 0.001
!mr                                    IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
!mr                                    IF (VAL_STD_CO2 .GT. ECP_MIN .AND. HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VAL_STD_CO2,'EP$ODSP,86')
!mr                                    VAL_QTY_CO2 = CO2_LBMWH * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
!mr                                    VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
!mr                                    IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
!mr                                    IF (VAL_QTY_CO2 .GT. ECP_MIN .AND. HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROWQ,VAL_QTY_CO2,'EP$ODSP,87')
!mr                                 END IF
                                 END IF
                              END IF
                           END IF
!
!                          GRID RESILIENCE ROW, IF APPROPRIATE
!
                           IF (GRD_RATS(IECP,NERC) .GE. 0.0)THEN
                              ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(YEAR))
                              VAL_STD_GRD = (GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR)) * GEN * DBLE(0.001)
!                             VAL_STD_GRD = VAL_STD_GRD * 0.001
                              IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                              IF (VAL_STD_GRD .NE. DBLE(0.0) .AND. HR_NMR(FLRG,IECP))CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$ODSP,88')

                              IF (SR_CREDIT(IECP) .GT. 0.0) THEN

                                 VAL_STD_GRD = (GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR)) * GEN_MIN_SR * DBLE(0.001)
!                                VAL_STD_GRD = VAL_STD_GRD * 0.001
                                 IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                 IF (VAL_STD_GRD .NE. DBLE(0.0)) THEN
                                    IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VAL_STD_GRD,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,89')
                                 END IF

                                 VAL_STD_GRD = (GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR)) * GEN_MAX_SR * DBLE(0.001)
!                                VAL_STD_GRD = VAL_STD_GRD * 0.001
                                 IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                 IF (VAL_STD_GRD .NE. DBLE(0.0)) THEN
                                    IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VAL_STD_GRD,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,90')
                                 END IF
                              END IF

                              IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                 VAL_STD_GRD = (GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR)) * GEN * DBLE(0.001)
!                                VAL_STD_GRD = VAL_STD_GRD * 0.001
                                 IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                 IF (VAL_STD_GRD .NE. DBLE(0.0) .AND. HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VAL_STD_GRD,COLUMN_MR_mask,ROW_mask,'EP$ODSP,91')
                              END IF

                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 VAL_STD_GRD = (GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR)) * GEN * DBLE(0.001)
!                                VAL_STD_GRD = VAL_STD_GRD * 0.001
                                 IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                 IF (VAL_STD_GRD .NE. DBLE(0.0) .AND. HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VAL_STD_GRD,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,92')

                                 IF (SR_CREDIT(IECP) .GT. 0.0) THEN

                                    VAL_STD_GRD = (GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR)) * GEN_MIN_SR * DBLE(0.001)
!                                   VAL_STD_GRD = VAL_STD_GRD * 0.001
                                    IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                    IF (VAL_STD_GRD .NE. DBLE(0.0)) THEN
                                       IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VAL_STD_GRD,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,93')
                                    END IF

                                    VAL_STD_GRD = (GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR)) * GEN_MAX_SR * DBLE(0.001)
!                                   VAL_STD_GRD = VAL_STD_GRD * 0.001
                                    IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                    IF (VAL_STD_GRD .NE. DBLE(0.0)) THEN
                                       IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VAL_STD_GRD,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,94')
                                    END IF
                                 END IF
                              END IF
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                    VAL_STD_GRD = (GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR)) * GEN * DBLE(0.001)
!                                   VAL_STD_GRD = VAL_STD_GRD * 0.001
                                    IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                    IF (VAL_STD_GRD .NE. DBLE(0.0) .AND. HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VAL_STD_GRD,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,95')
                                 END IF
                              END IF
                           END IF

!                          Accumulate Generation by Plant Types

                           ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':GEN:',UPYRCD(YEAR))
                           VALUE = GEN / 1000.0
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                           IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,96')
                           IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                              IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,97')
                           END IF

                           IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                              IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,98')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VALUE,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,99')
                              END IF
                           END IF

                           IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                              VALUE_MIN_SR = GEN_MIN_SR / 1000.0
                              IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                              IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,100')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,101')
                              END IF

                              VALUE_MAX_SR = GEN_MAX_SR / 1000.0
                              IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                              IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,102')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,103')
                              END IF
                           END IF

!                          include in renewable generation bound row 'portfolio standard', unless existing gen excluded

                           IF (UPRNWSHRR(IP,NERC) .GT. 0.00 .AND. UPRNWEXGR(IP,NERC) .LE. 0.0) THEN
                              ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(YEAR))
                              VALUE = DBLE(UPRNWSHRR(IP,NERC))
                              VALUE = VALUE * GEN / 1000.0
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,104')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,105')
                              END IF

                              IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                 IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,106')
                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VALUE,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,107')
                                 END IF
                              END IF

                              IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                 VALUE_MIN_SR = DBLE(UPRNWSHRR(IP,NERC))
                                 VALUE_MIN_SR = VALUE_MIN_SR * GEN_MIN_SR / 1000.0
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,108')
                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,109')
                                 END IF

                                 VALUE_MAX_SR = DBLE(UPRNWSHRR(IP,NERC))
                                 VALUE_MAX_SR = VALUE_MAX_SR * GEN_MAX_SR / 1000.0
                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,110')
                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,111')
                                 END IF
                              END IF

!                             row to exclude existing generation
!
!                          ELSE IF (UPRNWBNDR(CURIYR + YEAR + 1,RPS_RGN) .GT. 0.005 .AND. UPRNWEXG(IP,RPS_RGN) .GT. 0.00) THEN
!                             ROW = 'G'//UPRGCD(NERC)//UPLNTCD(IECP)//'EX'//UPRGCD(NERC)//UPYRCD(YEAR)
!                             VALUE = GEN / 1000.0
!                             IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
!                             IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VALUE,'EP$ODSP,112')

                           END IF

!                          If National RPS and Regional and National Contributions Differ

                           IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWEXG(IP) .LE. 0.0) THEN
                              IF (UPRNWSHR(IP) .GT. 0.0) THEN
                                 ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))
                                 VALUE = DBLE(UPRNWSHR(IP))
                                 VALUE = VALUE * GEN / 1000.0
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,113')
                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,114')
                                 END IF

                                 IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                    IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,115')
                                    IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                       IF (HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VALUE,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,116')
                                    END IF
                                 END IF

                                 IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                    VALUE_MIN_SR = DBLE(UPRNWSHR(IP))
                                    VALUE_MIN_SR = VALUE_MIN_SR * GEN_MIN_SR / 1000.0
                                    IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                    IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,117')
                                    IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                       IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,118')
                                    END IF

                                    VALUE_MAX_SR = DBLE(UPRNWSHR(IP))
                                    VALUE_MAX_SR = VALUE_MAX_SR * GEN_MAX_SR / 1000.0
                                    IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                    IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,119')
                                    IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                       IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,120')
                                    END IF
                                 END IF
                              END IF
                           ELSE IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWEXG(IP) .GT. 0.00) THEN

!                             row to exclude existing generation

                              ROW = 'G'//UPRGCD(NERC)//UPLNTCD(IECP)//'INC'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(NERC),UPLNTCD(IECP),':INC:',UPYRCD(YEAR))
                              VALUE = GEN / 1000.0
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,121')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VALUE,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,122')
                              END IF

                              IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                 IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,123')
                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VALUE,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,124')
                                 END IF
                              END IF

                              IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                 VALUE_MIN_SR = GEN_MIN_SR / 1000.0
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,125')
                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,126')
                                 END IF

                                 VALUE_MAX_SR = GEN_MAX_SR / 1000.0
                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,127')
                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,128')
                                 END IF
                              END IF

                              IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                                 IF (HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,129')
                              END IF
                           END IF

!                          REVISE CONSUMPTION ROW COEFFICIENT

                           IF (UPTTYP(IP) .GT. NW_COAL) THEN
                              ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IECP)//'XX'//C_SP_NG//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IECP),':XX:',C_SP_NG,UPYRCD(YEAR))
                           ELSE
!                             IF (UPPSEF(IECP) .GT. 0.0) THEN
                              IF (ECP_SCRUB(IECP,CURIYR) .EQ. 1) THEN
                                 ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IECP)//'SXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IECP),'S',':XX:',UPYRCD(YEAR)) ! exception: S/U/X as scrubber set element
                              ELSE
                                 ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IECP)//'UXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IECP),'U',':XX:',UPYRCD(YEAR)) ! exception: S/U/X as scrubber set element
                              END IF
                           END IF
                           VALUE = DBLE(0.000001) * GEN * DSP_HTRT_NMR(FLRG,IECP) * B_HTRT_ADJ * HTRT_ADJ
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                           VALUE_HR = DBLE(0.000001) * GEN * DSP_HTRT_MOD_NMR(FLRG,IECP) * B_HTRT_ADJ * HTRT_ADJ
                           IF (USW_DIGIT .GT. 0)VALUE_HR = DIGITS2( VALUE_HR , DIGITS_PARM)

                           IF (VALUE .GT. ECP_MIN)THEN
                              IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ODSP,130')
                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                 IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VALUE_HR,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,131')
                              END IF

                              IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                 VALUE_MIN_SR = DBLE(0.000001) * GEN_MIN_SR * DSP_HTRT_NMR(FLRG,IECP) * B_HTRT_ADJ * HTRT_ADJ_MIN
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .GT. ECP_MIN .AND. HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,132')

                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    VALUE_MIN_SR_HR = DBLE(0.000001) * GEN_MIN_SR * DSP_HTRT_MOD_NMR(FLRG,IECP) * B_HTRT_ADJ * HTRT_ADJ_MIN
                                    IF (USW_DIGIT .GT. 0)VALUE_MIN_SR_HR = DIGITS2( VALUE_MIN_SR_HR , DIGITS_PARM)
                                    IF (VALUE_MIN_SR_HR .GT. ECP_MIN .AND. HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VALUE_MIN_SR_HR,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,133')
                                 END IF

                                 VALUE_MAX_SR = DBLE(0.000001) * GEN_MAX_SR * DSP_HTRT_NMR(FLRG,IECP) * B_HTRT_ADJ * HTRT_ADJ_MAX
                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                 IF (VALUE_MAX_SR .GT. ECP_MIN .AND. HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,134')

                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    VALUE_MAX_SR_HR = DBLE(0.000001) * GEN_MAX_SR * DSP_HTRT_MOD_NMR(FLRG,IECP) * B_HTRT_ADJ * HTRT_ADJ_MAX
                                    IF (USW_DIGIT .GT. 0)VALUE_MAX_SR_HR = DIGITS2( VALUE_MAX_SR_HR , DIGITS_PARM)
                                    IF (VALUE_MAX_SR_HR .GT. ECP_MIN .AND. HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VALUE_MAX_SR_HR,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,135')
                                 END IF

                              END IF

!                             Track Captured CO2 for CCATS model

                              IF (UPPCEF(IECP) .GT. 0.0) THEN
                                 WRITE(CNSCOD,'("0",I1)') CSRG                                  
                                 ROW = 'ZCSRG'//CNSCOD//UPYRCD(YEAR); call makmsk(ROW_mask,':ZCSRG:',CNSCOD,UPYRCD(YEAR))
                                 IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                    VAL_CAP_CO2 = UPPCEF(IECP) * VALUE * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                 ELSE
                                    VAL_CAP_CO2 = UPPCEF(IECP) * VALUE * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                 END IF
                                 IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROW,VAL_CAP_CO2,COLUMN_mask,ROW_mask,'EP$ODSP,136')

                                 IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                    IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                       VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_HR * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                    ELSE
                                       VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_HR * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                    END IF
                                    IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROW,VAL_CAP_CO2,COLUMN_HTRT_mask,ROW_mask,'EP$ODSP,137')
                                 END IF

!                                WRITE(6,9317) CURIRUN, CURCALYR, CURIYR+YEAR+1988, COLUMN, ROW, NERC, IECP, GEN, VALUE, &
!                                   VAL_CAP_CO2, UPPCEF(IECP), ECLEL(CURIYR), ENGEL(CURIYR)
!9317                            FORMAT(1X,"Captured_CO2",3(":",I4),2(":",A16),2(":",I4),6(":",F15.3))

                                 IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                    IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                       VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_MIN_SR * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                    ELSE
                                       VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_MIN_SR * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                    END IF
                                    IF (VALUE_MIN_SR .GT. ECP_MIN .AND. HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROW,VAL_CAP_CO2,COLUMN_MIN_SR_mask,ROW_mask,'EP$ODSP,138')

                                    IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                       IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                          VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_MIN_SR_HR * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                       ELSE
                                          VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_MIN_SR_HR * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                       END IF
                                       IF (VALUE_MIN_SR .GT. ECP_MIN .AND. HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROW,VAL_CAP_CO2,COLUMN_MIN_SR_HTRT_mask,ROW_mask,'EP$ODSP,139')
                                    END IF

!                                   WRITE(6,9317) CURIRUN, CURCALYR, CURIYR+YEAR+1988, COLUMN_MIN_SR, ROW, NERC, IECP, GEN_MIN_SR, VALUE_MIN_SR, &
!                                      VAL_CAP_CO2, UPPCEF(IECP), ECLEL(CURIYR), ENGEL(CURIYR)

                                    IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                       VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_MAX_SR * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                    ELSE
                                       VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_MAX_SR * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                    END IF
                                    IF (VALUE_MAX_SR .GT. ECP_MIN .AND. HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROW,VAL_CAP_CO2,COLUMN_MAX_SR_mask,ROW_mask,'EP$ODSP,140')

                                    IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                       IF (UPTTYP(IP) .LE. NW_COAL) THEN
                                          VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_MAX_SR_HR * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                       ELSE
                                          VAL_CAP_CO2 = UPPCEF(IECP) * VALUE_MAX_SR_HR * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0)
                                       END IF
                                       IF (VALUE_MAX_SR .GT. ECP_MIN .AND. HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROW,VAL_CAP_CO2,COLUMN_MAX_SR_HTRT_mask,ROW_mask,'EP$ODSP,141')
                                    END IF

!                                   WRITE(6,9317) CURIRUN, CURCALYR, CURIYR+YEAR+1988, COLUMN_MAX_SR, ROW, NERC, IECP, GEN_MAX_SR, VALUE_MAX_SR, &
!                                      VAL_CAP_CO2, UPPCEF(IECP), ECLEL(CURIYR), ENGEL(CURIYR)

                                 END IF

                              END IF

!                             ACCOUNT FOR OUT-OF-STATE CARBON EMISSIONS IN CA

                              IF (UPTTYP(IP) .LE. EX_COAL .AND. URGNME(NERC)(1:2) .EQ. 'ca' .AND. FLRGCODE(FLRG) .NE. 'CA') THEN
                                 DO CAR = 1 , CO2_GRP
                                    IF (CO2_OS_BY_RG(NERC,CAR) .GT. 0.0) THEN
                                       ROWCAR = 'EUCAR'//CO2_RG(CAR)//UPYRCD(YEAR); call makmsk(ROWCAR_mask,':EUCAR:',CO2_RG(CAR),UPYRCD(YEAR))

                                       VALUE = VALUE * UFRCAR(IECP,CLRG) * (1.0 / 2204.0)
                                       IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN,ROWCAR,VALUE,COLUMN_mask,ROWCAR_mask,'EP$ODSP,142')

                                       IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                          VALUE_HR = VALUE_HR * UFRCAR(IECP,CLRG) * (1.0 / 2204.0)
                                          IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_HTRT,ROWCAR,VALUE_HR,COLUMN_HTRT_mask,ROWCAR_mask,'EP$ODSP,143')
                                       END IF

                                       IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                          VALUE_MIN_SR = VALUE_MIN_SR * UFRCAR(IECP,CLRG) * (1.0 / 2204.0)
                                          IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR,ROWCAR,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROWCAR_mask,'EP$ODSP,144')

                                          IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                             VALUE_MIN_SR_HR = VALUE_MIN_SR_HR * UFRCAR(IECP,CLRG) * (1.0 / 2204.0)
                                             IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MIN_SR_HTRT,ROWCAR,VALUE_MIN_SR_HR,COLUMN_MIN_SR_HTRT_mask,ROWCAR_mask,'EP$ODSP,145')
                                          END IF

                                          VALUE_MAX_SR = VALUE_MAX_SR * UFRCAR(IECP,CLRG) * (1.0 / 2204.0)
                                          IF (HR_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR,ROWCAR,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROWCAR_mask,'EP$ODSP,146')

                                          IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN
                                             VALUE_MAX_SR_HR = VALUE_MAX_SR_HR * UFRCAR(IECP,CLRG) * (1.0 / 2204.0)
                                             IF (HR_MOD_NMR(FLRG,IECP)) CALL CVAL(COLUMN_MAX_SR_HTRT,ROWCAR,VALUE_MAX_SR_HR,COLUMN_MAX_SR_HTRT_mask,ROWCAR_mask,'EP$ODSP,147')
                                          END IF

                                       END IF

                                    END IF
                                 END DO
                              END IF
                           END IF

                           IF (EPECAP_MR(FLRG,IECP,YEAR) .GT. 0.0) THEN
                              IF (UPTTYP(IP) .GT. NW_COAL) THEN
                                 ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IECP)//'MR'//C_SP_NG//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IECP),':MR:',C_SP_NG,UPYRCD(YEAR))
                              ELSE
                                 IF (ECP_SCRUB(IECP,CURIYR) .EQ. 1) THEN
                                    ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IECP)//'SXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IECP),'S',':XX:',UPYRCD(YEAR)) ! exception: S/U/X as scrubber set element
                                 ELSE
                                    ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IECP)//'UXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IECP),'U',':XX:',UPYRCD(YEAR)) ! exception: S/U/X as scrubber set element
                                 END IF
                              END IF

                              VALUE = DBLE(0.000001) * GEN * DSP_HTRT_MR(FLRG,IECP) * B_HTRT_ADJ * HTRT_ADJ
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (VALUE .GT. ECP_MIN .AND. HR_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ODSP,148')

                              IF (YEAR .GT. 1 .AND. HTRT_TEST .EQ. 0 .AND. HTRT_CAP_MR(NERC,UPTTYP(IECP),FLRG,YEAR) .GT. 0.0) THEN

                                 VALUE = DBLE(0.000001) * GEN * DSP_HTRT_MOD_MR(FLRG,IECP) * B_HTRT_ADJ * HTRT_ADJ
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. ECP_MIN .AND. HR_MOD_MR(FLRG,IECP)) CALL CVAL(COLUMN_MR_HTRT,ROW,VALUE,COLUMN_MR_HTRT_mask,ROW_mask,'EP$ODSP,149')

                              END IF
                           END IF
                         ENDIF                                                 ! if capacity exists, or year >1
                        END DO                                                 ! FUEL DEMAND REGIONS
                     END IF                                                    ! IF MODE IS APPROPRIATE FOR THIS CAPACITY TYPE
                  END DO                                                       ! MODE
               END DO                                                          ! ISP
            END IF                                                             ! IF VECTORS WILL BE USED THIS PLANNING CYCLE

!           WRITE OUT DERATE TABLE FOR EMM DATABASE

            IF (USW_DBS .GT. 0) THEN
                WRITE(UF_DBS,7400) COL,CURIYR,COL,NERC,COL,YEAR,COL,IP,COL,(DERATE(VLS),VLS=1,EPNSTP(YEAR)),TRIM(SCEN_DATE)
 7400           FORMAT(1X,'ECPDRATE',4(A2,I4),A2,<EPNSTP(YEAR)>(F7.5,' :'),A)
            END IF
!
            TNUM = 2
            IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
               IF (LOOPING(TNUM) .EQ. 0) THEN
                 NUMCOLS(TNUM) = 15
                 DYNSTM(TNUM) =  'INSERT INTO ECP_UTILIZATION VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)'
                 WRTSTM(TNUM) =  'ECP_UTILIZATION'
               ENDIF
               LOOPING(TNUM) = LOOPING(TNUM) + 1
               COLV(TNUM,1,LOOPING(TNUM)) = CURIYR
               COLV(TNUM,2,LOOPING(TNUM)) = NERC
               COLV(TNUM,3,LOOPING(TNUM)) = IP
               COLV(TNUM,4,LOOPING(TNUM)) = YEAR
               COLV(TNUM,5,LOOPING(TNUM)) = DERATE(1)
               COLV(TNUM,6,LOOPING(TNUM)) = DERATE(2)
               COLV(TNUM,7,LOOPING(TNUM)) = DERATE(3)
               COLV(TNUM,8,LOOPING(TNUM)) = DERATE(4)
               COLV(TNUM,9,LOOPING(TNUM)) = DERATE(5)
               COLV(TNUM,10,LOOPING(TNUM)) = DERATE(6)
               COLV(TNUM,11,LOOPING(TNUM)) = DERATE(7)
               COLV(TNUM,12,LOOPING(TNUM)) = DERATE(8)
               COLV(TNUM,13,LOOPING(TNUM)) = DERATE(9)
               COLV(TNUM,14,LOOPING(TNUM)) = DERATE(10)
               COLV(TNUM,15,LOOPING(TNUM)) = DERATE(11)
               IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                  COLVALS(:,:) = COLV(TNUM,:,:)
!                 CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  LOOPING(TNUM) = 0
               ENDIF
            END IF                                                  ! WRITE TO EMMDBASE
         END IF                                                     ! IF VECTORS WILL EVER BE NEEDED
!
!        RESET 111d SWITCH FOR ET/CT/AT
!
         IF (IECP .EQ. WIET .OR. IECP .EQ. WICT .OR. IECP .EQ. WIAT)CO2_PLTSW(IECP) = CO2_PLTET

      END DO                                                        ! IP

!     SET UP STRUCTURE TO MOVE NOX FROM PLANT TYPE SPECIFIC ROWS TO REGIONAL or SEASONAL CONSTRAINT

      IF (NERC .EQ. UNRGNS .AND. YEAR .EQ. UNXPH) THEN
         DO IYR = 1 , UNXPH
            DO JNOX = 1 , NOX_GRP
               IF (IYR .GT. NOX_LT) THEN
                  ANOX = NOX_RG(JNOX)
                  ROW_NOX = 'EUNOX'//ANOX//UPYRCD(IYR); call makmsk(ROW_NOX_mask,':EUNOX:',ANOX,UPYRCD(IYR))
                  DO ECPt_TO = 1 , ECP_D_CAP
                     IF (TST_NOX(JNOX,ECPt_TO,IYR) .GT. 0) THEN
                        ROW = 'EUN'//UPLNTCD(ECPt_TO)//ANOX//UPYRCD(IYR); call makmsk(ROW_mask,':EUN:',UPLNTCD(ECPt_TO),ANOX,UPYRCD(IYR))
                        CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$ODSP,150')
                        CALL CVAL(ROW,ROW_NOX,DBLE(1.0),ROW_mask,ROW_NOX_mask,'EP$ODSP,151')
                        CALL CVAL(ROW,UPOBJ,ECP_MIN,ROW_mask,UPOBJ,'EP$ODSP,152')
                        CALL CROWTYPE(ROW,'L       ',ROW_mask)
                        CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$ODSP,153')
                     END IF
                  END DO
               END IF
            END DO
         END DO
      END IF

!     write any remaining records to the database

      IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
         DO TNUM = 1 , NUMTABS
            IF (LOOPING(TNUM) .NE. 0) THEN
               COLVALS(:,:) = COLV(TNUM,:,:)
!              CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               LOOPING(TNUM) = 0
            ENDIF
         ENDDO
      ENDIF
!
      RETURN
      END
!
!     THE SUBROUTINE EP$LGNP DETERMINES THE PRESENT VALUE OF INFLATION
!     FACTORS OVER THE OPERATING PERIOD FOR A GIVEN TECHNOLOGY
!
      SUBROUTINE EP$LGNP(OLYR,OPYRS,DSCRT,PVGNP)
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'bildin'
!
      REAL*8 PVGNP
      REAL*8 GNP(ECP_D_FPH)
      REAL*8 PWF,PVV
      REAL*4 DSCRT
      INTEGER*4 OPYRS,OLYR,JYR

!     DETERMINE PRESENT VALUE OF INFLATION FACTORS
      DO JYR = 1 , OPYRS
         GNP(JYR) = UPGNPD(JYR + CURIYR + OLYR - 2)
      END DO
      PVGNP = PVV(GNP,ECP_D_FPH,OPYRS,DBLE(DSCRT)) * PWF(DBLE(DSCRT),OLYR - 1)
      RETURN
      END
!
!     EP$LVAR CALCULATES THE LEVELIZED VARIABLE COSTS IN REAL $
!
      SUBROUTINE EP$LVAR(NERC,PLANT,OLYR,OPYRS,LEVFUEL)
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'bildout'
      include 'uefdout'
      REAL*8 FLCOSTN,LEVFUEL
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*8 HTRT_IG, HTRT_AC
      INTEGER*4 PLANT,YEAR,OLYR,OPYRS,FPP,FUEL,NERC,IFLRG,IECP

      REAL*8 B_HTRT_ADJ
      INTEGER*4 B_YR
      CHARACTER*12 FROM_LABEL

!     INITIALIZE TOTAL FUEL COST
!
      LEVFUEL = DBLE(0.0)

!     TEMPORARILY ASSIGN FUEL REGION TO 1

      IFLRG = 1

      FROM_LABEL = "EP_LVAR"

      IF (UCPDSPIS(PLANT) .GT. 0)THEN

         IECP = UCPDSPI(PLANT)

         DO YEAR = OLYR , UNXPH

!           Revise Heatrates for IECPs with Capture to reflect NETL Program Goals if any

            IF (IECP .EQ. WIPQ .OR. IECP .EQ. WIIS) THEN
               CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, WIIG, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
               HTRT_IG = AVG_HTRT(WIIG)
            END IF

            IF (IECP .EQ. WICS) THEN
               CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, WIAC, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
               HTRT_AC = AVG_HTRT(WIAC)
            END IF

            CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

            B_HTRT_ADJ = 1.0

            IF (IECP .EQ. WIPQ) THEN
               B_YR  = MIN(YEAR + CURIYR - 1 , MNUMYR)
               B_HTRT_ADJ = (HTRT_IG / AVG_HTRT(IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
            END IF
            
            IF (IECP .EQ. WIIS) THEN
               B_YR  = MIN(YEAR + CURIYR - 1 , MNUMYR)
               B_HTRT_ADJ = (HTRT_IG / AVG_HTRT(IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
            END IF


            IF (IECP .EQ. WICS) THEN
               B_YR  = MIN(YEAR + CURIYR - 1 , MNUMYR)
               B_HTRT_ADJ = (HTRT_AC / AVG_HTRT(IECP)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
            END IF

!           COMPUTE THE TOTAL PRESENT VALUE OF THE NOMINAL FUEL COST, WHICH
!           IS ALREADY DISCOUNTED
!
            FLCOSTN = DBLE(9999.9)
            DO FPP = 1 , ECP_D_FPP
               FUEL = UPFLTP(IECP,FPP)
               IF (FUEL .GT. 0) THEN
!
!                 GET FUEL COST FOR EXISTING OR NEW IECPS
!
                  IF (IECP .EQ. WIPC .OR. IECP .EQ. WIIG .OR.  &
                     IECP .EQ. WIIS .OR. IECP .EQ. WICT .OR.  &
                     IECP .EQ. WIAT .OR. IECP .EQ. WICC .OR. &
                     IECP .EQ. WIAC .OR. IECP .EQ. WICS .OR. &
                     IECP .EQ. WIFC)THEN
                     IF ((UPPFLN(FUEL,IFLRG,YEAR) + UPCRBN(FUEL,IFLRG,YEAR) * (1.0 - UPPCEF(IECP))) .LT. FLCOSTN) &
                        FLCOSTN = UPPFLN(FUEL,IFLRG,YEAR) +  UPCRBN(FUEL,IFLRG,YEAR) * (1.0 - UPPCEF(IECP))
                  ELSE
                     IF ((UPPFL(FUEL,IFLRG,YEAR) + UPCRB(FUEL,IFLRG,YEAR) * (1.0 - UPPCEF(IECP))) .LT. FLCOSTN)  &
                        FLCOSTN = UPPFL(FUEL,IFLRG,YEAR) +  UPCRB(FUEL,IFLRG,YEAR) * (1.0 - UPPCEF(IECP))
                  END IF
               END IF
            END DO
            LEVFUEL = LEVFUEL + AVG_HTRT(IECP) * B_HTRT_ADJ * FLCOSTN / 1000.0                             
         END DO
      END IF
!
      RETURN
      END

!     EP$INT REVISES BUILD/OPERATE STRUCTURE FOR INTERMITTEN CAPACITY TYPE.

      SUBROUTINE EP$INT(NERC,YEAR)
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'cdsparms'
      include 'emmparm'
      include 'control'
      include 'dispett'
      include 'dispin'
      include 'ecpcntl'
      include 'entcntl'
      include 'enewtech'
      include 'bildin'
      include 'wrenew'
      include 'bildout'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'
      include 'dsmsectr'
      include 'postpr'
      include 'taxdat'
      include 'eusprc'
      include 'edbdef'
      include 'e111d'
      include 'uefdout'
      include 'ecp_nuc'
      include 'emm_aimms'

      COMMON /GPSECP/ GPSSUB
      REAL*8 GPSSUB(ECP_D_CAP,ECP_D_FPH)

      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)
!
      REAL*8 VALUE,OBJVAL,GEN,TST,VALUE_SR, GENNEW
      REAL*8 UVALUE
      REAL*8 CRF,PWF,PVV,TRUNC
      REAL*8 OVRCST,TXBOOK,FNBOOK,URATIO,CAPUNSTL,CAPUTIL,CAPNUG
      REAL*8 PRATIO,TRANS,CAPNNSTL
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*4 DEBT_F,UTINT,UTROE,EWGROE,EWGINT,EWGROR,UTROR
      INTEGER*4 YEAR,NERC,VLS,IP,IFPH2,OLYR,K,IMPORT,JYR,KYR,ICAP
      REAL*8 DIGITS2
      INTEGER*4 FULLYR,IOWN,IS,ICP,ZYR,KCAP
      REAL*8 PV$FOM,PV$TOM,FOM(ECP_D_FPH),TOM(ECP_D_FPH),PV$VOM,VOM(ECP_D_FPH)
	  REAL*8 PV$TOML,TOML(ECP_D_FPH)
      REAL*8 PV$SOM,SOM(ECP_D_FPH)
      REAL*8 PV$GPS,GPS(ECP_D_FPH)
      REAL*8 PV$FOML,FOML(ECP_D_FPH)
      REAL*8 PV$EXT,EXTR(ECP_D_FPH)
      REAL*8 PV$EXTL,EXTL(ECP_D_FPH)
      REAL*8 PV$SOML,SOML(ECP_D_FPH)
      REAL*8 PVGNP,PVGNPR,CAPLEV,LEVSA
      REAL*8 PV$FUEL,PV$VOML,VOML(ECP_D_FPH)
      REAL*8 LEVFUEL
      REAL*8 T_CRF,T_PWF
      REAL*4 CPR(ECP_D_LCP)
      INTEGER ISP,RCAP,IGRP,ISEG,JGRP
      INTEGER*4 GSYR1,GSYRL
      INTEGER*4 STEPS,NUMLOOP,LOOPS
      INTEGER*4 CPPLOOP,CLOOP,CSTEPS,CS
      CHARACTER*16 ROW,ROW_ERC,COLUMN,ROW_SR
      CHARACTER*12 FROM_LABEL
      CHARACTER*1 SSTEP(ECP_D_FPP)
      CHARACTER*1 SUB_CODE(ECP_D_DGS)
      CHARACTER*1 SA_CODE(ECP_D_DGS)
      INTEGER*4 LCAP, BCAP
      REAL*8 ITCADJ
      REAL*8 ONE(ECP_D_FPH),CPS(ECP_D_FPH)
      REAL*8 PVONE,PVCPS
      REAL*8 CSTDTADJ,CSTEQADJ,SHRDTADJ
      REAL*8 ANNRTE,ANNADJ,ANN(ECP_D_FPH),AN1(ECP_D_FPH)
      REAL*8 CO2_LBMWH,VAL_STD_CO2
      REAL*8 VAL_STD_GRD
      REAL*4 DBTADJ

      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN, RPS_RGN_IMP
      
      COMMON /ARB/ PT_OFFSET
      REAL*8         PT_OFFSET(MNUMNR)
      REAL*8 PV$ARB, ARB(ECP_D_FPH)
      
      REAL*8 UPV_CF_FRAC, DPV_CF_FRAC, UPV_CF, DPV_CF, UPV_CF_NEW, DPV_CF_NEW

      ecpsub='EP$INT'

!
!     STORE 111d SWITCH FOR MASS OR RATE STANDARDS FOR REGION
!
      DO ICAP = 1 , ECP_D_CAP
         CO2_PLTSW(ICAP) = CO2_PLTRG(ICAP,NERC)
      END DO

      DO RPS_RGN = 1 , MNUMNR
         MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
      END DO

      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN
         MAP_NERC_TO_RPS_RGN(8) = 9                 
      END IF

      RPS_RGN = MAP_NERC_TO_RPS_RGN(NERC)

      SUB_CODE(1) = 'S'
      SUB_CODE(2) = 'T'
      SUB_CODE(3) = 'U'
      SUB_CODE(4) = 'V'
      SUB_CODE(5) = 'W'
      SUB_CODE(6) = 'Y'

      SA_CODE(1) = 'A'
      SA_CODE(2) = 'B'
      SA_CODE(3) = 'C'
      SA_CODE(4) = 'D'
      SA_CODE(5) = 'E'
      SA_CODE(6) = 'F'

      DO IS = 1 , ECP_D_FPP
         SSTEP(IS) = UPRGCD(IS)
      END DO

!     LOOP ON CAPACITY TYPE

      FROM_LABEL = "EP_INT"

      DO IP = 1 , ECP_D_INT
         ICAP = UCPINTI(IP)
         RCAP = UIRINTI(IP)
         OLYR = YEAR + UPPLYR(ICAP)
         GSYR1 = UPGSY1(ICAP) - UHBSYR
         GSYRL = UPGSYL(ICAP) - UHBSYR
         IF (OLYR .LT. UNXPH) THEN
         FULLYR = OLYR + CURIYR + UHBSYR - 1
         ELSE
            FULLYR = MIN(UNYEAR + UHBSYR , UNFPH + CURIYR + UHBSYR - 1)
         END IF

         CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, ICAP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

         DO JYR = 1, ECP_D_LCP
            CPR(JYR) = UPCPRO(ICAP,JYR)
         END DO

!        CREATE COMBINED INDEX FOR ONSHORE AND OFFSHORE WIND FOR BUILD CONSTRAINTS, IF ANY

         LCAP = ICAP
         BCAP = ICAP

         IF (ICAP .EQ. WIWF) THEN
             LCAP = WIWN
         END IF

         IF (ICAP .EQ. WISO) THEN
            IF (EPCurCL_PV(NERC,CURIYR) .EQ. EPCurCL_SO(NERC,CURIYR)) THEN
               BCAP = WIPV
            ELSE IF (EPCurCL_PT(NERC,CURIYR) .EQ. EPCurCL_SO(NERC,CURIYR)) THEN
               BCAP = WIPT
            END IF
         END IF

         IF (ICAP .EQ. WIPT) THEN
            IF (EPCurCL_PV(NERC,CURIYR) .EQ. EPCurCL_PT(NERC,CURIYR)) THEN
               BCAP = WIPV
            END IF
         END IF

         IF (ICAP .EQ. WIWL) THEN
            LCAP = WIWN
            IF (EPCurCL_WN(NERC,CURIYR) .EQ. EPCurCL_WL(NERC,CURIYR) .AND. EPCurBF_WN(NERC,CURIYR) .EQ. EPCurBF_WL(NERC,CURIYR)) THEN
               BCAP = WIWN
            END IF
         END IF

         KCAP = ICAP
         IF (ICAP .EQ. WIWL) KCAP = WIWN
         IF (ICAP .EQ. WIPT) KCAP = WIPV

         IF ((EPECAP(0,ICAP,YEAR) .GT. DBLE(0.0)) .OR. (UPVTYP(ICAP) .EQ. 1 .AND. UPBLDREG(ICAP,NERC) .GT. 0.0)) THEN

!           REVISE BOUND ON EXISTING CAPACITY VECTORS SUBJECT TO RETIREMENTS

            IF (USW_ERET .EQ. 1 .AND. YEAR .GT. UPRTLT .AND. RET_GRP(ICAP) .GT. 0) THEN
               DO IGRP = 1 , ECP_D_RET
                  COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XX'//UPYRCD(IGRP)//'0'; call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(ICAP),':XX:',UPYRCD(IGRP),':0:',':!INT:')
                  IF (YEAR .EQ. UPRTLT + 1) THEN
                     VALUE = DBLE(EPGCAP(0,IGRP,ICAP)) * DBLE(0.001)
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$INT,1')

!                    OBJECTIVE FUNCTION

                     ROW = UPOBJ ; ROW_mask=UPOBJ
                     IFPH2 = UNFPH
                     DO JYR = 1 , IFPH2
                        FOM(JYR) = EPGFOM(IGRP,ICAP) * UPGNPD(CURIYR + JYR - 1)
!                       YEAR 1 FOM IS A SUNK COST SO SET = 0
                        IF (JYR .EQ. 1)FOM(JYR) = 0.0
                        VOM(JYR) = (EPIRVOM(RCAP) * 8.76 * EPECFC(ICAP,1)) * UPGNPD(CURIYR + JYR - 1)
                     END DO
                     VALUE = (PVV(FOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) + PVV(VOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))) * PWF(DBLE(EPDSCRT),YEAR-1) - DBLE(IGRP - 1)

!                    REDUCE BY HURDLE RATE

                     VALUE = VALUE * DBLE(1.0 - UPRETFHU)
                     VALUE = MAX( VALUE , ECP_MIN)
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,2')
                  END IF


!                 PUT EXISTING CAPACITY COLUMN INTO RESERVE MARGIN ROW
                  ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
                  VALUE = DBLE(EPIRCCR(RCAP))
                  VALUE = TRUNC( VALUE , 2)
                  IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,3')

!                 MAXIMUM RETIREMENTS ROW

                  IF (UPRETRAT .GT. 0.0 .AND. YEAR .EQ. UPRTLT + 1 .AND. USW_ERET .EQ. 1) THEN
                     ROW = 'R'//UPRGCD(NERC)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(NERC),':MXRET0:')
                     VALUE = DBLE(1.0)
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,4')
                  END IF

!                 PUT EXISTING CAPACITY COLUMN INTO LOAD SEGMENTS

                  GEN = 0.0
                  DO VLS = 1 , EPNSTP(YEAR)
                     JGRP = EPLDGR(VLS,YEAR)
                     ISEG = EPLDSG(VLS,YEAR)
                     ISP = EPGECP(JGRP)
                     ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(JGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(JGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                     IF (ICAP .EQ. WIPT) THEN
                        VALUE = UPICFC(1,IP,JGRP,ISEG) 
                     ELSE IF (ICAP .EQ. WIPV) THEN
                      UPV_CF_FRAC = UPICFC(1,IP,JGRP,ISEG) / EPIACF(IP)
                      DPV_CF_FRAC = UPICFC_DPV(1,IP,JGRP,ISEG) / EPIACF(IP)
                      UPV_CF = EPECFC_UPV(ICAP,YEAR) * EP_SP_CAP_FAC(ISP,ICAP,YEAR)
                      DPV_CF = DPVTOTGENNR(NERC, MIN(CURIYR + YEAR - 1,MNUMYR)) / ( 8.76*DPVTOTCAPNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR)) )
                      UPV_CF_NEW = UPV_CF_FRAC * UPV_CF
                      DPV_CF_NEW = DPV_CF_FRAC * DPV_CF 
                      VALUE = UPV_CF_NEW
                          
                      WRITE(18,6311) CURIYR, YEAR, IP, NERC, JGRP, ISEG, ISP,  &
                               DPVTOTCAPNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001, EPECAP(0,ICAP,YEAR)*0.001, EPECAP(0,ICAP,YEAR)*0.001-DPVTOTCAPNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001, EPECAP_UPV(0,ICAP,YEAR)*0.001, &
                            DPV_CF, UPV_CF, &
                            DPV_CF_FRAC, UPV_CF_FRAC,  &
                            DPV_CF_NEW, UPV_CF_NEW, &
                            VALUE
 6311                       FORMAT(1X,"INT_PV_EXIST",7(",",I4),11(",",F21.6))
                     ELSE
                        VALUE = UPICFC(1,IP,JGRP,ISEG) * EPECFC(ICAP,YEAR) / EPIACF(IP) * EP_SP_CAP_FAC(ISP,ICAP,YEAR)
                     ENDIF

                     IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                     IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,5')

                     GEN = GEN + VALUE * EPWDTH(VLS,YEAR)
                     
                     VALUE_SR = 0.0
                     IF (SR_INT(ICAP,NERC) .GT. 0.0) THEN
                        VALUE_SR = - 1.0 * VALUE * SR_INT(ICAP,NERC) 
                     END IF

                     !PT should be able to supply some SR
                     IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .EQ. WIPT) THEN
                        VALUE_SR = VALUE_SR + NET_PT_STORAGE_SR_EX(ISEG,JGRP,NERC,CURIYR) 
                     END IF
                     
                     IF (VALUE .NE. 0.0 .AND. VALUE_SR .NE. 0.0) THEN
                        ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(JGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(JGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                        CALL CVAL(COLUMN,ROW_SR,VALUE_SR,COLUMN_mask,ROW_SR_mask,'EP$INT,8') !is this value supposed to be for CF? should it be VALUE_SR?
                     END IF

                  END DO
                  IF (GEN .LE. DBLE(0.0)) GEN = DBLE(0.0001)

!                 Include in Free Row for Generation

                  ROW = 'F'//UPRGCD(NERC)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
                  VALUE = GEN / 1000.0
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                  IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,9')

!                 include in renewable generation bound row

                  IF (UPRNWSHRR(ICAP,NERC) .GT. 0.00) THEN
                     ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(YEAR))
                     VALUE = DBLE(UPRNWSHRR(ICAP,NERC))

!                    DETERMINE GENERATION PER UNIT OF CAPACITY

                     VALUE = VALUE * GEN / 1000.0
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                     IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,10')
                  END IF

!                 If National RPS and Regional and National Contributions Differ

                  IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWSHR(ICAP) .GT. 0.0) THEN
                     ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))
                     VALUE = DBLE(UPRNWSHR(ICAP))

!                    DETERMINE GENERATION PER UNIT OF CAPACITY

                     VALUE = VALUE * GEN / 1000.0
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                     IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,11')
                  END IF

!                 include wind and solar in maximum intermittent generation row

                  IF (UPINTSW .GE. 2) THEN
                     IF (UCPINTIS(ICAP) .GT. 0) THEN       
                        ROW = 'L'//UPRGCD(NERC)//'XXINT'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':XXINT:',UPYRCD(YEAR))

!                       DETERMINE GENERATION PER UNIT OF CAPACITY

                        VALUE = GEN / 1000.0
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,12')
                     END IF
                  END IF
!
!                 CO2 OUTPUT STANDARD
!
                  IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,YEAR) .GT. 0.0 .AND. CO2_PLTSW(ICAP) .GT. 0.0)THEN
                     CO2_LBMWH = DBLE(0.0)
                     ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
                     VAL_STD_CO2 = GEN * DBLE(0.001) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * DBLE(CO2_PLTSW(ICAP))
                     VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                     IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                     IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                     IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$INT,14')
                  END IF

!                 GRID RESILIENCE STANDARD, IF APPROPRIATE

                  IF (GRD_RATS(ICAP,NERC) .GE. 0.0)THEN
                     ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(YEAR))
                     VAL_STD_GRD = GEN * DBLE(0.001) * DBLE(GRD_RATS(ICAP, NERC) - GRD_NRYR(NERC,YEAR))
!                    VAL_STD_GRD = VAL_STD_GRD * 0.001
                     IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = 0.0
                     IF (VAL_STD_GRD .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$INT,15')
                  END IF
               END DO ! IRET
            END IF    ! (USW_ERET .EQ. 1 .AND. YEAR .GT. UPRTLT)

!           REMOVE RETIREABLE? CAPACITY FROM OTHER CAPACITY

            VALUE = DBLE(EPECAP(0,ICAP,YEAR)) * DBLE(0.001)
            IF (YEAR .GT. UPRTLT) THEN
               DO IGRP = 1 , ECP_D_RET
                  VALUE = VALUE - DBLE(EPGCAP(0,IGRP,ICAP)) * DBLE(0.001)
               END DO
            END IF
            VALUE = MAX( VALUE , 0.0)
            TST = VALUE
            IF (TST .GT. 0.0) THEN

!              REVISE BOUND ON EXISTING CAPACITY VECTORS NOT SUBJECT TO RETIREMENT

               COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(ICAP),':XXX:',UPYRCD(YEAR),':!INT:')
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$INT,16')

!              OBJECTIVE FUNCTION

               ROW = UPOBJ ; ROW_mask=UPOBJ
               IF (YEAR .LT. UNXPH) THEN
                  VALUE = (EPIRFOM(RCAP) + (EPIRVOM(RCAP) * 8.76 * EPECFC(ICAP,YEAR))) * UPGNPD(YEAR + CURIYR - 1) * PWF(DBLE(EPDSCRT),YEAR)
!                 YEAR 1 FOM IS A SUNK COST SO SET = 0
                  IF (YEAR .EQ. 1)VALUE = (EPIRVOM(RCAP) * 8.76 * EPECFC(ICAP,YEAR)) * UPGNPD(YEAR + CURIYR - 1) * PWF(DBLE(EPDSCRT),YEAR)

!                 SUBTRACT GPS SUBSIDY, IF ANY

                  IF (GPSSUB(ICAP,YEAR) .GT. 0.0) THEN
                     VALUE = VALUE - (GPSSUB(ICAP,YEAR) * 8.76 * EPECFC(ICAP,YEAR)) * UPGNPD(YEAR + CURIYR - 1) * PWF(DBLE(EPDSCRT),YEAR)
                  END IF
               ELSE
                  IFPH2 = UNFPH - YEAR + 1
                  DO JYR = 1 , IFPH2
                     FOM(JYR) = EPIRFOM(RCAP) * UPGNPD(CURIYR + JYR + YEAR - 2)
                     VOM(JYR) = (EPIRVOM(RCAP) * 8.76 * EPECFC(ICAP,YEAR)) * UPGNPD(CURIYR + JYR + YEAR - 2)
                     GPS(JYR) = (GPSSUB(ICAP,JYR + YEAR - 1) * 8.76 * EPECFC(ICAP,YEAR)) * UPGNPD(CURIYR + JYR + YEAR - 2)
                  END DO
                  VALUE = (PVV(FOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) + PVV(VOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))) * PWF(DBLE(EPDSCRT),YEAR-1)

!                 SUBTRACT GPS SUBSIDY, IF ANY

                  IF (GPSSUB(ICAP,YEAR) .GT. 0.0) THEN
                     VALUE = VALUE - PVV(GPS,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),YEAR-1)
                  END IF
               END IF
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               VALUE = MAX( VALUE , ECP_MIN)
               IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,17')

!              PUT EXISTING CAPACITY COLUMN INTO RESERVE MARGIN ROW

               ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
               VALUE = DBLE(EPIRCCR(RCAP))
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,18')

!              MAXIMUM RETIREMENTS ROW

               IF (USW_ERET .EQ. 1 .AND. UPRETRAT .GT. 0.0 .AND. YEAR .EQ. UPRTLT + 1) THEN
                  ROW = 'R'//UPRGCD(NERC)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(NERC),':MXRET0:')
                  VALUE = DBLE(1.0)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,19')
               END IF

!              PUT EXISTING CAPACITY COLUMN INTO LOAD SEGMENTS

               GEN = 0.0
               DO VLS = 1 , EPNSTP(YEAR)
                  IGRP = EPLDGR(VLS,YEAR)
                  ISEG = EPLDSG(VLS,YEAR)
                  ISP = EPGECP(IGRP)
                  ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                  IF (ICAP .EQ. WIPT) THEN
                    VALUE = UPICFC(1,IP,IGRP,ISEG)
                  ELSE IF (ICAP .EQ. WIPV) THEN
                      IF (EPECAP(0,ICAP,YEAR) .GT. 0) THEN
                          UPV_CF_FRAC = UPICFC(1,IP,IGRP,ISEG) / EPIACF(IP)
                          DPV_CF_FRAC = UPICFC_DPV(1,IP,IGRP,ISEG) / EPIACF(IP)
                          UPV_CF = EPECFC_UPV(ICAP,YEAR) * EP_SP_CAP_FAC(ISP,ICAP,YEAR)
                          DPV_CF = DPVTOTGENNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR)) / ( 8.76*DPVTOTCAPNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR)) )
                          UPV_CF_NEW = UPV_CF_FRAC * UPV_CF
                          DPV_CF_NEW = DPV_CF_FRAC * DPV_CF 
                          VALUE = (DPVTOTCAPNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001 * DPV_CF_NEW + &
                              UPV_CF_NEW * (EPECAP(0,ICAP,YEAR)*0.001-DPVTOTCAPNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001)) / EPECAP(0,ICAP,YEAR)/0.001
                      ELSE
                          VALUE = 0.0
                      ENDIF
                          
                      WRITE(18,6312) CURIYR, YEAR, IP, NERC, IGRP, ISEG, ISP,  &
                               DPVTOTCAPNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001, EPECAP(0,ICAP,YEAR)*0.001, EPECAP(0,ICAP,YEAR)*0.001-DPVTOTCAPNR(NERC,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001, EPECAP_UPV(0,ICAP,YEAR)*0.001, &
                            DPV_CF, UPV_CF, &
                            DPV_CF_FRAC, UPV_CF_FRAC,  &
                            DPV_CF_NEW, UPV_CF_NEW, &
                            VALUE
 6312                       FORMAT(1X,"INT_PV_noret",7(",",I4),11(",",F21.6))
                  ELSE
                    VALUE = UPICFC(1,IP,IGRP,ISEG) * EPECFC(ICAP,YEAR) / EPIACF(IP) * EP_SP_CAP_FAC(ISP,ICAP,YEAR)
                  ENDIF

                  WRITE(18,4913) CURIRUN, CURCALYR, YEAR, 0, NERC, ISP, IGRP, ISEG, VLS, IP, ICAP, COLUMN, ROW, VALUE, EPICFC(IP,VLS), UPICFC(0,IP,IGRP,ISEG), &
                     EPECFC(ICAP,YEAR), EPIACF(IP), EP_SP_CAP_FAC(ISP,ICAP,YEAR), UPICFC(1,IP,IGRP,ISEG), UPICFC_DPV(1,IP,IGRP,ISEG)
 4913             FORMAT(1X,"EP_INT_GEN_INFO",11(",",I5),2(",",A16),8(",",F21.6))

                  GEN = GEN + VALUE * EPWDTH(VLS,YEAR)
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  IF (VALUE .LT. ECP_MIN) VALUE = 0.0
                  IF (VALUE .GT. 1.0) VALUE = 1.0
                  IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,20')

                  VALUE_SR = 0.0
                  IF (SR_INT(ICAP,NERC) .GT. 0.0) THEN
                     VALUE_SR = - 1.0 * VALUE * SR_INT(ICAP,NERC)
                  END IF

                  !PT should be able to supply some SR
                     IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .EQ. WIPT) THEN
                        VALUE_SR = VALUE_SR + NET_PT_STORAGE_SR_EX(ISEG,IGRP,NERC,CURIYR)
                     END IF
                     
                  IF (VALUE_SR .NE. 0.0 .AND. VALUE .NE. 0.0) THEN
                    ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                    CALL CVAL(COLUMN,ROW_SR,VALUE_SR,COLUMN_mask,ROW_SR_mask,'EP$INT,23')
                  END IF

               END DO
               IF (GEN .LE. DBLE(0.0)) GEN = DBLE(0.0001)

!              Include in Free Row for Generation

               ROW = 'F'//UPRGCD(NERC)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
               VALUE = GEN / 1000.0
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
               IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,24')

!              include in renewable generation bound row

               IF (UPRNWSHRR(ICAP,NERC) .GT. 0.00) THEN
                  ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(YEAR))
                  VALUE = DBLE(UPRNWSHRR(ICAP,NERC))

!                 DETERMINE GENERATION PER UNIT OF CAPACITY

                  VALUE = VALUE * GEN / 1000.0
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                  IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,25')
               END IF

!              If National RPS and Regional and National Contributions Differ

               IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWSHR(ICAP) .GT. 0.0) THEN
                  ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))
                  VALUE = DBLE(UPRNWSHR(ICAP))

!                 DETERMINE GENERATION PER UNIT OF CAPACITY

                  VALUE = VALUE * GEN / 1000.0
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                  IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,26')
               END IF

!              include wind and solar in maximum intermittent generation row

               IF (UPINTSW .GE. 2) THEN
                  IF (UCPINTIS(ICAP) .GT. 0) THEN
!
                     ROW = 'L'//UPRGCD(NERC)//'XXINT'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':XXINT:',UPYRCD(YEAR))

!                    DETERMINE GENERATION PER UNIT OF CAPACITY

                     VALUE = GEN / 1000.0
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,27')
                  END IF
               END IF
!
!              CO2 OUTPUT STANDARD
!
               IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,YEAR) .GT. 0.0 .AND. CO2_PLTSW(ICAP) .GT. 0.0)THEN
                  CO2_LBMWH = DBLE(0.0)
                  ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
                  VAL_STD_CO2 = DBLE(GEN * 0.001) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * DBLE(CO2_PLTSW(ICAP))
                  VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                  IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                  IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                  IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$INT,29')
               END IF

!              GRID RESILIENCE STANDARD, IF APPROPRIATE

               IF (GRD_RATS(ICAP,NERC) .GE. 0.0)THEN
                  ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(YEAR))
                  VAL_STD_GRD = GEN * DBLE(0.001) * DBLE(GRD_RATS(ICAP, NERC) - GRD_NRYR(NERC,YEAR))
!                 VAL_STD_GRD = VAL_STD_GRD * 0.001
                  IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = 0.0
                  IF (VAL_STD_GRD .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$INT,30')
               END IF
            END IF    ! (TST .GT. 0.0)

!           DETERMINE PRESENT VALUE OF PRODUCTION TAX CREDIT SUBSIDIES

            IF ((UPGSUB(ICAP) .GT. 0.0 .AND. (CURIYR + OLYR - 1) .GE. GSYR1 .AND. (CURIYR + OLYR - 1) .LE. GSYRL) .OR.  &
                (UPGSUBPT(ICAP) .GT. 0 .AND. UPGSUBYR(ICAP,min(MNUMYR , CURIYR + OLYR -1)) .GT. 0.0)) THEN
                ! determine annual generation based on time slice CF used in load (from RESTORE)
                   GENNEW = 0.0
                   DO VLS = 1 , EPNSTP(YEAR)
                       IGRP = EPLDGR(VLS,YEAR)
                       ISEG = EPLDSG(VLS,YEAR)
                       GENNEW = GENNEW + UPICFC(1,IP,IGRP,ISEG) * EPWDTH(VLS,YEAR)
                   ENDDO
                
               DO JYR = 1 , UPGSYR(ICAP)
                  IF (UPGSUBPT(ICAP) .LE. 0) THEN
                     SOM(JYR) =(UPGSUB(ICAP) * GENNEW / 1000.0 )
                  ELSE
                        SOM(JYR) =(UPGSUBYR(ICAP,min(MNUMYR , CURIYR + OLYR - 1)) * GENNEW / 1000.0 )
                  END IF
                  
!                 CHECK IF PTC IS CAPPED

                  IF (UPGSMX(ICAP) .GT. 0)SOM(JYR) = MIN(SOM(JYR),UPGSMX(ICAP))

!                 IF PTC IS REAL, THEN APPLY DEFLATOR

                  IF (UPGSTY(ICAP) .LE. 0)SOM(JYR) = SOM(JYR) * UPGNPD(JYR + CURIYR + OLYR - 2)

!                 ADJUST FOR TAX BENEFIT

                  SOM(JYR) = SOM(JYR) / (1.0 - UPTXRT)
                  IF (YEAR .EQ. 1) SOML(JYR) = SOM(JYR) / (GENNEW / 1000.0)
               END DO
!
               PV$SOM = PVV(SOM,ECP_D_FPH,UPGSYR(ICAP), DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR - 1)
               IF (YEAR .EQ. 1) PV$SOML = PVV(SOML,ECP_D_FPH,UPGSYR(ICAP), DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR - 1)
            ELSE
               PV$SOM = 0.0
               IF (YEAR .EQ. 1) PV$SOML = 0.0
            END IF

!           CHECK FOR TIME-DEPENDENT DEBT/EQUITY SUBSIDIES

            CALL EP$SUBFIN(ICAP,OLYR,CSTDTADJ,CSTEQADJ,SHRDTADJ)

!           DETERMINE PRESENT VALUE OF FIXED O&M AT OLYR INCLUDE EXTERNALITY COSTS, IF ANY

            IFPH2 = UNFPH - OLYR + 1
            DO JYR = 1 , IFPH2
               IF (ICAP .EQ. WIPT) THEN
                    ARB(JYR) = (PT_OFFSET(NERC) - PT_STORAGE_PROFIT(NERC,CURIYR)) * UPGNPD(JYR + CURIYR + OLYR - 2) 
               END IF
               FOM(JYR) = EPIRFOM(RCAP) * UPGNPD(JYR + CURIYR + OLYR - 2)
               TOM(JYR) = EPCFOM(ICAP) * UPGNPD(JYR + CURIYR + OLYR - 2)
               VOM(JYR) = (EPIRVOM(RCAP) * 8.76 * EPIACF(IP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               GPS(JYR) = (GPSSUB(ICAP,JYR + OLYR - 1) * 8.76 * EPIACF(IP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               IF (YEAR .EQ. 1) THEN
                  FOML(JYR) = EPIRFOM(RCAP) * UPGNPD(JYR + CURIYR + OLYR - 2)
                  VOML(JYR) = EPIRVOM(RCAP) * UPGNPD(JYR + CURIYR + OLYR - 2)
				  TOML(JYR) = EPCFOM(ICAP)  * UPGNPD(JYR + CURIYR + OLYR - 2)
               END IF

               EXTR(JYR) = DBLE(EPEXT(ICAP,MNPOLLUT + 1) * 8.76 * EPIACF(IP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               IF (YEAR .EQ. 1) EXTL(JYR) = DBLE(EPEXT(ICAP,MNPOLLUT + 1)) * UPGNPD(JYR + CURIYR + OLYR - 2)

            END DO

			IF (ICAP .EQ. WIPT) THEN
                PV$ARB = PVV(ARB,ECP_D_FPH,IFPH2, DBLE(EPDSCRT + Battery_Extra_Discount)) * PWF(DBLE(EPDSCRT + Battery_Extra_Discount),OLYR-1)
				DO JYR = 1, IFPH2
					WRITE(18,9319) CURIRUN, CURCALYR, CURIYR+JYR+OLYR-2+1989, JYR, OLYR, NERC, PT_OFFSET(NERC),PT_STORAGE_PROFIT(NERC,CURIYR), &
							(PT_OFFSET(NERC) - PT_STORAGE_PROFIT(NERC,CURIYR)), UPGNPD(JYR + CURIYR + OLYR - 2), ARB(JYR), PV$ARB
				END DO

 9319       FORMAT(1X,"PT_ARB",6(":",I5),6(":",F21.6))
            ELSE
                PV$ARB = 0.0
            END IF

            PV$FOM = PVV(FOM,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
            PV$TOM = PVV(TOM,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
            PV$VOM = PVV(VOM,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
            PV$GPS = PVV(GPS,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
            PV$EXT = PVV(EXTR,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)

!           COMPUTE LEVELIZED GENERATION O&M, SUBSIDY AND EXTERNALITY COSTS

            IF (YEAR .EQ. 1) THEN
               PV$FOML = PVV(FOML,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$VOML = PVV(VOML,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
			   PV$TOML = PVV(TOML,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$EXTL = PVV(EXTL,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               CALL EP$LGNP(OLYR,IFPH2,EPDSCRT - UPRSK(ICAP),PVGNPR)
               CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
               EPLVFOM(ICAP) = (PV$FOML + PV$TOML) / PVGNP
               EPLVVOM(ICAP) = PV$VOML / PVGNP
               EPLVEXT(ICAP) = (PV$EXTL - PV$SOML) / PVGNP
               EPLVFLC(ICAP) = 0.0
            END IF

!           IF PLANT TYPE IS ALLOWED TO BUILD THEN CREATE INTERMITTENT BUILD BOUNDS, ONE FOR EACH PLANNING YEAR.

            IF ((UPVTYP(ICAP) .EQ. 1) .AND. (EPBNDTYP(RCAP) .NE. 'Z') .AND. (OLYR .LE. UNXPH)) THEN  !yda AIMMS: (EPBNDTYP(RCAP) .NE. 'Z') condition is ignored since row type is always 'L' and cannot ='Z'

!              DETERMINE CPS REQUIREMENT (LEVELIZED FOR LAST YEAR)

               IF (UPCAPCAS .GT. 0) THEN
                  IF (UPVTYP(ICAP) .EQ. 1) THEN
                     IF (OLYR .LT. UNXPH) THEN
                        PVCPS = DBLE(UPCAPBND(MIN(CURIYR + OLYR - 1,UNYEAR)))
                     ELSE
                        DO JYR = 1 , UNFPH - UNXPH - 1
                           CPS(JYR) = UPCAPBND(MIN(CURIYR + JYR + UNXPH - 2,UNYEAR))
                           ONE(JYR) = DBLE(1.0)
                        END DO
                        PVCPS = PVV(CPS,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                        PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                        PVCPS = PVCPS / PVONE
                     END IF
                     PVCPS = MAX(PVCPS,ECP_MIN)
                     IF (UPCAPSHR(ICAP) .LE. 0.0) THEN
                        PVCPS = PVCPS
                     ELSE
                        PVCPS = PVCPS - DBLE(1.0)
                     END IF
                  END IF
               END IF

!              SET UP ANNUAL NATIONAL LIMIT ROWS

               IF ( (UPAVLYR(ICAP) .LE. FULLYR ) ) THEN

                 ROW = 'L'//'U'//UPLNTCD(ICAP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',':U:',UPLNTCD(ICAP),':ANN:',UPYRCD(YEAR))

!                SET ROW TYPE
!
                 IF ( UPANNLMT(ICAP,MIN(MNUMYR , OLYR+CURIYR)) .GT. 999.0 ) THEN
!                     make free row
                   CALL CROWTYPE(ROW,'N       ',ROW_mask)
                 ELSE
                   CALL CROWTYPE(ROW,'L       ',ROW_mask)
                   VALUE = UPANNLMT(ICAP,MIN(MNUMYR , CURIYR+OLYR-1))

!                  REVISE RHS OF ROW
!
                   IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                   CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$INT,31')
                 ENDIF

              ENDIF

!              TECHNOLOGIES USING ELASTICITIES

               IF (ESTSWTCH(ICAP) .GT. 0) THEN
                  IF (ICAP .EQ. BCAP) THEN
                     ROW = 'L'//UPRGCD(NERC)//UPLNTCD(ICAP)//'INT'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(ICAP),':INT:',UPYRCD(YEAR))

!                    SET ROW TYPE - WHEN USW_RNW >= 1 THEN SET ROW TYPE & BOUNDS ACCORDING TO RENEWABLE COMMON INFO

                     IF (USW_RNW .GE. 1) THEN
                        if(EPBNDTYP(RCAP).ne."2" .and. EPBNDTYP(RCAP).ne.' '.and.ichar(EPBNDTYP(RCAP)).ne.0) then
                           CALL CROWTYPE(ROW,EPBNDTYP(RCAP)//'       ',ROW_mask)
                        else
                          CALL CROWTYPE(ROW,'L       ',ROW_mask)
                        endif
                     ELSE
                        CALL CROWTYPE(ROW,'E       ',ROW_mask)
                     END IF

!                    REVISE RHS OF ROW

                     IF ((USW_RNW .GE. 1) .AND. (UPAVLYR(ICAP) .LE. FULLYR)) THEN
                        IF (OLYR .LT. UNXPH) THEN
                           VALUE = DBLE(EPBLDBND(RCAP,YEAR))
                        ELSE
                           VALUE = DBLE(5.0 * EPBLDBND(RCAP,YEAR))
                        END IF
                     ELSE
                        VALUE = DBLE(0.0)
                     END IF
!
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$INT,32')
                  END IF

!                 TECHNOLOGIES USING REGIONAL SUPPLY CURVE OVER ALL YEARS

               ELSEIF (ESTSWTCH(ICAP) .LT. 0 .AND. YEAR .EQ. 1) THEN

!                 WL SHARES CONSTRAINT WITH WN and PT SHARES CONSTRAINT WITH PV

                  IF (ICAP .NE. WIWL .AND. ICAP .NE. WIPT) THEN
                     DO IS = 1 , EPSTSUP(RCAP)

                        ROW = 'L'//UPRGCD(NERC)//UPLNTCD(KCAP)//'IN'//SSTEP(IS)//'Y'; call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(KCAP),':IN:',SSTEP(IS),':Y:')

!                       SET ROW TYPE

                        CALL CROWTYPE(ROW,'L       ',ROW_mask)

!                       REVISE RHS OF ROW

                        IF ((USW_RNW .GE. 1) .AND. (UPAVLYR(ICAP) .LE. FULLYR)) THEN
                           VALUE = DBLE(EPBDSUP(RCAP,IS))
                        ELSE
                           VALUE = DBLE(0.0)
                        END IF

                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$INT,33')
                     END DO     ! IS
                  END IF
               END IF        ! ESTSWTCH
            END IF           ! UPVTYP = 1 & EPBNDTYP != Z & OLYR != UNXPH
         END IF              ! ((EPECAP(0,ICAP,YEAR) .GT. DBLE(0.0)) .OR. (UPVTYP(ICAP) .EQ. 1))

!        Loop over ownership types and create Build Vectors for region appropriate ownership type

         DO IOWN = 1  , 2

            WRITE(18,9317) CURIRUN, CURCALYR, CURIYR+YEAR+1989, OLYR, UPPLYR(ICAP), NERC, IP, ICAP, RCAP, LCAP, BCAP, IOWN, UPBLDTYP(NERC), UPVTYP(ICAP), UPAVLYR(ICAP), &
               UPSUBCAS(ICAP), EPSTSUP(RCAP), CO2_STDSW, CO2_STDSA, CO2_STDQT, CO2_STDTN(NERC), CO2_PLTSA(ICAP), CO2_PLTSA(ICAP), &
               EPCurCL_WN(NERC,CURIYR), EPCurCL_WL(NERC,CURIYR), EPCurBF_WN(NERC,CURIYR), EPCurBF_WL(NERC,CURIYR), &
               UPBLDREG(ICAP,MNUMNR), UPBLDREG(ICAP,NERC), UPBLDREG(LCAP,MNUMNR), UPBLDREG(LCAP,NERC), LIMSUB(ICAP), EPBNDTYP(RCAP), &
               EPCurCL_PV(NERC,CURIYR), EPCurCL_PT(NERC,CURIYR), EPCurCL_SO(NERC,CURIYR), EPBLDBND(RCAP,YEAR), UPLNTCD(ICAP), UPLNTCD(LCAP), UPLNTCD(BCAP)

 9317       FORMAT(1X,"UECP_EP_INT_BUILD",27(":",I5),5(":",F21.4),":",A1,3(":",I4),":",F21.6,3(":",A2))

            IF (UPBLDTYP(NERC) .EQ. IOWN) THEN

!              LOOP OVER TECHNOLOGY SUPPLY CURVE STEPS

!              CREATE EXTRA LOOP FOR SUBSIDY LIMITS, IF APPROPRIATE

               IF (UPSUBCAS(ICAP) .GT. 0 .AND. LIMSUB(ICAP) .GT. 0.0)THEN
                  NUMLOOP = 2

!                 IF PTC SUBSIDY, CHECK IF VALID ONLINE YEAR

                  IF (UPSUBCAS(ICAP) .EQ. 1) THEN
                   IF (UPGSUBPT(ICAP) .LE. 0) THEN
                     IF (OLYR .LT. UNXPH) THEN
                        IF ((CURIYR + OLYR - 1) .LT. GSYR1 .OR. (CURIYR + OLYR - 1) .GT. GSYRL) NUMLOOP = 1
                     ELSE
                        IF ((CURIYR + UNFPH - 1) .LT. GSYR1) NUMLOOP = 1
                        IF ((CURIYR + UNXPH - 1) .GT. GSYRL) NUMLOOP = 1
                     END IF
                   ELSE
                     IF (OLYR .LT. UNXPH) THEN
                        IF (UPGSUBYR(ICAP,MIN(MNUMYR,CURIYR + OLYR - 1)) .LE. 0.0) NUMLOOP = 1
                     ELSE
!                       IF (UPGSUBYR(ICAP,MIN(MNUMYR,CURIYR + UNFPH - 1)) .LE. 0.0) NUMLOOP = 1
                        IF (UPGSUBYR(ICAP,MIN(MNUMYR,CURIYR + UNXPH - 1)) .LE. 0.0) NUMLOOP = 1
                     END IF
                   END IF
                  END IF
               ELSE
                  NUMLOOP = 1
               END IF

               DO LOOPS = 1 , NUMLOOP
                  DO IS = 1 , EPSTSUP(RCAP)
                     IF (OLYR .LE. UNXPH .AND. EPBNDTYP(RCAP) .NE. 'Z' .AND. UPVTYP(ICAP) .EQ. 1) THEN  !yda AIMMS: (EPBNDTYP(RCAP) .NE. 'Z') condition is ignored since row type is always 'L' and cannot ='Z'
!
!                     IN FINAL MASS-BASED EXISTING CASE, ALSO CREATE BUILDS FOR SET-ASIDES IF USED
!
                      CPPLOOP = 1
                      IF (CO2_STDSW .GT. 0 .AND. CO2_STDSA .GT. 0 .AND. CO2_STDQT .EQ. 2 .AND. CO2_STDTN(NERC) .EQ. 2 .AND. CO2_PLTSA(ICAP) .GT. 0)THEN
                       IF ((CURIYR + UHBSYR + OLYR - 1) .GE. CO2_STDY1 .AND. IS .EQ. 1)THEN
                         CPPLOOP = 2
                       END IF
                      END IF
                      DO CLOOP = 1 , CPPLOOP
                       IF (CLOOP .LT. 2)THEN
                          CSTEPS = 1
                       ELSE
                          CSTEPS = CO2_PLTSA(ICAP)
                       END IF
                       DO CS = 1 , CSTEPS
                        IFPH2 = UNFPH - OLYR + 1
                        IF (CLOOP .EQ. 1)THEN
                           IF (LOOPS .EQ. 1) THEN
                              COLUMN = 'I'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPOWNCD(IOWN)//'X'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':I:',UPRGCD(NERC),UPLNTCD(ICAP),UPOWNCD(IOWN),':X:',SSTEP(IS),UPYRCD(YEAR))
                           ELSE
                              COLUMN = 'I'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPOWNCD(IOWN)//'S'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':I:',UPRGCD(NERC),UPLNTCD(ICAP),UPOWNCD(IOWN),':S:',SSTEP(IS),UPYRCD(YEAR))
                           END IF
                        ELSE
                           IF (LOOPS .EQ. 1) THEN
                              COLUMN = 'I'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPOWNCD(IOWN)//'X'//SA_CODE(CS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':I:',UPRGCD(NERC),UPLNTCD(ICAP),UPOWNCD(IOWN),':X:',SA_CODE(CS),UPYRCD(YEAR))
                           ELSE
                              COLUMN = 'I'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPOWNCD(IOWN)//'S'//SA_CODE(CS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':I:',UPRGCD(NERC),UPLNTCD(ICAP),UPOWNCD(IOWN),':S:',SA_CODE(CS),UPYRCD(YEAR))
                           END IF
                        END IF

!                       IF TECHNOLOGY IS AVAILABLE THEN REVISE/CREATE COEFFICIENTS

                        IF (UPAVLYR(ICAP) .LE. FULLYR .AND. (UPBLDREG(ICAP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(ICAP,NERC) .GT. 0.0) .AND.  &
                           (UPBLDREG(LCAP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(LCAP,NERC) .GT. 0.0)) THEN

!                       STORE INDEX FOR AVAILABILITY OF TECHNOLOGY AND SUBSIDY

                        IF (LOOPS .EQ. 1 .AND. IS .EQ. 1 .AND. UPBLDREG(ICAP,NERC) .GT. 0.0)BUILD_AVL(ICAP,YEAR,NERC,CURIYR) = NUMLOOP

                           IF (UPAVLYR(ICAP) .LE. FULLYR .AND. UPINTSW .EQ. 1) THEN

!                             BOUND COLUMN TO PERCENT OF PEAK TO LIMIT PENETRATION RATE

                              UVALUE = DBLE(EPPEAK(YEAR) * UPIBND(IP))
                              CALL CBND(UPBND,COLUMN,DBLE(0.0),UVALUE,COLUMN_mask,'EP$INT,34')
                           END IF

!                          PUT INTERSECTION INTO TOTAL INTERMITTENT BUILD ROW.

!                          ELASTICITY APPROACH USES REGIONAL AND NATIONAL CONSTRAINTS

                           IF (ESTSWTCH(ICAP) .GT. 0) THEN

                              ROW = 'L'//UPRGCD(NERC)//UPLNTCD(BCAP)//'INT'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(BCAP),':INT:',UPYRCD(YEAR))
                              CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$INT,35')

!                             TECHNOLOGY SUPPLY CURVE ROW

                              ROW = 'L'//'U'//UPLNTCD(KCAP)//'IN'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',':U:',UPLNTCD(KCAP),'IN',SSTEP(IS),UPYRCD(YEAR)) ! dispatch type element IN
                              CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$INT,36')

!                             P/Q SUPPLY CURVE APPROACH USES REGIONAL CONSTRAINTS ACROSS YEARS

                           ELSEIF (ESTSWTCH(ICAP) .LT. 0) THEN
                              ROW = 'L'//UPRGCD(NERC)//UPLNTCD(ICAP)//'IN'//SSTEP(IS)//'Y'; call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(ICAP),':IN:',SSTEP(IS),':Y:')
                              CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$INT,37')
                           END IF

!                          PUT INTO NATIONAL ANNUAL BUILD LIMIT ROW
!
                           ROW = 'LU'//UPLNTCD(ICAP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',UPLNTCD(ICAP),':ANN:',UPYRCD(YEAR)) 
                           VALUE = DBLE(1.0)
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,38')
!

!                          CRN ITC adjustment, can't claim both ITC and PTC, so if the PTC is available in OLYR, take that

                           IF ((UPGSUB(ICAP) .GT. 0.0 .AND. (CURIYR + OLYR - 1) .GE. GSYR1 .AND. (CURIYR + OLYR - 1) .LE. GSYRL) .OR.  &
                               (UPGSUBPT(ICAP) .GT. 0 .AND. UPGSUBYR(ICAP,min(MNUMYR , CURIYR + OLYR - 1)) .GT. 0.0)) THEN
                              ITCADJ=1.0-UPCSB(ICAP)
                           ELSE
                              ITCADJ=1.0
                           ENDIF

                           IF (IOWN .EQ. 1) THEN ! Utility Builds
                              write(18,'("CRN ITC1:",2(I4,":"),2(I6,":"),3(F12.5,":"))') icap,curiyr+olyr-1,gsyr1,gsyrl,upgsub(icap),upcsb(icap),itcadj
                           ELSE IF (IOWN .EQ. 2)THEN
                              write(18,'("CRN ITC2:",2(I4,":"),2(I6,":"),3(F12.5,":"))') icap,curiyr+olyr-1,gsyr1,gsyrl,upgsub(icap),upcsb(icap),itcadj
                           END IF

                           IF (IOWN .EQ. 1) THEN ! Utility Builds

                              ROW = UPOBJ ; ROW_mask=UPOBJ
!                             CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                              IF (UPSUBCAS(ICAP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 DEBT_F = EPUFDT
                              ELSE
                                 DEBT_F = EPUFDT + UPNFDTA(ICAP)
                              END IF
                                 DEBT_F = DEBT_F + SHRDTADJ

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                              IF (UPSUBCAS(ICAP) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 UTINT  =  EPUIRT
                              ELSE
                                 UTINT  =  EPUIRT + UPNIRTEA(ICAP)
                              END IF
                                 UTINT  =  UTINT + CSTDTADJ

!                             CHECK FOR SUBSIDY LIMIT FOR RETURN ON EQUITY

                              IF (UPSUBCAS(ICAP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT)
                              ELSE
                                 UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT) + UPNRRTEA(ICAP)
                              END IF
                                 UTROE  =  UTROE + CSTEQADJ

                              UTROR = UTROE * (1.0 - DEBT_F) + UTINT * DEBT_F

!                             IF SUBSIDY LIMIT FOR INVESTMENT TAX CREDIT, REMOVE IT FOR ADDITIONS WITHOUT SUBSIDY

                              ANNRTE = (UPANNADJ(ICAP,UNYEAR) / UPANNADJ(ICAP,UNYEAR - 10)) ** (1.0 / 10.0)
                              IF (OLYR .LT. UNXPH)THEN
                                 IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                                    ANNADJ = UPANNADJ(ICAP,CURIYR+OLYR-1)
                                 ELSE
                                    ANNADJ = UPANNADJ(ICAP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                                 END IF
                              ELSE
                                 DO JYR = UNXPH , UNAPH
                                    KYR = JYR - UNXPH + 1
                                    AN1(KYR) = 1.0
                                    IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                       ANN(KYR) = UPANNADJ(ICAP,CURIYR + JYR - 1)
                                    ELSE
                                       ANN(KYR) = UPANNADJ(ICAP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                    END IF
                                 END DO
                                 ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                          PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                              END IF

                              IF (UPSUBCAS(ICAP) .EQ. 2 .AND. NUMLOOP .EQ. 2)THEN
                                 IF (LOOPS .EQ. 1) THEN

!                                   OVRCST = (EPIROVR(RCAP) / (1.0 - UPCSB(ICAP))) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * &
!                                      EPRGM(ICAP) * EPACM(ICAP) * EPCCSUP(RCAP,IS) * UPANNADJ(ICAP,MIN(MNUMYR,CURIYR+OLYR-1))

                                    OVRCST = (EPIROVR(RCAP) / (1.0 - UPCSB(ICAP))) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * &
                                       EPRGM(ICAP) * EPACM(ICAP) * EPCCSUP(RCAP,IS) * ANNADJ
                                 ELSE

!                                   OVRCST = EPIROVR(RCAP) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * EPRGM(ICAP) * EPACM(ICAP) * &
!                                      EPCCSUP(RCAP,IS) * UPANNADJ(ICAP,MIN(MNUMYR,CURIYR+OLYR-1))

                                    OVRCST = EPIROVR(RCAP) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * EPRGM(ICAP) * EPACM(ICAP) * &
                                       EPCCSUP(RCAP,IS) * ANNADJ
                                 END IF
                              ELSE

!                                OVRCST = (EPIROVR(RCAP)/ITCADJ) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * EPRGM(ICAP) * &
!                                   EPACM(ICAP) * EPCCSUP(RCAP,IS) * UPANNADJ(ICAP,MIN(MNUMYR,CURIYR+OLYR-1))

                                 OVRCST = (EPIROVR(RCAP)/ITCADJ) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * EPRGM(ICAP) * &
                                    EPACM(ICAP) * EPCCSUP(RCAP,IS) * ANNADJ
                              END IF

!                             WRITE(6,3755) CURIRUN, CURCALYR, CURITR, NERC, RCAP, IS, EPCCSUP(RCAP,IS)
!3755                         FORMAT(1X,"EPCCSUP_EP_INT",6(":",I4),":",F21.6)

!
!                             ADJUST CAPITAL COST FOR CPP ALLOWANCE SET-ASIDES, IF SPECIFIED
!
                              IF (CLOOP .EQ. 2)THEN
                                 OVRCST = OVRCST * (1.0 - CO2_STPSA(ICAP,CS))
                              END IF

                              CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(ICAP),UPPLYR(ICAP),CURIYR,YEAR,OVRCST,CPR, &
                                 UPCAPD(1,ICAP),UPGNPD,UTINT,DEBT_F,UTROR,TXBOOK,FNBOOK)

                              if (IS.eq.1) WRITE(18,3211) CURIYR+UHBSYR,NERC, LOOPS, CS, ICAP,IOWN,UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(ICAP), &
                                 UPPLYR(ICAP),YEAR,OVRCST, &
                                 UTINT,UTROE,DEBT_F,UTROR,TXBOOK,FNBOOK,(CPR(ICP),ICP=1,ECP_D_LCP),RCAP,IS,EPCCSUP(RCAP,IS),0,0,  &
                                 (UPCAPD(ZYR,ICAP),UPGNPD(ZYR),ZYR=UPPLYR(ICAP)+YEAR-1,UPPLYR(ICAP)+YEAR+UPCLYR(ICAP)-2)

                              URATIO = TXBOOK / FNBOOK
                              CAPUNSTL = FNBOOK

                              CALL EPNBLD(DBLE(UTROR),DBLE(EPDSCRT - UPRSK(ICAP)),URATIO,DBLE(EPUFPE),UPECLF(ICAP),UPTXLF(ICAP), &
                                 DBLE(UPTXRT),UPUCLF(ICAP),CAPUTIL)

                              if (STEPS.eq.1)  &
                                 WRITE(18,4212) CURIYR+UHBSYR,YEAR,NERC,ICAP,UTROR,EPDSCRT - UPRSK(ICAP),URATIO,EPUFPE,UPECLF(ICAP),&
                                    UPTXLF(ICAP),UPTXRT,UPUCLF(ICAP),CAPUTIL
 4212                            FORMAT(1X,"EPNBLD-I",4(":",I4),4(":",F7.4),2(":",I2),":",F7.4,":",I4,":",F8.4)

                              TRANS = (DBLE(EPCOVR(ICAP) + EPCTRM(ICAP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(ICAP))
                              OBJVAL = (( CAPUNSTL * CAPUTIL + TRANS ) / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) ) * &
                                 PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)

!                             CHECK FOR SUBSIDY LIMIT FOR PTC

                              IF (UPSUBCAS(ICAP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 VALUE = OBJVAL + PV$FOM * EPFXSUP(RCAP,IS) + PV$TOM + PV$VOM * EPVRSUP(RCAP,IS) + PV$EXT - PV$GPS + PV$ARB
                              ELSE
                                 VALUE = OBJVAL + PV$FOM * EPFXSUP(RCAP,IS) + PV$TOM + PV$VOM * EPVRSUP(RCAP,IS) + PV$EXT - PV$SOM - PV$GPS + PV$ARB
                              END IF
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,39')

                              T_CRF = CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2)
                              T_PWF = PWF(DBLE(EPDSCRT) - UPRSK(ICAP),OLYR)
                              IF (YEAR .EQ. 1) THEN
                                 WRITE(18,36) CURIYR+UHBSYR,OLYR+CURIYR+UHBSYR-1,NERC,UPBLDTYP(NERC),ICAP,IP,UPLNTCD(ICAP),COLUMN, &
                                    OVRCST,FNBOOK,CAPUTIL,CAPUNSTL*CAPUTIL,UTROR,EPDSCRT,UPRSK(ICAP),        &
                                    EPIRFOM(RCAP),EPEXT(ICAP,MNPOLLUT + 1),EPCOVR(ICAP),EPCCRF(ICAP),EPCTRM(ICAP), &
                                    TRANS,OBJVAL,PV$FOM*EPFXSUP(RCAP,IS),PV$EXT,PV$SOM,VALUE,UPGNPD(YEAR),UPGNPD(OLYR+CURIYR-1),    &
                                    UPGNPD(1999-UHBSYR),OLYR,IFPH2,T_CRF,T_PWF,UTROE,UTINT, PV$ARB, PV$GPS,PV$TOM
                              END IF


!                             COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR--UTILITIES

                              IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP .AND. CLOOP .EQ. 1 .AND. IS .EQ. 1) THEN
                                 CAPLEV = (( CAPUNSTL * CAPUTIL ) / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) ) * &
                                    PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)
                                 CAPLEV = CAPLEV / PVGNP
                                 EPLVCAP(ICAP,IOWN) = CAPLEV
                                 EPLVFCF(ICAP,IOWN) = CAPLEV / OVRCST
                                 EPLVTRN(ICAP) = (TRANS / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) * PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)) / PVGNP
                                 EPLVBCK(ICAP) = EPIRCCR(RCAP)
                              END IF

!                             FOR SET-ASIDES IN CPP MASS STANDARD FOR EXISTING ONLY, STORE LEVELIZED CAPCOST

                              IF (CLOOP .EQ. 2)THEN
                                 LEVSA  = (( CAPUNSTL * CAPUTIL ) / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) ) * &
                                    PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)
                                 CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
                                 LEVSA  = LEVSA  / PVGNP
                              ELSE
                                 LEVSA = 0.0
                              END IF

                           ELSE                  ! EWG Builds

                              ROW = UPOBJ ; ROW_mask=UPOBJ

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                              IF (UPSUBCAS(ICAP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 DEBT_F = UPNFDT
                              ELSE

!                                ADJUST DEBT FRACTION ADJUSTMENT WHEN SUBSIDY IN PLACE

                                 DBTADJ = 1.0
                                 IF (UPNFDTA(ICAP) .NE. 0.0 .AND. USW_WACC .GT. 0)THEN
                                    IF (UPGSUBPT(ICAP) .GT. 0.0 .AND. UPGSUBYR(ICAP,UPSTYR - UHBSYR) .GT. 0.0)THEN
                                          DBTADJ = 1.0 - (UPGSUBYR(ICAP,UPSTYR - UHBSYR) - UPGSUBYR(ICAP,MIN(CURIYR + OLYR - 1,UNYEAR))) /  &
                                                   UPGSUBYR(ICAP,UPSTYR - UHBSYR)
!     if (year .eq. 1 .and. nerc .eq. 1)write(6,3456) curiyr+1989, curiyr+1989+olyr-1,uplntcd(icap),upgsubpt(icap),upnfdt,upnfdta(icap),  &
!                                                  UPGSUBYR(ICAP,UPSTYR - UHBSYR) , UPGSUBYR(ICAP,MIN(UNYEAR,CURIYR + OLYR - 1)),  &
!                                                        (UPGSUBYR(ICAP,UPSTYR - UHBSYR) - UPGSUBYR(ICAP,MIN(CURIYR + OLYR - 1,UNYEAR))) /  &
!                                                  UPGSUBYR(ICAP,UPSTYR - UHBSYR), dbtadj
!3456 format(1h ,'!dbtadj1',i4,i5,1x,a3,i3,10f10.3)
!                                   ELSE
!                                      DBTADJ = 1.0
                                    END IF
                                    IF (UPCSBYR(ICAP,UPSTYR - UHBSYR) .GT. 0.0)THEN
                                       DBTADJ = 1.0 - (UPCSBYR(ICAP,UPSTYR - UHBSYR) - UPCSBYR(ICAP,MIN(CURIYR + OLYR - 1,UNYEAR))) /   &
                                                UPCSBYR(ICAP,UPSTYR - UHBSYR)
!     if (year .eq. 1 .and. nerc .eq. 1)write(6,3457) curiyr+1989, curiyr+1989+olyr-1,uplntcd(icap),upgsubpt(icap),upnfdt,upnfdta(icap),  &
!                                                  UPCSBYR(ICAP,UPSTYR - UHBSYR) , UPCSBYR(ICAP,MIN(UNYEAR,CURIYR + OLYR - 1)),  &
!                                                     (UPCSBYR(ICAP,UPSTYR - UHBSYR) - UPCSBYR(ICAP,MIN(CURIYR + OLYR - 1,UNYEAR))) /   &
!                                               UPCSBYR(ICAP,UPSTYR - UHBSYR), dbtadj
!3457 format(1h ,'!dbtadj2',i4,i5,1x,a3,i3,10f10.3)
                                    END IF
                                 END IF

                                 DEBT_F = UPNFDT + UPNFDTA(ICAP) * DBTADJ
                              END IF
                                 DEBT_F = DEBT_F + SHRDTADJ
!     if (year .eq. 1 .and. nerc .eq. 1 .and. is .eq. 1)write(6,3458) curiyr+1989, curiyr+1989+olyr-1,uplntcd(icap),upnfdt,upnfdta(icap),dbtadj,debt_f
!3458 format(1h ,'!debt_f',i4,i5,1x,a3,5f10.3)

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                              IF (UPSUBCAS(ICAP) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 EWGINT = EPUIRT + UPNIPRM
                                 UTINT  =  EPUIRT
                              ELSE
                                 EWGINT =  EPUIRT + UPNIPRM + UPNIRTEA(ICAP)
                                 UTINT  =  EPUIRT + UPNIRTEA(ICAP)
                              END IF
                                 EWGINT =  EWGINT + CSTDTADJ
                                 UTINT  =  UTINT  + CSTDTADJ

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                              IF (UPSUBCAS(ICAP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 EWGROE = EPUCRE + UPNRPRM
                                 UTROE  = EPUCRE
                              ELSE
                                 EWGROE = EPUCRE + UPNRPRM + UPNRRTEA(ICAP)
                                 UTROE  = EPUCRE + UPNRRTEA(ICAP)
                              END IF
                                 EWGROE =  EWGROE + CSTEQADJ
                                 UTROE  =  UTROE  + CSTEQADJ
                              EWGROR = EWGROE * (1.0 - DEBT_F) + EWGINT * DEBT_F

!                             CHECK FOR SUBSIDY LIMIT FOR ITC -- EXCLUDE IF NOT SUBSIDIZED

                              ANNRTE = (UPANNADJ(ICAP,UNYEAR) / UPANNADJ(ICAP,UNYEAR - 10)) ** (1.0 / 10.0)
                              IF (OLYR .LT. UNXPH)THEN
                                 IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                                    ANNADJ = UPANNADJ(ICAP,CURIYR+OLYR-1)
                                 ELSE
                                    ANNADJ = UPANNADJ(ICAP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                                 END IF
                              ELSE
                                 DO JYR = UNXPH , UNAPH
                                    KYR = JYR - UNXPH + 1
                                    AN1(KYR) = 1.0
                                    IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                       ANN(KYR) = UPANNADJ(ICAP,CURIYR + JYR - 1)
                                    ELSE
                                       ANN(KYR) = UPANNADJ(ICAP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                    END IF
                                 END DO
                                 ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                          PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                              END IF

                              IF (UPSUBCAS(ICAP) .EQ. 2 .AND. NUMLOOP .EQ. 2) THEN
                                 IF (LOOPS .EQ. 1) THEN
!                                   OVRCST = (EPIROVR(RCAP) / (1.0 - UPCSB(ICAP))) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * &
!                                      EPRGM(ICAP) * EPACM(ICAP) * EPCCSUP(RCAP,IS) * UPANNADJ(ICAP,MIN(MNUMYR,CURIYR+OLYR-1))

                                    OVRCST = (EPIROVR(RCAP) / (1.0 - UPCSB(ICAP))) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * &
                                       EPRGM(ICAP) * EPACM(ICAP) * EPCCSUP(RCAP,IS) * ANNADJ

                                 ELSE
!                                   OVRCST = EPIROVR(RCAP) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * EPRGM(ICAP) * EPACM(ICAP) * &
!                                      EPCCSUP(RCAP,IS) * UPANNADJ(ICAP,MIN(MNUMYR,CURIYR+OLYR-1))

                                    OVRCST = EPIROVR(RCAP) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * EPRGM(ICAP) * EPACM(ICAP) * &
                                       EPCCSUP(RCAP,IS) * ANNADJ

                                 END IF
                              ELSE
!                                OVRCST = (EPIROVR(RCAP)/ITCADJ) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * EPRGM(ICAP) * &
!                                   EPACM(ICAP) * EPCCSUP(RCAP,IS) * UPANNADJ(ICAP,MIN(MNUMYR,CURIYR+OLYR-1))

                                 OVRCST = (EPIROVR(RCAP)/ITCADJ) * UPLRPC(ICAP) * UPLROPT(ICAP) * UPLRLC(ICAP) * EPRGM(ICAP) * &
                                    EPACM(ICAP) * EPCCSUP(RCAP,IS) * ANNADJ

                              END IF

                              if (IS.eq.1) WRITE(18,5211) CURIRUN, CURCALYR, YEAR, OLYR, IS, NERC, ICAP, RCAP, IOWN, UPSUBCAS(ICAP), NUMLOOP, LOOPS, &
                                 COLUMN, OVRCST, EPIROVR(RCAP), ITCADJ, UPLRPC(ICAP), UPLROPT(ICAP), UPLRLC(ICAP), EPRGM(ICAP), &
                                 EPACM(ICAP), EPCCSUP(RCAP,IS), ANNADJ
 5211                         FORMAT(1X,"OVRCST-I",12(":",I4),":",A8,10(":",F15.3))

!                             WRITE(6,3755) CURIRUN, CURCALYR, CURITR, NERC, RCAP, IS, EPCCSUP(RCAP,IS)

!                             ADJUST CAPITAL COST FOR CPP ALLOWANCE SET-ASIDES, IF SPECIFIED
!
                              IF (CLOOP .EQ. 2)THEN
                                 OVRCST = OVRCST * (1.0 - CO2_STPSA(ICAP,CS))
                              END IF

                              CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(ICAP),UPPLYR(ICAP),CURIYR,YEAR,OVRCST,CPR,UPCAPD(1,ICAP),   &
                                 UPGNPD,EWGINT,DEBT_F,EWGROR,TXBOOK,FNBOOK)

                              if (IS.eq.1) WRITE(18,3211) CURIYR+UHBSYR, LOOPS, CS, NERC, ICAP, IOWN, UNYEAR, ECP_D_XPH, ECP_D_FPH, ECP_D_LCP, UPCLYR(ICAP), &
                                 UPPLYR(ICAP), YEAR, OVRCST, &
                                 EWGINT, EWGROE, DEBT_F, EWGROR, TXBOOK, FNBOOK, (CPR(ICP),ICP=1,ECP_D_LCP), RCAP, IS, EPCCSUP(RCAP,IS), 0, 0,  &
                                 (UPCAPD(ZYR,ICAP),UPGNPD(ZYR),ZYR=UPPLYR(ICAP)+YEAR-1,UPPLYR(ICAP)+YEAR+UPCLYR(ICAP)-2)
 3211                         FORMAT(1X,"EPINCST-I",13(":",I4),":",F7.2,4(":",F7.4),2(":",F15.1),10(":",F5.3),   &
                                 2(":",I4),":",F15.3 ,2(":",I4),8(":",F5.3))

                              PRATIO = TXBOOK / FNBOOK
                              CAPNNSTL = FNBOOK
 
                              CALL EPCNBLD(DBLE(DEBT_F),PRATIO,DBLE(UPNRPRM),DBLE(UPNIPRM),DBLE(UTROE),DBLE(UTINT),DBLE(UPTXRT), &
                                 UPTXLF(ICAP),UPNCLF(ICAP),UPNLLF(ICAP),CAPNUG)

                              if (IS .eq. 1) &
                                 WRITE(18,3212) CURIYR+UHBSYR,YEAR,NERC,ICAP,DEBT_F,PRATIO,UPNRPRM,UPNIPRM,UTROE,UTINT,UPTXRT, &
                                 UPTXLF(ICAP),UPNCLF(ICAP),UPNLLF(ICAP),CAPNUG
 3212                         FORMAT(1X,"EPCNBLD-I",4(":",I4),7(":",F7.4),3(":",I2),":",F8.4)

                              TRANS = (DBLE(EPCOVR(ICAP) + EPCTRM(ICAP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(ICAP))
                              OBJVAL = (( CAPNNSTL * CAPNUG + TRANS ) / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) ) * &
                                 PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)

!                             CHECK FOR SUBSIDY LIMIT FOR PTC

                              IF (UPSUBCAS(ICAP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 VALUE = OBJVAL + PV$FOM * EPFXSUP(RCAP,IS) + PV$TOM + PV$VOM * EPVRSUP(RCAP,IS) + PV$EXT - PV$GPS + PV$ARB
                              ELSE
                                 VALUE = OBJVAL + PV$FOM * EPFXSUP(RCAP,IS) + PV$TOM + PV$VOM * EPVRSUP(RCAP,IS) + PV$EXT - PV$SOM - PV$GPS + PV$ARB
                              END IF
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                              if(IS.eq.1) WRITE(18,3299)CURIRUN,CURIYR+UHBSYR,YEAR,NERC,ICAP,OBJVAL,TRANS,VALUE,(TAXDEPR(1,JYR),JYR=1,5),RCAP,IS,EPFXSUP(RCAP,IS),EPVRSUP(RCAP,IS)
 3299                         FORMAT(1x,"EPCNBLD2-I",5(":",I4),3(":",F8.2),5(":",F7.4),2(":",i5),2(":",F15.3))

                              IF (UF_DBG .GT. 0 .AND. MOD(YEAR,5) .EQ. 1) THEN
                                 WRITE(18,2312) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,NERC,IP,COLUMN,ROW,VALUE, OBJVAL,TRANS,EPCOVR(ICAP),EPCTRM(ICAP),UPGNPD(YEAR),EPCCRF(ICAP)
 2312                            FORMAT(1X,"EP$INT2",4(":",I4),2(":",A8),7(":",F12.3))
                              END IF
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,40')

                              T_CRF = CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2)
                              T_PWF = PWF(DBLE(EPDSCRT) - UPRSK(ICAP),OLYR)
                              IF (YEAR .EQ. 1) THEN
                                 WRITE(18,36) CURIYR+UHBSYR,OLYR+CURIYR+UHBSYR-1,NERC,UPBLDTYP(NERC),ICAP,IP,UPLNTCD(ICAP),COLUMN, &
                                    OVRCST,FNBOOK,CAPNUG,CAPNNSTL*CAPNUG,EWGROR,EPDSCRT,UPRSK(ICAP),        &
                                    EPIRFOM(RCAP),EPEXT(ICAP,MNPOLLUT + 1),EPCOVR(ICAP),EPCCRF(ICAP),EPCTRM(ICAP), &
                                    TRANS,OBJVAL,PV$FOM*EPFXSUP(RCAP,IS),PV$EXT,PV$SOM,VALUE,UPGNPD(YEAR),UPGNPD(OLYR+CURIYR-1),    &
                                    UPGNPD(1999-UHBSYR),OLYR,IFPH2,T_CRF,T_PWF,EWGROE,EWGINT,PV$ARB, PV$GPS, PV$TOM
   36                            FORMAT(1x,"BUILD_IN",6(":",I4),":",A2,":",A8,21(":",F10.3),2(":",I2),7(":",F8.3))
                              END IF

!                             COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR--NUGS

                              IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP .AND. CLOOP .EQ. 1 .AND. IS .EQ. 1) THEN
                                 CAPLEV = (( CAPNNSTL * CAPNUG ) / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)
                                 CAPLEV = CAPLEV / PVGNP
                                 EPLVCAP(ICAP,IOWN) = CAPLEV
                                 EPLVFCF(ICAP,IOWN) = CAPLEV / OVRCST
                                 EPLVTRN(ICAP) = (TRANS / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) * PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)) / PVGNP
                                 EPLVBCK(ICAP) = EPIRCCR(RCAP)
                              END IF

!                             FOR SET-ASIDES IN CPP MASS STANDARD FOR EXISTING ONLY, STORE LEVELIZED CAPCOST

                              IF (CLOOP .EQ. 2)THEN
                                 LEVSA  = (( CAPNNSTL * CAPNUG  ) / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) ) * &
                                    PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)
                                 CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
                                 LEVSA  = LEVSA  / PVGNP
                              ELSE
                                 LEVSA = 0.0
                              END IF
                           END IF    ! IF IOWN

!                          LOOP OVER REMAINING YEARS IN THE EXPLICIT PLANNING HORIZON

                           DO JYR = OLYR , UNXPH

!                             RESERVE MARGIN ROW

                              ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(JYR))
                              VALUE = DBLE(EPIRCCR(RCAP))
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
!                             DON'T ALLOW WIND BUILDS TO OPERATE IN LAST PTC YEAR IF LEAD TIME TOO SHORT
                              IF (ICAP .EQ. WIWN .AND. (CURIYR + UHBSYR + JYR - 1) .LE. (ECP_FYR + UPPLYR(ICAP)))VALUE = DBLE(0.0)
                              IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,41')

!                             BUILD LIMIT ROW

                              IF (JYR .EQ. OLYR) THEN
                                 IF (UPOVBDSW .GT. 0 .AND. UPOVBDSW .LE. 2) THEN
                                    ROW = 'R'//UPRGCD(NERC)//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':YYYYY:',UPYRCD(JYR))
                                 ELSE
                                    ROW = 'R'//'U'//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',':U:',':YYYYY:',UPYRCD(JYR))
                                 END IF
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,42')
                              END IF


!                             TOTAL BUILDS FREE ROW

                              IF (JYR .EQ. OLYR) THEN
                                 ROW = 'TOTBLD'//UPRGCD(NERC)//UPYRCD(JYR); call makmsk(ROW_mask,':TOTBLD:',UPRGCD(NERC),UPYRCD(JYR))
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,43')
                              END IF

!                             PUT INTO CAPACITY PORTFOLIO REQUIREMENT ROW, IF INCLUDED

                              IF (UPCAPCAS .GT. 0 .AND. JYR .EQ. OLYR) THEN
                                 ROW = 'GCPSXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':GCPSXXX:',UPYRCD(JYR))
                                 VALUE = PVCPS
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,44')
                              END IF

!                             PUT INTO NATIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                              IF (UPBLDREG(LCAP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(LCAP,MNUMNR) .LT. 999.0)THEN
                                 ROW = 'LU'//UPLNTCD(LCAP)//'BLDX'; call makmsk(ROW_mask,':LU:',UPLNTCD(LCAP),':BLDX:')
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,45')
                              END IF

!                             PUT INTO REGIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                              IF (UPBLDREG(LCAP,NERC) .GT. 0.0 .AND. UPBLDREG(LCAP,NERC) .LT. 999.0)THEN
                                 ROW = 'L'//UPRGCD(NERC)//UPLNTCD(LCAP)//'BLDX'; call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(LCAP),':BLDX:')
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,46')
                              END IF

!                             PUT INTO CONSTRAINT TO LIMIT SUBSIDIZED CAPACITY ADDITIONS, IF ANY

                              IF (UPSUBCAS(ICAP) .GT. 0 .AND. LOOPS .EQ. 2 .AND. JYR .EQ. OLYR) THEN
                               IF (LIMSUB(ICAP) .GT. 0.0 .AND. UPSUBLIM(ICAP) .LT. 999.0) THEN
                                 ROW = 'LU'//UPLNTCD(ICAP)//'SUBX'; call makmsk(ROW_mask,':LU:',UPLNTCD(ICAP),':SUBX:')
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,47')
                              END IF
                              END IF

!                             PURCHASED CAPACITY ROW

                              ROW = 'P'//UPRGCD(NERC)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':P:',UPRGCD(NERC),':XXXXX:',UPYRCD(JYR))
                              VALUE = 0.001 * OBJVAL
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,48')

!                             LOOP OVER VERTICAL LOAD SEGMENTS

                              GEN = DBLE(0.0)
                              DO VLS = 1 , EPNSTP(JYR)
                                 IGRP = EPLDGR(VLS,JYR)
                                 ISEG = EPLDSG(VLS,JYR)
                                 ISP = EPGECP(IGRP)
                                 ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                 VALUE = UPICFC(1,IP,IGRP,ISEG)
                                 GEN = GEN + UPICFC(1,IP,IGRP,ISEG) * EPWDTH(VLS,JYR)

!                                DON'T ALLOW WIND BUILDS TO OPERATE IN LAST PTC YEAR IF LEAD TIME TOO SHORT

                                 IF ((ICAP .EQ. WIWN .OR. ICAP .EQ. WIWL) .AND. (CURIYR + UHBSYR + JYR - 1) .LE. (ECP_FYR + UPPLYR(ICAP)))THEN
                                    VALUE = DBLE(0.0)
                                    GEN = DBLE(0.0)
                                 END IF
                                 IF (VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,49')

                                 IF (YEAR .EQ. 1 .AND. LOOPS .EQ. 1 .AND. IS .EQ. 1) & 
                                    WRITE(18,4913) CURIRUN, CURCALYR, YEAR, JYR, NERC, ISP, IGRP, ISEG, VLS, IP, ICAP, COLUMN, ROW, VALUE, EPICFC(IP,VLS), UPICFC(0,IP,IGRP,ISEG), &
                                       EPECFC(ICAP,JYR), EPIACF(IP), EP_SP_CAP_FAC(ISP,ICAP,JYR), UPICFC(1,IP,IGRP,ISEG), UPICFC(2,IP,IGRP,ISEG), EPWDTH(VLS,JYR), UPICFC(1,IP,IGRP,ISEG) * EPWDTH(VLS,JYR)

                                 VALUE_SR = 0.0
                                 IF (SR_INT(ICAP,NERC) .GT. 0.0) THEN
                                    VALUE_SR = - 1.0 * VALUE * SR_INT(ICAP,NERC)
                                 END IF
                                 
                                 !PT should be able to supply some SR
                                 IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .EQ. WIPT) THEN
                                    VALUE_SR = VALUE_SR + NET_PT_STORAGE_SR_EX(ISEG,IGRP,NERC,CURIYR) !NET_PT_STORAGE_SR_EX(JVLS,IGRP,NERC,CURIYR)
                                 END IF
                                 
                                 IF (VALUE .NE. 0.0 .AND. VALUE_SR .NE. 0.0) THEN
                                    ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                    CALL CVAL(COLUMN,ROW_SR,VALUE_SR,COLUMN_mask,ROW_SR_mask,'EP$INT,52')
                                 END IF

                              END DO

                              IF (GEN .LE. DBLE(0.0)) GEN = DBLE(0.0001)

!                             Include in Free Row for Generation

                                 ROW = 'F'//UPRGCD(NERC)//UPLNTCD(ICAP)//'GEN'//UPYRCD(JYR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(ICAP),':GEN:',UPYRCD(JYR))
                                 VALUE = GEN / 1000.0
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,53')

!                             INCLUDE IN RENEWABLE GENERATION BOUND ROW

                              IF (UPRNWSHRR(ICAP,NERC).NE.0.00) THEN
                                 ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(JYR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(JYR))
                                 VALUE = DBLE(UPRNWSHRR(ICAP,NERC))
                                 VALUE = VALUE * GEN / 1000.0
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,54')
                              END IF

!                             If National RPS and Regional and National Contributions Differ

                              IF (UPRNWBND(CURIYR + JYR - 1) .GT. 0.005 .AND. UPRNWSHR(ICAP) .GT. 0.0) THEN
                                 ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(JYR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(JYR))
                                 VALUE = DBLE(UPRNWSHR(ICAP))
                                 VALUE = VALUE * GEN / 1000.0
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,55')
                              END IF

!                             include wind and solar in maximum intermittent generation row

                              IF (UPINTSW .GE. 2) THEN
                                 IF (UCPINTIS(ICAP) .GT. 0) THEN
!
                                    ROW = 'L'//UPRGCD(NERC)//'XXINT'//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':XXINT:',UPYRCD(JYR))

!                                   DETERMINE GENERATION PER UNIT OF CAPACITY

                                    VALUE = GEN / 1000.0
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                    IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,56')
                                 END IF
                              END IF
!
!                             CO2 OUTPUT STANDARD
!
                              IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,JYR) .GT. 0.0 .AND. (CO2_PLTSW(ICAP) .GT. 0.0 .OR. CO2_INCSW(ICAP) .GT. 0.0))THEN
!                                INCLUDE IN ERC SUPPLY CURVE ROW, IF APPROPRIATE
                                 IF (CO2_ERCSW .EQ. 1 .AND. CO2_ERCNR(NERC) .EQ. 2 .AND. CO2_INCSW(ICAP) .GT. 0.0 .AND. CO2_STDTN(NERC) .LT. 2)THEN
                                    ROW_ERC = 'L'//URGNME(NERC)(6:7)//'ERCN'//UPYRCD(JYR); call makmsk(ROW_ERC_mask,':L:',URGNME(NERC)(6:7),':ERCN:',UPYRCD(JYR))
                                    CALL CVAL(COLUMN,ROW_ERC,-GEN*DBLE(0.001),COLUMN_mask,ROW_ERC_mask,'EP$INT,59')
                                 ELSE
                                    CO2_LBMWH = DBLE(0.0)
                                    ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(JYR),':!NERC:')
                                    VAL_STD_CO2 = GEN * DBLE(0.001) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,JYR))
                                    IF (CO2_PLTSW(ICAP) .GT. 0.0)THEN
                                       VAL_STD_CO2 = VAL_STD_CO2 * DBLE(CO2_PLTSW(ICAP)) * 0.001
                                    END IF
                                    IF (CO2_INCSW(ICAP) .GT. 0.0)THEN
                                       VAL_STD_CO2 = VAL_STD_CO2 * DBLE(CO2_INCSW(ICAP)) * 0.001
                                    END IF
                                    IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                                    IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                    IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$INT,60')
                                 END IF
                              END IF
!
!                             FOR SET-ASIDES IN MASS-STANDARD FOR EXISTING, PUT "SUBSIDY" INTO LIMITING ROW
!
                              IF (CLOOP .EQ. 2 .AND. LEVSA .GT. DBLE(0.0) .AND. CO2_STPSA(ICAP,CS) .GT. 0.0)THEN
                                 ROW = 'L'//UPRGCD(NERC)//'SA'//'XXX'//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':SA:',':XXX:',UPYRCD(JYR))
                                 VALUE =  LEVSA / DBLE(1.0 - CO2_STPSA(ICAP,CS)) - LEVSA
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,61')
                              END IF

!                             GRID RESILIENCE STANDARD, IF APPROPRIATE

                              IF (GRD_RATS(ICAP,NERC) .GE. 0.0)THEN
                                 ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(JYR))
                                 VAL_STD_GRD = GEN * DBLE(0.001) * DBLE(GRD_RATS(ICAP, NERC) - GRD_NRYR(NERC,JYR))
!                                VAL_STD_GRD = VAL_STD_GRD * 0.001
                                 IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = 0.0
                                 IF (VAL_STD_GRD .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$INT,62')
                              END IF
                           END DO ! JYR  Intra-regional Builds

!                          REVISE INTER-REGIONAL BUILD VECTORS IF ALLOWED

                           IF (UPETTSW(ICAP) .EQ. 1 .AND. CLOOP .EQ. 1) THEN
                              K = 1
                              DO WHILE (EPTIRGN(NERC,K) .GT. 0)
                                 IMPORT = EPTIRGN(NERC,K)

                                 RPS_RGN_IMP = MAP_NERC_TO_RPS_RGN(IMPORT)

                                 IF (EPTCST(NERC,K) .LT. 9999.0 .AND. EPTCST(NERC,K) .GT. 0.) THEN

                                    IF (LOOPS .EQ. 1) THEN
                                       COLUMN = 'I'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPOWNCD(IOWN)//UPRGCD(IMPORT)//SSTEP(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':I:',UPRGCD(NERC),UPLNTCD(ICAP),UPOWNCD(IOWN),UPRGCD(IMPORT),SSTEP(IS),UPYRCD(YEAR),':!IMP:')
                                    ELSE
                                       COLUMN = 'I'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPOWNCD(IOWN)//UPRGCD(IMPORT)//SUB_CODE(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':I:',UPRGCD(NERC),UPLNTCD(ICAP),UPOWNCD(IOWN),UPRGCD(IMPORT),SUB_CODE(IS),UPYRCD(YEAR),':!SUBIMP:')
                                    END IF

!                                   IF TECHNOLOGY IS AVAILABLE THEN REVISE/CREATE COEFFICIENTS

                                    IF (UPAVLYR(ICAP) .LE. FULLYR .AND. UPINTSW .EQ. 1) THEN

!                                      BOUND COLUMN TO PERCENT OF PEAK REQUIREMENT TO CONTROL PENETRATION RATE

                                       UVALUE = DBLE(EPPEAK(YEAR) * UPIBND(IP))
                                       CALL CBND(UPBND,COLUMN,DBLE(0.0),UVALUE,COLUMN_mask,'EP$INT,63')
                                    END IF

!                                   PUT INTERSECTION INTO TOTAL INTERMITTENT BUILD ROW.

!                                   ELASTICITY APPROACH USES REGIONAL AND NATIONAL CONSTRAINTS

                                    IF (ESTSWTCH(ICAP) .GT. 0) THEN
                                       ROW = 'L'//UPRGCD(NERC)//UPLNTCD(BCAP)//'INT'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(BCAP),':INT:',UPYRCD(YEAR))
                                       CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$INT,64')

!                                      TECHNOLOGY SUPPLY CURVE ROW

                                       ROW = 'L'//'U'//UPLNTCD(KCAP)//'IN'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',':U:',UPLNTCD(ICAP),'IN',SSTEP(IS),UPYRCD(YEAR)) ! dispatch type element IN
                                       CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$INT,65')

!                                      P/Q SUPPLY CURVE APPROACH USES REGIONAL CONSTRAINTS ACROSS YEARS

                                    ELSEIF (ESTSWTCH(ICAP) .LT. 0) THEN
                                       ROW = 'L'//UPRGCD(NERC)//UPLNTCD(ICAP)//'IN'//SSTEP(IS)//'Y'; call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(ICAP),':IN:',SSTEP(IS),':Y:')
                                       CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$INT,66')
                                    END IF

!                                   PUT INTO NATIONAL ANNUAL BUILD LIMIT ROW
!
                                    ROW = 'LU'//UPLNTCD(ICAP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',UPLNTCD(ICAP),':ANN:',UPYRCD(YEAR))
                                    VALUE = DBLE(1.0)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,67')
!

!                                   REVISE OBJECTIVE FUNCTION COEFFICIENT

                                    IF (IOWN .EQ. 1) THEN  ! Utility Interreggional Builds
                                       ROW = UPOBJ ; ROW_mask=UPOBJ
!                                      TRANS = EPTCST(NERC,K) * UPGNPD(OLYR+CURIYR-1) * EPTCRF(NERC,K)         replace FCF with same value used in other transmission builds
                                       TRANS = EPTCST(NERC,K) * UPGNPD(OLYR+CURIYR-1) * EPCCRF(ICAP)
                                       OBJVAL = (( CAPUNSTL * CAPUTIL + TRANS) / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)

!                                      CHECK FOR SUBSIDY LIMIT FOR PTC -- EXCLUDE FOR UNSUBSIDIZED CAPACITY

                                       IF (UPSUBCAS(ICAP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                          VALUE = OBJVAL + PV$FOM * EPFXSUP(RCAP,IS) + PV$TOM + PV$VOM * EPVRSUP(RCAP,IS) + PV$EXT - PV$GPS + PV$ARB
                                       ELSE
                                          VALUE = OBJVAL + PV$FOM * EPFXSUP(RCAP,IS) + PV$TOM + PV$VOM * EPVRSUP(RCAP,IS) + PV$EXT - PV$SOM - PV$GPS + PV$ARB
                                       END IF
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,68')
                                    ELSE                   ! EWG Interreggional Builds
                                       ROW = UPOBJ ; ROW_mask=UPOBJ
!                                      TRANS = EPTCST(NERC,K) * UPGNPD(OLYR+CURIYR-1) * EPTCRF(NERC,K)         replace FCF with same value used in other transmission builds
                                       TRANS = EPTCST(NERC,K) * UPGNPD(OLYR+CURIYR-1) * EPCCRF(ICAP)   
                                       OBJVAL = (( CAPNNSTL * CAPNUG + TRANS) / CRF(DBLE(EPDSCRT - UPRSK(ICAP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(ICAP)),OLYR)

!                                      CHECK FOR SUBSIDY LIMIT FOR PTC -- EXCLUDE FOR UNSUBSIDIZED CAPACITY

                                       IF (UPSUBCAS(ICAP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                          VALUE = OBJVAL + PV$FOM * EPFXSUP(RCAP,IS) + PV$TOM + PV$VOM * EPVRSUP(RCAP,IS) + PV$EXT - PV$GPS + PV$ARB
                                       ELSE
                                          VALUE = OBJVAL + PV$FOM * EPFXSUP(RCAP,IS) + PV$TOM + PV$VOM * EPVRSUP(RCAP,IS) + PV$EXT - PV$SOM - PV$GPS + PV$ARB
                                       END IF
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,69')
                                    END IF

!                                   LOOP OVER REMAINING YEARS IN THE EXPLICIT PLANNING HORIZON

                                    DO JYR = OLYR , UNXPH

!                                      RESERVE MARGIN ROW

                                       ROW = 'R'//UPRGCD(IMPORT)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(IMPORT),':XXXXX:',UPYRCD(JYR))
                                       VALUE = DBLE(EPIRCCR(RCAP) * (1.0 - EPTLOSS(NERC,IMPORT)))
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,70')

!                                      BUILD LIMIT ROW

                                       IF (JYR .EQ. OLYR) THEN
                                          IF (UPOVBDSW .GT. 0 .AND. UPOVBDSW .LE. 2) THEN
                                             ROW = 'R'//UPRGCD(IMPORT)//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(IMPORT),':YYYYY:',UPYRCD(JYR))
                                          ELSE
                                             ROW = 'R'//'U'//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',':U:',':YYYYY:',UPYRCD(JYR))
                                          END IF
                                          VALUE = DBLE(1.0)
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,71')
                                       END IF

!                                      TOTAL BUILDS FREE ROW

                                       IF (JYR .EQ. OLYR) THEN
                                          ROW = 'TOTBLD'//UPRGCD(IMPORT)//UPYRCD(JYR); call makmsk(ROW_mask,':TOTBLD:',UPRGCD(IMPORT),UPYRCD(JYR))
                                          VALUE = DBLE(1.0)
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,72')
                                       END IF

!                                      PUT INTO CAPACITY PORTFOLIO REQUIREMENT ROW, IF INCLUDED

                                       IF (UPCAPCAS .GT. 0 .AND. JYR .EQ. OLYR) THEN
                                          ROW = 'GCPSXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':GCPSXXX:',UPYRCD(JYR))
                                          VALUE = PVCPS
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,73')
                                       END IF

!                                      PUT INTO NATIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                                       IF (UPBLDREG(LCAP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(LCAP,MNUMNR) .LT. 999.0)THEN
                                          ROW = 'LU'//UPLNTCD(LCAP)//'BLDX'; call makmsk(ROW_mask,':LU:',UPLNTCD(LCAP),':BLDX:')
                                          VALUE = DBLE(1.0)
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,74')
                                       END IF

!                                      PUT INTO REGIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                                       IF (UPBLDREG(LCAP,NERC) .GT. 0.0 .AND. UPBLDREG(LCAP,NERC) .LT. 999.0)THEN
                                          ROW = 'L'//UPRGCD(NERC)//UPLNTCD(LCAP)//'BLDX'; call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(LCAP),':BLDX:')
                                          VALUE = DBLE(1.0)
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,75')
                                       END IF

!                                      PUT INTO CONSTRAINT TO LIMIT SUBSIDIZED CAPACITY ADDITIONS, IF ANY

                                       IF (UPSUBCAS(ICAP) .GT. 0 .AND. LOOPS .EQ. 2 .AND. JYR .EQ. OLYR) THEN
                                        IF (LIMSUB(ICAP) .GT. 0.0 .AND. UPSUBLIM(ICAP) .LT. 999.0) THEN
                                          ROW = 'LU'//UPLNTCD(ICAP)//'SUBX'; call makmsk(ROW_mask,':LU:',UPLNTCD(ICAP),':SUBX:')
                                          VALUE = DBLE(1.0)
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,76')
                                       END IF
                                       END IF

!                                      PURCHASED CAPACITY ROW

                                       ROW = 'P'//UPRGCD(IMPORT)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':P:',UPRGCD(IMPORT),':XXXXX:',UPYRCD(JYR))
                                       VALUE = 0.001 * OBJVAL
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,77')

!                                      LOOP OVER VERTICAL LOAD SEGMENTS

                                       GEN = DBLE(0.0)
                                       DO VLS = 1 , EPNSTP(JYR)
                                          IGRP = EPLDGR(VLS,JYR)
                                          ISEG = EPLDSG(VLS,JYR)
                                          ISP = EPGECP(IGRP)
                                          ROW = 'L'//UPRGCD(IMPORT)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(IMPORT),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                          VALUE = UPICFC(1,IP,IGRP,ISEG)
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                          IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,78')

                                          GEN = GEN + UPICFC(1,IP,IGRP,ISEG) * EPWDTH(VLS,JYR)

                                          IF (SR_INT(ICAP,NERC) .GT. 0.0) THEN
                                             ROW_SR = 'R'//UPRGCD(IMPORT)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_SR_mask,':R:',UPRGCD(IMPORT),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                             VALUE_SR = - 1.0 * VALUE * SR_INT(ICAP,NERC)
                                             IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW_SR,VALUE_SR,COLUMN_mask,ROW_SR_mask,'EP$INT,81')
                                          END IF

                                       END DO
                                       IF (GEN .LE. DBLE(0.0)) GEN = DBLE(0.0001)

!                                      Include in Free Row for Generation

                                          ROW = 'F'//UPRGCD(IMPORT)//UPLNTCD(ICAP)//'GEN'//UPYRCD(JYR); call makmsk(ROW_mask,':F:',UPRGCD(IMPORT),UPLNTCD(ICAP),':GEN:',UPYRCD(JYR))
                                          VALUE = GEN / 1000.0
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                          IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,82')

!                                      INCLUDE IN RENEWABLE GENERATION BOUND ROW

                                       IF (UPRNWSHRR(ICAP,IMPORT) .NE. 0.00) THEN
                                          ROW = 'G'//UPRGCD(RPS_RGN_IMP)//'RNWXX'//UPYRCD(JYR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN_IMP),':RNWXX:',UPYRCD(JYR))
                                          VALUE = DBLE(UPRNWSHRR(ICAP,IMPORT))
                                          VALUE = VALUE * GEN / 1000.0
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                          IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,83')
                                       END IF

!                                      If National RPS and Regional and National Contributions Differ

                                       IF (UPRNWBND(CURIYR + JYR - 1) .GT. 0.005 .AND. UPRNWSHR(ICAP) .GT. 0.0) THEN
                                          ROW = 'GURNWX'//UPRGCD(IMPORT)//UPYRCD(JYR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(IMPORT),UPYRCD(JYR))
                                          VALUE = DBLE(UPRNWSHR(ICAP))
                                          VALUE = VALUE * GEN / 1000.0
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                          IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,84')
                                       END IF

!                                      include wind and solar in maximum intermittent generation row

                                       IF (UPINTSW .GE. 2) THEN
                                          IF (UCPINTIS(ICAP) .GT. 0) THEN

                                             ROW = 'L'//UPRGCD(IMPORT)//'XXINT'//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(IMPORT),':XXINT:',UPYRCD(JYR))

!                                            DETERMINE GENERATION PER UNIT OF CAPACITY

                                             VALUE = GEN / 1000.0
                                             IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                             IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                             IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$INT,85')
                                          END IF
                                       END IF
!
!                                      CO2 OUTPUT STANDARD
!
                                       IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,JYR) .GT. 0.0 .AND. (CO2_PLTSW(ICAP) .GT. 0.0 .OR. CO2_INCSW(ICAP) .GT. 0.0))THEN
!                                         INCLUDE IN ERC SUPPLY CURVE ROW, IF APPROPRIATE
                                          IF (CO2_ERCSW .EQ. 1 .AND. CO2_ERCNR(IMPORT) .EQ. 2 .AND. CO2_INCSW(ICAP) .GT. 0.0 .AND. CO2_STDTN(IMPORT) .LT. 2)THEN
                                             ROW_ERC = 'L'//URGNME(IMPORT)(6:7)//'ERCN'//UPYRCD(JYR); call makmsk(ROW_ERC_mask,':L:',URGNME(IMPORT)(6:7),':ERCN:',UPYRCD(JYR))
                                             CALL CVAL(COLUMN,ROW_ERC,-GEN*DBLE(0.001),COLUMN_mask,ROW_ERC_mask,'EP$INT,88')
                                          ELSE
                                             CO2_LBMWH = DBLE(0.0)
                                             ROW = 'ERCO2'//URGNME(IMPORT)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':ERCO2:',URGNME(IMPORT)(6:7),UPYRCD(JYR),':!NERC:')
                                             VAL_STD_CO2 = GEN * DBLE(0.001) * DBLE(CO2_LBMWH - CO2_NRYR(IMPORT,JYR))
                                             IF (CO2_PLTSW(ICAP) .GT. 0.0)THEN
                                                VAL_STD_CO2 = VAL_STD_CO2 * DBLE(CO2_PLTSW(ICAP)) * 0.001
                                             END IF
                                             IF (CO2_INCSW(ICAP) .GT. 0.0)THEN
                                                VAL_STD_CO2 = VAL_STD_CO2 * DBLE(CO2_INCSW(ICAP)) * 0.001
                                             END IF
                                             IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                                             IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                             IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$INT,89')
                                          END IF
                                       END IF

!                                      GRID RESILIENCE STANDARD, IF APPROPRIATE

                                       IF (GRD_RATS(ICAP,IMPORT) .GE. 0.0)THEN
                                          ROW = 'GRGRD'//URGNME(IMPORT)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':GRGRD:',URGNME(IMPORT)(6:7),UPYRCD(JYR))
                                          VAL_STD_GRD = GEN * DBLE(0.001) * DBLE(GRD_RATS(ICAP, IMPORT) - GRD_NRYR(IMPORT,YEAR))
!                                         VAL_STD_GRD = VAL_STD_GRD * 0.001
                                          IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = 0.0
                                          IF (VAL_STD_GRD .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$INT,90')
                                       END IF
                                    END DO ! JYR - Inter-regional Builds
                                 END IF    ! (EPTCST(K) .LT. 9999.0) THEN
                                 K = K + 1
                              END DO       ! WHILE (EPTIRGN(K) .GT. 0)
                           END IF          ! (UPETTSW(ICAP) .EQ. 1)
                        END IF             ! (UPAVLYR(ICAP) .LE. FULLYR .AND. (UPBLDREG(ICAP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(ICAP,NERC) .GT. 0.0))
                       END DO              ! CS (CPP SA STEPS)
                      END DO               ! CPP LOOP (CLOOP)
                     END IF                ! (OLYR .LE. UNXPH .AND. EPBNDTYP(RCAP) .NE. 'Z' .AND. UPVTYP(ICAP) .EQ. 1)
                  END DO                   ! SUPPLY CURVE LOOP (IS)
               END DO                      ! SUBSIDY LOOP (LOOPS)
            END IF                         ! (IOWN .EQ. UPBLDTYP(NERC)
         END DO                            ! IOWN
      END DO                               ! IP

      RETURN
      END

!     EP$BRNW REVISES BUILD STRUCTURE FOR RENEWABLE CAPACITY TYPES.

      SUBROUTINE EP$BRNW(NERC,YEAR)
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'entcntl'
      include 'enewtech'
      include 'bildin'
      include 'wrenew'
      include 'dispin'
      include 'dispett'
      include 'dispuse'
      include 'bildout'
      include 'uefdout'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'
      include 'dsmsectr'
      include 'postpr'
      include 'cdsparms'
      include 'uso2grp'
      include 'eusprc'
      include 'edbdef'
      include 'ecp_nuc'
      include 'emm_aimms'

      INTEGER*4 LEP

      COMMON /GPSECP/ GPSSUB
      REAL*8 GPSSUB(ECP_D_CAP,ECP_D_FPH)

      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)
!
      REAL*8 VALUE,OBJVAL,TST,VALUE_MR,TST_MR
      REAL*8 CRF,PWF,PVV
      REAL*8 OVRCST,TXBOOK,FNBOOK,URATIO,CAPUNSTL,CAPUTIL,CAPNUG
      REAL*8 PRATIO,TRANS,CAPNNSTL
      REAL*4 DEBT_F,UTINT,UTROE,EWGROE,EWGINT,EWGROR,UTROR
      INTEGER*4 ISEG,YEAR,NERC,IP,IFPH2,OLYR,K,IMPORT,JYR,KYR,IECP,FULLYR
      INTEGER*4 VLS,IOWN,IYR,IS,IRNW,IGRP2
      REAL*8 DIGITS2
      REAL*8 PV$FOM,PV$TOM,FOM(ECP_D_FPH),TOM(ECP_D_FPH),PV$VOM,VOM(ECP_D_FPH)
      REAL*8 PV$SOM,SOM(ECP_D_FPH)
      REAL*8 PV$GPS,GPS(ECP_D_FPH)
      REAL*8 PV$FOML,FOML(ECP_D_FPH)
	  REAL*8 PV$TOML,TOML(ECP_D_FPH)
      REAL*8 PV$EXT,EXTR(ECP_D_FPH)
      REAL*8 PV$EXTL,EXTL(ECP_D_FPH)
      REAL*8 PV$SOML,SOML(ECP_D_FPH)
      REAL*8 LEVFUEL,PV$FUEL,PV$VOML,VOML(ECP_D_FPH)
      REAL*8 PVGNP,PVGNPR,CAPLEV
      REAL*8 DSCRT,DSCRT_WO
      REAL*8 SHR_FLRG(MAXNFR),TOT_FLRG
      REAL*8 GEN,HYDFAC
      REAL*4 CPR(ECP_D_LCP)
      REAL*8 ITCADJ
      REAL*8 ONE(ECP_D_FPH),CPS(ECP_D_FPH)
      REAL*8 PVONE,PVCPS
      REAL*8 CSTDTADJ,CSTEQADJ,SHRDTADJ
      REAL*8 ANNRTE,ANNADJ,ANN(ECP_D_FPH),AN1(ECP_D_FPH)
      REAL*8 CO2_LBMWH,VAL_STD_CO2
      REAL*8 VAL_STD_GRD
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*8 TMP_ECF
      INTEGER IGRP,JGRP
      INTEGER ISP
      INTEGER GSYR1,GSYRL
      INTEGER*4 CRG
      INTEGER*4 FLRG,FRG,NXT_FLRG(NDREG),N_FLRG
      INTEGER*4 NUMLOOP,LOOPS
      INTEGER*4 YR1,YR2
      CHARACTER*16 ROW,ROW_ERC,COLUMN,ROW_SR,ROW_HY,COLUMN_MR,ROW_MR,ROW_MAX_GEN
      CHARACTER*12 FROM_LABEL
      CHARACTER*1 SSTEP(ECP_D_FPP)
      CHARACTER*1 SUB_CODE(ECP_D_DGS)

      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN, RPS_RGN_IMP

      ecpsub='EP$BRNW'

      FROM_LABEL = "EP_BRNW"
!
!     STORE 111d SWITCH FOR MASS OR RATE STANDARDS FOR REGION
!
      DO IECP = 1 , ECP_D_CAP
         CO2_PLTSW(IECP) = CO2_PLTRG(IECP,NERC)
      END DO

      DO RPS_RGN = 1 , MNUMNR
         MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
      END DO

      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN
         MAP_NERC_TO_RPS_RGN(8) = 9                 
      END IF

      RPS_RGN = MAP_NERC_TO_RPS_RGN(NERC)

!     CODES FOR SUPPLY CURVE STEPS FOR LIMITED SUBSIDIZED CAPACITY

      SUB_CODE(1) ='S'
      SUB_CODE(2) ='T'
      SUB_CODE(3) ='U'
      SUB_CODE(4) ='V'
      SUB_CODE(5) ='W'
      SUB_CODE(6) ='X'

!     CODES FOR TECH SUPPLY CURVE STEPS

      DO IS = 1 , ECP_D_FPP
         SSTEP(IS) = UPRGCD(IS)
      END DO

!     CALCULATE ANNUAL HYDRO CAPACITY FACTOR ADJUSTMENT

      HYDFAC = 1.0

!     LOOP ON CAPACITY TYPE

      DO IP = 1 , ECP_D_RNW
         IECP = UCPRNWI(IP)
         IRNW = UIRRNWI(IP)
         GSYR1 = UPGSY1(IECP) - UHBSYR
         GSYRL = UPGSYL(IECP) - UHBSYR
         IF (IECP .GT. 0) THEN

            CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

            WRITE(18,3377) CURCALYR, CURIYR+YEAR+1988, NERC, IP, IECP, IRNW, WIP2, OLYR, UNXPH, UPNUGSW(IECP), UPVTYP(IECP), UPAVLYR(IECP), &
               EPIROVR(IRNW), UPBLDREG(IECP,MNUMNR), UPBLDREG(IECP,NERC), EPECAP(0,IECP,YEAR), EPECAP_MR(0,IECP,YEAR), MUSTRUN(IECP,NERC), AVG_HTRT_MR(IECP), &
               (EPGCAP(0,IGRP,IECP),IGRP=1,ECP_D_RET)
 3377       FORMAT(1X,"EP_BRNW",12(":",I4),7(":",F15.6),<ECP_D_RET>(":",F15.6))

            DSCRT = DBLE(EPDSCRT - UPRSK(IECP))
            DSCRT_WO = DBLE(EPDSCRT)

            OLYR = YEAR + UPPLYR(IECP)
            IF (OLYR .LT. UNXPH) THEN
               FULLYR = OLYR + CURIYR + UHBSYR - 1
            ELSE
               FULLYR = MIN(UNYEAR + UHBSYR , UNFPH + CURIYR + UHBSYR - 1)
            END IF

!           MAKE SURE THE CAPACITY FACTOR DOESN'T DISAPPEAR

            EPRCFC(IP) = MAX( EPRCFC(IP) , 0.01)
            TMP_ECF =  MAX( EPECFC(IECP,1) , 0.01)
            DO JYR = 1, ECP_D_LCP
               CPR(JYR) = UPCPRO(IECP,JYR)
            END DO

!           DETERMINE PRESENT VALUE OF PRODUCTION TAX CREDIT SUBSIDIES

            IF ((UPGSUB(IECP) .GT. 0.0 .AND. (CURIYR + OLYR - 1) .GE. GSYR1 .AND. (CURIYR + OLYR - 1) .LE. GSYRL) .OR.  &
                (UPGSUBPT(IECP) .GT. 0 .AND. UPGSUBYR(IECP,min(MNUMYR , CURIYR + OLYR -1)) .GT. 0.0)) THEN
               DO JYR = 1 , UPGSYR(IECP)
                  IF (UPGSUBPT(IECP) .LE. 0) THEN
                   SOM(JYR) =(UPGSUB(IECP) * 8.76 * EPRCFC(IP))
                  ELSE
                     SOM(JYR) =(UPGSUBYR(IECP,min(MNUMYR , CURIYR + OLYR - 1)) * 8.76 * EPRCFC(IP))
                  END IF

!                 CHECK IF PTC IS CAPPED

                  IF (UPGSMX(IECP) .GT. 0)SOM(JYR) = MIN(SOM(JYR),UPGSMX(IECP))

!                 IF PTC IS REAL, THEN APPLY DEFLATOR

                  IF (UPGSTY(IECP) .LE. 0)SOM(JYR) = SOM(JYR) * UPGNPD(JYR + CURIYR + OLYR - 2)

!                 ADJUST FOR TAX BENEFIT

                  SOM(JYR) = SOM(JYR) / (1.0 - UPTXRT)
                  IF (YEAR .EQ. 1) SOML(JYR) = SOM(JYR) / (8.76 * EPRCFC(IP))
               END DO
               PV$SOM = PVV(SOM,ECP_D_FPH,UPGSYR(IECP),DSCRT_WO) * PWF(DSCRT_WO,OLYR - 1)
               IF (YEAR .EQ. 1) PV$SOML = PVV(SOML,ECP_D_FPH,UPGSYR(IECP),DSCRT_WO) * PWF(DSCRT_WO,OLYR - 1)
            ELSE
               PV$SOM = 0.0
               IF (YEAR .EQ. 1) PV$SOML = 0.0
            END IF

!           CHECK FOR TIME-DEPENDENT DEBT/EQUITY SUBSIDIES

            CALL EP$SUBFIN(IECP,OLYR,CSTDTADJ,CSTEQADJ,SHRDTADJ)

!           DETERMINE PRESENT VALUE OF FIXED O&M AT OLYR ; include externality costs, if any

            IFPH2 = UNFPH - OLYR + 1
            DO  JYR = 1 , IFPH2
               FOM(JYR) = EPIRFOM(IRNW) * UPGNPD(JYR + CURIYR + OLYR - 2)
               TOM(JYR) = EPCFOM(IECP) * UPGNPD(JYR + CURIYR + OLYR - 2)
               VOM(JYR) = (EPIRVOM (IRNW) * 8.76 * EPRCFC(IP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               GPS(JYR) = (GPSSUB(IECP,JYR + OLYR - 1) * 8.76 * EPRCFC(IP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               IF (YEAR .EQ. 1) THEN
                  FOML(JYR) = EPIRFOM(IRNW) * UPGNPD(JYR + CURIYR + OLYR - 2)
                  VOML(JYR) = EPIRVOM(IRNW) * UPGNPD(JYR + CURIYR + OLYR - 2)
				  TOML(JYR) = EPCFOM(IECP) * UPGNPD(JYR + CURIYR + OLYR - 2)
               END IF
               EXTR(JYR) = DBLE(EPEXT(IECP,MNPOLLUT + 1) * 8.76 * EPRCFC(IP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               IF (YEAR .EQ. 1) EXTL(JYR) = DBLE(EPEXT(IECP,MNPOLLUT + 1)) * UPGNPD(JYR + CURIYR + OLYR - 2)
            END DO
            PV$FOM = PVV(FOM,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,OLYR - 1)
            PV$TOM = PVV(TOM,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,OLYR - 1)
            PV$VOM = PVV(VOM,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,OLYR - 1)
            PV$GPS = PVV(GPS,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,OLYR - 1)
            PV$EXT = PVV(EXTR,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,OLYR - 1)

!           COMPUTE LEVELIZED GENERATION FIXED O&M AND EXTERNALITY COSTS

            IF (YEAR .EQ. 1) THEN
               PV$FOML = PVV(FOML,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,OLYR-1)
			   PV$TOML = PVV(TOML,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,OLYR-1)
               PV$EXTL = PVV(EXTL,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,OLYR-1)
               CALL EP$LGNP(OLYR,IFPH2,EPDSCRT - UPRSK(IECP),PVGNPR)
               CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
               EPLVFOM(IECP) = (PV$FOML + PV$TOML) / PVGNP
               EPLVEXT(IECP) = (PV$EXTL - PV$SOML) / PVGNP

!              CALL SUBROUTINE TO DETERMINE LEVELIZED FUEL COSTS

               IF (IECP .EQ. WIHY) THEN
                  PV$VOML = PVV(VOML,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,OLYR-1)
                  EPLVVOM(IECP) = PV$VOML / PVGNP
                  EPLVFLC(IECP) = 0.0
               ENDIF
            END IF

            IF ((EPECAP(0,IECP,YEAR) .GT. DBLE(0.0)) .OR. (UPVTYP(IECP) .EQ. 1 .AND. UPBLDREG(IECP,NERC) .GT. 0.0)) THEN

!              REVISE BOUND ON EXISTING CAPACITY VECTORS

               IF (USW_ERET .EQ. 1 .AND. YEAR .GT. UPRTLT .AND. RET_GRP(IECP) .GT. 0) THEN
                  DO IGRP = 1 , ECP_D_RET
                     COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'XX'//UPYRCD(IGRP)//'0'; call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XX:',UPYRCD(IGRP),':0:',':!RNW:')

                     IF (IECP .NE. WIHY) THEN

!                       Adjust Free Row for Generation to Account for Difference between Existing and New Capacity Factors

                        ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':GEN:',UPYRCD(YEAR))
                        VALUE = DBLE((EPRCFC(IP) - TMP_ECF) * 8.76)
                        VALUE = - MAX( VALUE , 0.0)
                        IF (VALUE .LT. -ECP_MIN) THEN
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,1')
                        END IF

!                       ADJUST RPS GENERATION FOR DIFFERENCE BETWEEN CAPACITY FACTORS FOR EXISTING AND NEW PLANTS

                        IF (UPRNWSHRR(IECP,NERC) .GT. 0.0)THEN
                           ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(YEAR))
                           VALUE = DBLE((EPRCFC(IP) - TMP_ECF) * 8.76)
                           VALUE = VALUE * DBLE(UPRNWSHRR(IECP,NERC))
                           VALUE = - MAX( VALUE , 0.0)
                           IF (VALUE .LT. -ECP_MIN) THEN
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,2')
                           END IF
                        END IF

!                       If National RPS and Regional and National Contributions Differ

                        IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWSHR(IECP) .GT. 0.0) THEN
                           ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))
                           VALUE = DBLE((EPRCFC(IP) - TMP_ECF) * 8.76)
                           VALUE = VALUE * DBLE(UPRNWSHR(IECP))
                           VALUE = - MAX( VALUE , 0.0)
                           IF (VALUE .LT. -ECP_MIN) THEN
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,3')
                           END IF
                        END IF
!
!                       CO2 OUTPUT STANDARD
!
                        IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,YEAR) .GT. 0.0 .AND. CO2_PLTSW(IECP) .GT. 0.0)THEN
                           IF (IECP .NE. WIWD .OR. IECP .NE. WIBI)THEN
                              CO2_LBMWH = DBLE(0.0)
                           ELSE
                              CO2_LBMWH = CO2_EMSWD * AVG_HTRT(IECP) / 1000.0
                           END IF
                           ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
                           VAL_STD_CO2 = DBLE(TMP_ECF - EPRCFC(IP)) * DBLE(8.760) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * DBLE(CO2_PLTSW(IECP))
                           VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                           IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                           IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                           IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$BRNW,5')
                        END IF

!                       GRID RESILIENCE STANDARD, IF APPROPRIATE

                        IF (GRD_RATS(IECP,NERC) .GE. 0.0)THEN
                           ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(YEAR))
                           VAL_STD_GRD = DBLE(TMP_ECF - EPRCFC(IP)) * DBLE(8.760) * DBLE(GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR))
!                          VAL_STD_GRD = VAL_STD_GRD * 0.001
                           IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                           IF (VAL_STD_GRD .NE. DBLE(0.0))CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$BRNW,6')
                        END IF
                     END IF

                     IF (YEAR .EQ. UPRTLT + 1) THEN
                        VALUE = DBLE(EPGCAP(0,IGRP,IECP)) * DBLE(0.001)
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$BRNW,7')

!                       OBJECTIVE FUNCTION

                        ROW = UPOBJ ; ROW_mask=UPOBJ
                        IFPH2 = UNFPH
                        DO JYR = 1 , IFPH2
                           FOM(JYR) = EPGFOM(IGRP,IECP) * UPGNPD(CURIYR + JYR - 1)
!                          YEAR 1 FOM IS A SUNK COST SO SET = 0
                           IF (JYR .EQ. 1)FOM(JYR) = 0.0    
                        END DO
                        VALUE = PVV(FOM,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,YEAR-1) - DBLE(IGRP - 1)

!                       REDUCE BY HURDLE RATE

                        VALUE = VALUE * DBLE(1.0 - UPRETFHU)
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        VALUE = MAX( VALUE , 0.0)
                        IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,8')
                     END IF

!                    CAPACITY BALANCE ROW

                     IF (IECP .EQ. WIWD .OR. IECP .EQ. WIBI) THEN
                        TOT_FLRG = 0.0
                        DO FRG = 1 , UNFRGN
                           CRG = EPCLMP(FRG)
                           IF (FRG_EMM_MAP(NERC,FRG) .GT. 0.0) THEN
                              SHR_FLRG(FRG) = EPECAP(FRG,IECP,YEAR)
                              IF (YEAR .GT. UPRTLT) THEN
                                 DO JGRP = 1 , RET_GRP(IECP)
                                    SHR_FLRG(FRG) = SHR_FLRG(FRG) - EPGCAP(FRG,JGRP,IECP)
                                 END DO
                              END IF
                              SHR_FLRG(FRG) = MAX(SHR_FLRG(FRG) , 0.1)
                              TOT_FLRG = TOT_FLRG + SHR_FLRG(FRG)
                           ELSE
                              SHR_FLRG(FRG) = 0.0
                           END IF
                        END DO

                        DO FRG = 1 , UNFRGN
                           IF (FRG_EMM_MAP(NERC,FRG) .GT. 0.0) THEN
                              DO ISP = 1 , EPNMSP
                                ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'X' //EPFLCD(FRG)//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':X:' ,EPFLCD(FRG),UPLDCD(ISP),UPYRCD(YEAR),':!x:') ! exception: uses upldcd(isp)(aimms seasonx) instead of scode(isp) (aimms season)
                                 CALL CROWTYPE(ROW,'L       ',ROW_mask)
                                 CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BRNW,9')
                                 VALUE = SHR_FLRG(FRG) / TOT_FLRG
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 VALUE = - MAX( VALUE , 0.0)
                                 IF (VALUE .LT. -ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,10')
                              END DO
                           END IF
                        END DO
!
                     ELSE IF (UPTOPR(IECP) .EQ. 1 .OR. UPTOPR(IECP) .EQ. 3) THEN

                        IF (IECP .EQ. WIP2) THEN

!                          LOOP OVER VERTICAL LOAD SEGMENTS

                           DO VLS = 1 , EPNSTP(YEAR)
                              IGRP2 = EPLDGR(VLS,YEAR)
                              ISEG = EPLDSG(VLS,YEAR)

                              IF (ISEG .EQ. 1) THEN
                                 ISP = EPGECP(IGRP2)
                                 ROW = '2'//UPRGCD(NERC)//'P2'//UPLDCD(ISP)//UPRGCD(IGRP2)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':2:',UPRGCD(NERC),':P2:',UPLDCD(ISP),UPRGCD(IGRP2),UPRGCD(ISEG),UPYRCD(YEAR))
                                 VALUE = DBLE( - 1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,11')
                              END IF
                           END DO
                        ELSE IF (IECP .NE. WIHY) THEN
                           DO ISP = 1 , EPNMSP
                              ROW = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'XX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XX:',UPLDCD(ISP),UPYRCD(YEAR))
                              CALL CROWTYPE(ROW,'L       ',ROW_mask)
                              CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BRNW,12')
                              VALUE = DBLE( - EP_SP_CAP_FAC(ISP,IECP,YEAR))
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,13')
                           END DO

                           IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                              DO VLS = 1 , EPNSTP(YEAR)
                                 IGRP2 = EPLDGR(VLS,YEAR)
                                 ISEG = EPLDSG(VLS,YEAR)
                                 ISP = EPGECP(IGRP2)
                                 ROW_HY = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//UPLDCD(ISP)//UPRGCD(IGRP2)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_HY_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),UPLDCD(ISP),UPRGCD(IGRP2),UPRGCD(ISEG),UPYRCD(YEAR))
                                 CALL CROWTYPE(ROW_HY,'L       ',ROW_HY_mask)
                                 CALL CRHS(UPRHS,ROW_HY,DBLE(0.0),ROW_HY_mask,'EP$BRNW,14')
                                 VALUE = DBLE( - 1.0)
                                 CALL CVAL(COLUMN,ROW_HY,VALUE,COLUMN_mask,ROW_HY_mask,'EP$BRNW,15')
                              END DO
                           END IF
                        END IF
                     ELSE
                        DO ISP = 1 , EPNMSP
                           ROW = 'C'//UPRGCD(NERC)//UPLNTCD (IECP)//'XX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD (IECP),':XX:',UPLDCD(ISP),UPYRCD(YEAR))
                           CALL CROWTYPE(ROW,'L       ',ROW_mask)
                           CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BRNW,16')
                           VALUE = DBLE( - 1.0)
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,17')
                        END DO
                     END IF

!                    CREATE ROW/COLUMN INTERSECTIONS FOR EXISTING RENEWABLE CAPACITY COLUMNS

!                    RESERVE MARGIN ROW

                     ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))

                     IF (IECP .NE. WIHY)THEN
                        VALUE = DBLE(UPCCR(IECP))
                     ELSE
                        VALUE = DBLE(RNWFAC)
                     END IF
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,18')

!                    TOTAL CAPACITY ROW

                     ROW = 'TOTCAP'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':TOTCAP:',UPRGCD(NERC),UPYRCD(YEAR))
                     VALUE = DBLE(1.0)
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,19')

!                    LIMIT ON P2 CAPACITY ROW, IF APPROPRIATE

                     IF (IECP .EQ. WIP2 .AND. UPP2LIM(CURIYR + YEAR - 1,NERC) .LT. 1.00)THEN
                        ROW = 'L'//UPRGCD(NERC)//'P2XXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':P2XXX:',UPYRCD(YEAR))
                        VALUE = DBLE(1.0)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,20')
                     END IF

!                    MAXIMUM RETIREMENTS ROW

                     IF (USW_ERET .EQ. 1 .AND. UPRETRAT .GT. 0.0 .AND. YEAR .EQ. UPRTLT + 1) THEN
                        ROW = 'R'//UPRGCD(NERC)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(NERC),':MXRET0:')
                        VALUE = DBLE(1.0)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,21')
                     END IF
                  END DO     ! IGRP (Retirements)
               END IF        ! (USW_ERET .EQ. 1 .AND. YEAR .GT. UPRTLT)

!              REVISE BOUND ON EXISTING CAPACITY NOT SUBJECT TO RETIREMENT VECTORS

               COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XXX:',UPYRCD(YEAR),':!RNW:')
               VALUE = DBLE(EPECAP(0,IECP,YEAR) - EPECAP_MR(0,IECP,YEAR)) * DBLE(0.001)
               IF (YEAR .GT. UPRTLT)THEN
                  DO IGRP = 1 , ECP_D_RET
                     VALUE = VALUE - DBLE(EPGCAP(0,IGRP,IECP)) * DBLE(0.001)
                  END DO
               END IF
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               VALUE = MAX( VALUE , ECP_MIN)
               TST = VALUE

               COLUMN_MR = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'MRX'//UPYRCD(YEAR); call makmsk(COLUMN_MR_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':MRX:',UPYRCD(YEAR),':!RNW:')

!              WHAT DOES HYDRO CAPACITY LOOK LIKE

!              IF (IECP .EQ. WIHY) THEN
!                 WRITE(6,3917) CURIRUN, CURCALYR, CURIYR+YEAR+1988, NERC, IECP, COLUMN, DBLE(EPECAP(0,IECP,YEAR)) * DBLE(0.001), VALUE, &
!                    (DBLE(EPGCAP(0,IGRP,IECP)) * DBLE(0.001), IGRP = 1 , ECP_D_RET) , EPFOM(IECP), EPVOM(IECP)
!3917             FORMAT(1X,"HYDRO_CAPACITY",5(":",I5),":",A16,2(":",F21.6),<ECP_D_RET>(":",F21.6),2(":",F21.6))
!              END IF

               IF (TST .GT. 0.0) THEN
                  CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$BRNW,22')
               END IF

               IF (IECP .NE. WIHY) THEN
               VALUE_MR = EPECAP_MR(0,IECP,YEAR) * 0.001
               TST_MR = VALUE_MR
               IF (TST_MR .GT. 0.0) THEN
                  CALL CBND(UPBND,COLUMN_MR,VALUE_MR,VALUE_MR,COLUMN_MR_mask,'EP$BRNW,23')
               END IF
               ELSE
                  VALUE_MR = 0.0
                  TST_MR = 0.0
                  CALL CBND(UPBND,COLUMN_MR,VALUE_MR,VALUE_MR,COLUMN_MR_mask,'EP$BRNW,23')
               END IF
!
               IF (IECP .NE. WIHY) THEN

!                 Adjust Free Row for Generation to Account for Difference between Existing and New Capacity Factors

                  ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':GEN:',UPYRCD(YEAR))
                  VALUE = DBLE((EPRCFC(IP) - TMP_ECF) * 8.76)
                  VALUE = - MAX( VALUE , 0.0)
                  IF (VALUE .LT. -ECP_MIN) THEN
                     IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,24')
                     IF (TST_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,25')
                  END IF

!                 WRITE(6,4514) CURIRUN, CURCALYR, CURIYR+YEAR+1988, NERC, IECP, IP, COLUMN, ROW, &
!                    EPRCFC(IP), EPECFC(IECP,1), TMP_ECF, TST, EPECAP(0,IECP,YEAR), EPECAP_MR(0,IECP,YEAR), (EPGCAP(0,IGRP,IECP),IGRP=1,ECP_D_RET)
!4514             FORMAT(1X,"EP_BRNW_XGEN",6(":",I4),2(":",A16),6(":",F21.6))

!                 ADJUST RPS GENERATION FOR DIFFERENCE BETWEEN CAPACITY FACTORS FOR EXISTING AND NEW PLANTS

                  IF (UPRNWSHRR(IECP,NERC) .GT. 0.0)THEN
                     ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(YEAR))
                     VALUE = DBLE((EPRCFC(IP) - TMP_ECF) * 8.76)
                     VALUE = VALUE * DBLE(UPRNWSHRR(IECP,NERC))
                     VALUE = - MAX( VALUE , 0.0)
                     IF (VALUE .LT. -ECP_MIN) THEN
                        IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,26')
                        IF (TST_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,27')
                     END IF
                  END IF

!                 If National RPS and Regional and National Contributions Differ

                  IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWSHR(IECP) .GT. 0.0) THEN
                     ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))
                     VALUE = DBLE((EPRCFC(IP) - TMP_ECF) * 8.76)
                     VALUE = VALUE * DBLE(UPRNWSHR(IECP))
                     VALUE = - MAX( VALUE , 0.0)
                     IF (VALUE .LT. -ECP_MIN) THEN
                        IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,28')
                        IF (TST_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,29')
                     END IF
                  END IF

                  IF (TST .GT. 0.0) THEN
!                    CO2 OUTPUT STANDARD

                     IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,YEAR) .GT. 0.0 .AND. CO2_PLTSW(IECP) .GT. 0.0)THEN
                        IF (IECP .NE. WIWD .OR. IECP .EQ. WIBI)THEN
                           CO2_LBMWH = DBLE(0.0)
                        ELSE
                           CO2_LBMWH = CO2_EMSWD * AVG_HTRT(IECP) / 1000.0
                        END IF
                        ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
                        VAL_STD_CO2 = DBLE(TMP_ECF - EPRCFC(IP)) * DBLE(8.760) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * DBLE(CO2_PLTSW(IECP))
                        VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                        IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                        IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                        IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$BRNW,31')
                     END IF

!                    GRID RESILIENCE STANDARD, IF APPROPRIATE

                     IF (GRD_RATS(IECP,NERC) .GE. 0.0)THEN
                        ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(YEAR))
                        VAL_STD_GRD = DBLE(TMP_ECF - EPRCFC(IP)) * DBLE(8.760) * DBLE(GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR))
!                       VAL_STD_GRD = VAL_STD_GRD * 0.001
                        IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                        IF (VAL_STD_GRD .NE. DBLE(0.0))CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$BRNW,32')
                     END IF
                  END IF
               END IF

!              OBJECTIVE FUNCTION

               ROW = UPOBJ ; ROW_mask=UPOBJ ; ROW_mask=UPOBJ
               IF (YEAR .LT. UNXPH) THEN
                  IF (IECP .EQ. WIHY) THEN
                     VALUE = EPFOM(IECP) * UPGNPD(CURIYR + YEAR - 1) * PWF(DSCRT_WO,YEAR)
                  ELSE
                     VALUE = EPIRFOM(IRNW) * UPGNPD(CURIYR + YEAR - 1) * PWF(DSCRT_WO,YEAR)
                  END IF
!               YEAR 1 FOM IS A SUNK COST SO SET = 0
                  IF (YEAR .EQ. 1) VALUE = DBLE(0.0)
               ELSE
                  IFPH2 = UNFPH - YEAR + 1
                  IF (IECP .EQ. WIHY) THEN
                     DO JYR = 1 , IFPH2
                        FOM(JYR) = EPFOM(IECP) * UPGNPD(CURIYR + JYR + YEAR - 2)
                     END DO
                  ELSE
                     DO JYR = 1 , IFPH2
                        FOM(JYR) = EPIRFOM(IRNW) * UPGNPD(CURIYR + JYR + YEAR - 2)
                     END DO
                  END IF
                  VALUE = PVV(FOM,ECP_D_FPH,IFPH2,DSCRT_WO) * PWF(DSCRT_WO,YEAR-1)
               END IF
               IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
               VALUE = MAX( VALUE , 0.0)
               IF (VALUE .NE. 0.0) THEN
                  IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,33')
                  IF (TST_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,34')
               END IF

!              CAPACITY AND ENERGY BALANCE ROW

               IF (IECP .EQ. WIWD .OR. IECP .EQ. WIBI) THEN
                  IF (TST .GT. 0) THEN
                     TOT_FLRG = 0.0
                     DO FRG = 1 , UNFRGN
                        IF (FRG_EMM_MAP(NERC,FRG) .GT. 0.0) THEN
                           SHR_FLRG(FRG) = EPECAP(FRG,IECP,YEAR) - EPECAP_MR(FRG,IECP,YEAR)
                           IF (YEAR .GT. UPRTLT) THEN
                              DO IGRP = 1 , RET_GRP(IECP)
                                 SHR_FLRG(FRG) = SHR_FLRG(FRG) - EPGCAP(FRG,IGRP,IECP)
                              END DO
                           END IF
                           SHR_FLRG(FRG) = MAX(SHR_FLRG(FRG) , 1.0)
                           TOT_FLRG = TOT_FLRG + SHR_FLRG(FRG)
                        ELSE
                           SHR_FLRG(FRG) = 0.0
                        END IF
                     END DO
!
                     DO FRG = 1 , UNFRGN
                        IF (FRG_EMM_MAP(NERC,FRG) .GT. 0.0) THEN
                           DO ISP = 1 , EPNMSP
                              ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'X' //EPFLCD(FRG)//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':X:' ,EPFLCD(FRG),UPLDCD(ISP),UPYRCD(YEAR),':!x:') ! exception: uses upldcd(isp)(aimms seasonx) instead of scode(isp) (aimms season)
                              CALL CROWTYPE(ROW,'L       ',ROW_mask)
                              CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BRNW,35')
                              VALUE = SHR_FLRG(FRG) / TOT_FLRG
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              VALUE = - MAX( VALUE , 0.0)
                              IF (VALUE .LT. -ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,36')
                           END DO

                           ROW_MAX_GEN = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'X' //EPFLCD(FRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_MAX_GEN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':X:' ,EPFLCD(FRG),':X:',UPYRCD(YEAR))
                           CALL CROWTYPE(ROW_MAX_GEN,'L       ',ROW_MAX_GEN_mask)
                           CALL CRHS(UPRHS,ROW_MAX_GEN,DBLE(0.0),ROW_MAX_GEN_mask,'EP$BRNW,37')
                           VALUE = (EPRCFC(IP) * DBLE(8.760)) * (SHR_FLRG(FRG) / TOT_FLRG)
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                           VALUE = - MAX( VALUE , 0.0)
                           IF (VALUE .LT. -ECP_MIN) CALL CVAL(COLUMN,ROW_MAX_GEN,VALUE,COLUMN_mask,ROW_MAX_GEN_mask,'EP$BRNW,38')

                        END IF
                     END DO
                  END IF

                  IF (TST_MR .GT. 0) THEN
                     TOT_FLRG = 0.0
                     DO FRG = 1 , UNFRGN
                        IF (FRG_EMM_MAP(NERC,FRG) .GT. 0.0) THEN
                           SHR_FLRG(FRG) = EPECAP_MR(FRG,IECP,YEAR)
                           TOT_FLRG = TOT_FLRG + SHR_FLRG(FRG)
                        ELSE
                           SHR_FLRG(FRG) = 0.0
                        END IF
                     END DO
!
                     DO FRG = 1 , UNFRGN
                        IF (SHR_FLRG(FRG) .GT. 0.0) THEN
                           DO ISP = 1 , EPNMSP
                              ROW_MR = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'M' //EPFLCD(FRG)//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_MR_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':M:' ,EPFLCD(FRG),UPLDCD(ISP),UPYRCD(YEAR),':!x:')
                              CALL CROWTYPE(ROW_MR,'L       ',ROW_MR_mask)
                              CALL CRHS(UPRHS,ROW_MR,DBLE(0.0),ROW_MR_mask,'EP$BRNW,39')
                              VALUE_MR = SHR_FLRG(FRG) / TOT_FLRG
                              IF (USW_DIGIT .GT. 0)VALUE_MR = DIGITS2( VALUE_MR , DIGITS_PARM)
                              VALUE_MR = - MAX( VALUE_MR , 0.0)
                              IF (VALUE_MR .LT. -ECP_MIN) CALL CVAL(COLUMN_MR,ROW_MR,VALUE_MR,COLUMN_MR_mask,ROW_MR_mask,'EP$BRNW,40')
                           END DO
                        END IF
                     END DO
                  END IF

               ELSE IF (UPTOPR(IECP) .EQ. 1 .OR. UPTOPR(IECP) .EQ. 3) THEN

                  IF (IECP .EQ. WIP2) THEN

                     IF (TST .GT. 0.0) THEN

!                       LOOP OVER VERTICAL LOAD SEGMENTS

                        DO VLS = 1 , EPNSTP(YEAR)
                           IGRP2 = EPLDGR(VLS,YEAR)
                           ISEG = EPLDSG(VLS,YEAR)

                           IF (ISEG .EQ. 1) THEN
                           ISP = EPGECP(IGRP2)
                           ROW = '2'//UPRGCD(NERC)//'P2'//UPLDCD(ISP)//UPRGCD(IGRP2)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':2:',UPRGCD(NERC),':P2:',UPLDCD(ISP),UPRGCD(IGRP2),UPRGCD(ISEG),UPYRCD(YEAR))
                           VALUE = DBLE( - 1.0)
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,41')
                           END IF
                        END DO
                     END IF
                  ELSE
                     IF (TST + TST_MR .GT. 0.0) THEN
                        DO ISP = 1 , EPNMSP
                           ROW = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'XX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XX:',UPLDCD(ISP),UPYRCD(YEAR))
                           CALL CROWTYPE(ROW,'L       ',ROW_mask)
                           CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BRNW,42')
                           VALUE = DBLE( - EP_SP_CAP_FAC(ISP,IECP,YEAR))
                           IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,43')
                           IF (TST_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,44')
                        END DO

                        IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                           DO VLS = 1 , EPNSTP(YEAR)
                              IGRP2 = EPLDGR(VLS,YEAR)
                              ISEG = EPLDSG(VLS,YEAR)
                              ISP = EPGECP(IGRP2)
                              ROW_HY = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//UPLDCD(ISP)//UPRGCD(IGRP2)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_HY_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),UPLDCD(ISP),UPRGCD(IGRP2),UPRGCD(ISEG),UPYRCD(YEAR))
                              CALL CROWTYPE(ROW_HY,'L       ',ROW_HY_mask)
                              CALL CRHS(UPRHS,ROW_HY,DBLE(0.0),ROW_HY_mask,'EP$BRNW,45')
                              VALUE = DBLE( - 1.0)
                              IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW_HY,VALUE,COLUMN_mask,ROW_HY_mask,'EP$BRNW,46')
                              IF (TST_MR .GT. 0.0) THEN
                                 ROW_HY = 'K'//UPRGCD(NERC)//UPLNTCD(IECP)//UPLDCD(ISP)//UPRGCD(IGRP2)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_HY_mask,':K:',UPRGCD(NERC),UPLNTCD(IECP),UPLDCD(ISP),UPRGCD(IGRP2),UPRGCD(ISEG),UPYRCD(YEAR))
                                 CALL CROWTYPE(ROW_HY,'L       ',ROW_HY_mask)
                                 CALL CRHS(UPRHS,ROW_HY,DBLE(0.0),ROW_HY_mask,'EP$BRNW,47')
                                 VALUE = DBLE( - 1.0)
                                 CALL CVAL(COLUMN_MR,ROW_HY,VALUE,COLUMN_MR_mask,ROW_HY_mask,'EP$BRNW,48')
                              END IF
                           END DO
                        END IF
                     END IF
                  ENDIF
               ELSE
                  IF (TST .GT. 0.0) THEN
                     DO ISP = 1 , EPNMSP
                        ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'XX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':XX:',UPLDCD(ISP),UPYRCD(YEAR))
                        CALL CROWTYPE(ROW,'L       ',ROW_mask)
                        CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BRNW,49')
                        VALUE = DBLE( - 1.0)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,50')
                     END DO

                     ROW_MAX_GEN = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'XXX'//UPYRCD(YEAR); call makmsk(ROW_MAX_GEN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XXX:',UPYRCD(YEAR))
                     CALL CROWTYPE(ROW_MAX_GEN,'L       ',ROW_MAX_GEN_mask)
                     CALL CRHS(UPRHS,ROW_MAX_GEN,DBLE(0.0),ROW_MAX_GEN_mask,'EP$BRNW,51')
                     VALUE = (EPRCFC(IP) * DBLE(8.760))
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     VALUE = - MAX( VALUE , 0.0)
                     IF (VALUE .LT. -ECP_MIN) CALL CVAL(COLUMN,ROW_MAX_GEN,VALUE,COLUMN_mask,ROW_MAX_GEN_mask,'EP$BRNW,52')

                  END IF
                  IF (TST_MR .GT. 0.0) THEN
                     DO ISP = 1 , EPNMSP
                        ROW = 'C'//UPRGCD(NERC)//UPLNTCD (IECP)//'MX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD (IECP),':MX:',UPLDCD(ISP),UPYRCD(YEAR))
                        CALL CROWTYPE(ROW,'L       ',ROW_mask)
                        CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BRNW,53')
                        VALUE = DBLE( - 1.0)
                        CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,54')
                     END DO
                  END IF
               END IF

!              CREATE ROW/COLUMN INTERSECTIONS FOR EXISTING RENEWABLE CAPACITY COLUMNS

!              RESERVE MARGIN ROW

               ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
               IF (IECP .NE. WIHY)THEN
                  VALUE = DBLE(UPCCR(IECP))
               ELSE
                  VALUE = DBLE(RNWFAC)
               END IF
               IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,55')
               IF (TST_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,56')

!              TOTAL CAPACITY ROW

               ROW = 'TOTCAP'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':TOTCAP:',UPRGCD(NERC),UPYRCD(YEAR))
               VALUE = DBLE(1.0)
               IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,57')
               IF (TST_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,58')

!              LIMIT ON P2 CAPACITY ROW, IF APPROPRIATE

               IF (IECP .EQ. WIP2 .AND. UPP2LIM(CURIYR + YEAR - 1,NERC) .LT. 1.00)THEN
                  ROW = 'L'//UPRGCD(NERC)//'P2XXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':P2XXX:',UPYRCD(YEAR))
                  VALUE = DBLE(1.0)
                  IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,59')
                  IF (TST_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,60')
               END IF

!              MAXIMUM RETIREMENTS ROW

               IF (USW_ERET .EQ. 1 .AND. UPRETRAT .GT. 0.0 .AND. YEAR .EQ. UPRTLT + 1) THEN
                  ROW = 'R'//UPRGCD(NERC)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(NERC),':MXRET0:')
                  VALUE = DBLE(1.0)
                  IF (TST .GT. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,61')
                  IF (TST_MR .GT. 0.0) CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,62')
               END IF

               IF (TST_MR .GT. 0.0) THEN
                  ROW = 'Q'//UPRGCD(NERC)//UPLNTCD(IECP)//'XXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':Q:',UPRGCD(NERC),UPLNTCD(IECP),':XXX:',UPYRCD(YEAR))
                  CALL CROWTYPE(ROW,'G       ',ROW_mask)
                  CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BRNW,63')
                  VALUE = -8.760 * MIN(MUSTRUN(IECP,NERC) , TST_MR * UPFORT(IECP)) / TST_MR
                  CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$BRNW,64')
               END IF
            END IF

!           IF PLANT TYPE IS ALLOWED TO BUILD THEN CREATE RENEWABLE BUILD BOUNDS, ONE FOR EACH PLANNING YEAR.

            IF (UPVTYP(IECP) .EQ. 1 .AND. EPBNDTYP(IRNW) .NE. 'Z' .AND. OLYR .LE. UNXPH) THEN

!              DETERMINE CPS REQUIREMENT (LEVELIZED FOR LAST YEAR)

               IF (UPCAPCAS .GT. 0) THEN
                  IF (OLYR .LT. UNXPH) THEN
                     PVCPS = DBLE(UPCAPBND(MIN(CURIYR + OLYR - 1,UNYEAR)))
                  ELSE
                     DO JYR = 1 , UNFPH - UNXPH + 1
                        CPS(JYR) = UPCAPBND(MIN(CURIYR + JYR + UNXPH - 2,UNYEAR))
                        ONE(JYR) = DBLE(1.0)
                     END DO
                     PVCPS = PVV(CPS,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                     PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                     PVCPS = PVCPS / PVONE
                  END IF
                  PVCPS = MAX(PVCPS,ECP_MIN)
                  IF (UPCAPSHR(IECP) .LE. 0.0)THEN
                     PVCPS = PVCPS
                  ELSE
                     PVCPS = PVCPS - DBLE(1.0)
                  END IF
               END IF

!              SET UP ANNUAL NATIONAL LIMIT ROWS

               IF ( (UPAVLYR(IECP) .LE. FULLYR ) ) THEN

                 ROW = 'L'//'U'//UPLNTCD(IECP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',':U:',UPLNTCD(IECP),':ANN:',UPYRCD(YEAR))

!                SET ROW TYPE
!
                 IF ( UPANNLMT(IECP,MIN(MNUMYR , OLYR+CURIYR)) .GT. 999.0 ) THEN
!                  make free row
                   CALL CROWTYPE(ROW,'N       ',ROW_mask)
                 ELSE
                   CALL CROWTYPE(ROW,'L       ',ROW_mask)
                   VALUE = UPANNLMT(IECP,MIN(MNUMYR , CURIYR+OLYR-1))

!                  REVISE RHS OF ROW
!
                   IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                   CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$BRNW,65')
                 ENDIF

               ENDIF

!              TECHNOLOGIES USING ELASTICITIES

               IF (ESTSWTCH(IECP) .GT. 0) THEN
                  ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'REN'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':REN:',UPYRCD(YEAR))

!                 SET ROW TYPE  - IF USW_RNW GE 1 THEN SET ROW TYPE & BOUNDS ACCORDING TO RENEWABLE COMMON INFO

                  IF (USW_RNW .GE. 1) THEN
                 LEP=len_trim(EPBNDTYP(IRNW))
                 if(ichar(epbndtyp(irnw)).lt.32) then
!                  write(6,*) 'ichar(epbndtyp(irnw))=',ichar(epbndtyp(irnw))
                   LEP=0
                 endif
                 if(EPBNDTYP(IRNW).ne.'2'.and.LEP.gt.0) then
                     CALL CROWTYPE(ROW,EPBNDTYP(IRNW)//'       ',ROW_mask)
                 else
                   CALL CROWTYPE(ROW,'L       ',ROW_mask)  ! Changed from 2 to L because EPBNDTYP of "2" is not a valid row type.
                 endif
                  ELSE
                     CALL CROWTYPE(ROW,'E       ',ROW_mask)
                  ENDIF

!                 REVISE RHS OF ROW

                  IF (USW_RNW .GE. 1 .AND.  UPAVLYR(IECP) .LE. FULLYR) THEN
                     IF (OLYR .LT. UNXPH) THEN
                        VALUE = DBLE(EPBLDBND(IRNW,YEAR))
                     ELSE
                        VALUE = DBLE(5.0 * EPBLDBND(IRNW,YEAR))
                     END IF
                  ELSE
                     VALUE = DBLE(0.0)
                  ENDIF
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$BRNW,66')

!                 WRITE(6,5555) CURIRUN, CURCALYR, YEAR, NERC, IECP, IRNW, ESTSWTCH(IECP), USW_RNW, UPAVLYR(IECP), ROW, &
!                    EPBLDBND(IRNW,YEAR), VALUE
 5555             FORMAT(1X,"EPBLDBND_ECP",9(":",I4),":",A16,2(":",F15.3))

!                 TECHNOLOGY SUPPLY CURVE ROWS

               ELSEIF (ESTSWTCH(IECP) .LT. 0 ) THEN
                  DO IS = 1 , EPSTSUP(IRNW)
                     IF (EPBDSUP(IRNW,IS) .NE. 0.0) THEN
                        ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'RN'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':RN:',SSTEP(IS),UPYRCD(YEAR))

!                       SET ROW TYPE - IF USW_RNW GE 1 THEN SET ROW TYPE & BOUNDS ACCORDING TO RENEWABLE COMMON INFO

                        CALL CROWTYPE(ROW,'L       ',ROW_mask)

!                       REVISE RHS OF ROW

                        IF (USW_RNW .GE. 1 .AND. UPAVLYR(IECP) .LE. FULLYR) THEN
                           VALUE = DBLE(EPBDSUP(IRNW,IS))
                        ELSE
                           VALUE = DBLE(0.0)
                        ENDIF
                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                        CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$BRNW,67')
                     END IF                                        ! EPBDSUP NE 0
                  END DO                                        ! IS
               END IF                                         ! EPSWSUP
            ENDIF

!           SKIP IF HIGH CAPITAL COST, WHICH IMPLIES NO RENEWABLE RESOURCES (E.G., GEOTHERMAL)

            IF (EPIROVR(IRNW) .LT. 9000.0)THEN

!              REVISE NON-UTILITY BUILD VECTORS THEN REVISE RESERVE MARGIN ROW WITH CAPACITY CREDIT. THESE VECTORS HAVE -1 IN THE CAPACITY BALANCE ROWS

!              LOOP OVER STEPS OF TECHNOLOGY SUPPLY CURVE

               DO IS = 1 , EPSTSUP(IRNW)

!                 Loop over ownership type

                  DO IOWN = 1, 2
                     IF (OLYR .LE. UNXPH .AND. EPBNDTYP(IRNW) .NE. 'Z' .AND. UPBLDTYP(NERC) .EQ. IOWN .AND. UPVTYP(IECP) .EQ. 1) THEN
                        IFPH2 = UNFPH - OLYR + 1
!
                        IF (IECP .EQ. WIWD .OR. IECP .EQ. WIBI) THEN
                           N_FLRG = 0
                           DO FRG = 1 , UNFRGN
                              IF (FL_CNXT_CST(NERC,FRG) .GT. 0.0) THEN
                                 N_FLRG = N_FLRG + 1
                                 NXT_FLRG(N_FLRG) = FRG
                              END IF
                           END DO
                        ELSE
                           N_FLRG = 1
                           NXT_FLRG(1) = NERC
                        END IF

!                       CREATE EXTRA LOOP FOR SUBSIDY LIMITS, IF APPROPRIATE

                        IF (UPSUBCAS(IECP) .GT. 0 .AND. LIMSUB(IECP) .GT. 0)THEN
                           NUMLOOP = 2

!                          IF PTC SUBSIDY, CHECK IF VALID ONLINE YEAR

                           IF (UPSUBCAS(IECP) .EQ. 1)THEN
                              IF (UPGSUBPT(IECP) .LE. 0) THEN
                                 IF (OLYR .LT. UNXPH) THEN
                                    IF ((CURIYR + OLYR - 1) .LT. GSYR1 .OR. (CURIYR + OLYR - 1) .GT. GSYRL) NUMLOOP = 1
                                 ELSE
                                    IF ((CURIYR + UNFPH - 1) .LT. GSYR1) NUMLOOP = 1
                                    IF ((CURIYR + UNXPH - 1) .GT. GSYRL) NUMLOOP = 1
                                 END IF
                              ELSE
                                 IF (OLYR .LT. UNXPH) THEN
                                    IF (UPGSUBYR(IECP,MIN(MNUMYR,CURIYR + OLYR - 1)) .LE. 0.0) NUMLOOP = 1
                                 ELSE
!                                   IF (UPGSUBYR(IECP,MIN(MNUMYR,CURIYR + UNFPH - 1)) .LE. 0.0) NUMLOOP = 1
                                    IF (UPGSUBYR(IECP,MIN(MNUMYR,CURIYR + UNXPH - 1)) .LE. 0.0) NUMLOOP = 1
                                 END IF
                              END IF
                           END IF
                        ELSE
                           NUMLOOP = 1
                        END IF

!                       if (iecp .eq. wiwd .or. iecp .eq. wibi) print *,'!ptcwd',curiyr+1989,curiyr+1989+olyr-1,upsubcas,limsub(iecp),numloop,gsyr1,gsyrl

                        DO LOOPS = 1 , NUMLOOP
                           DO FRG = 1 , N_FLRG
                              FLRG = NXT_FLRG(FRG)
                              IF (IECP .EQ. WIWD .OR. IECP .EQ. WIBI) THEN
                                 IF (LOOPS .EQ. 1)THEN
                                    COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//EPFLCD(FLRG)//SSTEP(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),EPFLCD(FLRG),SSTEP(IS),UPYRCD(YEAR),':!BIO:')
                                 ELSE
                                    COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//EPFLCD(FLRG)//SUB_CODE(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),EPFLCD(FLRG),SUB_CODE(IS),UPYRCD(YEAR),':!BIOSUB:')
                                 END IF
                              ELSE
                                 IF (LOOPS .EQ. 1)THEN
                                    COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//'X'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),':X:',SSTEP(IS),UPYRCD(YEAR),':!RNW:')
                                 ELSE
                                    COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//'S'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),':S:',SSTEP(IS),UPYRCD(YEAR),':!RNW:')
                                 END IF
                              END IF

!                             WRITE(6,5550) CURIRUN, CURCALYR, YEAR, UPAVLYR(IECP), NERC, IECP, IOWN, FLRG, IS, IRNW, ESTSWTCH(IECP), COLUMN, &
!                                EPIROVR(IRNW), UPBLDREG(IECP,MNUMNR), UPBLDREG(IECP,NERC)
 5550                         FORMAT(1X,"RNW_NAME",11(":",I4),":",A16,3(":",F15.3))

!                             IF TECHNOLOGY IS AVAILABLE THEN CREATE COEFFICIENTS

                              IF (UPAVLYR(IECP) .LE. FULLYR .AND. EPIROVR(IRNW) .NE. 0.0 .AND.  &
                                 (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,NERC) .GT. 0.0)) THEN

!                             STORE INDEX FOR AVAILABILITY OF TECHNOLOGY AND SUBSIDY
   
                              IF (LOOPS .EQ. 1 .AND. IS .EQ. 1 .AND. FRG .EQ. 1 .AND. UPBLDREG(IECP,NERC) .GT. 0.0)BUILD_AVL(IECP,YEAR,NERC,CURIYR) = NUMLOOP

!                                IF CREATE PUT COLUMN INTO RENEWABLE BUILD ROW

!                                ELASTICITY APPROACH USES REGIONAL AND NATIONAL CONSTRAINTS

                                 IF (ESTSWTCH(IECP) .GT. 0) THEN
                                    IF (IECP .NE. WIP2) THEN
                                       ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'REN'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':REN:',UPYRCD(YEAR))
                                       CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$BRNW,68')
                                    END IF

!                                   TECHNOLOGY SUPPLY CURVE ROW

                                    ROW = 'L'//'U'//UPLNTCD(IECP)//'RN'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',':U:',UPLNTCD(IECP),'RN',SSTEP(IS),UPYRCD(YEAR)) ! dispatch type element RN
                                    CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$BRNW,69')
      
                                 ELSEIF (ESTSWTCH(IECP) .LT. 0) THEN

!                                   P/Q SUPPLY CURVE APPROACH USES REGIONAL CONSTRAINTS ACROSS YEARS

                                    IF (IECP .NE. WIMS)THEN
                                       YR1 = YEAR
                                       YR2 = YEAR
                                    ELSE
                                       YR1 = YEAR
                                       YR2 = UNXPH - UPPLYR(IECP)
                                    END IF
                                    DO IYR = YR1 , YR2
                                       ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'RN'//SSTEP(IS)//UPYRCD(IYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':RN:',SSTEP(IS),UPYRCD(IYR))
                                       CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$BRNW,70')
                                    END DO
                                 ENDIF
!
!                                PUT INTO NATIONAL ANNUAL BUILD LIMIT ROW
!
                                 ROW = 'LU'//UPLNTCD(IECP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':ANN:',UPYRCD(YEAR))
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,71')

!                                CRN ITC adjustment, can't claim both ITC and PTC, so if the PTC is available in OLYR, take that

                                 IF ((UPGSUB(IECP) .GT. 0.0 .AND. (CURIYR + OLYR - 1) .GE. GSYR1 .AND. (CURIYR + OLYR - 1) .LE. GSYRL) .OR.  &
                                     (UPGSUBPT(IECP) .GT. 0 .AND. UPGSUBYR(IECP,min(MNUMYR , CURIYR + OLYR - 1)) .GT. 0.0)) THEN
                                    ITCADJ=1.0-UPCSB(IECP)
                                 ELSE
                                    ITCADJ=1.0
                                 ENDIF

                                    write(18,'("CRN ITC4:",2(I4,":"),2(I6,":"),3(F12.5,":"))') iecp,curiyr+olyr-1,gsyr1,gsyrl, &
                                       upgsub(iecp),upcsb(iecp),itcadj
!
!                                REVISE OBJECTIVE FUNCTION COEFFICIENT

                                 IF (IOWN .EQ. 1) THEN     ! Utility Build
                                    ROW = UPOBJ ; ROW_mask=UPOBJ ; ROW_mask=UPOBJ
                                    IF (EPIROVR(IRNW) .NE. 0.0) THEN

!                                   CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                                    IF (UPSUBCAS(IECP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       DEBT_F = EPUFDT
                                    ELSE
                                       DEBT_F = EPUFDT + UPNFDTA(IECP)
                                    END IF
                                    DEBT_F = DEBT_F + SHRDTADJ

!                                   CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                                    IF (UPSUBCAS(IECP) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       UTINT  =  EPUIRT
                                    ELSE
                                       UTINT  =  EPUIRT + UPNIRTEA(IECP)
                                    END IF
                                    UTINT  =  UTINT + CSTDTADJ

!                                   CHECK FOR SUBSIDY LIMIT FOR RETURN ON EQUITY

                                    IF (UPSUBCAS(IECP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT)
                                    ELSE
                                       UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT) + UPNRRTEA(IECP)
                                    END IF
                                    UTROE  =  UTROE + CSTEQADJ

                                    UTROR = UTROE * (1.0 - DEBT_F) + UTINT * DEBT_F

!                                   IF SUBSIDY LIMIT FOR INVESTMENT TAX CREDIT, REMOVE IT FOR ADDITIONS WITHOUT SUBSIDY

                                    ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                                    IF (OLYR .LT. UNXPH)THEN
                                       IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                                          ANNADJ = UPANNADJ(IECP,CURIYR+OLYR-1)
                                       ELSE
                                          ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                                       END IF
                                    ELSE
                                       DO JYR = UNXPH , UNAPH
                                          KYR = JYR - UNXPH + 1
                                          AN1(KYR) = 1.0
                                          IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                             ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                                          ELSE
                                             ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                          END IF
                                       END DO
                                       ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                          PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                                    END IF

                                    IF (UPSUBCAS(IECP) .EQ. 2 .AND. NUMLOOP .EQ. 2)THEN
                                       IF (LOOPS .EQ. 1) THEN

!                                         OVRCST = (EPIROVR(IRNW) / (1.0 - UPCSB(IECP))) * UPLRPC(IECP) * UPLROPT(IECP) * &
!                                            UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * EPCCSUP(IRNW,IS) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                                          OVRCST = (EPIROVR(IRNW) / (1.0 - UPCSB(IECP))) * UPLRPC(IECP) * UPLROPT(IECP) * &
                                             UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * EPCCSUP(IRNW,IS) * ANNADJ
                                       ELSE

!                                         OVRCST = EPIROVR(IRNW) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * &
!                                            EPACM(IECP) * EPCCSUP(IRNW,IS) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                                          OVRCST = EPIROVR(IRNW) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * &
                                             EPACM(IECP) * EPCCSUP(IRNW,IS) * ANNADJ
                                       END IF
                                    ELSE

!                                      OVRCST = (EPIROVR(IRNW)/ITCADJ) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * &
!                                         EPACM(IECP) * EPCCSUP(IRNW,IS) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                                       OVRCST = (EPIROVR(IRNW)/ITCADJ) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * &
                                          EPACM(IECP) * EPCCSUP(IRNW,IS) * ANNADJ
                                    END IF

!                                   WRITE(6,3755) CURIRUN, CURCALYR, CURITR, NERC, IRNW, IS, EPCCSUP(IRNW,IS)
!3755                               FORMAT(1X,"EPCCSUP_EP_BRNW",6(":",I4),":",F21.6)

                                    CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),CURIYR,YEAR,OVRCST,CPR, &
                                       UPCAPD(1,IECP),UPGNPD,UTINT,DEBT_F,UTROR,TXBOOK,FNBOOK)

                                    URATIO = TXBOOK / FNBOOK
                                    CAPUNSTL = FNBOOK

                                    CALL EPNBLD(DBLE(UTROR),DBLE(EPDSCRT - UPRSK(IECP)),URATIO,DBLE(EPUFPE),UPECLF(IECP),UPTXLF(IECP), &
                                       DBLE(UPTXRT),UPUCLF(IECP),CAPUTIL)

                                    IF (IECP .EQ. WIWD .OR. IECP .EQ. WIBI) THEN
                                       TRANS = (DBLE(FL_CNXT_CST(NERC,FLRG) + EPCTRM(IECP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IECP))
                                    ELSE
                                       TRANS = (DBLE(EPCOVR(IECP) + EPCTRM(IECP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IECP))
                                    END IF
                                    OBJVAL = (( CAPUNSTL * CAPUTIL + TRANS ) / CRF(DSCRT,IFPH2) ) * PWF(DSCRT,OLYR)
                                    IF (IECP .EQ. WIHY) THEN
                                       VALUE = OBJVAL + PV$FOM * EPFXSUP(IRNW,IS) + PV$TOM + PV$VOM * EPVRSUP(IRNW,IS) + PV$EXT - PV$SOM - PV$GPS
                                    ELSE
                                       VALUE = OBJVAL + PV$FOM * EPFXSUP(IRNW,IS) + PV$TOM +  PV$EXT - PV$SOM
                                    ENDIF

!                                   CHECK FOR SUBSIDY LIMIT FOR PTC -- ADD BACK TO UNSUBSIDIZED CAPACITY

                                    IF (UPSUBCAS(IECP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       VALUE = VALUE + PV$SOM
                                    END IF
                                 ELSEIF (EPIROVR(IRNW) .EQ. 0.0) THEN
                                    VALUE = DBLE(7000.0)
                                 ENDIF

                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                                 IF (UF_DBG .GT. 0 .AND. (MOD(YEAR,5) .EQ. 1)) &
                                    WRITE(18,'(A,A,2I4,2(2x,A),3F14.6,F9.4,3F8.4)') ' EP$BRNW2:YEAR,IP,COL,ROW,VAL,OBJVAL,TRANS,EPCOVR,EPCTRM,UPGNPD,EPCCRF:', &
                                    YEAR,IP,COLUMN,ROW,VALUE,OBJVAL,TRANS,EPCOVR(IECP),EPCTRM(IECP),UPGNPD(YEAR),EPCCRF(IECP)

                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,72')

!                                COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR -- UTILITIES

                                 IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP .AND. IS .EQ. 1) THEN
                                    CAPLEV = (( CAPUNSTL * CAPUTIL ) / CRF(DSCRT,IFPH2) ) * PWF(DSCRT,OLYR)
                                    CAPLEV = CAPLEV / PVGNP
                                    EPLVCAP(IECP,IOWN) = CAPLEV
                                    EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                                    EPLVTRN(IECP) = (TRANS / CRF(DSCRT,IFPH2) * PWF(DSCRT,OLYR)) / PVGNP

!                                   STORE EMM/COAL REGION COSTS FOR BIOMASS PLANTS

                                    IF (IECP .EQ. WIWD) THEN
                                       WDLCAP(NERC,FLRG,IOWN) = EPLVCAP(IECP,IOWN)
                                       WDLFCF(NERC,FLRG,IOWN) = EPLVFCF(IECP,IOWN)
                                       WDLTRN(NERC,FLRG) = EPLVTRN(IECP)
                                    END IF
                                    IF (IECP .EQ. WIBI) THEN
                                       BILCAP(NERC,FLRG,IOWN) = EPLVCAP(IECP,IOWN)
                                       BILFCF(NERC,FLRG,IOWN) = EPLVFCF(IECP,IOWN)
                                       BILTRN(NERC,FLRG) = EPLVTRN(IECP)
                                    END IF
                                    IF (IECP .EQ. WIHY) THEN
                                       EPLVBCK(IECP) = EPIRCCR(IRNW)
                                    ELSE
                                       EPLVBCK(IECP) = 1.0
                                    ENDIF
                                 END IF

                              ELSE                      ! EWG Build

                                 ROW = UPOBJ ; ROW_mask=UPOBJ
                                 IF (EPIROVR(IRNW) .NE. 0.0) THEN

!                                   CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                                    IF (UPSUBCAS(IECP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                       DEBT_F = UPNFDT
                                    ELSE
                                       DEBT_F = UPNFDT + UPNFDTA(IECP)
                                    END IF
                                    DEBT_F = DEBT_F + SHRDTADJ

!                                   CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                                    IF (UPSUBCAS(IECP) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                       EWGINT = EPUIRT + UPNIPRM
                                       UTINT  =  EPUIRT
                                    ELSE
                                       EWGINT =  EPUIRT + UPNIPRM + UPNIRTEA(IECP)
                                       UTINT  =  EPUIRT + UPNIRTEA(IECP)
                                    END IF
                                    EWGINT =  EWGINT + CSTDTADJ
                                    UTINT  =  UTINT  + CSTDTADJ

!                                   CHECK FOR SUBSIDY LIMIT FOR EQUITY INTEREST RATE

                                    IF (UPSUBCAS(IECP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                       EWGROE = EPUCRE + UPNRPRM
                                       UTROE  = EPUCRE
                                    ELSE
                                       EWGROE = EPUCRE + UPNRPRM + UPNRRTEA(IECP)
                                       UTROE  = EPUCRE + UPNRRTEA(IECP)
                                    END IF
                                    EWGROE =  EWGROE + CSTEQADJ
                                    UTROE  =  UTROE  + CSTEQADJ
                                    EWGROR = EWGROE * (1.0 - DEBT_F) + EWGINT * DEBT_F

!                                   CHECK FOR SUBSIDY LIMIT FOR ITC -- EXCLUDE IF UNSUBSIDIZED

                                    ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                                    IF (OLYR .LT. UNXPH)THEN
                                       IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                                          ANNADJ = UPANNADJ(IECP,CURIYR+OLYR-1)
                                       ELSE
                                          ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                                       END IF
                                    ELSE
                                       DO JYR = UNXPH , UNAPH
                                          KYR = JYR - UNXPH + 1
                                          AN1(KYR) = 1.0
                                          IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                             ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                                          ELSE
                                             ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                          END IF
                                       END DO
                                       ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                          PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                                    END IF

                                    IF (UPSUBCAS(IECP) .EQ. 2 .AND. NUMLOOP .EQ. 2)THEN
                                       IF (LOOPS .EQ. 1) THEN

!                                         OVRCST = (EPIROVR(IRNW) / (1.0 - UPCSB(IECP))) * UPLRPC(IECP) * UPLROPT(IECP) * &
!                                            UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * EPCCSUP(IRNW,IS) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                                          OVRCST = (EPIROVR(IRNW) / (1.0 - UPCSB(IECP))) * UPLRPC(IECP) * UPLROPT(IECP) * &
                                             UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * EPCCSUP(IRNW,IS) * ANNADJ
                                       ELSE

!                                         OVRCST = EPIROVR(IRNW) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * &
!                                            EPACM(IECP) * EPCCSUP(IRNW,IS) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                                          OVRCST = EPIROVR(IRNW) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * &
                                             EPACM(IECP) * EPCCSUP(IRNW,IS) * ANNADJ
                                       END IF
                                    ELSE

!                                      OVRCST = (EPIROVR(IRNW)/ITCADJ) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * &
!                                         EPACM(IECP) * EPCCSUP(IRNW,IS) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                                       OVRCST = (EPIROVR(IRNW)/ITCADJ) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * &
                                          EPACM(IECP) * EPCCSUP(IRNW,IS) * ANNADJ
                                    END IF

!                                   WRITE(6,3755) CURIRUN, CURCALYR, CURITR, NERC, IRNW, IS, EPCCSUP(IRNW,IS)

                                    CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),CURIYR,YEAR,OVRCST,CPR, &
                                       UPCAPD(1,IECP),UPGNPD,EWGINT,DEBT_F,EWGROR,TXBOOK,FNBOOK)
                                    PRATIO = TXBOOK / FNBOOK
                                    CAPNNSTL = FNBOOK
                                    CALL EPCNBLD(DBLE(DEBT_F),PRATIO,DBLE(UPNRPRM),DBLE(UPNIPRM),DBLE(UTROE),DBLE(UTINT),DBLE(UPTXRT), &
                                       UPTXLF(IECP),UPNCLF(IECP),UPNLLF(IECP),CAPNUG)

                                    IF (IECP .EQ. WIWD .OR. IECP .EQ. WIBI) THEN
                                       TRANS = (DBLE(FL_CNXT_CST(NERC,FLRG) + EPCTRM(IECP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IECP))
                                    ELSE
                                       TRANS = (DBLE(EPCOVR(IECP) + EPCTRM(IECP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IECP))
                                    END IF
                                    OBJVAL = (( CAPNNSTL * CAPNUG + TRANS ) / CRF(DSCRT,IFPH2) ) * PWF(DSCRT,OLYR)
                                    IF (IECP .EQ. WIHY) THEN
                                       VALUE = OBJVAL + PV$FOM * EPFXSUP(IRNW,IS) + PV$TOM + PV$VOM * EPVRSUP(IRNW,IS) + PV$EXT - PV$SOM - PV$GPS
                                    ELSE
                                       VALUE = OBJVAL + PV$FOM * EPFXSUP(IRNW,IS) + PV$TOM +  PV$EXT - PV$SOM
                                    ENDIF

!                                   CHECK FOR SUBSIDY LIMIT FOR PTC -- ADD BACK TO UNSUBSIDIZED CAPACITY

                                    IF (UPSUBCAS(IECP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                       VALUE = VALUE + PV$SOM
                                    END IF
                                 ELSEIF (EPIROVR(IRNW) .EQ. 0.0) THEN
                                    VALUE = DBLE(7000.0)
                                 ENDIF
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (UF_DBG .GT. 0 .AND. (MOD(YEAR,5) .EQ. 1)) &
                                    WRITE(18,'(A,2I4,2(2x,A),3F14.6,F9.4,3F8.4)') ' EP$BRNW2:YEAR,IP,COL,ROW,VAL,OBJVAL,TRANS,EPCOVR,EPCTRM,UPGNPD,EPCCRF:', &
                                    YEAR,IP,COLUMN,ROW,VALUE,OBJVAL,TRANS,EPCOVR(IECP),EPCTRM(IECP),UPGNPD(YEAR),EPCCRF(IECP)

                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,73')

!                                COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR--NUGS

                                 IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP .AND. IS .EQ. 1) THEN
                                    CAPLEV = (( CAPNNSTL * CAPNUG ) / CRF(DSCRT,IFPH2) ) * PWF(DSCRT,OLYR)
                                    CAPLEV = CAPLEV / PVGNP
                                    EPLVCAP(IECP,IOWN) = CAPLEV
                                    EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                                    EPLVTRN(IECP) = (TRANS / CRF(DSCRT,IFPH2) * PWF(DSCRT,OLYR)) / PVGNP

!                                   STORE EMM/COAL REGION COSTS FOR BIOMASS PLANTS

                                    IF (IECP .EQ. WIWD) THEN
                                       WDLCAP(NERC,FLRG,IOWN) = EPLVCAP(IECP,IOWN)
                                       WDLFCF(NERC,FLRG,IOWN) = EPLVFCF(IECP,IOWN)
                                       WDLTRN(NERC,FLRG) = EPLVTRN(IECP)
                                    END IF
                                    IF (IECP .EQ. WIBI) THEN
                                       BILCAP(NERC,FLRG,IOWN) = EPLVCAP(IECP,IOWN)
                                       BILFCF(NERC,FLRG,IOWN) = EPLVFCF(IECP,IOWN)
                                       BILTRN(NERC,FLRG) = EPLVTRN(IECP)
                                    END IF
                                    IF (IECP .EQ. WIHY) THEN
                                       EPLVBCK(IECP) = EPIRCCR(IRNW)
                                    ELSE
                                       EPLVBCK(IECP) = 1.0
                                    ENDIF
                                 END IF
                              END IF

!                             LOOP OVER REMAINING YEARS IN THE EXPLICIT PLANNING HORIZON

                              DO JYR = OLYR , UNXPH

!                                CAPACITY ROW

                                 IF (IECP .EQ. WIWD .OR. IECP .EQ. WIBI) THEN
                                    DO ISP = 1 , EPNMSP
                                       ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FLRG)//UPLDCD(ISP)//UPYRCD(JYR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FLRG),UPLDCD(ISP),UPYRCD(JYR),':!x:') ! exception: uses upldcd(isp)(aimms seasonx) instead of scode(isp) (aimms season)
                                       VALUE = DBLE( - 1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,74')
                                    END DO

                                    ROW_MAX_GEN = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'X'//EPFLCD(FLRG)//'X'//UPYRCD(JYR); call makmsk(ROW_MAX_GEN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':X:',EPFLCD(FLRG),':X:',UPYRCD(JYR))
                                    VALUE = (EPRCFC(IP) * DBLE(8.760))
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    VALUE = - MAX( VALUE , 0.0)
                                    IF (VALUE .LT. -ECP_MIN) CALL CVAL(COLUMN,ROW_MAX_GEN,VALUE,COLUMN_mask,ROW_MAX_GEN_mask,'EP$BRNW,75')

                                 ELSEIF (IECP .NE. WIHY .AND. IECP .NE. WIP2) THEN
                                    DO ISP = 1 , EPNMSP
                                       ROW = 'C'//UPRGCD(NERC)//UPLNTCD(IECP)//'XX'//UPLDCD(ISP)//UPYRCD(JYR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(IECP),':XX:',UPLDCD(ISP),UPYRCD(JYR))
                                       VALUE = DBLE( - 1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,76')
                                    END DO

                                    ROW_MAX_GEN = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'XXX'//UPYRCD(JYR); call makmsk(ROW_MAX_GEN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XXX:',UPYRCD(JYR))
                                    VALUE = (EPRCFC(IP) * DBLE(8.760))
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    VALUE = - MAX( VALUE , 0.0)
                                    IF (VALUE .LT. -ECP_MIN) CALL CVAL(COLUMN,ROW_MAX_GEN,VALUE,COLUMN_mask,ROW_MAX_GEN_mask,'EP$BRNW,77')

                                 END IF

!                                RESERVE MARGIN ROW

                                 ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(JYR))
                                 IF (IECP .EQ. WIHY) THEN
                                    VALUE = DBLE(EPIRCCS(IRNW,IS))
                                 ELSE
                                    VALUE = DBLE(UPCCR(IECP))
                                 ENDIF
                                 IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,78')

!                                LIMIT ON P2 CAPACITY ROW, IF APPROPRIATE

                                 IF (IECP .EQ. WIP2 .AND. UPP2LIM(CURIYR + JYR - 1,NERC) .LT. 1.00)THEN
                                    ROW = 'L'//UPRGCD(NERC)//'P2XXX'//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':P2XXX:',UPYRCD(JYR))
                                    VALUE = DBLE(1.0)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,79')
                                 END IF

!                                BUILD LIMIT ROW

                                 IF (JYR .EQ. OLYR) THEN
                                    IF (UPOVBDSW .GT. 0 .AND. UPOVBDSW .LE. 2)THEN
                                       ROW = 'R'//UPRGCD(NERC)//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':YYYYY:',UPYRCD(JYR))
                                    ELSE
                                       ROW = 'R'//'U'//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',':U:',':YYYYY:',UPYRCD(JYR))
                                    END IF
                                    VALUE = DBLE(1.0)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,80')
                                 END IF

!                                TOTAL BUILDS FREE ROW

                                 IF (JYR .EQ. OLYR) THEN
                                    ROW = 'TOTBLD'//UPRGCD(NERC)//UPYRCD(JYR); call makmsk(ROW_mask,':TOTBLD:',UPRGCD(NERC),UPYRCD(JYR))
                                    VALUE = DBLE(1.0)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,81')
                                 END IF

!                                PUT INTO CAPACITY PORTFOLIO REQUIREMENT ROW, IF INCLUDED

                                 IF (UPCAPCAS .GT. 0 .AND. JYR .EQ. OLYR) THEN
                                    ROW = 'GCPSXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':GCPSXXX:',UPYRCD(JYR))
                                    VALUE = PVCPS
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,82')
                                 END IF

!                                PUT INTO NATIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                                 IF (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,MNUMNR) .LT. 999.0)THEN
                                    ROW = 'LU'//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':BLDX:')
                                    VALUE = DBLE(1.0)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,83')
                                 END IF

!                                PUT INTO REGIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                                 IF (UPBLDREG(IECP,NERC) .GT. 0.0 .AND. UPBLDREG(IECP,NERC) .LT. 999.0)THEN
                                    ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':BLDX:')
                                    VALUE = DBLE(1.0)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,84')
                                 END IF

!                                PUT INTO CONSTRAINT TO LIMIT SUBSIDIZED CAPACITY ADDITIONS, IF ANY

                                 IF (UPSUBCAS(IECP) .GT. 0 .AND. LOOPS .EQ. 2 .AND. JYR .EQ. OLYR) THEN
                                  IF (LIMSUB(IECP) .GT. 0.0 .AND. UPSUBLIM(IECP) .LT. 999.0) THEN
                                    ROW = 'LU'//UPLNTCD(IECP)//'SUBX'; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':SUBX:')
                                    VALUE = DBLE(1.0)
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,85')
                                 END IF
                                 END IF

!                                PURCHASED CAPACITY ROW

                                 ROW = 'P'//UPRGCD(NERC)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':P:',UPRGCD(NERC),':XXXXX:',UPYRCD(JYR))
                                 VALUE = 0.001 * OBJVAL
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .GT. 80.0) VALUE = 80.0
                                 IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,86')

!                                LOOP OVER VERTICAL LOAD SEGMENTS
!
                                 IF (IECP .EQ. WIP2) THEN
                                    DO VLS = 1 , EPNSTP(YEAR)
                                       IGRP = EPLDGR(VLS,YEAR)
                                       ISEG = EPLDSG(VLS,YEAR)
                                       ISP = EPGECP(IGRP)
                                       IF (ISEG .EQ. 1) THEN
                                       ROW = '2'//UPRGCD(NERC)//'P2'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_mask,':2:',UPRGCD(NERC),':P2:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                       VALUE = DBLE( - 1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,87')
                                       END IF
                                    ENDDO
                                 ENDIF

                                 IF (IECP .EQ. WIHY) THEN
                                    GEN = DBLE(0.0)
                                    DO VLS = 1 , EPNSTP(JYR)
                                       IGRP = EPLDGR(VLS,JYR)
                                       ISEG = EPLDSG(VLS,JYR)
                                       ISP = EPGECP(IGRP)
                                       ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                       VALUE = EPRSCFC(IP,IS,ISP) * HYDFAC
                                       GEN = GEN + VALUE * EPWDTH(VLS,JYR)
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,88')

                                       IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                          ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                          VALUE = SR_CREDIT(IECP) * (1.0 - (EPRSCFC(IP,IS,ISP) * HYDFAC))
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW_SR,VALUE,COLUMN_mask,ROW_SR_mask,'EP$BRNW,91')
                                       END IF
                                    END DO

                                    IF (GEN .LE. DBLE(0.0)) GEN = DBLE(0.0001)

!                                   Include in Free Row for Generation

                                    ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'GEN'//UPYRCD(JYR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':GEN:',UPYRCD(JYR))
                                    VALUE = GEN / 1000.0
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                    IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,92')

!                                   INCLUDE IN RENEWABLE GENERATION BOUND ROW

                                    IF (UPRNWSHRR(IECP,NERC).GT.0.00) THEN
                                       ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(JYR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(JYR))
                                       VALUE = DBLE(UPRNWSHRR(IECP,NERC))
                                       VALUE = VALUE * GEN / 1000.0
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       IF (VALUE .GT. DBLE( 0.999999) .AND. VALUE .LT. DBLE(1.000001)) VALUE = 1.000001
                                       IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,93')
                                    END IF

!                                   If National RPS and Regional and National Contributions Differ

                                    IF (UPRNWBND(CURIYR + JYR - 1) .GT. 0.005 .AND. UPRNWSHR(IECP) .GT. 0.0) THEN
                                       ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(JYR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(JYR))
                                       VALUE = DBLE(UPRNWSHR(IECP))
                                       VALUE = VALUE * GEN / 1000.0
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       IF (VALUE .GT. DBLE( 0.999999) .AND. VALUE .LT. DBLE(1.000001)) VALUE = 1.000001
                                       IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,94')
                                    END IF
                                 END IF                                   ! end if hydro if
!
!                                CO2 OUTPUT STANDARD - IF "NEW" GENERATION INCLUDED
!
                                 IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,JYR) .GT. 0.0 .AND. CO2_INCSW(IECP) .GT. 0.0)THEN
!                                   INCLUDE IN ERC SUPPLY CURVE ROW, IF APPROPRIATE
                                    IF (CO2_ERCSW .EQ. 1 .AND. CO2_ERCNR(NERC) .EQ. 2 .AND. CO2_INCSW(IECP) .GT. 0.0 .AND. CO2_STDTN(NERC) .LT. 2)THEN
                                       ROW_ERC = 'L'//URGNME(NERC)(6:7)//'ERCN'//UPYRCD(JYR); call makmsk(ROW_ERC_mask,':L:',URGNME(NERC)(6:7),':ERCN:',UPYRCD(JYR))
                                       CALL CVAL(COLUMN,ROW_ERC,-DBLE(EPRCFC(IRNW)*8.760),COLUMN_mask,ROW_ERC_mask,'EP$BRNW,97')
                                    ELSE
                                       IF (IECP .NE. WIWD .OR. IECP .EQ. WIBI)THEN
                                          CO2_LBMWH = DBLE(0.0)
                                       ELSE
                                          CO2_LBMWH = CO2_EMSWD * AVG_HTRT(IECP) / 1000.0
                                       END IF
                                       ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(JYR),':!NERC:')
                                       VAL_STD_CO2 = DBLE(EPRCFC(IRNW) * 8.760) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,JYR)) * DBLE(CO2_INCSW(IECP))
                                       VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                       IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                                       IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                       IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$BRNW,98')
                                    END IF
                                 END IF

!                                GRID RESILIENCE STANDARD, IF APPROPRIATE

                                 IF (GRD_RATS(IECP,NERC) .GE. 0.0)THEN
                                    ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(JYR))
                                    VAL_STD_GRD = DBLE(EPRCFC(IRNW) * 8.760) * DBLE(GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR))
!                                   VAL_STD_GRD = VAL_STD_GRD * 0.001
                                    IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                    IF (VAL_STD_GRD .NE. DBLE(0.0))CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$BRNW,99')
                                 END IF
                              END DO ! JYR
                           ENDIF ! (UPAVLYR(IECP) .LE. FULLYR .AND. EPIROVR(IRNW) .NE. 0.0 .AND. (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,NERC) .GT. 0.0))

!                          REVISE INTER-REGIONAL BUILD VECTORS IF ALLOWED

                           IF (UPETTSW(IECP) .EQ. 1) THEN
                              K = 1
                              DO WHILE (EPTIRGN(NERC,K) .GT. 0)
                                 IMPORT = EPTIRGN(NERC,K)

                                 CALL ECP_AVG_HTRT(FROM_LABEL, IMPORT, 0, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                                 RPS_RGN_IMP = MAP_NERC_TO_RPS_RGN(IMPORT)

                                 IF ((EPTCST(NERC,K) .LT. 9999.0 .AND. IECP .NE. WIWD) .OR. (EPTCST(NERC,K) .LT. 9999.0 .AND. IECP .NE. WIBI)) THEN

                                    IF (LOOPS .EQ. 1)THEN
                                       COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//UPRGCD(IMPORT)//SSTEP(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),UPRGCD(IMPORT),SSTEP(IS),UPYRCD(YEAR),':!IMP:')
                                    ELSE
                                       COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//UPRGCD(IMPORT)//SUB_CODE(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),UPRGCD(IMPORT),SUB_CODE(IS),UPYRCD(YEAR),':!SUBIMP:')
                                    END IF

!                                   IF TECHNOLOGY IS AVAILABLE THEN CREATE COEFFICIENTS

                                    IF (UPAVLYR(IECP) .LE. FULLYR .AND. EPIROVR(IRNW) .NE. 0.0 .AND.  &
                                       (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,NERC) .GT. 0.0)) THEN

!                                      IF CREATE PUT COLUMN INTO RENEWABLE BUILD ROW

!                                      ELASTICITY APPROACH USES REGIONAL AND NATIONAL CONSTRAINTS

                                       IF (ESTSWTCH(IECP) .GT. 0) THEN
                                          IF (IECP .NE. WIP2) THEN
                                             ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'REN'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':REN:',UPYRCD(YEAR))
                                             CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$BRNW,100')
                                          ENDIF

!                                         TECHNOLOGY SUPPLY CURVE ROW

                                          ROW = 'L'//'U'//UPLNTCD(IECP)//'RN'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',':U:',UPLNTCD(IECP),'RN',SSTEP(IS),UPYRCD(YEAR)) ! dispatch type element IN
                                          CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$BRNW,101')
                                       ELSEIF (ESTSWTCH(IECP) .LT. 0) THEN

!                                         P/Q SUPPLY CURVE APPROACH USES REGIONAL CONSTRAINTS ACROSS YEARS

                                          IF (IECP .NE. WIMS)THEN
                                             YR1 = YEAR
                                             YR2 = YEAR
                                          ELSE
                                             YR1 = YEAR
                                             YR2 = UNXPH - UPPLYR(IECP)
                                          END IF
                                          DO IYR = YR1 , YR2
                                             ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'RN'//SSTEP(IS)//UPYRCD(IYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':RN:',SSTEP(IS),UPYRCD(IYR))
                                             CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$BRNW,102')
                                          END DO
                                       ENDIF
!
!                                      PUT INTO NATIONAL ANNUAL BUILD LIMIT ROW
!
                                       ROW = 'LU'//UPLNTCD(IECP)//'ANN'//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':ANN:',UPYRCD(YEAR))
                                       VALUE = DBLE(1.0)
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,103')
!
!                                      OBJECTIVE FUNCTION

                                       IF (IOWN .EQ. 1) THEN    ! Utility Interregional Builds
                                          ROW = UPOBJ ; ROW_mask=UPOBJ
                                          IF (EPIROVR(IRNW) .NE. 0.0) THEN
!                                            TRANS = EPTCST(NERC,K) * UPGNPD(OLYR+CURIYR-1) * EPTCRF(NERC,K)         replace FCF with same value used in other transmission builds
                                             TRANS = EPTCST(NERC,K) * UPGNPD(OLYR+CURIYR-1) * EPCCRF(IECP)  
                                             OBJVAL = (( CAPNNSTL * CAPUTIL + TRANS) / CRF(DSCRT,IFPH2) ) * PWF(DSCRT,OLYR)
                                             IF (IECP .EQ. WIHY) THEN
                                                VALUE = OBJVAL + PV$FOM * EPFXSUP(IRNW,IS) + PV$TOM + PV$VOM * EPVRSUP(IRNW,IS) + PV$EXT - PV$SOM - PV$GPS
                                             ELSE
                                                VALUE = OBJVAL + PV$FOM * EPFXSUP(IRNW,IS) + PV$TOM +  PV$EXT - PV$SOM
                                             ENDIF

!                                            CHECK FOR SUBSIDY LIMIT FOR PTC -- ADD BACK TO UNSUBSIDIZED CAPACITY

                                             IF (UPSUBCAS(IECP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                                VALUE = VALUE + PV$SOM
                                             END IF
                                          ELSEIF (EPIROVR(IRNW) .EQ. 0.0) THEN
                                             VALUE = DBLE(7000.0)
                                          ENDIF
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,104')

                                       ELSE                     ! EWG Interregional Builds

                                          ROW = UPOBJ ; ROW_mask=UPOBJ
                                          IF (EPIROVR(IRNW) .NE. 0.0) THEN
!                                            TRANS = EPTCST(NERC,K) * UPGNPD(OLYR+CURIYR-1) * EPTCRF(NERC,K)         replace FCF with same value used in other transmission builds
                                             TRANS = EPTCST(NERC,K) * UPGNPD(OLYR+CURIYR-1) * EPCCRF(IECP)  
                                             OBJVAL = (( CAPNNSTL * CAPNUG + TRANS) / CRF(DSCRT,IFPH2) ) * PWF(DSCRT,OLYR)
                                             IF (IECP .EQ. WIHY) THEN
                                                VALUE = OBJVAL + PV$FOM * EPFXSUP(IRNW,IS) + PV$TOM + PV$VOM * EPVRSUP(IRNW,IS) + PV$EXT - PV$SOM - PV$GPS
                                             ELSE
                                                VALUE = OBJVAL + PV$FOM * EPFXSUP(IRNW,IS) + PV$TOM +  PV$EXT - PV$SOM
                                             ENDIF

!                                            CHECK FOR SUBSIDY LIMIT FOR PTC -- ADD BACK TO UNSUBSIDIZED CAPACITY

                                             IF (UPSUBCAS(IECP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                                VALUE = VALUE + PV$SOM
                                             END IF
                                          ELSEIF (EPIROVR(IRNW) .EQ. 0.0) THEN
                                             VALUE = DBLE(7000.0)
                                          ENDIF
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,105')
                                       END IF

!                                      LOOP OVER REMAINING YEARS IN THE EXPLICIT PLANNING HORIZON

                                       DO JYR = OLYR , UNXPH

!                                         RESERVE MARGIN ROW

                                          ROW = 'R'//UPRGCD(IMPORT)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(IMPORT),':XXXXX:',UPYRCD(JYR))
                                          IF (IECP .EQ. WIHY) THEN
                                             VALUE = DBLE(EPIRCCS(IRNW,IS) * (1.0 - EPTLOSS(NERC,IMPORT)))
                                          ELSE
                                             VALUE = DBLE(UPCCR(IECP))
                                          ENDIF
                                          IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,106')

!                                         BUILD LIMIT ROW

                                          IF (JYR .EQ. OLYR) THEN
                                             IF (UPOVBDSW .GT. 0 .AND. UPOVBDSW .LE. 2)THEN
                                                ROW = 'R'//UPRGCD(IMPORT)//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(IMPORT),':YYYYY:',UPYRCD(JYR))
                                             ELSE
                                                ROW = 'R'//'U'//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',':U:',':YYYYY:',UPYRCD(JYR))
                                             END IF
                                             VALUE = DBLE(1.0)
                                             CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,107')
                                          END IF

!                                         TOTAL BUILDS FREE ROW

                                          IF (JYR .EQ. OLYR) THEN
                                             ROW = 'TOTBLD'//UPRGCD(IMPORT)//UPYRCD(JYR); call makmsk(ROW_mask,':TOTBLD:',UPRGCD(IMPORT),UPYRCD(JYR))
                                             VALUE = DBLE(1.0)
                                             CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,108')
                                          END IF

!                                         PUT INTO CAPACITY PORTFOLIO REQUIREMENT ROW, IF INCLUDED

                                          IF (UPCAPCAS .GT. 0 .AND. JYR .EQ. OLYR) THEN
                                             ROW = 'GCPSXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':GCPSXXX:',UPYRCD(JYR))
                                             VALUE = PVCPS
                                             CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,109')
                                          END IF

!                                         PUT INTO NATIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                                          IF (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,MNUMNR) .LT. 999.0)THEN
                                             ROW = 'LU'//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':BLDX:')
                                             VALUE = DBLE(1.0)
                                             CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,110')
                                          END IF

!                                         PUT INTO REGIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                                          IF (UPBLDREG(IECP,NERC) .GT. 0.0 .AND. UPBLDREG(IECP,NERC) .LT. 999.0)THEN
                                             ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':BLDX:')
                                             VALUE = DBLE(1.0)
                                             CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,111')
                                          END IF

!                                         PUT INTO CONSTRAINT TO LIMIT SUBSIDIZED CAPACITY ADDITIONS, IF ANY

                                          IF (UPSUBCAS(IECP) .GT. 0 .AND. LOOPS .EQ. 2 .AND. JYR .EQ. OLYR) THEN
                                             IF (LIMSUB(IECP) .GT. 0.0 .AND. UPSUBLIM(IECP) .LT. 999.0) THEN
                                                ROW = 'LU'//UPLNTCD(IECP)//'SUBX'; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':SUBX:')
                                                VALUE = DBLE(1.0)
                                                CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,112')
                                             END IF
                                          END IF

!                                         CAPACITY ROW

                                          IF (IECP .NE. WIHY .AND. IECP .NE. WIP2) THEN
                                             DO ISP = 1 , EPNMSP
                                                ROW = 'C'//UPRGCD(IMPORT)//UPLNTCD(IECP)//'XX'// UPLDCD(ISP)//UPYRCD(JYR); call makmsk(ROW_mask,':C:',UPRGCD(IMPORT),UPLNTCD(IECP),':XX:', UPLDCD(ISP),UPYRCD(JYR))
                                                VALUE = -1.0 + EPTLOSS(NERC,IMPORT)
                                                IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                                CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,113')
                                             END DO

                                             ROW_MAX_GEN = 'E'//UPRGCD(IMPORT)//UPLNTCD(IECP)//'XXX'//UPYRCD(JYR); call makmsk(ROW_MAX_GEN_mask,':E:',UPRGCD(IMPORT),UPLNTCD(IECP),':XXX:',UPYRCD(JYR))
                                             VALUE = (EPRCFC(IP) * DBLE(8.760)) * (1.0 - EPTLOSS(NERC,IMPORT))
                                             IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                             VALUE = - MAX( VALUE , 0.0)
                                             IF (VALUE .LT. -ECP_MIN) CALL CVAL(COLUMN,ROW_MAX_GEN,VALUE,COLUMN_mask,ROW_MAX_GEN_mask,'EP$BRNW,114')

                                          ENDIF

!                                         PURCHASED CAPACITY ROW

                                          ROW = 'P'//UPRGCD(IMPORT)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':P:',UPRGCD(IMPORT),':XXXXX:',UPYRCD(JYR))
                                          VALUE = 0.001 * OBJVAL
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                          IF (VALUE .GT. 80.0) VALUE = 80.0
                                          IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,115')

!                                         LOOP OVER VERTICAL LOAD SEGMENTS

                                          IF (IECP .EQ. WIHY) THEN
                                             GEN = DBLE(0.0)
                                             DO VLS = 1 , EPNSTP(JYR)
                                                IGRP = EPLDGR(VLS,JYR)
                                                ISEG = EPLDSG(VLS,JYR)
                                                ISP = EPGECP(IGRP)
                                                ROW = 'L'//UPRGCD(IMPORT)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(IMPORT),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR)) ! aimms rLEL2
                                                VALUE = EPRSCFC(IP,IS,ISP) * HYDFAC * (1.0 - EPTLOSS(NERC,IMPORT))
                                                GEN = GEN + VALUE * EPWDTH(VLS,JYR)
                                                IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                                IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,116')

                                                IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                                   ROW_SR = 'R'//UPRGCD(IMPORT)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_SR_mask,':R:',UPRGCD(IMPORT),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                                   VALUE = SR_CREDIT(IECP) * (1.0 - (EPRSCFC(IP,IS,ISP) * HYDFAC * (1.0 - EPTLOSS(NERC,IMPORT))))
                                                   IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                                   IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW_SR,VALUE,COLUMN_mask,ROW_SR_mask,'EP$BRNW,119')
                                                END IF
                                             END DO
                                             IF (GEN .LE. DBLE(0.0)) GEN = DBLE(0.0001)

!                                            Include in Free Row for Generation

                                             ROW = 'F'//UPRGCD(IMPORT)//UPLNTCD(IECP)//'GEN'//UPYRCD(JYR); call makmsk(ROW_mask,':F:',UPRGCD(IMPORT),UPLNTCD(IECP),':GEN:',UPYRCD(JYR))
                                             VALUE = GEN / 1000.0
                                             IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                             IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                             IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,120')

!                                            INCLUDE IN RENEWABLE GENERATION BOUND ROW

                                             IF (UPRNWSHRR(IECP,IMPORT) .GT. 0.00) THEN
                                                ROW = 'G'//UPRGCD(RPS_RGN_IMP)//'RNWXX'//UPYRCD(JYR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN_IMP),':RNWXX:',UPYRCD(JYR))
                                                VALUE = DBLE(UPRNWSHRR(IECP,IMPORT))
                                                VALUE = VALUE * GEN / 1000.0
                                                IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                                IF (VALUE .GT. DBLE( 0.999999) .AND. VALUE .LT. DBLE(1.000001)) VALUE = 1.000001
                                                IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                                                CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,121')
                                             END IF

!                                            If National RPS and Regional and National Contributions Differ

                                             IF (UPRNWBND(CURIYR + JYR - 1) .GT. 0.005 .AND. UPRNWSHR(IECP) .GT. 0.0) THEN
                                                ROW = 'GURNWX'//UPRGCD(IMPORT)//UPYRCD(JYR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(IMPORT),UPYRCD(JYR))
                                                VALUE = DBLE(UPRNWSHR(IECP))
                                                VALUE = VALUE * GEN / 1000.0
                                                IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                                IF (VALUE .GT. DBLE( 0.999999) .AND. VALUE .LT. DBLE(1.000001)) VALUE = 1.000001
                                                IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = ECP_MIN
                                                CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BRNW,122')
                                             END IF
                                          END IF                                   ! end if hydro
!
!                                         CO2 OUTPUT STANDARD - IF "NEW" GENERATION INCLUDED
!      
                                          IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,JYR) .GT. 0.0 .AND. CO2_INCSW(IECP) .GT. 0.0)THEN
!                                            INCLUDE IN ERC SUPPLY CURVE ROW, IF APPROPRIATE
                                             IF (CO2_ERCSW .EQ. 1 .AND. CO2_ERCNR(IMPORT) .EQ. 2 .AND. CO2_INCSW(IECP) .GT. 0.0 .AND. CO2_STDTN(IMPORT))THEN
                                                ROW_ERC = 'L'//URGNME(IMPORT)(6:7)//'ERCN'//UPYRCD(JYR); call makmsk(ROW_ERC_mask,':L:',URGNME(IMPORT)(6:7),':ERCN:',UPYRCD(JYR))
                                                CALL CVAL(COLUMN,ROW_ERC,-DBLE(EPRCFC(IRNW)*8.760),COLUMN_mask,ROW_ERC_mask,'EP$BRNW,125')
                                             ELSE
                                                CO2_LBMWH = DBLE(0.0)
                                                ROW = 'ERCO2'//URGNME(IMPORT)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':ERCO2:',URGNME(IMPORT)(6:7),UPYRCD(JYR),':!NERC:')
                                                VAL_STD_CO2 = DBLE(EPRCFC(IRNW) * 8.760) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,JYR)) * DBLE(CO2_INCSW(IECP))
                                                VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                                IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                                                IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                                IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$BRNW,126')
                                             END IF
                                          END IF

!                                         GRID RESILIENCE STANDARD, IF APPROPRIATE

                                          IF (GRD_RATS(IECP,NERC) .GE. 0.0)THEN
                                             ROW = 'GRGRD'//URGNME(IMPORT)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':GRGRD:',URGNME(IMPORT)(6:7),UPYRCD(JYR))
                                             VAL_STD_GRD = DBLE(EPRCFC(IRNW) * 8.760) * DBLE(GRD_RATS(IECP,IMPORT) - GRD_NRYR(IMPORT,JYR))
!                                            VAL_STD_GRD = VAL_STD_GRD * 0.001
                                             IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                             IF (VAL_STD_GRD .NE. DBLE(0.0))CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$BRNW,127')
                                          END IF
                                       END DO ! JYR
                                    END IF
                                 END IF
                                 K = K + 1
                              END DO
                           END IF
                        END DO ! FRG
                        END DO ! LOOPS
                     END IF    ! (OLYR .LE. UNXPH .AND. EPBNDTYP(IRNW) .NE. 'Z' .AND. UPBLDTYP(NERC) .EQ. IOWN .AND. UPVTYP(IECP) .EQ. 1)
                  END DO       ! IOWN
               END DO          ! SUPPLY STEPS (IS)
            END IF             !(UPOVR(IECP) .LT. 9000.0)
         END IF                ! IECP > 0
      END DO                   ! IP
!
      RETURN
      END

!     EP$ORNW REVISES OPERATE STRUCTURE FOR RENEWABLE CAPACITY TYPES.

      SUBROUTINE EP$ORNW(NERC,YEAR)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'dispett'
      include 'dispin'
      include 'ecpcntl'
      include 'bildin'
      include 'wrenew'
      include 'wwdcomon'
      include 'bildout'
      include 'cdsparms'
      include 'uso2grp'
      include 'uefdout'
      include 'eusprc'
      include 'edbdef'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'
      include 'plntctl'

      COMMON /GPSECP/ GPSSUB
      REAL*8 GPSSUB(ECP_D_CAP,ECP_D_FPH)
!
      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)
!
      REAL*8 VALUE, VALUE_MIN_SR, VALUE_MIN_SR_MR, VALUE_MAX_SR, VALUE_MAX_SR_MR, VALUE_SR, VALUE_MR
      REAL*8 GEN, GEN_MIN_SR, GEN_MAX_SR, CAP_NMR, CAP_MR, MAX_CF
      REAL*8 VOMCST, PWF, SHOURS(ECP_D_MSP)
      REAL*8 GPS(ECP_D_FPH),GPSCST                                          ! LEV
      REAL*8 TRUNC
      INTEGER*4 YEAR,FULLYR,NERC,VLS,IVLS,IP,JYR,ICAP,MYR
      INTEGER*4 IGRP,ISEG
      INTEGER*4 IYR,JNOX,ECPt_TO,TST_NOX(NOX_D_GRP,ECP_D_CAP,ECP_D_XPH)
      REAL*8 DIGITS2
      REAL*8 PVV                                                          ! LEV
      REAL*8 PV$FUEL,PV$VOML,VOM(ECP_D_FPH),VOML(ECP_D_FPH),PVGNP             ! LEV
      REAL*8 LEVFUEL                                                      ! LEV
      REAL*8 CFC,HYDFAC,PSFAC,P2FAC,PS_TEST,P2_TEST
      REAL*8 CO2_LBMWH,VAL_STD_CO2,VAL_QTY_CO2, VAL_CAP_CO2
      REAL*8 VAL_STD_GRD
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      INTEGER*4 JVLS,NSTP(ECP_D_MSP),VLSMAP(ECP_D_VLS,ECP_D_MSP)
      INTEGER*4 LEV_SW,OLYR,OPYRS,KYR,ISP,JP,INOX                      ! LEV
      INTEGER*4 CLRG,TMP_MAP(MNUMNR)
      INTEGER*4 FLRG,FRG,NXT_FLRG(NDREG),N_FLRG,MR_FRG,CSRG
      CHARACTER*16 COLUMN, COLUMN_MR, COLUMN_MIN_SR, COLUMN_MAX_SR, COLUMN_MIN_SR_MR, COLUMN_MAX_SR_MR
      CHARACTER*16 ROW, ROWQ, ROW_NOX, ROW_SR, ROW_HY, ROW_MR, ROW_HY_MR, ROW_MAX_GEN
      CHARACTER*12 FROM_LABEL
      CHARACTER*2 ANOX,CNSCOD

      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN

      ecpsub='EP$ORNW'

!
!     STORE 111d SWITCH FOR MASS OR RATE STANDARDS FOR REGION
!
      DO ICAP = 1 , ECP_D_CAP
         CO2_PLTSW(ICAP) = CO2_PLTRG(ICAP,NERC)
      END DO

      DO RPS_RGN = 1 , MNUMNR
         MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
      END DO

      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN
         MAP_NERC_TO_RPS_RGN(8) = 9                 
      END IF

      RPS_RGN = MAP_NERC_TO_RPS_RGN(NERC)

      TMP_MAP(1) = 7
      TMP_MAP(2) = 6
      TMP_MAP(3) = 3
      TMP_MAP(4) = 8
      TMP_MAP(5) = 1
      TMP_MAP(6) = 4
      TMP_MAP(7) = 9
      TMP_MAP(8) = 10
      TMP_MAP(9) = 5
      TMP_MAP(10) = 2
      TMP_MAP(11) = 11
      TMP_MAP(12) = 12
      TMP_MAP(13) = 13
!
      IF (NERC .EQ. 1 .AND. YEAR .EQ. 1) THEN
         TST_NOX = 0
      END IF
!
      PSFAC = UFACPS
      P2FAC = UFACP2
      PS_TEST = 0.0
      P2_TEST = 0.0
!
      SHOURS = 0.0
      VLSMAP = 0
      DO IVLS = 1 , EPNSTP(YEAR)
         ISP = EPGECP(EPLDGR(IVLS,YEAR))
         SHOURS(ISP) = SHOURS(ISP) + EPWDTH(IVLS,YEAR) * 0.001
      END DO
      DO ISP = 1 , EPNMSP
         VLS = EPFRST(ISP,YEAR)
         JVLS = 0
         DO WHILE (VLS .GT. 0)
            JVLS = JVLS + 1
            VLSMAP(JVLS,ISP) = VLS
            VLS = EPNEXT(VLS,YEAR)
         END DO
         NSTP(ISP) = JVLS
      END DO

      IF (YEAR .LT. UNXPH) THEN
         FULLYR = YEAR + CURIYR + UHBSYR - 1
      ELSE
         FULLYR = MIN(UNYEAR + UHBSYR , UNFPH + CURIYR + UHBSYR - 1)
      END IF
      JYR = YEAR + CURIYR - 1
!
!     CALCULATE ANNUAL HYDRO CAPACITY FACTOR ADJUSTMENT
!
      MYR = MIN(CURIYR + YEAR - 1 , UNYEAR)
!     IF (NERC .NE. 6) THEN
         IF (USW_HYD .GT. 0) THEN
!           HYDFAC = (DBLE(URHYCFA(MYR)) / DBLE(URHYCFA(CURIYR))) * (DBLE(UQHYFAC(MYR,NERC)) / DBLE(UQHYFAC(CURIYR,NERC)))
            HYDFAC = DBLE(UQHYFAC(MYR,NERC)) / DBLE(UQHYFAC(CURIYR,NERC))
         ELSE
            HYDFAC = DBLE(1.0)
      END IF
!     ELSE
!        IF (USW_HYD .GT. 0) THEN
!           HYDFAC = DBLE(UQHYFAC(MYR,NERC)) / DBLE(UQHYFAC(CURIYR,NERC))
!        ELSE
!           HYDFAC = 1.0
!        END IF
!     END IF

!     LOOP ON CAPACITY TYPE AND REVISE THE OPERATE VECTOR

      FROM_LABEL = "EP_ORNW"

      DO IP = 1 , ECP_D_RNW
         ICAP = UCPRNWI(IP)
         IF (ICAP .GT. 0) THEN
            MAX_CF = 1.0 - UPFORT(ICAP)

!           SKIP IF NO EXISTING CAPACITY AND CAN'T BUILD NEW

            IF (UPOVR(ICAP) .LT. 9000.0 .OR. EPECAP(0,ICAP,YEAR) .GT. DBLE(0.0)) THEN

               IF (UPLNTCD(ICAP) .EQ. 'PS') THEN
                  PS_TEST = EPECAP(0,ICAP,YEAR)
               END IF
               IF (UPLNTCD(ICAP) .EQ. 'P2') THEN
                  P2_TEST = EPECAP(0,ICAP,YEAR) + 0.001
               ENDIF

!              INITIALIZE SWITCH FOR LEVELIZED COST CALCULATIONS

               LEV_SW = 0
               IF (EPECAP(0,ICAP,YEAR) .GT. DBLE(0.0) .OR. (UPVTYP(ICAP) .EQ. 1 .AND. UPAVLYR(ICAP) .LE. CURIYR + UHBSYR + UNFPH .AND. UPBLDREG(ICAP,NERC) .GT. 0.0)) THEN
                  IF (UPTOPR(ICAP) .EQ. 2) THEN       !Hydro should not be assigned to this type
                     IF (ICAP .EQ. WIWD .OR. ICAP .EQ. WIBI) THEN
                        N_FLRG = 0
                        DO FRG = 1 , UNFRGN
                           IF (FRG_EMM_MAP(NERC,FRG) .GT. 0.0) THEN
                              N_FLRG = N_FLRG + 1
                              NXT_FLRG(N_FLRG) = FRG

                              CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FRG, ICAP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                           END IF
                        END DO
                     ELSE
                        N_FLRG = 1
                        NXT_FLRG(1) = NERC

                        CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, ICAP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                     END IF

                     DO ISP = 1, EPNMSP
                        DO FRG = 1 , N_FLRG

                           GEN = EPRCFC(IP) * DBLE(SHOURS(ISP))

                           IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                              IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                 GEN_MIN_SR = SR_MIN_CF(ICAP) * DBLE(SHOURS(ISP))
                              ELSE
                                 GEN_MIN_SR = 0.1 * EPRCFC(IP) * DBLE(SHOURS(ISP))
                              END IF
                              GEN_MAX_SR = MAX_CF * DBLE(SHOURS(ISP))
                           END IF

                           FLRG = NXT_FLRG(FRG)

                           IF (ICAP .EQ. WIWD .OR. ICAP .EQ. WIBI) THEN
                              MR_FRG = FLRG
                           ELSE
                              MR_FRG = 0
                           END IF

                           CLRG = EPCLMP(FLRG)
                           CSRG = EPCSMP(FLRG)
                           WRITE(CNSCOD,'("0",I1)') CSRG
                           IF (ICAP .EQ. WIWD .OR. ICAP .EQ. WIBI) THEN
                              COLUMN = 'Z'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(ICAP)//'X'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':Z:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(ICAP),':X:',UPLDCD(ISP),UPYRCD(YEAR))
                              COLUMN_MR = 'Z'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(ICAP)//'M'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MR_mask,':Z:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(ICAP),':M:',UPLDCD(ISP),UPYRCD(YEAR))
                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 COLUMN_MIN_SR = 'J'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(ICAP)//'X'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_mask,':J:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(ICAP),':X:',UPLDCD(ISP),UPYRCD(YEAR))
                                 COLUMN_MIN_SR_MR = 'J'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(ICAP)//'M'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_MR_mask,':J:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(ICAP),':M:',UPLDCD(ISP),UPYRCD(YEAR))
                                 COLUMN_MAX_SR = 'U'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(ICAP)//'X'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MAX_SR_mask,':U:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(ICAP),':X:',UPLDCD(ISP),UPYRCD(YEAR))
                                 COLUMN_MAX_SR_MR = 'U'//UPRGCD(NERC)//EPFLCD(FLRG)//UPLNTCD(ICAP)//'M'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MAX_SR_MR_mask,':U:',UPRGCD(NERC),EPFLCD(FLRG),UPLNTCD(ICAP),':M:',UPLDCD(ISP),UPYRCD(YEAR))
                              END IF
                           ELSE
                              COLUMN = 'O'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':O:',UPRGCD(NERC),UPLNTCD(ICAP),':XX:',UPLDCD(ISP),UPYRCD(YEAR))
                              COLUMN_MR = 'O'//UPRGCD(NERC)//UPLNTCD(ICAP)//'MR'// UPLDCD(ISP) //UPYRCD(YEAR); call makmsk(COLUMN_MR_mask,':O:',UPRGCD(NERC),UPLNTCD(ICAP),':MR:', UPLDCD(ISP) ,UPYRCD(YEAR))
                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 COLUMN_MIN_SR = 'J'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_mask,':J:',UPRGCD(NERC),UPLNTCD(ICAP),':XX:',UPLDCD(ISP),UPYRCD(YEAR))
                                 COLUMN_MIN_SR_MR = 'J'//UPRGCD(NERC)//UPLNTCD(ICAP)//'MR'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_MR_mask,':J:',UPRGCD(NERC),UPLNTCD(ICAP),':MR:',UPLDCD(ISP),UPYRCD(YEAR))
                                 COLUMN_MAX_SR = 'U'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MAX_SR_mask,':U:',UPRGCD(NERC),UPLNTCD(ICAP),':XX:',UPLDCD(ISP),UPYRCD(YEAR))
                                 COLUMN_MAX_SR_MR = 'U'//UPRGCD(NERC)//UPLNTCD(ICAP)//'MR'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_MAX_SR_MR_mask,':U:',UPRGCD(NERC),UPLNTCD(ICAP),':MR:',UPLDCD(ISP),UPYRCD(YEAR))
                              END IF
                           END IF

!                          SATISFY MUSTRUN CONSTRAINT

                           IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN ! .AND. ICAP .NE. WIHY) THEN
                              ROW_MR = 'Q'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XXX'//UPYRCD(YEAR); call makmsk(ROW_MR_mask,':Q:',UPRGCD(NERC),UPLNTCD(ICAP),':XXX:',UPYRCD(YEAR))

                              VALUE = EPRCFC(IP) * DBLE(8.760)
                              CALL CVAL(COLUMN_MR,ROW_MR,VALUE,COLUMN_MR_mask,ROW_MR_mask,'EP$ORNW,1')

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                    VALUE_SR = SR_MIN_CF(ICAP) * SHOURS(ISP)
                                 ELSE
                                    VALUE_SR = 0.1 * EPRCFC(IP) * SHOURS(ISP)
                                 END IF
                                 CALL CVAL(COLUMN_MIN_SR_MR,ROW_MR,VALUE_SR,COLUMN_MIN_SR_MR_mask,ROW_MR_mask,'EP$ORNW,2')

                                 VALUE_SR = MAX_CF * SHOURS(ISP)
                                 CALL CVAL(COLUMN_MAX_SR_MR,ROW_MR,VALUE_SR,COLUMN_MAX_SR_MR_mask,ROW_MR_mask,'EP$ORNW,3')
                              END IF
                           END IF

!                          PUT OPERATES INTO CAPACITY AND ENERGY BALANCE ROWS.

                           IF (ICAP .EQ. WIWD .OR. ICAP .EQ. WIBI) THEN
                              ROW = 'C'//UPRGCD(NERC)//UPLNTCD(ICAP)//'X' //EPFLCD(FLRG)//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(ICAP),':X:' ,EPFLCD(FLRG),UPLDCD(ISP),UPYRCD(YEAR),':!x:') ! exception: uses upldcd(isp)(aimms seasonx) instead of scode(isp) (aimms season)
                              ROW_MR = 'C'//UPRGCD(NERC)//UPLNTCD(ICAP)//'M' //EPFLCD(FLRG)//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_MR_mask,':C:',UPRGCD(NERC),UPLNTCD(ICAP),':M:' ,EPFLCD(FLRG),UPLDCD(ISP),UPYRCD(YEAR),':!x:')
                              ROW_MAX_GEN = 'E'//UPRGCD(NERC)//UPLNTCD(ICAP)//'X' //EPFLCD(FLRG)//'X'//UPYRCD(YEAR); call makmsk(ROW_MAX_GEN_mask,':E:',UPRGCD(NERC),UPLNTCD(ICAP),':X:' ,EPFLCD(FLRG),':X:',UPYRCD(YEAR))
                           ELSE
                              ROW = 'C'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':C:',UPRGCD(NERC),UPLNTCD(ICAP),':XX:',UPLDCD(ISP),UPYRCD(YEAR))
                              ROW_MR = 'C'//UPRGCD(NERC)//UPLNTCD(ICAP)//'MX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_MR_mask,':C:',UPRGCD(NERC),UPLNTCD(ICAP),':MX:',UPLDCD(ISP),UPYRCD(YEAR))
                              ROW_MAX_GEN = 'E'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XXX'//UPYRCD(YEAR); call makmsk(ROW_MAX_GEN_mask,':E:',UPRGCD(NERC),UPLNTCD(ICAP),':XXX:',UPYRCD(YEAR))
                           END IF

                              CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$ORNW,5')

                              CALL CVAL(COLUMN,ROW_MAX_GEN,GEN,COLUMN_mask,ROW_MAX_GEN_mask,'EP$ORNW,6')

                           IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                              CALL CVAL(COLUMN_MR,ROW_MR,DBLE(1.0),COLUMN_MR_mask,ROW_MR_mask,'EP$ORNW,7')
                           END IF

                           IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 CALL CVAL(COLUMN_MIN_SR,ROW,DBLE(1.0),COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,10')
                                 CALL CVAL(COLUMN_MAX_SR,ROW,DBLE(1.0),COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,11')
                                 CALL CVAL(COLUMN_MIN_SR,ROW_MAX_GEN,GEN_MIN_SR,COLUMN_MIN_SR_mask,ROW_MAX_GEN_mask,'EP$ORNW,12')
                                 CALL CVAL(COLUMN_MAX_SR,ROW_MAX_GEN,GEN_MAX_SR,COLUMN_MAX_SR_mask,ROW_MAX_GEN_mask,'EP$ORNW,13')

                              IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN ! .AND. ICAP .NE. WIHY) THEN
                                 CALL CVAL(COLUMN_MIN_SR_MR,ROW_MR,DBLE(1.0),COLUMN_MIN_SR_MR_mask,ROW_MR_mask,'EP$ORNW,14')
                                 CALL CVAL(COLUMN_MAX_SR_MR,ROW_MR,DBLE(1.0),COLUMN_MAX_SR_MR_mask,ROW_MR_mask,'EP$ORNW,15')
                              END IF
                           END IF

!                          NOX EMISSIONS CONSTRAINT

                           IF (YEAR .GT. NOX_LT) THEN
                              JP = ICAP
                              DO INOX = 1 , NOX_GRP
                                 ANOX = NOX_RG(INOX)
                                 ROW = 'EUN'//UPLNTCD(ICAP)//ANOX//UPYRCD(YEAR); call makmsk(ROW_mask,':EUN:',UPLNTCD(ICAP),ANOX,UPYRCD(YEAR))
                                 TST_NOX(INOX,ICAP,YEAR) = 1
                                 VALUE = 0.0
                                 VALUE_MR = 0.0
                                 VALUE_MIN_SR = 0.0
                                 VALUE_MIN_SR_MR = 0.0
                                 VALUE_MAX_SR = 0.0
                                 VALUE_MAX_SR_MR = 0.0

                                 VALUE = VALUE + DBLE(0.0005) * GEN * AVG_HTRT(JP) * EPNOX_G(ISP,YEAR,JP,INOX)  
                                 VALUE_MR = VALUE_MR + DBLE(0.0005) * GEN * AVG_HTRT_MR(JP) * EPNOX_G(ISP,YEAR,JP,INOX) 

                                 IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                    VALUE_MIN_SR = VALUE_MIN_SR + DBLE(0.0005) * GEN_MIN_SR * AVG_HTRT(JP) * EPNOX_G(ISP,YEAR,JP,INOX)  
                                    VALUE_MAX_SR = VALUE_MAX_SR + DBLE(0.0005) * GEN_MAX_SR * AVG_HTRT(JP) * EPNOX_G(ISP,YEAR,JP,INOX)  
                                    VALUE_MIN_SR_MR = VALUE_MIN_SR_MR + DBLE(0.0005) * GEN_MIN_SR * AVG_HTRT_MR(JP) * EPNOX_G(ISP,YEAR,JP,INOX) 
                                    VALUE_MAX_SR_MR = VALUE_MAX_SR_MR + DBLE(0.0005) * GEN_MAX_SR * AVG_HTRT_MR(JP) * EPNOX_G(ISP,YEAR,JP,INOX) 
                                 END IF

!                                WRITE(6,3517) CURIRUN, CURCALYR, YEAR, NERC, ICAP, JP, INOX, ISP, MR_FRG, ROW, COLUMN, EPNOX_G(ISP,YEAR,JP,INOX), EPECAP_MR(MR_FRG,ICAP,YEAR), GEN, GEN_MIN_SR, GEN_MAX_SR, &
!                                   AVG_HTRT(JP), AVG_HTRT_MR(JP), VALUE, VALUE_MR, VALUE_MIN_SR, VALUE_MIN_SR_MR, VALUE_MAX_SR, VALUE_MAX_SR_MR, ECP_MIN
!3517                            FORMAT(1X,"EP_ORNW_NOX",9(":",I4),2(":",A16),14(":",F21.6))

                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,16')
                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                    IF (USW_DIGIT .GT. 0)VALUE_MR = DIGITS2( VALUE_MR , DIGITS_PARM)
                                    IF (VALUE_MR .GT. ECP_MIN) CALL CVAL(COLUMN_MR,ROW,VALUE_MR,COLUMN_MR_mask,ROW_mask,'EP$ORNW,17')
                                 END IF

                                 IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                    IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                    IF (VALUE_MIN_SR .GT. ECP_MIN) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,18')
                                    IF (VALUE_MAX_SR .GT. ECP_MIN) CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,19')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN ! .AND. ICAP .NE. WIHY) THEN
                                       IF (USW_DIGIT .GT. 0)VALUE_MIN_SR_MR = DIGITS2( VALUE_MIN_SR_MR , DIGITS_PARM)
                                       IF (VALUE_MIN_SR_MR .GT. ECP_MIN) CALL CVAL(COLUMN_MIN_SR_MR,ROW,VALUE_MIN_SR_MR,COLUMN_MIN_SR_MR_mask,ROW_mask,'EP$ORNW,20')
                                       IF (USW_DIGIT .GT. 0)VALUE_MAX_SR_MR = DIGITS2( VALUE_MAX_SR_MR , DIGITS_PARM)
                                       IF (VALUE_MAX_SR_MR .GT. ECP_MIN) CALL CVAL(COLUMN_MAX_SR_MR,ROW,VALUE_MAX_SR_MR,COLUMN_MAX_SR_MR_mask,ROW_mask,'EP$ORNW,21')
                                    END IF
                                 END IF

                              END DO
                           END IF

!                          LOAD CONSTRAINTS

                           DO JVLS = 1 , NSTP(ISP)
                              VLS = VLSMAP(JVLS,ISP)
                              IGRP = EPLDGR(VLS,YEAR)
                              ISEG = EPLDSG(VLS,YEAR)
                              ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2
                              VALUE = EPRCFC(IP)

                              IF (VALUE .LT. ECP_MIN) VALUE = 0.0
                              VALUE = TRUNC( VALUE , 2)
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (VALUE .NE. 0.0) THEN
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,22')
                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,23')
                                 END IF
                              END IF

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN

                                 ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                                    VALUE_SR = (1.0 - EPRCFC(IP)) * SR_CREDIT(ICAP)
                                 IF (VALUE_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN,ROW_SR,VALUE_SR,COLUMN_mask,ROW_SR_mask,'EP$ORNW,28')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                       CALL CVAL(COLUMN_MR,ROW_SR,VALUE_SR,COLUMN_MR_mask,ROW_SR_mask,'EP$ORNW,29')
                                    END IF
                                 END IF
                              END IF
                           END DO

!                          MIN Electricity - MAX SR

                           IF (SR_CREDIT(ICAP) .GT. 0.0) THEN 
                              DO JVLS = 1 , NSTP(ISP)
                                 VLS = VLSMAP(JVLS,ISP)
                                 IGRP = EPLDGR(VLS,YEAR)
                                 ISEG = EPLDSG(VLS,YEAR)
                                 ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2

                                 ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

                                 IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                    VALUE_MIN_SR = SR_MIN_CF(ICAP)
                                 ELSE
                                    VALUE_MIN_SR = 0.1 * EPRCFC(IP)
                                 END IF
                                 IF (VALUE_MIN_SR .LT. ECP_MIN) VALUE_MIN_SR = 0.0
                                 VALUE_MIN_SR = TRUNC( VALUE_MIN_SR , 2)
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,30')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                       CALL CVAL(COLUMN_MIN_SR_MR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_MR_mask,ROW_mask,'EP$ORNW,31')
                                    END IF

                                 END IF

                                 VALUE_MIN_SR = 1.0 - VALUE_MIN_SR
                                 IF (VALUE_MIN_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MIN_SR,ROW_SR,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_SR_mask,'EP$ORNW,36')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                       CALL CVAL(COLUMN_MIN_SR_MR,ROW_SR,VALUE_MIN_SR,COLUMN_MIN_SR_MR_mask,ROW_SR_mask,'EP$ORNW,37')
                                    END IF
                                 END IF
                              END DO
                           END IF

!                          MAX Electricity - MIN SR

                           IF (SR_CREDIT(ICAP) .GT. 0.0) THEN 
                              DO JVLS = 1 , NSTP(ISP)
                                 VLS = VLSMAP(JVLS,ISP)
                                 IGRP = EPLDGR(VLS,YEAR)
                                 ISEG = EPLDSG(VLS,YEAR)
                                 ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2

                                 ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

                                 VALUE_MAX_SR = MAX_CF
                                 IF (VALUE_MAX_SR .LT. ECP_MIN) VALUE_MAX_SR = 0.0
                                 VALUE_MAX_SR = TRUNC( VALUE_MAX_SR , 2)
                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                 IF (VALUE_MAX_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,38')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                       CALL CVAL(COLUMN_MAX_SR_MR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_MR_mask,ROW_mask,'EP$ORNW,39')
                                    END IF
                                 END IF

                                 VALUE_MAX_SR = 1.0 - VALUE_MAX_SR
                                 IF (VALUE_MAX_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MAX_SR,ROW_SR,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_SR_mask,'EP$ORNW,44')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN !.AND. ICAP .NE. WIHY) THEN
                                       CALL CVAL(COLUMN_MAX_SR_MR,ROW_SR,VALUE_MAX_SR,COLUMN_MAX_SR_MR_mask,ROW_SR_mask,'EP$ORNW,45')
                                    END IF
                                 END IF
                              END DO
                           END IF

!                          OBJECTIVE FUNCTION VALUE ; COMPUTE VARIABLE OPERATING COST

                           ROW = UPOBJ ; ROW_mask=UPOBJ
                           IF (YEAR .LT. UNXPH) THEN
                              VOMCST = UPGNPD(JYR) * EPIRVOM(UIRRNWI(IP)) * PWF(DBLE(EPDSCRT),YEAR)
                              GPSCST = UPGNPD(JYR) * GPSSUB(ICAP,YEAR) * PWF(DBLE(EPDSCRT),YEAR)
                           ELSE
                              DO KYR = 1 , UNFPH - UNXPH + 1
                                 VOM(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * EPIRVOM(UIRRNWI(IP))
                                 GPS(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * GPSSUB(ICAP,KYR + YEAR - 1)
                              END DO
                              KYR = UNFPH - UNXPH + 1
                              VOMCST = PVV(VOM(1),ECP_D_FPH,KYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                              GPSCST = PVV(GPS(1),ECP_D_FPH,KYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                           END IF
                           VALUE = EPRCFC(IP) * SHOURS(ISP) * (VOMCST - GPSCST)
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                           IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                           IF (VALUE .NE. 0.0) THEN
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,46')
                              IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                 CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,47')
                              END IF
                           END IF

                           IF (SR_CREDIT(ICAP) .GT. 0.0) THEN 
                              IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                 VALUE_MIN_SR = SR_MIN_CF(ICAP) * SHOURS(ISP) * (VOMCST - GPSCST)
                              ELSE
                                 VALUE_MIN_SR = 0.1 * EPRCFC(IP) * SHOURS(ISP) * (VOMCST - GPSCST)
                              END IF
                              IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                              IF (VALUE_MIN_SR .GT. -ECP_MIN .AND. VALUE_MIN_SR .LT. ECP_MIN) VALUE_MIN_SR = 0.0
                              IF (VALUE_MIN_SR .NE. 0.0) THEN
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,48')
                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MIN_SR_MR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_MR_mask,ROW_mask,'EP$ORNW,49')
                                 END IF
                              END IF
                              VALUE_MAX_SR = MAX_CF * SHOURS(ISP) * (VOMCST - GPSCST)
                              IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                              IF (VALUE_MAX_SR .GT. -ECP_MIN .AND. VALUE_MAX_SR .LT. ECP_MIN) VALUE_MAX_SR = 0.0
                              IF (VALUE_MAX_SR .NE. 0.0) THEN
                                 CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,50')
                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MAX_SR_MR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_MR_mask,ROW_mask,'EP$ORNW,51')
                                 END IF
                              END IF
                           END IF

                           IF ((UPLNTCD(ICAP) .EQ. 'WD' .OR. UPLNTCD(ICAP) .EQ. 'BI') .AND. WSTBMEL .GT. 0) THEN

!                             PUT BIOMASS OPERATE IN FUEL SUPPLY ROW

                              ROW = 'F'//EPFLCD(CLRG)//'WDXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(CLRG),':WDXXX:',UPYRCD(YEAR))
                              VALUE = EPRCFC(IP) * DBLE(0.001) * SHOURS(ISP) * AVG_HTRT(ICAP)
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2(VALUE , DIGITS_PARM)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,52')
                              IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                 VALUE_MR = EPRCFC(IP) * DBLE(0.001) * SHOURS(ISP) * AVG_HTRT_MR(ICAP)
                                 IF (USW_DIGIT .GT. 0)VALUE_MR = DIGITS2(VALUE_MR , DIGITS_PARM)
                                 CALL CVAL(COLUMN_MR,ROW,VALUE_MR,COLUMN_MR_mask,ROW_mask,'EP$ORNW,53')
                              END IF

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                    VALUE_MIN_SR = SR_MIN_CF(ICAP) * DBLE(0.001) * SHOURS(ISP) * AVG_HTRT(ICAP)
                                 ELSE
                                    VALUE_MIN_SR = 0.1 * EPRCFC(IP) * DBLE(0.001) * SHOURS(ISP) * AVG_HTRT(ICAP)
                                 END IF
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,54')

                                 VALUE_MAX_SR = MAX_CF * DBLE(0.001) * SHOURS(ISP) * AVG_HTRT(ICAP)
                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                 CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,55')

                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                    IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                       VALUE_MIN_SR_MR = SR_MIN_CF(ICAP) * DBLE(0.001) * SHOURS(ISP) * AVG_HTRT_MR(ICAP)
                                    ELSE
                                       VALUE_MIN_SR_MR = 0.1 * EPRCFC(IP) * DBLE(0.001) * SHOURS(ISP) * AVG_HTRT_MR(ICAP)
                                    END IF
                                    IF (USW_DIGIT .GT. 0)VALUE_MIN_SR_MR = DIGITS2( VALUE_MIN_SR_MR , DIGITS_PARM)
                                    CALL CVAL(COLUMN_MIN_SR_MR,ROW,VALUE_MIN_SR_MR,COLUMN_MIN_SR_MR_mask,ROW_mask,'EP$ORNW,56')

                                    VALUE_MAX_SR_MR = MAX_CF * DBLE(0.001) * SHOURS(ISP) * AVG_HTRT_MR(ICAP)
                                    IF (USW_DIGIT .GT. 0)VALUE_MAX_SR_MR = DIGITS2( VALUE_MAX_SR_MR , DIGITS_PARM)
                                    CALL CVAL(COLUMN_MAX_SR_MR,ROW,VALUE_MAX_SR_MR,COLUMN_MAX_SR_MR_mask,ROW_mask,'EP$ORNW,57')
                                 END IF
                              END IF

!                             Make Captured CO2 available for use by EOR Projects for BECCS

                              IF (UPPCEF(ICAP) .GT. 0.0) THEN
                                 ROW = 'ZCSRG'//CNSCOD//UPYRCD(YEAR); call makmsk(ROW_mask,':ZCSRG:',CNSCOD,UPYRCD(YEAR))
                                 VAL_CAP_CO2 = UPPCEF(ICAP) * VALUE * (26) * 0.001 * (44.0 / 12.0)
                                 CALL CVAL(COLUMN,ROW,VAL_CAP_CO2,COLUMN_mask,ROW_mask,'EP$ORNW,165')

                                 IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                    VAL_CAP_CO2 = UPPCEF(ICAP) * VALUE_MIN_SR * (26) * 0.001 * (44.0 / 12.0)
                                    IF (VALUE_MIN_SR .GT. ECP_MIN) CALL CVAL(COLUMN_MIN_SR,ROW,VAL_CAP_CO2,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,166')

                                    VAL_CAP_CO2 = UPPCEF(ICAP) * VALUE_MAX_SR * (26) * 0.001 * (44.0 / 12.0)
                                    IF (VALUE_MAX_SR .GT. ECP_MIN) CALL CVAL(COLUMN_MAX_SR,ROW,VAL_CAP_CO2,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,167')

                                 END IF
                              END IF
                           END IF

!                          Include in Free Row for Generation

                           ROW = 'F'//UPRGCD(NERC)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))

!                          WRITE(6,4514) CURIRUN, CURCALYR, CURIYR+YEAR+1988, ISP, NERC, ICAP, IP, COLUMN, ROW, &
!                             EPRCFC(IP), EPECFC(ICAP,1), SHOURS(ISP), EPECAP(0,ICAP,YEAR), EPECAP_MR(0,ICAP,YEAR), (EPGCAP(0,RGRP,ICAP),RGRP=1,ECP_D_RET)
!4514                      FORMAT(1X,"EP_ORNW_XGEN",7(":",I4),2(":",A16),6(":",F21.6))

!                 ADJUST RPS GENERATION FOR DIFFERENCE BETWEEN CAPACITY FACTORS FOR EXISTING AND NEW PLANTS

                           VALUE = EPRCFC(IP) * SHOURS(ISP)
                           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                           IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                           IF (VALUE .NE. 0.0) THEN
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,58')
!                              IF (ICAP .NE. WIHY) THEN
                              IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                 CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,59')
                              END IF
 !                          END IF
                           END IF

                           IF (SR_CREDIT(ICAP) .GT. 0.0) THEN 
                              IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                 VALUE_MIN_SR = SR_MIN_CF(ICAP) * SHOURS(ISP)
                              ELSE
                                 VALUE_MIN_SR = 0.1 * EPRCFC(IP) * SHOURS(ISP)
                              END IF
                              IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                              IF (VALUE_MIN_SR .GT. -ECP_MIN .AND. VALUE_MIN_SR .LT. ECP_MIN) VALUE_MIN_SR = 0.0
                              IF (VALUE_MIN_SR .NE. 0.0) THEN
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,60')
                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN ! .AND. ICAP .NE. WIHY) THEN
                                    CALL CVAL(COLUMN_MIN_SR_MR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_MR_mask,ROW_mask,'EP$ORNW,61')
                                 END IF
                              END IF

                              VALUE_MAX_SR = MAX_CF * SHOURS(ISP)
                              IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                              IF (VALUE_MAX_SR .GT. -ECP_MIN .AND. VALUE_MAX_SR .LT. ECP_MIN) VALUE_MAX_SR = 0.0
                              IF (VALUE_MAX_SR .NE. 0.0) THEN
                                 CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,62')
                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                    CALL CVAL(COLUMN_MAX_SR_MR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_MR_mask,ROW_mask,'EP$ORNW,63')
                                 END IF
                              END IF
                           END IF

!                          INCLUDE IN RENEWABLE GENERATION BOUND ROW

                           IF (UPRNWSHRR(ICAP,NERC) .GT. 0.00) THEN
                              ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(YEAR))
                              VALUE = DBLE(UPRNWSHRR(ICAP,NERC))
                              VALUE = VALUE * EPRCFC(IP) * SHOURS(ISP)
                              IF (VALUE .LT. ECP_MIN) VALUE = 0.0
                              IF (VALUE .NE. 0.0) THEN
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,64')
                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,65')
                                 END IF
                              END IF

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN 
                                 VALUE_MIN_SR = DBLE(UPRNWSHRR(ICAP,NERC))
                                 IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                    VALUE_MIN_SR = VALUE_MIN_SR * SR_MIN_CF(ICAP) * SHOURS(ISP)
                                 ELSE
                                    VALUE_MIN_SR = VALUE_MIN_SR * 0.1 * EPRCFC(IP) * SHOURS(ISP)
                                 END IF
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .LT. ECP_MIN) VALUE_MIN_SR = 0.0
                                 IF (VALUE_MIN_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,66')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                       CALL CVAL(COLUMN_MIN_SR_MR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_MR_mask,ROW_mask,'EP$ORNW,67')
                                    END IF
                                 END IF

                                 VALUE_MAX_SR = DBLE(UPRNWSHRR(ICAP,NERC))
                                 VALUE_MAX_SR = VALUE_MAX_SR * MAX_CF * SHOURS(ISP)
                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                 IF (VALUE_MAX_SR .LT. ECP_MIN) VALUE_MAX_SR = 0.0
                                 IF (VALUE_MAX_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,68')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                       CALL CVAL(COLUMN_MAX_SR_MR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_MR_mask,ROW_mask,'EP$ORNW,69')
                                    END IF
                                 END IF
                              END IF

                           END IF

!                          If National RPS and Regional and National Contributions Differ

                           IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWSHR(ICAP) .GT. 0.0) THEN
                              ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))
                              VALUE = DBLE(UPRNWSHR(ICAP))
                              VALUE = VALUE * EPRCFC(IP) * SHOURS(ISP)
                              IF (VALUE .LT. ECP_MIN) VALUE = 0.0
                              IF (VALUE .NE. 0.0) THEN
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,70')
                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,71')
                                 END IF
                              END IF

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN 
                                 VALUE_MIN_SR = DBLE(UPRNWSHR(ICAP))
                                 IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                    VALUE_MIN_SR = VALUE_MIN_SR * SR_MIN_CF(ICAP) * SHOURS(ISP)
                                 ELSE
                                    VALUE_MIN_SR = VALUE_MIN_SR * 0.1 * EPRCFC(IP) * SHOURS(ISP)
                                 END IF
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .LT. ECP_MIN) VALUE_MIN_SR = 0.0
                                 IF (VALUE_MIN_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,72')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                       CALL CVAL(COLUMN_MIN_SR_MR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_MR_mask,ROW_mask,'EP$ORNW,73')
                                    END IF
                                 END IF

                                 VALUE_MAX_SR = DBLE(UPRNWSHR(ICAP))
                                 VALUE_MAX_SR = VALUE_MAX_SR * MAX_CF * SHOURS(ISP)
                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                 IF (VALUE_MAX_SR .LT. ECP_MIN) VALUE_MAX_SR = 0.0
                                 IF (VALUE_MAX_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,74')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                       CALL CVAL(COLUMN_MAX_SR_MR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_MR_mask,ROW_mask,'EP$ORNW,75')
                                    END IF
                                 END IF
                              END IF
                           END IF

!                          row to exclude existing generation from baseline

                           IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWBAS(ICAP) .GT. 0.00) THEN
                              ROW = 'G'//UPRGCD(NERC)//UPLNTCD(ICAP)//'BAS'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(NERC),UPLNTCD(ICAP),':BAS:',UPYRCD(YEAR))
                              VALUE = EPRCFC(IP) * SHOURS(ISP)
                              IF (VALUE .LT. ECP_MIN) VALUE = 0.0
                              IF (VALUE .NE. 0.0) THEN
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,76')
                                 IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,77')
                                 END IF
                              END IF

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN 
                                 IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP)) THEN
                                    VALUE_MIN_SR = SR_MIN_CF(ICAP) * SHOURS(ISP)
                                 ELSE
                                    VALUE_MIN_SR = 0.1 * EPRCFC(IP) * SHOURS(ISP)
                                 END IF
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .LT. ECP_MIN) VALUE_MIN_SR = 0.0
                                 IF (VALUE_MIN_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,78')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                       CALL CVAL(COLUMN_MIN_SR_MR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_MR_mask,ROW_mask,'EP$ORNW,79')
                                    END IF
                                 END IF

                                 VALUE_MAX_SR = MAX_CF * SHOURS(ISP)
                                 IF (USW_DIGIT .GT. 0)VALUE_MAX_SR = DIGITS2( VALUE_MAX_SR , DIGITS_PARM)
                                 IF (VALUE_MAX_SR .LT. ECP_MIN) VALUE_MAX_SR = 0.0
                                 IF (VALUE_MAX_SR .NE. 0.0) THEN
                                    CALL CVAL(COLUMN_MAX_SR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,80')
                                    IF (EPECAP_MR(MR_FRG,ICAP,YEAR) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                       CALL CVAL(COLUMN_MAX_SR_MR,ROW,VALUE_MAX_SR,COLUMN_MAX_SR_MR_mask,ROW_mask,'EP$ORNW,81')
                                    END IF
                                 END IF
                              END IF
                           END IF

!                          CO2 OUTPUT STANDARD

                           IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,YEAR) .GT. 0.0 .AND. CO2_PLTSW(ICAP) .GT. 0.0)THEN
                              IF (ICAP .EQ. WIWD .OR. ICAP .EQ. WIBI) THEN
                                 CO2_LBMWH = CO2_EMSWD * AVG_HTRT(ICAP) / 1000.0

!                                MASS

                                 ROWQ = 'EQCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROWQ_mask,':EQCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
                                 VAL_QTY_CO2 = EPRCFC(IP) * SHOURS(ISP) * DBLE(CO2_LBMWH) * DBLE(CO2_PLTSW(ICAP))
                                 VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                 IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2(VAL_QTY_CO2 , DIGITS_PARM)
                                 IF (VAL_STD_CO2 .GT. ECP_MIN) CALL CVAL(COLUMN,ROWQ,VAL_QTY_CO2,COLUMN_mask,ROWQ_mask,'EP$ORNW,91')

                                 IF (SR_CREDIT(ICAP) .GT. 0.0) THEN 
                                    IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP))THEN
                                       VAL_QTY_CO2 = SR_MIN_CF(ICAP) * SHOURS(ISP) * DBLE(CO2_LBMWH) * CO2_PLTSW(ICAP)
                                    ELSE
                                       VAL_QTY_CO2 = 0.1 * EPRCFC(IP) * SHOURS(ISP) * DBLE(CO2_LBMWH) * CO2_PLTSW(ICAP)
                                    END IF
                                    VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2(VAL_QTY_CO2 , DIGITS_PARM)
                                    IF (VAL_STD_CO2 .GT. ECP_MIN) CALL CVAL(COLUMN_MIN_SR,ROWQ,VAL_QTY_CO2,COLUMN_MIN_SR_mask,ROWQ_mask,'EP$ORNW,92')

                                    VAL_QTY_CO2 = MAX_CF * SHOURS(ISP) * DBLE(CO2_LBMWH) * CO2_PLTSW(ICAP)
                                    VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2(VAL_QTY_CO2 , DIGITS_PARM)
                                    IF (VAL_STD_CO2 .GT. ECP_MIN) CALL CVAL(COLUMN_MAX_SR,ROWQ,VAL_QTY_CO2,COLUMN_MAX_SR_mask,ROWQ_mask,'EP$ORNW,93')
                                 END IF
                              ELSE
                                 CO2_LBMWH = DBLE(0.0)
                              END IF

!                             RATE

                              ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
                              VAL_STD_CO2 = EPRCFC(IP) * SHOURS(ISP) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * DBLE(CO2_PLTSW(ICAP))
                              VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                              IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                              IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                              IF (VAL_STD_CO2 .NE. 0.0) CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$ORNW,94')

                              IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                 IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP))THEN
                                    VAL_STD_CO2 = SR_MIN_CF(ICAP) * SHOURS(ISP) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * CO2_PLTSW(ICAP)
                                 ELSE
                                    VAL_STD_CO2 = 0.1 * EPRCFC(IP) * SHOURS(ISP) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * CO2_PLTSW(ICAP)
                                 END IF
                                 VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                 IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                                 IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                 IF (VAL_STD_CO2 .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW,VAL_STD_CO2,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,95')

                                 VAL_STD_CO2 = MAX_CF * SHOURS(ISP) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * CO2_PLTSW(ICAP)
                                 VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                 IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                                 IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                 IF (VAL_STD_CO2 .NE. 0.0) CALL CVAL(COLUMN_MAX_SR,ROW,VAL_STD_CO2,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,96')
                              END IF
                           END IF

!                          GRID RESILIENCE STANDARD, IF APPROPRIATE

                           IF (GRD_RATS(ICAP,NERC) .GE. 0.0)THEN
                              ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(YEAR))
                              VAL_STD_GRD = EPRCFC(IP) * SHOURS(ISP) * DBLE(GRD_RATS(ICAP,NERC) - GRD_NRYR(NERC,YEAR))
!                             if (nerc .eq. 1 .and. year .eq. 1)write(6,3423) curiyr+1989,row,column,  &
!                               EPRCFC(IP) , SHOURS(ISP) , GRD_RATS(ICAP,NERC) , GRD_NRYR(NERC,YEAR),  &
!                               VAL_STD_GRD , VAL_STD_GRD * 0.001, ecp_min
!3423 format(1h ,'!grdrnw1',i4,a10,a10,10f10.4)
!                             VAL_STD_GRD = VAL_STD_GRD * 0.001
                              IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                              IF (VAL_STD_GRD .NE. DBLE(0.0))CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$ORNW,97')

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 IF (SR_MIN_CF(ICAP) .LT. EPRCFC(IP))THEN
                                    VAL_STD_GRD = SR_MIN_CF(ICAP) * SHOURS(ISP) * DBLE(GRD_RATS(ICAP,NERC) - GRD_NRYR(NERC,YEAR))
                                 ELSE
                                    VAL_STD_GRD = 0.1 * EPRCFC(IP) * SHOURS(ISP) * DBLE(GRD_RATS(ICAP,NERC) - GRD_NRYR(NERC,YEAR))
                                 END IF
!                                VAL_STD_GRD = VAL_STD_GRD * 0.001
                                 IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                 IF (VAL_STD_GRD .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW,VAL_STD_GRD,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,98')

                                 VAL_STD_GRD = MAX_CF * SHOURS(ISP) * DBLE(GRD_RATS(ICAP,NERC) - GRD_NRYR(NERC,YEAR))
!                                VAL_STD_GRD = VAL_STD_GRD * 0.001
                                 IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = DBLE(0.0)
                                 IF (VAL_STD_GRD .NE. 0.0) CALL CVAL(COLUMN_MAX_SR,ROW,VAL_STD_GRD,COLUMN_MAX_SR_mask,ROW_mask,'EP$ORNW,99')
                              END IF
                           END IF
 
!                          COMPUTE LEVELIZED VARIABLE O&M AND FUEL COSTS - Biomass Fuel Cost !

                           IF (LEV_SW .EQ. 0 .AND. YEAR .EQ. 1) THEN                                               ! LEV
                                 CLRG = EPCLMP(FLRG)
                                 LEV_SW = 1                                                                           ! LEV
                                 OLYR = YEAR + UPPLYR(ICAP)                                                           ! LEV
                                 OPYRS = UNFPH - OLYR + 1                                                             ! LEV
                                 DO KYR = 1 , OPYRS                                                                   ! LEV
                                    VOML(KYR) = EPIRVOM(UIRRNWI(IP)) * UPGNPD(KYR + CURIYR + OLYR - 2)                ! LEV
                                 END DO                                                                               ! LEV
                                 PV$VOML = PVV(VOML,ECP_D_FPH,OPYRS,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)          ! LEV
                                 CALL EP$LGNP(OLYR,OPYRS,EPDSCRT,PVGNP)                                               ! LEV
                                 EPLVVOM(ICAP) = PV$VOML / PVGNP                                                      ! LEV
                                 EPLVFLC(ICAP) = 0.0                                                                  ! LEV FUEL calculated in EP$LRPT
                           END IF                                                                                  ! LEV
                        END DO                                          ! FUEL REGIONS
                     END DO                                             ! ISP
                  ELSE IF (UPTOPR(ICAP) .EQ. 1 .OR. UPTOPR(ICAP) .EQ. 3) THEN    !hydro will always be here
                     DO VLS = 1 , EPNSTP(YEAR)
                        IGRP = EPLDGR(VLS,YEAR)
                        ISEG = EPLDSG(VLS,YEAR)
                        ISP = EPGECP(IGRP)
                        IF (EPESCFC(ISP,ICAP,YEAR) .GT. 0.0) THEN

                           IF (ICAP .EQ. WIHY) THEN
                              CAP_MR = 0.0
                           ELSE
                           CAP_MR = DBLE(EPECAP_MR(0,ICAP,YEAR)) * DBLE(0.001)
                           END IF
                           CAP_NMR = DBLE(EPECAP(0,ICAP,YEAR)) * DBLE(0.001) - CAP_MR

!                          IF CAPACITY QUALIFIES FOR NON-SPINNING RESERVE ALLOW CAPACITY TO REMAIN IDLE AND BE COUNTED AS NON-SPINNING RESERVE

!                          IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .EQ. WIHY) THEN
!                             COLUMN = 'N'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':N:',UPRGCD(NERC),UPLNTCD(ICAP),UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

!                             ROW_HY = 'C'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_HY_mask,':C:',UPRGCD(NERC),UPLNTCD(ICAP),UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

!                             VALUE = 1.0
!                             CALL CVAL(COLUMN,ROW_HY,VALUE,COLUMN_mask,ROW_HY_mask,'EP$ORNW,100')

!                             ROW_NSR = 'N'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_NSR_mask,':N:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

!                             VALUE = DBLE(1.0 - UPFORT(ICAP))
!                             IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
!                             CALL CVAL(COLUMN,ROW_NSR,VALUE,COLUMN_mask,ROW_NSR_mask,'EP$ORNW,101')

!                             VALUE = MAX(DBLE(0.0),CAP_NMR)
!                             IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
!                             CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ORNW,102')

!                             VALUE = -0.0001
!                             CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'EP$ORNW,103')
!                          END IF
                           
                           COLUMN = 'O'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':O:',UPRGCD(NERC),UPLNTCD(ICAP),UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

                           IF (CAP_MR .GT. 0.0) THEN
                              COLUMN_MR = 'H'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_MR_mask,':H:',UPRGCD(NERC),UPLNTCD(ICAP),UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                              ROW_HY_MR = 'K'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_HY_MR_mask,':K:',UPRGCD(NERC),UPLNTCD(ICAP),UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                           END IF

                           IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                              COLUMN_MIN_SR = 'J'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_mask,':J:',UPRGCD(NERC),UPLNTCD(ICAP),UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                              ROW_HY = 'C'//UPRGCD(NERC)//UPLNTCD(ICAP)//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_HY_mask,':C:',UPRGCD(NERC),UPLNTCD(ICAP),UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                           END IF

!                          REVISE UPPER BOUND ON 'YY' OPERATE

                           IF (ICAP .NE. WIP2) THEN
                              IF (ICAP .EQ. WIHY) THEN
                                 VALUE = MAX(DBLE(0.0),CAP_NMR) * (1.0 - UPFORT(ICAP))
                              ELSE
                              VALUE = MAX(DBLE(0.0),CAP_NMR)
                              END IF
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'EP$ORNW,104')

                              IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                 CALL CBND(UPBND,COLUMN_MIN_SR,DBLE(0.0),VALUE,COLUMN_MIN_SR_mask,'EP$ORNW,105')
                              END IF

                              IF (CAP_MR .GT. 0.0) THEN
                                 VALUE = MAX(DBLE(0.0),CAP_MR)
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 CALL CBND(UPBND,COLUMN_MR,DBLE(0.0),VALUE,COLUMN_MR_mask,'EP$ORNW,106')
                              END IF

                           ENDIF

!                          LOAD CONSTRAINTS

                           IF (ICAP .NE. WIP2 .OR. ISEG .EQ. 1) THEN
                              ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2
                              IF (ICAP .EQ. WIHY) THEN
                                 VALUE = HY_CF_ECP(ISEG,IGRP,NERC)
                              ELSE
                              VALUE = DBLE(1.0 - UPFORT(ICAP))
                              END IF
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,107')

                              IF (CAP_MR .GT. 0.0) THEN
                                 CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,108')
                              END IF

                              IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                 ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))

                                 VALUE_MIN_SR = DBLE(UPFORT(ICAP) * SR_CREDIT(ICAP))
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .NE. 0.0) CALL CVAL(COLUMN,ROW_SR,VALUE_MIN_SR,COLUMN_mask,ROW_SR_mask,'EP$ORNW,113')

                                 IF (CAP_MR .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MR,ROW_SR,VALUE_MIN_SR,COLUMN_MR_mask,ROW_SR_mask,'EP$ORNW,114')
                                 END IF

                                 VALUE_MIN_SR = SR_MIN_CF(ICAP)
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,115')

                                 VALUE_MIN_SR = (DBLE(1.0) - SR_MIN_CF(ICAP)) * SR_CREDIT(ICAP)
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW_SR,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_SR_mask,'EP$ORNW,116')
                              END IF

                           END IF

!                          ADD ELECTRICITY CONSUMPTION REQUIREMENT FOR PUMP STORAGE UNITS

                           IF (UPLNTCD(ICAP) .EQ. 'PS') THEN
                              ROW = 'PS'//UPRGCD(NERC)//'ELX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':PS:',UPRGCD(NERC),':ELX:',UPLDCD(ISP),UPYRCD(YEAR))
                              VALUE = PSFAC * DBLE(1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                              IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,117')

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 VALUE_MIN_SR = PSFAC * SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,118')
                              END IF

                           END IF

                           IF (UPLNTCD(ICAP) .EQ. 'P2' .AND. ISEG .EQ. 1) THEN
                              ROW = 'P2'//UPRGCD(NERC)//'ELX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':P2:',UPRGCD(NERC),':ELX:',UPLDCD(ISP),UPYRCD(YEAR))
                              VALUE = P2FAC * DBLE(1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                              IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,119')

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 VALUE_MIN_SR = P2FAC * SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,120')
                              END IF

                              ROW = '2'//UPRGCD(NERC)//'P2'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':2:',UPRGCD(NERC),':P2:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                              VALUE = DBLE(1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,121')

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 VALUE_MIN_SR = DBLE(1.0)
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,122')
                              END IF

                           END IF

!                          OBJECTIVE FUNCTION

                           IF (ICAP .NE. WIP2 .OR. ISEG .EQ. 1) THEN
                              ROW = UPOBJ ; ROW_mask=UPOBJ
                              IF (YEAR .LT. UNXPH) THEN
                                 VOMCST = UPGNPD(JYR) * EPIRVOM(UIRRNWI(IP)) * PWF(DBLE(EPDSCRT),YEAR)
                              ELSE
                                 DO KYR = 1 , UNFPH - UNXPH + 1
                                    VOM(KYR) = UPGNPD(KYR + CURIYR + UNXPH - 2) * EPIRVOM(UIRRNWI(IP))
                                 END DO
                                 KYR = UNFPH - UNXPH + 1
                                 VOMCST = PVV(VOM(1),ECP_D_FPH,KYR,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                              END IF
                              VALUE = (1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR) * VOMCST * DBLE(0.001)
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,123')

                              IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                 VALUE_MIN_SR = SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) * VOMCST * DBLE(0.001)
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,124')
                              END IF

                           END IF

!                          Include in Free Row for Generation

                           IF (ICAP .NE. WIP2 .OR. ISEG .EQ. 1) THEN
                              ROW = 'F'//UPRGCD(NERC)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
                              VALUE = (1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR) * DBLE(0.001)

                              IF (ICAP .EQ. WIHY) VALUE = HY_CF_ECP(ISEG,IGRP,NERC) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                              IF (UPLNTCD(ICAP) .EQ. 'HY') VALUE = VALUE / DBLE(HYDFAC)
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                              IF (VALUE .NE. 0.0) THEN
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,125')

                                 IF (CAP_MR .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,126')
                                 END IF
                              END IF

                              IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                 VALUE_MIN_SR = SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                 IF (UPLNTCD(ICAP) .EQ. 'HY') VALUE_MIN_SR = VALUE_MIN_SR / DBLE(HYDFAC)
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,127')
                              END IF

                           END IF

!                          INCLUDE IN RENEWABLE GENERATION BOUND ROW

                           IF (UPRNWSHRR(ICAP,NERC) .GT. 0.00) THEN
                              IF (ICAP .NE. WIP2 .OR. ISEG .EQ. 1) THEN
                                 ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(YEAR))
                                 VALUE = DBLE(UPRNWSHRR(ICAP,NERC))
                                 IF (ICAP .EQ. WIHY) THEN
                                    VALUE = VALUE * HY_CF_ECP(ISEG,IGRP,NERC) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                 ELSE
                                 VALUE = VALUE *  (1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                 END IF
                                 IF (UPLNTCD(ICAP) .EQ. 'HY') VALUE = VALUE / DBLE(HYDFAC)
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .NE. 0.0) THEN
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,128')

                                    IF (CAP_MR .GT. 0.0) THEN
                                       CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,129')
                                    END IF
                                 END IF

                                 IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                    VALUE_MIN_SR = DBLE(UPRNWSHRR(ICAP,NERC))
                                    VALUE_MIN_SR = VALUE_MIN_SR * SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                    IF (UPLNTCD(ICAP) .EQ. 'HY') VALUE_MIN_SR = VALUE_MIN_SR / DBLE(HYDFAC)
                                    IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                    IF (VALUE_MIN_SR .GT. -ECP_MIN .AND. VALUE_MIN_SR .LT. ECP_MIN) VALUE_MIN_SR = 0.0
                                    IF (VALUE_MIN_SR .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,130')
                                 END IF

                              END IF
                           END IF

!                          If National RPS and Regional and National Contributions Differ

                           IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWSHR(ICAP) .GT. 0.0) THEN
                              IF (ICAP .NE. WIP2 .OR. ISEG .EQ. 1) THEN
                                 ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(YEAR))
                                 VALUE = DBLE(UPRNWSHR(ICAP))
                                 IF (ICAP .EQ. WIHY) THEN
                                    VALUE = VALUE * HY_CF_ECP(ISEG,IGRP,NERC) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                 ELSE
                                 VALUE = VALUE *  (1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                 END IF
                                 IF (UPLNTCD(ICAP) .EQ. 'HY') VALUE = VALUE / DBLE(HYDFAC)
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .NE. 0.0) THEN
                                    CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,131')

                                    IF (CAP_MR .GT. 0.0) THEN
                                       CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,132')
                                    END IF
                                 END IF

                                 IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                    VALUE_MIN_SR = DBLE(UPRNWSHR(ICAP))
                                    VALUE_MIN_SR = VALUE_MIN_SR * SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                    IF (UPLNTCD(ICAP) .EQ. 'HY') VALUE_MIN_SR = VALUE_MIN_SR / DBLE(HYDFAC)
                                    IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                    IF (VALUE_MIN_SR .GT. -ECP_MIN .AND. VALUE_MIN_SR .LT. ECP_MIN) VALUE_MIN_SR = 0.0
                                    IF (VALUE_MIN_SR .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,133')
                                 END IF

                              END IF
                           END IF

!                          row to exclude existing generation from baseline

                           IF (UPRNWBND(CURIYR + YEAR - 1) .GT. 0.005 .AND. UPRNWBAS(ICAP) .GT. 0.00) THEN
                              ROW = 'G'//UPRGCD(NERC)//UPLNTCD(ICAP)//'BAS'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',UPRGCD(NERC),UPLNTCD(ICAP),':BAS:',UPYRCD(YEAR))
                              IF (ICAP .EQ. WIHY) THEN
                                 VALUE = HY_CF_ECP(ISEG,IGRP,NERC) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                              ELSE
                              VALUE = (1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                              END IF
                              IF (UPLNTCD(ICAP) .EQ. 'HY') VALUE = VALUE / DBLE(HYDFAC)
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                              IF (VALUE .NE. 0.0) THEN
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,134')

                                 IF (CAP_MR .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,135')
                                 END IF
                              END IF

                              IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                 VALUE_MIN_SR = SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) * DBLE(0.001)
                                 IF (UPLNTCD(ICAP) .EQ. 'HY') VALUE_MIN_SR = VALUE_MIN_SR / DBLE(HYDFAC)
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 IF (VALUE_MIN_SR .GT. -ECP_MIN .AND. VALUE_MIN_SR .LT. ECP_MIN) VALUE_MIN_SR = 0.0
                                 IF (VALUE_MIN_SR .NE. 0.0) CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,136')
                              END IF

                           END IF
!
!                          CO2 OUTPUT STANDARD
!
                           IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,YEAR) .GT. 0.0 .AND. CO2_PLTSW(ICAP) .GT. 0.0)THEN
                              IF (ICAP .NE. WIP2 .OR. ISEG .EQ. 1)THEN
                                 IF (ICAP .NE. WIWD .OR. ICAP .EQ. WIBI)THEN
                                    CO2_LBMWH = DBLE(0.0)
                                 ELSE
                                    CO2_LBMWH = CO2_EMSWD * AVG_HTRT(ICAP) / 1000.0
                                 END IF
                                 ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
                                 IF (ICAP .EQ. WIHY) THEN
                                    VAL_STD_CO2 = HY_CF_ECP(ISEG,IGRP,NERC) * EPWDTH(VLS,YEAR) * DBLE(0.001) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * DBLE(CO2_PLTSW(ICAP))
                                 ELSE
                                 VAL_STD_CO2 = (1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR) * DBLE(0.001) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * DBLE(CO2_PLTSW(ICAP))
                                 END IF
                                 VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                 IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                                 IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                 IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$ORNW,139')
                                 IF (SR_CREDIT(ICAP) .GT. 0.0 .AND. ICAP .NE. WIHY) THEN
                                    VAL_STD_CO2 = SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) * DBLE(0.001) * DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * DBLE(CO2_PLTSW(ICAP))
                                    IF (UPLNTCD(ICAP) .EQ. 'HY')VAL_STD_CO2 = VAL_STD_CO2 / HYDFAC
                                    VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2(VAL_STD_CO2 , DIGITS_PARM)
                                    IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                    IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN_MIN_SR,ROW,VAL_STD_CO2,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,140')
                                 END IF
                              END IF
                           END IF

!                          GRID RESILIENCE STANDARD, IF APPROPRIATE

                           IF (GRD_RATS(ICAP,NERC) .GE. 0.0)THEN
                              IF (ICAP .NE. WIP2 .OR. ISEG .EQ. 1)THEN
                                 ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(YEAR))
                                 VAL_STD_GRD = (1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR) * DBLE(0.001) * DBLE(GRD_RATS(ICAP,NERC) - GRD_NRYR(NERC,YEAR))
                                 IF (UPLNTCD(ICAP) .EQ. 'HY')VAL_STD_GRD = VAL_STD_GRD / HYDFAC
!                             if (nerc .eq. 1 .and. year .eq. 1)write(6,3424) curiyr+1989,row,column,  &
!                               1.0 - UPFORT(ICAP) , EPWDTH(VLS,YEAR) * 0.001 , GRD_RATS(ICAP,NERC) , GRD_NRYR(NERC,YEAR), hydfac,  &
!                               VAL_STD_GRD , VAL_STD_GRD * 0.001, ecp_min
!3424 format(1h ,'!grdrnw2',i4,a10,a10,10f10.4)
!                                VAL_STD_GRD = VAL_STD_GRD * 0.001
                                 IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = 0.0
                                 IF (VAL_STD_GRD .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$ORNW,141')
                                 IF (SR_CREDIT(ICAP) .GT. 0.0)THEN
                                    VAL_STD_GRD = SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) * DBLE(0.001) * DBLE(GRD_RATS(ICAP,NERC) - GRD_NRYR(NERC,YEAR))
                                    IF (UPLNTCD(ICAP) .EQ. 'HY')VAL_STD_GRD = VAL_STD_GRD / HYDFAC
!                                   VAL_STD_GRD = VAL_STD_GRD * 0.001
                                    IF (VAL_STD_GRD .GT. -ECP_MIN .AND. VAL_STD_GRD .LT. ECP_MIN)VAL_STD_GRD = 0.0
                                    IF (VAL_STD_GRD .NE. 0.0)CALL CVAL(COLUMN_MIN_SR,ROW,VAL_STD_GRD,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,142')
                                 END IF
                              END IF
                           END IF

!                          COMPUTE LEVELIZED VARIABLE O&M AND FUEL COSTS                                ! LEV

                           IF (LEV_SW .EQ. 0 .AND. YEAR .EQ. 1) THEN                                    ! LEV
                              IF (UPLNTCD(ICAP) .NE. 'HY') THEN                  ! calculated in brnw for hydro
                                 LEV_SW = 1                                                                ! LEV
                                 OLYR = YEAR + UPPLYR(ICAP)                                         ! LEV
                                 OPYRS = UNFPH - OLYR + 1                                                ! LEV
                                 DO KYR = 1 , OPYRS                                                        ! LEV
                                    VOML(KYR) = EPIRVOM(UIRRNWI(IP)) * UPGNPD(KYR + CURIYR + OLYR - 2)     ! LEV
                                 END DO                                                                    ! LEV
                                 PV$VOML = PVV(VOML,ECP_D_FPH,OPYRS,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1) ! LEV
                                 CALL EP$LGNP(OLYR,OPYRS,EPDSCRT,PVGNP)                                    ! LEV
                                 EPLVVOM(ICAP) = PV$VOML / PVGNP                                    ! LEV
                                 EPLVFLC(ICAP) = 0.0
                              ENDIF
                           END IF                                                                       ! LEV

!                          CAPACITY BALANCE ROW

                           IF (UPLNTCD(ICAP) .NE. 'P2' .AND. ICAP .NE. WIHY) THEN
                              ROW = 'E'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':E:',UPRGCD(NERC),UPLNTCD(ICAP),':XX:',UPLDCD(ISP),UPYRCD(YEAR))
                              IF (UPLNTCD(ICAP) .EQ. 'PS') THEN
                                 CALL CROWTYPE(ROW,'E       ',ROW_mask)
                              END IF
                              CFC = EPESCFC(ISP,ICAP,YEAR)
                              VALUE =  (DBLE(1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR)) / (DBLE(CFC) * SHOURS(ISP) * DBLE(1000.0)) 
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,143')

                              IF (CAP_MR .GT. 0.0) THEN
                                 CALL CVAL(COLUMN_MR,ROW,VALUE,COLUMN_MR_mask,ROW_mask,'EP$ORNW,144')

!                                COUNT GENERATION FOR MUSTRUN CONSTRAINT

                                 ROW_MR = 'Q'//UPRGCD(NERC)//UPLNTCD(ICAP)//'XXX'//UPYRCD(YEAR); call makmsk(ROW_MR_mask,':Q:',UPRGCD(NERC),UPLNTCD(ICAP),':XXX:',UPYRCD(YEAR))
                                 VALUE =  (DBLE(1.0 - UPFORT(ICAP)) * EPWDTH(VLS,YEAR)) * 0.001
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 CALL CVAL(COLUMN_MR,ROW_MR,VALUE,COLUMN_MR_mask,ROW_MR_mask,'EP$ORNW,145')
                              END IF

!                             WRITE(6,7131) CURIYR+UHBSYR,NERC,ICAP,ISP,VLS,YEAR,COLUMN,ROW,VALUE,CFC,UPFORT(ICAP),EPESCFC(ISP,ICAP,YEAR), &
!                                URHYCFA(CURIYR),HYDFAC,EPWDTH(VLS,YEAR),SHOURS(ISP)
! 7131                        FORMAT(1X,"OPERATES",6(":",I4),2(":",A8),8(":",F12.3))

                              IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW_HY,VALUE,COLUMN_mask,ROW_HY_mask,'EP$ORNW,146')
                                 CALL CVAL(COLUMN_MIN_SR,ROW_HY,VALUE,COLUMN_MIN_SR_mask,ROW_HY_mask,'EP$ORNW,147')

                                 IF (CAP_MR .GT. 0.0) THEN
                                    CALL CVAL(COLUMN_MR,ROW_HY_MR,VALUE,COLUMN_MR_mask,ROW_HY_MR_mask,'EP$ORNW,148')
                                 END IF

                                 VALUE_MIN_SR = SR_MIN_CF(ICAP) * EPWDTH(VLS,YEAR) / (DBLE(CFC) * SHOURS(ISP) * DBLE(1000.0))
                                 IF (USW_DIGIT .GT. 0)VALUE_MIN_SR = DIGITS2( VALUE_MIN_SR , DIGITS_PARM)
                                 CALL CVAL(COLUMN_MIN_SR,ROW,VALUE_MIN_SR,COLUMN_MIN_SR_mask,ROW_mask,'EP$ORNW,149')
                              END IF

                           END IF
                        END IF
                     END DO
                  END IF
               END IF
            END IF !(UPOVR(ICAP) .LT. 9000.0)
         END IF ! ICAP > 0
      END DO ! IP
!
!     SET UP STRUCTURE TO MOVE NOX FROM PLANT TYPE SPECIFIC ROWS TO REGIONAL or SEASONAL CONSTRAINT
!
      IF (NERC .EQ. UNRGNS .AND. YEAR .EQ. UNXPH) THEN
         DO IYR = 1 , UNXPH
            DO JNOX = 1 , NOX_GRP
               IF (IYR .GT. NOX_LT) THEN
                  ANOX = NOX_RG(JNOX)
                  ROW_NOX = 'EUNOX'//ANOX//UPYRCD(IYR); call makmsk(ROW_NOX_mask,':EUNOX:',ANOX,UPYRCD(IYR))
                  DO ECPt_TO = 1 , ECP_D_CAP
                     IF (TST_NOX(JNOX,ECPt_TO,IYR) .GT. 0) THEN
                        ROW = 'EUN'//UPLNTCD(ECPt_TO)//ANOX//UPYRCD(IYR); call makmsk(ROW_mask,':EUN:',UPLNTCD(ECPt_TO),ANOX,UPYRCD(IYR))
                        CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$ORNW,150')
                        CALL CVAL(ROW,ROW_NOX,DBLE(1.0),ROW_mask,ROW_NOX_mask,'EP$ORNW,151')
                        CALL CVAL(ROW,UPOBJ,ECP_MIN,ROW_mask,UPOBJ,'EP$ORNW,152')
                        CALL CROWTYPE(ROW,'L       ',ROW_mask)
                        CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$ORNW,153')
                     END IF
                  END DO
               END IF
            END DO
         END DO
      END IF
!
!     SET UP ROWS TO REQUIRE PUMP STORAGE UNITS TO USE OFF-PEAK ELECTRICITY
!
      IF (PS_TEST .GT. 0.0) THEN
         DO ISP = 1 , EPNMSP
            ROW = 'PS'//UPRGCD(NERC)//'ELX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':PS:',UPRGCD(NERC),':ELX:',UPLDCD(ISP),UPYRCD(YEAR))
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
         END DO
!
         DO VLS = 1 , EPNSTP(YEAR)
            IGRP = EPLDGR(VLS,YEAR)
            ISEG = EPLDSG(VLS,YEAR)
            ISP = EPGECP(IGRP)
!
            COLUMN = 'S'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':S:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
            CALL CBND(UPBND,COLUMN,DBLE(0.0),DBLE(0.001 * PS_TEST),COLUMN_mask,'EP$ORNW,154')
!
            ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2
            VALUE = -1.0
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,155')

            ROW = 'PS'//UPRGCD(NERC)//'ELX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':PS:',UPRGCD(NERC),':ELX:',UPLDCD(ISP),UPYRCD(YEAR))
            VALUE = -EPWDTH(VLS,YEAR) * DBLE(0.001)
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,158')
!
         END DO
      END IF
!
      IF (P2_TEST .GT. 0.0) THEN
         DO ISP = 1 , EPNMSP
            ROW = 'P2'//UPRGCD(NERC)//'ELX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':P2:',UPRGCD(NERC),':ELX:',UPLDCD(ISP),UPYRCD(YEAR))
            CALL CROWTYPE(ROW,'E       ',ROW_mask)
         END DO
!
         DO VLS = 1 , EPNSTP(YEAR)
            IGRP = EPLDGR(VLS,YEAR)
            ISEG = EPLDSG(VLS,YEAR)
            ISP = EPGECP(IGRP)
!
            COLUMN = '2'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':2:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
!
            ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2
            VALUE = -1.0
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,159')

            ROW = 'P2'//UPRGCD(NERC)//'ELX'//UPLDCD(ISP)//UPYRCD(YEAR); call makmsk(ROW_mask,':P2:',UPRGCD(NERC),':ELX:',UPLDCD(ISP),UPYRCD(YEAR))
            VALUE = -EPWDTH(VLS,YEAR) * DBLE(0.001)
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ORNW,162')
!
            IF (ISEG .EQ. 1) THEN
            ROW = '2'//UPRGCD(NERC)//'P2'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':2:',UPRGCD(NERC),':P2:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
            CALL CROWTYPE(ROW,'L       ',ROW_mask)
            CALL CVAL(COLUMN,ROW,DBLE(1.0),COLUMN_mask,ROW_mask,'EP$ORNW,163')
            END IF
         END DO
      END IF

      RETURN
      END

!     EP$BDGN REVISES BUILD STRUCTURE FOR DISTRIBUTION GENERATION.

      SUBROUTINE EP$BDGN(NERC,YEAR)
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'entcntl'
      include 'enewtech'
      include 'bildin'
      include 'bildout'
      include 'dispout'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'dispin'
      include 'dispuse'
      include 'dispett'
      include 'fuelin'
      include 'ecp_coal'
      include 'cdsparms'
      include 'uso2grp'
      include 'emission'
      include 'emeblk'
      include 'uefdout'
      include 'eusprc'
      include 'edbdef'
      include 'ecp_nuc'
      include 'emm_aimms'
      include 'ngtdmout'
      include 'ngtdmrep'
      include 'convfact'
!
      COMMON /GPSECP/ GPSSUB
      REAL*8 GPSSUB(ECP_D_CAP,ECP_D_FPH)
!
      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)
!
      REAL*8 VALUE,VALUES,OBJVAL,LEVFUEL,GEN
      REAL*8 CRF,PWF,PVV
      REAL*8 OVRCST,TXBOOK,FNBOOK,CAPNUG
      REAL*8 PRATIO,TRANS,CAPNNSTL,URATIO,CAPUNSTL,CAPUTIL
      REAL*8 PV$FUEL
      REAL*8 PV$PRM,PRM(ECP_D_FPH)
      REAL*8 PV$FOM,FOM(ECP_D_FPH)
      REAL*8 PV$FOML,FOML(ECP_D_FPH)
      REAL*8 PV$VOM,VOM(ECP_D_FPH)
      REAL*8 PV$VOML,VOML(ECP_D_FPH)
      REAL*8 PV$EXT,EXTR(ECP_D_FPH)
      REAL*8 PV$EXTL,EXTL(ECP_D_FPH)
      REAL*8 PV$SOM,SOM(ECP_D_FPH)
      REAL*8 PV$SOML,SOML(ECP_D_FPH)
      REAL*8 PV$GPS,GPS(ECP_D_FPH)
      REAL*8 PVGNP,CAPLEV
      REAL*8 SO2_CNT(ECP_D_NFL),CAR_CNT(ECP_D_NFL)
      REAL*8 HG_CNT(ECP_D_NFL)
      REAL*8 SHOURS(ECP_D_MSP),FOR,PMR
      REAL*8 MCF,LFR
      REAL*8 CF(ECP_D_VLS+1,ECP_D_MSP,ECP_D_XPH)
      REAL*8 ONE,ZERO,DERATE(ECP_D_DGN),ADJ(ECP_D_VLS)
      REAL*8 DIGITS2
      REAL*4 DEBT_F,UTINT,UTROE,EWGROE,EWGINT,EWGROR,UTROR
      REAL*4 CPR(ECP_D_LCP)
      REAL*8 ONE1(ECP_D_FPH),CPS(ECP_D_FPH)
      REAL*8 PVONE,PVCPS
      REAL*8 CSTDTADJ,CSTEQADJ,SHRDTADJ
      REAL*8 ANNRTE,ANNADJ,ANN(ECP_D_FPH),AN1(ECP_D_FPH)
      REAL*8 VAL_STD_CO2,VAL_QTY_CO2,CO2_LBMWH
      REAL*8 VAL_STD_GRD
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
!
      INTEGER*4 KYR,INOX,IGRP,ISEG,ST,I_HG,ISO2,IFLRG,IOWN,IGSRG
      INTEGER*4 JVLS,NSTP(ECP_D_MSP),VLSMAP(ECP_D_VLS,ECP_D_MSP,ECP_D_XPH)
      INTEGER*4 VLS,VLS1,LVLS,ISP,MODE,LOAD
      INTEGER*4 FUEL,IECP,IDGN
      INTEGER*4 YEAR,NERC,IP,IFPH2,OLYR,JYR,FULLYR
      INTEGER*4 GSYR1,GSYRL
      INTEGER*4 NUMLOOP,LOOPS
      INTEGER*4 TST_HGP(NDREG,ECP_D_CAP,ECP_D_XPH),IYR,TST_SO2P(MX_SO2_GRP,ECP_D_CAP,ECP_D_XPH)
      INTEGER*4 TST_NOX(NOX_D_GRP,ECP_D_CAP,ECP_D_XPH),ECPt_TO,JNOX
      CHARACTER*16 ROW,COLUMN,ROW_HG,ROW_NOX,ROW_SO2,ROW_CARR,ROW_SR,ROWQ
      CHARACTER*12 FROM_LABEL
      CHARACTER*2 ANOX
      CHARACTER*1 STEP(ECP_D_DGS)
      CHARACTER*1 SO2_CODE

      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN

      ecpsub='EP$BDGN'

!
!     STORE 111d SWITCH FOR MASS OR RATE STANDARDS FOR REGION
!
      DO IECP = 1 , ECP_D_CAP
         CO2_PLTSW(IECP) = CO2_PLTRG(IECP,NERC)
      END DO

      DO RPS_RGN = 1 , MNUMNR
         MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
      END DO

      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN
         MAP_NERC_TO_RPS_RGN(8) = 9                  
      END IF

      RPS_RGN = MAP_NERC_TO_RPS_RGN(NERC)

      ZERO = DBLE(0.0)
      ONE = DBLE(1.0)
      JYR = YEAR + CURIYR - 1
      DO ST = 1 , ECP_D_DGS
         STEP(ST) = UPRGCD(ST)
      END DO
!
      IF (NERC .EQ. 1 .AND. YEAR .EQ. 1) THEN
         TST_HGP = 0
         TST_NOX = 0
         TST_SO2P = 0
      END IF

!     DETERMINE CAPACITY FACTOR AT EACH LOAD STEP

      DO JYR = YEAR , ECP_D_XPH
         DO ISP = 1 , EPNMSP
            DO VLS = 1 , EPNSTP(JYR)
               VLSMAP(VLS,ISP,JYR) = 0
            END DO
            CF(1,ISP,JYR) = ZERO
            VLS = EPFRST(ISP,JYR)
            JVLS = 0
            SHOURS(ISP) = DBLE(0.0)
            DO WHILE (VLS .GT. 0)
               JVLS = JVLS + 1
               VLSMAP(JVLS,ISP,JYR) = VLS
               SHOURS(ISP) = SHOURS(ISP) + EPWDTH(VLS,JYR) * DBLE(0.001)
               VLS1 = JVLS + 1
               CF(VLS1,ISP,JYR) = CF(JVLS,ISP,JYR) + EPWDTH(VLS,JYR)
               VLS = EPNEXT(VLS,JYR)
            END DO
            IF (JYR .EQ. YEAR)NSTP(ISP) = JVLS
         END DO

         DO ISP = 1 , EPNMSP
            LVLS = NSTP(ISP) + 1
            IF (CF(LVLS,ISP,JYR) .GT. 0.0) THEN
               DO VLS = 1 , NSTP(ISP) + 1
                  CF(VLS,ISP,JYR) = CF(VLS,ISP,JYR) / CF(LVLS,ISP,JYR)
               END DO
            END IF
         END DO
      END DO

!     CALCULATE SO2 AND CARBON CONTENT OF ECP DG FUELS

      DO IECP = 1 , ECP_D_NFL
         IF (UPFLCD(IECP) .EQ. 'DD')THEN
            SO2_CNT(IECP) = EFRSO2(UIDS)
            CAR_CNT(IECP) = EDSEL(CURIYR) * 0.001
            HG_CNT(IECP) = UFRHG(UIDS,1)
         ELSEIF (UPFLCD(IECP) .EQ. 'DG')THEN
            SO2_CNT(IECP) = EFRSO2(UIGF)
            CAR_CNT(IECP) = ENGEL(CURIYR) * 0.001
            HG_CNT(IECP) = UFRHG(UIGF,1)
         END IF
      END DO

!     LOOP ON CAPACITY TYPE

      FROM_LABEL = "EP_BDGN"

      DO IP = 1 , ECP_D_DGN
         IECP = UCPDGNI(IP)
         IDGN = UCPDGNIS(IECP)

         CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, IECP, YEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

         OLYR = YEAR + UPPLYR(IECP)
         IF (OLYR .LT. UNXPH) THEN
         FULLYR = OLYR + CURIYR + UHBSYR - 1
         ELSE
            FULLYR = MIN(UNYEAR + UHBSYR , UNFPH + CURIYR + UHBSYR - 1)
         END IF

         DO JYR = 1, ECP_D_LCP
            CPR(JYR) = UPCPRO(IECP,JYR)
         END DO

         FUEL = UDFLTP(IDGN,1)

!        DETERMINE DERATE FACTORS

         PMR = DBLE(UPPMRT(IECP))
         FOR = DBLE(UPFORT(IECP))
         LFR = ONE - (DBLE(UPMCF(IECP)) / ((ONE - PMR) * (ONE - FOR)))
         MCF = DBLE(UPMCF(IECP)) / (ONE - PMR)
         DERATE(IP) = (ONE - FOR)


!        EXISTING CAPACITY

!        FIRST REVISE BOUND ON EXISTING CAPACITY VECTORS

         COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(IECP)//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XXX:',UPYRCD(YEAR),':!DGN:')
         VALUE = EPECAP(0,IECP,YEAR) * DBLE(0.001)
         IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
         CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$BDGN,1')

!        DETERMINE TOTAL GENERATION FOR OBJ AND SET UP LOAD ROWS

         GEN = ZERO
         DO ISP = 1 , EPNMSP
            DO MODE = 1 , NSTP(ISP)
               IF (CF(MODE,ISP,YEAR) .LE. DBLE(UPMCF(IECP)))THEN
                  LOAD = MODE
                  IF (CF(MODE + 1,ISP,YEAR) .LE. DBLE(UPMCF(IECP)))THEN
                     ADJ(MODE) = 1.0
                  ELSE
                     ADJ(MODE) = (UPMCF(IECP) - CF(MODE,ISP,YEAR)) / (CF(MODE + 1,ISP,YEAR) - CF(MODE,ISP,YEAR))
                  END IF
               END IF
            END DO
            DO JVLS = 1 , NSTP(ISP)
               VLS = VLSMAP(JVLS,ISP,YEAR)
               IGRP = EPLDGR(VLS,YEAR)
               ISEG = EPLDSG(VLS,YEAR)
               ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2
               IF (JVLS .LE. LOAD) THEN
                  GEN = GEN + DERATE(IP) * ADJ(JVLS) * EPWDTH(VLS,YEAR)
                  VALUE = DERATE(IP) * ADJ(JVLS)
                  IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,2')

                  IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                     ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
                     VALUE = SR_CREDIT(IECP) * (1.0 - (DERATE(IP) * ADJ(JVLS)))
                     IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                     IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW_SR,VALUE,COLUMN_mask,ROW_SR_mask,'EP$BDGN,3')
                  END IF
               END IF
            END DO
         END DO

!        Include in Free Row for Generation

         ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':GEN:',UPYRCD(YEAR))
         VALUE = GEN / 1000.0
         IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
         IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
         IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,4')

!        GAS/OIL CONSUMPTION

         IF (UPFLCD(FUEL) .EQ. 'DD') THEN
           ROW = 'FUELOL'//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELOLX:',UPYRCD(YEAR))
           VALUE = DBLE(0.000001) * GEN * AVG_HTRT(IECP)
           IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
           IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,56')
         ELSEIF (UPFLCD(FUEL) .EQ. 'DG')THEN
            ROW = 'FUELNG'//'X'//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELNGX:',UPYRCD(YEAR))
            VALUE = DBLE(0.000001) * GEN * AVG_HTRT(IECP)
            IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
            IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,57')
         END IF

!        CARBON EMISSIONS CONSTRAINT

         ROW = 'EUCARXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':EUCARXX:',UPYRCD(YEAR))
         VALUE = DBLE(0.000001) * GEN * AVG_HTRT(IECP) *  CAR_CNT(FUEL) * DBLE(1.0 - UPDCEF(IDGN))
         IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
         IF (VALUE .GT. ECP_MIN) THEN
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,5')

!           Include in Regional CO2 Limits, If Appropriate

            ROW_CARR = 'EUCAR'//CO2_RG(UPCARG(NERC))//UPYRCD(YEAR); call makmsk(ROW_CARR_mask,':EUCAR:',CO2_RG(UPCARG(NERC)),UPYRCD(YEAR))
            CALL CVAL(COLUMN,ROW_CARR,VALUE,COLUMN_mask,ROW_CARR_mask,'EP$BDGN,6')

         END IF

!        CO2 OUTPUT STANDARD

         IF (CO2_PLTSW(IECP) .GT. 0.0 .AND.  &
            (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,YEAR) .GT. 0.0))THEN
            CO2_LBMWH = AVG_HTRT(IECP) * DBLE(0.001) * DBLE(ENGEL(CURIYR) * 0.001) * DBLE((44.0 / 12.0) * 2204.0)
            CO2_LBMWH = CO2_LBMWH * DBLE(1.0 - UPDCEF(IDGN))

            ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
            ROWQ = 'EQCO2'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROWQ_mask,':EQCO2:',URGNME(NERC)(6:7),UPYRCD(YEAR),':!NERC:')
            VAL_STD_CO2 = DBLE(CO2_LBMWH - CO2_NRYR(NERC,YEAR)) * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
            VAL_STD_CO2 = VAL_STD_CO2 * 0.001
            IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
            IF (VAL_STD_CO2 .LT. -ECP_MIN .OR. VAL_STD_CO2 .GT. ECP_MIN)THEN
               CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$BDGN,10')
            END IF
            VAL_QTY_CO2 = CO2_LBMWH * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
            VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
            IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
            IF (VAL_QTY_CO2 .GT. ECP_MIN)CALL CVAL(COLUMN,ROWQ,VAL_QTY_CO2,COLUMN_mask,ROWQ_mask,'EP$BDGN,11')
         END IF

!        GRID RESILIENCE STANDARD, IF APPROPRIATE

         IF (GRD_RATS(IECP,NERC) .GE. 0.0)THEN
            ROW = 'GRGRD'//URGNME(NERC)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':GRGRD:',URGNME(NERC)(6:7),UPYRCD(YEAR))
            VAL_STD_GRD = DBLE(GRD_RATS(IECP,NERC) - GRD_NRYR(NERC,YEAR)) * GEN * DBLE(0.001)
!           VAL_STD_GRD = VAL_STD_GRD * 0.001
            IF (VAL_STD_GRD .LT. -ECP_MIN .OR. VAL_STD_GRD .GT. ECP_MIN)THEN
               CALL CVAL(COLUMN,ROW,VAL_STD_GRD,COLUMN_mask,ROW_mask,'EP$BDGN,12')
            END IF
         END IF

!        OBJECTIVE FUNCTION

         ROW = UPOBJ ; ROW_mask=UPOBJ

!        TEMPORARILY ASSIGN FUEL REGION TO 1

!        IFLRG = 1
         IGSRG = UPNGRG(NERC)

         IF (YEAR .LT. UNXPH) THEN
            PV$FOM = EPFOM(IECP) * UPGNPD(YEAR + CURIYR - 1) * PWF(DBLE(EPDSCRT),YEAR)
            PV$VOM = EPVOM(IECP) * UPGNPD(YEAR + CURIYR - 1) * 1000.0 * PWF(DBLE(EPDSCRT),YEAR)
            PV$GPS = GPSSUB(IECP,YEAR) * UPGNPD(YEAR + CURIYR - 1) * 1000.0 * PWF(DBLE(EPDSCRT),YEAR)
!           PV$PRM = UPDGFPR * UPGNPD(YEAR + CURIYR - 1) * PWF(DBLE(EPDSCRT),YEAR)
            PV$PRM = (PNGELGR(IGSRG,CURIYR) - OGWPRNG(MNUMOR,CURIYR)/CFNGU(CURIYR) + UPDGFPR) * UPGNPD(YEAR + CURIYR - 1) * PWF(DBLE(EPDSCRT),YEAR)  !premium includes transportation markup
         ELSE
            IFPH2 = UNFPH - YEAR + 1
            DO JYR = 1 , IFPH2
               FOM(JYR) = EPFOM(IECP) * UPGNPD(CURIYR + JYR + YEAR - 2)
               VOM(JYR) = EPVOM(IECP) * 1000.0 * UPGNPD(CURIYR + JYR + YEAR - 2)
               GPS(JYR) = GPSSUB(IECP,JYR + YEAR - 1) * 1000.0 * UPGNPD(CURIYR + JYR + YEAR - 2)
               PRM(JYR) = (PNGELGR(IGSRG,CURIYR) - OGWPRNG(MNUMOR,CURIYR)/CFNGU(CURIYR) + UPDGFPR) * UPGNPD(CURIYR + JYR + YEAR - 2) ! premium includes markup, assume constant markup based on curiyr
            END DO
            PV$FOM = PVV(FOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))* PWF(DBLE(EPDSCRT),YEAR-1)
            PV$VOM = PVV(VOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))* PWF(DBLE(EPDSCRT),YEAR-1)
            PV$GPS = PVV(GPS,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))* PWF(DBLE(EPDSCRT),YEAR-1)
            PV$PRM = PVV(PRM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))* PWF(DBLE(EPDSCRT),YEAR-1)
         END IF
         PV$FUEL = AVG_HTRT(IECP) * PV$PRM                  !column intersects carbon and fuel supply rows, so only markup/premium needs to be added explicitly
         VALUE = PV$FOM + (PV$FUEL + PV$VOM - PV$GPS) * GEN * 0.000001
         VALUE = MAX( VALUE , ECP_MIN)
         IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
!        write(6,'(A20,4I4,6F12.3)') ' EPBDGN_EX',CURIYR,YEAR,NERC,IECP,PV$FOM,PV$VOM,PV$GPS,PV$PRM,PV$FUEL,GEN
         CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,13')

!        CREATE ROW/COLUMN INTERSECTIONS FOR EXISTING DISPATCHABLE CAPACITY COLUMNS

!        RESERVE MARGIN ROW

         ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
         VALUE = DBLE(1.0)
         CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,14')

!        TOTAL CAPACITY ROW

         ROW = 'TOTCAP'//UPRGCD(NERC)//UPYRCD(YEAR); call makmsk(ROW_mask,':TOTCAP:',UPRGCD(NERC),UPYRCD(YEAR))
         VALUE = DBLE(1.0)
         CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,15')

         IF (OLYR .LE. UNXPH) THEN

!           DETERMINE PRESENT VALUE OF PRODUCTION TAX CREDIT SUBSIDIES

            GSYR1 = UPGSY1(IECP) - UHBSYR
            GSYRL = UPGSYL(IECP) - UHBSYR
            IF ((UPGSUB(IECP) .GT. 0.0 .AND. (CURIYR + OLYR - 1) .GE. GSYR1 .AND. (CURIYR + OLYR - 1) .LE. GSYRL) .OR.  &
                 UPGSUBPT(IECP) .GT. 0) THEN
               DO JYR = 1 , UPGSYR(IECP)
                 IF (UPGSUBPT(IECP) .LE. 0) THEN
                  SOM(JYR) =(UPGSUB(IECP) * 8.76 * UPMCF(IECP))
                 ELSE
                  SOM(JYR) =(UPGSUBYR(IECP,min(MNUMYR , JYR + CURIYR + OLYR - 2)) * 8.76 * UPMCF(IECP))
                 END IF

!                 CHECK IF PTC IS CAPPED

                  IF (UPGSMX(IECP) .GT. 0)SOM(JYR) = MIN(SOM(JYR),UPGSMX(IECP))

!                 IF PTC IS REAL, THEN APPLY DEFLATOR

                  IF (UPGSTY(IECP) .LE. 0)SOM(JYR) = SOM(JYR) * UPGNPD(JYR + CURIYR + OLYR - 2)

!                 ADJUST FOR TAX BENEFIT

                  SOM(JYR) = SOM(JYR) / (1.0 - UPTXRT)
                  IF (YEAR .EQ. 1) SOML(JYR) = SOM(JYR) / (8.76 * UPMCF(IP))
               END DO

               PV$SOM = PVV(SOM,ECP_D_FPH,UPGSYR(IECP), DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR - 1)
               IF (YEAR .EQ. 1) PV$SOML = PVV(SOML,ECP_D_FPH,UPGSYR(IECP), DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR - 1)
            ELSE
               PV$SOM = 0.0
               IF (YEAR .EQ. 1) PV$SOML = 0.0
            END IF

!           CHECK FOR TIME-DEPENDENT DEBT/EQUITY SUBSIDIES

            CALL EP$SUBFIN(IECP,OLYR,CSTDTADJ,CSTEQADJ,SHRDTADJ)

!           FOR NEW CAPACITY, DETERMINE PRESENT VALUE OF FUEL, O&M, AND EXTERNALITY COSTS BEGINNING IN OLYR

            IFPH2 = UNFPH - OLYR + 1
            DO JYR = 1 , IFPH2
               FOM(JYR) = (EPFOM(IECP) + EPCFOM(IECP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               VOM(JYR) = EPVOM(IECP) * 1000.0 * UPGNPD(JYR + CURIYR + OLYR - 2)
               GPS(JYR) = GPSSUB(IECP,JYR + OLYR - 1) * 1000.0 * UPGNPD(JYR + CURIYR + OLYR - 2)
               EXTR(JYR) = DBLE(EPEXT(IECP,MNPOLLUT + 1) * 8.76 * UPMCF(IECP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               PRM(JYR) = UPDGFPR * UPGNPD(JYR + CURIYR + OLYR - 2)
               PRM(JYR) = (PNGELGR(IGSRG,CURIYR) - OGWPRNG(MNUMOR,CURIYR)/CFNGU(CURIYR) + UPDGFPR) * UPGNPD(JYR + CURIYR + OLYR - 2)  !add markup to premium
               IF (YEAR .EQ. 1) THEN
                  FOML(JYR) = ( EPFOM(IECP) + EPCFOM(IECP)) * UPGNPD(JYR + CURIYR + OLYR - 2)
                  VOML(JYR) = EPVOM(IECP) * UPGNPD(JYR + CURIYR + OLYR - 2)
                  EXTL(JYR) = DBLE(EPEXT(IECP,MNPOLLUT + 1)) * UPGNPD(JYR + CURIYR + OLYR - 2)
               END IF
            END DO
            PV$FOM = PVV(FOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))* PWF(DBLE(EPDSCRT),OLYR-1)
            PV$VOM = PVV(VOM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))* PWF(DBLE(EPDSCRT),OLYR-1)
            PV$GPS = PVV(GPS,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))* PWF(DBLE(EPDSCRT),OLYR-1)
            PV$EXT = PVV(EXTR,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
            PV$PRM = PVV(PRM,ECP_D_FPH,IFPH2,DBLE(EPDSCRT))* PWF(DBLE(EPDSCRT),OLYR-1)
            PV$FUEL = AVG_HTRT(IECP) * PV$PRM    !since column intersects carbon and fuel supply rows, only markup/premium needs to be added here

!           COMPUTE LEVELIZED GENERATION FIXED O&M AND EXTERNALITY COSTS   ! not really needed for DG, don't fill in fuel costs

            IF (YEAR .EQ. 1)THEN
               PV$FOML = PVV(FOML,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$VOML = PVV(VOML,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$EXTL = PVV(EXTL,ECP_D_FPH,IFPH2,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
               EPLVFLC(IECP) = 0.0
               EPLVFOM(IECP) = PV$FOML / PVGNP
               EPLVVOM(IECP) = PV$VOML / PVGNP
               EPLVEXT(IECP) = (PV$EXTL - PV$SOML) / PVGNP
            END IF

!           DETERMINE CPS REQUIREMENT, IF APPROPRIATE (LEVELIZED FOR LAST YEAR)

            IF (UPCAPCAS .GT. 0 .AND. UPVTYP(IECP) .EQ. 1) THEN
               IF (OLYR .LT. UNXPH) THEN
                  PVCPS = DBLE(UPCAPBND(MIN(CURIYR + OLYR - 1,UNYEAR)))
               ELSE
                  DO JYR = 1 , UNFPH - UNXPH + 1
                     CPS(JYR) = UPCAPBND(MIN(CURIYR + JYR + UNXPH - 2,UNYEAR))
                     ONE1(JYR) = DBLE(1.0)
                  END DO
                  PVCPS = PVV(CPS,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                  PVONE = PVV(ONE1,ECP_D_FPH,UNFPH - UNXPH + 1,DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),UNXPH - 1)
                  PVCPS = PVCPS / PVONE
               END IF
               PVCPS = MAX(PVCPS,ECP_MIN)
               IF (UPCAPSHR(IECP) .LE. 0.0) THEN
                  PVCPS = PVCPS
               ELSE
                  PVCPS = PVCPS - DBLE(1.0)
               END IF
            END IF

!           REVISE BUILD VECTORS

!           THESE VECTORS HAVE -1 IN THE CAPACITY BALANCE ROWS

!           CREATE EXTRA LOOP FOR SUBSIDY LIMITS, IF APPROPRIATE

            IF (UPSUBCAS(IECP) .GT. 0 .AND. LIMSUB(IECP) .GT. 0.0)THEN
               NUMLOOP = 2

!              IF PTC SUBSIDY, CHECK IF VALID ONLINE YEAR

               IF (UPSUBCAS(IECP) .EQ. 1 .AND. OLYR .LT. UNXPH .AND. ((CURIYR + OLYR - 1) .LT. GSYR1 .OR. (CURIYR + OLYR - 1) .GT. GSYRL)) NUMLOOP = 1
            ELSE
               NUMLOOP = 1
            END IF

            DO LOOPS = 1 , NUMLOOP
               DO IOWN = 1 , 2
                  IF (IOWN .EQ. UPBLDTYP(NERC)) THEN
                     DO ST = 1 , ECP_D_DGS
                        IF (LOOPS .EQ. 1) THEN
                           COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//'X'//STEP(ST)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),':X:',STEP(ST),UPYRCD(YEAR),':!DGN:')
                        ELSE
                           COLUMN = 'B'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//'S'//STEP(ST)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),':S:',STEP(ST),UPYRCD(YEAR),':!DGN:')
                        END IF

!                       IF TECHNOLOGY IS AVAILABLE THEN CREATE COEFFICIENTS

                        IF (UPAVLYR(IECP) .LE. FULLYR .AND. (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,NERC) .GT. 0.0)) THEN

!                       STORE INDEX FOR AVAILABILITY OF TECHNOLOGY AND SUBSIDY

                        IF (LOOPS .EQ. 1 .AND. ST .EQ. 1 .AND. UPBLDREG(IECP,NERC) .GT. 0.0)BUILD_AVL(IECP,YEAR,NERC,CURIYR) = NUMLOOP

!                          REVISE OBJECTIVE FUNCTION COEFFICIENT

                           IF (IOWN .EQ. 1) THEN  ! Utility Builds
                              ROW = UPOBJ ; ROW_mask=UPOBJ

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                              IF (UPSUBCAS(IECP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 DEBT_F = EPUFDT
                              ELSE
                                 DEBT_F = EPUFDT + UPNFDTA(IECP)
                              END IF
                                 DEBT_F = DEBT_F + SHRDTADJ

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                              IF (UPSUBCAS(IECP) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 UTINT  =  EPUIRT
                              ELSE
                                 UTINT  =  EPUIRT + UPNIRTEA(IECP)
                              END IF
                                 UTINT  =  UTINT + CSTDTADJ

!                             CHECK FOR SUBSIDY LIMIT FOR RETURN ON EQUITY

                              IF (UPSUBCAS(IECP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT)
                              ELSE
                                 UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT) + UPNRRTEA(IECP)
                              END IF
                                 UTROE  =  UTROE + CSTEQADJ

                              UTROR = UTROE * (1.0 - DEBT_F) + UTINT * DEBT_F

                           ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                           IF (OLYR .LT. UNXPH)THEN
                              IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                                 ANNADJ = UPANNADJ(IECP,CURIYR+OLYR-1)
                              ELSE
                                 ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                              END IF
                           ELSE
                              DO JYR = UNXPH , UNAPH
                                 KYR = JYR - UNXPH + 1
                                 AN1(KYR) = 1.0
                                 IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                    ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                                 ELSE
                                    ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                 END IF
                              END DO
                              ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                       PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                           END IF

!                             OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))
                              OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ANNADJ

!                             IF SUBSIDY LIMIT FOR INVESTMENT TAX CREDIT, REMOVE IT FOR ADDITIONS WITHOUT SUBSIDY

                              IF (UPSUBCAS(IECP) .EQ. 2 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                 OVRCST = OVRCST / DBLE(1.0 - UPCSB(IECP))
                              END IF

!                             OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))

                              CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),CURIYR,YEAR,OVRCST,CPR,UPCAPD(1,IECP),UPGNPD,UTINT,DEBT_F,UTROR,TXBOOK,FNBOOK)

                              URATIO = TXBOOK / FNBOOK
                              CAPUNSTL = FNBOOK

                              CALL EPNBLD(DBLE(UTROR),DBLE(EPDSCRT - UPRSK(IECP)),URATIO,DBLE(EPUFPE),UPECLF(IECP),UPTXLF(IECP),DBLE(UPTXRT),UPUCLF(IECP),CAPUTIL)

                              TRANS = (DBLE(EPCOVR(IECP) + EPCTRM(IECP) - EPDAVD(ST) * UPDGAVR)) * &
                                       DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IECP))
                              OBJVAL = (( CAPUNSTL * CAPUTIL + TRANS ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)
                              VALUE = OBJVAL + PV$FOM + PV$EXT - PV$SOM + (PV$FUEL + PV$VOM - PV$GPS) * GEN * 0.000001

!                             IF SUBSIDY LIMIT FOR PRODUCTION TAX CREDIT, REMOVE IT FOR ADDITIONS WITHOUT SUBSIDY

                              IF (UPSUBCAS(IECP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                 VALUE = VALUE + PV$SOM
                              END IF
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                              IF (UF_DBG .GT. 0 .AND. (MOD(YEAR,5) .EQ. 1)) &
                                 WRITE(18,*) ' EP$BDGN2:YEAR,IECP,COL,ROW,VAL,OBJVAL,TRANS,', &
                                 'EPCOVR,EPCTRM,UPGNPD,EPCCRF:',YEAR,IECP,COLUMN,ROW,VALUE, &
                                 OBJVAL,TRANS,EPCOVR(IECP),EPCTRM(IECP),UPGNPD(YEAR),EPCCRF(IECP)

                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,16')

!                             COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR -- UTILITIES

                              IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP) THEN
                                 CAPLEV = (( CAPUNSTL * CAPUTIL ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)
                                 CAPLEV = CAPLEV / PVGNP
                                 EPLVCAP(IECP,IOWN) = CAPLEV
                                 EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                                 EPLVTRN(IECP) = (TRANS / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)) / PVGNP
                                 EPLVBCK(IECP) = 1.0
                              END IF
                           ELSE                   ! EWG Builds
                              ROW = UPOBJ ; ROW_mask=UPOBJ

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT FRACTION

                              IF (UPSUBCAS(IECP) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 DEBT_F = UPNFDT
                              ELSE
                                 DEBT_F = UPNFDT + UPNFDTA(IECP)
                              END IF
                                 DEBT_F = DEBT_F + SHRDTADJ

!                             CHECK FOR SUBSIDY LIMIT FOR DEBT INTEREST RATE

                              IF (UPSUBCAS(IECP) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                 EWGINT = EPUIRT + UPNIPRM
                                 UTINT  =  EPUIRT
                              ELSE
                                 EWGINT =  EPUIRT + UPNIPRM + UPNIRTEA(IECP)
                                 UTINT  =  EPUIRT + UPNIRTEA(IECP)
                              END IF
                                 EWGINT =  EWGINT + CSTDTADJ
                                 UTINT  =  UTINT  + CSTDTADJ

!                             CHECK FOR SUBSIDY LIMIT FOR EQUITY INTEREST RATE

                              IF (UPSUBCAS(IECP) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                 EWGROE = EPUCRE + UPNRPRM
                                 UTROE  = EPUCRE
                              ELSE
                                 EWGROE = EPUCRE + UPNRPRM + UPNRRTEA(IECP)
                                 UTROE  = EPUCRE + UPNRRTEA(IECP)
                              END IF
                                 EWGROE =  EWGROE + CSTEQADJ
                                 UTROE  =  UTROE  + CSTEQADJ
                              EWGROR = EWGROE * (1.0 - DEBT_F) + EWGINT * DEBT_F

                              ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                              IF (OLYR .LT. UNXPH)THEN
                                 IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                                    ANNADJ = UPANNADJ(IECP,CURIYR+OLYR-1)
                                 ELSE
                                    ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                                 END IF
                              ELSE
                                 DO JYR = UNXPH , UNAPH
                                    KYR = JYR - UNXPH + 1
                                    AN1(KYR) = 1.0
                                    IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                       ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                                    ELSE
                                       ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                    END IF
                                 END DO
                                 ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                          PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                              END IF

!                             OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * UPANNADJ(IECP,MIN(MNUMYR,CURIYR+OLYR-1))
                              OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ANNADJ

!                             IF SUBSIDY LIMIT FOR INVESTMENT TAX CREDIT, REMOVE IT FOR ADDITIONS WITHOUT SUBSIDY

                              IF (UPSUBCAS(IECP) .EQ. 2 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                 OVRCST = OVRCST / DBLE(1.0 - UPCSB(IECP))
                              END IF

                              CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),CURIYR,YEAR,OVRCST,CPR, &
                                 UPCAPD(1,IECP),UPGNPD,EWGINT,DEBT_F,EWGROR,TXBOOK,FNBOOK)

!                            WRITE(6,3731) CURIRUN, CURCALYR, CURIYR+YEAR+1988, IECP, LOOPS, NUMLOOP, UPCLYR(IECP), UPPLYR(IECP), UPSUBCAS(IECP), &
!                                COLUMN, OVRCST, UPOVR(IECP), UPLRPC(IECP), UPLROPT(IECP), UPLRLC(IECP), EPRGM(IECP), EPACM(IECP), ANNADJ, &
!                                UPCSB(IECP), CPR(1), CPR(2), CPR(3), UPCAPD(CURIYR+YEAR,IECP), UPGNPD(CURIYR+YEAR), EWGINT, DEBT_F, EWGROR, &
!                                TXBOOK, FNBOOK
!3731                         FORMAT(1X,"DG_CAPNNSTL",9(":",I5),":",A16,19(":",F21.6))

                              PRATIO = TXBOOK / FNBOOK
                              CAPNNSTL = FNBOOK

                              CALL EPCNBLD(DBLE(DEBT_F),PRATIO,DBLE(UPNRPRM),DBLE(UPNIPRM),DBLE(UTROE),DBLE(UTINT),DBLE(UPTXRT),UPTXLF(IECP),UPNCLF(IECP),UPNLLF(IECP),CAPNUG)

                              TRANS = (DBLE(EPCOVR(IECP) + EPCTRM(IECP) - EPDAVD(ST) * UPDGAVR)) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IECP))
                              OBJVAL = ( (CAPNNSTL * CAPNUG + TRANS) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)
                              VALUE = OBJVAL + PV$FOM + PV$EXT - PV$SOM + (PV$FUEL + PV$VOM - PV$GPS) * GEN * 0.000001

!                             IF SUBSIDY LIMIT FOR PRODUCTION TAX CREDIT, REMOVE IT FOR ADDITIONS WITHOUT SUBSIDY

                              IF (UPSUBCAS(IECP) .EQ. 1 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1) THEN
                                 VALUE = VALUE + PV$SOM
                              END IF
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                              IF (UF_DBG .GT. 0 ) &
                                 WRITE(18,1212) CURCALYR, NERC, IECP, IP, YEAR, OLYR, IFPH2, COLUMN, ROW, VALUE, OBJVAL, TRANS, &
                                 EPCOVR(IECP), EPCTRM(IECP), UPGNPD(YEAR), EPCCRF(IECP), EPDAVD(ST), UPDGAVR, UPGNPD(OLYR+CURIYR-1), &
                                 CAPNNSTL, CAPNUG, CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2), PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR), &
                                 EPDSCRT, UPRSK(IECP),PV$FOM,PV$SOM,PV$FUEL,PV$VOM,GEN
 1212                         FORMAT(1X,"EP_BDGN2",7(":",I4),2(":",A8),21(":",F15.3))

                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,17')

!                             COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR--NUGS

                              IF (YEAR .EQ. 1 .AND. LOOPS .EQ. NUMLOOP) THEN
                                 CAPLEV = (( CAPNNSTL * CAPNUG ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)
                                 CAPLEV = CAPLEV / PVGNP
                                 EPLVCAP(IECP,IOWN) = CAPLEV
                                 EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                                 EPLVTRN(IECP) = (TRANS / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)) / PVGNP
                                 EPLVBCK(IECP) = 1.0
                              END IF
                           END IF  ! (IOWN .EQ. 1)

!                          LOOP OVER REMAINING YEARS IN THE EXPLICIT PLANNING HORIZON

                           DO JYR = OLYR , UNXPH

!                             SET UP LOAD ROWS

                              DO ISP = 1 , EPNMSP
                                 LOAD = 1
                                 DO MODE = 1 , NSTP(ISP)
                                    IF (CF(MODE,ISP,JYR) .LE. DBLE(UPMCF(IECP))) THEN
                                       LOAD = MODE
                                       IF (CF(MODE + 1,ISP,JYR) .LE. DBLE(UPMCF(IECP))) THEN
                                          ADJ(MODE) = 1.0
                                       ELSE
                                          ADJ(MODE) = (UPMCF(IECP) - CF(MODE,ISP,JYR)) / (CF(MODE + 1,ISP,JYR) - CF(MODE,ISP,JYR))
                                       END IF
                                    END IF
                                 END DO
                                 DO JVLS = 1 , NSTP(ISP)
                                    VLS = VLSMAP(JVLS,ISP,JYR)
                                    IGRP = EPLDGR(VLS,JYR)
                                    ISEG = EPLDSG(VLS,JYR)
                                    ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR)) ! aimms rLEL2
                                    IF (JVLS .LE. LOAD)THEN
                                       VALUE = DERATE(IP) * ADJ(JVLS)
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                       IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,18')

                                       IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                          ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(JYR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(JYR))
                                          VALUE = SR_CREDIT(IECP) * (1.0 - (DERATE(IP) * ADJ(JVLS)))
                                          IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                          IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW_SR,VALUE,COLUMN_mask,ROW_SR_mask,'EP$BDGN,19')
                                       END IF
                                    END IF
                                 END DO

!                                NOX EMISSIONS CONSTRAINT

                                 IF (JYR .GT. NOX_LT) THEN
                                    DO INOX = 1 , NOX_GRP
                                       ANOX = NOX_RG(INOX)
                                       ROW = 'EUN'//UPLNTCD(IECP)//ANOX//UPYRCD(JYR); call makmsk(ROW_mask,':EUN:',UPLNTCD(IECP),ANOX,UPYRCD(JYR))
                                       TST_NOX(INOX,IECP,JYR) = 1
                                       VALUE = DBLE(0.0000005) * GEN * AVG_HTRT(IECP) * EPNOX_G(ISP,JYR,IECP,INOX)
                                       IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                       IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,20')
                                    END DO
                                 END IF
                              END DO

!                             Mercury EMISSIONS CONSTRAINT

                              IF (USW_HG .GT. 0) THEN
                                 DO I_HG = 1, NUM_HG_GRP
                                    ROW = 'EUHG'//UPLNTCD(IECP)//UPRGCD(I_HG)//UPYRCD(JYR); call makmsk(ROW_mask,':EUHG:',UPLNTCD(IECP),UPRGCD(I_HG),UPYRCD(JYR))
                                    VALUE = DBLE(0.0000005) * GEN * AVG_HTRT(IECP) * DBLE(HG_CNT(FUEL))

                                    VALUE = MAX(VALUE , ZERO)
                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                    IF (VALUE .NE. 0.0) THEN
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,21')
                                       TST_HGP(I_HG,IECP,YEAR) = 1
                                    END IF
                                 END DO
                              END IF

!                             SO2 EMISSIONS CONSTRAINT

                              DO ISO2 = 1 , NUM_SO2_GRP
                                 IF (SO2_SHR_BY_OLRG(UPCENSUS(IECP,NERC),ISO2) .GT. 0.0)THEN
                                    WRITE(SO2_CODE,'(I1)') ISO2
                                    ROW = 'EUSO'//UPLNTCD(IECP)//SO2_CODE//UPYRCD(JYR); call makmsk(ROW_mask,':EUSO:',UPLNTCD(IECP),SO2_CODE,UPYRCD(JYR))
                                    VALUE = DBLE(0.0000005) * GEN * AVG_HTRT(IECP) * SO2_CNT(FUEL) * DBLE(1.0 - UPDSEF(IDGN)) *  &
                                       DBLE(SO2_SHR_BY_OLRG(UPCENSUS(IECP,NERC),ISO2))

                                    IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                    IF (VALUE .GT. ECP_MIN) THEN
                                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,22')
                                       TST_SO2P(ISO2,IECP,YEAR) = 1
                                    END IF
                                 END IF
                              END DO

!                             CARBON EMISSIONS CONSTRAINT

                              ROW = 'EUCARXX'//UPYRCD(JYR); call makmsk(ROW_mask,':EUCARXX:',UPYRCD(JYR))
                              VALUE = DBLE(0.000001) * GEN * AVG_HTRT(IECP) *  CAR_CNT(FUEL) * DBLE(1.0 - UPDCEF(IDGN))
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (VALUE .GT. ECP_MIN) THEN
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,23')
!                                Include in Regional CO2 Limits, If Appropriate
                                 ROW_CARR = 'EUCAR'//CO2_RG(UPCARG(NERC))//UPYRCD(JYR); call makmsk(ROW_CARR_mask,':EUCAR:',CO2_RG(UPCARG(NERC)),UPYRCD(JYR))
                                 CALL CVAL(COLUMN,ROW_CARR,VALUE,COLUMN_mask,ROW_CARR_mask,'EP$BDGN,24')
                              END IF

!                             CO2 OUTPUT STANDARD

                              IF (CO2_PLTSW(IECP) .GT. 0.0 .AND.  &
                                 (CO2_STDSW .GT. 0 .AND. CO2_NRYR(NERC,YEAR) .GT. 0.0))THEN
                                 CO2_LBMWH = AVG_HTRT(IECP) * DBLE(0.001) * DBLE(ENGEL(CURIYR) * 0.001) * DBLE((44.0 / 12.0) * 2204.0)
                                 CO2_LBMWH = CO2_LBMWH * DBLE(1.0 - UPDCEF(IDGN))

                                 IF (CO2_STDSW .GT. 0)THEN
                                    ROW = 'ERCO2'//URGNME(NERC)(6:7)//UPYRCD(JYR); call makmsk(ROW_mask,':ERCO2:',URGNME(NERC)(6:7),UPYRCD(JYR),':!NERC:')
                                    ROWQ = 'EQCO2'//URGNME(NERC)(6:7)//UPYRCD(JYR); call makmsk(ROWQ_mask,':EQCO2:',URGNME(NERC)(6:7),UPYRCD(JYR),':!NERC:')
                                    VAL_STD_CO2 = DBLE(CO2_LBMWH - CO2_NRYR(NERC,JYR)) * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                    VAL_STD_CO2 = VAL_STD_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_STD_CO2 = DIGITS2( VAL_STD_CO2 , DIGITS_PARM)
                                    IF (VAL_STD_CO2 .GT. -ECP_MIN .AND. VAL_STD_CO2 .LT. ECP_MIN)VAL_STD_CO2 = 0.0
                                    IF (VAL_STD_CO2 .NE. 0.0)CALL CVAL(COLUMN,ROW,VAL_STD_CO2,COLUMN_mask,ROW_mask,'EP$BDGN,28')
                                    VAL_QTY_CO2 = CO2_LBMWH * GEN * DBLE(0.001) * DBLE(CO2_PLTSW(IECP))
                                    VAL_QTY_CO2 = VAL_QTY_CO2 * 0.001
                                    IF (USW_DIGIT .GT. 0)VAL_QTY_CO2 = DIGITS2( VAL_QTY_CO2 , DIGITS_PARM)
                                    IF (VAL_QTY_CO2 .GT. ECP_MIN)CALL CVAL(COLUMN,ROWQ,VAL_QTY_CO2,COLUMN_mask,ROWQ_mask,'EP$BDGN,29')
                                 END IF
                              END IF

!                             CO2 CAPTURE CREDIT CONSTRAINT

                              ROW = 'EUCARCR'//UPYRCD(JYR); call makmsk(ROW_mask,':EUCARCR:',UPYRCD(JYR))
                              VALUE = DBLE(0.000001) * GEN * AVG_HTRT(IECP) * CAR_CNT(FUEL) * DBLE(UPDCEF(IDGN))
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,30')

!                             Include in Free Row for Generation

                              ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'GEN'//UPYRCD(JYR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':GEN:',UPYRCD(JYR))
                              VALUE = GEN / 1000.0
                              IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                              IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                              IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,31')

!                             include in renewable generation bound row 'portfolio standard'

                              IF (UPRNWSHRR(IECP,NERC) .GT. 0.00) THEN
                                 ROW = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(JYR); call makmsk(ROW_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(JYR))
                                 VALUE = DBLE(UPRNWSHRR(IECP,NERC))
                                 VALUE = VALUE * GEN / 1000.0
                                 IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,32')
                              END IF

!                             If National RPS and Regional and National Contributions Differ

                              IF (UPRNWBND(CURIYR + JYR - 1) .GT. 0.005 .AND. UPRNWSHR(IECP) .GT. 0.0) THEN
                                 ROW = 'GURNWX'//UPRGCD(NERC)//UPYRCD(JYR); call makmsk(ROW_mask,':GURNWX:',UPRGCD(NERC),UPYRCD(JYR))
                                 VALUE = DBLE(UPRNWSHR(IECP))
                                 VALUE = VALUE * GEN / 1000.0
                                 IF (VALUE .GT. -ECP_MIN .AND. VALUE .LT. ECP_MIN) VALUE = 0.0
                                 IF (VALUE .NE. 0.0) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,33')
                              END IF

!                             GAS/OIL CONSUMPTION

                              IF (UPFLCD(FUEL) .EQ. 'DD') THEN
                                 ROW = 'FUELOL'//'X'//UPYRCD(JYR); call makmsk(ROW_mask,':FUELOLX:',UPYRCD(JYR))
                                 VALUE = DBLE(0.000001) * GEN * AVG_HTRT(IECP)
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,34')
                              ELSEIF (UPFLCD(FUEL) .EQ. 'DG')THEN
                                 ROW = 'FUELNG'//'X'//UPYRCD(JYR); call makmsk(ROW_mask,':FUELNGX:',UPYRCD(JYR))
                                 VALUE = DBLE(0.000001) * GEN * AVG_HTRT(IECP)
                                 IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)
                                 IF (VALUE .GT. ECP_MIN) CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,35')
                              END IF

!                             BUILD CONSTRAINTS

                              IF (JYR .EQ. OLYR) THEN

!                                DG BUILD LIMITS

                                 ROW = 'L'//UPRGCD(NERC)//'DGXX'//STEP(ST)//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':DGXX:',STEP(ST),UPYRCD(JYR))
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,36')

!                                BUILD LIMIT ROW

                                 IF (UPOVBDSW .GT. 0 .AND. UPOVBDSW .LE. 2) THEN
                                    ROW = 'R'//UPRGCD(NERC)//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':YYYYY:',UPYRCD(JYR))
                                 ELSE
                                    ROW = 'R'//'U'//'YYYYY'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',':U:',':YYYYY:',UPYRCD(JYR))
                                 END IF
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,37')

!                                TOTAL BUILDS FREE ROW

                                 ROW = 'TOTBLD'//UPRGCD(NERC)//UPYRCD(JYR); call makmsk(ROW_mask,':TOTBLD:',UPRGCD(NERC),UPYRCD(JYR))
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,38')
                              END IF

!                             PUT INTO CAPACITY PORTFOLIO REQUIREMENT ROW, IF INCLUDED

                              IF (UPCAPCAS .GT. 0 .AND. JYR .EQ. OLYR) THEN
                                 ROW = 'GCPSXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':GCPSXXX:',UPYRCD(JYR))
                                 VALUE = PVCPS
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,39')
                              END IF

!                             PUT INTO NATIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                              IF (UPBLDREG(IECP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(IECP,MNUMNR) .LT. 999.0)THEN
                                 ROW = 'LU'//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':BLDX:')
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,40')
                              END IF

!                             PUT INTO REGIONAL CAPACITY LIMIT ROW FOR THIS TYPE, IF ANY

                              IF (UPBLDREG(IECP,NERC) .GT. 0.0 .AND. UPBLDREG(IECP,NERC) .LT. 999.0)THEN
                                 ROW = 'L'//UPRGCD(NERC)//UPLNTCD(IECP)//'BLDX'; call makmsk(ROW_mask,':L:',UPRGCD(NERC),UPLNTCD(IECP),':BLDX:')
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,41')
                              END IF

!                             PUT INTO CONSTRAINT TO LIMIT SUBSIDIZED CAPACITY ADDITIONS, IF ANY

                              IF (UPSUBCAS(IECP) .GT. 0 .AND. LOOPS .EQ. 2 .AND. JYR .EQ. OLYR) THEN
                               IF (LIMSUB(IECP) .GT. 0.0 .AND. UPSUBLIM(IECP) .LT. 999.0) THEN
                                 ROW = 'LU'//UPLNTCD(IECP)//'SUBX'; call makmsk(ROW_mask,':LU:',UPLNTCD(IECP),':SUBX:')
                                 VALUE = DBLE(1.0)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,42')
                              END IF
                              END IF

!                             RESERVE MARGIN ROW

                              ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(JYR))
                              VALUE = DBLE(1.0)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$BDGN,43')

                           END DO                                   ! JYR
                        ENDIF                                       ! AVLYR
                     END DO                                         ! ST
                  END IF                                            ! (IOWN .EQ. UPBLDTYP(NERC))
               END DO                                               ! IOWN
            END DO                                                  ! LOOPS
         ENDIF                                                      ! OLYR
      END DO                                                        ! IP

!     SET UP STRUCTURE TO MOVE NOX FROM PLANT TYPE SPECIFIC ROWS TO REGIONAL or SEASONAL CONSTRAINT

      IF (NERC .EQ. UNRGNS .AND. YEAR .EQ. UNXPH) THEN
         DO IYR = 1 , UNXPH
            DO JNOX = 1 , NOX_GRP
               IF (IYR .GT. NOX_LT) THEN
                  ANOX = NOX_RG(JNOX)
                  ROW_NOX = 'EUNOX'//ANOX//UPYRCD(IYR); call makmsk(ROW_NOX_mask,':EUNOX:',ANOX,UPYRCD(IYR))
                  DO ECPt_TO = 1 , ECP_D_CAP
                     IF (TST_NOX(JNOX,ECPt_TO,IYR) .GT. 0) THEN
                        ROW = 'EUN'//UPLNTCD(ECPt_TO)//ANOX//UPYRCD(IYR); call makmsk(ROW_mask,':EUN:',UPLNTCD(ECPt_TO),ANOX,UPYRCD(IYR))
                        CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$BDGN,44')
                        CALL CVAL(ROW,ROW_NOX,DBLE(1.0),ROW_mask,ROW_NOX_mask,'EP$BDGN,45')
                        CALL CVAL(ROW,UPOBJ,ECP_MIN,ROW_mask,UPOBJ,'EP$BDGN,46')
                        CALL CROWTYPE(ROW,'L       ',ROW_mask)
                        CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BDGN,47')
                     END IF
                  END DO
               END IF
            END DO
         END DO
      END IF

!     SET UP STRUCTURE TO MOVE MERCURY FROM PLANT TYPE SPECIFIC ROWS TO NATIONAL CONSTRAINT

      IF (NERC .EQ. UNRGNS .AND. YEAR .EQ. UNXPH .AND. USW_HG .GT. 0) THEN
         DO I_HG = 1, NUM_HG_GRP
            DO IYR = 1 , UNXPH
               ROW_HG = 'EUHGXX'//UPRGCD(I_HG)//UPYRCD(IYR); call makmsk(ROW_HG_mask,':EUHGXX:',UPRGCD(I_HG),UPYRCD(IYR))
               DO IP = 1 , ECP_D_CAP
                  IF (TST_HGP(I_HG,IP,IYR) .GT. 0) THEN
                     ROW= 'EUHG'//UPLNTCD(IP)//UPRGCD(I_HG)//UPYRCD(IYR); call makmsk(ROW_mask,':EUHG:',UPLNTCD(IP),UPRGCD(I_HG),UPYRCD(IYR))
                     CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$BDGN,48')
                     CALL CVAL(ROW,ROW_HG,DBLE(1.0),ROW_mask,ROW_HG_mask,'EP$BDGN,49')
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BDGN,50')
                  END IF
               END DO
            END DO
         END DO
      END IF

!     SET UP STRUCTURE TO MOVE NOX FROM PLANT TYPE SPECIFIC ROWS TO REGIONAL or SEASONAL CONSTRAINT

      IF (NERC .EQ. UNRGNS .AND. YEAR .EQ. UNXPH) THEN
         DO IYR = 1 , UNXPH
            DO ISO2 = 1, NUM_SO2_GRP
               WRITE(SO2_CODE,'(I1)') ISO2
               ROW_SO2 = 'EUSO2X'//SO2_CODE//UPYRCD(IYR); call makmsk(ROW_SO2_mask,':EUSO2X:',SO2_CODE,UPYRCD(IYR))
               DO IP = 1 , ECP_D_CAP
                  IF (TST_SO2P(ISO2,IP,IYR) .GT. 0) THEN
                     ROW= 'EUSO'//UPLNTCD(IP)//SO2_CODE//UPYRCD(IYR); call makmsk(ROW_mask,':EUSO:',UPLNTCD(IP),SO2_CODE,UPYRCD(IYR))
                     IF (UPTTYP(IP) .LE. NW_COAL .AND. ECP_SCRUB(IP,CURIYR) .EQ. 1) THEN
                        CALL CVAL(ROW,ROW,DBLE(-10.0),ROW_mask,ROW_mask,'EP$BDGN,51')
                     ELSE
                        CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$BDGN,52')
                     END IF
                     CALL CVAL(ROW,ROW,DBLE(-1.0),ROW_mask,ROW_mask,'EP$BDGN,53')
                     CALL CVAL(ROW,ROW_SO2,DBLE(1.0),ROW_mask,ROW_SO2_mask,'EP$BDGN,54')
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$BDGN,55')
                  END IF
               END DO
            END DO
         END DO
      END IF
!
      RETURN
      END
!
!     EPO$COF RETRIEVES ACTIVITIES FROM FREE ROWS ACCUMULATING COAL AND WOOD
!     GENERATION FROM COAL PLANTS IN ORDER TO DETERMINE COFIRING SHARES
!
      SUBROUTINE EPO$COF
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'dispett'
      include 'wrenew'
      include 'uecpout'
      include 'uefdout'
      include 'emission'
      include 'cdsparms'
      include 'csapr'
      include 'emmemis'
!
      REAL*8 DUAL,T_BM(ECP_D_FPH),PVV,PWF,FAC,TWOVAL(5)
      REAL*4 TOTGEN,COLGEN,BIOGEN
      INTEGER NERC,IRET,IP,IECP,YEAR,ISP,K,JYR,IRG,CRG,ITYP
      CHARACTER*16 ROW, COLUMN
      CHARACTER*2 STATUS
      CHARACTER*1 SCODE(ECP_D_MSP)
!
      ecpsub='EPO$COF'

!
      STATUS = '  '
!
!     INITIALIZE SEASON CODE
!
      DO ISP = 1 , EPNMSP
         SCODE(ISP) = UPRGCD(ISP)
      END DO
!
!     LOOP OVER EXISTING COAL PLANT TYPES
!
      DO IRG = 1 , UNRGNS
!
         DO IP = 1 , ECP_D_DSP
            IECP = UCPDSPI(IP)
            IF (UPTTYP(IP) .LE. NW_COAL) THEN
!
!              GET TOTAL GENERATION FROM CURRENT YEAR -- BY NERC REGION
!
               ROW = 'F'//UPRGCD(IRG)//UPLNTCD(IECP)//'GEN'// UPYRCD(2); call makmsk(ROW_mask,':F:',UPRGCD(IRG),UPLNTCD(IECP),':GEN:', UPYRCD(2))
               COLUMN = 'H'//UPRGCD(IRG)//UPLNTCD(IECP)//'GEN'//UPYRCD(2); call makmsk(COLUMN_mask,':H:',UPRGCD(IRG),UPLNTCD(IECP),':GEN:',UPYRCD(2))
               CALL CWFSCOL(COLUMN,'A       ',STATUS,TWOVAL,COLUMN_mask,IRET)
               TOTGEN = TWOVAL(1) + ST_RPS_EX_GEN(IRG,IECP,CURIYR+1) + ST_RPS_NW_GEN(IRG,IECP,CURIYR+1) + ST_RPS_XP_GEN(IRG,IECP,CURIYR+1)
!
!              GET WOOD GENERATION FROM CURRENT YEAR -- BY NERC REGION
!
               ROW = 'F'//UPRGCD(IRG)//UPLNTCD(IECP)//'GWD'// UPYRCD(2); call makmsk(ROW_mask,':F:',UPRGCD(IRG),UPLNTCD(IECP),':GWD:', UPYRCD(1))
               CALL CWFSROW(ROW,'A       ',STATUS,TWOVAL,ROW_mask,IRET)
               BIOGEN = TWOVAL(1)
               UPCFGNN(IP,IRG) = BIOGEN
               IF (TOTGEN .GT. 0.0)THEN
                  UPWDCFN(IP,IRG) = BIOGEN / TOTGEN
               ELSE
                  UPWDCFN(IP,IRG) = 0.0
               END IF
            END IF
         END DO
!
!              GET TOTAL BIOMASS GENERATION FROM CURRENT YEAR -- BY NERC REGION
!
!              ROW = 'F'//UPRGCD(IRG)//UPLNTCD(WIWD)//'GEN'// UPYRCD(1)
!              IRET = WFSROW(ROW,'A       ',STATUS,TWOVAL)
!              UPBMGNN(IRG) = TWOVAL(1)
      END DO
!
      UECP_GEN = 0.0
      DO CRG = 1 , NDREG
         DO YEAR = 1 , UNXPH
!
            DO IP = 1 , ECP_D_DSP
               IECP = UCPDSPI(IP)
               ITYP = UPTTYP(IP)
               IF (UPTTYP(IP) .LE. NW_COAL) THEN
!
!                 GET COAL GENERATION FROM CURRENT YEAR -- BY COAL REGION
!
                  ROW = 'G'//EPFLCD(CRG)//UPLNTCD(IECP)//'CLX'// UPYRCD(YEAR); call makmsk(ROW_mask,':G:',EPFLCD(CRG),UPLNTCD(IECP),':CLX:', UPYRCD(YEAR))
                  CALL CWFSROW(ROW,'A       ',STATUS,TWOVAL,ROW_mask,IRET)
                  COLGEN = TWOVAL(1)
!
!                 GET WOOD GENERATION FROM CURRENT YEAR -- BY COAL REGION
!
                  ROW = 'G'//EPFLCD(CRG)//UPLNTCD(IECP)//'WDX'//UPYRCD(YEAR); call makmsk(ROW_mask,':G:',EPFLCD(CRG),UPLNTCD(IECP),':WDX:',UPYRCD(YEAR))
                  CALL CWFSROW(ROW,'A       ',STATUS,TWOVAL,ROW_mask,IRET)
                  BIOGEN = TWOVAL(1)
                  IF (YEAR .EQ. 1) THEN
                     IF ((COLGEN + BIOGEN) .GT. 0.0)THEN
                        UPWDCFR(IP,CRG) = BIOGEN / (COLGEN + BIOGEN)
                        WRITE(18,2351) CURIYR+UHBSYR,CRG,IECP,BIOGEN,COLGEN,UPWDCFR(IP,CRG)
 2351                   FORMAT(1X,"UPWDCFR",3(":",I4),3(":",F15.6))
                     ELSE
                        UPWDCFR(IP,CRG) = 0.0
                     END IF
                  END IF
                  UECP_GEN(YEAR,ITYP,CRG) = UECP_GEN(YEAR,ITYP,CRG) + COLGEN + BIOGEN
!
               END IF
            END DO
!
!           GET BIOMASS PRICES
!
            IF (CURIYR+YEAR-1 .LE. UNYEAR) THEN
               IF (YEAR .LT. UNXPH) THEN
                  FAC = UPGNPD(CURIYR + YEAR - 1) * PWF(DBLE(AVGDCR),YEAR)
               ELSE
                  DO JYR = 1 , UNFPH - UNXPH + 1
                     T_BM(JYR) = UPGNPD(CURIYR + UNXPH + JYR - 2)
                  END DO
                  FAC = PVV(T_BM,ECP_D_FPH,UNFPH-UNXPH+1,DBLE(AVGDCR)) * PWF(DBLE(AVGDCR),UNXPH - 1)
               END IF
               ROW = 'F'//EPFLCD(CRG)//'WDXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(CRG),':WDXXX:',UPYRCD(YEAR))
               CALL CWFSROW(ROW,'P       ',STATUS,TWOVAL,ROW_mask,IRET)
               DUAL=TWOVAL(1)
               WPSBMEL(CRG,CURIYR+YEAR-1) = DUAL / FAC
               WRITE(18,2331) CURIYR+UHBSYR,CURIYR+YEAR-1+UHBSYR,CRG,IRET,ROW,WPSBMEL(CRG,CURIYR+YEAR-1),DUAL,FAC
 2331          FORMAT(1X,"WPSBMEL",4(":",I4),":",A8,3(":",F15.6))
            END IF
         END DO
      END DO
!     DO IP = 1 , WIIS
!       write(6,1234) curiyr+1989,uplntcd(ip),(upcfgnn(ip,irg),irg=1,unrgns)
!1234 format(1h ,'!cfnr',i4,a3,13f8.3)
!     END DO
!     DO IP = 1 , WIIS
!       write(6,1235) curiyr+1989,uplntcd(ip),(upwdcfr(ip,irg),irg=1,ndreg)
!1235 format(1h ,'!cfcr',i4,a3,14f8.3)
!     END DO
      RETURN
      END
!
!     EPO$SEQBNS RETRIEVES THE BONUS ALLOWANCES FOR SEQUESTRATION
!     TO DECREMENT LIMIT, IF APPROPRIATE
!
      SUBROUTINE EPO$SEQBNS
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
!
      REAL*8 LEVEL,TWOVAL(5)
      REAl*4 ALW(ECP_D_FPH),USE(ECP_D_FPH),AVL(ECP_D_FPH),TOTAVL,BNK
      INTEGER*4 IYR,JYR,KYR,LYR
      INTEGER*4 IRET
      CHARACTER*16 ROW
      CHARACTER*2 STATUS
      STATUS = '  '

      ecpsub='EPO$SEQBNS'

!
!     IF BONUS ALLOWANCE ARE LIMITED, UPDATE REMAINING ALLOWANCES
!
!     write(6,1111) curiyr+1989,curiyr+1989+1,level
!1111 format(1h,'!seqbns',i4,i5,f10.1)

      DO IYR = 1 , UPSEQNYR
         ROW = 'SEQBNSX'//UPRGCD(IYR); call makmsk(ROW_mask,':SEQBNSX:',UPRGCD(IYR))
         CALL CWFSROW(ROW,'A       ',STATUS,TWOVAL,ROW_mask,IRET)
         LEVEL=TWOVAL(1)
         IF (LEVEL .GT. DBLE(0.0))THEN
            JYR = CURIYR + UPPLYR(WIIS) + IYR - 1
            ALW(IYR) = UPSEQBLM(JYR)
            USE(IYR) = LEVEL
            AVL(IYR) = ALW(IYR) - USE(IYR)
            UPSEQBLM(JYR) = AVL(IYR)

!           write(6,2323) curiyr+1989,jyr+1989,ALW(IYR),USE(IYR),AVL(IYR)
!2323       format(1h ,'!outbns1',i4,i5,5f10.1)
         END IF
      END DO

      DO IYR = UPSEQNYR , 1 , -1
         IF (AVL(IYR) .LT. 0.0)THEN
            JYR = CURIYR + UPPLYR(WIIS) + IYR - 1
            TOTAVL = 0.0
            DO KYR = IYR - 1 , 1 , -1
               IF (AVL(KYR) .GT. 0.0)THEN
                  TOTAVL = TOTAVL + AVL(KYR)
               END IF
            END DO
            DO KYR = IYR - 1 , 1 , -1
               IF (AVL(KYR) .GT. 0.0)THEN
                  BNK = - AVL(IYR) * AVL(KYR) / TOTAVL
                  LYR = CURIYR + UPPLYR(WIIS) + KYR - 1
                  UPSEQBLM(LYR) = UPSEQBLM(LYR) - BNK
                  UPSEQBLM(LYR) = MAX(UPSEQBLM(LYR),0.0)
                  UPSEQBLM(JYR) = UPSEQBLM(JYR) + BNK
               END IF
            END DO
            UPSEQBLM(JYR) = MAX(UPSEQBLM(JYR),0.0)
         END IF
      END DO

!     DO IYR = 1 , UPSEQNYR
!        JYR = CURIYR + UPPLYR(WIIS) + IYR - 1
!        write(6,2324) curiyr+1989,jyr+1989,UPSEQBLM(MIN(MNUMYR,JYR))
!2324    format(1h ,'!outbns2',i4,i5,5f10.1)
!     END DO

      RETURN
      END

!     EPO$BILD STORES CAPACITY EXPANSION DECISIONS

      SUBROUTINE EPO$BILD(NERC)
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'entcntl'
      include 'enewtech'
      include 'dispin'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'plntin'
      include 'plntctl'
      include 'emmcnv'
      include 'wrenew'
      include 'emshrout'
      include 'uecpout'
      include 'fuelin'
      include 'dispett'
      include 'efpgen'
      include 'ecp_nuc'
      include 'ecp_coal'
      include 'cdsparms'
      include 'coalemm'
      include 'uso2grp'
      include 'uefdout'
      include 'dispuse'
      include 'e111d'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmcaldr'
      include 'emm_aimms'
      include 'elout'
!
      COMMON/BUILDS/ ECPADDS(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*8 ECPADDS

      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*8 HTRT_IG, HTRT_AC
      REAL*4 DBTADJ

      REAL*8 LEVEL,BLD,OVRCST1,OVRCST,TWOVAL(5), FUEL_VAL(5), FUEL_VAL1(5), FUEL_VAL2(5)
      REAL*8 CAPNNSTL,CAPNUG,PRATIO,FNBOOK,TXBOOK
      REAL*8 TRNSCAP(ECP_D_XPH),TRNSCST(ECP_D_XPH)
      REAL*8 RETS(5),RCAP,T_SOM,T_TOM,T_EXT,F_FCT,C_FCT,T_TCAP,T_TFCF,T_DG,INTER_CST(MNUMNR),INTER_FCF(MNUMNR),INTER_LOSS(MNUMNR)
      REAL*4 EWGROR,EWGINT,EWGROE
      REAL*4 CPR(ECP_D_LCP),CAPD(MNUMYR+ECP_D_XPH),PCST,TMPTRCST
      INTEGER*4 NLLF,NCLF,TLF,CLT,PLT,JYR,JOWN,IFLRG,IMO,NWGRP,INT,RNW,KYR,XYR,ITYP,ISP,d,h
      INTEGER*4 NERC,PLANT,YEAR,IGRP,FULLYR,IFL,IECP,ICAP,LCAP,JEFD,ELIFE,IOWN,XGRP
      INTEGER*4 IRET,IRG,NRG,JRG,EXPCHK,EXPORT(MNUMYR),EXP,FL_NUM
      INTEGER*4 RNWTYP,NSTEPS,STEP,IS,JGRP,KGRP,IRECL,I,ONE,K
      INTEGER*4 GSYR1,GSYRL,OLYR
      INTEGER*4 CLRG,TRN_LIFE,MAPGR(NDREG)
      INTEGER*4 FLRG,FRG,NXT_FLRG(NDREG),N_FLRG,GSRG,CSRG,CARG,I_COAL
      CHARACTER*16 BUILDNM, ROW_FUEL
      CHARACTER*2 STATUS,PLNT_CD,BLDSTS
      CHARACTER*1 BLD_TYP
      CHARACTER*1 SSTEP(ECP_D_DGS)
      CHARACTER*1 SUB_CODE(ECP_D_DGS)
      CHARACTER*1 SA_CODE(ECP_D_DGS)
      COMMON/INVEST/ RETINV(MNUMYR+ECP_D_XPH),BLDINV(MNUMYR+ECP_D_XPH)
      REAL*8 RETINV,BLDINV
      REAL*8 ITCADJ
      REAL*4 DEBT_F                 ! CONSTRUCTION DEBT FINANCING
      REAL*4 UTINT
      REAL*4 UTROE,UTROR
      REAL*8 B_HTRT_ADJ, B_CPEN_ADJ, B_CAP_CST_O, B_CAP_CST_N
      INTEGER*4 B_YR
      REAL*8 CSTDTADJ,CSTEQADJ,SHRDTADJ
      INTEGER*4 LOOPS,NUMLOOP
      INTEGER*4 CPPLOOP,CLOOP,CSTEPS,CS
      CHARACTER*12 FROM_LABEL
      INTEGER*4 EXPIND
!     CHARACTER*2 CLFLST(EFD_D_MFRG),NGFLST(EFD_D_MFRG)

!     DATA CLFLST/'MA',  &
!                 'NY',  &
!                 'PA',  &
!                 'OH',  &
!                 'IL',  &
!                 'IN',  &
!                 'IA',  &
!                 'MN',  &
!                 'MO',  &
!                 'ND',  &
!                 'WV',  &
!                 'NC',  &
!                 'MD',  &
!                 'GA',  &
!                 'FL',  &
!                 'KY',  &
!                 'AL',  &
!                 'TX',  &
!                 'WY',  &
!                 'CO',  &
!                 'AZ',  &
!                 'WA',  &
!                 'CA',  &
!                 '00',  &
!                 '00'/

!     DATA NGFLST/'MA',  &
!                 'NY',  &
!                 'PA',  &
!                 'OH',  &
!                 'MI',  &
!                 'IN',  &
!                 'KS',  &
!                 'MN',  &
!                 'MO',  &
!                 'SD',  &
!                 'WV',  &
!                 'VA',  &
!                 'DE',  &
!                 'GA',  &
!                 'FL',  &
!                 'TN',  &
!                 'AL',  &
!                 'TX',  &
!                 'ID',  &
!                 'NV',  &
!                 'AZ',  &
!                 'OR',  &
!                 'CA',  &
!                 '00',  &
!                 '00'/

!     Varibales needed for heatrate and forced outage rate improvement

      REAL*4 RETIRT,RETROR,RETFPE,RETCRE
      REAL*8 OV_CST, CAPUTIL, URATIO, CAPUNSTL
      REAL*8 RETS_HTRT(5)
      REAL*8 RETS_FREE(5)
      CHARACTER*16 BUILDNM_HTRT, BUILDNM_FREE
      INTEGER*4 STXLF, SV_RYR, SV_RMO, OVIN, NEW_REC

      INTEGER*4 HTRT_TEST         ! 0 => Option is available; 1 => Option not available
      REAL*8 H_CAP

      ecpsub='EPO$BILD'

      IF (NERC .EQ. 1) THEN
         STORAGE_GEN = 0.0 
         STORAGE_CAP = 0.0 
         STORAGE_CST = 0.0
         STORAGE_RGN = 0
         STORAGE_ECPn = 0
         STORAGE_ECPc = "  "
      END IF

      SUB_CODE(1) = 'S'
      SUB_CODE(2) = 'T'
      SUB_CODE(3) = 'U'
      SUB_CODE(4) = 'V'
      SUB_CODE(5) = 'W'
      SUB_CODE(6) = 'X'

      SA_CODE(1) = 'A'
      SA_CODE(2) = 'B'
      SA_CODE(3) = 'C'
      SA_CODE(4) = 'D'
      SA_CODE(5) = 'E'
      SA_CODE(6) = 'F'

      MAPGR(1) = 1
      MAPGR(2) = 2
      MAPGR(3) = 6
      MAPGR(4) = 7
      MAPGR(5) = 3
      MAPGR(6) = 4
      MAPGR(7) = 9
      MAPGR(8) = 10
      MAPGR(9) = 5
      MAPGR(10) = 11
      MAPGR(11) = 12
      MAPGR(12) = 13
      MAPGR(13) = 14
      MAPGR(14) = 15

      FROM_LABEL = "EPO_BILD"

      ONE = 1
      FULLYR = CURIYR + UHBSYR
      IF ((FULLYR .EQ. UPSTYR) .AND. (NERC .EQ. 1)) &
         WRITE(18,*) ' BDATA:YR:EXP:NERC:PLNT:REC:', &
         'NXTREC:IGRP:W_IGRP:W_GRP:W_GRP2:RYR:', &
         'JEFD:IOWN:WFOWN:MRUN:IFLRG:', &
         'WC_SUM:WPCST:F1:S1:F2:S2:F3:S3'

      DO IS = 1 , ECP_D_DGS
         SSTEP(IS) = UPRGCD(IS)
      END DO

!     DETERMINE EXPORT REGIONS (1 -> EXPORT = IMPORT REGION)

      NRG = 1
      EXPORT(1) = NERC
      INTER_CST(1) = 0.0
      INTER_FCF(1) = 0.0
      DO IRG = 1 , UNRGNS
         CALL GETBLD(1,IRG)
         K = 1
         DO WHILE (EPTIRGN(IRG,K) .GT. 0)
            IF (EPTIRGN(IRG,K) .EQ. NERC .AND. EPTCST(IRG,K) .LT. 9999.0 .AND. EPTCST(IRG,K) .GT. 0.) THEN
               NRG = NRG + 1
               EXPORT(NRG) = IRG
               INTER_CST(EXPORT(NRG)) = EPTCST(IRG,K)
!              INTER_FCF(EXPORT(NRG)) = EPTCRF(IRG,K)        replace FCF with same value used in other transmission builds
               INTER_FCF(EXPORT(NRG)) = EPCCRF(WIPV)       
               INTER_LOSS(EXPORT(NRG)) = EPTLOSS(IRG,K)
               IF (CURIYR+1989 .EQ. 2020) write(18,'(A,4I6,2F15.6)') 'EXPORT(NRG)_ECP',NERC,K,IRG,EXPORT(NRG),INTER_CST(EXPORT(NRG)),INTER_FCF(EXPORT(NRG))               
            END IF
            K = K + 1
         END DO
      END DO
      CALL GETBLD(1,NERC)

!     INITIALIZE TRANSMISSION CAPACITY AND OVERNIGHT COST

      DO JYR = 1 , UNXPH
         TRNSCAP(JYR) = DBLE(0.0)
         TRNSCST(JYR) = DBLE(0.0)
      END DO

!     GET ACTIVITY LEVEL FOR EXISTING CAPACITY VECTOR

      DO PLANT = 1 , ECP_D_CAP
         IF (UCPDSPIS(PLANT) .GT. 0) THEN               ! DISPATCHABLE
            IECP = UCPDSPIS(PLANT)
            PLNT_CD = UPLNTCD(UCPDSPI(IECP))
         ELSE IF (UCPINTIS(PLANT) .GT. 0) THEN           ! INTERMITTENTN
            IECP = UCPINTIS(PLANT)
            PLNT_CD = UPLNTCD(UCPINTI(IECP))
         ELSE IF (UCPSTOIS(PLANT) .GT. 0) THEN           ! STORAGE
            IECP = UCPSTOIS(PLANT)
            PLNT_CD = UPLNTCD(UCPSTOI(IECP))
         ELSE IF (UCPRNWIS(PLANT) .GT. 0) THEN           ! RENEWABLE
            IECP = UCPRNWIS(PLANT)
            PLNT_CD = UPLNTCD(UCPRNWI(IECP))
         ELSE IF (UCPDGNIS(PLANT) .GT. 0) THEN           ! DISTRIBUTED
            IECP = UCPDGNIS(PLANT)
            PLNT_CD = UPLNTCD(UCPDGNI(IECP))
         END IF

         IF (USW_ERET .EQ. 1) THEN
            DO IGRP = 1 , ECP_D_RET
               BUILDNM = 'E'//UPRGCD(NERC)//PLNT_CD//'XX'//UPYRCD(IGRP)//'0'; call makmsk(BUILDNM_mask,':E:',UPRGCD(NERC),PLNT_CD,':XX:',UPYRCD(IGRP),':0:')
               RETS = DBLE(0.0)
               STATUS = '  '
               CALL CWFSCOL(BUILDNM,'ACLUD   ',STATUS,RETS,BUILDNM_mask,IRET)

               BUILDNM_HTRT = 'E'//UPRGCD(NERC)//PLNT_CD//'HH'//UPYRCD(IGRP)//'0'; call makmsk(BUILDNM_HTRT_mask,':E:',UPRGCD(NERC),PLNT_CD,':HH:',UPYRCD(IGRP),':0:')
               RETS_HTRT = DBLE(0.0)
               STATUS = '  '
               CALL CWFSCOL(BUILDNM_HTRT,'ACLUD   ',STATUS,RETS_HTRT,BUILDNM_HTRT_mask,IRET)
               HTRT_TEST = 0
               IF (IRET .NE. 0) HTRT_TEST = 2

               BUILDNM_FREE = 'E'//UPRGCD(NERC)//PLNT_CD//'FF'//UPYRCD(IGRP)//'0'; call makmsk(BUILDNM_FREE_mask,':E:',UPRGCD(NERC),PLNT_CD,':FF:',UPYRCD(IGRP),':0:')
               RETS_FREE = DBLE(0.0)
               STATUS = '  '
               CALL CWFSCOL(BUILDNM_FREE,'ACLUD   ',STATUS,RETS_FREE,BUILDNM_FREE_mask,IRET)
               IF (IRET .EQ. 0) HTRT_TEST = 1

               RCAP = (RETS(4) - RETS(1) - RETS_HTRT(1) - RETS_FREE(1)) * 1000.0

!hro           IF (HTRT_OVR_CST(IECP) .GT. 0.0) RCAP = 0.0
               IF (HTRT_OVRQ(PLANT,1) .GT. 0.0) RCAP = 0.0

               IF (HTRT_TEST .LE. 1) THEN

!                 WRITE(6,4397) CURIRUN, CURCALYR, CURCALYR+UPRTLT, NERC, IGRP, PLANT, HTRT_TEST, &
!                    BUILDNM, (RETS(I),I=1,5), &
!                    BUILDNM_HTRT, (RETS_HTRT(J),J=1,5), &
!                    BUILDNM_FREE, (RETS_FREE(K),K=1,5)
!4397             FORMAT(1X,"EPO_BILD_HTRT",7(":",I4),3(":",A16,5(":",F20.6)))

                  IF (RETS_HTRT(1) .GT. 0.001) THEN
                     H_CAP = RETS_HTRT(1) * 1000.0
                     IRECL = HTRT_FRST(IGRP,PLANT,NERC)
                     DO WHILE (IRECL .GT. 0 .AND. H_CAP .GT. 0.001)
                        CALL GETPLT(IRECL)

                        IF (HTRT_RESULTS(W_IGRP) .EQ. 0) THEN

!                          INCREMENT COUNTER

                           WREC_NXT = WREC_NXT + 1

!                          INSURE THAT NUMBER OF BUILDS DOESN'T EXCEED ALLOCATION

                           IF (WREC_NXT .GT. WPLT_D_REC) THEN
                              WRITE(6, * ) ' EPO$RET_HTRT ERROR: TOO MANY PLANT RECORDS'
                              NEW_REC = IRECL
                           ELSE
                              NEW_REC = WREC_NXT
                           END IF

                           XGRP = WTYPE(W_GRP)
                           W_NXT(WREC_NXT) = W_INT(NERC,XGRP)
                           W_INT(NERC,XGRP) = WREC_NXT

                           WRITE(18,5397) CURIRUN, CURCALYR, CURCALYR+UPRTLT, NERC, PLANT, IGRP, HTRT_TEST, &
                              IRECL, HTRT_NEXT(IRECL), W_IGRP, W_GRP, NEW_REC, WREC_NXT, XGRP, W_NXT(WREC_NXT), W_INT(NERC,XGRP), &
                              WC_SUM, RET_CAP(IRECL), W_FOM, RET_FOM(IRECL), &
                              W_CF, ECFOR(W_GRP), ECPMR(W_GRP), ECLFR(W_GRP), RET_VAL(IRECL)
 5397                      FORMAT(1X,"EPO_BILD_IRECL",16(":",I6),9(":",F20.6))

                           SV_RYR = W_RYR
                           SV_RMO = W_RMO
                           W_RYR = CURIYR+UHBSYR+UPRTLT-1
                           W_RMO = 12
                           OVIN = WVIN
                           WVIN = 8
!
                           CALL STRPLT(IRECL)

                           W_SYR = CURIYR+UHBSYR+UPRTLT
                           W_SMO = 1
                           W_RYR = SV_RYR
                           W_RMO = SV_RMO
                           WVIN = OVIN

!hro                       OV_CST = (HTRT_OVR_CST(IECP) / (WC_SUM * 0.001)) / UPGNPD(HTRT_DOLLAR_YEAR-UHBSYR)
                           OV_CST = (HTRT_OVRQ(PLANT,1) / (WC_SUM * 0.001))
                           WPCST = OV_CST
                           WEFPT = 8
                           CALL UEXPBLD(NERC)
                           RETINV(CURIYR+UPRTLT) = RETINV(CURIYR+UPRTLT) + OV_CST * WC_SUM
                           IF ((CURIYR+UPRTLT) .LE. UNYEAR) THEN 
                               RET_INV(NERC,CURIYR+UPRTLT) = RET_INV(NERC,CURIYR+UPRTLT) + OV_CST * WC_SUM * 0.001
                               RET_INV(MNUMNR,CURIYR+UPRTLT) = RET_INV(MNUMNR,CURIYR+UPRTLT) + OV_CST * WC_SUM * 0.001
                           ENDIF

!                          Collect Data for Resource Cost Calculations - Ret_Cst

                           IF (OV_CST .GT. 0.0001) THEN

!                             USE RETROFIT RISK PREMIUM, IF SWITCH IS ON

                              IF (USW_RTRSK .LE. 0)THEN
                                 RETIRT = EPUIRT
                                 RETROR = EPUROR
                                 RETFPE = EPUFPE
                                 RETCRE = EPUCRE
                              ELSE
                                 RETIRT = EPUIRTR
                                 RETROR = EPURORR
                                 RETFPE = EPUFPER
                                 RETCRE = EPUCRER
                              END IF

                              TXBOOK = 0.0
                              FNBOOK = 0.0
                              CAPUTIL = 0.0
                              CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,UPRTLT,OV_CST,UPSCPR, &
                                 UPCAPD(1,PLANT),UPGNPD,RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)
                              URATIO = TXBOOK / FNBOOK
                              CAPUNSTL = FNBOOK

!                             ASSUME TAX LIFE 2

                              STXLF = UPSTXLF(2)

                              CALL EPNBLD(DBLE(RETROR),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)

                              DO XYR = CURIYR+UPRTLT , MIN(UNYEAR, CURIYR + UPRTLT + UPSELF - 1)
                                 Ret_Cst(NERC,XYR) = Ret_Cst(NERC,XYR) + CAPUNSTL * CAPUTIL * WC_SUM * 0.001 / UPGNPD(XYR)
                                 Ret_Cst(MNUMNR,XYR) = Ret_Cst(MNUMNR,XYR) + CAPUNSTL * CAPUTIL * WC_SUM * 0.001 / UPGNPD(XYR)
                              END DO
                           END IF

                           HTRT_RESULTS(W_IGRP) = CURIYR+UHBSYR+UPRTLT
!hro                       WHRATE = MAX(HTRT_FLOOR(PLANT) , WHRATE * (1.0 - HTRT_REDUCTION(PLANT)))
                           WHRATE = MAX(HTRT_FLOOR(PLANT) , WHRATE * (1.0 - HTRT_REDQ(PLANT,1)))

                           CALL STRPLT(NEW_REC)

                           H_CAP = H_CAP - WC_SUM
                        END IF
                        IRECL = HTRT_NEXT(IRECL)
                     END DO
                  END IF
               END IF

               IF (CURIYR + UHBSYR + UPRTLT - 1 .GE. UNUC_SYR) THEN
               IF (RCAP .GT. 0.1) THEN
                     WRITE(18,3297) NERC,PLNT_CD,CURIYR+UHBSYR,IGRP,STATUS,(RETS(I),I=1,5)
 3297                FORMAT(1X,"RETIRE_OT:",I2,":",A2,":",I4,":",I4,":",A2,5(":",F10.3))
                  IF (UPAVLYR(PLANT) .LE. CURIYR + UHBSYR) THEN
                     IRECL = RET_FRST(IGRP,PLANT,NERC)
                     DO WHILE (IRECL .GT. 0 .AND. RCAP .GE. 0.1)
                        JGRP = 0
                        KGRP = 0
                        IF ((RET_VAL(IRECL) .LT. -0.001 .AND. EOTH_RYRS(IRECL) .GE. UREV_NYR) .AND. RET_CAP(IRECL) * 0.9 .LT. RCAP) THEN
                           CALL GETPLT(IRECL)
                           W_RYR = UHBSYR + CURIYR + (UPRTLT - 1) ! push out retire dates
                           W_RMO = 12                             ! retire at end-of-year
                           JGRP = W_GRP
                           KGRP = W_GRP2
                           CALL STRPLT(IRECL)
                           IF (UPTTYP(PLANT) .LE. NW_COAL) THEN
                              ITYP = UPTTYP(PLANT)
                              DO KYR = UPRTLT + 1 , UNXPH
                                 UECP_CAP(KYR,ITYP,W_CLRG) = UECP_CAP(KYR,ITYP,W_CLRG) - WC_SUM * 0.001
                                 WRITE(6,2319) CURIYR+UHBSYR,CURIYR+UHBSYR+KYR-1,NERC,PLANT,W_CLRG,WC_SUM,UECP_CAP(KYR,ITYP,W_CLRG)
 2319                            FORMAT(1X,"UECP_CAP_OOPS",5(":",I5),2(":",F15.3))
                              END DO
                           END IF
                       WRITE(13,3298) NERC,PLNT_CD,CURIYR+UHBSYR+UPRTLT, & ! retirement date
                           W_IGRP,IGRP,IRECL,JGRP,KGRP,RCAP, &
                           RET_CAP(IRECL),RET_FOM(IRECL), &
                           RET_VAL(IRECL),EOTH_RYRS(IRECL)
 3298                   FORMAT(1X,"RETCAP:",I2,":",A2,6(":",I5), &
                           3(":",F10.3),":",F10.6,":",I2)
                           RCAP = RCAP - RET_CAP(IRECL)
                        END IF
                        IRECL = RET_NEXT(IRECL)
                     END DO
                  END IF
               END IF
               END IF
            END DO
         END IF
      END DO

!     LOOP OVER OWNERSHIP AND PLANT TYPES

      DO IOWN = 1 , 2
         IF (UPBLDTYP(NERC) .EQ. IOWN) THEN
            IF (IOWN .EQ. 1) THEN
               JOWN = 1
            ELSE
               JOWN = 3
            END IF

            XYR = UPPLYR(WIIG) + 1
            CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, WIIG, XYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
            HTRT_IG = AVG_HTRT(WIIG)

            XYR = UPPLYR(WIAC) + 1
            CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, WIAC, XYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
            HTRT_AC = AVG_HTRT(WIAC)

            DO PLANT = 1 , ECP_D_CAP

               XYR = UPPLYR(PLANT) + 1
               CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, PLANT, XYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

!              Revise Capital Costs and Heatrates for Plants with Capture to reflect NETL Program Goals if any

               B_HTRT_ADJ = 1.0
               B_CPEN_ADJ = 1.0
               B_CCST_ADJ(PLANT) = 1.0

               IF (PLANT .EQ. WIPQ) THEN
                  B_YR  = MIN(XYR + CURIYR - 1 , MNUMYR)
                  B_HTRT_ADJ = (HTRT_IG / AVG_HTRT(PLANT)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                  B_CPEN_ADJ = (B_HTRT_ADJ * AVG_HTRT(PLANT)) / HTRT_IG
                  B_CAP_CST_O = UPOVR(PLANT) - (UPOVR(WIIG) * (AVG_HTRT(PLANT) / HTRT_IG))
                  B_CAP_CST_N = B_CAP_CST_O * TCCF_GL(B_YR,2) * B_HTRT_ADJ
                  B_CCST_ADJ(PLANT) = (UPOVR(WIIG) * B_CPEN_ADJ + B_CAP_CST_N) / UPOVR(PLANT)
               END IF
               
               IF (PLANT .EQ. WIIS) THEN
                  B_YR  = MIN(XYR + CURIYR - 1 , MNUMYR)
                  B_HTRT_ADJ = (HTRT_IG / AVG_HTRT(PLANT)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                  B_CPEN_ADJ = (B_HTRT_ADJ * AVG_HTRT(PLANT)) / HTRT_IG
                  B_CAP_CST_O = UPOVR(PLANT) - (UPOVR(WIIG) * (AVG_HTRT(PLANT) / HTRT_IG))
                  B_CAP_CST_N = B_CAP_CST_O * TCCF_GL(B_YR,2) * B_HTRT_ADJ
                  B_CCST_ADJ(PLANT) = (UPOVR(WIIG) * B_CPEN_ADJ + B_CAP_CST_N) / UPOVR(PLANT)
               END IF


               IF (PLANT .EQ. WICS) THEN
                  B_YR  = MIN(XYR + CURIYR - 1 , MNUMYR)
                  B_HTRT_ADJ = (HTRT_AC / AVG_HTRT(PLANT)) * (1.0 - HTRT_GL(B_YR,2)) + HTRT_GL(B_YR,2)
                  B_CPEN_ADJ = (B_HTRT_ADJ * AVG_HTRT(PLANT)) / HTRT_AC
                  B_CAP_CST_O = UPOVR(PLANT) - (UPOVR(WIAC) * (AVG_HTRT(PLANT) / HTRT_AC))
                  B_CAP_CST_N = B_CAP_CST_O * TCCF_GL(B_YR,2) * B_HTRT_ADJ
                  B_CCST_ADJ(PLANT) = (UPOVR(WIAC) * B_CPEN_ADJ + B_CAP_CST_N) / UPOVR(PLANT)
               END IF

               IF ((PLANT .LE. ECP_D_DSP .AND. PLANT .NE. WICN .AND. PLANT .NE. WIAN .AND. PLANT .NE. WISM) .OR. PLANT .EQ. WIWD .OR. PLANT .EQ. WIBI) THEN
                  N_FLRG = 0
                  DO FRG = 1 , UNFRGN
                     IF (FL_CNXT_CST(NERC,FRG) .GT. 0.0) THEN
                        N_FLRG = N_FLRG + 1
                        NXT_FLRG(N_FLRG) = FRG
                     END IF
                  END DO
               ELSE
                  N_FLRG = 1
                  NXT_FLRG(1) = NERC
               END IF

               IF (UPVTYP(PLANT) .GT. 0 .OR. UPTOPR(PLANT) .EQ. 3) THEN
                  IF (UCPDSPIS(PLANT) .GT. 0) THEN               ! DISPATCHABLE
                     IECP = UCPDSPIS(PLANT)
                     ICAP = UCPDSPI(IECP)
                     PLNT_CD = UPLNTCD(UCPDSPI(IECP))
                     FULLYR = USYEAR(CURIYR) + UPPLYR(UCPDSPI(IECP))
                     OLYR = UPPLYR(UCPDSPI(IECP)) + 1
                     W_GRID = 1.0
                     WSCBEF = UPPSEF(IECP) * 100.0
                     WSEQEF = UPPCEF(IECP)
                     ELIFE = UPECLF(UCPDSPI(IECP))
                     EXPCHK = UPETTSW(UCPDSPI(IECP))

                     IF (UPGSUBPT(ICAP) .LE. 0)THEN
                        T_SOM = UPGSUB(ICAP)
                     ELSE
                        T_SOM = UPGSUBYR(ICAP,min(MNUMYR , FULLYR - UHBSYR))
                     END IF

                     GSYR1 = UPGSY1(ICAP)
                     GSYRL = UPGSYL(ICAP)
                     BLD_TYP = 'B'
                     NLLF = UPNLLF(UCPDSPI(IECP))
                     NCLF = UPNCLF(UCPDSPI(IECP))
                     TLF = UPTXLF(UCPDSPI(IECP))
                     CLT = UPCLYR(UCPDSPI(IECP))
                     PLT = UPPLYR(UCPDSPI(IECP))
                     DO JYR = 1 , CLT
                        CPR(JYR) = UPCPRO(UCPDSPI(IECP),JYR)
                     END DO
                     DO JYR = 1 , UNYEAR + UNXPH
                        CAPD(JYR) = UPCAPD(JYR,UCPDSPI(IECP))
                     END DO
                  ELSE IF (UCPINTIS(PLANT) .GT. 0) THEN           ! INTERMITTENT
                     IECP = UCPINTIS(PLANT)
                     ICAP = UCPINTI(IECP)
                     WSCBEF = 0.0
                     WSEQEF = 0.0
                     PLNT_CD = UPLNTCD(UCPINTI(IECP))
                     FULLYR = USYEAR(CURIYR) + UPPLYR(UCPINTI(IECP))
                     OLYR = UPPLYR(UCPINTI(IECP)) + 1
                     W_GRID = 1.0
                     ELIFE = UPECLF(UCPINTI(IECP))
                     EXPCHK = UPETTSW(UCPINTI(IECP))

                     IF (UPGSUBPT(ICAP) .LE. 0)THEN
                        T_SOM = UPGSUB(ICAP)
                     ELSE
                        T_SOM = UPGSUBYR(ICAP,min(MNUMYR , FULLYR - UHBSYR))
                     END IF

                     GSYR1 = UPGSY1(ICAP)
                     GSYRL = UPGSYL(ICAP)
                     BLD_TYP = 'I'
                     RNWTYP = UIRINTI(IECP)

!                    CRN ITC adjustment, can't claim both ITC and PTC, so if the PTC is available in OLYR, take that

                     IF ((UPGSUB(UCPINTI(IECP)) .GT. 0.0 .AND. FULLYR .GE. GSYR1 .AND. FULLYR .LE. GSYRL) .OR.  &
                         (UPGSUBPT(UCPINTI(IECP)) .GT. 0 .AND. UPGSUBYR(UCPINTI(IECP),min(MNUMYR , FULLYR - UHBSYR)) .GT. 0.0)) THEN
                        ITCADJ=1-UPCSB(UCPINTI(IECP))
                     ELSE
                        ITCADJ=1
                     ENDIF

                     write(18,'("CRN ITC5:",4(I4,":"),3(F12.5,":"))') UCPINTI(IECP),OLYR-1,gsyr1,gsyrl,upgsub(UCPINTI(IECP)),upcsb(UCPINTI(IECP)),itcadj

                     NLLF = UPNLLF(UCPINTI(IECP))
                     NCLF = UPNCLF(UCPINTI(IECP))
                     TLF = UPTXLF(UCPINTI(IECP))
                     CLT = UPCLYR(UCPINTI(IECP))
                     PLT = UPPLYR(UCPINTI(IECP))
                     DO JYR = 1 , CLT
                        CPR(JYR) = UPCPRO(UCPINTI(IECP),JYR)
                     END DO
                     DO JYR = 1 , UNYEAR + UNXPH
                        CAPD(JYR) = UPCAPD(JYR,UCPINTI(IECP))
                     END DO
                  ELSE IF (UCPSTOIS(PLANT) .GT. 0) THEN           ! STORAGE
                     IECP = UCPSTOIS(PLANT)
                     ICAP = UCPSTOI(IECP)
                     WSCBEF = 0.0
                     WSEQEF = 0.0
                     PLNT_CD = UPLNTCD(UCPSTOI(IECP))
                     FULLYR = USYEAR(CURIYR) + UPPLYR(UCPSTOI(IECP))
                     OLYR = UPPLYR(UCPSTOI(IECP)) + 1
                     W_GRID = 1.0
                     ELIFE = UPECLF(UCPSTOI(IECP))
                     EXPCHK = UPETTSW(UCPSTOI(IECP))

                     IF (UPGSUBPT(ICAP) .LE. 0)THEN
                        T_SOM = UPGSUB(ICAP)
                     ELSE
                        T_SOM = UPGSUBYR(ICAP,min(MNUMYR , FULLYR - UHBSYR))
                     END IF

                     GSYR1 = UPGSY1(ICAP)
                     GSYRL = UPGSYL(ICAP)
                     BLD_TYP = 'I'
                     RNWTYP = UIRINTI(IECP)

!                    CRN ITC adjustment, can't claim both ITC and PTC, so if the PTC is available in OLYR, take that

                     IF ((UPGSUB(UCPINTI(IECP)) .GT. 0.0 .AND. FULLYR .GE. GSYR1 .AND. FULLYR .LE. GSYRL) .OR.  &
                         (UPGSUBPT(UCPINTI(IECP)) .GT. 0 .AND. UPGSUBYR(UCPINTI(IECP),min(MNUMYR , FULLYR - UHBSYR)) .GT. 0.0)) THEN
                        ITCADJ=1-UPCSB(UCPINTI(IECP))
                     ELSE
                        ITCADJ=1
                     ENDIF

                     write(18,'("CRN ITC6:",4(I4,":"),3(F12.5,":"))') UCPSTOI(IECP),OLYR-1,gsyr1,gsyrl,upgsub(UCPSTOI(IECP)),upcsb(UCPSTOI(IECP)),itcadj

                     NLLF = UPNLLF(UCPSTOI(IECP))
                     NCLF = UPNCLF(UCPSTOI(IECP))
                     TLF = UPTXLF(UCPSTOI(IECP))
                     CLT = UPCLYR(UCPSTOI(IECP))
                     PLT = UPPLYR(UCPSTOI(IECP))
                     DO JYR = 1 , CLT
                        CPR(JYR) = UPCPRO(UCPSTOI(IECP),JYR)
                     END DO
                     DO JYR = 1 , UNYEAR + UNXPH
                        CAPD(JYR) = UPCAPD(JYR,UCPSTOI(IECP))
                     END DO
                  ELSE IF (UCPRNWIS(PLANT) .GT. 0) THEN           ! RENEWABLE
                     IECP = UCPRNWIS(PLANT)
                     ICAP = UCPRNWI(IECP)
                     WSCBEF = 0.0
                     IF (PLANT .EQ. WIBI) THEN
                        WSEQEF = UPPCEF(WIBI)
                     ELSE
                        WSEQEF = 0.0
                     END IF

                     PLNT_CD = UPLNTCD(UCPRNWI(IECP))
                     FULLYR = USYEAR(CURIYR) + UPPLYR(UCPRNWI(IECP))
                     OLYR = UPPLYR(UCPRNWI(IECP)) + 1
                     W_GRID = 1.0
                     ELIFE = UPECLF(UCPRNWI(IECP))
                     EXPCHK = UPETTSW(UCPRNWI(IECP))

                     IF (UPGSUBPT(ICAP) .LE. 0)THEN
                        T_SOM = UPGSUB(ICAP)
                     ELSE
                        T_SOM = UPGSUBYR(ICAP,min(MNUMYR , FULLYR - UHBSYR))
                     END IF

                     GSYR1 = UPGSY1(UCPRNWI(IECP))
                     GSYRL = UPGSYL(UCPRNWI(IECP))
                     BLD_TYP = 'B'
                     RNWTYP = UIRRNWI(IECP)

!                    CRN ITC adjustment, can't claim both ITC and PTC, so if the PTC is available in OLYR, take that

                     write(18,'("CRN ITC6:",4(I4,":"),3(F12.5,":"))') UCPRNWI(IECP),FULLYR,gsyr1,gsyrl,upgsub(UCPRNWI(IECP)),upcsb(UCPRNWI(IECP)),itcadj

                     NLLF = UPNLLF(UCPRNWI(IECP))
                     NCLF = UPNCLF(UCPRNWI(IECP))
                     TLF = UPTXLF(UCPRNWI(IECP))
                     CLT = UPCLYR(UCPRNWI(IECP))
                     PLT = UPPLYR(UCPRNWI(IECP))
                     DO JYR = 1 , CLT
                        CPR(JYR) = UPCPRO(UCPRNWI(IECP),JYR)
                     END DO
                     DO JYR = 1 , UNYEAR + UNXPH
                        CAPD(JYR) = UPCAPD(JYR,UCPRNWI(IECP))
                     END DO
                  ELSE IF (UCPDGNIS(PLANT) .GT. 0) THEN           ! DISTRIBUTED
                     IECP = UCPDGNIS(PLANT)
                     ICAP = UCPDGNI(IECP)
                     PLNT_CD = UPLNTCD(UCPDGNI(IECP))
                     FULLYR = USYEAR(CURIYR) + UPPLYR(UCPDGNI(IECP))
                     OLYR = UPPLYR(UCPDGNI(IECP)) + 1
                     W_GRID = 1.0
                     WSCBEF = 0.0
                     WSEQEF = 0.0
                     ELIFE = UPECLF(UCPDGNI(IECP))
                     EXPCHK = UPETTSW(UCPDGNI(IECP))
                     T_SOM = 0.0

!                    IF (UPGSUBPT(ICAP) .LE. 0)THEN
!                       T_SOM = UPGSUB(ICAP)
!                    ELSE
!                       T_SOM = UPGSUBYR(ICAP,min(MNUMYR , FULLYR - UHBSYR))
!                    END IF

                     BLD_TYP = 'B'
                     NLLF = UPNLLF(UCPDGNI(IECP))
                     NCLF = UPNCLF(UCPDGNI(IECP))
                     TLF = UPTXLF(UCPDGNI(IECP))
                     CLT = UPCLYR(UCPDGNI(IECP))
                     PLT = UPPLYR(UCPDGNI(IECP))
                     DO JYR = 1 , CLT
                        CPR(JYR) = UPCPRO(UCPDGNI(IECP),JYR)
                     END DO
                     DO JYR = 1 , UNYEAR + UNXPH
                        CAPD(JYR) = UPCAPD(JYR,UCPDGNI(IECP))
                     END DO
                  END IF

!                 CREATE COMBINED INDEX FOR ONSHORE AND OFFSHORE WIND FOR BUILD CONSTRAINTS, IF ANY

                  IF (UPLNTCD(ICAP) .NE. 'WF')THEN
                     LCAP = ICAP
                  ELSE
                     LCAP = WIWN
                  END IF

!                 GET ACTIVITY LEVEL FOR APPROPRIATE BUILD VECTOR

                  IF (FULLYR .GE. UPAVLYR(PLANT)) THEN

!                    CREATE EXTRA LOOP FOR SUBSIDY LIMITS, IF APPROPRIATE
 
                     IF (UPSUBCAS(PLANT).GT.0 .AND. LIMSUB(PLANT) .GT. 0.0)THEN
                       NUMLOOP = 2

!                       IF PTC SUBSIDY, CHECK IF VALID ONLINE YEAR
                          IF (UPSUBCAS(PLANT) .EQ. 1 ) THEN
                           IF (UPGSUBPT(PLANT) .LE. 0) THEN

                            IF (FULLYR .LT. GSYR1 .OR. FULLYR .GT. GSYRL) NUMLOOP = 1
                           ELSE
                            IF (UPGSUBYR(PLANT,MIN(MNUMYR,FULLYR-UHBSYR)) .LE. 0.0) NUMLOOP = 1
                           END IF
                          ENDIF
                      ELSE
                          NUMLOOP = 1
                      ENDIF


!                    CREATE EXTRA LOOP FOR SEQUESTRATION BONUS ALLOWANCES, IF APPROPRIATE

                     IF (UPSEQCAS .GT. 0 .AND. PLANT .LE. ECP_D_DSP)THEN
                        IF (UPPCEF(PLANT) .GT. 0.0)THEN
                           NUMLOOP = 2
                        END IF
                     END IF

!                    CHECK FOR TIME-DEPENDENT DEBT/EQUITY SUBSIDIES

                     CALL EP$SUBFIN(PLANT,OLYR,CSTDTADJ,CSTEQADJ,SHRDTADJ)

                     IF (PLANT .EQ. WIDS) THEN
                        NUMLOOP = 1              !don't have a separate build vector for with/without subsidy
                        WRITE(18,9213) CURITR, CURCALYR, NERC, PLANT, UCPSTOIS(PLANT), NUMLOOP, UPAVLYR(PLANT), FULLYR, IOWN, EPMSBLD(1,PLANT,1,IOWN,1)
 9213                   FORMAT(1X,"WIDS_LEVEL",9(":",I5),":",F21.6)
                     END IF
                     
!                     Write(6,*)'N_FLRG ',N_FLRG
                     DO LOOPS = 1 , NUMLOOP
                        DO FRG = 1 , N_FLRG
                           FLRG = NXT_FLRG(FRG)                          
                           CLRG = EPCLMP(FLRG)
                           GSRG = EPGSMP(FLRG)
                           CSRG = EPCSMP(FLRG)
                           CARG = EPCAMP(FLRG)
!                           Write(6,*)'check clrg ',Loops,Frg,Flrg,CLRG,GSRG,CSRG,CARG

                           IF ((PLANT .LE. ECP_D_DSP .AND. PLANT .NE. WICN .AND. PLANT .NE. WIAN .AND. PLANT .NE. WISM) .OR. PLANT .EQ. WIWD .OR. PLANT .EQ. WIDS .OR. PLANT .EQ. WIBI) THEN
                              JRG = 1
                           ELSE
                              JRG = NRG
                           END IF
                           DO IRG = 1 , JRG
                              EXPIND=0
                              EXP = EXPORT(IRG)
                              CALL GETBLD(1,EXP)
                              IF (UCPDSPIS(PLANT) .GT. 0) THEN               ! DISPATCHABLE
                                 NSTEPS = MAX(1,ESTSWTCH(PLANT))
                              ELSE IF (UCPDGNIS(PLANT) .GT. 0) THEN          ! DISTRIBUTED
                                 NSTEPS = ECP_D_DGS
                              ELSE IF (UCPSTOIS(PLANT) .GT. 0) THEN          ! STORAGE
                                 NSTEPS = 1
                              ELSE                                           ! RENEWABLE
                                 NSTEPS = EPSTSUP(RNWTYP)
                              END IF
                              DO STEP = 1 , NSTEPS
!
!                                IN FINAL MASS-BASED EXISTING CASE, ALSO CREATE BUILDS FOR SET-ASIDES IF USED
!
                                 CPPLOOP = 1
                                 IF (CO2_STDSW .GT. 0 .AND. CO2_STDSA .GT. 0 .AND. CO2_STDQT .EQ. 2 .AND. CO2_STDTN(NERC) .EQ. 2 .AND. CO2_PLTSA(PLANT) .GT. 0)THEN
                                    IF (FULLYR .GE. CO2_STDY1 .AND. STEP .EQ. 1)THEN
                                       CPPLOOP = 2
                                    END IF
                                 END IF
                                 DO CLOOP = 1 , CPPLOOP
                                    IF (CLOOP .LT. 2)THEN
                                       CSTEPS = 1
                                    ELSE
                                       CSTEPS = CO2_PLTSA(PLANT)
                                    END IF
                                    IF (IRG .EQ. 1 .OR. CLOOP .EQ. 1)THEN
                                       DO CS = 1 , CSTEPS
                                          LEVEL = DBLE(0.0)
                                          STATUS = '  '
 
                                          IF (UCPDGNIS(PLANT) .GT. 0) THEN
                                             T_DG = EPDAVD(STEP) * UPDGAVR
                                          ELSE
                                             T_DG = 0.0
                                          END IF
                                          
                                          IF (IRG .EQ. 1) THEN
                                             IF ((PLANT .LE. ECP_D_DSP .AND. PLANT .NE. WICN .AND. PLANT .NE. WIAN .AND. PLANT .NE. WISM) .OR. PLANT .EQ. WIWD .OR. PLANT .EQ. WIBI) THEN
                                                IF (LOOPS .EQ. 1)THEN
                                                   BUILDNM = BLD_TYP//UPRGCD(NERC)//PLNT_CD//UPOWNCD(IOWN)//EPFLCD(FLRG)//SSTEP(STEP)//UPYRCD(1); call makmsk(BUILDNM_mask,':'//BLD_TYP//':',UPRGCD(NERC),PLNT_CD,UPOWNCD(IOWN),EPFLCD(FLRG),SSTEP(STEP),UPYRCD(1))
                                                ELSE
                                                   BUILDNM = BLD_TYP//UPRGCD(NERC)//PLNT_CD//UPOWNCD(IOWN)//EPFLCD(FLRG)//SUB_CODE(STEP)//UPYRCD(1); call makmsk(BUILDNM_mask,':'//BLD_TYP//':',UPRGCD(NERC),PLNT_CD,UPOWNCD(IOWN),EPFLCD(FLRG),SUB_CODE(STEP),UPYRCD(1))
                                                END IF
                                                T_TCAP = FL_CNXT_CST(NERC,FLRG) + EPCTRM(PLANT)

                                                CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, PLANT, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                                             ELSE
                                                IF (CLOOP .EQ. 1)THEN
                                                   IF (LOOPS .EQ. 1)THEN
                                                      BUILDNM = BLD_TYP//UPRGCD(NERC)//PLNT_CD//UPOWNCD(IOWN)//'X'//SSTEP(STEP)//UPYRCD(1); call makmsk(BUILDNM_mask,':'//BLD_TYP//':',UPRGCD(NERC),PLNT_CD,UPOWNCD(IOWN),':X:',SSTEP(STEP),UPYRCD(1))
                                                   ELSE
                                                      BUILDNM = BLD_TYP//UPRGCD(NERC)//PLNT_CD//UPOWNCD(IOWN)//'S'//SSTEP(STEP)//UPYRCD(1); call makmsk(BUILDNM_mask,':'//BLD_TYP//':',UPRGCD(NERC),PLNT_CD,UPOWNCD(IOWN),':S:',SSTEP(STEP),UPYRCD(1))
                                                   END IF
                                                ELSE
                                                   IF (LOOPS .EQ. 1)THEN
                                                      BUILDNM = BLD_TYP//UPRGCD(NERC)//PLNT_CD//UPOWNCD(IOWN)//'X'//SA_CODE(CS)//UPYRCD(1); call makmsk(BUILDNM_mask,':'//BLD_TYP//':',UPRGCD(NERC),PLNT_CD,UPOWNCD(IOWN),':X:',SA_CODE(CS),UPYRCD(1))
                                                   ELSE
                                                      BUILDNM = BLD_TYP//UPRGCD(NERC)//PLNT_CD//UPOWNCD(IOWN)//'S'//SA_CODE(CS)//UPYRCD(1); call makmsk(BUILDNM_mask,':'//BLD_TYP//':',UPRGCD(NERC),PLNT_CD,UPOWNCD(IOWN),':S:',SA_CODE(CS),UPYRCD(1))
                                                   END IF
                                                END IF

!                                               T_TCAP = EPCOVR(PLANT) + EPCTRM(PLANT) - T_DG

                                                T_TCAP = EPCOVR(PLANT) + EPCTRM(PLANT)

                                                CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, PLANT, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                                             END IF
                                             T_TFCF = EPCCRF(PLANT)
                                          ELSE
                                             IF (LOOPS .EQ. 1)THEN
                                                BUILDNM = BLD_TYP//UPRGCD(EXP)//PLNT_CD//UPOWNCD(IOWN)//UPRGCD(NERC)//SSTEP(STEP)//UPYRCD(1); call makmsk(BUILDNM_mask,':'//BLD_TYP//':',UPRGCD(EXP),PLNT_CD,UPOWNCD(IOWN),UPRGCD(NERC),SSTEP(STEP),UPYRCD(1))
                                             ELSE
                                                BUILDNM = BLD_TYP//UPRGCD(EXP)//PLNT_CD//UPOWNCD(IOWN)//UPRGCD(NERC)//SUB_CODE(STEP)//UPYRCD(1); call makmsk(BUILDNM_mask,':'//BLD_TYP//':',UPRGCD(EXP),PLNT_CD,UPOWNCD(IOWN),UPRGCD(NERC),SUB_CODE(STEP),UPYRCD(1))
                                             END IF
                                             T_TCAP = INTER_CST(EXP) + EPCTRM(PLANT)
                                             T_TFCF = INTER_FCF(EXP)
                                             T_TOM = EPCFOM(PLANT)

                                             CALL ECP_AVG_HTRT(FROM_LABEL, EXP, 0, PLANT, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                                             !EXPIND = 1
                                             !WRITE(*,*)'INTERREG_ECP',CURIYR,EXP,NERC,BUILDNM,T_TCAP,T_TFCF
                                          END IF

!                                         IF MARKET SHARING IS NOT ON THEN USE ECP RESULTS - ALSO SKIP MARKET SHARING FOR SUBSIDIES WITH CAPACITY LIMITS OR SET-ASIDES FOR CPP

                                          TWOVAL = 0.0
                                          IF (ECP_D_MSHR .LE. 0 .OR. (LOOPS .EQ. 1 .AND. BUILD_AVL(PLANT,1,NERC,CURIYR) .EQ. 2) .OR. CLOOP .EQ. 2) THEN ! (LOOPS .EQ. 1 .AND. BUILD_AVL(PLANT,1,NERC,CURIYR) THIS INDICATES THAT HAS SUBSIDY SO WE WANT TO WAIT TILL THE LOOP 2 GOES THROUGH RSULTS
                                             CALL CWFSCOL(BUILDNM,'A       ',STATUS,TWOVAL,BUILDNM_mask,IRET)
                                             IF (IRET .EQ. 0) THEN 
                                                LEVEL=TWOVAL(1)
                                                BLDSTS = STATUS
                                             ENDIF
											 
											 ! IGNORE ANY BUILDS < 1 MW TO BE CONSISTANT WITH MARKET SHARING PROCEDURE
											 IF (LEVEL .LT. DBLE(0.001)) THEN
												LEVEL = DBLE(0.0)
											 END IF

!                                            AS IN MARKET SHARING, DON'T ALLOW NUCLEAR IF LESS THAN HALF A UNIT
   
                                             IF (PLANT .EQ. WICN .OR. PLANT .EQ. WIAN .OR. PLANT .EQ. WISM)THEN
                                                IF (LEVEL .LT. DBLE(UPLRMIN(PLANT) * UPMSSIZ(PLANT) * 0.001)) THEN
                                                   LEVEL = DBLE(0.0)
                                                END IF
                                             END IF
                                          ELSE
                                             IF ((PLANT .LE. ECP_D_DSP .AND. PLANT .NE. WICN .AND. PLANT .NE. WIAN  .AND. PLANT .NE. WISM) .OR. PLANT .EQ. WIWD .OR. PLANT .EQ. WIBI) THEN
                                                LEVEL = EPMSBLD(FRG,PLANT,STEP,IOWN,1) ! EPMSBLD COMES OUT OF THE MARKET SHARING RESULTS
                                             ELSE
                                                LEVEL = EPMSBLD(IRG,PLANT,STEP,IOWN,1)
                                             END IF
                                             BLDSTS = 'MS'
                                          END IF

                                          IF (LEVEL .GT. DBLE(0.0)) THEN

!                                            APPLY TECHNOLOGY COST CURVE MULTIPLIER FOR RENEWABLE PLANTS

                                             IF (UCPDSPIS(PLANT) .GT. 0) THEN
                                                WHRATE = AVG_HTRT(PLANT) * B_HTRT_ADJ
                                                W_VOM = EPVOM(UCPDSPI(IECP))
                                                B_YR = MIN(CURIYR + UPPLYR(PLANT) - 1 , UNYEAR)
                                                W_FOM = EPFOM(UCPDSPI(IECP))
                                                T_TOM = EPCFOM(UCPDSPI(IECP))
                                                T_EXT = EPEXT(UCPDSPI(IECP),MNPOLLUT+1)
                                                OVRCST1 = UPOVR(UCPDSPI(IECP)) * B_CCST_ADJ(IECP) * &
                                                   UPLRPC(UCPDSPI(IECP)) * UPLROPT(UCPDSPI(IECP)) *     &
                                                   UPLRLC(UCPDSPI(IECP)) * EPRGM(UCPDSPI(IECP)) *  &
                                                   EPACM(UCPDSPI(IECP)) * UPANNADJ(UCPDSPI(IECP),MIN(MNUMYR,FULLYR-UHBSYR))
                                                OVRCST = OVRCST1 * ESTCPCST(PLANT,STEP)
                                                F_FCT = 1.0
                                                C_FCT = ESTCPCST(PLANT,STEP)
                                             ELSEIF (UCPDGNIS(PLANT) .GT. 0) THEN
                                                WHRATE = AVG_HTRT(PLANT)
                                                W_VOM = EPVOM(UCPDGNI(IECP))
                                                W_FOM = EPFOM(UCPDGNI(IECP))
                                                T_TOM = EPCFOM(UCPDGNI(IECP))
                                                T_EXT = EPEXT(UCPDGNI(IECP),MNPOLLUT+1)
                                                OVRCST1 = UPOVR(UCPDGNI(IECP)) * &
                                                   UPLRPC(UCPDGNI(IECP)) * UPLROPT(UCPDGNI(IECP)) *     &
                                                   UPLRLC(UCPDGNI(IECP)) * EPRGM(UCPDGNI(IECP)) *  &
                                                   EPACM(UCPDGNI(IECP)) * UPANNADJ(UCPDGNI(IECP),MIN(MNUMYR,FULLYR-UHBSYR))
                                                OVRCST = OVRCST1
                                                F_FCT = 1.0
                                                C_FCT = 1.0
                                             ELSEIF (UCPSTOIS(PLANT) .GT. 0) THEN
                                                WHRATE = AVG_HTRT(PLANT)
                                                W_VOM = EPVOM(UCPSTOI(IECP))
                                                W_FOM = EPFOM(UCPSTOI(IECP))
                                                T_TOM = EPCFOM(UCPSTOI(IECP))
                                                T_EXT = EPEXT(UCPSTOI(IECP),MNPOLLUT+1)
                                                OVRCST1 = UPOVR(UCPSTOI(IECP)) * &
                                                   UPLRPC(UCPSTOI(IECP)) * UPLROPT(UCPSTOI(IECP)) *     &
                                                   UPLRLC(UCPSTOI(IECP)) * EPRGM(UCPSTOI(IECP)) *  &
                                                   EPACM(UCPSTOI(IECP)) * UPANNADJ(UCPSTOI(IECP),MIN(MNUMYR,FULLYR-UHBSYR))
                                                OVRCST = OVRCST1
                                                F_FCT = 1.0
                                                C_FCT = 1.0
                                             ELSE
                                                WHRATE = AVG_HTRT(PLANT)
                                                W_VOM = EPIRVOM(RNWTYP)
                                                W_FOM = EPIRFOM(RNWTYP)
                                                T_TOM = EPCFOM(PLANT)
                                                T_EXT = EPEXT(RNWTYP,MNPOLLUT+1)

!                                               CRN ITC adjustment, can't claim both ITC and PTC, so if the PTC is available in OLYR, take that

                                                IF (UPGSUB(ICAP) .GT. 0.0 .AND. FULLYR .GE. GSYR1 .AND. FULLYR .LE. GSYRL) THEN
                                                   ITCADJ=1.0 - UPCSB(ICAP)
                                                ELSE
                                                   ITCADJ=1.0
                                                ENDIF
                                                OVRCST1 =  &
                                                   (EPIROVR(RNWTYP)/ITCADJ) * UPLRPC(ICAP) * &
                                                   UPLROPT(ICAP) * UPLRLC(ICAP) * &
                                                   EPRGM(ICAP) * EPACM(ICAP) * UPANNADJ(ICAP,MIN(MNUMYR,FULLYR-UHBSYR))
                                                OVRCST = OVRCST1 * EPCCSUP(RNWTYP,STEP)
                                                F_FCT = EPFXSUP(RNWTYP,STEP)
                                                C_FCT = EPCCSUP(RNWTYP,STEP)

!                                               WRITE(6,3755) CURIRUN, CURCALYR, CURITR, NERC, RNWTYP, STEP, EPCCSUP(RNWTYP,STEP)
!3755                                           FORMAT(1X,"EPCCSUP_EPO_BILD",6(":",I4),":",F21.6)

                                             END IF

!                                            UPDATE NATIONAL CAPACITY LIMIT FOR THIS TYPE, IF ANY

                                             IF (UPBLDREG(LCAP,MNUMNR) .GT. 0.0 .AND. UPBLDREG(LCAP,MNUMNR) .LT. 999.0)THEN
                                                UPBLDREG(LCAP,MNUMNR) = UPBLDREG(LCAP,MNUMNR) - LEVEL
                                                UPBLDREG(LCAP,MNUMNR) = MAX(UPBLDREG(LCAP,MNUMNR),0.0)
                                             END IF

!                                            UPDATE REGIONAL CAPACITY LIMIT FOR THIS TYPE, IF ANY

                                             IF (UPBLDREG(LCAP,EXP) .GT. 0.0 .AND. UPBLDREG(LCAP,EXP) .LT. 999.0)THEN
                                                UPBLDREG(LCAP,EXP) = UPBLDREG(LCAP,EXP) - LEVEL
                                                UPBLDREG(LCAP,EXP) = MAX(UPBLDREG(LCAP,EXP),0.0)
                                             END IF

!                                            ELIMINATE ITC IF ONLY FOR LIMITED SUBSIDY

                                             IF (UPSUBCAS(PLANT) .EQ. 2 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                                OVRCST = OVRCST / DBLE(1.0 - UPCSB(PLANT))
                                             END IF

!                                            UPDATE LOCAL ARRAY ACCUMULATING CAPACITY ADDITIONS WITH SUBSIDY

                                             IF (UPSUBCAS(PLANT) .GT. 0 .AND. LOOPS .EQ. 2)THEN
                                                IF ((PLANT .NE. WIAN .AND. PLANT .NE. WISM) .OR. UPSUBFCF(PLANT) .LE. 0.0) THEN
                                                   CAPSUB(PLANT) = CAPSUB(PLANT) - LEVEL
                                                   CAPSUB(PLANT) = MAX(CAPSUB(PLANT),0.0)
                                                  IF (PLANT .EQ. WISM) THEN   !adjust AN limit because in shared constraint (SMR constraint not used)
                                                   CAPSUB(WIAN) = CAPSUB(WIAN) - LEVEL
                                                   CAPSUB(WIAN) = MAX(CAPSUB(WIAN),0.0)
                                                  ENDIF
                                                ELSE
                                                   CAPSUB(PLANT) = CAPSUB(PLANT) + LEVEL
                                                END IF
                                             END IF

!                                            CHECK IF SUBSIDY FOR DEBT FRACTION

                                             IF (UPSUBCAS(PLANT) .EQ. 3 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                                DEBT_F = UPNFDT
                                             ELSE
!                                               ADJUST DEBT FRACTION ADJUSTMENT WHEN SUBSIDY IN PLACE

                                                DBTADJ = 1.0
                                                IF (UPNFDTA(PLANT) .NE. 0.0 .AND. USW_WACC .GT. 0)THEN
                                                  IF (UPGSUBPT(PLANT) .GT. 0.0 .AND. UPGSUBYR(PLANT,UPSTYR - UHBSYR) .GT. 0.0)THEN
                                                    DBTADJ = 1.0 - (UPGSUBYR(PLANT,UPSTYR - UHBSYR) - UPGSUBYR(PLANT,MIN(CURIYR + OLYR - 1,UNYEAR))) /  &
                                                           UPGSUBYR(PLANT,UPSTYR - UHBSYR)
                                                   END IF
                                                   IF (UPCSBYR(PLANT,UPSTYR - UHBSYR) .GT. 0.0)THEN
                                                    DBTADJ = 1.0 - (UPCSBYR(PLANT,UPSTYR - UHBSYR) - UPCSBYR(PLANT,MIN(CURIYR + OLYR - 1,UNYEAR))) /   &
                                                        UPCSBYR(PLANT,UPSTYR - UHBSYR)
                                                   END IF
                                                END IF

                                                DEBT_F = UPNFDT + UPNFDTA(PLANT) * DBTADJ
                                             END IF
                                             DEBT_F = DEBT_F + SHRDTADJ

!                                            CHECK IF SUBSIDY FOR COST OF DEBT
      
                                             IF (UPSUBCAS(PLANT) .EQ. 4 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                                EWGINT = EPUIRT + UPNIPRM
                                                UTINT = EPUIRT
                                             ELSE
                                                EWGINT = EPUIRT + UPNIPRM + UPNIRTEA(PLANT)
                                                UTINT = EPUIRT + UPNIRTEA(PLANT)
                                             END IF
                                             EWGINT = EWGINT + CSTDTADJ
                                             UTINT  = UTINT  + CSTDTADJ

!                                            CHECK IF SUBSIDY FOR COST OF EQUITY

                                             IF (UPSUBCAS(PLANT) .EQ. 5 .AND. NUMLOOP .EQ. 2 .AND. LOOPS .EQ. 1)THEN
                                                EWGROE = EPUCRE + UPNRPRM
                                                UTROE = EPUCRE
                                             ELSE
                                                EWGROE = EPUCRE + UPNRPRM + UPNRRTEA(PLANT)
                                                UTROE = EPUCRE + UPNRRTEA(PLANT)
                                             END IF
                                             EWGROE = EWGROE + CSTEQADJ
                                             UTROE  = UTROE  + CSTEQADJ
                                             UTROR = UTROE * (1.0 - DEBT_F) + UTINT * DEBT_F

                                             LEVEL = LEVEL * DBLE(1000.0) ! CONVERT FROM GW TO MW
                                             YEAR = FULLYR - UHBSYR

!                                            UPDATE LOCAL ARRAY ACCUMULATING CAPACITY ADDITIONS

                                             ECPADDS(NERC,YEAR) = ECPADDS(NERC,YEAR) + LEVEL / DBLE(1000.0)

                                             JEFD = UPEFDT(PLANT)

!                                            STORE CAPACITY-RELATED DATA

                                             BLD = LEVEL

!                                            REAL*8

                                             W_CF = 0.0

                                             IF (UCPDSPIS(PLANT) .GT. 0 ) THEN
                                                W_CF = UPMCF(PLANT)
                                             ELSE IF (UCPINTIS(PLANT) .GT. 0 ) THEN
                                                W_CF = EPIACF(IECP)
                                                IF(IRG .NE. 1) W_CF = EPIACF(IECP) * (1-EPTLOSS(EXP,NERC))
                                                DO IMO = 1, 12
                                                   WCF_M(IMO) = CFmonth(UCPINTIS(PLANT),IMO,NERC)
                                                   IF(IRG .NE. 1) THEN 
                                                      WCF_M(IMO) = CFmonth(UCPINTIS(PLANT),IMO,EXP) * (1-EPTLOSS(EXP,NERC)) !cf of export region
                                                      !IF (IMO .EQ. 1) WRITE(*,*) 'CFmonth',WCF_M(IMO),CFmonth(UCPINTIS(PLANT),IMO,EXP),PLANT,EXP,CURIYR
                                                   END IF
                                                END DO
                                             ELSE IF (UCPSTOIS(PLANT) .GT. 0 ) THEN
                                                W_CF = UPMCF(PLANT)
                                             ELSE
                                                W_CF = EPRCFC(IECP)
                                                IF(IRG .NE. 1) W_CF = EPRCFC(IECP) * (1-EPTLOSS(EXP,NERC))
                                                DO IMO = 1, 12
                                                   WCF_M(IMO) = W_CF
                                                   IF (UPLNTCD(IECP) .EQ. 'HY' ) THEN
                                                      WCF_M(IMO) = WMFHYEL(NERC,STEP,IMO,CURIYR-1)
                                                      IF(IRG .NE. 1) WCF_M(IMO) = WMFHYEL(EXP,STEP,IMO,CURIYR-1) * (1-EPTLOSS(EXP,NERC))
                                                   ENDIF
                                                END DO
                                             ENDIF

!                                            For New Units, Estimate $/MWH Cost and record capacity and generation for next ECP year Storage Calculation

                                             FUEL_VAL = 0.0
                                             FUEL_VAL1 = 0.0
                                             FUEL_VAL2 = 0.0
                                             IFL = 0
                                             IRET = 0
                                             ROW_FUEL = '                '
                                             IF (UPTTYP(PLANT) .LE. NW_COAL) THEN
                                                ROW_FUEL = 'F' // EPFLCD(FLRG) // PLNT_CD // 'SXX' // UPYRCD(UPPLYR(PLANT)+1); call makmsk(ROW_FUEL_mask,':F:' , EPFLCD(FLRG) , PLNT_CD ,'S', ':XX:' , UPYRCD(UPPLYR(PLANT)+1)) ! exception: S/U/X as scrubber set element
                                                CALL CWFSROW(ROW_FUEL,'P       ',STATUS,FUEL_VAL,ROW_FUEL_mask,IRET)
                                             ELSE IF (PLANT .EQ. WIWD .OR. PLANT .EQ. WIBI) THEN      !hard code the fuel code - there is only one fuel row 'WDXXX'
                                                ROW_FUEL = 'F' // EPFLCD(CLRG) // 'WD' // 'XXX' // UPYRCD(UPPLYR(PLANT)+1); call makmsk(ROW_FUEL_mask,':F:' , EPFLCD(CLRG) , 'WD' , 'X',':XX:' , UPYRCD(UPPLYR(PLANT)+1)) ! exception: S/U/X as scrubber set element
                                                CALL CWFSROW(ROW_FUEL,'P       ',STATUS,FUEL_VAL,ROW_FUEL_mask,IRET)
                                             ELSE IF (PLANT .LT. WICN) THEN
                                                ROW_FUEL = 'F' // EPFLCD(FLRG) // PLNT_CD // 'XX1' // UPYRCD(UPPLYR(PLANT)+1); call makmsk(ROW_FUEL_mask,':F:' , EPFLCD(FLRG) , PLNT_CD , ':XX:','1' , UPYRCD(UPPLYR(PLANT)+1))
                                                CALL CWFSROW(ROW_FUEL,'P       ',STATUS,FUEL_VAL1,ROW_FUEL_mask,IRET)
                                                ROW_FUEL = 'F' // EPFLCD(FLRG) // PLNT_CD // 'XX2' // UPYRCD(UPPLYR(PLANT)+1); call makmsk(ROW_FUEL_mask,':F:' , EPFLCD(FLRG) , PLNT_CD , ':XX:','2' , UPYRCD(UPPLYR(PLANT)+1))
                                                CALL CWFSROW(ROW_FUEL,'P       ',STATUS,FUEL_VAL2,ROW_FUEL_mask,IRET)
                                                FUEL_VAL(1) = FUEL_VAL1(1) * 0.5 + FUEL_VAL2(1) * 0.5
                                             ELSE IF (PLANT .EQ. WICN .OR. PLANT .EQ. WIAN .OR. PLANT .EQ. WISM .OR. PLANT .EQ. WIGN) THEN
                                                IFL = UPFLTP(PLANT,1)
                                                FUEL_VAL(1) = UPPFL(IFL,NERC,UPPLYR(PLANT)+1) * 0.001
                                             ELSE IF (PLANT .EQ. WIDP .OR. PLANT .EQ. WIDB) THEN
                                                ROW_FUEL = 'FUELNGX' //  UPYRCD(UPPLYR(PLANT)+1); call makmsk(ROW_FUEL_mask,':FUELNGX:' ,  UPYRCD(UPPLYR(PLANT)+1))
                                                CALL CWFSROW(ROW_FUEL,'P       ',STATUS,FUEL_VAL,ROW_FUEL_mask,IRET)
                                             END IF

!                                            IF INT/RNW PLANTS SET UADD VARIABLES

                                             IF (UCPINTIS(PLANT) .GT. 0 ) THEN
                                                INT = UCPINTIS(PLANT)
                                                IF (UPLNTCD(UCPINTI(INT)) .EQ. 'SO') THEN
                                                   UADDSTT(NERC,CURIYR + PLT) = UADDSTT(NERC,CURIYR + PLT) + LEVEL
                                                   UADDSTT(MNUMNR,CURIYR + PLT) = UADDSTT(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDSTD(EXP,CURIYR + PLT) = UADDSTD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDSTD(MNUMNR,CURIYR + PLT) = UADDSTD(MNUMNR,CURIYR + PLT) + LEVEL
                                                ELSEIF (UPLNTCD(UCPINTI(INT)) .EQ. 'PV') THEN
                                                   UADDPVT(NERC,CURIYR + PLT) = UADDPVT(NERC,CURIYR + PLT) + LEVEL
                                                   UADDPVT(MNUMNR,CURIYR + PLT) = UADDPVT(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDPVD(EXP,CURIYR + PLT) = UADDPVD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDPVD(MNUMNR,CURIYR + PLT) = UADDPVD(MNUMNR,CURIYR + PLT) + LEVEL
                                                ELSEIF (UPLNTCD(UCPINTI(INT)) .EQ. 'PT') THEN
                                                   UADDPTT(NERC,CURIYR + PLT) = UADDPTT(NERC,CURIYR + PLT) + LEVEL
                                                   UADDPTT(MNUMNR,CURIYR + PLT) = UADDPTT(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDPTD(EXP,CURIYR + PLT) = UADDPTD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDPTD(MNUMNR,CURIYR + PLT) = UADDPTD(MNUMNR,CURIYR + PLT) + LEVEL
                                                ELSEIF (UPLNTCD(UCPINTI(INT)) .EQ. 'WN') THEN
                                                   UADDWNT(NERC,CURIYR + PLT) = UADDWNT(NERC,CURIYR + PLT) + LEVEL
                                                   UADDWNT(MNUMNR,CURIYR + PLT) = UADDWNT(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDWND(EXP,CURIYR + PLT) = UADDWND(EXP,CURIYR + PLT) + LEVEL
                                                   UADDWND(MNUMNR,CURIYR + PLT) = UADDWND(MNUMNR,CURIYR + PLT) + LEVEL

                                                   WRITE(22,'(A,3I4,F14.6)') 'UPDATE UADDWNT HERE FOR NERC,CURIYR,CLT,LEVEL=',NERC,CURIYR,CLT,LEVEL

                                                ELSEIF (UPLNTCD(UCPINTI(INT)) .EQ. 'WL') THEN
                                                   UADDWLT(NERC,CURIYR + PLT) = UADDWLT(NERC,CURIYR + PLT) + LEVEL
                                                   UADDWLT(MNUMNR,CURIYR + PLT) = UADDWLT(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDWLD(EXP,CURIYR + PLT) = UADDWLD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDWLD(MNUMNR,CURIYR + PLT) = UADDWLD(MNUMNR,CURIYR + PLT) + LEVEL

                                                   WRITE(22,'(A,3I4,F14.6)') 'UPDATE UADDWLT HERE FOR NERC,CURIYR,CLT,LEVEL=',NERC,CURIYR,CLT,LEVEL

                                                ELSEIF (UPLNTCD(UCPINTI(INT)) .EQ. 'WF') THEN
                                                   UADDWFT(NERC,CURIYR + PLT) = UADDWFT(NERC,CURIYR + PLT) + LEVEL
                                                   UADDWFT(MNUMNR,CURIYR + PLT) = UADDWFT(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDWFD(EXP,CURIYR + PLT) = UADDWFD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDWFD(MNUMNR,CURIYR + PLT) = UADDWFD(MNUMNR,CURIYR + PLT) + LEVEL

                                                   WRITE(22,'(A,3I4,F14.6)') 'UPDATE UADDWFT HERE FOR NERC,CURIYR,CLT,LEVEL=',NERC,CURIYR,CLT,LEVEL

                                                ENDIF
                                             ELSE IF (UCPRNWIS(PLANT) .GT. 0 ) THEN
                                                RNW = UCPRNWIS(PLANT)
                                                IF (UPLNTCD(UCPRNWI(RNW)) .EQ. 'HY') THEN
                                                   UADDHYT(NERC,CURIYR + PLT) = UADDHYT(NERC,CURIYR + PLT) + LEVEL
                                                   UADDHYT(MNUMNR,CURIYR + PLT) = UADDHYT(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDHYD(EXP,CURIYR + PLT) = UADDHYD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDHYD(MNUMNR,CURIYR + PLT) = UADDHYD(MNUMNR,CURIYR + PLT) + LEVEL
                                                ELSEIF (UPLNTCD(UCPRNWI(RNW)) .EQ. 'PS') THEN
                                                   UADDPST(NERC,CURIYR + PLT) = UADDPST(NERC,CURIYR + PLT) + LEVEL
                                                   UADDPST(MNUMNR,CURIYR + PLT) = UADDPST(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDPSD(EXP,CURIYR + PLT) = UADDPSD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDPSD(MNUMNR,CURIYR + PLT) = UADDPSD(MNUMNR,CURIYR + PLT) + LEVEL
                                                ELSEIF (UPLNTCD(UCPRNWI(RNW)) .EQ. 'P2') THEN
                                                   UADDPST(NERC,CURIYR + PLT) = UADDPST(NERC,CURIYR + PLT) + LEVEL
                                                   UADDPST(MNUMNR,CURIYR + PLT) = UADDPST(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDPSD(EXP,CURIYR + PLT) = UADDPSD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDPSD(MNUMNR,CURIYR + PLT) = UADDPSD(MNUMNR,CURIYR + PLT) + LEVEL
                                                ELSEIF (UPLNTCD(UCPRNWI(RNW)) .EQ. 'GT') THEN
                                                   UADDGET(NERC,CURIYR + PLT) = UADDGET(NERC,CURIYR + PLT) + LEVEL
                                                   UADDGET(MNUMNR,CURIYR + PLT) = UADDGET(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDGED(EXP,CURIYR + PLT) = UADDGED(EXP,CURIYR + PLT) + LEVEL
                                                   UADDGED(MNUMNR,CURIYR + PLT) = UADDGED(MNUMNR,CURIYR + PLT) + LEVEL
                                                ELSEIF (UPLNTCD(UCPRNWI(RNW)) .EQ. 'WD') THEN
                                                   UADDWDT(NERC,CURIYR + PLT) = UADDWDT(NERC,CURIYR + PLT) + LEVEL
                                                   UADDWDT(MNUMNR,CURIYR + PLT) = UADDWDT(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDWDD(EXP,CURIYR + PLT) = UADDWDD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDWDD(MNUMNR,CURIYR + PLT) = UADDWDD(MNUMNR,CURIYR + PLT) + LEVEL
                                                ELSEIF (UPLNTCD(UCPRNWI(RNW)) .EQ. 'MS') THEN
                                                   UADDMST(NERC,CURIYR + PLT) = UADDMST(NERC,CURIYR + PLT) + LEVEL
                                                   UADDMST(MNUMNR,CURIYR + PLT) = UADDMST(MNUMNR,CURIYR + PLT) + LEVEL
                                                   UADDMSD(EXP,CURIYR + PLT) = UADDMSD(EXP,CURIYR + PLT) + LEVEL
                                                   UADDMSD(MNUMNR,CURIYR + PLT) = UADDMSD(MNUMNR,CURIYR + PLT) + LEVEL
                                                ENDIF
!                                            ELSE IF (UCPSTOIS(PLANT) .GT. 0 ) THEN
!                                               STO = UCPSTOIS(PLANT)
!                                               IF (UPLNTCD(UCPSTOI(STO)) .EQ. 'DS') THEN
!                                                  UADDDST(NERC,CURIYR + PLT) = UADDDST(NERC,CURIYR + PLT) + LEVEL
!                                                  UADDDST(MNUMNR,CURIYR + PLT) = UADDDST(MNUMNR,CURIYR + PLT) + LEVEL
!                                                  UADDDSD(EXP,CURIYR + PLT) = UADDDSD(EXP,CURIYR + PLT) + LEVEL
!                                                  UADDDSD(MNUMNR,CURIYR + PLT) = UADDDSD(MNUMNR,CURIYR + PLT) + LEVEL
!                                               ENDIF
                                             ENDIF

!                                            INTEGER

                                             W_SYR = FULLYR
                                             W_SMO = 1
                                             W_RYR = 9999
                                             W_RMO = 12
                                             WRFURB = FULLYR
                                             WSCBYR = W_SYR
                                             WVIN = 3

!                                            CHARACTER*2

                                             DO IFL = 1 , UIFPLT
                                                IF (UPTTYP(PLANT) .LE. NW_COAL) THEN
                                                   IF (IFL .EQ. 1) THEN
                                                      WFL(IFL) = PLANT
                                                      W_FSHR(IFL) = 1.0
                                                      IFLRG = CLRG
                                                   ELSE
                                                      WFL(IFL) = WFLTP(JEFD,IFL)
                                                      W_FSHR(IFL) = WCMFSH(JEFD,IFL)
                                                   END IF
                                                ELSE
                                                   WFL(IFL) = WFLTP(JEFD,IFL)
                                                   W_FSHR(IFL) = WCMFSH(JEFD,IFL)
                                                   IF (IFL .EQ. 1 ) THEN
                                                      IF (PLANT .EQ. WIWD .OR. PLANT .EQ. WIBI) THEN
                                                         IFLRG = CLRG
                                                      ELSE IF (WFL(IFL) .EQ. UIGF .OR. WFL(IFL) .EQ. UIGI .OR. WFL(IFL) .EQ. UIDG) THEN
                                                         IFLRG = GSRG
                                                      ELSE IF (WFL(IFL) .EQ. UIRL .OR. WFL(IFL) .EQ. UIRH .OR. WFL(IFL) .EQ. UIDS .OR. WFL(IFL) .EQ. UIDD .OR. WFL(IFL) .EQ. UIGC) THEN
                                                         IFLRG = CSRG
                                                      ELSE
                                                         IFLRG = EXP
                                                      END IF
                                                   END IF
                                                   IF (IFLRG.eq.0) IFLRG = EXP                                                                                               
                                                END IF
!                                             Write(6,*)'WNEWGRP ',WFL(IFL),IFL,CLRG,GSRG,CSRG,EXP,IFLRG                                                
                                             END DO
                                             WEFDT = JEFD
                                             WECPT = PLANT
                                             WEFPT = UPEFPT(PLANT)
                                             WNOPER = EXP
                                             WNOWN = NERC
                                             IF (UCPDGNIS(PLANT) .GT. 0) THEN
                                                W_MRUN = 9999 
                                             ELSE
                                                W_MRUN = 0
                                             END IF
                                             IF ((PLANT .LE. ECP_D_DSP .AND. PLANT .NE. WICN .AND. PLANT .NE. WIAN .AND. PLANT .NE. WISM) .OR. PLANT .EQ. WIWD .OR. PLANT .EQ. WIBI) THEN
                                                W_CLRG = CLRG
                                                W_CR = CSRG
                                                W_GR = GSRG
                                                W_CAR = CARG
                                             ELSE
                                                W_CLRG = UPCLRG(NERC)
                                                W_CR = UPCENSUS(PLANT,NERC)
                                                W_GR = UPNGRG(NERC)
                                                W_CAR = UPCARG(NERC)
                                             END IF
                                             WSTATE = "00"
                                             IF (FLRG .LT. 10) THEN
                                                WRITE(WSTATE,'("0",I1)') FLRG
                                             ELSE
                                                WRITE(WSTATE,'(I2)') FLRG
                                             END IF

!                                            Write(6,*)'WNEWGRP2 ',W_GRP,NERC,W_CLRG,W_CR,W_GR,W_CAR,IFLRG

!                                            IF (PLANT .LE. WIIS)THEN
!                                               WSTATE = CLFLST(FLRG)
!                                            ELSEIF (PLANT .LE. WIFC)THEN
!                                               WSTATE = NGFLST(FLRG)
!                                            END IF

!                                            if (plant .eq. wiwn)write(6,3434) curiyr+1989,nerc,buildnm,w_syr,wc_sum,w_clrg,w_cr,w_gr,w_car,wstate
!3434                                        format(1h ,'!wndout',i4,i3,a10,i5,f10.1,i3,i3,i3,i3,a3)

                                             WPART = "0"
                                             W_COMB = 4
                                             WCOMB_R = 0.0
                                             WCOMB_O = 0.0
                                             WCOMB_F = 0.0
                                             WCOMB_V = 0.0
                                             W_POST = 7
                                             WSNCR_R = 0.0
                                             WSNCR_O = 0.0
                                             WSNCR_F = 0.0
                                             WSNCR_V = 0.0
                                             WSCR_R = 0.0
                                             WSCR_O = 0.0
                                             WSCR_F = 0.0
                                             WSCR_V = 0.0
                                             PCST = OVRCST
                                             FNBOOK = OVRCST
                                             CAPNUG = 1.0
                                             EWGROR = 1.0
                                             IF (IOWN .EQ. 1) THEN
                                                WFOWN = 1
         
!                                               ADD TO EFP'S BUILDS LINKED LIST

                                                CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,CLT,PLT,CURIYR,ONE,OVRCST,CPR,CAPD,UPGNPD,UTINT,DEBT_F,UTROR,TXBOOK,FNBOOK)

                                                WPCST = FNBOOK / UPGNPD(CURIYR)
                                                WC_NP = LEVEL
                                                WC_SUM = LEVEL
                                                CALL UEXPBLD(NERC)
                                             ELSE
                                                WFOWN = 3
                                                EWGROR = EWGROE * (1.0 - DEBT_F) + EWGINT * DEBT_F
                                                CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,CLT,PLT,CURIYR,ONE,OVRCST,CPR,CAPD,UPGNPD,EWGINT,DEBT_F,EWGROR,TXBOOK,FNBOOK)
                                                PRATIO = TXBOOK / FNBOOK
                                                CAPNNSTL = FNBOOK
                                                CALL EPCNBLD(DBLE(DEBT_F),PRATIO,DBLE(UPNRPRM),DBLE(UPNIPRM),DBLE(UTROE),DBLE(UTINT),DBLE(UPTXRT),TLF,NCLF,NLLF,CAPNUG)
                                                PCST = CAPNNSTL * CAPNUG
                                             END IF

                                             WRITE(13,36) CURIYR+UHBSYR,FULLYR,NERC,PLANT,PLNT_CD,WFOWN,STEP,BUILDNM, &
                                                BLDSTS,LEVEL,OVRCST,C_FCT,FNBOOK,CAPNUG,PCST,EWGROR,EPDSCRT,UPRSK(PLANT),W_CF,W_FOM,F_FCT,W_VOM,T_EXT,T_SOM, &
                                                T_TCAP,T_TFCF,T_TOM,UPGNPD(FULLYR-UHBSYR),UPGNPD(1999-UHBSYR),EWGROE,EWGINT,DEBT_F
   36                                        FORMAT(1x,"BUILDS FOR",4(":",I4),":",A2,2(":",I2),":",A,":",A2,":",F8.2,22(":",F8.3))

                                             IF (IRG .NE. 1 .AND. LEVEL .GT. 0.) WRITE(13,37) CURIYR+UHBSYR,FULLYR,NERC,PLANT,PLNT_CD,WFOWN,STEP,BUILDNM, &
                                                BLDSTS,LEVEL,OVRCST,C_FCT,FNBOOK,CAPNUG,PCST,EWGROR,EPDSCRT,UPRSK(PLANT),W_CF,W_FOM,F_FCT,W_VOM,T_EXT,T_SOM, &
                                                T_TCAP,T_TFCF,T_TOM,UPGNPD(FULLYR-UHBSYR),UPGNPD(1999-UHBSYR)
   37                                        FORMAT(1x,"BUILDS FOR_INTER",4(":",I4),":",A2,2(":",I2),":",A,":",A2,":",F8.2,19(":",F8.3)) 

                                             BLDINV(YEAR) = BLDINV(YEAR) + LEVEL * OVRCST
                                             IF (YEAR .LE. UNYEAR) THEN
                                                NEW_CAP_EL(NERC,YEAR) = NEW_CAP_EL(NERC,YEAR) + LEVEL * 0.001
                                                G_INST_ALL(NERC,YEAR) = G_INST_ALL(NERC,YEAR) + &
                                                   (0.001 * LEVEL * PCST / UPGNPD(YEAR) / ( EPDSCRT / ( 1.0 - ( 1.0 + EPDSCRT) ** -DBLE(NCLF))) ) / (1.0 - UPCSB(PLANT))
                                                T_OVR(NERC,YEAR) = T_OVR(NERC,YEAR) + LEVEL * 0.001 * T_TCAP

                                                NEW_CAP_EL(MNUMNR,YEAR) = NEW_CAP_EL(MNUMNR,YEAR) + LEVEL * 0.001
                                                G_INST_ALL(MNUMNR,YEAR) = G_INST_ALL(MNUMNR,YEAR) + &
                                                   (0.001 * LEVEL * PCST / UPGNPD(YEAR) / ( EPDSCRT / ( 1.0 - ( 1.0 + EPDSCRT) ** -DBLE(NCLF))) ) / (1.0 - UPCSB(PLANT))
                                                T_OVR(MNUMNR,YEAR) = T_OVR(MNUMNR,YEAR) + LEVEL * 0.001 * T_TCAP

                                                DO XYR = YEAR, MIN(UNYEAR , YEAR + NCLF - 1)
                                                   G_ANN(NERC,XYR) = G_ANN(NERC,XYR) + (LEVEL * 0.001 * PCST / UPGNPD(XYR)) / (1.0 - UPCSB(PLANT))
                                                   G_ANN(MNUMNR,XYR) = G_ANN(MNUMNR,XYR) + (LEVEL * 0.001 * PCST / UPGNPD(XYR)) / (1.0 - UPCSB(PLANT))
                                                ENDDO
                                                TRN_LIFE = ESBKLF(EITRAN,1)
                                                DO XYR = YEAR, MIN(UNYEAR , YEAR + TRN_LIFE - 1)
                                                   T_ANN(NERC,XYR) = T_ANN(NERC,XYR) + LEVEL * 0.001 * T_TCAP * T_TFCF * UPGNPD(YEAR)/UPGNPD(XYR)
                                                   T_ANN(MNUMNR,XYR) = T_ANN(MNUMNR,XYR) + LEVEL * 0.001 * T_TCAP * T_TFCF * UPGNPD(YEAR)/UPGNPD(XYR)
                                                ENDDO
                                             END IF

 !                                            Write(6,*)'WNEWGRP3 ',W_GRP,NERC,JEFD,IOWN,IFLRG
                                             NWGRP = WNEWGRP(NERC,JEFD,IOWN,IFLRG)
                                             IF (NWGRP .EQ. 0) THEN
                                                WNGRPS(NERC) = WNGRPS(NERC) + 1
                                                IGRP = WNGRPS(NERC)
                                                WGRP_NXT = WGRP_NXT + 1
                                                NWGRP = WGRP_NXT
                                                WNEWGRP(NERC,JEFD,IOWN,IFLRG) = NWGRP
                                                WTYPE(NWGRP) = IGRP
                                             ELSE
                                                IGRP = WTYPE(NWGRP)
                                             END IF
                                             W_GRP = NWGRP
                                             W_IGRP = NWGRP
                                             W_GRP2 = WNXT_SGRP(W_GRP) + 1
                                             WNXT_SGRP(W_GRP) = W_GRP2
         
                                             STORAGE_RGN(W_IGRP) = NERC
                                             STORAGE_ECPn(W_IGRP) = PLANT
                                             STORAGE_ECPc(W_IGRP) = PLNT_CD
                                             DO ISP = 1, EFD_D_MSP
                                                STORAGE_CAP(W_IGRP,ISP) = LEVEL * 0.001
                                                STORAGE_CST(W_IGRP,ISP) = W_VOM + (FUEL_VAL(1) * 0.001 * WHRATE) / UPGNPD(CURIYR+UPPLYR(PLANT)) / (1.0 - EPDSCRT)
                                                STORAGE_GEN(W_IGRP,ISP) = 0.0
                                                DO IMO = 1, 12
                                                   DO d = 1 , MAXDTP
                                                      DO h = 1 , 24
                                                         IF (HRTOEFDSEAS(IMO,d,h) .EQ. ISP) THEN
                                                            STORAGE_GEN(W_IGRP,ISP) = STORAGE_GEN(W_IGRP,ISP) + WCF_M(IMO) * 0.001 * IDAYTQ(d,IMO) * LEVEL * 0.001
                                                         END IF
                                                      END DO
                                                   END DO
                                                END DO
                                             END DO

                                             WRITE(18,4419) CURIRUN, CURCALYR, W_IGRP, UPPLYR(PLANT), NERC, PLANT, IRET, IFL, IFLRG, PLNT_CD, BUILDNM, ROW_FUEL, &
                                                LEVEL, FUEL_VAL(1), WHRATE, W_VOM, UPGNPD(CURIYR+UPPLYR(PLANT)), EPDSCRT, &
                                                STORAGE_ECPn(W_IGRP), STORAGE_ECPc(W_IGRP), STORAGE_CAP(W_IGRP,1), STORAGE_GEN(W_IGRP,1), STORAGE_CST(W_IGRP,1)
4419                                            FORMAT(1X,"ECP_STORAGE_INFO",9(":",I5),":",A2,2(":",A16),6(":",F21.6),":",I3,":",A2,3(":",F21.6))
         
                                             IF (UPPCEF(PLANT) .GT. 0.0) THEN     !CCS plant - store cost data for CCATS
                                                  ULCCS_INV(W_GRP) = LEVEL * 0.001 * PCST * UPCCS_INVSH(PLANT)  !nominal $ annuity for CCS share of cost
                                                  ULCCS_FOM(W_GRP) = LEVEL * 0.001 * W_FOM * UPCCS_FOMSH(PLANT)  !1987 annual $
                                                  ULCCS_VOM(W_GRP) = W_VOM * UPCCS_VOMSH(PLANT)                 !1987 $/MWh
                                             WRITE(18,4444) CURCALYR,W_GRP,NERC,PLANT,LEVEL,ULCCS_INV(W_GRP),ULCCS_FOM(W_GRP),ULCCS_VOM(W_GRP),UPCCS_INVSH(PLANT),UPCCS_FOMSH(PLANT),UPCCS_VOMSH(PLANT)
4444                                        FORMAT(1X,"CCATS_NEWBLD",4(":",I5),7(":",F21.6))
                                             ENDIF 
                                          
                                                IF (PLNT_CD .EQ. 'IS' .or. PLNT_CD .EQ.'CS' .or. PLNT_CD .EQ.'PQ' ) THEN
                                                IF (LEVEL .GT. 10.0) THEN
                                                   N_PLTS = N_PLTS + 1
                                                   N_IGRP(N_PLTS) = W_IGRP
                                                   N_RY(N_PLTS) = FULLYR
                                                   N_CFR(N_PLTS) = W_CF
                                                   N_RG(N_PLTS) = EPNFLRG(W_CR,W_CLRG,W_GR,W_CAR)
                                                   N_HRAT(N_PLTS) = WHRATE
                                                   N_CPTY(N_PLTS) = LEVEL
                                                   IF (PLNT_CD .EQ. 'PQ') N_PTP(N_PLTS) = WIPQ                                          
                                                   IF (PLNT_CD .EQ. 'IS') N_PTP(N_PLTS) = WIIS
                                                   IF (PLNT_CD .EQ. 'CS') N_PTP(N_PLTS) = WICS
                                    
                                                   write(18,1433) curiyr+1989,N_PLTS,N_RY(N_PLTS),N_IGRP(N_PLTS),N_RG(N_PLTS),WC_SUM*0.001,N_CFR(N_PLTS),N_HRAT(N_PLTS),FLRG
 1433                                              format(1h,'!ccsout3 ',I5,1x,I4,1x,3(F10.0,1x),3(F10.3,1x),I4)
                                                ENDIF
                                             ENDIF

!                                            INSURE THAT NUMBER OF BUILDS DOESN'T EXCEED ALLOCATION

                                             IF (WREC_NXT .GT. WPLT_D_REC) WRITE(6, * ) ' EPO$BILD ERROR: TOO MANY PLANT RECORDS'

!                                            Increment Record Counters

                                             WREC_NXT = WREC_NXT + 1
                                             W_NXT(WREC_NXT) = W_INT(NERC,IGRP)
                                             W_INT(NERC,IGRP) = WREC_NXT
         
                                             WNOX_R = NOX_NEW(1,PLANT)
                                             WNOX_B4 = NOX_NEW(1,PLANT)

                                             I_COAL = 0
                                             IF (UPTTYP(PLANT) .LE. NW_COAL) THEN
                                                I_COAL = UCL_CGRP2(W_GRP)
                                                IF (I_COAL .GT. 0) THEN
                                                   UCL_CGRP(WREC_NXT) = I_COAL
                                                ELSE
                                                   NUM_CL_UNIT = NUM_CL_UNIT + 1
                                                   I_COAL = NUM_CL_UNIT
                                                   MAP_TO_COAL_ID(W_IGRP) = NUM_CL_UNIT
                                                   UCL_CGRP(WREC_NXT) = NUM_CL_UNIT
                                                   UCL_CGRP2(W_GRP) = NUM_CL_UNIT
                                                   NUM_CL = NUM_CL + 1
                                                   ECL_RG_CAP(NERC,I_COAL) = LEVEL
                                                   ECL_RG_CAP(MNUMNR,I_COAL) = LEVEL
                                                   EMM_CL_CLRG(I_COAL) = EPCLMP(IFLRG)
                                                   NUM_CMM_UNITS = NUM_CMM_UNITS + 1
                                                END IF
                                                DO XYR = W_SYR - UHBSYR , MNUMYR
                                                   EMM_CL_ECPt(I_COAL,XYR) = WECPT
                                                END DO
                                             END IF

!                                            W_BTP = ECP_FTP(1,PLANT)
!                                            W_BTM = ECP_BTM(1,PLANT)
!                                            W_NCT = ECP_NCT(1,PLANT)

                                             WC_NP = LEVEL
                                             WC_SUM = LEVEL
                                             WC_WIN = LEVEL
                                             WPCST = PCST
                                             W_CAPAD = 0.0
                                             W_GA = 0.0
                                             WCOUNT = WC_SUM / UPMSSIZ(PLANT)

                                             WRITE(18,2381) FULLYR,EXP,NERC,PLANT,WREC_NXT,W_NXT(WREC_NXT),IGRP,W_IGRP,W_GRP,W_GRP2,W_RYR,JEFD,IOWN,WFOWN,W_MRUN,IFLRG, &
                                                WC_SUM,WPCST,(WFL(IFL),W_FSHR(IFL), IFL = 1 , UIFPLT), I_COAL, NUM_CL_UNIT, NUM_CL, &
                                                NUM_CMM_UNITS
 2381                                        FORMAT(1X,"BDATA",16(":",I5),2(":",F9.3),3(":",I2,":",F6.3),4(":",I5))

                                              IF (EXP .NE. NERC) WRITE(18,2382) FULLYR,EXP,NERC,PLANT,WREC_NXT,W_NXT(WREC_NXT),IGRP,W_IGRP,W_GRP,W_GRP2,W_RYR,JEFD,IOWN,WFOWN,W_MRUN,IFLRG, &
                                                WC_SUM,WPCST,(WFL(IFL),W_FSHR(IFL), IFL = 1 , UIFPLT), I_COAL, NUM_CL_UNIT, NUM_CL, &
                                                NUM_CMM_UNITS
 2382                                        FORMAT(1X,"BDATA_INTER",16(":",I5),2(":",F9.3),3(":",I2,":",F6.3),4(":",I5))

                                             CALL STRPLT(WREC_NXT)

                                             IF (PLANT .EQ. WICN .OR. PLANT .EQ. WIAN .OR. PLANT .EQ. WISM) THEN
                                                NUM_NUC = NUM_NUC + 1
                                                UNUC_CGRP(WREC_NXT) = NUM_NUC
                                                UNUC_WGRP(W_GRP) = NUM_NUC
                                                ENUC_RG(NERC,NUM_NUC) = 1.0
                                                ENUC_RG(UNRGNS,NUM_NUC) = 1.0
                                                ENUC_ECP(NUM_NUC) = PLANT
                                             END IF

                                             IF (UF_DBG .GT. 0 .AND. PRTDBGE .EQ. 4) THEN
                                                WRITE(UF_DBG,2000) NERC,IGRP,WEFDT,WNOPER,WNOWN,W_CR,W_GR,WFOWN,WC_SUM,WC_WIN,WHRATE,W_SYR,W_RYR,W_CF, &
                                                   (WFL(IFL),W_FSHR(IFL),IFL=1,UIFPLT)
 2000                                           FORMAT(1X,8I5,1X,2F10 .3,F9.1,2I5,1X,F6.3,3(1X,I2,1X,F6.3))
                                             END IF

!                                            UPDATE EXPECTED COAL-FIRED GENERATING CAPACITY TO INCLUDE UNPLANNED BUILDS

                                             FL_NUM = WFL(1)
                                             IF (FL_NUM .EQ. UIB1 .OR.  &
                                                 FL_NUM .EQ. UIB2 .OR.  &
                                                 FL_NUM .EQ. UIB3 .OR.  &
                                                 FL_NUM .EQ. UIB4 .OR.  &
                                                 FL_NUM .EQ. UIB5 .OR.  &
                                                 FL_NUM .EQ. UIB6 .OR.  &
                                                 FL_NUM .EQ. UIB7 .OR.  &
                                                 FL_NUM .EQ. UIB8 .OR.  &
                                                 FL_NUM .EQ. UIC1 .OR.  &
                                                 FL_NUM .EQ. UIC2 .OR.  &
                                                 FL_NUM .EQ. UIC3 .OR.  &
                                                 FL_NUM .EQ. UIC4 .OR.  &
                                                 FL_NUM .EQ. UIC5 .OR.  &
                                                 FL_NUM .EQ. UIC6 .OR.  &
                                                 FL_NUM .EQ. UIC7 .OR.  &
                                                 FL_NUM .EQ. UIC8 .OR.  &
                                                 FL_NUM .EQ. UIC9 .OR.  &
                                                 FL_NUM .EQ. UICX .OR.  &
                                                 FL_NUM .EQ. UICY .OR.  &
                                                 FL_NUM .EQ. UICZ .OR.  &
                                                 FL_NUM .EQ. UIH1 .OR.  &
                                                 FL_NUM .EQ. UIH2 .OR.  &
                                                 FL_NUM .EQ. UIH3 .OR.  &
                                                 FL_NUM .EQ. UIH4 .OR.  &
                                                 FL_NUM .EQ. UIH5 .OR.  &
                                                 FL_NUM .EQ. UIH6 .OR.  &
                                                 FL_NUM .EQ. UIH7 .OR.  &
                                                 FL_NUM .EQ. UIH8 .OR.  &
                                                 FL_NUM .EQ. UIH9 .OR.  &
                                                 FL_NUM .EQ. UIHA .OR.  &
                                                 FL_NUM .EQ. UIHB .OR.  &
                                                 FL_NUM .EQ. UIHC .OR.  &
                                                 FL_NUM .EQ. UIPC .OR.  &
                                                 FL_NUM .EQ. UIIG .OR.  &
                                                 FL_NUM .EQ. UIOC .OR.  &
                                                 FL_NUM .EQ. UII2 .OR.  &
                                                 FL_NUM .EQ. UIPQ .OR.  &
                                                 FL_NUM .EQ. UIIS) THEN
                                                ECLCAP(CLRG,YEAR - CURIYR + 1) = ECLCAP(CLRG,YEAR - CURIYR + 1) + LEVEL
                                             END IF

!                                            INCREMENT TRANSMISSION CAPACITY AND OVERNIGHT COST

                                             JYR = YEAR - CURIYR
                                             TRNSCAP(JYR) = TRNSCAP(JYR) + LEVEL
                                             IF ((PLANT .LE. ECP_D_DSP .AND. PLANT .NE. WICN .AND. PLANT .NE. WIAN .AND. PLANT .NE. WISM) .OR. PLANT .EQ. WIWD .OR. PLANT .EQ. WIBI) THEN
                                                  TMPTRCST = FL_CNXT_CST(NERC,FLRG) + EPCTRM(PLANT)
                                             !ELSE IF (EXP .NE. NERC) THEN
                                             !     TMPTRCST = INTER_CST(EXP) + EPCTRM(PLANT)
                                             ELSE
                                                  TMPTRCST = EPCOVR(PLANT) + EPCTRM(PLANT)
                                             ENDIF
                                             !IF (EXP .NE. NERC) TMPTRCST = TMPTRCST + INTER_CST(EXP)
                                             IF (UCPDGNIS(PLANT) .LE. 0)THEN
                                               TRNSCST(JYR) = TRNSCST(JYR) + TMPTRCST * LEVEL
                                             ELSE
                                                TRNSCST(JYR) = TRNSCST(JYR) + LEVEL * (TMPTRCST - EPDAVD(STEP) * UPDGAVR)
                                             END IF
                                          END IF             ! LEVEL .GT. 0
                                       END DO              ! DO (CS)
                                    END IF              ! IRG/CLOOP
                                 END DO               ! DO (CLOOP)
                              END DO                ! DO STEP (NSTEPS)
                           END DO                   ! DO IRG
                        END DO                      ! DO FRG
                     END DO                         ! DO LOOPS
                  END IF                            ! FULLYR GE UPAVLYR
               END IF                               ! UPVTYP .GT. 0
            END DO                                  ! DO PLANT (ECP_D_CAP)
         END IF                                     ! IOWN = UPBLDTYP(NERC)
      END DO                                        ! DO IOWN

      CALL GETBLD(1,NERC)

!     PASS TRANSMISSION CAPACITY AND OVERNIGHT COST TO EFP Reuse Plntin Variables To Pass Aggregate Info to EFP

      WEFPT = EITRAN
      DO JYR = 1 , UNXPH
         IF (TRNSCAP(JYR) .GT. 0.001) THEN
            W_SYR = JYR + USYEAR(CURIYR)
            WC_NP = TRNSCAP(JYR)
            WPCST = TRNSCST(JYR) / TRNSCAP(JYR)
            CALL UEXPBLD(NERC)
         END IF
      END DO

      RETURN
      END
!     EPO$COAL STORES COAL UPGRADE/RETIRE DECISIONS

      SUBROUTINE EPO$COAL(T_RETRO,T_RETRO_CCS)
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'dispin'
      include 'dispett'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'plntin'
      include 'plntctl'
      include 'emission'
      include 'cdsparms'
      include 'uso2grp'
      include 'ecp_coal'
      include 'ecp_nuc'
      include 'elout'
      include 'uecpout'
      include 'coalemm'
      include 'entcntl'
      include 'dispuse'
      include 'e111d'
      include 'uefdout'
      include 'emm_aimms'
!
!     RAG start of CCS mods for EPO$COAL - variables for CCS retrofit

      REAL*8 OHR,CLOSS,HPEN,CPEN
      REAL*8 oUCL_SC_O,oUCL_SC_F,oUCL_SC_V
      REAL*8 CTS_C, CTS_F, CTS_V, CTS_C_B4, CTS_F_B4, CTS_V_B4
      REAL*8 OV_CST_CTS_B4, OV_CST_CTS, CTS_INV_Annuity, CTS_GW
      COMMON /CCS_CNTL/ SYR_CCS,SYR_REFURB,HRMAX
      INTEGER*4 SYR_CCS, SYR_REFURB
      REAL*8 HRMAX
      REAL*8 ANNRTE,ANNADJ,ANN(ECP_D_FPH),AN1(ECP_D_FPH)

!     RAG end of variables for CCS retrofit

      REAL*8 LEV_COL,T_RETRO,LEV_CST(4),T_RETRO_CCS,LEV_DEF(4)
      REAL*8 SV_COL,OV_CST,FOM,NEW_NOXR,OLD_NOXR,SCR_RMV,TOT_CAP(ECP_D_XPH),VOM,SV_TOT_CAP(ECP_D_XPH)
      REAL*8 TCAP, VCST, FCST, SO2P, NOXP, RPSP, HGP, REVS
      REAL*8 TXBOOK,FNBOOK,CAPUTIL,CAPUNSTL,URATIO,DSCRT,PVV
      REAL*8 CRF,PWF
      REAL*8 SO2_PERMITS,BA_CRD_FRAC(ECP_D_FPH),PV_BA_CRD
      REAL*8 AVG_SCB_SO2(NDREG),AVG_SCB_RMV(NDREG),VALUE
      REAL*8 LEV_CNFG(MX_CNFG+1,ECP_D_XPH),CST_CNFG(MX_CNFG+1,ECP_D_XPH),RCST_CNFG(MX_CNFG+1,ECP_D_XPH)
      REAL*8 DSIOVR,DSIFOM,DSIVOM,DSISEF
      REAL*4 RETIRT,RETROR,RETFPE,RETCRE
      REAL*4 DSIRET(MNUMNR)
      INTEGER*4 N_C, N_G
      INTEGER*4 NERC,YEAR,IGRP,IFL,IECP,ORG,IP,CGRP,KYR,CRG,ICLS,CLRG,FRG,IY,JPGRP
      INTEGER*4 IRET,JGRP,OLD_REC,NEW_REC,IEFD,ICHK,ISO2
      INTEGER*4 I_CNFG,J_CNFG,I_ROPT,S_CNFG_I,S_CNFG_J,SV_RYR,SV_RMO
      INTEGER*4 CNFG_MAP(MX_CNFG+1),N_CNFG,IRG,AGE,SV_YEAR
      INTEGER*4 ROPT_MAP(MX_CNFG+1),OLD_ECP,XGRP,SYR,RGRP,IYR,IFRST,INOX_LT,XYR,ITST,K_CNFG,JECP,ITYP,MACT_TST,BYR2,JYR
      INTEGER*4 STXLF,HG_TST,BYR
      INTEGER*4 OVIN, NYR
      INTEGER*4 TEST_JGRP(MAX_CL)
      CHARACTER*16 COL_RET
      CHARACTER*8 ROW_RET
      CHARACTER*4 COAL
      CHARACTER*2 STATUS
      CHARACTER*1 GRP_CD(ECP_D_XPH)
      CHARACTER*3 CFG
      COMMON/INVEST/ RETINV(MNUMYR+ECP_D_XPH),BLDINV(MNUMYR+ECP_D_XPH)
      REAL*8 RETINV,BLDINV

      INTEGER*4 HTRT_TEST         ! 0 => Option is available; 1 => Option not available
      CHARACTER*1 GRP_CD_HTRT(ECP_D_XPH)
      CHARACTER*16 COL_HTRT
      REAL*8 LEV_COL_HTRT, LEV_CST_HTRT(4), LEV_DEF_HTRT(4), SV_COL_HTRT, SV_LEV_CNFG, SV_LEV_CNFG_HTRT
      REAL*8 LEV_CNFG_HTRT(MX_CNFG+1,ECP_D_XPH), CST_CNFG_HTRT(MX_CNFG+1,ECP_D_XPH), RCST_CNFG_HTRT(MX_CNFG+1,ECP_D_XPH)

      CHARACTER*16 COL_CLtNG,COL_CLtNG_CL
      REAL*8 LEV_COL_CLtNG, LEV_CST_CLtNG(4), LEV_DEF_CLtNG(4), SV_LEV_CNFG_CLtNG
      REAL*8 LEV_COL_CLtNG_CL, LEV_CST_CLtNG_CL(4), LEV_DEF_CLtNG_CL(4), SV_LEV_CNFG_CLtNG_CL
      REAL*8 LEV_CNFG_CLtNG(MX_CNFG+1,ECP_D_XPH), CST_CNFG_CLtNG(MX_CNFG+1,ECP_D_XPH), RCST_CNFG_CLtNG(MX_CNFG+1,ECP_D_XPH)
      REAL*8 LEV_CNFG_CLtNG_CL(MX_CNFG+1,ECP_D_XPH), CST_CNFG_CLtNG_CL(MX_CNFG+1,ECP_D_XPH), RCST_CNFG_CLtNG_CL(MX_CNFG+1,ECP_D_XPH)
      
      COMMON /COAL_SUPER_GROUP/ CLSG_F,CLSG_N,CLSG_QT,NUM_CLSG
      INTEGER*4 CLSG_F(MAX_CL),CLSG_N(MAX_CL),CLSG_QT(MAX_CL),NUM_CLSG
!
      INTEGER*4 CLSG_T(MAX_CL),I_CLSG
!
      ecpsub='EPO$COAL'


!     INITIALIZE GRP_CD
!
      GRP_CD(1)  = "A"
      GRP_CD(2)  = "B"
      GRP_CD(3)  = "C"
      GRP_CD(4)  = "D"
      GRP_CD(5)  = "E"
      GRP_CD(6)  = "F"
      GRP_CD(7)  = "G"
      GRP_CD(8)  = "H"
      GRP_CD(9)  = "I"
      GRP_CD(10) = "J"

!     INITIALIZE GRP_CD_HTRT

      GRP_CD_HTRT(1)  = "A"
      GRP_CD_HTRT(2)  = "L"
      GRP_CD_HTRT(3)  = "N"
      GRP_CD_HTRT(4)  = "D"
      GRP_CD_HTRT(5)  = "E"
      GRP_CD_HTRT(6)  = "F"
      GRP_CD_HTRT(7)  = "G"
      GRP_CD_HTRT(8)  = "H"
      GRP_CD_HTRT(9)  = "I"
      GRP_CD_HTRT(10) = "J"
!
      XGRP = 1
      SYR = 2003
      RGRP = 1
      HRMAX = 99999

!     Determine Year in Which Bank Devalue will take place
!
      SV_YEAR = 0
      DO YEAR = UNYEAR, CURIYR, -1
         IF (USO2_BA_CRD(YEAR) .GT. USO2_BA_CRD(YEAR-1)) THEN
            SV_YEAR = YEAR
            EXIT
         END IF
      END DO
!
!     Calculate Average Sulfur Content and Removal Rate for Scrubbed Units
!
      AVG_SCB_SO2 = 0.0
      AVG_SCB_RMV = 0.0
      DO CLRG = 1 , NDREG
         VALUE = 0.0
         DO IP = 1 , NW_COAL
            IF (ECP_SCRUB(IP,CURIYR) .EQ. 1) THEN
               VALUE = VALUE + QCLCLNR(CLRG,CURIYR-1,IP)
               AVG_SCB_SO2(CLRG) = AVG_SCB_SO2(CLRG) + QCLCLNR(CLRG,CURIYR-1,IP) * SCLCLNR(CLRG,CURIYR-1,IP)
               AVG_SCB_RMV(CLRG) = AVG_SCB_RMV(CLRG) + QCLCLNR(CLRG,CURIYR-1,IP) * RCLCLNR(CLRG,CURIYR-1,IP)
            END IF
         END DO
         IF (VALUE .GT. 0.0) THEN
            AVG_SCB_SO2(CLRG) = AVG_SCB_SO2(CLRG) / VALUE
            AVG_SCB_RMV(CLRG) = AVG_SCB_RMV(CLRG) / VALUE
         ELSE
            AVG_SCB_SO2(CLRG) = 3.0
            AVG_SCB_RMV(CLRG) = 0.92
         END IF
      END DO
!
!     Loop over each upgrade group
!
      ORG = 0
      CLSG_T = 0
      TEST_JGRP = 0
      DO I_CLSG = 1 , NUM_CLSG
         TOT_CAP = 0.0
         SV_TOT_CAP = 0.0
         LEV_CNFG = 0.0
         LEV_CNFG_HTRT = 0.0
         LEV_CNFG_CLtNG = 0.0
         CST_CNFG = 0.0
         CST_CNFG_HTRT = 0.0
         RCST_CNFG = 0.0
         RCST_CNFG_HTRT = 0.0
         RCST_CNFG_CLtNG = 0.0
         JGRP = CLSG_F(I_CLSG)
         NERC = ECL_RG(JGRP)

         IF (NERC .GT. 0 ) THEN  !.AND. ECL_RYR(JGRP) .GT. 9000) THEN   !including the RYR condition excludes model from moving up planned retirements - we should allow
            FRG = ECL_CLRG(JGRP)
            CRG = EPCLMP(FRG)
            IF (ORG .NE. NERC) THEN
               CALL GETBLD(1,NERC)
               CALL GETBOUT(CURIYR,NERC)
               ORG = NERC

!              USE RETROFIT RISK PREMIUM, IF SWITCH IS ON

               IF (USW_RTRSK .LE. 0)THEN
                  RETIRT = EPUIRT
                  RETROR = EPUROR
                  RETFPE = EPUFPE
                  RETCRE = EPUCRE
               ELSE
                  RETIRT = EPUIRTR
                  RETROR = EPURORR
                  RETFPE = EPUFPER
                  RETCRE = EPUCRER
               END IF
            END IF
            IF (JGRP .LT. 10) THEN
               WRITE(COAL,'("000",I1)') JGRP
            ELSE IF (JGRP .LT. 100) THEN
               WRITE(COAL,'("00",I2)') JGRP
            ELSE IF (JGRP .LT. 1000) THEN
               WRITE(COAL,'("0",I3)') JGRP
            ELSE
               WRITE(COAL,'(I4)') JGRP
            END IF
!
!           GET SOLUTION INFO
!
            CGRP = 0
            DO IYR = 1 , UNXPH
               IFRST = 0
               IF (UCL_VIN(IYR) .EQ. 0 .OR. IYR .EQ. 1) THEN
                  CGRP = CGRP + 1
               ELSE IF (UCL_VIN(IYR) .GT. UCL_VIN(IYR-1)) THEN
                  CGRP = CGRP + 1
               END IF
!
               IF (UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) THEN
                  BYR = CURIYR + IYR - 1
               ELSE
                  BYR = CURIYR + UNFPH - 1
               END IF

               HTRT_TEST = 0

               IF (ECL_IGRP(JGRP) .EQ. 0) WRITE(6,9371) CURIRUN, CURCALYR, CURITR, I_CLSG, JGRP, IYR, &
                  ECL_IGRP(JGRP), CGRP
 9371          FORMAT(1X,"EPO_COAL_HTRT_TEST",8(":",I5))

               IF (HTRT_RESULTS(ECL_IGRP(JGRP)) .GT. 0) HTRT_TEST = 1
               IF (CURIYR+UHBSYR+IYR-1 .LT. HTRT_YEAR .AND. UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) HTRT_TEST = 1

!              IF (ECL_MR(JGRP) .GT. 0) HTRT_TEST = 1
!              if (iyr .eq. 2)write(6,3322) curiyr+1989,i_clsg,jgrp,cgrp,ecl_igrp(jgrp),htrt_results(ecl_igrp(jgrp)),htrt_year,ucl_vin(iyr),ecl_mr(jgrp),htrt_test
!3322 format(1h ,'!hrio',i4,i5,i5,i5,i5,i5,i5,i5,i5,i5,i5,i5)
 
!              Create Configuration Maps
 
               CNFG_MAP(1) =  ECL_RCFG(IYR,JGRP)
               ROPT_MAP(1) =  0
               I_CNFG =  ECL_RCFG(IYR,JGRP)
               N_CNFG = 1
               DO I_ROPT = 1 , NUM_ROPT
                  IF (UCL_RCMB(I_ROPT,I_CNFG) .GT. 0) THEN
                     HG_TST = 0
                     IF (HG_BYR .LE. BYR + UHBSYR) HG_TST = 1
                     IF (EMLIM(4,MIN(UNYEAR,BYR)) .LT. 100.0) HG_TST = 1
                     IF (UCL_CNFG(8,UCL_RCMB(I_ROPT,I_CNFG)) .EQ. 0) HG_TST = 1
                     IF (HG_TST .EQ. 1) THEN
                        N_CNFG = N_CNFG + 1
                        CNFG_MAP(N_CNFG) = UCL_RCMB(I_ROPT,I_CNFG)
                        ROPT_MAP(N_CNFG) = I_ROPT
                     END IF
                  END IF
               END DO
!
               DO I_CNFG = 1 , N_CNFG
                  J_CNFG = CNFG_MAP(I_CNFG)
                  IECP = UCL_ECP(J_CNFG)
!
                  IF (I_CNFG .EQ. 1) THEN
                     CFG = "COL"
                  ELSE IF (J_CNFG .LT. 10) THEN
                     WRITE(CFG,'("00",I1)') J_CNFG
                  ELSE IF (J_CNFG .LT. 100) THEN
                     WRITE(CFG,'("0",I2)') J_CNFG
                  ELSE
                     WRITE(CFG,'(I3)') J_CNFG
                  END IF
                  COL_RET = GRP_CD(CGRP)//COAL//CFG; call makmsk(COL_RET_mask,GRP_CD(CGRP),COAL,CFG)
                  COL_HTRT = GRP_CD_HTRT(CGRP)//COAL//CFG; call makmsk(COL_HTRT_mask,GRP_CD_HTRT(CGRP),COAL,CFG,':!HTRT:')
                  LEV_CST = 0.0
                  CALL CWFSCOL(COL_RET,'ACDU    ',STATUS,LEV_CST,COL_RET_mask,IRET)
                  IF (IRET .EQ. 0) THEN
                     LEV_CNFG(I_CNFG,IYR) = LEV_CST(1) * 1000.0
                     CST_CNFG(I_CNFG,IYR) = LEV_CST(2)
                     RCST_CNFG(I_CNFG,IYR) = LEV_CST(3)
                     TOT_CAP(IYR) = TOT_CAP(IYR) + LEV_CST(1) * 1000.0
                     SV_TOT_CAP(IYR) = SV_TOT_CAP(IYR) + LEV_CST(1) * 1000.0
                     ITYP = UPTTYP(IECP)
                     UECP_CAP(IYR,ITYP,CRG) = UECP_CAP(IYR,ITYP,CRG) + LEV_CST(1)
                  END IF
                  IF (HTRT_TEST .EQ. 0) THEN
                     LEV_CST_HTRT = 0.0
                     CALL CWFSCOL(COL_HTRT,'ACDU    ',STATUS,LEV_CST_HTRT,COL_HTRT_mask,IRET)
                     IF (IRET .EQ. 0) THEN
                        LEV_CNFG_HTRT(I_CNFG,IYR) = LEV_CST_HTRT(1) * 1000.0
                        CST_CNFG_HTRT(I_CNFG,IYR) = LEV_CST_HTRT(2)
                        RCST_CNFG_HTRT(I_CNFG,IYR) = LEV_CST_HTRT(3)
                        TOT_CAP(IYR) = TOT_CAP(IYR) + LEV_CST_HTRT(1) * 1000.0
                        SV_TOT_CAP(IYR) = SV_TOT_CAP(IYR) + LEV_CST_HTRT(1) * 1000.0
                        ITYP = UPTTYP(IECP)
                        UECP_CAP(IYR,ITYP,CRG) = UECP_CAP(IYR,ITYP,CRG) + LEV_CST_HTRT(1)
!              if (iyr .eq. 2)write(6,3323) curiyr+1989,i_clsg,col_htrt,lev_cst_htrt(1)*1000.0,lev_cst_htrt(2),lev_cst_htrt(4)
!3323 format(1h ,'!hrir',i4,i6,a10,6f10.3)
                     END IF
                  END IF
               END DO

               IF (CURIYR + IYR + UHBSYR - 1 .GE. UCL_CL_NG_SYR) THEN
                  LEV_CST_CLtNG = 0.0
                  COL_CLtNG = 'N'//COAL//'NG'//UPYRCD(IYR); call makmsk(COL_CLtNG_mask,':N:',COAL,':NG:',UPYRCD(IYR))                  
                  CALL CWFSCOL(COL_CLtNG,'ACDU    ',STATUS,LEV_CST_CLtNG,COL_CLtNG_mask,IRET)
                  COL_CLtNG_CL = 'GCL'//GRP_CD(IYR)//COAL; call makmsk(COL_CLtNG_CL_mask,':GCL:',GRP_CD(IYR),COAL) 
                  CALL CWFSCOL(COL_CLtNG_CL,'ACDU    ',STATUS,LEV_CST_CLtNG_CL,COL_CLtNG_CL_mask,IRET)
                  I_CNFG = N_CNFG + 1
                  IF (IRET .EQ. 0) THEN
                     DO JYR = IYR , UNXPH
                          IF ((LEV_CST_CLtNG_CL(1) .GT. 0.0) .AND. (IYR .EQ. 2)) Then   !this is to trap a condition where gas coal cofiring is chosen for PlanYear =2
                             LEV_CNFG_CLtNG(I_CNFG,JYR) = LEV_CST_CLtNG(1) * 1000.0
                          endif
                        LEV_CNFG_CLtNG(I_CNFG,JYR) = LEV_CST_CLtNG(1) * 1000.0
                        CST_CNFG_CLtNG(I_CNFG,JYR) = LEV_CST_CLtNG(2)
                        RCST_CNFG_CLtNG(I_CNFG,JYR) = LEV_CST_CLtNG(3)
                        TOT_CAP(JYR) = TOT_CAP(JYR) + LEV_CST_CLtNG(1) * 1000.0
                        SV_TOT_CAP(JYR) = SV_TOT_CAP(JYR) + LEV_CST_CLtNG(1) * 1000.0
                        
                        LEV_CNFG_CLtNG_CL(I_CNFG,JYR) = LEV_CST_CLtNG_CL(1) * 1000.0     !<------ added to store solution for cNNGCL
                        CST_CNFG_CLtNG_CL(I_CNFG,JYR) = LEV_CST_CLtNG_CL(2)  !<------ added to store solution for cNNGCL
                        RCST_CNFG_CLtNG_CL(I_CNFG,JYR) = LEV_CST_CLtNG_CL(3)!<------ added to store solution for cNNGCL
                        TOT_CAP(JYR) = TOT_CAP(JYR) + LEV_CST_CLtNG_CL(1) * 1000.0  !<------ added to reflect coal part capacity of gas coal cofiring 
                        SV_TOT_CAP(JYR) = SV_TOT_CAP(JYR) + LEV_CST_CLtNG_CL(1) * 1000.0  !<------ added to reflect coal part capacity of gas coal cofiring 
                     END DO
                  END IF
               END IF
            END DO
!
!           LOOP OVER EACH UNIT IN AN UPGRADE GROUP
!
            DO WHILE (JGRP .GT. 0)
!
!              RETIRE UNITS
!
               CGRP = 0
               DO IYR = 1 , UNXPH
                  IFRST = 0
                  IF (UCL_VIN(IYR) .EQ. 0 .OR. IYR .EQ. 1) THEN
                     CGRP = CGRP + 1
                     IFRST = 1
                  ELSE IF (UCL_VIN(IYR) .GT. UCL_VIN(IYR-1)) THEN
                     CGRP = CGRP + 1
                     IFRST = 1
                  END IF
!
                  IF (IFRST .EQ. 1 ) THEN
                     YEAR = CURIYR + UHBSYR + IYR - 1
                     AGE = CURIYR + IYR + UHBSYR - ECL_YR(JGRP)
!
                     IF (UCL_VIN(IYR) .EQ. XGRP .AND. CURIYR + UHBSYR .GT. SYR .AND. TOT_CAP(IYR) .LT. ECL_CAP(IYR,JGRP) * 0.1) THEN
                        OLD_REC = ECL_FREC(JGRP)
                        DO WHILE (OLD_REC .GT. 0)
                           CALL GETPLT(OLD_REC)
                           NERC = WNOWN
                           IF (ORG .NE. NERC) THEN
                              IF (ORG .NE. 0) THEN
                                 CALL STRBLD(1,ORG)
                                 CALL STRBOUT(CURIYR,ORG)
                              END IF
                              CALL GETBLD(1,NERC)
                              CALL GETBOUT(CURIYR,NERC)
                              ORG = NERC
                           END IF
                           IECP = WECPT
                           IF (W_SYR .LE. YEAR .AND. W_RYR .GT. YEAR - 1) THEN
!
!                             RETIRE UNSCRUBBED UNIT
!
                              IF (((ECL_RVAL(JGRP) .LT. -0.001 .AND. ECL_RYRS(JGRP) .GE. UREV_NYR) .AND. (CURIYR + UHBSYR + UPRTLT - 1) .GE. UNUC_SYR) .OR.  &
                                  (USW_EPA111 .EQ. 1 .AND. YEAR .GT. UEPA_CLYR .AND. UPPCEF(IECP) .LT. 0.5 .AND. ECL_CAP(IYR,JGRP) .GT. 25.0) .OR. & !new 111d requirement - retire even if not losing money
                                  (USW_MACT .EQ. 1 .AND. YEAR .GE. UMACT_YR .AND. UCL_MACT_CFG(IECP) .EQ. 0) .OR. &
                                  (USW_BACT .GT. 0 .AND. YEAR .GE. UBACT_YR .AND. AGE .GT. 40) .OR.  &
                                  (USW_ACE .GT. 0 .AND. (CURIYR + UHBSYR + UPRTLT) .EQ. ECL_ACEYR(JGRP)) .OR.  &   
                                  (USW_DSI  .GT. 0 .AND. YEAR .EQ. UDSI_YR)) THEN
!
                                 W_RYR = YEAR - 1
!                                PUT RETIREMENTS MID-YEAR IN 1ST ECP YEAR DUE TO SHORT TIME FRAME
!                                IF ((CURIYR + UHBSYR) .GT. UPSTYR)THEN
                                 W_RMO = 12
!                                ELSE
!                                   W_RYR = YEAR
!                                   W_RMO = 6
!                                END IF
!
                                 DO XYR = YEAR - UHBSYR , UNYEAR
                                      EMM_CL_ECPt(JGRP,XYR) = 99
                                 END DO
                                 CALL STRPLT(OLD_REC)
                              END IF
!
                              ROW_RET = 'O'//COAL//'XX'//UPYRCD(CGRP); call makmsk(ROW_RET_mask,':O:',COAL,':XX:',UPYRCD(CGRP))
                              IF (TOT_CAP(IYR) .GT. 0.0) THEN
                                 STATUS = 'BS'
                              ELSE
                                 STATUS = 'LL'
                              END IF
!
                              TCAP = ULCAPC(W_GRP)
                              IF (TCAP .GT. 0.0) THEN
                                 VCST = ULVCST(W_GRP) / TCAP
                                 FCST = ULFCST(W_GRP) / TCAP
                                 SO2P = ULSO2P(W_GRP) / TCAP
                                 NOXP = ULNOXP(W_GRP) / TCAP
                                 RPSP = ULRPSP(W_GRP) / TCAP
                                 HGP =  ULHGP(W_GRP) / TCAP
                                 REVS = ULREVS(W_GRP) / TCAP
                              ELSE
                                 VCST = 0.0
                                 FCST = 0.0
                                 SO2P = 0.0
                                 NOXP = 0.0
                                 RPSP = 0.0
                                 HGP =  0.0
                                 REVS = 0.0
                              END IF
                              WRITE(18,2003) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,NERC,I_CLSG,JGRP,AGE,ROW_RET,TOT_CAP(IYR),ECL_CAP(IYR,JGRP),ECL_RVAL(JGRP), &
                                 OLD_REC,WC_SUM,W_IGRP,W_GRP,STATUS,W_SYR,W_SMO,W_RYR,W_RMO,WVIN,VCST,FCST,SO2P,NOXP,RPSP,HGP,REVS,TCAP,ECL_RYRS(JGRP)
  2003                        FORMAT(1X,"RETIRE_CL",6(":",I4),":",A8,2(":",F7.1),":",F7.3,":",I5,":",F7.1,2(":",I5),":",A1,2(":",I4,":",I2), &
                                 ":",I2,7(":",F7.3),":",F12.3,":",I2)
                               IF (W_RYR.EQ.CURIYR+IYR-1) THEN
                                 WRITE(6,*)'RETIRE_CL2 ',ECL_IGRP(JGRP),ECL_RG(JGRP),ECL_CF(IYR,JGRP),EMM_CL_CF(JGRP,CURIYR+IYR-1)
                                 DO IY = CURIYR+IYR-1,MNUMYR
                                   EMM_CL_CF(JGRP,IY) = 0.0
                                 ENDDO
                                 WRITE(6,*)'RETIRE_CL3 ',ECL_IGRP(JGRP),ECL_RG(JGRP),ECL_CF(IYR,JGRP),EMM_CL_CF(JGRP,CURIYR+IYR-1)
                               ENDIF
                           END IF
                           OLD_REC = ECL_NREC(OLD_REC)
                        END DO
                        CLSG_T(JGRP) = 1
                        IF (ORG .NE. 0) THEN
                           CALL STRBLD(1,ORG)
                           CALL STRBOUT(CURIYR,ORG)
                        END IF
                     END IF
                  END IF
               END DO
               TOT_CAP(IYR) = MAX(0.0 , TOT_CAP(IYR) - ECL_CAP(IYR,JGRP))
               JGRP = CLSG_N(JGRP)
            END DO
!
!           STORE RETROFIT DECISIONS
!
            TOT_CAP = 0.0
            JGRP = CLSG_F(I_CLSG)
!
!           LOOP OVER EACH UNIT IN AN UPGRADE GROUP
!
            DO WHILE (JGRP .GT. 0)
               IF (CLSG_T(JGRP) .EQ. 0) THEN
                  CGRP = 0
                  DO IYR = 1 , UNXPH
                     JPGRP = ECL_GRP(IYR,JGRP)
                     IFRST = 0
                     IF (UCL_VIN(IYR) .EQ. 0 .OR. IYR .EQ. 1) THEN
                        CGRP = CGRP + 1
                        IFRST = 1
                     ELSE IF (UCL_VIN(IYR) .GT. UCL_VIN(IYR-1)) THEN
                        CGRP = CGRP + 1
                        IFRST = 1
                     END IF
!
                     IF (UCL_VIN(IYR) .LT. UCL_VIN(UNXPH)) THEN
                        BYR = CURIYR + IYR - 1
                     ELSE
                        BYR = CURIYR + UNFPH - 1
                     END IF
!
                     IF (IFRST .EQ. 1) THEN
                        YEAR = CURIYR + UHBSYR + IYR - 1
                        AGE = CURIYR + IYR + UHBSYR - ECL_YR(JGRP)
!
!                       Create Configuration Maps
!
                        CNFG_MAP(1) =  ECL_RCFG(IYR,JGRP)
                        ROPT_MAP(1) =  0
                        I_CNFG =  ECL_RCFG(IYR,JGRP)
                        N_CNFG = 1
                        DO I_ROPT = 1 , NUM_ROPT
                           IF (UCL_RCMB(I_ROPT,I_CNFG) .GT. 0) THEN
                              HG_TST = 0
                              IF (HG_BYR .LE. BYR + UHBSYR) HG_TST = 1
                              IF (EMLIM(4,MIN(UNYEAR,BYR)) .LT. 100.0) HG_TST = 1
                              IF (UCL_CNFG(8,UCL_RCMB(I_ROPT,I_CNFG)) .EQ. 0) HG_TST = 1
                              IF (HG_TST .EQ. 1) THEN
                                 N_CNFG = N_CNFG + 1
                                 CNFG_MAP(N_CNFG) = UCL_RCMB(I_ROPT,I_CNFG)
                                 ROPT_MAP(N_CNFG) = I_ROPT
                              END IF
                           END IF
                        END DO
!
                        SV_COL = 0.0
                        SV_COL_HTRT = 0.0
                        S_CNFG_J = CNFG_MAP(1)
                        S_CNFG_I = 1
                        OLD_ECP = UCL_ECP(S_CNFG_J)
                        DO I_CNFG = 1 , N_CNFG
                           J_CNFG = CNFG_MAP(I_CNFG)
                           IECP = UCL_ECP(J_CNFG)
                           IF (I_CNFG .EQ. 1) THEN
                              CFG = "COL"
                           ELSE IF (J_CNFG .LT. 10) THEN
                              WRITE(CFG,'("00",I1)') J_CNFG
                           ELSE IF (J_CNFG .LT. 100) THEN
                              WRITE(CFG,'("0",I2)') J_CNFG
                           ELSE
                              WRITE(CFG,'(I3)') J_CNFG
                           END IF
                           COL_RET = GRP_CD(CGRP)//COAL//CFG; call makmsk(COL_RET_mask,GRP_CD(CGRP),COAL,CFG)
                           LEV_COL = LEV_CNFG(I_CNFG,IYR)
                           LEV_CST(2) = CST_CNFG(I_CNFG,IYR)
                           LEV_CST(3) = RCST_CNFG(I_CNFG,IYR)
                           LEV_DEF(2) = CST_CNFG(1,IYR)
                           LEV_DEF(3) = RCST_CNFG(1,IYR)
                           COL_HTRT = GRP_CD_HTRT(CGRP)//COAL//CFG; call makmsk(COL_HTRT_mask,GRP_CD_HTRT(CGRP),COAL,CFG,':!HTRT:')
                           LEV_COL_HTRT = LEV_CNFG_HTRT(I_CNFG,IYR)
                           LEV_CST_HTRT(2) = CST_CNFG_HTRT(I_CNFG,IYR)
                           LEV_CST_HTRT(3) = RCST_CNFG_HTRT(I_CNFG,IYR)
                           LEV_DEF_HTRT(2) = CST_CNFG_HTRT(1,IYR)
                           LEV_DEF_HTRT(3) = RCST_CNFG_HTRT(1,IYR)
!
                           IF (SV_COL .LT. (LEV_COL + LEV_COL_HTRT) .OR. (LEV_COL + LEV_COL_HTRT) .GE. ECL_CAP(IYR,JGRP)) THEN
                              S_CNFG_J = J_CNFG
                              S_CNFG_I = I_CNFG
                              SV_COL = MIN( (LEV_COL + LEV_COL_HTRT) , ECL_CAP(IYR,JGRP))

                              IF (LEV_COL .GT. LEV_COL_HTRT) THEN
                              WRITE(18,2317) CURIYR+UHBSYR,YEAR,NERC,I_CLSG,JGRP,ECL_IGRP(JGRP),I_CNFG,CNFG_MAP(1),J_CNFG,IECP,COL_RET,STATUS,LEV_COL, &
                                 ECL_CAP(IYR,JGRP),LEV_CST(2),LEV_CST(3),LEV_DEF(2),LEV_DEF(3)
 2317                         FORMAT(1X,"RETROFIT",10(":",I5),":",A8,":",A1,2(":",F7.1),4(":",F12.3))
!                             LABEL:RETROFIT:CYEAR:PYEAR:NERC:CLSG:ICL:ECL_IGRP:I_CNFG:CNFG_MAP:J_CNFG:IECP:COL_RET:STATUS:LEV_COL:ECL_CAP,LEV_CST
                              ELSE
                                 WRITE(18,2317) CURIYR+UHBSYR,YEAR,NERC,I_CLSG,JGRP,ECL_IGRP(JGRP),I_CNFG,CNFG_MAP(1),J_CNFG,IECP,COL_HTRT,STATUS,LEV_COL_HTRT, &
                                    ECL_CAP(IYR,JGRP),LEV_CST_HTRT(2),LEV_CST_HTRT(3),LEV_DEF_HTRT(2),LEV_DEF_HTRT(3)
                              END IF
                           END IF
                        END DO

                        IF (CURIYR + IYR + UHBSYR .GE. UCL_CL_NG_SYR) THEN
                           J_CNFG = 9999
                           I_CNFG = N_CNFG + 1
                           CFG = 'NG'//UPYRCD(IYR); call makmsk(CFG_mask,':NG:',UPYRCD(IYR))
                           COL_CLtNG = 'N'//COAL//CFG; call makmsk(COL_CLtNG_mask,':N:',COAL,CFG)
                           LEV_COL_CLtNG = LEV_CNFG_CLtNG(I_CNFG,IYR) 
                           LEV_CST_CLtNG(2) = CST_CNFG_CLtNG(I_CNFG,IYR)
                           LEV_CST_CLtNG(3) = RCST_CNFG_CLtNG(I_CNFG,IYR)
                           LEV_DEF_CLtNG(2) = CST_CNFG_CLtNG(1,IYR)
                           LEV_DEF_CLtNG(3) = RCST_CNFG_CLtNG(1,IYR)
                           
                           COL_CLtNG = 'GCL'//GRP_CD(IYR)//COAL; call makmsk(COL_CLtNG_CL_mask,':GCL:',GRP_CD(IYR),COAL)
                           LEV_COL_CLtNG_CL = LEV_CNFG_CLtNG_CL(I_CNFG,IYR) 
                           LEV_CST_CLtNG_CL(2) = CST_CNFG_CLtNG_CL(I_CNFG,IYR)
                           LEV_CST_CLtNG_CL(3) = RCST_CNFG_CLtNG_CL(I_CNFG,IYR)
                           LEV_DEF_CLtNG_CL(2) = CST_CNFG_CLtNG_CL(1,IYR)
                           LEV_DEF_CLtNG_CL(3) = RCST_CNFG_CLtNG_CL(1,IYR)
                        
!
                           IF ((SV_COL .LT. (LEV_COL_CLtNG + LEV_COL_CLtNG_CL)) .OR. ((LEV_COL_CLtNG + LEV_COL_CLtNG_CL ).GE. ECL_CAP(IYR,JGRP))) THEN
                              S_CNFG_J = J_CNFG
                              S_CNFG_I = I_CNFG
                              SV_COL = MIN( LEV_COL_CLtNG + LEV_COL_CLtNG_CL , ECL_CAP(IYR,JGRP))

                              WRITE(18,2317) CURIYR+UHBSYR,YEAR,NERC,I_CLSG,JGRP,ECL_IGRP(JGRP),I_CNFG,CNFG_MAP(1),J_CNFG,WING,COL_CLtNG,STATUS,LEV_COL_CLtNG, &
                                 ECL_CAP(IYR,JGRP),LEV_CST_CLtNG(2),LEV_CST_CLtNG(3),LEV_DEF_CLtNG(2),LEV_DEF_CLtNG(3)
                              IF ((SV_COL .LT. LEV_COL_CLtNG_CL) .OR. (LEV_COL_CLtNG_CL .GE. ECL_CAP(IYR,JGRP))) THEN
                                  WRITE(18,2317) CURIYR+UHBSYR,YEAR,NERC,I_CLSG,JGRP,ECL_IGRP(JGRP),I_CNFG,CNFG_MAP(1),J_CNFG,WING,COL_CLtNG_CL,STATUS,LEV_COL_CLtNG_CL, &
                                     ECL_CAP(IYR,JGRP),LEV_CST_CLtNG_CL(2),LEV_CST_CLtNG_CL(3),LEV_DEF_CLtNG_CL(2),LEV_DEF_CLtNG_CL(3)
                              END IF
                           END IF
                        END IF

                    IF (S_CNFG_I .LE. N_CNFG) THEN
                           IECP = UCL_ECP(S_CNFG_J)
                           ICLS = HG_CLASS(IECP)
!
!                       Test for Mercury MACT
!
                        BYR2 = MIN(CURIYR+IYR-1,UNYEAR)
!
                        MACT_TST = 1
                        IF (USW_MACT .EQ. 1 .AND. YEAR .GE. UMACT_YR .AND. UCL_MACT_CFG(IECP) .EQ. 0) MACT_TST = 0
                        IF (USW_BACT .GT. 0 .AND. YEAR .GE. UBACT_YR .AND. AGE .GT. 40) MACT_TST = 0
                        IF (USW_DSI  .GT. 0 .AND. YEAR .GE. UDSI_YR) MACT_TST = 0
                        IF (HG_GRAMS_MWH(ICLS,BYR2) .GT. 0.0) MACT_TST = 0
                        IF (HG_MEF(ICLS,1,BYR2) .GT. 0.0) MACT_TST = 0
                        IF (HG_MEF(ICLS,2,BYR2) .GT. 0.0) MACT_TST = 0
                        IF (HG_MEF(ICLS,3,BYR2) .GT. 0.0) MACT_TST = 0
                        IF (HG_OUTPUT(ICLS,1,BYR2) .GT. 0.0) MACT_TST = 0
                        IF (HG_OUTPUT(ICLS,2,BYR2) .GT. 0.0) MACT_TST = 0
                        IF (HG_OUTPUT(ICLS,3,BYR2) .GT. 0.0) MACT_TST = 0
                        IF (HG_INPUT(ICLS,1,BYR2) .GT. 0.0) MACT_TST = 0
                        IF (HG_INPUT(ICLS,2,BYR2) .GT. 0.0) MACT_TST = 0
                        IF (HG_INPUT(ICLS,3,BYR2) .GT. 0.0) MACT_TST = 0
!
!                       write(6,4321) curiyr+1989,year,grp_cd(cgrp),coal,s_cnfg_j,cnfg_map(1),ucl_vin(iyr),rgrp,mact_tst,sv_col,&
!                          ecl_cap(iyr,jgrp),0.9*ecl_cap(iyr,jgrp),sv_tot_cap(iyr+1),0.2*ecl_cap(iyr+1,jgrp)
!4321                   format(1h ,'!svcoli',i4,i5,a1,a4,i3,i3,i3,i3,i3,8f10.3)

                        IF (UCL_VIN(IYR) .EQ. RGRP .AND. (SV_COL .GT. 0.9 * ECL_CAP(IYR,JGRP) .OR. MACT_TST .EQ. 0)) THEN
                           IF (SV_TOT_CAP(IYR+1) .GT. 0.2 * ECL_CAP(IYR+1,JGRP)) THEN

                              SV_LEV_CNFG = LEV_CNFG(S_CNFG_I,IYR)
                              SV_LEV_CNFG_HTRT = LEV_CNFG_HTRT(S_CNFG_I,IYR)
                              IF (LEV_CNFG_HTRT(S_CNFG_I,IYR) .GE. LEV_CNFG(S_CNFG_I,IYR)) THEN
                                 IF (LEV_CNFG_HTRT(S_CNFG_I,IYR) .GE. SV_COL) THEN
                                    LEV_CNFG_HTRT(S_CNFG_I,IYR) = LEV_CNFG_HTRT(S_CNFG_I,IYR) - SV_COL
                                 ELSE
                                    LEV_CNFG(S_CNFG_I,IYR) = LEV_CNFG(S_CNFG_I,IYR) + LEV_CNFG_HTRT(S_CNFG_I,IYR) - SV_COL
                                    LEV_CNFG_HTRT(S_CNFG_I,IYR) = 0.0
                                 END IF
                                 CLSG_T(JGRP) = 2
                              ELSE
                                 IF (LEV_CNFG(S_CNFG_I,IYR) .GE. SV_COL) THEN
                              LEV_CNFG(S_CNFG_I,IYR) = LEV_CNFG(S_CNFG_I,IYR) - SV_COL
                                 ELSE
                                    LEV_CNFG_HTRT(S_CNFG_I,IYR) = LEV_CNFG_HTRT(S_CNFG_I,IYR) + LEV_CNFG(S_CNFG_I,IYR) - SV_COL
                                    LEV_CNFG(S_CNFG_I,IYR) = 0.0
                                 END IF
                              CLSG_T(JGRP) = 1
                              END IF

                              IF (S_CNFG_J .NE. CNFG_MAP(1) .OR.  &
                                 ((CURIYR + UHBSYR + UPSCLT) .EQ. UDSI_YR .AND. UCL_CNFG(3,S_CNFG_J) .LE. 0) .OR. &
                                 CLSG_T(JGRP) .EQ. 2) THEN

                                 IF (S_CNFG_J .NE. CNFG_MAP(1))THEN
                                    IF (S_CNFG_J .LT. 10) THEN
                                       WRITE(CFG,'("00",I1)') S_CNFG_J
                                    ELSE IF (S_CNFG_J .LT. 100) THEN
                                       WRITE(CFG,'("0",I2)') S_CNFG_J
                                    ELSE
                                       WRITE(CFG,'(I3)') S_CNFG_J
                                    END IF
                                    COL_RET = GRP_CD(CGRP)//COAL//CFG; call makmsk(COL_RET_mask,GRP_CD(CGRP),COAL,CFG)
                                 ELSE
                                    COL_RET = GRP_CD(CGRP)//COAL//'COL'; call makmsk(COL_RET_mask,GRP_CD(CGRP),COAL,':COL:')
                                 END IF
                                 IECP = UCL_ECP(S_CNFG_J)
                                 OLD_REC = ECL_FREC(JGRP)
                                 DO WHILE (OLD_REC .GT. 0)
!
                                    CALL GETPLT(OLD_REC)
                                    NERC = WNOWN
                                    IF (ORG .NE. NERC) THEN
                                       IF (ORG .NE. 0) THEN
                                          CALL STRBLD(1,ORG)
                                          CALL STRBOUT(CURIYR,ORG)
                                       END IF
                                       CALL GETBLD(1,NERC)
                                       CALL GETBOUT(CURIYR,NERC)
                                       ORG = NERC
                                    END IF
                                    IF (W_RYR .GT. YEAR - 1) THEN
!
!                                      If new record is needed retire unscrubbed unit
!                                      New record is not required if the record start year W_SYR has yet to occur in the forecast
!
                                       IF (W_SYR .LE. YEAR) THEN
                                          SV_RYR = W_RYR
                                          SV_RMO = W_RMO
                                          W_RYR = YEAR - 1
                                          W_RMO = 12
                                          OVIN = WVIN
                                          WVIN = 8
!
                                          CALL STRPLT(OLD_REC)
!
!                                         INCREMENT COUNTER
!
                                          WREC_NXT = WREC_NXT + 1
!
!                                         INSURE THAT NUMBER OF BUILDS DOESN'T EXCEED ALLOCATION
!
                                          IF (WREC_NXT .GT. WPLT_D_REC) WRITE(6, * ) ' EPO$RET ERROR: TOO MANY PLANT RECORDS'
                                          NEW_REC = WREC_NXT
                                       ELSE
                                          NEW_REC = OLD_REC
                                       END IF
!
!                                      Store Capacity Related Data:
!
                                       OV_CST = 0.0
                                       OV_CST_CTS_B4 = 0.0
                                       OV_CST_CTS = 0.0
                                       CTS_INV_Annuity = 0.0
                                       FOM = 0.0
                                       VOM = 0.0
                                       CTS_C = 0.0
                                       CTS_F = 0.0
                                       CTS_V = 0.0
                                       CTS_C_B4 = 0.0
                                       CTS_F_B4 = 0.0
                                       CTS_V_B4 = 0.0

                                       ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                                       IF (IYR .LT. UNXPH)THEN 
                                          IF ((CURIYR+IYR-1) .LE. UNYEAR)THEN
                                             ANNADJ = UPANNADJ(IECP,CURIYR+IYR-1)
                                          ELSE
                                             ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + IYR - 1) - UNYEAR)
                                          END IF
                                       ELSE
                                          DO JYR = UNXPH , UNAPH
                                             KYR = JYR - UNXPH + 1
                                             AN1(KYR) = 1.0
                                             IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                                ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                                             ELSE
                                                ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                             END IF
                                          END DO
                                          ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                                   PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                                       END IF

!                                      RAG initialize added CCS variables
!                                      moved WSEQEF initialize to here to prevent overwrite of CCS value

                                       oUCL_SC_V = 0.0
                                       CPEN = UECP_CPEN_ADJ(IECP)
                                       CLOSS= 1.0 - CPEN
                                       HPEN = UECP_HTRT_ADJ(IECP)
                                       WSEQEF = 0.0

!                                      RAG end initialize

                                       NEW_NOXR = ECL_NXR(IYR,JGRP)
                                       SCR_RMV = 1.0
                                       IP = WEFDT
                                       IEFD = WEFDT
!                                                                                      ADD DSI
                                       IF ((CURIYR + UHBSYR + UPSCLT) .EQ. UDSI_YR)THEN
                                          OV_CST = OV_CST + W_ESPU + W_CFBU
                                          FOM = FOM + W_CFBUF
                                          VOM = VOM + W_CFBUV
                                          IF (UCL_CNFG(3,S_CNFG_J) .LE. 0 .AND. WC_SUM .GT. 25.0)THEN
                                             CALL EPA$DSICST(WECPT,WC_SUM,DSIOVR,DSIFOM,DSIVOM,DSISEF)

!                                            OV_CST = OV_CST + DSIOVR
!                                            FOM = FOM + DSIFOM
!                                            VOM = VOM + DSIVOM

                                             OV_CST = OV_CST + W_DSIOV + W_ESPU + W_CFBU
                                             FOM = FOM + W_DSIF + W_CFBUF
                                             VOM = VOM + W_DSIV + W_CFBUV
                                             EMELDSI(NERC,CURIYR + IYR - 1) = EMELDSI(NERC,CURIYR + IYR - 1) + WC_SUM * 0.001
                                             EMELDSI(MNUMNR,CURIYR + IYR - 1) = EMELDSI(MNUMNR,CURIYR + IYR - 1) + WC_SUM * 0.001

!                                            write(6,4455) curiyr + uhbsyr,grp_cd(cgrp),coal,s_cnfg_j,cnfg_map(1),old_rec,w_grp,wnown,&
!                                               uplntcd(iecp),w_syr,wc_sum,  &
!                                               EMELDSI(NERC,CURIYR + IYR - 1),  &
!                                               EMELDSI(MNUMNR,CURIYR + IYR - 1),w_dsiov,dsiovr,w_dsif,dsifom,w_dsiv,dsivom
!4455                                        format(1h ,'!dsicap',i4,a1,a4,i3,i3,i6,i6,i3,a3,i5,15f10.1)
!                                            if (coal .eq. '0113')write(6,4322) curiyr+1989,year,grp_cd(cgrp),coal,s_cnfg_j,cnfg_map(1), &
!                                               ucl_cnfg(3,s_cnfg_j),  &
!                                               uplntcd(UCL_ECP(S_CNFG_J)),  &
!                                               ecl_cap(iyr,jgrp),  &
!                                               ecl_cap(iyr+1,jgrp)
!4322                                        format(1h ,'!svcolo',i4,i5,a1,a4,i3,i3,i3,a3,8f10.3)
!                                            write(6,4454) curiyr + uhbsyr,col_ret,ucl_cnfg(3,s_cnfg_j),s_cnfg_i,s_cnfg_j,cnfg_map(1),&
!                                            old_rec,w_grp,wnown,uplntcd(iecp),w_syr,wc_sum
!4454                                        format(1h ,'!colcap',i4,a10,i3,i3,i3,i3,i6,i6,i3,a3,i5,5f10.1)
                                          END IF
                                       END IF
 
!                                      STORE HTRT_MOD_INFO

                                       IF (CLSG_T(JGRP) .EQ. 2) THEN

                                          WRITE(18,3371) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_CLSG, JGRP, W_IGRP, W_GRP, &
                                             OLD_REC, NEW_REC, IECP, YEAR, NERC, S_CNFG_J, CNFG_MAP(1), HTRT_DOLLAR_YEAR, &
                                             SV_LEV_CNFG_HTRT, SV_LEV_CNFG, &
!hro                                            WC_SUM, WHRATE, HTRT_FLOOR(IECP), HTRT_REDUCTION(IECP), &
                                                WC_SUM, WHRATE, HTRT_FLOOR(IECP), HTRT_REDQ(IECP,CLSG_QT(I_CLSG)), &
                                             ECFOR(W_GRP), ECPMR(W_GRP), ECLFR(W_GRP), &
                                             W_CF, (1.0 - ECFOR(W_GRP)) * (1.0 - ECPMR(W_GRP)) * (1.0 - ECLFR(W_GRP)),  &
                                             W_FOM, UPGNPD(HTRT_DOLLAR_YEAR-UHBSYR)
 3371                                     FORMAT(1X,"EPO_COAL_HTRT",15(":",I5),13(":",F20.6))

!hro                                      OV_CST = OV_CST + (HTRT_OVR_CST(IECP) / (WC_SUM * 0.001)) / UPGNPD(HTRT_DOLLAR_YEAR-UHBSYR)

!                                         OV_CST = OV_CST + (HTRT_OVRQ(IECP,CLSG_QT(I_CLSG)) / (WC_SUM * 0.001))
                                          OV_CST = OV_CST +  HTRT_OVRQ(IECP,CLSG_QT(I_CLSG))

!hrp                                      OV_CST = OV_CST + (ECL_HRI_O(JGRP) / (WC_SUM * 0.001))

                                          HTRT_RESULTS(W_IGRP) = YEAR

!hro                                      WHRATE = MAX(HTRT_FLOOR(IECP) , WHRATE * (1.0 - HTRT_REDUCTION(IECP)))

                                          WHRATE = MAX(HTRT_FLOOR(IECP) , WHRATE * (1.0 - HTRT_REDQ(IECP,CLSG_QT(I_CLSG))))

!hrp                                      WHRATE = MAX(HTRT_FLOOR(IECP) , WHRATE * (1.0 - ECL_HRI_H(JGRP)))

                                          IF ((CURIYR + IYR - 1) .LE. UNYEAR) THEN
                                             WRITE(13,3321) curiyr+1989,i_clsg,jgrp,w_igrp,w_grp,nerc,uplntcd(iecp),cnfg_map(1),w_syr,wc_sum,  &
                                                            htrt_ovrq(iecp,clsg_qt(i_clsg))*scalpr,htrt_redq(iecp,clsg_qt(i_clsg))
 3321                                        format(1h ,'!hriout',i4,i6,i6,i6,i6,i4,a3,i5,i5,5f10.3)

                                             ECAPNRHR(NERC,CURIYR + IYR - 1) = ECAPNRHR(NERC,CURIYR + IYR - 1) + WC_SUM * 0.001
                                             ECAPNRHR(MNUMNR,CURIYR + IYR - 1) = ECAPNRHR(MNUMNR,CURIYR + IYR - 1) + WC_SUM * 0.001

!                                            IF (W_CR .GT. 0 .AND. W_CLRG .GT. 0 .AND. W_GR .GT. 0 .AND. W_CAR .GT. 0) THEN
!                                               FRG = EPNFLRG(W_CR,W_CLRG,W_GR,W_CAR)

                                             IF (FRG .GT. 0) THEN
                                                ECAPFRHR(FRG,CURIYR + IYR - 1) = ECAPFRHR(FRG,CURIYR + IYR - 1) + WC_SUM * 0.001
                                                ECAPFRHR(EFD_D_MFRG+1,CURIYR + IYR - 1) = ECAPFRHR(EFD_D_MFRG+1,CURIYR + IYR - 1) + WC_SUM * 0.001

!                                            ELSE
!                                               WRITE(6,3322) curiyr+1989,i_clsg,jgrp,w_grp,nerc,cnfg_map(1),w_syr,wc_sum
!3322 format(1h ,'!nofrghr',i4,i6,i5,i6,i4,i5,f10.1)

                                             END IF
                                          END IF
                                       END IF

                                       IF (S_CNFG_J .NE. CNFG_MAP(1))THEN
                                          I_ROPT = ROPT_MAP(S_CNFG_I)
                                          IF (ROPT_MAP(S_CNFG_I) .GT. 0) THEN
                                             IF (UCL_ROPT(1,I_ROPT) .GT. 0) THEN        ! ADD FGD
                                                OV_CST = OV_CST + ECL_FGD_O(JGRP)

!                                               FOM = FOM + ECL_FGD_F(JGRP)

                                                FOM = FOM + (UPFOM(WIB3) - UPFOM(WIB1))
                                                IF (CURIYR + IYR - 1 .LE. UNYEAR) THEN
                                                   EMELRET(NERC,CURIYR + IYR - 1) = EMELRET(NERC,CURIYR + IYR - 1) + 0.001 * WC_SUM
                                                   EMELRET(MNUMNR,CURIYR + IYR - 1) = EMELRET(MNUMNR,CURIYR + IYR -1) + 0.001 * WC_SUM

!                                                  write(6,4456) curiyr + uhbsyr,curiyr  + uhbsyr + 1,col_ret,old_rec,w_grp,wnown, &
!                                                     s_cnfg_j,uplntcd(iecp),w_syr,wc_sum,  &
!                                                     EMELRET(NERC,CURIYR + IYR - 1),  &
!                                                     EMELRET(MNUMNR,CURIYR + IYR - 1)
!4456                                              format(1h ,'!fgdcap',i4,i4,a10,i6,i5,i3,i3,a3,i5,5f10.1)

                                                END IF
                                                WSCBEF = UPPSEF(IECP) * 100.0
                                                WSCBYR = YEAR
                                                WSCBGRP = 0
                                                IEFD = 3
                                                WEFDT = IEFD
                                                T_RETRO = T_RETRO + WC_SUM
                                                WSCBT = "W"
                                                IF (SV_YEAR .GT. CURIYR + IYR - 1) THEN
                                                   SO2_PERMITS = .5 * (1.2 - AVG_SCB_SO2(CRG) * (1.0 - AVG_SCB_RMV(CRG))) * &
                                                      ECL_CF(IYR,JGRP) * 0.00876 * ULHTRT_ECP(JPGRP,IYR)
!
                                                   BA_CRD_FRAC = 0.0
                                                   DO XYR = 1 , SV_YEAR - CURIYR - IYR + 1
                                                      BA_CRD_FRAC(XYR) = 1.0
                                                   END DO
                                                   IF (SV_YEAR .EQ. CURIYR + IYR) THEN
                                                      PV_BA_CRD = 1.0
                                                   ELSE
                                                      DSCRT = DBLE(EPDSCRT)
                                                      PV_BA_CRD = 1.0 + PVV(BA_CRD_FRAC,ECP_D_FPH,UNFPH-IYR,DSCRT)
                                                   END IF
!
                                                   DO ISO2 = 1 , NUM_SO2_GRP
                                                      IF (SO2_SHR_BY_CLRG(CRG,ISO2) .GT. 0.0)THEN
                                                         EMELBNK(1,ISO2) = EMELBNK(1,ISO2) + SO2_PERMITS * PV_BA_CRD * WC_SUM * &
                                                            DBLE(SO2_SHR_BY_CLRG(CRG,ISO2))

                                                         WRITE(18,3218) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,JGRP,IRG,CRG,OLD_ECP,IECP, &
                                                            ECL_RCFG(IYR,JGRP),S_CNFG_J,COL_RET, &
                                                            AVG_SCB_SO2(CRG), AVG_SCB_RMV(CRG), ECL_CF(IYR,JGRP), ULHTRT_ECP(JPGRP,IYR), &
                                                            SO2_PERMITS, WC_SUM, SO2_PERMITS*WC_SUM, PV_BA_CRD
 3218                                                    FORMAT(1X,"SO2_PERMITS_OUT",9(":",I5),":",A8,8(":",F10.3)":",F10.0)
 
                                                      END IF
                                                   END DO
                                                END IF
                                             END IF
                                             IF (UCL_ROPT(2,I_ROPT) .GT. 0) THEN        ! ADD COMB
                                                OV_CST = OV_CST + ECL_CMB_O(JGRP)
                                                FOM = FOM + ECL_CMB_F(JGRP)
                                                VOM = VOM + ECL_CMB_V(JGRP)
                                                NEW_NOXR = NEW_NOXR * (1.0 - ECL_CMB_R(JGRP))
                                                W_COMB = 3
                                                IF ((CURIYR + IYR - 1) .LE. UNYEAR) THEN
                                                   EMELNOX(NERC,CURIYR + IYR - 1) = EMELNOX(NERC,CURIYR + IYR - 1) + WC_SUM * 0.001
                                                   EMELNOX(MNUMNR,CURIYR + IYR - 1) = EMELNOX(MNUMNR,CURIYR + IYR - 1) + WC_SUM * 0.001
                                                END IF
                                                WCOMB_R = 0.0
                                             END IF
                                             IF (UCL_ROPT(3,I_ROPT) .GT. 0) THEN        ! ADD SNCR
                                                OV_CST = OV_CST + ECL_SNCR_O(JGRP)
                                                FOM = FOM + ECL_SNCR_F(JGRP)
                                                VOM = VOM + ECL_SNCR_V(JGRP)
                                                NEW_NOXR = NEW_NOXR * (1.0 - ECL_SNCR_R(JGRP))
                                                W_POST = 5
                                                IF ((CURIYR + IYR - 1) .LE. UNYEAR) THEN
                                                   EMELNCR(NERC,CURIYR + IYR - 1) = EMELNCR(NERC,CURIYR + IYR - 1) + WC_SUM * 0.001
                                                   EMELNCR(MNUMNR,CURIYR + IYR - 1) = EMELNCR(MNUMNR,CURIYR + IYR - 1) + WC_SUM * 0.001
                                                END IF
                                             END IF
                                             IF (UCL_ROPT(4,I_ROPT) .GT. 0) THEN        ! ADD SCR
                                                OV_CST = OV_CST + ECL_SCR_O(JGRP)
                                                FOM = FOM + ECL_SCR_F(JGRP)
                                                VOM = VOM + ECL_SCR_V(JGRP)
                                                NEW_NOXR = NEW_NOXR * (1.0 - ECL_SCR_R(JGRP))
                                                SCR_RMV = 1.0 - ECL_SCR_R(JGRP)
                                                W_POST = 6
                                                IF ((CURIYR + IYR - 1) .LE. UNYEAR) THEN
                                                   EMELSCR(NERC,CURIYR + IYR - 1) = EMELSCR(NERC,CURIYR + IYR - 1) + WC_SUM * 0.001
                                                   EMELSCR(MNUMNR,CURIYR + IYR - 1) = EMELSCR(MNUMNR,CURIYR + IYR - 1) + WC_SUM * 0.001
                                                END IF
                                             END IF
                                             IF (UCL_ROPT(5,I_ROPT) .GT. 0) THEN        ! ADD CCS
                                                IF (TEST_JGRP(JGRP) .EQ. 0) E_PLTS = E_PLTS + 1
                                                TEST_JGRP(JGRP) = TEST_JGRP(JGRP) + 1

                                                T_RETRO_CCS = T_RETRO_CCS + WC_SUM   !RGCAP

                                                OHR = WHRATE                               !original heat rate, btu/kWh

                                                oUCL_SC_O = ECL_CCS_O(JGRP)

                                                oUCL_SC_F = ECL_CCS_F(JGRP)
                                                CTS_F_B4 = oUCL_SC_F

                                                oUCL_SC_V = ECL_CCS_V(JGRP) / 1000.0
                                                CTS_V_B4 = oUCL_SC_V * 1000.0 * TCCV_GL(MIN(CURIYR+IYR-1,MNUMYR),1)

                                                INOX_LT = IYR - 1

                                                WSEQEF = ECL_CCS_R(JGRP)

                                                HPEN = ECL_CCS_H(JGRP) / WHRATE

                                                CPEN = 1.0 - ECL_CCS_C(JGRP)

!                                               write(6,22721) CURIRUN, CURCALYR, IYR, I_CLSG, IGRP, JGRP, ECL_IGRP(IGRP), CLOSS , UCL_CF1, &
!                                                  UCL_CF2, UCL_CF3 , UCL_CF4 , HRMAX , CCS_R, HPEN, CPEN, ECL_CCS_H(JGRP), ECL_CCS_C(JGRP)
!22721                                          format(1X,"CLOSS_ ",7(":",I5), 11(":",F12.3))

!                                               write(6,22323) CURIRUN, CURCALYR, IYR, I_CLSG, JGRP, IECP, HTRT_GL(CURIYR+INOX_LT,1), &
!                                                  UECP_HTRT_ADJ(IECP), 1.0 - CLOSS, HPEN, CLOSS,HPEN_ORG,HRT,OHR,HRMAX
!22323                                          format(1X,"HTRT_G1",6(":",I5), 9(":",F12.3))                                          

                                                CCSCAPA = 1.0 - CPEN

!                                               write(6,22321) CURIRUN, CURCALYR, IYR, I_CLSG, JGRP, IECP, HTRT_GL(CURIYR+INOX_LT,1), &
!                                                  UECP_HTRT_ADJ(IECP), 1.0 - CLOSS, HPEN, CPEN,HPEN_ORG
!22321                                          format(1X,"HTRT_G2",6(":",I5), 7(":",F12.8))

!                                               write(6,3232) curiyr+1989,col_ret,ohr,hrmax,c_refurb,closs,hpen,cpen,ccscapa
!3232                                           format(1h ,'!ccsplt',i4,a10,8f12.3)

                                                OV_CST_CTS_B4 = ECL_CCS_O(JGRP) * TCCF_GL(MIN(CURIYR+IYR-1,MNUMYR),1)
                                                OV_CST_CTS_B4 = OV_CST_CTS_B4 * ANNADJ

                                                TXBOOK = 0.0
                                                FNBOOK = 0.0
                                                CAPUTIL = 0.0

                                                IF (UCL_VIN(IYR) .GT. 0) THEN
                                                   NYR = 0
                                                   DO IY = IYR , UNXPH
                                                      IF (UCL_VIN(IY) .EQ. UCL_VIN(IYR)) THEN
                                                         NYR = NYR + 1
                                                         IF (IY .EQ. UNXPH) THEN
                                                            NYR = NYR + UNFPH - UNXPH
                                                         END IF
                                                      END IF
                                                   END DO
                                                ELSE
                                                   NYR = 1
                                                END IF

                                                IF (OV_CST_CTS_B4 .GT. 0.0001) THEN

                                                   CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,IYR,OV_CST_CTS_B4,UPSCPR, &
                                                      UPCAPD(1,IECP),UPGNPD,RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)

                                                   URATIO = TXBOOK / FNBOOK
                                                   CAPUNSTL = FNBOOK

!                                                  Check Vintage for Retrofit Tax Life

                                                   IF (ECL_YR(JGRP) .LT. UPSTXYR)THEN
                                                      STXLF = UPSTXLF(1)
                                                   ELSE
                                                      STXLF = UPSTXLF(2)
                                                   END IF

                                                   CALL EPNBLD(DBLE(RETROR),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)

                                                   CTS_C_B4 = CAPUNSTL * CAPUTIL / CRF(DBLE(EPUTDSCRT),NYR) * PWF(DBLE(EPUTDSCRT),IYR)
                                                   CTS_INV_Annuity = CAPUNSTL * CAPUTIL 
                                                ELSE
                                                   CTS_C_B4 = 0.0
                                                END IF

                                                !CTS_INV_Annuity = CTS_INV_Annuity * UPGNPD(CURIYR+IYR-1) - already nominal?

!         correction -  do not assign VOM from CTS model, just use the FOM and VOM adders from the plant file
!         FOM should be based on original capacity, VOM on derated
                                                CTS_V = CTS_V_B4 

                                                CTS_F = CTS_F_B4

                                                FOM = FOM + CTS_F 
                                                VOM = VOM + CTS_V * CPEN

                                                IF (ISNAN(CTS_INV_Annuity)) THEN
                                                   CTS_INV_Annuity = 1000.0
                                                END IF

!                                               CTS_INV_Annuity = CTS_INV_Annuity * UPGNPD(CURIYR+IYR-1) 

!                                               CTS_C = CTS_INV_Annuity / CRF(DBLE(EPUTDSCRT),NYR) * PWF(DBLE(EPUTDSCRT),IYR)

                                                OV_CST_CTS = 1.0
                                                TXBOOK = 0.0
                                                FNBOOK = 0.0
                                                CAPUTIL = 0.0

                                                CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,IYR,OV_CST_CTS,UPSCPR, &
                                                   UPCAPD(1,IECP),UPGNPD,RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)

                                                URATIO = TXBOOK / FNBOOK
                                                CAPUNSTL = FNBOOK

!                                               Check Vintage for Retrofit Tax Life

                                                IF (ECL_YR(JGRP) .LT. UPSTXYR)THEN
                                                   STXLF = UPSTXLF(1)
                                                ELSE
                                                   STXLF = UPSTXLF(2)
                                                END IF

                                                CALL EPNBLD(DBLE(RETROR),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)

                                                OV_CST_CTS = CTS_INV_Annuity / (CAPUNSTL * CAPUTIL) * ANNADJ

                                                IF (W_ACI .EQ. "F") THEN
                                                   W_ACI = "B"
                                                ELSE
                                                   W_ACI = "S"
                                                END IF
                                                IF ((CURIYR + IYR - 1) .LE. UNYEAR) THEN
                                                   E_RY(JGRP) = CURIYR + IYR - 1 + 1989
                                                   E_IGRP(JGRP) = W_IGRP
                                                   E_PTP(JGRP)= 1

                                                   write(18,1432) CURIRUN, curiyr+1989, JGRP, n_c, n_g, TEST_JGRP(JGRP), E_RY(JGRP), &
                                                      E_PLTS, E_IGRP(JGRP), WC_SUM*0.001, &
                                                      CTS_GW, CTS_V_B4, CTS_V, CTS_F_B4, CTS_F, CTS_C_B4, CTS_C, OV_CST_CTS_B4, &
                                                      OV_CST_CTS, CTS_INV_Annuity, &
                                                      (CAPUNSTL * CAPUTIL / CRF(DBLE(EPUTDSCRT),NYR) * PWF(DBLE(EPUTDSCRT),IYR)), &
                                                      CAPUNSTL, CAPUTIL, CRF(DBLE(EPUTDSCRT),NYR), PWF(DBLE(EPUTDSCRT),IYR), S_CNFG_I, &
                                                      CST_CNFG(S_CNFG_I,IYR), RCST_CNFG(S_CNFG_I,IYR), CST_CNFG(1,IYR), RCST_CNFG(1,IYR)
 1432                                              format(1x,'!ccsout2 ',6(":",I5),3(":",F8.0), 16(":",F12.3),":",I4,4(":",F12.3))

                                                END IF
                                             END IF
                                             IF (UCL_ROPT(6,I_ROPT) .GT. 0) THEN        ! ADD FF
                                                OV_CST = OV_CST + UCL_FF_O
                                                FOM = FOM + UCL_FF_F
                                                IF (W_ACI .EQ. "S") THEN
                                                   W_ACI = "B"
                                                ELSE
                                                   W_ACI = "F"
                                                END IF
                                                IF ((CURIYR + IYR - 1) .LE. UNYEAR) THEN
                                                   EMELFF(NERC,CURIYR + IYR - 1) = EMELFF(NERC,CURIYR + IYR - 1) + WC_SUM * 0.001
                                                   EMELFF(MNUMNR,CURIYR + IYR - 1) = EMELFF(MNUMNR,CURIYR + IYR - 1) + WC_SUM * 0.001
                                                END IF

!                                               write(6,1234) curiyr+1989,curiyr+1989+inox_lt,nerc,col_ret,wc_sum
!1234                                           format(1h ,'!ffout',i4,i5,i3,a10,f10.1)

                                             END IF
                                          END IF
                                       END IF
!
!                                      Determine ECP Type of This Plant Record after Retrofit
!
                                       JECP = WECPT
                                       DO K_CNFG = 1 , NUM_CNFG
                                          IF (UPTTYP(JECP) .EQ. UPTTYP(UCL_ECP(K_CNFG))) THEN
                                             ITST = 0
                                             IF (WPART .EQ. "B" .AND. UCL_CNFG(2,K_CNFG) .EQ. 1 .OR. &
                                                 WPART .EQ. "E" .AND. UCL_CNFG(2,K_CNFG) .EQ. 2 .OR. &
                                                 WPART .EQ. "N" .AND. UCL_CNFG(2,K_CNFG) .EQ. 3 .OR. &
                                                 WPART .EQ. "0" .AND. UCL_CNFG(2,K_CNFG) .EQ. 4) ITST = ITST + 1
                                             IF (WSCBT .EQ. "W" .AND. UCL_CNFG(3,K_CNFG) .EQ. 1 .OR. &
                                                 WSCBT .EQ. "D" .AND. UCL_CNFG(3,K_CNFG) .EQ. 2 .OR. &
                                                 WSCBT .EQ. "N" .AND. UCL_CNFG(3,K_CNFG) .EQ. 0) ITST = ITST + 1
                                             IF (W_COMB .GT. 0 .AND. UCL_CNFG(4,K_CNFG) .EQ. 1 .OR. &
                                                 W_COMB .EQ. 0 .AND. UCL_CNFG(4,K_CNFG) .EQ. 0) ITST = ITST + 1
                                             IF (W_POST .EQ. 1 .AND. UCL_CNFG(5,K_CNFG) .EQ. 1 .OR. &
                                                 W_POST .EQ. 3 .AND. UCL_CNFG(5,K_CNFG) .EQ. 1 .OR. &
                                                 W_POST .EQ. 5 .AND. UCL_CNFG(5,K_CNFG) .EQ. 1 .OR. &
                                                 W_POST .EQ. 0 .AND. UCL_CNFG(5,K_CNFG) .EQ. 0 .OR. &
                                                 W_POST .EQ. 2 .AND. UCL_CNFG(5,K_CNFG) .EQ. 0 .OR. &
                                                 W_POST .EQ. 4 .AND. UCL_CNFG(5,K_CNFG) .EQ. 0 .OR. &
                                                 W_POST .EQ. 6 .AND. UCL_CNFG(5,K_CNFG) .EQ. 0 .OR. &
                                                 W_POST .EQ. 7 .AND. UCL_CNFG(5,K_CNFG) .EQ. 0) ITST = ITST + 1
                                             IF (W_POST .EQ. 2 .AND. UCL_CNFG(6,K_CNFG) .EQ. 1 .OR. &
                                                 W_POST .EQ. 4 .AND. UCL_CNFG(6,K_CNFG) .EQ. 1 .OR. &
                                                 W_POST .EQ. 6 .AND. UCL_CNFG(6,K_CNFG) .EQ. 1 .OR. &
                                                 W_POST .EQ. 7 .AND. UCL_CNFG(6,K_CNFG) .EQ. 1 .OR. &
                                                 W_POST .EQ. 0 .AND. UCL_CNFG(6,K_CNFG) .EQ. 0 .OR. &
                                                 W_POST .EQ. 1 .AND. UCL_CNFG(6,K_CNFG) .EQ. 0 .OR. &
                                                 W_POST .EQ. 3 .AND. UCL_CNFG(6,K_CNFG) .EQ. 0 .OR. &
                                                 W_POST .EQ. 5 .AND. UCL_CNFG(6,K_CNFG) .EQ. 0) ITST = ITST + 1
                                             IF (W_ACI .EQ. "N" .AND. UCL_CNFG(7,K_CNFG) .EQ. 0 .OR. &
                                                 W_ACI .EQ. "A" .AND. UCL_CNFG(7,K_CNFG) .EQ. 0 .OR. &
                                                 W_ACI .EQ. "S" .AND. UCL_CNFG(7,K_CNFG) .EQ. 1 .OR. &
                                                 W_ACI .EQ. "F" .AND. UCL_CNFG(7,K_CNFG) .EQ. 0 .OR. &
                                                 W_ACI .EQ. "B" .AND. UCL_CNFG(7,K_CNFG) .EQ. 1) ITST = ITST + 1
                                             IF (W_ACI .EQ. "N" .AND. UCL_CNFG(8,K_CNFG) .EQ. 0 .OR. &
                                                 W_ACI .EQ. "A" .AND. UCL_CNFG(8,K_CNFG) .EQ. 0 .OR. &
                                                 W_ACI .EQ. "S" .AND. UCL_CNFG(8,K_CNFG) .EQ. 0 .OR. &
                                                 W_ACI .EQ. "F" .AND. UCL_CNFG(8,K_CNFG) .EQ. 1 .OR. &
                                                 W_ACI .EQ. "B" .AND. UCL_CNFG(8,K_CNFG) .EQ. 1) ITST = ITST + 1
                                             IF (ITST .EQ. 7) THEN
                                                IECP = UCL_ECP(K_CNFG)
                                             END IF
!
                                          END IF
                                       END DO
!
                                       IF (IECP .NE. OLD_ECP) THEN
                                          WECPT = IECP
                                          DO XYR = YEAR - UHBSYR , UNYEAR
                                             EMM_CL_ECPt(JGRP,XYR) = WECPT
                                          END DO
!
!                                         If new record is needed and ECP type is changing assign group indexes for new record
!                                         New record is not required if the record start year W_SYR has yet to occur in the forecast
!
                                          IF (W_SYR .LE. YEAR) THEN
                                             IF (WNGRPS(NERC) .GE. WPLT_D_GRP) WRITE(6, * ) ' EPO$RETRO ERROR: TOO MANY PLTGRPS IN NERC:', NERC
                                             WNGRPS(NERC) = WNGRPS(NERC) + 1
                                             IGRP = WNGRPS(NERC)   ! Use New Group For Retros
                                             W_NXT(WREC_NXT) = W_INT(NERC,IGRP)
                                             W_INT(NERC,IGRP) = WREC_NXT
                                             WGRP_NXT = WGRP_NXT + 1
                                             W_GRP = WGRP_NXT
                                             W_GRP2 = WNXT_SGRP(W_GRP) + 1
                                             WNXT_SGRP(W_GRP) = W_GRP2
                                             WTYPE(W_GRP) = IGRP
                                          ELSE
                                             IGRP = WTYPE(W_GRP)
                                          END IF
!
                                          DO IFL = 1 , UIFPLT
                                             IF (IFL .EQ. 1) THEN
                                                WFL(IFL) = IECP
                                                W_FSHR(IFL) = 1.0
                                             ELSE
                                                WFL(IFL) = WFLTP(IEFD,IFL)
                                                W_FSHR(IFL) = WCMFSH(IEFD,IFL)
                                             END IF
                                          END DO
                                       ELSE
!
!                                         If new record is needed but ECP type has not changed add new record to existing group
!                                         New record is not required if the record start year W_SYR has yet to occur in the forecast
!
                                          IF (W_SYR .LE. YEAR) THEN
                                             IGRP = WTYPE(W_GRP)
                                             W_NXT(WREC_NXT) = W_INT(NERC,IGRP)
                                             W_INT(NERC,IGRP) = WREC_NXT
                                          ELSE
                                             IGRP = WTYPE(W_GRP)
                                          END IF
                                       END IF

!                                      RAG moved WSEQEF initialize from here to prevent overwrite of CCS value

                                       IF (W_SYR .LT. YEAR) W_SMO = 1
                                       IF (W_SYR .LE. YEAR) THEN
                                          W_SYR = YEAR
                                          W_RYR = SV_RYR
                                          W_RMO = SV_RMO
                                          WVIN = OVIN
                                          UCL_CGRP(WREC_NXT) = JGRP
										  UCL_CGRP2(W_GRP) = JGRP
                                       END IF
                                       OLD_NOXR = WNOX_R
                                       ICHK = 0
                                       IF (USW_MACT .GT. 0 .AND. CURIYR + UHBSYR + IYR - 1 .GE. UMACT_YR) ICHK = 1
                                       IF (USW_HG .GT. 0 .AND. EMLIM(4,MIN(UNYEAR,CURIYR+IYR-1)) .LT. 100.0) ICHK = 1
                                       IF (ICHK .EQ. 1) WNOX_B4 = WNOX_B4 * SCR_RMV
                                       WNOX_R = NEW_NOXR
                                       W_FOM = W_FOM + FOM
                                       W_VOM = W_VOM + VOM

!                                      RAG put costs on a derated capacity basis, right?

                                       OV_CST = OV_CST * ANNADJ / CPEN
                                       OV_CST_CTS_B4 = OV_CST_CTS_B4 / CPEN
                                       W_FOM = W_FOM / CPEN
                                       W_CAPAD = W_CAPAD / CPEN
                                       W_VOM = W_VOM / CPEN
                                       OHR = WHRATE
                                       IF (S_CNFG_J .NE. CNFG_MAP(1))THEN
                                          I_ROPT = ROPT_MAP(S_CNFG_I)
                                          IF (UCL_ROPT(5,I_ROPT) .GT. 0) THEN        ! ADD CCS
                                             WHRATE = ECL_CCS_H(JGRP)
                                             ULCCS_INV(W_GRP) = CTS_INV_ANNUITY * WC_SUM * 0.001  !nominal annuity * capacity before derate
                                             ULCCS_FOM(W_GRP) = CTS_F * WC_SUM * 0.001   !annual 1987$ based on capacity before derate
                                             ULCCS_VOM(W_GRP) = CTS_V      !VOM per kwh
                                          ELSE
                                             WHRATE = WHRATE * HPEN / UECP_HTRT_ADJ(OLD_ECP)
                                          END IF
                                       END IF

!                                      RAG derated capacities corresponding to capacity retrofitted, right?

                                       WC_SUM = WC_SUM * CPEN
                                       WC_NP = WC_NP * CPEN
                                       WC_WIN = WC_WIN * CPEN

!                                      RAG end of CCS mods for EPO$COAL

                                       CALL STRPLT(NEW_REC)
!
!                                      IF (CPEN .LT. 1.0) &
!                                      WRITE(6,2001) CURIYR+UHBSYR,COL_RET,ECL_RCFG(IYR,JGRP),S_CNFG_J,NERC,OLD_ECP,IECP,IP,WEFDT,JGRP, &
!                                         UCL_CGRP(OLD_REC),OLD_REC,NEW_REC,W_IGRP,W_GRP,IGRP,W_NXT(WREC_NXT),YEAR,WC_SUM,WHRATE,OV_CST+OV_CST_CTS_B4, &
!                                         W_SYR,W_RYR,WPART,WSCBT,W_COMB,W_POST,W_ACI,WNOX_B4,WNOX_R,OLD_NOXR,SCR_RMV,W_FOM,W_VOM,W_CAPAD,oUCL_SC_V,FOM,VOM,&
!                                         OV_CST_CTS_B4, CPEN, HPEN, OHR

!                                      WRITE(6,2001) CURIYR+UHBSYR,COL_RET,ECL_RCFG(IYR,JGRP),S_CNFG_J,NERC,OLD_ECP,IECP,IP,WEFDT,JGRP, &
!                                         UCL_CGRP(OLD_REC),OLD_REC,NEW_REC,W_IGRP,W_GRP,IGRP,W_NXT(WREC_NXT),YEAR,WC_SUM,WHRATE,OV_CST+OV_CST_CTS_B4, &
!                                         W_SYR,W_RYR,WPART,WSCBT,W_COMB,W_POST,W_ACI,WNOX_B4,WNOX_R,OLD_NOXR,SCR_RMV,W_FOM,W_VOM,W_CAPAD,oUCL_SC_V,FOM,VOM,&
!                                         OV_CST_CTS_B4, CPEN, HPEN, OHR

!2001                                  FORMAT(1X,"COAL_OUT",":",I4,":",A8,16(":",I5),3(":",F12.3),2(":",I4),2(":",A1),2(":",I1),":",A1,14(":",F9.4))

!                                      Label_COAL_OUT:CYEAR:COL_RET:ECL_RCFG_YR:S_CNFG_J:NERC:OLD_ECP:IECP:IP:WEFDT:JGRP:UCL_CGRP: &
!                                         OLD_REC:WREC_NXT:W_IGRP:W_GRP:IGRP:W_NXT:YEAR:WC_SUM:WHRATE:OV_CST:W_SYR:W_RYR:WPART:WSCBT: &
!                                         W_COMB:W_POST:W_ACI:WNOX_B4:WNOX_R:OLD_NOXR:SCR_RMV:W_FOM:W_VOM:W_CAPAD:oUCL_SC_V:FOM:VOM: &
!                                         OV_CST_CTS_B4:CPEN:HPEN
!
!                                      Only capture retrofit costs for records which are currently active
!
                                       IF (W_SYR .LE. YEAR) THEN
                                          WPCST = OV_CST + OV_CST_CTS_B4
                                          WEFPT = 8
                                          CALL UEXPBLD(NERC)
                                          RETINV(YEAR-UHBSYR) = RETINV(YEAR-UHBSYR) + (OV_CST + OV_CST_CTS_B4) * WC_SUM
                                          IF ((YEAR - UHBSYR) .LE. UNYEAR) THEN
                                             RET_INV(NERC,YEAR-UHBSYR) = RET_INV(NERC,YEAR-UHBSYR) + (OV_CST + OV_CST_CTS_B4) * WC_SUM * 0.001
                                             RET_INV(MNUMNR,YEAR-UHBSYR) = RET_INV(MNUMNR,YEAR-UHBSYR) + (OV_CST + OV_CST_CTS_B4) * WC_SUM * 0.001
                                          ENDIF
!
!                                         Collect Data for Resource Cost Calculations - Ret_Cst
!
                                          IF ((OV_CST + OV_CST_CTS_B4) .GT. 0.0001) THEN
                                             TXBOOK = 0.0
                                             FNBOOK = 0.0
                                             CAPUTIL = 0.0
                                             CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,IYR,(OV_CST + OV_CST_CTS_B4),UPSCPR, &
                                                   UPCAPD(1,IECP),UPGNPD,RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)
                                                URATIO = TXBOOK / FNBOOK
                                                CAPUNSTL = FNBOOK

!                                               Check Vintage for Retrofit Tax Life

                                                IF (ECL_YR(JGRP) .LT. UPSTXYR)THEN
                                                   STXLF = UPSTXLF(1)
                                                ELSE
                                                   STXLF = UPSTXLF(2)
                                                END IF

                                                CALL EPNBLD(DBLE(RETROR),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)
                            
                 IF (OV_CST_CTS_B4 .GT. 0.00001) THEN ! CCS retrofit check
                     write(18,2001) 'CCATS_RETRO_CL',CURIYR, W_GRP, WC_SUM,ULCCS_INV(W_GRP),ULCCS_FOM(W_GRP),ULCCS_VOM(W_GRP)
                 endif
2001  FORMAT(1x,A15,2I6,4F12.3)
                                                DO XYR = YEAR-UHBSYR , MIN(UNYEAR, YEAR - UHBSYR + UPSELF - 1)
                                                   Ret_Cst(NERC,XYR) = Ret_Cst(NERC,XYR) + CAPUNSTL * CAPUTIL * WC_SUM * 0.001 / UPGNPD(XYR)
                                                   Ret_Cst(MNUMNR,XYR) = Ret_Cst(MNUMNR,XYR) + CAPUNSTL * CAPUTIL * WC_SUM * 0.001 / UPGNPD(XYR)
                                                END DO
                                             END IF
                                          END IF
                                       END IF
                                       OLD_REC = ECL_NREC(OLD_REC)
                                    END DO
                                    IF (ORG .NE. 0) THEN
                                       CALL STRBLD(1,ORG)
                                       CALL STRBOUT(CURIYR,ORG)
                                    END IF
                                 END IF
                              END IF
                           END IF
                        ELSE

!                          Record Coal to Natural Gas Conversion

                           IF (UCL_VIN(IYR) .EQ. RGRP .AND. SV_COL .GT. 0.9 * ECL_CAP(IYR,JGRP)) THEN
                              IF (SV_TOT_CAP(IYR+1) .GT. 0.2 * ECL_CAP(IYR+1,JGRP)) THEN

                                 SV_LEV_CNFG_CLtNG = LEV_CNFG_CLtNG(S_CNFG_I,IYR)
                                 SV_LEV_CNFG_CLtNG_CL = LEV_CNFG_CLtNG_CL(S_CNFG_I,IYR)
                                 IF ((LEV_CNFG_CLtNG(S_CNFG_I,IYR) + LEV_CNFG_CLtNG_CL(S_CNFG_I,IYR)) .GE. SV_COL) THEN
                                     if (LEV_CNFG_CLtNG_CL(S_CNFG_I,IYR) .EQ. 0.0) then 
                                        LEV_CNFG_CLtNG(S_CNFG_I,IYR) = LEV_CNFG_CLtNG(S_CNFG_I,IYR) - SV_COL
                                     else  !added to handle coal-gas cofiring
                                        LEV_CNFG_CLtNG(S_CNFG_I,IYR) = MAX(LEV_CNFG_CLtNG(S_CNFG_I,IYR) - SV_COL*0.4, 0.0)
                                        LEV_CNFG_CLtNG_CL(S_CNFG_I,IYR) =MAX(LEV_CNFG_CLtNG_CL(S_CNFG_I,IYR) - SV_COL*0.6, 0.0)
                                     endif
                                 ELSE
                                    LEV_CNFG_CLtNG(S_CNFG_I,IYR) = 0.0
                                    LEV_CNFG_CLtNG_CL(S_CNFG_I,IYR) = 0.0
                                 END IF

                                 COL_CLtNG = 'N'//COAL//'NG'//UPYRCD(IYR); call makmsk(COL_CLtNG_mask,':N:',COAL,':NG:',UPYRCD(IYR))
                                 IECP = WING
                                 OLD_REC = ECL_FREC(JGRP)
                                 DO WHILE (OLD_REC .GT. 0)

                                    CALL GETPLT(OLD_REC)
                                    NERC = WNOWN
                                    IF (ORG .NE. NERC) THEN
                                       IF (ORG .NE. 0) THEN
                                          CALL STRBLD(1,ORG)
                                          CALL STRBOUT(CURIYR,ORG)
                                       END IF
                                       CALL GETBLD(1,NERC)
                                       CALL GETBOUT(CURIYR,NERC)
                                       ORG = NERC
                                    END IF
                                    IF (W_RYR .GT. YEAR - 1) THEN

!                                      If new record is needed retire unscrubbed unit
!                                      New record is not required if the record start year W_SYR has yet to occur in the forecast

                                       IF (W_SYR .LE. YEAR) THEN
                                          SV_RYR = W_RYR
                                          SV_RMO = W_RMO
                                          W_RYR = YEAR - 1
                                          W_RMO = 12
                                          OVIN = WVIN
                                          WVIN = 8

                                          CALL STRPLT(OLD_REC)

!                                         INCREMENT COUNTER

                                          WREC_NXT = WREC_NXT + 1

!                                         INSURE THAT NUMBER OF BUILDS DOESN'T EXCEED ALLOCATION

                                          IF (WREC_NXT .GT. WPLT_D_REC) WRITE(6, * ) ' EPO$RET ERROR: TOO MANY PLANT RECORDS'
                                          NEW_REC = WREC_NXT
                                       ELSE
                                          NEW_REC = OLD_REC
                                       END IF

!                                      Store Capacity Related Data:

                                       OV_CST = ECL_CL_NG_COST(JGRP) + ECL_CL_NG_TRAN(JGRP)
                                       FOM = W_FOM * UCL_CL_NG_FOM_ADJ
                                       VOM = W_VOM * UCL_CL_NG_VOM_ADJ

                                       ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                                       IF (IYR .LT. UNXPH)THEN 
                                          IF ((CURIYR+IYR-1) .LE. UNYEAR)THEN
                                             ANNADJ = UPANNADJ(IECP,CURIYR+IYR-1)
                                          ELSE
                                             ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + IYR - 1) - UNYEAR)
                                          END IF
                                       ELSE
                                          DO JYR = UNXPH , UNAPH
                                             KYR = JYR - UNXPH + 1
                                             AN1(KYR) = 1.0
                                             IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                                ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                                             ELSE
                                                ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                                             END IF
                                          END DO
                                          ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                                   PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                                       END IF

                                       CPEN = UECP_CPEN_ADJ(IECP)
                                       WSEQEF = 0.0

                                       WEFDT = UICTN  ! pass UICTN instead of UISTG 
                                       IP = WEFDT
                                       IEFD = WEFDT

                                       WHRATE = WHRATE * (1.0 + UCL_CL_NG_HR_PEN)

                                       JECP = WECPT

                                       WECPT = WING

!                                      DO XYR = YEAR - UHBSYR , UNYEAR
!                                         EMM_CL_ECPt(JGRP,XYR) = WECPT
!                                      END DO

!                                      If new record is needed and ECP type is changing assign group indexes for new record
!                                      New record is not required if the record start year W_SYR has yet to occur in the forecast

                                       IF (W_SYR .LE. YEAR) THEN
                                          IF (WNGRPS(NERC) .GE. WPLT_D_GRP) WRITE(6, * ) ' EPO$RETRO ERROR: TOO MANY PLTGRPS IN NERC:', NERC
                                          WNGRPS(NERC) = WNGRPS(NERC) + 1
                                          IGRP = WNGRPS(NERC)   ! Use New Group For Retros
                                          W_NXT(WREC_NXT) = W_INT(NERC,IGRP)
                                          W_INT(NERC,IGRP) = WREC_NXT
                                          WGRP_NXT = WGRP_NXT + 1            !PlantGroup # to be used by EFD
                                          W_GRP = WGRP_NXT
                                          W_GRP2 = WNXT_SGRP(W_GRP) + 1
                                          WNXT_SGRP(W_GRP) = W_GRP2
                                          WTYPE(W_GRP) = IGRP
                                       ELSE
                                          IGRP = WTYPE(W_GRP)
                                       END IF
!
                                       IF (SV_LEV_CNFG_CLtNG_CL .EQ. 0.0) Then
                                           DO IFL = 1 , UIFPLT       
                                                  WFL(IFL) = WFLTP(IEFD,IFL)
                                                  W_FSHR(IFL) = WCMFSH(IEFD,IFL)
                                           END DO
                                       ELSE   !added to handle coal-gas cofiring
                                           WFL(1)  = WFLTP(IEFD,1)
                                           W_FSHR(1) = 1.0 - UEPA_CGSH
                                           WFL(2) = OLD_ECP
                                           W_FSHR(2) = UEPA_CGSH
                                       ENDIF

                                       IF (W_SYR .LT. YEAR) W_SMO = 1
                                       IF (W_SYR .LE. YEAR) THEN
                                          W_SYR = YEAR
                                          W_RYR = SV_RYR
                                          W_RMO = SV_RMO
                                          WVIN = OVIN
                                          UCL_CGRP(WREC_NXT) = JGRP
										  UCL_CGRP2(W_GRP) = JGRP
                                          IF (SV_LEV_CNFG_CLtNG_CL .GT. 0.0 .AND. USW_EPA111 .EQ. 1 .AND. W_RYR .GT. UEPA_CLCFYR) THEN  !if EPA111 in place and using coal, must retire 
                                              W_RYR = UEPA_CLCFYR
                                              W_RMO = 12
                                          ENDIF
                                       END IF
                                       W_FOM = FOM
                                       W_VOM = VOM

                                       OV_CST = OV_CST * ANNADJ

                                       CALL STRPLT(NEW_REC)

                                       WRITE(18,2937) CURIRUN, CURCALYR, JGRP, W_IGRP, W_GRP, W_GRP2, W_SYR, W_RYR, WC_SUM, ECL_CL_NG_COST(JGRP), ECL_CL_NG_TRAN(JGRP),OV_CST
 2937                                  FORMAT(1X," CL_TO_NG_Results",8(":",I5),4(":",F20.6))

!                                      Only capture retrofit costs for records which are currently active

                                       IF (W_SYR .LE. YEAR) THEN
                                          WPCST = OV_CST 
                                          WEFPT = 8
                                          CALL UEXPBLD(NERC)
                                          RETINV(YEAR-UHBSYR) = RETINV(YEAR-UHBSYR) + OV_CST * WC_SUM
                                          IF ((YEAR - UHBSYR) .LE. UNYEAR) THEN
                                             RET_INV(NERC,YEAR-UHBSYR) = RET_INV(NERC,YEAR-UHBSYR) + OV_CST * WC_SUM * 0.001
                                             RET_INV(MNUMNR,YEAR-UHBSYR) = RET_INV(MNUMNR,YEAR-UHBSYR) + OV_CST * WC_SUM * 0.001
                                          ENDIF

!                                         Collect Data for Resource Cost Calculations - Ret_Cst

                                          IF (OV_CST  .GT. 0.0001) THEN
                                             TXBOOK = 0.0
                                             FNBOOK = 0.0
                                             CAPUTIL = 0.0
                                             CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,IYR,OV_CST,UPSCPR, &
                                                UPCAPD(1,IECP),UPGNPD,RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)
                                             URATIO = TXBOOK / FNBOOK
                                             CAPUNSTL = FNBOOK

!                                            Check Vintage for Retrofit Tax Life

                                             IF (ECL_YR(JGRP) .LT. UPSTXYR)THEN
                                                STXLF = UPSTXLF(1)
                                             ELSE
                                                STXLF = UPSTXLF(2)
                                             END IF

                                             CALL EPNBLD(DBLE(RETROR),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)

                                             DO XYR = YEAR-UHBSYR , MIN(UNYEAR, YEAR - UHBSYR + UPSELF - 1)
                                                Ret_Cst(NERC,XYR) = Ret_Cst(NERC,XYR) + CAPUNSTL * CAPUTIL * WC_SUM * 0.001 / UPGNPD(XYR)
                                                Ret_Cst(MNUMNR,XYR) = Ret_Cst(MNUMNR,XYR) + CAPUNSTL * CAPUTIL * WC_SUM * 0.001 / UPGNPD(XYR)
                                             END DO
                                          END IF
                                       END IF
                                    END IF
                                    OLD_REC = ECL_NREC(OLD_REC)
                                 END DO
                                 IF (ORG .NE. 0) THEN
                                    CALL STRBLD(1,ORG)
                                    CALL STRBOUT(CURIYR,ORG)
                                 END IF
                              END IF
                           END IF
                        END IF   !IF (S_CNFG_I .LE. N_CNFG) THEN
                     END IF
                  END DO
               END IF
               JGRP = CLSG_N(JGRP)
            END DO ! JGRP
            IF (ORG .NE. 0) CALL STRBLD(1,ORG)
         END IF ! NERC is greater than zero
      END DO
!
      DO IRG = 1, MNUMNR
         IF ((CURIYR + NOX_LT) .LE. UNYEAR)THEN
            write(18,1668) CURIYR+UHBSYR,NOX_LT,IRG,EMELNOX(IRG,CURIYR+NOX_LT), &
               EMELSCR(IRG,CURIYR+NOX_LT),EMELNCR(IRG,CURIYR+NOX_LT),           &
               EMELCCS(IRG,CURIYR+NOX_LT),EMELFF(IRG,CURIYR+NOX_LT),EMELRET(IRG,CURIYR+NOX_LT),EMELRETP(IRG,CURIYR+NOX_LT)
         END IF
      END DO
 1668 FORMAT(1X,'NOX_SUM:',I6,":",I4,":",I4,7(":",F9.3))
!
!     UPDATE MAXIMUM ALLOWABLE ANNUAL RETROFITS COMPARED TO LAST YEAR
!
      UPSQMAX = MAX(UPSQMAX,T_RETRO * 0.001)
      UPCQMAX = MAX(UPCQMAX,T_RETRO_CCS * 0.001)
      WRITE(18,1213) curiyr+uhbsyr,upsqmax,t_retro
 1213 FORMAT(1X,"T_RETRO2",":",I4,2(":",F15.3))

      IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
         DSIRET = 0.0
      END IF
      IF ((CURIYR + UPSCLT) .LE. MNUMYR)THEN
      DO NERC = 1 , MNUMNR
         IF (NERC .LE. UNRGNS .OR. NERC .EQ. MNUMNR)THEN
            DSIRET(NERC) = DSIRET(NERC) + EMELDSI(NERC,CURIYR + UPSCLT)
         END IF
      END DO
      END IF
      WRITE(13,3456) curiyr+uhbsyr,curiyr+uhbsyr+upsclt,(dsiret(nerc),nerc=1,unrgns),dsiret(mnumnr)
 3456 format(1h ,'!dsiret',i4,i5,23f5.1)
!
      RETURN
      END

!     EPO$NUC For Each NUC Unit Record Retire / Retrofit Decisions

      SUBROUTINE EPO$NUC
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'cdsparms'
      include 'emmparm'
      include 'control'
      include 'elcntl'
      include 'ecpcntl'
      include 'bildin'
      include 'bildout'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'ecp_nuc'
      include 'plntin'
      include 'plntctl'
	  include 'uecpout'
      include 'uefdout'
      include 'emm_aimms'
!
      REAL*8 CAP
      REAL*8 SOLVAL(5),USED,UNUSED,ROWVAL(5),SOLVAL_MIN_SR(5), USED_SMOOTH, UNUSED_SMOOTH
      REAL*8 IUSED(EMM_D_GRP),IUNUSED(EMM_D_GRP)
      REAL*4 MXSHR
      REAL*8 ZECCST,ZECGEN
      REAL*4 ZECMAX,ZECADJ
!
      INTEGER*4 IGRP,IRG,ORG,IYR
      INTEGER*4 IECP
      INTEGER*4 IRET,JYR,T_RYR,IRECL,TRG,JRET,RRET
      INTEGER*4 RFRSTYR,AYR
      CHARACTER*16 ROW,COLUMN,COLUMN_MIN_SR
      CHARACTER*4 NUC
      CHARACTER*2 STATUS,RSTATUS,STATUS_MIN_SR
      CHARACTER*1 GRP_CD(ECP_D_XPH), GRP_CD_SR(ECP_D_XPH)

      ecpsub='EPO$NUC'

!
!     INITIALIZE GRP_CD
!
      GRP_CD(1)  = "A"
      GRP_CD(2)  = "B"
      GRP_CD(3)  = "C"
      GRP_CD(4)  = "D"
      GRP_CD(5)  = "E"
      GRP_CD(6)  = "F"
      GRP_CD(7)  = "G"
      GRP_CD(8)  = "H"
      GRP_CD(9)  = "I"
      GRP_CD(10) = "J"
!
!     INITIALIZE GRP_CD_SR
!
      GRP_CD_SR(1)  = "X"
      GRP_CD_SR(2)  = "Y"
      GRP_CD_SR(3)  = "Z"
      GRP_CD_SR(4)  = "W"
      GRP_CD_SR(5)  = "V"
      GRP_CD_SR(6)  = "U"
      GRP_CD_SR(7)  = "T"
      GRP_CD_SR(8)  = "S"
      GRP_CD_SR(9)  = "R"
      GRP_CD_SR(10) = "Q"
!
      RFRSTYR = UNUC_SYR + 2
      AYR = RFRSTYR - UHBSYR
!
!     Loop over each NUC group
!
      ORG = 0
      IUSED = 0.0
      IUNUSED = 0.0
      DO IGRP = 1 , NUM_NUC
         MXSHR = 0.0
         DO TRG = 1 , UNRGNS
            IF (MXSHR .LT. ENUC_RG(TRG,IGRP)) THEN
               IRG = TRG
               MXSHR = ENUC_RG(TRG,IGRP)
            END IF
         END DO
         IF (MXSHR .GT. 0.0) THEN
            IECP = ENUC_ECP(IGRP)
            IF (ORG .NE. IRG) THEN
               CALL GETBLD(1,IRG)
               ORG = IRG
            END IF
            WRITE(NUC,'(I4.4)') IGRP

            USED = 0.0
            UNUSED = 0.0
!
            DO IYR = 1 , UNXPH
               IF (IYR .GT. 1) THEN
                  ROW = 'NUC'//NUC//UPYRCD(IYR); call makmsk(ROW_mask,':NUC:',NUC,UPYRCD(IYR))
                  CALL CWFSROW(ROW,'ASLUP    ',RSTATUS,ROWVAL,ROW_mask,RRET)
               ELSE
                  ROW = '        ';ROW_mask=' ' 
                  RRET = 0
                  ROWVAL = 0.0
                  RSTATUS = 'NA'
               END IF
               COLUMN = GRP_CD(IYR)//NUC//'NUC'; call makmsk(COLUMN_mask,GRP_CD(IYR),NUC,':NUC:')
               STATUS = 'NA'
               SOLVAL = 0.0
               CALL CWFSCOL(COLUMN,'ACLUD   ',STATUS,SOLVAL,COLUMN_mask,IRET)

               IF ((CURIYR + UHBSYR + UNUC_RLT - 1) .LE. ULMRUN(ENUC_GRP(IGRP)) .AND. IYR .EQ. UNUC_RLT) THEN
                  WRITE(13,2320) CURIYR + UHBSYR, CURIYR + UHBSYR + IYR - 1, COLUMN, IRG, ENUC_IGRP(IGRP), ENUC_GRP(IGRP), &
                                 SOLVAL(1), SOLVAL(4), (SOLVAL(5) * ((1.0 + AVGDCR) ** FLOAT(IYR))) * (SCALPR / UPGNPD(CURIYR + IYR - 1))
 2320             format(1h ,'!nucmrun,cyr,ryr,col,irg,igrp,grp,use,cap,rc',i5,i5,1x,a10,i3,i6,i6,3f10.3)
               END IF

               IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                  COLUMN_MIN_SR = GRP_CD_SR(IYR)//NUC//'NUC'; call makmsk(COLUMN_MIN_SR_mask,GRP_CD_SR(IYR),NUC,':NUC:',':!SR:')
                  STATUS_MIN_SR = 'NA'
                  SOLVAL_MIN_SR = 0.0
                  CALL CWFSCOL(COLUMN_MIN_SR,'ACLUD   ',STATUS_MIN_SR,SOLVAL_MIN_SR,COLUMN_MIN_SR_mask,JRET)
               END IF

               CAP = SOLVAL(4)
               IF (CAP .GT. 0.0) THEN
!                 write(6,3344) curiyr+1989,curiyr+1989+iyr-1,irg,column,cap,solval(1),solval(2),enuc_rval(igrp),enuc_ryrs(igrp),enuc_asyr(igrp),upnasw
!3344 format(1h ,'!nucout',i4,i5,i3,1x,a8,4f10.3,i3,i5,i3)
 
                  WRITE(18,2313) CURIRUN, CURIYR+UHBSYR, IGRP, ENUC_GRP(IGRP), IRG, IYR, ENUC_RG(IRG,IGRP), &
                     RRET, ROW,           RSTATUS,       (ROWVAL(JYR),JYR=1,5), &
                     IRET, COLUMN,        STATUS,        (SOLVAL(JYR),JYR=1,5), &
                     JRET, COLUMN_MIN_SR, STATUS_MIN_SR, (SOLVAL_MIN_SR(JYR),JYR=1,5)
 2313             FORMAT(1X,"NUC_OUT1",6(":",I5),":",F6.3,3(":",I2,":",A16,":",A2,5(":",E24.6)))
!
                  IF (IYR .EQ. UNUC_RLT) THEN
                     USED = SOLVAL(1) + SOLVAL_MIN_SR(1)
                     UNUSED = CAP - USED

					!create smooth variables using average of current and previous cycle values
					IF (USW_NUCRETSM .EQ. 2) THEN ! two cycle smoothing (current and 1 previous)
						USED_SMOOTH = (USED_last(CURIYR,IGRP) + USED)/2
						UNUSED_SMOOTH = (UNUSED_last(CURIYR,IGRP) + UNUSED)/2
					ELSEIF (USW_NUCRETSM .GT. 2) THEN ! threee cycle smoothing (current and 2 previous)
						USED_SMOOTH = (USED_last2(CURIYR,IGRP) + USED_last(CURIYR,IGRP) + USED)/3
						UNUSED_SMOOTH = (UNUSED_last2(CURIYR,IGRP) + UNUSED_last(CURIYR,IGRP) + UNUSED)/3
					END IF

					 ! If no smoothing
					 IF (USW_NUCRETSM .EQ. 0) THEN 
						 IUSED(ENUC_IGRP(IGRP)) = IUSED(ENUC_IGRP(IGRP)) + USED
						 IUNUSED(ENUC_IGRP(IGRP)) = IUNUSED(ENUC_IGRP(IGRP)) + UNUSED
					 ELSE
						! If smoothing, use smooth variables
						 IUSED(ENUC_IGRP(IGRP)) = IUSED(ENUC_IGRP(IGRP)) + USED_SMOOTH
						 IUNUSED(ENUC_IGRP(IGRP)) = IUNUSED(ENUC_IGRP(IGRP)) + UNUSED_SMOOTH
					 END IF
!                 write(6,3341) curiyr+1989,curiyr+1989+iyr-1,irg,column,enuc_igrp(igrp),enuc_grp(igrp),cap,used,iused(enuc_igrp(igrp)),unused,iunused(enuc_igrp(igrp))
!3341 format(1h ,'!nucyr2',i4,i5,i3,1x,a8,i6,i6,8f10.3)
                     T_RYR = IYR+CURIYR+UHBSYR-1
!                    IF (ENUC_CAP(UNXPH,IGRP) .GT. 0.0) THEN
					IF (USW_NUCRETSM .GT. 0) THEN
                        WRITE(18,2314) CURIRUN, CURIYR+UHBSYR, IGRP, ENUC_GRP(IGRP), IRG, IYR, ENUC_RG(IRG,IGRP), IRET, COLUMN, STATUS, SOLVAL(1), JRET, COLUMN_MIN_SR, STATUS_MIN_SR, SOLVAL_MIN_SR(1), &
                           CAP, USED, UNUSED,USED_SMOOTH,UNUSED_SMOOTH, USED_last(CURIYR,IGRP), UNUSED_last(CURIYR,IGRP), USED_last2(CURIYR,IGRP), UNUSED_last2(CURIYR,IGRP), T_RYR, ENUC_RVAL(IGRP), ENUC_RYRS(IGRP), UREV_NYRN, ENUC_ASYR(IGRP)
 2314                   FORMAT(1X,"NUC_OUT2",6(":",I5),":",F6.3,2(":",I2,":",A16,":",A2,":",F15.3),9(":",F15.3),":",I5,":",F15.4,3(":",I5))
!                    END IF
 

					ELSE
					    WRITE(18,2321) CURIRUN, CURIYR+UHBSYR, IGRP, ENUC_GRP(IGRP), IRG, IYR, ENUC_RG(IRG,IGRP), IRET, COLUMN, STATUS, SOLVAL(1), JRET, COLUMN_MIN_SR, STATUS_MIN_SR, SOLVAL_MIN_SR(1), &
                           CAP, USED, UNUSED, T_RYR, ENUC_RVAL(IGRP), ENUC_RYRS(IGRP), UREV_NYRN, ENUC_ASYR(IGRP)
 2321                   FORMAT(1X,"NUC_OUT2",6(":",I5),":",F6.3,2(":",I2,":",A16,":",A2,":",F15.3),3(":",F15.3),":",I5,":",F15.4,3(":",I5))
					END IF

                  END IF
			   ELSE ! IF CAP .EQ. 0, already retired
				  USED = 0.0
				  UNUSED = 0.0
               END IF
			   
			   IF (IYR .EQ. UNUC_RLT ) THEN
						 
					! update current cycle values to previous cycle, previous cycle to 2 cycles ago.
					USED_last2(CURIYR,IGRP) = USED_last(CURIYR,IGRP)
					UNUSED_last2(CURIYR,IGRP) = UNUSED_last(CURIYR,IGRP)
					USED_last(CURIYR,IGRP) = USED
					UNUSED_last(CURIYR,IGRP) = UNUSED
					
					! if unit retired already in a previous cycle, set cap USED to 0, UNUSED to CAP. 
					IF (USED_last(CURIYR,IGRP) + UNUSED_last(CURIYR,IGRP) .LE. 0.0) THEN
						USED_last(CURIYR,IGRP) = 0.0
						UNUSED_last(CURIYR,IGRP) = CAP
					ENDIF
					
					WRITE(18,2323) CURIRUN, CURIYR+UHBSYR, IGRP, ENUC_GRP(IGRP), IRG, IYR, ENUC_RG(IRG,IGRP), IRET, COLUMN, STATUS, SOLVAL(1), JRET, COLUMN_MIN_SR, STATUS_MIN_SR, SOLVAL_MIN_SR(1), &
                           CAP, USED, UNUSED, USED_last(CURIYR,IGRP), UNUSED_last(CURIYR,IGRP), USED_last2(CURIYR,IGRP), UNUSED_last2(CURIYR,IGRP), T_RYR, ENUC_RVAL(IGRP), ENUC_RYRS(IGRP), UREV_NYRN, ENUC_ASYR(IGRP)
2323                   FORMAT(1X,"NUC_OUT3",6(":",I5),":",F6.3,2(":",I2,":",A16,":",A2,":",F15.3),7(":",F15.3),":",I5,":",F15.4,3(":",I5))	
					
			   ENDIF
            END DO
         END IF
      END DO

      DO IGRP = 1 , NUM_NUC
!        if (igrp .eq. 40 .or. igrp .eq. 41)write(6,5454) curiyr+1989,igrp,enuc_igrp(igrp),enuc_grp(igrp),enuc_rval(igrp),enuc_ryrs(igrp),  &
!           iunused(enuc_igrp(igrp)), iused(enuc_igrp(igrp))
!5454 format(1h ,'!nucgrp',i4,i6,i6,i6,f10.3,i3,2f10.3)
         IF (IUNUSED(ENUC_IGRP(IGRP)) .GT. 0.9 * (IUNUSED(ENUC_IGRP(IGRP)) + IUSED(ENUC_IGRP(IGRP))))THEN
!
!           RETIRE IF NO SLR
!
            IF (UPNASW .GT. 0 .AND. (CURIYR + UHBSYR + UNUC_RLT - 1) .EQ. ENUC_ASYR(IGRP))THEN
               IRECL = ENUC_FREC(IGRP)
               DO WHILE (IRECL .GT. 0)
                  CALL GETPLT(IRECL)
                  IF (W_RYR .GT. 9000) THEN

                     W_RYR = WRFURB + UPNAYR
                     W_RMO = W_SMO
                     CALL STRPLT(IRECL)
      write(13,3346) curiyr+1989,unuc_rlt,igrp,w_igrp,w_grp,wc_sum*0.001,  &
                IUNUSED(W_IGRP) , IUSED(W_IGRP) , ENUC_RVAL(IGRP) , ENUC_RYRS(IGRP) , ENUC_ASYR(IGRP) , wrfurb , w_ryr
 3346 format(1h ,'!nucrets',i4,i3,1x,i6,2i6,4f10.3,i3,3i5)
                  END IF
                  IRECL = ENUC_NREC(IRECL)
               END DO
!
!           ECONOMIC RETIREMENTS
!
            ELSE IF (ENUC_RVAL(IGRP) .LT. -0.001 .AND. ENUC_RYRS(IGRP) .GE. UREV_NYRN)THEN
               IRECL = ENUC_FREC(IGRP)
               DO WHILE (IRECL .GT. 0)
                  CALL GETPLT(IRECL)
                  IF (W_RYR .GT. T_RYR-1) THEN
!
!                    IF RETIRES AFTER 30TH YEAR, LET UNIT RUN UNTIL END OF LICENSE (40 YEARS)
!
!                    IF (T_RYR - (W_SYR - 1) .GT. 30) T_RYR = MAX(T_RYR,W_SYR + 40)

                     W_RYR = MIN(W_RYR,T_RYR-1)
                     W_RMO = 12
                     CALL STRPLT(IRECL)
      write(13,3347) curiyr+1989,unuc_rlt,igrp,w_igrp,w_grp,wc_sum*0.001,  &
                IUNUSED(W_IGRP) , IUSED(W_IGRP) , ENUC_RVAL(IGRP) , ENUC_RYRS(IGRP) , ENUC_ASYR(IGRP) , w_syr , w_ryr
 3347 format(1h ,'!nucrete',i4,i3,1x,i6,2i6,4f10.3,i3,3i5)
                  END IF
                  IRECL = ENUC_NREC(IRECL)
               END DO
            END IF
         END IF
      END DO
!
!     GET DUAL FROM ROW FORCING GENERATION DUE TO ZERO-SUBSIDY CREDIT, IF APPROPRIATE
!
      IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
         EPZECGEN = 0.0
         EPZECPRC = 0.0
         EPZECSUB = 0.0
      END IF
      IF ((CURIYR + UNUC_RLT - 1) .LE. MNUMYR)THEN
      DO IRG = 1 , 49
         DO IYR = UNUC_RLT, UNUC_RLT
            IF (NUCGENST(IRG,MNUMNR,IYR) .GT. DBLE(0.0))THEN
               ROW = 'GN'//USTNME(IRG)//'NUC'//UPYRCD(IYR); call makmsk(ROW_mask,':GN:',USTNME(IRG),':NUC:',UPYRCD(IYR))
               CALL CWFSROW(ROW,'ASLUP    ',RSTATUS,ROWVAL,ROW_mask,RRET)
               ZECCST = (ROWVAL(5) * ((1.0 + AVGDCR) ** FLOAT(IYR))) * (1.0 / UPGNPD(CURIYR + IYR - 1)) * -1.0
               ZECADJ = 1.0
               IF (URG_ZECMAX(IRG) .GT. 0.0 .AND. NUCGENST(IRG,MNUMNR,IYR) .GT. 0.0)THEN
                  ZECMAX = NUCGENST(IRG,MNUMNR,IYR) * ZECCST
                  IF (ZECMAX .GT. URG_ZECMAX(IRG))ZECADJ = URG_ZECMAX(IRG) / ZECMAX
               END IF
               DO ORG = 1 , UNRGNS
                  IF (NUCGENST(IRG,ORG,IYR) .GT. DBLE(0.0))THEN
                  ZECGEN = NUCGENST(IRG,ORG,IYR)
                     EPZECGEN(ORG,CURIYR + IYR - 1) = EPZECGEN(ORG,CURIYR + IYR - 1) + ZECGEN
                     EPZECPRC(ORG,CURIYR + IYR - 1) = EPZECPRC(ORG,CURIYR + IYR - 1) + ZECGEN * ZECCST * ZECADJ
                     EPZECSUB(ORG,CURIYR + IYR - 1) = EPZECSUB(ORG,CURIYR + IYR - 1) + ZECGEN * ZECCST * ZECADJ
                     WRITE(13,4000) CURIYR + UHBSYR, CURIYR + UHBSYR + IYR - 1, USTNME(IRG), ORG, &
                                    NUCGENST(IRG,MNUMNR,IYR), ZECGEN, ZECCST * SCALPR, ZECADJ, (ZECGEN * ZECCST * SCALPR),  &
                                    (ZECGEN * ZECCST * ZECADJ * SCALPR)
 4000 format(1h ,'!zecoutst,cyr,ryr,st,rg,genst,genrg,dv,cst,max',i5,i5,1x,a3,i3,9f10.3)
                  END IF
               END DO
            END IF
         END DO
      END DO
         DO ORG = 1 , UNRGNS
            IF (EPZECGEN(ORG,CURIYR + UNUC_RLT - 1) .GT. 0.0)THEN
               EPZECPRC(ORG,CURIYR + UNUC_RLT - 1) = EPZECPRC(ORG,CURIYR + UNUC_RLT - 1) / EPZECGEN(ORG,CURIYR + UNUC_RLT - 1)
               WRITE(13,4100) CURIYR + UHBSYR, CURIYR + UHBSYR + UNUC_RLT - 1, URGNME(ORG)(1:4), ORG, &
                              EPZECGEN(ORG,CURIYR + UNUC_RLT - 1),EPZECPRC(ORG,CURIYR + UNUC_RLT - 1) * SCALPR,EPZECSUB(ORG,CURIYR + UNUC_RLT - 1) * SCALPR
 4100 format(1h ,'!zecoutrg,cyr,ryr,rgnme,rgnum,rggen,rgprc,rgsub',i5,i5,1x,a4,i3,9f10.3)
            END IF
         END DO
      END IF
!
      RETURN
      END
!
!     EPO$FLCRV RETRIEVES INFO ABOUT THE FUEL SUPPLY CURVES
!
      SUBROUTINE EPO$FLCRV
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'uefdout'
      include 'cdsparms'
      include 'uso2grp'
      include 'ecp_nuc'
      include 'emm_aimms'
!
      INTEGER YEAR,YEAR1,FUEL,STP,CRG,IP,FRG,ISP_NG,FPP
      INTEGER*4  IRET               
      REAL*8 LEVEL(5),DUAL_VALUE,PVGNP,ROWVAL(5),WGHT(0:ECP_D_XPH)
      CHARACTER*16 ROW,COLUMN
      CHARACTER*2 STATUS
      CHARACTER*1 C_SP_NG

      COMMON /OGUSE/WHDEX,WOPEX,NGCON,OLCON,NGLEV,OLLEV,XPNGELGR
      REAL*8 WHDEX(ECP_D_FPH)
      REAL*8 WOPEX(ECP_D_FPH)
      REAL*8 NGCON(ECP_D_XPH)
      REAL*8 OLCON(ECP_D_XPH)
      REAL*8 NGLEV(ECP_D_XPH)
      REAL*8 OLLEV(ECP_D_XPH)
      REAL*8 XPNGELGR(NNGEM,MNUMYR,3)      ! EXPECTED E UTIL NG PRICE (87$/MMBTU) FROM NGTDMOUT

      CHARACTER*2 STEP

      ecpsub='EPO$FLCRV'

!
      DO YEAR = 1 , UNXPH
         NGCON(YEAR) = DBLE(0.0)
         OLCON(YEAR) = DBLE(0.0)
         NGLEV(YEAR) = DBLE(0.0)
         OLLEV(YEAR) = DBLE(0.0)
! GAS
         DO STP = 1 , 3 * UPCRVSTP + 1
            IF (STP .LT. 10)THEN
               WRITE (STEP,'("0",I1)') STP
            ELSE
               WRITE (STEP,'(I2)') STP
            END IF
            COLUMN = 'SUNGX'//STEP//UPYRCD(YEAR); call makmsk(COLUMN_mask,':SUNGX:',STEP,UPYRCD(YEAR))
            CALL CWFSCOL(COLUMN,'AC      ',STATUS,LEVEL,COLUMN_mask,IRET)
            IF (LEVEL(1) .GT. DBLE(0.0))THEN
               NGCON(YEAR) = NGCON(YEAR) + LEVEL(1)
               NGLEV(YEAR) = LEVEL(2)
            END IF
         END DO
         ROW = 'FUELNGX'//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELNGX:',UPYRCD(YEAR))
         CALL CWFSROW(ROW,'ASP     ',STATUS,ROWVAL,ROW_mask,IRET)
         WRITE(18,1111) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,NGCON(YEAR),NGLEV(YEAR),ROWVAL(1),ROWVAL(2),ROWVAL(3)
 1111    FORMAT(1X,"FUEL_NG",2(":",I4),5(":",F12.3))

! OIL
         DO STP = 1 , 1
            WRITE (STEP,'("0",I1)') STP
            COLUMN = 'SUOLX'//STEP//UPYRCD(YEAR); call makmsk(COLUMN_mask,':SUOLX:',STEP,UPYRCD(YEAR))
            CALL CWFSCOL(COLUMN,'AC      ',STATUS,LEVEL,COLUMN_mask,IRET)
            IF (LEVEL(1) .GT. DBLE(0.0))THEN
               OLCON(YEAR) = OLCON(YEAR) + LEVEL(1)
               OLLEV(YEAR) = LEVEL(2)
            END IF
         END DO
         ROW = 'FUELOLX'//UPYRCD(YEAR); call makmsk(ROW_mask,':FUELOLX:',UPYRCD(YEAR))
         CALL CWFSROW(ROW,'ASP     ',STATUS,ROWVAL,ROW_mask,IRET)
         WRITE(18,1112) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,OLCON(YEAR),OLLEV(YEAR),ROWVAL(1),ROWVAL(2),ROWVAL(3)
 1112    FORMAT(1X,"FUEL_OL",2(":",I4),5(":",F12.3))
      END DO
!
!     SUM ANNUAL COSTS TO DETERMINE LEVELIZED COSTS
!
      DO YEAR = 1 , UNXPH
         DO YEAR1 = YEAR + 1 , UNXPH
            NGLEV(YEAR) = NGLEV(YEAR) + NGLEV(YEAR1)
            OLLEV(YEAR) = OLLEV(YEAR) + OLLEV(YEAR1)
         END DO
         CALL EP$LGNP(YEAR,UNFPH - YEAR + 1,AVGDCR,PVGNP)
         NGLEV(YEAR) = NGLEV(YEAR) / PVGNP
         OLLEV(YEAR) = OLLEV(YEAR) / PVGNP
      END DO
! FUELS
      DO IP = 1 , ECP_D_DSP
         IF (IP .NE. WICN .AND. IP .NE. WIAN .AND. IP .NE. WISM) THEN
            DO FRG = 1 , UNFRGN
               DO YEAR = 1 , UNXPH
                  IF (UPTTYP(IP) .LE. NW_COAL) THEN
!                     IF (UPPSEF(IP) .GT. 0.0) THEN
                     IF (ECP_SCRUB(IP,CURIYR) .EQ. 1) THEN                  
                        ROW = 'F'//EPFLCD(FRG)//UPLNTCD(IP)//'SXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FRG),UPLNTCD(IP),'S',':XX:',UPYRCD(YEAR)) ! exception: S/U as scrubber set element
                     ELSE
                        ROW = 'F'//EPFLCD(FRG)//UPLNTCD(IP)//'UXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FRG),UPLNTCD(IP),'U',':XX:',UPYRCD(YEAR)) ! exception: S/U as scrubber set element
                     END IF
                     CALL CWFSROW(ROW,'P       ',STATUS,LEVEL,ROW_mask,IRET)
                     IF (IRET .EQ. 0) THEN
                        DUAL_VALUE=LEVEL(1)
                        FLLFLC(IP,FRG,YEAR) = DUAL_VALUE
                     ELSE
                        CALL EP$LGNP(YEAR,UNFPH - YEAR + 1,AVGDCR,PVGNP)
                        FLLFLC(IP,FRG,YEAR) = 9.999 * PVGNP
                     END IF
                  ELSE
                     FLLFLC(IP,FRG,YEAR) = 0.0
                     WGHT(YEAR) = 0.0
                     DO ISP_NG = 1 , EPNMSP
                        WRITE(C_SP_NG,'(I1)') ISP_NG
                        ROW = 'F'//EPFLCD(FRG)//UPLNTCD(IP)//'XX'//C_SP_NG//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(FRG),UPLNTCD(IP),':XX:',C_SP_NG,UPYRCD(YEAR))
                        CALL CWFSROW(ROW,'P       ',STATUS,LEVEL,ROW_mask,IRET)
                        IF (IRET .EQ. 0) THEN
                           DUAL_VALUE=LEVEL(1)
                        ELSE
                           CALL EP$LGNP(YEAR,UNFPH - YEAR + 1,AVGDCR,PVGNP)
                           DUAL_VALUE = 9.999 * PVGNP
                        END IF
                        DO FPP = 1 , ECP_D_FPP
                           FUEL = UPFLTP(IP,FPP)
                           IF (FUEL .GT. 0) THEN
                              COLUMN = 'F'//EPFLCD(FRG)//UPLNTCD(IP)//UPFLCD(FUEL)//C_SP_NG//UPYRCD(YEAR); call makmsk(COLUMN_mask,':F:',EPFLCD(FRG),UPLNTCD(IP),UPFLCD(FUEL),C_SP_NG,UPYRCD(YEAR))
                              CALL CWFSCOL(COLUMN,'AC      ',STATUS,LEVEL,COLUMN_mask,IRET)
                              IF (IRET .EQ. 0) THEN
                                 FLLFLC(IP,FRG,YEAR) = FLLFLC(IP,FRG,YEAR) + DUAL_VALUE * (LEVEL(1) + 0.000001)
                                 WGHT(YEAR) = WGHT(YEAR) + LEVEL(1) + 0.000001
                              END IF
                           END IF
                        END DO
                     END DO
                     IF (WGHT(YEAR) .GT. 0.0) THEN
                        FLLFLC(IP,FRG,YEAR) = FLLFLC(IP,FRG,YEAR) / WGHT(YEAR)
                     ELSE
                        FLLFLC(IP,FRG,YEAR) = 9.999
                     END IF
                  END IF
               END DO

               WGHT(0) = 0.0
               DO YEAR = 1 , UNXPH
                  DO YEAR1 = YEAR + 1 , UNXPH
                     FLLFLC(IP,FRG,YEAR) = FLLFLC(IP,FRG,YEAR) + FLLFLC(IP,FRG,YEAR1)
                  END DO
                  CALL EP$LGNP(YEAR,UNFPH - YEAR + 1,AVGDCR,PVGNP)
                  FLLFLC(IP,FRG,YEAR) = FLLFLC(IP,FRG,YEAR) / PVGNP
                  WGHT(0) = WGHT(0) + WGHT(YEAR)
               END DO

               IF (WGHT(0) .GT. 0.0001) WRITE(18,1114) CURIYR+UHBSYR,FRG,IP,(FLLFLC(IP,FRG,YEAR),YEAR=1,UNXPH),(WGHT(YEAR),YEAR=1,UNXPH)
 1114          FORMAT(1X,"FUEL_COST_BY_ECPt_Level",3(":",I4),10(":",F12.6))

            END DO
         END IF
      END DO
! BIOMASS
      DO FRG = 1 , UNFRGN
         CRG = EPCLMP(FRG)
         DO YEAR = 1 , UNXPH
            ROW = 'F'//EPFLCD(CRG)//UPLNTCD(WIWD)//'XXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(CRG),UPLNTCD(WIWD),':XX:','X',UPYRCD(YEAR)) !exception: mask the last X
            CALL CWFSROW(ROW,'P       ',STATUS,LEVEL,ROW_mask,IRET)
            DUAL_VALUE=LEVEL(1)
            WDLFLC(FRG,YEAR) = DUAL_VALUE
         END DO
         DO YEAR = 1 , UNXPH
            DO YEAR1 = YEAR + 1 , UNXPH
               WDLFLC(FRG,YEAR) = WDLFLC(FRG,YEAR) + WDLFLC(FRG,YEAR1)
            END DO
            CALL EP$LGNP(YEAR,UNFPH - YEAR + 1,AVGDCR,PVGNP)
            WDLFLC(FRG,YEAR) = WDLFLC(FRG,YEAR) / PVGNP
         END DO
!     write (6,8888) curiyr + 1989,crg,wdlflc(frg,3) * scalpr
!8888 format(1h ,'!wdlev',i4,i3,f10.2)
      END DO

! BIOMASS CCS
      DO FRG = 1 , UNFRGN
         CRG = EPCLMP(FRG)
         DO YEAR = 1 , UNXPH
!            ROW = 'F'//EPFLCD(CRG)//UPLNTCD(WIBI)//'XXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',EPFLCD(CRG),UPLNTCD(WIBI),':XX:','X',UPYRCD(YEAR)) !exception: mask the last X
!            CALL CWFSROW(ROW,'P       ',STATUS,LEVEL,ROW_mask,IRET)
!            DUAL_VALUE=LEVEL(1)
!  no separate fuel row for BI - just assign to WD
             BILFLC(FRG,YEAR) = WDLFLC(FRG,YEAR)
         END DO
!     write (6,8888) curiyr + 1989,crg,bilflc(frg,3) * scalpr
!8888 format(1h ,'!bilev',i4,i3,f10.2)
      END DO
      RETURN
      END
!
!     EPO$CF RETRIEVES ACTIVITIES FROM FREE ROWS ACCUMULATING GENERATION
!     CAPACITY FACTORS FROM NEW PLANTS IN ORDER TO DETERMINE CAPACITY FACTORS
!
      SUBROUTINE EPO$CF
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'dispett'
      include 'wrenew'
      include 'cdsparms'
      include 'uso2grp'
      include 'uecpout'
      include 'uefdout'
      include 'ecp_nuc'
      include 'emm_aimms'
!
!      COMMON /VARCOST/ VARCOL,VAROTH,CFCPLT
!      REAL*4 VARCOL(MAXNFR,ECP_D_CAP)
!      REAL*4 VAROTH(MNUMNR,ECP_D_CAP)
!      REAL*4 CFCPLT(MNUMNR,ECP_D_CAP)
!
      REAL*8 LEVEL,TWOVAL(5)
      REAL*4 PLTGEN,PLTCAP,TOTGEN(ECP_D_CAP),TOTCAP3(ECP_D_CAP)
      REAL*4 UNSGEN,UNSCAP,FGDGEN,FGDCAP
      INTEGER NERC,IRET,IP,IECP,YEAR
      CHARACTER*16 ROW, COLUMN
      CHARACTER*2 STATUS

      ecpsub='EPO$CF'

!
!     LOOP OVER NEW PLANT TYPES
!
      CFCPLT = 0.0
      DO NERC = 1 , UNRGNS
         UNSGEN = 0.0
         UNSCAP = 0.0
         FGDGEN = 0.0
         FGDCAP = 0.0
         DO IP = 1 , ECP_D_DSP
            IECP = UCPDSPI(IP)
!           INITIALIZE
            CFCPLT(NERC,IP) = 0.0
!          IF (UPVTYP(IP) .EQ. 1) THEN
!            IF (UPAVLYR(IECP) .LE. (CURIYR + UHBSYR + UPPLYR(IECP)))THEN
!              YEAR = UPPLYR(IECP) + 1
               YEAR = UNXPH
               IF (NERC .EQ. 1)THEN
                  TOTGEN(IP) = 0.0
                  TOTCAP3(IP) = 0.0
               END IF
!
!     GET GENERATION BY REGION, PLANT TYPE, AND YEAR
!
               ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'GEN'// UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':GEN:', UPYRCD(YEAR))
               COLUMN = 'H'//UPRGCD(NERC)//UPLNTCD(IECP)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':H:',UPRGCD(NERC),UPLNTCD(IECP),':GEN:',UPYRCD(YEAR))
               CALL CWFSCOL(COLUMN,'A       ',STATUS,TWOVAL,COLUMN_mask,IRET)
               LEVEL = TWOVAL(1) + ST_RPS_EX_GEN(NERC,IECP,CURIYR+1) + ST_RPS_NW_GEN(NERC,IECP,CURIYR+1) + ST_RPS_XP_GEN(NERC,IECP,CURIYR+1)
               PLTGEN = LEVEL
               TOTGEN(IP) = TOTGEN(IP) + LEVEL
               IF (IP .LE. WIIS)THEN
!                 IF (UPPSEF(IP) .LE. 0.0)THEN
                  IF (ECP_SCRUB(IP,CURIYR) .GT. 1)THEN
                     UNSGEN = UNSGEN + LEVEL
                  ELSE
                     FGDGEN = FGDGEN + LEVEL
                  END IF
               END IF
!
!     GET CAPACITY BY REGION, PLANT TYPE, AND YEAR
!
               ROW = 'F'//UPRGCD(NERC)//UPLNTCD(IECP)//'CAP'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(NERC),UPLNTCD(IECP),':CAP:',UPYRCD(YEAR))
               CALL CWFSROW(ROW,'A       ',STATUS,TWOVAL,ROW_mask,IRET)
               LEVEL=TWOVAL(1)
               PLTCAP = LEVEL
               TOTCAP3(IP) = TOTCAP3(IP) + LEVEL
               IF (IP .LE. WIIS)THEN
!                 IF (UPPSEF(IP) .LE. 0.0)THEN
                  IF (ECP_SCRUB(IP,CURIYR) .GT. 1)THEN
                     UNSCAP = UNSCAP + LEVEL
                  ELSE
                     FGDCAP = FGDCAP + LEVEL
                  END IF
               END IF
!              COMPUTE CAPACITY FACTOR
               IF (PLTCAP .GT. 0.0)THEN
                  CFCPLT(NERC,IP) = PLTGEN / (PLTCAP * 8.760)
!     write(6,1110) curiyr+1989,ip,uplntcd(ip),nerc,pltgen,pltcap,cfcplt(nerc,ip)
!1110 format(1h ,'!cfcplt0',i4,i3,a3,i3,3f10.3)
!                 CFCPLT(NERC,IP) = MIN(CFCPLT(NERC,IP),UPMCF(IP))
               END IF
!     if (upvtyp(ip) .gt. 0)  &
!     write(6,1111) curiyr+1989,ip,uplntcd(ip),nerc,pltgen,pltcap,cfcplt(nerc,ip)
!1111 format(1h ,'!cfcplte',i4,i3,a3,i3,3f10.3)
!     write(6,1111) curiyr+1989,ip,uplntcd(ip),mnumnr,totgen,totcap3,cfcplt(mnumnr,ip)
!            END IF
!          END IF
         END DO
         DO IP = 1 , ECP_D_DSP
            IECP = UCPDSPI(IP)
!           IF NO CAPACITY FACTOR, USE AVG UNSCRUBBED/SCRUBBED CFC FOR COAL, MAX CFC FOR OTHERS
!     if (ip .lt. wipc)write(6,2222) curiyr+1989,nerc,ip,uplntcd(ip),nerc,cfcplt(nerc,ip),  &
!                   unsgen,unscap,unsgen/(unscap*8.760),  &
!                   fgdgen,fgdcap,fgdgen/(fgdcap*8.760)
!2222 format(1h ,'!cfcpltp',i4,i3,i3,1x,a2,3f10.3)
            IF (CFCPLT(NERC,IP) .LE. 0.0)THEN
               IF (IP .LE. WIIS)THEN
!                 IF (UPPSEF(IP) .LE. 0.0)THEN
                  IF (ECP_SCRUB(IP,CURIYR) .GT. 1)THEN
                     IF (UNSCAP .GT. 0.0)THEN
                        CFCPLT(NERC,IP) = UNSGEN / (UNSCAP * 8.760)
!                       CFCPLT(NERC,IP) = MIN(CFCPLT(NERC,IP),UPMCF(IP))
                     END IF
                  ELSE
                     IF (FGDCAP .GT. 0.0)THEN
                        CFCPLT(NERC,IP) = FGDGEN / (FGDCAP * 8.760)
!                       CFCPLT(NERC,IP) = MIN(CFCPLT(NERC,IP),UPMCF(IP))
                     END IF
                  END IF
!              ELSE
!                 CFCPLT(NERC,IP) = UPMCF(IP)
               END IF
            END IF
!     write(6,1111) curiyr+1989,nerc,ip,uplntcd(ip),cfcplt(nerc,ip)
!1111 format(1h ,'!cfcplte',i4,i3,i3,1x,a2,3f10.3)
!           NATIONAL-LEVEL CAPACITY FACTORS
            IF (NERC .EQ. UNRGNS)THEN
               IF (TOTCAP3(IP) .GT. 0.0)THEN
                  CFCPLT(MNUMNR,IP) = TOTGEN(IP) / (TOTCAP3(IP) * 8.760)
               END IF
!     write(6,1111) curiyr+1989,mnumnr,ip,uplntcd(ip),cfcplt(mnumnr,ip)
            END IF
         END DO
      END DO
!
!     USE MAXIMUM CAPACITY FACTOR FOR BIOMASS
!
      DO NERC = 1 , MNUMNR
         CFCPLT(NERC,WIWD) = UPMCF(WIWD)
         CFCPLT(NERC,WIBI) = UPMCF(WIBI)
      END DO
!
      RETURN
      END
!
!     EPO$GENFL STORES THE REGIONAL GENERATION BY FUEL
!
      SUBROUTINE EPO$GENFL
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'uecpout'
      include 'uefdout'
      
      COMMON/RPS_DSP_GEN/ECP_GEN_DSP
      REAL*8 ECP_GEN_DSP(ECP_D_DSP,MNUMNR,MNUMYR+ECP_D_XPH)
!
      REAL*4 COFGEN(MNUMNR),COFGEN_2(MNUMNR),PSFAC
      REAL*8 CVALUE(5)
      INTEGER*4 PLANT,IECP,ICAP,YEAR,REG,ITYP
      INTEGER*4  IRET               
      REAL*4 UGENCLNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENNGNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENOLNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENCFNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENURNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENWDNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENGTNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENMSNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENHYNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENPSNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENWNNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENSONR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENWFNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENPVNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENDGNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENTLNR(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENCLNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENNGNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENOLNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENCFNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENURNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENWDNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENGTNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENMSNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENHYNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENPSNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENWNNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENSONR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENWFNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENPVNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENDGNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      REAL*4 UGENTLNR_2(MNUMNR,MNUMYR+ECP_D_XPH)
      
      CHARACTER*2 PLNT_CD,STATUS
      CHARACTER*16 ROW, COLUMN

      ecpsub='EPO$GENFL'

!     INITIALIZE
!
      DO REG = 1 , MNUMNR
        UGENCLNR(REG,CURIYR) = 0.0
        UGENNGNR(REG,CURIYR) = 0.0
        UGENOLNR(REG,CURIYR) = 0.0
        UGENCFNR(REG,CURIYR) = 0.0
        UGENURNR(REG,CURIYR) = 0.0
        UGENWDNR(REG,CURIYR) = 0.0
        UGENGTNR(REG,CURIYR) = 0.0
        UGENMSNR(REG,CURIYR) = 0.0
        UGENHYNR(REG,CURIYR) = 0.0
        UGENPSNR(REG,CURIYR) = 0.0
        UGENWNNR(REG,CURIYR) = 0.0
        UGENWFNR(REG,CURIYR) = 0.0
        UGENSONR(REG,CURIYR) = 0.0
        UGENPVNR(REG,CURIYR) = 0.0
        UGENDGNR(REG,CURIYR) = 0.0
        UGENTLNR(REG,CURIYR) = 0.0
        UGENCLNR_2(REG,CURIYR) = 0.0
        UGENNGNR_2(REG,CURIYR) = 0.0
        UGENOLNR_2(REG,CURIYR) = 0.0
        UGENCFNR_2(REG,CURIYR) = 0.0
        UGENURNR_2(REG,CURIYR) = 0.0
        UGENWDNR_2(REG,CURIYR) = 0.0
        UGENGTNR_2(REG,CURIYR) = 0.0
        UGENMSNR_2(REG,CURIYR) = 0.0
        UGENHYNR_2(REG,CURIYR) = 0.0
        UGENPSNR_2(REG,CURIYR) = 0.0
        UGENWNNR_2(REG,CURIYR) = 0.0
        UGENWFNR_2(REG,CURIYR) = 0.0
        UGENSONR_2(REG,CURIYR) = 0.0
        UGENPVNR_2(REG,CURIYR) = 0.0
        UGENDGNR_2(REG,CURIYR) = 0.0
        UGENTLNR_2(REG,CURIYR) = 0.0

      END DO
        PSFAC = 1.36

      YEAR = 2
      DO REG = 1 , MNUMNR

         DO ICAP = 1 , ECP_D_DSP
            ECP_GEN_DSP(ICAP,REG,CURIYR+1) = 0.0
         END DO

         DO ICAP = 1 , ECP_D_DSP
            ITYP = UPTTYP(ICAP)

            ROW = 'F'//UPRGCD(REG)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(REG),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR));
            COLUMN = 'H'//UPRGCD(REG)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':H:',UPRGCD(REG),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
            CALL CWFSCOL(COLUMN,'A       ',STATUS,CVALUE,COLUMN_mask,IRET)

            IF (IRET .EQ. 0)THEN
               IF (CVALUE(1) .GT. 0.0) THEN
                  ECP_GEN_DSP(ITYP,REG,CURIYR+1) = ECP_GEN_DSP(ITYP,REG,CURIYR+1) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1) 

!                 IF (UPRNWBND(CURIYR+1) .GT. 0.0 .AND. UPRNWSHR(ICAP) .GT. 0.0) &
!                    WRITE(6,5559) CURIRUN, CURIYR+1990, REG, ITYP, ICAP, ROW, CVALUE(1), ECP_GEN_DSP(ITYP,REG,CURIYR+1)
!5559             FORMAT(1X,"GET_ECP_RPS_GEN",5(":",I4),":",A16,":",2F15.3)

               END IF
            END IF
         END DO
      END DO

!
      DO PLANT = 1 , ECP_D_CAP
         IF (UCPDSPIS(PLANT) .GT. 0) THEN                ! DISPATCHABLE
            IECP = UCPDSPIS(PLANT)
            ICAP = UCPDSPI(IECP)
            PLNT_CD = UPLNTCD(UCPDSPI(IECP))
         ELSE IF (UCPINTIS(PLANT) .GT. 0) THEN           ! INTERMITTENT
            IECP = UCPINTIS(PLANT)
            ICAP = UCPINTI(IECP)
            PLNT_CD = UPLNTCD(UCPINTI(IECP))
         ELSE IF (UCPSTOIS(PLANT) .GT. 0) THEN           ! STORAGE
            IECP = UCPSTOIS(PLANT)
            ICAP = UCPSTOI(IECP)
            PLNT_CD = UPLNTCD(UCPSTOI(IECP))
         ELSE IF (UCPRNWIS(PLANT) .GT. 0) THEN           ! RENEWABLE
            IECP = UCPRNWIS(PLANT)
            ICAP = UCPRNWI(IECP)
            PLNT_CD = UPLNTCD(UCPRNWI(IECP))
         ELSE IF (UCPDGNIS(PLANT) .GT. 0) THEN           ! DISTRIBUTED
            IECP = UCPDGNIS(PLANT)
            ICAP = UCPDGNI(IECP)
            PLNT_CD = UPLNTCD(UCPDGNI(IECP))
         END IF
         DO YEAR = 1 , 2

!           COAL

            IF (PLANT .LE. WIIS)THEN
               COFGEN = 0.0
               COFGEN_2 = 0.0

!              GET COFIRING (BY COAL REGION)

               DO REG = 1 , UNRGNS
                  ROW = 'F'//UPRGCD(REG)//UPLNTCD(ICAP)//'GWD'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(REG),UPLNTCD(ICAP),':GWD:',UPYRCD(YEAR))
                  CALL CWFSROW(ROW,'A       ',STATUS,CVALUE,ROW_mask,IRET)
                  IF (IRET .EQ. 0)THEN
                     IF (YEAR .EQ. 1) THEN
                      IF (CVALUE(1) .GT. 0.0)THEN
                         COFGEN(REG) = COFGEN(REG) + CVALUE(1)
                         UGENCFNR(REG,CURIYR) = UGENCFNR(REG,CURIYR) + CVALUE(1)
                      END IF
                     ELSE
                      IF (CVALUE(1) .GT. 0.0)THEN
                         COFGEN_2(REG) = COFGEN_2(REG) + CVALUE(1)
                         UGENCFNR_2(REG,CURIYR) = UGENCFNR_2(REG,CURIYR) + CVALUE(1)
                      END IF                       
                     END IF 
                  END IF
                  ROW = 'F'//UPRGCD(REG)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(REG),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
                  COLUMN = 'H'//UPRGCD(REG)//UPLNTCD(IECP)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':H:',UPRGCD(REG),UPLNTCD(IECP),':GEN:',UPYRCD(YEAR))
                  CALL CWFSCOL(COLUMN,'A       ',STATUS,CVALUE,COLUMN_mask,IRET)
                  IF (IRET .EQ. 0)THEN
                     IF (YEAR .EQ. 1) THEN
                        IF (CVALUE(1) .GT. 0.0) &
                           UGENCLNR(REG,CURIYR) = UGENCLNR(REG,CURIYR) + (CVALUE(1) - COFGEN(REG))
                     ELSE
                        IF (CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1) .GT. 0.0) &
                           UGENCLNR_2(REG,CURIYR) = UGENCLNR_2(REG,CURIYR) + (CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1) - COFGEN_2(REG))
                     END IF
                  END IF
               END DO

!           GAS/OIL

            ELSEIF (PLANT .LE. WIFC)THEN
               DO REG = 1 , UNRGNS
                  ROW = 'F'//UPRGCD(REG)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(REG),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
                  COLUMN = 'H'//UPRGCD(REG)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':H:',UPRGCD(REG),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
                  CALL CWFSCOL(COLUMN,'A       ',STATUS,CVALUE,COLUMN_mask,IRET)
                  IF (IRET .EQ. 0)THEN
                     IF (YEAR .EQ. 1) THEN
                        IF (CVALUE(1) .GT. 0.0) &
                          UGENNGNR(REG,CURIYR) = UGENNGNR(REG,CURIYR) + CVALUE(1) 
                     ELSE
                        IF (CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1) .GT. 0.0) &
                          UGENNGNR_2(REG,CURIYR) = UGENNGNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                     END IF
                  END IF

!                 ROW = 'F'//UPRGCD(REG)//UPLNTCD(ICAP)//'GOL'//UPYRCD(YEAR)
!                  IRET = WFSROW(ROW,'A       ',STATUS,CVALUE)
!                  IF (IRET .EQ. 0)THEN
!                     IF (CVALUE(1) .GT. 0.0)UGENOLNR(REG,CURIYR) = UGENOLNR(REG,CURIYR) + CVALUE(1)
!                  END IF

                END DO

!            NUCLEAR/RENEWABLES

             ELSEIF (PLANT .LE. WIIN)THEN
                DO REG = 1 , UNRGNS
                   ROW = 'F'//UPRGCD(REG)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(REG),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
                   COLUMN = 'H'//UPRGCD(REG)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':H:',UPRGCD(REG),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
                   CALL CWFSCOL(COLUMN,'A       ',STATUS,CVALUE,COLUMN_mask,IRET)
                   IF (IRET .EQ. 0)THEN
                      IF (YEAR .EQ. 1) THEN
                         IF (CVALUE(1) .GT. 0.0) THEN
                            IF (PLANT .EQ. WICN .OR. PLANT .EQ. WIAN .OR. PLANT .EQ. WISM)THEN

!                              write(6,1234) curiyr+1989,reg,cvalue(1)
!1234                          format(1h ,'!gnur',i4,i3,f10.3)

                               UGENURNR(REG,CURIYR) = UGENURNR(REG,CURIYR) + CVALUE(1) 
                            ELSEIF (PLANT .EQ. WIWD .OR. PLANT .EQ. WIBI)THEN
                               UGENWDNR(REG,CURIYR) = UGENWDNR(REG,CURIYR) + CVALUE(1) 
                            ELSEIF (PLANT .EQ. WIGT)THEN
                               UGENGTNR(REG,CURIYR) = UGENGTNR(REG,CURIYR) + CVALUE(1) 
                            ELSEIF (PLANT .EQ. WIMS)THEN
                               UGENMSNR(REG,CURIYR) = UGENMSNR(REG,CURIYR) + CVALUE(1) 

                            ELSEIF (PLANT .EQ. WIHY)THEN

!                              write(6,2345) curiyr+1989,reg,cvalue(1)
!2345                          format(1h ,'!gnhy',i4,i3,f10.3)
 
                               UGENHYNR(REG,CURIYR) = UGENHYNR(REG,CURIYR) + CVALUE(1) 
                            ELSEIF (PLANT .EQ. WIPS)THEN
                               UGENPSNR(REG,CURIYR) = UGENPSNR(REG,CURIYR) + (CVALUE(1) * (1.0 - PSFAC))
                            ELSEIF (PLANT .EQ. WIWN)THEN
                               UGENWNNR(REG,CURIYR) = UGENWNNR(REG,CURIYR) + CVALUE(1) 
                            ELSEIF (PLANT .EQ. WIWF)THEN
                               UGENWFNR(REG,CURIYR) = UGENWFNR(REG,CURIYR) + CVALUE(1) 
                            ELSEIF (PLANT .EQ. WISO)THEN
                               UGENSONR(REG,CURIYR) = UGENSONR(REG,CURIYR) + CVALUE(1) 
                            ELSEIF (PLANT .EQ. WIPV .OR. PLANT .EQ. WIPT)THEN
                               UGENPVNR(REG,CURIYR) = UGENPVNR(REG,CURIYR) + CVALUE(1) 
                            END IF
                         END IF
                      ELSE
                         IF (CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1) .GT. 0.0) THEN
                            IF (PLANT .EQ. WICN .OR. PLANT .EQ. WIAN .OR. PLANT .EQ. WISM)THEN

!                              write(6,1234) curiyr+1989,reg,cvalue(1)

                               UGENURNR_2(REG,CURIYR) = UGENURNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                            ELSEIF (PLANT .EQ. WIWD .OR. PLANT .EQ. WIBI)THEN
                               UGENWDNR_2(REG,CURIYR) = UGENWDNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                            ELSEIF (PLANT .EQ. WIGT)THEN
                               UGENGTNR_2(REG,CURIYR) = UGENGTNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                            ELSEIF (PLANT .EQ. WIMS)THEN
                               UGENMSNR_2(REG,CURIYR) = UGENMSNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)

                            ELSEIF (PLANT .EQ. WIHY)THEN

!                              write(6,2345) curiyr+1989,reg,cvalue(1)
 
                               UGENHYNR_2(REG,CURIYR) = UGENHYNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                            ELSEIF (PLANT .EQ. WIPS)THEN
                               UGENPSNR_2(REG,CURIYR) = UGENPSNR_2(REG,CURIYR) + (CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)) * (1.0 - PSFAC)
                            ELSEIF (PLANT .EQ. WIWN)THEN
                               UGENWNNR_2(REG,CURIYR) = UGENWNNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                            ELSEIF (PLANT .EQ. WIWF)THEN
                               UGENWFNR_2(REG,CURIYR) = UGENWFNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                            ELSEIF (PLANT .EQ. WISO)THEN
                               UGENSONR_2(REG,CURIYR) = UGENSONR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                            ELSEIF (PLANT .EQ. WIPV .OR. PLANT .EQ. WIPT)THEN
                               UGENPVNR_2(REG,CURIYR) = UGENPVNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                            END IF
                         END IF
                      END IF
                   END IF
                END DO
!
!            DISTRIBUTED
!
             ELSE
                DO REG = 1 , UNRGNS
                   ROW = 'F'//UPRGCD(REG)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(REG),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
                   COLUMN = 'H'//UPRGCD(REG)//UPLNTCD(ICAP)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':H:',UPRGCD(REG),UPLNTCD(ICAP),':GEN:',UPYRCD(YEAR))
                   CALL CWFSCOL(COLUMN,'A       ',STATUS,CVALUE,COLUMN_mask,IRET)
                   IF (IRET .EQ. 0) THEN
                      IF (YEAR .EQ. 1) THEN
                         IF (CVALUE(1) .GT. 0.0) &
                            UGENDGNR(REG,CURIYR) = UGENDGNR(REG,CURIYR) + CVALUE(1) 
                      ELSE
                         IF (CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1) .GT. 0.0) &
                            UGENDGNR_2(REG,CURIYR) = UGENDGNR_2(REG,CURIYR) + CVALUE(1) + ST_RPS_EX_GEN(REG,ICAP,CURIYR+1) + ST_RPS_NW_GEN(REG,ICAP,CURIYR+1) + ST_RPS_XP_GEN(REG,ICAP,CURIYR+1)
                     END IF
                  END IF
               END DO
            END IF
         END DO                                           !YEAR
      END DO                                              !PLANT
!
!     TOTALS
!
      DO REG = 1 , UNRGNS
        UGENTLNR(REG,CURIYR) = UGENTLNR(REG,CURIYR) +  &
                               UGENCLNR(REG,CURIYR) +  &
                               UGENNGNR(REG,CURIYR) +  &
                               UGENOLNR(REG,CURIYR) +  &
                               UGENCFNR(REG,CURIYR) +  &
                               UGENURNR(REG,CURIYR) +  &
                               UGENWDNR(REG,CURIYR) +  &
                               UGENGTNR(REG,CURIYR) +  &
                               UGENMSNR(REG,CURIYR) +  &
                               UGENHYNR(REG,CURIYR) +  &
                               UGENPSNR(REG,CURIYR) +  &
                               UGENWNNR(REG,CURIYR) +  &
                               UGENWFNR(REG,CURIYR) +  &
                               UGENSONR(REG,CURIYR) +  &
                               UGENPVNR(REG,CURIYR) +  &
                               UGENDGNR(REG,CURIYR)
        UGENTLNR_2(REG,CURIYR) = UGENTLNR_2(REG,CURIYR) +  &
                               UGENCLNR_2(REG,CURIYR) +  &
                               UGENNGNR_2(REG,CURIYR) +  &
                               UGENOLNR_2(REG,CURIYR) +  &
                               UGENCFNR_2(REG,CURIYR) +  &
                               UGENURNR_2(REG,CURIYR) +  &
                               UGENWDNR_2(REG,CURIYR) +  &
                               UGENGTNR_2(REG,CURIYR) +  &
                               UGENMSNR_2(REG,CURIYR) +  &
                               UGENHYNR_2(REG,CURIYR) +  &
                               UGENPSNR_2(REG,CURIYR) +  &
                               UGENWNNR_2(REG,CURIYR) +  &
                               UGENWFNR_2(REG,CURIYR) +  &
                               UGENSONR_2(REG,CURIYR) +  &
                               UGENPVNR_2(REG,CURIYR) +  &
                               UGENDGNR_2(REG,CURIYR)

        !
        UGENCLNR(MNUMNR,CURIYR) = UGENCLNR(MNUMNR,CURIYR) + UGENCLNR(REG,CURIYR)
        UGENNGNR(MNUMNR,CURIYR) = UGENNGNR(MNUMNR,CURIYR) + UGENNGNR(REG,CURIYR)
        UGENOLNR(MNUMNR,CURIYR) = UGENOLNR(MNUMNR,CURIYR) + UGENOLNR(REG,CURIYR)
        UGENCFNR(MNUMNR,CURIYR) = UGENCFNR(MNUMNR,CURIYR) + UGENCFNR(REG,CURIYR)
        UGENURNR(MNUMNR,CURIYR) = UGENURNR(MNUMNR,CURIYR) + UGENURNR(REG,CURIYR)
        UGENWDNR(MNUMNR,CURIYR) = UGENWDNR(MNUMNR,CURIYR) + UGENWDNR(REG,CURIYR)
        UGENGTNR(MNUMNR,CURIYR) = UGENGTNR(MNUMNR,CURIYR) + UGENGTNR(REG,CURIYR)
        UGENMSNR(MNUMNR,CURIYR) = UGENMSNR(MNUMNR,CURIYR) + UGENMSNR(REG,CURIYR)
        UGENHYNR(MNUMNR,CURIYR) = UGENHYNR(MNUMNR,CURIYR) + UGENHYNR(REG,CURIYR)
        UGENPSNR(MNUMNR,CURIYR) = UGENPSNR(MNUMNR,CURIYR) + UGENPSNR(REG,CURIYR)
        UGENWNNR(MNUMNR,CURIYR) = UGENWNNR(MNUMNR,CURIYR) + UGENWNNR(REG,CURIYR)
        UGENWFNR(MNUMNR,CURIYR) = UGENWFNR(MNUMNR,CURIYR) + UGENWFNR(REG,CURIYR)
        UGENSONR(MNUMNR,CURIYR) = UGENSONR(MNUMNR,CURIYR) + UGENSONR(REG,CURIYR)
        UGENPVNR(MNUMNR,CURIYR) = UGENPVNR(MNUMNR,CURIYR) + UGENPVNR(REG,CURIYR)
        UGENDGNR(MNUMNR,CURIYR) = UGENDGNR(MNUMNR,CURIYR) + UGENDGNR(REG,CURIYR)
        UGENTLNR(MNUMNR,CURIYR) = UGENTLNR(MNUMNR,CURIYR) + UGENTLNR(REG,CURIYR)
        UGENCLNR_2(MNUMNR,CURIYR) = UGENCLNR_2(MNUMNR,CURIYR) + UGENCLNR_2(REG,CURIYR)
        UGENNGNR_2(MNUMNR,CURIYR) = UGENNGNR_2(MNUMNR,CURIYR) + UGENNGNR_2(REG,CURIYR)
        UGENOLNR_2(MNUMNR,CURIYR) = UGENOLNR_2(MNUMNR,CURIYR) + UGENOLNR_2(REG,CURIYR)
        UGENCFNR_2(MNUMNR,CURIYR) = UGENCFNR_2(MNUMNR,CURIYR) + UGENCFNR_2(REG,CURIYR)
        UGENURNR_2(MNUMNR,CURIYR) = UGENURNR_2(MNUMNR,CURIYR) + UGENURNR_2(REG,CURIYR)
        UGENWDNR_2(MNUMNR,CURIYR) = UGENWDNR_2(MNUMNR,CURIYR) + UGENWDNR_2(REG,CURIYR)
        UGENGTNR_2(MNUMNR,CURIYR) = UGENGTNR_2(MNUMNR,CURIYR) + UGENGTNR_2(REG,CURIYR)
        UGENMSNR_2(MNUMNR,CURIYR) = UGENMSNR_2(MNUMNR,CURIYR) + UGENMSNR_2(REG,CURIYR)
        UGENHYNR_2(MNUMNR,CURIYR) = UGENHYNR_2(MNUMNR,CURIYR) + UGENHYNR_2(REG,CURIYR)
        UGENPSNR_2(MNUMNR,CURIYR) = UGENPSNR_2(MNUMNR,CURIYR) + UGENPSNR_2(REG,CURIYR)
        UGENWNNR_2(MNUMNR,CURIYR) = UGENWNNR_2(MNUMNR,CURIYR) + UGENWNNR_2(REG,CURIYR)
        UGENWFNR_2(MNUMNR,CURIYR) = UGENWFNR_2(MNUMNR,CURIYR) + UGENWFNR_2(REG,CURIYR)
        UGENSONR_2(MNUMNR,CURIYR) = UGENSONR_2(MNUMNR,CURIYR) + UGENSONR_2(REG,CURIYR)
        UGENPVNR_2(MNUMNR,CURIYR) = UGENPVNR_2(MNUMNR,CURIYR) + UGENPVNR_2(REG,CURIYR)
        UGENDGNR_2(MNUMNR,CURIYR) = UGENDGNR_2(MNUMNR,CURIYR) + UGENDGNR_2(REG,CURIYR)
        UGENTLNR_2(MNUMNR,CURIYR) = UGENTLNR_2(MNUMNR,CURIYR) + UGENTLNR_2(REG,CURIYR)
      END DO
      IF (CURIYR .EQ. LASTYR)THEN
       DO REG = 1 , MNUMNR
         WRITE(13,2000) REG
 2000    FORMAT(1h ,'!GN',I2,5x,'SUMMARY OF ECP GENERATION BY REGION, FUEL, AND YEAR (BKWH)')
         WRITE(13,2100) REG
 2100    FORMAT(1h ,'!GN',I2,'   YR',  &
                           '     CL',  &
                           '     OG',  &
!                          '     NG',  &
                           '     UR',  &
                           '     HY',  &
                           '     PS',  &
                           '     GT',  &
                           '     MS',  &
                           '     WD',  &
                           '     CF',  &
                           '     SO',  &
                           '     PV',  &
                           '     WN',  &
                           '     WF',  &
                           '     DG',  &
                           '     TL')
          IF (REG .LE. UNRGNS .OR. REG .EQ. MNUMNR)THEN
             DO YEAR = UPSTYR - UHBSYR, UNYEAR
                WRITE(13,2200) REG,YEAR+1989,  &
                       UGENCLNR(REG,YEAR),  &
                       UGENOLNR(REG,YEAR) + &
                       UGENNGNR(REG,YEAR),  &
                       UGENURNR(REG,YEAR),  &
                       UGENHYNR(REG,YEAR),  &
                       UGENPSNR(REG,YEAR),  &
                       UGENGTNR(REG,YEAR),  &
                       UGENMSNR(REG,YEAR),  & 
                       UGENWDNR(REG,YEAR),  &
                       UGENCFNR(REG,YEAR),  &
                       UGENSONR(REG,YEAR),  &
                       UGENPVNR(REG,YEAR),  &
                       UGENWNNR(REG,YEAR),  &
                       UGENWFNR(REG,YEAR),  &
                       UGENDGNR(REG,YEAR),  &
                       UGENTLNR(REG,YEAR)
 2200    FORMAT(1h ,'!GN',I2,1x,I4,16F7.1)
             END DO
! *** adding output on ECP year 2 generation, but not correct accounting yet - PV excludes DPGV and state RPS import accounting may not be right **        
             DO YEAR = UPSTYR - UHBSYR, UNYEAR
                WRITE(13,2201) REG,YEAR+1989,  &
                       UGENCLNR_2(REG,YEAR),  &
                       UGENOLNR_2(REG,YEAR) + &
                       UGENNGNR_2(REG,YEAR),  &
                       UGENURNR_2(REG,YEAR),  &
                       UGENHYNR_2(REG,YEAR),  &
                       UGENPSNR_2(REG,YEAR),  &
                       UGENGTNR_2(REG,YEAR),  &
                       UGENMSNR_2(REG,YEAR),  & 
                       UGENWDNR_2(REG,YEAR),  &
                       UGENCFNR_2(REG,YEAR),  &
                       UGENSONR_2(REG,YEAR),  &
                       UGENPVNR_2(REG,YEAR),  &
                       UGENWNNR_2(REG,YEAR),  &
                       UGENWFNR_2(REG,YEAR),  &
                       UGENDGNR_2(REG,YEAR),  &
                       UGENTLNR_2(REG,YEAR)
 2201    FORMAT(1h ,'!G2',I2,1x,I4,16F7.1)
             END DO
             
          END IF
       END DO
      END IF
!
      RETURN
      END
!
!     EPO$PM STORES PLANNED MAINTENANCE FOR YEAR 1 TO PASS TO EFD.
!     EPO$PM STORES PLANNED MAINTENANCE FOR YEAR 2 Needed in next year
!
      SUBROUTINE EPO$PM(NERC)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'emmparm'
      include'ecpcntl'
      include 'dispin'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'plntin'
      include 'plntctl'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'uefdout'
!
      REAL*8 LEVEL,AVCAP,PMCAP,TWOVAL(5)
      INTEGER*4 NERC,YEAR
      INTEGER*4 IRET,IP,ISP
      CHARACTER*16 COLUMN,ROW
      CHARACTER*2 STATUS

      CHARACTER*1 SCODE(ECP_D_MSP)

      ecpsub='EPO$PM'

      DO YEAR = 1 , UNXPH
        ROW = 'M'//UPRGCD(NERC)//'FC'//'XXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':M:',UPRGCD(NERC),'FC',':X:','X',':X:',UPYRCD(YEAR))    ! FC is plant type Fuel Cells. mask middle x
        CALL CWFSROW(ROW,'A       ',STATUS,TWOVAL,ROW_mask,IRET)
        LEVEL=TWOVAL(1)
        WRITE(18,2213) curiyr+1989,nerc,row,status,level
 2213   FORMAT(1X,"!FCPM",2(":",I4),":",A8,":",A2,":",F20.6)
      END DO
!
!
!     INITIALIZE SEASON CODE
!
      DO ISP = 1 , EPNMSP
         SCODE(ISP) = UPRGCD(ISP)
      END DO
!     YEAR 1 FOR EFD
      YEAR = 1
!     LOOP OVER PLANT TYPES
!
      DO IP = 1 , ECP_D_DSP
!
!                 GET ACTIVITY LEVEL FOR APPROPRIATE VECTOR
!
                  PMCAP = DBLE(0.0)
                  AVCAP = DBLE(0.0)
                  STATUS = '  '
               COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':XXX:',UPYRCD(YEAR))
               CALL CWFSCOL(COLUMN,'A       ',STATUS,TWOVAL,COLUMN_mask,IRET)
               AVCAP=TWOVAL(1)
            DO ISP = 1 , EPNMSP
              IF(AVCAP .LE. 0.001) THEN
               EPPLNM(UCPDSPI(IP),ISP) = 0.0
              ELSE
               COLUMN = 'P'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'XX'//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':P:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':XX:',SCODE(ISP),UPYRCD(YEAR))
               CALL CWFSCOL(COLUMN,'A       ',STATUS,TWOVAL,COLUMN_mask,IRET)
               PMCAP=TWOVAL(1)
               EPPLNM(UCPDSPI(IP),ISP) = PMCAP / AVCAP
              END IF
            END DO
!c            WRITE(6,1212) CURCALYR,NERC,UPLNTCD(UCPDSPI(IP)),AVCAP,
!    +                     (EPPLNM(UCPDSPI(IP),ISP),ISP=1,EPNMSP)
!1212  FORMAT(1H ,'PLNM',I4,I5,2X,A2,4F12.4)
      END DO

      Year = 2
!     LOOP OVER PLANT TYPES
!
      DO IP = 1 , ECP_D_DSP
!
!                 GET ACTIVITY LEVEL FOR APPROIATE  pm VECTOR
!
                  PMCAP = DBLE(0.0)
                  AVCAP = DBLE(0.0)
                  STATUS = '  '
               COLUMN = 'E'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP))//'XXX'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)),':XXX:',UPYRCD(YEAR))
               CALL CWFSCOL(COLUMN,'A       ',STATUS,TWOVAL,COLUMN_mask,IRET)
               AVCAP=TWOVAL(1)
            DO ISP = 1 , EPNMSP
              IF(AVCAP .LE. 0.001) THEN
               EPPLNM(UCPDSPI(IP),ISP) = 0.0
              ELSE
               COLUMN = 'P'//UPRGCD(NERC)//UPLNTCD(UCPDSPI(IP)) //'XX'//SCODE(ISP)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':P:',UPRGCD(NERC),UPLNTCD(UCPDSPI(IP)) ,':XX:',SCODE(ISP),UPYRCD(YEAR))
               CALL CWFSCOL(COLUMN,'A       ',STATUS,TWOVAL,COLUMN_mask,IRET)
               PMCAP=TWOVAL(1)
               PMDSP(ISP,UCPDSPI(IP),NERC) = PMCAP / AVCAP
              END IF
            END DO
!             WRITE(6,1213) CURCALYR+1,NERC,UPLNTCD(UCPDSPI(IP)),
!    +         AVCAP,(PMDSP(ISP,UCPDSPI(IP),NERC),ISP=1,EPNMSP)
!1213  FORMAT(1H ,'PLNM2',I4,I5,2X,A2,4F12.4)
      END DO
      RETURN
      END

!     EPO$CRM  captures  reserve margins (unnecesary but not harmful in the regulated world)

      SUBROUTINE EPO$CRM(NERC)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'dispin'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'plntin'
      include 'plntctl'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'dsmtfecp'

      COMMON /ECPRM/ RMDMD,RMADJ,RMCAP,RMLEV
      REAL*4 RMDMD(MNUMNR,MNUMYR)
      REAL*4 RMADJ(MNUMNR,MNUMYR)
      REAL*4 RMCAP(MNUMNR,MNUMYR)
      REAL*4 RMLEV(MNUMNR,MNUMYR)

      REAL*8 LEVEL,TWOVAL(5),SP_RESERVE, SP_RQMT, SP_DUAL
      INTEGER*4 IRET,NERC,YEAR,IGRP,IECP
      INTEGEr*4 JSP,ISEG,VLS
      CHARACTER*2 STATUS
      INTEGER PLANT,I
      CHARACTER*2 PLNT_CD
      CHARACTER*16 BUILDNM
      REAL*8 RETS(5)
      REAL*8 CAPCRED
      REAL*8 OPER_RES_ACT, OPER_RES_DUAL
      CHARACTER*16 ROW1
      CHARACTER*16 ROW_SR, COLUMN_MIN_SR, ROW_NSR

      ecpsub='EPO$CRM'

      STATUS = '  '
      DO Year = 1, UNXPH

!     create reserve margin row name

        ROW1 = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW1_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
!
        LEVEL = 0.0
        CALL CWFSROW(ROW1,'A       ',STATUS,TWOVAL,ROW1_mask,IRET)
        LEVEL=TWOVAL(1)

!     GET ACTIVITY LEVEL FOR EXISTING CAPACITY VECTOR
!     ADD BACK RETIREMENTS

      CAPCRED = 1.0
      DO PLANT = 1 , ECP_D_CAP
         IF (UCPDSPIS(PLANT) .GT. 0) THEN               ! DISPATCHABLE
            IECP = UCPDSPIS(PLANT)
            PLNT_CD = UPLNTCD(UCPDSPI(IECP))
         ELSE IF (UCPINTIS(PLANT) .GT. 0) THEN           ! INTERMITTENTN
            IECP = UIRINTI(UCPINTIS(PLANT))
            PLNT_CD = UPLNTCD(UCPINTI(UCPINTIS(PLANT)))
            CAPCRED = EPIRCCR(IECP)
         ELSE IF (UCPSTOIS(PLANT) .GT. 0) THEN           ! STORAGE
            IECP = UCPSTOIS(PLANT)
            PLNT_CD = UPLNTCD(UCPSTOI(IECP))
         ELSE IF (UCPRNWIS(PLANT) .GT. 0) THEN           ! RENEWABLE
            IECP = UCPRNWIS(PLANT)
            PLNT_CD = UPLNTCD(UCPRNWI(IECP))
         END IF
!
         IF (USW_ERET .EQ. 1 .AND. YEAR .GT. UPRTLT) THEN
            DO IGRP = 1 , ECP_D_RET
               BUILDNM = 'E'//UPRGCD(NERC)//PLNT_CD//'XX'//UPYRCD(IGRP)//'0'; call makmsk(BUILDNM_mask,':E:',UPRGCD(NERC),PLNT_CD,':XX:',UPYRCD(IGRP),':0:')
               DO I = 1 , 5
                  RETS(I) = DBLE(0.0)
               END DO
               STATUS = '  '
               CALL CWFSCOL(BUILDNM,'ACLUD   ',STATUS,RETS,BUILDNM_mask,IRET)
               LEVEL =  LEVEL +  (RETS(4) - RETS(1)) * CAPCRED

!              IF (RETS(4) - RETS(1) .GT. 0.1) THEN
!                 WRITE(18,3297) NERC,PLNT_CD,STATUS,(RETS(I),I=1,5)
!3297             FORMAT(1X,"RETIRE:",I2,":",A2,":",A2,5(":",F10.3))
!              END IF

            END DO
         ENDIF ! USW
      ENDDO ! PLANT

         ERMRGN(NERC,YEAR) = ((LEVEL - ETRMRGN(NERC,YEAR)) / EPKMRGN(NERC,YEAR) - 1.0) * 100.0

        WRITE(18,3333)' RESERVE MARGIN ',CURIYR,NERC, YEAR, ERMRGN(NERC,YEAR)
3333     FORMAT (1x,A20,3I4,F10.4)

!     STORE RM CAPACITY AND DEMAND INFO FOR REPORT TABLES

        IF (YEAR .EQ. (UPPLYR(WICT) + 1))THEN
           RMDMD(NERC,MIN(MNUMYR,CURIYR + YEAR - 1)) = EPKMRGN(NERC,YEAR)
           RMADJ(NERC,MIN(MNUMYR,CURIYR + YEAR - 1)) = - ETRMRGN(NERC,YEAR)
           RMCAP(NERC,MIN(MNUMYR,CURIYR + YEAR - 1)) = LEVEL
           RMLEV(NERC,MIN(MNUMYR,CURIYR + YEAR - 1)) = ERMRGN(NERC,YEAR)
        END IF

         DO IGRP = 1 , EPNGRP

            JSP = MAP_ECP_SP(IGRP)
   
            DO ISEG = 1 , EPNSPG(IGRP)
               VLS = EPLMAP(IGRP,ISEG,YEAR)
               JSP = EPGECP(IGRP)

!              CAPTURE ACTIVITY ON SPINNING RESERVE REQUIREMENT ROW

               ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
               SP_DUAL = 0.0
               TWOVAL = 0.0
               CALL CWFSROW(ROW_SR,'AP      ',STATUS,TWOVAL,ROW_SR_mask,IRET)
               SP_DUAL = TWOVAL(2)
   
               COLUMN_MIN_SR = 'C'//UPRGCD(NERC)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(COLUMN_MIN_SR_mask,':C:',UPRGCD(NERC),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
               SP_RESERVE = 0.0
               SP_RQMT = 0.0
               TWOVAL = 0.0
               CALL CWFSCOL(COLUMN_MIN_SR,'AL      ',STATUS,TWOVAL,COLUMN_MIN_SR_mask,IRET)
               SP_RESERVE = TWOVAL(1)
               SP_RQMT = TWOVAL(2)

!              CAPTURE ACTIVITY AND DUAL FOR OPERATING RESERVES - OPERATING RESERVES = NON-SPINNING + SPINNING RESERVES
   
               ROW_NSR = 'N'//UPRGCD(NERC)//'SR'//UPLDCD(JSP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_NSR_mask,':N:',UPRGCD(NERC),':SR:',UPLDCD(JSP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
               TWOVAL = 0.0
               CALL CWFSROW(ROW_NSR,'AP      ',STATUS,TWOVAL,ROW_NSR_mask,IRET)
               OPER_RES_ACT = TWOVAL(1)
               OPER_RES_DUAL = TWOVAL(2)

               WRITE(18,7333) CURIRUN, CURCALYR, CURIYR+YEAR+1988, NERC, IGRP, ISEG, JSP, SP_RESERVE, SP_RQMT, SP_DUAL, &
                  EPHGHT(VLS,YEAR), EPWDTH(VLS,YEAR), OPER_RES_ACT, OPER_RES_DUAL
 7333          FORMAT(1X,"SPINNING_RESERVE",7(":",I4),7(":",F21.6))

            END DO
         END DO
      END DO  ! YEAR

      RETURN
      END

!     EPO$DSM CAPTURES DSM DECISIONS
!
      SUBROUTINE EPO$DSM(NERC)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'dsmdimen'
      include 'dsmtfecp'
!
      REAL*8 LEVEL,TWOVAL(5)
      INTEGER*4 IRET,NERC,DSM
      CHARACTER*16 COLUMN
      CHARACTER*2 STATUS

      ecpsub='EPO$DSM'

!
!     CAPTURE DSM DECISIONS FROM FIRST DECISION YEAR
!
      DO DSM = 1 , ECP_D_DSM
         COLUMN = 'D'//UPRGCD(NERC)//UPDMCD(DSM)//'XXX'//UPYRCD(1); call makmsk(COLUMN_mask,':D:',UPRGCD(NERC),UPDMCD(DSM),':XXX:',UPYRCD(1))
!
         LEVEL = DBLE(0.0)
         STATUS = '  '
         CALL CWFSCOL(COLUMN,'A       ',STATUS,TWOVAL,COLUMN_mask,IRET)
         LEVEL=TWOVAL(1)
         IF (LEVEL .GT. DBLE(0.0)) &
             WRITE(18,*) 'SELECTED DSM PROGRAM ',COLUMN,LEVEL,CURIYR + UHBSYR
         DSMPRCHOICE(NERC,DSM) = LEVEL
      END DO
!
      RETURN
      END
!
!
!     EPO$AVOID STORES AVOIDED COSTS FOR USE BY DSM AND EFP?
!
      SUBROUTINE EPO$AVOID(NERC)
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'emmparm'
      include'ecpcntl'
      include 'dispin'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'plntin'
      include 'plntctl'
      include 'dispett'
      include 'dispuse'
      include 'uefdout'
      include 'eusprc'
      include 'edbdef'
      include 'wrenew'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'uettout'
!
      COMMON /DERATE/PLTDER
      REAL*4 PLTDER(MNUMNR,ECP_D_DSP,ECP_D_VLS,ECP_D_XPH)
	  
	  COMMON /STOR_OUT/ PT_STO_OUT_CF2_AVG, STO_OUT_COST,STO_OUT_GEN,STO_OUT_COST2, PT_STO_OUT_COST,PT_STO_OUT_GEN,PT_STO_OUT_COST2,PT_STO_OUT_GEN2, &
			STO_OUT_CF, STO_OUT_CF2, PT_STO_OUT_CF, PT_STO_OUT_CF2, &
			PT_STO_IN_COST,PT_STO_IN_GEN,PT_STO_IN_COST2,PT_STO_IN_GEN2
	  
	  REAL*8 STO_OUT_COST(MNUMNR),STO_OUT_GEN(MNUMNR),STO_OUT_COST2(MNUMNR)
	  REAL*8 PT_STO_OUT_COST(MNUMNR),PT_STO_OUT_GEN(MNUMNR),PT_STO_OUT_COST2(MNUMNR),PT_STO_OUT_GEN2(MNUMNR)
	  REAL*8 STO_OUT_CF(ECP_D_VLS,ECP_D_STP,MNUMNR),STO_OUT_CF2(ECP_D_VLS,ECP_D_STP,MNUMNR), PT_STO_OUT_CF(ECP_D_VLS,ECP_D_STP,MNUMNR),PT_STO_OUT_CF2(ECP_D_VLS,ECP_D_STP,MNUMNR), PT_STO_OUT_CF2_AVG(MNUMNR)
	  REAL*8 PT_STO_IN_COST(MNUMNR),PT_STO_IN_GEN(MNUMNR),PT_STO_IN_COST2(MNUMNR),PT_STO_IN_GEN2(MNUMNR)
	  
      COMMON /STOR_OUT1/ STO_OUT_CF2_AVG,STO_IN_COST2,STO_OUT_GEN2
      REAL*8 STO_OUT_CF2_AVG(MNUMNR),STO_OUT_GEN2(MNUMNR),STO_IN_COST2(MNUMNR)
      
	  INTEGER*4	JVLS_CNT(MAXECPB)
      INTEGER*4 MAPVLS(ECP_D_VLS,MAXECPB,MNUMNR,ECP_D_XPH)
	  
!
      COMMON /AVDOUT/AVDTOT,AVDMIN,AVDMAX,AVDNUM
      REAL*4  AVDTOT(ECP_D_CAP,MNUMNR)
      REAL*4  AVDMIN(ECP_D_CAP)
      REAL*4  AVDMAX(ECP_D_CAP)
      INTEGER AVDNUM(ECP_D_CAP)
!
      COMMON /CCSLEV/CCSLC           !levelized cost variables stored by fuel region for CCS costs/revenues
      REAL*8 CCSLC(MAXNFR,ECP_D_XPH)     !levelized CCS cost/revenue
      
      INTEGER NUMTABS
      PARAMETER (NUMTABS = 2)        ! total number of database tables
      INTEGER PLT,OLYR,OPYR,IYR,ISP,IGRP,ISEG
      INTEGER NERC,YEAR,VLS,IVLS,IRET,JVLS
      REAL*8 PWF,PVV
      REAL*8 DUAL_VALUE,WDTH,TWOVAL(5)
      REAL*8 MRGNRG,MRGCAP,DSCKWH,AVGCFC,TOTHRS,GNP(ECP_D_FPH),DSCTMP,MRGCAP2,CAPT(10), &
                  MRGCAP3,DSCTMP2,ONES(ECP_D_FPH),MRGCAP2_PD2,DSCTMP2_PD2, MRGSR, MRGINT
      REAL*8 T_VAL
      CHARACTER*16 ROW, ROW_SR
      CHARACTER*2 DEL
      CHARACTER*2 STATUS
	  REAL*8 SRAVOID(ECP_D_STP,ECP_D_SSZ,ECP_D_XPH), INTAVOID(ECP_D_XPH)
	  INTEGER ICAP


      ecpsub='EPO$AVOID'

      LOOPING = 0
      NUMCOLS = 0
      DYNSTM = ' '
      WRTSTM = ' '
      COLVALS = 0.0
      COLV = 0.0
      CHCOLVALS = ' '
      CHCOLV = ' '
!
!     INITIALIZE AVOIDED COST SUMMARY INFO
!
      IF (NERC .EQ. 1)THEN
         AVDTOT = 0.0
         AVDMIN = 9999.9
         AVDMAX = 0.0
         AVDNUM = 0
      END IF
      EPTAVD = 0.0
!
      DEL = ' :'
      STATUS = 'DV'
      DUAL_VALUE = DBLE(20.00)
	  
	  
	  
	 DO YEAR = 1 , UNXPH
     !    DO ERGN = 1 , UNRGNS
            JVLS_CNT = 0
            CALL GETBLD(1,NERC)
            DO IGRP = 1 , EPNGRP
               DO VLS = 1 , EPNSTP(YEAR)
                  MAPVLS(VLS,IGRP,NERC,YEAR) = 0
               END DO
            END DO

!           DETERMINE CAPACITY FACTOR AT EACH LOAD STEP

            DO ISP = 1 , EPNMSP
               VLS = EPFRST(ISP,YEAR)
               DO WHILE (VLS .GT. 0)
                  IGRP = EPLDGR(VLS,YEAR)
                  JVLS_CNT(IGRP) = JVLS_CNT(IGRP) + 1
                  MAPVLS(VLS,IGRP,NERC,YEAR) = JVLS_CNT(IGRP)
                  VLS = EPNEXT(VLS,YEAR)
               END DO
            END DO
        ! END DO
      END DO
!
!     LOOP OVER YEARS AND LOAD SEGMENT
!
      DO YEAR = 1 , UNXPH
!
!        GET FIRM INTERREGIONAL FLOWS
!
         IYR = CURIYR + YEAR - 1
         CALL GETEIJ(IYR)
         IYR = UHBSYR + CURIYR
		 
		!intermittent limit row
		ROW = 'L'//UPRGCD(NERC)//'XXINT'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':XXINT:',UPYRCD(YEAR))
		CALL CWFSROW(ROW,'P       ',STATUS,TWOVAL,ROW_mask,IRET)
		DUAL_VALUE=TWOVAL(1)
        INTAVOID(YEAR) = DUAL_VALUE
!
         DO VLS = 1 , EPNSTP(YEAR)
!
!           GET DUAL VALUE FOR EACH LOAD SEGMENT
!
            IGRP = EPLDGR(VLS,YEAR)
            ISEG = EPLDSG(VLS,YEAR)
            ISP = EPGECP(IGRP)
			
			!Spinning reserve row
            ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR))
			CALL CWFSROW(ROW_SR,'P       ',STATUS,TWOVAL,ROW_mask,IRET)
			DUAL_VALUE=TWOVAL(1)
            SRAVOID(IGRP,ISEG,YEAR) = DUAL_VALUE
			
			!Load row
            ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(ISEG)//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(ISEG),UPYRCD(YEAR)) ! aimms rLEL2
            CALL CWFSROW(ROW,'P       ',STATUS,TWOVAL,ROW_mask,IRET)
            DUAL_VALUE=TWOVAL(1)
            EPAVOID(IGRP,ISEG,YEAR) = DUAL_VALUE
!
            T_VAL = UEITAJ_ECP(ISP,NERC) + UTRELADJ(NERC,MIN(UNYEAR,CURIYR+YEAR-1))

               WRITE(18,1013) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,NERC,VLS,ISP,IGRP,ISEG,  & !EMMDB
                  EPHGHT(VLS,YEAR),EPWDTH(VLS,YEAR),T_VAL, & !EMMDB
                  -BTCOGEN(NERC) / 8.76,  &
                  BMEXICAN(NERC) / 8.76, &
                  UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)),UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)),EP$LF(VLS,YEAR),DUAL_VALUE,TRIM(SCEN_DATE),ORCLECP,FNRUN          !EMMDB

!           IF (USW_DBS .GT. 0) THEN
               WRITE(UF_DBS,1013) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,NERC,VLS,ISP,IGRP,ISEG,  & !EMMDB
                  EPHGHT(VLS,YEAR),EPWDTH(VLS,YEAR),T_VAL, & !EMMDB
                  -BTCOGEN(NERC) / 8.76,  &
                  BMEXICAN(NERC) / 8.76, &
                  UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)),UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)),EP$LF(VLS,YEAR),DUAL_VALUE,TRIM(SCEN_DATE),ORCLECP,FNRUN          !EMMDB
 1013          FORMAT(1X,'ECPLOAD',7(' :',I5),9(' :',F10.3),' :',A,2(":",I2))     !EMMDB
!              Label:ECPLOAD:CYEAR:PYEAR:NERC:VLS:ISP:IGRP:ISEG:EPHGHT:EPWDTH:UEITAJ_ECP:BTCOGEN:BMEXICAN:UOUNCP:UOUCCP:EP_LF:DUAL_VALUE:TRIM(SCEN_DATE):ORCLECP:FNRUN
!           END IF
!
            TNUM = 1
            IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
               IF (LOOPING(TNUM) .EQ. 0) THEN
                 NUMCOLS(TNUM) = 12
                 DYNSTM(TNUM) =  'INSERT INTO ECP_LOAD_SEGMENT VALUES(?,?,?,?,?,?,?,?,'   &
                               //'?,?,?,?,?)'
                 WRTSTM(TNUM) =  'ECP_LOAD_SEGMENT'  
               ENDIF
               LOOPING(TNUM) = LOOPING(TNUM) + 1
               COLV(TNUM,1,LOOPING(TNUM)) = ISEG
               COLV(TNUM,2,LOOPING(TNUM)) = NERC
               COLV(TNUM,3,LOOPING(TNUM)) = CURIYR
               COLV(TNUM,4,LOOPING(TNUM)) = EPLDGR(VLS,YEAR)
               COLV(TNUM,5,LOOPING(TNUM)) = YEAR
               COLV(TNUM,6,LOOPING(TNUM)) = EPHGHT(VLS,YEAR)
               COLV(TNUM,7,LOOPING(TNUM)) = EPWDTH(VLS,YEAR)
               COLV(TNUM,8,LOOPING(TNUM)) = UEITAJ_ECP(ISP,NERC) + UTRELADJ(NERC,MIN(UNYEAR,CURIYR+YEAR-1)) - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76
               COLV(TNUM,9,LOOPING(TNUM)) = UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
               COLV(TNUM,10,LOOPING(TNUM)) = UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
               COLV(TNUM,11,LOOPING(TNUM)) = EP$LF(VLS,YEAR)
               COLV(TNUM,12,LOOPING(TNUM)) = DUAL_VALUE
               IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                COLVALS(:,:) = COLV(TNUM,:,:)
                CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!               CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                LOOPING(TNUM) = 0
               ENDIF
            ENDIF
!
!
         END DO
!
!        GET DUAL VALUE OF THE RESERVE MARGIN ROWS
!
         CAPT(YEAR) = 0.0
         ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
         CALL CWFSROW(ROW,'AP      ',STATUS,TWOVAL,ROW_mask,IRET)
         DUAL_VALUE=TWOVAL(2)
         CAPT(YEAR)=TWOVAL(1)
         EPRMRGN(YEAR) = DUAL_VALUE
         WRITE(18,4910)'EPRMRGN in EPO$AVOID',NERC,CURIYR,YEAR,EPRMRGN(YEAR),CAPT(YEAR),EPPEAK(YEAR) * DBLE(EPMRM) + EP_NET_PEAK(YEAR),(EPHGHT(VLS,1),VLS = 1 , EPNSTP(1))
 4910  FORMAT(A30,1x,3(I4,1x),12(F12.3,1x))
         IVLS = 1                                                        !EMMDB
!
         IGRP = EPLDGR(1,YEAR)                      ! IGRP is the ECP Group which contains the Peak Slice (i.e. 1)
         ISP = MAP_ECP_SP(IGRP)
         T_VAL = UEITAJ_ECP(ISP,NERC) + UTRELADJ(NERC,MIN(UNYEAR,CURIYR+YEAR-1))

         JVLS = 0                                                        !EMMDB
         WDTH = 0.0                                                      !EMMDB
!
         IF (USW_DBS .GT. 0) THEN
            WRITE(UF_DBS,1013) CURIYR+UHBSYR,CURIYR+UHBSYR+YEAR-1,NERC,IVLS,ISP,IGRP,ISEG,  & !EMMDB
            EPPEAK(YEAR) * DBLE(EPMRM) + EP_NET_PEAK(YEAR),WDTH,T_VAL,                  & !EMMDB
            -BTCOGEN(NERC) / 8.76, BMEXICAN(NERC) / 8.76,                 & !EMMDB
            UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)),UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1)),EP$LF(IVLS,YEAR),DUAL_VALUE,TRIM(SCEN_DATE)    !EMMDB
!                                                                        !EMMDB
!         WRITE OUT RESERVE MARGIN TABLE FOR EMM DATABASE                !EMMDB
!                                                                        !EMMDB
          WRITE(UF_DBS,3000) DEL,CURIYR,DEL,NERC,DEL,YEAR,DEL,EPMRM,DEL,  & !EMMDB
                  EPPEAK(YEAR) * DBLE(EPMRM) + EP_NET_PEAK(YEAR), DEL,                  & !EMMDB
                  STATUS,DEL,EPRMRGN(YEAR),DEL,TRIM(SCEN_DATE)           !EMMDB
3000    FORMAT(1X,'ECPRMARG',A2,I4,A2,I4,A2,I4,A2,F6.4,A2,F10.4,A2,       & !EMMDB
               A4,A2,F10.3,A2,A)                                         !EMMDB
         END IF
!
        TNUM = 1
        IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
          LOOPING(TNUM) = LOOPING(TNUM) + 1
          COLV(TNUM,1,LOOPING(TNUM)) = JVLS                                      !EMMDB
          COLV(TNUM,2,LOOPING(TNUM)) = NERC                                      !EMMDB
          COLV(TNUM,3,LOOPING(TNUM)) = CURIYR                                    !EMMDB
          COLV(TNUM,4,LOOPING(TNUM)) = EPLDGR(IVLS,YEAR)                         !EMMDB
          COLV(TNUM,5,LOOPING(TNUM)) = YEAR                                      !EMMDB
          COLV(TNUM,6,LOOPING(TNUM)) = EPPEAK(YEAR) * DBLE(EPMRM) + EP_NET_PEAK(YEAR)         !EMMDB
          COLV(TNUM,7,LOOPING(TNUM)) = WDTH                                      !EMMDB
          COLV(TNUM,8,LOOPING(TNUM)) = T_VAL - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76               !EMMDB
          COLV(TNUM,9,LOOPING(TNUM)) = UOUNCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
          COLV(TNUM,10,LOOPING(TNUM)) = UOUCCP(NERC,MIN(UNYEAR,CURIYR+YEAR-1))
          COLV(TNUM,11,LOOPING(TNUM)) = EP$LF(IVLS,YEAR)                          !EMMDB
          COLV(TNUM,12,LOOPING(TNUM)) = DUAL_VALUE                                !EMMDB
           IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
             COLVALS(:,:) = COLV(TNUM,:,:)
             CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!            CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
             CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
             LOOPING(TNUM) = 0
           ENDIF
!
          TNUM = 2
          IF (LOOPING(TNUM) .EQ. 0) THEN
            NUMCOLS(TNUM) = 7
            DYNSTM(TNUM) =  'INSERT INTO ECP_RESERVE_MARGIN VALUES(?,?,?,?,?,?,?,?)'
            WRTSTM(TNUM) =  'ECP_RESERVE_MARGIN'
          ENDIF
          LOOPING(TNUM) = LOOPING(TNUM) + 1
          COLV(TNUM,1,LOOPING(TNUM)) = CURIYR
          COLV(TNUM,2,LOOPING(TNUM)) = NERC
          COLV(TNUM,3,LOOPING(TNUM)) = YEAR
          COLV(TNUM,4,LOOPING(TNUM)) = EPMRM
          COLV(TNUM,5,LOOPING(TNUM)) = EPPEAK(YEAR) * DBLE(EPMRM) + EP_NET_PEAK(YEAR)
          CHCOLV(TNUM,6,LOOPING(TNUM)) = STATUS
          COLV(TNUM,7,LOOPING(TNUM)) = EPRMRGN(YEAR)
          IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
            COLVALS(:,:) = COLV(TNUM,:,:)
            CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!           CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
            CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
            LOOPING(TNUM) = 0
           ENDIF
           ENDIF
!
      END DO

         MRGCAP2 = DBLE(0.0) 
         MRGCAP2_PD2 = DBLE(0.0)             
         DSCTMP = DBLE(0.0)
         MRGCAP3 = DBLE(0.0)
         DSCTMP2 = DBLE(0.0)
         DSCTMP2_PD2 = DBLE(0.0)         
         DO OPYR=1,ECP_D_FPH
           ONES(OPYR) = 1.0
         ENDDO
         LEVRMD(CURIYR,NERC) = DBLE(0.0) 
         LEVRMD2(CURIYR,NERC) = DBLE(0.0) 
         LEVRMD2C(CURIYR,NERC) = DBLE(0.0) 
         OLYR = 2
! Levelize capacity         
         MRGCAP3 = EPPEAK(2) * DBLE(EPMRM) + EP_NET_PEAK(2)
         DSCTMP2 = &
            PVV(ONES,ECP_D_FPH,UNFPH - OLYR + 1,DBLE(EPDSCRT )) * &
            PWF(DBLE(EPDSCRT ),OLYR - 1)   
         LEVRMC(CURIYR,NERC) = MRGCAP3  
         
! Grab duals        
         DO OPYR = OLYR, UNXPH
           MRGCAP2 = MRGCAP2 -  EPRMRGN(OPYR)             
           WRITE(18,3084)'check MRGCAP all1',NERC,CURIYR + UHBSYR,OPYR,MRGCAP2 , EPRMRGN(OPYR),MRGCAP3 ,  EPPEAK(2) , DBLE(1.0 + EPMRM), EP_NET_PEAK(2)
3084     FORMAT(A20,1x,3(I4,1x),6(F15.6,1x))  
         ENDDO
         MRGCAP2_PD2 =  -  EPRMRGN(2) 
 
! Levelize duals - periods 2 and 3 together          
!        DISCOUNT GDP DEFLATORS 
         DO OPYR = OLYR , UNFPH
            GNP(OPYR - OLYR + 1) = UPGNPD(CURIYR + OPYR - 1)
         END DO
!        DIVIDE DISCOUNTED PRESENT VALUE OF DUALS BY DISCOUNTED EPDSCRT
!        TO GET LEVELIZED COSTS
         DSCTMP = &
            PVV(GNP,ECP_D_FPH,UNFPH - OLYR + 1,DBLE(EPDSCRT )) * &
            PWF(DBLE(EPDSCRT ),OLYR - 1)          
         LEVRMD(CURIYR,NERC) = (MRGCAP2) / DSCTMP     

! Levelize duals - period 2           
         DSCTMP2_PD2 = &
            PVV(GNP,ECP_D_FPH, 1,DBLE(EPDSCRT )) * &
            PWF(DBLE(EPDSCRT ),OLYR - 1)          
         LEVRMD2(CURIYR,NERC) = (MRGCAP2_PD2) / DSCTMP2_PD2  
         
! Capped Levlized dual - period 2         
         IF (LEVRMD2(CURIYR,NERC) .GT. LEVRMD(CURIYR,NERC)) THEN
           LEVRMD2C(CURIYR,NERC) = LEVRMD(CURIYR,NERC)         
         ELSE
           LEVRMD2C(CURIYR,NERC) = LEVRMD2(CURIYR,NERC)          
         ENDIF
      
         WRITE(18,3086)'check LEVRMD all1',NERC,CURIYR + UHBSYR,LEVRMD(CURIYR,NERC),MRGCAP2,DSCTMP,LEVRMC(CURIYR,NERC),MRGCAP3,DSCTMP2,LEVRMD2(CURIYR,NERC),MRGCAP2_PD2,DSCTMP2_PD2,LEVRMD2C(CURIYR,NERC)                     
3086     FORMAT(A20,1x,2(I4,1x),10(F15.6,1x))  
!
!     DETERMINE AVOIDED COSTS ASSOCIATED WITH DISPATCHABLE TECHNOLOGIES
!
!     DETERMINE MARGINAL ENERGY COST FROM DUALS (NOMINAL, DISCOUNTED TO YEAR 1)
      DO PLT = 1 , ECP_D_DSP
       IF (UPVTYP(PLT) .GT. 0 .AND. UPBLDREG(PLT,NERC) .GT. 0.0 .AND. UPFOM(PLT) .LT. 200.0)THEN
         OLYR = 1 + UPPLYR(UCPDSPI(PLT))
        IF ((CURIYR + UHBSYR + OLYR - 1) .GE. UPAVLYR(UCPDSPI(PLT)))THEN
         MRGNRG = DBLE(0.0)
         MRGCAP = DBLE(0.0)
		 MRGSR = DBLE(0.0)
         DO OPYR = OLYR , UNXPH
            DO VLS = 1 , EPNSTP(OPYR)
				IGRP = EPLDGR(VLS,OPYR)
				ISEG = EPLDSG(VLS,OPYR)
				IF (SR_CREDIT(UCPDSPI(PLT)) .GT. 0.0 .AND. PLTDER(NERC,PLT,VLS,OPYR) .GT. 0.0) THEN
					MRGSR = MRGSR - SRAVOID(IGRP,ISEG,OPYR) * (1.0 - PLTDER(NERC,PLT,VLS,OPYR))* SR_CREDIT(UCPDSPI(PLT))   
				ENDIF
				MRGNRG = MRGNRG - PLTDER(NERC,PLT,VLS,OPYR) * EPAVOID(IGRP,ISEG,OPYR)
!            write(18,1900) curiyr+1989,nerc,plt,uplntcd(plt),opyr,vls,  &
!                 pltder(nerc,plt,vls,opyr),epavoid(IGRP,ISEG,opyr),mrgnrg
!1900 format(1h ,'!avdplt',i4,i3,i4,a3,i3,i3,f10.5,3f10.2)
            END DO
            MRGCAP = MRGCAP - 1.0 * EPRMRGN(OPYR)
         END DO
!        COMPUTE DISCOUNTED KILOWATTHOURS FOR LEVELIZATION
         AVGCFC = DBLE(0.0)
         TOTHRS = DBLE(0.0)
         DO IVLS = 1 , EPNSTP(OLYR)
            AVGCFC = AVGCFC + PLTDER(NERC,PLT,IVLS,OLYR) * EPWDTH(IVLS,OLYR)
            TOTHRS = TOTHRS + EPWDTH(IVLS,OLYR)
!         write(18,1950) curiyr+1989,nerc,plt,uplntcd(plt),ivls,  &
!            PLTDER(NERC,PLT,IVLS,OLYR) , EPWDTH(IVLS,OLYR) , avgcfc, tothrs, avgcfc / tothrs
!1950 format(1h ,'!avdcfc',i4,i3,i4,a3,i3,5f10.4)
         END DO
         AVGCFC = AVGCFC / TOTHRS
!        DISCOUNT GDP DEFLATORS
         DO OPYR = OLYR , UNFPH
            GNP(OPYR - OLYR + 1) = UPGNPD(CURIYR + OPYR - 1)
         END DO
         DSCKWH = &
            PVV(GNP,ECP_D_FPH,UNFPH - OLYR + 1,DBLE(EPDSCRT - UPRSK(UCPDSPI(PLT)))) * &
          PWF(DBLE(EPDSCRT - UPRSK(UCPDSPI(PLT))),OLYR - 1)
!        if (uplntcd(plt) .eq. 'AC')write(6,1905) curiyr+1989,nerc,uplntcd(plt),mrgnrg,mrgcap,  &
!         DSCKWH , AVGCFC ,  &
!         DSCKWH * AVGCFC * 8.760
!1905 format(1h ,'!dsckwh',i4,i3,a3,5f10.3)
         DSCKWH = DSCKWH * AVGCFC * 8.760
!        DIVIDE DISCOUNTED PRESENT VALUE OF DUALS BY DISCOUNTED KWH TO GET LEVELIZED COSTS
         IF (DSCKWH .GT. 0.0)THEN
            EPTAVD(UCPDSPI(PLT)) = (MRGNRG + MRGCAP + MRGSR) / DSCKWH
            AVDTOT(UCPDSPI(PLT),NERC) = EPTAVD(UCPDSPI(PLT))
            AVDTOT(UCPDSPI(PLT),MNUMNR) = AVDTOT(UCPDSPI(PLT),MNUMNR) + EPTAVD(UCPDSPI(PLT))
            AVDNUM(UCPDSPI(PLT)) = AVDNUM(UCPDSPI(PLT)) + 1
            IF (EPTAVD(UCPDSPI(PLT)) .LT. AVDMIN(UCPDSPI(PLT))) AVDMIN(UCPDSPI(PLT)) = EPTAVD(UCPDSPI(PLT))
            IF (EPTAVD(UCPDSPI(PLT)) .GT. AVDMAX(UCPDSPI(PLT))) AVDMAX(UCPDSPI(PLT)) = EPTAVD(UCPDSPI(PLT))
         ELSE
            EPTAVD(UCPDSPI(PLT)) = 0.0
         END IF
         WRITE(13,2000) CURIYR + UHBSYR,NERC,UPLNTCD(UCPDSPI(PLT)),MRGNRG,MRGCAP,DSCKWH,EPTAVD(UCPDSPI(PLT)) * SCALPR,AVGCFC, MRGSR
 2000    FORMAT(1H ,'NERC,PLT,NRG,CAP,KWH,AVD',2I5,1X,A2,1X,4F10.2,2F10.4)
        END IF
       END IF
      END DO
!
!     DETERMINE AVOIDED COSTS ASSOCIATED WITH RENEWABLE TECHNOLOGIES
!     INTERMITTENT TECHNOLOGIES
!
!     DETERMINE MARGINAL ENERGY COST FROM DUALS (NOMINAL, DISCOUNTED TO YEAR 1)
      DO PLT = 1 , ECP_D_INT
	   ICAP = UCPINTI(PLT)
	   !        COMPUTE DISCOUNTED KILOWATTHOURS FOR LEVELIZATION
	   OLYR = 1 + UPPLYR(UCPINTI(PLT))
		AVGCFC = DBLE(0.0)
		TOTHRS = DBLE(0.0)
		DO IVLS = 1 , EPNSTP(OLYR)
			IGRP = EPLDGR(IVLS,OLYR)
			ISEG = EPLDSG(IVLS,OLYR)
			AVGCFC = AVGCFC + UPICFC(1,PLT,IGRP,ISEG) * EPWDTH(IVLS,OLYR)
			TOTHRS = TOTHRS + EPWDTH(IVLS,OLYR)
		END DO
		AVGCFC = AVGCFC / TOTHRS
		
       IF (UPVTYP(UCPINTI(PLT)) .GT. 0 .AND. UPBLDREG(UCPINTI(PLT),NERC) .GT. 0.0 .AND. AVGCFC .GE. 0.10 .AND.  &
           EPIRFOM(UIRINTI(PLT)) .LT. 200.0)THEN
         
        IF ((CURIYR + UHBSYR + OLYR - 1) .GE. UPAVLYR(UCPINTI(PLT)))THEN
         MRGNRG = DBLE(0.0)
         MRGCAP = DBLE(0.0)
		 MRGSR = DBLE(0.0)
		 MRGINT = DBLE(0.0)
         DO OPYR = OLYR , UNXPH
            DO VLS = 1 , EPNSTP(OPYR)
               IGRP = EPLDGR(VLS,OPYR)
               ISEG = EPLDSG(VLS,OPYR)
			   JVLS = MAPVLS(VLS,IGRP,NERC,OPYR)
			   IF (ICAP .EQ. WIPT) THEN
					IF (SR_CREDIT(ICAP) .GT. 0.0) THEN
						MRGSR = MRGSR - NET_PT_STORAGE_SR_EX(ISEG,IGRP,NERC,CURIYR) * SRAVOID(IGRP,ISEG,OPYR)
					ENDIF
					MRGNRG = MRGNRG + NET_PT_STORAGE_LOAD_EX(ISEG,IGRP,NERC,CURIYR) * EPAVOID(IGRP,ISEG,OPYR) 
			   ENDIF
			   
			   IF (SR_INT(ICAP,NERC) .GT. 0.0) THEN
					MRGSR = MRGSR + UPICFC(1,PLT,IGRP,ISEG) * SR_INT(ICAP,NERC) * SRAVOID(IGRP,ISEG,OPYR)
			   ENDIF
				
				MRGNRG = MRGNRG - UPICFC(1,PLT,IGRP,ISEG) * EPAVOID(IGRP,ISEG,OPYR)
				
            END DO
			
			IF (UPINTSW .GE. 2) THEN
				IF (UCPINTIS(ICAP) .GT. 0) THEN
					MRGINT = MRGINT - AVGCFC * 8.760 * INTAVOID(OPYR) 
				ENDIF
			ENDIF
			   
            IF (DBLE(EPIRCCR(UIRINTI(PLT))) .GT. ECP_MIN) MRGCAP = MRGCAP - EPIRCCR(UIRINTI(PLT)) * EPRMRGN(OPYR)
         END DO
!        DISCOUNT GDP DEFLATORS
         DO OPYR = OLYR , UNFPH
            GNP(OPYR - OLYR + 1) = UPGNPD(CURIYR + OPYR - 1)
         END DO
         DSCKWH = &
            PVV(GNP,ECP_D_FPH,UNFPH - OLYR + 1,DBLE(EPDSCRT - UPRSK(UCPINTI(PLT)))) * &
          PWF(DBLE(EPDSCRT - UPRSK(UCPINTI(PLT))),OLYR - 1)
		  
		 IF (PT_STO_OUT_GEN2(NERC) .NE. 0.0 .AND. ICAP .EQ. WIPT .AND. DSCKWH .GT. 0.0) THEN
				MRGNRG = MRGNRG + (PT_STO_OUT_COST2(NERC) + PT_STO_IN_COST2(NERC))/PT_STO_OUT_GEN2(NERC) * PT_STO_OUT_CF2_AVG(NERC) * (DSCKWH * 8.760)
		 END IF
		  
!        if (uplntcd(ucpinti(plt)) .eq. 'WN')write(6,1905) curiyr+1989,nerc,uplntcd(plt),mrgnrg,mrgcap,  &
!         DSCKWH , AVGCFC ,  &
!         DSCKWH * AVGCFC * 8.760
         DSCKWH = DSCKWH * AVGCFC * 8.760
		 
!        DIVIDE DISCOUNTED PRESENT VALUE OF DUALS BY DISCOUNTED KWH TO GET LEVELIZED COSTS
         IF (DSCKWH .GT. 0.0)THEN
            EPTAVD(UCPINTI(PLT)) = (MRGNRG + MRGCAP + MRGSR + MRGINT) / DSCKWH
            AVDTOT(UCPINTI(PLT),NERC) = EPTAVD(UCPINTI(PLT))
            AVDTOT(UCPINTI(PLT),MNUMNR) = AVDTOT(UCPINTI(PLT),MNUMNR) + EPTAVD(UCPINTI(PLT))
            AVDNUM(UCPINTI(PLT)) = AVDNUM(UCPINTI(PLT)) + 1
            IF (EPTAVD(UCPINTI(PLT)) .LT. AVDMIN(UCPINTI(PLT))) AVDMIN(UCPINTI(PLT)) = EPTAVD(UCPINTI(PLT))
            IF (EPTAVD(UCPINTI(PLT)) .GT. AVDMAX(UCPINTI(PLT))) AVDMAX(UCPINTI(PLT)) = EPTAVD(UCPINTI(PLT))
         ELSE
            EPTAVD(UCPINTI(PLT)) = 0.0
         END IF
         WRITE(13,2100) CURIYR + UHBSYR,NERC,UPLNTCD(UCPINTI(PLT)),MRGNRG,MRGCAP,DSCKWH,EPTAVD(UCPINTI(PLT)) * SCALPR,AVGCFC, MRGSR, MRGINT
 2100    FORMAT(1H ,'NERC,INT,NRG,CAP,KWH,AVD',2I5,1X,A2,1X,4F10.2,3F10.4)
        END IF
       END IF
      END DO
!
!     RENEWABLE    TECHNOLOGIES
!
!     DETERMINE MARGINAL ENERGY COST FROM DUALS (NOMINAL, DISCOUNTED TO YEAR 1)
      DO PLT = 1 , ECP_D_RNW
       IF (UCPRNWI(PLT) .GT. 0) THEN
          IF (UPVTYP(UCPRNWI(PLT)) .GT. 0 .AND. UPBLDREG(UCPRNWI(PLT),NERC) .GT. 0.0 .AND. EPRCFC(PLT) .GT. 0.05 .AND.  &
              EPIRFOM(UIRRNWI(PLT)) .LT. 200.0)THEN
            OLYR = 1 + UPPLYR(UCPRNWI(PLT))
           IF (UPVTYP(UCPRNWI(PLT)) .EQ. 1 .AND. (CURIYR + UHBSYR + OLYR - 1) .GE. UPAVLYR(UCPRNWI(PLT)))THEN
            MRGNRG = DBLE(0.0)
            MRGCAP = DBLE(0.0)
			MRGSR = DBLE(0.0)
            DO OPYR = OLYR , UNXPH
               DO VLS = 1 , EPNSTP(OPYR)
				IGRP = EPLDGR(VLS,OPYR)
				ISEG = EPLDSG(VLS,OPYR)
                  MRGNRG =  MRGNRG - EPRCFC(PLT) * EPAVOID(IGRP,ISEG,OPYR)
				   IF (SR_CREDIT(UCPRNWI(PLT)) .GT. 0.0) THEN
						MRGSR = MRGSR - SRAVOID(IGRP,ISEG,OPYR) * (1.0 - EPRCFC(PLT)) * SR_CREDIT(UCPRNWI(PLT))	   
				   ENDIF
               END DO
               IF (DBLE(EPIRCCR(UIRRNWI(PLT))) .GT. ECP_MIN) MRGCAP = MRGCAP - EPIRCCR(UIRRNWI(PLT)) * EPRMRGN(OPYR)
            END DO
!           DISCOUNT GDP DEFLATORS AND KILOWATTHOURS
            DO OPYR = OLYR , UNFPH
               GNP(OPYR - OLYR + 1) = UPGNPD(CURIYR + OPYR - 1)
            END DO
            DSCKWH = &
               PVV(GNP,ECP_D_FPH,UNFPH - OLYR + 1,DBLE(EPDSCRT - UPRSK(UCPRNWI(PLT)))) * &
             PWF(DBLE(EPDSCRT - UPRSK(UCPRNWI(PLT))),OLYR - 1)
!           if (uplntcd(ucprnwi(plt)) .eq. 'WD')write(6,1905) curiyr+1989,nerc,uplntcd(plt),mrgnrg,mrgcap,  &
!            DSCKWH , EPRCFC(PLT) ,  &
!            DSCKWH * EPRCFC(PLT) * 8.760
            DSCKWH = DSCKWH * EPRCFC(PLT) * 8.760
!           DIVIDE DISCOUNTED PRESENT VALUE OF DUALS BY DISCOUNTED KWH
!           TO GET LEVELIZED COSTS
            IF (DSCKWH .GT. 0.0)THEN
               EPTAVD(UCPRNWI(PLT)) = (MRGNRG + MRGCAP + MRGSR) / DSCKWH
               AVDTOT(UCPRNWI(PLT),NERC) = EPTAVD(UCPRNWI(PLT))
               AVDTOT(UCPRNWI(PLT),MNUMNR) = AVDTOT(UCPRNWI(PLT),MNUMNR) + EPTAVD(UCPRNWI(PLT))
               AVDNUM(UCPRNWI(PLT)) = AVDNUM(UCPRNWI(PLT)) + 1
               IF (EPTAVD(UCPRNWI(PLT)) .LT. AVDMIN(UCPRNWI(PLT))) AVDMIN(UCPRNWI(PLT)) = EPTAVD(UCPRNWI(PLT))
               IF (EPTAVD(UCPRNWI(PLT)) .GT. AVDMAX(UCPRNWI(PLT))) AVDMAX(UCPRNWI(PLT)) = EPTAVD(UCPRNWI(PLT))
            ELSE
               EPTAVD(UCPRNWI(PLT)) = 0.0
            END IF
            WRITE(13,2200) CURIYR + UHBSYR,NERC,UPLNTCD(UCPRNWI(PLT)),MRGNRG,MRGCAP,DSCKWH,EPTAVD(UCPRNWI(PLT)) * SCALPR,EPRCFC(PLT), MRGSR
 2200       FORMAT(1H ,'NERC,RNW,NRG,CAP,KWH,AVD',2I5,1X,A2,1X,4F10.2,2F10.4)
           END IF
          END IF
       END IF
      END DO
!
!     STORAGE    TECHNOLOGIES
!
!     DETERMINE MARGINAL ENERGY COST FROM DUALS (NOMINAL, DISCOUNTED TO YEAR 1) **calculate based on CF used for CT - currently 10%

      DO PLT = 1 , ECP_D_STO
       IF (UPVTYP(UCPSTOI(PLT)) .GT. 0 .AND. UPBLDREG(UCPSTOI(PLT),NERC) .GT. 0.0 .AND. EPIRFOM(UIRSTOI(PLT)) .LT. 200.0)THEN
         OLYR = 1 + UPPLYR(UCPSTOI(PLT))
        IF ((CURIYR + UHBSYR + OLYR - 1) .GE. UPAVLYR(UCPSTOI(PLT)))THEN
         MRGNRG = DBLE(0.0)
         MRGCAP = DBLE(0.0)
		 MRGSR =DBLE(0.0)

!        COMPUTE DISCOUNTED KILOWATTHOURS FOR LEVELIZATION
         AVGCFC = DBLE(0.0)
         TOTHRS = DBLE(0.0)
         DO IVLS = 1 , EPNSTP(OLYR)
            AVGCFC = AVGCFC + PLTDER(NERC,WICT,IVLS,OLYR) * EPWDTH(IVLS,OLYR)  !** using PLTDER from CT to calculate based on same 10% CF
            TOTHRS = TOTHRS + EPWDTH(IVLS,OLYR)
         END DO
		 AVGCFC = AVGCFC / TOTHRS
		 
		 !        DISCOUNT GDP DEFLATORS
         DO OPYR = OLYR , UNFPH
            GNP(OPYR - OLYR + 1) = UPGNPD(CURIYR + OPYR - 1)
         END DO
         DSCKWH = &
            PVV(GNP,ECP_D_FPH,UNFPH - OLYR + 1,DBLE(EPDSCRT - UPRSK(UCPSTOI(PLT)))) * &
          PWF(DBLE(EPDSCRT - UPRSK(UCPSTOI(PLT))),OLYR - 1)
         
		 
		DO OPYR = OLYR , UNXPH
            DO VLS = 1 , EPNSTP(OPYR)
			   IGRP = EPLDGR(VLS,OPYR)
               ISEG = EPLDSG(VLS,OPYR)
			   JVLS = MAPVLS(VLS,IGRP,NERC,OPYR)
			   
			   IF (SR_CREDIT(UCPSTOI(PLT)) .GT. 0.0 .AND. STO_OUT_CF2_AVG(NERC) .GT. 0.0) THEN
					 MRGSR = MRGSR - SRAVOID(IGRP,ISEG,OPYR) * NET_STORAGE_SR_NW(JVLS,IGRP,NERC,CURIYR)  !** using PLTDER from CT to calculate based on same 10% CF
			   ENDIF
            END DO
            MRGCAP = MRGCAP - MIN(DINURAL_STORAGE_CAPACITY_CREDIT(CURIYR,NERC), 1.0) * EPRMRGN(OPYR)
         END DO
		 
		 IF (STO_OUT_GEN2(NERC) .NE. 0) THEN
			MRGNRG = MRGNRG + STO_OUT_COST2(NERC)/STO_OUT_GEN2(NERC) *DSCKWH * 8.760 * STO_OUT_CF2_AVG(NERC)
		 END IF
         
		 DSCKWH = DSCKWH * AVGCFC * 8.760
		 
!        DIVIDE DISCOUNTED PRESENT VALUE OF DUALS BY DISCOUNTED KWH TO GET LEVELIZED COSTS
         IF (DSCKWH .GT. 0.0)THEN
            EPTAVD(UCPSTOI(PLT)) = ( MRGCAP + MRGSR + MRGNRG ) / DSCKWH 
            AVDTOT(UCPSTOI(PLT),NERC) = EPTAVD(UCPSTOI(PLT))
            AVDTOT(UCPSTOI(PLT),MNUMNR) = AVDTOT(UCPSTOI(PLT),MNUMNR) + EPTAVD(UCPSTOI(PLT))
            AVDNUM(UCPSTOI(PLT)) = AVDNUM(UCPSTOI(PLT)) + 1
            IF (EPTAVD(UCPSTOI(PLT)) .LT. AVDMIN(UCPSTOI(PLT))) AVDMIN(UCPSTOI(PLT)) = EPTAVD(UCPSTOI(PLT))
            IF (EPTAVD(UCPSTOI(PLT)) .GT. AVDMAX(UCPSTOI(PLT))) AVDMAX(UCPSTOI(PLT)) = EPTAVD(UCPSTOI(PLT))
         ELSE
            EPTAVD(UCPSTOI(PLT)) = 0.0
         END IF
         WRITE(13,2201) CURIYR + UHBSYR,NERC,UPLNTCD(UCPSTOI(PLT)),MRGNRG ,MRGCAP,DSCKWH,EPTAVD(UCPSTOI(PLT)) * SCALPR,AVGCFC, MRGSR, STO_OUT_CF2_AVG(NERC)
 2201    FORMAT(1H ,'NERC,STO,NRG,CAP,KWH,AVD',2I5,1X,A2,1X,4F10.2,3F10.4)
        END IF
       END IF
      END DO
      
      
      IF (NERC .EQ. 1)THEN 
         WRITE(13,2300) CURIYR + UHBSYR,CURIYR + UHBSYR + UPPLYR(WIPC)
 2300    FORMAT(1H ,'!AVD',2I5)
         WRITE(13,2400) CURIYR + UHBSYR,CURIYR + UHBSYR + UPPLYR(WIPC), &
                        UPLNTCD(WIPC),  &
                        UPLNTCD(WIIG),  &
                        UPLNTCD(WIPQ),  &
                        UPLNTCD(WIIS),  &
                        UPLNTCD(WICC),  &
                        UPLNTCD(WIAC),  &
                        UPLNTCD(WICS),  &
                        UPLNTCD(WICT),  &
                        UPLNTCD(WIAT),  &
                        UPLNTCD(WIAN),  &
                        UPLNTCD(WISM),  &
                        UPLNTCD(WIGT),  &
                        UPLNTCD(WIWD),  &
                        UPLNTCD(WIBI),  & 
                        UPLNTCD(WIWN),  &
                        UPLNTCD(WIWF),  &
                        UPLNTCD(WIPV),  &
                        UPLNTCD(WISO),  &
                        UPLNTCD(WIHY)
 2400    FORMAT(1H ,'!AVD',2I6,'  REG',1X,19A7)
      END IF
      WRITE(13,2500) CURIYR + UHBSYR,CURIYR + UHBSYR + UPPLYR(WIPC),URGNME(NERC)(1:4),  &
                     AVDTOT(WIPC,NERC) * SCALPR,  &
                     AVDTOT(WIIG,NERC) * SCALPR,  &
                     AVDTOT(WIPQ,NERC) * SCALPR,  &
                     AVDTOT(WIIS,NERC) * SCALPR,  &
                     AVDTOT(WICC,NERC) * SCALPR,  &
                     AVDTOT(WIAC,NERC) * SCALPR,  &
                     AVDTOT(WICS,NERC) * SCALPR,  &
                     AVDTOT(WICT,NERC) * SCALPR,  &
                     AVDTOT(WIAT,NERC) * SCALPR,  &
                     AVDTOT(WIAN,NERC) * SCALPR,  &
                     AVDTOT(WISM,NERC) * SCALPR,  &
                     AVDTOT(WIGT,NERC) * SCALPR,  &
                     AVDTOT(WIWD,NERC) * SCALPR,  &
                     AVDTOT(WIBI,NERC) * SCALPR,  &
                     AVDTOT(WIWN,NERC) * SCALPR,  &
                     AVDTOT(WIWF,NERC) * SCALPR,  &
                     AVDTOT(WIPV,NERC) * SCALPR,  &
                     AVDTOT(WISO,NERC) * SCALPR,  &
                     AVDTOT(WIHY,NERC) * SCALPR
 2500 FORMAT(1H ,'!AVD',2I5,1X,A4,1X,19F7.2)
      IF (NERC .EQ. UNRGNS)THEN
         DO PLT = 1 , ECP_D_CAP
            IF (AVDNUM(PLT) .GT. 0)THEN
                AVDTOT(PLT,MNUMNR) = AVDTOT(PLT,MNUMNR) / FLOAT(AVDNUM(PLT))
            ELSE
               AVDMIN(PLT) = 0.0
            END IF
         END DO
         WRITE(13,2600) CURIYR + UHBSYR,CURIYR + UHBSYR + UPPLYR(WIPC),  &
                        AVDTOT(WIPC,MNUMNR) * SCALPR,  &
                        AVDTOT(WIIG,MNUMNR) * SCALPR,  &
                        AVDTOT(WIPQ,MNUMNR) * SCALPR,  &
                        AVDTOT(WIIS,MNUMNR) * SCALPR,  &
                        AVDTOT(WICC,MNUMNR) * SCALPR,  &
                        AVDTOT(WIAC,MNUMNR) * SCALPR,  &
                        AVDTOT(WICS,MNUMNR) * SCALPR,  &
                        AVDTOT(WICT,MNUMNR) * SCALPR,  &
                        AVDTOT(WIAT,MNUMNR) * SCALPR,  &
                        AVDTOT(WIAN,MNUMNR) * SCALPR,  &
                        AVDTOT(WISM,MNUMNR) * SCALPR,  &
                        AVDTOT(WIGT,MNUMNR) * SCALPR,  &
                        AVDTOT(WIWD,MNUMNR) * SCALPR,  &
                        AVDTOT(WIBI,MNUMNR) * SCALPR,  & 
                        AVDTOT(WIWN,MNUMNR) * SCALPR,  &
                        AVDTOT(WIWF,MNUMNR) * SCALPR,  &
                        AVDTOT(WIPV,MNUMNR) * SCALPR,  &
                        AVDTOT(WISO,MNUMNR) * SCALPR,  &
                        AVDTOT(WIHY,MNUMNR) * SCALPR
 2600 FORMAT(1H ,'!AVD',2I5,'  AVG',1X,19F7.2) 
         WRITE(13,2700) CURIYR + UHBSYR,CURIYR + UHBSYR + UPPLYR(WIPC),  &
                        AVDMIN(WIPC) * SCALPR,  &
                        AVDMIN(WIIG) * SCALPR,  &
                        AVDMIN(WIPQ) * SCALPR,  &
                        AVDMIN(WIIS) * SCALPR,  &
                        AVDMIN(WICC) * SCALPR,  &
                        AVDMIN(WIAC) * SCALPR,  &
                        AVDMIN(WICS) * SCALPR,  &
                        AVDMIN(WICT) * SCALPR,  &
                        AVDMIN(WIAT) * SCALPR,  &
                        AVDMIN(WIAN) * SCALPR,  &
                        AVDMIN(WISM) * SCALPR,  &
                        AVDMIN(WIGT) * SCALPR,  &
                        AVDMIN(WIWD) * SCALPR,  &
                        AVDMIN(WIBI) * SCALPR,  &
                        AVDMIN(WIWN) * SCALPR,  &
                        AVDMIN(WIWF) * SCALPR,  &
                        AVDMIN(WIPV) * SCALPR,  &
                        AVDMIN(WISO) * SCALPR,  &
                        AVDMIN(WIHY) * SCALPR
 2700    FORMAT(1H ,'!AVD',2I5,'  MIN',1X,19F7.2) 
         WRITE(13,2800) CURIYR + UHBSYR,CURIYR + UHBSYR + UPPLYR(WIPC),  &
                        AVDMAX(WIPC) * SCALPR,  &
                        AVDMAX(WIIG) * SCALPR,  &
                        AVDMAX(WIPQ) * SCALPR,  &
                        AVDMAX(WIIS) * SCALPR,  &
                        AVDMAX(WICC) * SCALPR,  &
                        AVDMAX(WIAC) * SCALPR,  &
                        AVDMAX(WICS) * SCALPR,  &
                        AVDMAX(WICT) * SCALPR,  &
                        AVDMAX(WIAT) * SCALPR,  &
                        AVDMAX(WIAN) * SCALPR,  &
                        AVDMAX(WISM) * SCALPR,  &
                        AVDMAX(WIGT) * SCALPR,  &
                        AVDMAX(WIWD) * SCALPR,  &
                        AVDMAX(WIBI) * SCALPR,  & 
                        AVDMAX(WIWN) * SCALPR,  &
                        AVDMAX(WIWF) * SCALPR,  &
                        AVDMAX(WIPV) * SCALPR,  &
                        AVDMAX(WISO) * SCALPR,  &
                        AVDMAX(WIHY) * SCALPR
 2800    FORMAT(1H ,'!AVD',2I5,'  MAX',1X,19F7.2)
         WRITE(13,2300) CURIYR + UHBSYR,CURIYR + UHBSYR + UPPLYR(WIPC)
      END IF
!
!     write any remaining records to the database
!
      IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
       DO TNUM = 1 , NUMTABS
         IF (LOOPING(TNUM) .NE. 0) THEN
           COLVALS(:,:) = COLV(TNUM,:,:)
           CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!          CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
           CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
           LOOPING(TNUM) = 0
         ENDIF
       ENDDO
      ENDIF

      CALL STRBOUT(CURIYR,NERC)
!
      RETURN

      END
!
!
!     EPO$BANK STORES ALLOWANCE BANKING AND COSTS FOR EFD ALLOWANCE
!     COMPUTATIONS (SO2 AND NOX) AND FOR REPORTING
!
      SUBROUTINE EPO$BANK
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'cdsparms'
      include 'emmparm'
      include 'emission'
      include 'uso2grp'
      include 'ecpcntl'
      include 'dispin'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'plntin'
      include 'plntctl'
      include 'uecpout'
      include 'eusprc'
      include 'edbdef'
      include 'ecp_coal'
      include 'coalemm'
      include 'emoblk'
      include 'ab32'
      include 'csapr'
      include 'uefdout'
      include 'emm_aimms'
!
!
      COMMON/COAL_AVAIL/ AVAIL
      INTEGER*4 AVAIL(6,MNUMNR)
!
      INTEGER NUMTABS
      PARAMETER (NUMTABS = 2)        ! total number of database tables
!

!
      REAL*8 DUAL_VALUE,LEVEL,LOWER,UPPER,CVALUE(5),DFAC,FAC2,PSO2(ECP_D_XPH),TWOVAL(5),TREV,TCAR,CRL(ECP_D_FPH)
      REAL*8 KW(ECP_D_FPH),PV_KW,PVV,FAC,PWF,DSCRT
      REAL*8 PVGNP,ACT,NOX_LIMIT(ECP_D_XPH),ROWVAL(5),COLVAL(5),PCL(ECP_D_FPH),OBJFAC,ROWVAL2(5),BANK(MX_SO2_GRP)
      REAL*4 SUMNOX,MAX_PECP,RETRO_BANK,SV_BNK_1
      REAL*4 ECP_PRCCAR(ECP_D_XPH,MNUMYR)
      INTEGER*4 NOXSYR,XYR,MYR,M2YR,FRG
      INTEGER*4 OPYRS,I_HG,I_ACI,J_ACI,I_RANK,IPLT,COF_EMM,KYR
      INTEGER*4 PYR,MYR0,MYR1
      INTEGER IRET,IYR,I,NERC,JGRP,ISO2,JRET
      CHARACTER*16 ROW,COL
      CHARACTER*2 STATUS
      CHARACTER*2 DEL
      INTEGER*4 INOX,CL_SC
      CHARACTER*2 ANOX,C2
      CHARACTER*2 SC_CD
      CHARACTER*1 SCRB_CD(2),RANK_CD,ACI_CD(MX_ACI+1),COF_CD(ECP_D_RCF)
      CHARACTER*1 SO2_CODE
      INTEGER IRG,IFL,ISCRB
!
      REAL*8 ECP_SO2_FAC(MX_SO2_GRP,ECP_D_XPH)
      COMMON /ECP_SO2_FACTORS/ ECP_SO2_FAC
!
!      REAL*8 BANK_HG(NDREG),BANK_NOX(NOX_D_GRP) !moved to emm_aimms
!      COMMON /BANKS/ BANK_HG,BANK_NOX
!
      COMMON /TOT_RATES/ TOT_RATE1,TOT_RATE2,TOT_TYPE
      REAL*8 TOT_RATE1(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH),TOT_RATE2(MX_NCOALS+MX_ISCV,NDREG,0:ECP_D_FPH)
      INTEGER*4 TOT_TYPE(MX_NCOALS+MX_ISCV)
!
      CHARACTER*2 CLRG(NDREG)
!
      DATA CLRG/'NE',  &
                'YP',  &
                'S1',  &
                'S2',  &
                'GF',  &
                'OH',  &
                'EN',  &
                'KT',  &
                'AM',  &
                'C1',  &
                'C2',  &
                'WS',  &
                'MT',  &
                'CU',  &
                'ZN',  &
                'PC'/

      ecpsub='EPO$BANK'

!
      ACI_CD(1) = "0"
      ACI_CD(2) = "1"
      ACI_CD(3) = "2"
      ACI_CD(4) = "3"
      ACI_CD(5) = "4"
      ACI_CD(6) = "5"
      ACI_CD(7) = "6"
      ACI_CD(8) = "7"
!
      COF_CD(1) = "1"
      COF_CD(2) = "2"
      COF_CD(3) = "3"
      COF_CD(4) = "4"
      COF_CD(5) = "5"
!
      SCRB_CD(1) = "S"
      SCRB_CD(2) = "U"
!
      LOOPING = 0
      NUMCOLS = 0
      DYNSTM = ' '
      WRTSTM = ' '
      COLVALS = 0.0
      COLV = 0.0
      CHCOLVALS = ' '
      CHCOLV = ' '
      LOOPING = 0
!
      CALL COMBINE_COAL_RATES(CURIYR)
!
      DO IYR = 1 , ECP_D_FPH
         KW(IYR) = 1.0
      END DO
      DSCRT = DBLE(EPDSCRT)
      PV_KW = PVV(KW,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
!
      STATUS = '  '
      DUAL_VALUE = DBLE(0.00)
      LEVEL = DBLE(0.00)
!
      DEL = ' :'
!
!     INITIALIZE Mercury Allowance Price and Quantity
!
      DO I_HG = 1, NUM_HG_GRP
         ECP_PHG(I_HG,CURIYR) = 0.0
         ECP_QHG(I_HG,CURIYR) = 0.0
      ENDDO
!
!     GET DUAL FOR CURRENT YEAR Mercury ALLOWANCE Prices
!
      IF (USW_HG .GT. 0) THEN
         DO IYR = 1 , UNXPH
            IF (IYR .LT. UNXPH) THEN
               FAC = DBLE(1.0)
            ELSE
               FAC = DBLE(1.0) / PV_KW
            END IF
            DO I_HG = 1 , NUM_HG_GRP
               ROW = 'EUHGXX'//UPRGCD(I_HG)//UPYRCD(IYR); call makmsk(ROW_mask,':EUHGXX:',UPRGCD(I_HG),UPYRCD(IYR))
               CALL CWFSROW(ROW,'AUP     ',STATUS,CVALUE,ROW_mask,IRET)
               ACT = CVALUE(1) * 0.001
               UPPER = CVALUE(2) * 0.001
               DUAL_VALUE = CVALUE(3)
!
!              STORE CURRENT YEAR ALLOWANCE PRICE AND EMISSIONS
!
               IF (IYR .EQ. 1) THEN
                 ECP_PHG(I_HG,CURIYR) = DUAL_VALUE * 1000.0 / PWF(DSCRT, 1) / UPGNPD(CURIYR)
                 ECP_QHG(I_HG,CURIYR) = ACT
               END IF
               IF (IYR .EQ. 2 .AND. CURIYR .GE. HG_BYR - UHBSYR) THEN
                  COL = 'BNK_HG'//UPRGCD(I_HG)//UPYRCD(IYR); call makmsk(COL_mask,':BNK_HG:',UPRGCD(I_HG),UPYRCD(IYR))
                  CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
                  IF (CURIYR .LT. HG_SYR - UHBSYR) THEN
                     BANK_HG(I_HG) = BANK_HG(I_HG) + COLVAL(1)
                     BNK_TO_CMM_HG(CURIYR) = -0.001 * COLVAL(1)
                  ELSE
                     BNK_TO_CMM_HG(CURIYR) = 0.001 * (BANK_HG(I_HG) - COLVAL(1))
                     BANK_HG(I_HG) = COLVAL(1)
                  END IF
               END IF
               WRITE(18,2334) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,I_HG,ROW,ACT,UPPER,DUAL_VALUE*1000.0,UPGNPD(CURIYR),FAC,BANK_HG(I_HG),BNK_TO_CMM_HG(CURIYR)
 2334          FORMAT(1X,"MERCURY",3(":",I4),":",A8,7(":",F15.3))
            END DO
         END DO
      END IF
!
!     Retrieve Cofiring Retrofit Decisions
!
      DO NERC = 1 , UNRGNS
      DO IRG = 1 , NDREG
         DO COF_EMM = 1 , ECP_D_RCF
            COL = 'B'//UPRGCD(NERC)//EPFLCD(IRG)//COF_CD(COF_EMM)//'COF'//UPYRCD(1); call makmsk(COL_mask,':B:',UPRGCD(NERC),EPFLCD(IRG),COF_CD(COF_EMM),':COF:',UPYRCD(1))
            IYR = UPCFCLT + 1
            CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
           IF (IRET .EQ. 0)THEN
            WRITE(18,3913) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,NERC,IRG,COF_EMM,COL,STATUS,(COLVAL(I),I=1,5)
 3913       FORMAT(1X,"COF_RETRO",5(":",I4),":",A8,":",A2,5(":",E12.3))
            DO IYR = CURIYR + UPCFCLT , UNYEAR + ECP_D_XPH
               UCF_RCAP1(COF_EMM,NERC,IRG,IYR) = UCF_RCAP1(COF_EMM,NERC,IRG,IYR) + COLVAL(1) * 1000.0
            END DO
           END IF
            END DO
         END DO
      END DO
!     Update Cofiring Retrofit Limit
      ROW = 'LUXXCOF'//UPYRCD(1); call makmsk(ROW_mask,':LUXXCOF:',UPYRCD(1))
      CALL CWFSROW(ROW,'A       ',STATUS,CVALUE,ROW_mask,IRET)
!     write(6,3344) curiyr+1989,upbqmax,cvalue(1),  &
!              MAX(upbqmax,CVALUE(1) * (DBLE(1.0) + upbrmax))
!3344 format(1h ,'!cofret',i4,4f10.3)
      UPBQMAX = MAX(UPBQMAX,CVALUE(1) * (DBLE(1.0) + UPBRMAX))
!
!     GET DUAL FOR CURRENT YEAR ALLOWANCE COST AND EMISSIONS
!
      DO ISO2 = 1 , NUM_SO2_GRP
         BANK(ISO2) = DBLE(0.0)
         WRITE(SO2_CODE,'(I1)') ISO2
         DFAC = CL_SCST
         FAC2 = 1.0
         DO IYR = 1 , UNXPH
            ROW = 'EUSO2X'//SO2_CODE//UPYRCD(IYR); call makmsk(ROW_mask,':EUSO2X:',SO2_CODE,UPYRCD(IYR))
            CALL CWFSROW(ROW,'AUP     ',STATUS,CVALUE,ROW_mask,IRET)
            ACT = CVALUE(1)
            UPPER = CVALUE(2)
            DUAL_VALUE = CVALUE(3)
            MYR1 = MIN(CURIYR + IYR , UNYEAR)
            MYR0 = MIN(CURIYR +IYR - 1 , MYR1 - 1)
            IF ((CURIYR + UHBSYR) .GE. UYR_RSCAIR .AND. ISO2 .EQ. 1 .AND. IYR .EQ. 1)THEN
               BANK(ISO2) = UPPER - ACT
            END IF
            IF (IYR .LT. UNXPH) THEN
               PV_KW = 1.0
               FAC = 1.00
               FAC2 = FAC2 * FAC
            ELSE
               PV_KW = PVV(KW,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
               FAC = 1.000 / PV_KW
               FAC2 = FAC2 * FAC
            END IF
            IF (DUAL_VALUE .GT. DBLE(0.005))THEN
            PSO2(IYR) = DBLE(1000.0) * DUAL_VALUE
            ELSE
               PSO2(IYR) = DBLE(0.0)
            END IF
            COL = 'BNK'//SO2_CODE//'SO2' //UPYRCD(IYR); call makmsk(COL_mask,':BNK:',SO2_CODE,':SO2:' ,UPYRCD(IYR))
            CALL CWFSCOL(COL,'A       ',STATUS,TWOVAL,COL_mask,IRET)
            LEVEL=TWOVAL(1)
            WRITE(18,1313) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,ROW,STATUS,PSO2(IYR),FAC,FAC2,DFAC,PV_KW,UPGNPD(CURIYR),UPGNPD(MYR0),UPGNPD(MYR1), &
               UPSXSMTH,UPTPSO2(CURIYR,ISO2),LEVEL,UPPER
 1313       FORMAT(1X,"EPALLOW",2(":",I4),":",A8,":",A2,11(":",F10.3),":",F24.1)
!           Label:EPALLOW:CYEAR:PYEAR:ROW:STATUS:EPALLOW:FAC:FAC2:DFAC:PV_KW:UPGNPD_CYR):UPGNPD_MYR0:UPGNPD_MYR1:UPSXSMTH:UPTPSO2:LEVEL:UPPER

            WRITE(18,7911) CURIRUN, CURIYR+UHBSYR, IYR, ISO2, ECP_PSO2(IYR,CURIYR,ISO2), FAC2, ECP_SO2_FAC(ISO2,IYR), &
               UPGNPD(CURIYR), PSO2(IYR), PSO2(IYR) * ECP_SO2_FAC(ISO2,IYR) / UPGNPD(CURIYR)
 7911       FORMAT(1X,"ECP_PSO2",4(":",I4),6(":",F15.6))

            FAC2 = ECP_SO2_FAC(ISO2,IYR)

            ECP_PSO2(IYR,CURIYR,ISO2) = PSO2(IYR) * FAC2 / UPGNPD(CURIYR)

            IF (IYR .EQ. 1) ECP_QSO2(CURIYR) = ACT
!                                                                        !//EMMDB//
!          WRITE OUT ALLOWANCE TABLE FOR EMM DATABASE                       !//EMMDB//
!                                                                        !//EMMDB//
           IF (USW_DBS .GT. 0) THEN
            WRITE(UF_DBS,3000) DEL,CURIYR,DEL,IYR,DEL,STATUS,DEL,             & !//EMMDB//
                 PSO2(IYR),DEL,TRIM(SCEN_DATE)                                 !//EMMDB//
3000       FORMAT(1X,'ECPALLOW',A2,I4,A2,I4,A2,A4,A2,F10.3,A2,A)            !//EMMDB//
           END IF
!
           TNUM = 1
           IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
             IF (LOOPING(TNUM) .EQ. 0) THEN
               NUMCOLS(TNUM) = 5
               DYNSTM(TNUM) =  'INSERT INTO ECP_SO2_ALLOWANCE_COST VALUES(?,?,?,?,?,?)'
               WRTSTM(TNUM) =  'ECP_SO2_ALLOWANCE_COST'
             ENDIF
             LOOPING(TNUM) = LOOPING(TNUM) + 1
             COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                !//EMMDB//
             COLV(TNUM,2,LOOPING(TNUM)) = ISO2                                  !//EMMDB//
             COLV(TNUM,3,LOOPING(TNUM)) = IYR                                   !//EMMDB//
             CHCOLV(TNUM,4,LOOPING(TNUM)) = STATUS                                !//EMMDB//
             COLV(TNUM,5,LOOPING(TNUM)) = PSO2(IYR)                            !//EMMDB//
             IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
               COLVALS(:,:) = COLV(TNUM,:,:)
               CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!              CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               LOOPING(TNUM) = 0
              ENDIF
           ENDIF
!
         END DO
!
!        FOR NOW LOAD FTAB VALUE WITH YEAR 1 VALUE
!
            ECP_PSO2(0,CURIYR,ISO2) = ECP_PSO2(1,CURIYR,ISO2)
!           ECP_PSO2(0,CURIYR,ISO2) = PSO2(1) / PWF(DFAC * DSCRT, 1) /UPGNPD(CURIYR)
!        SET FTAB ALLOWANCE PRICE TO 0 IF NO CAIR
         IF (UYR_NOCAIR .GT. 0 .AND. (CURIYR + UHBSYR) .GE. UYR_NOCAIR)THEN
            ECP_PSO2(0,CURIYR,ISO2) = 0.0
         END IF
      END DO
!
!     GET DUAL FOR COAL REGION ALLOWANCE COSTS IN EPA TRANSPORT RULE, IF APPROPRIATE
!
      IF ((CURIYR + UHBSYR) .GE. TSO2_YR_BY_CLRG)THEN
         DO ISO2 = 1 , NDREG
            ECP_PSO2CL(CURIYR,ISO2) = 0.0
            IF (TSO2_SHR_BY_CLRG(ISO2,1) .GT. 0.0)THEN
               FAC2 = 1.0
               DO IYR = 1 , 1
                  ROW = 'EUSO2'//CLRG(ISO2)//UPYRCD(IYR); call makmsk(ROW_mask,':EUSO2:',CLRG(ISO2),UPYRCD(IYR))
                  CALL CWFSROW(ROW,'AUP     ',STATUS,CVALUE,ROW_mask,IRET)
                  ACT = CVALUE(1)
                  UPPER = CVALUE(2)
                  DUAL_VALUE = CVALUE(3)
                  PSO2(IYR) = DBLE(1000.0) * DUAL_VALUE
                  ECP_PSO2CL(CURIYR,ISO2) = PSO2(IYR) * FAC2 / UPGNPD(CURIYR)
               END DO
            END IF
         END DO
         IF ((CURIYR + UHBSYR) .EQ. TSO2_YR_BY_CLRG)  &
         write(13,3332) (clrg(iso2),iso2 = 1 , ndreg)
 3332 format(1h ,'!pso2cl',4x,16(6x,a2))
         write(13,3333) curiyr+1989,(ecp_pso2cl(curiyr,iso2) * scalpr,iso2 = 1 , ndreg)
 3333 format(1h ,'!pso2cl',i4,16f8.1)
      END IF
!
!     Get Carbon Data as well
!
      IF (USW_CAR .EQ. 1 .OR. USW_CAR .EQ. 3)THEN
         DO IYR = 1 , UNFPH
            M2YR = MIN(CURIYR + UNXPH + IYR - 2 , UNYEAR)
            IF (ELEC_FLAG /= 0) THEN
               CRL(IYR) = EMISSIONS_GOAL(M2YR)
            ELSE IF ((PERMIT_FLAG /= 0) .OR. (MARKET_FLAG /= 0)) THEN
               CRL(IYR) = EMISSIONS_GOAL(M2YR) - EMRSC(11,1,M2YR) - EMCMC(11,1,M2YR) - EMINCC(11,1,M2YR) - EMTRC(11,1,M2YR) - EMNT(11,1,M2YR) * 0.001
!              CRL(IYR) = EMISSIONS_GOAL(M2YR) - ECP_SCAR(M2YR)
            END IF
         END DO
         TCAR = PVV(CRL,ECP_D_FPH,UNFPH,DSCRT)

       TREV = 0.0
       FAC2 = 1.0
      DO IYR = 1 , UNXPH
         ROW = 'EUCARXX'//UPYRCD(IYR); call makmsk(ROW_mask,':EUCARXX:',UPYRCD(IYR))
         CALL CWFSROW(ROW,'ASLUP   ',STATUS,ROWVAL,ROW_mask,IRET)
         DUAL_VALUE = ROWVAL(5)
         TREV = TREV + ROWVAL(4) * ROWVAL(5) / UPGNPD(CURIYR) * SCALPR
         IF (IYR .LT. UNXPH) THEN
            PV_KW = 1.0
!           FAC = 1.00
!           FAC2 = FAC2 * FAC
            FAC2 = PWF(DSCRT , 1)
         ELSE
            PV_KW = PVV(KW,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT)
            FAC = 1.000 / PV_KW
            FAC2 = FAC2 * FAC
         END IF

         ECP_PRCCAR(IYR,CURIYR) = DUAL_VALUE * FAC2 /UPGNPD(CURIYR)
         IF (IYR .EQ. 1)THEN
           ECP_LCAR(CURIYR) = ROWVAL(4)
           ECP_QCAR(CURIYR) = ROWVAL(1)
           ECP_PCAR(0,CURIYR) = ECP_PRCCAR(IYR,CURIYR)
         END IF

         WRITE(18,1321) CURIYR+UHBSYR,CURIYR+IYR-1+UHBSYR,ROW,STATUS, &
            (ROWVAL(I),I=1,5),UPGNPD(CURIYR),UPGNPD(CURIYR+IYR-1),DSCRT,FAC,ECP_PRCCAR(IYR,CURIYR)*SCALPR,TREV,TCAR
 1321    FORMAT(1X,"CARBON",2(":",I4),":",A8,":",A2,12(":",F10.4))
      END DO
      END IF
!
!     Get Regional Carbon Allowance Price
!
      DO JGRP = 1 , CO2_GRP
         EPCARPR(JGRP,CURIYR) = 0.0
         ROW = 'EUCAR'//CO2_RG(JGRP)//UPYRCD(1); call makmsk(ROW_mask,':EUCAR:',CO2_RG(JGRP),UPYRCD(1))
         CALL CWFSROW(ROW,'AUP     ',STATUS,CVALUE,ROW_mask,IRET)
         IF (IRET .EQ. 0)THEN
            ACT = CVALUE(1)
            UPPER = CVALUE(2)
            DUAL_VALUE = CVALUE(3)
            EPCARPR(JGRP,CURIYR) = DUAL_VALUE / PWF(DSCRT, 1) / UPGNPD(CURIYR)
            IF (UPPER .GT. DBLE(0.0))THEN
            CARECP(JGRP,CURIYR) = ACT
            ELSE
               COL = 'CARLM'//CO2_RG(JGRP)//UPYRCD(1); call makmsk(COL_mask,':CARLM:',CO2_RG(JGRP),UPYRCD(1))
               CALL CWFSCOL(COL,'A       ',STATUS,CVALUE,COL_mask,IRET)
               ACT = CVALUE(1)
               CARECP(JGRP,CURIYR) = ACT
            END IF
!           FOR CA AB32, ADJUST ECP EMISSIONS TO EXCLUDE INDUSTRIAL AND REFINERY QUANTITIES
!           IF (JGRP .EQ. CARGRP_CA)CARECP(JGRP,CURIYR) = CARECP(JGRP,CURIYR) -  &
!              AB_COVD_EM_IND(CURIYR) - AB_COVD_EM_REF(CURIYR) - AB_COVD_EM_FUE(CURIYR) - AB_COVD_EM_OTH(CURIYR)
         END IF
      if (upper .lt. dble(999.9))write(13,2323) curiyr+1989,row,cvalue(1),cvalue(2),cvalue(3),epcarpr(jgrp,curiyr) * scalpr
 2323 format(1h ,'!carecp',i4,a10,6f10.2)
      END DO
!
!     GET AMOUNT OF BANKING IN CURRENT YEAR
!
      DO ISO2 = 1 , NUM_SO2_GRP
         WRITE(SO2_CODE,'(I1)') ISO2
!
!        ADJUST POTENTIAL RETROFIT BANK BY ACTUAL RETROFIT BANK
!
!
         XYR = 0
         DO MYR = CURIYR , MIN(UNYEAR , CURIYR + UNFPH - 1)
            IF (USO2_BA_CRD(MYR) .GT. USO2_BA_CRD(MYR-1)) THEN
               XYR = MIN(UNXPH , MYR - CURIYR + 1)
               EXIT
            END IF
         END DO
         IF (XYR .GT. 1) THEN
            COL = 'BNK'//SO2_CODE//'XTR'//UPYRCD(XYR); call makmsk(COL_mask,':BNK:',SO2_CODE,':XTR:',UPYRCD(XYR))
            CALL CWFSCOL(COL,'A       ',STATUS,TWOVAL,COL_mask,IRET)
            LEVEL=TWOVAL(1)
            RETRO_BANK = LEVEL * 1000.0
            SV_BNK_1 = EMELBNK(1,ISO2)
            EMELBNK(1,ISO2) = MIN(EMELBNK(1,ISO2),RETRO_BANK)
         ELSE
            RETRO_BANK = 0.0
            SV_BNK_1 = 0.0
         END IF
!
         IF (UYR_RSCAIR .GT. 0 .AND. (CURIYR + UHBSYR) .GE. UYR_RSCAIR .AND. UDSI_YR .LT. 9990)THEN
          IF (EMELBNK(CURIYR,ISO2) .LE. 0.0)THEN
            COL = 'BNK'//SO2_CODE//'SO2'//UPYRCD(1); call makmsk(COL_mask,':BNK:',SO2_CODE,':SO2:',UPYRCD(1))
            CALL CWFSCOL(COL,'A       ',STATUS,TWOVAL,COL_mask,IRET)
            LEVEL=TWOVAL(1)
            EPBANK = EMELBNK(CURIYR - 1,ISO2) * 0.001 - LEVEL
            EPBANK = EPBANK + BANK(ISO2) * SO2_SHR_ALW_GRP(CURIYR,ISO2)
          ELSE
            EPBANK = EMELBNK(CURIYR,ISO2) * 0.001
          END IF
         ELSE
         COL = 'BNK'//SO2_CODE//'SO2'//UPYRCD(2); call makmsk(COL_mask,':BNK:',SO2_CODE,':SO2:',UPYRCD(2))
         CALL CWFSCOL(COL,'A       ',STATUS,TWOVAL,COL_mask,IRET)
         LEVEL=TWOVAL(1)
         EPBANK = LEVEL
         END IF
!
!        ADJUST CUMULATIVE BANK FOR CURRENT YEAR USE
!
         IF (UYR_NOCAIR .LE. 0 .OR. (CURIYR + UHBSYR) .LT. UYR_NOCAIR)THEN
          IF (CURIYR + UHBSYR .GT. UPSYEAR .AND. EMELBNK(CURIYR,ISO2) .EQ. 0.0) THEN

            IF (XYR .EQ. 2) THEN
               EMELBNK(CURIYR,ISO2) = EPBANK * 1000.0 + EMELBNK(1,ISO2)
            ELSE
               EMELBNK(CURIYR,ISO2) = EPBANK * 1000.0
            END IF
          END IF
          EMELBNK(CURIYR-1,ISO2) = (EMELBNK(CURIYR-1,ISO2) - EMELBNK(1,ISO2)) * (USO2_BA_CRD(CURIYR-1) / USO2_BA_CRD(CURIYR)) + EMELBNK(1,ISO2)
         ELSE
          EPBANK = 0.0
          EMELBNK(CURIYR,ISO2) = 0.0
         END IF
!
!        STORE BANKING EXCEPT IF LAST YEAR
!
         WRITE(18,1314) CURCALYR,ISO2,COL,STATUS,LEVEL,EMRFSA(CURIYR,ISO2),EMELBNK(CURIYR-1,ISO2),EPBANK*1000.0,EMELBNK(CURIYR,ISO2),EMELBNK(1,ISO2), &
            (USO2_BA_CRD(CURIYR-1) / USO2_BA_CRD(CURIYR)),RETRO_BANK,SV_BNK_1
 1314    FORMAT(1X,"EMELBNK",2(":",I4),":",A8,":",A2,9(":",F12.3))
!                                                                           !//EMMDB//
!          WRITE OUT BANKING TABLE FOR EMM DATABASE                         !//EMMDB//
!                                                                           !//EMMDB//
           IF (USW_DBS .GT. 0) THEN
              WRITE(UF_DBS,4000) DEL,CURIYR,DEL,STATUS,DEL,EPBANK,              & !//EMMDB//
               DEL,TRIM(SCEN_DATE)                                            !//EMMDB//
           END IF
!
           TNUM = 2
           IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
             IF (LOOPING(TNUM) .EQ. 0) THEN
               NUMCOLS(TNUM) = 4
               DYNSTM(TNUM) =  'INSERT INTO ECP_SO2_BANKING VALUES(?,?,?,?,?)'
               WRTSTM(TNUM) =  'ECP_SO2_BANKING'
             ENDIF
             LOOPING(TNUM) = LOOPING(TNUM) + 1
             COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                         !//EMMDB//
             COLV(TNUM,2,LOOPING(TNUM)) = ISO2                                           !//EMMDB//
             CHCOLV(TNUM,3,LOOPING(TNUM)) = STATUS                                         !//EMMDB//
             COLV(TNUM,4,LOOPING(TNUM)) = EPBANK                                         !//EMMDB//
             IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
               COLVALS(:,:) = COLV(TNUM,:,:)
               CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!              CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               LOOPING(TNUM) = 0
             ENDIF
           ENDIF
!
4000       FORMAT(1X,'ECPBANK',A2,I4,A2,A4,A2,F10.3,A2,A)                  !//EMMDB//

      END DO ! ISO2
!
!     write any remaining records to the database
!
      IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
       DO TNUM = 1 , NUMTABS
         IF (LOOPING(TNUM) .NE. 0) THEN
           COLVALS(:,:) = COLV(TNUM,:,:)
           CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!          CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
           CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
           LOOPING(TNUM) = 0
         ENDIF
       ENDDO
        ENDIF
!
!     GET DUAL FOR CURRENT YEAR NOX CONTROL COST
!     ALSO DETERMINE LEVELIZED ALLOWANCE COST
!
      DO INOX = 1 , NOX_D_GRP
        IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
           DO IYR = 1 , CURIYR
              EPNOXPR(INOX,IYR) = 0.0
           END DO
        END IF
        IF ((CURIYR + NOX_LT) .LE. UNYEAR) THEN
         EPNOXPR(INOX,CURIYR + NOX_LT) = 0.0
         ECP_QNOX(INOX,CURIYR + NOX_LT) = 0.0
        END IF
      END DO
!
      DO INOX = 1 , NOX_GRP
         SUMNOX = 0.0
         NOXSYR = 0
         DO IYR = NOX_LT + 1 , UNXPH
!           IF (INOX .LT. 10) THEN
!              WRITE(C1,'(I1)') INOX
!              ANOX = "0"//C1
!           ELSE
!              WRITE(ANOX,'(I2)') INOX
!           END IF
               ANOX = NOX_RG(INOX)
            ROW = 'EUNOX'//ANOX//UPYRCD(IYR); call makmsk(ROW_mask,':EUNOX:',ANOX,UPYRCD(IYR))
            CALL CWFSROW(ROW,'AUP     ',STATUS,CVALUE,ROW_mask,IRET)
            JRET = IRET
            ACT = CVALUE(1)
            UPPER = CVALUE(2)
            DUAL_VALUE = CVALUE(3)
!
            IF (IYR .EQ. 3 .AND. CURIYR .GE. NOX_BYR - UHBSYR - 1 .AND. INOX .GT. 1 .AND. DUAL_VALUE .GT. 0.0001) THEN
               COL = 'BNK_NX'//UPRGCD(INOX)//UPYRCD(IYR); call makmsk(COL_mask,':BNK_NX:',UPRGCD(INOX),UPYRCD(IYR))
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CURIYR .LE. NOX_SYR - UHBSYR - 2) THEN
                  BANK_NOX(INOX) = BANK_NOX(INOX) + COLVAL(1)
               ELSE
                  BANK_NOX(INOX) = COLVAL(1)
               END IF
            END IF

            WRITE(18,4317) CURIRUN, CURCALYR, CURIYR+IYR+1988, JRET, IRET, INOX, NOX_LT, ROW, ACT, UPPER, DUAL_VALUE
 4317       FORMAT(1X,"ECP_QNOX",7(":",I4),":",A16,":",F15.3,":",E21.6,":",F21.6)

!
!           STORE NOX EMISSIONS AND ALLOWANCE COSTS (DUAL OF ROW)
!
            IF (JRET .EQ. 0) THEN
               IF (IYR .EQ. (NOX_LT + 1) .AND. (CURIYR + NOX_LT) .LE. UNYEAR)ECP_QNOX(INOX,CURIYR + NOX_LT) = ACT
               EPALLNOX(INOX,IYR) = DUAL_VALUE * 1000.0
               SUMNOX = SUMNOX + EPALLNOX(INOX,IYR)
!
!              IDENTIFY YEAR WITH 1ST NONZERO DUAL TO START LEVELIZATION
!
               IF (NOXSYR .EQ. 0 .AND. EPALLNOX(INOX,IYR) .GT. 1.001)NOXSYR = IYR
            ELSE
               EPALLNOX(INOX,IYR) = 0.0
            END IF
         END DO
!
!        GET LEVELIZED INFLATION FACTOR
!
         PYR = MIN(CURIYR + NOX_LT , UNYEAR)
         IF (NOXBYGRP(INOX,PYR) .GT. 0.0 .AND. NOXSYR .GT. 0)THEN
!           IF (EPALLNOX(INOX,NOX_LT+1) .GT. 0.0) THEN
!              EPNOXPR(INOX,CURIYR + NOX_LT) = EPALLNOX(INOX,NOX_LT + 1) / UPGNPD(CURIYR + NOX_LT)
!           ELSE
               OPYRS = UNFPH - NOXSYR + 1
               CALL EP$LGNP(NOXSYR,OPYRS,AVGUDCR,PVGNP)   !use avg util discount rate, used for retrofits
!
!              STORE LEVELIZED NOX ALLOWANCE COST
!
               EPNOXPR(INOX,CURIYR + NOX_LT) = SUMNOX / PVGNP
!           END IF
         ELSE
            EPNOXPR(INOX,CURIYR + NOX_LT) = 0.0
         END IF
!        SET EAST/WEST ALLOWANCE PRICES TO 0 IF NO CAIR
         IF (UYR_NOCAIR .GT. 0 .AND. (CURIYR + UHBSYR + NOX_LT) .GE. UYR_NOCAIR .AND. INOX .GT. 1)THEN
            EPNOXPR(INOX,CURIYR + NOX_LT) = 0.0
         END IF
         WRITE(18,1711) CURIYR+UHBSYR,CURIYR+UHBSYR+NOX_LT,INOX,EPNOXPR(INOX,CURIYR+NOX_LT),AVGUDCR,PVGNP,(EPALLNOX(INOX,IYR),IYR=NOX_LT+1,UNXPH),BANK_NOX(INOX)
 1711    FORMAT(1X,"NOX_DUAL_",3(":",I4),14(":",F12.3))
         DO IYR = NOX_LT + 1 , UNXPH - 1
            PYR = MIN(IYR + CURIYR - 1  , UNYEAR)
            NOX_LIMIT(IYR) = NOXBYGRP(INOX,PYR)
         END DO
         NOX_LIMIT(UNXPH) = NOXBYGRP(INOX,UNYEAR)
         WRITE(18,1712) CURIYR+UHBSYR,CURIYR+UHBSYR+NOX_LT,INOX,EPNOXPR(INOX,CURIYR+NOX_LT),AVGUDCR,PVGNP,(NOX_LIMIT(IYR),IYR=NOX_LT+1,UNXPH)
 1712    FORMAT(1X,"NOX_LIMIT",3(":",I4),13(":",F12.3))
      END DO
!
!     Print INFO on Coal Fuel Rows
!
      DO IYR = 1 , UNXPH
         DO FRG = 1 , UNFRGN
            IRG = EPCLMP(FRG)
            DO IPLT = 1 , NUTSEC
               IF (C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                  ISCRB = ECP_SCRUB(IPLT,CURIYR)
                  ROW = 'F'//EPFLCD(FRG)//UPLNTCD(IPLT)//SCRB_CD(ISCRB)//'XX'//UPYRCD(IYR); call makmsk(ROW_mask,':F:',EPFLCD(FRG),UPLNTCD(IPLT),SCRB_CD(ISCRB),':XX:',UPYRCD(IYR))
                  CALL CWFSROW(ROW,'ASLUP   ',STATUS,ROWVAL,ROW_mask,IRET)
                  CALL CWFSCOL(ROW,'ACLUD   ',STATUS,COLVAL,ROW_mask,IRET)
                  WRITE(18,1911) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,FRG,IRG,IPLT,SCRB_CD(ISCRB),ROW,STATUS,(ROWVAL(I),I=1,5),COLVAL(1),COLVAL(2)
 1911             FORMAT(1X,"CL_ROW",5(":",I4),":",A1,":",A8,":",A2,7(":",E12.3))
!
!                 Label:CL_ROW:CYEAR:PYEAR:FRG:IRG:IPLT:SCRB_CD:ROW:STATUS:ACT:SLACK:LL:UL:DUAL:SAFETY:BIGM
!
               END IF
            END DO
         END DO
         DO IRG = 1 , NDREG
            DO IPLT = 1 , NUTSEC
               ISCRB = ECP_SCRUB(IPLT,CURIYR)
               IF (DV_SUB(IRG,ISCRB) .EQ. 1) THEN
 1910             FORMAT(1X,"DV_ROW",3(":",I4),":",A8,2(":",A2),5(":",E12.3))
                  ROW = 'FDV'//EPFLCD(IRG)//'S'//UPLNTCD(IPLT)//UPYRCD(IYR); call makmsk(ROW_mask,':FDV:',EPFLCD(IRG),':S:',UPLNTCD(IPLT),UPYRCD(IYR))
                  CALL CWFSROW(ROW,'ASLUP   ',STATUS,ROWVAL,ROW_mask,IRET)
                  C2 = UPLNTCD(IPLT)
                  WRITE(18,1910) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IRG,ROW,C2,STATUS,(ROWVAL(I),I=1,5)
               END IF
               IF (DV_LIG(IRG,ISCRB) .EQ. 1) THEN
                  ROW = 'FDV'//EPFLCD(IRG)//'L'//UPLNTCD(IPLT)//UPYRCD(IYR); call makmsk(ROW_mask,':FDV:',EPFLCD(IRG),':L:',UPLNTCD(IPLT),UPYRCD(IYR))
                  CALL CWFSROW(ROW,'ASLUP   ',STATUS,ROWVAL,ROW_mask,IRET)
                  C2 = UPLNTCD(IPLT)
                  WRITE(18,1910) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IRG,ROW,C2,STATUS,(ROWVAL(I),I=1,5)
               END IF
            END DO
         END DO
      END DO
      DO CL_SC = 1 , MX_NCOALS + MX_ISCV
         IFL = TOT_TYPE(CL_SC)
         IF (IFL .GT. 0) THEN
            IF (CL_SC .LT. 10) THEN
               WRITE(SC_CD,'("0",I1)') CL_SC
            ELSE
               WRITE(SC_CD,'(I2)') CL_SC
            END IF
            DO IYR = 1 , UNXPH
               COL = 'MV'//SC_CD//'DN5'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'DN5',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'DN4'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'DN4',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'DN3'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'DN3',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'DN2'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'DN2',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'DN1'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'DN1',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'ZR0'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'ZR0',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'UP1'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'UP1',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'UP2'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'UP2',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'UP3'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'UP3',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'UP4'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'UP4',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               COL = 'MV'//SC_CD//'UP5'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'UP5',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
               MAX_PECP = COLVAL(2)
               COL = 'MV'//SC_CD//'UP6'//UPYRCD(IYR); call makmsk(COL_mask,':MV:',SC_CD,'UP6',UPYRCD(IYR))      ! mask coal supply step
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
               IF (CL_SC .LE. MX_NCOALS) &
                  ECP_QECP(CL_SC,IYR,CURIYR) = ECP_QECP(CL_SC,IYR,CURIYR) + COLVAL(1)
               WRITE(18,1912) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,COL,SC_CD,STATUS,(COLVAL(I),I=1,5)
 1912          FORMAT(1X,"MV_COL",3(":",I4),":",A8,2(":",A2),5(":",E12.3))
!              Label:MV_COL:CYEAR:PYEAR:IFL:COL:SC_CD:STATUS:ACT:OBJ:LL:UL:RCST
!
               IF (IYR .LT. UNXPH) THEN
                  OBJFAC = UPGNPD(CURIYR+IYR-1) * PWF(DSCRT,IYR)
               ELSE
                  DO KYR = 1 , UNFPH - UNXPH + 1
                     PCL(KYR) = UPGNPD(CURIYR+KYR+UNXPH-2)
                  END DO
                  OBJFAC = PVV(PCL,ECP_D_FPH,(UNFPH-UNXPH+1),DSCRT) * PWF(DSCRT,UNXPH-1)
               END IF
!
               IF (CL_SC .LE. MX_NCOALS) THEN
                  ROW = 'XC'//UPFLCD(IFL)//SC_CD//'X'//UPYRCD(IYR); call makmsk(ROW_mask,':XC:',UPFLCD(IFL),SC_CD,':X:',UPYRCD(IYR))
                  CALL CWFSROW(ROW,'ASLUP   ',STATUS,ROWVAL2,ROW_mask,IRET)
                  ROW = 'SC'//UPFLCD(IFL)//SC_CD//'X'//UPYRCD(IYR); call makmsk(ROW_mask,':SC:',UPFLCD(IFL),SC_CD,':X:',UPYRCD(IYR))
                  CALL CWFSROW(ROW,'ASLUP   ',STATUS,ROWVAL,ROW_mask,IRET)
                  IF (STATUS .EQ. "UL") THEN
                     ECP_PECP(CL_SC,IYR,CURIYR) = MIN(MAX_PECP , (ROWVAL(5) - ROWVAL2(5))) / OBJFAC
                  ELSE IF (ECP_PECP(CL_SC,IYR,CURIYR) .LT. 0.1) THEN
                     ECP_PECP(CL_SC,IYR,CURIYR) = 1.0
                  END IF
                  WRITE(18,1914) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,ROW,SC_CD,STATUS,(ROWVAL(I),I=1,5),OBJFAC, &
                     ECP_PECP(CL_SC,IYR,CURIYR),ECP_QECP(CL_SC,IYR,CURIYR),ROWVAL2(5),ROWVAL2(4)
 1914             FORMAT(1X,"SC_ROW",3(":",I4),":",A8,2(":",A2),5(":",E12.3),5(":",F15.6))
!
!                 :Label:SC_ROW:CYEAR:PYEAR:IFL:ROW:SC_CD:STATUS:ACT:SLACK:LL:UL:DUAL:OBJFAC:ECP_PECP:ECP_QECP:DUAL2:UL2
!
               ELSE
                  ROW = 'SC'//UPFLCD(IFL)//SC_CD//'X'//UPYRCD(IYR); call makmsk(ROW_mask,':SC:',UPFLCD(IFL),SC_CD,':X:',UPYRCD(IYR))
                  CALL CWFSROW(ROW,'ASLUP   ',STATUS,ROWVAL,ROW_mask,IRET)
                  WRITE(18,1914) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,IFL,ROW,SC_CD,STATUS,(ROWVAL(I),I=1,5),OBJFAC
               END IF
!
               DO IRG = 1 , NDREG
                  DO ISCRB = 1 , 2
                     ROW = 'K'//UPFLCD(IFL)//SC_CD//EPFLCD(IRG)// SCRB_CD(ISCRB)//UPYRCD(IYR); call makmsk(ROW_mask,':K:',UPFLCD(IFL),SC_CD,EPFLCD(IRG), SCRB_CD(ISCRB),UPYRCD(IYR))
                     CALL CWFSROW(ROW,'ASLUP   ',STATUS,ROWVAL,ROW_mask,IRET)
                     C2 = UPFLCD(IFL)
                     IF (ROWVAL(5) .NE. 0.0) WRITE(18,1909) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,CL_SC,IRG,ISCRB,ROW,C2,STATUS,(ROWVAL(I),I=1,5)
 1909                FORMAT(1X,"CF_ROW",5(":",I4),":",A8,2(":",A2),5(":",E12.3))
                  END DO
               END DO
!
            END DO
         END IF
      END DO
!
      DO IYR = 1 , UNXPH
         IF (IYR .LT. UNXPH) THEN
            XYR = MIN(IYR + CURIYR - 1 , UNYEAR)
         ELSE
            XYR = UNYEAR
         END IF
         DO IRG = 1 , NDREG
            DO IPLT = 1 , NUTSEC
               IF (C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                  ISCRB = ECP_SCRUB(IPLT,CURIYR)
                  DO CL_SC = 1 , MX_NCOALS + MX_ISCV
                     IFL = TOT_TYPE(CL_SC)
                     IF (IFL .GT. 0 .AND. C_ECP_CDS(IPLT,IRG) .EQ. 1) THEN
                        IF (TOT_RATE1(CL_SC,IRG,0) .LT. 800.0) THEN
                           IF (CL_SC .LT. 10) THEN
                              WRITE(SC_CD,'("0",I1)') CL_SC
                           ELSE
                              WRITE(SC_CD,'(I2)') CL_SC
                           END IF
                           READ(UPFLCD(IFL),'(A1)') RANK_CD
                           IF (RANK_CD .EQ. "B") THEN
                              I_RANK = 1
                           ELSE IF (RANK_CD .EQ. "S") THEN
                              I_RANK = 2
                           ELSE IF (RANK_CD .EQ. "L") THEN
                              I_RANK = 3
                           END IF
!
!                          LOOP OVER Activated Carbon Option
!
                           DO J_ACI = 1 , NUM_ACI + 1
                              I_ACI = J_ACI - 1
                              COL = 'T'//SC_CD//EPFLCD(IRG)//UPLNTCD(IPLT)//ACI_CD(J_ACI)//UPYRCD(IYR); call makmsk(COL_mask,':T:',SC_CD,EPFLCD(IRG),UPLNTCD(IPLT),ACI_CD(J_ACI),UPYRCD(IYR))
                              CALL CWFSCOL(COL,'ACLUD   ',STATUS,COLVAL,COL_mask,IRET)
                              IF (IRET .EQ. 0) THEN
                                 IF (COLVAL(1) .GT. 0.0) THEN
                                    WRITE(18,1917) CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,CL_SC,IRG,IPLT,J_ACI,UPFLCD(IFL),SCRB_CD(ISCRB), &
                                       COL,STATUS,(COLVAL(I),I=1,5)
 1917                               FORMAT(1X,"CL_COL",6(":",I4),":",A2,":",A2,":",A8,":",A2,5(":",E12.3))
!                                   Label:CL_COL:CYEAR:PYEAR:CL_SC:IRG:IPLT:J_ACI:UPFLCD:SCRB_CD:COL:ST:ACT:CST:LL:UL:RCST
                                 END IF
                              END IF
                           END DO
                        END IF
                     END IF
                  END DO
               END IF
            END DO
         END DO
      END DO
!
      RETURN
      END
!
!     EPO$CARLM RETRIEVES THE ACTIVITY AND DUALS OF THE CO2 REGIONAL GROUP ROWS
!
      SUBROUTINE EPO$CARLM
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'uecpout'
      include 'eusprc'
      include 'edbdef'
!     include 'e111d'
!
      REAL*8 LEVEL(5),LIM,OFF,BNK,RSV,ESC
      INTEGER*4 IRET,GRP,YEAR
      CHARACTER*16 ROW,COL
      CHARACTER*2 STATUS

      ecpsub='EPO$CARLM'

      STATUS = '  '
!
!     DETERMINE MAXIMUM LEADTIME FOR RENEWABLE PLANTS
!
      LIM = DBLE(0.0)
      OFF = DBLE(0.0)
      BNK = DBLE(0.0)
      RSV = DBLE(0.0)
      ESC = DBLE(0.0)

!     CARBON GROUPS

      DO GRP = 1 , CO2_GRP
         ROW = 'EUCAR'//CO2_RG(GRP)//UPYRCD(1); call makmsk(ROW_mask,':EUCAR:',CO2_RG(GRP),UPYRCD(1))
         CALL CWFSROW(ROW,'AUP     ',STATUS,LEVEL,ROW_mask,IRET)
!        write(6,1111) curiyr+1989,row,level(1),level(3)
!1111 format(1h ,'!carrg',i4,a10,f10.1,f10.1)
         IF (GRP .EQ. CARGRP_CA)THEN
            COL = 'CARLM'//CO2_RG(GRP)//UPYRCD(1); call makmsk(COL_mask,':CARLM:',CO2_RG(GRP),UPYRCD(1))
            CALL CWFSCOL(COL,'A       ',STATUS,LEVEL,COL_mask,IRET)
            IF (IRET .EQ. 0)LIM = LEVEL(1)
            COL = 'CAROF'//CO2_RG(GRP)//UPYRCD(1); call makmsk(COL_mask,':CAROF:',CO2_RG(GRP),UPYRCD(1))
            CALL CWFSCOL(COL,'A       ',STATUS,LEVEL,COL_mask,IRET)
            IF (IRET .EQ. 0)OFF = LEVEL(1)
            COL = 'CARBK'//CO2_RG(GRP)//UPYRCD(1); call makmsk(COL_mask,':CARBK:',CO2_RG(GRP),UPYRCD(1))
            CALL CWFSCOL(COL,'A       ',STATUS,LEVEL,COL_mask,IRET)
            IF (IRET .EQ. 0)BNK = LEVEL(1)
            COL = 'CARRS'//CO2_RG(GRP)//UPYRCD(1); call makmsk(COL_mask,':CARRS:',CO2_RG(GRP),UPYRCD(1))
            CALL CWFSCOL(COL,'A       ',STATUS,LEVEL,COL_mask,IRET)
            IF (IRET .EQ. 0)RSV = LEVEL(1)
            COL = 'CARES'//CO2_RG(GRP)//UPYRCD(1); call makmsk(COL_mask,':CARES:',CO2_RG(GRP),UPYRCD(1))
            CALL CWFSCOL(COL,'A       ',STATUS,LEVEL,COL_mask,IRET)
            IF (IRET .EQ. 0)ESC = LEVEL(1)
      write(13,3000) curiyr + UHBSYR,LIM*(44.0/12.0),OFF*(44.0/12.0),BNK*(44.0/12.0),RSV*(44.0/12.0),ESC*(44.0/12.0),  &
                     LEVEL(3)*SCALPR
 3000 format(1h ,'!ab32ecp,yr,lm,of,bk,rs,es,pr',i4,6f10.1)
         END IF
      END DO

      RETURN
      END
!
!     EPO$CPP RETRIEVES THE ACTIVITY AND DUALS OF THE CLEAN POWER PLAN ROWS
!
      SUBROUTINE EPO$CPP
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'uecpout'
      include 'eusprc'
      include 'edbdef'
      include 'e111d'
      include 'uefdout'
!
      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)
!
      COMMON /ECPPROUT/ECPCO2FY,ECPCO2FL,ECPCO2NY,ECPCO2NL
      REAL*4 ECPCO2FY(EFD_D_MFRG + 1,MNUMYR)
      REAL*4 ECPCO2FL(EFD_D_MFRG + 1,MNUMYR)
      REAL*4 ECPCO2NY(MNUMNR,MNUMYR)
      REAL*4 ECPCO2NL(MNUMNR,MNUMYR)
!
      REAL*8 LEVEL(5),PVGNP
      REAL*4 PRCYR,PRCYT,PRCLR,PRCLT
      INTEGER*4 IRET,GRP,YEAR
      CHARACTER*16 ROW,COL
      CHARACTER*2 STATUS
      STATUS = '  '

      ecpsub='EPO$CPP'
!
!     111d Allowances prices
!
      IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
         ECO2FRPP = 0.0
         ECO2NRPP = 0.0
         ECO2ERPP = 0.0
      END IF
!
      IF (CO2_STDSW .GT. 0 .AND. CO2_NRYR(1,UPPLYR(WIWN) + 1) .GE. DBLE(0.1) .AND. (CURIYR + UPPLYR(WIWN)) .LE. UNYEAR)THEN
         PRCYT = 0.0
         PRCLT = 0.0
         DO GRP = 1 , UNRGNS
            PRCYR = 0.0
            PRCLR = 0.0
            DO YEAR = UPPLYR(WIWN) + 1 , UNXPH
               IF (CO2_STDTN(GRP) .EQ. 1)THEN
                  ROW = 'ERCO2'//URGNME(GRP)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':ERCO2:',URGNME(GRP)(6:7),UPYRCD(YEAR),':!NERC:')
               ELSE
                  ROW = 'EQCO2'//URGNME(GRP)(6:7)//UPYRCD(YEAR); call makmsk(ROW_mask,':EQCO2:',URGNME(GRP)(6:7),UPYRCD(YEAR),':!NERC:')
               END IF 
               CALL CWFSROW(ROW,'P       ',STATUS,LEVEL,ROW_mask,IRET)
!              IF (CO2_STDTN(GRP) .EQ. 2)LEVEL(1) = LEVEL(1) * DBLE(2.204)
!     write(6,3333) curiyr+1989,curiyr+1989+year-1,grp,level(1),egennrqf(grp,curiyr+year-1)
!3333 format(1h ,'!lev111pr',i4,i5,i5,4f10.1)
               LEVEL(YEAR) = LEVEL(1)
               IF (YEAR .EQ. UPPLYR(WIWN) + 1)THEN
                  PRCYR = LEVEL(1) * (1.0 + AVGDCR) ** FLOAT(YEAR) / UPGNPD(CURIYR + YEAR - 1)
                  PRCYT = PRCYT + PRCYR * EGENNRQF(GRP,CURIYR + YEAR - 1)
                  IF (GRP .EQ. UNRGNS)PRCYT = PRCYT / EGENNRQF(MNUMNR,CURIYR + UPPLYR(WIWN))
!     write(6,4444) curiyr+1989,curiyr+1989+year-1,grp,level(1),egennrqf(grp,curiyr+year-1),prcyr,prcyt
!4444 format(1h ,'!lev111d2',i4,i5,i5,4f10.1)
               END IF
               PRCLR = PRCLR + LEVEL(1)
               IF (YEAR .EQ. UNXPH)THEN
                  IF (PRCYR .LE. 0.0)THEN
                     PRCLR = 0.0
                  ELSE
                     CALL EP$LGNP(UPPLYR(WIWN)+1,UNFPH-(UPPLYR(WIWN) + 1)+1,AVGDCR,PVGNP)
                     PRCLR = PRCLR / PVGNP
                     PRCLT = PRCLT + PRCLR * EGENNRQF(GRP,CURIYR + UPPLYR(WIWN))
                  END IF
                  IF (GRP .EQ. UNRGNS)PRCLT = PRCLT / EGENNRQF(MNUMNR,CURIYR + UPPLYR(WIWN))
!     write(6,5555) curiyr+1989,curiyr+1989+year-1,grp,level(1),egennrqf(grp,curiyr+year-1),prcyr,prclt,pvgnp
!5555 format(1h ,'!lev111dl',i4,i5,i5,5f10.1)
               END IF
            END DO
            IF (CO2_ECPSW .EQ. 1) THEN
               ECO2NRPP(GRP,CURIYR + UPPLYR(WIWN)) = PRCYR
            ELSEIF (CO2_ECPSW .EQ. 2) THEN
               ECO2NRPP(GRP,CURIYR + UPPLYR(WIWN)) = PRCLR
            ENDIF
            ECPCO2NY(GRP,CURIYR + UPPLYR(WIWN)) = PRCYR
            ECPCO2NL(GRP,CURIYR + UPPLYR(WIWN)) = PRCLR
!     write(13,5000) curiyr+uhbsyr,curiyr+uhbsyr+upplyr(wiwn),grp,row,  &
!              avgdcr,upgnpd(curiyr+1),level(2),level(3),pvgnp,  &
!              prcyr * SCALPR, PRCLR * SCALPR,EGENNRQF(GRP,CURIYR + UPPLYR(WIWN)),  &
!              prcyt * SCALPR, PRCLt * SCALPR,EGENNRQF(MNUMNR, CURIYR + UPPLYR(WIWN))
!5000 format(1h ,'!ecppnr',i4,i5,i3,a10,2f10.3,12f10.1)
         END DO
         IF (CO2_ECPSW .EQ. 1) THEN
            ECO2NRPP(MNUMNR,CURIYR + UPPLYR(WIWN)) = PRCYT
         ELSEIF (CO2_ECPSW .EQ. 2) THEN
            ECO2NRPP(MNUMNR,CURIYR + UPPLYR(WIWN)) = PRCLT
         ENDIF
         ECPCO2NY(MNUMNR,CURIYR + UPPLYR(WIWN)) = PRCYT
         ECPCO2NL(MNUMNR,CURIYR + UPPLYR(WIWN)) = PRCLT
      END IF
!
      RETURN
      END
!
!     EPO$RPS RETRIEVES DUAL OF RENEWABLE PORTFOLIO CONSTRAINT, WHICH
!     REPRESENTS VALUE OF RENEWABLE CREDIT
!
      SUBROUTINE EPO$RPS
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'emmparm'
      include'ecpcntl'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'uefdout'
      include 'uecpout'
      
      REAL*8 LEVEL,DUAL_VALUE,PVGNP,CREDITS(ECP_D_XPH),TWOVAL(5)
      REAL*8 COLVAL(5)
      REAL CES_DUALS_OLD(MNUMYR,ECP_D_XPH)
      REAL*4 SUMCRD,PRC1,PRCL
      REAL*8 BNKRPS(ECP_D_XPH), BNK_USE(ECP_D_XPH)
      INTEGER IRET,IYR,REG,IP,MAXLT,RPSYR,OPYRS
      CHARACTER*16 ROWU,COL
      CHARACTER*16 COL_CREATE_BNK, COL_USE_BNK
      CHARACTER*2 STATUS

      ecpsub='EPO$RPS'

      STATUS = '  '
      DUAL_VALUE = DBLE(0.00)

      IF ((CURIYR + UHBSYR) .EQ. UPSTYR) THEN
         CES_DUALS_OLD = CES_DUALS
      END IF
!
!     DETERMINE MAXIMUM LEADTIME FOR RENEWABLE PLANTS
!
      MAXLT = 0
      DO IP = 1 , ECP_D_RNW
         IF (UCPRNWI(IP) .GT. 0) THEN
            IF (UPCLYR(UCPRNWI(IP)) .GT. MAXLT) MAXLT = UPPLYR(UCPRNWI(IP))
         END IF
      END DO
      DO IP = 1 , ECP_D_INT
         IF (UPCLYR(UCPINTI(IP)) .GT. MAXLT) MAXLT = UPPLYR(UCPINTI(IP))
!
!        USE WIND LEAD TIME TO CALCULATE RENEWABLE CREDIT PRICE
!
         IF (UPLNTCD(UCPINTI(IP)) .EQ. 'WN'  .or.  &
             UPLNTCD(UCPINTI(IP)) .EQ. 'WF') MAXLT = UPPLYR(UCPINTI(IP))
      END DO
!
!     INITIALIZE RPS LIMIT AND CAP INFO FOR FTAB
!
      EPRPSLM(CURIYR) = 0.0
      EPRPSCP(CURIYR) = 0.0
      EPRPSCR(CURIYR) = 0.0
      DO IYR = 1 , UNXPH
         CREDITS(IYR) = 0.0
         EPRENEW(IYR) = 0.0
      END DO
      IF (UPRNWBND(CURIYR) .GT. 0.005) THEN
         IF (UPRNWSUN .LE. 0 .OR. (CURIYR + UHBSYR) .LT. UPRNWSUN) THEN
            EPRPSLM(CURIYR) = UPRNWBND(CURIYR)
            EPRPSCP(CURIYR) = RPSCAPYR(CURIYR)
         END IF
      END IF

!     FIRST TIME THROUGH CLEAR OUT RESTART FOR ALL YEARS PRIOR TO THE FIRST ECP YEAR

      IF (CURIYR + UHBSYR .EQ. UPSTYR) THEN
         DO IYR = 1 , CURIYR + MAXLT - 1
            EPRPSPR(IYR) = 0.0
         END DO
      END IF

!     IF NO RPS CONSTRAINT THE CREDIT PRICE IS 0

      IF (UPRNWBND(CURIYR + MAXLT) .LE. 0.005) THEN
         IF (CURIYR + UHBSYR .EQ. UPSTYR) THEN
            DO IYR = 1 , MAXLT
               EPRPSPR(CURIYR + IYR - 1) = 0.0
            END DO
         END IF
         EPRPSPR(CURIYR + MAXLT) = 0.0
      ELSE

!        GET LAST YEAR WITH RPS LIMIT

         IF (UPRNWSUN .LE. 0) THEN
            RPSYR = UNFPH
         ELSE
            RPSYR = 0
            DO OPYRS = MAXLT + 1 , UNFPH

!              SUNSET

               IF((UHBSYR + CURIYR + OPYRS - 1) .LT. UPRNWSUN)RPSYR = OPYRS
            END DO
         END IF
!
!        GET LEVELIZED INFLATION FACTOR TO CONVERT DUALS TO REAL $
!
         IF (RPSYR .GT. 0)THEN
            OPYRS = UNFPH - (MAXLT + 1) + 1
            CALL EP$LGNP(MAXLT+1,OPYRS,AVGDCR,PVGNP)
         ELSE
            PVGNP = DBLE(1.0)
         END IF
!
!        GET RPS CREDITS PURCHASED NOT EARNED
!        AND DUAL FOR RENEWABLE PORTFOLIO CONSTRAINT
!
!        RPS CREDITS
!
         IF (UPRNWCAP .GT. 0.0)THEN
            DO IYR = 1 , UNXPH
               CREDITS(IYR) = 0.0
               COL = 'G'//'U'//'CR'//'RNW'//UPYRCD(IYR); call makmsk(COL_mask,':G:',':U:',':CR:',':RNW:',UPYRCD(IYR))
               CALL CWFSCOL(COL,'A       ',STATUS,TWOVAL,COL_mask,IRET)
               LEVEL=TWOVAL(1)
               CREDITS(IYR) = LEVEL
            END DO
         END IF
!
!        RPS CREDIT PRICE
!
         DO IYR = 1 , UNXPH
            ROWU = 'GURNWXX'//UPYRCD(IYR); call makmsk(ROWU_mask,':GURNWXX:',UPYRCD(IYR))
            CALL CWFSROW(ROWU,'P       ',STATUS,TWOVAL,ROWU_mask,IRET)
            DUAL_VALUE=TWOVAL(1)
            EPRENEW(IYR) = -DUAL_VALUE
            IF (IYR .LT. UNXPH) THEN
               CES_DUALS(CURIYR,IYR) = -DUAL_VALUE
            ELSE
               CES_DUALS(CURIYR,IYR) = CES_DUALS_OLD(CURIYR,IYR) * (1.0 - CES_SMOOTH_DUAL) - CES_SMOOTH_DUAL * DUAL_VALUE
            END IF

            WRITE(6,3719) CURIRUN, CURIYR+UHBSYR, CURIYR+UHBSYR+IYR-1, ROWU, DUAL_VALUE, AVGDCR, UPGNPD(CURIYR+IYR-1), &
                CES_DUALS(CURIYR,IYR), CES_DUALS_OLD(CURIYR,IYR)
 3719       FORMAT(1X,"CES_DUAL",3(":",I4),":",A16,5(":",F24.6))

         END DO

!        USE CREDIT PRICE FOR INITIAL ONLINE YEAR OR LEVELIZED PRICE

         PRC1 = EPRENEW(MAXLT + 1) * (1.0 + AVGDCR) ** FLOAT(MAXLT + 1) / UPGNPD(CURIYR + MAXLT)

!        IF INITIAL ONLINE YEAR HAS A 0 PRICE, THEN SET LEVELIZED PRICE TO 0 ALSO

         IF (PRC1 .LE. 0.0)THEN
            PRCL = 0.0
         ELSE
         SUMCRD = 0.0
         DO IYR = MAXLT + 1 , UNXPH
            SUMCRD = SUMCRD + EPRENEW(IYR)
         END DO
         PRCL = (SUMCRD / PVGNP)
         END IF

         IF (UPRNWLEV .LE. 0)THEN

!           ONE-YEAR CREDIT PRICE

            EPRPSPR(CURIYR+MAXLT) = PRC1
         ELSE

!           LEVELIZED CREDIT PRICE

            EPRPSPR(CURIYR+MAXLT) = PRCL
         END IF

!        ADJUST CREDIT PRICE IF RENEWABLES NOT REQUIRED TO HAVE CREDITS

         IF (UPRNWRPS .GT. 0)THEN
            EPRPSPR(CURIYR+MAXLT) = EPRPSPR(CURIYR+MAXLT) / (1.0 - UPRNWBND(CURIYR+MAXLT))
            PRC1 = PRC1 / (1.0 - UPRNWBND(CURIYR+MAXLT))
            PRCL = PRCL / (1.0 - UPRNWBND(CURIYR+MAXLT))
         END IF
!
!        INSURE CREDIT PRICE DOESN'T EXCEED CAP, IF APPROPRIATE
!
         IF (UPRNWCAP .GT. 0.0)THEN
            EPRPSPR(CURIYR+MAXLT) = MIN(RPSCAPYR(CURIYR+MAXLT),EPRPSPR(CURIYR+MAXLT))
            PRC1 = MIN(RPSCAPYR(CURIYR+MAXLT),PRC1)
            PRCL = MIN(RPSCAPYR(CURIYR+UNXPH-1),PRCL)
         END IF

!        IF RPS STARTS BEFORE NEW PLANTS ARE AVAILABLE THEN STORE SINGLE YEAR DUAL (COFIRING)

         IF (CURIYR + UHBSYR .EQ. UPSTYR)THEN
            DO IYR = 1 , MAXLT
               IF (UPRNWBND(CURIYR + IYR - 1) .GT. 0.005) THEN
                  EPRPSPR(CURIYR + IYR - 1) = EPRENEW(IYR) * (1.0 + AVGDCR) ** FLOAT(IYR) / UPGNPD(CURIYR + IYR - 1)
                  IF (UPRNWCAP .GT. 0.0)EPRPSPR(CURIYR + IYR - 1) = MIN(RPSCAPYR(CURIYR+IYR-1),EPRPSPR(CURIYR + IYR - 1))
               END IF
            END DO
         END IF
      END IF

!     CREDITS

      IF (CURIYR .LE. UNYEAR) EPRPSCR(CURIYR) = CREDITS(1)

!     SET PRICE TO 15 CENTS (200 MILLS) IF UNABLE TO MEET CONSTRAINT AND DUAL IS SET BY ESCAPE VECTOR

      EPRPSPR(CURIYR+MAXLT) = MIN(EPRPSPR(CURIYR+MAXLT) , 200.0 / SCALPR)

      WRITE(13,2222) MNUMNR,CURCALYR,CURCALYR+MAXLT,AVGDCR,UPGNPD(CURIYR+MAXLT), &
         UPGNPD(CURIYR+MAXLT+1),PVGNP,(EPRENEW(IYR),IYR=MAXLT+1,UNXPH),  &
         PRC1*SCALPR,PRCL*SCALPR,EPRPSPR(CURIYR+MAXLT)*SCALPR,SCALPR

 2222 FORMAT(1H ,'DVRPSU:RG,CY,PY,DR,GNP2,GNP3,PVG,DV2,DV3,CRD1,CRDL,CRDP,SCALPR:',I2,2I5,3F6.3,6F6.1,F7.4)

!     RETRIVE RPS BANKING DECISION, IF ALLOWED

      DO IYR = 1 , UNXPH
         COL_CREATE_BNK = 'BNKRPSC'//UPYRCD(IYR); call makmsk(COL_CREATE_BNK_mask,':BNKRPSC:',UPYRCD(IYR))
         CALL CWFSCOL(COL_CREATE_BNK,'ACLUD   ',STATUS,COLVAL,COL_CREATE_BNK_mask,IRET)
         BNKRPS(IYR) = COLVAL(1)
         WRITE(18,4444) CURIRUN,CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,MAXLT,COL_CREATE_BNK,COLVAL(1),COLVAL(4),COLVAL(5),EPRENEW(IYR),EPRPSBK(CURIYR), &
            UCRBKNR(MNUMNR,CURIYR), COLVAL(2)

         COL_USE_BNK = 'BNKRPSU'//UPYRCD(IYR); call makmsk(COL_USE_BNK_mask,':BNKRPSU:',UPYRCD(IYR))
         CALL CWFSCOL(COL_USE_BNK,'ACLUD   ',STATUS,COLVAL,COL_USE_BNK_mask,IRET)
         BNK_USE(IYR) = COLVAL(1)

         IF (IYR .EQ. 2)THEN
            EPRPSBK(CURIYR+1) = EPRPSBK(CURIYR) + BNKRPS(IYR) - BNK_USE(IYR)
            IF (CURIYR .LT. MNUMYR) UCRBKNR(MNUMNR,CURIYR+1) = UCRBKNR(MNUMNR,CURIYR) + BNKRPS(IYR) - BNK_USE(IYR) 
         END IF

         WRITE(18,4444) CURIRUN,CURIYR+UHBSYR,CURIYR+UHBSYR+IYR-1,MAXLT,COL_USE_BNK,COLVAL(1),COLVAL(4),COLVAL(5),EPRENEW(IYR),EPRPSBK(CURIYR+1), &
            UCRBKNR(MNUMNR,MIN(MNUMYR,CURIYR+1)), COLVAL(2)

 4444    FORMAT(1X,"RPSBANK_OUT",4(":",I4),":",A16,":",F24.6,":",E24.6,8(":",F24.6))

      END DO

      WRITE(13,3333) REG,CURCALYR,CURCALYR+UNXPH-1,(CREDITS(IYR),IYR=1,UNXPH),(BNKRPS(IYR),IYR=1,UNXPH)

 3333 FORMAT(1H ,'CRRPSU:RG,CY,PY,CR1,CR2,CR3,BK1,BK2,BK3:',I2,2I5,3F9.3,2X,3F9.3)
      RETURN
      END
!
!     EPO$RPSR RETRIEVES DUAL OF REGIONAL RENEWABLE PORTFOLIO CONSTRAINTS, WHICH
!     REPRESENTS VALUE OF RENEWABLE CREDIT
!
      SUBROUTINE EPO$RPSR
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'emmparm'
      include'ecpcntl'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'uecpout'
      include 'uefdout'
!
      REAL*8 LEVEL,DUAL_VALUE,PVGNP,CREDITS(ECP_D_XPH),TWOVAL(5)
      REAL*4 SUMCRD,PRC1,PRCL
      REAL*4 EPRENEWN(ECP_D_XPH)
      INTEGER IRET,IYR,REG,IP,MAXLT,RPSYR,OPYRS
      CHARACTER*16 ROWR,COL
      CHARACTER*2 STATUS

      COMMON/RPS_REGIONS/MAP_NERC_TO_RPS_RGN
      INTEGER*4 MAP_NERC_TO_RPS_RGN(MNUMNR), RPS_RGN, XRG, RPS_RGN_X

      ecpsub='EP$RPSR'

      DO RPS_RGN = 1 , MNUMNR
         MAP_NERC_TO_RPS_RGN(RPS_RGN) = RPS_RGN
      END DO

      IF (UNRGNS .EQ. 22) THEN
         MAP_NERC_TO_RPS_RGN(6) = 8
         MAP_NERC_TO_RPS_RGN(7) = 8
      ELSEIF (UNRGNS .EQ. 25) THEN
         MAP_NERC_TO_RPS_RGN(8) = 9                  
      END IF

      STATUS = '  '
      DUAL_VALUE = DBLE(0.00)
!
!     DETERMINE MAXIMUM LEADTIME FOR RENEWABLE PLANTS
!
      MAXLT = 0
      DO IP = 1 , ECP_D_RNW
         IF (UCPRNWI(IP) .GT. 0) THEN
            IF (UPCLYR(UCPRNWI(IP)) .GT. MAXLT) MAXLT = UPPLYR(UCPRNWI(IP))
         END IF
      END DO
      DO IP = 1 , ECP_D_INT
         IF (UPCLYR(UCPINTI(IP)) .GT. MAXLT) MAXLT = UPPLYR(UCPINTI(IP))
!
!        USE WIND LEAD TIME TO CALCULATE RENEWABLE CREDIT PRICE
!
         IF (UPLNTCD(UCPINTI(IP)) .EQ. 'WN') MAXLT = UPPLYR(UCPINTI(IP))
      END DO
!
!     INITIALIZE RPS LIMIT AND CAP INFO FOR FTAB
!
      DO IYR = 1 , UNXPH
         EPRENEWN(IYR) = EPRENEW(IYR)
      END DO
      DO REG = 1 , UNRGNS

!        FIRST TIME THROUGH CLEAR OUT RESTART FOR ALL YEARS PRIOR TO THE FIRST ECP YEAR

         IF (CURIYR + UHBSYR .EQ. UPSTYR) THEN
            DO IYR = 1 , CURIYR + MAXLT - 1
               EPRPSPRR(REG,IYR) = 0.0
            END DO
         END IF

         RPS_RGN = MAP_NERC_TO_RPS_RGN(REG)

         EPRPSLMR(REG,CURIYR) = 0.0
         EPRPSCPR(REG,CURIYR) = 0.0
         EPRPSCRR(REG,CURIYR + MAXLT) = 0.0
         DO IYR = 1 , UNXPH
            CREDITS(IYR) = 0.0
            EPRENEW(IYR) = 0.0
         END DO
         IF (UPRNWBNDR(CURIYR,REG) .GT. 0.005) THEN
            IF (UPRNWSUNR(REG) .LE. 0 .OR. (CURIYR + UHBSYR) .LT. UPRNWSUNR(REG)) THEN
               EPRPSLMR(REG,CURIYR) = UPRNWBNDR(CURIYR,REG)
               EPRPSCPR(REG,CURIYR) = UPRNWCAPR(REG)
            END IF
         END IF
!
!        IF NO RPS CONSTRAINT THE CREDIT PRICE IS 0
!
         IF (UPRNWBNDR(CURIYR + MAXLT,REG) .LE. 0.005) THEN
            IF (CURIYR + UHBSYR .EQ. UPSTYR) THEN
               DO IYR = 1 , MAXLT
                  EPRPSPRR(REG,CURIYR + IYR - 1) = 0.0
               END DO
            END IF
            IF (UPRNWBND(CURIYR + MAXLT) .LE. 0.005)THEN
               EPRPSPRR(REG,CURIYR + MAXLT) = 0.0
            ELSE
               EPRPSPRR(REG,CURIYR + MAXLT) = EPRPSPR(CURIYR + MAXLT)
               DO IYR = 1 , UNXPH
                  EPRENEW(IYR) = EPRENEWN(IYR)
               END DO
            END IF
         ELSE
!
!           GET LAST YEAR WITH RPS LIMIT
!
            IF (UPRNWSUNR(REG) .LE. 0) THEN
               RPSYR = UNFPH
            ELSE
               RPSYR = 0
               DO OPYRS = MAXLT + 1 , UNFPH
!                 SUNSET
                  IF((UHBSYR + CURIYR + OPYRS - 1) .LT. UPRNWSUNR(REG))RPSYR = OPYRS
               END DO
            END IF
!
!           GET LEVELIZED INFLATION FACTOR TO CONVERT DUALS TO REAL $
!
            IF (RPSYR .GT. 0)THEN
               OPYRS = UNFPH - (MAXLT + 1) + 1
               CALL EP$LGNP(MAXLT+1,OPYRS,AVGDCR,PVGNP)
            ELSE
               PVGNP = DBLE(1.0)
            END IF
!
!           GET RPS CREDITS PURCHASED NOT EARNED
!           AND DUAL FOR RENEWABLE PORTFOLIO CONSTRAINT
!
!           RPS CREDITS
!
            IF (UPRNWCAPR(REG) .GT. 0.0)THEN
               DO IYR = 1 , UNXPH
                  CREDITS(IYR) = 0.0
                  COL = 'G'//UPRGCD(REG)//'CR'//'RNW'//UPYRCD(IYR); call makmsk(COL_mask,':G:',UPRGCD(REG),':CR:',':RNW:',UPYRCD(IYR))
                  CALL CWFSCOL(COL,'A       ',STATUS,TWOVAL,COL_mask,IRET)
                  LEVEL=TWOVAL(1)
                  CREDITS(IYR) = LEVEL
               END DO
            END IF

!           RECORD RPS CREDIT TRANSFERS

            DO XRG = 1 , UNRGNS
               RPS_RGN_X = MAP_NERC_TO_RPS_RGN(XRG)
               IF (RPS_RGN .NE. RPS_RGN_X .AND. UPXRGN(XRG,REG) .EQ. 1) THEN
                  DO IYR = 1 , UNXPH
                     COL = 'G'//UPRGCD(RPS_RGN_X)//UPRGCD(RPS_RGN)//'TRPS'//UPYRCD(IYR); call makmsk(COL_mask,':G:',UPRGCD(RPS_RGN_X),UPRGCD(RPS_RGN),':TRPS:',UPYRCD(IYR))
                     CALL CWFSCOL(COL,'A       ',STATUS,TWOVAL,COL_mask,IRET)
                     LEVEL = TWOVAL(1)
                     IF (IRET .EQ. 0 .AND. LEVEL .GT. 0.0) THEN
                        WRITE(18,6779) CURIRUN, CURCALYR, CURIYR+IYR-1+1989, XRG, RPS_RGN_X, REG, RPS_RGN, COL, LEVEL
 6779                   FORMAT(1X,"RPS_Credit_Transfer",7(":",I4),":",A16,":",F15.6)
                     END IF
                  END DO
               END IF
            END DO
!
!           RPS CREDIT PRICE
!
            DO IYR = 1 , UNXPH
               ROWR = 'G'//UPRGCD(RPS_RGN)//'RNWXX'//UPYRCD(IYR); call makmsk(ROWR_mask,':G:',UPRGCD(RPS_RGN),':RNWXX:',UPYRCD(IYR))
               CALL CWFSROW(ROWR,'P       ',STATUS,TWOVAL,ROWR_mask,IRET)
               DUAL_VALUE=TWOVAL(1)
               EPRENEW(IYR) = -DUAL_VALUE
            END DO
!
!           USE CREDIT PRICE FOR INITIAL ONLINE YEAR OR LEVELIZED PRICE
!
            PRC1 = EPRENEW(MAXLT + 1) * (1.0 + AVGDCR) ** FLOAT(MAXLT + 1) / UPGNPD(CURIYR + MAXLT)

!           IF INITIAL ONLINE YEAR HAS A 0 PRICE, THEN SET LEVELIZED PRICE TO 0 ALSO

            IF (PRC1 .LE. 0.0)THEN
               PRCL = 0.0
            ELSE
            SUMCRD = 0.0
            DO IYR = MAXLT + 1 , UNXPH
               SUMCRD = SUMCRD + EPRENEW(IYR)
            END DO
            PRCL = (SUMCRD / PVGNP)
            END IF

            IF (UPRNWLEV .LE. 0)THEN
!              ONE-YEAR CREDIT PRICE
               EPRPSPRR(REG,CURIYR+MAXLT) = PRC1
            ELSE
!              LEVELIZED CREDIT PRICE
               EPRPSPRR(REG,CURIYR+MAXLT) = PRCL
            END IF
!
!           ADJUST CREDIT PRICE IF RENEWABLES NOT REQUIRED TO HAVE CREDITS
!
            IF (UPRNWRPSR(REG) .GT. 0)THEN
               EPRPSPRR(REG,CURIYR+MAXLT) = EPRPSPRR(REG,CURIYR+MAXLT) / (1.0 - UPRNWBNDR(CURIYR+MAXLT,REG))
               PRC1 = PRC1 / (1.0 - UPRNWBNDR(CURIYR+MAXLT,REG))
               PRCL = PRCL / (1.0 - UPRNWBNDR(CURIYR+MAXLT,REG))
            END IF
!
!           INSURE REGIONAL CREDIT PRICE DOESN'T EXCEED CAP, IF NO NATIONAL CREDIT PRICE
!
            IF (EPRPSPR(CURIYR+MAXLT) .LE. 0.0)THEN
               IF (UPRNWCAPR(REG) .GT. 0.0)THEN
                  EPRPSPRR(REG,CURIYR+MAXLT) = MIN(UPRNWCAPR(REG),EPRPSPRR(REG,CURIYR+MAXLT))
                  PRC1 = MIN(UPRNWCAPR(REG),PRC1)
                  PRCL = MIN(UPRNWCAPR(REG),PRCL)
               END IF
               IF (CREDITS(MAXLT+1) .GT. 0.0) EPRPSPRR(REG,CURIYR+MAXLT) = UPRNWCAPR(REG)
!              IF (EPRENEW(MAXLT+1) .LE. 0.001) EPRPSPR(CURIYR+MAXLT) = 0.0
            END IF
!
!           IF RPS STARTS BEFORE NEW PLANTS ARE AVAILABLE THEN DETERMINE CURRENT YEAR AS A FUNCTION OF NEXT YEAR PRICE
!
            IF (CURIYR + UHBSYR .EQ. UPSTYR)THEN
               DO IYR = 1 , MAXLT
!                 IF (UPRNWBNDR(CURIYR + IYR - 1,REG) .GT. 0.005) THEN
!                    EPRPSPRR(REG,CURIYR + IYR - 1) = EPRENEW(IYR) * (1.0 + AVGDCR) ** FLOAT(IYR) / UPGNPD(CURIYR + IYR - 1)
!                    IF (UPRNWCAPR(REG) .GT. 0.0 .AND. EPRPSPR(CURIYR+IYR-1) .LE. 0.0)  &
!                       EPRPSPRR(REG,CURIYR + IYR - 1) = MIN(UPRNWCAPR(REG),EPRPSPRR(REG,CURIYR + IYR - 1))
!                 END IF
                  EPRPSPRR(REG,CURIYR + IYR - 1) = 0.0
                  IF (UPRNWBNDR(CURIYR + IYR - 1,REG) .GT. 0.005)THEN
!                    IF (UPRNWBNDR(CURIYR + MAXLT,REG) .GT. 0.005)) THEN
                        EPRPSPRR(REG,CURIYR + IYR - 1) = EPRPSPRR(REG,CURIYR + MAXLT) *   &
                         (UPRNWBNDR(CURIYR + IYR - 1,REG) / UPRNWBNDR(CURIYR + MAXLT,REG))
                        IF (UPRNWCAPR(REG) .GT. 0.0 .AND. EPRPSPR(CURIYR+IYR-1) .LE. 0.0)  &
                           EPRPSPRR(REG,CURIYR + IYR - 1) = MIN(UPRNWCAPR(REG),EPRPSPRR(REG,CURIYR + IYR - 1))
!                    ELSE
!                       EPRPSPRR(REG,CURIYR + IYR - 1) = EPRPSPRR(REG,CURIYR + MAXLT)
                     END IF
!                 END IF
               END DO
            END IF
         END IF
!
!        CREDITS
!
         IF (CURIYR + MAXLT .LE. UNYEAR) EPRPSCRR(REG,CURIYR + MAXLT) = CREDITS(MAXLT + 1)
!
!        SET PRICE TO 150 CENTS (150 MILLS) IF UNABLE TO MEET CONSTRAINT AND DUAL IS SET BY ESCAPE VECTOR
!
!        IF(EPRPSPRR(REG,CURIYR+MAXLT).GT.500.0)EPRPSPRR(REG,CURIYR+MAXLT) = 40.0

         EPRPSPRR(REG,CURIYR+MAXLT) = MIN(EPRPSPRR(REG,CURIYR+MAXLT) , 150.0 / SCALPR)
!
         WRITE(13,2222) REG,CURCALYR,CURCALYR+MAXLT,AVGDCR,UPGNPD(CURIYR+MAXLT), &
            UPGNPD(CURIYR+MAXLT+1),PVGNP,(EPRENEW(IYR),IYR=MAXLT+1,UNXPH),  &
            PRC1*SCALPR,PRCL*SCALPR,EPRPSPRR(REG,CURIYR+MAXLT)*SCALPR,SCALPR

 2222    FORMAT(1H ,'DVRPSR:RG,CY,PY,DR,GNP2,GNP3,PVGNP,DV2,DV3,CRDPR1,CRDPRL,CRDPRC,SCALPR:',I2,2I5,3F6.3,6F6.1,F7.4)
!
         WRITE(13,3333) REG,CURCALYR,CURCALYR+UNXPH-1,(CREDITS(IYR),IYR=1,UNXPH)

 3333    FORMAT(1H ,'CRRPSR:RG,CY,PY,CR1,CR2,CR3:',I2,2I5,3F9.3)
      END DO                         ! REG
      RETURN
      END
!
!     EPO$INT RETRIEVES THE ACTIVITY OF THE INTERMITTENT BOUND CONSTRAINTS
!     TO COMPUTE THE CORRESPONDING GENERATION
!
      SUBROUTINE EPO$INT
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'emmparm'
      include'ecpcntl'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'uecpout'
      include 'dispett'
      include 'postpr'
      include 'uefdout'

      CHARACTER*4 IBNDSTS(MNUMNR,3)
!
      REAL*8 LEVEL(5)
      INTEGER*4 IRET,IYR,REG
      INTEGER*4 REGNUM(MNUMNR)
      CHARACTER*16 ROW
      CHARACTER*2 STATUS
      STATUS = '  '
      ecpsub='EPO$INT'


      DO REG = 1 , MNUMNR
         REGNUM(REG) = REG
      END DO
!
!     DETERMINE MAXIMUM LEADTIME FOR RENEWABLE PLANTS
!
      DO REG = 1 , UNRGNS
        DO IYR = 1 , UNXPH
          ROW = 'L'//UPRGCD(REG)//'XXINT'//UPYRCD(IYR); call makmsk(ROW_mask,':L:',UPRGCD(REG),':XXINT:',UPYRCD(IYR))
          CALL CWFSROW(ROW,'A       ',STATUS,LEVEL,ROW_mask,IRET)
          IRNWGEN(REG,IYR) = ITOTGEN(REG,IYR) * IRNWPCT(REG,IYR) + LEVEL(1)
          IRNWGEN(REG,IYR) = MAX(IRNWGEN(REG,IYR),0.0)
          IRNWACT(REG,IYR) = IRNWGEN(REG,IYR) / ITOTGEN(REG,IYR)
 !         IF (IYR .EQ. (UPPLYR(WIPV) + 1))THEN
             IF (LEVEL(1) .LT. DBLE(0.0))THEN
                IBNDSTS(REG,IYR) = '  NO'
             ELSE
                IBNDSTS(REG,IYR) = ' YES'
          END IF
!          END IF
        END DO
      END DO

      IF ((CURIYR + UPPLYR(WIPV)) .LE. MNUMYR)THEN
         IF ((CURIYR + UHBSYR) .EQ. UPSTYR)THEN
            WRITE(13,2000) 
 2000 FORMAT(1h ,'!INTSTS',T35,'INTERMITTENT GENERATION LIMIT STATUS')
            WRITE(13,2100) (REGNUM(REG),REG = 1 , UNRGNS)
 2100 FORMAT(1h ,'!INTSTS',T15,25I6)
            WRITE(13,3000) 
 3000 FORMAT(1h ,'!INTLIM',T35,'INTERMITTENT GENERATION LIMIT (%)')
            WRITE(13,3100) (REGNUM(REG),REG = 1 , UNRGNS)
 3100 FORMAT(1h ,'!INTLIM',T15,25I6)
            WRITE(13,4000) 
 4000 FORMAT(1h ,'!INTACT',T35,'INTERMITTENT GENERATION ACTUAL (%)')
            WRITE(13,4100) (REGNUM(REG),REG = 1 , UNRGNS)
 4100 FORMAT(1h ,'!INTACT',T15,25I6)
            WRITE(13,5000) 
 5000 FORMAT(1h ,'!INTGEN',T35,'INTERMITTENT GENERATION -- TOTAL GENERATION REQUIREMENT (Bkwh)')
            WRITE(13,5100) (REGNUM(REG),REG = 1 , UNRGNS)
 5100 FORMAT(1h ,'!INTGEN',T15,25I6)
         END IF
         WRITE(13,2200) CURIYR + UHBSYR + UPPLYR(WIPV),(IBNDSTS(REG,UPPLYR(WIPV) + 1),REG = 1 , UNRGNS)
 2200 FORMAT(1h ,'!INTSTS',T10,I4,1X,25(2X,A4))
         WRITE(13,3200) CURIYR + UHBSYR + UPPLYR(WIPV),(IRNWPCT(REG,UPPLYR(WIPV) + 1),REG = 1 , UNRGNS)
 3200 FORMAT(1h ,'!INTLIM',T10,I4,1X,25F6.3)
         WRITE(13,4200) CURIYR + UHBSYR + UPPLYR(WIPV),(IRNWACT(REG,UPPLYR(WIPV) + 1),REG = 1 , UNRGNS)
 4200 FORMAT(1h ,'!INTACT',T10,I4,1X,25F6.3)
         WRITE(13,5200) CURIYR + UHBSYR + UPPLYR(WIPV),(ITOTGEN(REG,UPPLYR(WIPV) + 1),REG = 1 , UNRGNS)
 5200 FORMAT(1h ,'!INTGEN',T10,I4,1X,25F6.0)
          WRITE(13,2201) CURIYR + UHBSYR,(IBNDSTS(REG,1),REG = 1 , UNRGNS)
 2201 FORMAT(1h ,'!INTST1',T10,I4,1X,25(2X,A4))
      END IF
!
      RETURN
      END
!
!
!
!     EPO$ETT CAPTURES IMPORT DECISIONS
!
      SUBROUTINE EPO$ETT
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'dispett'
      include 'postpr'
      include 'dispin'
      include 'uettout'
      include 'plntin'
      include 'plntctl'
      include 'efpgen'
      include 'uefdout'
!
      REAL*8 LEVEL,TWOVAL(5), DUAL
      REAL*8 TEST, BLDCST, CAPACITY_DERATE
      REAL*8 PWF, CRF
      REAL*8 GEN_PRJ(ECP$CS2,MNUMNR), TMP_RELADJ(MNUMNR), SPLIT_X, SPLIT_M
      REAL*4 TPCST, TC_NP
      INTEGER*4 TEFPT, T_SYR,IPROV
      INTEGER*4 IRET,YEAR,NERC,IYR,ISP,IRG,PRJ
      INTEGER*4 PROVNDX(ECP$CS2),UNQPAT(ECP$CS2,ECP$CS3)
      INTEGER*4 NUMBER,VLS,OLYRF,FRST,NEXT,LAST, TRAN_LEAD_TIME, JYR, IFPH2, MRG
      CHARACTER*16 COLUMN, COLUMN_BLD, ROW
      CHARACTER*2 STATUS
      CHARACTER*2 PRJCD(ECP$CS2)
      CHARACTER*1 CISCD(ECP$CS2)

      ecpsub='EPO$ETT'

      IF (USYEAR(CURIYR) .EQ. UPSTYR) THEN
         GEN_PRJ = 0.0
      END IF
!
!     ASSIGN PROVINCE CODES
!
!     CISCD(1)  = 'D'
!     CISCD(2)  = 'E'
!     CISCD(3)  = 'F'
!     CISCD(4)  = 'G'
!     CISCD(5)  = 'H'
!     CISCD(6)  = 'I'
!     CISCD(7)  = 'J'
!     CISCD(8)  = 'K'
!     CISCD(9)  = 'L'
!     CISCD(10) = 'M'
!     CISCD(11) = 'N'
!     CISCD(12) = 'O'
!     CISCD(13) = 'P'
!     CISCD(14) = 'Q'
!     CISCD(15) = 'R'
!     CISCD(16) = 'S'
!     CISCD(17) = 'T'
!
!     ASSIGN PROJECT CODES
!
      PRJCD(1)  = '01'
      PRJCD(2)  = '02'
      PRJCD(3)  = '03'
      PRJCD(4)  = '04'
      PRJCD(5)  = '05'
      PRJCD(6)  = '06'
      PRJCD(7)  = '07'
      PRJCD(8)  = '08'
      PRJCD(9)  = '09'
      PRJCD(10) = '10'
      PRJCD(11) = '11'
      PRJCD(12) = '12'
      PRJCD(13) = '13'
      PRJCD(14) = '14'
      PRJCD(15) = '15'
      PRJCD(16) = '16'
      PRJCD(17) = '17'
      PRJCD(18) = '18'
      PRJCD(19) = '19'
      PRJCD(20) = '20'
      PRJCD(21) = '21'
      PRJCD(22) = '22'
      PRJCD(23) = '23'
      PRJCD(24) = '24'
      PRJCD(25) = '25'
      PRJCD(26) = '26'
      PRJCD(27) = '27'
      PRJCD(28) = '28'
      PRJCD(29) = '29'
      PRJCD(30) = '30'
      PRJCD(31) = '31'
      PRJCD(32) = '32'
      PRJCD(33) = '33'
      PRJCD(34) = '34'
      PRJCD(35) = '35'
      PRJCD(36) = '36'
      PRJCD(37) = '37'
      PRJCD(38) = '38'
      PRJCD(39) = '39'
      PRJCD(40) = '40'
      PRJCD(41) = '41'
      PRJCD(42) = '42'
      PRJCD(43) = '43'
      PRJCD(44) = '44'
      PRJCD(45) = '45'
      PRJCD(46) = '46'
      PRJCD(47) = '47'
      PRJCD(48) = '48'
      PRJCD(49) = '49'
      PRJCD(50) = '50'
      PRJCD(51) = '51'
      PRJCD(52) = '52'
      PRJCD(53) = '53'
      PRJCD(54) = '54'
      PRJCD(55) = '55'
      PRJCD(56) = '56'
      PRJCD(57) = '57'
      PRJCD(58) = '58'
      PRJCD(59) = '59'
      PRJCD(60) = '60'
      PRJCD(61) = '61'
      PRJCD(62) = '62'
      PRJCD(63) = '63'
      PRJCD(64) = '64'
      PRJCD(65) = '65'
      PRJCD(66) = '66'
      PRJCD(67) = '67'
      PRJCD(68) = '68'
      PRJCD(69) = '69'
      PRJCD(70) = '70'
      PRJCD(71) = '71'
      PRJCD(72) = '72'
      PRJCD(73) = '73'
      PRJCD(74) = '74'
      PRJCD(75) = '75'
      PRJCD(76) = '76'
      PRJCD(77) = '77'
      PRJCD(78) = '78'
      PRJCD(79) = '79'
      PRJCD(80) = '80'
      PRJCD(81) = '81'
      PRJCD(82) = '82'
      PRJCD(83) = '83'
      PRJCD(84) = '84'
      PRJCD(85) = '85'
      PRJCD(86) = '86'
      PRJCD(87) = '87'
      PRJCD(88) = '88'
      PRJCD(89) = '89'
      PRJCD(90) = '90'
      PRJCD(91) = '91'
      PRJCD(92) = '92'
      PRJCD(93) = '93'
      PRJCD(94) = '94'
      PRJCD(95) = '95'
      PRJCD(96) = '96'
      PRJCD(97) = '97'
      PRJCD(98) = '98'
      PRJCD(99) = '99'
      PRJCD(100) = 'AA'
!
!     NEXT CAPTURE INVESTMENTS DECISION TO ACCELERATE CANADIAN PROJECTS
!
      IF ( USW_CANACC .GT. 0 ) THEN
      CALL GETEIJ(1)
!
!     FIND UNIQUE IMPORT REGION PAIRS (I.E. PROVINCES)
!
      DO IRG = 1, ECP$CS3
         DO PRJ = 1 , ECP$CS2
            UNQPAT(PRJ,IRG) = 0
         END DO
      END DO
      NUMBER = 1
      PRJ = 1
      DO IRG = 1 , UCI$RGN(PRJ)
         UNQPAT(1,IRG) = UCI$RGS(PRJ,IRG)
      END DO
      PROVNDX(PRJ) = 1
      PRJ = 2
      DO WHILE (UCI$CAP(PRJ) .GT. 0.0 .AND. PRJ .LT. ECP$CS2)
         LAST = 0
         NEXT = 1
         DO WHILE (LAST .EQ. 0 .AND. NEXT .LE. NUMBER)
            VLS = 0
            DO FRST = 1, ECP$CS3
               IF (FRST .LE. UCI$RGN(PRJ)) THEN
                  IRG = UCI$RGS(PRJ,FRST)
               ELSE
                  IRG = 0
               END IF
               IF (IRG .EQ. UNQPAT(NEXT,FRST)) VLS = VLS + 1
               END DO
            IF (VLS .EQ. ECP$CS3) LAST = NEXT
               NEXT = NEXT + 1
            END DO
         IF (LAST .EQ. 0) THEN
            NUMBER = NUMBER + 1
            LAST = NUMBER
            DO IRG = 1 , UCI$RGN(PRJ)
               UNQPAT(NUMBER,IRG) = UCI$RGS(PRJ,IRG)
            END DO
         END IF
         PROVNDX(PRJ) = LAST
         PRJ = PRJ + 1
      END DO
!
      YEAR = 1
      PRJ = 1
      DO WHILE (UCI$CAP(PRJ) .GT. 0.0 .AND. PRJ .LE. ECP$CS2)
         IRG = PROVNDX(PRJ)
         CISCD(IRG) = CHAR(IRG+64+MNUMNR-10)
         COLUMN = 'B'//CISCD(IRG)//'IMU'//PRJCD(PRJ)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':B:',CISCD(IRG),':IMU:',PRJCD(PRJ),UPYRCD(YEAR))
         TEST = DBLE(UCI$CAP(PRJ)) * DBLE(0.001) * DBLE(0.5)
         CALL CWFSCOL(COLUMN,'A       ',STATUS,TWOVAL,COLUMN_mask,IRET)
         LEVEL=TWOVAL(1)
         IF ( LEVEL .GT. TEST .AND. IRET .EQ. 0) THEN
            OLYRF = UHBSYR + CURIYR + LEAD(PRJ) - 1
            MODYR(PRJ) = OLYRF
            WRITE(18,*) ' PROJECTS ',OLYRF,' IN GW: ', &
             COLUMN,' ',STATUS,' ',LEVEL,UCI$CAP(PRJ)
         END IF
         PRJ = PRJ + 1
      END DO                                               ! PRJ (WHILE)
      CALL STREIJ(1)
!
!     RETRIEVE IMPORT VECTORS
!
      YEAR = 1
      IYR = CURIYR
      CALL GETEIJ(IYR)
      DO NERC = 1 , UNRGNS
         UCANBLD(NERC) = DBLE(0.0)
      END DO
!
      DO PRJ = 1 , NUMBER
         CISCD(PRJ) = CHAR(PRJ+64+MNUMNR-10)
         IRG = 1
         NERC = UNQPAT(PRJ,IRG)
         DO WHILE (NERC .GT. 0 .AND. IRG .LE. ECP$CS3)
            LEVEL = DBLE(0.0)
            COLUMN = 'O'//UPRGCD(NERC)//'IM'//CISCD(PRJ)//'X1'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':O:',UPRGCD(NERC),':IM:',CISCD(PRJ),':X1:',UPYRCD(YEAR))
            CALL CWFSCOL(COLUMN,'A       ',STATUS,TWOVAL,COLUMN_mask,IRET)
            LEVEL=TWOVAL(1)
            IF ( LEVEL .GT. 0.001 .AND. IRET .EQ. 0) THEN

               WRITE(18,7011) USYEAR(IYR), COLUMN, STATUS, LEVEL, GEN_PRJ(PRJ,NERC)
 7011          FORMAT(1X,"IMPORTS_IN_GW",":",I4,":",A16,":",A2,2(":",F12.3))

               ZTIMPD(NERC) = ZTIMPD(NERC) + LEVEL * UCI$MWH(PRJ) * &
                8.760
               ZTIMPF(NERC) = ZTIMPF(NERC) + LEVEL * 8760000.0
               UCANBLD(NERC) = UCANBLD(NERC) + LEVEL
               GEN_PRJ(PRJ,NERC) = LEVEL
!
!           ADD to DETAILED FIRM IMPORTS FOR TRADE TABLE
!
               write(18,*) ' province ',province(prj)
               IF (PROVINCE(PRJ) .EQ. ' BC 21' ) THEN
                 IPROV = 29  !26
               ELSEIF (PROVINCE(PRJ) .EQ. ' Manitoba') THEN
                 IPROV = 30   !27
               ELSEIF (PROVINCE(PRJ) .EQ. ' QUEBEC 8' .OR. PROVINCE(PRJ) .EQ. ' Quebec 8') THEN
                 IPROV = 32  !29
               ELSE
                 write(18,*) ' no iprov for utfirm '
               ENDIF
               write(18,7012) ' CANPRJ FIRM IMP ',NERC,IPROV,UTFIRM(NERC,IPROV),LEVEL*8760000.0
 7012          FORMAT(A,I4,':',I4,':',F12.3,':',f12.3)
               IF (IPROV .NE. 0) THEN
                 UTFIRM(NERC,IPROV) = UTFIRM(NERC,IPROV) + LEVEL * 8760000.0
               ENDIF
            END IF
            IRG = IRG + 1
            NERC = UNQPAT(PRJ,IRG)
         END DO                                                    ! IRG
      END DO                                                       ! PRJ
      CALL STREIJ(IYR)
      ENDIF                                            ! end if allowing acceleration of canadian projects

!     Capture New Transmission Build Vectors

      TRAN_LEAD_TIME = 1
      CAPACITY_DERATE = 0.75

      YEAR = 1 + TRAN_LEAD_TIME
      IYR = CURIYR + YEAR - 1
      JYR = MIN(IYR , UNYEAR)
      CALL GETEIJ(IYR)
      IFPH2 = UNFPH - YEAR + 1
      TMP_RELADJ = 0.0
      DO NERC = 1 , UNRGNS
         CALL GETBLD(1,NERC)

         DO MRG = 1 , UNRGNS
            IF (UPXRGN(NERC,MRG) .EQ. 1) THEN

               COLUMN_BLD = 'B'//UPRGCD(NERC)// UPRGCD(MRG)//'ELXX'//UPYRCD(YEAR); call makmsk(COLUMN_BLD_mask,':B:',UPRGCD(NERC), UPRGCD(MRG),':ELXX:',UPYRCD(YEAR))
               CALL CWFSCOL(COLUMN_BLD,'A       ',STATUS,TWOVAL,COLUMN_BLD_mask,IRET)
               LEVEL = TWOVAL(1)
               IF (LEVEL .GT. 0.0) THEN

!                 SET TRANSMISSION COST

!                 BLDCST = (EMM_CNXT_CST(NERC,MRG) * 0.12 * UPGNPD(IYR) / CRF(DBLE(EPDSCRT),IFPH2) ) * &   replace 0.12 with same FCF used for other transmission builds
                  BLDCST = (EMM_CNXT_CST(NERC,MRG) * EPCCRF(WICT) * UPGNPD(IYR) / CRF(DBLE(EPDSCRT),IFPH2) ) * &
                     PWF(DBLE(EPDSCRT),YEAR)

                  WRITE(18,3717) CURIRUN, CURCALYR, NERC, MRG, EPNMSP, EENSP, COLUMN_BLD, LEVEL, BLDCST, &
                      URNCSTEX_EFD(1,NERC), URNCSTIM_EFD(1,NERC), URNCSTEX_EFD(1,MRG), URNCSTIM_EFD(1,MRG), &
                      UEITAJ_EFD(1,NERC), UEITAJ_EFD(1,MRG), UTRELADJ(NERC,IYR) , UTRELADJ(MRG,IYR), UTNEWTRN(NERC,MRG,IYR)
 3717             FORMAT(1X,"NEW_TRAN",6(":",I4),":",A16,11(":",F12.3))

!                 Only record Reliablity Adjustment when one or both of the regions has a binding reserve margin constraint

                  DUAL = 0.0
                  ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(NERC),':XXXXX:',UPYRCD(YEAR))
                  CALL CWFSROW(ROW,'P       ',STATUS,TWOVAL,ROW_mask,IRET)
                  DUAL = DUAL + ABS(TWOVAL(1))
                  ROW = 'R'//UPRGCD(MRG)//'XXXXX'//UPYRCD(YEAR); call makmsk(ROW_mask,':R:',UPRGCD(MRG),':XXXXX:',UPYRCD(YEAR))
                  CALL CWFSROW(ROW,'P       ',STATUS,TWOVAL,ROW_mask,IRET)
                  DUAL = DUAL + ABS(TWOVAL(1))

                  IF (DUAL .GT. 0.0) THEN
                     SPLIT_M = CAPACITY_DERATE
                     SPLIT_X = 1.0 - CAPACITY_DERATE
                     TMP_RELADJ(NERC) = TMP_RELADJ(NERC) + LEVEL * CAPACITY_DERATE
                     TMP_RELADJ(MRG) = TMP_RELADJ(MRG) - LEVEL * CAPACITY_DERATE
                  ELSE
                     SPLIT_M = 0.5
                     SPLIT_X = 0.5
                  END IF

                  TEFPT = WEFPT
                  T_SYR = W_SYR
                  TPCST = WPCST
                  TC_NP = WC_NP

                  WEFPT = EITRAN
                  W_SYR = YEAR + USYEAR(CURIYR) - 1
                  WPCST = EMM_CNXT_CST(NERC,MRG)

                  WC_NP = LEVEL * SPLIT_X
                  CALL UEXPBLD(NERC)

                  WC_NP = LEVEL * SPLIT_M
                  CALL UEXPBLD(MRG)

                  WRITE(18,7118) CURIRUN, CURCALYR, W_SYR, NERC, MRG, WEFPT, LEVEL, SPLIT_X, SPLIT_M, WPCST
 7118             FORMAT(1X,"NEW_TRN_CST",6(":",I4),4(":",F15.3))

                  WEFPT = TEFPT
                  W_SYR = T_SYR
                  WPCST = TPCST
                  WC_NP = TC_NP

                  DO JYR = IYR , MNUMYR + ECP_D_XPH
                     UTNEWTRN(NERC,MRG,JYR) = UTNEWTRN(NERC,MRG,JYR) + LEVEL
                     UTNEWTRN(MRG,NERC,JYR) = UTNEWTRN(MRG,NERC,JYR) + LEVEL
                  END DO

                  DO JYR = IYR , MNUMYR + ECP_D_XPH - 1
                     CALL GETEIJ(JYR)
                     DO ISP = 1 , EPNMSP
                        IF (JYR .LE. MNUMYR) CNSTRNTS_ECP(ISP,JYR,MRG,NERC) = CNSTRNTS_ECP(ISP,JYR,MRG,NERC) + LEVEL
                        URNCSTEX_ECP(ISP,NERC) = URNCSTEX_ECP(ISP,NERC) + LEVEL * 0.75
                        URNCSTIM_ECP(ISP,MRG) = URNCSTIM_ECP(ISP,MRG) + LEVEL * 0.75
                        IF (JYR .LE. MNUMYR) CNSTRNTS_ECP(ISP,JYR,NERC,MRG) = CNSTRNTS_ECP(ISP,JYR,NERC,MRG) + LEVEL
                        URNCSTEX_ECP(ISP,MRG) = URNCSTEX_ECP(ISP,MRG) + LEVEL * 0.75
                        URNCSTIM_ECP(ISP,NERC) = URNCSTIM_ECP(ISP,NERC) + LEVEL * 0.75
                     END DO

                     DO ISP = 1 , EENSP
                        IF (JYR .LE. MNUMYR) CNSTRNTS_EFD(ISP,JYR,MRG,NERC) = CNSTRNTS_EFD(ISP,JYR,MRG,NERC) + LEVEL
                        URNCSTEX_EFD(ISP,NERC) = URNCSTEX_EFD(ISP,NERC) + LEVEL * 0.75
                        URNCSTIM_EFD(ISP,MRG) = URNCSTIM_EFD(ISP,MRG) + LEVEL * 0.75
                        IF (JYR .LE. MNUMYR) CNSTRNTS_EFD(ISP,JYR,NERC,MRG) = CNSTRNTS_EFD(ISP,JYR,NERC,MRG) + LEVEL
                        URNCSTEX_EFD(ISP,MRG) = URNCSTEX_EFD(ISP,MRG) + LEVEL * 0.75
                        URNCSTIM_EFD(ISP,NERC) = URNCSTIM_EFD(ISP,NERC) + LEVEL * 0.75
                     END DO
                     CALL STREIJ(JYR)
                  END DO
               END IF
            END IF
         END DO
      END DO
      DO JYR = IYR , MNUMYR + ECP_D_XPH
         DO NERC = 1 , UNRGNS
            UTRELADJ(NERC,JYR) = UTRELADJ(NERC,JYR) + TMP_RELADJ(NERC)

            IF (JYR .EQ. IYR) THEN
               WRITE(18,4717) CURIRUN, CURCALYR, IYR+1989, NERC, UTRELADJ(NERC,IYR), (UTNEWTRN(NERC,MRG,IYR) , MRG = 1 , UNRGNS)
 4717          FORMAT(1X,"NW_TRAN_2",4(":",I4),":",F12.3,<UNRGNS>(":",F12.3))
            END IF

         END DO
      END DO

      RETURN
      END
!
!
!     CVAL REVISES COLUMN/ROW INTERSECTIONS
!
      SUBROUTINE CVAL(COL,RW,VAL,colmask,rowmask,called_from)
      use ecp_row_col 
      IMPLICIT NONE
!
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'uefdout'
!
      REAL*8 VAL
      CHARACTER*16 COL,RW
      character(len=*),optional :: colmask,rowmask,called_from

      INTEGER IRET,iskip
!
      iskip=1
      ! Skip zero coefficients and those outside the ECP range (iskip=1 by defautl)
      ! Do not skip all others (set iskip=0  and then call dcmcval and ecp_assign_coeff)
      IF (RW .EQ. "ECPCOSTS") THEN
         IF (VAL .NE. 0.0) iskip=0
      ELSE IF (RW(1:4) .EQ. "EUHG") THEN
         IF (VAL .GE. 0.05 .or. VAL .LE. -0.05) iskip=0
      ELSE
!        IF (VAL .GE. ECP_MIN .or. VAL .LE. -ECP_MIN) iskip=0
         IF (VAL .NE. 0.0) iskip=0
      END IF

      IF (iskip.eq.0) THEN      
! store LP coefficients for output to AIMMS      
        ecprownam=rw(1:8)
        ecpcolnam=col(1:8)
        ecpcoeff=val
        ecpcoeff8=val
        if(present(colmask)) then
! look up the mask in the list and get an ID number, or add it to the list.  
          call ecp_set_AIMMS_col_ID(colmask)
        endif
        if(present(rowmask)) then
! look up the mask in the list and get an ID number, or add it to the list.
          call ecp_set_AIMMS_row_ID(rowmask)
        else
           write(6,*) 'AIMMS Interface error in CVAL: rowmask not present for COL, RW:',col,rw
        endif
        if(present(called_from)) then
          ecpsub=called_from
        endif
! store the coefficient, along with its row and col names, and row and col mask ID numbers
        call ecp_assign_coeff

! store list of column names and their types to a spot in a hash table for fast lookup.
! based on the col name.
        call usehash(ecpcolnam, ecp_col_name, max_ecp_col_hash, spot, initial_store)
        if(initial_store) then
          cnt_ecp_col = cnt_ecp_col + 1
        endif
! store list of row names and their types to a spot in a hash table for fast lookup.
! based on the row name.
        call usehash(ecprownam, ecp_row_name, max_ecp_row_hash, spot, initial_store)
     
        if(initial_store) then
          cnt_ecp_row = cnt_ecp_row + 1
          ecp_row_sol(spot).row_type=row_aimms(aimms_row_id_num).row_type
        endif

        row_type=' '
        aimms_row_ID_num=-1
        aimms_col_ID_num=-1
        rownam_aimms=' '
        IRET=0
        if(AIMECPBG.eq.0) iskip=1  ! do not add coefficient via Fortran unless AIMMS debugging is on 


      ENDIF     

!     IF FIRST YEAR OF ECP AND CREATING NEW MATRIX THEN CALL DATABASE REVISE ROUTINE.

      IF (RW .NE. "ECPCOSTS") THEN
         IF (VAL .GE. 300.0 .OR. VAL .LE. -300.0 .OR. (VAL .GT. -ECP_MIN .AND. VAL .LT. ECP_MIN .AND. VAL .NE. DBLE(0.0))) THEN
            WRITE(18,101) CURIYR+UHBSYR,COL,RW,VAL
  101       FORMAT(1X,"ECP_OUT_OF_RANGE",":",I4,2(":",A),":",F36.12)
         END IF
      END IF
!
!
!     DUMP ALL COEFFICIENTS
!
!     IF (USYEAR(CURIYR) .EQ. UPSTYR) THEN
!        I = I + 1
!        WRITE(18,102) CURIYR+UHBSYR,I,IRET,COL,RW,VAL
! 102    FORMAT(1X,"CVAL",":",I4,":",I12,":",I2,2(":",A),":",E20.6)
!     END IF
!

!     IF (COL(1:6) .EQ. "BJISNM" .AND. RW(1:3) .EQ. "ECP") THEN
!        WRITE(6,34) CURIRUN, CURCALYR, COL, RW, VAL
!  34    FORMAT(1X,"IS_COST",2(":",I4),2(":",A16),":",F21.6)
!     END IF

      IF (ISNAN(VAL).OR. ABS(VAL) .GT. HUGE(VAL)) THEN   ! check for NaNQ this way   comment this write statement only during debugging
         WRITE(6,24) CURCALYR,CURITR,COL,RW,VAL
      ENDIF                                      !
  24  FORMAT(1X,"ECP_CVAL_ERROR_CODE",2(":",I4),2(":",A8),":",E20.6)
!
!
      RETURN
      END
!
!
!     CRHS REVISES ROW RIGHT-HAND SIDE VALUES
!
      SUBROUTINE CRHS(RHS,RW,VAL,rowmask,called_from)
      use ecp_row_col
!
      IMPLICIT NONE
!
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'uefdout'
!
      REAL*8 VAL
      CHARACTER*16 RW,RHS
      character(len=*),optional :: rowmask,called_from   
      INTEGER IRET
!
      IF (VAL .NE. 0.0) THEN      
 ! store LP RHS values for output to AIMMS      
        ecprownam=rw(1:8)                    ! for AIMMS
        ecpcolnam=rhs(1:8)                   ! for AIMMS
        ecpcoeff=val                         ! for AIMMS
        ecpcoeff8=val                        ! for AIMMS
! look up the RHS mask in the list and get an ID number, or add it to the list.  
        call ecp_set_AIMMS_col_ID(RHS)

        if(present(rowmask)) then
! look up the mask in the list and get an ID number, or add it to the list.
          call ecp_set_AIMMS_row_ID(rowmask)
        else
           write(6,*) 'AIMMS Interface error in CRHS: rowmask not present for RW:',rw
        endif
        if(present(called_from)) then
          ecpsub=called_from
        endif
        call ecp_assign_coeff                ! for AIMMS

! store list of row names and their types to a spot in a hash table for fast lookup.
! based on the row name.
        call usehash(ecprownam, ecp_row_name, max_ecp_row_hash, spot, initial_store)
       
        if(initial_store) then
          cnt_ecp_row = cnt_ecp_row + 1
          ecp_row_sol(spot).row_type=row_aimms(aimms_row_id_num).row_type
              endif
        iret=0  
        row_type=' '
        aimms_row_ID_num=-1
        aimms_col_ID_num=-1
        rownam_aimms=' '
      ENDIF       
!
      IF (ISNAN(VAL).OR. ABS(VAL) .GT. HUGE(VAL)) THEN   ! check for NaNQ this way
         WRITE(6,24) CURCALYR,CURITR,RHS,RW,VAL
      ENDIF                                      !
  24  FORMAT(1X,"ECP_CRHS_ERROR_CODE",2(":",I4),2(":",A),":",E20.6)
!
!
      RETURN
      END
!
!
!     CBND REVISES COLUMN UPPER AND LOWER BOUNDS
!
      SUBROUTINE CBND(BND,COL,LVAL,UVAL,colmask,called_from)
      use ecp_row_col
!
      IMPLICIT NONE

      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'

      REAL*8       LVAL,UVAL,LOCAL_U
      
      CHARACTER*16 COL
      CHARACTER*8  BND
      character(len=*),optional :: colmask,called_from

      INTEGER      IRET

!     CALL DATABASE REVISE ROUTINE.

      IF (ISNAN(LVAL) .OR. ABS(LVAL) .GT. HUGE(LVAL) .OR. ISNAN(UVAL) .OR. ABS(UVAL) .GT. HUGE(UVAL)) THEN ! check for NaNQ this way
         WRITE(6,24) IRET,CURCALYR,CURITR,COL,BND,LVAL,UVAL
         IF (ISNAN(LVAL) .OR. ABS(LVAL) .GT. HUGE(LVAL)) LVAL = 0.0
         IF (ISNAN(UVAL) .OR. ABS(UVAL) .GT. HUGE(UVAL)) UVAL = LVAL
      ENDIF
  24  FORMAT(1X,"ECP_CBND_ERROR_CODE",3(":",I4),2(":",A),2(":",E20.6))

        LOCAL_U=UVAL

        if(present(colmask)) then
! look up the column name mask in the list and get an ID number, or add it to the list.  
          call ecp_set_AIMMS_col_ID(colmask)
        endif
        if(present(called_from)) then
          ecpsub=called_from
        endif
        if(LVAL .gt. 0.) then
 ! store LP bound values for output to AIMMS      
          ecprownam='BOUNDLO'                  
          ecpcolnam=col                        

          ecpcoeff8=LVAL                 

        rownam_AIMMS='LBOUND'  
          rsetnam(1:max_set)  =  ' '    
        call ecp_set_AIMMS_row_ID('LBOUND' )
          call ecp_assign_coeff                
        endif

        ecprownam='BOUNDUP'                  
        ecpcolnam=col                        
! need to pass upper bound zeroes to AIMMS because these are used to remove columns from solution. Since
! coefficients are only transferred if non zero, temporarily set to -1 and switch to zero when
! writing output in outtxt.
        if(local_u.eq.0.) then
          local_u=-1.0 
        endif

        ecpcoeff8=local_u               

        rownam_AIMMS='UBOUND'  
        rsetnam(1:max_set)  =  ' '    
        call ecp_set_AIMMS_row_ID('UBOUND' )
        call ecp_assign_coeff 
        iret=0.  
        rownam_AIMMS=' '
        aimms_row_ID_num=-1
        aimms_col_ID_num=-1
      


100   FORMAT(1X,'REVISE ERROR CBND ',I4,I4,1X,A,1X,F20.12,1X,F20.12)

      RETURN
      END
!
!     CROWTYPE finds and maps to a correct AIMMS row name as Nonconstraining/free, Less than or equal, Greater than or equal, or Equality.
!     The argumenet 
!     Equality is the default, so this routine is typically only called to for rows that are not Equalities.
!
      SUBROUTINE CROWTYPE(RW,RTYPE,rowmask)
      use ecp_row_col  ! declarations/storage for AIMMS interface LP coefficients
!
      IMPLICIT NONE
!
!
      CHARACTER*16 RW
      character(len=*) :: RTYPE
      character(len=*),optional :: rowmask   
      integer iret


          ecprownam=rw(1:8)                    ! for AIMMS
          row_type=RTYPE(1:1)
          if(present(rowmask)) then
!           look up the mask in the list and get an ID number, or add it to the list.
            call ecp_set_AIMMS_row_ID(rowmask)
            row_type=RTYPE(1:1)
          else
          write(6,*) 'AIMMS Interface error in CROWTYPE rowmask not present for RW, rtype=:',rw,rtype
          endif
          
! store list of row names and their types to a spot in a hash table for fast lookup.
! based on the row name.
        call usehash(ecprownam, ecp_row_name, max_ecp_row_hash, spot, initial_store)
        ecp_row_sol(spot).row_type=row_type

        if (initial_store) then
              cnt_ecp_row = cnt_ecp_row + 1
        endif
        iret=0
        aimms_row_ID_num=-1
        aimms_col_ID_num=-1
        rownam_aimms=' '
        row_type=' '
   
      RETURN
      END SUBROUTINE CROWTYPE
!
!
!     SUBROUTINE RNWRPT PRINTS RENEWABLES REPORT
!

      SUBROUTINE RNWRPT(NERC)
!
!     The code determines the active technologies to report (those allowed to build) 
!       but this number must be hardcoded in the format statements and updated if it changes
!       currently 9 (2/2017)
       
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'entcntl'
      include 'enewtech'
      include 'wrenew'

      INTEGER*4 IP,IN,NERC,FULLYR,IL,ST    ! INDICES
      INTEGER*4 NME                        ! INDICES
      REAL*8    RFMCAP(ECP_D_RNW+ECP_D_STO+ECP_D_INT)
      INTEGER*4 COUNT, RCOUNT, IRCOUNT, SCOUNT, ICOUNT, P(ECP_D_RNW+ECP_D_STO+ECP_D_INT), IR(ECP_D_RNW+ECP_D_STO+ECP_D_INT), R(ECP_D_RNW+ECP_D_STO+ECP_D_INT), S(ECP_D_RNW+ECP_D_STO+ECP_D_INT), J(ECP_D_RNW+ECP_D_STO+ECP_D_INT), IPLT
!
      FULLYR = USYEAR(CURIYR)

      COUNT = 0
      IRCOUNT = 0
      RCOUNT = 0
      SCOUNT = 0
      ICOUNT = 0
      P = 0
      IR = 0
      R = 0
      S = 0
      J = 0
      DO IPLT = ECP_D_DSP+1, ECP_D_DSP + ECP_D_RNW + ECP_D_STO + ECP_D_INT
        IF (UPVTYP(IPLT) .EQ. 1 .AND. UPBLDREG(IPLT,MNUMNR) .GT. 0 .AND. UPAVLYR(IPLT) .LE. (MNUMYR+UHBSYR)) THEN
          COUNT = COUNT + 1
          IR(COUNT) = IPLT - ECP_D_DSP
          P(COUNT) = IPLT
          IF (IPLT .LE. ECP_D_DSP + ECP_D_RNW) THEN
             IRCOUNT = IRCOUNT + 1
             RCOUNT = RCOUNT + 1
             R(RCOUNT) = IPLT - ECP_D_DSP
             write(18,9711) CURIRUN, CURCALYR, NERC,  IPLT, COUNT, IRCOUNT, RCOUNT, SCOUNT, ICOUNT, P(COUNT), IR(COUNT), R(RCOUNT)
          ELSE IF (IPLT .LE. ECP_D_DSP + ECP_D_RNW + ECP_D_STO) THEN
             IRCOUNT = IRCOUNT + 1
             SCOUNT = SCOUNT + 1
             S(SCOUNT) = IPLT - ECP_D_DSP - ECP_D_RNW
             write(18,9711) CURIRUN, CURCALYR, NERC,  IPLT, COUNT, IRCOUNT, RCOUNT, SCOUNT, ICOUNT, P(COUNT), IR(COUNT), S(SCOUNT)
          ELSE IF (IPLT .LE. ECP_D_DSP + ECP_D_RNW + ECP_D_STO + ECP_D_INT) THEN
             IRCOUNT = IRCOUNT + 1
             ICOUNT = ICOUNT + 1
             J(ICOUNT) = IPLT - ECP_D_DSP - ECP_D_RNW - ECP_D_STO
             write(18,9711) CURIRUN, CURCALYR, NERC, IPLT, COUNT, IRCOUNT, RCOUNT, SCOUNT, ICOUNT, P(COUNT), IR(COUNT), J(ICOUNT)
          END IF

 9711     FORMAT(1X,"RNWRPT_Indexes",12(":",I4))
        ENDIF
      ENDDO

!     REPORT HEADERS

      WRITE(13,100) (UPNAME(P(IP),1),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,101) (UPNAME(P(IP),2),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,103) (UPNAME(P(IP),3),IP = 1,COUNT),NERC,FULLYR

      IF (FULLYR .EQ. UPSTYR) THEN
         WRITE(13,102) (UPECLF(P(IP)),IP = 1,COUNT),NERC,FULLYR
         WRITE(13,104) (UPAVLYR(P(IP)),IP = 1,COUNT),NERC,FULLYR
         WRITE(13,105) (INT(UPMSSIZ(P(IP)) + 0.5),IP = 1,COUNT),NERC,FULLYR
         WRITE(13,106) (UPCLYR(P(IP)),IP = 1,COUNT),NERC,FULLYR
         WRITE(13,108) (UPCPRO(P(IP),1),IP = 1,COUNT),NERC,FULLYR
         WRITE(13,208) (UPCPRO(P(IP),2),IP = 1,COUNT),NERC,FULLYR
         WRITE(13,308) (UPCPRO(P(IP),3),IP = 1,COUNT),NERC,FULLYR
         WRITE(13,408) (UPCPRO(P(IP),4),IP = 1,COUNT),NERC,FULLYR
         WRITE(13,508) (UPCPRO(P(IP),5),IP = 1,COUNT),NERC,FULLYR
      ENDIF

      WRITE(13,120) (EPIRVOM(IR(IP)) * SCALPR,IP = 1,COUNT),NERC,FULLYR
      WRITE(13,140) (MIN(9999.0,EPIRFOM(IR(IP)) * SCALPR),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,160) (MIN(9999.0,(EPIROVR(IR(IP)) / (1.0 - UPCSB(P(IP)))) * SCALPR),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,161) (EPRGM(P(IP)),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,165) (EPACM(P(IP)),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,162) (UPLRPC(P(IP)),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,164) (UPLROPT(P(IP)),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,166) (UPLRLC(P(IP)),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,167) (EPCCSUP(IR(IP),1),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,168) (UPANNADJ(P(IP),MIN(MNUMYR,CURIYR+UPPLYR(P(IP)))),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,170) (MIN(9999.0,(EPIROVR(IR(IP)) / (1.0 - UPCSB(P(IP))) * EPRGM(P(IP))*UPLRPC(P(IP))* &
       UPLROPT(P(IP)) * UPLRLC(P(IP)) *  &
       EPCCSUP(IR(IP),1) *                     &
       EPACM(P(IP)) * UPANNADJ(P(IP) , MIN(MNUMYR,CURIYR+UPPLYR(P(IP)))) * SCALPR)), IP = 1,COUNT),NERC,FULLYR
      WRITE(13,180) (EPRCFC(R(IP)),IP=1,RCOUNT), (1.0,ST=1,SCOUNT), (EPIACF(J(IN)),IN=1,ICOUNT),NERC,FULLYR
      WRITE(13,200) (EPIRCCR(IR(IP)),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,220) (UPFORT(P(IP)),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,240) (UPPMRT(P(IP)),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,250) (EPECAP(0,P(IP),1) * .001,IP = 1,COUNT),NERC,FULLYR

      DO IP = 1 , ECP_D_RNW
         IF (UPLNTCD(UCPRNWI(IP)) .EQ. 'HY') THEN
            RFMCAP(UIRRNWI(IP)) = WCAHYEL(NERC,CURIYR - 1) * .001
         ELSEIF (UPLNTCD(UCPRNWI(IP)) .EQ. 'PS') THEN
            RFMCAP(UIRRNWI(IP)) = 0.0
         ELSEIF (UPLNTCD(UCPRNWI(IP)) .EQ. 'P2') THEN
            RFMCAP(UIRRNWI(IP)) = 0.0
         ELSEIF (UPLNTCD(UCPRNWI(IP)) .EQ. 'GT') THEN
            RFMCAP(UIRRNWI(IP)) = WCAGPEL(NERC,CURIYR - 1) * .001
         ELSEIF (UPLNTCD(UCPRNWI(IP)) .EQ. 'WD') THEN
            RFMCAP(UIRRNWI(IP)) = WCABMEL(NERC,CURIYR - 1) * .001
         ELSEIF (UPLNTCD(UCPRNWI(IP)) .EQ. 'MS') THEN
            RFMCAP(UIRRNWI(IP)) = WCAMSEL(NERC,CURIYR - 1) * .001
         END IF
      END DO
      DO IP = 1 , ECP_D_STO
         RFMCAP(UIRRNWI(IP)) = 0.0
      END DO
      DO IP = 1 , ECP_D_INT
         IF (UPLNTCD(UCPINTI(IP)) .EQ. 'SO') THEN
            RFMCAP(UIRINTI(IP)) = WCASTEL(NERC,CURIYR - 1) * .001
         ELSEIF (UPLNTCD(UCPINTI(IP)) .EQ. 'WN') THEN
            RFMCAP(UIRINTI(IP)) = WCAWIEL(NERC,CURIYR - 1) * .001
         ELSEIF (UPLNTCD(UCPINTI(IP)) .EQ. 'WL') THEN
            RFMCAP(UIRINTI(IP)) = WCAWLEL(NERC,CURIYR - 1) * .001
         ELSEIF (UPLNTCD(UCPINTI(IP)) .EQ. 'WF') THEN
            RFMCAP(UIRINTI(IP)) = WCAWFEL(NERC,CURIYR - 1) * .001
         ELSEIF (UPLNTCD(UCPINTI(IP)) .EQ. 'PV') THEN
            RFMCAP(UIRINTI(IP)) = WCAPVEL(NERC,CURIYR - 1) * .001
         ELSEIF (UPLNTCD(UCPINTI(IP)) .EQ. 'PT') THEN
            RFMCAP(UIRINTI(IP)) = WCAPTEL(NERC,CURIYR - 1) * .001
         END IF
      END DO
      WRITE(13,255) (RFMCAP(IR(IP)),IP=1,COUNT),NERC,FULLYR
      WRITE(13,260) (EPBLDBND(IR(IP),1),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,280) (EPBNDTYP(IR(IP)),IP = 1,COUNT),NERC,FULLYR

100   FORMAT(1X,'RNW_RPT:01:RENEWABLE INPUT DATA      ',3X,<COUNT>(":",2X,A6,1X),":",I2,":",I4)
101   FORMAT(1X,'RNW_RPT:02:PLANT NAME PART 2         ',3X,<COUNT>(":",2X,A6,1X),":",I2,":",I4)
103   FORMAT(1X,'RNW_RPT:03:PLANT NAME PART 3         ',3X,<COUNT>(":",2X,A6,1X),":",I2,":",I4)
102   FORMAT(1X,'RNW_RPT:04:ECONOMIC LIFE (YEARS)     ',3X,<COUNT>(":",I8,1X),   ":",I2,":",I4)
104   FORMAT(1X,'RNW_RPT:05:YEAR AVAILABLE            ',3X,<COUNT>(":",I8,1X),   ":",I2,":",I4)
105   FORMAT(1X,'RNW_RPT:06:UNIT SIZE (MEGAWATTS)     ',3X,<COUNT>(":",I8,1X),   ":",I2,":",I4)
106   FORMAT(1X,'RNW_RPT:07:CONSTRUCT LEAD TIME (YRS) ',3X,<COUNT>(":",I8,1X),   ":",I2,":",I4)
108   FORMAT(1X,'RNW_RPT:08:CONSTRUCTION PROF (FRAC) 1',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
208   FORMAT(1X,'RNW_RPT:09:CONSTRUCTION PROF (FRAC) 2',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
308   FORMAT(1X,'RNW_RPT:10:CONSTRUCTION PROF (FRAC) 3',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
408   FORMAT(1X,'RNW_RPT:11:CONSTRUCTION PROF (FRAC) 4',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
508   FORMAT(1X,'RNW_RPT:12:CONSTRUCTION PROF (FRAC) 5',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
120   FORMAT(1X,'RNW_RPT:13:VAR. O&M COSTS (MILLS/KWH)',3X,<COUNT>(":",F8.2,1X), ":",I2,":",I4)
140   FORMAT(1X,'RNW_RPT:14:FIXED O&M COSTS ($/KW)    ',3X,<COUNT>(":",F8.2,1X), ":",I2,":",I4)
160   FORMAT(1X,'RNW_RPT:15:OVR CAPITAL COSTS ($/KW)  ',3X,<COUNT>(":",F8.2,1X), ":",I2,":",I4)
161   FORMAT(1X,'RNW_RPT:16:REGIONAL COST MUL (FRAC)  ',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
165   FORMAT(1X,'RNW_RPT:17:REGIONAL ELEV MULT  (FRAC)',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
162   FORMAT(1X,'RNW_RPT:18:PROJECT CONTINGENCY (FRAC)',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
164   FORMAT(1X,'RNW_RPT:19:TECH. OPTIMISM FAC. (FRAC)',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
166   FORMAT(1X,'RNW_RPT:20:LEARNING FACTOR     (FRAC)',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
167   FORMAT(1X,'RNW_RPT:21:COST MULTIPLIER     (FRAC)',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
168   FORMAT(1X,'RNW_RPT:22:ANNUAL COST MULT    (FRAC)',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
170   FORMAT(1X,'RNW_RPT:23:CUR CAPITAL COSTS ($/KW)  ',3X,<COUNT>(":",F8.2,1X), ":",I2,":",I4)
180   FORMAT(1X,'RNW_RPT:24:CAPACITY FACTOR           ',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
200   FORMAT(1X,'RNW_RPT:25:CAPACITY CREDIT           ',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
220   FORMAT(1X,'RNW_RPT:26:FORCED OUTAGE RATE        ',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
240   FORMAT(1X,'RNW_RPT:27:PLANNED MAINTENANCE RATE  ',3X,<COUNT>(":",F8.4,1X), ":",I2,":",I4)
250   FORMAT(1X,'RNW_RPT:28:EXISTING CAPACITY (GW)    ',3X,<COUNT>(":",F8.3,1X), ":",I2,":",I4)
255   FORMAT(1X,'RNW_RPT:29:RFM CAPACITY (GW)         ',3X,<COUNT>(":",F8.3,1X), ":",I2,":",I4)
260   FORMAT(1X,'RNW_RPT:30:CAPACITY BUILD BOUND (GW) ',3X,<COUNT>(":",F8.3,1X), ":",I2,":",I4)
280   FORMAT(1X,'RNW_RPT:31:BUILD BOUND TYPE          ',3X,<COUNT>(":",A8,1X),   ":",I2,":",I4)

!     INTERMITTENT CAPACITY FACTORS

      DO IP = 1, ICOUNT
         IN = J(IP)
         WRITE(13,300) (UPNAME(UCPINTI(IN),NME),NME = 1,3), (UPICFC(1,IN,EPLDGR(IL,1),EPLDSG(IL,1)),IL = 1, EPNSTP(1)), NERC,FULLYR
      END DO
300   FORMAT(1X,'RNWI_RPT_MCFS  :',3(A6,1X),<EPNSTP(1)>(":",F8.3),":",I2,":",I4)

      RETURN
      END
!
!
!     FOSRPT PRINTS FOSSIL FUEL REPORT
!
      SUBROUTINE FOSRPT(NERC)
!
!     The code determines the active technologies to report (those allowed to build) 
!       but this number must be hardcoded in the format statements and updated if it changes
!       currently 9 (2/2017)
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'entcntl'
      include 'enewtech'
      include 'wrenew'
      include 'uefdout'
                                                 !
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*8 WHRATE(ECP_D_CAP)

      INTEGER  COUNT,IP,NERC,FULLYR,IPLT,P(ECP_D_CAP), IECP, OLYR

      CHARACTER*12 FROM_LABEL
      FULLYR = USYEAR(CURIYR)
!
      FROM_LABEL = "FOSRPT"

      COUNT = 0
      P = 0
      DO IPLT = 1,ECP_D_DSP
        IF (UPVTYP(IPLT) .EQ. 1 .AND. UPBLDREG(IPLT,MNUMNR) .GT. 0 .AND. UPAVLYR(IPLT) .LE. (MNUMYR+UHBSYR)) THEN
          COUNT = COUNT + 1
          P(COUNT) = IPLT
           write(13,*) 'FOSRPT ',IPLT,COUNT,P(COUNT)
        ENDIF
      ENDDO

      OLYR = 2

      IF (FULLYR .EQ. UPSTYR) THEN
         WRITE(13,20)
      ENDIF

!     IF ((MOD(NERC-1,2) .EQ. 0) .AND. (NERC .NE. 1)) THEN
!        WRITE(13,20)
!     ENDIF

      WRITE(13,25) NERC,FULLYR
      WRITE(13,30) FULLYR,NERC,FULLYR
      WRITE(13,35) NERC,NERC,FULLYR

      WRITE(13,25) NERC,FULLYR

      WRITE(13,100) (UPNAME(P(IP),1),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,100) (UPNAME(P(IP),2),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,100) (UPNAME(P(IP),3),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,25) NERC,FULLYR
      WRITE(13,25) NERC,FULLYR
!
      IF (FULLYR .EQ. UPSTYR) THEN
         WRITE(13,102) (UPECLF(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,104) (UPAVLYR(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,105) (INT(UPMSSIZ(UCPDSPI(P(IP))) + 0.5),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,106) (UPCLYR(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,108) (UPCPRO(UCPDSPI(P(IP)),1),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,110) (UPCPRO(UCPDSPI(P(IP)),2),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,110) (UPCPRO(UCPDSPI(P(IP)),3),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,110) (UPCPRO(UCPDSPI(P(IP)),4),IP = 1,COUNT),  NERC,FULLYR
         WRITE(13,110) (UPCPRO(UCPDSPI(P(IP)),5),IP = 1,COUNT), NERC,FULLYR
      ENDIF
!
      WRITE(13,120) (EPVOM(UCPDSPI(P(IP))) * SCALPR,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,140) (EPFOM(UCPDSPI(P(IP))) * SCALPR,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,160) (UPOVR(UCPDSPI(P(IP))) / (1.0 - UPCSB(UCPDSPI(P(IP)))) * SCALPR,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,161) (EPRGM(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,165) (EPACM(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,162) (UPLRPC(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,164) (UPLROPT(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,166) (UPLRLC(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,168) (UPANNADJ(UCPDSPI(P(IP)),MIN(MNUMYR,CURIYR+UPPLYR(UCPDSPI(P(IP))))),IP = 1,COUNT), NERC, FULLYR
      WRITE(13,170) ((UPOVR(UCPDSPI(P(IP))) / (1.0 - UPCSB(UCPDSPI(P(IP))))) * EPRGM(UCPDSPI(P(IP))) * UPLRPC(UCPDSPI(P(IP))) * UPLROPT(UCPDSPI(P(IP))) * EPACM(UCPDSPI(P(IP))) *             & !
        UPLRLC(UCPDSPI(P(IP))) * UPANNADJ(UCPDSPI(P(IP)),MIN(MNUMYR,CURIYR+UPPLYR(UCPDSPI(P(IP))))) * SCALPR,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,180) (UPMCF(P(IP)),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,200) (UPCCR(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR


      DO IP = 1 , COUNT
         IECP = UCPDSPI(P(IP))

         CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, IECP, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
         WHRATE(IP) = AVG_HTRT(IECP)

      END DO

      WRITE(13,210) (WHRATE(IP),IP = 1,COUNT), NERC,FULLYR

      WRITE(13,220) (UPFORT(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,240) (UPPMRT(UCPDSPI(P(IP))),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,250) (EPECAP(0,UCPDSPI(P(IP)),1) * .001,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,25) NERC,FULLYR
!

 20   FORMAT(1X,'FOS1',T150,I2,I4)
 25   FORMAT(1X,'FOS ',T150,I2,I4)
 30   FORMAT(1X,'FOS ','FOSSIL FUEL INPUT DATA:    ',I10,T150,I2,I4)
 35   FORMAT(1X,'FOS ','NERC REGION:                ',I10,T150,I2,I4)
100   FORMAT(1X,'FOS ',26X,3X,<COUNT>(A8,1X),T150,I2,I4)
102   FORMAT(1X,'FOS ECONOMIC LIFE (YRS)       ', 3X,<COUNT>(I8,1X),T150,I2,I4)
104   FORMAT(1X,'FOS YEAR AVAILABLE            ', 3X,<COUNT>(I8,1X),T150,I2,I4)
105   FORMAT(1X,'FOS UNIT SIZE (MEGAWATTS)     ', 3X,<COUNT>(I8,1X),T150,I2,I4)
106   FORMAT(1X,'FOS CONSTRUCT LEAD TIME (YRS) ', 3X,<COUNT>(I8,1X),T150,I2,I4)
108   FORMAT(1X,'FOS CONSTRUCTION PROFILE      ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
110   FORMAT(1X,'FOS ',26X, 3X,<COUNT>(F8.4,1X),T150,I2,I4)
120   FORMAT(1X,'FOS VAR. OM COSTS (MILLS/KWH)', 3X,<COUNT>(F8.2,1X),T150,I2,I4)
140   FORMAT(1X,'FOS FIXED OM COSTS ($/KW)    ', 3X,<COUNT>(F8.2,1X),T150,I2,I4)
160   FORMAT(1X,'FOS OVR CAPITAL COSTS ($/KW)  ', 3X,<COUNT>(F8.2,1X),T150,I2,I4)
161   FORMAT(1X,'FOS REGIONAL COST MUL (FRAC)  ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
165   FORMAT(1X,'FOS REGIONAL ELEV MULT  (FRAC)', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
162   FORMAT(1X,'FOS PROJECT CONTINGENCY (FRAC)', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
164   FORMAT(1X,'FOS TECH. OPTIMISM FAC. (FRAC)', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
166   FORMAT(1X,'FOS LEARNING FACTOR (FRAC)    ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
168   FORMAT(1X,'FOS ANNUAL COST MULT  (FRAC)  ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
170   FORMAT(1X,'FOS CUR CAPITAL COSTS ($/KW)  ', 3X,<COUNT>(F8.2,1X),T150,I2,I4)
180   FORMAT(1X,'FOS CAPACITY FACTOR           ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
200   FORMAT(1X,'FOS CAPACITY CREDIT           ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
210   FORMAT(1X,'FOS HEAT RATE  BTU/KWH        ', 3X,<COUNT>(F8.1,1X),T150,I2,I4)
220   FORMAT(1X,'FOS FORCED OUTAGE RATE        ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
240   FORMAT(1X,'FOS PLANNED MAINTENANCE RATE  ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
250   FORMAT(1X,'FOS EXISTING CAPACITY  GW)    ', 3X,<COUNT>(F8.3,1X),T150,I2,I4)
!
      RETURN
      END
!
!
!     STORPT PRINTS STORAGE REPORT
!
      SUBROUTINE STORPT(NERC)
!
!     The code determines the active technologies to report (those allowed to build) 
!       but this number must be hardcoded in the format statements and updated if it changes
!       currently 9 (2/2017)
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'entcntl'
      include 'enewtech'
      include 'wrenew'
      include 'uefdout'
                                                 !
      INTEGER  COUNT,IP,NERC,FULLYR,IPLT,P(ECP_D_CAP), OLYR

      CHARACTER*12 FROM_LABEL
      FULLYR = USYEAR(CURIYR)
!
      FROM_LABEL = "STORPT"

      COUNT = 0
      P = 0
      DO IP = 1,ECP_D_STO
        IPLT = UCPSTOI(IP)
        IF (UPVTYP(IPLT) .EQ. 1 .AND. UPAVLYR(IPLT) .LE. (MNUMYR+UHBSYR)) THEN
          COUNT = COUNT + 1
          P(COUNT) = IPLT
           write(13,*) 'STORPT ',IPLT,COUNT,P(COUNT)
        ENDIF
      ENDDO

      OLYR = 2

      IF (COUNT .GT. 0)THEN
      IF (FULLYR .EQ. UPSTYR) THEN
         WRITE(13,20)
      ENDIF

!     IF ((MOD(NERC-1,2) .EQ. 0) .AND. (NERC .NE. 1)) THEN
!        WRITE(13,20)
!     ENDIF

      WRITE(13,25) NERC,FULLYR
      WRITE(13,30) FULLYR,NERC,FULLYR
      WRITE(13,35) NERC,NERC,FULLYR

      WRITE(13,25) NERC,FULLYR

      WRITE(13,100) (UPNAME(P(IP),1),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,100) (UPNAME(P(IP),2),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,100) (UPNAME(P(IP),3),IP = 1,COUNT),NERC,FULLYR
      WRITE(13,25) NERC,FULLYR
      WRITE(13,25) NERC,FULLYR
!
      IF (FULLYR .EQ. UPSTYR) THEN
         WRITE(13,102) (UPECLF(P(IP)),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,104) (UPAVLYR(P(IP)),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,105) (INT(UPMSSIZ(P(IP)) + 0.5),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,106) (UPCLYR(P(IP)),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,108) (UPCPRO(P(IP),1),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,110) (UPCPRO(P(IP),2),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,110) (UPCPRO(P(IP),3),IP = 1,COUNT), NERC,FULLYR
         WRITE(13,110) (UPCPRO(P(IP),4),IP = 1,COUNT),  NERC,FULLYR
         WRITE(13,110) (UPCPRO(P(IP),5),IP = 1,COUNT), NERC,FULLYR
      ENDIF
!
      WRITE(13,120) (EPVOM(P(IP)) * SCALPR,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,140) (EPFOM(P(IP)) * SCALPR,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,160) (UPOVR(P(IP)) / (1.0 - UPCSB(P(IP))) * SCALPR,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,161) (EPRGM(P(IP)),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,165) (EPACM(P(IP)),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,162) (UPLRPC(P(IP)),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,164) (UPLROPT(P(IP)),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,166) (UPLRLC(P(IP)),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,168) (UPANNADJ(P(IP),MIN(MNUMYR,CURIYR+UPPLYR(P(IP)))),IP = 1,COUNT), NERC, FULLYR
      WRITE(13,170) ((UPOVR(P(IP)) / (1.0 - UPCSB(P(IP)))) * EPRGM(P(IP)) * UPLRPC(P(IP)) * UPLROPT(P(IP)) * EPACM(P(IP)) *             & !
        UPLRLC(P(IP)) * UPANNADJ(P(IP),MIN(MNUMYR,CURIYR+UPPLYR(P(IP)))) * SCALPR,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,180) (UPMCF(P(IP)),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,200) (UPCCR(P(IP)),IP = 1,COUNT), NERC,FULLYR


!     DO IP = 1 , COUNT
!        IECP = UCPSTOI(P(IP))

!        CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, IECP, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
!        WHRATE(IP) = AVG_HTRT(IECP)

!     END DO

!     WRITE(13,210) (WHRATE(IP),IP = 1,COUNT), NERC,FULLYR

      WRITE(13,220) (UPFORT(P(IP)),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,240) (UPPMRT(P(IP)),IP = 1,COUNT), NERC,FULLYR
      WRITE(13,250) (EPECAP(0,P(IP),1) * .001,IP = 1,COUNT), NERC,FULLYR
      WRITE(13,25) NERC,FULLYR
!

 20   FORMAT(1X,'STO1',T150,I2,I4)
 25   FORMAT(1X,'STO ',T150,I2,I4)
 30   FORMAT(1X,'STO ','STORAGE FUEL INPUT DATA:    ',I10,T150,I2,I4)
 35   FORMAT(1X,'STO ','NERC REGION:                ',I10,T150,I2,I4)
100   FORMAT(1X,'STO ',26X,3X,<COUNT>(A8,1X),T150,I2,I4)
102   FORMAT(1X,'STO ECONOMIC LIFE (YRS)       ', 3X,<COUNT>(I8,1X),T150,I2,I4)
104   FORMAT(1X,'STO YEAR AVAILABLE            ', 3X,<COUNT>(I8,1X),T150,I2,I4)
105   FORMAT(1X,'STO UNIT SIZE (MEGAWATTS)     ', 3X,<COUNT>(I8,1X),T150,I2,I4)
106   FORMAT(1X,'STO CONSTRUCT LEAD TIME (YRS) ', 3X,<COUNT>(I8,1X),T150,I2,I4)
108   FORMAT(1X,'STO CONSTRUCTION PROFILE      ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
110   FORMAT(1X,'STO ',26X, 3X,<COUNT>(F8.4,1X),T150,I2,I4)
120   FORMAT(1X,'STO VAR. OM COSTS (MILLS/KWH)', 3X,<COUNT>(F8.2,1X),T150,I2,I4)
140   FORMAT(1X,'STO FIXED OM COSTS ($/KW)    ', 3X,<COUNT>(F8.2,1X),T150,I2,I4)
160   FORMAT(1X,'STO OVR CAPITAL COSTS ($/KW)  ', 3X,<COUNT>(F8.2,1X),T150,I2,I4)
161   FORMAT(1X,'STO REGIONAL COST MUL (FRAC)  ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
165   FORMAT(1X,'STO REGIONAL ELEV MULT  (FRAC)', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
162   FORMAT(1X,'STO PROJECT CONTINGENCY (FRAC)', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
164   FORMAT(1X,'STO TECH. OPTIMISM FAC. (FRAC)', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
166   FORMAT(1X,'STO LEARNING FACTOR (FRAC)    ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
168   FORMAT(1X,'STO ANNUAL COST MULT  (FRAC)  ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
170   FORMAT(1X,'STO CUR CAPITAL COSTS ($/KW)  ', 3X,<COUNT>(F8.2,1X),T150,I2,I4)
180   FORMAT(1X,'STO CAPACITY FACTOR           ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
200   FORMAT(1X,'STO CAPACITY CREDIT           ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
210   FORMAT(1X,'STO HEAT RATE  BTU/KWH        ', 3X,<COUNT>(F8.1,1X),T150,I2,I4)
220   FORMAT(1X,'STO FORCED OUTAGE RATE        ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
240   FORMAT(1X,'STO PLANNED MAINTENANCE RATE  ', 3X,<COUNT>(F8.4,1X),T150,I2,I4)
250   FORMAT(1X,'STO EXISTING CAPACITY  GW)    ', 3X,<COUNT>(F8.3,1X),T150,I2,I4)

      END IF
!
      RETURN
      END
!
!
!     DGNRPT PRINTS FOSSIL FUEL REPORT
!
      SUBROUTINE DGNRPT(NERC)
!
!SM when updating the number of distributed generation
!     the index on FNAME and FORMAT statements must be increased by 1 to report a new dispatch type
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'entcntl'
      include 'enewtech'
      include 'wrenew'
      include 'uefdout'
                                                 !
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*8 WHRATE(ECP_D_DGN)

      INTEGER        IP,NERC,FULLYR, IECP, OLYR
      CHARACTER*12 FROM_LABEL
      CHARACTER*8    FNAME1(2)
      CHARACTER*8    FNAME2(2),FNAME3(2)
      DATA FNAME1/'    DIST','    DIST'/
      DATA FNAME2/'     GEN','     GEN'/
      DATA FNAME3/'    BASE','    PEAK'/
      FULLYR = USYEAR(CURIYR)
!
      IF (FULLYR .EQ. UPSTYR) THEN
         WRITE(13,20)
      ENDIF

      FROM_LABEL = "DGNRPT"

!     IF ((MOD(NERC-1,2) .EQ. 0) .AND. (NERC .NE. 1)) THEN
!     WRITE(13,20)
!     ENDIF
!     ENDIF

      WRITE(13,25) NERC,FULLYR
      WRITE(13,30) FULLYR,NERC,FULLYR
      WRITE(13,35) NERC,NERC,FULLYR
!      WRITE(13,25) NERC,FULLYR
      WRITE(13,25) NERC,FULLYR

      WRITE(13,100) (FNAME1(IP),IP = 1,ECP_D_DGN),NERC,FULLYR
      WRITE(13,100) (FNAME2(IP),IP = 1,ECP_D_DGN),NERC,FULLYR
      WRITE(13,100) (FNAME3(IP),IP = 1,ECP_D_DGN),NERC,FULLYR
      WRITE(13,25) NERC,FULLYR
      WRITE(13,25) NERC,FULLYR
!
      IF (FULLYR .EQ. UPSTYR) THEN
         WRITE(13,102) (UPECLF(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
          NERC,FULLYR
         WRITE(13,104) (UPAVLYR(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
          NERC,FULLYR
         WRITE(13,105) (INT(UPMSSIZ(UCPDGNI(IP)) + 0.5),IP = 1,ECP_D_DGN), &
          NERC,FULLYR
         WRITE(13,106) (UPCLYR(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
          NERC,FULLYR
         WRITE(13,108) (UPCPRO(UCPDGNI(IP),1),IP = 1,ECP_D_DGN), &
          NERC,FULLYR
         WRITE(13,110) (UPCPRO(UCPDGNI(IP),2),IP = 1,ECP_D_DGN), &
          NERC,FULLYR
         WRITE(13,110) (UPCPRO(UCPDGNI(IP),3),IP = 1,ECP_D_DGN), &
          NERC,FULLYR
         WRITE(13,110) (UPCPRO(UCPDGNI(IP),4),IP = 1,ECP_D_DGN),  &
          NERC,FULLYR
         WRITE(13,110) (UPCPRO(UCPDGNI(IP),5),IP = 1,ECP_D_DGN), &
          NERC,FULLYR
      ENDIF
!
      WRITE(13,120) (EPVOM(UCPDGNI(IP)) * SCALPR,IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,140) (EPFOM(UCPDGNI(IP)) * SCALPR,IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,160) ((UPOVR(UCPDGNI(IP)) / (1.0 - UPCSB(UCPDGNI(IP)))) * SCALPR,IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,161) (EPRGM(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,165) (EPACM(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,162) (UPLRPC(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,164) (UPLROPT(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,166) (UPLRLC(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,168) (UPANNADJ(UCPDGNI(IP),MIN(MNUMYR,CURIYR+UPPLYR(UCPDGNI(IP)))),IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,170) &
       ((UPOVR(UCPDGNI(IP)) / (1.0 - UPCSB(UCPDGNI(IP)))) * EPRGM(UCPDGNI(IP)) * &
        UPLRPC(UCPDGNI(IP)) &
         * UPLROPT(UCPDGNI(IP)) * EPACM(UCPDGNI(IP)) *             & !
        UPLRLC(UCPDGNI(IP)) * UPANNADJ(UCPDGNI(IP),MIN(MNUMYR,CURIYR+UPPLYR(UCPDGNI(IP)))) * SCALPR,IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,180) (UPMCF(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,200) (UPCCR(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
       NERC,FULLYR

      OLYR = 2
      DO IP = 1 , ECP_D_DGN
         IECP = UCPDGNI(IP)
   
         CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, IECP, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
         WHRATE(IP) = AVG_HTRT(IECP)
      END DO

      WRITE(13,210) (WHRATE(IP),IP = 1,ECP_D_DGN), NERC,FULLYR

      WRITE(13,220) (UPFORT(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,240) (UPPMRT(UCPDGNI(IP)),IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,250) (EPECAP(0,UCPDGNI(IP),1) * .001,IP = 1,ECP_D_DGN), &
       NERC,FULLYR
      WRITE(13,25) NERC,FULLYR
!

 20   FORMAT(1X,'DGN1',T126,I2,I4)
 25   FORMAT(1X,'DGN ',T126,I2,I4)
 30   FORMAT(1X,'DGN ','DISTGEN INPUT DATA:    ',I10,T126,I2,I4)
 35   FORMAT(1X,'DGN ','NERC REGION:                ',I10,T126,I2,I4)
100   FORMAT(1X,'DGN ',26X,3X,2(A8,1X),T126,I2,I4)
102   FORMAT(1X,'DGN ECONOMIC LIFE (YRS)       ', &
       3X,2(I8,1X),T126,I2,I4)
104   FORMAT(1X,'DGN YEAR AVAILABLE            ', &
       3X,2(I8,1X),T126,I2,I4)
105   FORMAT(1X,'DGN UNIT SIZE (MEGAWATTS)     ', &
       3X,2(I8,1X),T126,I2,I4)
106   FORMAT(1X,'DGN CONSTRUCT LEAD TIME (YRS) ', &
       3X,2(I8,1X),T126,I2,I4)
108   FORMAT(1X,'DGN CONSTRUCTION PROFILE      ', &
       3X,2(F8.4,1X),T126,I2,I4)
110   FORMAT(1X,'DGN ',26X, &
       3X,2(F8.4,1X),T126,I2,I4)
120   FORMAT(1X,'DGN VAR. O&M COSTS (MILLS/KWH)', &
       3X,2(F8.2,1X),T126,I2,I4)
140   FORMAT(1X,'DGN FIXED O&M COSTS ($/KW)    ', &
       3X,2(F8.2,1X),T126,I2,I4)
160   FORMAT(1X,'DGN OVR CAPITAL COSTS ($/KW)  ', &
       3X,2(F8.2,1X),T126,I2,I4)
161   FORMAT(1X,'DGN REGIONAL COST MUL (FRAC)  ', &
       3X,2(F8.4,1X),T126,I2,I4)
165   FORMAT(1X,'DGN REGIONAL ELEV MULT  (FRAC)', &
       3X,2(F8.4,1X),T126,I2,I4)
162   FORMAT(1X,'DGN PROJECT CONTINGENCY (FRAC)', &
       3X,2(F8.4,1X),T126,I2,I4)
164   FORMAT(1X,'DGN TECH. OPTIMISM FAC. (FRAC)', &
       3X,2(F8.4,1X),T126,I2,I4)
166   FORMAT(1X,'DGN LEARNING FACTOR (FRAC)    ', &
       3X,2(F8.4,1X),T126,I2,I4)
168   FORMAT(1X,'DGN ANNUAL COST MULT  (FRAC)  ', &
       3X,2(F8.4,1X),T126,I2,I4)
170   FORMAT(1X,'DGN CUR CAPITAL COSTS ($/KW)  ', &
       3X,2(F8.2,1X),T126,I2,I4)
180   FORMAT(1X,'DGN CAPACITY FACTOR           ', &
       3X,2(F8.4,1X),T126,I2,I4)
200   FORMAT(1X,'DGN CAPACITY CREDIT           ', &
       3X,2(F8.4,1X),T126,I2,I4)
210   FORMAT(1X,'DGN HEAT RATE  BTU/KWH        ', &
       3X,2(F8.1,1X),T126,I2,I4)
220   FORMAT(1X,'DGN FORCED OUTAGE RATE        ', &
       3X,2(F8.4,1X),T126,I2,I4)
240   FORMAT(1X,'DGN PLANNED MAINTENANCE RATE  ', &
       3X,2(F8.4,1X),T126,I2,I4)
250   FORMAT(1X,'DGN EXISTING CAPACITY  GW)    ', &
       3X,2(F8.3,1X),T126,I2,I4)
!
      RETURN
      END
!
!
!     CAPRPT STORES CAPITAL COSTS FOR FTAB
!
      SUBROUTINE CAPRPT(NERC)
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'entcntl'
      include 'enewtech'
!     include 'wrenew'
      include 'uefdout'
      include 'uecpout'
!
      INTEGER        NERC,FULLYR,IPLT,IRNW,IINT,IDGN,OLYR,RNWRGN(ECP_D_CAP)
      REAL           ITC
      FULLYR = USYEAR(CURIYR)
      RNWRGN = 1   ! initialize  to  1 for all, change for select techs (hydro / geo) to pick representative site data
      RNWRGN(WIGT) = 25
      RNWRGN(WIHY) = 23
!
!     INITIALIZE CAPITAL COST OUTPUTS
!
      IF (FULLYR .EQ. UPSTYR .AND. NERC .EQ. 1)THEN
         UPPCCCST = 0.0
         UPIGCCST = 0.0
         UPISCCST = 0.0
         UPICCCST = 0.0
         UPCTCCST = 0.0
         UPATCCST = 0.0
         UPCCCCST = 0.0
         UPACCCST = 0.0
         UPCSCCST = 0.0
         UPFCCCST = 0.0
         UPANCCST = 0.0
         UPWDCCST = 0.0
         UPGTCCST = 0.0
         UPMSCCST = 0.0
         UPHYCCST = 0.0
         UPWNCCST = 0.0
         UPWLCCST = 0.0
         UPWFCCST = 0.0
         UPSOCCST = 0.0
         UPPVCCST = 0.0
         UPDSCCST = 0.0
         UPPTCCST = 0.0
         UPDBCCST = 0.0
         UPDPCCST = 0.0
         UPPQCCST = 0.0
         UPSMCCST = 0.0
         UPBICCST = 0.0 !-kc
         B_CCST_ADJ = 1.0  
      END IF
1122  FORMAT(1x,A20,3F12.3)
! updated 3/2020 to fill in variables for all years, starting from first ECP year 
!     PC
      IPLT = WIPC
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPPCCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPPCCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
!     write(6,1111) curiyr+1989,olyr+1989,uplntcd(iplt), scalpr,itc,  &
!           UPOVR(UCPDSPI(IPLT)) * scalpr,  &
!           UPLRPC(UCPDSPI(IPLT)) ,  &
!           UPLROPT(UCPDSPI(IPLT)) , &
!           UPLRLC(UCPDSPI(IPLT)) , &
!           UPANNADJ(UCPDSPI(IPLT),OLYR),  &
!           UPPCCCST(MNUMNR,OLYR) * scalpr
!1111 format(1h ,'!pccst',i4,i5,a3,2f8.4,f8.1,4f8.4,f8.1)
         END IF
      END IF
!     IG
      IPLT = WIIG
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPIGCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR) * B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPIGCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         END IF
      END IF
!     PQ
      IPLT = WIPQ
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPPQCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPPQCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         END IF
      END IF
!     IS
      IPLT = WIIS
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPISCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPISCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         END IF
      END IF
!     IC
      IPLT = WIIC
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPICCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPICCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         END IF
      END IF
!     CT
      IPLT = WICT
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPCTCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPCTCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         END IF
      END IF
!     AT
      IPLT = WIAT
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPATCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPATCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         END IF
      END IF
!     CC
      IPLT = WICC
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPCCCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPCCCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         END IF
      END IF
!     AC
      IPLT = WIAC
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPACCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPACCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         END IF
      END IF
!     CS
      IPLT = WICS
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPCSCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPCSCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)* B_CCST_ADJ(UCPDSPI(IPLT))
         END IF
      END IF
!     FC
      IPLT = WIFC
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPFCCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPFCCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)
         END IF
      END IF
!     AN
      IPLT = WIAN
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPANCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPANCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)
         END IF
      END IF
!     SM
      IPLT = WISM
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDSPI(IPLT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPSMCCST(NERC,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * EPRGM(UCPDSPI(IPLT)) * &
             UPLRPC(UCPDSPI(IPLT)) * UPLROPT(UCPDSPI(IPLT)) * EPACM(UCPDSPI(IPLT)) *  &
             UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPSMCCST(MNUMNR,OLYR) = (UPOVR(UCPDSPI(IPLT)) / ITC) * UPLRPC(UCPDSPI(IPLT)) *  &
             UPLROPT(UCPDSPI(IPLT)) * UPLRLC(UCPDSPI(IPLT)) * UPANNADJ(UCPDSPI(IPLT),OLYR)
         END IF
      END IF      
!     WD
      IPLT = WIWD
      IRNW = UCPRNWIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPRNWI(IRNW))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPWDCCST(NERC,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * EPRGM(UCPRNWI(IRNW)) * &
             UPLRPC(UCPRNWI(IRNW)) * UPLROPT(UCPRNWI(IRNW)) * EPACM(UCPRNWI(IRNW)) *  &
             UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR) *  &
             EPCCSUP(UIRRNWI(IRNW),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPWDCCST(MNUMNR,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * UPLRPC(UCPRNWI(IRNW)) *  &
             UPLROPT(UCPRNWI(IRNW)) * UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR) 
         END IF
      END IF
!     BI
      IPLT = WIBI
      IRNW = UCPRNWIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPRNWI(IRNW))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPBICCST(NERC,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * EPRGM(UCPRNWI(IRNW)) * &
             UPLRPC(UCPRNWI(IRNW)) * UPLROPT(UCPRNWI(IRNW)) * EPACM(UCPRNWI(IRNW)) *  &
             UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR) *  &
             EPCCSUP(UIRRNWI(IRNW),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPBICCST(MNUMNR,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * UPLRPC(UCPRNWI(IRNW)) *  &
             UPLROPT(UCPRNWI(IRNW)) * UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR) 
         END IF
      END IF
!     GT
      IPLT = WIGT
      IRNW = UCPRNWIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPRNWI(IRNW))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPGTCCST(NERC,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * EPRGM(UCPRNWI(IRNW)) * &
             UPLRPC(UCPRNWI(IRNW)) * UPLROPT(UCPRNWI(IRNW)) * EPACM(UCPRNWI(IRNW)) *  &
             UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR) * &
             EPCCSUP(UIRRNWI(IRNW),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPGTCCST(MNUMNR,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * UPLRPC(UCPRNWI(IRNW)) *  &
             UPLROPT(UCPRNWI(IRNW)) * UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR) 
         END IF
      END IF
!     MS
      IPLT = WIMS
      IRNW = UCPRNWIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPRNWI(IRNW))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPMSCCST(NERC,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * EPRGM(UCPRNWI(IRNW)) * &
             UPLRPC(UCPRNWI(IRNW)) * UPLROPT(UCPRNWI(IRNW)) * EPACM(UCPRNWI(IRNW)) *  &
             UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR) * &
             EPCCSUP(UIRRNWI(IRNW),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPMSCCST(MNUMNR,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * UPLRPC(UCPRNWI(IRNW)) *  &
             UPLROPT(UCPRNWI(IRNW)) * UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR)
         END IF
      END IF
!     HY
      IPLT = WIHY
      IRNW = UCPRNWIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPRNWI(IRNW))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPHYCCST(NERC,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * EPRGM(UCPRNWI(IRNW)) * &
             UPLRPC(UCPRNWI(IRNW)) * UPLROPT(UCPRNWI(IRNW)) * EPACM(UCPRNWI(IRNW)) *  &
             UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR) * &
             EPCCSUP(UIRRNWI(IRNW),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPHYCCST(MNUMNR,OLYR) = (EPIROVR(UIRRNWI(IRNW)) / ITC) * UPLRPC(UCPRNWI(IRNW)) *  &
             UPLROPT(UCPRNWI(IRNW)) * UPLRLC(UCPRNWI(IRNW)) * UPANNADJ(UCPRNWI(IRNW),OLYR)
         END IF
      END IF
!     WN
      IPLT = WIWN
      IINT = UCPINTIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPINTI(IINT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPWNCCST(NERC,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * EPRGM(UCPINTI(IINT)) * &
             UPLRPC(UCPINTI(IINT)) * UPLROPT(UCPINTI(IINT)) * EPACM(UCPINTI(IINT)) *  &
             UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) * &
             EPCCSUP(UIRINTI(IINT),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPWNCCST(MNUMNR,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * UPLRPC(UCPINTI(IINT)) *  &
             UPLROPT(UCPINTI(IINT)) * UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) 
!     write(6,2222) curiyr+1989,olyr+1989,uplntcd(iplt), scalpr, itc,  &
!           EPIROVR(UIRINTI(IINT)) * scalpr,  &
!           UPLRPC(UCPINTI(IINT)) ,  &
!           UPLROPT(UCPINTI(IINT)) , &
!           UPLRLC(UCPINTI(IINT)) , &
!           UPANNADJ(UCPINTI(IINT),OLYR),  &
!           UPWNCCST(MNUMNR,OLYR) * scalpr, &
!           EPCCSUP(UIRINTI(IINT),1)
 2222 format(1h ,'!wncst',i4,i5,a3,2f8.4,f8.1,4f8.4,f8.1,f8.4)
         END IF
      END IF
!     WL
      IPLT = WIWL
      IINT = UCPINTIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPINTI(IINT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
         UPWLCCST(NERC,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * EPRGM(UCPINTI(IINT)) * &
             UPLRPC(UCPINTI(IINT)) * UPLROPT(UCPINTI(IINT)) * EPACM(UCPINTI(IINT)) *  &
             UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) * &
             EPCCSUP(UIRINTI(IINT),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPWLCCST(MNUMNR,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * UPLRPC(UCPINTI(IINT)) *  &
               UPLROPT(UCPINTI(IINT)) * UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) 
         END IF
      END IF
!     WF
      IPLT = WIWF
      IINT = UCPINTIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPINTI(IINT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPWFCCST(NERC,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * EPRGM(UCPINTI(IINT)) * &
             UPLRPC(UCPINTI(IINT)) * UPLROPT(UCPINTI(IINT)) * EPACM(UCPINTI(IINT)) *  &
             UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) * &
             EPCCSUP(UIRINTI(IINT),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPWFCCST(MNUMNR,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * UPLRPC(UCPINTI(IINT)) *  &
             UPLROPT(UCPINTI(IINT)) * UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) 
         END IF
      END IF
!     SO
      IPLT = WISO
      IINT = UCPINTIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPINTI(IINT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPSOCCST(NERC,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * EPRGM(UCPINTI(IINT)) * &
             UPLRPC(UCPINTI(IINT)) * UPLROPT(UCPINTI(IINT)) * EPACM(UCPINTI(IINT)) *  &
             UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) * &
             EPCCSUP(UIRINTI(IINT),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPSOCCST(MNUMNR,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * UPLRPC(UCPINTI(IINT)) *  &
             UPLROPT(UCPINTI(IINT)) * UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) 
         END IF
      END IF
!     PV
      IPLT = WIPV
      IINT = UCPINTIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPINTI(IINT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPPVCCST(NERC,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * EPRGM(UCPINTI(IINT)) * &
             UPLRPC(UCPINTI(IINT)) * UPLROPT(UCPINTI(IINT)) * EPACM(UCPINTI(IINT)) *  &
             UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) * &
             EPCCSUP(UIRINTI(IINT),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPPVCCST(MNUMNR,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * UPLRPC(UCPINTI(IINT)) *  &
             UPLROPT(UCPINTI(IINT)) * UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) 
         END IF
      END IF
!     DS
      IPLT = WIDS
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(IPLT)
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPDSCCST(NERC,OLYR) = (UPOVR(IPLT) / ITC) * EPRGM(IPLT) * &
             UPLRPC(IPLT) * UPLROPT(IPLT) * EPACM(IPLT) *  &
             UPLRLC(IPLT) * UPANNADJ(IPLT,OLYR)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPDSCCST(MNUMNR,OLYR) = (UPOVR(IPLT) / ITC) * UPLRPC(IPLT) *  &
             UPLROPT(IPLT) * UPLRLC(IPLT) * UPANNADJ(IPLT,OLYR)
         END IF
      END IF
!     PT
      IPLT = WIPT
      IINT = UCPINTIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPINTI(IINT))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPPTCCST(NERC,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * EPRGM(UCPINTI(IINT)) * &
             UPLRPC(UCPINTI(IINT)) * UPLROPT(UCPINTI(IINT)) * EPACM(UCPINTI(IINT)) *  &
             UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) * &
             EPCCSUP(UIRINTI(IINT),1)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPPTCCST(MNUMNR,OLYR) = (EPIROVR(UIRINTI(IINT)) / ITC) * UPLRPC(UCPINTI(IINT)) *  &
             UPLROPT(UCPINTI(IINT)) * UPLRLC(UCPINTI(IINT)) * UPANNADJ(UCPINTI(IINT),OLYR) 
         END IF
      END IF
!     DB
      IPLT = WIDB
      IDGN = UCPDGNIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDGNI(IDGN))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPDBCCST(NERC,OLYR) = (UPOVR(UCPDGNI(IDGN)) / ITC) * EPRGM(UCPDGNI(IDGN)) * &
             UPLRPC(UCPDGNI(IDGN)) * UPLROPT(UCPDGNI(IDGN)) * EPACM(UCPDGNI(IDGN)) *  &
             UPLRLC(UCPDGNI(IDGN)) * UPANNADJ(UCPDGNI(IDGN),OLYR)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPDBCCST(MNUMNR,OLYR) = (UPOVR(UCPDGNI(IDGN)) / ITC) * UPLRPC(UCPDGNI(IDGN)) *  &
             UPLROPT(UCPDGNI(IDGN)) * UPLRLC(UCPDGNI(IDGN)) * UPANNADJ(UCPDGNI(IDGN),OLYR)
         END IF
      END IF
!     DP
      IPLT = WIDP
      IDGN = UCPDGNIS(IPLT)
      OLYR = CURIYR + UPPLYR(IPLT)
      ITC = 1.0 - UPCSB(UCPDGNI(IDGN))
      IF ((MNUMYR + UHBSYR) .GE. UPAVLYR(IPLT) .AND. OLYR .LE. MNUMYR)THEN
            UPDPCCST(NERC,OLYR) = (UPOVR(UCPDGNI(IDGN)) / ITC) * EPRGM(UCPDGNI(IDGN)) * &
             UPLRPC(UCPDGNI(IDGN)) * UPLROPT(UCPDGNI(IDGN)) * EPACM(UCPDGNI(IDGN)) *  &
             UPLRLC(UCPDGNI(IDGN)) * UPANNADJ(UCPDGNI(IDGN),OLYR)
         IF (NERC .EQ. RNWRGN(IPLT))THEN
            UPDPCCST(MNUMNR,OLYR) = (UPOVR(UCPDGNI(IDGN)) / ITC) * UPLRPC(UCPDGNI(IDGN)) *  &
             UPLROPT(UCPDGNI(IDGN)) * UPLRLC(UCPDGNI(IDGN)) * UPANNADJ(UCPDGNI(IDGN),OLYR)
         END IF
      END IF
!
      RETURN
      END
!                                                                       !//EMMDB//
!     SUBROUTINE EMMDBIN PRINTS ECP INPUT DATA FOR EMM DATABASE          !//EMMDB//
!                                                                        !//EMMDB//
      SUBROUTINE EMMDBIN(NERC)                                           !//EMMDB//
!                                                                        !//EMMDB//
      IMPLICIT NONE                                                      !//EMMDB//
      include 'parametr'                                          !//emmdb//
      include 'ncntrl'                                            !//emmdb//
      include 'emmparm'                                           !//emmdb//
      include 'ecpcntl'                                           !//emmdb//
      include 'control'                                           !//emmdb//
      include 'bildin'                                            !//emmdb//
      include 'entcntl'                                           !//emmdb//
      include 'enewtech'                                          !//emmdb//
      include 'wrenew'                                            !//emmdb//
      include 'eusprc'                                            !//emmdb//
      include 'edbdef'                                            !//emmdb//
      include 'uefdout'
                                                                         !//EMMDB//
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      INTEGER NUMTABS
      PARAMETER (NUMTABS = 7)        ! total number of database tables
      INTEGER*4 IP,NERC,FULLYR,IR,IFL, OLYR   ! INDICES        !//EMMDB//
      INTEGER*4 IRCF,IYR                      ! INDICES        !//EMMDB//
      REAL*4    NOBND,CF,STPMULT                                         !//EMMDB//
      CHARACTER*12 FROM_LABEL
      CHARACTER*2 COL                                                    !//EMMDB//
!
      LOOPING = 0
      NUMCOLS = 0
      DYNSTM = ' '
      WRTSTM = ' '
      COLVALS = 0.0
      COLV = 0.0
      CHCOLVALS = ' '
      CHCOLV = ' '
!
      FROM_LABEL = "EMMDBIN"

      FULLYR = USYEAR(CURIYR)                                            !//EMMDB//
!                                                                        !//EMMDB//
!     IF FIRST YEAR AND FIRST REGION THEN WRITE OUT NATIONAL LEVEL       !//EMMDB//
!     EMMDB INPUT PARAMETER TABLE.                                       !//EMMDB//
!                                                                        !//EMMDB//
      COL = ' :'                                                        !//EMMDB//
!
      IF ((FULLYR .EQ. UPSTYR) .AND. (NERC .EQ. 1)) THEN                 !//EMMDB//
        DO IP = 1 , ECP_D_CAP                                              !//EMMDB//
          IF (USW_DBS .GT. 0) &
          WRITE(UF_DBS,1000) COL,IP,COL,UPAVLYR(IP),COL,UPECLF(IP),COL,    & !//EMMDB//
          UPTXLF(IP),COL,UPUCLF(IP),COL,UPNCLF(IP),COL,UPNLLF(IP),COL,    & !//EMMDB//
          UPCLYR(IP),COL,UPFORT(IP),COL,UPPMRT(IP),COL,UPCSB(IP),COL,     & !//EMMDB//
          UPLRPC(IP),COL,TRIM(SCEN_DATE)                                    !//EMMDB//

!       write national input parameters to database

          TNUM = 1
          IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
            IF (LOOPING(TNUM) .EQ. 0) THEN
               NUMCOLS(TNUM) = 12
               DYNSTM(TNUM) =  'INSERT INTO ECP_NATIONAL_INPUT VALUES(?,?,?,?,?,?,?,?,'  &
                               //'?,?,?,?,?)'
               WRTSTM(TNUM) =  'ECP_NATIONAL_INPUT' 
            ENDIF
            LOOPING(TNUM) = LOOPING(TNUM) + 1
            COLV(TNUM,1,LOOPING(TNUM)) = IP                                  !//EMMDB//
            COLV(TNUM,2,LOOPING(TNUM)) = UPAVLYR(IP)                         !//EMMDB//
            COLV(TNUM,3,LOOPING(TNUM)) = UPECLF(IP)                          !//EMMDB//
            COLV(TNUM,4,LOOPING(TNUM)) = UPTXLF(IP)                          !//EMMDB//
            COLV(TNUM,5,LOOPING(TNUM)) = UPUCLF(IP)                          !//EMMDB//
            COLV(TNUM,6,LOOPING(TNUM)) = UPNCLF(IP)                          !//EMMDB//
            COLV(TNUM,7,LOOPING(TNUM)) = UPNLLF(IP)                          !//EMMDB//
            COLV(TNUM,8,LOOPING(TNUM)) = UPCLYR(IP)                          !//EMMDB//
            COLV(TNUM,9,LOOPING(TNUM)) = UPFORT(IP)                          !//EMMDB//
            COLV(TNUM,10,LOOPING(TNUM)) = UPPMRT(IP)                          !//EMMDB//
            COLV(TNUM,11,LOOPING(TNUM)) = UPCSB(IP)                           !//EMMDB//
            COLV(TNUM,12,LOOPING(TNUM)) = UPLRPC(IP)                          !//EMMDB//
            IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
              COLVALS(:,:) = COLV(TNUM,:,:)
!             CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              LOOPING(TNUM) = 0
            ENDIF
          ENDIF
        ENDDO                                                            !//EMMDB//
1000  FORMAT(1X,'ECPNTIN',(A2,I3),(A2,I5),6(A2,I3),4(A2,F5.3),A2,A)      !//EMMDB//
!                                                                        !//EMMDB//
!       WRITE OUT CONSTRUCTION PROFILE TABLE                             !//EMMDB//
!                                                                        !//EMMDB//
        DO IP = 1, ECP_D_CAP                                               !//EMMDB//
         IF ( ( UPVTYP(IP) .NE. 0 ) .AND. ( UPAVLYR(IP) .NE. 9999 ) ) THEN
           IF (USW_DBS .GT. 0)  &
           WRITE(UF_DBS,3000) COL,IP,COL,UPCLYR(IP),COL,UPCPRO(IP,1),     & !//EMMDB//
                   COL,UPCPRO(IP,2),COL,UPCPRO(IP,3),COL,                 & !//EMMDB//
                   UPCPRO(IP,4),COL,UPCPRO(IP,5),COL,TRIM(SCEN_DATE)     !//EMMDB//
!
!       write construction profile to database
!
          TNUM = 2
          IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
            IF (LOOPING(TNUM) .EQ. 0) THEN
               NUMCOLS(TNUM) = 7
               DYNSTM(TNUM) =  'INSERT INTO ECP_CONST_PROFILE VALUES(?,?,?,?,?,?,?,?)'
               WRTSTM(TNUM) =  'ECP_CONST_PROFILE'
            ENDIF
            LOOPING(TNUM) = LOOPING(TNUM) + 1
            COLV(TNUM,1,LOOPING(TNUM)) = IP                                  !//EMMDB//
            COLV(TNUM,2,LOOPING(TNUM)) = UPCLYR(IP)                          !//EMMDB//
            COLV(TNUM,3,LOOPING(TNUM)) = UPCPRO(IP,1)                        !//EMMDB//
            COLV(TNUM,4,LOOPING(TNUM)) = UPCPRO(IP,2)                        !//EMMDB//
            COLV(TNUM,5,LOOPING(TNUM)) = UPCPRO(IP,3)                        !//EMMDB//
            COLV(TNUM,6,LOOPING(TNUM)) = UPCPRO(IP,4)                        !//EMMDB//
            COLV(TNUM,7,LOOPING(TNUM)) = UPCPRO(IP,5)                        !//EMMDB//
            IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
              COLVALS(:,:) = COLV(TNUM,:,:)
!             CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              LOOPING(TNUM) = 0
              ENDIF
           ENDIF
         ENDIF
        ENDDO                                                            !//EMMDB//
3000    FORMAT(1X,'ECPCPRO',A2,I4,A2,I4,5(A2,F7.4),A2,A)                 !//EMMDB//
!                                                                        !//EMMDB//
!       WRITE OUT ECP DISPATCHABLE CAPACITY PARAMETERS                   !//EMMDB//
!                                                                        !//EMMDB//
        DO IP = 1, ECP_D_DSP                                               !//EMMDB//
          IF (USW_DBS .GT. 0)   &
           WRITE(UF_DBS,4000) COL,IP,COL,UPPHRT0(IP),COL,UPPHRTN(IP),     & !//EMMDB//
            COL,UPPCFB(IP,1),COL,UPPCFB(IP,2),COL,TRIM(SCEN_DATE)        !//EMMDB//
!
!       write dispatchable capacity parameters to database
!
          TNUM = 3
          IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
            IF (LOOPING(TNUM) .EQ. 0) THEN
               NUMCOLS(TNUM) = 5
               DYNSTM(TNUM) =  'INSERT INTO ECP_DISP_CAP_PARM VALUES(?,?,?,?,?,?)'
               WRTSTM(TNUM) =  'ECP_DISP_CAP_PARM'
            ENDIF
            LOOPING(TNUM) = LOOPING(TNUM) + 1
            COLV(TNUM,1,LOOPING(TNUM)) = IP
            COLV(TNUM,2,LOOPING(TNUM)) = UPPHRT0(IP)
            COLV(TNUM,3,LOOPING(TNUM)) = UPPHRTN(IP)
            COLV(TNUM,4,LOOPING(TNUM)) = UPPCFB(IP,1)
            COLV(TNUM,5,LOOPING(TNUM)) = UPPCFB(IP,2)
            IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
              COLVALS(:,:) = COLV(TNUM,:,:)
!             CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              LOOPING(TNUM) = 0
              ENDIF
           ENDIF
        ENDDO                                                            !//EMMDB//
4000    FORMAT(1X,'ECPDSPP',A2,I4,2(A2,F8.1),2(A2,F8.3),A2,A)            !//EMMDB//
!                                                                        !//EMMDB//
!       WRITE OUT CCAP TO CFL MAPPING TABLE                              !//EMMDB//
!                                                                        !//EMMDB//
        DO IP = 1, ECP_D_DSP                                               !//EMMDB//
          DO IFL = 1,4                                                   !//EMMDB//
            IF (UPFLTP(IP,IFL) .NE. 0) THEN
              IF (USW_DBS .GT. 0) &
              WRITE(UF_DBS,4500) COL,IP,COL,UPFLTP(IP,IFL),COL,IFL,COL,TRIM(SCEN_DATE)
!
!             write ccap to cfl mapping to database
!
              TNUM = 4
              IF ( (ORCLECP .EQ. 2) .AND. (FNRUN.EQ.1) ) THEN
                IF (LOOPING(TNUM) .EQ. 0) THEN
                  NUMCOLS(TNUM) = 3
                  DYNSTM(TNUM) =  'INSERT INTO ECP_CCAP_TO_CFL VALUES(?,?,?,?)'
                  WRTSTM(TNUM) =  'ECP_CCAP_TO_CFL'
                ENDIF
                LOOPING(TNUM) = LOOPING(TNUM) + 1
                COLV(TNUM,1,LOOPING(TNUM)) = IP                               !//EMMDB//
                COLV(TNUM,2,LOOPING(TNUM)) = UPFLTP(IP,IFL)                   !//EMMDB//
                COLV(TNUM,3,LOOPING(TNUM)) = IFL                              !//EMMDB//
                IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                 COLVALS(:,:) = COLV(TNUM,:,:)
!                CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                 CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                 LOOPING(TNUM) = 0
                 ENDIF
              ENDIF

            ENDIF
          ENDDO                                                          !//EMMDB//
        ENDDO                                                            !//EMMDB//
4500    FORMAT(1X,'CCAPCFL',A2,I4,A2,I4,A2,I4,A2,A)                      !//EMMDB//
!                                                                        !//EMMDB//
      ENDIF                                                              !//EMMDB//
!                                                                        !//EMMDB//
!     WRITE OUT INPUT PARAMETERS THAT VARY BY REGION AND YEAR            !//EMMDB//
!                                                                        !//EMMDB//
      NOBND = 9999.99                                                    !//EMMDB//
      OLYR = 2
!                                                                        !//EMMDB//
      DO IP = 1, ECP_D_CAP                                                 !//EMMDB//
       IF ( ( UPVTYP(IP) .NE. 0 ) .AND. ( UPAVLYR(IP) .NE. 9999 ) ) THEN
        CALL ECP_AVG_HTRT(FROM_LABEL, NERC, 0, IP, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

        IF ( (UCPDSPIS(IP) .GT. 0) .OR. (UCPDGNIS(IP) .GT. 0) .OR. (UCPSTOIS(IP) .GT. 0)) THEN     !//EMMDB//
          
          IF(IP .EQ. WIDS) THEN
            UPCCR(IP)  = MIN(DINURAL_STORAGE_CAPACITY_CREDIT(CURIYR, NERC), 1.0)
            WRITE(13,*) UPCCR(IP),NERC,CURIYR
          END IF
          
          STPMULT = 1.0
          IF (USW_DBS .GT. 0) THEN

             WRITE(UF_DBS,2000) COL,IP,COL,NERC,COL,CURIYR,COL,              & !//EMMDB//
                YEARPR-UHBSYR,COL,                                            & !//EMMDB//
                EPVOM(IP)*SCALPR,COL,EPFOM(IP)*SCALPR,COL,(UPOVR(IP)/(1-UPCSB(IP)))*SCALPR,   & !//EMMDB//
                COL,EPRGM(IP),COL,EPACM(IP),COL,UPLROPT(IP),                  & !//EMMDB//
                COL,UPLRLC(IP),COL,STPMULT,COL,       & !//EMMDB//
                (UPOVR(IP) * EPRGM(IP) * UPLRPC(IP) *                         & !//EMMDB//
                UPLROPT(IP) * UPLRLC(IP) * EPACM(IP) * UPANNADJ(IP,MIN(MNUMYR,CURIYR+UPPLYR(IP))) * SCALPR) ,COL,          & !//EMMDB//
                AVG_HTRT(IP),COL,UPMCF(IP),COL,UPCCR(IP),COL,                   & !//EMMDB//
                (EPECAP(0,IP,1)*.001),COL,NOBND,COL,TRIM(SCEN_DATE)            !//EMMDB//
          END IF
!
!         write regional input parameters to database          !//EMMDB//
!
          TNUM = 5
          IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
            IF (LOOPING(TNUM) .EQ. 0) THEN
              NUMCOLS(TNUM) = 21
              DYNSTM(TNUM) =  'INSERT INTO ECP_REGIONAL_INPUT VALUES(?,?,?,?,?,?,?,?,?,?,'    &
                               //'?,?,?,?,?,?,?,?,?,?,?,?)'
              WRTSTM(TNUM) =  'ECP_REGIONAL_INPUT' 
            ENDIF
            LOOPING(TNUM) = LOOPING(TNUM) + 1
            COLV(TNUM,1,LOOPING(TNUM)) = IP                          !//EMMDB//
            COLV(TNUM,2,LOOPING(TNUM)) = NERC                        !//EMMDB//
            COLV(TNUM,3,LOOPING(TNUM)) = CURIYR                      !//EMMDB//
            COLV(TNUM,4,LOOPING(TNUM)) = YEARPR-UHBSYR               !//EMMDB//
            COLV(TNUM,5,LOOPING(TNUM)) = EPVOM(IP)*SCALPR            !//EMMDB//
            COLV(TNUM,6,LOOPING(TNUM)) = EPFOM(IP)*SCALPR            !//EMMDB//
            COLV(TNUM,7,LOOPING(TNUM)) = (UPOVR(IP)/(1-UPCSB(IP)))*SCALPR            !//EMMDB//
            COLV(TNUM,8,LOOPING(TNUM)) = EPRGM(IP)                   !//EMMDB//
            COLV(TNUM,9,LOOPING(TNUM)) = EPACM(IP)                   !//EMMDB//
            COLV(TNUM,10,LOOPING(TNUM)) = UPLROPT(IP)                 !//EMMDB//
            COLV(TNUM,11,LOOPING(TNUM)) = UPLRLC(IP)                  !//EMMDB//
            COLV(TNUM,12,LOOPING(TNUM)) = UPCSB(IP)                  !//EMMDB//
            COLV(TNUM,13,LOOPING(TNUM)) = UPLRPC(IP)                  !//EMMDB//
            COLV(TNUM,14,LOOPING(TNUM)) = UPANNADJ(IP,MIN(MNUMYR,CURIYR+UPPLYR(IP)))         !//EMMDB//
            COLV(TNUM,15,LOOPING(TNUM)) = (UPOVR(IP) * SCALPR *        & !//EMMDB//
                EPRGM(IP)*EPACM(IP)* UPANNADJ(IP,MIN(MNUMYR,CURIYR+UPPLYR(IP))) *       & !//EMMDB//
                UPLRPC(IP) * UPLROPT(IP) * UPLRLC(IP))       !//EMMDB//
            COLV(TNUM,16,LOOPING(TNUM)) = AVG_HTRT(IP) !//EMMDB//
            COLV(TNUM,17,LOOPING(TNUM)) = UPMCF(IP)                   !//EMMDB//
            COLV(TNUM,18,LOOPING(TNUM)) = UPCCR(IP)                   !//EMMDB//
            COLV(TNUM,19,LOOPING(TNUM)) = (EPECAP(0,IP,1)*.001)         !//EMMDB//
            COLV(TNUM,20,LOOPING(TNUM)) = NOBND                       !//EMMDB//
            COLV(TNUM,21,LOOPING(TNUM)) = STPMULT                     !//EMMDB//
            IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
              COLVALS(:,:) = COLV(TNUM,:,:)
!             CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              LOOPING(TNUM) = 0
             ENDIF
          ENDIF
!                                                            !//EMMDB//
        ELSE                                                             !//EMMDB//
          IF (UCPINTIS(IP) .GT. 0) THEN                                  !//EMMDB//
             IRCF = UCPINTIS(IP)                                           !//EMMDB//
             IR = UIRINTI(IRCF)                                           !//EMMDB//
             CF = EPIACF(IRCF)                                             !//EMMDB//
          ELSE IF (UCPRNWIS(IP) .GT. 0) THEN                             !//EMMDB//
            IRCF = UCPRNWIS(IP)                                            !//EMMDB//
            IR = UIRRNWI(IRCF)                                            !//EMMDB//
            CF = EPRCFC(IRCF)                                              !//EMMDB//
          ENDIF                                                          !//EMMDB//
          IF (USW_DBS .GT. 0) &
           WRITE(UF_DBS,2000) COL,IP,COL,NERC,COL,CURIYR,COL,              & !//EMMDB//
            YEARPR-UHBSYR,COL,EPIRVOM(IR)*SCALPR,COL,                     & !//EMMDB//
            EPIRFOM(IR)*SCALPR,COL,(EPIROVR(IR)/(1-UPCSB(IP)))*SCALPR,                    & !//EMMDB//
            COL,EPRGM(IP),COL,EPACM(IP),COL,UPLROPT(IP),COL,UPLRLC(IP),   & !//EMMDB//
            COL,EPCCSUP(IR,1),        & !//EMMDB//
            COL, (EPIROVR(IR) * SCALPR * EPRGM(IP) * EPACM(IP) *          & !//EMMDB//
               EPCCSUP(IR,1) * UPANNADJ(IP,MIN(MNUMYR,CURIYR+UPPLYR(IP))) *                               & !//EMMDB//
             UPLRPC(IP) * UPLROPT(IP) * UPLRLC(IP)),COL,AVG_HTRT(IP),COL,   & !//EMMDB//
            CF,COL,EPIRCCR(IR),COL,(EPECAP(0,IP,1)*.001),COL,               & !//EMMDB//
            EPBLDBND(IR,1),COL,TRIM(SCEN_DATE)                           !//EMMDB//
!
          TNUM = 5
          IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
            LOOPING(TNUM) = LOOPING(TNUM) + 1
            COLV(TNUM,1,LOOPING(TNUM)) = IP                          !//EMMDB//
            COLV(TNUM,2,LOOPING(TNUM)) = NERC                        !//EMMDB//
            COLV(TNUM,3,LOOPING(TNUM)) = CURIYR                      !//EMMDB//
            COLV(TNUM,4,LOOPING(TNUM)) = YEARPR-UHBSYR               !//EMMDB//
            COLV(TNUM,5,LOOPING(TNUM)) = EPIRVOM(IR)*SCALPR          !//EMMDB//
            COLV(TNUM,6,LOOPING(TNUM)) = EPIRFOM(IR)*SCALPR          !//EMMDB//
            COLV(TNUM,7,LOOPING(TNUM)) = (EPIROVR(IR)/(1-UPCSB(IP)))*SCALPR          !//EMMDB//
            COLV(TNUM,8,LOOPING(TNUM)) = EPRGM(IP)                   !//EMMDB//
            COLV(TNUM,9,LOOPING(TNUM)) = EPACM(IP)                   !//EMMDB//
            COLV(TNUM,10,LOOPING(TNUM)) = UPLROPT(IP)                 !//EMMDB//
            COLV(TNUM,11,LOOPING(TNUM)) = UPLRLC(IP)                  !//EMMDB//
            COLV(TNUM,12,LOOPING(TNUM)) = UPCSB(IP)                  !//EMMDB//
            COLV(TNUM,13,LOOPING(TNUM)) = UPLRPC(IP)                  !//EMMDB//
            COLV(TNUM,14,LOOPING(TNUM)) = UPANNADJ(IP,MIN(MNUMYR,CURIYR+UPPLYR(IP)))         !//EMMDB//
            COLV(TNUM,15,LOOPING(TNUM)) = EPIROVR(IR) * SCALPR *       & !//EMMDB//
                EPRGM(IP) * EPACM(IP) * EPCCSUP(IR,1) *       & !//EMMDB//
                UPLRPC(IP) * UPLROPT(IP) * UPLRLC(IP) * UPANNADJ(IP,MIN(MNUMYR,CURIYR+UPPLYR(IP)))       !//EMMDB//
            COLV(TNUM,16,LOOPING(TNUM)) = AVG_HTRT(IP) !//EMMDB//
            COLV(TNUM,17,LOOPING(TNUM)) = CF                          !//EMMDB//
            COLV(TNUM,18,LOOPING(TNUM)) = EPIRCCR(IR)                 !//EMMDB//
            COLV(TNUM,19,LOOPING(TNUM)) = EPECAP(0,IP,1)*.001           !//EMMDB//
            COLV(TNUM,20,LOOPING(TNUM)) = EPBLDBND(IR,1)              !//EMMDB//
            COLV(TNUM,21,LOOPING(TNUM))  = EPCCSUP(IR,1)               !//EMMDB//
            IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
              COLVALS(:,:) = COLV(TNUM,:,:)
!             CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              LOOPING(TNUM) = 0
             ENDIF
          ENDIF
        ENDIF                                                            !//EMMDB//
       ENDIF
      ENDDO                                                              !//EMMDB//
!                                                                        !//EMMDB//
!  WRITE OUT Discount Rate Table                                      !//EMMDB//
!
          IF (USW_DBS .GT. 0)   &
           WRITE(UF_DBS,4700) COL,NERC,COL,CURIYR,COL,EPDSCRT,     & !//EMMDB//
            COL,EPUIRT,COL,EPUCRE,COL,UPNFDT,COL,UPTXRT,     &            !//EMMDB//
            COL,UPNIPRM,COL,UPNRPRM,COL,TRIM(SCEN_DATE)
          TNUM = 6
          IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
            IF (LOOPING(TNUM) .EQ. 0) THEN
              NUMCOLS(TNUM) = 10
              DYNSTM(TNUM) =  'INSERT INTO ECP_DISCOUNT_RATE VALUES(?,?,?,?,?,?,?,?,?,?,?)'
              WRTSTM(TNUM) =  'ECP_DISCOUNT_RATE'
            ENDIF
              LOOPING(TNUM) = LOOPING(TNUM) + 1
              COLV(TNUM,1,LOOPING(TNUM)) = NERC                        !//EMMDB//
              COLV(TNUM,2,LOOPING(TNUM)) = CURIYR                         !//EMMDB//
              COLV(TNUM,3,LOOPING(TNUM)) = EPUTDSCRT                     !//EMMDB//
              COLV(TNUM,4,LOOPING(TNUM)) = EPDSCRT                     !//EMMDB//
              COLV(TNUM,5,LOOPING(TNUM)) = EPUIRT                      !//EMMDB//
              COLV(TNUM,6,LOOPING(TNUM)) = EPUCRE                      !//EMMDB//
              COLV(TNUM,7,LOOPING(TNUM)) = UPNFDT                      !//EMMDB//
              COLV(TNUM,8,LOOPING(TNUM)) = UPTXRT                      !//EMMDB//
              COLV(TNUM,9,LOOPING(TNUM)) = UPNIPRM                     !//EMMDB//
              COLV(TNUM,10,LOOPING(TNUM)) = UPNRPRM                     !//EMMDB//
             IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
               COLVALS(:,:) = COLV(TNUM,:,:)
!              CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               LOOPING(TNUM) = 0
             ENDIF
         ENDIF
4700    FORMAT(1X,'ECPDSCRATE',A2,I4,A2,I4,7(A2,F7.4),A2,A)            !//EMMDB//
!                                                                        !//EMMDB//
!  WRITE OUT DEFLATOR TABLE (DEF) FOR EMM DATABASE                    !//EMMDB//
!
       IF (NERC .EQ. 1) THEN
          TNUM = 7
          IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
            IF (LOOPING(TNUM) .EQ. 0) THEN
              NUMCOLS(TNUM) = 3
              DYNSTM(TNUM) =  'INSERT INTO ECP_GNP_DEFLATOR VALUES(?,?,?,?)'
              WRTSTM(TNUM) =  'ECP_GNP_DEFLATOR'
            ENDIF
            DO IYR = CURIYR, UNYEAR + ECP_D_FPH                                 !//EMMDB//
              LOOPING(TNUM) = LOOPING(TNUM) + 1
              COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                      !//EMMDB//
              COLV(TNUM,2,LOOPING(TNUM)) = IYR                         !//EMMDB//
              COLV(TNUM,3,LOOPING(TNUM)) = UPGNPD(IYR)                 !//EMMDB//
             IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
               COLVALS(:,:) = COLV(TNUM,:,:)
!              CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               LOOPING(TNUM) = 0
             ENDIF
           ENDDO
         ENDIF
       ENDIF
!
!     write any remaining records to the database
!
       DO TNUM = 1 , NUMTABS
         IF (LOOPING(TNUM) .NE. 0) THEN
           COLVALS(:,:) = COLV(TNUM,:,:)
!          CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
           CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
           LOOPING(TNUM) = 0
         ENDIF
       ENDDO
!
2000  FORMAT(1X,'ECPRGIN',A2,4(I4,A2),F8.2,A2,2(F12.2,A2),5(F8.3,A2),  & !//EMMDB//
             F12.2,A2,F8.1,4(A2,F8.3),A2,A)                              !//EMMDB//
!
      RETURN                                                             !//EMMDB//
      END                                                                !//EMMDB//
!
!     EPO$ELAST REPORTS IF THE ELASTICITY AND OVERBUILD CONSTRAINTS ARE BINDING
!
      SUBROUTINE EPO$ELAST
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include'cdsparms'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'ecp_nuc'
      include 'emm_aimms'
!
      REAL*8 CVALUE(5),ACT,UPPER,DUAL_VALUE
      INTEGER*4 PLANT,IECP,ICAP,YEAR,OLYR,FULLYR,STEPS
      INTEGER*4  IRET               
      CHARACTER*1 STEP
      CHARACTER*2 PLNT_CD,PLNT_TP,STATUS
      CHARACTER*16 ROW
      CHARACTER*4 ULEL_CH(MNUMYR,ECP_D_CAP)          
      CHARACTER*4 ULOV_CH(MNUMYR)                 

      ecpsub='EPO$ELAST'

!
      DO PLANT = 1 , ECP_D_CAP
         IF (UCPDSPIS(PLANT) .GT. 0) THEN                ! DISPATCHABLE
            IECP = UCPDSPIS(PLANT)
            ICAP = UCPDSPI(IECP)
            PLNT_CD = UPLNTCD(UCPDSPI(IECP))
            PLNT_TP = 'DS'
         ELSE IF (UCPINTIS(PLANT) .GT. 0) THEN           ! INTERMITTENT
            IECP = UCPINTIS(PLANT)
            ICAP = UCPINTI(IECP)
            PLNT_CD = UPLNTCD(UCPINTI(IECP))
            PLNT_TP = 'IN'
         ELSE IF (UCPSTOIS(PLANT) .GT. 0) THEN           ! STORAGE
            IECP = UCPSTOIS(PLANT)
            ICAP = UCPSTOI(IECP)
            PLNT_CD = UPLNTCD(UCPSTOI(IECP))
            PLNT_TP = 'ST'
         ELSE IF (UCPRNWIS(PLANT) .GT. 0) THEN           ! RENEWABLE
            IECP = UCPRNWIS(PLANT)
            ICAP = UCPRNWI(IECP)
            PLNT_CD = UPLNTCD(UCPRNWI(IECP))
            PLNT_TP = 'RN'
         ELSE IF (UCPDGNIS(PLANT) .GT. 0) THEN           ! DISTRIBUTED
            IECP = UCPDGNIS(PLANT)
            ICAP = UCPDGNI(IECP)
            PLNT_CD = UPLNTCD(UCPDGNI(IECP))
            PLNT_TP = 'DG'
         END IF
         IF (UPVTYP(PLANT) .GT. 0)THEN
!           DO YEAR = 1 , UNXPH
            DO YEAR = 1 , 1
              IF ((YEAR + UPPLYR(ICAP)) .LE. UNXPH)THEN
                 OLYR = YEAR + UPPLYR(ICAP)
                 FULLYR = OLYR + CURIYR + UHBSYR - 1
                 ULEL_CH(MIN(MNUMYR,CURIYR + OLYR - 1),ICAP) = '  NA'
!     write(6,1400) fullyr,icap,uplntcd(icap),upavlyr(icap),upovr(icap),ulel_ch(MIN(MNUMYR,curiyr+olyr-1),icap)
!1400 format(1h ,'!ulel',i4,i3,a3,i5,f10.3,a5)
               IF (UPOVR(ICAP) .LT. 9999.0 .AND. UPAVLYR(ICAP) .LE. FULLYR)THEN
!                DO STEPS = 1 , ESTSWTCH(PLANT)
                IF (ESTSWTCH(PLANT) .GT. 0)THEN
                 DO STEPS = 1 , 1
                    WRITE (STEP,'(I1)') STEPS
                    ROW = 'LU'//PLNT_CD//PLNT_TP //STEP//UPYRCD(YEAR); call makmsk(ROW_mask,':LU:',PLNT_CD,PLNT_TP ,STEP,UPYRCD(YEAR))
                    CALL CWFSROW(ROW,'AUP     ',STATUS,CVALUE,ROW_mask,IRET)
!     write(6,1500) curiyr+1989+olyr-1,row,iret,cvalue(1),cvalue(2),cvalue(3)
!1500 format(1h ,'!ulel',i4,a10,i5,3f10.3)
                   IF (IRET .EQ. 0)THEN
                    ACT = CVALUE(1)
                    UPPER = CVALUE(2)
                    DUAL_VALUE = CVALUE(3)
                    IF (ACT .GE. UPPER)THEN
                       ULEL(MIN(MNUMYR,CURIYR + OLYR - 1),ICAP) = 1
                       ULEL_CH(MIN(MNUMYR,CURIYR + OLYR - 1),ICAP) = ' YES'
                    ELSE
                       ULEL(MIN(MNUMYR,CURIYR + OLYR - 1),ICAP) = 0
                       ULEL_CH(MIN(MNUMYR,CURIYR + OLYR - 1),ICAP) = '  NO'
                    END IF
                   END IF
                 END DO
                END IF
                IF (ICAP .EQ. WICT)THEN
                   ULOV_CH(MIN(CURIYR + OLYR - 1,MNUMYR)) = '  NA'
                   ROW = 'RUYYYYY'//UPYRCD(YEAR + UPPLYR(ICAP)); call makmsk(ROW_mask,':RUYYYYY:',UPYRCD(YEAR + UPPLYR(ICAP)))
                   CALL CWFSROW(ROW,'AUP     ',STATUS,CVALUE,ROW_mask,IRET)
                  IF (IRET .EQ. 0)THEN
                   ACT = CVALUE(1)
                   UPPER = CVALUE(2)
                   DUAL_VALUE = CVALUE(3)
                   IF (UPAVLYR(ICAP) .LE. FULLYR) THEN
                     IF (ACT .GE. UPPER)THEN
                        ULOV(MIN(CURIYR + OLYR - 1,MNUMYR)) = 1
                        ULOV_CH(MIN(CURIYR + OLYR - 1,MNUMYR)) = ' YES'
                     ELSE
                        ULOV(MIN(CURIYR + OLYR - 1,MNUMYR)) = 0
                        ULOV_CH(MIN(CURIYR + OLYR - 1,MNUMYR)) = '  NO'
                     END IF
                   END IF
                  END IF
                END IF
               END IF                     ! UPOVR(ICAP)
              END IF
           END DO
        END IF
      END DO

      if (curiyr .eq. lastyr)then

!         write(13,2000) (uplntcd(icap),icap=wipc,wiis), &
!                        (uplntcd(icap),icap=wict,wiat), &
!                        (uplntcd(icap),icap=wicc,wifc), &
!                        (uplntcd(wian),icap=wian,wign),                 &
!                        (uplntcd(icap),icap=wiwd,witi), &
!                        (uplntcd(icap),icap=wiwn,wiin)

         write(13,2000) uplntcd(wipc), &   
                        uplntcd(wiig), &   
                        uplntcd(wiis), &  
                        uplntcd(wict), &   
                        uplntcd(wiat), &  
                        uplntcd(wicc), &   
                        uplntcd(wiac), &  
                        uplntcd(wics), &   
                        uplntcd(wifc), &  
                         uplntcd(wian),                 &
                        uplntcd(wism), & 
                        uplntcd(wiwd), &
                        uplntcd(wibi), & 
                        uplntcd(wigt), &   
                        uplntcd(wims), &  
                        uplntcd(wihy), & 
                        uplntcd(wiwn), &  
                        uplntcd(wiwf), &   
                        uplntcd(wiso), &  
                        uplntcd(wipv), &
                        uplntcd(wids), &
                        "OV"
         
 2000 format(1h ,'!OV',5x,41a5,'   OV')
       DO YEAR = UPSTYR - UHBSYR , UNYEAR - UPPLYR(WICT)

 write(13,2100) year+uhbsyr+olyr-1,ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wipc), &  
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wiig), &  
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wiis), &   
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wict), &  
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wiat), &   
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wicc), &  
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wiac), &   
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wics), &  
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wifc), &   
                        ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wian),                 &
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wism), &  
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wiwd), &
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wibi), &
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wigt), &  
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wims), &  
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wihy), &   
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wiwn), &   
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wiwf), &  
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wiso), &   
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wipv), &
                         ulel_ch(MIN(MNUMYR,year+upplyr(wict)),wids), &
                        ulov_ch(min(year+upplyr(wict),mnumyr))
 2100 format(1h ,'!OV',i4,1x,41a5)
 write(13,2101) year+uhbsyr+olyr-1,ulel(MIN(MNUMYR,year+upplyr(wict)),wipc), &  
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wiig), &  
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wiis), &   
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wict), &  
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wiat), &   
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wicc), &  
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wiac), &   
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wics), &  
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wifc), &   
                        ulel(MIN(MNUMYR,year+upplyr(wict)),wian),                 &
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wism), &  
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wiwd), &
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wibi), & 
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wigt), &  
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wims), &  
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wihy), &   
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wiwn), &   
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wiwf), &  
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wiso), &   
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wipv), & 
                         ulel(MIN(MNUMYR,year+upplyr(wict)),wids), &                        
                        ulov(min(year+upplyr(wict),mnumyr))
 2101 format(1h ,'!INT_OV',i4,1x,41I5)
       END DO
      END IF
      RETURN
      END

!     EP$LRPT PRINTS LEVELIZED COST REPORT

      SUBROUTINE EP$LRPT(NERC)

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include'cdsparms'
      include 'ecpcntl'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'entcntl'
      include 'enewtech'
      include 'wrenew'
      include 'wwdcomon'
      include 'eusprc'
      include 'edbdef'
      include 'uefdout'
      include 'ecp_nuc'
      include 'emm_aimms'
      include 'emeblk'
!
      COMMON /OGUSE/WHDEX,WOPEX,NGCON,OLCON,NGLEV,OLLEV,XPNGELGR
      REAL*8 WHDEX(ECP_D_FPH)
      REAL*8 WOPEX(ECP_D_FPH)
      REAL*8 NGCON(ECP_D_XPH)
      REAL*8 OLCON(ECP_D_XPH)
      REAL*8 NGLEV(ECP_D_XPH)
      REAL*8 OLLEV(ECP_D_XPH)
      REAL*8 XPNGELGR(NNGEM,MNUMYR,3)      ! EXPECTED E UTIL NG PRICE (87$/MMBTU) FROM NGTDMOUT

      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)

!      COMMON /VARCOST/ VARCOL,VAROTH,CFCPLT
!      REAL*4 VARCOL(MAXNFR,ECP_D_CAP)
!      REAL*4 VAROTH(MNUMNR,ECP_D_CAP)
!      REAL*4 CFCPLT(MNUMNR,ECP_D_CAP)
!
      COMMON /LEVOUT/LEVTOT,LEVSUB,LEVCAP,LEVFOM,LEVVAR,LEVTRN,LEVCFC,LEVMIN,LEVMAX,LEVMNS,LEVMXS,LEVNUM
      REAL*4  LEVTOT(ECP_D_CAP,MNUMNR)
      REAL*4  LEVSUB(ECP_D_CAP,MNUMNR)
      REAL*4  LEVCAP(ECP_D_CAP,MNUMNR)
      REAL*4  LEVFOM(ECP_D_CAP,MNUMNR)
      REAL*4  LEVVAR(ECP_D_CAP,MNUMNR)
      REAL*4  LEVTRN(ECP_D_CAP,MNUMNR)
      REAL*4  LEVCFC(ECP_D_CAP,MNUMNR)
      REAL*4  LEVMIN(ECP_D_CAP)
      REAL*4  LEVMAX(ECP_D_CAP)
      REAL*4  LEVMNS(ECP_D_CAP)
      REAL*4  LEVMXS(ECP_D_CAP)
      INTEGER LEVNUM(ECP_D_CAP)

      COMMON /CCSLEV/CCSLC           !levelized cost variables stored by fuel region for CCS costs/revenues
      REAL*8 CCSLC(MAXNFR,ECP_D_XPH)     !levelized CCS cost/revenue

      INTEGER ECP$IBE,IOWN
      INTEGER NUMTABS
      PARAMETER (ECP$IBE = 4)
      PARAMETER (NUMTABS = 1)        ! total number of database tables
!
      INTEGER*4 NERC,CLRG,CLMN,WDMN,IPLT,FUEL,I,OPYR,FLRG, OLYR
      INTEGER*4 PLT,MINPLT,OMINPLT
      INTEGER*4 FULLYR,OWN,IPCT,IBE
      INTEGER*4 MAXIBE(ECP_D_OWN)
      INTEGER*4 TSTPLT(ECP_D_OWN,ECP_D_CAP) ! =0,PLT IS IGNORED,=1,PLT IS CONSIDERED
                                        ! =2,PLT IS BELOW MIN (NON-DSP)
	  
!      COMMON /STOR_OUT1/ STO_OUT_CF2_AVG
!	  REAL*8 STO_OUT_CF2_AVG(MNUMNR)
	  
      INTEGER*4 USEPLT(ECP_D_OWN,ECP_D_CAP) ! =1 IF PLT IS IN RPT, =0 Otherwise
      REAL*8 LVCSTCOL,LVMINCOL,LVCSTBIO,LVMINBIO
      REAL*8 FC(ECP_D_OWN,ECP_D_CAP)               ! LEVCAP + FIX O&M ($/Kw)
      REAL*8 LBRKEVN(ECP_D_OWN,ECP_D_CAP)   ! LOWER % ON OPTIMAL LVL COST CURVE
      REAL*8 LCRV(ECP_D_CAP)              ! PLANT's COST VAL FOR % ANNUAL LOAD ($/Kw at %load)
      REAL*8 CFC(ECP_D_OWN,ECP$IBE)       ! Break Even % For Levelized Cost
      REAL*8 LVLCST(ECP_D_OWN,ECP_D_CAP,ECP$IBE) ! Levelized Costs At Break Even Pts. ($/mKwh)
      REAL*8 LEVBCK,LTOT,LSUB,LCAP,LFOM,LVAR,LTRN,LVCAP,LEVCF(ECP_D_DSP),LEVCF_STO  ! adjusted levelized cost, levelized cap costs, xj2 cap factors
      REAL*8 MINLCRV                    ! MIN ON OPTIMAL LVL COST CURVE ($/Kw at % load)
      REAL*8 PCT                                ! PERCENT OF ANNUAL LOAD
      REAL*8 UBRKEVN(ECP_D_OWN,ECP_D_CAP)   ! UPPER % ON OPTIMAL LVL COST CURVE
      REAL*8 VC(ECP_D_CAP)                              ! VAR O&M ($/mKwH)
      REAL*8 CLLCRB
      REAL*8 PVGNP
      REAL*8 ITC
	  REAL*8 AVGCFC, TOTHRS, ISEG, IVLS, IGRP
      REAL*8 EPLVCCS(ECP_D_CAP)        !other vars are stored in bildout by region implicitly
      REAL*8 CCSCOL(MAXNFR,ECP_D_CAP)
      
      CHARACTER*13 CBRKEVN(ECP_D_OWN,ECP_D_CAP)
      CHARACTER*18 DSPPLT(ECP_D_DSP)
      CHARACTER*18 INTPLT(ECP_D_INT)
      CHARACTER*18 STOPLT(ECP_D_STO)
      CHARACTER*18 RNWPLT(ECP_D_RNW)
      CHARACTER*18 DGNPLT(ECP_D_DGN)
      CHARACTER*12 FROM_LABEL
      CHARACTER*3  OWNER(ECP_D_OWN)
      CHARACTER*2  COL
!
      OLYR = 2
      FROM_LABEL = "EP_LRPT"

      LOOPING = 0
      NUMCOLS = 0
      DYNSTM = ' '
      WRTSTM = ' '
      COLVALS = 0.0
      COLV = 0.0
      CHCOLVALS = ' '
      CHCOLV = ' '

!
      DATA OWNER/'UTL','NUG'/
      DATA COL/' :'/

!     INITIALIZATION

!     INITIALIZE LEVELIZED COST OUTPUTS
      IF (NERC .EQ. 1)THEN
         LEVTOT = 0.0
         LEVSUB = 0.0
         LEVCAP = 0.0
         LEVFOM = 0.0
         LEVVAR = 0.0
         LEVTRN = 0.0
         LEVCFC = 0.0
         LEVNUM = 0
         LEVMIN = 9999.9
         LEVMAX = 0.0
         LEVMNS = 9999.9
         LEVMXS = 0.0
      END IF
      EPLVCCS = 0.0
      
!     INITIALIZE PLANT NAMES

      DO PLT = 1 , ECP_D_DSP
         DSPPLT(PLT) = '                  '
      END DO

      DSPPLT(UCPDSPIS(WIB1)) = 'M000 N BH Any     '
      DSPPLT(UCPDSPIS(WIB2)) = 'M000 N BH Any SC  '
      DSPPLT(UCPDSPIS(WIB3)) = 'M000 W BH         '
      DSPPLT(UCPDSPIS(WIB4)) = 'M000 W BH     SC  '
      DSPPLT(UCPDSPIS(WIB5)) = 'M000 W BH SCR     '
      DSPPLT(UCPDSPIS(WIB6)) = 'M000 W BH SCR SC  '
      DSPPLT(UCPDSPIS(WIB7)) = 'M000 D BH Any     '
      DSPPLT(UCPDSPIS(WIB8)) = 'M000 D BH Any SC  '
      DSPPLT(UCPDSPIS(WIC1)) = 'M000 N CS Any     '
      DSPPLT(UCPDSPIS(WIC2)) = 'M000 N CS Any   FF'
      DSPPLT(UCPDSPIS(WIC3)) = 'M000 N CS Any SCFF'
      DSPPLT(UCPDSPIS(WIC4)) = 'M000 W CS        '
      DSPPLT(UCPDSPIS(WIC5)) = 'M000 W CS       FF'
      DSPPLT(UCPDSPIS(WIC6)) = 'M000 W CS     SCFF'
      DSPPLT(UCPDSPIS(WIC7)) = 'M000 W CS SCR     '
      DSPPLT(UCPDSPIS(WIC8)) = 'M000 W CS SCR   FF'
      DSPPLT(UCPDSPIS(WIC9)) = 'M000 W CS SCR SCFF'
      DSPPLT(UCPDSPIS(WICX)) = 'M000 D CS         '
      DSPPLT(UCPDSPIS(WICY)) = 'M000 D CS       FF'
      DSPPLT(UCPDSPIS(WICZ)) = 'M000 D CS SCR SCFF'
      DSPPLT(UCPDSPIS(WIH1)) = 'M000 N HS Any     '
      DSPPLT(UCPDSPIS(WIH2)) = 'M000 N HS Any   FF'
      DSPPLT(UCPDSPIS(WIH3)) = 'M000 N HS Any SCFF'
      DSPPLT(UCPDSPIS(WIH4)) = 'M000 W HS         '
      DSPPLT(UCPDSPIS(WIH5)) = 'M000 W HS       FF'
      DSPPLT(UCPDSPIS(WIH6)) = 'M000 W HS     SCFF'
      DSPPLT(UCPDSPIS(WIH7)) = 'M000 W HS SCR     '
      DSPPLT(UCPDSPIS(WIH8)) = 'M000 W HS SCR   FF'
      DSPPLT(UCPDSPIS(WIH9)) = 'M000 W HS SCR SCFF'
      DSPPLT(UCPDSPIS(WIHA)) = 'M000 D HS Any     '
      DSPPLT(UCPDSPIS(WIHB)) = 'M000 D HS Any   FF'
      DSPPLT(UCPDSPIS(WIHC)) = 'M000 D HS Any SCFF'
      DSPPLT(UCPDSPIS(WIPC)) = 'PULV    COAL      '
      DSPPLT(UCPDSPIS(WIOC)) = 'OTHER   COAL      ' 
      DSPPLT(UCPDSPIS(WIIG)) = 'ADV COAL          '
      DSPPLT(UCPDSPIS(WII2)) = 'IGCC with NG cofir'
      DSPPLT(UCPDSPIS(WIPQ)) = 'ADV CL w/PartSeq  '
      DSPPLT(UCPDSPIS(WIIS)) = 'ADV CL w/SEQ      '
      DSPPLT(UCPDSPIS(WING)) = 'CL to NG Steam    '
      DSPPLT(UCPDSPIS(WIST)) = 'OIL/GAS STM       '
      DSPPLT(UCPDSPIS(WIET)) = 'EX. CNV CT        '
      DSPPLT(UCPDSPIS(WIIC)) = 'INTERN COMB       '      
      DSPPLT(UCPDSPIS(WICT)) = 'CNV COMB TRB      '
      DSPPLT(UCPDSPIS(WIT2)) = 'AIRODERIV TRB     '
      DSPPLT(UCPDSPIS(WIAT)) = 'ADV COMB TRB      '
      DSPPLT(UCPDSPIS(WIEC)) = 'EX. CNV CC        '
      DSPPLT(UCPDSPIS(WICC)) = 'CNV COMB CYC      '
      DSPPLT(UCPDSPIS(WIAC)) = 'ADV COMB CYC      '
      DSPPLT(UCPDSPIS(WIA2)) = 'EX CC w/SEQ       '      
      DSPPLT(UCPDSPIS(WICS)) = 'ADV CC w/SEQ      '
      DSPPLT(UCPDSPIS(WIFC)) = 'MC FUEL CELL      '
      DSPPLT(UCPDSPIS(WICN)) = 'CONV NUCLEAR      '
      DSPPLT(UCPDSPIS(WIAN)) = 'ADV  NUCLEAR      '
      DSPPLT(UCPDSPIS(WISM)) = 'SMR  NUCLEAR      '
      DSPPLT(UCPDSPIS(WIGN)) = 'GREENF NUCLEAR    '      
!
      DO PLT = 1 , ECP_D_INT
         INTPLT(PLT) = '                  '
      END DO
         INTPLT(UCPINTIS(WIWN)) = 'WIND              '
         INTPLT(UCPINTIS(WIWL)) = 'WIND LOW          '         
         INTPLT(UCPINTIS(WIWF)) = 'WIND OFFSHORE     '
         INTPLT(UCPINTIS(WISO)) = 'SOLAR THERM       '
         INTPLT(UCPINTIS(WISS)) = 'SOLAR THERM w/STO '
         INTPLT(UCPINTIS(WIS2)) = 'SOLAR THER2 wSTP  '
         INTPLT(UCPINTIS(WIPV)) = 'PV W/AXIS TRACKING'
         INTPLT(UCPINTIS(WIPT)) = 'PV FIXED TILT     '
         INTPLT(UCPINTIS(WIIN)) = 'OTHER INT         '
      DO PLT = 1 , ECP_D_RNW
         RNWPLT(PLT) = '                  '
      END DO
         RNWPLT(UCPRNWIS(WIWD)) = 'BIOMASS           '
         RNWPLT(UCPRNWIS(WIBI)) = 'BIOMASS CCS       '   
         RNWPLT(UCPRNWIS(WIMS)) = 'M S W             '
         RNWPLT(UCPRNWIS(WIGT)) = 'GEOTHERMAL        '
         RNWPLT(UCPRNWIS(WIAG)) = 'ADV GEOTHERMAL    '         
         RNWPLT(UCPRNWIS(WIHY)) = 'POND HYDRO        '
!DKGFIX!!!RNWPLT(UCPRNWIS(WIHO)) = 'ADV HYDRO         '
         RNWPLT(UCPRNWIS(WIHI)) = 'IN STREAM HYDRO   '
         RNWPLT(UCPRNWIS(WITI)) = 'TIDAL HYDRO       '         
         RNWPLT(UCPRNWIS(WIPS)) = 'PUMP STORAGE      '
         RNWPLT(UCPRNWIS(WIP2)) = 'DEMAND RESPONSE   '
!
      DO PLT = 1 , ECP_D_STO
         STOPLT(PLT) = '                  '
      END DO
         STOPLT(UCPSTOIS(WISQ)) = 'QUICK STORAGE     '
         STOPLT(UCPSTOIS(WIDS)) = 'DIURNAL STORAGE   '
         STOPLT(UCPSTOIS(WIOS)) = 'OTHER STORAGE     '

      DO PLT = 1 , ECP_D_DGN
         DGNPLT(PLT) = '                  '
      END DO
         DGNPLT(UCPDGNIS(WIDB)) = 'DGEN--BASE        '
         DGNPLT(UCPDGNIS(WIDP)) = 'DGEN--PEAK        '

!     MAKE SURE ALL CAPACITY TYPES ARE INCLUDED

      DO PLT = 1 , ECP_D_DSP
         IF(DSPPLT(UCPDSPIS(PLT)) .EQ. '                  ')THEN
           WRITE(6,1111) UCPDSPIS(PLT)
 1111      FORMAT(1H ,'NOTE: PLANT TYPE',I2,' HAS NOT BEEN MAPPED TO A TECHNOLOGY NAME')
           STOP
         END IF
      END DO

!     ASSIGN CAPACITY FACTORS FOR LEVELIZATION OF DISPATCHABLES

      DO IPLT = 1 , ECP_D_DSP

!        USE 30% FOR TURBINES, MAXIMUM CF FOR ALL OTHER

         IF ( (UPLNTCD(UCPDSPI(IPLT)) .EQ. 'CT') .OR.   &
            (UPLNTCD(UCPDSPI(IPLT)) .EQ. 'ET')  .OR.  &
            (UPLNTCD(UCPDSPI(IPLT)) .EQ. 'AT')  .OR.  &
            (UPLNTCD(UCPDSPI(IPLT)) .EQ. 'IC') ) THEN
            LEVCF(IPLT) = 0.10
         ELSE
            LEVCF(IPLT) = UPMCF(IPLT)
         END IF
      END DO

      LEVCF_STO = 0.10
	  !LEVCF_STO = STO_OUT_CF2_AVG(NERC)

      
!     INITIALIZE OBJECTIVE FUNCTION VALUE OF VARIABLE COSTS

      DO IPLT = 1 , ECP_D_CAP
         IF (NERC .EQ. 1)THEN
            DO FLRG = 1 , UNFRGN
               VARCOL(FLRG,IPLT) = 0.0
               CCSCOL(FLRG,IPLT) = 0.0
            END DO
         END IF
         VAROTH(NERC,IPLT) = 0.0
      END DO

      FULLYR = USYEAR(CURIYR)
      DO OWN = 1 , ECP_D_OWN
         DO PLT = 1 , ECP_D_CAP
            LBRKEVN(OWN,PLT) = 0.0D0
            UBRKEVN(OWN,PLT) = 0.0D0
            CBRKEVN(OWN,PLT) = ' '
         ENDDO
         DO IBE = 1 , ECP$IBE
            DO PLT = 1 , ECP_D_CAP
               LVLCST(OWN,PLT,IBE) = 0.0D0
            ENDDO
            CFC(OWN,IBE) = 0.0D0
         ENDDO
      ENDDO

!     SINCE NON-NUCLEAR DISPATCHABLE PLANTS CAN BE BUILT IN MULTIPLE FUEL REGIONS
!     DETERMINE REGION THAT RESULTS IN MINIMUM LEVELIZED COST

      DO PLT = 1 , ECP_D_DSP
         IPLT = UCPDSPI(PLT)
         IF (IPLT .NE. WICN .AND. IPLT .NE. WIAN .AND. IPLT .NE. WISM) THEN

            LVMINCOL = 9999.9
            DO FLRG = 1 , UNFRGN

!              DETERMINE CARBON COST FOR COAL

               CLLCRB = DBLE(0.0)
!              DO OPYR = UPPLYR(IPLT) + 1 , UNXPH
!                 CLLCRB = CLLCRB + UPCRBN(1,FLRG,OPYR) * (1.0 - UPPCEF(IPLT))
!              END DO
               CALL EP$LGNP(UPPLYR(IPLT) + 1,UNFPH - (UPPLYR(IPLT) + 1) + 1,EPDSCRT,PVGNP)
!              CLLCRB = CLLCRB / PVGNP

!              STORE OBJ VALUE OF FUEL (WITH CARBON COST) AND VARIABLE O&M COSTS TO PASS TO MARKET-SHARING

               CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IPLT, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

               VARCOL(FLRG,IPLT) = (((FLLFLC(IPLT,FLRG,UPPLYR(IPLT) + 1) + CLLCRB) * AVG_HTRT(IPLT) * 0.001) + EPLVVOM(IPLT)) * PVGNP
                IF (UPTTYP(IPLT) .LE. NW_COAL) THEN
                   CCSCOL(FLRG,IPLT) = CCSLC(FLRG,UPPLYR(IPLT) + 1) * UPPCEF(IPLT) * AVG_HTRT(IPLT) * 0.001 * ECLEL(CURIYR) * 0.001 * (44.0 / 12.0)
                ELSE
                   CCSCOL(FLRG,IPLT) = CCSLC(FLRG,UPPLYR(IPLT) + 1) * UPPCEF(IPLT) * AVG_HTRT(IPLT) * 0.001 * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0)
                END IF
               VARCOL(FLRG,IPLT) = VARCOL(FLRG,IPLT) + CCSCOL(FLRG,IPLT) * PVGNP    
               
               IF (FL_CNXT_CST(NERC,FLRG) .GT. 0.0) THEN
                  IOWN = UPBLDTYP(NERC)
                  LVCSTCOL = (FLLCAP(NERC,FLRG,IPLT,IOWN) + EPLVFOM(IPLT)) / (UPMCF(IPLT) * 8.760) +  &
                     EPLVVOM(IPLT) + AVG_HTRT(IPLT) * (FLLFLC(IPLT,FLRG,UPPLYR(IPLT) + 1) + CLLCRB) * 0.001 + &
                     CCSCOL(FLRG,IPLT) + FLLTRN(NERC,FLRG,IPLT) / (UPMCF(IPLT) * 8.760) 

                  WRITE(18,4331) CURIYR+UHBSYR,IPLT,NERC,FLRG,UPPLYR(IPLT), &
                     LVCSTCOL,LVMINCOL,FLLCAP(NERC,FLRG,IPLT,IOWN),EPLVFOM(IPLT),UPMCF(IPLT),EPLVVOM(IPLT),AVG_HTRT(IPLT),FLLFLC(IPLT,FLRG,UPPLYR(IPLT)+1),CLLCRB,FLLTRN(NERC,FLRG,IPLT),CCSCOL(FLRG,IPLT),PVGNP
 4331             FORMAT(1X,"LVCSTCOL",5(":",I4),12(":",F12.3))

                  IF (LVCSTCOL .LT. LVMINCOL)THEN
                     CLMN = FLRG
                     LVMINCOL = LVCSTCOL
                     EPLVFLC(IPLT) = (FLLFLC(IPLT,FLRG,UPPLYR(IPLT) + 1) + CLLCRB) * AVG_HTRT(IPLT) * 0.001
                     EPLVCAP(IPLT,IOWN) = FLLCAP(NERC,FLRG,IPLT,IOWN)
                     EPLVFCF(IPLT,IOWN) = FLLFCF(NERC,FLRG,IPLT,IOWN)
                     EPLVTRN(IPLT) = FLLTRN(NERC,FLRG,IPLT)
                     EPLVCCS(IPLT) = CCSCOL(FLRG,IPLT)
                  END IF
               END IF
            END DO
         END IF
      END DO

!     PRECALCULATE BREAKEVEN FACTOR COMPONENTS
!     DSP:

      DO PLT = 1 , ECP_D_DSP
         IPLT = UCPDSPI(PLT)

!        STORE OBJ VALUE OF FUEL AND VARIABLE O&M COSTS TO PASS TO MARKET-SHARING

         IF (IPLT .GT. NW_COAL)THEN
            CALL EP$LGNP(UPPLYR(IPLT) + 1,UNFPH - (UPPLYR(IPLT) + 1) + 1,EPDSCRT,PVGNP)
            VAROTH(NERC,IPLT) = (EPLVVOM(IPLT) + EPLVFLC(IPLT)) * PVGNP
         END IF

         VC(PLT) = DBLE((EPLVVOM(IPLT) + EPLVFLC(IPLT) + EPLVEXT(IPLT)) * SCALPR)

         IF (UPVTYP(IPLT) .EQ. 1 .AND. UPBLDREG(IPLT,NERC) .GT. 0.0 .AND. UPAVLYR(IPLT) .LE. (FULLYR + UPPLYR(IPLT))) THEN
            IF (UPBLDTYP(NERC) .EQ. 1) THEN
               USEPLT(1,IPLT) = 1
               USEPLT(2,IPLT) = 0
            ELSE
               USEPLT(1,IPLT) = 0
               USEPLT(2,IPLT) = 1
            ENDIF
         ELSE
            USEPLT(1,IPLT) = 0
            USEPLT(2,IPLT) = 0
         END IF
         DO OWN = 1, ECP_D_OWN
            FC(OWN,PLT) = DBLE((EPLVCAP(IPLT,OWN) + EPLVFOM(IPLT)) * SCALPR)
         ENDDO
      ENDDO

!     INT:

      DO PLT = 1 , ECP_D_INT
         IPLT = UCPINTI(PLT)
         VC(IPLT) = DBLE((EPLVVOM(IPLT) + EPLVFLC(IPLT) + EPLVEXT(IPLT )) * SCALPR)
         IF (UPVTYP(IPLT) .EQ. 1 .AND. UPBLDREG(IPLT,NERC) .GT. 0.0  .AND. UPAVLYR(IPLT) .LE. (FULLYR + UPPLYR(IPLT))) THEN
            IF (UPBLDTYP(NERC) .EQ. 1) THEN
               USEPLT(1,IPLT) = 1
               USEPLT(2,IPLT) = 0
            ELSE
               USEPLT(1,IPLT) = 0
               USEPLT(2,IPLT) = 1
            ENDIF
         ELSE
            USEPLT(1,IPLT) = 0
            USEPLT(2,IPLT) = 0
         ENDIF
         DO OWN = 1, ECP_D_OWN
            FC(OWN,IPLT) =  &
            (EPLVCAP(IPLT,OWN) + EPLVFOM(IPLT)) * SCALPR
         ENDDO
      ENDDO

!     RNW: Exclude Pondage Hydro and MSW

!     GET MINIMUM BIOMASS COSTS

      DO PLT = 1 , ECP_D_RNW
         IPLT = UCPRNWI(PLT)
         IF(UCPRNWI(PLT) .EQ. WIWD)THEN
            CALL EP$LGNP(UPPLYR(IPLT) + 1,UNFPH - (UPPLYR(IPLT) + 1) + 1,EPDSCRT,PVGNP)
!
            LVMINBIO = 9999.9
            DO FLRG = 1 , UNFRGN
!                 STORE OBJ VALUE OF FUEL AND VARIABLE O&M COSTS TO PASS TO MARKET-SHARING
                  CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IPLT, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
                  VARCOL(FLRG,IPLT) = ((WDLFLC(FLRG,UPPLYR(IPLT) + 1) * AVG_HTRT(IPLT) * 0.001) + EPLVVOM(IPLT)) * PVGNP

               IF (FL_CNXT_CST(NERC,FLRG) .GT. 0.0) THEN
                  IOWN = UPBLDTYP(NERC)

                  LVCSTBIO = (WDLCAP(NERC,FLRG,IOWN) + EPLVFOM(IPLT)) / (UPMCF(IPLT) * 8.760) + EPLVVOM(IPLT) + AVG_HTRT(IPLT) * WDLFLC(FLRG,UPPLYR(IPLT) + 1) * 0.001 + &
                     WDLTRN(NERC,FLRG) / (UPMCF(IPLT) * 8.760)
 
                  WRITE(18,4331) CURIYR+UHBSYR,IPLT,NERC,FLRG,UPPLYR(IPLT), &
                     LVCSTBIO,LVMINBIO,WDLCAP(NERC,FLRG,IOWN),EPLVFOM(IPLT),UPMCF(IPLT),EPLVVOM(IPLT),AVG_HTRT(IPLT),WDLFLC(FLRG,UPPLYR(IPLT)+1),0.0,WDLTRN(NERC,FLRG),CCSCOL(FLRG,IPLT),PVGNP
 
                  IF (LVCSTBIO .LT. LVMINBIO)THEN
                     WDMN = FLRG
                     LVMINBIO = LVCSTBIO
                     EPLVFLC(IPLT) = WDLFLC(FLRG,UPPLYR(IPLT) + 1) * AVG_HTRT(IPLT) * 0.001
                     EPLVCAP(IPLT,IOWN) = WDLCAP(NERC,FLRG,IOWN)
                     EPLVFCF(IPLT,IOWN) = WDLFCF(NERC,FLRG,IOWN)
                     EPLVTRN(IPLT) = WDLTRN(NERC,FLRG)
                  END IF
               END IF
            END DO
         END IF
         IF(UCPRNWI(PLT) .EQ. WIBI)THEN
            CALL EP$LGNP(UPPLYR(IPLT) + 1,UNFPH - (UPPLYR(IPLT) + 1) + 1,EPDSCRT,PVGNP)
!
            LVMINBIO = 9999.9
            DO FLRG = 1 , UNFRGN
!                 STORE OBJ VALUE OF FUEL AND VARIABLE O&M COSTS TO PASS TO MARKET-SHARING
                  CALL ECP_AVG_HTRT(FROM_LABEL, NERC, FLRG, IPLT, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)
                  VARCOL(FLRG,IPLT) = ((BILFLC(FLRG,UPPLYR(IPLT) + 1) * AVG_HTRT(IPLT) * 0.001) + EPLVVOM(IPLT)) * PVGNP
                  CCSCOL(FLRG,IPLT) = CCSLC(FLRG,UPPLYR(IPLT) + 1) * UPPCEF(IPLT) * AVG_HTRT(IPLT) * 0.001 * 26.0 * 0.001 * (44.0 / 12.0)
                  VARCOL(FLRG,IPLT) = VARCOL(FLRG,IPLT) + CCSCOL(FLRG,IPLT) * PVGNP    

               IF (FL_CNXT_CST(NERC,FLRG) .GT. 0.0) THEN
                  IOWN = UPBLDTYP(NERC)

                  LVCSTBIO = (BILCAP(NERC,FLRG,IOWN) + EPLVFOM(IPLT)) / (UPMCF(IPLT) * 8.760) + EPLVVOM(IPLT) + AVG_HTRT(IPLT) * BILFLC(FLRG,UPPLYR(IPLT) + 1) * 0.001 + &
                     BILTRN(NERC,FLRG) / (UPMCF(IPLT) * 8.760) + CCSCOL(FLRG,IPLT)
                   WRITE(18,4331) CURIYR+UHBSYR,IPLT,NERC,FLRG,UPPLYR(IPLT), &
                     LVCSTBIO,LVMINBIO,BILCAP(NERC,FLRG,IOWN),EPLVFOM(IPLT),UPMCF(IPLT),EPLVVOM(IPLT),AVG_HTRT(IPLT),BILFLC(FLRG,UPPLYR(IPLT)+1),0.0,BILTRN(NERC,FLRG),CCSCOL(FLRG,IPLT),PVGNP

                  IF (LVCSTBIO .LT. LVMINBIO)THEN
                     WDMN = FLRG
                     LVMINBIO = LVCSTBIO
                     EPLVFLC(IPLT) = BILFLC(FLRG,UPPLYR(IPLT) + 1) * AVG_HTRT(IPLT) * 0.001
                     EPLVCAP(IPLT,IOWN) = BILCAP(NERC,FLRG,IOWN)
                     EPLVFCF(IPLT,IOWN) = BILFCF(NERC,FLRG,IOWN)
                     EPLVTRN(IPLT) = BILTRN(NERC,FLRG)
                     EPLVCCS(IPLT) = CCSCOL(FLRG,IPLT)
                  END IF
               END IF
            END DO
         END IF
      END DO

      DO PLT = 1 , ECP_D_RNW
         IPLT = UCPRNWI(PLT)
         VC(IPLT) = DBLE((EPLVVOM(IPLT) + EPLVFLC(IPLT) + EPLVEXT(IPLT)) * SCALPR)
         IF (UPVTYP(IPLT) .EQ. 1 .AND. UPBLDREG(IPLT,NERC) .GT. 0.0 .AND. UPAVLYR(IPLT) .LE. (FULLYR + UPPLYR(IPLT)) .AND. UPLNTCD(IPLT).NE.'MS') THEN
            IF (UPBLDTYP(NERC) .EQ. 1) THEN
               USEPLT(1,IPLT) = 1
               USEPLT(2,IPLT) = 0
            ELSE
               USEPLT(1,IPLT) = 0
               USEPLT(2,IPLT) = 1
            ENDIF
         ELSE
            USEPLT(1,IPLT) = 0
            USEPLT(2,IPLT) = 0
         END IF
         DO OWN = 1, ECP_D_OWN
            FC(OWN,IPLT) = DBLE((EPLVCAP(IPLT,OWN) + EPLVFOM(IPLT)) * SCALPR)
         ENDDO
      ENDDO

       DO PLT = 1 , ECP_D_STO
          IPLT = UCPSTOI(PLT)
          VC(IPLT) = DBLE((EPLVVOM(IPLT) + EPLVFLC(IPLT) + EPLVEXT(IPLT )) * SCALPR)
          IF (UPVTYP(IPLT) .EQ. 1 .AND. UPBLDREG(IPLT,NERC) .GT. 0.0  .AND. UPAVLYR(IPLT) .LE. (FULLYR + UPPLYR(IPLT))) THEN
             IF (UPBLDTYP(NERC) .EQ. 1) THEN
                USEPLT(1,IPLT) = 1
                USEPLT(2,IPLT) = 0
             ELSE
                USEPLT(1,IPLT) = 0
                USEPLT(2,IPLT) = 1
             ENDIF
          ELSE
             USEPLT(1,IPLT) = 0
             USEPLT(2,IPLT) = 0
          ENDIF
          DO OWN = 1, ECP_D_OWN
             FC(OWN,IPLT) =  &
             (EPLVCAP(IPLT,OWN) + EPLVFOM(IPLT)) * SCALPR
          ENDDO
       ENDDO
!
      DO PLT = 1 , ECP_D_CAP
         DO OWN = 1 , ECP_D_OWN
            IF (USEPLT(OWN,PLT) .EQ. 1) THEN
               TSTPLT(OWN,PLT) = 1
            ELSE
               TSTPLT(OWN,PLT) = 0
            ENDIF
         ENDDO
      ENDDO

!     FIND BREAKEVEN PERCENTAGES (in 0.1% increments)
!     Calculate Load Curve Values For All Plants at same % Annual Load
!     Before comparing them.  Calculated using $/Kw, while Levelized
!     Costs are calculated using $/mKwh. (Breakeven points are equivalent).

      DO OWN = 1, ECP_D_OWN
         MINPLT = 0
         MINLCRV = 9.9D30
         IBE = 0
         DO IPCT = 0 , 1000 , 1
            PCT = DBLE(IPCT)/10.0D0
            OMINPLT = MINPLT                      ! MINPLT From Last Iteration
            IF(OMINPLT .GT. 0) MINLCRV = FC(OWN,OMINPLT) + (VC(OMINPLT) * PCT * .08760D0)
            DO PLT = 1, ECP_D_CAP
               LCRV(PLT) = 0.0D0
               IF (PLT .NE. OMINPLT .AND. TSTPLT(OWN,PLT) .EQ. 1) THEN
                  LCRV(PLT) = FC(OWN,PLT) + (VC(PLT) * PCT * .08760D0)

!                 DSP: Check PLT against min cost curve

                  IF (LCRV(PLT) .LT. MINLCRV .AND. PLT .LE. ECP_D_DSP) THEN
                     MINLCRV = LCRV(PLT)
                     MINPLT = PLT
                  ENDIF
               ENDIF                                                     ! TSTPLT
            ENDDO                                                        ! PLT

!           INT & RNW: Create lower pct bound when they drop below DSP Minimum Cost Curve

            DO PLT = ECP_D_DSP + 1, ECP_D_CAP
               IF (LCRV(PLT) .LT. MINLCRV .AND.  TSTPLT(OWN,PLT) .EQ. 1) THEN
                  LBRKEVN(OWN,PLT) = PCT
                  TSTPLT(OWN,PLT) = 2
               ENDIF
            ENDDO

!           DSP: UPDATE PARAMETERS AFTER PLT LOOP AND DROP DOMINATED PLT TYPES FROM CONSIDERATION

            IF (OMINPLT .NE. MINPLT) THEN
               LBRKEVN(OWN,MINPLT) = PCT
               IF(PCT .GT. 0.0D0) THEN
                  IBE = IBE + 1
                  IF (IBE .LE. ECP$IBE) THEN
                     CFC(OWN,IBE) = PCT
                     DO PLT = 1 , ECP_D_CAP
                        LVLCST(OWN,PLT,IBE) = FC(OWN,PLT)/ (PCT * .08760D0) + VC(PLT)
                     ENDDO
                  ENDIF
               ENDIF
               IF (OMINPLT .GT. 0) THEN
                  UBRKEVN(OWN,OMINPLT) = PCT
                  DO PLT = 1, ECP_D_DSP
                     IF (VC(PLT) .GT. VC(MINPLT)) TSTPLT(OWN,PLT) = 0
                  ENDDO
               ENDIF
            ENDIF

!           INT & RNW: CREATE UPPER BOUND FOR PLT TYPE IF ABOVE MIN COST CURVE

            DO PLT = ECP_D_DSP + 1 , ECP_D_CAP
               IF (LCRV(PLT) .GT. MINLCRV .AND. TSTPLT(OWN,PLT) .EQ. 2) THEN
                  TSTPLT(OWN,PLT) = 0
                  UBRKEVN(OWN,PLT) = PCT
               ENDIF
            ENDDO
         ENDDO                                                       ! IPCT

!        Assign UB of 100% to those plants with LB without UB

         IF (MINPLT .GT. 0) UBRKEVN(OWN,MINPLT) = 100.0D0
         DO PLT = ECP_D_DSP + 1 , ECP_D_CAP
            IF (TSTPLT(OWN,PLT) .EQ. 2) THEN
               TSTPLT(OWN,PLT) = 0
               UBRKEVN(OWN,PLT) = 100.0D0
            ENDIF
         ENDDO
         IBE = IBE + 1
         IF (IBE .LE. ECP$IBE) THEN
            CFC(OWN,IBE) = 100.0D0
            DO PLT = 1 , ECP_D_CAP
               LVLCST(OWN,PLT,IBE) = FC(OWN,PLT)/8.760D0 + VC(PLT)
            ENDDO
         ENDIF
         MAXIBE(OWN) = MIN(IBE,ECP$IBE)
      ENDDO                                                        ! OWN

!     CONVERT TO CHARACTERS FOR REPORTING IF PART OF MINUMUM COST CURVE

      DO OWN = 1 , ECP_D_OWN
         DO PLT = 1 , ECP_D_CAP
            IF (UBRKEVN(OWN,PLT) .GT. 0.0D0) WRITE(CBRKEVN(OWN,PLT),9091) LBRKEVN(OWN,PLT),UBRKEVN(OWN,PLT)
         ENDDO
      ENDDO
 9091 FORMAT(F5.1,' - ',F5.1)

!     OUTPUT LEVELIZED COST REPORT

      DO OWN = 1 , ECP_D_OWN
!
         WRITE(13,2000) NERC,FULLYR,YEARPR
         WRITE(13,2005) NERC,FULLYR,OWNER(OWN)
         WRITE(13,2010) NERC,FULLYR, &
            ((CFC(OWN,IBE)),IBE = 1,MAXIBE(OWN))
         WRITE(13,2020) NERC,FULLYR

!        DISPATCHABLE

         DO PLT = 1 , ECP_D_DSP
            IPLT = UCPDSPI(PLT)
            ITC = EPLVCAP(IPLT,OWN) / (1.0 - UPCSB(IPLT)) - EPLVCAP(IPLT,OWN)
            IF(USEPLT(OWN,PLT) .EQ. 1) THEN
                  EPLVBCK(IPLT) = (1.0 - EPLVBCK(IPLT)) * EPLVCAP(WICT,OWN)
               WRITE(13,2050) NERC,FULLYR,DSPPLT(PLT), &
                  (EPLVCAP(IPLT,OWN) + ITC) * SCALPR/ &
                  EPLVFCF(IPLT,OWN), &
                  EPLVFCF(IPLT,OWN), &
                  (EPLVCAP(IPLT,OWN) + ITC) * SCALPR, &
                  EPLVFOM(IPLT) * SCALPR, &
                  (EPLVVOM(IPLT) + EPLVFLC(IPLT)) * SCALPR, &
                  (EPLVEXT(IPLT) - ITC / (LEVCF(PLT) * 8.76)) * SCALPR, &
                  EPLVTRN(IPLT) * SCALPR, &
                  EPLVCCS(IPLT) * SCALPR, &
                  EPTAVD(IPLT) * SCALPR, &
                  UPMCF(PLT) * 100.0, &
                  CBRKEVN(OWN,PLT), &
                  FC(OWN,PLT)/(UPMCF(PLT) * 8.760D0) + VC(PLT), &
                  ((LVLCST(OWN,PLT,IBE)),IBE = 1,MAXIBE(OWN))

!              Adjust (correct) levelized cost calculations using xj2 capacity
!              factors and print emmdbase file.

!              remove ultra high contingency factor from conventional nuclear

               IF (PLT .EQ. WICN) THEN
                  LVCAP = EPLVCAP(IPLT,OWN) * 1.10 / 2.19
               ELSE
                  LVCAP = EPLVCAP(IPLT,OWN)
              ENDIF

!             calculate adjusted total levelized cost

              IF (UPVTYP(IPLT) .GT. 0 .AND. UPBLDREG(IPLT,NERC) .GT. 0.0 .AND. UPFOM(IPLT) .LT. 200.0)THEN
                 LTOT = DBLE(  ( (LVCAP + ITC) / (LEVCF(PLT) * 8.76) ) + &                 
                    ( EPLVFOM(IPLT) / (LEVCF(PLT) * 8.76) ) + &
                    EPLVFLC(IPLT) + EPLVVOM(IPLT)  + &   !
                    EPLVCCS(IPLT) + &                !add CCS to the total (may be negative)
                    (EPLVTRN(IPLT) / (LEVCF(PLT) * 8.76)))
                 LCAP = (LVCAP + ITC) / (LEVCF(PLT) * 8.76)
                 LSUB = EPLVEXT(IPLT) - ITC / (LEVCF(PLT) * 8.76)
                 LFOM = EPLVFOM(IPLT) / (LEVCF(PLT) * 8.76)
                 LVAR = EPLVFLC(IPLT) + EPLVVOM(IPLT)
                 LTRN = EPLVTRN(IPLT) / (LEVCF(PLT) * 8.76)

!              STORE FOR MAX, MIN, AVG

                  LEVNUM(IPLT) = LEVNUM(IPLT) + 1
                  LEVTOT(IPLT,NERC) = LTOT
                  LEVTOT(IPLT,MNUMNR) = LEVTOT(IPLT,MNUMNR) + LTOT
                  IF (LTOT .GT. LEVMAX(IPLT))LEVMAX(IPLT) = LTOT
                  IF (LTOT .LT. LEVMIN(IPLT))LEVMIN(IPLT) = LTOT
                  LEVSUB(IPLT,NERC) = LSUB
                  LEVSUB(IPLT,MNUMNR) = LEVSUB(IPLT,MNUMNR) + LSUB
                  IF ((LTOT + LSUB) .GT. LEVMXS(IPLT))LEVMXS(IPLT) = LTOT + LSUB
                  IF ((LTOT + LSUB) .LT. LEVMNS(IPLT))LEVMNS(IPLT) = LTOT + LSUB
                  LEVCAP(IPLT,NERC) = LCAP
                  LEVCAP(IPLT,MNUMNR) = LEVCAP(IPLT,MNUMNR) + LCAP
                  LEVFOM(IPLT,NERC) = LFOM
                  LEVFOM(IPLT,MNUMNR) = LEVFOM(IPLT,MNUMNR) + LFOM
                  LEVVAR(IPLT,NERC) = LVAR
                  LEVVAR(IPLT,MNUMNR) = LEVVAR(IPLT,MNUMNR) + LVAR
                  LEVTRN(IPLT,NERC) = LTRN
                  LEVTRN(IPLT,MNUMNR) = LEVTRN(IPLT,MNUMNR) + LTRN
                  LEVCFC(IPLT,NERC) = LEVCF(PLT)
                  LEVCFC(IPLT,MNUMNR) = LEVCFC(IPLT,MNUMNR) + LEVCF(PLT)
               END IF

               IF (USW_DBS .GT. 0) THEN
                  WRITE(UF_DBS,2075) COL,CURIYR,COL,                                   & !//EMMDB//
                     NERC,COL,IPLT,COL,OWN,COL,YEARPR-UHBSYR,                            & !//EMMDB//
                     COL,CURIYR+UPPLYR(IPLT)+UHBSYR,COL,                                 & !//EMMDB//
                     LEVCF(PLT)*100,COL,LVCAP * SCALPR,COL,                              & !//EMMDB//
                     EPLVFCF(IPLT,OWN),COL,EPLVFOM(IPLT) * SCALPR,COL,                   & !//EMMDB//
                     EPLVFLC(IPLT) * SCALPR,COL,                                         & !//EMMDB//
                     EPLVVOM(IPLT) * SCALPR,COL,EPLVEXT(IPLT)*SCALPR,                    & !//EMMDB//
                     COL,LTOT * SCALPR,COL,                                            & !//EMMDB//
                     EPTAVD(IPLT) * SCALPR,COL,SCALPR,COL,TRIM(SCEN_DATE)                          !//EMMDB//
               END IF
!
               TNUM = 1
               IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                  IF (LOOPING(TNUM) .EQ. 0) THEN
                    NUMCOLS(TNUM) = 17
                    DYNSTM(TNUM) =  'INSERT INTO ECP_LEVELIZED_COST VALUES(?,?,?,?,?,?,?,?,'   &
                               //'?,?,?,?,?,?,?,?,?,?)'
                    WRTSTM(TNUM) =  'ECP_LEVELIZED_COST' 
                  ENDIF


                  LOOPING(TNUM) = LOOPING(TNUM) + 1
                  COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                           !//EMMDB//
                  COLV(TNUM,2,LOOPING(TNUM)) = NERC                             !//EMMDB//
                  COLV(TNUM,3,LOOPING(TNUM)) = IPLT                             !//EMMDB//
                  COLV(TNUM,4,LOOPING(TNUM)) = OWN                              !//EMMDB//
                  COLV(TNUM,5,LOOPING(TNUM)) = YEARPR-UHBSYR                    !//EMMDB//
                  COLV(TNUM,6,LOOPING(TNUM)) = CURIYR+UPPLYR(IPLT)+UHBSYR       !//EMMDB//
                  COLV(TNUM,7,LOOPING(TNUM)) = LEVCF(PLT)*100                   !//EMMDB//
                  COLV(TNUM,8,LOOPING(TNUM)) = ((LVCAP + ITC) * SCALPR) / (LEVCF(PLT) * 8.76)      !//EMMDB//
                  COLV(TNUM,9,LOOPING(TNUM)) = (EPLVFOM(IPLT) * SCALPR) / (LEVCF(PLT) * 8.76)           !//EMMDB//
                  COLV(TNUM,10,LOOPING(TNUM)) = EPLVFLC(IPLT) * SCALPR           !//EMMDB//
                  COLV(TNUM,11,LOOPING(TNUM)) = EPLVVOM(IPLT) * SCALPR           !//EMMDB//
                  COLV(TNUM,12,LOOPING(TNUM)) = (EPLVEXT(IPLT) - ITC / (LEVCF(PLT) * 8.76))*SCALPR             !//EMMDB//
                  COLV(TNUM,13,LOOPING(TNUM)) = (EPLVTRN(IPLT)*SCALPR) / (LEVCF(PLT) * 8.76)             !//EMMDB//
                  COLV(TNUM,14,LOOPING(TNUM)) = EPLVCCS(IPLT) * SCALPR            !//EMMDB//
                  COLV(TNUM,15,LOOPING(TNUM)) = LTOT * SCALPR                  !//EMMDB//
                  COLV(TNUM,16,LOOPING(TNUM)) = EPTAVD(IPLT) * SCALPR            !//EMMDB//
                  COLV(TNUM,17,LOOPING(TNUM)) = EPLVFCF(IPLT,OWN)                !//EMMDB//
                  IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                     COLVALS(:,:) = COLV(TNUM,:,:)
!                    CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     LOOPING(TNUM) = 0
                  ENDIF
               ENDIF
            END IF
         END DO

!        INTERMITTENT

         DO PLT = 1 , ECP_D_INT
            IPLT = UCPINTI(PLT)
			!        COMPUTE AVG CF INCLUDING CURTAILMENT
			
			OLYR = 1 + UPPLYR(UCPINTI(PLT))
			AVGCFC = DBLE(0.0)
			TOTHRS = DBLE(0.0)
			!        COMPUTE DISCOUNTED KILOWATTHOURS FOR LEVELIZATION
			DO IVLS = 1 , EPNSTP(OLYR)
				IGRP = EPLDGR(IVLS,OLYR)
				ISEG = EPLDSG(IVLS,OLYR)
				AVGCFC = AVGCFC + UPICFC(1,PLT,IGRP,ISEG) * EPWDTH(IVLS,OLYR)
				TOTHRS = TOTHRS + EPWDTH(IVLS,OLYR)
			END DO
			AVGCFC = AVGCFC / TOTHRS
			
            IF (AVGCFC .LT. 0.01)THEN
               ITC = 0.0
            ELSE
               ITC = EPLVCAP(IPLT,OWN) / (1.0 - UPCSB(IPLT)) - EPLVCAP(IPLT,OWN)
            END IF
            IF(USEPLT(OWN,IPLT) .EQ. 1) THEN
               EPLVBCK(IPLT) = (1.0 - EPLVBCK(IPLT)) * EPLVCAP(WICT,OWN)
               WRITE(13,2050) NERC,FULLYR,INTPLT(PLT), &
               (EPLVCAP(IPLT,OWN) + ITC) * SCALPR/EPLVFCF(IPLT,OWN), &
               EPLVFCF(IPLT,OWN), &
               (EPLVCAP(IPLT,OWN) + ITC) * SCALPR, &
               EPLVFOM(IPLT) * SCALPR, &
               (EPLVFLC(IPLT) + EPLVVOM(IPLT)) * SCALPR, &
               (EPLVEXT(IPLT) - ITC / (AVGCFC * 8.76)) * SCALPR, &
               EPLVTRN(IPLT) * SCALPR, &
               EPLVCCS(IPLT) * SCALPR, &
               EPTAVD(IPLT) * SCALPR, &
               AVGCFC * 100.0, &
               CBRKEVN(OWN,IPLT), &
               FC(OWN,IPLT)/(AVGCFC * 8.760D0) + &
               VC(IPLT), &
               ((LVLCST(OWN,IPLT,IBE)),IBE = 1,MAXIBE(OWN))

!              calculate adjusted total levelized cost

               IF (UPVTYP(IPLT) .GT. 0 .AND. UPBLDREG(IPLT,NERC) .GT. 0.0 .AND. AVGCFC .GE. 0.10 .AND.  &
                   EPIRFOM(UIRINTI(PLT)) .LT. 200.0)THEN
                  LTOT=DBLE( ( (EPLVCAP(IPLT,OWN) + ITC) / (AVGCFC * 8.76) ) & ! !to decide - should CCS be in this total?
                     +  ( EPLVFOM(IPLT) / (AVGCFC * 8.76) ) + &
                     EPLVFLC(IPLT) + EPLVVOM(IPLT) +   &
                     EPLVCCS(IPLT) + &                !add CCS to the total (may be negative)
                    (EPLVTRN(IPLT) / (AVGCFC * 8.76)))
                  LCAP = (EPLVCAP(IPLT,OWN) + ITC) / (AVGCFC * 8.76)
                  LSUB = EPLVEXT(IPLT) - ITC / (AVGCFC * 8.76)
                  LFOM = EPLVFOM(IPLT) / (AVGCFC * 8.76)
                  LVAR = EPLVFLC(IPLT) + EPLVVOM(IPLT)
                  LTRN = EPLVTRN(IPLT) / (AVGCFC * 8.76)

!              STORE FOR MAX, MIN, AVG

                  LEVNUM(IPLT) = LEVNUM(IPLT) + 1
                  LEVTOT(IPLT,NERC) = LTOT
                  LEVTOT(IPLT,MNUMNR) = LEVTOT(IPLT,MNUMNR) + LTOT
                  IF (LTOT .GT. LEVMAX(IPLT))LEVMAX(IPLT) = LTOT
                  IF (LTOT .LT. LEVMIN(IPLT))LEVMIN(IPLT) = LTOT
                  LEVSUB(IPLT,NERC) = LSUB
                  LEVSUB(IPLT,MNUMNR) = LEVSUB(IPLT,MNUMNR) + LSUB
                  IF ((LTOT + LSUB) .GT. LEVMXS(IPLT))LEVMXS(IPLT) = LTOT + LSUB
                  IF ((LTOT + LSUB) .LT. LEVMNS(IPLT))LEVMNS(IPLT) = LTOT + LSUB
                  LEVCAP(IPLT,NERC) = LCAP
                  LEVCAP(IPLT,MNUMNR) = LEVCAP(IPLT,MNUMNR) + LCAP
                  LEVFOM(IPLT,NERC) = LFOM
                  LEVFOM(IPLT,MNUMNR) = LEVFOM(IPLT,MNUMNR) + LFOM
                  LEVVAR(IPLT,NERC) = LVAR
                  LEVVAR(IPLT,MNUMNR) = LEVVAR(IPLT,MNUMNR) + LVAR
                  LEVTRN(IPLT,NERC) = LTRN
                  LEVTRN(IPLT,MNUMNR) = LEVTRN(IPLT,MNUMNR) + LTRN
                  LEVCFC(IPLT,NERC) = AVGCFC
                  LEVCFC(IPLT,MNUMNR) = LEVCFC(IPLT,MNUMNR) + AVGCFC
               END IF

               IF (USW_DBS .GT. 0) THEN
                  WRITE(UF_DBS,2075) COL,CURIYR,COL,                       & !//EMMDB//
                     NERC,COL,IPLT,COL,OWN,COL,YEARPR-UHBSYR,                & !//EMMDB//
                     COL,CURIYR+UPPLYR(IPLT)+UHBSYR,COL,                     & !//EMMDB//
                     AVGCFC*100,COL,EPLVCAP(IPLT,OWN) * SCALPR,         & !//EMMDB//
                     COL,EPLVFCF(IPLT,OWN),                                  & !//EMMDB//
                     COL,EPLVFOM(IPLT) * SCALPR,COL,                         & !//EMMDB//
                     EPLVFLC(IPLT) * SCALPR,COL,                             & !//EMMDB//
                     EPLVVOM(IPLT) * SCALPR,COL,EPLVEXT(IPLT) * SCALPR,      & !//EMMDB//
                     COL,LTOT * SCALPR,COL,                                & !//EMMDB//
                     EPTAVD(IPLT) * SCALPR,COL,SCALPR,COL,TRIM(SCEN_DATE)      !//EMMDB//
               END IF

                  LEVBCK = (EPLVBCK(IPLT)*SCALPR) / (AVGCFC * 8.76)             !//EMMDB//
                  LEVBCK = MIN(99999.999,LEVBCK)
                  LEVBCK = MAX(-99999.999,LEVBCK)

               TNUM = 1
               IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                 IF (AVGCFC .GT. .0001) THEN
                  LOOPING(TNUM) = LOOPING(TNUM) + 1
                  COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                           !//EMMDB//
                  COLV(TNUM,2,LOOPING(TNUM)) = NERC                             !//EMMDB//
                  COLV(TNUM,3,LOOPING(TNUM)) = IPLT                             !//EMMDB//
                  COLV(TNUM,4,LOOPING(TNUM)) = OWN                              !//EMMDB//
                  COLV(TNUM,5,LOOPING(TNUM)) = YEARPR-UHBSYR                    !//EMMDB//
                  COLV(TNUM,6,LOOPING(TNUM)) = CURIYR+UPPLYR(IPLT)+UHBSYR       !//EMMDB//
                  COLV(TNUM,7,LOOPING(TNUM)) = AVGCFC*100                  !//EMMDB//
                  COLV(TNUM,8,LOOPING(TNUM)) = ((EPLVCAP(IPLT,OWN) + ITC) * SCALPR) / (AVGCFC * 8.76)       !//EMMDB//
                  COLV(TNUM,9,LOOPING(TNUM)) = (EPLVFOM(IPLT) * SCALPR) / (AVGCFC * 8.76)           !//EMMDB//
                  COLV(TNUM,10,LOOPING(TNUM)) = EPLVFLC(IPLT) * SCALPR           !//EMMDB//
                  COLV(TNUM,11,LOOPING(TNUM)) = EPLVVOM(IPLT) * SCALPR           !//EMMDB//
                  COLV(TNUM,12,LOOPING(TNUM)) = (EPLVEXT(IPLT) - ITC / (AVGCFC * 8.76)) *SCALPR             !//EMMDB//
                  COLV(TNUM,13,LOOPING(TNUM)) = (EPLVTRN(IPLT)*SCALPR) / (AVGCFC * 8.76)             !//EMMDB//
                  COLV(TNUM,14,LOOPING(TNUM)) = EPLVCCS(IPLT) * SCALPR                                            !//EMMDB//
                  COLV(TNUM,15,LOOPING(TNUM)) = LTOT * SCALPR                  !//EMMDB//
                  COLV(TNUM,16,LOOPING(TNUM)) = EPTAVD(IPLT) * SCALPR            !//EMMDB//
                  COLV(TNUM,17,LOOPING(TNUM)) = EPLVFCF(IPLT,OWN)                !//EMMDB//
                  IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                     COLVALS(:,:) = COLV(TNUM,:,:)
!                    CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     LOOPING(TNUM) = 0
                  ENDIF
                ENDIF
               ENDIF
            END IF
         END DO

!        RENEWABLE

         DO PLT = 1 , ECP_D_RNW
            IPLT = UCPRNWI(PLT)
            IF (EPRCFC(PLT) .LT. 0.01)THEN
               ITC = 0.0
            ELSE
               ITC = EPLVCAP(IPLT,OWN) / (1.0 - UPCSB(IPLT)) - EPLVCAP(IPLT,OWN)
            END IF
            IF (USEPLT(OWN,IPLT) .EQ. 1) THEN
               EPLVBCK(IPLT) = (1.0 - EPLVBCK(IPLT)) * EPLVCAP(WICT,OWN)
               WRITE(13,2050) NERC,FULLYR,RNWPLT(PLT), &
                  (EPLVCAP(IPLT,OWN) + ITC) * SCALPR/EPLVFCF(IPLT,OWN), &
                  EPLVFCF(IPLT,OWN), &
                  (EPLVCAP(IPLT,OWN) + ITC) * SCALPR, &
                  EPLVFOM(IPLT) * SCALPR, &
                  (EPLVFLC(IPLT) + EPLVVOM(IPLT)) * SCALPR, &
                  (EPLVEXT(IPLT) - ITC / (EPRCFC(PLT) * 8.76)) * SCALPR, &
                  EPLVTRN(IPLT) * SCALPR, &
                  EPLVCCS(IPLT) * SCALPR, &
                  EPTAVD(IPLT) * SCALPR, &
                  EPRCFC(PLT) * 100.0, &
                  CBRKEVN(OWN,IPLT), &
                  FC(OWN,IPLT)/(EPRCFC(PLT) * 8.760D0) + VC(IPLT), &
                  ((LVLCST(OWN,IPLT,IBE)),IBE = 1,MAXIBE(OWN))

!              calculate adjusted total levelized cost

               IF (UPVTYP(IPLT) .GT. 0 .AND. UPBLDREG(IPLT,NERC) .GT. 0.0 .AND. EPRCFC(PLT) .GT. 0.05 .AND.  &
                EPIRFOM(UIRRNWI(PLT)) .LT. 200.0)THEN
                  LTOT=DBLE( ( (EPLVCAP(IPLT,OWN) + ITC) / (EPRCFC(PLT) * 8.76) ) + &   
                    ( EPLVFOM(IPLT) / (EPRCFC(PLT) * 8.76) ) + &
                      EPLVFLC(IPLT) + EPLVVOM(IPLT) +   &
                     EPLVCCS(IPLT) + &                !add CCS to the total (may be negative)
                    (EPLVTRN(IPLT) / (EPRCFC(PLT) * 8.76)))
                  LCAP = (EPLVCAP(IPLT,OWN) + ITC) / (EPRCFC(PLT) * 8.76)
                  LSUB = EPLVEXT(IPLT) - ITC / (EPRCFC(PLT) * 8.76)
                  LFOM = EPLVFOM(IPLT) / (EPRCFC(PLT) * 8.76)
                  LVAR = EPLVFLC(IPLT) + EPLVVOM(IPLT)
                  LTRN = EPLVTRN(IPLT) / (EPRCFC(PLT) * 8.76)

!              STORE FOR MAX, MIN, AVG

                  LEVNUM(IPLT) = LEVNUM(IPLT) + 1
                  LEVTOT(IPLT,NERC) = LTOT
                  LEVTOT(IPLT,MNUMNR) = LEVTOT(IPLT,MNUMNR) + LTOT
                  IF (LTOT .GT. LEVMAX(IPLT))LEVMAX(IPLT) = LTOT
                  IF (LTOT .LT. LEVMIN(IPLT))LEVMIN(IPLT) = LTOT
                  LEVSUB(IPLT,NERC) = LSUB
                  LEVSUB(IPLT,MNUMNR) = LEVSUB(IPLT,MNUMNR) + LSUB
                  IF ((LTOT + LSUB) .GT. LEVMXS(IPLT))LEVMXS(IPLT) = LTOT + LSUB
                  IF ((LTOT + LSUB) .LT. LEVMNS(IPLT))LEVMNS(IPLT) = LTOT + LSUB
                  LEVCAP(IPLT,NERC) = LCAP
                  LEVCAP(IPLT,MNUMNR) = LEVCAP(IPLT,MNUMNR) + LCAP
                  LEVFOM(IPLT,NERC) = LFOM
                  LEVFOM(IPLT,MNUMNR) = LEVFOM(IPLT,MNUMNR) + LFOM
                  LEVVAR(IPLT,NERC) = LVAR
                  LEVVAR(IPLT,MNUMNR) = LEVVAR(IPLT,MNUMNR) + LVAR
                  LEVTRN(IPLT,NERC) = LTRN
                  LEVTRN(IPLT,MNUMNR) = LEVTRN(IPLT,MNUMNR) + LTRN
                  LEVCFC(IPLT,NERC) = EPRCFC(PLT)
                  LEVCFC(IPLT,MNUMNR) = LEVCFC(IPLT,MNUMNR) + EPRCFC(PLT)
               END IF

               IF (USW_DBS .GT. 0) THEN
                  WRITE(UF_DBS,2075) COL,CURIYR,COL,                       & !//EMMDB//
                     NERC,COL,IPLT,COL,OWN,COL,YEARPR-UHBSYR,                & !//EMMDB//
                     COL,CURIYR+UPPLYR(IPLT)+UHBSYR,COL,                     & !//EMMDB//
                     EPRCFC(PLT)*100,COL,EPLVCAP(IPLT,OWN) * SCALPR,         & !//EMMDB//
                     COL,EPLVFCF(IPLT,OWN),                                  & !//EMMDB//
                     COL,EPLVFOM(IPLT) * SCALPR,COL,                         & !//EMMDB//
                     EPLVFLC(IPLT) * SCALPR,COL,                             & !//EMMDB//
                     EPLVVOM(IPLT) * SCALPR,COL,EPLVEXT(IPLT) * SCALPR,      & !//EMMDB//
                     COL,LTOT * SCALPR,COL,                                & !//EMMDB//
                     EPTAVD(IPLT) * SCALPR,COL,SCALPR,COL,TRIM(SCEN_DATE)      !//EMMDB//
               END IF

                  LEVBCK = (EPLVBCK(IPLT)*SCALPR) / (EPRCFC(PLT) * 8.76)             !//EMMDB//
                  LEVBCK = MIN(99999.999,LEVBCK)
                  LEVBCK = MAX(-99999.999,LEVBCK)

               TNUM = 1
               IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                  LOOPING(TNUM) = LOOPING(TNUM) + 1
                  COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                           !//EMMDB//
                  COLV(TNUM,2,LOOPING(TNUM)) = NERC                             !//EMMDB//
                  COLV(TNUM,3,LOOPING(TNUM)) = IPLT                             !//EMMDB//
                  COLV(TNUM,4,LOOPING(TNUM)) = OWN                              !//EMMDB//
                  COLV(TNUM,5,LOOPING(TNUM)) = YEARPR-UHBSYR                    !//EMMDB//
                  COLV(TNUM,6,LOOPING(TNUM)) = CURIYR+UPPLYR(IPLT)+UHBSYR       !//EMMDB//
                  COLV(TNUM,7,LOOPING(TNUM)) = EPRCFC(PLT)*100                  !//EMMDB//
                  COLV(TNUM,8,LOOPING(TNUM)) = ((EPLVCAP(IPLT,OWN) + ITC) * SCALPR) / (EPRCFC(PLT) * 8.76)       !//EMMDB//
                  COLV(TNUM,9,LOOPING(TNUM)) = (EPLVFOM(IPLT) * SCALPR) / (EPRCFC(PLT) * 8.76)          !//EMMDB//
                  COLV(TNUM,10,LOOPING(TNUM)) = EPLVFLC(IPLT) * SCALPR           !//EMMDB//
                  COLV(TNUM,11,LOOPING(TNUM)) = EPLVVOM(IPLT) * SCALPR           !//EMMDB//
                  COLV(TNUM,12,LOOPING(TNUM)) = (EPLVEXT(IPLT) - ITC / (EPRCFC(PLT) * 8.76)) *SCALPR             !//EMMDB//
                  COLV(TNUM,13,LOOPING(TNUM)) = (EPLVTRN(IPLT)*SCALPR) / (EPRCFC(PLT) * 8.76)             !//EMMDB//
                  COLV(TNUM,14,LOOPING(TNUM)) = EPLVCCS(IPLT) * SCALPR                                      !//EMMDB//
                  COLV(TNUM,15,LOOPING(TNUM)) = LTOT * SCALPR                  !//EMMDB//
                  COLV(TNUM,16,LOOPING(TNUM)) = EPTAVD(IPLT) * SCALPR            !//EMMDB//
                  COLV(TNUM,17,LOOPING(TNUM)) = EPLVFCF(IPLT,OWN)                !//EMMDB//
                  IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                     COLVALS(:,:) = COLV(TNUM,:,:)
!                    CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     LOOPING(TNUM) = 0
                  ENDIF
               ENDIF
            END IF
         END DO

!        STORAGE

         DO PLT = 1 , ECP_D_STO
            IPLT = UCPSTOI(PLT)
            ITC = EPLVCAP(IPLT,OWN) / (1.0 - UPCSB(IPLT)) - EPLVCAP(IPLT,OWN)
            IF (USEPLT(OWN,IPLT) .EQ. 1) THEN
               EPLVBCK(IPLT) = (1.0 - EPLVBCK(IPLT)) * EPLVCAP(WICT,OWN)
               WRITE(13,2050) NERC,FULLYR,STOPLT(PLT), &
                  (EPLVCAP(IPLT,OWN) + ITC) * SCALPR/EPLVFCF(IPLT,OWN), &
                  EPLVFCF(IPLT,OWN), &
                  (EPLVCAP(IPLT,OWN) + ITC) * SCALPR, &
                  EPLVFOM(IPLT) * SCALPR, &
                  (EPLVFLC(IPLT) + EPLVVOM(IPLT)) * SCALPR, &
                  (EPLVEXT(IPLT) - ITC / (LEVCF_STO * 8.76)) * SCALPR, &
                  EPLVTRN(IPLT) * SCALPR, &
                  EPLVCCS(IPLT) * SCALPR, &
                  EPTAVD(IPLT) * SCALPR, &
                  LEVCF_STO * 100.0, &
                  CBRKEVN(OWN,IPLT), &
                  FC(OWN,IPLT)/(LEVCF_STO * 8.760D0) + VC(IPLT), &
                  ((LVLCST(OWN,IPLT,IBE)),IBE = 1,MAXIBE(OWN))

!              calculate adjusted total levelized cost

               IF (UPVTYP(IPLT) .GT. 0 .AND. UPBLDREG(IPLT,NERC) .GT. 0.0 .AND. LEVCF_STO .GT. 0.00 .AND.  &
                EPIRFOM(UIRSTOI(PLT)) .LT. 200.0)THEN
                  LTOT=DBLE( ( (EPLVCAP(IPLT,OWN) + ITC) / (LEVCF_STO * 8.76) ) + &  
                    ( EPLVFOM(IPLT) / (LEVCF_STO * 8.76) ) + &
                      EPLVFLC(IPLT) + EPLVVOM(IPLT) +   &
                     EPLVCCS(IPLT) + &                !add CCS to the total (may be negative)
                    (EPLVTRN(IPLT) / (LEVCF_STO * 8.76)))
                  LCAP = (EPLVCAP(IPLT,OWN) + ITC) / (LEVCF_STO * 8.76)
                  LSUB = EPLVEXT(IPLT) - ITC / (LEVCF_STO * 8.76)
                  LFOM = EPLVFOM(IPLT) / (LEVCF_STO * 8.76)
                  LVAR = EPLVFLC(IPLT) + EPLVVOM(IPLT)
                  LTRN = EPLVTRN(IPLT) / (LEVCF_STO * 8.76)

!              STORE FOR MAX, MIN, AVG

                  LEVNUM(IPLT) = LEVNUM(IPLT) + 1
                  LEVTOT(IPLT,NERC) = LTOT
                  LEVTOT(IPLT,MNUMNR) = LEVTOT(IPLT,MNUMNR) + LTOT
                  IF (LTOT .GT. LEVMAX(IPLT))LEVMAX(IPLT) = LTOT
                  IF (LTOT .LT. LEVMIN(IPLT))LEVMIN(IPLT) = LTOT
                  LEVSUB(IPLT,NERC) = LSUB
                  LEVSUB(IPLT,MNUMNR) = LEVSUB(IPLT,MNUMNR) + LSUB
                  IF ((LTOT + LSUB) .GT. LEVMXS(IPLT))LEVMXS(IPLT) = LTOT + LSUB
                  IF ((LTOT + LSUB) .LT. LEVMNS(IPLT))LEVMNS(IPLT) = LTOT + LSUB
                  LEVCAP(IPLT,NERC) = LCAP
                  LEVCAP(IPLT,MNUMNR) = LEVCAP(IPLT,MNUMNR) + LCAP
                  LEVFOM(IPLT,NERC) = LFOM
                  LEVFOM(IPLT,MNUMNR) = LEVFOM(IPLT,MNUMNR) + LFOM
                  LEVVAR(IPLT,NERC) = LVAR
                  LEVVAR(IPLT,MNUMNR) = LEVVAR(IPLT,MNUMNR) + LVAR
                  LEVTRN(IPLT,NERC) = LTRN
                  LEVTRN(IPLT,MNUMNR) = LEVTRN(IPLT,MNUMNR) + LTRN
                  LEVCFC(IPLT,NERC) = LEVCF_STO
                  LEVCFC(IPLT,MNUMNR) = LEVCFC(IPLT,MNUMNR) + LEVCF_STO
               END IF

               IF (USW_DBS .GT. 0) THEN
                  WRITE(UF_DBS,2075) COL,CURIYR,COL,                       & !//EMMDB//
                     NERC,COL,IPLT,COL,OWN,COL,YEARPR-UHBSYR,                & !//EMMDB//
                     COL,CURIYR+UPPLYR(IPLT)+UHBSYR,COL,                     & !//EMMDB//
                     LEVCF_STO*100,COL,EPLVCAP(IPLT,OWN) * SCALPR,         & !//EMMDB//
                     COL,EPLVFCF(IPLT,OWN),                                  & !//EMMDB//
                     COL,EPLVFOM(IPLT) * SCALPR,COL,                         & !//EMMDB//
                     EPLVFLC(IPLT) * SCALPR,COL,                             & !//EMMDB//
                     EPLVVOM(IPLT) * SCALPR,COL,EPLVEXT(IPLT) * SCALPR,      & !//EMMDB//
                     COL,LTOT * SCALPR,COL,                                & !//EMMDB//
                     EPTAVD(IPLT) * SCALPR,COL,SCALPR,COL,TRIM(SCEN_DATE)      !//EMMDB//
               END IF

                  LEVBCK = (EPLVBCK(IPLT)*SCALPR) / (LEVCF_STO * 8.76)             !//EMMDB//
                  LEVBCK = MIN(99999.999,LEVBCK)
                  LEVBCK = MAX(-99999.999,LEVBCK)

               TNUM = 1
               IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                  LOOPING(TNUM) = LOOPING(TNUM) + 1
                  COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                           !//EMMDB//
                  COLV(TNUM,2,LOOPING(TNUM)) = NERC                             !//EMMDB//
                  COLV(TNUM,3,LOOPING(TNUM)) = IPLT                             !//EMMDB//
                  COLV(TNUM,4,LOOPING(TNUM)) = OWN                              !//EMMDB//
                  COLV(TNUM,5,LOOPING(TNUM)) = YEARPR-UHBSYR                    !//EMMDB//
                  COLV(TNUM,6,LOOPING(TNUM)) = CURIYR+UPPLYR(IPLT)+UHBSYR       !//EMMDB//
                  COLV(TNUM,7,LOOPING(TNUM)) = LEVCF_STO*100                  !//EMMDB//
                  COLV(TNUM,8,LOOPING(TNUM)) = ((EPLVCAP(IPLT,OWN) + ITC) * SCALPR) / (LEVCF_STO * 8.76)       !//EMMDB//
                  COLV(TNUM,9,LOOPING(TNUM)) = (EPLVFOM(IPLT) * SCALPR) / (LEVCF_STO * 8.76)          !//EMMDB//
                  COLV(TNUM,10,LOOPING(TNUM)) = EPLVFLC(IPLT) * SCALPR           !//EMMDB//
                  COLV(TNUM,11,LOOPING(TNUM)) = EPLVVOM(IPLT) * SCALPR           !//EMMDB//
                  COLV(TNUM,12,LOOPING(TNUM)) = (EPLVEXT(IPLT) - ITC / (LEVCF_STO * 8.76)) *SCALPR             !//EMMDB//
                  COLV(TNUM,13,LOOPING(TNUM)) = (EPLVTRN(IPLT)*SCALPR) / (LEVCF_STO * 8.76)             !//EMMDB//
                  COLV(TNUM,14,LOOPING(TNUM)) = EPLVCCS(IPLT) * SCALPR                                        !//EMMDB//
                  COLV(TNUM,15,LOOPING(TNUM)) = LTOT * SCALPR                  !//EMMDB//
                  COLV(TNUM,16,LOOPING(TNUM)) = EPTAVD(IPLT) * SCALPR            !//EMMDB//
                  COLV(TNUM,17,LOOPING(TNUM)) = EPLVFCF(IPLT,OWN)                !//EMMDB//
                  IF (LOOPING(TNUM) .EQ. MAXRECS) THEN
                     COLVALS(:,:) = COLV(TNUM,:,:)
!                    CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     LOOPING(TNUM) = 0
                  ENDIF
               ENDIF
            END IF
         END DO
      END DO                                                       ! OWN

!     Determine national averages

      IF (NERC .EQ. UNRGNS)THEN
         DO PLT = 1 , ECP_D_CAP
            IF (LEVNUM(PLT) .GT. 0)THEN
                LEVTOT(PLT,MNUMNR) = LEVTOT(PLT,MNUMNR) / FLOAT(LEVNUM(PLT))
                LEVSUB(PLT,MNUMNR) = LEVSUB(PLT,MNUMNR) / FLOAT(LEVNUM(PLT))
                LEVCAP(PLT,MNUMNR) = LEVCAP(PLT,MNUMNR) / FLOAT(LEVNUM(PLT))
                LEVFOM(PLT,MNUMNR) = LEVFOM(PLT,MNUMNR) / FLOAT(LEVNUM(PLT))
                LEVVAR(PLT,MNUMNR) = LEVVAR(PLT,MNUMNR) / FLOAT(LEVNUM(PLT))
                LEVTRN(PLT,MNUMNR) = LEVTRN(PLT,MNUMNR) / FLOAT(LEVNUM(PLT))
                LEVCFC(PLT,MNUMNR) = LEVCFC(PLT,MNUMNR) / FLOAT(LEVNUM(PLT))
            ELSE
               LEVMIN(PLT) = 0.0
               LEVMNS(PLT) = 0.0
            END IF
         END DO
      END IF

!     write any remaining records to the database

      DO TNUM = 1 , NUMTABS
         IF (LOOPING(TNUM) .NE. 0) THEN
           COLVALS(:,:) = COLV(TNUM,:,:)
!          CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
           CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
           LOOPING(TNUM) = 0
         ENDIF
      ENDDO

 2000 FORMAT(1X,'LEV',I2,I4,1X,'ALL COSTS ARE IN ',I4,' DOLLARS')
 2005 FORMAT(1X,'LEV',I2,I4,1X,A3,' PLANTS', &
         78X,23('-'),'LEVCST',19('-'))
 2010 FORMAT(1X,'LEV',I2,I4,1X,'       PLANT  ', &
         ' CAPITAL','   FCF','    LEVCAP','   FIX O&M','       VAR', &
         '    EXTERN','      TRAN','       CCS','    AVDCST','       MCF','    BREAK     ', &
         '     MCF',4(1X,F5.1,'%CF'))
 2020 FORMAT(1X,'LEV',I2,I4,1X,'       TYPE   ', &
         '  ($/KW)',' (FR.)','    ($/KW)','    ($/KW)','  ($/MKWH)', &
         '  ($/MKWH)','  ($/MKWH)','   (FRAC.)','    EVEN (PCT)', &
         5(' ($/MKWH)'))
 2050 FORMAT(1X,'LEV',1X,I2,1X,I4,1X,A12,1X,F9.2,1X,F5.3, &
         5(1X,F9.2),1X,F10.2,2(1X,F9.2),1X,A13,5(2X,F12.2))
 2075 FORMAT(1X,'ECPLEV',5(A2,I4),A2,I5,A2,F7.3,A2, &
         F12.2,A2,F5.3,A2,4(F12.2,A2),2(F10.2,A2),F10.4,A2,A)

      RETURN
      END

!     EP$LTABS PRINTS LEVELIZED AND AVOIDED COST TABLES

      SUBROUTINE EP$LTABS
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'control'
!     include 'bildin'
!     include 'bildout'
!     include 'entcntl'
!     include 'enewtech'
!     include 'wrenew'
!     include 'wwdcomon'
!     include 'eusprc'
!     include 'edbdef'
      include 'uefdout'
!
      COMMON /LEVOUT/LEVTOT,LEVSUB,LEVCAP,LEVFOM,LEVVAR,LEVTRN,LEVCFC,LEVMIN,LEVMAX,LEVMNS,LEVMXS,LEVNUM
      REAL*4  LEVTOT(ECP_D_CAP,MNUMNR)
      REAL*4  LEVSUB(ECP_D_CAP,MNUMNR)
      REAL*4  LEVCAP(ECP_D_CAP,MNUMNR)
      REAL*4  LEVFOM(ECP_D_CAP,MNUMNR)
      REAL*4  LEVVAR(ECP_D_CAP,MNUMNR)
      REAL*4  LEVTRN(ECP_D_CAP,MNUMNR)
      REAL*4  LEVCFC(ECP_D_CAP,MNUMNR)
      REAL*4  LEVMIN(ECP_D_CAP)
      REAL*4  LEVMAX(ECP_D_CAP)
      REAL*4  LEVMNS(ECP_D_CAP)
      REAL*4  LEVMXS(ECP_D_CAP)
      INTEGER LEVNUM(ECP_D_CAP)
!
      COMMON /AVDOUT/AVDTOT,AVDMIN,AVDMAX,AVDNUM
      REAL*4  AVDTOT(ECP_D_CAP,MNUMNR)
      REAL*4  AVDMIN(ECP_D_CAP)
      REAL*4  AVDMAX(ECP_D_CAP)
      INTEGER AVDNUM(ECP_D_CAP)
!
      REAL*4  DIFMIN(ECP_D_CAP)
      REAL*4  DIFMAX(ECP_D_CAP)
      INTEGER*4 PLT,LYR,APT,CFC,REG
      CHARACTER*15 PLTYPE(ECP_D_CAP)
      CHARACTER*15 AVTYPE(ECP_D_CAP)
      CHARACTER*2 TABLE
  
      DO PLT = 1 , ECP_D_CAP
         PLTYPE(PLT) = '               '
         AVTYPE(PLT) = '               '
      END DO
     
      PLTYPE(WIPC) = 'Conv Coal  '
      PLTYPE(WIIG) = 'IGCC           '
      PLTYPE(WIPQ) = 'Coal part-CCS  '     
      PLTYPE(WIIS) = 'IGCC w/CCS     '
      PLTYPE(WICT) = 'Conv Turbine   '
      PLTYPE(WIAT) = 'Adv  Turbine   '
      PLTYPE(WICC) = 'Conv CC        '
      PLTYPE(WIAC) = 'Adv  CC        '
      PLTYPE(WICS) = 'Adv  CC w/CCS  '
      PLTYPE(WIAN) = 'Adv  Nuclear   '
      PLTYPE(WISM) = 'SMR  Nuclear   '
      PLTYPE(WIWD) = 'Biomass        '
      PLTYPE(WIBI) = 'Biomass CCS    '
      PLTYPE(WIGT) = 'Geothermal     '
      PLTYPE(WIHY) = 'Hydroelectric  '
      PLTYPE(WIWN) = 'Wind           '
      PLTYPE(WIWF) = 'Wind Offshore  '
      PLTYPE(WISO) = 'Solar Thermal  '
      PLTYPE(WIPV) = 'Solar PV       '
     
      AVTYPE(WIPC) = 'Conv Coal      '
      AVTYPE(WIIG) = 'Coal w/o CCS   '
      AVTYPE(WIPQ) = 'Coal part-CCS   '    
      AVTYPE(WIIS) = 'IGCC w/CCS     '
      AVTYPE(WICT) = 'Conv Turbine   '
      AVTYPE(WIAT) = 'Adv  Turbine   '
      AVTYPE(WICC) = 'Gas-Fired CC   '
      AVTYPE(WIAC) = 'Gas-Fired CC   '
      AVTYPE(WICS) = 'Gas  CC w/CCS  '
      AVTYPE(WIAN) = 'Adv  Nuclear   '
      AVTYPE(WISM) = 'SMR  Nuclear   '
      AVTYPE(WIWD) = 'Biomass        '
      AVTYPE(WIBI) = 'Biomass CCS    '
      AVTYPE(WIGT) = 'Geothermal     '
      AVTYPE(WIHY) = 'Hydroelectric  '
      AVTYPE(WIWN) = 'Wind           '
      AVTYPE(WIWF) = 'Wind Offshore  '
      AVTYPE(WISO) = 'Solar Thermal  '
      AVTYPE(WIPV) = 'Solar PV       '

!     DETERMINE OUTPUT YEAR FOR TABLES

      IF (UPSTYR .EQ. (CURIYR + UHBSYR))THEN
         LYR = 0
         APT = 0
         DO PLT = 1 , ECP_D_CAP
            IF (UPAVLYR(PLT) .LT. (MNUMYR + UHBSYR))THEN
               IF (UPAVLYR(PLT) .GT. LYR)THEN
                  LYR = UPAVLYR(PLT)
                  APT = PLT
               END IF
            END IF
         END DO
      END IF

!     WRITE OUT LEVELIZED COST SUMMARY TABLE FOR SELECTED YEAR

      IF (APT .EQ. 0) THEN
         WRITE(6,'("  Encountered 0 in APT.  Skipping EPLTABS routine.")')
         RETURN
      ENDIF
      IF ((CURIYR + UHBSYR) .EQ. (UPAVLYR(APT) - UPPLYR(APT)) .OR. (CURIYR + UHBSYR) .EQ. (LASTYR + UHBSYR - UPPLYR(APT)))THEN

!        Table 1 -- Estimated Levelized Costs

         IF ((CURIYR + UHBSYR) .EQ. (UPAVLYR(APT) - UPPLYR(APT)))THEN
            TABLE = ' 1'
            write(13,2000) TABLE,TABLE,UPAVLYR(APT)
         ELSE
            TABLE = 'A1'
            write(13,2000) TABLE,TABLE,USYEAR(LASTYR)
         END IF
 2000 format(1h ,'!lrpt',a2,T20,'Table ',a2,'. Estimated Levelized Cost of Electricity (LCOE) for New Generation Resources, ',I4)
         write(13,2100) TABLE
 2100 format(1h ,'!lrpt',a2)
         IF ((CURIYR + UHBSYR) .EQ. (UPAVLYR(APT) - UPPLYR(APT)))THEN
            write(13,2200) TABLE,YEARPR,UPAVLYR(APT)
         ELSE
            write(13,2200) TABLE,YEARPR,USYEAR(LASTYR)
         END IF
 2200 format(1h ,'!lrpt',a2,T35,'U.S. Average LCOE (',I4,'$/megawatthour) for Plants Entering Service in ',i4)
         write(13,2100) TABLE
         write(13,2300) TABLE
 2300 format(1h ,'!lrpt',a2,T60,'  Variable',T105,'     Total')
         write(13,2400) TABLE 
 2400 format(1h ,'!lrpt',a2,T40,' Levelized',T60,'      O&M',T85,'     Total',T105,'      LCOE')
         write(13,2500) TABLE 
 2500 format(1h ,'!lrpt',a2,T30,'  Capacity',T40,'   Capital',T50,'     Fixed',T60,' including',T72,'Transmission',T85,'    System',T105,' including')
         write(13,2600) TABLE 
 2600 format(1h ,'!lrpt',a2,T12,'Plant Type',T30,'Factor (%)',T40,'      Cost',T50,'       O&M',T60,'      fuel',T72,'  Investment',T85,'      LCOE',T95,'   Subsidy',T105,'   Subsidy')
         write(13,2700) TABLE 
 2700 format(1h ,'!lrpt',a2,T12,'Dispatchable')
         DO PLT = WIPC , WIIS
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
 2800 format(1h ,'!lrpt',a2,T12,A15,T30,I10,T40,F10.1,T50,F10.1,T60,F10.1,T72,F10.1,T85,F10.1)
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
 2900 format(1h ,'!lrpt',a2,T12,A15,T30,I10,T40,F10.1,T50,F10.1,T60,F10.1,T72,F10.1,T85,F10.1,T95,F10.1,T105,F10.1)
            END IF
         END DO
         DO PLT = WICC , WICS
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
         DO PLT = WICT , WIAT
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
         DO PLT = WIAN , WISM
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
         DO PLT = WIGT , WIGT
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
         DO PLT = WIWD , WIWD
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
		   DO PLT = WIBI , WIBI
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
         write(13,2100) TABLE 
         write(13,3000) TABLE 
 3000 format(1h ,'!lrpt',a2,T12,'Non-Dispatchable')
         DO PLT = WIWN , WIWF
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
         DO PLT = WIPV , WIPV
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
         DO PLT = WISO , WISO
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
         DO PLT = WIHY , WIHY
            CFC = LEVCFC(PLT,MNUMNR) * 100.0 + 0.5
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,2800) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR
            ELSE
               write(13,2900) TABLE,PLTYPE(PLT),CFC,LEVCAP(PLT,MNUMNR)*SCALPR,LEVFOM(PLT,MNUMNR)*SCALPR,LEVVAR(PLT,MNUMNR)*SCALPR,  &
                              LEVTRN(PLT,MNUMNR)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,  &
                              LEVSUB(PLT,MNUMNR)*SCALPR,(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))*SCALPR
            END IF
         END DO
         write(13,2100) TABLE 
         write(13,2100) TABLE 

!        Table 2 -- Regional Variation in Levelized Costs

         IF ((CURIYR + UHBSYR) .EQ. (UPAVLYR(APT) - UPPLYR(APT)))THEN
            TABLE = ' 2'
            write(13,4000) TABLE,TABLE,UPAVLYR(APT)
         ELSE
            TABLE = 'A2'
            write(13,4000) TABLE,TABLE,USYEAR(LASTYR)
         END IF
 4000 format(1h ,'!lrpt',a2,T20,'Table ',a2,'. Regional Variation in Levelized Cost (LCOE) for New Generation Resources, ',I4)
         write(13,4100) TABLE
 4100 format(1h ,'!lrpt',a2)
         write(13,4200) TABLE
 4200 format(1h ,'!lrpt',a2,T40,'Range for Total System LCOE',T70,'Range for Total LCOE with Subsidies')
         write(13,4300) TABLE,YEARPR,YEARPR
 4300 format(1h ,'!lrpt',a2,T50,'(',I4,'/Mwh)',T80,'(',I4,'/Mwh)')
         write(13,4100) TABLE
         write(13,4400) TABLE
 4400 format(1h ,'!lrpt',a2,T12,'Plant Type',T40,'   Minimum',T50,'   Average',T60,'   Maximum',T70,'   Minimum',T80,'   Average',T90,'   Maximum')
         write(13,4500) TABLE 
 4500 format(1h ,'!lrpt',a2,T12,'Dispatchable')
         DO PLT = WIPC , WIIS
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
 4600 format(1h ,'!lrpt',a2,T12,A15,T40,F10.1,T50,F10.1,T60,F10.1)
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
 4700 format(1h ,'!lrpt',a2,T12,A15,T40,F10.1,T50,F10.1,T60,F10.1,T70,F10.1,T80,F10.1,T90,F10.1)
            END IF
         END DO
         DO PLT = WICC , WICS
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         DO PLT = WICT , WIAT
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         DO PLT = WIAN , WISM
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         DO PLT = WIGT , WIGT
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         DO PLT = WIWD , WIWD
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         DO PLT = WIBI , WIBI
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         write(13,4100) TABLE 
         write(13,4800) TABLE 
 4800 format(1h ,'!lrpt',a2,T12,'Non-Dispatchable')
         DO PLT = WIWN , WIWF
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         DO PLT = WIPV , WIPV
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         DO PLT = WISO , WISO
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         DO PLT = WIHY , WIHY
            IF (LEVSUB(PLT,MNUMNR) .EQ. 0.0)THEN
               write(13,4600) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR
            ELSE
               write(13,4700) TABLE,PLTYPE(PLT),LEVMIN(PLT)*SCALPR,LEVTOT(PLT,MNUMNR)*SCALPR,LEVMAX(PLT)*SCALPR,  &
                              LEVMNS(PLT)*SCALPR,(LEVTOT(PLT,MNUMNR)+LEVSUB(PLT,MNUMNR))*SCALPR,LEVMXS(PLT)*SCALPR
            END IF
         END DO
         write(13,4100) TABLE 
         write(13,4100) TABLE 

!        Table 3 -- Regional Variation in Levelized Avoided Costs

         IF ((CURIYR + UHBSYR) .EQ. (UPAVLYR(APT) - UPPLYR(APT)))THEN
            TABLE = ' 3'
            write(13,5000) TABLE,TABLE,UPAVLYR(APT)
         ELSE
            TABLE = 'A3'
            write(13,5000) TABLE,TABLE,USYEAR(LASTYR)
         END IF

 5000 format(1h ,'!lrpt',a2,T20,'Table ',a2,'. Regional Variation in Levelized Avoided Costs (LACE) for New Generation Resources, ',I4)
         write(13,5100) TABLE
 5100 format(1h ,'!lrpt',a2)
         write(13,5200) TABLE,YEARPR
 5200 format(1h ,'!lrpt',a2,T45,'Range for LACE (',I4,' $/Mwh)')
         write(13,5100) TABLE
         write(13,5300) TABLE
 5300 format(1h ,'!lrpt',a2,T12,'Plant Type',T40,'   Minimum',T50,'   Average',T60,'   Maximum')
         write(13,5400) TABLE
 5400 format(1h ,'!lrpt',a2,T12,'Dispatchable')
         DO PLT = WIPC , WIIS
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
 5500 format(1h ,'!lrpt',a2,T12,A15,T40,F10.1,T50,F10.1,T60,F10.1)
         END DO
         DO PLT = WIAC , WIAC
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         DO PLT = WIAN , WISM
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         DO PLT = WIGT , WIGT
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         DO PLT = WIWD , WIWD
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         DO PLT = WIBI , WIBI
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         write(13,5100) TABLE
         write(13,5600) TABLE 
 5600 format(1h ,'!lrpt',a2,T12,'Non-Dispatchable')
         DO PLT = WIWN , WIWN
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         DO PLT = WIWF , WIWF
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         DO PLT = WIPV , WIPV
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         DO PLT = WISO , WISO
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         DO PLT = WIHY , WIHY
               write(13,5500) TABLE,AVTYPE(PLT),AVDMIN(PLT)*SCALPR,AVDTOT(PLT,MNUMNR)*SCALPR,AVDMAX(PLT)*SCALPR
         END DO
         write(13,5100) TABLE
         write(13,5100) TABLE

!        Table 4 -- Difference between LACE and LCOE

         DIFMIN = 9999.9
         DIFMAX =-9999.9 
         DO PLT = 1 , ECP_D_CAP
            IF (UPVTYP(PLT) .GT. 0)THEN
               DO REG = 1 , UNRGNS
                  IF (LEVTOT(PLT,REG) .GT. 0.0 .AND. AVDTOT(PLT,REG) .GT. 0.0)THEN
                     IF ((AVDTOT(PLT,REG) - (LEVTOT(PLT,REG) + LEVSUB(PLT,REG))) .LT. DIFMIN(PLT))  &
                        DIFMIN(PLT) = AVDTOT(PLT,REG) - (LEVTOT(PLT,REG) + LEVSUB(PLT,REG))
                     IF ((AVDTOT(PLT,REG) - (LEVTOT(PLT,REG) + LEVSUB(PLT,REG))) .GT. DIFMAX(PLT))  &
                        DIFMAX(PLT) = AVDTOT(PLT,REG) - (LEVTOT(PLT,REG) + LEVSUB(PLT,REG))
!                    write(6,4444) curiyr+1989,uplntcd(plt),reg,  &
!                                  AVDTOT(PLT,REG) , LEVTOT(PLT,REG) , LEVSUB(PLT,REG),  &
!                                 (AVDTOT(PLT,REG) - (LEVTOT(PLT,REG) + LEVSUB(PLT,REG))),  &
!                                  DIFMIN(PLT) , DIFMAX(PLT)
!4444 format(1h ,'!diff',i4,a4,i4,6f10.2)
                  END IF
               END DO
            END IF
         END DO

        TABLE = ' 4'
        IF ((CURIYR + UHBSYR) .EQ. (UPAVLYR(APT) - UPPLYR(APT)))THEN
         write(13,6000) TABLE,TABLE,UPAVLYR(APT),USYEAR(LASTYR)
 6000 format(1h ,'!lrpt',a2,T20,'Table ',a2,'. Difference between Levelized Avoided Costs (LACE) and Levelized Costs of Electricity (LCOE), ',I4,' and ',i4)
         write(13,6100) TABLE
 6100 format(1h ,'!lrpt',a2)
         write(13,6200) TABLE,YEARPR
 6200 format(1h ,'!lrpt',a2,T45,'Comparison of LACE - LCOE (',I4,' $/Mwh)')
         write(13,6100) TABLE
         write(13,6300) TABLE
 6300 format(1h ,'!lrpt',a2,T40,'   Average',T50,'   Average',T60,'   Average')
         write(13,6400) TABLE 
 6400 format(1h ,'!lrpt',a2,T12,'Plant Type',T40,'      LCOE',T50,'      LACE',T60,'      Diff',T70,' Range of Differences')
        END IF
        IF ((CURIYR + UHBSYR) .EQ. (UPAVLYR(APT) - UPPLYR(APT)))THEN
         write(13,6450) TABLE,UPAVLYR(APT)
        ELSE
         write(13,6450) TABLE,USYEAR(LASTYR)
        END IF
 6450 format(1h ,'!lrpt',a2,T12,I4)
         write(13,6500) TABLE 
 6500 format(1h ,'!lrpt',a2,T12,'Dispatchable')
         DO PLT = WIPC , WIIS
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
 6600 format(1h ,'!lrpt',a2,T12,A15,T40,F10.1,T50,F10.1,T60,F10.1,T70,F10.1,T80,F10.1)
         END DO
         DO PLT = WICC , WICS
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         DO PLT = WIAN , WISM
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         DO PLT = WIGT , WIGT
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         DO PLT = WIWD , WIWD
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         DO PLT = WIBI , WIBI
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         write(13,6100) TABLE 
         write(13,6700) TABLE 
 6700 format(1h ,'!lrpt',a2,T12,'Non-Dispatchable')
         DO PLT = WIWN , WIWN
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         DO PLT = WIWF , WIWF
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         DO PLT = WIPV , WIPV
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         DO PLT = WISO , WISO
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         DO PLT = WIHY , WIHY
            write(13,6600) TABLE,PLTYPE(PLT),(LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR)) * SCALPR,AVDTOT(PLT,MNUMNR) * SCALPR,  &
                           (AVDTOT(PLT,MNUMNR) - (LEVTOT(PLT,MNUMNR) + LEVSUB(PLT,MNUMNR))) * SCALPR,  &
                           DIFMIN(PLT)*SCALPR,DIFMAX(PLT)*SCALPR
         END DO
         write(13,6100) TABLE 
         write(13,6100) TABLE 
      END IF

      RETURN
      END

!     EP$CCAP SET UP STRUCTURE TO TRANSPORT CAPTURED CO2 TO OGSM REGIONS FOR USE IN EOR PROJECTS
 
      SUBROUTINE EP$CCAP
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'eusprc'
      include 'edbdef'
      include 'ogsmout'
      include 'uecpout'
      include 'tcs45q'
      include 'ccatsdat'

      INTEGER*4 MX_OGSM
      PARAMETER(MX_OGSM=7)   ! Maximum number of OGSM Regions

      INTEGER*4 MX_SECT
      PARAMETER(MX_SECT=13)  ! Maximum number of OGSM Sectors

      REAL*8 VALUE, TOT_PURCH(MX_OGSM), DSCRT
      REAL*8 PWF, PVV
      REAL*8 OBJVAL, PRC(ECP_D_FPH)
      REAL*8 OBJTRN, TRN(ECP_D_FPH)
      REAL*8 CO2VAL, CO2(ECP_D_FPH)
      REAL*8 AVLVAL, AVL(ECP_D_FPH), FACTOR
      REAL*8 ONEVAL, VAL(ECP_D_FPH)
      REAL*8 SAFETY, SFTY(ECP_D_FPH)
      INTEGER*4 I_CSRG, I_OGSM, NUM_OGSM, SEC_OGSM, YEAR, I_SEC, M_YR, J_YR, K_YR, L_YR, N_YR, IRET, OGSM_YR, CTS_YR, J_OGSM, F_YR
      INTEGER*4 RUN45Q
      CHARACTER*16 COL_TRANS, COL_OTHER, ROW_CSRG, ROW_OGSM, ROW_OTHR, COL_OTHR, ROW_OTHR_FR
      CHARACTER*2 CNSCOD(MNUMCR)

      ecpsub='EP$CCAP'

      RUN45Q=RTOVALUE('RUN45Q  ',0)

      NUM_OGSM = 7
      SEC_OGSM = 13
      OGSM_YR = 2008 - 1989
      CTS_YR = 2007 - 1989

      DSCRT = DBLE(AVGDCR)
      DO YEAR = 1 , UNXPH
         TOT_PURCH = 0.0
         J_YR = CURIYR + YEAR - 1
         M_YR = MIN(J_YR , UNYEAR)
         F_YR = MIN(CURIYR + UNFPH - 1, UNYEAR)
         DO I_CSRG = 1 , MNUMCR - 2
         WRITE(CNSCOD(I_CSRG),'("0",I1)') I_CSRG
             ROW_CSRG = 'ZCSRG'//CNSCOD(I_CSRG)//UPYRCD(YEAR); call makmsk(ROW_CSRG_mask,':ZCSRG:',CNSCOD(I_CSRG),UPYRCD(YEAR))
               CALL CROWTYPE(ROW_CSRG,'E       ',ROW_CSRG_mask)                  ! In carbon constrained cases CO2 must be stored
            END DO


!             Assign costs/revenues from CCATS for transport/storage or sending to EOR

         DO I_CSRG = 1 , MNUMCR - 2

            ROW_CSRG = 'ZCSRG'//CNSCOD(I_CSRG)//UPYRCD(YEAR); call makmsk(ROW_CSRG_mask,':ZCSRG:',CNSCOD(I_CSRG),UPYRCD(YEAR))
            COL_TRANS = 'NTX'//CNSCOD(I_CSRG)//'__'//UPYRCD(YEAR); call makmsk(COL_TRANS_mask,':NTX:',CNSCOD(I_CSRG),':__:',UPYRCD(YEAR))
            IF (YEAR .LT. UNXPH) THEN
               IF (CURIYR+YEAR+UHBSYR-1 .LE. I_45Q_LYR_NEW .AND. RUN45Q .GT. 0) THEN
                  OBJTRN = UPGNPD(J_YR) * CO2_PRC_DIS_45Q(I_CSRG,M_YR) * PWF(DSCRT,YEAR)
                  WRITE(18,6919) CURIRUN, CURIYR+1989, CURIYR+YEAR+UHBSYR-1, J_YR+1989, M_YR+1989, I_45Q_LYR_NEW, I_45Q_DURATION, I_CSRG,   &
                     OBJTRN, UPGNPD(J_YR), CO2_PRC_DIS_45Q(I_CSRG,M_YR), DSCRT, PWF(DSCRT,YEAR)
 6919             FORMAT(1X,"TnS_Costs_INFO",8(",",I5),5(",",F21.6))

                  ELSE
                     OBJTRN = UPGNPD(J_YR) * CO2_PRC_DIS_NTC(I_CSRG,M_YR)  * PWF(DSCRT,YEAR)

                  WRITE(18,6919) CURIRUN, CURIYR+1989, CURIYR+YEAR+UHBSYR-1, J_YR+1989, M_YR+1989, I_45Q_LYR_NEW, I_45Q_DURATION, I_CSRG,   &
                     OBJTRN, UPGNPD(J_YR), CO2_PRC_DIS_NTC(I_CSRG,M_YR), DSCRT, PWF(DSCRT,YEAR)

               END IF
            ELSE
               DO K_YR = 1 , UNFPH - UNXPH + 1
                  L_YR = K_YR + CURIYR + UNXPH - 2
                  N_YR = MIN(L_YR , UNYEAR)
                  IF (CURIYR+YEAR+UHBSYR-1 .LE. I_45Q_LYR_NEW .AND. K_YR .LE. I_45Q_DURATION .AND. RUN45Q .GT. 0) THEN
                     TRN(K_YR) = UPGNPD(L_YR) * CO2_PRC_DIS_45Q(I_CSRG,N_YR) 

                     WRITE(18,6919) CURIRUN, CURIYR+1989, CURIYR+UNXPH+K_YR+UHBSYR-2, L_YR+1989, N_YR+1989, I_45Q_LYR_NEW, I_45Q_DURATION, I_CSRG,  &
                        TRN(K_YR), UPGNPD(L_YR), CO2_PRC_DIS_45Q(I_CSRG,N_YR), DSCRT, PWF(DSCRT,UNXPH)

                     ELSE
                        TRN(K_YR) = UPGNPD(L_YR) * CO2_PRC_DIS_NTC(I_CSRG,N_YR) 

                     WRITE(18,6919) CURIRUN, CURIYR+1989, CURIYR+UNXPH+K_YR+UHBSYR-2, L_YR+1989, N_YR+1989, I_45Q_LYR_NEW, I_45Q_DURATION, I_CSRG,  &
                        TRN(K_YR), UPGNPD(L_YR), CO2_PRC_DIS_NTC(I_CSRG,N_YR),DSCRT, PWF(DSCRT,UNXPH)

                  END IF                        
               END DO
               K_YR = UNFPH - UNXPH + 1
               OBJTRN = PVV(TRN(1),ECP_D_FPH,K_YR,DBLE(DSCRT)) * PWF(DSCRT,UNXPH)

            END IF
            CALL CVAL(COL_TRANS,ROW_CSRG,DBLE(-1.0),COL_TRANS_mask,ROW_CSRG_mask,'EP$CCAP,15')
            CALL CVAL(COL_TRANS,UPOBJ,OBJTRN,COL_TRANS_mask,UPOBJ,'EP$CCAP,16')
         END DO
      END DO
      RETURN
    END

!     EPO$CCAP RECORD RESULTS FOR TRANSPORT OF CAPTURED CO2 TO OGSM REGIONS FOR USE IN EOR PROJECTS
!     STORE DUAL OF CONSTRAINT TO USE IN LCOE/LACE CALCULATIONS

      SUBROUTINE EPO$CCAP
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'eusprc'
      include 'edbdef'
      include 'ogsmout'
      include 'uecpout'
      include 'tcs45q'
      include 'emission'
      include 'cdsparms'
      include 'csapr'
      include 'emmemis'

      COMMON /CCSLEV/CCSLC           !levelized cost variables stored by fuel region for CCS costs/revenues
      REAL*8 CCSLC(MAXNFR,ECP_D_XPH)     !levelized CCS cost/revenue
     

      REAL*8 DSCRT
      REAL*8 LEVEL(5), DUAL_VALUE, PVGNP
      INTEGER*4 FRG, CSRG, YEAR, YEAR1, IRET
      CHARACTER*16 COL_TRANS, COL_OTHER, ROW
      CHARACTER*2 STATUS,CNSCOD

      LOGICAL ONCE
      DATA ONCE/.TRUE./

      ecpsub='EPO$CCAP'


      IF (ONCE) THEN
         CENS_VALUE = 0.0
         CENS_VAL_45Q = 0.0
         ONCE = .FALSE.
      END IF

! retrieve CCS cost and store by fuel region
      DO FRG = 1 , UNFRGN
         CSRG = EPCSMP(FRG)
         WRITE(CNSCOD,'("0",I1)') CSRG
         DO YEAR = 1 , UNXPH
            ROW = 'ZCSRG'//CNSCOD//UPYRCD(YEAR); call makmsk(ROW_mask,':ZCSRG:',CNSCOD,UPYRCD(YEAR))
            CALL CWFSROW(ROW,'P       ',STATUS,LEVEL,ROW_mask,IRET)
            DUAL_VALUE=LEVEL(1)
            CCSLC(FRG,YEAR) = DUAL_VALUE
         END DO
         DO YEAR = 1 , UNXPH
            DO YEAR1 = YEAR + 1 , UNXPH
               CCSLC(FRG,YEAR) = CCSLC(FRG,YEAR) + CCSLC(FRG,YEAR1)
            END DO
            CALL EP$LGNP(YEAR,UNFPH - YEAR + 1,AVGDCR,PVGNP)
            CCSLC(FRG,YEAR) = CCSLC(FRG,YEAR) / PVGNP
         END DO
      END DO
           
      RETURN
      END

!     EP$NGBS For Each NGBS Unit Determine Retire / Retrofit Options

      SUBROUTINE EP$NGBS
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'bildin'
      include 'bildout'
      include 'ecp_nuc'
      include 'dsmdimen'
      include 'dsmsectr'
      include 'dsmtfecp'
      include 'ecp_coal'
      include 'cdsparms'
      include 'uso2grp'
      include 'emission'
      include 'dispett'
      include 'dispuse'
      include 'plntin'
      include 'plntctl'
      include 'coalemm'
      include 'uefdout'
      include 'uecpout'
      include 'acoalprc'
      include 'entcntl'
      include 'csapr'
      include 'emeblk'
      include 'eusprc'
      include 'edbdef'
      include 'elout'

      INTEGER*4 N_RETRO
      PARAMETER (N_RETRO = 1)        ! Maximum number of retrofit options
      REAL*8 VALUE, LBND, UBND
      REAL*8 PVV_FOM,FOM(ECP_D_FPH)
      REAL*8 PVV_VOM,VOM(ECP_D_FPH)
      REAL*8 PVV_INV,INV(ECP_D_FPH),ANN_INV
      REAL*8 TXBOOK,FNBOOK,CAPUTIL,CAPUNSTL,URATIO,SHOURS(ECP_D_MSP),GEN,B_HTRT_ADJ
      REAL*8 PWF,PVV,OV_CO2_CAP
      REAL*8 ANNRTE,ANNADJ,ANN(ECP_D_FPH),AN1(ECP_D_FPH)
      REAL*8 HPEN, CPEN, MAX_RVAL, UNIT_HTRT, CAP_FCTR, CCS_FCTR
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*4 RETIRT,RETROR,RETFPE,RETCRE
      INTEGER*4 I_NGBS, IYR, XYR, ISP, IECP, IECP0, IRG, IMR, IMYEAR, FLRG, IVLS, IRET, JYR, KYR, I_TST, RYEAR, N_NGBS, J_NGBS, J_TST, O_NGBS, END_YEAR, END_YEAR_FULL, I_GRPS, N_TST, I_SYR, N_SYR, OLYR
      INTEGER*4 IPGRP, NPGRP
      INTEGER*4 N_OPT, J_OPT, I_OPT, I_RETRO, OPT(ECP_D_XPH,ECP_D_XPH+N_RETRO*(ECP_D_XPH-1)), TST_OBJ
      LOGICAL TEST_RGNS(MNUMNR,MAXNFR)
      CHARACTER*16 COL
      CHARACTER*16 ROW
      CHARACTER*12 FROM_LABEL
      CHARACTER*4 NGBS
      CHARACTER*1 SCODE(ECP_D_MSP),MR_CODE(0:1),C_SP_NG

      COMMON /CO2ECP/CO2_FRYR,CO2_NRYR
      REAL*8 CO2_FRYR(EFD_D_MFRG,ECP_D_XPH)
      REAL*8 CO2_NRYR(MNUMNR,ECP_D_XPH)

      DATA MR_CODE/'X','M'/

      ecpsub='EP$NGBS'

      OLYR = 2
      FROM_LABEL = "EP_NGBS"

!     Set Retire Year RYEAR = 2 => Allows Capacity to Operate Period 1 and 2 and then revist retirement next forecast year RYEAR = 3 => ECP must want capacity all 3 periods

      RYEAR = 2

!     Group like units

      MAP_NGBS_TO_GRP = 0
      NUM_NGBS_GRPS = 0
      F_GRP_TO_NGBS = 0
      N_GRP_TO_NGBS = 0
      GRP_CAP = 0.0
      GRP_SP_CAP_FAC = 0.0
      GRP_CF = 0.0
      GRP_VOM = 0.0
      GRP_RVAL = 0.0
      GRP_HTRT = 0.0
      GRP_CCS_O = 0.0
      GRP_CCS_F = 0.0
      GRP_CCS_V = 0.0
      GRP_CCS_R = 0.0
      GRP_CCS_H = 0.0

      DO I_NGBS = 1 , NUM_NGBS
         IF (MAP_NGBS_TO_GRP(I_NGBS) .EQ. 0) THEN
            IPGRP = ENG_GRP(I_NGBS)
            NUM_NGBS_GRPS = NUM_NGBS_GRPS + 1
            MAP_NGBS_TO_GRP(I_NGBS) = NUM_NGBS_GRPS
            F_GRP_TO_NGBS(NUM_NGBS_GRPS) = I_NGBS
            MAX_RVAL = ENG_RVAL(I_NGBS)
            N_TST = 0
            IF (ENG_SYR(I_NGBS) .LE. CURIYR + UHBSYR) THEN
               I_SYR = CURIYR + UHBSYR
            ELSE
               I_SYR = ENG_SYR(I_NGBS)
            END IF
            DO N_NGBS = I_NGBS + 1 , NUM_NGBS
               IF (MAP_NGBS_TO_GRP(N_NGBS) .EQ. 0) THEN
                  NPGRP = ENG_GRP(N_NGBS)
                  I_TST = 0
                  IF (ENG_SYR(N_NGBS) .LE. CURIYR + UHBSYR) THEN
                     N_SYR = CURIYR + UHBSYR
                  ELSE
                     N_SYR = ENG_SYR(N_NGBS)
                  END IF
                  IF (MAP_NGBS_TO_GRP(N_NGBS) .EQ. 0) THEN
                     IF (ENG_RG(N_NGBS) .NE. ENG_RG(I_NGBS)) I_TST = 1
                     IF (ENG_ECP(N_NGBS) .NE. ENG_ECP(I_NGBS)) I_TST = 1
                     IF (ENG_FLRG(N_NGBS) .NE. ENG_FLRG(I_NGBS)) I_TST = 1
                     IF (ENG_MR(N_NGBS) .NE. ENG_MR(I_NGBS)) I_TST = 1
                     IF (N_SYR .NE. I_SYR) I_TST = 1
                     IF (ENG_RYR(N_NGBS) .NE. ENG_RYR(I_NGBS)) I_TST = 1
                     IF (NGBS_SW .EQ. 1) THEN
                        DO ISP = 1 , EPNMSP
                           IF (ENG_SP_CAP_FAC(ISP,N_NGBS) .LT. (ENG_SP_CAP_FAC(ISP,I_NGBS) - TOL_SP_CAP_FAC)) I_TST = 1 
                           IF (ENG_SP_CAP_FAC(ISP,N_NGBS) .GT. (ENG_SP_CAP_FAC(ISP,I_NGBS) + TOL_SP_CAP_FAC)) I_TST = 1 
                        END DO
                        IF (ENG_CF(N_NGBS) .LT. (ENG_CF(I_NGBS) - TOL_CF)) I_TST = 1 
                        IF (ENG_CF(N_NGBS) .GT. (ENG_CF(I_NGBS) + TOL_CF)) I_TST = 1 
                        IF (ENG_VOM(N_NGBS) .LT. (ENG_VOM(I_NGBS) - TOL_VOM)) I_TST = 1 
                        IF (ENG_VOM(N_NGBS) .GT. (ENG_VOM(I_NGBS) + TOL_VOM)) I_TST = 1 
                        IF (ENG_RVAL(N_NGBS) .LT. (ENG_RVAL(I_NGBS) - TOL_RVAL)) I_TST = 1 
                        IF (ENG_RVAL(N_NGBS) .GT. (ENG_RVAL(I_NGBS) + TOL_RVAL)) I_TST = 1 
                        IF (ENG_CCS_O(N_NGBS) .LT. (ENG_CCS_O(I_NGBS) - TOL_CCS_O)) I_TST = 1 
                        IF (ENG_CCS_O(N_NGBS) .GT. (ENG_CCS_O(I_NGBS) + TOL_CCS_O)) I_TST = 1 
                        IF (ENG_CCS_F(N_NGBS) .LT. (ENG_CCS_F(I_NGBS) - TOL_CCS_F)) I_TST = 1 
                        IF (ENG_CCS_F(N_NGBS) .GT. (ENG_CCS_F(I_NGBS) + TOL_CCS_F)) I_TST = 1 
                        IF (ENG_CCS_V(N_NGBS) .LT. (ENG_CCS_V(I_NGBS) - TOL_CCS_V)) I_TST = 1 
                        IF (ENG_CCS_V(N_NGBS) .GT. (ENG_CCS_V(I_NGBS) + TOL_CCS_V)) I_TST = 1 
                        IF (ENG_CCS_R(N_NGBS) .LT. (ENG_CCS_R(I_NGBS) - TOL_CCS_R)) I_TST = 1 
                        IF (ENG_CCS_R(N_NGBS) .GT. (ENG_CCS_R(I_NGBS) + TOL_CCS_R)) I_TST = 1 
                        IF (ENG_CCS_H(N_NGBS) .LT. (ENG_CCS_H(I_NGBS) - TOL_CCS_H)) I_TST = 1 
                        IF (ENG_CCS_H(N_NGBS) .GT. (ENG_CCS_H(I_NGBS) + TOL_CCS_H)) I_TST = 1 
                        DO XYR = 1 , UNXPH
                           IF (ULHTRT_ECP(NPGRP,XYR) .LT. (ULHTRT_ECP(IPGRP,XYR) - TOL_HTRT_NGBS)) I_TST = 1 
                           IF (ULHTRT_ECP(NPGRP,XYR) .GT. (ULHTRT_ECP(IPGRP,XYR) + TOL_HTRT_NGBS)) I_TST = 1 
                           IF (ENG_FOM(XYR,N_NGBS) .LT. (ENG_FOM(XYR,I_NGBS) - TOL_FOM)) I_TST = 1 
                           IF (ENG_FOM(XYR,N_NGBS) .GT. (ENG_FOM(XYR,I_NGBS) + TOL_FOM)) I_TST = 1 
                           IF (ENG_CAP(XYR,N_NGBS) .LT. (ENG_CAP(XYR,I_NGBS) - TOL_CAP)) I_TST = 1 
                           IF (ENG_CAP(XYR,N_NGBS) .GT. (ENG_CAP(XYR,I_NGBS) + TOL_CAP)) I_TST = 1 
                        END DO
                     END IF
                  END IF
               
!                 IF UNIT MATCHES GROUP PARAMETERS ADD TO THE GROUP, SORT LINKED LIST FROM LOWEST RVAL TO HIGHEST RVAL

                  IF (I_TST .EQ. 0) THEN
                     MAP_NGBS_TO_GRP(N_NGBS) = NUM_NGBS_GRPS
                     N_TST = N_TST + 1
                     J_TST = 0
                     J_NGBS = F_GRP_TO_NGBS(NUM_NGBS_GRPS)
                     O_NGBS = N_GRP_TO_NGBS(J_NGBS)
                     IF (ENG_RVAL(N_NGBS) .LE. ENG_RVAL(J_NGBS)) THEN

                        N_GRP_TO_NGBS(N_NGBS) = F_GRP_TO_NGBS(NUM_NGBS_GRPS)
                        F_GRP_TO_NGBS(NUM_NGBS_GRPS) = N_NGBS

!                       IF (CURCALYR .EQ. 2014) THEN
!                          WRITE(6,2911) CURIRUN, CURCALYR, CURITR, NUM_NGBS_GRPS, N_TST, J_TST, N_NGBS, J_NGBS, O_NGBS, ENG_RVAL(N_NGBS), ENG_RVAL(J_NGBS), &
!                             F_GRP_TO_NGBS(NUM_NGBS_GRPS), N_GRP_TO_NGBS(N_NGBS), N_GRP_TO_NGBS(J_NGBS)
!2911                      FORMAT(1X,"NGBS_SORT_1",9(":",I5),2(":",F21.6),3(":",I5))
!                       END IF

                     ELSE
                        DO WHILE (J_NGBS .GT. 0 .AND. J_TST .LT. MX_NGBS)
   
                           O_NGBS = J_NGBS
                           J_NGBS = N_GRP_TO_NGBS(J_NGBS)
                           J_TST = J_TST + 1
   
                           IF (J_NGBS .EQ. 0) THEN

                              N_GRP_TO_NGBS(O_NGBS) = N_NGBS

!                             IF (CURCALYR .EQ. 2014) THEN
!                                WRITE(6,2913) CURIRUN, CURCALYR, CURITR, NUM_NGBS_GRPS, N_TST, J_TST, N_NGBS, J_NGBS, O_NGBS, ENG_RVAL(N_NGBS), 0.0, &
!                                   F_GRP_TO_NGBS(NUM_NGBS_GRPS), N_GRP_TO_NGBS(O_NGBS), N_GRP_TO_NGBS(N_NGBS)
!2913                            FORMAT(1X,"NGBS_SORT_3",9(":",I5),2(":",F21.6),3(":",I5))
!                             END IF

                           ELSE
                              IF (ENG_RVAL(N_NGBS) .LE. ENG_RVAL(J_NGBS)) THEN
                                 N_GRP_TO_NGBS(O_NGBS) = N_NGBS
                                 N_GRP_TO_NGBS(N_NGBS) = J_NGBS

!                                IF (CURCALYR .EQ. 2014) THEN
!                                   WRITE(6,2912) CURIRUN, CURCALYR, CURITR, NUM_NGBS_GRPS, N_TST, J_TST, N_NGBS, J_NGBS, O_NGBS, ENG_RVAL(N_NGBS), ENG_RVAL(J_NGBS), &
!                                      F_GRP_TO_NGBS(NUM_NGBS_GRPS), N_GRP_TO_NGBS(N_NGBS), N_GRP_TO_NGBS(J_NGBS)
!2912                               FORMAT(1X,"NGBS_SORT_2",9(":",I5),2(":",F21.6),3(":",I5))
!                                END IF

                                 J_TST = MX_NGBS
                              END IF
                           END IF
                        END DO
                     END IF
                  END IF
               END IF
            END DO

!           COMBINE THE NGBS UNITS INTO NUM_NGBS_GRPS

            N_NGBS = F_GRP_TO_NGBS(NUM_NGBS_GRPS)
            NPGRP = ENG_GRP(N_NGBS)
            GRP_RG(NUM_NGBS_GRPS) = ENG_RG(N_NGBS)
            GRP_ECP(NUM_NGBS_GRPS) = ENG_ECP(N_NGBS)
            GRP_FLRG(NUM_NGBS_GRPS) = ENG_FLRG(N_NGBS)
            GRP_MR(NUM_NGBS_GRPS) = ENG_MR(N_NGBS)
            GRP_SYR(NUM_NGBS_GRPS) = MAX(ENG_SYR(N_NGBS) , CURIYR + UHBSYR)
            GRP_RYR(NUM_NGBS_GRPS) = ENG_RYR(N_NGBS)
            I_TST = 0
            DO WHILE (I_TST .LE. NUM_NGBS .AND. N_NGBS .GT. 0)
               I_TST = I_TST + 1
               DO IYR = 1 , UNXPH
                  IF (GRP_RYR(NUM_NGBS_GRPS) .GE. CURIYR + UHBSYR + IYR - 1) THEN
                     GRP_CAP(IYR,NUM_NGBS_GRPS) = GRP_CAP(IYR,NUM_NGBS_GRPS) + ENG_CAP(IYR,N_NGBS)
                     GRP_FOM(IYR,NUM_NGBS_GRPS) = GRP_FOM(IYR,NUM_NGBS_GRPS) + ENG_FOM(IYR,N_NGBS) * ENG_CAP(IYR,N_NGBS)
                  END IF
                  GRP_HTRT(IYR,NUM_NGBS_GRPS) = GRP_HTRT(IYR,NUM_NGBS_GRPS) + ULHTRT_ECP(NPGRP,IYR) * ENG_CAP(IYR,N_NGBS)
               END DO
               DO ISP = 1 , EPNMSP
                  GRP_SP_CAP_FAC(ISP,NUM_NGBS_GRPS) = GRP_SP_CAP_FAC(ISP,NUM_NGBS_GRPS) + ENG_SP_CAP_FAC(ISP,N_NGBS) * ENG_CAP(1,N_NGBS)
               END DO
               GRP_CF(NUM_NGBS_GRPS) = GRP_CF(NUM_NGBS_GRPS) + ENG_CF(N_NGBS) * ENG_CAP(1,N_NGBS)
               GRP_VOM(NUM_NGBS_GRPS) = GRP_VOM(NUM_NGBS_GRPS) + ENG_VOM(N_NGBS) * ENG_CAP(1,N_NGBS)
               GRP_RVAL(NUM_NGBS_GRPS) = GRP_RVAL(NUM_NGBS_GRPS) + ENG_RVAL(N_NGBS) * ENG_CAP(1,N_NGBS)
               GRP_CCS_O(NUM_NGBS_GRPS) = GRP_CCS_O(NUM_NGBS_GRPS) + ENG_CCS_O(N_NGBS) * ENG_CAP(1,N_NGBS)
               GRP_CCS_F(NUM_NGBS_GRPS) = GRP_CCS_F(NUM_NGBS_GRPS) + ENG_CCS_F(N_NGBS) * ENG_CAP(1,N_NGBS)
               GRP_CCS_V(NUM_NGBS_GRPS) = GRP_CCS_V(NUM_NGBS_GRPS) + ENG_CCS_V(N_NGBS) * ENG_CAP(1,N_NGBS)
               GRP_CCS_R(NUM_NGBS_GRPS) = GRP_CCS_R(NUM_NGBS_GRPS) + ENG_CCS_R(N_NGBS) * ENG_CAP(1,N_NGBS)
               GRP_CCS_H(NUM_NGBS_GRPS) = GRP_CCS_H(NUM_NGBS_GRPS) + ENG_CCS_H(N_NGBS) * ENG_CAP(1,N_NGBS)

               WRITE(18,3711) CURIRUN, CURCALYR, NUM_NGBS_GRPS, I_TST, N_NGBS, ENG_GRP(N_NGBS), ENG_RG(N_NGBS), ENG_ECP(N_NGBS), ENG_FLRG(N_NGBS), &
                  ENG_MR(N_NGBS), ENG_SYR(N_NGBS), ENG_RYR(N_NGBS), &
                  (ENG_CAP(IYR,N_NGBS), IYR = 1 , UNXPH), (ENG_FOM(JYR,N_NGBS), JYR = 1 , UNXPH), (ENG_SP_CAP_FAC(ISP,N_NGBS), ISP = 1 , EPNMSP), &
                  ENG_CF(N_NGBS), ENG_VOM(N_NGBS), ENG_RVAL(N_NGBS), (ULHTRT_ECP(NPGRP,IYR),IYR=1,UNXPH), &
                  ENG_CCS_O(N_NGBS), ENG_CCS_F(N_NGBS), ENG_CCS_V(N_NGBS), ENG_CCS_R(N_NGBS), ENG_CCS_H(N_NGBS)
 3711          FORMAT(1X,"NGBS_UNIT",12(":",I5),<UNXPH>(":",F15.3),<UNXPH>(":",F15.3),<EPNMSP>(":",F15.3),3(":",F15.3),<UNXPH>(":",F15.3),5(":",F21.6))

               N_NGBS = N_GRP_TO_NGBS(N_NGBS)
            END DO

            N_NGBS = F_GRP_TO_NGBS(NUM_NGBS_GRPS)
            NPGRP = ENG_GRP(N_NGBS)
            DO IYR = 1 , UNXPH
               IF (GRP_CAP(IYR,NUM_NGBS_GRPS) .GT. 0.001) THEN
                  GRP_FOM(IYR,NUM_NGBS_GRPS) = GRP_FOM(IYR,NUM_NGBS_GRPS) / GRP_CAP(IYR,NUM_NGBS_GRPS)
                  GRP_HTRT(IYR,NUM_NGBS_GRPS) = GRP_HTRT(IYR,NUM_NGBS_GRPS) / GRP_CAP(IYR,NUM_NGBS_GRPS)
               ELSE
                  GRP_FOM(IYR,NUM_NGBS_GRPS) = 999.999
                  GRP_HTRT(IYR,NUM_NGBS_GRPS) = ULHTRT_ECP(NPGRP,IYR)
               END IF
            END DO
            IF (GRP_CAP(1,NUM_NGBS_GRPS) .GT. 0.001) THEN
               DO ISP = 1 , EPNMSP
                  GRP_SP_CAP_FAC(ISP,NUM_NGBS_GRPS) = GRP_SP_CAP_FAC(ISP,NUM_NGBS_GRPS) / GRP_CAP(1,NUM_NGBS_GRPS)
               END DO
               GRP_CF(NUM_NGBS_GRPS) = GRP_CF(NUM_NGBS_GRPS) / GRP_CAP(1,NUM_NGBS_GRPS)
               GRP_VOM(NUM_NGBS_GRPS) = GRP_VOM(NUM_NGBS_GRPS) / GRP_CAP(1,NUM_NGBS_GRPS)
               GRP_RVAL(NUM_NGBS_GRPS) = GRP_RVAL(NUM_NGBS_GRPS) / GRP_CAP(1,NUM_NGBS_GRPS)
               GRP_CCS_O(NUM_NGBS_GRPS) = GRP_CCS_O(NUM_NGBS_GRPS) / GRP_CAP(1,NUM_NGBS_GRPS)
               GRP_CCS_F(NUM_NGBS_GRPS) = GRP_CCS_F(NUM_NGBS_GRPS) / GRP_CAP(1,NUM_NGBS_GRPS)
               GRP_CCS_V(NUM_NGBS_GRPS) = GRP_CCS_V(NUM_NGBS_GRPS) / GRP_CAP(1,NUM_NGBS_GRPS)
               GRP_CCS_R(NUM_NGBS_GRPS) = GRP_CCS_R(NUM_NGBS_GRPS) / GRP_CAP(1,NUM_NGBS_GRPS)
               GRP_CCS_H(NUM_NGBS_GRPS) = GRP_CCS_H(NUM_NGBS_GRPS) / GRP_CAP(1,NUM_NGBS_GRPS)
            ELSE
               DO ISP = 1 , EPNMSP
                  GRP_SP_CAP_FAC(ISP,NUM_NGBS_GRPS) = ENG_SP_CAP_FAC(ISP,N_NGBS)
               END DO
               GRP_CF(NUM_NGBS_GRPS) = ENG_CF(N_NGBS)
               GRP_VOM(NUM_NGBS_GRPS) = ENG_VOM(N_NGBS)
               GRP_RVAL(NUM_NGBS_GRPS) = ENG_RVAL(N_NGBS)
               GRP_CCS_O(NUM_NGBS_GRPS) = ENG_CCS_O(N_NGBS)
               GRP_CCS_F(NUM_NGBS_GRPS) = ENG_CCS_F(N_NGBS)
               GRP_CCS_V(NUM_NGBS_GRPS) = ENG_CCS_V(N_NGBS)
               GRP_CCS_R(NUM_NGBS_GRPS) = ENG_CCS_R(N_NGBS)
               GRP_CCS_H(NUM_NGBS_GRPS) = ENG_CCS_H(N_NGBS)
            END IF

            IECP = GRP_ECP(NUM_NGBS_GRPS)
            IRG = GRP_RG(NUM_NGBS_GRPS)
            FLRG = GRP_FLRG(NUM_NGBS_GRPS)

            CALL ECP_AVG_HTRT(FROM_LABEL, IRG, FLRG, IECP, OLYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

            WRITE(18,4711) CURIRUN, CURCALYR, NUM_NGBS_GRPS, N_NGBS, I_TST, ENG_GRP(N_NGBS), GRP_RG(NUM_NGBS_GRPS), GRP_ECP(NUM_NGBS_GRPS), GRP_FLRG(NUM_NGBS_GRPS), &
               GRP_MR(NUM_NGBS_GRPS), GRP_SYR(NUM_NGBS_GRPS), GRP_RYR(NUM_NGBS_GRPS), &
               (GRP_CAP(IYR,NUM_NGBS_GRPS), IYR = 1 , UNXPH), (GRP_FOM(JYR,NUM_NGBS_GRPS), JYR = 1 , UNXPH), (GRP_SP_CAP_FAC(ISP,NUM_NGBS_GRPS), ISP = 1 , EPNMSP), &
               GRP_CF(NUM_NGBS_GRPS), GRP_VOM(NUM_NGBS_GRPS), GRP_RVAL(NUM_NGBS_GRPS), (GRP_HTRT(IYR,NUM_NGBS_GRPS),IYR=1,UNXPH), AVG_HTRT(IECP), AVG_HTRT_MR(IECP), &
               GRP_CCS_O(NUM_NGBS_GRPS), GRP_CCS_F(NUM_NGBS_GRPS), GRP_CCS_V(NUM_NGBS_GRPS), GRP_CCS_R(NUM_NGBS_GRPS), GRP_CCS_H(NUM_NGBS_GRPS)
 4711       FORMAT(1X,"NGBS_GRPS",12(":",I5),<UNXPH>(":",F15.3),<UNXPH>(":",F15.3),<EPNMSP>(":",F15.3),4(":",F15.3),<UNXPH>(":",F15.3),2(":",F15.3),5(":",F21.6))

         END IF
      END DO

!     KEEP TRACK OF REGION COMBINATIONS OF EC and ST UNITS

      TEST_RGNS = .TRUE.

!     INITIALIZE SEASON CODE

      DO ISP = 1 , EPNMSP
         SCODE(ISP) = UPRGCD(ISP)
      END DO

      B_HTRT_ADJ = 1.0



      ANNRTE = (UPANNADJ(WICC,UNYEAR) / UPANNADJ(WICC,UNYEAR - 10)) ** (1.0 / 10.0)
      DO JYR = UNXPH , UNAPH
         KYR = JYR - UNXPH + 1
         AN1(KYR) = 1.0
         IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
            ANN(KYR) = UPANNADJ(WICC,CURIYR + JYR - 1)
         ELSE
            ANN(KYR) = UPANNADJ(WICC,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
         END IF
      END DO
      ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGUDCR)) / PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(AVGUDCR))

!     COMMITS CAN BE FOR PERIOD 1 ONLY, PERIOD 1 and 2, PERIOD 1, 2, 3 ETC. UNTIL ALL PERIODS ARE REPRESENTED, RYEAR SPECIFIES WHICH COMMIT VECTOR CONTROLS RETIREMENTS RYEAR = 2 => PERIOD 1 AND 2 COMMIT
!     Retrofit vectors are period 2 through UNXPH, period 3 through UNXPH, etc. period 1 is alwayss to use the capacity as is, there are no options to retrofit and then retire.

      XYR = 1

      DO I_GRPS = 1, NUM_NGBS_GRPS

         N_NGBS = F_GRP_TO_NGBS(I_GRPS)

!        Create Retrofit Options

         OPT = 1
         N_OPT = UNXPH
         DO I_OPT = 1 , UNXPH
            DO IYR = 1 , UNXPH
               IF (IYR .GT. I_OPT .OR. GRP_RYR(I_GRPS) .LT. CURIYR + UHBSYR + I_OPT - 1) THEN
                  OPT(IYR,I_OPT) = 0
               END IF
            END DO
         END DO

!        Currently there a 3 explicit forecast periods, UNXPH = 3
!        The logic above yields the followinf OPT array
!        IYR I_OPT =>     1     2    3
!          1              1     1    1
!          2              0     1    1
!          3              0     0    1

!        IF 1 means use as is and 0 means don't use the unit then Option 1 is use the unit for 1 period and then retire, Option 2 is use the unit for 2 periods then retire, and Option 3 is use all 3 periods

!        If the unit is eligible to retrofit extend the definition of OPT()

         I_RETRO = 1

         IF (GRP_ECP(I_GRPS) .EQ. WIEC .AND. GRP_CCS_O(I_GRPS) .GT. 0.0 .AND. CURIYR + UHBSYR + XYR .GE. NG_CCS_SYR .AND. GRP_RYR(I_GRPS) .GE. CURIYR + UHBSYR + UNXPH - 1) THEN
            J_OPT = N_OPT + 1
            N_OPT = N_OPT + UNXPH - XYR
            DO I_OPT = J_OPT, N_OPT
               DO IYR = UNXPH - XYR, UNXPH
                  IF (IYR .GE. I_OPT + UNXPH - N_OPT) THEN
                     OPT(IYR,I_OPT) = 2
                  END IF
               END DO
            END DO
         ELSE
            DO I_OPT = UNXPH + 1, ECP_D_XPH+N_RETRO*(ECP_D_XPH-1)
               DO IYR = 1, UNXPH
                  OPT(IYR,I_OPT) = 0
               END DO
            END DO
         END IF

         IF (I_GRPS .LT. 10) THEN
            WRITE(NGBS,'("000",I1)') I_GRPS
         ELSE IF (I_GRPS .LT. 100) THEN
            WRITE(NGBS,'("00",I2)') I_GRPS
         ELSE IF (I_GRPS .LT. 1000) THEN
            WRITE(NGBS,'("0",I3)') I_GRPS
         ELSE
            WRITE(NGBS,'(I4)') I_GRPS
         END IF

         IRG = GRP_RG(I_GRPS)
         FLRG = GRP_FLRG(I_GRPS)
         IMYEAR = GRP_MR(I_GRPS)
         
         CALL GETBLD(1,IRG)

!     USE RETROFIT RISK PREMIUM, IF SWITCH IS ON

      IF (USW_RTRSK .LE. 0)THEN
         RETIRT = EPUIRT
         RETROR = EPUROR
         RETFPE = EPUFPE
         RETCRE = EPUCRE
      ELSE
         RETIRT = EPUIRTR
         RETROR = EPURORR
         RETFPE = EPUFPER
         RETCRE = EPUCRER
      END IF
         
         
         IF (GRP_CAP(1,I_GRPS) .GT. 0.001) THEN


!           CREATE RETROFIT STRUCTURE FOR EXISTING NGBS UNITS

            DO I_OPT = 1 , N_OPT

!              LIMIT CAPACITY ACROSS OPTIONS

               IECP = GRP_ECP(I_GRPS)
!
!              STORE 111d SWITCH FOR MASS OR RATE STANDARDS FOR REGION
!
               CO2_PLTSW(IECP) = CO2_PLTRG(IECP,IRG)

               ROW = 'O'//NGBS//UPLNTCD(IECP)//'0'; call makmsk(ROW_mask,':O:',NGBS,UPLNTCD(IECP),':0:')

               CALL CROWTYPE(ROW,'L       ',ROW_mask)
               UBND = GRP_CAP(1,I_GRPS) * 0.001
               CALL CRHS(UPRHS,ROW,UBND,ROW_mask,'EP$NGBS,1')
               UBND = UBND + 0.0001
               
               END_YEAR = 0
               END_YEAR_FULL = 0

               IF (OPT(UNXPH,I_OPT) .EQ. 0) THEN
                  DO IYR = 1, UNXPH
                     IF (OPT(IYR,I_OPT) .GT. 0) THEN
                        END_YEAR =  I_OPT
                        END_YEAR_FULL = I_OPT 
                     END IF
                  END DO
               ELSE 
                  END_YEAR = UNXPH
                  END_YEAR_FULL = UNFPH
               END IF

               COL = 'E'//NGBS//UPLNTCD(IECP)//UPYRCD(I_OPT); call makmsk(COL_mask,':E:',NGBS,UPLNTCD(IECP),UPYRCD(I_OPT))

               WRITE(18,3921) CURIRUN, CURCALYR, I_GRPS, N_NGBS, ENG_GRP(N_NGBS), IRG, IMYEAR, FLRG, I_OPT, OPT(1,I_OPT), OPT(2,I_OPT), OPT(UNXPH,I_OPT), GRP_ECP(I_GRPS), COL, ROW, &
                  GRP_CAP(1,I_GRPS), GRP_CCS_O(I_GRPS), GRP_FOM(2,I_GRPS), GRP_CCS_F(I_GRPS), GRP_VOM(I_GRPS), GRP_CCS_V(I_GRPS)
 3921          FORMAT(1X,"O_NGBS_CC0_ROWS",13(":",I5),2(":",A16),6(":",F21.6))

               VALUE = 1.0
               CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,2')

!              FORCE A LITTLE RETROFIT CAPACITY IN EACH NERC FUEL REGION COMBINATION

               IF (I_OPT .EQ. UNXPH+1 .AND. TEST_RGNS(GRP_RG(I_GRPS),GRP_FLRG(I_GRPS)) .AND. GRP_CAP(UNXPH,I_GRPS) .GT. 0.0001) THEN
                  LBND = 0.0001
                  TEST_RGNS(GRP_RG(I_GRPS),GRP_FLRG(I_GRPS)) = .FALSE.
               ELSE
                  LBND = 0.0
               END IF

               CALL CBND(UPBND,COL,LBND,UBND,COL_mask,'EP$NGBS,3')

!              OBJECTIVE FUNCTION

               ROW = UPOBJ ; ROW_mask=UPOBJ

               TST_OBJ = 0
               INV = 0.0
               ANN_INV = 0.0
               OV_CO2_CAP = 0.0

               DO IYR = 1, UNXPH
                  IF (OPT(IYR,I_OPT) .EQ. 2 .AND. TST_OBJ .EQ. 0) THEN

                     OV_CO2_CAP = GRP_CCS_O(I_GRPS) * TCCF_GL(MIN(MNUMYR,CURIYR+IYR),3) * ANNADJ

                     CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,IYR,OV_CO2_CAP,UPSCPR,UPCAPD(1,WICC),UPGNPD, &
                        RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)
   
                     URATIO = TXBOOK / FNBOOK
                     CAPUNSTL = FNBOOK

                     CALL EPNBLD(DBLE(RETROR),DBLE(AVGUDCR),URATIO,DBLE(RETFPE),UPSELF,UPSTXLF(2),DBLE(UPTXRT),UPSELF,CAPUTIL)

                     ANN_INV = CAPUNSTL * CAPUTIL 

                     IF (ISNAN(ANN_INV)) THEN
                        WRITE(6,3313) CURIRUN, CURCALYR, I_GRPS, ENG_GRP(N_NGBS), GRP_RG(I_GRPS), GRP_FLRG(I_GRPS), UPSCLT, UPSTXLF(2), UPSELF, COL, &
                           GRP_CCS_O(I_GRPS), UPSCPR(1), RETIRT, EPUFDT, RETROR, TXBOOK, FNBOOK, AVGUDCR, RETFPE, CAPUTIL, ANNADJ
 3313                   FORMAT(1X,"ANN_INV_ISNAN",9(":",I5),":",A16,11(":",F21.6))
                        ANN_INV = 100.0
                     END IF

                     WRITE(18,3314) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_GRPS, ENG_GRP(N_NGBS), GRP_RG(I_GRPS), GRP_FLRG(I_GRPS), UPSCLT, UPSTXLF(2), UPSELF, COL, &
                        GRP_CCS_O(I_GRPS), UPSCPR(1), RETIRT, EPUFDT, RETROR, TXBOOK, FNBOOK, AVGUDCR, RETFPE, CAPUTIL, ANNADJ, TCCF_GL(MIN(MNUMYR,CURIYR+IYR),3)
 3314                FORMAT(1X,"NGCC_RETROFIT_ANNUITY",10(":",I5),":",A16,12(":",F21.6))

                     INV(IYR) = ANN_INV
                     TST_OBJ = 1
                  ELSEIF  (OPT(IYR,I_OPT) .EQ. 2) THEN
                     INV(IYR) = ANN_INV

                     WRITE(18,3314) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_GRPS, ENG_GRP(N_NGBS), GRP_RG(I_GRPS), GRP_FLRG(I_GRPS), UPSCLT, UPSTXLF(2), UPSELF, COL, &
                        GRP_CCS_O(I_GRPS), UPSCPR(1), RETIRT, EPUFDT, RETROR, TXBOOK, FNBOOK, AVGUDCR, RETFPE, CAPUTIL, ANNADJ, TCCF_GL(MIN(MNUMYR,CURIYR+IYR),3)

                  END IF
               END DO
               DO IYR = UNXPH + 1 , UNFPH
                  INV(IYR) = ANN_INV
               END DO

               FOM = 0.0
               VOM = 0.0

               IECP0 = IECP
               DO IYR = 1 , END_YEAR_FULL
                  IF (OPT(MIN(IYR,UNXPH),I_OPT) .EQ. 2) THEN
                     IECP = WIA2
                  END IF

                  IF (IECP .EQ. IECP0) THEN
                     FOM(IYR) = GRP_FOM(MIN(IYR,UNXPH),I_GRPS) * UPGNPD(CURIYR + IYR - 1)
                     VOM(IYR) = (GRP_VOM(I_GRPS) - EPVOM(IECP)) * GRP_CF(I_GRPS) * 8.760
                  ELSE
                     FOM(IYR) = (GRP_FOM(MIN(IYR,UNXPH),I_GRPS) + GRP_CCS_F(I_GRPS) * TCCF_GL(MIN(MNUMYR,CURIYR+IYR-1),3)) * UPGNPD(CURIYR + IYR - 1)
                     VOM(IYR) = ((GRP_VOM(I_GRPS) + GRP_CCS_V(I_GRPS) * TCCV_GL(MIN(MNUMYR,CURIYR+IYR-1),3)) - EPVOM(IECP)) * GRP_CF(I_GRPS) * 8.760
                  END IF
               END DO
               PVV_FOM = PVV(FOM,ECP_D_FPH,UNFPH,DBLE(AVGUDCR))* PWF(DBLE(AVGUDCR),1)
               PVV_VOM = PVV(VOM,ECP_D_FPH,UNFPH,DBLE(AVGUDCR))* PWF(DBLE(AVGUDCR),1)
               PVV_INV = PVV(INV,ECP_D_FPH,UNFPH,DBLE(AVGUDCR))* PWF(DBLE(AVGUDCR),1)
               VALUE = PVV_FOM + PVV_VOM + PVV_INV

               CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,4')

               CPEN = 1.0
               HPEN = 1.0

               CALL ECP_AVG_HTRT(FROM_LABEL, IRG, FLRG, IECP, I_OPT, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

               WRITE(18,3713) CURIRUN, CURCALYR, I_GRPS, GRP_RG(I_GRPS), GRP_FLRG(I_GRPS), I_OPT, IECP, IECP0, &
                  COL, GRP_CAP(1,I_GRPS), PVV_FOM, PVV_VOM, PVV_INV, VALUE, ANNADJ, OV_CO2_CAP, HPEN, CPEN, &
                  (GRP_HTRT(IYR,I_GRPS),IYR=1,UNXPH), AVG_HTRT(IECP), AVG_HTRT_MOD(IECP), &
                  FOM(2), GRP_FOM(2,I_GRPS), GRP_CCS_F(I_GRPS), TCCF_GL(MIN(MNUMYR,CURIYR+1),3), UPGNPD(CURIYR+1), &
                  VOM(2), GRP_VOM(I_GRPS), GRP_CCS_V(I_GRPS), TCCV_GL(MIN(MNUMYR,CURIYR+1),3), EPVOM(IECP), GRP_CF(I_GRPS)
 3713          FORMAT(1X,"NGBS_OBJ",8(":",I5),":",A16,9(":",F21.6),<UNXPH>(":",F21.6),2(":",F21.6),11(":",F21.6))

               DO IYR = 1 , END_YEAR

                  IECP = GRP_ECP(I_GRPS)
                  IECP0 = IECP
                  UNIT_HTRT = GRP_HTRT(IYR,I_GRPS)
                  CAP_FCTR = 1.0
                  CCS_FCTR = 1.0
                  IF (OPT(IYR,I_OPT) .EQ. 2) THEN
                     IECP = WIA2
                     UNIT_HTRT = GRP_CCS_H(I_GRPS)
                     CAP_FCTR = GRP_HTRT(IYR,I_GRPS) / UNIT_HTRT
                     CCS_FCTR = 1.0 - GRP_CCS_R(I_GRPS)
                  END IF

                  SHOURS = 0.0
                  DO IVLS = 1 , EPNSTP(IYR)
                     ISP = EPGECP(EPLDGR(IVLS,IYR))
                     SHOURS(ISP) = SHOURS(ISP) + EPWDTH(IVLS,IYR)
                  END DO

!                 INTERSECT WITH CAPACITY ROWS

                  IMR = IMYEAR - (CURIYR + UHBSYR + IYR - 1) + 1
                  IMR = MAX(0 , IMR)
                  IMR = MIN(IMR , 1)

                  DO ISP = 1 , EPNMSP
                     ROW = 'C'//UPRGCD(IRG)//UPLNTCD(IECP)//MR_CODE(IMR)//EPFLCD(FLRG)//SCODE(ISP)//UPYRCD(IYR); call makmsk(ROW_mask,':C:',UPRGCD(IRG),UPLNTCD(IECP),':'//MR_CODE(IMR)//':',EPFLCD(FLRG),SCODE(ISP),UPYRCD(IYR))  ! Exception to map into C(*)(**)X(*)(*)(*) or C(*)(*)M or C(*)(*)M..

                     VALUE = -1.0 * CAP_FCTR * GRP_CAP(IYR,I_GRPS) / GRP_CAP(1,I_GRPS) * GRP_SP_CAP_FAC(ISP,I_GRPS)

                     CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,5')

                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     CALL CRHS(UPRHS,ROW,DBLE(0.0),ROW_mask,'EP$NGBS,6')

                  END DO

                  CALL ECP_AVG_HTRT(FROM_LABEL, IRG, FLRG, IECP, IYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

!                 ADJUST FUEL CONSUMPTION

                  DO ISP = 1 , EPNMSP
                     WRITE(C_SP_NG,'(I1)') ISP
                     GEN = GRP_CF(I_GRPS) * SHOURS(ISP)
                     
                     !IF (GRP_MR(I_GRPS) .EQ. 0) THEN
                     IF (IMR .EQ. 0) THEN
                        ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IECP)//'XX'//C_SP_NG//UPYRCD(IYR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IECP),':XX:',C_SP_NG,UPYRCD(IYR))
                        VALUE = DBLE(0.000001) * GEN * (UNIT_HTRT - AVG_HTRT(IECP))
                     ELSE
                        ROW = 'F'//EPFLCD(FLRG)//UPLNTCD(IECP)//'MR'//C_SP_NG//UPYRCD(IYR); call makmsk(ROW_mask,':F:',EPFLCD(FLRG),UPLNTCD(IECP),':MR:',C_SP_NG,UPYRCD(IYR))
                        VALUE = DBLE(0.000001) * GEN * (UNIT_HTRT - AVG_HTRT_MR(IECP))
                     END IF
                     
                     CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,7')
                  END DO

!                 Adjust Carbon Standard related to fuel consumption adjustment

                  IF (CO2_PLTSW(IECP) .GT. 0.0 .AND.  &
                      (CO2_STDSW .GT. 0 .AND. CO2_NRYR(IRG,IYR) .GT. 0.0))THEN
                     ROW = 'ERCO2'//URGNME(IRG)(6:7)//UPYRCD(IYR); call makmsk(ROW_mask,':ERCO2:',URGNME(IRG)(6:7),UPYRCD(IYR),':!NERC:')
                     GEN = GRP_CF(I_GRPS) * 8760.0 * 0.001
                     IF (GRP_MR(I_GRPS) .EQ. 0) THEN
                        VALUE = DBLE(0.000001) * GEN * (UNIT_HTRT - AVG_HTRT(IECP))
                     ELSE
                        VALUE = DBLE(0.000001) * GEN * (UNIT_HTRT - AVG_HTRT_MR(IECP))
                     END IF
                     VALUE = (1.0 - UPPCEF(IECP)) * VALUE * ENGEL(CURIYR) * 0.001 * (44.0 / 12.0) * 2204.0 * DBLE(CO2_PLTSW(IECP))
                     IF (VALUE .GT. ECP_MIN) CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,8')

!                    WRITE(6,2315) CURIRUN, CURCALYR, CURIYR+IYR+1988, I_GRPS, FLRG, IRG, IECP, GRP_MR(I_GRPS), CO2_STDSW, COL, ROW, &
!                       VALUE, CO2_FRYR(FLRG,IYR), CO2_PLTSW(IECP), UPPCEF(IECP), ENGEL(CURIYR), GEN, GRP_CF(I_GRPS), GRP_HTRT(IYR,I_GRPS), AVG_HTRT(IECP), AVG_HTRT_MR(IECP), UNIT_HTRT, CAP_FCTR, CCS_FCTR
!2315                FORMAT(1X,"ERCO2_ADJ_INFO",9(":",I5),2(":",A16),13(":",F20.6))

                  END IF

!                 INTERSECT RESERVE MARGIN ROW

                  ROW = 'R'//UPRGCD(IRG)//'XXXXX'//UPYRCD(IYR); call makmsk(ROW_mask,':R:',UPRGCD(IRG),':XXXXX:',UPYRCD(IYR))
                  VALUE = CAP_FCTR * (GRP_CAP(IYR,I_GRPS) / GRP_CAP(1,I_GRPS))
                  CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,9')

!                 INTERSECT TOTAL CAPACITY ROW
   
                  ROW = 'TOTCAP'//UPRGCD(IRG)//UPYRCD(IYR); call makmsk(ROW_mask,':TOTCAP:',UPRGCD(IRG),UPYRCD(IYR))
                  CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,10')

!                 INTERSECT REGIONAL CAPACITY ROW
   
                  ROW = 'F'//UPRGCD(IRG)//UPLNTCD(IECP)//'CAP'//UPYRCD(IYR); call makmsk(ROW_mask,':F:',UPRGCD(IRG),UPLNTCD(IECP),':CAP:',UPYRCD(IYR))
                  CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,11')

!                 INTERSECT MAXIMUM RETIREMENT ROW
   
                  IF (IYR .EQ. 2 .AND. UPRETRAT .GT. 0.0 .AND. USW_ERET .EQ. 1) THEN
                     ROW = 'R'//UPRGCD(IRG)//'MXRET0'; call makmsk(ROW_mask,':R:',UPRGCD(IRG),':MXRET0:')
                     CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,12')
                  END IF

!                 INTERSECT PLANNED MAINTENACE ROW

                  !IF (GRP_MR(I_GRPS)  .EQ. 1) THEN
                  IF (IMR  .EQ. 1) THEN
                     VALUE = - 8.760 * DBLE(UPPMRT(IECP)) * DBLE(1.0 - UPFORT(IECP))
                  ELSE
                     VALUE = - 8.760 * DBLE(UPPMRT(IECP))
                  END IF
   
                  ROW = 'M'//UPRGCD(IRG)//UPLNTCD(IECP)//'X'//EPFLCD(FLRG)//'X'//UPYRCD(IYR); call makmsk(ROW_mask,':M:',UPRGCD(IRG),UPLNTCD(IECP),':X:',EPFLCD(FLRG),':X:',UPYRCD(IYR))
                  CALL CVAL(COL,ROW,VALUE,COL_mask,ROW_mask,'EP$NGBS,13')

               END DO
            END DO
         END IF
      END DO

      RETURN
      END

!     EPO$NGBS For Each NGBS Unit Store Carbon Capture Decisions

      SUBROUTINE EPO$NGBS
      use ecp_row_col

      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'ecpcntl'
      include 'dispin'
      include 'dispett'
      include 'control'
      include 'bildin'
      include 'bildout'
      include 'plntin'
      include 'plntctl'
      include 'emission'
      include 'cdsparms'
      include 'uso2grp'
      include 'ecp_coal'
      include 'ecp_nuc'
      include 'elout'
      include 'uecpout'
      include 'uefdout'
      include 'coalemm'
      include 'entcntl'
      include 'dispuse'
      include 'e111d'

      INTEGER*4 N_RETRO
      PARAMETER (N_RETRO = 1)        ! Maximum number of retrofit options
      REAL*8 SOLVAL(5), ACTIVITY, RETIRE_CAP, T_CAP, RETROFIT(N_RETRO), OV_CST
      REAL*8 TXBOOK,FNBOOK,CAPUTIL,CAPUNSTL,URATIO,CPEN,HPEN,CCS_F,CCS_V
      REAL*8 AVG_HTRT(0:ECP_D_CAP), AVG_HTRT_MR(0:ECP_D_CAP), AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP)
      REAL*8 ECP_GEN(0:ECP_D_CAP), ECP_GEN_MR(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
      REAL*4 RETIRT,RETROR,RETFPE,RETCRE
      REAL*8 ANNRTE,ANNADJ
      INTEGER*4 I_NGBS, IRG, FLRG, IREC, IRET, OREC, OLD_RYR, OLD_RMO, YEAR, XYR, IYR, I_GRPS, RYEAR, I_TST, IECP, IPGRP, XGRP
      INTEGER*4 N_OPT, J_OPT, I_OPT, S_OPT, L_OPT, I_RETRO, J_RETRO, OPT(ECP_D_XPH,ECP_D_XPH+N_RETRO*(ECP_D_XPH-1)), NEW_REC, OVIN, STXLF, N_NGBS
      CHARACTER*16 COL
      CHARACTER*12 FROM_LABEL
      CHARACTER*4 NGBS
      CHARACTER*2 STATUS

      COMMON/INVEST/ RETINV(MNUMYR+ECP_D_XPH),BLDINV(MNUMYR+ECP_D_XPH)
      REAL*8 RETINV,BLDINV

      COMMON/NGBS_MAP/ MAP_IGRP_TO_CTUS_INDEX
      INTEGER*4 MAP_IGRP_TO_CTUS_INDEX(EMM_D_GRP)

!     CURRENTLY THE ONLY OPTION IS TO OPERATE THE CAPACITY AS IS, 
!     BUT RYEAR either allows 2 commit vectors 1) Period 1 thru RYEAR 2) Period RYEAR thru UNXPH or 1 commit vector for all periods

      ecpsub='EPO$NGBS'

      FROM_LABEL = "EPO_NGBS"

!     NG_CCS_SYR = 2017

      RYEAR = 2

      YEAR = CURIYR + UHBSYR + RYEAR - 1

!     USE RETROFIT RISK PREMIUM, IF SWITCH IS ON

      IF (USW_RTRSK .LE. 0)THEN
         RETIRT = EPUIRT
         RETROR = EPUROR
         RETFPE = EPUFPE
         RETCRE = EPUCRE
      ELSE
         RETIRT = EPUIRTR
         RETROR = EPURORR
         RETFPE = EPUFPER
         RETCRE = EPUCRER
      END IF

      DO I_GRPS = 1, NUM_NGBS_GRPS

         N_NGBS = F_GRP_TO_NGBS(I_GRPS)

!        Create Retrofit Options

         OPT = 1
         N_OPT = 3
         DO I_OPT = 1 , UNXPH
            DO IYR = 1 , UNXPH
               IF (IYR .GT. I_OPT) THEN
                  OPT(IYR,I_OPT) = 0
               END IF
            END DO
         END DO

!        Currently there a 3 explicit forecast periods, UNXPH = 3
!        The logic above yields the followinf OPT array
!        IYR I_OPT =>     1     2    3
!          1              1     1    1
!          2              0     1    1
!          3              0     0    1

!        IF 1 means use as is and 0 means don't use the unit then Option 1 is use the unit for 1 period and then retire, Option 2 is use the unit for 2 periods then retire, and Option 3 is use all 3 periods

!        If the unit is eligible to retrofit extend the definition of OPT()

         I_RETRO = 1

         IF (GRP_ECP(I_GRPS) .EQ. WIEC .AND. GRP_CCS_O(I_GRPS) .GT. 0.0 .AND. CURIYR + UHBSYR + RYEAR - 1 .GE. NG_CCS_SYR) THEN
            J_OPT = N_OPT + 1
            N_OPT = N_OPT + UNXPH - (RYEAR - 1)
            DO I_OPT = J_OPT, N_OPT
               DO IYR = UNXPH - (RYEAR - 1), UNXPH
                  IF (IYR .GT. I_OPT + UNXPH - N_OPT) THEN
                     OPT(IYR,I_OPT) = 2
                  END IF
               END DO
            END DO
         ELSE
            DO I_OPT = UNXPH + 1, ECP_D_XPH+N_RETRO*(ECP_D_XPH-1)
               DO IYR = 1, UNXPH
                  OPT(IYR,I_OPT) = 0
               END DO
            END DO
         END IF

         IF (GRP_ECP(I_GRPS) .EQ. WIEC .OR. GRP_ECP(I_GRPS) .EQ. WIST .OR. GRP_ECP(I_GRPS) .EQ. WIA2) THEN
            IF (I_GRPS .LT. 10) THEN
               WRITE(NGBS,'("000",I1)') I_GRPS
            ELSE IF (I_GRPS .LT. 100) THEN
               WRITE(NGBS,'("00",I2)') I_GRPS
            ELSE IF (I_GRPS .LT. 1000) THEN
               WRITE(NGBS,'("0",I3)') I_GRPS
            ELSE
               WRITE(NGBS,'(I4)') I_GRPS
            END IF
   
            IRG = GRP_RG(I_GRPS)
            FLRG = GRP_FLRG(I_GRPS)

            IECP = GRP_ECP(I_GRPS)

            ACTIVITY = 0.0

            DO I_OPT = 1 , UNXPH
               COL = 'E'//NGBS//UPLNTCD(IECP)//UPYRCD(I_OPT); call makmsk(COL_mask,':E:',NGBS,UPLNTCD(IECP),UPYRCD(I_OPT))
               CALL CWFSCOL(COL,'ACLUD   ',STATUS,SOLVAL,COL_mask,IRET)
               IF (I_OPT .GE. RYEAR) ACTIVITY = ACTIVITY + SOLVAL(1)

               WRITE(18,9312) CURIRUN, CURCALYR, I_OPT, I_GRPS, N_NGBS, ENG_GRP(N_NGBS), F_GRP_TO_NGBS(I_GRPS), IRG, FLRG, GRP_SYR(I_GRPS), GRP_RYR(I_GRPS), &
                  GRP_ECP(I_GRPS), RET_GRP(IECP), GRP_MR(I_GRPS), RYEAR, COL, UPGNPD(CURIYR), EPDSCRT, EPUTDSCRT, &
                  GRP_CAP(1,I_GRPS), SOLVAL(1), SOLVAL(2), SOLVAL(3), SOLVAL(4), SOLVAL(5), ENG_RVAL(F_GRP_TO_NGBS(I_GRPS))
 9312          FORMAT(1X,"NGBS_PREP_OUT",15(":",I6),":",A16,10(":",F21.6))

            END DO

            RETROFIT = 0.0

            IF (GRP_ECP(I_GRPS) .EQ. WIEC .AND. GRP_CCS_O(I_GRPS) .GT. 0.0 .AND. CURIYR + UHBSYR + RYEAR - 1 .GE. NG_CCS_SYR) THEN
               DO J_RETRO = 1 , I_RETRO
                  L_OPT = UNXPH + J_RETRO * (UNXPH - (RYEAR - 1))
                  S_OPT = L_OPT - (UNXPH - RYEAR)
                  DO I_OPT = S_OPT , L_OPT
                     COL = 'E'//NGBS//UPLNTCD(IECP)//UPYRCD(I_OPT); call makmsk(COL_mask,':E:',NGBS,UPLNTCD(IECP),UPYRCD(I_OPT))
                     CALL CWFSCOL(COL,'ACLUD   ',STATUS,SOLVAL,COL_mask,IRET)
                     ACTIVITY = ACTIVITY + SOLVAL(1)
                     IF (I_OPT .EQ. S_OPT) THEN
                        RETROFIT(J_RETRO) = SOLVAL(1)
                     END IF
   
                     WRITE(18,9312) CURIRUN, CURCALYR, I_OPT, I_GRPS, N_NGBS, ENG_GRP(N_NGBS), F_GRP_TO_NGBS(I_GRPS), IRG, FLRG, GRP_SYR(I_GRPS), GRP_RYR(I_GRPS), &
                        GRP_ECP(I_GRPS), RET_GRP(IECP), GRP_MR(I_GRPS), RYEAR, COL, UPGNPD(CURIYR), EPDSCRT, EPUTDSCRT, &
                        GRP_CAP(1,I_GRPS), SOLVAL(1), SOLVAL(2), SOLVAL(3), SOLVAL(4), SOLVAL(5), ENG_RVAL(F_GRP_TO_NGBS(I_GRPS))
       
                  END DO
               END DO
            END IF

            RETIRE_CAP =  GRP_CAP(1,I_GRPS) * 0.001 - ACTIVITY

!           IF RETIREMENTS ARE ALLOWED FOR THIS ECP TYPE

            IF (RET_GRP(IECP) .GT. 0 .AND.  CURIYR + UHBSYR + UPRTLT - 1 .GE. UNUC_SYR) THEN

!              CONSIDER CAPACITY RETIRED IF THE COMBINED ACTIIVTY ON THE COMMIT VECTOR(S) is less than 20% of total capacity

               IF (ACTIVITY .LT. 0.001 * GRP_CAP(1,I_GRPS) .AND. GRP_CAP(1,I_GRPS) .GT. 0.0) THEN
                  I_NGBS = F_GRP_TO_NGBS(I_GRPS)
                  IPGRP = ENG_GRP(I_NGBS)
                  I_TST = 0
                  IF (I_NGBS .GT. 0) THEN
                     T_CAP = ENG_CAP(1,I_NGBS) * 0.001 * 0.9
                  ELSE
                     T_CAP = RETIRE_CAP + 0.001
                  END IF
                  DO WHILE (I_NGBS .GT. 0 .AND. RETIRE_CAP .GE. T_CAP .AND. I_TST .LE. MX_NGBS)

!                    Only retire units that are not paying going forward costs as seen by the EFD

                     IF (ENG_RVAL(I_NGBS) .LE. -0.001 .AND. ENG_MR(I_NGBS) .LT. CURIYR + UHBSYR + RYEAR - 1 .AND. ENG_RYR(I_NGBS) .GT. CURIYR + UHBSYR + UNFPH - 2) THEN
                        I_TST = I_TST + 1
                        IREC = ENG_FREC(I_NGBS)
                        OREC = 0
                        DO WHILE (IREC .GT.  0 .AND. IREC .NE. OREC)
                           CALL GETPLT(IREC)
                           IF (W_RYR .GT. CURIYR + UHBSYR + RYEAR - 1) THEN
                              OLD_RYR = W_RYR
                              OLD_RMO = W_RMO
                              W_RYR = CURIYR + UHBSYR + RYEAR - 2
                              W_RMO = 12
                              RETIRE_CAP = RETIRE_CAP - 0.001 * WC_SUM
                          
                              CALL STRPLT(IREC)

                              CALL ECP_AVG_HTRT(FROM_LABEL, IRG, FLRG, IECP, RYEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                              WRITE(18,7113) CURIRUN, CURCALYR, I_GRPS, I_NGBS, IREC, ENG_NREC(IREC), W_IGRP, ENG_GRP(I_NGBS), W_GRP, W_GRP2, ENG_MR(I_NGBS), &
                                 ENG_RG(I_NGBS), IRG, ENG_FLRG(I_NGBS), FLRG, W_SYR, OLD_RYR, W_RYR, WECPT, ENG_ECP(I_NGBS), IECP, COL, ACTIVITY * 1000.0, RETIRE_CAP * 1000.0, &
                                 WC_SUM, ENG_CAP(1,I_NGBS), GRP_CAP(1,I_GRPS), &
                                 WHRATE, ULHTRT_ECP(IPGRP,1), GRP_HTRT(1,I_GRPS), AVG_HTRT(ENG_ECP(I_NGBS)), AVG_HTRT_MR(ENG_ECP(I_NGBS)), &
                                 W_FOM, ENG_FOM(1,I_NGBS), GRP_FOM(1,I_GRPS), &
                                 W_VOM, ENG_VOM(I_NGBS), GRP_VOM(I_GRPS), & 
                                 ENG_RVAL(I_NGBS), GRP_RVAL(I_GRPS), &
                                 UPANNADJ(ENG_ECP(I_NGBS),MIN(UNYEAR,CURIYR+YEAR-1))
 7113                         FORMAT(1X,"NGBS_RETIRE",21(":",I5),":",A16,20(":",F21.6))
   
                              UNG_CGRP(WREC_NXT) = I_NGBS
                           END IF
                           OREC = IREC
                           IREC = ENG_NREC(IREC)
                        END DO
                        I_NGBS = N_GRP_TO_NGBS(I_NGBS)
                        IF (I_NGBS .GT. 0) THEN
                           T_CAP = ENG_CAP(1,I_NGBS) * 0.001 * 0.9
                        ELSE
                           T_CAP = RETIRE_CAP + 0.001
                        END IF
                     ELSE
                        I_NGBS = 0
                        T_CAP = RETIRE_CAP + 0.001
                     END IF
                  END DO
               END IF
            END IF

!           STORE RETROFITS

            DO J_RETRO = 1 ,I_RETRO
               IF (RETROFIT(J_RETRO) .GE. 0.75 * 0.001 * GRP_CAP(1,I_GRPS) .AND. GRP_CAP(1,I_GRPS) .GT. 0.0) THEN
                  ACTIVITY = RETROFIT(J_RETRO)
                  I_NGBS = F_GRP_TO_NGBS(I_GRPS)
                  IPGRP = ENG_GRP(I_NGBS)
                  I_TST = 0
                  IF (I_NGBS .GT. 0) THEN
                     T_CAP = ENG_CAP(1,I_NGBS) * 0.001 * 0.001
                  ELSE
                     T_CAP = RETROFIT(J_RETRO) + 0.001
                  END IF
                  DO WHILE (I_NGBS .GT. 0 .AND. RETROFIT(J_RETRO) .GE. T_CAP .AND. I_TST .LE. MX_NGBS)
                     I_TST = I_TST + 1
                     IREC = ENG_FREC(I_NGBS)
                     OREC = 0
                     DO WHILE (IREC .GT.  0 .AND. IREC .NE. OREC)
                        CALL GETPLT(IREC)
                        IF (W_RYR .GT. CURIYR + UHBSYR + RYEAR - 1) THEN
                           IF (W_SYR .LE. CURIYR + UHBSYR + RYEAR) THEN
                              OLD_RYR = W_RYR
                              OLD_RMO = W_RMO
                              W_RYR = CURIYR + UHBSYR + RYEAR - 2
                              W_RMO = 12
                              OVIN = WVIN
                              WVIN = 8

                              RETROFIT(J_RETRO) = RETROFIT(J_RETRO) - 0.001 * WC_SUM
                          
                              CALL STRPLT(IREC)

!                             INCREMENT COUNTER

                              WREC_NXT = WREC_NXT + 1

!                             INSURE THAT NUMBER OF BUILDS DOESN'T EXCEED ALLOCATION

                              IF (WREC_NXT .GT. WPLT_D_REC) WRITE(6, * ) ' EPO$RET ERROR: TOO MANY PLANT RECORDS'
                              NEW_REC = WREC_NXT
                           ELSE
                              NEW_REC = IREC
                           END IF

                           HPEN = ENG_CCS_H(I_NGBS) / WHRATE

                           CPEN = 1.0 - ENG_CCS_C(I_NGBS)

                           CCS_F = ENG_CCS_F(I_NGBS)
                           CCS_V = ENG_CCS_V(I_NGBS)
                           
                           ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                           IF ((CURIYR+RYEAR-1) .LE. UNYEAR)THEN
                              ANNADJ = UPANNADJ(IECP,CURIYR+RYEAR-1)
                           ELSE
                              ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + RYEAR - 1) - UNYEAR)
                           END IF

                           OV_CST = ENG_CCS_O(I_NGBS) * TCCF_GL(MIN(CURIYR+RYEAR-1,MNUMYR),1)
                           OV_CST = OV_CST * ANNADJ
                           OV_CST = OV_CST / CPEN
                           WVIN = OVIN
                           W_SYR = CURIYR + UHBSYR + RYEAR - 1
                           W_SMO = 1
                           W_RYR = OLD_RYR
                           W_RMO = OLD_RMO
                           W_FOM = (W_FOM + CCS_F)  / CPEN
                           W_CAPAD = W_CAPAD / CPEN
                           W_VOM = (W_VOM + CCS_V) / CPEN
                           WHRATE = ENG_CCS_H(I_NGBS)
                           WC_SUM = WC_SUM * CPEN
                           CCSCAPA = 1.0 - CPEN
                           WC_NP = WC_NP * CPEN
                           WC_WIN = WC_WIN * CPEN
                           WECPT = WIA2

                           IF (WNGRPS(IRG) .GE. WPLT_D_GRP) WRITE(6, * ) ' EPO$RETRO ERROR: TOO MANY PLTGRPS IN IRG:', IRG
                           WNGRPS(IRG) = WNGRPS(IRG) + 1
                           XGRP = WNGRPS(IRG)   ! Use New Group For Retros
                           W_NXT(WREC_NXT) = W_INT(IRG,XGRP)
                           W_INT(IRG,XGRP) = WREC_NXT
                           WGRP_NXT = WGRP_NXT + 1
                           W_GRP = WGRP_NXT
                           W_GRP2 = WNXT_SGRP(W_GRP) + 1
                           WNXT_SGRP(W_GRP) = W_GRP2
                           WTYPE(W_GRP) = XGRP
                           WSEQEF = UPPCEF(WECPT)
                           WEFDT = UIAC2

                           CALL STRPLT(NEW_REC)

                           CALL ECP_AVG_HTRT(FROM_LABEL, IRG, FLRG, IECP, RYEAR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

                           WRITE(18,8113) CURIRUN, CURCALYR, I_GRPS, I_NGBS, IREC, ENG_NREC(IREC), W_IGRP, ENG_GRP(I_NGBS), W_GRP, W_GRP2, ENG_MR(I_NGBS), &
                              ENG_RG(I_NGBS), IRG, ENG_FLRG(I_NGBS), FLRG, W_SYR, OLD_RYR, W_RYR, WECPT, ENG_ECP(I_NGBS), IECP, COL, ACTIVITY * 1000.0, RETROFIT(J_RETRO) * 1000.0, &
                              WC_SUM, ENG_CAP(1,I_NGBS), GRP_CAP(1,I_GRPS), &
                              WHRATE, ULHTRT_ECP(IPGRP,1), GRP_HTRT(1,I_GRPS), AVG_HTRT(ENG_ECP(I_NGBS)), AVG_HTRT_MR(ENG_ECP(I_NGBS)), &
                              OV_CST, W_FOM, ENG_FOM(1,I_NGBS), GRP_FOM(1,I_GRPS), &
                              W_VOM, ENG_VOM(I_NGBS), GRP_VOM(I_GRPS), & 
                              ENG_RVAL(I_NGBS), GRP_RVAL(I_GRPS), &
                              UPANNADJ(ENG_ECP(I_NGBS),MIN(UNYEAR,CURIYR+RYEAR-1)), CPEN, ENG_CCS_C(I_NGBS), HPEN, ENG_CCS_H(I_NGBS), CCSCAPA
 8113                      FORMAT(1X,"NGBS_RETROFIT",21(":",I5),":",A16,25(":",F21.6))
   
                           UNG_CGRP(WREC_NXT) = I_NGBS
                           IF (W_SYR .LE. CURIYR + UHBSYR + RYEAR) THEN
                              WPCST = OV_CST
                              WEFPT = 8
                              CALL UEXPBLD(ENG_RG(I_NGBS))
                              RETINV(YEAR-UHBSYR) = RETINV(YEAR-UHBSYR) + OV_CST * WC_SUM
                              IF ((YEAR - UHBSYR) .LE. UNYEAR) THEN
                                 RET_INV(ENG_RG(I_NGBS),YEAR-UHBSYR) = RET_INV(ENG_RG(I_NGBS),YEAR-UHBSYR) + OV_CST * WC_SUM * 0.001
                                 RET_INV(MNUMNR,YEAR-UHBSYR) = RET_INV(MNUMNR,YEAR-UHBSYR) + OV_CST * WC_SUM * 0.001
                              ENDIF

!                             Collect Data for Resource Cost Calculations - Ret_Cst

                              IF (OV_CST .GT. 0.0001) THEN
                                 TXBOOK = 0.0
                                 FNBOOK = 0.0
                                 CAPUTIL = 0.0
                                 CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPSCLT,UPSCLT,CURIYR,IYR,OV_CST,UPSCPR,UPCAPD(1,IECP),UPGNPD,RETIRT,EPUFDT,RETROR,TXBOOK,FNBOOK)
                                 URATIO = TXBOOK / FNBOOK
                                 CAPUNSTL = FNBOOK

!                                Check Vintage for Retrofit Tax Life

                                 IF (ENG_SYR(I_NGBS) .LT. UPSTXYR) THEN
                                    STXLF = UPSTXLF(1)
                                 ELSE
                                    STXLF = UPSTXLF(2)
                                 END IF

                                 CALL EPNBLD(DBLE(RETROR),DBLE(EPUTDSCRT),URATIO,DBLE(RETFPE),UPSELF,STXLF,DBLE(UPTXRT),UPSELF,CAPUTIL)

                                 DO XYR = YEAR-UHBSYR , MIN(UNYEAR, YEAR - UHBSYR + UPSELF - 1)
                                    Ret_Cst(ENG_RG(I_NGBS),XYR) = Ret_Cst(ENG_RG(I_NGBS),XYR) + CAPUNSTL * CAPUTIL * WC_SUM * 0.001 / UPGNPD(XYR)
                                    Ret_Cst(MNUMNR,XYR) = Ret_Cst(MNUMNR,XYR) + CAPUNSTL * CAPUTIL * WC_SUM * 0.001 / UPGNPD(XYR)
                                 END DO
                                !fill group level CCS costs for CCATS
                                 ULCCS_INV(W_GRP) = CAPUNSTL * CAPUTIL * WC_SUM * 0.001   !nominal annuity
                                 ULCCS_FOM(W_GRP) = CCS_F * WC_SUM * 0.001 / CPEN       !1987 annual $
                                 ULCCS_VOM(W_GRP) = CCS_V                       !1987 $/MWh
                     write(18,2001) 'CCATS_RETRO_NG',CURIYR, W_GRP, WC_SUM,ULCCS_INV(W_GRP),ULCCS_FOM(W_GRP),ULCCS_VOM(W_GRP)
2001                  FORMAT(1x,A15,2I6,4F12.3)
                              END IF
                           END IF
                        END IF
                        OREC = IREC
                        IREC = ENG_NREC(IREC)
                     END DO
                     I_NGBS = N_GRP_TO_NGBS(I_NGBS)
                     IF (I_NGBS .GT. 0) THEN
                        T_CAP = ENG_CAP(1,I_NGBS) * 0.001 * 0.001
                     ELSE
                        T_CAP = RETROFIT(J_RETRO) + 0.001
                     END IF
                  END DO
               END IF
            END DO
         END IF
      END DO
      RETURN
      END
!
      SUBROUTINE EPA$TRANRG_ECP(ITRAN,IYR,REG,PLT,COLUMN,COLUMN_maskA,EMIS)
      use ecp_row_col

!
!     THIS SUBROUTINE SETS UP THE STATE LEVEL SO2 LIMITS
!     FROM THE TRANSPORT RULE, IF APPROPRIATE
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'emission'
      include 'cdsparms'
      include 'csapr'
      include 'emmemis'
!
      INTEGER ITRAN,REG,CRG,IYR,JYR,PLT,IRET
      REAL*8 EMIS,VALUE
      CHARACTER*16 ROW,COL,COLUMN,COLUMN_maskA*30
      CHARACTER*2 CLRG(NDREG)

      DATA CLRG/'NE',  &
                'YP',  &
                'S1',  &
                'S2',  &
                'GF',  &
                'OH',  &
                'EN',  &
                'KT',  &
                'AM',  &
                'C1',  &
                'C2',  &
                'WS',  &
                'MT',  &
                'CU',  &
                'ZN',  &
                'PC'/

      ecpsub='EPA$TRANRG_ECP'

      IF (ITRAN .EQ. 0)THEN
         DO CRG = 1 , NDREG
            IF (TSO2_LIM_BY_CLRG(CRG) .GT. 0.0)THEN
               DO JYR = 1 , UNXPH
                  ROW = 'EUSO2' // CLRG(CRG) // UPYRCD(JYR); call makmsk(ROW_mask,':EUSO2:' , CLRG(CRG) , UPYRCD(JYR))
                  IF ((CURIYR + UHBSYR + JYR - 1) .LT. TSO2_YR_BY_CLRG)THEN
                     CALL CROWTYPE(ROW,'N       ',ROW_mask)
                  ELSE
                     CALL CROWTYPE(ROW,'L       ',ROW_mask)
                     IF ((CURIYR + UHBSYR + JYR - 1) .GE. TRANRULE2)THEN
                        VALUE = DBLE(TSO2_LIM_BY_CLRG(CRG))
                     ELSE IF ((CURIYR + UHBSYR + JYR - 1) .GE. TRANRULE1)THEN
                        VALUE = DBLE(TSO2_LM1_BY_CLRG(CRG))
                     END IF
                     CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EPA$TRANRG_ECP,1')
!                    IF (TSO2_VR_BY_CLRG .GT. 0)THEN
!                       IF ((CURIYR + UHBSYR + JYR - 1) .GE. TRANRULE2)THEN
!                          VALUE = DBLE(TSO2_VR3_BY_CLRG(CRG))
!                       ELSE IF ((CURIYR + UHBSYR + JYR - 1) .GE. TRANRULE1)THEN
!                          VALUE = DBLE(TSO2_VR1_BY_CLRG(CRG))
!                       ELSE
!                          VALUE = DBLE(0.0)
!                       END IF
!                       COL= 'EVSO2' // CLRG(CRG) // UPYRCD(JYR)
!                       CALL CBND(UPBND,COL,DBLE(0.0),VALUE,'EPA$TRANRG_ECP,2')
!                       CALL CVAL(COL,ROW,DBLE(-1.0),'EPA$TRANRG_ECP,3')
!                       CALL CVAL(COL,UPOBJ,ECP_MIN,'EPA$TRANRG_ECP,4')
!                    END IF
                  END IF
               END DO
            END IF
         END DO
      END IF
      IF (ITRAN .EQ. 1)THEN
         IF (TSO2_LIM_BY_CLRG(REG) .GT. 0.0)THEN
            ROW = 'EUSO2' // CLRG(REG) // UPYRCD(IYR); call makmsk(ROW_mask,':EUSO2:' , CLRG(REG) , UPYRCD(IYR))
!           VALUE = DBLE(TBTU_SHR_BY_CLRG(REG,PLT,1))
            VALUE = DBLE(TSO2_SHR_BY_CLRG(REG,1))
            VALUE = EMIS * VALUE
            IF (VALUE .GT. ECP_MIN) THEN
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_maskA,ROW_mask,'EPA$TRANRG_ECP,5')
            ENDIF
         END IF
      END IF
      IF (ITRAN .EQ. 2)THEN
         DO CRG = 1 , NDREG
            IF (TSO2_LIM_BY_CLRG(REG) .GT. 0.0)THEN
               ROW = 'EUSO2' // CLRG(CRG) // UPYRCD(IYR); call makmsk(ROW_mask,':EUSO2:' , CLRG(CRG) , UPYRCD(IYR))
!              VALUE = EMIS * TSO2_OSH_BY_CLRG(REG)
               VALUE = EMIS * TSO2_OSH_BY_OLCL(REG,CRG,1)
               IF (VALUE .GT. ECP_MIN) THEN
                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_maskA,ROW_mask,'EPA$TRANRG_ECP,6')
               ENDIF
            END IF
         END DO
      END IF

      RETURN
      END
!=============================================================================================================
!     SUBROUTINE ECP_AVG_HTRT Determines heatrate used by ECP dispatch routines

      SUBROUTINE ECP_AVG_HTRT(FROM_LABEL, EMM_RGN, FUEL_RGN, ECPt, XYR, AVG_HTRT, AVG_HTRT_MR, AVG_HTRT_MOD, AVG_HTRT_MR_MOD, ECP_GEN, ECP_GEN_MR, ECP_GEN_MOD, ECP_GEN_MR_MOD)

      IMPLICIT NONE

      include'parametr'
      include'emmparm'
      include'ncntrl'
      include'control'
      include'ecpcntl'
      include'entcntl'
      include'wrenew'
      include'wwdcomon'
      include'uefdout'
      include'elcntl'
      include'elout'
      include'bildin'

      REAL*8 AVG_HTRT(0:ECP_D_CAP),     AVG_HTRT_MR(0:ECP_D_CAP),     ECP_CAP(0:ECP_D_CAP),     ECP_CAP_MR(0:ECP_D_CAP),     ECP_GEN(0:ECP_D_CAP),     ECP_GEN_MR(0:ECP_D_CAP)
      REAL*8 AVG_HTRT_MOD(0:ECP_D_CAP), AVG_HTRT_MR_MOD(0:ECP_D_CAP), ECP_CAP_MOD(0:ECP_D_CAP), ECP_CAP_MR_MOD(0:ECP_D_CAP), ECP_GEN_MOD(0:ECP_D_CAP), ECP_GEN_MR_MOD(0:ECP_D_CAP)
    
      REAL*8 YRSPAN,YRDIFF

      INTEGER*4 EMM_RGN, FUEL_RGN, ECPt, I_ECP, ECP_GRP, XYR, ECP_TYPE, IGRP, CYR_INDEX, LYR_INDEX, S_FLRG, L_FLRG, I_FLRG ,YRADJ, GRP_ECP_TYPE, HTRT_QRT, INIT_GRP, TEST
      CHARACTER*12 FROM_LABEL

      AVG_HTRT = 0.0
      AVG_HTRT_MR = 0.0
      ECP_CAP = 0.0
      ECP_CAP_MR = 0.0
      ECP_GEN = 0.0
      ECP_GEN_MR = 0.0
      AVG_HTRT_MOD = 0.0
      AVG_HTRT_MR_MOD = 0.0
      ECP_CAP_MOD = 0.0
      ECP_CAP_MR_MOD = 0.0
      ECP_GEN_MOD = 0.0
      ECP_GEN_MR_MOD = 0.0

      ECP_GRP = UPTTYP(ECPt)

!     If heatrate overwrite switch is on use overwrite values
 
      IF (ECP_D_OVHR(ECPt) .GT. 0) THEN

         AVG_HTRT(ECPt) = UPOVHR(ECPt,MIN(MNUMYR,CURIYR+XYR))
         AVG_HTRT(0) = UPOVHR(ECPt,MIN(MNUMYR,CURIYR+XYR))
         AVG_HTRT_MR(ECPt) = UPOVHR(ECPt,MIN(MNUMYR,CURIYR+XYR))
         AVG_HTRT_MR(0) = UPOVHR(ECPt,MIN(MNUMYR,CURIYR+XYR))
         AVG_HTRT_MOD(ECPt) = UPOVHR(ECPt,MIN(MNUMYR,CURIYR+XYR))
         AVG_HTRT_MOD(0) = UPOVHR(ECPt,MIN(MNUMYR,CURIYR+XYR))
         AVG_HTRT_MR_MOD(ECPt) = UPOVHR(ECPt,MIN(MNUMYR,CURIYR+XYR))
         AVG_HTRT_MR_MOD(0) = UPOVHR(ECPt,MIN(MNUMYR,CURIYR+XYR))

!     For Existing Only Plant Types Calaculate the Average Heatrattes

      ELSE IF (UPVTYP(ECPt) .EQ. 0) THEN

         IF (FUEL_RGN .EQ. 0) THEN
            S_FLRG = 0
            L_FLRG = UNFRGN
         ELSE
            S_FLRG = FUEL_RGN
            L_FLRG = FUEL_RGN
         END IF
         CYR_INDEX = (CURIYR + UHBSYR + XYR - 1) * 100
         IF (XYR .LT. UNXPH) THEN
            LYR_INDEX = (CURIYR + UHBSYR + XYR - 1) * 100 + 12
         ELSE
            LYR_INDEX = (CURIYR + UHBSYR + UNFPH - 1) * 100 + 12
         END IF
          
         DO IGRP = 1 , EMM_D_GRP
            I_ECP = ULECPT(IGRP)
            HTRT_QRT = ULHRQ(IGRP)
            INIT_GRP = ULIGRP(IGRP)
            IF (I_ECP .GT. 0) THEN
               GRP_ECP_TYPE = UPTTYP(I_ECP)
               IF (ECPt .EQ. WING .AND. GRP_ECP_TYPE .LE. EX_COAL) THEN
                  GRP_ECP_TYPE = ECP_GRP
               END IF
               IF (ECPt .EQ. WIA2 .AND. I_ECP .EQ. WIEC) THEN
                  GRP_ECP_TYPE = ECP_GRP
               END IF

!              IF (I_ECP .EQ. ECPt .AND. ULORGN(IGRP) .EQ. 1 .AND. EMM_RGN .EQ. 1) THEN
!                 WRITE(18,3390) CURIRUN, CURIYR+UHBSYR, CURIYR+UHBSYR+XYR-1, EMM_RGN, FUEL_RGN, ECPt, I_ECP, ECP_GRP, GRP_ECP_TYPE, IGRP, ULSINDX(IGRP), LYR_INDEX, ULRINDX(IGRP), CYR_INDEX, &
!                     ULMRUN(IGRP), UPLNTCD(ECPt), ULSCAP_ECP(IGRP,XYR), ULHTRT_ECP(IGRP,XYR), UECP_HTRT_ADJ(I_ECP), ULTGEN(IGRP), ULTGEN_ECP(IGRP,XYR)
!3390             FORMAT(1X,"HTRT0_UECP",15(":",I6),":",A2,5(":",F21.6))
!              END IF

               IF (GRP_ECP_TYPE .EQ. ECP_GRP .AND. ULORGN(IGRP) .EQ. EMM_RGN) THEN
                  IF (ULSINDX(IGRP) .LE. LYR_INDEX .AND. ULRINDX(IGRP) .GE. CYR_INDEX .AND. ULTGEN_ECP(IGRP,XYR) .GT. 0.0) THEN
                     DO I_FLRG = S_FLRG , L_FLRG
                        IF (I_FLRG .EQ. ULFRGN(IGRP)) THEN

!                          IF (HTRT_RESULTS(ULIGRP(IGRP)) .EQ. 0 .AND. CURIYR + 1989 .EQ. 2015) THEN
!                             WRITE(18,4390) CURIRUN, CURIYR+UHBSYR, CURIYR+UHBSYR+XYR-1, EMM_RGN, FUEL_RGN, ECPt, I_ECP, ECP_GRP, GRP_ECP_TYPE, IGRP, ULSINDX(IGRP), LYR_INDEX, ULRINDX(IGRP), CYR_INDEX, &
!                                ULMRUN(IGRP), UPLNTCD(ECPt), ULSCAP_ECP(IGRP,XYR), ULHTRT_ECP(IGRP,XYR), UECP_HTRT_ADJ(I_ECP), &
!                                ULTGEN(IGRP), ULTGEN_ECP(IGRP,XYR), HTRT_OVR_CST(ECPt), HTRT_FLOOR(ECPt), HTRT_REDUCTION(ECPt)
!4390                         FORMAT(1X,"HTRT1_UECP",15(":",I6),":",A2,8(":",F21.6))
!                          END IF

                           IF (ULMRUN(IGRP) .LT. CURIYR + UHBSYR + XYR - 1) THEN
                              ECP_CAP(I_ECP) = ECP_CAP(I_ECP) + ULSCAP_ECP(IGRP,XYR)
                              ECP_CAP(0) = ECP_CAP(0) + ULSCAP_ECP(IGRP,XYR)
                              AVG_HTRT(I_ECP) = AVG_HTRT(I_ECP) + ULTGEN_ECP(IGRP,XYR) * ULHTRT_ECP(IGRP,XYR) / UECP_HTRT_ADJ(I_ECP)
                              AVG_HTRT(0) = AVG_HTRT(0) + ULTGEN_ECP(IGRP,XYR) * ULHTRT_ECP(IGRP,XYR) / UECP_HTRT_ADJ(I_ECP)
                              ECP_GEN(I_ECP) = ECP_GEN(I_ECP) + ULTGEN_ECP(IGRP,XYR)
                              ECP_GEN(0) = ECP_GEN(0) + ULTGEN_ECP(IGRP,XYR)

                              IF (HTRT_RESULTS(INIT_GRP) .EQ. 0 .AND. HTRT_OVRQ(I_ECP,HTRT_QRT) .GT. 0.0) THEN
                                 ECP_CAP_MOD(I_ECP) = ECP_CAP_MOD(I_ECP) + ULSCAP_ECP(IGRP,XYR)
                                 ECP_CAP_MOD(0) = ECP_CAP_MOD(0) + ULSCAP_ECP(IGRP,XYR)
                                 AVG_HTRT_MOD(I_ECP) = AVG_HTRT_MOD(I_ECP) + MAX( HTRT_FLOOR(I_ECP) , ULHTRT_ECP(IGRP,XYR) * (1.0 - HTRT_REDUCTION(I_ECP)) ) * ULTGEN_ECP(IGRP,XYR) / UECP_HTRT_ADJ(I_ECP)
                                 AVG_HTRT_MOD(0) = AVG_HTRT_MOD(0) + MAX(HTRT_FLOOR(I_ECP) , ULHTRT_ECP(IGRP,XYR) * (1.0 - HTRT_REDUCTION(I_ECP))) * ULTGEN_ECP(IGRP,XYR) / UECP_HTRT_ADJ(I_ECP)
                                 ECP_GEN_MOD(I_ECP) = ECP_GEN_MOD(I_ECP) + ULTGEN_ECP(IGRP,XYR)
                                 ECP_GEN_MOD(0) = ECP_GEN_MOD(0) + ULTGEN_ECP(IGRP,XYR)
                              END IF
                           ELSE
                              ECP_CAP_MR(I_ECP) = ECP_CAP_MR(I_ECP) + ULSCAP_ECP(IGRP,XYR)
                              ECP_CAP_MR(0) = ECP_CAP_MR(0) + ULSCAP_ECP(IGRP,XYR)
                              AVG_HTRT_MR(I_ECP) = AVG_HTRT_MR(I_ECP) + ULTGEN_ECP(IGRP,XYR) * ULHTRT_ECP(IGRP,XYR) / UECP_HTRT_ADJ(I_ECP)
                              AVG_HTRT_MR(0) = AVG_HTRT_MR(0) + ULTGEN_ECP(IGRP,XYR) * ULHTRT_ECP(IGRP,XYR) / UECP_HTRT_ADJ(I_ECP)
                              ECP_GEN_MR(I_ECP) = ECP_GEN_MR(I_ECP) + ULTGEN_ECP(IGRP,XYR)
                              ECP_GEN_MR(0) = ECP_GEN_MR(0) + ULTGEN_ECP(IGRP,XYR)

                              IF (HTRT_RESULTS(INIT_GRP) .EQ. 0 .AND. HTRT_OVRQ(I_ECP,HTRT_QRT) .GT. 0.0) THEN
                                 ECP_CAP_MR_MOD(I_ECP) = ECP_CAP_MR_MOD(I_ECP) + ULSCAP_ECP(IGRP,XYR)
                                 ECP_CAP_MR_MOD(0) = ECP_CAP_MR_MOD(0) + ULSCAP_ECP(IGRP,XYR)
                                 AVG_HTRT_MR_MOD(I_ECP) = AVG_HTRT_MR_MOD(I_ECP) + MAX( HTRT_FLOOR(I_ECP) , ULHTRT_ECP(IGRP,XYR) * (1.0 - HTRT_REDUCTION(I_ECP)) ) * ULTGEN_ECP(IGRP,XYR) / UECP_HTRT_ADJ(I_ECP)
                                 AVG_HTRT_MR_MOD(0) = AVG_HTRT_MR_MOD(0) + MAX(HTRT_FLOOR(I_ECP) , ULHTRT_ECP(IGRP,XYR) * (1.0 - HTRT_REDUCTION(I_ECP))) * ULTGEN_ECP(IGRP,XYR) / UECP_HTRT_ADJ(I_ECP)
                                 ECP_GEN_MR_MOD(I_ECP) = ECP_GEN_MR_MOD(I_ECP) + ULTGEN_ECP(IGRP,XYR)
                                 ECP_GEN_MR_MOD(0) = ECP_GEN_MR_MOD(0) + ULTGEN_ECP(IGRP,XYR)
                              END IF
                           END IF
                        END IF
                     END DO
                  END IF
               END IF
            END IF
         END DO

         IF (ECP_GEN(0) .GT. 0.0) THEN
            AVG_HTRT(0) = AVG_HTRT(0) / ECP_GEN(0)
            TEST = 0
            DO I_ECP = 1 , ECP_D_CAP
               ECP_TYPE = UPTTYP(I_ECP)
               IF (ECPt .EQ. WING .AND. ECP_TYPE .LE. EX_COAL) THEN
                  ECP_TYPE = ECP_GRP
               END IF
               IF (ECP_TYPE .EQ. ECP_GRP) THEN
                  IF (ECP_GEN(I_ECP) .GT. 0.0) THEN
                     AVG_HTRT(I_ECP) = (AVG_HTRT(I_ECP) / ECP_GEN(I_ECP)) * UECP_HTRT_ADJ(I_ECP)
                     TEST = 1
                  ELSE IF (TEST .GT. 0) THEN
                     AVG_HTRT(I_ECP) = AVG_HTRT(0) * UECP_HTRT_ADJ(I_ECP)
                  END IF
               END IF
            END DO
         END IF

         IF (ECP_GEN_MR(0) .GT. 0.0) THEN
            AVG_HTRT_MR(0) = AVG_HTRT_MR(0) / ECP_GEN_MR(0)
            TEST = 0
            DO I_ECP = 1 , ECP_D_CAP
               ECP_TYPE = UPTTYP(I_ECP)
               IF (ECPt .EQ. WING .AND. ECP_TYPE .LE. EX_COAL) THEN
                  ECP_TYPE = ECP_GRP
               END IF
               IF (ECP_TYPE .EQ. ECP_GRP) THEN
                  IF (ECP_GEN_MR(I_ECP) .GT. 0.0) THEN
                     AVG_HTRT_MR(I_ECP) = (AVG_HTRT_MR(I_ECP) / ECP_GEN_MR(I_ECP)) * UECP_HTRT_ADJ(I_ECP)
                     TEST = 1
                  ELSE IF (TEST .GT. 0) THEN
                     AVG_HTRT_MR(I_ECP) = AVG_HTRT_MR(0) * UECP_HTRT_ADJ(I_ECP)
                  END IF
               END IF
            END DO
         END IF

         IF (ECP_GEN_MOD(0) .GT. 0.0) THEN
            AVG_HTRT_MOD(0) = AVG_HTRT_MOD(0) / ECP_GEN_MOD(0)
            TEST = 0
            DO I_ECP = 1 , ECP_D_CAP
               ECP_TYPE = UPTTYP(I_ECP)
               IF (ECPt .EQ. WING .AND. ECP_TYPE .LE. EX_COAL) THEN
                  ECP_TYPE = ECP_GRP
               END IF
               IF (ECP_TYPE .EQ. ECP_GRP) THEN
                  IF (ECP_GEN_MOD(I_ECP) .GT. 0.0) THEN
                     AVG_HTRT_MOD(I_ECP) = (AVG_HTRT_MOD(I_ECP) / ECP_GEN_MOD(I_ECP)) * UECP_HTRT_ADJ(I_ECP)
                     TEST = 1
                  ELSE IF (TEST .GT. 0) THEN
                     AVG_HTRT_MOD(I_ECP) = AVG_HTRT_MOD(0) * UECP_HTRT_ADJ(I_ECP)
                  END IF
               END IF
            END DO
         END IF

         IF (ECP_GEN_MR_MOD(0) .GT. 0.0) THEN
            AVG_HTRT_MR_MOD(0) = AVG_HTRT_MR_MOD(0) / ECP_GEN_MR_MOD(0)
            TEST = 0
            DO I_ECP = 1 , ECP_D_CAP
               ECP_TYPE = UPTTYP(I_ECP)
               IF (ECPt .EQ. WING .AND. ECP_TYPE .LE. EX_COAL) THEN
                  ECP_TYPE = ECP_GRP
               END IF
               IF (ECP_TYPE .EQ. ECP_GRP) THEN
                  IF (ECP_GEN_MR_MOD(I_ECP) .GT. 0.0) THEN
                     AVG_HTRT_MR_MOD(I_ECP) = (AVG_HTRT_MR_MOD(I_ECP) / ECP_GEN_MR_MOD(I_ECP)) * UECP_HTRT_ADJ(I_ECP)
                     TEST = 1
                  ELSE IF (TEST .GT. 0) THEN
                     AVG_HTRT_MR_MOD(I_ECP) = AVG_HTRT_MR_MOD(0) * UECP_HTRT_ADJ(I_ECP)
                  END IF
               END IF
            END DO
         END IF

!     For Biomass Units use heatrate determined by the renewable module - changing to use UPHTRT instead

!      ELSE IF (ECPt .EQ. WIWD .OR. ECPt .EQ. WIBI) THEN
!         AVG_HTRT(ECPt) = WHRIGCC(MIN(CURIYR + XYR - 1 , UNYEAR))
!         AVG_HTRT(0) = WHRIGCC(MIN(CURIYR + XYR - 1 , UNYEAR))
!         AVG_HTRT_MR(ECPt) = WHRIGCC(MIN(CURIYR + XYR - 1 , UNYEAR))
!         AVG_HTRT_MR(0) = WHRIGCC(MIN(CURIYR + XYR - 1 , UNYEAR))

!     For New Dispatchable with heatrate learning determine heatrate for current planning year

      ELSE IF (ECPt .LE. ECP_D_DSP) THEN
         IF (ECP_D_LFHR .GT. 0 .AND. UPDHRSW(ECPt) .GT. 1) THEN

            YRADJ = UPPLYR(ECPt)
            IF (CURIYR + UHBSYR + YRADJ .LE. UPDHRY0(ECPt)) THEN

               AVG_HTRT(ECPt) = UPPHRT0(ECPt)

            ELSE IF (CURIYR + UHBSYR + YRADJ .LE. UPDHRYN(ECPt)) THEN
               YRDIFF = DBLE((CURIYR + UHBSYR + YRADJ) - UPDHRY0(ECPt))
               YRSPAN = DBLE(UPDHRYN(ECPt) - UPDHRY0(ECPt))

               AVG_HTRT(ECPt) = UPPHRT0(ECPt) + ((UPPHRTN(ECPt) - UPPHRT0(ECPt)) * YRDIFF / YRSPAN)

            ELSE
               AVG_HTRT(ECPt) = UPPHRTN(ECPt)
            END IF

         ELSE
            AVG_HTRT(ECPt) = UPHTRT(ECPt)
         END IF
         AVG_HTRT(0) = AVG_HTRT(ECPt)
         IF (ECPt .EQ. WIFC .AND. EPECAP_MR(FUEL_RGN,ECPt,XYR) .GT. 0.0) THEN   ! existing fuel cell is must-run
           AVG_HTRT_MR(ECPt) = AVG_HTRT(ECPt) 
           AVG_HTRT_MR(0) = AVG_HTRT(ECPt)
         ELSE     ! most new DISP is not made must-run
           AVG_HTRT_MR(ECPt) = 0.0 
           AVG_HTRT_MR(0) = 0.0 
         ENDIF
!     For all other units use input heatrate - for renewables this has now been set to the historical average from the AER (EPHTRT_AER())

      ELSE
         AVG_HTRT(ECPt) = UPHTRT(ECPt)
         AVG_HTRT(0) = UPHTRT(ECPt)
         AVG_HTRT_MR(ECPt) = UPHTRT(ECPt)
         AVG_HTRT_MR(0) = UPHTRT(ECPt)
      END IF

!     IF (ECP_CAP(0) .GT. 0.0 .OR. ECP_CAP_MR(0) .GT. 0.0 .OR. UPVTYP(ECPt) .GT. 0) THEN

!      IF (FROM_LABEL .EQ. "EP_PM_LF" .AND. EMM_RGN .EQ. 3 .AND. FUEL_RGN .EQ. 5 .AND. ECPt .GE. 46 .AND. ECPt .LE. 49) THEN
!      IF (CURIYR.EQ.33 .or. curiyr.eq.36.or.curiyr.eq.41) then
!      WRITE(18,3391) FROM_LABEL, CURIRUN, CURIYR+UHBSYR, CURIYR+UHBSYR+XYR-1, EMM_RGN, FUEL_RGN, ECPt, ECP_GRP, UPLNTCD(ECPt), UPHTRT(ECPt), &
!            AVG_HTRT(0) * UECP_HTRT_ADJ(ECPt),     AVG_HTRT_MR(0) * UECP_HTRT_ADJ(ECPt),     ECP_CAP(0),     ECP_CAP_MR(0),     ECP_GEN(0),     ECP_GEN_MR(0), &
!            AVG_HTRT(ECPt), AVG_HTRT_MR(ECPt), ECP_CAP(ECPt),     ECP_CAP_MR(ECPt),     ECP_GEN(ECPt),     ECP_GEN_MR(ECPt), &
!            AVG_HTRT_MOD(0) * UECP_HTRT_ADJ(ECPt), AVG_HTRT_MR_MOD(0) * UECP_HTRT_ADJ(ECPt), ECP_CAP_MOD(0), ECP_CAP_MR_MOD(0), ECP_GEN_MOD(0), ECP_GEN_MR_MOD(0), &
!            AVG_HTRT_MOD(ECPt), AVG_HTRT_MR_MOD(ECPt), ECP_CAP_MOD(ECPt), ECP_CAP_MR_MOD(ECPt), ECP_GEN_MOD(ECPt), ECP_GEN_MR_MOD(ECPt), &
!            UECP_HTRT_ADJ(ECPt)
!      END IF

 3391 FORMAT(1X,"HTRT_UECP",":",A12,7(":",I6),":",A2,26(":",F21.6))

      RETURN
      END
      
      SUBROUTINE Read_CSV(funito2,DATA1)
      IMPLICIT NONE      
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      
      integer funito2
      character*264 textline
      Integer q1,q2,q3,Tlen,I
      Integer*4 YR, ETYP, ERGN, HR,MO,DY,SLV, STP
      Real*8 FVALUE,DATA1(2,MNUMNR,MaxPtypesP,MaxNumbinsP,12,3,24)
      
      FVALUE = 0.0
      DATA1 = 0.0
      
!     WRITE(18,2047)'debug reading dispatch' 
        
      read(funito2,'(a)',end=44) Textline      
   43 read(funito2,'(a)',end=44) Textline

         TLen=len_trim(TextLine)
         q1=1
         q2=1   
         q3=0
         DO I=1,TLen
            q2=q2+1
            if (textline(q2:q2).eq.',' .AND. q3.lt.8) then
               q3=q3+1
               if(q3.eq.1) then
                  read(Textline(q1:q2),'(i4)')  YR
               elseif(q3.eq.2) then
                  read(Textline(q1:q2),'(i4)')  ETYP
               elseif(q3.eq.3) then
                  read(Textline(q1:q2),'(i4)')  ERGN
               elseif(q3.eq.4) then
                  read(Textline(q1:q2),'(i4)')  STP
			   elseif(q3.eq.5) then
                  read(Textline(q1:q2),'(i4)')  MO
               elseif(q3.eq.6) then
                 read(Textline(q1:q2),'(i4)')  DY  
               elseif(q3.eq.7) then
                  read(Textline(q1:q2),'(i4)')  HR                      
               elseif(q3.eq.8) then
                  read(Textline(q1:q2),'(i4)')  SLV
                  read(Textline(q2+1:q2+10),'(F12.0)')  FVALUE
                  DATA1(SLV,ERGN,ETYP,STP,MO,DY,HR) = FVALUE
               endif
               q1=q2+1 
               q2=q1 
            endif          
         ENDDO

!        IF (CURCALYR .EQ. 2020) THEN
!           WRITE(18,2047)'debug dispatcha',YR,ETYP,ERGN,MO,DY,HR,SLV,DATA1(SLV,ERGN,ETYP,MO,DY,HR)               
!2047       Format(A16,7(",",I4),",",F12.3)  
!        END IF
      GOTO 43            
      44 continue 
      RETURN
      END       
       
      SUBROUTINE Read_CSV9(funito2,DATA1)
      IMPLICIT NONE      
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      
      integer funito2
      character*264 textline
      Integer q1,q2,q3,Tlen,I
      Integer*4 YR, ETYP, ERGN,PSTP, HR, MO, DY, SLV
      Real*8 FVALUE,DATA1(2,MNUMNR,MaxPtypesP,MaxNumbinsP,12,3,24)
      
      FVALUE = 0.0
      DATA1 = 0.0
      
!     WRITE(18,2047)'debug reading dispatch' 
        
      read(funito2,'(a)',end=44) Textline      
   43 read(funito2,'(a)',end=44) Textline

         TLen=len_trim(TextLine)
         q1=1
         q2=1   
         q3=0
         DO I=1,TLen
            q2=q2+1
            if (textline(q2:q2).eq.',' .AND. q3.lt.9) then
               q3=q3+1
               if(q3.eq.1) then
                  read(Textline(q1:q2),'(i4)')  YR
               elseif(q3.eq.2) then
                  read(Textline(q1:q2),'(i4)')  ETYP
               elseif(q3.eq.3) then
                  read(Textline(q1:q2),'(i4)')  ERGN
               elseif(q3.eq.4) then
                  read(Textline(q1:q2),'(i4)')  PSTP
               elseif(q3.eq.5) then
                  read(Textline(q1:q2),'(i4)')  MO
               elseif(q3.eq.6) then
                 read(Textline(q1:q2),'(i4)')  DY  
               elseif(q3.eq.7) then
                  read(Textline(q1:q2),'(i4)')  HR                      
               elseif(q3.eq.8) then
                  read(Textline(q1:q2),'(i4)')  SLV
                  read(Textline(q2+1:q2+10),'(F12.0)')  FVALUE
                  DATA1(SLV,ERGN,ETYP,PSTP,MO,DY,HR) = FVALUE
               endif
               q1=q2+1 
               q2=q1 
            endif          
         ENDDO

!        IF (CURCALYR .EQ. 2020) THEN
!           WRITE(18,2047)'debug dispatcha',YR,ETYP,ERGN,MO,DY,HR,SLV,DATA1(SLV,ERGN,ETYP,MO,DY,HR)               
!2047       Format(A16,7(",",I4),",",F12.3)  
!        END IF
      GOTO 43            
      44 continue 
      RETURN
      END       

      SUBROUTINE Read_CSV2(funito2,DATA2)
      IMPLICIT NONE      
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      
      integer funito2
      character*264 textline
      Integer q1,q2,q3,Tlen,I
      Integer*4 YR, ERGN, HR,MO,DY,SLV
      Real*8 FVALUE,DATA2(2,MNUMNR,12,3,24)
      
      FVALUE = 0.0
      DATA2 = 0.0
      
!          WRITE(18,2047)'debug reading dispatch' 
        
            read(funito2,'(a)',end=44) Textline      
            43 read(funito2,'(a)',end=44) Textline
!            write(18,'(a)') trim(Textline)
            TLen=len_trim(TextLine)
            q1=1
            q2=1   
            q3=0
            DO I=1,TLen
                q2=q2+1
                if (textline(q2:q2).eq.',' .AND. q3.lt.7) then
                   q3=q3+1
                   if(q3.eq.1) then
                     read(Textline(q1:q2),'(i4)')  YR
                   elseif(q3.eq.2) then
                     read(Textline(q1:q2),'(i4)')  ERGN
                   elseif(q3.eq.3) then
                     read(Textline(q1:q2),'(i4)')  MO
                   elseif(q3.eq.4) then
                     read(Textline(q1:q2),'(i4)')  DY 
                   elseif(q3.eq.5) then
                     read(Textline(q1:q2),'(i4)')  HR                      
                   elseif(q3.eq.6) then
                     read(Textline(q1:q2),'(i4)')  SLV
                     read(Textline(q2+1:q2+10),'(F12.0)')  FVALUE
                     DATA2(SLV,ERGN,MO,DY,HR) = FVALUE
!                     WRITE(18,2047)'debug dispatcha',YR,ERGN,ETYP,MO,DY,HR,SLV,DATA2(SLV,ERGN,MO,DY,HR)               
                   endif
                   q1=q2+1 
                   q2=q1 
                endif          
            ENDDO
      2047   Format(A25,1x,1x,7(I4,1x),F12.3)  
                  GOTO 43            
       44 continue   
      
      
      RETURN
      END

      SUBROUTINE Read_CSV3(funito2,DATA3)
      IMPLICIT NONE      
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      
      integer funito2
      character*264 textline
      Integer q1,q2,q3,Tlen,I
      Integer*4 YR, ETYP, ERGN, HR,MO,DY,STP
      Real*8 FVALUE,DATA3(2,MNUMNR,MaxPtypesP,12,3,24)
      Character*10 StoType
      FVALUE = 0.0
      DATA3 = 0.0
      
!          WRITE(18,2047)'debug reading dispatch' 
        
            read(funito2,'(a)',end=44) Textline      
            43 read(funito2,'(a)',end=44) Textline
!            write(18,'(a)') trim(Textline)
            TLen=len_trim(TextLine)
            q1=1
            q2=1   
            q3=0
            DO I=1,TLen
                q2=q2+1
                if (textline(q2:q2).eq.',' .AND. q3.lt.9) then
                   q3=q3+1
                   if(q3.eq.1) then
                     read(Textline(q1:q2),'(i4)')  YR
                   elseif(q3.eq.2) then
                     read(Textline(q1:q2),'(i4)')  ETYP
                   elseif(q3.eq.3) then
                     read(Textline(q1:q2),'(i4)')  ERGN
                   elseif(q3.eq.4) then
                     read(Textline(q1:q2),'(i4)')  STP
                   elseif(q3.eq.5) then
                     read(Textline(q1:q2),'(i4)')  MO   
                   elseif(q3.eq.6) then
                     read(Textline(q1:q2),'(i4)')  DY   
                   elseif(q3.eq.7) then
                     read(Textline(q1:q2),'(i4)')  HR                       
                   elseif(q3.eq.8) then
                     read(Textline(q1:q2),'(A10)')  StoType
                     read(Textline(q2+1:q2+9),'(F9.0)')  FVALUE
                     DATA3(STP,ERGN,ETYP,MO,DY,HR) = DATA3(STP,ERGN,ETYP,MO,DY,HR) + FVALUE
!                    DATA3(STP,ERGN,ETYP,MO,DY,HR) = FVALUE
!                     WRITE(18,2047)'debug sto',YR,ERGN,ETYP,MO,DY,HR,DATA3(STP,ERGN,ETYP,MO,DY,HR),StoType,q1,q2,q3             
                   endif
                   q1=q2+1 
                   q2=q1 
                endif          
            ENDDO
      2047   Format(A25,1x,1x,6(I4,1x),F9.6,1x,A10,3(I4,1x))  
                  GOTO 43            
       44 continue        
      
      RETURN
      END
      
      SUBROUTINE Read_CSV4(funito2,DATA1)
      IMPLICIT NONE      
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      
      integer funito2
      character*264 textline
      Integer q1,q2,q3,Tlen,I
      Integer*4 YR, ETYP, ERGN, HR,MO,DY,SLV
      Real*8 FVALUE,DATA1(2,MNUMNR,ECP_D_CAP,12,3,24)
      
      FVALUE = 0.0
      DATA1 = 0.0
      
!     WRITE(18,2047)'debug reading dispatch' 
        
      read(funito2,'(a)',end=44) Textline      
   43 read(funito2,'(a)',end=44) Textline

         TLen=len_trim(TextLine)
         q1=1
         q2=1   
         q3=0
         DO I=1,TLen
            q2=q2+1
            if (textline(q2:q2).eq.',' .AND. q3.lt.8) then
               q3=q3+1
               if(q3.eq.1) then
                  read(Textline(q1:q2),'(i4)')  YR
               elseif(q3.eq.2) then
                  read(Textline(q1:q2),'(i4)')  ETYP
               elseif(q3.eq.3) then
                  read(Textline(q1:q2),'(i4)')  ERGN
               elseif(q3.eq.4) then
                  read(Textline(q1:q2),'(i4)')  SLV
               elseif(q3.eq.5) then
                 read(Textline(q1:q2),'(i4)')  MO  
               elseif(q3.eq.6) then
                  read(Textline(q1:q2),'(i4)')  DY                      
               elseif(q3.eq.7) then
                  read(Textline(q1:q2),'(i4)')  HR
                  read(Textline(q2+1:q2+10),'(F12.0)')  FVALUE
                  DATA1(SLV,ERGN,ETYP,MO,DY,HR) = FVALUE
               endif
               q1=q2+1 
               q2=q1 
            endif          
         ENDDO

         IF (CURCALYR .EQ. 2020) THEN
            WRITE(18,2047)'debug dispatcha',YR,ETYP,ERGN,MO,DY,HR,SLV,DATA1(SLV,ERGN,ETYP,MO,DY,HR)               
 2047       Format(A16,7(",",I4),",",F12.3)  
         END IF
      GOTO 43            
      44 continue 
      RETURN
      END   
	  
      !Used for reading in restore available battery spinning reserve
      SUBROUTINE Read_CSV5(funito2,DATA1,MAX_GP,MAX_SL)
      IMPLICIT NONE      
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      
      integer funito2
      character*264 textline
      Integer q1,q2,q3,Tlen,I
      Integer*4 YR, ETYP, ERGN, SLV, GP,SL, MAX_SL, MAX_GP
      Real*8 FVALUE,DATA1(2,MNUMNR,ECP_D_CAP,MAX_GP,MAX_SL)
      
      FVALUE = 0.0
      DATA1 = 0.0
      
!     WRITE(18,2047)'debug reading storsr' 
        
      read(funito2,'(a)',end=44) Textline      
   43 read(funito2,'(a)',end=44) Textline

         TLen=len_trim(TextLine)
         q1=1
         q2=1   
         q3=0
         DO I=1,TLen
            q2=q2+1
            if (textline(q2:q2).eq.',' .AND. q3.lt.7) then
               q3=q3+1
               if(q3.eq.1) then
                  read(Textline(q1:q2),'(i4)')  YR
               elseif(q3.eq.2) then
                  read(Textline(q1:q2),'(i4)')  ETYP
               elseif(q3.eq.3) then
                  read(Textline(q1:q2),'(i4)')  ERGN
               elseif(q3.eq.4) then
                  read(Textline(q1:q2),'(i4)')  SLV
               elseif(q3.eq.5) then
                 read(Textline(q1:q2),'(i4)')  GP                  
               elseif(q3.eq.6) then
                  read(Textline(q1:q2),'(i4)')  SL
                  read(Textline(q2+1:q2+10),'(F12.0)')  FVALUE
                  DATA1(SLV,ERGN,ETYP,GP,SL) = FVALUE
               endif
               q1=q2+1 
               q2=q1 
            endif          
         ENDDO

!         IF (CURCALYR .EQ. 2021) THEN
!            WRITE(18,2046)'debug storsr',YR,ETYP,ERGN,SLV,GP,SL,DATA1(SLV,ERGN,ETYP,GP,SL)          
! 2046       Format(A16,6(",",I4),",",F12.3)  
!         END IF
      GOTO 43            
      44 continue 
      RETURN
      END       

      SUBROUTINE CALC_STORAGE_VAL(funito)

      use ecp_row_col
      use hourly_restore_data
!
!     THIS SUBROUTINE CALCULATES THE REVENUE OF BATTERY STORAGE FROM
!     LOAD SHIFTING FROM EXPENSIVE HOURS TO CHEAPER HOURS
!
      IMPLICIT NONE
!
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'ecp_nuc'
      include 'bildin'
      include 'dispin'
      include 'dispett'
      include 'macout'
      include 'wrenew'
      include 'emoblk'
      include 'emission'
      include 'cdsparms'
      include 'uso2grp'
      include 'eusprc'
      include 'edbdef'
      include 'coalemm'
      include 'csapr'
      include 'e111d'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'
      include 'entcntl'
      include 'enewtech'
      include 'bildout'
      include 'taxdat'
      include 'elcntl'
      include 'dispcrv'
      include 'uefdout'
	  include 'uecpout'
      include 'emm_aimms'

      REAL*8         SHOURS(ECP_D_VLS,MAXECPB)
      COMMON /ARB/ PT_OFFSET
      REAL*8         OFFSET(MNUMNR), PT_OFFSET(MNUMNR)
      REAL*8         Existing_Batt_Cap(MNUMNR,EFD_D_MSP), TOT_CAP(0:ECP_D_CAP,2,EFD_D_MSP,0:MNUMNR), TOT_CAP_ECP(0:ECP_D_CAP,2,0:MNUMNR), CF_INT
      REAL*8         BATTERY_CAP(MX_STO_INC), TMP_STORED !, BATTERY_USED(MX_STO_INC,MNUMNR) moved to emm_aimms
	  REAL*8		 PT_BATTERY_CAP
      
      REAL*8         temp_STORAGE_CST(EMM_D_GRP)                ! Temp variable to hold the sorted capacity array
      REAL*8         BM_FAC
            
      INTEGER*4      NLOOP, OPYR
      INTEGER*4      I,J,ISP,NERC,IGRP,m,d,h, JVLS, VLS, IECP, JSP, IDSP
      INTEGER*4      JVLS_CNT(MAXECPB), VLSMAP_ECP(ECP_D_VLS,ECP_D_MSP,MNUMNR,ECP_D_XPH), MAPVLS_ECP(ECP_D_VLS,MAXECPB,MNUMNR,ECP_D_XPH), YEAR, TOTHRS
      INTEGER*4      srtIDX(EMM_D_GRP,EFD_D_MSP), tempIDX(EMM_D_GRP), sequentialIDX(EMM_D_GRP)

      REAL*8         VALUE, OBJVAL, DSCTMP, GNP(ECP_D_FPH), VALUE_SR
      INTEGER*4      JYR, OLYR, IOWN, IS, ISTP, GRP, ISEG, INT, ECPt, I_STO_INC, J_STO_INC, K_STO_INC
      CHARACTER*1    SSTEP(ECP_D_FPP)
      CHARACTER*4    CYEAR
      CHARACTER*16   COLUMN, ROW, ROW_SR
      
      REAL*8 CRF,PWF,PVV
      REAL*8 OVRCST,TXBOOK,FNBOOK,URATIO,CAPUNSTL,CAPUTIL,CAPNUG
      REAL*8 PRATIO,TRANS,CAPNNSTL
      REAL*4 DEBT_F,UTINT,UTROE,EWGROE,EWGINT,EWGROR,UTROR
      INTEGER*4 IFPH2, ICP, KYR, ZYR, STO
      REAL*8 DIGITS2
      REAL*8 PV$FOM,PV$TOM,FOM(ECP_D_FPH),TOM(ECP_D_FPH),PV$VOM,VOM(ECP_D_FPH),PV$SOM,PV$SOML
      REAL*8 PV$ARB, ARB(ECP_D_FPH)
      REAL*8 PV$GPS,GPS(ECP_D_FPH)
      REAL*8 PV$FOML,FOML(ECP_D_FPH)
      REAL*8 PV$EXT,EXTR(ECP_D_FPH)
      REAL*8 PV$EXTL,EXTL(ECP_D_FPH)
      REAL*8 PVGNP,PVGNPR,CAPLEV
      REAL*8 PV$VOML,VOML(ECP_D_FPH)
      REAL*8 T_CRF,T_PWF
      REAL*4 CPR(ECP_D_LCP)
      REAL*8 ANNRTE,ANNADJ,ANN(ECP_D_FPH),AN1(ECP_D_FPH)

      INTEGER*4 M864_TYP, ECP_SP, ECP_GP, ECP_SL9, ECP_SL, EFD_SP, EFD_SL, EFD_GP, IYR, INUC, IFOSBS, I_864
      REAL*8 HY_HR_ECP(ECP_D_SSZ,ECP_D_STP,MNUMNR) 
      REAL*8 HY_HR_ECP_DPV(ECP_D_SSZ,ECP_D_STP,MNUMNR) 
      REAL*8 HY_HR_ECP2(ECP_D_SSZ,ECP_D_STP,MNUMNR) 
      REAL*8 HY_HR_EFD(2,EFD_D_MVS,ELD_D_DAY,MNUMNR), M864_SR_MAX_LF(ECP_D_CAP),STOCAPECP(ECP_D_CAP),STOCAPSTO(ECP_D_CAP),TMP_MAXLF(ECP_D_CAP)
      REAL*8 TMP_STORAGE_PROFIT(MX_STO_INC,MNUMNR,MNUMYR), TST_STORAGE, STO_IN_COST(MNUMNR),STO_IN_GEN(MNUMNR),STO_IN_GEN2(MNUMNR)
	  
	  COMMON /STOR_OUT/ PT_STO_OUT_CF2_AVG, STO_OUT_COST,STO_OUT_GEN,STO_OUT_COST2, PT_STO_OUT_COST,PT_STO_OUT_GEN,PT_STO_OUT_COST2,PT_STO_OUT_GEN2, &
			STO_OUT_CF, STO_OUT_CF2, PT_STO_OUT_CF, PT_STO_OUT_CF2, &
			PT_STO_IN_COST,PT_STO_IN_GEN,PT_STO_IN_COST2,PT_STO_IN_GEN2
			
	  REAL*8 STO_OUT_COST(MNUMNR),STO_OUT_GEN(MNUMNR),STO_OUT_COST2(MNUMNR),PT_STO_OUT_COST(MNUMNR),PT_STO_OUT_GEN(MNUMNR),PT_STO_OUT_COST2(MNUMNR),PT_STO_OUT_GEN2(MNUMNR)
	  REAL*8 PT_STO_OUT_CF2_AVG(MNUMNR), STO_OUT_CF(ECP_D_SSZ,ECP_D_STP,MNUMNR),STO_OUT_CF2(ECP_D_SSZ,ECP_D_STP,MNUMNR), STO_IN_CF(ECP_D_SSZ,ECP_D_STP,MNUMNR), STO_IN_CF2(ECP_D_SSZ,ECP_D_STP,MNUMNR)
	  REAL*8 PT_STO_OUT_CF(ECP_D_SSZ,ECP_D_STP,MNUMNR),PT_STO_OUT_CF2(ECP_D_SSZ,ECP_D_STP,MNUMNR), PT_STO_IN_CF(ECP_D_SSZ,ECP_D_STP,MNUMNR), PT_STO_IN_CF2(ECP_D_SSZ,ECP_D_STP,MNUMNR)
	  REAL*8 PT_STO_IN_COST(MNUMNR),PT_STO_IN_GEN(MNUMNR),PT_STO_IN_COST2(MNUMNR),PT_STO_IN_GEN2(MNUMNR)
	  
            
	  REAL*8 TMP_PT_STORAGE_PROFIT(MX_STO_INC,MNUMNR,MNUMYR)
      INTEGER*4  CPU_TIME_BEGIN,CPU_TIME_END
      INTEGER*4  WALL_TIME_BEGIN,WALL_TIME_END, CPUBEG2, CPUEND2
      REAL*8 NUC_HR_EFD(EFD_D_SSZ,ELD_D_DAY,MNUMNR),FOS_HR_EFD(EFD_D_SSZ,ELD_D_DAY,MNUMNR)
      REAL*8 NUC_HR_ECP(ECP_D_SSZ,ECP_D_STP,MNUMNR),FOS_HR_ECP(ECP_D_SSZ,ECP_D_STP,MNUMNR)


      COMMON /MAX_LOADS/ MAX_LOAD
      REAL*8 MAX_LOAD(MNUMNR)
      REAL*8 MAX_PERCENT(MNUMYR)
      
        
      REAL*8  DPV_CF, UPV_CF, &
              DPV_CF_FRAC, UPV_CF_FRAC,  &
              DPV_CF_NEW, UPV_CF_NEW

      integer funito

! names of text files and unit numbers output by this routine
      character*80 putFileNameA, putFileNameD, putFileNameC, putFileNameM, putFileNameE, putFileNameZ, putFileNameR, putFileNameP, putFileNameV
      integer funitoA, funitoD, funitoC, funitoM, funitoE, funitoZ, funitoR, funitoP, funitoV

      Integer*4 ETYP, PSTP, ERGN, HR, MO, DY, STP, K, L, L2 , MONTHWT(MAXMON)
      Real*8 TMP_DISP,TMP_DISP_DPV,CURTAILS(2,MNUMNR,MaxPtypesP,MaxNumbinsP,12,3,24),MARGINALS(2,MNUMNR,12,3,24), &
          Maxp(MaxPtypesP),Minp(MaxPtypesP),Avgp(MaxPtypesP),TCAP(MaxPtypesP),SV_MaxP(MaxPtypesP),   &
          Binval(MaxPtypesP,MaxNumbinsP+1),Capbin(MaxPtypesP,MaxNumbinsP,EFD_D_MSP),pricebin(MaxPtypesP,MaxNumbinsP,EFD_D_MSP),PxC(MaxPtypesP,MaxNumbinsP,EFD_D_MSP)
      REAL*8 StoSR(2,MNUMNR,ECP_D_CAP,UTNGRP,UTNSEG)
      REAL*8 StoSR_ECP(2,MNUMNR,ECP_D_CAP,EPNGRP,UTNSEG)
	  REAL*8 PVBattClipping(2,MNUMNR,12,3,24)
      REAL*8 TEST_CAP, TEST_CST
      !REAL*8 StoLevel(2,MNUMNR,ECP_D_CAP,12,3,24)
      character(80) aimms32,aimms64,AIMMSLOC*66 
      character*500 cmdline
      character*125 args
      Integer iWaitMS,iRet
      Logical Istatus,lexist
      
      WRITE(CYEAR,'(I4)') CURIYR+UHBSYR
      call RTOSTRING('AIMMSLOC',AIMMSLOC) !  e.g., 'C:\AIMMS_Installation_Free_Releases\4.8.1.299-x64'
      aimms32 = trim(AIMMSLOC)//'\bin\aimms.exe'
      iWaitMS = 1000 * 60 * 70  !  milliseconds converting seconds to # of minutes (last multiplicand)      
      Istatus=.false.
      args=' '
      lexist=.true.
 
      MAX_PERCENT = 0.0
      MAX_PERCENT(2017-UHBSYR) = Battery_Initial_Percent
      DO IYR = (2018-UHBSYR) , MNUMYR
         MAX_PERCENT(IYR) = MIN(MAX_PERCENT(IYR-1) + Battery_Incremental_Percent  , Battery_Maximum_Percent)
      END DO

      CALL MPTIM2(CPU_TIME_BEGIN)
      WRITE (18,49) '** call and load ecpyear.txt ** ',FLOAT(CPU_TIME_BEGIN)/100.
   49 FORMAT(10X,A,' CPU TIME (SECONDS) = ',F7.2)
   
      write(putFileNameZ,'(".\rest\ECPYear.txt")')
      call unitunopened(100,999,FUNITOZ)    
      open(funitoZ,file=putFileNameZ,status='unknown',action='readwrite',buffered='YES')
      WRITE(funitoZ,'(a,I4,a)') 'Year:=data {',curcalyr,'};'
      close(funitoz)
      
      CALL MPTIM2(CPU_TIME_END)
      WRITE (18,49) '** done call and load ecpyear.txt ** ',FLOAT(CPU_TIME_END)/100.
      IF (CURITR.EQ.1) THEN
          WRITE(funito,8881) 'HourstoBuy :=',HourstoBuy,';' 
          WRITE(funito,8881) 'HourstoSell :=',HourstoSell,';'            
 8880    Format(A20,F8.2,A1)
 8881    Format(A20,I4,A1)

          WRITE(funito,9990) 'COMPOSITE TABLE:'
         WRITE(funito,7973)    'pt'  , '   BatteryEfficiency' 
 7973    Format(1x,A2,1x,A20)              

         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,2510) 'IRUN ', 'CYEAR', 'PType', '   BatteryEfficiency'
 2510       FORMAT(1X," ECPto864_BATT_EFF",3(",",A5),",",A20)
         END IF

         WRITE(FUNITO,7874)  '13', batteryEfficiency
          WRITE(FUNITO,7874)  '11', .83
		 WRITE(FUNITO,7874)  '21', .87
 7874    Format(1x,A2,1x,F20.2)          

         WRITE(UF_DBG,2511) CURIRUN, CURCALYR, 13, batteryEfficiency
         WRITE(UF_DBG,2511) CURIRUN, CURCALYR, 11, .83
		 WRITE(UF_DBG,2511) CURIRUN, CURCALYR, 21, .87
 2511    FORMAT(1X," ECPto864_BATT_EFF",3(",",I5),",",F20.2)

         WRITE(funito,9990) ';'   

         WRITE(funito,9990) 'COMPOSITE TABLE:'
         WRITE(funito,9973)    'year', 'r', 'pt', '    BatteryIncrement'
 9973    Format(1x,A4,1x,A2,1x,A2,1x,A20)              

         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,9510) 'IRUN ', 'CYEAR', 'ERGN ', 'PType', '    BatteryIncrement', '          MAX_PERENT', '            MAX_LOAD'
 9510       FORMAT(1X," ECPto864_BATT_INC",4(",",A5),3(",",A20))
         END IF

         DO ERGN = 1, UNRGNS
            WRITE(FUNITO,9874)  CURIYR+UHBSYR, ERGN, '13', MAX_LOAD(ERGN) * MAX_PERCENT(CURIYR)
 9874       Format(1x,I4,1x,I2,1x,A2,1x,F20.3)

            WRITE(UF_DBG,9511) CURIRUN, CURCALYR, ERGN, 13, MAX_LOAD(ERGN) * MAX_PERCENT(CURIYR), MAX_PERCENT(CURIYR), MAX_LOAD(ERGN)
 9511       FORMAT(1X," ECPto864_BATT_INC",4(",",I5),3(",",F20.6))
         END DO

          WRITE(funito,9990) ';'   
          
          STOCAPECP = 0.0
          STOCAPSTO = 0.0
          DO I = 1, EMM_D_GRP
             IF (STORAGE_ECPn(I) .GT. 0) THEN
                STOCAPECP(STORAGE_ECPn(I)) = STOCAPECP(STORAGE_ECPn(I)) + STORAGE_CAP(I,1)
                STOCAPSTO(UCPVSTOR(STORAGE_ECPn(I))) = STOCAPSTO(UCPVSTOR(STORAGE_ECPn(I))) + STORAGE_CAP(I,1)
             ENDIF
          ENDDO
          write(18,'(A,<ECP_D_CAP>(":",F10.4))') 'STOCAPECP',(STOCAPECP(I),I=1,ECP_D_CAP)
          write(18,'(A,<NumStoGrp>(":",F10.3))') 'STOCAPSTO',(STOCAPSTO(I),I=1,NumStoGrp)

          M864_SR_MAX_LF = 0.0
          DO IECP = 1 , ECP_D_CAP
             M864_SR_MAX_LF(UCPVSTOR(IECP)) = M864_SR_MAX_LF(UCPVSTOR(IECP)) + SR_MAX_LF(IECP)*STOCAPECP(IECP)
             TMP_MAXLF(UCPVSTOR(IECP)) = SR_MAX_LF(IECP)
          END DO

          DO I = 1, NumStoGrp
            IF (STOCAPSTO(I) .GT. 0.0) THEN
              M864_SR_MAX_LF(I) = M864_SR_MAX_LF(I) / STOCAPSTO(I)
            ELSE
              M864_SR_MAX_LF(I) = TMP_MAXLF(I)
            ENDIF
          ENDDO

          WRITE(funito,9990) 'COMPOSITE TABLE:'
          WRITE(funito,7976)    'pt'  , 'Steps', 'Map_PlantSteps' ,   'M864_LF'
 7976    Format(1x,A5,1x,A5,1x,A15,3x,A7) 

         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,2610) 'IRUN ', 'CYEAR', 'PType', 'Steps', 'Map_Stp', '             M864_LF'
 2610       FORMAT(1X," ECPto864_PlantSteps",4(",",A5),",",A7,",",A20)
         END IF
         

          Do I=1,NumStoGrp
            Do J=1,Num_Steps_per_Type(I)
              WRITE(FUNITO,7975) STO_CAP_INDX(I),J,"1"  ,       M864_SR_MAX_LF(I)
               
               WRITE(UF_DBG,2611) CURIRUN, CURCALYR, STO_CAP_INDX(I), J, 1, M864_SR_MAX_LF(I)
 2611          FORMAT(1X," ECPto864_PlantSteps",4(",",I5),",",I7,",",F20.6)

            Enddo
          Enddo
 7975    Format(1x,I5,1x,I5,1x,A15,3x,F7.3)          
          WRITE(funito,9990) ';'           
   
         WRITE(funito,8881) 'UNRGNS :=',UNRGNS,';'   
	   
	   !this is the switch that determines if you write an extra data file to be used for chart library. right now, we only need it for the first storage year and the last year (2050)
	   IF (CURCALYR .EQ. UPSTYR .OR. CURCALYR .EQ. LASTYR+UHBSYR) THEN
			WRITE(funito,8881) 'SW_OutputData :=1;'   
	   ELSE
			WRITE(funito,8881) 'SW_OutputData :=0;'   
	   ENDIF

          WRITE(funito,9990) 'COMPOSITE TABLE:'
          WRITE(funito,9991)    'r' , 's', 'pt', 'y' , 'steps' , 'SupplyCurve' ,   'SupplyPrice'                                  
 9990    Format(A16)
 9991    FORMAT(1X,5(" ",A6),2(" ",A15)) 

         IF (CURCALYR .EQ. UPSTYR) THEN
            WRITE(UF_DBG,2710) 'IRUN ', 'CYEAR', 'EMMrg', 'SEASN', 'PType', 'Steps', '        SupplyCapacity', '           SupplyPrice'
 2710       FORMAT(1X," ECPto864_SUPPLY_CURVE",6(",",A5),2(",",A22))
         END IF
 
      ENDIF
   
      ecpsub='CALC_STORAGE_VAL'

      DO IS = 1 , ECP_D_FPP
         SSTEP(IS) = UPRGCD(IS)
      END DO

      DO I = 1,EMM_D_GRP
         sequentialIDX(I) = I

         IF (STORAGE_ECPn(I) .EQ. 70 .AND. CURCALYR .EQ. 2018) THEN
            J = UCPINTIS(70)
            DO ISP = 1, EENSP
               WRITE(18,3887) CURIRUN, CURCALYR, CURITR, STORAGE_RGN(I), I, J, ISP, STORAGE_ECPn(I), STORAGE_GEN(I,ISP), STORAGE_CAP(I,ISP), STORAGE_CST(I,ISP), STO_CFefdSEA(J,ISP,STORAGE_RGN(I))
 3887          FORMAT(1X,"WIND_UNITS",8(":",I6),4(":",F16.6)) 
            END DO
         ENDIF                   
      END DO

!     Sort capacity by cost in each seasonal period and record the sorted index order

      DO ISP = 1, EFD_D_MSP 
      
         tempIDX(:) = sequentialIDX(:)
               
         temp_STORAGE_CST(:) = STORAGE_CST(:,ISP)
         CALL HEAPSORT(EMM_D_GRP,temp_STORAGE_CST,tempIDX)
         srtIDX(:,ISP) = tempIDX(:)
               
      END DO
      
!     Calculate current diurnal battery capacity by region and season 

      DO NERC = 1 , UNRGNS
         
         MaxP = 0.0
         MinP = 999999.0
         AvgP = 0.0
         TCAP = 0.0
 
         Capbin = 0.0
         PriceBin = 0.0
         Binval = 9999.0
         PxC = 0.0
         
         DO ISP = 1, EENSP
            DO I = 1 , EMM_D_GRP
               J = srtIDX(I,ISP)

!              If unit is in this region

               IF (STORAGE_RGN(J) .EQ. NERC .AND. STORAGE_CAP(J,ISP) .GT. 0.0) THEN
                  K = UCPVSTOR(STORAGE_ECPn(J))

                  IF (STORAGE_ECPn(J) .EQ. WIDS) THEN
                     Existing_Batt_Cap(NERC,ISP) = Existing_Batt_Cap(NERC,ISP) + STORAGE_CAP(J,ISP)
                     NET_STORAGE_CAP_EX(ISP,NERC,CURIYR) = NET_STORAGE_CAP_EX(ISP,NERC,CURIYR) + STORAGE_CAP(J,ISP)
                  ENDIF
                  
                  ! Set DPV and UPV prices so DPV is dispatched first
                  IF (STORAGE_ECPn(J) .EQ. WIPV .AND. STORAGE_CST(J,ISP) .EQ. 0.0) THEN
                    IF (ULMRUN(J) .EQ. 0) THEN
						STORAGE_CST(J,ISP) = 0.001
					ELSE
						STORAGE_CST(J,ISP) = 0.0001
                    ENDIF
                 ENDIF

!                 Write out the dispatch capacity

                  IF (CURCALYR .EQ. UPSTYR) THEN
                     WRITE(18,3883) CURIRUN, CURCALYR, CURITR, NERC, I, J, ISP, STORAGE_ECPn(J), STORAGE_GEN(J,ISP), STORAGE_CAP(J,ISP), STORAGE_CST(J,ISP)
 3883                FORMAT(1X,"SORTED_CAP",8(":",I6),3(":",F16.6)) 
                  ENDIF                   

                  IF (STORAGE_ECPn(J) .GT. 0 .AND. ISP .EQ. 1) THEN

                     IF (STORAGE_CST(J,ISP) .gt. MaxP(K)) MaxP(K) = STORAGE_CST(J,ISP)
                     IF (STORAGE_CST(J,ISP) .lt. MinP(K)) MinP(K) = STORAGE_CST(J,ISP)
                     TCAP(K) = TCAP(K) + STORAGE_CAP(J,ISP)
                     AvgP(K) = AvgP(K) + STORAGE_CAP(J,ISP) * STORAGE_CST(J,ISP)

!                    Write(18,2451)'dbg minmax', CURIRUN, CURCALYR, CURITR, NERC, I, J, ISP, K, STORAGE_ECPn(J), STORAGE_CST(J,ISP), MaxP(K), MinP(K)
!2451                Format(A25,9(",",I5),3(",",F20.7))     

                  ENDIF
               ENDIF
    
               IF (STORAGE_ECPn(J) .EQ. 0 .AND. ISP .EQ. 1 .AND. STORAGE_CAP(J,ISP) .GT. 0.0) &
                  WRITE(6,3874) I, J, STORAGE_RGN(J), CURCALYR,  ISP,  STORAGE_ECPn(J), STORAGE_CAP(J,ISP), STORAGE_CST(J,ISP)
 3874          FORMAT(1X,"BAD_STORAGE_REGION",6(",",I15),2(",",F20.6)) 
            END DO

            IF (ISP .EQ. 1) THEN
               Do K = 1, NumStoGrp
                  SV_MaxP(K) = MaxP(K)
                  IF (TCAP(K) .GT. 0.001) THEN
                     AvgP(K) = AvgP(K) / TCAP(K)
                     MaxP(K) = AvgP(K) + AvgP(K) - MinP(K)
                  END IF
               END DO
            END IF

            NET_STORAGE_CAP_EX(ISP,NERC,CURIYR) = MAX(NET_STORAGE_CAP_EX(ISP,NERC,CURIYR), 0.001)
            Existing_Batt_Cap(NERC,ISP) = MAX(Existing_Batt_Cap(NERC,ISP), 0.100)
         END DO

!        set bin breakpoints for the 23 groups

         Do I = 1, NumStoGrp
            binval(I,1) = 0.0
            L2 = Num_Steps_per_type(I)
            binval(I,L2+1) = 9999.0
                
            Write(18,2452) CURIRUN, CURCALYR, CURITR, NERC, I, 1, binval(I,1), Minp(I), Maxp(I), AvgP(I), TCAP(I), SV_MaxP(I), Num_Steps_per_type(I)
                   
            Do J = 1, Num_Steps_per_type(I)                         ! 1 or 3 or 10
               IF (Num_Steps_per_type(I) .gt. 1) THEN
                  binval(I,J) = Minp(I) + ((J-1) * (Maxp(I) - Minp(I)) / Num_Steps_per_type(I))
                   
                  Write(18,2452) CURIRUN, CURCALYR, CURITR, NERC, I, J, binval(I,J), Minp(I), Maxp(I), AvgP(I), TCAP(I), SV_MaxP(I), Num_Steps_per_type(I)
 2452             Format(1X,"DBG_BREAKPOINTS",6(",",I5),6(",",F20.7),",",I5)                   
                      
               Endif
            Enddo
                         
            Write(18,2452) CURIRUN, CURCALYR, CURITR, NERC, I, J, binval(I,J), Minp(I), Maxp(I), AvgP(I), TCAP(I), SV_MaxP(I), Num_Steps_per_type(I)
                         
         Enddo
 
!        sum capacity and average prices by bin
 
         Do I = 1, EMM_D_GRP
            ISP = 1
            TEST_CAP = 0.0
            TEST_CST = 0.0
            DO JSP = 1 , EENSP
               TEST_CAP = TEST_CAP + STORAGE_CAP(I,JSP)
               IF (STORAGE_CAP(I,JSP) .GT. 0.0) THEN
                  TEST_CST = MAX(TEST_CST , STORAGE_CST(I,JSP))
               END IF
            END DO
            IF (STORAGE_RGN(I) .EQ. NERC .AND. TEST_CAP .GT. 0.0) THEN
               K = UCPVSTOR(STORAGE_ECPn(I)) !1 to 23
               NLOOP = Num_Steps_per_type(K) 
               IF (K .EQ. 10 .OR. K .EQ. 13) NLOOP = 1
               Do L = 1, NLOOP
                  IF (NLOOP .gt. 1) THEN  ! 1 or 3 or 10
                     L2 = L
                  ELSE
                     L2 = 1
                     binval(K,L2) = 0.0
                     binval(K,L2+1) = 9999.0
                  ENDIF
                  IF (TEST_CST .ge. binval(K,L2) .and. TEST_CST .lt. binval(K,L2+1)) THEN
                     DO JSP = 1 , EENSP
                        Capbin(K,L2,JSP) = Capbin(K,L2,JSP) + STORAGE_CAP(I,JSP)
                        PxC(K,L2,JSP) = PxC(K,L2,JSP) + (STORAGE_CST(I,JSP) * STORAGE_CAP(I,JSP))
                        pricebin(K,L2,JSP) = PxC(K,L2,JSP) / Capbin(K,L2,JSP)
                     END DO
                  ENDIF

                  IF (CURCALYR .EQ. UPSTYR) THEN
                     DO JSP = 1 , EENSP
                        Write(18,2453)'dbgbins2',   CURIRUN, CURCALYR, CURITR, NERC, I, JSP, K, L2, STORAGE_CAP(I,JSP), STORAGE_CST(I,JSP), &
                           Capbin(K,L,JSP), pricebin(K,L,JSP) ,PxC(K,L,JSP), binval(K,L),  binval(K,L+1)           
 2453                   Format(A25,8(","I5),7(",",F20.7)) 
                     ENDDO 
                  END IF
               ENDDO 
            ENDIF                   
         ENDDO 
 
         IF (CURITR.EQ.1) THEN 
            DO ISP = 1 , EENSP                  
               Do I=1,NumStoGrp
                     ! switch PV and DPV bins to make it easier to deal with in RESTORE
                      IF ((I .EQ. 20) .AND. (Num_Steps_per_type(I) .GT. 1)) THEN
                              TEST_CST =  pricebin(I,1,ISP)
                              TEST_CAP = Capbin(I,1,ISP)
                              pricebin(I,1,ISP) = pricebin(I,2,ISP)
                              Capbin(I,1,ISP) = Capbin(I,2,ISP)
                              pricebin(I,2,ISP) = TEST_CST
                              Capbin(I,2,ISP) = TEST_CAP
                      END IF
                  Do J=1,MaxNumbins

!                    For diurnal storage make sure that there is at least a little bit of existing capacity in order to pass a VOM to new battery increment
                      
                     IF (I .EQ. 13 .AND. J .EQ. 1) THEN
                        Capbin(I,J,ISP) = MAX(Capbin(I,J,ISP) , 0.0001)
                        pricebin(I,J,ISP) = EPVOM(WIDS)
                     END IF
                      
                     IF (Capbin(I,J,ISP) .GT. 0.0) THEN
                   
                        Write(FUNITO,2454) NERC, ISP, I, CURCALYR, J, Capbin(I,J,ISP), pricebin(I,J,ISP)
 2454                    Format(1x,5(1x,I6),2(1x,F15.7))  
                        
                        ! Used to compute electrolyzer load lmits for HMM
                        ! Region, Season, RestoreTech, Steps
                        supplytorestore(nerc,isp,i,j) = Capbin(I,J,ISP)
                        pricetorestore(nerc,isp,i,j) = pricebin(I,J,ISP)
                        
                        WRITE(UF_DBG,2711) CURIRUN, CURCALYR, NERC, ISP, I, J, Capbin(I,J,ISP), pricebin(I,J,ISP)
 2711                   FORMAT(1X," ECPto864_SUPPLY_CURVE",6(",",I5),2(",",F22.7))
                   
                     END IF
                  Enddo
               Enddo
            ENDDO
         ENDIF
                
      END DO

      IF (CURITR.EQ.1) THEN           
         WRITE(funito,9990) ';'
         close(funito)
      ENDIF                   
                              
!!      CALL MPTIM2(CPU_TIME_BEGIN)
!!      WRITE (18,49) '** call put restore.zip in run folder and unzip** ',FLOAT(CPU_TIME_BEGIN)/100.       
!!       
!     Copy ReStore.zip to run directory - better to put it in the NEMS file management system
!!
!!      IF (CURIRUN.EQ.1.AND.(CURCALYR).EQ.UPSTYR.AND.CURITR.EQ.1) THEN
!!         cmdline='cp M:\rec\dgr\aeo2018\renew_storage\input\ReStore.zip .'
!!        call OSCall(iwaitMS,cmdline,args,iRet)
!!        If (iret.eq.1) Istatus=.true.
!!        Write(18,'(A,I4,2x,L)')'Restore cp Istatus:  ',Iret,Istatus   
!!      
!!        Istatus=.false.        
!!
!!         cmdline='n:/default/aeo18/scripts/winrar.exe X -o+ ReStore.zip'
!!
!!        call OSCall(iwaitMS,cmdline,args,iRet)
!!        If (iret.eq.1) Istatus=.true.
!!        Write(18,'(A,I4,2x,L)')'Restore uncompress Istatus:  ',Iret,Istatus 
!!      ENDIF
                  
!!      CALL MPTIM2(CPU_TIME_END)
!!      WRITE (18,49) '** done put restore.zip in run folder and unzip** ',FLOAT(CPU_TIME_END)/100.
                  
      CALL MPTIM2(CPU_TIME_BEGIN)
      WRITE (18,49) '** call AIMMS Restore model** ',FLOAT(CPU_TIME_BEGIN)/100.       
                
      CALL MPTIM3(CPUBEG2,WALL_TIME_BEGIN)
                
!     Call the ReStore Model
      Istatus=.false. 
      Iret=0
      CALL AIMMS_ReStore(iret)

      CALL MPTIM3(CPUEND2,WALL_TIME_END)

      CALL MPTIM2(CPU_TIME_END)
      WRITE (18,749) '** done AIMMS Restore model** ',FLOAT(CPU_TIME_END)/100.0, FLOAT(CPUEND2-CPUBEG2)/100.0
  749 FORMAT(10X,A,' CPU TIME (SECONDS) = ',F7.2,' ELAPSED WALL TIME',F7.2)
             
!     Initialize CURTAIL
    CURTAILSUB(:,:,:,CURIYR) = 0.0
      CURTAIL(:,:,CURIYR) = 0.0
	TOT_GEN_RES(:,:,:,CURIYR) = 0.0

!     Read in Results from AIMMS ReStore model

       CALL MPTIM2(CPU_TIME_BEGIN)
       WRITE (18,49) '** call read results from AIMMS model ** ',FLOAT(CPU_TIME_BEGIN)/100.       

!      write(putFileNameD,'(a,i4,a,a)') '.\EMM_ValSto\FR864_dispatch_',curcalyr,'.csv'
                
      write(putFileNameD,'(a,i4,a,a)') '.\rest\fromAIMMS\output_'//CYEAR//'\Rep_Generation.csv'
      call unitunopened(100,999,FUNITOD)    
      open(funitoD,file=putFileNameD,status='unknown',buffered='YES')
      rewind funitoD    

      Call Read_CSV9(funitoD,Dispatch)

!     Do STP=1,2
!       DO ERGN = 1,MNUMNR
!           DO ETYP = 1, MaxPtypes
!              DO PSTP = 1 , Num_Steps_per_Type(ETYP)
!           DO MO=1,12
!             DO DY=1,3
!               DO HR = 1,24
!                          IF (Dispatch(STP,ERGN,ETYP,PSTP,MO,DY,HR) .GT. 0.0) WRITE(18,3047)'debug_dispatchfinal',curcalyr,STP,ERGN,ETYP,PSTP,MO,DY,HR, &
!                             Dispatch(STP,ERGN,ETYP,PSTP,MO,DY,HR)  
!               
!3047                      Format(1X,A25,8(",",I4),",",F21.6) 
!                       ENDDO
!               ENDDO
!             ENDDO
!           ENDDO
!         ENDDO
!       ENDDO  
!     ENDDO
      close(funitoD)

      write(putFileNameC,'(a,i4,a,a)') '.\EMM_VALSTO\FR864_curtails_',curcalyr,'.csv'
      write(putFileNameC,'(a,i4,a,a)') '.\rest\fromAIMMS\output_'//CYEAR//'\Rep_Curtailment.csv'
      call unitunopened(100,999,FUNITOC)    
      open(funitoC,file=putFileNameC,status='unknown',buffered='YES')
      rewind funitoC
      Call Read_CSV(funitoC,Curtails)
!     DO STP=1,2
!        DO ERGN = 1,MNUMNR
!           DO ETYP = 1,MaxPtypes
!              DO MO=1,12
!                 DO DY=1,3
!                    DO HR = 1,24
!                       IF (Curtails(STP,ERGN,ETYP,MO,DY,HR) .GT. 0.0) WRITE(18,2047)'debug_curtailsfinal',curcalyr,STP,ERGN,ETYP,MO,DY,HR,Curtails(STP,ERGN,ETYP,MO,DY,HR)   
!2047                   Format(1X,A25,7(",",I4),",",F21.6) 
!                    ENDDO
!                 ENDDO
!              ENDDO
!           ENDDO
!        ENDDO 
!     ENDDO
      close(funitoC)
      
!      write(putFileNameM,'(a,i4,a,a)') '.\EMM_VALSTO\FR864_marginals_',curcalyr,'.csv'
      write(putFileNameM,'(a,i4,a,a)') '.\rest\fromAIMMS\output_'//CYEAR//'\Rep_MarginalPrices.csv'
      call unitunopened(100,999,FUNITOM)    
      open(funitoM,file=putFileNameM,status='unknown',buffered='YES')
      rewind funitoM
      Call Read_CSV2(funitoM,Marginals)
!     DO STP=1,2
!       DO ERGN = 1,MNUMNR 
!           DO MO=1,12
!             DO DY=1,3
!               DO HR = 1,24
!                   IF (Marginals(STP,ERGN,MO,DY,HR) .GT. 0.0) WRITE(18,2046)'debug_marginalsfinal',curcalyr,STP,ERGN,MO,DY,HR,Marginals(STP,ERGN,MO,DY,HR)  
!2046                Format(1X,A25,6(",",I4),",",F12.6) 
!               ENDDO
!             ENDDO
!           ENDDO
!       ENDDO   
!     ENDDO
      close(funitoM)   

!     write(putFileNameE,'(a,i4,a,a)') '.\EMM_VALSTO\FR864_curtails_',curcalyr,'.csv'

      write(putFileNameE,'(a,i4,a,a)') '.\rest\fromAIMMS\output_'//CYEAR//'\Rep_Storage.csv'
      call unitunopened(100,999,funitoE)    
      open(funitoE,file=putFileNameE,status='unknown',buffered='YES')
      rewind funitoE
     Call Read_CSV3(funitoE,ExistSTo) 
        DO ERGN = 1,MNUMNR
         DO ETYP = 1,MaxPtypes
            DO STP=1,2
            DO MO=1,12
              DO DY=1,3
                DO HR = 1,24
!                   IF (ABS(ExistSto(STP,ERGN,ETYP,MO,DY,HR)) .GT. 0.0000000) WRITE(18,2047)'debug_existSTofinal',curcalyr,STP,ERGN,ETYP,MO,DY,HR,ExistSto(STP,ERGN,ETYP,MO,DY,HR)   

                        IF (ETYP .EQ. 13) THEN
                           IF (BATTERY_USED(STP,ERGN) .LT.  ExistSto(STP,ERGN,ETYP,MO,DY,HR)) THEN
                              BATTERY_USED(STP,ERGN) = ExistSto(STP,ERGN,ETYP,MO,DY,HR)
                           END IF
                     END IF                   

                   ENDDO    
                ENDDO
              ENDDO
            ENDDO
          ENDDO
        ENDDO    
      close(funitoE) 

      ENERGY_STORED = 0.0
!     write(putFileNameA,'(a,i4,a,a)') '.\864_DataOutput\864_output_'//CYEAR//'\Rep_StorageLevel.csv'
 
      write(putFileNameA,'(a,i4,a,a)') '.\rest\fromAIMMS\output_'//CYEAR//'\Rep_StorageLevel.csv'
      call unitunopened(100,999,funitoA)    
      open(funitoA,file=putFileNameA,status='unknown',buffered='YES')
      rewind funitoA
      Call Read_CSV4(funitoA,SToLevel) 
      
!      OPEN (UNIT = 98754, FILE = "STORAGE_LEVEL_RESULTS.TXT", STATUS='REPLACE')
      
      DO ERGN = 1,MNUMNR
         DO ETYP = 1,ECP_D_CAP
            DO STP=1,2
               DO MO=1,12
                  DO DY=1,3
                     DO HR = 1,24
!                       IF (ABS(StoLevel(STP,ERGN,ETYP,MO,DY,HR)) .GT. 0.0000000) WRITE(18,2047)'debug_StoLevelfinal',curcalyr,STP,ERGN,ETYP,MO,DY,HR,StoLevel(STP,ERGN,ETYP,MO,DY,HR)   
               
                        IF (ETYP .EQ. 13) THEN
                           TMP_STORED = StoLevel(STP,ERGN,ETYP,MO,DY,HR)
                           IF (TMP_STORED .GT. ENERGY_STORED(STP,ERGN)) THEN
                              ENERGY_STORED(STP,ERGN) = TMP_STORED 
                           END IF
                        END IF
                        
                        IF ( (STP .EQ. 1) .AND. ((ETYP .EQ. 13) .OR. (ETYP .EQ. 21) )) THEN
 !                           WRITE(98754, *) STP,ERGN,ETYP,MO,DY,HR,StoLevel(STP,ERGN,ETYP,MO,DY,HR), StoLevel(STP,ERGN,ETYP,MO,DY,HR)/ HoursToSell
                           ENERGY_STORED_HOURLY(ERGN,ETYP,MO,DY,HR) = StoLevel(STP,ERGN,ETYP,MO,DY,HR)/ HoursToSell
                        END IF
                     ENDDO
                  ENDDO
               ENDDO
            ENDDO
         ENDDO
         DO STP=1,2
            ENERGY_STORED(STP,ERGN) = ENERGY_STORED(STP,ERGN) / HoursToSell
         ENDDO
      ENDDO    
      close(funitoA) 
	  
	  write(putFileNameV,'(a,i4,a,a)') '.\rest\fromAIMMS\output_'//CYEAR//'\Rep_PVBattClipping.csv'
      call unitunopened(100,999,FUNITOV)    
      open(funitoV,file=putFileNameV,status='unknown',buffered='YES')
      rewind funitoV   
      Call Read_CSV2(funitoV,PVBattClipping)
	  close(funitoV)
      

	  !reading in EFD available battery spinning reserves. Aggregation was done in restore, so this is a fraction of capacity
      write(putFileNameR,'(a,i4,a,a)') '.\rest\fromAIMMS\output_'//CYEAR//'\Rep_Sto_sr_Slice_frac.csv'
      call unitunopened(100,999,funitoR)    
      open(funitoR,file=putFileNameR,status='unknown',buffered='YES')
      rewind funitoR
      Call Read_CSV5(funitoR,SToSR,UTNGRP,UTNSEG) 
      close(funitoR) 
      
	  !reading in ECP available battery spinning reserves. Aggregation was done in restore, so this is a fraction of capacity
      write(putFileNameP,'(a,i4,a,a)') '.\rest\fromAIMMS\output_'//CYEAR//'\Rep_Sto_sr_CPSlice_frac.csv'
      call unitunopened(100,999,funitoP)    
      open(funitoP,file=putFileNameP,status='unknown',buffered='YES')
      rewind funitoP
      Call Read_CSV5(funitoP,SToSR_ECP,EPNGRP,UTNSEG) !need to change UTNSEG eventually to match ECP
      close(funitoP) 

!      CLOSE(98754)
      
      CALL MPTIM2(CPU_TIME_END)
      WRITE (18,49) '** done read results from AIMMS model ** ',FLOAT(CPU_TIME_END)/100.       

!     Convert 864 Data to EFD and ECP Slice Inputs

      DO ERGN = 1, UNRGNS
         YEAR = 1
         JVLS_CNT = 0
         CALL GETBLD(1,ERGN)
         DO ISP = 1 , EPNMSP
            DO VLS = 1 , EPNSTP(YEAR)
               VLSMAP_ECP(VLS,ISP,ERGN,YEAR) = 0
            END DO
         END DO
         DO IGRP = 1 , EPNGRP
            DO VLS = 1 , EPNSTP(YEAR)
               MAPVLS_ECP(VLS,IGRP,ERGN,YEAR) = 0
            END DO
         END DO

!        DETERMINE CAPACITY FACTOR AT EACH LOAD STEP

         DO ISP = 1 , EPNMSP
            VLS = EPFRST(ISP,YEAR)
            DO WHILE (VLS .GT. 0)
               IGRP = EPLDGR(VLS,YEAR)
               JVLS_CNT(IGRP) = JVLS_CNT(IGRP) + 1
               VLSMAP_ECP(JVLS_CNT(IGRP),ISP,ERGN,YEAR) = VLS
               MAPVLS_ECP(VLS,IGRP,ERGN,YEAR) = JVLS_CNT(IGRP)

               WRITE(18,9119) CURIRUN, CURCALYR, ERGN, ISP, IGRP, JVLS_CNT(IGRP), VLS
 9119          FORMAT(1X,"ECP_LOAD_MAP",7(",",I4))
 
               VLS = EPNEXT(VLS,YEAR)
            END DO
         END DO
      END DO
 
      DO ERGN = 1, UNRGNS
         CALL GETIN(1,ERGN)
         DO IS = 1, EENSP
            DO ISTP = 1 , ELNVCT(IS)
               ISEG = ELSEG(ISTP,IS)
               GRP = ELGRP(ISTP,IS)

               IF (CURCALYR .LE. 2025) WRITE(18,9219) CURIRUN, CURCALYR, ERGN, IS, GRP, ISTP, ISEG
 9219          FORMAT(1X,"EFD_LOAD_MAP",7(":",I4))

            END DO
         END DO
      END DO

      TOT_CAP = 0.0
      TOT_CAP_ECP = 0.0
      DO I = 1 , EMM_D_GRP
         DO ISP = 1, EFD_D_MSP
            IF (STORAGE_CAP(I,ISP) .NE. 0.0) THEN
               ERGN = STORAGE_RGN(I)
               ETYP = STORAGE_ECPn(I)
               M864_TYP = UCPVSTOR(ETYP)
               ! DPV
               IF (ULMRUN(I) .GT. 0 .AND. ETYP .EQ. WIPV) THEN
                    TOT_CAP(M864_TYP,2,ISP,ERGN) = TOT_CAP(M864_TYP,2,ISP,ERGN) + STORAGE_CAP(I,ISP)
                    TOT_CAP_ECP(M864_TYP,2,ERGN) = TOT_CAP_ECP(M864_TYP,2,ERGN) + STORAGE_CAP(I,ISP) * (1.0 / DBLE(EENSP))
               ELSE
                    TOT_CAP(M864_TYP,1,ISP,ERGN) = TOT_CAP(M864_TYP,1,ISP,ERGN) + STORAGE_CAP(I,ISP)
                    TOT_CAP_ECP(M864_TYP,1,ERGN) = TOT_CAP_ECP(M864_TYP,1,ERGN) + STORAGE_CAP(I,ISP) * (1.0 / DBLE(EENSP))
               ENDIF
            END IF
         END DO
      END DO

!     Calculate Net Storage Value from ReStore Model Outputs

      NET_STORAGE_LOAD_EX(:,:,:,CURIYR) = 0.0
	  NET_PT_STORAGE_LOAD_EX(:,:,:,CURIYR) = 0.0
      NET_STORAGE_LOAD_EFD(:,:,:,CURIYR) = 0.0
      NET_STORAGE_SR_EX(:,:,:,CURIYR) = 0.0
      NET_PT_STORAGE_SR_EX(:,:,:,CURIYR) = 0.0
      NET_STORAGE_SR_EFD(:,:,:,CURIYR) = 0.0
      NET_PT_STORAGE_SR_EFD(:,:,:,CURIYR) = 0.0
      NET_STORAGE_LOAD_NW(:,:,:,CURIYR) = 0.0
      NET_STORAGE_SR_NW(:,:,:,CURIYR) = 0.0
      TMP_STORAGE_PROFIT(:,:,CURIYR)       = 0.0
	  TMP_PT_STORAGE_PROFIT(:,:,CURIYR)       = 0.0
	  DispatchTot(:,:,:,:,CURIYR)       = 0.0
	  ExistStoTot(:,:,:,:,CURIYR)       = 0.0
	  CurtailsTot(:,:,:,:,CURIYR)       = 0.0
	  HourlyLoadTot(:,:,:,CURIYR)       = 0.0
	  ElecPriceTot(:,:,:,CURIYR)        = 0.0
	  MONTHWT(:) = 0
      HY_HR_ECP = 0.0
      HY_HR_ECP2 = 0.0
      HY_HR_EFD = 0.0
      J_STO_INC = N_STO_INC + 1
      STO_IN_COST = 0.0
      STO_IN_GEN = 0.0
      STO_IN_COST2 = 0.0
	  STO_IN_GEN2 = 0.0
	  STO_OUT_COST = 0.0
      STO_OUT_GEN = 0.0
      STO_OUT_COST2 = 0.0
	  STO_OUT_GEN2 = 0.0
	  PT_STO_OUT_COST = 0.0
      PT_STO_OUT_GEN = 0.0
      PT_STO_OUT_COST2 = 0.0
	  PT_STO_OUT_GEN2 = 0.0
	  STO_IN_CF = 0.0
	  STO_IN_CF2 = 0.0
	  STO_OUT_CF = 0.0
	  STO_OUT_CF2 = 0.0
	  STO_OUT_CF2_AVG = 0.0
	  PT_STO_IN_CF = 0.0
	  PT_STO_IN_CF2 = 0.0
	  PT_STO_OUT_CF = 0.0
	  PT_STO_OUT_CF2 = 0.0
	  PT_STO_OUT_CF2_AVG = 0.0
	  PT_STO_IN_COST = 0.0
      PT_STO_IN_GEN = 0.0
      PT_STO_IN_COST2 = 0.0
	  PT_STO_IN_GEN2 = 0.0
	  
	  DO m = 1 , MAXMON
            DO d = 1 , MAXDTP
				MONTHWT(m) = MONTHWT(m) + IDAYTQ(d,m)
			ENDDO
	  ENDDO

      
      DO ERGN = 1, UNRGNS
         BATTERY_CAP(1) = TOT_CAP_ECP(13,1,ERGN)
         BATTERY_CAP_EX(ERGN) = TOT_CAP_ECP(13,1,ERGN)

         BATTERY_CAP(2) = MAX(ENERGY_STORED(2,ERGN), BATTERY_USED(2,ERGN))
         BATTERY_CAP(2) = MAX(0.001, BATTERY_CAP(2))

         DO m = 1 , MAXMON
            DO d = 1 , MAXDTP
               DO h = 1 , 24
                  ECP_SP = HRTOECPSEAS(m,d,h) 
                  ECP_GP = HRTOECPGRP(m,d,h) 
                  ECP_SL9 = HRTOECPSL(CURIYR,ERGN,m,d,h) 
                  ECP_SL = MAPVLS_ECP(ECP_SL9,ECP_GP,ERGN,YEAR)
               
                  EFD_SP = HRTOEFDSEAS(m,d,h) 
                  EFD_GP = HRTOEFDGP(m,d,h) 
                  EFD_SL = HRTOEFDSL(ERGN,m,d,h) 
				  
				  PT_BATTERY_CAP = TOT_CAP(21,1,ECP_SP,ERGN)
                  
                  TST_STORAGE = 0.0
                  DO I_STO_INC = 1, J_STO_INC
                     IF (BATTERY_CAP(I_STO_INC) .GT. 0.0001) THEN
                        TMP_STORAGE_PROFIT(I_STO_INC,ERGN,CURIYR) = TMP_STORAGE_PROFIT(I_STO_INC,ERGN,CURIYR) + &
                           (MARGINALS(I_STO_INC,ERGN,m,d,h) * EXISTSTO(I_STO_INC,ERGN,13,m,d,h) * IDAYTQ(d,m)) / BATTERY_CAP(I_STO_INC)
                        TST_STORAGE = TST_STORAGE + EXISTSTO(I_STO_INC,ERGN,13,m,d,h)
                     END IF
                  END DO
				  
				  ElecPriceTot(ERGN,m,h,CURIYR) = ElecPriceTot(ERGN,m,h,CURIYR)	+ MARGINALS(1,ERGN,m,d,h) * IDAYTQ(d,m)/ MONTHWT(m)
				  
				  !WRITE(18,5315) CURIRUN, CURCALYR, ERGN, m, d, h, IDAYTQ(d,m), NODAYS(m), WEIGHT(d,m),MONTHWT(m), &
                  !MARGINALS(1,ERGN,m,d,h), ElecPriceTot(ERGN,m,h,CURIYR)

 !5315             FORMAT(1X,"TMP_price",10(":",I4), 2(":",F15.6))
				  
				  IF (PT_BATTERY_CAP .GT. 0.0001) THEN
						TMP_PT_STORAGE_PROFIT(1,ERGN,CURIYR) = TMP_PT_STORAGE_PROFIT(1,ERGN,CURIYR) + &
                           (MARGINALS(2,ERGN,m,d,h) * (EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * IDAYTQ(d,m)) / PT_BATTERY_CAP
				  END IF
                  
                  IF (EXISTSTO(1,ERGN,13,m,d,h) .LT. 0.0) THEN    ! track charging cost for LCOS
                      STO_IN_COST(ERGN) = STO_IN_COST(ERGN) + EXISTSTO(1,ERGN,13,m,d,h) * MARGINALS(1,ERGN,m,d,h) * IDAYTQ(d,m)
                      STO_IN_GEN(ERGN) = STO_IN_GEN(ERGN) + EXISTSTO(1,ERGN,13,m,d,h) * IDAYTQ(d,m)
					  IF (BATTERY_CAP(1) .GT. 0.0001) THEN
						STO_IN_CF(ECP_SL,ECP_GP,ERGN) = STO_IN_CF(ECP_SL,ECP_GP,ERGN) + (EXISTSTO(1,ERGN,13,m,d,h) * IDAYTQ(d,m) / BATTERY_CAP(1))
					  ENDIF
                  ENDIF
                  IF (EXISTSTO(2,ERGN,13,m,d,h) .LT. 0.0) THEN    ! track charging cost for LCOS
                      STO_IN_COST2(ERGN) = STO_IN_COST2(ERGN) + EXISTSTO(2,ERGN,13,m,d,h) * MARGINALS(2,ERGN,m,d,h) * IDAYTQ(d,m)
                      STO_IN_GEN2(ERGN) = STO_IN_GEN2(ERGN) + EXISTSTO(2,ERGN,13,m,d,h) * IDAYTQ(d,m)
					  IF (BATTERY_CAP(2) .GT. 0.0001) THEN
						STO_IN_CF2(ECP_SL,ECP_GP,ERGN) = STO_IN_CF2(ECP_SL,ECP_GP,ERGN) + (EXISTSTO(2,ERGN,13,m,d,h) * IDAYTQ(d,m) / BATTERY_CAP(2))
					  ENDIF
                  ENDIF
				  
				  IF (EXISTSTO(1,ERGN,13,m,d,h) .GT. 0.0) THEN    ! track charging cost for LACE 
                      STO_OUT_COST(ERGN) = STO_OUT_COST(ERGN) + EXISTSTO(1,ERGN,13,m,d,h) * MARGINALS(1,ERGN,m,d,h) * IDAYTQ(d,m)
                      STO_OUT_GEN(ERGN) = STO_OUT_GEN(ERGN) + EXISTSTO(1,ERGN,13,m,d,h) * IDAYTQ(d,m)
					  IF (BATTERY_CAP(1) .GT. 0.0001) THEN
						STO_OUT_CF(ECP_SL,ECP_GP,ERGN) = STO_OUT_CF(ECP_SL,ECP_GP,ERGN) + (EXISTSTO(1,ERGN,13,m,d,h) * IDAYTQ(d,m) / BATTERY_CAP(1))
					  ENDIF
                  ENDIF
                  IF (EXISTSTO(2,ERGN,13,m,d,h) .GT. 0.0) THEN    ! track charging cost for LACE
                      STO_OUT_COST2(ERGN) = STO_OUT_COST2(ERGN) + EXISTSTO(2,ERGN,13,m,d,h) * MARGINALS(2,ERGN,m,d,h) * IDAYTQ(d,m)
					  STO_OUT_GEN2(ERGN) = STO_OUT_GEN2(ERGN) + EXISTSTO(2,ERGN,13,m,d,h) * IDAYTQ(d,m)
					  IF (BATTERY_CAP(2) .GT. 0.0001) THEN
						STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) = STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) + (EXISTSTO(2,ERGN,13,m,d,h) * IDAYTQ(d,m) / BATTERY_CAP(2))
					  ENDIF
                  ENDIF
				  
				  IF (EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h) .GT. 0.0) THEN    ! track charging cost for LACE 
                      PT_STO_OUT_COST(ERGN) = PT_STO_OUT_COST(ERGN) + (EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * MARGINALS(1,ERGN,m,d,h) * IDAYTQ(d,m)
                      PT_STO_OUT_GEN(ERGN) = PT_STO_OUT_GEN(ERGN) + EXISTSTO(1,ERGN,21,m,d,h) * IDAYTQ(d,m)

                      PT_STO_OUT_COST2(ERGN) = PT_STO_OUT_COST2(ERGN) + (EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * MARGINALS(2,ERGN,m,d,h) * IDAYTQ(d,m)
					  PT_STO_OUT_GEN2(ERGN) = PT_STO_OUT_GEN2(ERGN) + (EXISTSTO(1,ERGN,21,m,d,h)+  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * IDAYTQ(d,m)
					  
					  IF (PT_BATTERY_CAP .GT. 0.0001) THEN
						PT_STO_OUT_CF(ECP_SL,ECP_GP,ERGN) = PT_STO_OUT_CF(ECP_SL,ECP_GP,ERGN) + ((EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * IDAYTQ(d,m) / PT_BATTERY_CAP)
						PT_STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) = PT_STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) + ((EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * IDAYTQ(d,m) / PT_BATTERY_CAP)

					  ENDIF
                  ENDIF
				  
				  IF (EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h) .LT. 0.0) THEN    ! track charging cost for LACE 
                      PT_STO_IN_COST(ERGN) = PT_STO_IN_COST(ERGN) + (EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * MARGINALS(1,ERGN,m,d,h) * IDAYTQ(d,m)
                      PT_STO_IN_GEN(ERGN) = PT_STO_IN_GEN(ERGN) + (EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * IDAYTQ(d,m)

                      PT_STO_IN_COST2(ERGN) = PT_STO_IN_COST2(ERGN) + (EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * MARGINALS(2,ERGN,m,d,h) * IDAYTQ(d,m)
					  PT_STO_IN_GEN2(ERGN) = PT_STO_IN_GEN2(ERGN) + (EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * IDAYTQ(d,m)
					  
					  IF (PT_BATTERY_CAP .GT. 0.0001) THEN
						PT_STO_IN_CF(ECP_SL,ECP_GP,ERGN) = PT_STO_IN_CF(ECP_SL,ECP_GP,ERGN) + ((EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * IDAYTQ(d,m) / PT_BATTERY_CAP)
						PT_STO_IN_CF2(ECP_SL,ECP_GP,ERGN) = PT_STO_IN_CF2(ECP_SL,ECP_GP,ERGN) + ((EXISTSTO(1,ERGN,21,m,d,h)+  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h)) * IDAYTQ(d,m) / PT_BATTERY_CAP)
					  ENDIF
                  ENDIF
                  
!                 HY_HR_ECP(ECP_SL,ECP_GP,ERGN) = HY_HR_ECP(ECP_SL,ECP_GP,ERGN) + BATTERY_CAP(1) * IDAYTQ(d,m)
!                 HY_HR_ECP2(ECP_SL,ECP_GP,ERGN) = HY_HR_ECP2(ECP_SL,ECP_GP,ERGN) + BATTERY_CAP(2) * IDAYTQ(d,m)
!                 HY_HR_EFD(EFD_SL,EFD_GP,ERGN) = HY_HR_EFD(EFD_SL,EFD_GP,ERGN) + BATTERY_CAP(1) * IDAYTQ(d,m)
            
                  HY_HR_ECP(ECP_SL,ECP_GP,ERGN) = HY_HR_ECP(ECP_SL,ECP_GP,ERGN) + IDAYTQ(d,m)
                  HY_HR_ECP2(ECP_SL,ECP_GP,ERGN) = HY_HR_ECP2(ECP_SL,ECP_GP,ERGN) + IDAYTQ(d,m)
                  HY_HR_EFD(:,EFD_SL,EFD_GP,ERGN) = HY_HR_EFD(:,EFD_SL,EFD_GP,ERGN) + IDAYTQ(d,m)

                  IF (BATTERY_CAP(1) .GT. 0.0001) THEN
                     NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) + (EXISTSTO(1,ERGN,13,m,d,h) * IDAYTQ(d,m) / BATTERY_CAP(1))
                     NET_STORAGE_LOAD_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) = NET_STORAGE_LOAD_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) + (EXISTSTO(1,ERGN,13,m,d,h) * IDAYTQ(d,m) / BATTERY_CAP(1))
                  END IF

                  IF (BATTERY_CAP(2) .GT. 0.0001) THEN
                     NET_STORAGE_LOAD_NW(ECP_SL,ECP_GP,ERGN,CURIYR) = NET_STORAGE_LOAD_NW(ECP_SL,ECP_GP,ERGN,CURIYR) + (EXISTSTO(2,ERGN,13,m,d,h) * IDAYTQ(d,m) / BATTERY_CAP(2))
                  END IF
				  
				  IF (PT_BATTERY_CAP .GT. 0.0001) THEN
                      NET_PT_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = NET_PT_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) + ((EXISTSTO(1,ERGN,21,m,d,h) +  WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h) * PT_BATTERY_CAP - PVBattClipping(1,ERGN,m,d,h) )* IDAYTQ(d,m) / PT_BATTERY_CAP)
                  END IF

!                 IF (TST_STORAGE .NE. 0.0) THEN

                     WRITE(18,5310) CURIRUN, CURCALYR, ERGN, m, d, h, IDAYTQ(d,m), ECP_SP, ECP_GP, ECP_SL9, ECP_SL, EFD_SP, EFD_GP, EFD_SL, &
                        (MARGINALS(I_STO_INC,ERGN,m,d,h), BATTERY_CAP(I_STO_INC), BATTERY_USED(I_STO_INC,ERGN), ENERGY_STORED(I_STO_INC,ERGN), &
                        EXISTSTO(I_STO_INC,ERGN,13,m,d,h), TMP_STORAGE_PROFIT(I_STO_INC,ERGN,CURIYR), I_STO_INC = 1 , J_STO_INC), PT_BATTERY_CAP, EXISTSTO(1,ERGN,21,m,d,h), &
						WSSPTEL_CF_CLIP(ERGN,CURIYR-1,d,m,h)* PT_BATTERY_CAP, PVBattClipping(1,ERGN,m,d,h), TMP_PT_STORAGE_PROFIT(1,ERGN,CURIYR)

 5310                FORMAT(1X,"TMP_STORAGE_PROFIT_DETAIL",14(":",I4),<J_STO_INC>(":",F15.6,":",F15.6,":",F15.6,":",F15.6,":",F15.6,":",F15.6), 5(":",F15.6))

!                 END IF
               END DO
            END DO
         END DO

         DO ECP_SL9 = 1 , EPNSTP(1)
            ECP_GP = EPLDGR(ECP_SL9,YEAR)
            ECP_SL = EPLDSG(ECP_SL9,YEAR)
            ECP_SP = EPGECP(ECP_GP)

			PT_BATTERY_CAP = TOT_CAP(21,1,ECP_SP,ERGN)
            
            IF (HY_HR_ECP(ECP_SL,ECP_GP,ERGN) .GT. 0.0001) THEN
               NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) / HY_HR_ECP(ECP_SL,ECP_GP,ERGN)
               NET_PT_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = NET_PT_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) / HY_HR_ECP(ECP_SL,ECP_GP,ERGN)
			   
			   PT_STO_OUT_CF(ECP_SL,ECP_GP,ERGN) = PT_STO_OUT_CF(ECP_SL,ECP_GP,ERGN) / HY_HR_ECP(ECP_SL,ECP_GP,ERGN)
			   PT_STO_IN_CF(ECP_SL,ECP_GP,ERGN) = PT_STO_IN_CF(ECP_SL,ECP_GP,ERGN) / HY_HR_ECP(ECP_SL,ECP_GP,ERGN)
			   STO_OUT_CF(ECP_SL,ECP_GP,ERGN) = STO_OUT_CF(ECP_SL,ECP_GP,ERGN) / HY_HR_ECP(ECP_SL,ECP_GP,ERGN)
			   STO_IN_CF(ECP_SL,ECP_GP,ERGN) = STO_IN_CF(ECP_SL,ECP_GP,ERGN) / HY_HR_ECP(ECP_SL,ECP_GP,ERGN)
			ELSE
               NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = 0.0
			   NET_PT_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = 0.0
			   
			   PT_STO_OUT_CF(ECP_SL,ECP_GP,ERGN) = 0.0
			   PT_STO_IN_CF(ECP_SL,ECP_GP,ERGN) = 0.0
			   STO_OUT_CF(ECP_SL,ECP_GP,ERGN) = 0.0
			   STO_IN_CF(ECP_SL,ECP_GP,ERGN) = 0.0
            END IF
            IF (HY_HR_ECP2(ECP_SL,ECP_GP,ERGN) .GT. 0.0001) THEN
               NET_STORAGE_LOAD_NW(ECP_SL,ECP_GP,ERGN,CURIYR) = NET_STORAGE_LOAD_NW(ECP_SL,ECP_GP,ERGN,CURIYR) / HY_HR_ECP2(ECP_SL,ECP_GP,ERGN)
			   
			   PT_STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) = PT_STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) / HY_HR_ECP2(ECP_SL,ECP_GP,ERGN)
			   PT_STO_IN_CF2(ECP_SL,ECP_GP,ERGN) = PT_STO_IN_CF2(ECP_SL,ECP_GP,ERGN) / HY_HR_ECP2(ECP_SL,ECP_GP,ERGN)
			   STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) = STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) / HY_HR_ECP2(ECP_SL,ECP_GP,ERGN)
			   STO_IN_CF2(ECP_SL,ECP_GP,ERGN) = STO_IN_CF2(ECP_SL,ECP_GP,ERGN) / HY_HR_ECP2(ECP_SL,ECP_GP,ERGN)
            ELSE
               NET_STORAGE_LOAD_NW(ECP_SL,ECP_GP,ERGN,CURIYR) = 0.0
			   
			   PT_STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) = 0.0
			   PT_STO_IN_CF2(ECP_SL,ECP_GP,ERGN) = 0.0
			   STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) = 0.0
			   STO_IN_CF2(ECP_SL,ECP_GP,ERGN) = 0.0
            END IF
            
            IF (SR_CREDIT(WIDS) .GT. 0.0 .AND. BATTERY_CAP(1) .GT. 0.0001 .AND. HY_HR_ECP(ECP_SL,ECP_GP,ERGN) .GT. 0.0001) THEN !this is only to match load method, ideally we could take this if statement (except SR_CREDIT)
                NET_STORAGE_SR_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = StoSR_ECP(1,ERGN,13,ECP_GP,ECP_SL) 
            ELSE
                NET_STORAGE_SR_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = 0.0
            END IF

            IF (SR_CREDIT(WIDS) .GT. 0.0 .AND. BATTERY_CAP(2) .GT. 0.0001 .AND. HY_HR_ECP2(ECP_SL,ECP_GP,ERGN) .GT. 0.0001) THEN !this is only to match load method, ideally we could take this if statement (except SR_CREDIT)
                NET_STORAGE_SR_NW(ECP_SL,ECP_GP,ERGN,CURIYR) = StoSR_ECP(2,ERGN,13,ECP_GP,ECP_SL) 
            ELSE
                NET_STORAGE_SR_NW(ECP_SL,ECP_GP,ERGN,CURIYR) = 0.0
            END IF
            
            !need PT storage SR option
            IF (SR_CREDIT(WIPT) .GT. 0.0) THEN
                NET_PT_STORAGE_SR_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = StoSR_ECP(1,ERGN,21,ECP_GP,ECP_SL) 
            ELSE
                NET_PT_STORAGE_SR_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = 0.0
            END IF
                        
            IF (BATTERY_CAP(1) .GT. 0.0001 .OR. PT_BATTERY_CAP .GT. 0.0001) THEN
               WRITE(18,5313) CURIRUN, CURCALYR, ERGN, 1, ECP_SP, ECP_GP, ECP_SL, ECP_SL9, BATTERY_CAP(1), HY_HR_ECP(ECP_SL,ECP_GP,ERGN), &
                  NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR),NET_STORAGE_SR_EX(ECP_SL,ECP_GP,ERGN,CURIYR), PT_BATTERY_CAP, NET_PT_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR),  NET_PT_STORAGE_SR_EX(ECP_SL,ECP_GP,ERGN,CURIYR)
            ELSE
               WRITE(18,5313) CURIRUN, CURCALYR, ERGN, 1, ECP_SP, ECP_GP, ECP_SL, ECP_SL9, BATTERY_CAP(1), 0.0, &
                  NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR), NET_STORAGE_SR_EX(ECP_SL,ECP_GP,ERGN,CURIYR), PT_BATTERY_CAP, NET_PT_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR), NET_PT_STORAGE_SR_EX(ECP_SL,ECP_GP,ERGN,CURIYR)
            END IF
 5313       FORMAT(1X,"DS_ECP_CF",8(",",I4),7(",",F21.6))

            IF (BATTERY_CAP(2) .GT. 0.0001) THEN
               WRITE(18,5313) CURIRUN, CURCALYR, ERGN, 2, ECP_SP, ECP_GP, ECP_SL, ECP_SL9, BATTERY_CAP(2), HY_HR_ECP(ECP_SL,ECP_GP,ERGN), &
                  NET_STORAGE_LOAD_NW(ECP_SL,ECP_GP,ERGN,CURIYR) , NET_STORAGE_SR_NW(ECP_SL,ECP_GP,ERGN,CURIYR), 0.0, 0.0, 0.0
            ELSE
               WRITE(18,5313) CURIRUN, CURCALYR, ERGN, 2, ECP_SP, ECP_GP, ECP_SL, ECP_SL9, BATTERY_CAP(2), 0.0, &
                  NET_STORAGE_LOAD_NW(ECP_SL,ECP_GP,ERGN,CURIYR) , NET_STORAGE_SR_NW(ECP_SL,ECP_GP,ERGN,CURIYR), 0.0, 0.0, 0.0
            END IF
			
 5314       FORMAT(1X,"CF_STO_IN_OUT",9(",",I4),5(",",F21.6))
			
			IF (BATTERY_CAP(1) .GT. 0.0001) THEN
				WRITE(18,5314) CURIRUN, CURCALYR, WIDS, ERGN, 1, ECP_SP, ECP_GP, ECP_SL, ECP_SL9, BATTERY_CAP(1), HY_HR_ECP(ECP_SL,ECP_GP,ERGN), &
				STO_IN_CF(ECP_SL,ECP_GP,ERGN), STO_OUT_CF(ECP_SL,ECP_GP,ERGN), NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR)
			ENDIF
			IF (BATTERY_CAP(2) .GT. 0.0001) THEN
				WRITE(18,5314) CURIRUN, CURCALYR, WIDS, ERGN, 2, ECP_SP, ECP_GP, ECP_SL, ECP_SL9, BATTERY_CAP(2), HY_HR_ECP2(ECP_SL,ECP_GP,ERGN), &
				STO_IN_CF2(ECP_SL,ECP_GP,ERGN), STO_OUT_CF2(ECP_SL,ECP_GP,ERGN), NET_STORAGE_LOAD_NW(ECP_SL,ECP_GP,ERGN,CURIYR)
			ENDIF
			IF (PT_BATTERY_CAP .GT. 0.0001) THEN
				WRITE(18,5314) CURIRUN, CURCALYR, WIPT, ERGN, 1, ECP_SP, ECP_GP, ECP_SL, ECP_SL9, PT_BATTERY_CAP, HY_HR_ECP(ECP_SL,ECP_GP,ERGN), &
				PT_STO_IN_CF(ECP_SL,ECP_GP,ERGN), PT_STO_OUT_CF(ECP_SL,ECP_GP,ERGN),  NET_PT_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR)
				
				WRITE(18,5314) CURIRUN, CURCALYR, WIPT, ERGN, 2, ECP_SP, ECP_GP, ECP_SL, ECP_SL9, PT_BATTERY_CAP, HY_HR_ECP2(ECP_SL,ECP_GP,ERGN), &
				PT_STO_IN_CF2(ECP_SL,ECP_GP,ERGN), PT_STO_OUT_CF2(ECP_SL,ECP_GP,ERGN), NET_PT_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR)
			ENDIF

         END DO
		 
         TOTHRS = DBLE(0.0)
         DO ECP_SL9 = 1 , EPNSTP(YEAR)
			ECP_GP = EPLDGR(ECP_SL9,YEAR)
			ECP_SL = EPLDSG(ECP_SL9,YEAR) 
			STO_OUT_CF2_AVG(ERGN) = STO_OUT_CF2_AVG(ERGN) + STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) * EPWDTH(ECP_SL9,YEAR)  
			PT_STO_OUT_CF2_AVG(ERGN) = PT_STO_OUT_CF2_AVG(ERGN) + PT_STO_OUT_CF2(ECP_SL,ECP_GP,ERGN) * EPWDTH(ECP_SL9,YEAR)  
            TOTHRS = TOTHRS + EPWDTH(ECP_SL9,YEAR)
         END DO
         STO_OUT_CF2_AVG(ERGN) = STO_OUT_CF2_AVG(ERGN) / TOTHRS
		 PT_STO_OUT_CF2_AVG(ERGN) = PT_STO_OUT_CF2_AVG(ERGN) / TOTHRS

         DO EFD_GP = 1 , UTNGRP
            DO EFD_SL = 1 , UTNSEG
               EFD_SP = UTSEAS(EFD_GP)
               
               IF (HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN) .GE. 0.0001) THEN
                  NET_STORAGE_LOAD_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) = NET_STORAGE_LOAD_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) / HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN)
               ELSE
                  NET_STORAGE_LOAD_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) = 0.0
               END IF
               
               IF (SR_CREDIT(WIDS) .GT. 0.0 .AND. HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN) .GE. 0.0001 .AND. BATTERY_CAP(1) .GT. 0.0001) THEN !this is only to match load method, ideally we could take this if statement (except SR_CREDIT)
                  NET_STORAGE_SR_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) = StoSR(1,ERGN,13,EFD_GP,EFD_SL) 
               ELSE
                  NET_STORAGE_SR_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) = 0.0
               END IF
               
               IF (SR_CREDIT(WIPT) .GT. 0.0) THEN 
                  NET_PT_STORAGE_SR_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) = StoSR(1,ERGN,21,EFD_GP,EFD_SL) 
               ELSE
                  NET_PT_STORAGE_SR_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) = 0.0
               END IF

               IF (BATTERY_CAP(1) .GT. 0.0001) THEN
                  WRITE(18,5312) CURIRUN, CURCALYR, ERGN, EFD_SP, EFD_GP, EFD_SL, BATTERY_CAP(1), HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN), &
                     NET_STORAGE_LOAD_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) , NET_STORAGE_SR_EFD(EFD_SL,EFD_GP,ERGN,CURIYR), NET_PT_STORAGE_SR_EFD(EFD_SL,EFD_GP,ERGN,CURIYR)
               ELSE
                  WRITE(18,5312) CURIRUN, CURCALYR, ERGN, EFD_SP, EFD_GP, EFD_SL, BATTERY_CAP(1), 0.0, &
                     NET_STORAGE_LOAD_EFD(EFD_SL,EFD_GP,ERGN,CURIYR) , NET_STORAGE_SR_EFD(EFD_SL,EFD_GP,ERGN,CURIYR),  NET_PT_STORAGE_SR_EFD(EFD_SL,EFD_GP,ERGN,CURIYR)
               END IF
 5312          FORMAT(1X,"DS_EFD_CF",6(",",I4),5(",",F21.6))

            END DO
         END DO
         WRITE(18,5320) CURCALYR,ERGN,STO_IN_COST(ERGN),STO_IN_GEN(ERGN),STO_IN_COST2(ERGN),STO_IN_GEN2(ERGN),STO_OUT_COST(ERGN),STO_OUT_GEN(ERGN),STO_OUT_COST2(ERGN),STO_OUT_GEN2(ERGN), &
			PT_STO_IN_COST(ERGN),PT_STO_IN_GEN(ERGN),PT_STO_IN_COST2(ERGN),PT_STO_IN_GEN2(ERGN), PT_STO_OUT_COST(ERGN),PT_STO_OUT_GEN(ERGN),PT_STO_OUT_COST2(ERGN),PT_STO_OUT_GEN2(ERGN), STO_OUT_CF2_AVG(ERGN)
5320       FORMAT(1X,"STO_IN_CALCS",2(":",I4),18(":",F21.6))
      END DO
      
      ! dispatch, curtailment, storage for restart file
      DO ERGN = 1, UNRGNS
        DO I_864 = 1, NumStoGrp
         DO m = 1 , MAXMON
            DO d = 1 , MAXDTP
               DO h = 1 , 24
                  
					 DO PSTP = 1 , Num_Steps_per_Type(I_864)
                        ! generation for restart file
						DispatchTot(ERGN,I_864,m,h,CURIYR) = DispatchTot(ERGN,I_864,m,h,CURIYR) + Dispatch(1,ERGN,I_864,PSTP,m,d,h) * IDAYTQ(d,m)
                     
                       ! curtailment for restart file
					   IF (CurtTypMap(I_864) .GT. 0 ) THEN
						   CurtailsTot(ERGN,CurtTypMap(I_864),m,h,CURIYR) = CurtailsTot(ERGN,CurtTypMap(I_864),m,h,CURIYR) + Curtails(1,ERGN,I_864,PSTP,m,d,h) * IDAYTQ(d,m)
                       ENDIF
                       
                     END DO
                     
                     ! storage for restart file
					 IF (StoTypMap(I_864) .GT. 0 ) THEN
						ExistStoTot(ERGN,StoTypMap(I_864),m,h,CURIYR) = ExistStoTot(ERGN,StoTypMap(I_864),m,h,CURIYR) + ExistSto(1,ERGN,I_864,m,d,h) * IDAYTQ(d,m)
					 ENDIF
                     
               END DO
            END DO
         END DO
        END DO
      END DO
                     
!     CALCULATE EFD and ECP Intermittent Capacity Factors from ReStore Model

      J_STO_INC = N_STO_INC + 1

      DO INT = 1 , ECP_D_INT
         ECPt = UCPINTI(INT)
         M864_TYP = UCPVSTOR(ECPt)
         HY_HR_ECP = 0.0
         HY_HR_ECP_DPV = 0.0
         HY_HR_EFD = 0.0

         BM_FAC = 1.0
         IF (ECPt .EQ. WIWN) THEN
            BM_FAC = URWNCFA(CURIYR)
         ELSEIF (ECPt .EQ. WIWL) THEN
            BM_FAC = URWNCFA(CURIYR)
         ELSEIF (ECPt .EQ. WIWF) THEN
            BM_FAC = URWNCFA(CURIYR)
         ELSEIF (ECPt .EQ. WISO) THEN
            BM_FAC = URSOCFA(CURIYR)
         ELSEIF (ECPt .EQ. WIPV) THEN
            BM_FAC = URPVCFA(CURIYR)
         ELSEIF (ECPt .EQ. WIPT) THEN
            BM_FAC = URPVCFA(CURIYR)
         END IF

         DO ERGN = 1, UNRGNS

            CALL GETBLD(1,ERGN)

            DO ECP_SL9 = 1 , EPNSTP(1)
               ECP_GP = EPLDGR(ECP_SL9,1)
               ECP_SL = EPLDSG(ECP_SL9,1)
               DO I_STO_INC = 1 , J_STO_INC
                  UPICFC(I_STO_INC,INT,ECP_GP,ECP_SL) = 0.0
                  UPICFC_DPV(I_STO_INC,INT,ECP_GP,ECP_SL) = 0.0
               END DO
            END DO

            DO m = 1 , MAXMON
               DO d = 1 , MAXDTP
                  DO h = 1 , 24

                     IF (ECPt .EQ. WIWN) THEN
                        CF_INT = WSFWIEL_CF(ERGN,CURIYR-1,d,m,h)
                     ELSEIF (ECPt .EQ. WIWL) THEN
                        CF_INT = WSFWLEL_CF(ERGN,CURIYR-1,d,m,h)
                     ELSEIF (ECPt .EQ. WIWF) THEN
                        CF_INT = WSFWFEL_CF(ERGN,CURIYR-1,d,m,h)
                     ELSEIF (ECPt .EQ. WISO) THEN
                        CF_INT = WSSSTEL_CF(ERGN,CURIYR-1,d,m,h)
                     ELSEIF (ECPt .EQ. WIPV) THEN
                        CF_INT = WSSPVEL_CF(ERGN,CURIYR-1,d,m,h)
                     ELSEIF (ECPt .EQ. WIPT) THEN
                        CF_INT = WSSPTEL_CF(ERGN,CURIYR-1,d,m,h)
                     ELSE
                        CF_INT = 0.001
                     END IF
					 
                     
					 DO PSTP = 1 , Num_Steps_per_Type(M864_TYP)
						CURTAIL(INT,ERGN,CURIYR) = CURTAIL(INT,ERGN,CURIYR) + Curtails(1,ERGN,M864_TYP,PSTP,m,d,h) * IDAYTQ(d,m)
                        CURTAILSUB(INT,PSTP,ERGN,CURIYR) = CURTAILSUB(INT,PSTP,ERGN,CURIYR) + Curtails(1,ERGN,M864_TYP,PSTP,m,d,h) * IDAYTQ(d,m)
					 END DO
					 
					 TMP_DISP = 0.0
					 DO PSTP = 1 , Num_Steps_per_Type(M864_TYP)
                              !TMP_DISP = TMP_DISP + DISPATCH(1,ERGN,M864_TYP,PSTP,m,d,h)
                         TOT_GEN_RES(INT,PSTP,ERGN,CURIYR) = TOT_GEN_RES(INT,PSTP,ERGN,CURIYR) + DISPATCH(1,ERGN,M864_TYP,PSTP,m,d,h) * IDAYTQ(d,m)
					 END DO
					 !TOT_GEN_RES(INT,PSTP,ERGN,CURIYR) = TOT_GEN_RES(INT,PSTP,ERGN,CURIYR) + DISPATCH(1,ERGN,M864_TYP,PSTP,m,d,h) * IDAYTQ(d,m)

                     ECP_SP = HRTOECPSEAS(m,d,h) 
                     ECP_GP = HRTOECPGRP(m,d,h) 
                     ECP_SL9 = HRTOECPSL(CURIYR,ERGN,m,d,h) 
                     ECP_SL = MAPVLS_ECP(ECP_SL9,ECP_GP,ERGN,YEAR)

                     EFD_SP = HRTOEFDSEAS(m,d,h) 
                     EFD_GP = HRTOEFDGP(m,d,h) 
                     EFD_SL = HRTOEFDSL(ERGN,m,d,h) 

                     IF (TOT_CAP(M864_TYP,1,EFD_SP,ERGN) .GT. 0.0001) THEN
							HY_HR_ECP(ECP_SL,ECP_GP,ERGN) = HY_HR_ECP(ECP_SL,ECP_GP,ERGN) + TOT_CAP(M864_TYP,1,EFD_SP,ERGN) * IDAYTQ(d,m)
                          IF (ECPt .EQ. WIPV) THEN
                              HY_HR_ECP_DPV(ECP_SL,ECP_GP,ERGN) = HY_HR_ECP_DPV(ECP_SL,ECP_GP,ERGN) + TOT_CAP(M864_TYP,2,EFD_SP,ERGN) * IDAYTQ(d,m)
                          ELSE
                              HY_HR_ECP_DPV(ECP_SL,ECP_GP,ERGN) = HY_HR_ECP_DPV(ECP_SL,ECP_GP,ERGN) + TOT_CAP(M864_TYP,1,EFD_SP,ERGN) * IDAYTQ(d,m)
                          ENDIF
                            
                        DO I_STO_INC = 1 , J_STO_INC
                           TMP_DISP = 0.0
                           TMP_DISP_DPV = 0.0
						   IF (ECPt .EQ. WIPV) THEN
								TMP_DISP = DISPATCH(I_STO_INC,ERGN,M864_TYP,1,m,d,h)
                                TMP_DISP_DPV = DISPATCH(I_STO_INC,ERGN,M864_TYP,2,m,d,h)
						   ELSE
							   DO PSTP = 1 , Num_Steps_per_Type(M864_TYP)
									TMP_DISP = TMP_DISP + DISPATCH(I_STO_INC,ERGN,M864_TYP,PSTP,m,d,h)
                                    TMP_DISP_DPV = TMP_DISP
							   END DO
						   ENDIF
                           UPICFC(I_STO_INC,INT,ECP_GP,ECP_SL) = UPICFC(I_STO_INC,INT,ECP_GP,ECP_SL) + TMP_DISP * IDAYTQ(d,m)
                           UPICFC_DPV(I_STO_INC,INT,ECP_GP,ECP_SL) = UPICFC_DPV(I_STO_INC,INT,ECP_GP,ECP_SL) + TMP_DISP_DPV * IDAYTQ(d,m)
						   
                           IF (CURCALYR .LE. 2025) THEN
                  
                              WRITE(18,6310) CURIRUN, CURCALYR, I_STO_INC, INT, ECPt, M864_TYP, ERGN, m, d, h, ECP_SP, ECP_GP, ECP_SL9, ECP_SL, &
                                 IDAYTQ(d,m), EFD_GP, EFD_SP, EFD_SL, CF_INT, &
                              TOT_CAP_ECP(M864_TYP,1,ERGN), TOT_CAP(M864_TYP,1,EFD_SP,ERGN), EPECAP(0,ECPt,1)*0.001, EP_SP_CAP_FAC(ECP_SP,ECPt,1), &
                                 TMP_DISP, Curtails(I_STO_INC,ERGN,M864_TYP,1,m,d,h), TOT_GEN_RES(INT,1,ERGN,CURIYR), TMP_DISP_DPV, TOT_CAP(M864_TYP,2,EFD_SP,ERGN)
 6310                         FORMAT(1X,"INT_CF_ECP",18(",",I4),5(",",F21.6),5(",",F21.6))
                  
                           END IF
                        END DO
                     END IF
                  
                     IF (TOT_CAP(M864_TYP,1,EFD_SP,ERGN) .GT. 0.0001) THEN
						 IF (ECPt .EQ. WIPV) THEN
						 	DO PSTP = 1,2
									HY_HR_EFD(PSTP,EFD_SL,EFD_GP,ERGN) = HY_HR_EFD(PSTP,EFD_SL,EFD_GP,ERGN) + TOT_CAP(M864_TYP,PSTP,EFD_SP,ERGN) * IDAYTQ(d,m)
							ENDDO
						 ELSE 
							HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN) = HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN) + TOT_CAP(M864_TYP,1,EFD_SP,ERGN) * IDAYTQ(d,m)
						 ENDIF

					 
                        DO I_STO_INC = 1 , J_STO_INC
                           TMP_DISP = 0.0
                           DO PSTP = 1 , 2
                              TMP_DISP = DISPATCH(I_STO_INC,ERGN,M864_TYP,PSTP,m,d,h)

							  HREFDCF(I_STO_INC,INT,PSTP,EFD_SL,EFD_GP,ERGN) = HREFDCF(I_STO_INC,INT,PSTP,EFD_SL,EFD_GP,ERGN) + TMP_DISP * IDAYTQ(d,m) / BM_FAC
							  
							IF (CURCALYR .LE. 2025) THEN
               
                              WRITE(18,7310) CURIRUN, CURCALYR, I_STO_INC, INT, PSTP, ECPt, M864_TYP, ERGN, m, d, h, ECP_SP, ECP_GP, ECP_SL9, ECP_SL, &
                                 IDAYTQ(d,m), EFD_GP, EFD_SP, EFD_SL, CF_INT, &
                                 TOT_CAP(M864_TYP,1,EFD_SP,ERGN), TMP_DISP, Curtails(I_STO_INC,ERGN,M864_TYP,1,m,d,h), BM_FAC, HREFDCF(I_STO_INC,INT,PSTP,EFD_SL,EFD_GP,ERGN), HY_HR_EFD(PSTP,EFD_SL,EFD_GP,ERGN), &
								 TOT_CAP(M864_TYP,2,EFD_SP,ERGN), DPVTOTCAPNR(ERGN,CURIYR)/1000, &
								 HREFDCF(I_STO_INC,INT,PSTP,EFD_SL,EFD_GP,ERGN) / HY_HR_EFD(PSTP,EFD_SL,EFD_GP,ERGN)
 7310                         FORMAT(1X,"INT_CF_OUT",19(",",I4),2(",",F21.6),8(",",F21.6))

                           END IF
						   END DO

                        END DO
                     END IF
                  END DO
               END DO
            END DO

					 
            DO EFD_GP = 1 , UTNGRP
               DO EFD_SL = 1 , UTNSEG
                  EFD_SP = UTSEAS(EFD_GP)
                  IF (TOT_CAP(M864_TYP,1,EFD_SP,ERGN) .GE. 0.0001) THEN
                     DO I_STO_INC = 1 , J_STO_INC
						DO PSTP = 1 , 2
							HREFDCF(I_STO_INC,INT,PSTP,EFD_SL,EFD_GP,ERGN) = HREFDCF(I_STO_INC,INT,PSTP,EFD_SL,EFD_GP,ERGN) / HY_HR_EFD(PSTP,EFD_SL,EFD_GP,ERGN)
						END DO
                     END DO
                 
                     K_STO_INC = N_STO_INC + 6
                 DO PSTP = 1 , 2
                     IF (TOT_CAP(M864_TYP,1,EFD_SP,ERGN) .GT. 0.0001) THEN
						IF (ECPt .EQ. WIPV ) THEN
                        WRITE(18,7312) CURIRUN, CURCALYR, INT, ECPt, M864_TYP, PSTP,ERGN, EFD_SP, EFD_GP, EFD_SL, TOT_CAP(M864_TYP,PSTP,EFD_SP,ERGN), HY_HR_EFD(PSTP,EFD_SL,EFD_GP,ERGN) / TOT_CAP(M864_TYP,PSTP,EFD_SP,ERGN), &
                           CURTAILSUB(INT,PSTP,ERGN,CURIYR), BM_FAC, &
                           (HREFDCF(I_STO_INC,INT,PSTP,EFD_SL,EFD_GP,ERGN), I_STO_INC = 0 , J_STO_INC)
						ELSE
						    WRITE(18,7312) CURIRUN, CURCALYR, INT, ECPt, M864_TYP, PSTP,ERGN, EFD_SP, EFD_GP, EFD_SL, TOT_CAP(M864_TYP,PSTP,EFD_SP,ERGN), HY_HR_EFD(PSTP,EFD_SL,EFD_GP,ERGN) / TOT_CAP(M864_TYP,PSTP,EFD_SP,ERGN), &
                           CURTAILSUB(INT,PSTP,ERGN,CURIYR), BM_FAC, &
                           (HREFDCF(I_STO_INC,INT,PSTP,EFD_SL,EFD_GP,ERGN), I_STO_INC = 0 , J_STO_INC)
						ENDIF
                     ELSE
                        WRITE(18,7312) CURIRUN, CURCALYR, INT, ECPt, M864_TYP, PSTP,ERGN, EFD_SP, EFD_GP, EFD_SL, TOT_CAP(M864_TYP,PSTP,EFD_SP,ERGN), 0.0, &
                           CURTAILSUB(INT,PSTP,ERGN,CURIYR), BM_FAC, &
                           (HREFDCF(I_STO_INC,INT,PSTP,EFD_SL,EFD_GP,ERGN), I_STO_INC = 0 , J_STO_INC)
                     END IF
 7312                FORMAT(1X,"INT_EFD_CF",10(",",I4),<K_STO_INC>(",",F21.6))
				ENDDO

                  END IF
               END DO
               END DO
               
            DO ECP_SL9 = 1 , EPNSTP(1)
               ECP_GP = EPLDGR(ECP_SL9,YEAR)
               ECP_SL = EPLDSG(ECP_SL9,YEAR)
               ECP_SP = EPGECP(ECP_GP)
               DO I_STO_INC = 1 , J_STO_INC
                  IF (HY_HR_ECP(ECP_SL,ECP_GP,ERGN) .GT. 0.0001) THEN
                     UPICFC(I_STO_INC,INT,ECP_GP,ECP_SL) = UPICFC(I_STO_INC,INT,ECP_GP,ECP_SL) / HY_HR_ECP(ECP_SL,ECP_GP,ERGN)
                  ELSE
                     UPICFC(I_STO_INC,INT,ECP_GP,ECP_SL) = UPICFC(0,INT,ECP_GP,ECP_SL)
                  END IF
                  IF (HY_HR_ECP_DPV(ECP_SL,ECP_GP,ERGN) .GT. 0.0001) THEN
                      UPICFC_DPV(I_STO_INC,INT,ECP_GP,ECP_SL) = UPICFC_DPV(I_STO_INC,INT,ECP_GP,ECP_SL) / HY_HR_ECP_DPV(ECP_SL,ECP_GP,ERGN)
                  ELSE
                      UPICFC_DPV(I_STO_INC,INT,ECP_GP,ECP_SL) = UPICFC(0,INT,ECP_GP,ECP_SL)
                  END IF
               END DO

               K_STO_INC = N_STO_INC + 9

               WRITE(18,6312) CURIRUN, CURCALYR, INT, ECPt, M864_TYP, ERGN, ECP_GP, ECP_SP, ECP_SL9, ECP_SL, TOT_CAP(M864_TYP,1,ECP_SP,ERGN), TOT_CAP_ECP(M864_TYP,1,ERGN), HY_HR_ECP(ECP_SL,ECP_GP,ERGN), &
                  CURTAIL(INT,ERGN,CURIYR), EPECFC(ECPt,1), EPIACF(INT), EP_SP_CAP_FAC(ECP_SP,ECPt,1), &
                  (UPICFC(I_STO_INC,INT,ECP_GP,ECP_SL), I_STO_INC = 0 , J_STO_INC), TOT_GEN_RES(INT,1,ERGN,CURIYR), UPICFC_DPV(1,INT,ECP_GP,ECP_SL), HY_HR_ECP_DPV(ECP_SL,ECP_GP,ERGN)
 6312             FORMAT(1X,"INT_ECP_CF",10(":",I4),<K_STO_INC>(":",F15.6),":",F15.6,":",F15.6,":",F15.6)


            END DO

            CALL STRBLD(1,ERGN)

         END DO
      END DO


!     CALCULATE EFD and ECP Hydro Dispatch

      HY_CF_ECP = 0.0
      HY_HR_ECP = 0.0
      HY_CF_EFD = 0.0
      HY_HR_EFD = 0.0

      ETYP = WIHY
      M864_TYP = UCPVSTOR(ETYP)
               
      DO ERGN = 1, UNRGNS
         DO m = 1 , MAXMON
            DO d = 1 , MAXDTP
               DO h = 1 , 24
                  ECP_SP = HRTOECPSEAS(m,d,h) 
                  ECP_GP = HRTOECPGRP(m,d,h) 
                  ECP_SL9 = HRTOECPSL(CURIYR,ERGN,m,d,h) 
                  ECP_SL = MAPVLS_ECP(ECP_SL9,ECP_GP,ERGN,YEAR)
                  
                  TMP_DISP = 0.0
                  DO PSTP = 1 , Num_Steps_per_Type(M864_TYP)
                     TMP_DISP = TMP_DISP + DISPATCH(1,ERGN,M864_TYP,PSTP,m,d,h)
                  END DO
                  HY_CF_ECP(ECP_SL,ECP_GP,ERGN) = HY_CF_ECP(ECP_SL,ECP_GP,ERGN) + TMP_DISP * IDAYTQ(d,m)
                  HY_HR_ECP(ECP_SL,ECP_GP,ERGN) = HY_HR_ECP(ECP_SL,ECP_GP,ERGN) + IDAYTQ(d,m)

                  EFD_SP = HRTOEFDSEAS(m,d,h) 
                  EFD_GP = HRTOEFDGP(m,d,h) 
                  EFD_SL = HRTOEFDSL(ERGN,m,d,h) 
                  HY_CF_EFD(EFD_SL,EFD_GP,ERGN) = HY_CF_EFD(EFD_SL,EFD_GP,ERGN) + TMP_DISP * IDAYTQ(d,m)
                  HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN) = HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN) + IDAYTQ(d,m)

                  IF (CURCALYR .EQ. 2020 .OR. CURCALYR .EQ. 2040) THEN

                     WRITE(18,8310) CURIRUN, CURCALYR, ERGN, m, d, h, ECP_SP, ECP_GP, ECP_SL9, ECP_SL, IDAYTQ(d,m), EFD_SP, EFD_GP, EFD_SL, TMP_DISP, &
                        HY_CF_ECP(ECP_SL,ECP_GP,ERGN), HY_HR_ECP(ECP_SL,ECP_GP,ERGN), HY_CF_EFD(EFD_SL,EFD_GP,ERGN), HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN)
 8310                FORMAT(1X,"HY_CF_OUT",14(",",I4),5(",",F21.6))

                  END IF
               END DO
            END DO
         END DO

            DO ECP_SL9 = 1 , EPNSTP(1)
               ECP_GP = EPLDGR(ECP_SL9,YEAR)
               ECP_SL = EPLDSG(ECP_SL9,YEAR)
               ECP_SP = EPGECP(ECP_GP)

               WRITE(18,8311) CURIRUN, CURCALYR, ERGN, ECP_GP, ECP_SL, ETYP, M864_TYP, TOT_CAP_ECP(M864_TYP,1,ERGN), HY_HR_ECP(ECP_SL,ECP_GP,ERGN), HY_CF_ECP(ECP_SL,ECP_GP,ERGN)
 8311          FORMAT(1X,"ECP_HY_CF",7(",",I4),3(",",F21.6))
               
               IF (TOT_CAP_ECP(M864_TYP,1,ERGN) .GE. 0.0001) THEN
                  HY_CF_ECP(ECP_SL,ECP_GP,ERGN) = HY_CF_ECP(ECP_SL,ECP_GP,ERGN) / (TOT_CAP_ECP(M864_TYP,1,ERGN) * HY_HR_ECP(ECP_SL,ECP_GP,ERGN))
               END IF
            END DO
               
          DO EFD_GP = 1 , UTNGRP
             DO EFD_SL = 1 , UTNSEG
                EFD_SP = UTSEAS(EFD_GP)
               
               WRITE(18,8312) CURIRUN, CURCALYR, ERGN, EFD_GP, EFD_SL, ETYP, M864_TYP, TOT_CAP(M864_TYP,1,EFD_SP,ERGN), HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN), HY_CF_EFD(EFD_SL,EFD_GP,ERGN)
 8312          FORMAT(1X,"EFD_HY_CF",7(",",I4),3(",",F21.6))
                
               IF (TOT_CAP(M864_TYP,1,EFD_SP,ERGN) .GE. 0.0001) THEN
                  HY_CF_EFD(EFD_SL,EFD_GP,ERGN) = HY_CF_EFD(EFD_SL,EFD_GP,ERGN) / (TOT_CAP(M864_TYP,1,EFD_SP,ERGN) * HY_HR_EFD(1,EFD_SL,EFD_GP,ERGN))
               END IF
            END DO
         END DO
      END DO

      !     CALCULATE EFD and ECP Nuclear and Fossil Dispatch for new operating mode

      NUC_CF_ECP = 0.0; FOS_CF_ECP = 0.0
      NUC_HR_ECP = 0.0; FOS_HR_ECP = 0.0
      NUC_CF_EFD = 0.0; FOS_CF_EFD = 0.0
      NUC_HR_EFD = 0.0; FOS_HR_EFD = 0.0

      DO ERGN = 1, UNRGNS
        DO I_864 = 1, NumStoGrp
           INUC = 0
           IFOSBS = 0
           IF (StorageCodes(I_864) .EQ. 'NC') THEN
                INUC = 1
           ELSE
            DO IDSP = 1, ECP_D_DSP
              M864_TYP = UCPVSTOR(IDSP)
              IF (I_864 .EQ. M864_TYP .AND. UPPCFB(IDSP,1) .GT. 0.001 .AND. UPAVLYR(IDSP) .LT. 9000) THEN
                IFOSBS = 1
              ENDIF
            ENDDO 
           ENDIF
!           write(6,*) 'CALCSTO assignment ',I_864,StorageCodes(I_864),INUC,IFOSBS
         IF (INUC .EQ. 1 .OR. IFOSBS .EQ. 1) THEN

         DO m = 1 , MAXMON
            DO d = 1 , MAXDTP
               DO h = 1 , 24
                  ECP_SP = HRTOECPSEAS(m,d,h) 
                  ECP_GP = HRTOECPGRP(m,d,h) 
                  ECP_SL9 = HRTOECPSL(CURIYR,ERGN,m,d,h) 
                  ECP_SL = MAPVLS_ECP(ECP_SL9,ECP_GP,ERGN,YEAR)
                  TMP_DISP = 0.0
                  DO PSTP = 1 , Num_Steps_per_Type(I_864)
                     TMP_DISP = TMP_DISP + DISPATCH(1,ERGN,I_864,PSTP,m,d,h)
                  END DO
                  
                  IF (INUC .EQ. 1) THEN
                    NUC_CF_ECP(ECP_SL,ECP_GP,ERGN) = NUC_CF_ECP(ECP_SL,ECP_GP,ERGN) + TMP_DISP * IDAYTQ(d,m)
                    NUC_HR_ECP(ECP_SL,ECP_GP,ERGN) = NUC_HR_ECP(ECP_SL,ECP_GP,ERGN) + TOT_CAP(I_864,1,ECP_SP,ERGN) * IDAYTQ(d,m)
                  ELSE
                    FOS_CF_ECP(ECP_SL,ECP_GP,ERGN) = FOS_CF_ECP(ECP_SL,ECP_GP,ERGN) + TMP_DISP * IDAYTQ(d,m)
                    FOS_HR_ECP(ECP_SL,ECP_GP,ERGN) = FOS_HR_ECP(ECP_SL,ECP_GP,ERGN) + TOT_CAP(I_864,1,ECP_SP,ERGN) * IDAYTQ(d,m)
                  ENDIF

                  EFD_SP = HRTOEFDSEAS(m,d,h) 
                  EFD_GP = HRTOEFDGP(m,d,h) 
                  EFD_SL = HRTOEFDSL(ERGN,m,d,h) 
                  IF (INUC .EQ. 1) THEN
                    NUC_CF_EFD(EFD_SL,EFD_GP,ERGN) = NUC_CF_EFD(EFD_SL,EFD_GP,ERGN) + TMP_DISP * IDAYTQ(d,m)
                    NUC_HR_EFD(EFD_SL,EFD_GP,ERGN) = NUC_HR_EFD(EFD_SL,EFD_GP,ERGN) + TOT_CAP(I_864,1,EFD_SP,ERGN) * IDAYTQ(d,m)
                  ELSE
                    FOS_CF_EFD(EFD_SL,EFD_GP,ERGN) = FOS_CF_EFD(EFD_SL,EFD_GP,ERGN) + TMP_DISP * IDAYTQ(d,m)
                    FOS_HR_EFD(EFD_SL,EFD_GP,ERGN) = FOS_HR_EFD(EFD_SL,EFD_GP,ERGN) + TOT_CAP(I_864,1,EFD_SP,ERGN) *IDAYTQ(d,m)
                  ENDIF
                  
                  IF (CURCALYR .EQ. 2020 .OR. CURCALYR .EQ. 2040) THEN
                     IF (INUC .EQ. 1) THEN
                     WRITE(18,8313) CURIRUN, CURCALYR, ERGN, m, d, h, ECP_SP, ECP_GP, ECP_SL9, ECP_SL, IDAYTQ(d,m), EFD_SP, EFD_GP, EFD_SL, TMP_DISP, &
                        NUC_CF_ECP(ECP_SL,ECP_SP,ERGN), NUC_HR_ECP(ECP_SL,ECP_SP,ERGN), NUC_CF_EFD(EFD_SL,EFD_GP,ERGN), NUC_HR_EFD(EFD_SL,EFD_GP,ERGN)
 8313                FORMAT(1X,"NUC_CF_OUT",14(",",I4),5(",",F21.6))
                     ELSE
                      WRITE(18,8314) CURIRUN, CURCALYR, ERGN, m, d, h, ECP_SP, ECP_GP, ECP_SL9, ECP_SL, IDAYTQ(d,m), EFD_SP, EFD_GP, EFD_SL, TMP_DISP, &
                        FOS_CF_ECP(ECP_SL,ECP_SP,ERGN), FOS_HR_ECP(ECP_SL,ECP_SP,ERGN), FOS_CF_EFD(EFD_SL,EFD_GP,ERGN), FOS_HR_EFD(EFD_SL,EFD_GP,ERGN)
 8314                FORMAT(1X,"FOS_CF_OUT",14(",",I4),5(",",F21.6))
                     ENDIF

                  END IF
               END DO
            END DO
         END DO
         END IF
        END DO

         DO ECP_SL9 = 1 , EPNSTP(1)
               ECP_GP = EPLDGR(ECP_SL9,YEAR)
               ECP_SL = EPLDSG(ECP_SL9,YEAR)
               ECP_SP = EPGECP(ECP_GP)

               WRITE(18,8315) CURIRUN, CURCALYR, ERGN, ECP_GP, ECP_SL, 'NUC', NUC_HR_ECP(ECP_SL,ECP_GP,ERGN), NUC_CF_ECP(ECP_SL,ECP_GP,ERGN)
               WRITE(18,8315) CURIRUN, CURCALYR, ERGN, ECP_GP, ECP_SL, 'FOS', FOS_HR_ECP(ECP_SL,ECP_GP,ERGN), FOS_CF_ECP(ECP_SL,ECP_GP,ERGN)
 8315          FORMAT(1X,"ECP_BASE_CF",5(",",I4),",",A5,2(",",F21.6))
               
               IF (NUC_HR_ECP(ECP_SP,ECP_GP,ERGN) .GE. 0.0001) THEN
                  NUC_CF_ECP(ECP_SL,ECP_GP,ERGN) = NUC_CF_ECP(ECP_SL,ECP_GP,ERGN) / NUC_HR_ECP(ECP_SL,ECP_GP,ERGN)
               END IF               
               IF (FOS_HR_ECP(ECP_SP,ECP_GP,ERGN) .GE. 0.0001) THEN
                  FOS_CF_ECP(ECP_SL,ECP_GP,ERGN) = FOS_CF_ECP(ECP_SL,ECP_GP,ERGN) / FOS_HR_ECP(ECP_SL,ECP_GP,ERGN)
               END IF

         END DO
               
          DO EFD_GP = 1 , UTNGRP
             DO EFD_SL = 1 , UTNSEG
                EFD_SP = UTSEAS(EFD_GP)
               
               WRITE(18,8316) CURIRUN, CURCALYR, ERGN, EFD_GP, EFD_SL, 'NUC', NUC_HR_EFD(EFD_SL,EFD_GP,ERGN), NUC_CF_EFD(EFD_SL,EFD_GP,ERGN)
               WRITE(18,8316) CURIRUN, CURCALYR, ERGN, EFD_GP, EFD_SL, 'FOS', FOS_HR_EFD(EFD_SL,EFD_GP,ERGN), FOS_CF_EFD(EFD_SL,EFD_GP,ERGN)

 8316          FORMAT(1X,"EFD_HY_CF",5(",",I4),",",A5,3(",",F21.6))
                 
               IF (NUC_HR_EFD(EFD_SL,EFD_GP,ERGN) .GE. 0.0001) THEN
                  NUC_CF_EFD(EFD_SL,EFD_GP,ERGN) = NUC_CF_EFD(EFD_SL,EFD_GP,ERGN) / NUC_HR_EFD(EFD_SL,EFD_GP,ERGN)
               END IF
               IF (FOS_HR_EFD(EFD_SL,EFD_GP,ERGN) .GE. 0.0001) THEN
                  FOS_CF_EFD(EFD_SL,EFD_GP,ERGN) = FOS_CF_EFD(EFD_SL,EFD_GP,ERGN) / FOS_HR_EFD(EFD_SL,EFD_GP,ERGN)
               END IF

               END DO
         END DO
      END DO

      IF (CURCALYR .EQ. 2020) THEN
         DO ERGN = 1, UNRGNS
            DO m = 1 , MAXMON
               DO d = 1 , MAXDTP
                  DO h = 1 , 24
                     DO ETYP = 1, MaxPtypes
                        DO PSTP = 1 , Num_Steps_per_type(ETYP)
                           IF (Dispatch(1,ERGN,ETYP,PSTP,m,d,h) + Dispatch(2,ERGN,ETYP,PSTP,m,d,h)  .NE. 0.0) THEN
                              WRITE(18,9319) CURIRUN, CURCALYR, ERGN, ETYP, PSTP, m, d, h, HRTOEFDSL(ERGN,m,d,h), HRTOEFDGP(m,d,h), HRTOEFDSEAS(m,d,h), EFDns, EFDnumSG, &
                                 MAPVLS_ECP(HRTOECPSL(CURIYR,ERGN,m,d,h),HRTOECPGRP(m,d,h),ERGN,YEAR), &
                                 HRTOECPSL(CURIYR,ERGN,m,d,h), HRTOECPGRP(m,d,h), HRTOECPSEAS(m,d,h), ECPns, ECPnumSG, ELNVCT(HRTOEFDSEAS(m,d,h)),  &
                                 TOT_CAP(ETYP,1,HRTOEFDSEAS(m,d,h),ERGN), Dispatch(1,ERGN,ETYP,PSTP,m,d,h), Curtails(1,ERGN,ETYP,PSTP,m,d,h), Marginals(1,ERGN,m,d,h), &
                              ExistSto(1,ERGN,ETYP,m,d,h),  Curtails(2,ERGN,ETYP,PSTP,m,d,h), Marginals(2,ERGN,m,d,h),  ExistSto(2,ERGN,ETYP,m,d,h)
 9319                         FORMAT(1X,"864_LOAD_MAPS",20(":",I4),13(":",F21.6))
                           END IF
                        END DO
                     END DO
                  END DO
               END DO
            END DO
         END DO
      END IF
      
      ! COMPUTING THE CAPACITY CREDIT FOR DINURAL STORAGE HERE, WHICH LEVERAGES THE RESTORE VALUES READ IN 
      CALL CAP_CREDIT_LDC
      
      IECP = WIDS
      DO NERC = 1 , UNRGNS

         CALL GETBLD(1,NERC)

         IF ((CURIYR + UHBSYR) .GT. UPSTYR) THEN
            CALL GETBOUT(CURIYR-1,NERC)
         ENDIF

         J_STO_INC = N_STO_INC + 1
         WRITE(18,4889) CURIRUN, CURCALYR, NERC, (TMP_STORAGE_PROFIT(I_STO_INC,NERC,CURIYR), I_STO_INC = 1 , J_STO_INC), TMP_PT_STORAGE_PROFIT(1,NERC,CURIYR)
 4889    FORMAT(1X,"COMPARE_STORAGE_PROFIT",3(",",I6),<J_STO_INC+1>(",",F16.6))
		
         STORAGE_PROFIT(NERC,CURIYR) = MAX(TMP_STORAGE_PROFIT(J_STO_INC,NERC,CURIYR) , 1.0) * 0.001
         STORAGE_PROFIT_EX(NERC,CURIYR) = MAX(TMP_STORAGE_PROFIT(1,NERC,CURIYR) , 1.0) * 0.001
		 PT_STORAGE_PROFIT(NERC,CURIYR) = MAX(TMP_PT_STORAGE_PROFIT(1,NERC,CURIYR) , 1.0) * 0.001

         OFFSET(NERC) = 0.0
		 PT_OFFSET(NERC) = 0.0
         OLYR = UPPLYR(IECP) + 1
         DO IGRP = 1 , EPNGRP
            ISP = MAP_ECP_SP(IGRP)
            DO JVLS = 1 , EPNSPG(IGRP)
               DO YEAR = OLYR, UNXPH

!                 NET_STORAGE_LOAD_NW(JVLS,IGRP,NERC,CURIYR) = NET_STORAGE_LOAD_NW(JVLS,IGRP,NERC,CURIYR) / SHOURS(JVLS,IGRP)

               VLS = EPLMAP(IGRP,JVLS,YEAR)

!                 OFFSET = OFFSET - EPAVOID(IGRP,JVLS,YEAR) * NET_STORAGE_LOAD_NW(JVLS,IGRP,NERC,CURIYR) * PWF(DBLE(EPDSCRT),YEAR) / UPGNPD(CURIYR)
                  OFFSET(NERC) = OFFSET(NERC) - EPAVOID(IGRP,JVLS,YEAR) * NET_STORAGE_LOAD_NW(JVLS,IGRP,NERC,CURIYR) 
				  PT_OFFSET(NERC) = PT_OFFSET(NERC) - EPAVOID(IGRP,JVLS,YEAR) * NET_PT_STORAGE_LOAD_EX(JVLS,IGRP,NERC,CURIYR) 

                  J_STO_INC = N_STO_INC + 1
                  WRITE(18,4917) CURIRUN, CURCALYR, CURIYR+YEAR+1988, NERC, IGRP, ISP, JVLS, VLS, SHOURS(JVLS,IGRP), NET_STORAGE_CAP_EX(ISP,NERC,CURIYR), &
                  NET_STORAGE_LOAD_EX(JVLS,IGRP,NERC,CURIYR), NET_STORAGE_LOAD_NW(JVLS,IGRP,NERC,CURIYR), NET_PT_STORAGE_LOAD_EX(JVLS,IGRP,NERC,CURIYR) ,&
                     STORAGE_PROFIT(NERC,CURIYR), PT_STORAGE_PROFIT(NERC,CURIYR), EPAVOID(IGRP,JVLS,YEAR), OFFSET(NERC), PT_OFFSET(NERC),EPDSCRT, PWF(DBLE(EPDSCRT),YEAR), UPGNPD(CURIYR), &
                  (TMP_STORAGE_PROFIT(I_STO_INC,NERC,CURIYR), I_STO_INC = 1, J_STO_INC), TMP_PT_STORAGE_PROFIT(1,NERC,CURIYR) 
 4917             FORMAT(1X,"NET_STORAGE_LOAD",8(",",I5),13(",",F21.6),<J_STO_INC+1>(",",F21.6))

               END DO
            END DO
         END DO

         DO OPYR = OLYR , UNFPH
            GNP(OPYR - OLYR + 1) = UPGNPD(CURIYR + OPYR - 1)
         END DO
         DSCTMP = &
            PVV(GNP,ECP_D_FPH,UNFPH - OLYR + 1,DBLE(EPDSCRT)) * &
            PWF(DBLE(EPDSCRT),OLYR - 1)
         OFFSET(NERC) = OFFSET(NERC) / DSCTMP
		 PT_OFFSET(NERC) = PT_OFFSET(NERC) / DSCTMP
         WRITE(18,4918) CURIRUN, CURCALYR, CURIYR+1989,NERC,OFFSET(NERC),PT_OFFSET(NERC),DSCTMP
4918    FORMAT(1X,"STORAGE_FINAL_OFFSET",4(",",I5),3(",",F21.6))

!        Create Vector for Existing Battery Capacity

         IECP = WIDS
         YEAR = 1
         COLUMN = 'E' // UPRGCD(NERC) // UPLNTCD(IECP) // 'XXX' // UPYRCD(YEAR); call makmsk(COLUMN_mask,':E:',UPRGCD(NERC),UPLNTCD(IECP),':XXX:',UPYRCD(YEAR),':!INT:')
         VALUE = NET_STORAGE_CAP_EX(ISP,NERC,CURIYR)
         CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'CALC_STORAGE_VAL,1')
         OBJVAL = 0.001
         CALL CVAL(COLUMN,UPOBJ,OBJVAL,COLUMN_mask,UPOBJ,'CALC_STORAGE_VAL,2')
         DO YEAR = 1 , UNXPH
            DO IGRP = 1 , EPNGRP
               ISP = MAP_ECP_SP(IGRP)
               DO JVLS = 1 , EPNSPG(IGRP)
                  ROW = 'L' // UPRGCD(NERC) // 'EL' // UPLDCD(ISP) // UPRGCD(IGRP) // UPRGCD(JVLS) // UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(JVLS),UPYRCD(YEAR))
                  VALUE = NET_STORAGE_LOAD_EX(JVLS,IGRP,NERC,CURIYR)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'CALC_STORAGE_VAL,3')
                  IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                      ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(JVLS)//UPYRCD(YEAR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(JVLS),UPYRCD(YEAR))
                      VALUE_SR = NET_STORAGE_SR_EX(JVLS,IGRP,NERC,CURIYR)
                      CALL CVAL(COLUMN,ROW_SR,VALUE_SR,COLUMN_mask,ROW_SR_mask,'CALC_STORAGE_VAL,5')
                  END IF
               END DO
            END DO
            
            ! PUT EXISTING CAPACITY COLUMN INTO RESERVE MARGIN ROW

            ROW = 'R' // UPRGCD(NERC) // 'XXXXX' // UPYRCD(YEAR); call makmsk(ROW_mask,':R:', UPRGCD(NERC), ':XXXXX:', UPYRCD(YEAR))
            
            ! Call Dinural Storage Capacity Credits routine
            VALUE = MIN(DINURAL_STORAGE_CAPACITY_CREDIT(CURIYR, NERC), 1.0)
            
            
            CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'CALC_STORAGE_VAL,4')
         END DO

!        Create Vectors for New Battery Capacity

         IECP = WIDS
         DO YEAR = 1 , UNXPH - UPPLYR(IECP)
            OLYR = YEAR + UPPLYR(IECP)

            IF (CURIYR + OLYR + UHBSYR - 1 .GE. UPAVLYR(IECP)) THEN

!              DETERMINE PRESENT VALUE OF FIXED O&M AT OLYR INCLUDE EXTERNALITY COSTS, IF ANY

               IFPH2 = UNFPH - OLYR + 1
               DO JYR = 1 , IFPH2
                  FOM(JYR) = EPFOM(IECP) * UPGNPD(JYR + CURIYR + OLYR - 2)
                  ARB(JYR) = (OFFSET(NERC) - STORAGE_PROFIT(NERC,CURIYR)) * UPGNPD(JYR + CURIYR + OLYR - 2)
                  TOM(JYR) = EPCFOM(IECP) * UPGNPD(JYR + CURIYR + OLYR - 2)
                  VOM(JYR) = 0.0
                  GPS(JYR) = 0.0
                  IF (YEAR .EQ. 1) THEN
                     FOML(JYR) = EPFOM(IECP) * UPGNPD(JYR + CURIYR + OLYR - 2)
                     VOML(JYR) = EPVOM(IECP) * UPGNPD(JYR + CURIYR + OLYR - 2)
                  END IF

                  EXTR(JYR) = 0.0
                  IF (YEAR .EQ. 1) EXTL(JYR) = DBLE(EPEXT(IECP,MNPOLLUT + 1)) * UPGNPD(JYR + CURIYR + OLYR - 2)

               END DO
               PV$ARB = PVV(ARB,ECP_D_FPH,IFPH2, DBLE(EPDSCRT + Battery_Extra_Discount)) * PWF(DBLE(EPDSCRT + Battery_Extra_Discount),OLYR-1)
               PV$FOM = PVV(FOM,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$TOM = PVV(TOM,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$VOM = PVV(VOM,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$GPS = PVV(GPS,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$EXT = PVV(EXTR,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
               PV$SOM = 0.0
               PV$SOML = 0.0

!              COMPUTE LEVELIZED GENERATION O&M, SUBSIDY AND EXTERNALITY COSTS

               IF (YEAR .EQ. 1) THEN
                  PV$FOML = PVV(FOML,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
                  PV$VOML = PVV(VOML,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
                  PV$EXTL = PVV(EXTL,ECP_D_FPH,IFPH2, DBLE(EPDSCRT)) * PWF(DBLE(EPDSCRT),OLYR-1)
                  CALL EP$LGNP(OLYR,IFPH2,EPDSCRT - UPRSK(IECP),PVGNPR)
                  CALL EP$LGNP(OLYR,IFPH2,EPDSCRT,PVGNP)
				  EPLVFOM(IECP) = (PV$FOML)  / PVGNP
                  EPLVVOM(IECP) = PV$VOML / PVGNP
                  EPLVEXT(IECP) = (PV$EXTL - PV$SOML) / PVGNP

!                 Put charging costs in levelized fuel component
				  IF (STO_OUT_GEN2(NERC) .NE. 0.0) THEN
						EPLVFLC(IECP) = -STO_IN_COST2(NERC)/STO_OUT_GEN2(NERC) * (STO_OUT_CF2_AVG(NERC)/0.1)
				  ELSE
                    EPLVFLC(IECP) = 0.0
                  ENDIF
               END IF

               DO JYR = 1, ECP_D_LCP
                  CPR(JYR) = UPCPRO(IECP,JYR)
               END DO

               DO IOWN = 1  , 2
                  IS = 1
                  IF (UPBLDTYP(NERC) .EQ. IOWN) THEN
                     COLUMN = 'I'//UPRGCD(NERC)//UPLNTCD(IECP)//UPOWNCD(IOWN)//'X'//SSTEP(IS)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':I:',UPRGCD(NERC),UPLNTCD(IECP),UPOWNCD(IOWN),':X:',SSTEP(IS),UPYRCD(YEAR))

                     ROW = 'LUDSST1'//UPYRCD(YEAR); !
                     !call makmsk(ROW_ST_mask,':LUDSST1:',UPYRCD(YEAR))   ! change made by AKN on 12/7/2018 a special case for row 'LU' when plantytpe = 'DS', dispatchType = 'ST', and step = 1 and add this vector
                     call makmsk(ROW_mask,':LU:','DS','ST','1',UPYRCD(YEAR)) ! make sure to add this extra coefficient for row rLU under a proper set of index values
                     VALUE = 1.0
                     CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'CALC_STORAGE_VAL,12')
                     
                     
                     J_STO_INC = N_STO_INC + 1
                     VALUE = MAX(ENERGY_STORED(J_STO_INC,NERC), BATTERY_USED(J_STO_INC,NERC))
                     CALL CBND(UPBND,COLUMN,DBLE(0.0),VALUE,COLUMN_mask,'CALC_STORAGE_VAL,11')

!                    STORE INDEX FOR AVAILABILITY OF TECHNOLOGY AND SUBSIDY

                     BUILD_AVL(IECP,YEAR,NERC,CURIYR) = 1

                     IF (IOWN .EQ. 1) THEN ! Utility Builds

                        DEBT_F = EPUFDT
                        UTINT  =  EPUIRT
                        UTROE  = (EPUROR - EPUFDT * EPUIRT) / (1.0 - EPUFDT)
                        UTROR  = UTROE * (1.0 - DEBT_F) + UTINT * DEBT_F
                        ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                        IF (OLYR .LT. UNXPH)THEN
                           IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                              ANNADJ = UPANNADJ(IECP,CURIYR+OLYR-1)
                           ELSE
                              ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                           END IF
                        ELSE
                           DO JYR = UNXPH , UNAPH
                              KYR = JYR - UNXPH + 1
                              AN1(KYR) = 1.0
                              IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                 ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                              ELSE
                                 ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                              END IF
                           END DO
                           ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) / PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                        END IF
                        OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ANNADJ

                        CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),CURIYR,YEAR,OVRCST,CPR,UPCAPD(1,IECP),UPGNPD,UTINT,DEBT_F,UTROR,TXBOOK,FNBOOK)

                        if (IS.eq.1) WRITE(18,3211) CURIYR+UHBSYR,NERC,IECP,IOWN,UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP), &
                           UPPLYR(IECP),YEAR,OVRCST, &
                           UTINT,UTROE,DEBT_F,UTROR,TXBOOK,FNBOOK,(CPR(ICP),ICP=1,ECP_D_LCP),IECP,IS,1.0,0,0,  &
                           (UPCAPD(ZYR,IECP),UPGNPD(ZYR),ZYR=UPPLYR(IECP)+YEAR-1,UPPLYR(IECP)+YEAR+UPCLYR(IECP)-2), &
                           UPOVR(IECP), UPLRPC(IECP), UPLROPT(IECP), UPLRLC(IECP), EPRGM(IECP), EPACM(IECP), EPFOM(IECP), EPVOM(IECP)

                        URATIO = TXBOOK / FNBOOK
                        CAPUNSTL = FNBOOK

                        CALL EPNBLD(DBLE(UTROR),DBLE(EPDSCRT - UPRSK(IECP)),URATIO,DBLE(EPUFPE),UPECLF(IECP),UPTXLF(IECP),DBLE(UPTXRT),UPUCLF(IECP),CAPUTIL)

                        WRITE(18,4212) CURIYR+UHBSYR,YEAR,NERC,IECP,UTROR,EPDSCRT - UPRSK(IECP),URATIO,EPUFPE,UPECLF(IECP),UPTXLF(IECP),UPTXRT,UPUCLF(IECP),CAPUTIL
 4212                   FORMAT(1X,"EPNBLD-S",4(",",I4),4(",",F7.4),2(",",I2),",",F7.4,",",I4,",",F8.4)

                        TRANS = (DBLE(EPCOVR(IECP) + EPCTRM(IECP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IECP))
                        OBJVAL = (( CAPUNSTL * CAPUTIL + TRANS ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)

                        VALUE = OBJVAL + PV$FOM + PV$ARB + PV$TOM + PV$VOM + PV$EXT - PV$GPS

!                       VALUE = MAX(ECP_MIN , VALUE)

                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                        CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'CALC_STORAGE_VAL,8')

                        T_CRF = CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2)
                        T_PWF = PWF(DBLE(EPDSCRT) - UPRSK(IECP),OLYR)
                        IF (YEAR .EQ. 1) THEN
                           WRITE(18,36) CURIYR+UHBSYR,OLYR+CURIYR+UHBSYR-1,NERC,UPBLDTYP(NERC),IECP,IECP,UPLNTCD(IECP),COLUMN, &
                              OVRCST,FNBOOK,CAPUTIL,CAPUNSTL*CAPUTIL,UTROR,EPDSCRT,UPRSK(IECP),        &
                              1.0,EPEXT(IECP,MNPOLLUT + 1),EPCOVR(IECP),EPCCRF(IECP),EPCTRM(IECP), &
                              TRANS,OBJVAL,PV$FOM,PV$EXT,PV$SOM,VALUE,UPGNPD(YEAR),UPGNPD(OLYR+CURIYR-1),    &
                              UPGNPD(1999-UHBSYR),OLYR,IFPH2,T_CRF,T_PWF,UTROE,UTINT,PV$ARB,PV$GPS, PV$TOM
                        END IF

!                       COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR--UTILITIES

                        IF (YEAR .EQ. 1) THEN
                           CAPLEV = (( CAPUNSTL * CAPUTIL ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)
                           CAPLEV = CAPLEV / PVGNP
                           EPLVCAP(IECP,IOWN) = CAPLEV
                           EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                           EPLVTRN(IECP) = (TRANS / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)) / PVGNP
                           EPLVBCK(IECP) = 1.0
                        END IF


                     ELSE                  ! EWG Builds

                        DEBT_F = UPNFDT
                        EWGINT = EPUIRT + UPNIPRM
                        UTINT  =  EPUIRT
                        EWGROE = EPUCRE + UPNRPRM
                        UTROE  = EPUCRE
                        EWGROR = EWGROE * (1.0 - DEBT_F) + EWGINT * DEBT_F

                        ANNRTE = (UPANNADJ(IECP,UNYEAR) / UPANNADJ(IECP,UNYEAR - 10)) ** (1.0 / 10.0)
                        IF (OLYR .LT. UNXPH)THEN
                           IF ((CURIYR+OLYR-1) .LE. UNYEAR)THEN
                              ANNADJ = UPANNADJ(IECP,CURIYR+OLYR-1)
                           ELSE
                              ANNADJ = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + OLYR - 1) - UNYEAR)
                           END IF
                        ELSE
                           DO JYR = UNXPH , UNAPH
                              KYR = JYR - UNXPH + 1
                              AN1(KYR) = 1.0
                              IF ((CURIYR+JYR-1) .LE. UNYEAR)THEN
                                 ANN(KYR) = UPANNADJ(IECP,CURIYR + JYR - 1)
                              ELSE
                                 ANN(KYR) = UPANNADJ(IECP,UNYEAR) * ANNRTE ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                              END IF
                           END DO
                           ANNADJ = PVV(ANN,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT)) /  &
                                 PVV(AN1,ECP_D_FPH,UNFPH - UNXPH + 1,dble(EPDSCRT))
                        END IF

                        OVRCST = UPOVR(IECP) * UPLRPC(IECP) * UPLROPT(IECP) * UPLRLC(IECP) * EPRGM(IECP) * EPACM(IECP) * ANNADJ

                        CALL EPINCST(UNYEAR,ECP_D_XPH,ECP_D_FPH,ECP_D_LCP,UPCLYR(IECP),UPPLYR(IECP),CURIYR,YEAR,OVRCST,CPR,UPCAPD(1,IECP),   &
                           UPGNPD,EWGINT,DEBT_F,EWGROR,TXBOOK,FNBOOK)

                        if (IS.eq.1) WRITE(18,3211) CURIYR+UHBSYR, NERC, IECP, IOWN, UNYEAR, ECP_D_XPH, ECP_D_FPH, ECP_D_LCP, UPCLYR(IECP), &
                           UPPLYR(IECP), YEAR, OVRCST, &
                           EWGINT, EWGROE, DEBT_F, EWGROR, TXBOOK, FNBOOK, (CPR(ICP),ICP=1,ECP_D_LCP), IECP, IS, ANNADJ, ANNRTE, 0,  &
                           (UPCAPD(ZYR,IECP), UPGNPD(ZYR),ZYR=UPPLYR(IECP)+YEAR-1,UPPLYR(IECP)+YEAR+UPCLYR(IECP)-2), &
                           UPOVR(IECP), UPLRPC(IECP), UPLROPT(IECP), UPLRLC(IECP), EPRGM(IECP), EPACM(IECP), EPFOM(IECP), EPVOM(IECP)
 3211                   FORMAT(1X,"EPINCST-S",11(",",I4),",",F7.2,4(",",F7.4),2(",",F15.1),<ECP_D_LCP>(",",F5.3),   &
                           2(",",I4),2(",",F15.3),",",I4,2(",",F5.3),",",F21.6,7(",",F12.6))

                        PRATIO = TXBOOK / FNBOOK
                        CAPNNSTL = FNBOOK

                        CALL EPCNBLD(DBLE(DEBT_F),PRATIO,DBLE(UPNRPRM),DBLE(UPNIPRM),DBLE(UTROE),DBLE(UTINT),DBLE(UPTXRT), &
                           UPTXLF(IECP),UPNCLF(IECP),UPNLLF(IECP),CAPNUG)

                        if (IS .eq. 1) &
                           WRITE(18,3212) CURIYR+UHBSYR,YEAR,NERC,IECP,DEBT_F,PRATIO,UPNRPRM,UPNIPRM,UTROE,UTINT,UPTXRT, &
                           UPTXLF(IECP),UPNCLF(IECP),UPNLLF(IECP),CAPNUG
 3212                   FORMAT(1X,"EPCNBLD-S",4(",",I4),7(",",F7.4),3(",",I2),",",F8.4)

                        TRANS = (DBLE(EPCOVR(IECP) + EPCTRM(IECP))) * DBLE(UPGNPD(OLYR+CURIYR-1)) * DBLE(EPCCRF(IECP))
                        OBJVAL = (( CAPNNSTL * CAPNUG + TRANS ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)

!                       CHECK FOR SUBSIDY LIMIT FOR PTC

                        VALUE = OBJVAL + PV$ARB + PV$FOM + PV$VOM + PV$EXT - PV$GPS

!                       VALUE = OBJVAL + PV$ARB + PV$FOM + PV$TOM + PV$VOM + PV$EXT - PV$GPS
!                       VALUE = MAX(ECP_MIN , VALUE)

                        IF (USW_DIGIT .GT. 0)VALUE = DIGITS2( VALUE , DIGITS_PARM)

                        if(IS.eq.1) WRITE(18,3299) CURIRUN, CURIYR+UHBSYR, YEAR, NERC, IECP, OBJVAL, TRANS, VALUE, (TAXDEPR(1,JYR),JYR=1,5), IECP, IS, 1.0, 1.0
 3299                   FORMAT(1x,"EPCNBLD2-S",5(",",I4),3(",",F12.2),5(",",F8.4),2(",",i5),2(",",F15.3))

                        CALL CVAL(COLUMN,UPOBJ,VALUE,COLUMN_mask,UPOBJ,'CALC_STORAGE_VAL,9')

                        T_CRF = CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2)
                        T_PWF = PWF(DBLE(EPDSCRT) - UPRSK(IECP),OLYR)
                        IF (YEAR .EQ. 1) THEN
                           WRITE(18,36) CURIYR+UHBSYR, OLYR+CURIYR+UHBSYR-1, NERC, UPBLDTYP(NERC), IECP, IECP, UPLNTCD(IECP), COLUMN, &
                              OVRCST, FNBOOK, CAPNUG, CAPNNSTL*CAPNUG, EWGROR, EPDSCRT, UPRSK(IECP),        &
                              0.0, EPEXT(IECP, MNPOLLUT + 1), EPCOVR(IECP), EPCCRF(IECP), EPCTRM(IECP), &
                              TRANS, OBJVAL, PV$FOM, PV$EXT, PV$SOM, VALUE, UPGNPD(YEAR), UPGNPD(OLYR+CURIYR-1),    &
                              UPGNPD(1999-UHBSYR), OLYR, IFPH2, T_CRF, T_PWF, EWGROE, EWGINT, PV$ARB, PV$GPS, 0.0 !PV$TOM
      36                   FORMAT(1x,"BUILD_IN",6(":",I4),":",A2,":",A8,21(":",E10.3),2(":",I2),7(":",F21.3))
                        END IF

!                       COMPUTE LEVELIZED CAPITAL COST AND FIXED CHARGE FACTOR--NUGS

                        IF (YEAR .EQ. 1) THEN
                           CAPLEV = (( CAPNNSTL * CAPNUG ) / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) ) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)
                           CAPLEV = CAPLEV / PVGNP
                           EPLVCAP(IECP,IOWN) = CAPLEV
                           EPLVFCF(IECP,IOWN) = CAPLEV / OVRCST
                           EPLVTRN(IECP) = (TRANS / CRF(DBLE(EPDSCRT - UPRSK(IECP)),IFPH2) * PWF(DBLE(EPDSCRT - UPRSK(IECP)),OLYR)) / PVGNP
                           EPLVBCK(IECP) = 1.0
                        END IF
                     END IF    ! IF IOWN

                     DO JYR = OLYR , UNXPH
                        DO IGRP = 1 , EPNGRP
                           ISP = MAP_ECP_SP(IGRP)
                           DO JVLS = 1 , EPNSPG(IGRP)
                              ROW = 'L'//UPRGCD(NERC)//'EL'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(JVLS)//UPYRCD(JYR); call makmsk(ROW_mask,':L:',UPRGCD(NERC),':EL:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(JVLS),UPYRCD(JYR))
                              VALUE = NET_STORAGE_LOAD_NW(JVLS,IGRP,NERC,CURIYR)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'CALC_STORAGE_VAL,10')
                              IF (SR_CREDIT(IECP) .GT. 0.0) THEN
                                  ROW_SR = 'R'//UPRGCD(NERC)//'SR'//UPLDCD(ISP)//UPRGCD(IGRP)//UPRGCD(JVLS)//UPYRCD(JYR); call makmsk(ROW_SR_mask,':R:',UPRGCD(NERC),':SR:',UPLDCD(ISP),UPRGCD(IGRP),UPRGCD(JVLS),UPYRCD(JYR))
                                  VALUE_SR = NET_STORAGE_SR_NW(JVLS,IGRP,NERC,CURIYR)
                                  CALL CVAL(COLUMN,ROW_SR,VALUE_SR,COLUMN_mask,ROW_SR_mask,'CALC_STORAGE_VAL,14')
                              END IF
                              
                           END DO
                        END DO
                        
                        ! PUT EXISTING CAPACITY COLUMN INTO RESERVE MARGIN ROW
                        
                        ROW = 'R'//UPRGCD(NERC)//'XXXXX'//UPYRCD(JYR); call makmsk(ROW_mask,':R:', UPRGCD(NERC),':XXXXX:',UPYRCD(JYR))

                        ! Call Dinural Storage Capacity Credits routine
                        VALUE = MIN(DINURAL_STORAGE_CAPACITY_CREDIT(CURIYR, NERC), 1.0)
                        
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'CALC_STORAGE_VAL,13')
                        
                     END DO  ! JYR
                  END IF  ! UPBLDTYP
               END DO  ! OWNER
            END IF  ! AVLYR
            IF (YEAR .EQ. 1) THEN
                IF ((CURIYR + UHBSYR) .GT. UPSTYR) THEN
                   CALL STRBOUT(CURIYR-1,NERC) ! Store levelized cost data, need to put in curiyr-1 so that it gets pulled in and copied into CURIYR in REVECP
                ELSE  
                   CALL STRBOUT(CURIYR,NERC) ! Store levelized cost data, put in curiyr in first ECP year
                ENDIF
            ENDIF
         END DO  ! YEAR
      END DO  ! NERC


      RETURN
      END
    
!     Heapsort - Sorts an array RA of length N into ascending numerical
!     order using the Heapsort Algorithm. N is input; RA is
!     REPLACED ON OUTPUT BY ITS SORTED REARRANGEMENT AND RB
!     IS REARRANGED CORRESPONDINGLY.
!
      SUBROUTINE HEAPSORT(N,RA,RB)
      IMPLICIT NONE
!
      include'emmparm'
      INTEGER N,L,IR,I,J
      REAL*8 RA(N),RRA
      INTEGER RB(N),RRB
!
      L = N / 2 + 1
      IR = N
!
!     The index L will be decremented from its initial value down to 1 durin
!     the "hiring" (heap creation) phase. Once it reaches 1, the index IR
!     will be decremented from its initial value down to 1 during the
!     "retirement-and-promotion" (heap selection) phase.
!
   10 CONTINUE
      IF (L .GT. 1) THEN                       ! Still in hiring phase ?
         L = L - 1
         RRA = RA(L)
         RRB = RB(L)
      ELSE                           !  In retirement-and-promotion phase.
         RRA = RA(IR)                  !  Clear a space at end of array.
         RRB = RB(IR)
         RA(IR) = RA(1)              !  Retire the top of the heap into it.
         RB(IR) = RB(1)
         IR = IR - 1                 !  Decrease the size of the corporation
         IF (IR .EQ. 1) THEN            !  Done with the last promotion.
            RA(1) = RRA              !  The least competent worker of all !
            RB(1) = RRB
            RETURN
         ENDIF
      ENDIF
!
!     Whether we are in the hiring phase or promotion phase, we here set
!     up to sift down element RRA to its proper level.
!
      I = L
      J = L + L
   20 IF (J .LE. IR) THEN                             ! Do while J <= IR
         IF (J .LT. IR) THEN
            IF (RA(J) .LT. RA(J + 1)) J = J + 1   ! Comp to the better under
         ENDIF
         IF (RRA .LT. RA(J)) THEN                           ! Demote RRA
            RA(I) = RA(J)
            RB(I) = RB(J)
            I = J
            J = J + J
         ELSE         ! This is RRA's level. Set J to terminate the sift-dow
            J = IR + 1
         END IF
         GO TO 20
      ENDIF
      RA(I) = RRA                                  ! Put RRA into its slot.
      RB(I) = RRB
      GO TO 10
      END
      
    MODULE SORTING_MODULE
   ! ADOPTED FROM "INTRODUCTION TO PROGRAMMING WITH FORTRAN, CHIVERS ET AL. 
   ! HOARE C.A.R. PROOF OF A RECURSIVE PROGRAM : QUICKSORT, COMP. J., 14 NO 4 (1971) 391-95
      REAL, ALLOCATABLE, DIMENSION(:) :: RAW_DATA
   
   CONTAINS
   
      RECURSIVE SUBROUTINE QUICKSORT(L,R)
      IMPLICIT NONE
      INTEGER, INTENT(IN) :: L,R
      ! LOCAL VARIABLES
      INTEGER :: I,J
      REAL :: V,T
      
      I=L
      J=R
      
      V = RAW_DATA(INT((L+R)/2))
      
      DO
         DO WHILE (RAW_DATA(I) < V)
            I = I + 1
         END DO
         DO WHILE (V < RAW_DATA(J)) 
            J = J - 1
         END DO
         IF (I <=J) THEN
            T = RAW_DATA(I)
            RAW_DATA(I) = RAW_DATA(J)
            RAW_DATA(J) = T
            I = I + 1
            J = J - 1
         END IF
         IF (I > J) EXIT
      END DO
      
      IF (L < J) THEN 
         CALL QUICKSORT(L,J)
      ENDIF
      
      IF (I < R) THEN 
         CALL QUICKSORT(I,R)
      END IF
      
      END SUBROUTINE QUICKSORT

   
   END MODULE

 
      SUBROUTINE CAP_CREDIT_LDC
      USE SORTING_MODULE
!     use ecp_row_col

!     CALCULATE INTERMITTENT CAPACITY CREDIT USING LDC METHOD

      IMPLICIT NONE

      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'ecp_nuc'
      include 'bildin'
      include 'dispin'
      include 'dispett'
      include 'dispuse'
      include 'macout'
      include 'wrenew'
      include 'emoblk'
      include 'emission'
      include 'cdsparms'
      include 'uso2grp'
      include 'eusprc'
      include 'edbdef'
      include 'coalemm'
      include 'csapr'
      include 'e111d'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'
      include 'uefdout'
      include 'entcntl'
      include 'wwind'

      INTEGER*4 NERC, YEAR, ISP, IGRP, VLS, JVLS, JVLS_CNT(MAXECPB), LVLS, m, d, h, IRET, VLSMAP(ECP_D_VLS,ECP_D_MSP,MNUMNR,ECP_D_XPH), MAPVLS(ECP_D_VLS,MAXECPB,MNUMNR,ECP_D_XPH)
      INTEGER*4 MAP_864_MONTH(12*3*24), MAP_864_DAYTYPE(12*3*24), MAP_864_HOUR(12*3*24), RANK_864_F(MNUMNR), RANK_864_N(12*3*24,MNUMNR), I_864, J_864, K_864, L_864,IRET1,I
      REAL*8 TEST_LOAD, NET_LOAD(12*3*24,MNUMNR)
      REAL*8 SHOURS(ECP_D_VLS,MAXECPB)
      REAL*8 DEM_ADJ
      REAL*8 MAX_PEAK_LOAD(MNUMNR), AVG_PEAK_LOAD(MNUMNR), ABS_PEAK_LOAD(MNUMNR)

      REAL*8 CONVAR, TINTVAR, CONVSTD, CONVCAP, INTSTD, INTCAP, ZSTAT, TNWN(ECP_D_CAP), TCAP(ECP_D_CAP), NWN, DECAY, PCTINTGEN, RELCONV, RELTOT, TYPVAR(ECP_D_CAP)
      INTEGER*4 CPTYP, RYR, INT, ICAP, IR_CAP, IL, I_ECP, DINURAL_STORAGE_INDEX

      REAL*8 VARIANCE_CNV(ECP_D_CAP)             ! Standard Deviation = SQRT(VARIANCE)
      REAL*8 VARIANCE_INT(ECP_D_CAP)             ! Standard Deviation = SQRT(VARIANCE)
      REAL*8 NUMBER(ECP_D_CAP)               ! Estimated Number of Units - Total Capacity divided by Standard Unit Size
      REAL*8 VAR_CONV, VAR_INT, VAR_TOTAL, VAR_CONV_INT
      REAL*8 CAPFAC(ECP_D_INT), PARM_CCRED, MAX_DELTA, WGHT, TOT_WGHT, MAX_NET_LOAD, T_CCRED, CCRED(ECP_D_INT)
      REAL*8 CAP_AVG(ECP_D_CAP)              ! Total annual average capacity for each ECP type
      REAL*8 CAP_CONV, CAP_TOTAL, CAP_INT, CAP_REL_TOTAL, CAP_REL_CONV
      REAL LOAD_LDC_VAL, NET_LOAD_STG_VAL,TEMP_REAL, NUM, DEM, CAPACITY_CREDIT
      REAL*4 LOAD_LDC(864), LOAD_LDC_SORTED(864)
      REAL*4 NET_LOAD_STG(864),NET_LOAD_STG_SORTED(864) 
      REAL STOLEVEL_TERM(ECP_D_CAP,12,3,24)
      logical :: exist
      
      character*14 cmd
      !REAL*8 NET_STORAGE_LOAD_EX(ECP_D_VLS,MAXECPB,MNUMNR,MNUMYR) - EXISTING NET STORAGE LOAD 
      !NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) = NET_STORAGE_LOAD_EX(ECP_SL,ECP_GP,ERGN,CURIYR) + (EXISTSTO(1,ERGN,13,m,d,h) * IDAYTQ(d,m) / BATTERY_CAP(1))
      
      IF (CURIYR .EQ. FIRSYR) THEN
         RYR = CURIYR
      ELSE
         RYR = CURIYR - 1
      ENDIF

 !     INITIALIZE SEASONAL PEAKS AND HOURS PER SEASON

      DO YEAR = 1 , UNXPH
         DO NERC = 1 , UNRGNS
            SHOURS = 0
            JVLS_CNT = 0
            !CALL GETBLD(1,NERC)
            DO ISP = 1 , EPNMSP
               DO VLS = 1 , EPNSTP(YEAR)
                  VLSMAP(VLS,ISP,NERC,YEAR) = 0
               END DO
            END DO
            DO IGRP = 1 , EPNGRP
               DO VLS = 1 , EPNSTP(YEAR)
                  MAPVLS(VLS,IGRP,NERC,YEAR) = 0
               END DO
            END DO

!           DETERMINE CAPACITY FACTOR AT EACH LOAD STEP

            DO ISP = 1 , EPNMSP
               VLS = EPFRST(ISP,YEAR)
               DO WHILE (VLS .GT. 0)
                  IGRP = EPLDGR(VLS,YEAR)
                  JVLS_CNT(IGRP) = JVLS_CNT(IGRP) + 1
                  VLSMAP(JVLS_CNT(IGRP),ISP,NERC,YEAR) = VLS
                  MAPVLS(VLS,IGRP,NERC,YEAR) = JVLS_CNT(IGRP)

                  WRITE(18,9317) curirun, curiyr+1989, curiyr+year+1988, nerc, isp, vls, igrp, jvls_cnt(igrp)
 9317             FORMAT(1X,"VLSMAP_INFO",8(",",I6))

                  VLS = EPNEXT(VLS,YEAR)
               END DO
            END DO
            !CALL STRBLD(1,NERC)
         END DO
      END DO
         
         
!     MAP MONTH, DAYTYPE AND HOUR TO 864 INDEX

      I_864 = 0
      DO m = 1 , 12
         DO d = 1 , 3
            DO h = 1 , 24
               I_864 = I_864 + 1
               MAP_864_MONTH(I_864) = m
               MAP_864_DAYTYPE(I_864) = d
               MAP_864_HOUR(I_864) = h
            END DO
         END DO
      END DO

!     COLLECT INFO TO CALCULATE INTERMITTENT CAPACITY CREDIT

      !INQUIRE(FILE="STORAGE_CAP_CREDIT_RESULTS.TXT", EXIST=EXIST)
      !IF (EXIST) THEN
      !   OPEN(894514, FILE="STORAGE_CAP_CREDIT_RESULTS.TXT", STATUS="OLD", POSITION="APPEND", ACTION="WRITE")
      !ELSE
      !   OPEN(894514, FILE="STORAGE_CAP_CREDIT_RESULTS.TXT", STATUS="NEW", ACTION="WRITE")
      !END IF
      !WRITE(894514, *) "YEAR, NERC, CAPACITY_CREDIT, NUM, DEM"
      
      DO NERC = 1 , UNRGNS
         
         NET_LOAD_STG = 0.0

         YEAR = 1 
         
         DO I_864 = 1 , 864
            M = MAP_864_MONTH(I_864)
            D = MAP_864_DAYTYPE(I_864)
            H = MAP_864_HOUR(I_864)
            IGRP = HRTOECPGRP(M,D,H)
            ISP = EPGECP(IGRP)
            VLS = HRTOECPSL(CURIYR,NERC,M,D,H) ! ECP VERTI9CAL LOAD SLICE
            JVLS = MAPVLS(VLS,IGRP,NERC,YEAR) 
            LVLS = MAX(VLS,1)
            DEM_ADJ = UEITAJ_ECP(ISP,NERC) - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76 
                   
!           CALCULATE NET LOAD BY SUBTRACTING OUT INTERMITTENT CAPACITY AND STORAGE CAPACITY
            LOAD_LDC(I_864) = DUCK_SYSTEM_LOAD(M,D,H,NERC,CURIYR) - PV_CAP_ADJ(NERC) * WSSPVEL_CF(NERC,CURIYR,d,m,h) - &
               PT_CAP_ADJ(NERC) * WSSPTEL_CF(NERC,CURIYR,d,m,h) - &
               SO_CAP_ADJ(NERC) * WSSSTEL_CF(NERC,CURIYR,d,m,h) - &
               WN_CAP_ADJ(NERC) * WSFWIEL_CF(NERC,CURIYR,d,m,h) - &
               WF_CAP_ADJ(NERC) * WSFWFEL_CF(NERC,CURIYR,d,m,h) + DEM_ADJ
            
            DINURAL_STORAGE_INDEX = 68
            
            ! STOLEVEL_TERM IS OVER THE REGION
            STOLEVEL_TERM(DINURAL_STORAGE_INDEX,M,D,H) = ENERGY_STORED_HOURLY(NERC,13,M,D,H) ! ETYPE = 13
            
            ! ENERGY_STORED(1,NERC,DINURAL_STORAGE_INDEX,M,D,H) ! STOLVEL(STEP (1: FIRST PASS, 2: 2ND PASS),MNUMNR,ECP_D_CAP,12,3,24)
            NET_LOAD_STG(I_864) = LOAD_LDC(I_864) - STOLEVEL_TERM(DINURAL_STORAGE_INDEX,M,D,H)

         END DO ! DO I_864 = 1 , 864
         
         ALLOCATE(RAW_DATA(864))
         
         DO I = 1, 864
            RAW_DATA(I) = LOAD_LDC(I)
         END DO
         
         CALL QUICKSORT(1,864)

         DO I = 1, 864
            LOAD_LDC_SORTED(I) = RAW_DATA(I)
         END DO
         
         DEALLOCATE(RAW_DATA)
         
         ALLOCATE(RAW_DATA(864))
         
         DO I = 1, 864
            RAW_DATA(I) = NET_LOAD_STG(I)
         END DO
         
         CALL QUICKSORT(1,864)

         DO I = 1, 864
            NET_LOAD_STG_SORTED(I) = RAW_DATA(I)
         END DO
         
         DEALLOCATE(RAW_DATA)
         
         LOAD_LDC_VAL = 0.0
         NET_LOAD_STG_VAL = 0.0 
         
         DO I = 864-7,864 ! LAST 8 CORRESPOND TO TOP 1% OF HOURS IN 864 INDEX
			
            LOAD_LDC_VAL = LOAD_LDC_VAL + LOAD_LDC_SORTED(I)
            NET_LOAD_STG_VAL = NET_LOAD_STG_VAL + NET_LOAD_STG_SORTED(I)
         END DO
         
         DEM = ABS(LOAD_LDC_VAL)/ 8
         NUM = ABS(NET_LOAD_STG_VAL)/ 8
         
         CAPACITY_CREDIT = NUM/DEM ! AVERAGE DIFFERENCE BETWEEN THE TOP AND LOWER AREA UNDER THE LOAD AND NET_LOAD CURVES
         
         IF (CAPACITY_CREDIT .GT. 1.0) THEN 
            CAPACITY_CREDIT = 1.0
         ELSE IF (CAPACITY_CREDIT .LT. 0.0) THEN 
            CAPACITY_CREDIT = 0.0
         END IF 
         
!         WRITE(894514, *) CURIYR+1989,",",NERC,",", CAPACITY_CREDIT,",", NUM,",",DEM
         
         WRITE(18,6543) CURIRUN, CURIYR+1989, NERC, CAPACITY_CREDIT, NUM, DEM
 6543             FORMAT(1X,"DS_CAP_CREDIT",3(":",I4),3(":",F21.6))
         
         DINURAL_STORAGE_CAPACITY_CREDIT(CURIYR, NERC) = CAPACITY_CREDIT
      END DO ! DO NERC = 1 , UNRGNS
      
!      CLOSE(894514)

      RETURN
      END

      
      SUBROUTINE CAP_CREDIT

!     use ecp_row_col

!     CALCULATE INTERMITTENT CAPACITY CREDIT

      IMPLICIT NONE

      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'ecp_nuc'
      include 'bildin'
      include 'dispin'
      include 'dispett'
      include 'dispuse'
      include 'macout'
      include 'wrenew'
      include 'emoblk'
      include 'emission'
      include 'cdsparms'
      include 'uso2grp'
      include 'eusprc'
      include 'edbdef'
      include 'coalemm'
      include 'csapr'
      include 'e111d'
      include 'dsmdimen'
      include 'dsmtfecp'
      include 'dsmtoefd'
      include 'dsmcaldr'
      include 'uefdout'
      include 'entcntl'
      include 'wwind'

      INTEGER*4 NERC, YEAR, ISP, IGRP, VLS, JVLS, JVLS_CNT(MAXECPB), LVLS, m, d, h, IRET, VLSMAP(ECP_D_VLS,ECP_D_MSP,MNUMNR,ECP_D_XPH), MAPVLS(ECP_D_VLS,MAXECPB,MNUMNR,ECP_D_XPH)
      INTEGER*4 MAP_864_MONTH(12*3*24), MAP_864_DAYTYPE(12*3*24), MAP_864_HOUR(12*3*24), RANK_864_F(MNUMNR), RANK_864_N(12*3*24,MNUMNR), I_864, J_864, K_864, L_864
      REAL*8 TEST_LOAD, NET_LOAD(12*3*24,MNUMNR)
      REAL*8 SHOURS(ECP_D_VLS,MAXECPB)
      REAL*8 DEM_ADJ
      REAL*8 MAX_PEAK_LOAD(MNUMNR), AVG_PEAK_LOAD(MNUMNR), ABS_PEAK_LOAD(MNUMNR)

      INTEGER*4	INT, I_ECP

      REAL*8 VARIANCE_CNV(ECP_D_CAP)             ! Standard Deviation = SQRT(VARIANCE)
      REAL*8 VARIANCE_INT(ECP_D_CAP)             ! Standard Deviation = SQRT(VARIANCE)
      REAL*8 NUMBER(ECP_D_CAP)               ! Estimated Number of Units - Total Capacity divided by Standard Unit Size
      REAL*8 VAR_CONV, VAR_INT, VAR_TOTAL, VAR_CONV_INT
      REAL*8 CAPFAC(ECP_D_INT), PARM_CCRED, MAX_DELTA, WGHT, TOT_WGHT, MAX_NET_LOAD, T_CCRED, CCRED(ECP_D_INT)
      REAL*8 CAP_AVG(ECP_D_CAP)              ! Total annual average capacity for each ECP type
      REAL*8 CAP_CONV, CAP_TOTAL, CAP_INT, CAP_REL_TOTAL, CAP_REL_CONV


!     INITIALIZE SEASONAL PEAKS AND HOURS PER SEASON

      DO YEAR = 1 , UNXPH
         DO NERC = 1 , UNRGNS
            SHOURS = 0
            JVLS_CNT = 0
            CALL GETBLD(1,NERC)
            DO ISP = 1 , EPNMSP
               DO VLS = 1 , EPNSTP(YEAR)
                  VLSMAP(VLS,ISP,NERC,YEAR) = 0
               END DO
            END DO
            DO IGRP = 1 , EPNGRP
               DO VLS = 1 , EPNSTP(YEAR)
                  MAPVLS(VLS,IGRP,NERC,YEAR) = 0
               END DO
            END DO

!           DETERMINE CAPACITY FACTOR AT EACH LOAD STEP

            DO ISP = 1 , EPNMSP
               VLS = EPFRST(ISP,YEAR)
               DO WHILE (VLS .GT. 0)
                  IGRP = EPLDGR(VLS,YEAR)
                  JVLS_CNT(IGRP) = JVLS_CNT(IGRP) + 1
                  VLSMAP(JVLS_CNT(IGRP),ISP,NERC,YEAR) = VLS
                  MAPVLS(VLS,IGRP,NERC,YEAR) = JVLS_CNT(IGRP)

                  WRITE(18,9317) curirun, curiyr+1989, curiyr+year+1988, nerc, isp, vls, igrp, jvls_cnt(igrp)
 9317             FORMAT(1X,"VLSMAP_INFO",8(",",I6))

                  VLS = EPNEXT(VLS,YEAR)
               END DO
            END DO
            CALL STRBLD(1,NERC)
         END DO
      END DO

!     Map month, daytype and hour to 864 index

      I_864 = 0
      DO m = 1 , 12
         DO d = 1 , 3
            DO h = 1 , 24
               I_864 = I_864 + 1
               MAP_864_MONTH(I_864) = m
               MAP_864_DAYTYPE(I_864) = d
               MAP_864_HOUR(I_864) = h
            END DO
         END DO
      END DO

!     Collect Info to Calculate Intermittent Capacity Credit

      YEAR = 1
      NET_LOAD = 0.0
      RANK_864_F = 1
      RANK_864_N = 0
      ABS_PEAK_LOAD = 0.0

      DO NERC = 1 , UNRGNS

         CALL GETBLD(1,NERC)

         DO I_864 = 1 , 864
            m = MAP_864_MONTH(I_864)
            d = MAP_864_DAYTYPE(I_864)
            h = MAP_864_HOUR(I_864)
            IGRP = HRtoECPgrp(m,d,h)
            ISP = EPGECP(IGRP)
            VLS = HRTOECPSL(CURIYR,NERC,m,d,h)
            JVLS = MAPVLS(VLS,IGRP,NERC,YEAR)
            LVLS = max(VLS,1)
            DEM_ADJ = UEITAJ_ECP(ISP,NERC) - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76
            ABS_PEAK_LOAD(NERC) = MAX(ABS_PEAK_LOAD(NERC) , DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR))
                   
!           Calculate net load by subtracting out intermittent capacity and storage capacity

            NET_LOAD(I_864,NERC) = DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR) - &
               PV_CAP_ADJ(NERC) * WSSPVEL_CF(NERC,CURIYR,d,m,h) - &
               PT_CAP_ADJ(NERC) * WSSPTEL_CF(NERC,CURIYR,d,m,h) - &
               SO_CAP_ADJ(NERC) * WSSSTEL_CF(NERC,CURIYR,d,m,h) - &
               WN_CAP_ADJ(NERC) * WSFWIEL_CF(NERC,CURIYR,d,m,h) - &
               WF_CAP_ADJ(NERC) * WSFWFEL_CF(NERC,CURIYR,d,m,h) + &
               DEM_ADJ

            TEST_LOAD = NET_LOAD(RANK_864_F(NERC),NERC)
            L_864 = RANK_864_F(NERC)

            IF (I_864 .EQ. 1) THEN
               K_864 = 1

               IF (CURIYR+1989 .EQ. 2017 .OR. CURIYR+1989 .EQ. 2020 .OR. CURIYR+1989 .EQ. 2025 .OR. CURIYR+1989 .EQ. 2030 .OR. CURIYR+1989 .EQ. 2035 .OR. CURIYR+1989 .EQ. 2040 .OR. CURIYR+1989 .EQ. 2045) THEN
                  WRITE(18,3392) CURIRUN, NERC, CURIYR+1989, K_864, 0, 0, RANK_864_F(NERC), 0, I_864, RANK_864_N(I_864,NERC), m, d, h, IDAYTQ(d,m), &
                      DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), NET_LOAD(I_864,NERC), TEST_LOAD, &
                      PV_CAP_ADJ(NERC), WSSPVEL_CF(NERC,CURIYR,d,m,h), PT_CAP_ADJ(NERC), WSSPTEL_CF(NERC,CURIYR,d,m,h), SO_CAP_ADJ(NERC), WSSSTEL_CF(NERC,CURIYR,d,m,h), &
                      WN_CAP_ADJ(NERC), WSFWIEL_CF(NERC,CURIYR,d,m,h), WL_CAP_ADJ(NERC), WSFWLEL_CF(NERC,CURIYR,d,m,h), WF_CAP_ADJ(NERC), WSFWFEL_CF(NERC,CURIYR,d,m,h), &
                      DEM_ADJ, EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR)
               END IF

            ELSE IF (NET_LOAD(I_864,NERC) .GE. TEST_LOAD) THEN
               RANK_864_N(I_864,NERC) = RANK_864_F(NERC)
               RANK_864_F(NERC) = I_864
               K_864 = 1

               IF (CURIYR+1989 .EQ. 2017 .OR. CURIYR+1989 .EQ. 2020 .OR. CURIYR+1989 .EQ. 2025 .OR. CURIYR+1989 .EQ. 2030 .OR. CURIYR+1989 .EQ. 2035 .OR. CURIYR+1989 .EQ. 2040 .OR. CURIYR+1989 .EQ. 2045) THEN
                  WRITE(18,3392) CURIRUN, NERC, CURIYR+1989, K_864, 1, 0, RANK_864_F(NERC), 0, I_864, RANK_864_N(I_864,NERC), m, d, h, IDAYTQ(d,m), &
                      DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), NET_LOAD(I_864,NERC), TEST_LOAD, &
                      PV_CAP_ADJ(NERC), WSSPVEL_CF(NERC,CURIYR,d,m,h), PT_CAP_ADJ(NERC), WSSPTEL_CF(NERC,CURIYR,d,m,h), SO_CAP_ADJ(NERC), WSSSTEL_CF(NERC,CURIYR,d,m,h), &
                      WN_CAP_ADJ(NERC), WSFWIEL_CF(NERC,CURIYR,d,m,h), WL_CAP_ADJ(NERC), WSFWLEL_CF(NERC,CURIYR,d,m,h), WF_CAP_ADJ(NERC), WSFWFEL_CF(NERC,CURIYR,d,m,h), &
                      DEM_ADJ, EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR)
               END IF
               
            ELSE IF (RANK_864_N(RANK_864_F(NERC),NERC) .EQ. 0) THEN
               RANK_864_N(RANK_864_F(NERC),NERC) = I_864
               K_864 = 1

               IF (CURIYR+1989 .EQ. 2017 .OR. CURIYR+1989 .EQ. 2020 .OR. CURIYR+1989 .EQ. 2025 .OR. CURIYR+1989 .EQ. 2030 .OR. CURIYR+1989 .EQ. 2035 .OR. CURIYR+1989 .EQ. 2040 .OR. CURIYR+1989 .EQ. 2045) THEN
                  WRITE(18,3392) CURIRUN, NERC, CURIYR+1989, K_864, 2, 0, RANK_864_F(NERC), 0, I_864, RANK_864_N(I_864,NERC), m, d, h, IDAYTQ(d,m), &
                      DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), NET_LOAD(I_864,NERC), TEST_LOAD, &
                      PV_CAP_ADJ(NERC), WSSPVEL_CF(NERC,CURIYR,d,m,h), PT_CAP_ADJ(NERC), WSSPTEL_CF(NERC,CURIYR,d,m,h), SO_CAP_ADJ(NERC), WSSSTEL_CF(NERC,CURIYR,d,m,h), &
                      WN_CAP_ADJ(NERC), WSFWIEL_CF(NERC,CURIYR,d,m,h), WL_CAP_ADJ(NERC), WSFWLEL_CF(NERC,CURIYR,d,m,h), WF_CAP_ADJ(NERC), WSFWFEL_CF(NERC,CURIYR,d,m,h), &
                      DEM_ADJ, EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR)
               END IF
               
            ELSE
               J_864 = RANK_864_N(RANK_864_F(NERC),NERC)
               L_864 = RANK_864_F(NERC)
               K_864 = 0

               DO WHILE (J_864 .GT. 0 .AND. K_864 .LE. I_864)
                  K_864 = K_864 + 1
                  TEST_LOAD = NET_LOAD(J_864,NERC)
                  IF (NET_LOAD(I_864,NERC) .GE. TEST_LOAD) THEN
                     RANK_864_N(L_864,NERC) = I_864
                     RANK_864_N(I_864,NERC) = J_864

                     IF (CURIYR+1989 .EQ. 2017 .AND. NERC .EQ. 1 .AND. I_864 .LE. 48) THEN
                        WRITE(18,3392) CURIRUN, NERC, CURIYR+1989, K_864, 3, J_864, RANK_864_F(NERC), L_864, I_864, RANK_864_N(I_864,NERC), m, d, h, IDAYTQ(d,m), &
                            DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), NET_LOAD(I_864,NERC), TEST_LOAD, &
                            PV_CAP_ADJ(NERC), WSSPVEL_CF(NERC,CURIYR,d,m,h), PT_CAP_ADJ(NERC), WSSPTEL_CF(NERC,CURIYR,d,m,h), SO_CAP_ADJ(NERC), WSSSTEL_CF(NERC,CURIYR,d,m,h), &
                            WN_CAP_ADJ(NERC), WSFWIEL_CF(NERC,CURIYR,d,m,h), WL_CAP_ADJ(NERC), WSFWLEL_CF(NERC,CURIYR,d,m,h), WF_CAP_ADJ(NERC), WSFWFEL_CF(NERC,CURIYR,d,m,h), &
                            DEM_ADJ, EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR)
                     END IF

                     J_864 = 0
                  ELSE IF (RANK_864_N(J_864,NERC) .EQ. 0) THEN
                     RANK_864_N(J_864,NERC) = I_864
      
                     IF (CURIYR+1989 .EQ. 2017 .AND. NERC .EQ. 1 .AND. I_864 .LE. 48) THEN
                        WRITE(18,3392) CURIRUN, NERC, CURIYR+1989, K_864, 4, J_864, RANK_864_F(NERC), L_864, I_864, RANK_864_N(I_864,NERC), m, d, h, IDAYTQ(d,m), &
                            DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), NET_LOAD(I_864,NERC), TEST_LOAD, &
                            PV_CAP_ADJ(NERC), WSSPVEL_CF(NERC,CURIYR,d,m,h), PT_CAP_ADJ(NERC), WSSPTEL_CF(NERC,CURIYR,d,m,h), SO_CAP_ADJ(NERC), WSSSTEL_CF(NERC,CURIYR,d,m,h), &
                            WN_CAP_ADJ(NERC), WSFWIEL_CF(NERC,CURIYR,d,m,h), WL_CAP_ADJ(NERC), WSFWLEL_CF(NERC,CURIYR,d,m,h), WF_CAP_ADJ(NERC), WSFWFEL_CF(NERC,CURIYR,d,m,h), &
                            DEM_ADJ, EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR)
                     END IF
   
                     J_864 = 0

                  ELSE
                     L_864 = J_864
                     J_864 = RANK_864_N(J_864,NERC)

                     IF (CURIYR+1989 .EQ. 2017 .AND. NERC .EQ. 1 .AND. I_864 .LE. 48) THEN
                        WRITE(18,3392) CURIRUN, NERC, CURIYR+1989, K_864, 5, J_864, RANK_864_F(NERC), L_864, I_864, RANK_864_N(I_864,NERC), m, d, h, IDAYTQ(d,m), &
                            DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), NET_LOAD(I_864,NERC), TEST_LOAD, &
                            PV_CAP_ADJ(NERC), WSSPVEL_CF(NERC,CURIYR,d,m,h), PT_CAP_ADJ(NERC), WSSPTEL_CF(NERC,CURIYR,d,m,h), SO_CAP_ADJ(NERC), WSSSTEL_CF(NERC,CURIYR,d,m,h), &
                            WN_CAP_ADJ(NERC), WSFWIEL_CF(NERC,CURIYR,d,m,h), WL_CAP_ADJ(NERC), WSFWLEL_CF(NERC,CURIYR,d,m,h), WF_CAP_ADJ(NERC), WSFWFEL_CF(NERC,CURIYR,d,m,h), &
                            DEM_ADJ, EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR)
                     END IF

                  END IF
               END DO

               IF ( CURIYR+1989 .LE. 2025 .OR. CURIYR+1989 .EQ. 2030 .OR. CURIYR+1989 .EQ. 2035 .OR. CURIYR+1989 .EQ. 2040 .OR. CURIYR+1989 .EQ. 2045) THEN
                  WRITE(18,3392) CURIRUN, NERC, CURIYR+1989, K_864, 9, J_864, RANK_864_F(NERC), L_864, I_864, RANK_864_N(I_864,NERC), m, d, h, IDAYTQ(d,m), &
                      DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), NET_LOAD(I_864,NERC), TEST_LOAD, &
                      PV_CAP_ADJ(NERC), WSSPVEL_CF(NERC,CURIYR,d,m,h), PT_CAP_ADJ(NERC), WSSPTEL_CF(NERC,CURIYR,d,m,h), SO_CAP_ADJ(NERC), WSSSTEL_CF(NERC,CURIYR,d,m,h), &
                      WN_CAP_ADJ(NERC), WSFWIEL_CF(NERC,CURIYR,d,m,h), WL_CAP_ADJ(NERC), WSFWLEL_CF(NERC,CURIYR,d,m,h), WF_CAP_ADJ(NERC), WSFWFEL_CF(NERC,CURIYR,d,m,h), &
                      DEM_ADJ, EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR)
 3392              FORMAT(1X,"NET_LOAD_CHRON",14(",",I4),18(",",F16.6))
               END IF

            END IF
            IF (CURIYR+1989 .EQ. 2017 .AND. NERC .EQ. 1 .AND. I_864 .LE. 48) THEN
               J_864 = RANK_864_F(NERC)
               K_864 = 1
               DO WHILE (J_864 .GT. 0 .AND. K_864 .LE. I_864) 

                  WRITE(18,4392) CURIRUN, NERC, CURIYR+1989, I_864, K_864, J_864, NET_LOAD(J_864,NERC), NET_LOAD(I_864,NERC)
 4392             FORMAT(1X,"NET_LOAD_DETAIL",6(",",I4),2(",",F16.6))

                  J_864 = RANK_864_N(J_864,NERC)
                  K_864 = K_864 + 1
               END DO
            END IF
         END DO

         CALL STRBLD(1,NERC)

      END DO

      YEAR = 1

      DO NERC = 1 , UNRGNS

         CALL GETBLD(1,NERC)

         PARM_CCRED = 5.0
         MAX_DELTA = 0.10
              
         I_864 = RANK_864_F(NERC)
         K_864 = 0
         MAX_NET_LOAD = NET_LOAD(I_864,NERC)
         TOT_WGHT = 0.0
         CCRED = 0.0
         MAX_PEAK_LOAD(NERC) = 0.0
         AVG_PEAK_LOAD(NERC) = 0.0

         DO WHILE (I_864 .GT. 0 .AND. K_864 .LE. 864)
            K_864 = K_864 + 1
            m = MAP_864_MONTH(I_864)
            d = MAP_864_DAYTYPE(I_864)
            h = MAP_864_HOUR(I_864)
            IGRP = HRtoECPgrp(m,d,h)
            ISP = EPGECP(IGRP)
            VLS = HRTOECPSL(CURIYR,NERC,m,d,h)
            JVLS = MAPVLS(VLS,IGRP,NERC,YEAR)
            LVLS = max(VLS,1)
            DEM_ADJ = UEITAJ_ECP(ISP,NERC) - BTCOGEN(NERC) / 8.76 + BMEXICAN(NERC) / 8.76

            WGHT = (NET_LOAD(I_864,NERC) / MAX_NET_LOAD) ** PARM_CCRED
            IF (WGHT .GE. (1.0 - MAX_DELTA)) THEN
               MAX_PEAK_LOAD(NERC) = MAX(MAX_PEAK_LOAD(NERC) , DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR))
               AVG_PEAK_LOAD(NERC) = AVG_PEAK_LOAD(NERC) + (DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR) * WGHT * IDAYTQ(d,m))
               TOT_WGHT = TOT_WGHT + WGHT * IDAYTQ(d,m)
               VARIANCE_INT = 0.0
               VARIANCE_CNV = 0.0
               NUMBER = 0.0
               VAR_CONV = 0.0
               VAR_INT = 0.0
               CAP_AVG = 0.0

               DO INT = 1 , ECP_D_INT
                  I_ECP = UCPINTI(INT)
                  IF (I_ECP .EQ. WIWN) THEN
                     CAPFAC(INT) = WSFWIEL_CF(NERC,CURIYR,d,m,h)
                  ELSE IF (I_ECP .EQ. WIWL) THEN
                     CAPFAC(INT) = WSFWLEL_CF(NERC,CURIYR,d,m,h)
                  ELSE IF (I_ECP .EQ. WIWF) THEN
                     CAPFAC(INT) = WSFWFEL_CF(NERC,CURIYR,d,m,h)
                  ELSE IF (I_ECP .EQ. WISO) THEN
                     CAPFAC(INT) = WSSSTEL_CF(NERC,CURIYR,d,m,h)
                  ELSE IF (I_ECP .EQ. WISS) THEN
                     CAPFAC(INT) = WSSSTEL_CF(NERC,CURIYR,d,m,h)
                  ELSE IF (I_ECP .EQ. WIS2) THEN
                     CAPFAC(INT) = WSSSTEL_CF(NERC,CURIYR,d,m,h)
                  ELSE IF (I_ECP .EQ. WIPV) THEN
                     CAPFAC(INT) = WSSPVEL_CF(NERC,CURIYR,d,m,h)
                  ELSE IF (I_ECP .EQ. WIPT) THEN
                     CAPFAC(INT) = WSSPTEL_CF(NERC,CURIYR,d,m,h)
                  ELSE 
                     CAPFAC(INT) = EPICFC(INT,1)
                  END IF
                  CAPFAC(INT) = MIN(MAX(0.001 , CAPFAC(INT)),0.999)
               END DO

               DO I_ECP = 1 , ECP_D_CAP
                  INT = UCPINTIS(I_ECP)
                  NUMBER(I_ECP) = EPECAP(0,I_ECP,1) / UPMSSIZ(I_ECP)
                  IF (EPECAP(0,I_ECP,1) .GT. 0.0) THEN
                     IF (UCPINTIS(I_ECP) .EQ. 0) THEN
                        VARIANCE_CNV(I_ECP) = (EPECAP(0,I_ECP,1) ** 2) * ((UPFORT(I_ECP) * (1.0 - UPFORT(I_ECP))) / NUMBER(I_ECP))
                        VAR_CONV = VAR_CONV + VARIANCE_CNV(I_ECP)
                        CAP_AVG(I_ECP) = EPECAP(0,I_ECP,1) * (1.0 - UPFORT(I_ECP))
                        CAP_CONV = CAP_CONV + CAP_AVG(I_ECP)
                        CAP_TOTAL = CAP_TOTAL + CAP_AVG(I_ECP)

                        WRITE(18,6001) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                           VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), CAP_AVG(I_ECP), UPINTZ, UPFORT(I_ECP)
 6001                   FORMAT(1X,"VARIANCE_CONV",5(",",I4),10(",",F21.6))

                     ELSE

                        VARIANCE_INT(I_ECP) = (((1.0 - INTREGCRL(NERC,INT)) * NUMBER(I_ECP)) + INTREGCRL(NERC,INT) * (NUMBER(I_ECP) ** 2)) * (INTSTDDV(NERC,INT) * UPMSSIZ(I_ECP)) ** 2

                        IF ((UPINTZ * SQRT(VARIANCE_INT(I_ECP))) .GT. (EPECAP(0,I_ECP,1) * CAPFAC(INT) )) VARIANCE_INT(I_ECP) = ((EPECAP(0,I_ECP,1) * CAPFAC(UCPINTIS(I_ECP)) ) / UPINTZ) ** 2
   
                        VARIANCE_CNV(I_ECP) = (EPECAP(0,I_ECP,1) ** 2) * ((CAPFAC(INT) * (1.0 - CAPFAC(INT))) / NUMBER(I_ECP))
                        CAP_AVG(I_ECP) = EPECAP(0,I_ECP,1) * CAPFAC(INT)

                        IF (I_ECP .EQ. WIWN) THEN
                           WRITE(18,6002) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1) * 0.001, WN_CAP_ADJ(NERC), CAPFAC(INT), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                              VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), INTREGCRL(NERC,INT), INTSTDDV(NERC,INT), CAP_AVG(I_ECP), UPINTZ
                        ELSE IF (I_ECP .EQ. WIWL) THEN
                           WRITE(18,6002) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1) * 0.001, WL_CAP_ADJ(NERC), CAPFAC(INT), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                              VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), INTREGCRL(NERC,INT), INTSTDDV(NERC,INT), CAP_AVG(I_ECP), UPINTZ
                        ELSE IF (I_ECP .EQ. WIWF) THEN
                           WRITE(18,6002) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1) * 0.001, WF_CAP_ADJ(NERC), CAPFAC(INT), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                              VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), INTREGCRL(NERC,INT), INTSTDDV(NERC,INT), CAP_AVG(I_ECP), UPINTZ
                        ELSE IF (I_ECP .EQ. WISO) THEN
                           WRITE(18,6002) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1) * 0.001, SO_CAP_ADJ(NERC), CAPFAC(INT), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                              VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), INTREGCRL(NERC,INT), INTSTDDV(NERC,INT), CAP_AVG(I_ECP), UPINTZ
                        ELSE IF (I_ECP .EQ. WISS) THEN
                           WRITE(18,6002) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1) * 0.001, EPECAP(0,I_ECP,1) * 0.001, CAPFAC(INT), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                              VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), INTREGCRL(NERC,INT), INTSTDDV(NERC,INT), CAP_AVG(I_ECP), UPINTZ
                        ELSE IF (I_ECP .EQ. WIS2) THEN
                           WRITE(18,6002) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1) * 0.001, EPECAP(0,I_ECP,1) * 0.001, CAPFAC(INT), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                              VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), INTREGCRL(NERC,INT), INTSTDDV(NERC,INT), CAP_AVG(I_ECP), UPINTZ
                        ELSE IF (I_ECP .EQ. WIPV) THEN
                           WRITE(18,6002) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1) * 0.001, PV_CAP_ADJ(NERC), CAPFAC(INT), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                              VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), INTREGCRL(NERC,INT), INTSTDDV(NERC,INT), CAP_AVG(I_ECP), UPINTZ
                        ELSE IF (I_ECP .EQ. WIPT) THEN
                           WRITE(18,6002) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1) * 0.001, PT_CAP_ADJ(NERC), CAPFAC(INT), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                           VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), INTREGCRL(NERC,INT), INTSTDDV(NERC,INT), CAP_AVG(I_ECP), UPINTZ
                        ELSE 
                           WRITE(18,6002) CURIRUN, CURIYR+1989, NERC, I_ECP, INT, EPECAP(0,I_ECP,1) * 0.001, EPECAP(0,I_ECP,1) * 0.001, CAPFAC(INT), UPMSSIZ(I_ECP), NUMBER(I_ECP), &
                              VARIANCE_CNV(I_ECP), SQRT(VARIANCE_CNV(I_ECP)), VARIANCE_INT(I_ECP), SQRT(VARIANCE_INT(I_ECP)), INTREGCRL(NERC,INT), INTSTDDV(NERC,INT), CAP_AVG(I_ECP), UPINTZ
                        END IF
 6002                   FORMAT(1X,"VARIANCE__INT",5(",",I4),13(",",F21.6))

                     END IF
                  END IF
               END DO

               DO INT = 1 , ECP_D_INT
                  CAP_CONV = 0.0
                  CAP_TOTAL = 0.0
                  VAR_TOTAL = 0.0
                  VAR_CONV_INT = 0.0
                  CAP_INT = CAP_AVG(UCPINTI(INT))
                  VAR_INT = VARIANCE_INT(UCPINTI(INT))
                  VAR_TOTAL = VAR_INT
                  DO I_ECP = 1 , ECP_D_CAP
                     CAP_TOTAL = CAP_TOTAL + CAP_AVG(I_ECP)
                     IF (UCPINTIS(I_ECP) .NE. INT) THEN
                        CAP_CONV = CAP_CONV + CAP_AVG(I_ECP)
                        IF (UCPINTIS(I_ECP) .GT. 0) THEN
                           VAR_CONV_INT = VAR_CONV_INT + VARIANCE_CNV(I_ECP)
                        END IF
                        VAR_TOTAL = VAR_TOTAL + VARIANCE_CNV(I_ECP)
                     END IF
                  END DO

                  CAP_REL_TOTAL = CAP_TOTAL - UPINTZ * SQRT(VAR_TOTAL)
                  CAP_REL_CONV = CAP_CONV - UPINTZ * SQRT(VAR_CONV + VAR_CONV_INT)
                  IF (EPECAP(0,UCPINTI(INT),1) .GT. 0.0001) THEN
                     T_CCRED = (CAP_REL_TOTAL - CAP_REL_CONV) / EPECAP(0,UCPINTI(INT),1)
                     CCRED(INT) = CCRED(INT) + T_CCRED * WGHT * IDAYTQ(d,m)
                  ELSE
                     T_CCRED = CAPFAC(INT)
                     CCRED(INT) = CCRED(INT) + T_CCRED * WGHT * IDAYTQ(d,m)
                  END IF
           
                  WRITE(18,6003) CURIRUN, CURIYR+1989, NERC, INT, m, d, h, I_864, NET_Load(I_864,NERC), VAR_TOTAL, VAR_CONV, VAR_CONV_INT, VAR_INT, SQRT(VAR_TOTAL), SQRT(VAR_CONV + VAR_CONV_INT), UPINTZ, &
                     CAP_CONV, CAP_INT, CAP_TOTAL, EPECAP(0,UCPINTI(INT),1), CAP_REL_TOTAL, CAP_REL_CONV, WGHT*IDAYTQ(d,m), T_CCRED, CAPFAC(INT), WGHT, IDAYTQ(d,m)
 6003             FORMAT(1X,"VAR_TOTAL",8(":",I4),18(":",F21.6),":",I4)

               END DO


               IF ( CURIYR+1989 .LE. 2025 .OR. CURIYR+1989 .EQ. 2030 .OR. CURIYR+1989 .EQ. 2035 .OR. CURIYR+1989 .EQ. 2040 .OR. CURIYR+1989 .EQ. 2045) THEN
                  WRITE(18,3391) CURIRUN, NERC, CURIYR+1989, YEAR, K_864, I_864, m, d, h, IDAYTQ(d,m), IGRP, ISP, JVLS, HRTOEFDSL(NERC,m,d,h), VLS, IGRP, MAPVLS(VLS,IGRP,NERC,YEAR), DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), &
                     NET_LOAD(I_864,NERC), PV_CAP_ADJ(NERC), WSSPVEL_CF(NERC,CURIYR,d,m,h), PT_CAP_ADJ(NERC), WSSPTEL_CF(NERC,CURIYR,d,m,h), SO_CAP_ADJ(NERC), WSSSTEL_CF(NERC,CURIYR,d,m,h), &
                     WN_CAP_ADJ(NERC), WSFWIEL_CF(NERC,CURIYR,d,m,h), WL_CAP_ADJ(NERC), WSFWLEL_CF(NERC,CURIYR,d,m,h), WF_CAP_ADJ(NERC), WSFWFEL_CF(NERC,CURIYR,d,m,h), &
                     DEM_ADJ, EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR), WGHT*IDAYTQ(d,m)
 3391             FORMAT(1X,"NET_LOAD_SORTED",17(",",I4),17(",",F16.6))
!                 WRITE(18,3391) CURIRUN, NERC, CURIYR+1989, K_864, I_864, m, d, h, IDAYTQ(d,m), IGRP, ISP, JVLS, HRTOEFDSL(NERC,m,d,h), VLSMAP(JVLS,ISP,NERC,1), DUCK_SYSTEM_LOAD(m,d,h,NERC,CURIYR), &
!                    NET_LOAD(I_864,NERC), PV_CAP_ADJ(NERC), WSSPVEL_CF(NERC,CURIYR,d,m,h), PT_CAP_ADJ(NERC), WSSPTEL_CF(NERC,CURIYR,d,m,h), SO_CAP_ADJ(NERC), WSSSTEL_CF(NERC,CURIYR,d,m,h), &
!                    WN_CAP_ADJ(NERC), WSFWIEL_CF(NERC,CURIYR,d,m,h), WL_CAP_ADJ(NERC), WSFWLEL_CF(NERC,CURIYR,d,m,h), WF_CAP_ADJ(NERC), WSFWFEL_CF(NERC,CURIYR,d,m,h), &
!                    DEM_ADJ, EPHGHT(LVLS,YEAR), EPWDTH(LVLS,YEAR), WGHT*IDAYTQ(d,m)
!3391             FORMAT(1X,"NET_LOAD_SORTED",14(",",I4),17(",",F16.6))
               END IF
               I_864 = RANK_864_N(I_864,NERC)
            ELSE
               I_864 = 0
            END IF
         END DO

         DO INT = 1 , ECP_D_INT
			I_ECP = UCPINTI(INT)
            WRITE(18,7391) CURIRUN, NERC, CURIYR+1989, INT, EPIRCCR(UIRINTI(INT)), CCRED(INT), TOT_WGHT, CCRED(INT) / TOT_WGHT, MAX_PEAK_LOAD(NERC), AVG_PEAK_LOAD(NERC) / TOT_WGHT, ABS_PEAK_LOAD(NERC), &
               (EPPEAK(YEAR),YEAR=1,UNXPH)
 7391       FORMAT(1X,"INT_CCRED_Info",4(",",I4),7(",",F21.6),<UNXPH>(",",F21.6))

            EPIRCCR(UIRINTI(INT)) = MIN(1.0 , CCRED(INT) / TOT_WGHT)
            
            !for PV+batt, adding on the storage capacity credit
            IF (I_ECP .EQ. WIPT) THEN
						WRITE(18,7392) CURIRUN, NERC, CURIYR+1989, INT, MIN(DINURAL_STORAGE_CAPACITY_CREDIT(CURIYR,NERC)/3.0 + EPIRCCR(UIRINTI(INT-1)),1.0), &
						MIN(EPIRCCR(UIRINTI(INT)) + DINURAL_STORAGE_CAPACITY_CREDIT(CURIYR,NERC)/3.0, 1.0) , &
						DINURAL_STORAGE_CAPACITY_CREDIT(CURIYR,NERC)
						
                       EPIRCCR(UIRINTI(INT)) = MIN(EPIRCCR(UIRINTI(INT-1)) + DINURAL_STORAGE_CAPACITY_CREDIT(CURIYR,NERC)/3.0, 1.0) 
					7392       FORMAT(1X,"PT_CCRED_Info",4(",",I4),4(",",F21.6))
            END IF
            
         END DO

         EP_NET_PEAK(1) = AVG_PEAK_LOAD(NERC) / TOT_WGHT
         DO YEAR = 2, UNXPH
            EP_NET_PEAK(YEAR) = EPPEAK(YEAR) * EP_NET_PEAK(1) / EPPEAK(1)
         END DO

         CALL STRBLD(1,NERC)

      END DO

      RETURN
      END
      
!     EP$ST_RPS SETS UP STATE LEVEL RENEWABLE PORTFOLIO CONSTRAINTS

      SUBROUTINE EP$ST_RPS
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'uecpout'
      include 'udatout'
	include 'wrenew'
      include 'cogen'
      include 'elout'
      include 'elcntl'
      include 'postpr'
      include 'bildin'
      include 'uefdout'
      include 'eusprc'
      include 'edbdef'
	  
      REAL*8 GRW(MNUMNR)                          ! Calculate Growth Rate Over Last 20  Years of Forecast Horizon - Based of Previous Cycle Results
      REAL*8 DEM(ECP_D_XPH,MNUMNR), TST_REQ         ! Total Sales for each explicit planning period
      REAL*8 DYR(ECP_D_FPH), PVDEM                  ! Variables used to calculate average present value sales for muliple year periods (currently just the last period)
      REAL*8 ONE(ECP_D_FPH), PVONE                  ! Variables used to calculate average present value sales for muliple year periods (currently just the last period)
      REAL*8 PCAP(ECP_D_FPH), PVPCAP                ! Variables used to calculate Alternative Compliance Payment
      REAL*8 PVV, PWF                             ! Present Value Function and Present Worth Function
      REAL*8 VALUE, SHARE                         ! Working Variable
      REAL*8 EX_GEN(MNUMNR,ECP_D_XPH)               ! Estimated generation for existing units that qualify for a state RPS - using ULTGEN_ECP
      REAL*8 GWH(MNUMNR,ECP_D_XPH)                  ! Estimated generation for existing units that qualify for a state RPS - using ULCAPC and EPECFC
      REAL*8 EXBND(MNUMNR,ECP_D_CAP,ECP_D_XPH)        ! Generation for existing units that qualify for a state RPS - value sent as bound - from first tranche if multiple for a state
      REAL*8 SHOURS(ECP_D_MSP,ECP_D_XPH)              ! Hours per season divided by 1000, sums to 8.760
      INTEGER*4 EMM_RG, M_RG, X_RG                ! EMM Region index
      INTEGER*4 I_RPS                             ! Index for each state level RPS tranche
      INTEGER*4 I_ECP                             ! ECP Index
      INTEGER*4 I_WGRP                            ! WGRP Index
      INTEGER*4 TRIAL_AGE                         ! Unit age that qualifies as existing capacity
      INTEGER*4 YEAR, JYR, KYR, LYR               ! Year indexes
      INTEGER*4 I_FL                              ! Traditional Cogen / Distributed Generation Fuel Index
      INTEGER*4 EMM_REQ(ECP_D_XPH,MNUMNR)           ! Logical Array to indicate which EMM regions are intersected by one or more state tranches 0=> no, 1=> yes
      INTEGER*4 TCG_QAL(2,TC_FUELS,MNUMNR)        ! Logical Array to indicate which EMM regions have traditional cogen that qualifies for one or more state tranches, (1 - Grid, 2 - All) 0=> No, 1=> Yes
      INTEGER*4 LeadTime                          ! Period where investment decisions are recorded
      INTEGER*4 IVLS, ISP,IGRP,ISEG,IP
      INTEGER*4 TST_STATES(MNUMNR,0:ECP_D_CAP,0:MX_ST_CODES,ECP_D_XPH) ! Test if multiple tranches apply to the same state, if so, qualified generation can apply to all tranches in the state
      CHARACTER*2 RPS                             ! Alternative way to identify State RPS Tranche using 2 digits instead of 3
      CHARACTER*16 COLUMN, ROW
      REAL*8 DSCRT
      
      REAL*8  DPV_CF, UPV_CF, &
             DPV_CF_FRAC, UPV_CF_FRAC,  &
             DPV_CF_NEW, UPV_CF_NEW

      INTEGER NUMTABS
      PARAMETER (NUMTABS = 4)        ! total number of database tables
!
      LOOPING = 0
      NUMCOLS = 0
      DYNSTM = ' '
      WRTSTM = ' '
      COLVALS = 0.0
      COLV = 0.0
      CHCOLVALS = ' '
      CHCOLV = ' '
      
      ecpsub='EP$ST_RPS'

      SHOURS = 0.0
      DO YEAR = 1, UNXPH
         DO IVLS = 1 , EPNSTP(YEAR)
            ISP = EPGECP(EPLDGR(IVLS,YEAR))
            SHOURS(ISP,YEAR) = SHOURS(ISP,YEAR) + EPWDTH(IVLS,YEAR) * 0.001
         END DO
      END DO

      LeadTime = 2
      DO I_ECP = 1, ECP_D_CAP
         DO EMM_RG = 1, MNUMNR
            ST_RPS_EX_GEN(EMM_RG,I_ECP,CURIYR+LeadTime-1) = 0.0
            ST_RPS_EX_CRD(EMM_RG,I_ECP,CURIYR+LeadTime-1) = 0.0
         END DO
      END DO

      DSCRT = DBLE(AVGDCR)

!     Determine Sales Growth Rate by EMM Region - Average over last 20 years of the forecast horizon

      GRW = 0.0
      DO EMM_RG = 1, UNRGNS
         GRW(EMM_RG) = MAX(1.0,(QELASN(EMM_RG,UNYEAR) / QELASN(EMM_RG,UNYEAR - 20)) ** (1.0 / 20.0))
      END DO      

!     Determine which EMM regions are needed to set up state RPS tranches

      EMM_REQ = 0
      DO I_RPS = 1, NM_ST_RPS
         DO EMM_RG = 1, UNRGNS
            DO YEAR = 2, UNXPH
               IF (ST_RPS_REQ(EMM_RG,I_RPS,CURIYR+YEAR-1) .GT. 0.0) THEN
                  EMM_REQ(YEAR,EMM_RG) = 1
               END IF
            END DO
         END DO
      END DO

      DO JYR = 2, UNFPH
         IF ((CURIYR + JYR - 1) .LE. UNYEAR) THEN
            WRITE(18,3344) CURIRUN, CURCALYR, CURIYR+JYR+1988, (QELASN(EMM_RG,CURIYR + JYR - 1) * 0.001, EMM_RG = 1 , UNRGNS)
 3344       FORMAT(1X,"ST_RPS_EMM_SALES",3(":",I4),<UNRGNS>(":",F21.6))
         ELSE
            WRITE(18,3344) CURIRUN, CURCALYR, CURIYR+JYR+1988, ((QELASN(EMM_RG,UNYEAR) * 0.001) * GRW(EMM_RG) ** FLOAT((CURIYR + JYR - 1) - UNYEAR), EMM_RG = 1 , UNRGNS)
         END IF
      END DO

!     Determine Total Sales by EMM Region and Planning Period

      DEM = 0.0
      DO EMM_RG = 1, UNRGNS
         DO YEAR = 2, UNXPH

            TST_REQ = 0.0
            DO I_RPS = 1, NM_ST_RPS
               TST_REQ = TST_REQ + ST_RPS_REQ(EMM_RG,I_RPS,CURIYR+YEAR-1)
            END DO

            LYR = CURIYR + YEAR - 1
            IF (YEAR .LT. UNXPH) THEN
               IF (LYR .LE. UNYEAR) THEN
                 DEM(YEAR,EMM_RG) = QELASN(EMM_RG,LYR) * 0.001
               ELSE
                 DEM(YEAR,EMM_RG) = (QELASN(EMM_RG,UNYEAR) * 0.001) * GRW(EMM_RG) ** FLOAT(LYR - UNYEAR)
               END IF
            ELSE
               DYR = 0.0
               ONE = 0.0
               PVDEM = 0.0
               PVONE = 1.0
               DO JYR = UNXPH, UNFPH
                  KYR = JYR - UNXPH + 1
                  IF ((CURIYR + JYR - 1) .LE. UNYEAR) THEN
                     DYR(KYR) = QELASN(EMM_RG,CURIYR + JYR - 1) * 0.001
                  ELSE
                     DYR(KYR) = (QELASN(EMM_RG,UNYEAR) * 0.001) * GRW(EMM_RG) ** FLOAT((CURIYR + JYR - 1) - UNYEAR)
                  END IF
                  ONE(KYR) = DBLE(1.0)
               END DO
               PVDEM = PVV(DYR,ECP_D_FPH,UNFPH - UNXPH + 1,DSCRT)
               PVONE = PVV(ONE,ECP_D_FPH,UNFPH - UNXPH + 1,DSCRT)
               DEM(YEAR,EMM_RG) = PVDEM / PVONE
            END IF

            IF (EMM_REQ(YEAR,EMM_RG) .GT. 0 .AND. TST_REQ .GT. 0.0) THEN
               COLUMN = 'G'//UPRGCD(EMM_RG)//'STRPS'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(EMM_RG),':STRPS:',UPYRCD(YEAR))
               CALL CBND(UPBND,COLUMN,DEM(YEAR,EMM_RG),DEM(YEAR,EMM_RG),COLUMN_mask,'EP$ST_RPS,1')
            END IF
         END DO

         WRITE(18,4455) CURIRUN, CURCALYR, EMM_RG, GRW(EMM_RG), DSCRT, (DEM(YEAR,EMM_RG),YEAR=1,UNXPH)
 4455    FORMAT(1X,'ST_RPS_EMM_RG_SALES',3(":",I4),2(":",F21.6),<UNXPH>(":",F21.3))
      END DO

!     ESTABLISH STATE RPS REQUIRMEMENTS AS A FUNCTION OF EMM REGION SALES

      DO I_RPS = 1, NM_ST_RPS
         DO YEAR = 2, UNXPH

            ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))

            CALL CROWTYPE(ROW,'G       ',ROW_mask)
            VALUE = 0.0
            CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ST_RPS,2')

            DO EMM_RG = 1, UNRGNS
               IF (ST_RPS_REQ(EMM_RG,I_RPS,CURIYR+YEAR-1) .GT. 0.0) THEN
                  COLUMN = 'G'//UPRGCD(EMM_RG)//'STRPS'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(EMM_RG),':STRPS:',UPYRCD(YEAR))
                  VALUE = -1.0 * ST_RPS_REQ(EMM_RG,I_RPS,CURIYR+YEAR-1)
                  CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,3')

                  WRITE(18,5455) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_RPS, ST_RPS_TITLE(I_RPS), EMM_RG, COLUMN, ROW, VALUE, DEM(YEAR,EMM_RG)
 5455             FORMAT(1X,'ST_RPS_REQUIRMENTS',4(":",I4),":",A40,":",I4,2(":",A16),2(":",F21.6))
!
!                 Load database table for state rps requirements       
!
                  TNUM = 1
                  IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                   IF (LOOPING(TNUM) .EQ. 0) THEN
                    NUMCOLS(TNUM) = 9
                    DYNSTM(TNUM) =  'INSERT INTO ST_RPS_REQUIREMENTS VALUES(?,?,?,?,?,?,?,?,?,?)'
                    WRTSTM(TNUM) =  'ST_RPS_REQUIREMENTS'
                   ENDIF
                   LOOPING(TNUM) = LOOPING(TNUM) + 1
                   COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
                   COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                          !//EMMDB//
                   COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+YEAR+1988                              !//EMMDB//
                   COLV(TNUM,4,LOOPING(TNUM)) = I_RPS                                         !//EMMDB//
                   COLV(TNUM,5,LOOPING(TNUM)) = EMM_RG                                        !//EMMDB//
                   CHCOLV(TNUM,6,LOOPING(TNUM)) = COLUMN                                        !//EMMDB//
                   CHCOLV(TNUM,7,LOOPING(TNUM)) = ROW                                           !//EMMDB//
                   COLV(TNUM,8,LOOPING(TNUM)) = VALUE                                         !//EMMDB//
                   COLV(TNUM,9,LOOPING(TNUM)) = DEM(YEAR,EMM_RG)                              !//EMMDB//
                   IF (LOOPING(TNUM) .NE. 0) THEN
                     COLVALS(:,:) = COLV(TNUM,:,:)
                     CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                    CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                     LOOPING(TNUM) = 0
                   ENDIF
                 END IF

               END IF
            END DO
         END DO
      END DO

!     IF DG PV IS ADDED TO UTILITY PV, IT MUST BE SUBTRACTED FROM UTILITY PV TO AVOID DOUBLE COUNTING

      IF (DPVDISPATCH) THEN
         DO EMM_RG = 1, UNRGNS
            DO YEAR = 2, UNXPH
               JYR = MIN(CURIYR + YEAR - 1,MNUMYR)
               COLUMN = 'G'//UPRGCD(EMM_RG)//'DG_PV'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(EMM_RG),':DG_PV:',UPYRCD(YEAR))
			   IF (TOT_GEN_RES(UCPINTIS(WIPV),2,EMM_RG,CURIYR) .GT. 0.0) THEN
					VALUE = DPVTOTGENNR(EMM_RG,JYR) * 0.001 * TOT_GEN_RES(UCPINTIS(WIPV),2,EMM_RG,CURIYR)/(CURTAILSUB(UCPINTIS(WIPV),2,EMM_RG,CURIYR) + TOT_GEN_RES(UCPINTIS(WIPV),2,EMM_RG,CURIYR) )
			   ELSE
					VALUE = DPVTOTGENNR(EMM_RG,JYR) * 0.001
			   ENDIF
               
               CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$ST_RPS,4')

               ROW = 'F'//UPRGCD(EMM_RG)//UPLNTCD(WIPV)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(EMM_RG),UPLNTCD(WIPV),':GEN:',UPYRCD(YEAR))

               WRITE(18,5456) CURIRUN, CURCALYR, CURIYR+YEAR+1988, UCPINTIS(WIPV), EMM_RG, COLUMN, ROW, DPVTOTGENNR(EMM_RG,JYR)*0.001, & 
			   CGTOTGENNR(EMM_RG,JYR,F_PV,1)*0.001, CGTOTGENNR(EMM_RG,JYR,F_PV,2)*0.001, &
			   TOT_GEN_RES(UCPINTIS(WIPV),2,EMM_RG,CURIYR)/( CURTAILSUB(UCPINTIS(WIPV),2,EMM_RG,CURIYR) + TOT_GEN_RES(UCPINTIS(WIPV),2,EMM_RG,CURIYR) ), &
			   TOT_GEN_RES(UCPINTIS(WIPV),2,EMM_RG,CURIYR) , CURTAILSUB(UCPINTIS(WIPV),2,EMM_RG,CURIYR), &
                   TOT_GEN_RES(UCPINTIS(WIPV),1,EMM_RG,CURIYR)/( CURTAILSUB(UCPINTIS(WIPV),1,EMM_RG,CURIYR) + TOT_GEN_RES(UCPINTIS(WIPV),1,EMM_RG,CURIYR) ), &
                   TOT_GEN_RES(UCPINTIS(WIPV),1,EMM_RG,CURIYR), CURTAILSUB(UCPINTIS(WIPV),1,EMM_RG,CURIYR)
 5456          FORMAT(1X,'ST_RPS_DPVTOTGENNR',5(":",I4),2(":",A16),9(":",F21.6))

               VALUE = -1.0
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,5')
            END DO
         END DO
      END IF

!     ACCOUNT FOR TRADITIONAL COGEN / END USE DISTRIBUTED GENERATION IN STATE RPS IF QUALIFIED

      TCG_QAL = 0
      DO I_RPS = 1, NM_ST_RPS
         DO EMM_RG = 1, UNRGNS
            YEAR = UNXPH
            IF (ST_RPS_REQ(EMM_RG,I_RPS,CURIYR+YEAR-1) .GT. 0.0) THEN
               DO I_FL = 1, TC_FUELS
                  IF (ST_RPS_CHP(I_FL,I_RPS) .GT. 0.0) THEN
                     IF (ST_RPS_CHP_SW(I_RPS) .EQ. 0) THEN
                        TCG_QAL(1,I_FL,EMM_RG) = 1
                     ELSE
                        TCG_QAL(1,I_FL,EMM_RG) = 1
                        TCG_QAL(2,I_FL,EMM_RG) = 1
                     END IF
                  END IF
                  IF (ST_RPS_DG(I_FL,I_RPS) .GT. 0.0) THEN
                     IF (ST_RPS_DG_SW(I_RPS) .EQ. 0) THEN
                        TCG_QAL(1,I_FL,EMM_RG) = 1
                     ELSE
                        TCG_QAL(1,I_FL,EMM_RG) = 1
                        TCG_QAL(2,I_FL,EMM_RG) = 1
                     END IF
                  END IF
               END DO
            END IF
         END DO
      END DO

      DO EMM_RG = 1, UNRGNS
         DO YEAR = 2, UNXPH
            JYR = MIN(CURIYR + YEAR - 1,MNUMYR)
            DO I_FL = 1, TC_FUELS

               SHARE = 0.0
               DO I_RPS = 1, NM_ST_RPS
                  IF (ST_RPS_REQ(EMM_RG,I_RPS,JYR) .GT. 0.0 .AND. (ST_RPS_CHP(I_FL,I_RPS) .GT. 0.0 .OR. ST_RPS_DG(I_FL,I_RPS) .GT. 0.0)) THEN
                     SHARE = 1.0
                  END IF
               END DO

               IF (SHARE .GT. 0.0) THEN
                  IF (TCG_QAL(1,I_FL,EMM_RG) .EQ. 1 .AND. CGTOTGENNR(EMM_RG,JYR,I_FL,1) .GT. 0.001) THEN
                     COLUMN = 'G' // UPRGCD(EMM_RG) // TC_FUEL_CODES(I_FL) // 'TCG'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(EMM_RG),TC_FUEL_CODES(I_FL),':TCG:',UPYRCD(YEAR))
                     VALUE = CGTOTGENNR(EMM_RG,JYR,I_FL,1) * 0.001
                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$ST_RPS,6')
                  END IF
                  IF (TCG_QAL(2,I_FL,EMM_RG) .EQ. 1 .AND. CGTOTGENNR(EMM_RG,JYR,I_FL,2) .GT. 0.001) THEN
                     COLUMN = 'G' // UPRGCD(EMM_RG) // TC_FUEL_CODES(I_FL) // 'TCO'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(EMM_RG),TC_FUEL_CODES(I_FL),':TCO:',UPYRCD(YEAR))
                     VALUE = CGTOTGENNR(EMM_RG,JYR,I_FL,2) * 0.001
                     CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$ST_RPS,7')
                  END IF
                  IF ((TCG_QAL(1,I_FL,EMM_RG) .EQ. 1 .OR. TCG_QAL(2,I_FL,EMM_RG) .EQ. 1) .AND. (CGTOTGENNR(EMM_RG,JYR,I_FL,1) + CGTOTGENNR(EMM_RG,JYR,I_FL,2)) .GT. 0.0) THEN

                     WRITE(18,6455) CURIRUN, CURCALYR, CURIYR+YEAR+1988, EMM_RG, I_FL, TCG_QAL(1,I_FL,EMM_RG), TCG_QAL(2,I_FL,EMM_RG), TC_FUEL_CODES(I_FL), &
                        CGTOTGENNR(EMM_RG,JYR,I_FL,1) * 0.001, CGTOTGENNR(EMM_RG,JYR,I_FL,2) * 0.001
 6455                FORMAT(1X,'ST_RPS_END_USE',7(":",I4),":",A2,2(":",F21.6))
!
!                    Load database table for state rps end use table         
!
                     TNUM = 2
                     IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                      IF (LOOPING(TNUM) .EQ. 0) THEN
                       NUMCOLS(TNUM) = 10
                       DYNSTM(TNUM) =  'INSERT INTO ST_RPS_END_USE VALUES(?,?,?,?,?,?,?,?,?,?,?)'
                       WRTSTM(TNUM) =  'ST_RPS_END_USE'
                      ENDIF
                      LOOPING(TNUM) = LOOPING(TNUM) + 1
                      COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
                      COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                          !//EMMDB//
                      COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+YEAR+1988                              !//EMMDB//
                      COLV(TNUM,4,LOOPING(TNUM)) = EMM_RG                                        !//EMMDB//
                      COLV(TNUM,5,LOOPING(TNUM)) = I_FL                                          !//EMMDB//
                      CHCOLV(TNUM,6,LOOPING(TNUM)) = TC_FUEL_CODES(I_FL)                           !//EMMDB//
                      COLV(TNUM,7,LOOPING(TNUM)) = TCG_QAL(1,I_FL,EMM_RG)                        !//EMMDB//
                      COLV(TNUM,8,LOOPING(TNUM)) = TCG_QAL(2,I_FL,EMM_RG)                        !//EMMDB//
                      COLV(TNUM,9,LOOPING(TNUM)) = CGTOTGENNR(EMM_RG,JYR,I_FL,1) * 0.001         !//EMMDB//
                      COLV(TNUM,10,LOOPING(TNUM)) = CGTOTGENNR(EMM_RG,JYR,I_FL,2) * 0.001         !//EMMDB//
                      IF (LOOPING(TNUM) .NE. 0) THEN
                        COLVALS(:,:) = COLV(TNUM,:,:)
                        CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                       CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                        CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                        LOOPING(TNUM) = 0
                      ENDIF
                    END IF

                  END IF
               END IF
            END DO
         END DO
      END DO

      DO I_RPS = 1, NM_ST_RPS
         DO YEAR = 2, UNXPH
            JYR = MIN(CURIYR + YEAR - 1,MNUMYR)

            ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))

            DO EMM_RG = 1, UNRGNS
               IF (ST_RPS_REQ(EMM_RG,I_RPS,CURIYR+YEAR-1) .GT. 0.0) THEN
                  DO I_FL = 1, TC_FUELS
                     SHARE = 0.0
                     IF ((ST_RPS_CHP(I_FL,I_RPS) .GT. 0.0 .OR. ST_RPS_DG(I_FL,I_RPS) .GT. 0.0) .AND. H_SALES(0,0,EMM_RG) .GT. 0.0) THEN
                        SHARE = H_SALES(ST_RPS_STnm(I_RPS),0,EMM_RG) / H_SALES(0,0,EMM_RG)
                     END IF
                     IF (ST_RPS_CHP(I_FL,I_RPS) .GT. 0.0) THEN
                        IF (SHARE .GT. 0.0) THEN
                           IF (CGTOTGENNR(EMM_RG,JYR,I_FL,1) .GT. 0.001) THEN
                              COLUMN = 'G' // UPRGCD(EMM_RG) // TC_FUEL_CODES(I_FL) // 'TCG'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(EMM_RG),TC_FUEL_CODES(I_FL),':TCG:',UPYRCD(YEAR))
                              VALUE = SHARE * ST_RPS_CHP(I_FL,I_RPS)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,8')
   
                              WRITE(18,6465) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_RPS, ST_RPS_TITLE(I_RPS), EMM_RG, I_FL, ST_RPS_CHP_SW(I_RPS), TC_FUEL_CODES(I_FL), SHARE, COLUMN, ST_RPS_CHP(I_FL,I_RPS)
!
!                                Load database table for state rps tcogen table         
!
                                 TNUM = 3
                                 IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                                  IF (LOOPING(TNUM) .EQ. 0) THEN
                                   NUMCOLS(TNUM) = 12
                                   DYNSTM(TNUM) =  'INSERT INTO ST_RPS_TCOGEN VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)'
                                   WRTSTM(TNUM) =  'ST_RPS_TCOGEN'
                                  ENDIF
                                  LOOPING(TNUM) = LOOPING(TNUM) + 1
                                  COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
                                  COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                          !//EMMDB//
                                  COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+YEAR+1988                              !//EMMDB//
                                  CHCOLV(TNUM,4,LOOPING(TNUM)) = 'CHP'                                          !//EMMDB//
                                  COLV(TNUM,5,LOOPING(TNUM)) = I_RPS                                         !//EMMDB//
                                  COLV(TNUM,6,LOOPING(TNUM)) = EMM_RG                                        !//EMMDB//
                                  COLV(TNUM,7,LOOPING(TNUM)) = I_FL                                          !//EMMDB//
                                  CHCOLV(TNUM,8,LOOPING(TNUM)) = TC_FUEL_CODES(I_FL)                           !//EMMDB//
                                  COLV(TNUM,9,LOOPING(TNUM)) = ST_RPS_CHP_SW(I_RPS)                          !//EMMDB//
                                  COLV(TNUM,10,LOOPING(TNUM)) = ST_RPS_CHP(I_FL,I_RPS)                        !//EMMDB//
                                  COLV(TNUM,11,LOOPING(TNUM)) = SHARE                                         !//EMMDB//
                                  CHCOLV(TNUM,12,LOOPING(TNUM)) = COLUMN                                        !//EMMDB//
                                  IF (LOOPING(TNUM) .NE. 0) THEN
                                    COLVALS(:,:) = COLV(TNUM,:,:)
                                    CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                                   CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                    CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                    LOOPING(TNUM) = 0
                                  ENDIF
                                END IF

                           END IF

                           IF (ST_RPS_CHP_SW(I_RPS) .EQ. 1) THEN
                              IF (CGTOTGENNR(EMM_RG,JYR,I_FL,2) .GT. 0.001) THEN
                                 COLUMN = 'G' // UPRGCD(EMM_RG) // TC_FUEL_CODES(I_FL) // 'TCO'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(EMM_RG),TC_FUEL_CODES(I_FL),':TCO:',UPYRCD(YEAR))
                                 VALUE = SHARE * ST_RPS_CHP(I_FL,I_RPS)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,9')

                                 WRITE(18,6465) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_RPS, ST_RPS_TITLE(I_RPS), EMM_RG, I_FL, ST_RPS_CHP_SW(I_RPS), TC_FUEL_CODES(I_FL), SHARE, COLUMN, ST_RPS_CHP(I_FL,I_RPS)
 6465                            FORMAT(1X,"ST_RPS_TCOGEN:CHP",4(":",I4),":",A40,3(":",I4),":",A2,":",F21.6,":",A16,2(":",F21.6))
!
!                                Load database table for state rps tcogen table         
!
                                 TNUM = 3
                                 IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                                  IF (LOOPING(TNUM) .EQ. 0) THEN
                                   NUMCOLS(TNUM) = 12
                                   DYNSTM(TNUM) =  'INSERT INTO ST_RPS_TCOGEN VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)'
                                   WRTSTM(TNUM) =  'ST_RPS_TCOGEN'
                                  ENDIF
                                  LOOPING(TNUM) = LOOPING(TNUM) + 1
                                  COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
                                  COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                          !//EMMDB//
                                  COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+YEAR+1988                              !//EMMDB//
                                  CHCOLV(TNUM,4,LOOPING(TNUM)) = 'CHP'                                          !//EMMDB//
                                  COLV(TNUM,5,LOOPING(TNUM)) = I_RPS                                         !//EMMDB//
                                  COLV(TNUM,6,LOOPING(TNUM)) = EMM_RG                                        !//EMMDB//
                                  COLV(TNUM,7,LOOPING(TNUM)) = I_FL                                          !//EMMDB//
                                  CHCOLV(TNUM,8,LOOPING(TNUM)) = TC_FUEL_CODES(I_FL)                           !//EMMDB//
                                  COLV(TNUM,9,LOOPING(TNUM)) = ST_RPS_CHP_SW(I_RPS)                          !//EMMDB//
                                  COLV(TNUM,10,LOOPING(TNUM)) = ST_RPS_CHP(I_FL,I_RPS)                        !//EMMDB//
                                  COLV(TNUM,11,LOOPING(TNUM)) = SHARE                                         !//EMMDB//
                                  CHCOLV(TNUM,12,LOOPING(TNUM)) = COLUMN                                        !//EMMDB//
                                  IF (LOOPING(TNUM) .NE. 0) THEN
                                    COLVALS(:,:) = COLV(TNUM,:,:)
                                    CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                                   CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                    CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                    LOOPING(TNUM) = 0
                                  ENDIF
                                END IF

                              END IF
                           END IF
                        END IF
                     END IF
                     IF (ST_RPS_DG(I_FL,I_RPS) .GT. 0.0) THEN
                        IF (SHARE .GT. 0.0) THEN
                           IF (CGTOTGENNR(EMM_RG,JYR,I_FL,1) .GT. 0.001) THEN
                              COLUMN = 'G' // UPRGCD(EMM_RG) // TC_FUEL_CODES(I_FL) // 'TCG'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(EMM_RG),TC_FUEL_CODES(I_FL),':TCG:',UPYRCD(YEAR))
                              VALUE = SHARE * ST_RPS_DG(I_FL,I_RPS)
                              CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,10')
   
                              WRITE(18,6466) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_RPS, ST_RPS_TITLE(I_RPS), EMM_RG, I_FL, ST_RPS_DG_SW(I_RPS), TC_FUEL_CODES(I_FL), SHARE, COLUMN, ST_RPS_DG(I_FL,I_RPS)
!
!                                Load database table for state rps tcogen table         
!
                                 TNUM = 3
                                 IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                                  IF (LOOPING(TNUM) .EQ. 0) THEN
                                   NUMCOLS(TNUM) = 12
                                   DYNSTM(TNUM) =  'INSERT INTO ST_RPS_TCOGEN VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)'
                                   WRTSTM(TNUM) =  'ST_RPS_TCOGEN'
                                  ENDIF
                                  LOOPING(TNUM) = LOOPING(TNUM) + 1
                                  COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
                                  COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                          !//EMMDB//
                                  COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+YEAR+1988                              !//EMMDB//
                                  CHCOLV(TNUM,4,LOOPING(TNUM)) = 'DG'                                          !//EMMDB//
                                  COLV(TNUM,5,LOOPING(TNUM)) = I_RPS                                         !//EMMDB//
                                  COLV(TNUM,6,LOOPING(TNUM)) = EMM_RG                                        !//EMMDB//
                                  COLV(TNUM,7,LOOPING(TNUM)) = I_FL                                          !//EMMDB//
                                  CHCOLV(TNUM,8,LOOPING(TNUM)) = TC_FUEL_CODES(I_FL)                           !//EMMDB//
                                  COLV(TNUM,9,LOOPING(TNUM)) = ST_RPS_DG_SW(I_RPS)                          !//EMMDB//
                                  COLV(TNUM,10,LOOPING(TNUM)) = ST_RPS_DG(I_FL,I_RPS)                        !//EMMDB//
                                  COLV(TNUM,11,LOOPING(TNUM)) = SHARE                                         !//EMMDB//
                                  CHCOLV(TNUM,12,LOOPING(TNUM)) = COLUMN                                        !//EMMDB//
                                  IF (LOOPING(TNUM) .NE. 0) THEN
                                    CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
                                    COLVALS(:,:) = COLV(TNUM,:,:)
!                                   CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                    CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                    LOOPING(TNUM) = 0
                                  ENDIF
                                END IF


                           END IF
                           IF (ST_RPS_DG_SW(I_RPS) .EQ. 1) THEN
                              IF (CGTOTGENNR(EMM_RG,JYR,I_FL,2) .GT. 0.001) THEN
                                 COLUMN = 'G' // UPRGCD(EMM_RG) // TC_FUEL_CODES(I_FL) // 'TCO'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',UPRGCD(EMM_RG),TC_FUEL_CODES(I_FL),':TCO:',UPYRCD(YEAR))
                                 VALUE = SHARE * ST_RPS_DG(I_FL,I_RPS)
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,11')

                                 WRITE(18,6466) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_RPS, ST_RPS_TITLE(I_RPS), EMM_RG, I_FL, ST_RPS_DG_SW(I_RPS), TC_FUEL_CODES(I_FL), SHARE, COLUMN, ST_RPS_DG(I_FL,I_RPS)
 6466                            FORMAT(1X,"ST_RPS_TCOGEN:DG ",4(":",I4),":",A40,3(":",I4),":",A2,":",F21.6,":",A16,2(":",F21.6))
!
!                                Load database table for state rps tcogen table         
!
                                 TNUM = 3
                                 IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                                  IF (LOOPING(TNUM) .EQ. 0) THEN
                                   NUMCOLS(TNUM) = 12
                                   DYNSTM(TNUM) =  'INSERT INTO ST_RPS_TCOGEN VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)'
                                   WRTSTM(TNUM) =  'ST_RPS_TCOGEN'
                                  ENDIF
                                  LOOPING(TNUM) = LOOPING(TNUM) + 1
                                  COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
                                  COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                          !//EMMDB//
                                  COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+YEAR+1988                              !//EMMDB//
                                  CHCOLV(TNUM,4,LOOPING(TNUM)) = 'DG'                                          !//EMMDB//
                                  COLV(TNUM,5,LOOPING(TNUM)) = I_RPS                                         !//EMMDB//
                                  COLV(TNUM,6,LOOPING(TNUM)) = EMM_RG                                        !//EMMDB//
                                  COLV(TNUM,7,LOOPING(TNUM)) = I_FL                                          !//EMMDB//
                                  CHCOLV(TNUM,8,LOOPING(TNUM)) = TC_FUEL_CODES(I_FL)                           !//EMMDB//
                                  COLV(TNUM,9,LOOPING(TNUM)) = ST_RPS_DG_SW(I_RPS)                          !//EMMDB//
                                  COLV(TNUM,10,LOOPING(TNUM)) = ST_RPS_DG(I_FL,I_RPS)                        !//EMMDB//
                                  COLV(TNUM,11,LOOPING(TNUM)) = SHARE                                         !//EMMDB//
                                  CHCOLV(TNUM,12,LOOPING(TNUM)) = COLUMN                                        !//EMMDB//
                                  IF (LOOPING(TNUM) .NE. 0) THEN
                                    CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
                                    COLVALS(:,:) = COLV(TNUM,:,:)
!                                   CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                    CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                    LOOPING(TNUM) = 0
                                  ENDIF
                                END IF

                              END IF
                           END IF
                        END IF
                     END IF
                  END DO
               END IF
            END DO
         END DO
      END DO

!     Estimate generation from existing units that qualify, take generation from total generation row by EMM region and ECP type and give credit to state RPS

      TST_STATES = 0
      DO I_RPS = 1, NM_ST_RPS
         DO I_ECP = 1, ECP_D_CAP
            IF (UCPINTIS(I_ECP) .GT. 0) IP = I_ECP - ECP_D_DSP - ECP_D_RNW - ECP_D_STO 
            IF (ST_RPS_ECP_EX(I_ECP,I_RPS) .GT. 0.0 .OR. ST_RPS_ECP_NW(I_ECP,I_RPS) .GT. 0.0) THEN   !create exising vector if either exis/new counts
               TRIAL_AGE = CURIYR + UHBSYR - ST_RPS_SYR(I_RPS)
               EX_GEN = 0.0
               GWH = 0.0
               IF (TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) .EQ. 0) EXBND(EMM_RG,I_ECP,YEAR) = 0.0
               DO I_WGRP = 1, EMM_D_GRP
                  IF (I_ECP .EQ. ULECPT(I_WGRP) .AND. ULAGE(I_WGRP) .GE. TRIAL_AGE .AND. ST_RPS_STnm(I_RPS) .EQ. ULSTATE(I_WGRP)) THEN
                     EMM_RG = ULORGN(I_WGRP)

                     CALL GETBLD(1,EMM_RG)

                     DO YEAR = 2, UNXPH
                        IF (I_ECP .EQ. WIHY) THEN
                            DO IVLS = 1 , EPNSTP(YEAR)
                               IGRP = EPLDGR(IVLS,YEAR)
                               ISEG = EPLDSG(IVLS,YEAR)
                               ISP = EPGECP(IGRP)
                             GWH(EMM_RG,YEAR) =  GWH(EMM_RG,YEAR) + ULCAPC(I_WGRP) * (1.0 - UPFORT(I_ECP)) * 0.001 * HY_CF_ECP(ISEG,IGRP,EMM_RG) * EPWDTH(IVLS,YEAR)/1000.0
                            END DO
                        ELSEIF (UCPINTIS(I_ECP) .GT. 0) THEN       !intermittents use CF from restore
                            DO IVLS = 1 , EPNSTP(YEAR)
                               IGRP = EPLDGR(IVLS,YEAR)
                               ISEG = EPLDSG(IVLS,YEAR)
                               ISP = EPGECP(IGRP)
                               IF (I_ECP .EQ. WIPT) THEN
                                   GWH(EMM_RG,YEAR) = GWH(EMM_RG,YEAR) + & 
                                       ULCAPC(I_WGRP) * 0.001 * UPICFC(1,IP,IGRP,ISEG) * EPWDTH(IVLS,YEAR)/1000.0 
                               ELSE IF (I_ECP .EQ. WIPV) THEN ! INCLUDE DPV CF FOR PV CF
                                  UPV_CF_FRAC = UPICFC(1,IP,IGRP,ISEG) / EPIACF(IP)
                                  DPV_CF_FRAC = UPICFC_DPV(1,IP,IGRP,ISEG) / EPIACF(IP)
                                  UPV_CF = EPECFC_UPV(I_ECP,YEAR) * EP_SP_CAP_FAC(ISP,I_ECP,YEAR)
                                  DPV_CF = DPVTOTGENNR(EMM_RG,MIN(CURIYR + YEAR - 1,MNUMYR)) / ( 8.76*DPVTOTCAPNR(EMM_RG,MIN(CURIYR + YEAR - 1,MNUMYR)) )
                                  UPV_CF_NEW = UPV_CF_FRAC * UPV_CF
                                  DPV_CF_NEW = DPV_CF_FRAC * DPV_CF 
                                  ! PV WEIGHTED AVG CF: (DPV CAP * DPV CF + UPV CAP * UPV CF)/(PV CAP)
                                  VALUE = (DPVTOTCAPNR(EMM_RG,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001 * DPV_CF_NEW + &
                                      UPV_CF_NEW * (EPECAP(0,I_ECP,YEAR)*0.001-DPVTOTCAPNR(EMM_RG,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001)) / EPECAP(0,I_ECP,YEAR)/0.001
                          
                                  WRITE(18,6312) CURIYR, YEAR, IP, EMM_RG, IGRP, ISEG, ISP,  &
                                           DPVTOTCAPNR(EMM_RG,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001, EPECAP(0,I_ECP,YEAR)*0.001, (EPECAP(0,I_ECP,YEAR))*0.001-DPVTOTCAPNR(EMM_RG,MIN(CURIYR + YEAR - 1,MNUMYR))*0.001, &
                                        DPV_CF, UPV_CF, &
                                        DPV_CF_FRAC, UPV_CF_FRAC,  &
                                        DPV_CF_NEW, UPV_CF_NEW, &
                                        VALUE
             6312                       FORMAT(1X,"INT_PV_rps",7(",",I4),10(",",F21.6))
                            
                                  GWH(EMM_RG,YEAR) = GWH(EMM_RG,YEAR) + ULCAPC(I_WGRP) * 0.001 * VALUE * EPWDTH(IVLS,YEAR)/1000
                            
                               ELSE 
                                   GWH(EMM_RG,YEAR) = GWH(EMM_RG,YEAR) + & 
                                       ULCAPC(I_WGRP) * 0.001 * UPICFC(1,IP,IGRP,ISEG) * EPECFC(I_ECP,YEAR) / EPIACF(IP) * EP_SP_CAP_FAC(ISP,I_ECP,YEAR) * EPWDTH(IVLS,YEAR)/1000.0
                               END IF 
                            ENDDO
                        ELSE
                           GWH(EMM_RG,YEAR) =  GWH(EMM_RG,YEAR) + ULCAPC(I_WGRP) * 0.001 * EPECFC(I_ECP,1) * 8.760
                        END IF

                        EX_GEN(EMM_RG,YEAR) = EX_GEN(EMM_RG,YEAR) + ULTGEN_ECP(I_WGRP,YEAR) * 0.001

                        !IF (CURCALYR .LE. 2030) THEN
                           WRITE(18,7454) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_RPS, ST_RPS_STcd(I_RPS), ST_RPS_ID(I_RPS), EMM_RG, I_ECP, UCPRNWIS(I_ECP), UPLNTCD(I_ECP), I_WGRP, ULAGE(I_WGRP), &
                              ST_RPS_ECP_EX(I_ECP,I_RPS), ULCAPC(I_WGRP)*0.001, EPECFC(I_ECP,1), EPECFC(I_ECP,YEAR), ULTGEN_ECP(I_WGRP,YEAR), &
                              (EPESCFC(ISP,I_ECP,YEAR), EP_SP_CAP_FAC(ISP,I_ECP,YEAR), SHOURS(ISP,YEAR), ISP = 1 , EPNMSP)
 7454                      FORMAT(1X,'EX_GEN_WGRP',4(":",I4),":",A2,":",A1,3(":",I2),":",A2,":",I5,":",I3,":",F6.3,4(":",F21.6),<EPNMSP>(3(":",F21.6)))
                        !END IF

                     END DO
                  END IF
               END DO

               IF (UCPRNWIS(I_ECP) .GT. 0 .OR. UCPINTIS(I_ECP) .GT. 0) THEN

                  DO EMM_RG = 1, UNRGNS
                     DO YEAR = 2, UNXPH
                        IF (EX_GEN(EMM_RG,YEAR) .GT. 0.0 .OR. GWH(EMM_RG,YEAR) .GT. 0.0) THEN

                           !IF (CURCALYR .LE. 2030) THEN
                              WRITE(18,7453) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_RPS, ST_RPS_STcd(I_RPS), ST_RPS_ID(I_RPS), EMM_RG, I_ECP, UCPRNWIS(I_ECP), UPLNTCD(I_ECP), &
                                 EX_GEN(EMM_RG,YEAR), GWH(EMM_RG,YEAR)
 7453                         FORMAT(1X,'EX_GEN_GWH',4(":",I4),":",A2,":",A1,3(":",I2),":",A2,2(":",F21.6))
                           !END IF

                           IF (EX_GEN(EMM_RG,YEAR) .GT. GWH(EMM_RG,YEAR)) THEN
                              EX_GEN(EMM_RG,YEAR) = GWH(EMM_RG,YEAR)
                           END IF
                        END IF
                     END DO
                  END DO
               END IF

               DO EMM_RG = 1, UNRGNS
                  SHARE = 0.0
                  DO YEAR = 2, UNXPH
                     IF (EX_GEN(EMM_RG,YEAR) - 0.001 .GT. ECP_MIN) THEN
                        JYR = MIN(CURIYR + YEAR - 1,MNUMYR)
                        IF (ST_RPS_REQ(EMM_RG,I_RPS,JYR) .GT. 0.0) THEN
                           COLUMN = 'X'//ST_RPS_STcd(I_RPS)//'X'//UPLNTCD(I_ECP)//UPRGCD(EMM_RG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':X:',ST_RPS_STcd(I_RPS),':X:',UPLNTCD(I_ECP),UPRGCD(EMM_RG),UPYRCD(YEAR))
                           VALUE = EX_GEN(EMM_RG,YEAR) - 0.001

                           IF (TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) .EQ. 0) CALL CBND(UPBND,COLUMN,VALUE,VALUE,COLUMN_mask,'EP$ST_RPS,12')
                           IF (TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) .EQ. 0) EXBND(EMM_RG,I_ECP,YEAR) = VALUE 

                           SHARE = SHARE + VALUE

                           IF (YEAR .EQ. LeadTime) THEN
                              IF (TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) .EQ. 0) THEN
                              ST_RPS_EX_GEN(EMM_RG,I_ECP,CURIYR+LeadTime-1) = ST_RPS_EX_GEN(EMM_RG,I_ECP,CURIYR+LeadTime-1) + EX_GEN(EMM_RG,YEAR)
                              ST_RPS_EX_GEN(MNUMNR,I_ECP,CURIYR+LeadTime-1) = ST_RPS_EX_GEN(MNUMNR,I_ECP,CURIYR+LeadTime-1) + EX_GEN(EMM_RG,YEAR)
                           END IF
                              ST_RPS_EX_CRD(EMM_RG,I_ECP,CURIYR+LeadTime-1) = ST_RPS_EX_CRD(EMM_RG,I_ECP,CURIYR+LeadTime-1) + EX_GEN(EMM_RG,YEAR) * ST_RPS_ECP_EX(I_ECP,I_RPS)
                              ST_RPS_EX_CRD(MNUMNR,I_ECP,CURIYR+LeadTime-1) = ST_RPS_EX_CRD(MNUMNR,I_ECP,CURIYR+LeadTime-1) + EX_GEN(EMM_RG,YEAR) * ST_RPS_ECP_EX(I_ECP,I_RPS)
                           END IF
   
                           ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))
                           VALUE = ST_RPS_ECP_EX(I_ECP,I_RPS)
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,13')
   
                           IF (TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) .EQ. 0) THEN
                           ROW = 'F'//UPRGCD(EMM_RG)//UPLNTCD(I_ECP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(EMM_RG),UPLNTCD(I_ECP),':GEN:',UPYRCD(YEAR))
                           VALUE = -1.0
                           CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,14')
                              TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) = 1
                        END IF
                     END IF
                     END IF
                  END DO

                  JYR = MIN(CURIYR + 2 - 1,MNUMYR)
                  IF (ST_RPS_REQ(EMM_RG,I_RPS,JYR) .GT. 0.0 .AND. SHARE .GT. 0.0 .AND. ST_RPS_ECP_EX(I_ECP,I_RPS) .GT. 0) THEN
                     WRITE(18,8456) CURIRUN, CURCALYR, I_ECP, UPLNTCD(I_ECP), EMM_RG, I_RPS, ST_RPS_TITLE(I_RPS), ST_RPS_STcd(I_RPS), ST_RPS_ID(I_RPS), &
                        ST_RPS_ECP_EX(I_ECP,I_RPS), (EX_GEN(EMM_RG,YEAR),YEAR=1,UNXPH)
! this is the amount of existing gen for the tranche, but only tranche 1 used as the bound in the LP
 8456                FORMAT(1X,'ST_RPS_EX_1GEN',3(":",I4),":",A2,2(":",I4),":",A40,":",A2,":",A1,":",F21.6,<UNXPH>(":",F6.3))
                     WRITE(18,8457) CURIRUN, CURCALYR, I_ECP, UPLNTCD(I_ECP), EMM_RG, I_RPS, ST_RPS_TITLE(I_RPS), ST_RPS_STcd(I_RPS), ST_RPS_ID(I_RPS), &
                        ST_RPS_ECP_EX(I_ECP,I_RPS), (EXBND(EMM_RG,I_ECP,YEAR),YEAR=1,UNXPH)
! this is the amount used as the existing bound in the LP and should be used in the debug
 8457                FORMAT(1X,'ST_RPS_EX_GEN',3(":",I4),":",A2,2(":",I4),":",A40,":",A2,":",A1,":",F21.6,<UNXPH>(":",F6.3))
!
!                    Load database table for state rps exgen table         
!
                     TNUM = 4
                     IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                      IF (LOOPING(TNUM) .EQ. 0) THEN
                       NUMCOLS(TNUM) = 7
                       DYNSTM(TNUM) =  'INSERT INTO ST_RPS_EX_GEN VALUES(?,?,?,?,?,?,?,?)'
                       WRTSTM(TNUM) =  'ST_RPS_EX_GEN'
                      ENDIF
                      DO YEAR = 1, UNXPH
                        LOOPING(TNUM) = LOOPING(TNUM) + 1
                        COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
                        COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                          !//EMMDB//
                        COLV(TNUM,3,LOOPING(TNUM)) = EMM_RG                                        !//EMMDB//
                        COLV(TNUM,4,LOOPING(TNUM)) = I_RPS                                         !//EMMDB//
                        COLV(TNUM,5,LOOPING(TNUM)) = I_ECP                                         !//EMMDB//
                        COLV(TNUM,6,LOOPING(TNUM)) = ST_RPS_ECP_EX(I_ECP,I_RPS)                    !//EMMDB//
                        COLV(TNUM,7,LOOPING(TNUM)) = EXBND(EMM_RG,I_ECP,YEAR)                      !//EMMDB//
                        IF (LOOPING(TNUM) .NE. 0) THEN
                          COLVALS(:,:) = COLV(TNUM,:,:)
                          CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                         CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                          CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                          LOOPING(TNUM) = 0
                        ENDIF
                      ENDDO
                    END IF
                  END IF

               END DO
            END IF
         END DO
      END DO
                     
!     Allow imports from qualified units to satisfy state RPS requirements

      TST_STATES = 0
      ST_RPS_TRD = 0

      DO I_RPS = 1, NM_ST_RPS
         IF (ST_RPS_IMPORTS(I_RPS) .GT. 0) THEN
            DO YEAR = 2, UNXPH
               JYR = MIN(CURIYR + YEAR - 1,MNUMYR)
               DO M_RG = 1, UNRGNS
                  IF (ST_RPS_REQ(M_RG,I_RPS,JYR) .GT. 0.0 .AND. ST_RPS_EMM_MAP(M_RG,I_RPS) .GT. 0) THEN
                     DO X_RG = 1 , UNRGNS
!                       IF (ST_RPS_REQ(X_RG,I_RPS,JYR) .LE. 0.0 .AND. UPXRGN(X_RG,M_RG) .GT. 0) THEN
                        IF (ST_RPS_EMM_MAP(X_RG,I_RPS) .LE. 0.0 .AND. UPXRGN(X_RG,M_RG) .GT. 0) THEN
                           DO I_ECP = 1, ECP_D_CAP
                              IF (ST_RPS_ECP_NW(I_ECP,I_RPS) .GT. 0.0) THEN
                                 WRITE(RPS,'(I2.2)') I_RPS

                                 COLUMN = 'G'//ST_RPS_STcd(I_RPS)//UPLNTCD(I_ECP)//UPRGCD(X_RG)//UPRGCD(M_RG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',ST_RPS_STcd(I_RPS),UPLNTCD(I_ECP),UPRGCD(X_RG),UPRGCD(M_RG),UPYRCD(YEAR))

                                 ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))
                                 VALUE = (1.0 - LINELOSS) * ST_RPS_ECP_NW(I_ECP,I_RPS)   ! Satisfy RPS Requirement
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,15')

                                 WRITE(18,9456) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_ECP, X_RG, M_RG, I_RPS, RPS, ST_RPS_STcd(I_RPS), ST_RPS_ID(I_RPS), COLUMN, ROW, ST_RPS_ECP_NW(I_ECP,I_RPS), LINELOSS
 9456                            FORMAT(1X,'ST_RPS_IMPORTS',7(":",I4),2(":",A2),":",A1,2(":",A16),2(":",F21.6))

                                 ROW = 'F'//UPRGCD(X_RG)//UPLNTCD(I_ECP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(X_RG),UPLNTCD(I_ECP),':GEN:',UPYRCD(YEAR))
                                 VALUE = -1.0                                          ! Use generation from export region for qualified ECP type
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,16')

                                 ROW = 'L'//UPRGCD(X_RG)//UPRGCD(M_RG)//'TRPS'//UPYRCD(YEAR); call makmsk(ROW_mask,':L:',UPRGCD(X_RG),UPRGCD(M_RG),':TRPS:',UPYRCD(YEAR))
                                 VALUE = 1.0                                          ! Require equivalent trade to match the sale of RPS credits, after losses
                                 CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,17')

                                 IF (ST_RPS_TRD(X_RG,M_RG,YEAR) .EQ. 0) THEN
                                    ST_RPS_TRD(X_RG,M_RG,YEAR) = 1
                                    VALUE = DBLE(0.0)
                                    CALL CRHS(UPRHS,ROW,VALUE,ROW_mask,'EP$ST_RPS,18')

!                                   DECLARE ROW TYPE

                                    CALL CROWTYPE(ROW,'L       ',ROW_mask)
                                 END IF
                              END IF
                           END DO
                        END IF
                     END DO
                  END IF
               END DO
            END DO
         END IF
      END DO

!     Pull generation from generation balance rows to satisfy state RPS requirements

      TST_STATES = 0

      DO I_RPS = 1, NM_ST_RPS
         DO EMM_RG = 1, UNRGNS
            DO YEAR = 2, UNXPH
               JYR = MIN(CURIYR + YEAR - 1,MNUMYR)
               IF (ST_RPS_REQ(EMM_RG,I_RPS,JYR) .GT. 0.0 .AND. ST_RPS_EMM_MAP(EMM_RG,I_RPS) .GT. 0) THEN
                  DO I_ECP = 1, ECP_D_CAP
                     IF (ST_RPS_ECP_NW(I_ECP,I_RPS) .GT. 0.0) THEN
                        COLUMN = 'N'//ST_RPS_STcd(I_RPS)//'N'//UPLNTCD(I_ECP)//UPRGCD(EMM_RG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':N:',ST_RPS_STcd(I_RPS),':N:',UPLNTCD(I_ECP),UPRGCD(EMM_RG),UPYRCD(YEAR))

                        ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))
                        VALUE = ST_RPS_ECP_NW(I_ECP,I_RPS)
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,19')

                        IF (TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) .EQ. 0) THEN
                        ROW = 'F'//UPRGCD(EMM_RG)//UPLNTCD(I_ECP)//'GEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(EMM_RG),UPLNTCD(I_ECP),':GEN:',UPYRCD(YEAR))
                        VALUE = -1.0
                        CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,20')
                           TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) = 1
                        END IF

                        WRITE(18,9457) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_ECP, EMM_RG, I_RPS, ST_RPS_STcd(I_RPS), ST_RPS_ID(I_RPS), ST_RPS_ECP_NW(I_ECP,I_RPS)
 9457                   FORMAT(1X,'ST_RPS_NW_GEN',6(":",I4),":",A2,":",A1,":",F21.6)
                     END IF
                  END DO
               END IF
            END DO
         END DO
      END DO
                     
!     Create price cap to allow for alternative compliance payments

      DO I_RPS = 1, NM_ST_RPS
         IF (ST_RPS_PCAP_TYP(I_RPS) .GT. 0) THEN
            DO YEAR = 2, UNXPH
               JYR = CURIYR + YEAR - 1
               COLUMN = 'G'//ST_RPS_STcd(I_RPS)//ST_RPS_ID(I_RPS)//'CAP'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':CAP:',UPYRCD(YEAR))

               ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))
               VALUE = 1.0
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,21')
       
               ROW = UPOBJ ; ROW_mask=UPOBJ
               IF (YEAR .LT. UNXPH) THEN
                  PVPCAP = UPGNPD(JYR) * ST_RPS_PCAP_87(I_RPS,JYR) * PWF(DSCRT,YEAR)
               ELSE
                  DO KYR = 1 , UNFPH - UNXPH + 1
                     LYR = KYR + UNXPH + CURIYR - 2
                     PCAP(KYR) = UPGNPD(LYR) * ST_RPS_PCAP_87(I_RPS,LYR)
                  END DO
                  KYR = UNFPH - UNXPH + 1
                  PVPCAP = PVV(PCAP(1),ECP_D_FPH,KYR,DSCRT) * PWF(DSCRT,UNXPH - 1)
               END IF
               VALUE = PVPCAP
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,22')
            END DO
         ELSE
            DO YEAR = 2, UNXPH
               JYR = CURIYR + YEAR - 1
               COLUMN = 'G'//ST_RPS_STcd(I_RPS)//ST_RPS_ID(I_RPS)//'CAP'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':CAP:',UPYRCD(YEAR))

               ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))
               VALUE = 1.0
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,23')
       
               ROW = UPOBJ ; ROW_mask=UPOBJ
               IF (YEAR .LT. UNXPH) THEN
                  PVPCAP = UPGNPD(JYR) * 200.0 * PWF(DSCRT,YEAR)
               ELSE
                  DO KYR = 1 , UNFPH - UNXPH + 1
                     LYR = KYR + UNXPH + CURIYR - 2
                     PCAP(KYR) = UPGNPD(LYR) * 200.0
                  END DO
                  KYR = UNFPH - UNXPH + 1
                  PVPCAP = PVV(PCAP(1),ECP_D_FPH,KYR,DSCRT) * PWF(DSCRT,UNXPH - 1)
               END IF
               VALUE = PVPCAP
               CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,24')
            END DO
         END IF
      END DO

!     Add cofiring if it qualifies

      TST_STATES = 0

      DO I_RPS = 1, NM_ST_RPS
         IF (ST_RPS_COFIRE(I_RPS) .GT. 0.0) THEN
            DO EMM_RG = 1 , UNRGNS
                  DO YEAR = 2, UNXPH
                     JYR = MIN(CURIYR + YEAR - 1,MNUMYR)
					 IF (ST_RPS_REQ(EMM_RG,I_RPS,JYR) .GT. 0.0 .AND. ST_RPS_EMM_MAP(EMM_RG,I_RPS) .GT. 0) THEN
                       COLUMN = 'G'//ST_RPS_STcd(I_RPS)//'XCOF'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',ST_RPS_STcd(I_RPS),':XCOF:',UPYRCD(YEAR))

                       ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))
                       VALUE = ST_RPS_COFIRE(I_RPS)
                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,25')

                       IF (TST_STATES(EMM_RG,0,ST_RPS_STnm(I_RPS),YEAR) .EQ. 0) THEN
                       ROW = 'F'//UPRGCD(EMM_RG)//'CFGEN'//UPYRCD(YEAR); call makmsk(ROW_mask,':F:',UPRGCD(EMM_RG),':CFGEN:',UPYRCD(YEAR))
                       VALUE = -1.0
                       CALL CVAL(COLUMN,ROW,VALUE,COLUMN_mask,ROW_mask,'EP$ST_RPS,26')
                          TST_STATES(EMM_RG,0,ST_RPS_STnm(I_RPS),YEAR) = 1
                       END IF
					 ENDIF
                  END DO
            END DO
         END IF
      END DO

      IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
         DO TNUM = 1 , NUMTABS
            IF (LOOPING(TNUM) .NE. 0) THEN
               COLVALS(:,:) = COLV(TNUM,:,:)
               CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!              CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               LOOPING(TNUM) = 0
            ENDIF
         ENDDO
      ENDIF
!

      RETURN
      END

!     EPO$ST_RPS SETS UP STATE LEVEL RENEWABLE PORTFOLIO CONSTRAINTS

      SUBROUTINE EPO$ST_RPS
      use ecp_row_col
!
      IMPLICIT NONE
      include 'parametr'
      include 'ncntrl'
      include 'emmparm'
      include 'control'
      include 'ecpcntl'
      include 'uecpout'
      include 'udatout'
      include 'cogen'
      include 'elout'
      include 'elcntl'
      include 'postpr'
      include 'eusprc'
      include 'edbdef'
      include 'uefdout'

      REAL*8 OUT_VAL(5), TST_VAL, TOT_GEN                   ! Working Variable
      INTEGER*4 EMM_RG, M_RG, X_RG                          ! EMM Region index
      INTEGER*4 I_RPS                                       ! Index for each state level RPS tranche
      INTEGER*4 I_ECP                                       ! ECP Index
      INTEGER*4 LeadTime                                    ! Specify which dual is used to calculate real 1987 dollar state RPS price
      INTEGER*4 YEAR, JYR, LYR, OPYRS                       ! Year indexes
      INTEGER*4 IRET                                        
      INTEGER*4 TST_STATES(MNUMNR,0:ECP_D_CAP,0:MX_ST_CODES,ECP_D_XPH) ! Test if multiple tranches apply to the same state, if so, qualified generation can apply to all tranches in the state
      CHARACTER*2 RPS                                       ! Alternative way to identify State RPS Tranche using 2 digits instead of 3
      CHARACTER*2 STATUS
      CHARACTER*16 COLUMN, ROW
      REAL*8 DSCRT

      REAL*8 PVGNP,SUMCRD
!
      INTEGER NUMTABS
      PARAMETER (NUMTABS = 6)        ! total number of database tables
!
      LOOPING = 0
      NUMCOLS = 0
      DYNSTM = ' '
      WRTSTM = ' '
      COLVALS = 0.0
      COLV = 0.0
      CHCOLVALS = ' '
      CHCOLV = ' '
!

      ecpsub='EPO$ST_RPS'

      LeadTime = 2
      IF (CURIYR+LeadTime-1 .LE. MNUMYR) THEN
         DO I_ECP = 1, ECP_D_CAP
            DO EMM_RG = 1, MNUMNR
               ST_RPS_NW_GEN(EMM_RG,I_ECP,CURIYR+LeadTime-1) = 0.0
               ST_RPS_NW_CRD(EMM_RG,I_ECP,CURIYR+LeadTime-1) = 0.0
               ST_RPS_XP_GEN(EMM_RG,I_ECP,CURIYR+LeadTime-1) = 0.0
               ST_RPS_XP_CRD(EMM_RG,I_ECP,CURIYR+LeadTime-1) = 0.0
            END DO
         END DO
         DO EMM_RG = 1, MNUMNR
            ST_RPS_EMM_Q(EMM_RG,CURIYR+LeadTime-1) = 0.0
            ST_RPS_EMM_P(EMM_RG,CURIYR+LeadTime-1) = 0.0
         END DO
         DO I_RPS = 1, MX_ST_RPS
            ST_RPS_PRC_87(MX_ST_RPS,CURIYR+LeadTime-1) = 0.0
         END DO
      END IF
      DO I_RPS = 1, MX_ST_RPS
         DO YEAR = 2, ECP_D_XPH
            ST_RPS_DUALS(I_RPS,YEAR,CURIYR) = 0.0
         END DO
      END DO


      DSCRT = DBLE(AVGDCR)

!     State RPS credit price

      IF (CURIYR+LeadTime+1 .LE. MNUMYR) THEN
         DO EMM_RG = 1, MNUMNR
            ST_RPS_EMM_Q(EMM_RG,CURIYR+LeadTime-1) = 0.0
            ST_RPS_EMM_P(EMM_RG,CURIYR+LeadTime-1) = 0.0
         END DO
      END IF

      LYR = CURIYR + LeadTime - 1

      DO I_RPS = 1, NM_ST_RPS
         SUMCRD = 0.0
         DO YEAR = 2 , UNXPH

            ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))

            OUT_VAL = 0.0
            CALL CWFSROW(ROW,'P       ',STATUS,OUT_VAL,ROW_mask,IRET)
            ST_RPS_DUALS(I_RPS,YEAR,CURIYR) = -OUT_VAL(1)
            SUMCRD = SUMCRD - OUT_VAL(1)
         END DO

         OPYRS = UNFPH - 1
         CALL EP$LGNP(2,OPYRS,AVGDCR,PVGNP)

         IF (LYR .LE. UNYEAR) THEN
            ST_RPS_PRC_87(I_RPS,LYR) = SUMCRD / PVGNP
            DO EMM_RG = 1, UNRGNS
               ST_RPS_EMM_Q(EMM_RG,LYR) = ST_RPS_EMM_Q(EMM_RG,LYR) + QELASN(EMM_RG,LYR) * 0.001 * ST_RPS_REQ(EMM_RG,I_RPS,LYR)
               ST_RPS_EMM_P(EMM_RG,LYR) = ST_RPS_EMM_P(EMM_RG,LYR) + QELASN(EMM_RG,LYR) * 0.001 * ST_RPS_REQ(EMM_RG,I_RPS,LYR) * ST_RPS_PRC_87(I_RPS,LYR)

               ST_RPS_EMM_Q(MNUMNR,LYR) = ST_RPS_EMM_Q(MNUMNR,LYR) + QELASN(EMM_RG,LYR) * 0.001 * ST_RPS_REQ(EMM_RG,I_RPS,LYR)
               ST_RPS_EMM_P(MNUMNR,LYR) = ST_RPS_EMM_P(MNUMNR,LYR) + QELASN(EMM_RG,LYR) * 0.001 * ST_RPS_REQ(EMM_RG,I_RPS,LYR) * ST_RPS_PRC_87(I_RPS,LYR)
            END DO
         END IF

         WRITE(18,5455) CURIRUN, CURCALYR, CURIYR+LeadTime+1988, I_RPS, ST_RPS_TITLE(I_RPS), ST_RPS_PRC_87(I_RPS,CURIYR+LeadTime-1), (ST_RPS_DUALS(I_RPS,YEAR,CURIYR),YEAR=1,UNXPH)
 5455    FORMAT(1X,'ST_RPS_PRICES',4(":",I4),":",A40,":",F21.6,<UNXPH>(":",F21.6))
!
!        Load database table for state rps price table         
!
         TNUM = 1
         IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
          IF (LOOPING(TNUM) .EQ. 0) THEN
           NUMCOLS(TNUM) = 6
           DYNSTM(TNUM) =  'INSERT INTO ST_RPS_PRICES VALUES(?,?,?,?,?,?,?)'
           WRTSTM(TNUM) =  'ST_RPS_PRICES'
          ENDIF
           DO YEAR = 1 , UNXPH
            LOOPING(TNUM) = LOOPING(TNUM) + 1
            COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
            COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                          !//EMMDB//
            COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+Leadtime+1988                          !//EMMDB//
            COLV(TNUM,4,LOOPING(TNUM)) = I_RPS                                         !//EMMDB//
            COLV(TNUM,5,LOOPING(TNUM)) = ST_RPS_PRC_87(I_RPS,CURIYR+Leadtime-1)       !//EMMDB//
            COLV(TNUM,6,LOOPING(TNUM)) = ST_RPS_DUALS(I_RPS,YEAR,CURIYR)               !//EMMDB//
            IF (LOOPING(TNUM) .NE. 0) THEN
              COLVALS(:,:) = COLV(TNUM,:,:)
              CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!             CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
              LOOPING(TNUM) = 0
            ENDIF
           ENDDO
         END IF
!

      END DO

      IF (ST_RPS_EMM_Q(MNUMNR,LYR) .GT. 0.0001) THEN
         ST_RPS_EMM_P(MNUMNR,LYR) = ST_RPS_EMM_P(MNUMNR,LYR) / ST_RPS_EMM_Q(MNUMNR,LYR)

         WRITE(18,5456) CURIRUN, CURCALYR, CURIYR+LeadTime+1988, MNUMNR, ST_RPS_EMM_Q(MNUMNR,LYR), ST_RPS_EMM_P(MNUMNR,LYR)
 5456    FORMAT(1X,'ST_RPS_EMM_PRICES',4(":",I4),2(":",F21.6))
!
!        Load database table for state rps emm price table         
!
         TNUM = 2
         IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
          IF (LOOPING(TNUM) .EQ. 0) THEN
           NUMCOLS(TNUM) = 5
           DYNSTM(TNUM) =  'INSERT INTO ST_RPS_EMM_PRICES VALUES(?,?,?,?,?,?)'
           WRTSTM(TNUM) =  'ST_RPS_EMM_PRICES'
          ENDIF
          LOOPING(TNUM) = LOOPING(TNUM) + 1
          COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
          COLV(TNUM,2,LOOPING(TNUM)) = CURIYR+Leadtime+1988                          !//EMMDB//
          COLV(TNUM,3,LOOPING(TNUM)) = MNUMNR                                        !//EMMDB//
          COLV(TNUM,4,LOOPING(TNUM)) = ST_RPS_EMM_Q(MNUMNR,LYR)                      !//EMMDB//
          COLV(TNUM,5,LOOPING(TNUM)) = ST_RPS_EMM_P(MNUMNR,LYR)                      !//EMMDB//
          IF (LOOPING(TNUM) .NE. 0) THEN
            COLVALS(:,:) = COLV(TNUM,:,:)
            CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!           CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
            CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
            LOOPING(TNUM) = 0
          ENDIF
        END IF

         DO EMM_RG = 1, UNRGNS
            IF (ST_RPS_EMM_Q(EMM_RG,LYR) .GT. 0.0001) THEN
               ST_RPS_EMM_P(EMM_RG,LYR) = ST_RPS_EMM_P(EMM_RG,LYR) / ST_RPS_EMM_Q(EMM_RG,LYR)

               WRITE(18,5456) CURIRUN, CURCALYR, CURIYR+LeadTime+1988, EMM_RG, ST_RPS_EMM_Q(EMM_RG,LYR), ST_RPS_EMM_P(EMM_RG,LYR)
!
!              Load database table for state rps emm price table         
!
               TNUM = 2
               IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                IF (LOOPING(TNUM) .EQ. 0) THEN
                 NUMCOLS(TNUM) = 5
                 DYNSTM(TNUM) =  'INSERT INTO ST_RPS_EMM_PRICES VALUES(?,?,?,?,?,?)'
                 WRTSTM(TNUM) =  'ST_RPS_EMM_PRICES'
                ENDIF
                LOOPING(TNUM) = LOOPING(TNUM) + 1
                COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                        !//EMMDB//
                COLV(TNUM,2,LOOPING(TNUM)) = CURIYR+Leadtime+1988                          !//EMMDB//
                COLV(TNUM,3,LOOPING(TNUM)) = EMM_RG                                        !//EMMDB//
                COLV(TNUM,4,LOOPING(TNUM)) = ST_RPS_EMM_Q(EMM_RG,LYR)                      !//EMMDB//
                COLV(TNUM,5,LOOPING(TNUM)) = ST_RPS_EMM_P(EMM_RG,LYR)                      !//EMMDB//
                IF (LOOPING(TNUM) .NE. 0) THEN
                  COLVALS(:,:) = COLV(TNUM,:,:)
                  CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                 CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  LOOPING(TNUM) = 0
                ENDIF
              END IF

!              IF (UPRNWBNDR(LYR,EMM_RG) .LE. 0.005) THEN                    !don't replace the regional variables, causes problems if both state and regional programs in place
!                 EPRPSPRR(EMM_RG,LYR) = MAX(EPRPSPRR(EMM_RG,LYR) , ST_RPS_EMM_P(EMM_RG,LYR))
!              ELSE
!                 EPRPSPRR(EMM_RG,LYR) = ST_RPS_EMM_P(EMM_RG,LYR)
!              END IF
!              EPRPSPRR(EMM_RG,LYR) = MIN(EPRPSPRR(EMM_RG,LYR) , 150.0 / SCALPR)
            END IF
         END DO
      END IF
                     
!     Capture activity on alternative compliance payment vector

      TST_VAL = 0.0
      DO I_RPS = 1, NM_ST_RPS
         IF (ST_RPS_PCAP_TYP(I_RPS) .GT. 0) THEN

            TST_VAL = 1.0

            DO YEAR = 2, UNXPH
               JYR = CURIYR + YEAR - 1
               COLUMN = 'G'//ST_RPS_STcd(I_RPS) //ST_RPS_ID(I_RPS)//'CAP'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':CAP:',UPYRCD(YEAR))
               CALL CWFSCOL(COLUMN,'A       ',STATUS,OUT_VAL,COLUMN_mask,IRET)

               WRITE(18,9455) CURIRUN, CURCALYR, JYR+1989, I_RPS, ST_RPS_TITLE(I_RPS), ST_RPS_PCAP_87(I_RPS,JYR), OUT_VAL(1)
 9455          FORMAT(1X,'ST_RPS_CAP_PRICE',4(":",I4),":",A40,":",F21.6,<UNXPH>(":",F21.6))
!
!              Load database table for state rps cap price table         
!
               TNUM = 3
               IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                IF (LOOPING(TNUM) .EQ. 0) THEN
                 NUMCOLS(TNUM) = 6
                 DYNSTM(TNUM) =  'INSERT INTO ST_RPS_CAP_PRICE VALUES(?,?,?,?,?,?,?)'
                 WRTSTM(TNUM) =  'ST_RPS_CAP_PRICE'
                ENDIF
                LOOPING(TNUM) = LOOPING(TNUM) + 1
                COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                  !//EMMDB//
                COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                    !//EMMDB//
                COLV(TNUM,3,LOOPING(TNUM)) = JYR + 1989                              !//EMMDB//
                COLV(TNUM,4,LOOPING(TNUM)) = I_RPS                           !//EMMDB//
                COLV(TNUM,5,LOOPING(TNUM)) = ST_RPS_PCAP_87(I_RPS,JYR)       !//EMMDB//
                COLV(TNUM,6,LOOPING(TNUM)) = OUT_VAL(1)                       !//EMMDB//
                IF (LOOPING(TNUM) .NE. 0) THEN
                  COLVALS(:,:) = COLV(TNUM,:,:)
                  CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                 CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                  LOOPING(TNUM) = 0
                ENDIF
              END IF
!

            END DO
         END IF
      END DO

      IF (TST_VAL .EQ. 0.0) THEN

         WRITE(18,9455) CURIRUN, CURCALYR, CURIYR+1990, 100, "    ", 0.0, 0.0

      END IF

!     Capture imports from qualified units to satisfy state RPS requirements

      TST_STATES = 0

      DO I_RPS = 1, NM_ST_RPS
         IF (ST_RPS_IMPORTS(I_RPS) .GT. 0) THEN
            DO YEAR = 2, UNXPH
               JYR = MIN(CURIYR + YEAR - 1,MNUMYR)
               IF (CURIYR+LeadTime-1 .LE. MNUMYR) THEN
                  DO M_RG = 1, UNRGNS
                     IF (ST_RPS_REQ(M_RG,I_RPS,JYR) .GT. 0.0 .AND. ST_RPS_EMM_MAP(M_RG,I_RPS) .GT. 0) THEN
                        DO X_RG = 1 , UNRGNS
!                          IF (ST_RPS_REQ(X_RG,I_RPS,JYR) .LE. 0.0 .AND. UPXRGN(X_RG,M_RG) .GT. 0) THEN
                           IF (ST_RPS_EMM_MAP(X_RG,I_RPS) .LE. 0.0 .AND. UPXRGN(X_RG,M_RG) .GT. 0) THEN
                              DO I_ECP = 1, ECP_D_CAP
                                 IF (ST_RPS_ECP_NW(I_ECP,I_RPS) .GT. 0.0) THEN
                                    WRITE(RPS,'(I2.2)') I_RPS
   
                                    OUT_VAL = 0.0
                                    COLUMN = 'G'//ST_RPS_STcd(I_RPS)//UPLNTCD(I_ECP)//UPRGCD(X_RG)//UPRGCD(M_RG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',ST_RPS_STcd(I_RPS),UPLNTCD(I_ECP),UPRGCD(X_RG),UPRGCD(M_RG),UPYRCD(YEAR))
                                    CALL CWFSCOL(COLUMN,'A       ',STATUS,OUT_VAL,COLUMN_mask,IRET)
   
                                    IF (CURIYR+LeadTime-1 .LE. MNUMYR .AND. YEAR .EQ. LeadTime) THEN
                                       IF (TST_STATES(M_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) .EQ. 0) THEN
                                          ST_RPS_XP_GEN(M_RG,I_ECP,CURIYR+LeadTime-1) = ST_RPS_XP_GEN(M_RG,I_ECP,CURIYR+LeadTime-1) + OUT_VAL(1)
                                          TST_STATES(M_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) = 1
                                    END IF
                                       ST_RPS_XP_CRD(M_RG,I_ECP,CURIYR+LeadTime-1) = ST_RPS_XP_CRD(M_RG,I_ECP,CURIYR+LeadTime-1) + OUT_VAL(1) * ST_RPS_ECP_NW(I_ECP,I_RPS)
                                    END IF
                                 
                                    ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))

                                    IF (OUT_VAL(1) .GT. 0.0) THEN

                                       WRITE(18,9456) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_ECP, X_RG, M_RG, I_RPS, RPS, UPLNTCD(I_ECP), ST_RPS_TITLE(I_RPS), ST_RPS_STcd(I_RPS), &
                                          ST_RPS_ID(I_RPS), COLUMN, ROW, OUT_VAL(1), ST_RPS_ECP_NW(I_ECP,I_RPS), LINELOSS
 9456                                  FORMAT(1X,'ST_RPS_OUT_IMPORTS',7(":",I4),2(":",A2),":",A40,":",A2,":",A1,2(":",A16),3(":",F21.6))
!
!                                      Load database table for state rps imports table         
!
                                       TNUM = 4
                                       IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                                        IF (LOOPING(TNUM) .EQ. 0) THEN
                                          NUMCOLS(TNUM) = 13
                                          DYNSTM(TNUM) =  'INSERT INTO ST_RPS_OUT_IMPORTS VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)'
                                          WRTSTM(TNUM) =  'ST_RPS_OUT_IMPORTS'
                                        ENDIF         
                                        LOOPING(TNUM) = LOOPING(TNUM) + 1
                                        COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                          !//EMMDB//
                                        COLV(TNUM,2,LOOPING(TNUM)) = YEAR                            !//EMMDB//
                                        COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+YEAR+1988                !//EMMDB//
                                        COLV(TNUM,4,LOOPING(TNUM)) = X_RG                            !//EMMDB//
                                        COLV(TNUM,5,LOOPING(TNUM)) = M_RG                            !//EMMDB//
                                        COLV(TNUM,6,LOOPING(TNUM)) = I_RPS                           !//EMMDB//
                                        CHCOLV(TNUM,7,LOOPING(TNUM)) = RPS                             !//EMMDB//
                                        COLV(TNUM,8,LOOPING(TNUM)) = I_ECP                           !//EMMDB//
                                        COLV(TNUM,9,LOOPING(TNUM)) = ST_RPS_ECP_NW(I_ECP,I_RPS)      !//EMMDB//
                                        COLV(TNUM,10,LOOPING(TNUM)) = LINELOSS                        !//EMMDB//
                                        CHCOLV(TNUM,11,LOOPING(TNUM)) = COLUMN                          !//EMMDB//
                                        CHCOLV(TNUM,12,LOOPING(TNUM)) = ROW                             !//EMMDB//
                                        COLV(TNUM,13,LOOPING(TNUM)) = OUT_VAL(1)                       !//EMMDB//
                                        IF (LOOPING(TNUM) .NE. 0) THEN
                                          COLVALS(:,:) = COLV(TNUM,:,:)
                                          CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                                         CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                          CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                          LOOPING(TNUM) = 0
                                        ENDIF
                                      END IF

                                    END IF
                                 END IF
                              END DO
                           END IF
                        END DO
                     END IF
                  END DO
               END IF
            END DO
         END IF
      END DO

!     Pull CoFire Generation

      DO I_RPS = 1, NM_ST_RPS
         IF (ST_RPS_COFIRE(I_RPS) .GT. 0.0) THEN
            DO EMM_RG = 1 , UNRGNS
                  DO YEAR = 2, UNXPH
				    JYR = MIN(CURIYR + YEAR - 1,MNUMYR)
				    IF (ST_RPS_REQ(EMM_RG,I_RPS,JYR) .GT. 0.0 .AND. ST_RPS_EMM_MAP(EMM_RG,I_RPS) .GT. 0) THEN
                     OUT_VAL = 0.0
                     COLUMN = 'G'//ST_RPS_STcd(I_RPS)//'XCOF'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':G:',ST_RPS_STcd(I_RPS),':XCOF:',UPYRCD(YEAR))
                     CALL CWFSCOL(COLUMN,'A       ',STATUS,OUT_VAL,COLUMN_mask,IRET)

                     IF (OUT_VAL(1) .GT. 0.0) THEN

                        WRITE(18,9356) CURIRUN, CURCALYR, CURIYR+YEAR+1988, EMM_RG, I_RPS, ST_RPS_TITLE(I_RPS), ST_RPS_STcd(I_RPS), ST_RPS_ID(I_RPS), COLUMN, &
                           OUT_VAL(1), ST_RPS_COFIRE(I_RPS)
 9356                   FORMAT(1X,'ST_RPS_OUT_COFIRE',5(":",I4),":",A40,":",A2,":",A1,":",A16,2(":",F21.6))
!
!                       Load database table for state rps cofire table         
!
                        TNUM = 5
                        IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                         IF (LOOPING(TNUM) .EQ. 0) THEN
                          NUMCOLS(TNUM) = 8
                          DYNSTM(TNUM) =  'INSERT INTO ST_RPS_OUT_COFIRE VALUES(?,?,?,?,?,?,?,?,?)'
                          WRTSTM(TNUM) =  'ST_RPS_OUT_COFIRE'
                         ENDIF         
                         LOOPING(TNUM) = LOOPING(TNUM) + 1
                         COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                                  !//EMMDB//
                         COLV(TNUM,2,LOOPING(TNUM)) = YEAR                                    !//EMMDB//
                         COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+YEAR+1988                              !//EMMDB//
                         COLV(TNUM,4,LOOPING(TNUM)) = EMM_RG                          !//EMMDB//
                         COLV(TNUM,5,LOOPING(TNUM)) = I_RPS                           !//EMMDB//
                         COLV(TNUM,6,LOOPING(TNUM)) = ST_RPS_COFIRE(I_RPS)       !//EMMDB//
                         CHCOLV(TNUM,7,LOOPING(TNUM)) = COLUMN                          !//EMMDB//
                         COLV(TNUM,8,LOOPING(TNUM)) = OUT_VAL(1)                       !//EMMDB//
                         IF (LOOPING(TNUM) .NE. 0) THEN
                           COLVALS(:,:) = COLV(TNUM,:,:)
                           CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                          CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                           CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                           LOOPING(TNUM) = 0
                         ENDIF
                       END IF
					  END IF
					END IF
                  END DO
            END DO
         END IF
      END DO

!     Pull generation from generation balance rows to satisfy state RPS requirements

      TST_STATES = 0

      DO I_RPS = 1, NM_ST_RPS
         DO EMM_RG = 1, UNRGNS
            DO YEAR = 2, UNXPH
               JYR = MIN(CURIYR + YEAR - 1,MNUMYR)
               IF (CURIYR+LeadTime-1 .LE. MNUMYR .AND. YEAR .EQ. LeadTime) THEN
                  IF (ST_RPS_REQ(EMM_RG,I_RPS,JYR) .GT. 0.0 .AND. ST_RPS_EMM_MAP(EMM_RG,I_RPS) .GT. 0) THEN
                     DO I_ECP = 1, ECP_D_CAP
                        IF (ST_RPS_ECP_NW(I_ECP,I_RPS) .GT. 0.0) THEN
                           COLUMN = 'N'//ST_RPS_STcd(I_RPS)//'N'//UPLNTCD(I_ECP)//UPRGCD(EMM_RG)//UPYRCD(YEAR); call makmsk(COLUMN_mask,':N:',ST_RPS_STcd(I_RPS),':N:',UPLNTCD(I_ECP),UPRGCD(EMM_RG),UPYRCD(YEAR))

                           OUT_VAL = 0.0
                           CALL CWFSCOL(COLUMN,'A       ',STATUS,OUT_VAL,COLUMN_mask,IRET)
   
                           IF (TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) .EQ. 0) THEN
                           ST_RPS_NW_GEN(EMM_RG,I_ECP,CURIYR+LeadTime-1) = ST_RPS_NW_GEN(EMM_RG,I_ECP,CURIYR+LeadTime-1) + OUT_VAL(1)
                              TST_STATES(EMM_RG,I_ECP,ST_RPS_STnm(I_RPS),YEAR) = 1
                           END IF
                           ST_RPS_NW_CRD(EMM_RG,I_ECP,CURIYR+LeadTime-1) = ST_RPS_NW_CRD(EMM_RG,I_ECP,CURIYR+LeadTime-1) + OUT_VAL(1) * ST_RPS_ECP_NW(I_ECP,I_RPS)

                           ROW = 'G' // ST_RPS_STcd(I_RPS) // ST_RPS_ID(I_RPS) // 'RPS' // UPYRCD(YEAR); call makmsk(ROW_mask,':G:',ST_RPS_STcd(I_RPS),ST_RPS_ID(I_RPS),':RPS:',UPYRCD(YEAR))
                           IF (OUT_VAL(1) .GT. 0.0) THEN

                              WRITE(18,9457) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_ECP, EMM_RG, I_RPS, UPLNTCD(I_ECP), ST_RPS_TITLE(I_RPS), ST_RPS_STcd(I_RPS), ST_RPS_ID(I_RPS), COLUMN, ROW, &
                                 ST_RPS_ECP_NW(I_ECP,I_RPS), OUT_VAL(1)
 9457                         FORMAT(1X,'ST_RPS_OUT_NW_GEN',6(":",I4),":",A2,":",A40,":",A2,":",A1,2(":",A16),2(":",F21.6))
!
!                             Load database table for state rps nw gen table         
!
                              TNUM = 6
                              IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
                               IF (LOOPING(TNUM) .EQ. 0) THEN
                                NUMCOLS(TNUM) = 10
                                DYNSTM(TNUM) =  'INSERT INTO ST_RPS_OUT_NW_GEN VALUES(?,?,?,?,?,?,?,?,?,?,?)'
                                WRTSTM(TNUM) =  'ST_RPS_OUT_NW_GEN'
                               ENDIF         
                               LOOPING(TNUM) = LOOPING(TNUM) + 1
                               COLV(TNUM,1,LOOPING(TNUM)) = CURIYR                          !//EMMDB//
                               COLV(TNUM,2,LOOPING(TNUM)) = YEAR                            !//EMMDB//
                               COLV(TNUM,3,LOOPING(TNUM)) = CURIYR+YEAR+1988                !//EMMDB//
                               COLV(TNUM,4,LOOPING(TNUM)) = EMM_RG                          !//EMMDB//
                               COLV(TNUM,5,LOOPING(TNUM)) = I_RPS                           !//EMMDB//
                               COLV(TNUM,6,LOOPING(TNUM)) = I_ECP                           !//EMMDB//
                               COLV(TNUM,7,LOOPING(TNUM)) = ST_RPS_ECP_NW(I_ECP,I_RPS)      !//EMMDB//
                               CHCOLV(TNUM,8,LOOPING(TNUM)) = COLUMN                           !//EMMDB//
                               CHCOLV(TNUM,9,LOOPING(TNUM)) = ROW                             !//EMMDB//
                               COLV(TNUM,10,LOOPING(TNUM)) = OUT_VAL(1)                      !//EMMDB//
                               IF (LOOPING(TNUM) .NE. 0) THEN
                                 COLVALS(:,:) = COLV(TNUM,:,:)
                                 CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!                                CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                 CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
                                 LOOPING(TNUM) = 0
                               ENDIF
                             END IF

                           END IF
                        END IF
                     END DO
                  END IF
               END IF
            END DO
         END DO
      END DO
                     
!     Calculate the resulting regional RPS share and the average credits by EMM region and ECP type
                     
      IF (CURIYR .LT. LASTYR) THEN
         DO EMM_RG = 1, UNRGNS
            YEAR = 2

            ST_RNW_BND(CURIYR+1,EMM_RG) = ST_RPS_EMM_Q(EMM_RG,CURIYR+1) / (QELASN(EMM_RG,CURIYR+1) * 0.001)

            DO I_ECP = 1, ECP_D_CAP
               COLUMN = 'H'//UPRGCD(EMM_RG)//UPLNTCD(I_ECP)//'GEN'//UPYRCD(YEAR); call makmsk(COLUMN_mask,':H:',UPRGCD(EMM_RG),UPLNTCD(I_ECP),':GEN:',UPYRCD(YEAR))
               CALL CWFSCOL(COLUMN,'A       ',STATUS,OUT_VAL,COLUMN_mask,IRET)
               ST_RNW_SHR(I_ECP,EMM_RG,CURIYR+1) = 0.0
               IF (IRET .EQ. 0) THEN
                  TOT_GEN = OUT_VAL(1) + ST_RPS_EX_GEN(EMM_RG,I_ECP,CURIYR+1) + ST_RPS_NW_GEN(EMM_RG,I_ECP,CURIYR+1) + ST_RPS_XP_GEN(EMM_RG,I_ECP,CURIYR+1)
                  IF (TOT_GEN .GT. 0.001) THEN
                     ST_RNW_SHR(I_ECP,EMM_RG,CURIYR+1) = (ST_RPS_EX_CRD(EMM_RG,I_ECP,CURIYR+1) + ST_RPS_NW_CRD(EMM_RG,I_ECP,CURIYR+1) + ST_RPS_XP_CRD(EMM_RG,I_ECP,CURIYR+1)) / TOT_GEN
                  END IF
               END IF
               IF (ST_RNW_SHR(I_ECP,EMM_RG,CURIYR+1) .GT. 0.0) THEN
   
                  WRITE(18,7456) CURIRUN, CURCALYR, CURIYR+YEAR+1988, I_ECP, EMM_RG, UPLNTCD(I_ECP), ST_RNW_BND(CURIYR+1,EMM_RG), ST_RPS_EMM_Q(EMM_RG,CURIYR+1), QELASN(EMM_RG,CURIYR+1) * 0.001, &
                     ST_RNW_SHR(I_ECP,EMM_RG,CURIYR+1), ST_RPS_EX_GEN(EMM_RG,I_ECP,CURIYR+1), ST_RPS_NW_GEN(EMM_RG,I_ECP,CURIYR+1), ST_RPS_XP_GEN(EMM_RG,I_ECP,CURIYR+1), TOT_GEN, &
                     ST_RPS_EX_CRD(EMM_RG,I_ECP,CURIYR+1), ST_RPS_NW_CRD(EMM_RG,I_ECP,CURIYR+1), ST_RPS_XP_CRD(EMM_RG,I_ECP,CURIYR+1)
 7456             FORMAT(1X,"ST_RNW_SHR",5(":",I4),":",A2,12(":",F21.6))

               END IF
            END DO
         END DO
      END IF

      IF ( (ORCLECP .EQ. 1) .AND. (FNRUN.EQ.1) ) THEN
         DO TNUM = 1 , NUMTABS
            IF (LOOPING(TNUM) .NE. 0) THEN
               COLVALS(:,:) = COLV(TNUM,:,:)
               CHCOLVALS(:,:) = CHCOLV(TNUM,:,:)
!              CALL LOAD_DATA(DYNSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               CALL WRITE_DB_DATA(WRTSTM(TNUM),NUMCOLS(TNUM),LOOPING(TNUM),COLVALS,CHCOLVALS,UF_DBS)
               LOOPING(TNUM) = 0
            ENDIF
         ENDDO
      ENDIF
!

      RETURN
      END

