                             Block Schema View

    The schema is a view of the underlying linear programming model,
    based on its syntax.  The schema table is a rectangular array of the
    form,

                     head(1)    head(2)    ...  head(n)
                     ------------------------------------
            stub(1)  cell(1,1)  cell(1,2)  ...  cell(1,n)
            stub(2)  cell(2,1)  cell(2,2)  ...  cell(2,n)
             ...
            stub(m)  cell(m,1)  cell(m,2)  ...  cell(m,n)
                     ------------------------------------

    The table heads are sometimes called "column strips," and the stubs
    are sometimes called "row strips." The "cell entry" for row strip i,
    column strip j is a data entry.

    The SCHEMA command is in MODLER, which views the model, apart from
    data; and, it is in ANALYZE, which views an instance of the linear
    programming model.

    For a model instance, viewed from ANALYZE, the data entry is a
    numeric range.  If blank, the cell corresponds to a null submatrix
    (i.e., there are no nonzero coefficients in the set of rows of the
    row strip and the set of columns of the column strip).  If the entry
    is a single number, like 1 or -1, each nonzero coefficient equals
    that number.  If the submatrix defined by the row and column strips
    has a range of nonzeroes, say 10 to 200, it appears as 10/200 (where
    the slash denotes the range, as in conditional specifications).

    For a model, such as represented in MODLER, apart from data that
    define instances, the cell entry is the numeric data object that
    describes the coefficient.  To illustrate, consider a simple
    production-distribution model having model schema:

                   P(MT,SR)          T(MT,SR,DR)
         COST      PCOST             TCOST       ...MIN
         S(MT,SR)   1                -1           = 0
         D(MT,DR)                    GAIN         = DEMAND
         BOUNDS     0                 0
                   PLIMIT            CAPACITY

    This model has 2 activity classes:  Production and Transportation,
    which comprise the column strips.  Their domains are cross products
    of primitive sets:  MT (material), SR (supply region), and DR (demand
    region).  There are 2 constraint classes:  Supply balance and Demand,
    which are defined over domains (MT,SR) and (MT,DR), respectively.
    Together with the objective row (COST), there are the first 3 row
    strips.  The last 2 row strips are lower and upper bounds,
    respectively, associated with the activities in the column strips.

    The cell entries may be constant or refer to a data table.  For
    example, each nonzero coefficient of the Supply row strip and
    Production column strip is 1.  The blank in the cell defined by the
    Demand row strip with the Production column strip means the
    associated submatrix is null (all coefficients are zero).

    The PCOST entry is the name of a table over the domain (MT, SR),
    determined by the associated Production column strip.  Similarly, the
    domain of the DEMAND data table is (MT, DR), which is deterimined by
    the domain of the associated Demand row strip.

    This model schema corresponds to the algebraic form:

          Minimize COST:

            COST = Sum[MT,SR | PCOST(MT,SR)*P(MT,SR)] +
                   Sum[MT,SR,DR | TCOST(MT,SR,DR)*T(MT,SR,DR)]

            S(MT,SR) = P(MT,SR) - Sum[DR | T(MT,SR,DR)] = 0

            D(MT,DR) = Sum[SR | GAIN*T(MT,SR,DR)] = DEMAND(MT,SR)

            0 <= P(MT,SR)    <= PLIMIT(MT,SR)
            0 <= T(MT,SR,DR) <= CAPACITY(MT,SR,DR).

    Note that GAIN is just a scalar.  The schema table, as shown above,
    does not distinguish this.  A solution to the ambiguity is to have
    all domains explicitly given.  For example, PCOST should be
    PCOST(MT,SR).  Unfortunately, this uses too much screen space, so a
    better solution is to display the schema table as shown, but allow
    query for the domains for cell entries.  In MODLER, this can be done
    by the DISPLAY and LIST commands.

    The instance schema in ANALYZE may appear as:

                   P(MT,SR)          T(MT,SR,DR)
         COST      100/200           10/20         ...MIN
         S(MT,SR)   1                -1             = 0
         D(MT,DR)                     .9            = 50/150
         :LO        0                 0
         :UP       100/*              *

    This means that, for this instance, the values in table PCOST(MT,SR)
    are in the range 100 to 200, and the values in table TCOST(MT,SR,DR)
    are in the range 10 to 20.  The GAIN parameter is .9 in this
    instance, and all transportation capacities (in data table
    CAPACITY(MT,SR,DR)) are infinite.

    The display of a schema is rectangular, as above, if the width is not
    too great (eg, to fit on the screen).  Otherwise, the relational
    format is displayed with 1 line per cell, which equals the number of
    row strips times the number of column strips.  You can, however, use
    the EQUATION display.  In this example, the result would be as
    follows.

      COST     =  Sum[MT,SR | [100/200] P(MT,SR)]
                + Sum[MT,SR,DR | [10/20] T(MT,SR,DR)]  ...MIN
      S(MT,SR) =  P(MT,SR) - Sum[DR | T(MT,SR,DR)] = 0
      D(MT,DR) =  Sum[SR | .9 T(MT,SR,DR)] = [50/150]

            0 <= P(MT,SR)    <= [100/*]
            0 <= T(MT,SR,DR)

    The 'Sum[...' expression has domain composed of sets that are in the
    activity class' domain but not in the equation's domain.  For example
    the COST equation has null domain, so the sums are over domains sets
    MTxSR for activity class P and over MTxSRxDR for activity class T.
    Similarly, the Sum in the supply equation is over demand regions, DR,
    because it is in the domain of T but not in the domain of S.

    The Sum expression syntax can be suppressed with the NOSUM option, as
    SCHEMA DISPLAY EQUATION //NOSUM (or SCH D * //N).  In this case the
    equation display appears as:

      COST     =  [100/200] P(MT,SR) + [10/20] T(MT,SR,DR)  ...MIN
      S(MT,SR) =  P(MT,SR) - T(MT,SR,DR) = 0
      D(MT,DR) =  .9 T(MT,SR,DR) = [50/150]

    (plus activity bounds as before).  This form is more brief and may
    hence be easier to understand once you recognized the 'implied sums'
    from the domains.  For example, the COST equation has null domain, so
    all sets (MT, SR and DR) are 'free', which implies a sum over them in
    the terms.  Similarly, the supply equation's domain is MTxSR, so
    these sets are 'fixed' across the equation.  This implies no
    summation on the production activity (since its domain is also MTxSR,
    thus binding it to the equation's domain).  The transportation
    activity's domain includes the set DR, which is free (ie, not fixed
    by the domain of the equation), so there is an implied sum over DR.

    The coefficient in a term is either a constant or a range of
    nonzeroes.  For example, the coefficients of P(MT,SR) in the COST
    equation are in the range 100 to 200.  Most likely this came from a
    table (as shown in the MODLER schema) whose values depend upon the
    set members in the domains of the Sum and of the equation.  The same
    notation is used for bounds.  Absence of an upper bound (eg, for T)
    means there is no explicit upper bound (indicated by * in the schema
    table).
