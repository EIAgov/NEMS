* BLSTACK.RUL is instantiated by BLENDRT.RUL to enable a form of
* recursion.

$IF %NSTACK1 = 0 THEN EXIT
$ANALYZE GRAPH LOAD
$ANALYZE GRAPH COPY
$POP 1 MT
$POP 1 R
$POP 1 T

$SET ROW=B%%MT%%R%%T
$LOOP
$IF %ROW = %%ROW THEN GOTO GOTROW
$NEXT R
 ** Balance row %%ROW not in submatrix.
$ANALYZE D R
$EXIT

:GOTROW
  The
$ENTITY %%MT MT
 in
$ENTITY %%R R
 at
$ENTITY %%T T
 comes from
$SET CONJUN=

$SET OP=
$LOOP
$LOOKUP NZ %%ROW,%COLUMN
$IF %VLOOK <= 0 THEN SKIP LOOP
 %%CONJUN
$SET CONJUN=;
$IF %COLUMN(1:1) = P THEN GOTO PURCHASE
$IF %COLUMN(1:1) = O THEN GOTO OPERATE
$IF %COLUMN(1:1) = T THEN GOTO TRANSPRT
$IF %COLUMN(1:1) = I THEN GOTO INVENTRY
 ** Column %COLUMN not recognized.
$EXIT

:PURCHASE
 purchasing
$SKIP LOOP
:OPERATE
 operating
$ENTITY %COLUMN(2:3) UN
 , which requires
$SET OP=%COLUMN
$QUEUE 2 %COLUMN
$SKIP LOOP
:TRANSPRT
$ENTITY %COLUMN(4:4) S
$QUEUE 1 %%MT
$QUEUE 1 %COLUMN(4:4)
$QUEUE 1 %%T
$SKIP LOOP
:INVENTRY
$ENTITY %COLUMN(5:5) T
$QUEUE 1 %%MT
$QUEUE 1 %%R
$QUEUE 1 %COLUMN(5:5)

$NEXT C

$IF @%%OP <> @ THEN GOTO STACK2
 .
$TEXT
$IF %NSTACK2 = 0 THEN GOTO DONE

* STACK 2 HAS AN OPERATION ACTIVITY...WE MUST GET ITS INPUT AND
* ADD ITS MT,R,T TO STACK 1
:STACK2
$POP 2 COLUMN
$IF @%%OP <> @ THEN GOTO LOOP
 Now, operating
$ENTITY %%COLUMN(2:3) UN
 in
$ENTITY %%COLUMN(4:4) R
 at
$ENTITY %%COLUMN(5:5) T
 requires

:LOOP
$LOOP
$LOOKUP NZ %ROW,%%COLUMN
$IF %VLOOK >= 0 THEN SKIP LOOP
$PUSH 1 %ROW(5:5)
$PUSH 1 %ROW(4:4)
$PUSH 1 %ROW(2:3)
$ENTITY %ROW(2:3) MT
 as input.
$GOTO DONE
$NEXT R
 ** Cannot find input for %%COLUMN .
$EXIT

:DONE
* READY FOR NEXT MT,R,T (IF ANY)
$GOTO TOP
