
         Algorithm for Redundancy Test (relative to resident basis)

    The orginal system is y=Ax, L <= x,y <= U.  The combinatorial
    solution (i.e., Stat) causes a re-write of the equations:  u=Mv,
    where u is composed of basic x-variables, then basic y-variables;
    and, v is composed of nonbasic y-variables, then non-basic
    x-variables.  The matrix M is as follows.  First, partition A to
    conform to:

                            |yN|     |B  N| |xB|
                            |  |  =  |    | |  |
                            |yB|     |R  Q| |xN|

    where x = (xB,xN) and y = (yN,yB) is the conformal partition into
    basic and nonbasic parts.

    Then, the first re-write is:

                        |-B  0| |xB|     |-I  N | |yN|
                        |     | |  |  =  |      | |  |
                        |-R  I| |yB|     | 0  Q | |xN|

    The matrix on the left is the full basis matrix, which contains the
    negative of the basic columns from A (called the "structural"
    columns, associated with the x-variables) and the identity for the
    basic "logical" columns (associated with the y-variables).  Denote
    the inverse of the full basis by B*.

    The matrix on the right is the nonbasic portion, including the -unit
    columns for the logicals.  Denote this by N*.  Finally, let
    u=[xB,yB]' denote the basic variables, and let v=[yN,xN]' denote the
    nonbasic variables.  Then,

                                u = B* N* v,

    so M=B*N*.  The redundancy test is as follows.

    Given the re-write u=Mv, we find the range of the i-th row of Mv
    myopically by letting each nonbasic variable in v be at either bound,
    depending on the sign of the coefficient M(i,j).  That is, if M(i,j)
    > 0, then v(j)=U(j) for the maximum of u(i) and v(j)=L(j) for the
    minimum of u(i).  The reverses are set if M(i,j) < 0.

    Let umin(i), umax(i) be the range computed in the above manner.
    Then, the bound u(i) >= L(i) is redundant if umin(i) >= L(i), and the
    bound u(i) <= U(i) is redundant if umax(i) <= U(i).  The basic
    variable u(i) is totally redundant if both of its bounds are
    redundant.

    Infinite bounds are excluded from a redundancy conclusion.  That is,
    if U(i)=*, it does not get classified as redundant.  The redundancies
    are put into row and column blocks as follows.

          Row    block RED.LO has row variables whose lower bounds
                              are redundant.
          Row    block RED.UP has row variables whose upper bounds
                              are redundant.
          Row    block RED.FR has row variables that are totally
                              redundant.

          Column block RED.LO has column variables whose lower
                              bounds are redundant.
          Column block RED.UP has column variables whose upper
                              bounds are redundant.
          Column block RED.FR has column variables that are totally
                              redundant.

    The blocks are created, and an error message is given if a block
    already exists.  If, after testing, a block is empty, it is erased.
    If a basic variable is in some other block, it is moved to this one.

    Note:  If a variable has one infinite bound, it is classified as
           totally redundant if its other bound is redundant.

    See REDUND.EXC, which executes commands to detect and interpret
    redundancies.  See, also, the rule file, REDUND.RUL.
