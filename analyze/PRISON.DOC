                 Notes on Maynard's Prison Guard Assignment LP

    The base case is in the PRISON.xxx files, where xxx is MAT (matrix) and
    MNS (MINOS solution).  The file PRISON.EXC executes the READIN and
    SOLUTION commands, then sets up the basis and writes the packed file,
    PRISON.PCK.  This was done by MOREDATA.EXC, so you need not do it
    again.

    The following files apply to all scenarios:

       PRISON.RUL is a rule file to report results of a scenario (either
                  add to RULBASE.RUL or instantiate by I TEST PRISON).
       PRISON.SYN is the syntax file (READ SYN PRISON to read syntax
                  into memory for any of the scenarios).

    Also, PRISON.OUT is the report generated by PRISON.RUL (after
    specifying OUTPUT PRISON).  The other scenarios are as follows.

    Each scenario has a matrix, MINOS, execution and output file.  The
    matrix file was created by applying the execution file to the base case
    (PRISON), using the FIX command.  The output file was created by
    PRISON.RUL (after specifying OUTPUT PRISONx for x=X, M, MX, resp.).

    Scenario
    ========
    PRISONX   fixes the X-variables to the nearest integer value in the
              base case solution.
    PRISONM   fixes N, Y-variables and Z-variables to Maynard's solution.
    PRISONMX  fixes the X-variables to the nearest integer value in the
              PRISONM solution.

    For the base scenario, the PRISON solution has 138.8 guards at a cost
    of 832.8.  The X-variables are not integer, and no overtime is assigned
    (Y = Z = 0).

    Rounding the base case, scenario PRISONX has 136 guards at a cost of
    847.5, with one 1st overtime assigned every morning and two every
    afternoon, but no 2nd overtime assigned.

    Fixing the number of guards (N=137) and the overtime assignments (Y and
    Z variables) to agree with Maynard's solution, scenario PRISONM has
    non-integer X-values.  The cost is 837.

    Rounding Maynard's LP solution, scenario PRISONMX has 137 guards at a
    cost of 855.  This cost is greater than the (integer, feasible)
    solution obtained in PRISONX.

    If you look at PRISONX.EXC, you will see that the X variables are FIXed
    at their rounded values to create PRISONX.MAT.  As a variation, you
    might try using the ROUND command.  This can be done simply by
    replacing all of the FIX commands with the one command:  ROUND X (note
    that only one bound of the X-variable changes, so it will not be fixed
    in the LP).  You can do this online with the following sequence of
    commands:

        READ P PRISON ; ROUND X ; SUB * ; RENAM PROB PRISONR ; SUB WR

    Now PRISONR.MAT has been created, and you can solve it to see what
    happens.
