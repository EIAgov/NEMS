    Function: Display (rectangular) table of values
    Syntax:   TABLE {ROW | COL} name [,...] key [FOR set[, set]] [//options]

    name := class of row or column
    key := X (level), D (price), or C (objective) for column
           Y (level), P (price) for row
           L (lower bound) or U (upper bound) for either row or column

    The submatrix can contain other rows or columns, but only those
    in the named class(s) are relevant to the table.

    options := SYNTAX | NOSYNTAX | NOSORT
               =================   ======
               overides SYNTAX     suppresses sorting of rows and cols
               switch

       2-Dimensional Set Variations (one row or column class named)
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    If one class name is specified, the [FOR set(s)] option allows
    specification of the stub (first set) and head (second set).
    In this case, a 2-Dimensional table is formed from the variation
    of 2 sets in the named class.  If the domain of the class is null
    or has only 1 set, an error message is given.

    If the FOR option is not used, the first varying set is the head,
    and the second is the stub.  In particular, if the domain has
    exactly two sets, say AxB, then (because rows and columns are in
    name sort order) B will vary first and become the head.  This can
    can be reversed by specifying FOR B,A which makes B the stub.

    If the FOR option is used, one or two sets must follow, and they
    must be in the domain of the class (if not, an error message is
    given).

    If the stub and head sets are A and B, respectively, the table display
    will look as follows.

                         <title>
              ============= B =============
        A     b1     b2     b3    ...  bn
        ====  =============================
          a1  v11    v12    v13   ...  v1n
          a2  v21    v22    v23   ...  v2n
          .
          .
          .
          am  vm1    vm2    vm3   ...  vmn

    The stubs (a1,...,am) are the members of set A that vary.  The
    heads (b1,...,bn) are the members of set B that vary.  The table
    entries (vij) are the key values specified. A blank entry means
    the row or column member is absent from the submatrix.

    If the domain has more than two sets, but the other sets do not
    vary, their members are given in the title.  If a set, other than
    the stub and head, varies, you will see * to indicate this.  For
    example, if the domain is (A,B,C) and the table is for AxB, you
    will see C=* in the title if C varies in the submatrix.

    A footnote mark may appear in an entry (# for quantities, L, U, X,
    or Y;  and, ?  for prices, D or P, and objective coefficients, C.).
    If so, there is a footnote to explain that this means there are
    multiple entries.  Quantities are added, but a footnote does not
    appear if the added quantity is zero.  Objective coefficients are
    combined by displaying the max entry; and, prices are combined by
    displaying the one with max magnitude (regardless of sign).  If the
    multiple entries have the same price or cost, no footnote appears.

    Examples:

     TABLE COL T X
     ...Display levels (X) of submatrix columns whose class is T

     TABLE COL T X //SYNTAX
     ...same as above with syntax used to replace stubs and heads with
        their meanings (truncated to 8 characters)

     TABLE COL T X //NOSORT
     ...same as first case, except rows and columns of table are not sorted

     TABLE COL T X FOR SR,DR
     ...Display levels (X) of submatrix columns whose class is T
        with stub=SR and head=DR

     TABLE COL T X FOR SR,DR //NOSYNTAX,NOSORT
     ...same as above, except syntactic meanings are not substituted (if
        SYNTAX switch is on), and rows and columns are not sorted

     TABLE ROW S U
     ...Display upper bounds (U) of submatrix rows whose class is S

     TABL C P D FOR MT
     ...Display prices (D) of submatrix columns whose class is P
        with stub=MT


           1-Dimensional Set Variation (multiple classes named)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    If more than one class name is specified, they must be separated by
    commas, and the FOR option can be used to specify a common set --
    ie, a set in the domains of all classes.  If the FOR option is not
    specified, there must be a unique choice from the syntax.  In
    either case, the set must be in all domains of the classes named,
    in which case its variation comprises the table's stubs.  The table
    heads in this case of multiple classes are the classes named.

    The domains must have the set in common.  The table appears as:

                         <title>
        A     c1     c2     c3    ...  cn
        ====  ============================
          a1  v11    v12    v13   ...  v1n
          a2  v21    v22    v23   ...  v2n
          .
          .
          .
          am  vm1    vm2    vm3   ...  vmn

    where ci = class i.  Suppose we have column classes P(MT,SR),
    T(MT,SR,DR) and C(MT,DR).  Then, the following examples illustrate
    how to use the multiple table form.

    TABLE COL P,T,C X FOR MT
    ...Display levels (X) of activities P,T and C over the set MT.  If
       MT has members PI,OK and WA (that are in at least one of the
       three classes in the submatrix), the table will appear as:

                            Entries = (Total) Levels
                       MT  P        T        C
                       ==  ========================
                       PI
                       OK
                       WA
       Note that the common set is MT.  The FOR option is not necessary
       since MT is the unique choice of common set.  If set SR is
       specified, an error will appear because SR is not in the domain
       of activity class C.

    TABL C  P,T  C  FOR SR
    ...Display objective coefficients (C) of activities P and T over
       the set SR.  The FOR option is necessary in this case because
       P and T both have set MT in their domains, making both MT and
       SR candidates for the common set.

    See WOODSOLN.RUL, FORESOLN.RUL and BLNDSOLN.RUL for examples of
    using the TABLE command.  The Primer has further examples and
    explanations.
